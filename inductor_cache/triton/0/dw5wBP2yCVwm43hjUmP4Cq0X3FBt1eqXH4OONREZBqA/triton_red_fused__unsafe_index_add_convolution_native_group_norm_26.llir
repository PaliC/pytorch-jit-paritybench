; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
.peel.next:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 3, !dbg !12
  %14 = and i32 %12, 63, !dbg !12
  %15 = lshr i32 %12, 2, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = and i32 %12, 64, !dbg !12
  %18 = lshr exact i32 %17, 2, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = and i32 %12, 128, !dbg !12
  %21 = lshr exact i32 %20, 2, !dbg !12
  %22 = or disjoint i32 %19, %21, !dbg !12
  %23 = or disjoint i32 %11, %14, !dbg !13
  %24 = or disjoint i32 %11, %22, !dbg !13
  %25 = icmp slt i32 %23, 256, !dbg !14
  %26 = icmp slt i32 %24, 256, !dbg !14
  %.lobit2 = lshr exact i32 %17, 6, !dbg !15
  %27 = lshr exact i32 %20, 6, !dbg !15
  %28 = srem i32 %23, 64, !dbg !16
  %29 = shl nsw i32 %28, 1, !dbg !17
  %30 = shl i32 %24, 13, !dbg !18
  %31 = shl i32 %23, 10, !dbg !19
  %32 = sext i32 %31 to i64, !dbg !20
  %invariant.op11 = or disjoint i32 %.lobit2, %27, !dbg !21
  %33 = or disjoint i32 %30, %13
  %34 = shl i32 %12, 6
  %35 = and i32 %34, 192
  %.reass = or disjoint i32 %35, %16
  %36 = or disjoint i32 %18, %.reass
  %37 = or disjoint i32 %36, %21
  %38 = and i32 %12, 255
  %39 = lshr exact i32 %35, 4
  %40 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %39
  %41 = getelementptr float, ptr addrspace(3) %40, i32 %37
  %42 = lshr i32 %38, 6
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %42
  %44 = getelementptr inbounds float, ptr addrspace(3) %43, i32 %38
  %45 = shl i32 %12, 2
  %46 = and i32 %45, 252
  %.reass12 = or disjoint i32 %46, %invariant.op11
  %47 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %46
  %48 = getelementptr float, ptr addrspace(3) %47, i32 %.reass12
  %49 = lshr i32 %38, 2
  %50 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %49
  %51 = getelementptr inbounds float, ptr addrspace(3) %50, i32 %38
  %52 = sext i32 %33 to i64, !dbg !21
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %0, i1 true, i1 true) #3, !dbg !22
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %0, i1 true, i1 true) #3, !dbg !23
  %55 = zext nneg i32 %invariant.op11 to i64, !dbg !24
  %56 = getelementptr i64, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %56, i1 true, i1 true) #3, !dbg !25
  %58 = sext i32 %29 to i64, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %25, i32 0, i1 %25) #3, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !28
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %26, i32 0, i1 %26) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %63 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %63, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %64 = load float, ptr addrspace(3) %44, align 4, !dbg !29
  %65 = lshr i64 %53, 60, !dbg !30
  %66 = and i64 %65, 8, !dbg !30
  %67 = add i64 %66, %53, !dbg !30
  %68 = lshr i64 %54, 60, !dbg !31
  %69 = and i64 %68, 8, !dbg !31
  %70 = add i64 %69, %54, !dbg !31
  %71 = lshr i64 %57, 60, !dbg !32
  %72 = and i64 %71, 8, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !33
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %72, !dbg !33
  %.idx.peel = shl i64 %70, 5, !dbg !33
  %75 = getelementptr i8, ptr addrspace(1) %74, i64 %.idx.peel, !dbg !33
  %.idx4.peel = shl i64 %67, 8, !dbg !33
  %76 = getelementptr i8, ptr addrspace(1) %75, i64 %.idx4.peel, !dbg !33
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %32, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %25, i32 0, i1 %25) #3, !dbg !34
  %79 = bitcast i32 %60 to float, !dbg !27
  %80 = bitcast i32 %78 to float, !dbg !34
  %81 = fadd float %79, %80, !dbg !35
  %82 = fadd float %64, %81, !dbg !36
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %84 = bitcast float %82 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %84, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %85 = load i32, ptr addrspace(3) %51, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %83, i1 %26) #3, !dbg !38
  %86 = select i1 %25, float 1.000000e+00, float 0.000000e+00, !dbg !39
  %87 = select i1 %25, float %82, float 0.000000e+00, !dbg !40
  %invariant.op = or i32 %.lobit2, %27, !dbg !21
  br label %88, !dbg !21

88:                                               ; preds = %.peel.next, %88
  %indvars.iv = phi i64 [ 4, %.peel.next ], [ %indvars.iv.next, %88 ]
  %89 = phi float [ %86, %.peel.next ], [ %144, %88 ]
  %90 = phi float [ 0.000000e+00, %.peel.next ], [ %143, %88 ]
  %91 = phi float [ %87, %.peel.next ], [ %142, %88 ]
  %92 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %93 = lshr i64 %indvars.iv, 8, !dbg !41
  %94 = and i64 %93, 15, !dbg !42
  %95 = lshr i64 %indvars.iv, 4, !dbg !43
  %96 = and i64 %95, 15, !dbg !44
  %.masked = and i32 %92, 12, !dbg !45
  %.reass19.reass = or i32 %.masked, %invariant.op
  %97 = lshr i32 %92, 12, !dbg !46
  %98 = getelementptr i64, ptr addrspace(1) %0, i64 %94, !dbg !47
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %98, i1 true, i1 true) #3, !dbg !22
  %100 = getelementptr i64, ptr addrspace(1) %0, i64 %96, !dbg !48
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %100, i1 true, i1 true) #3, !dbg !23
  %102 = zext nneg i32 %.reass19.reass to i64, !dbg !24
  %103 = getelementptr i64, ptr addrspace(1) %0, i64 %102, !dbg !24
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %103, i1 true, i1 true) #3, !dbg !25
  %105 = add nuw nsw i32 %97, %29, !dbg !49
  %106 = sext i32 %105 to i64, !dbg !26
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !26
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %25, i32 0, i1 %25) #3, !dbg !27
  %109 = bitcast i32 %108 to float, !dbg !27
  %110 = add nuw nsw i64 %indvars.iv, %52, !dbg !50
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %110, !dbg !28
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %26, i32 0, i1 %26) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %113 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %113, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %114 = load float, ptr addrspace(3) %44, align 4, !dbg !29
  %115 = lshr i64 %99, 60, !dbg !30
  %116 = and i64 %115, 8, !dbg !30
  %117 = add i64 %116, %99, !dbg !30
  %118 = lshr i64 %101, 60, !dbg !31
  %119 = and i64 %118, 8, !dbg !31
  %120 = add i64 %119, %101, !dbg !31
  %121 = lshr i64 %104, 60, !dbg !32
  %122 = and i64 %121, 8, !dbg !32
  %123 = shl nuw nsw i32 %97, 9, !dbg !51
  %124 = zext nneg i32 %123 to i64, !dbg !52
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !33
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %122, !dbg !33
  %.idx = shl i64 %120, 5, !dbg !33
  %127 = getelementptr i8, ptr addrspace(1) %126, i64 %.idx, !dbg !33
  %.idx4 = shl i64 %117, 8, !dbg !33
  %128 = getelementptr i8, ptr addrspace(1) %127, i64 %.idx4, !dbg !33
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %124, !dbg !33
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %32, !dbg !33
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %25, i32 0, i1 %25) #3, !dbg !34
  %132 = bitcast i32 %131 to float, !dbg !34
  %133 = fadd float %109, %132, !dbg !35
  %134 = fadd float %114, %133, !dbg !36
  %135 = fsub float %134, %91, !dbg !53
  %136 = fadd float %89, 1.000000e+00, !dbg !57
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %136) #3, !dbg !58
  %138 = fadd float %91, %137, !dbg !59
  %139 = fsub float %134, %138, !dbg !60
  %140 = fmul float %135, %139, !dbg !61
  %141 = fadd float %90, %140, !dbg !62
  %142 = select i1 %25, float %138, float %91, !dbg !40
  %143 = select i1 %25, float %141, float %90, !dbg !63
  %144 = select i1 %25, float %136, float %89, !dbg !39
  %145 = getelementptr float, ptr addrspace(1) %4, i64 %110, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %146 = bitcast float %134 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %146, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %147 = load i32, ptr addrspace(3) %51, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %145, i1 %26) #3, !dbg !38
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !21
  %148 = icmp samesign ult i64 %indvars.iv, 8188, !dbg !21
  br i1 %148, label %88, label %.loopexit, !dbg !21, !llvm.loop !64

.loopexit:                                        ; preds = %88
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %149 = lshr i32 %12, 6, !dbg !66
  %150 = and i32 %149, 3, !dbg !66
  %151 = shl nuw nsw i32 %14, 2, !dbg !66
  %152 = or disjoint i32 %151, %150, !dbg !66
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !66
  %154 = bitcast float %142 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #3, !dbg !66
  %155 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %152, !dbg !66
  %156 = bitcast float %143 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #3, !dbg !66
  %157 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %152, !dbg !66
  %158 = bitcast float %144 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #3, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %159 = icmp slt i32 %12, 256, !dbg !66
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !66
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %159) #3, !dbg !66
  %162 = bitcast i32 %161 to float, !dbg !66
  %163 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %12, !dbg !66
  %164 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %163, i1 %159) #3, !dbg !66
  %165 = bitcast i32 %164 to float, !dbg !66
  %166 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %12, !dbg !66
  %167 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %166, i1 %159) #3, !dbg !66
  %168 = bitcast i32 %167 to float, !dbg !66
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !66
  %170 = bitcast i32 %169 to float, !dbg !66
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 2, i32 31), !dbg !66
  %172 = bitcast i32 %171 to float, !dbg !66
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !66
  %174 = bitcast i32 %173 to float, !dbg !66
  %175 = fsub float %170, %162, !dbg !68
  %176 = fadd float %168, %174, !dbg !70
  %177 = fcmp oeq float %176, 0.000000e+00, !dbg !71
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %176) #3, !dbg !72
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !73
  %180 = fmul float %175, %179, !dbg !74
  %181 = fadd float %180, %162, !dbg !75
  %182 = fadd float %165, %172, !dbg !76
  %183 = fmul float %175, %175, !dbg !77
  %184 = fmul float %183, %168, !dbg !78
  %185 = fmul float %184, %179, !dbg !79
  %186 = fadd float %182, %185, !dbg !80
  %187 = bitcast float %181 to i32, !dbg !66
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !66
  %189 = bitcast i32 %188 to float, !dbg !66
  %190 = bitcast float %186 to i32, !dbg !66
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 1, i32 31), !dbg !66
  %192 = bitcast i32 %191 to float, !dbg !66
  %193 = bitcast float %176 to i32, !dbg !66
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 1, i32 31), !dbg !66
  %195 = bitcast i32 %194 to float, !dbg !66
  %196 = fsub float %189, %181, !dbg !68
  %197 = fadd float %176, %195, !dbg !70
  %198 = fcmp oeq float %197, 0.000000e+00, !dbg !71
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %197) #3, !dbg !72
  %200 = select i1 %198, float 0.000000e+00, float %199, !dbg !73
  %201 = fmul float %196, %200, !dbg !74
  %202 = fadd float %181, %201, !dbg !75
  %203 = fadd float %186, %192, !dbg !76
  %204 = fmul float %196, %196, !dbg !77
  %205 = fmul float %176, %204, !dbg !78
  %206 = fmul float %200, %205, !dbg !79
  %207 = fadd float %203, %206, !dbg !80
  %208 = icmp eq i32 %13, 0, !dbg !66
  %209 = and i1 %159, %208, !dbg !66
  %210 = bitcast float %202 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %210, i1 %209) #3, !dbg !66
  %211 = bitcast float %207 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %211, i1 %209) #3, !dbg !66
  %212 = bitcast float %197 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %212, i1 %209) #3, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !66
  %214 = load i32, ptr addrspace(3) %213, align 16, !dbg !66
  %215 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %151, !dbg !66
  %216 = load i32, ptr addrspace(3) %215, align 16, !dbg !66
  %217 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %151, !dbg !66
  %218 = load i32, ptr addrspace(3) %217, align 16, !dbg !66
  %219 = sext i32 %23 to i64, !dbg !81
  %220 = getelementptr float, ptr addrspace(1) %5, i64 %219, !dbg !81
  %221 = icmp eq i32 %150, 0, !dbg !82
  %222 = and i1 %221, %25, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %220, i1 %222) #3, !dbg !82
  %223 = getelementptr float, ptr addrspace(1) %6, i64 %219, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %223, i1 %222) #3, !dbg !84
  %224 = getelementptr float, ptr addrspace(1) %7, i64 %219, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %218, ptr addrspace(1) %224, i1 %222) #3, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctnhk2r467eoeoptdlq6oaxcbntq3dkpsvrynoq6gnxejh5fsqdg.py", directory: "inductor_cache/tn")
!4 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_26", linkageName: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 42, column: 42, scope: !7)
!18 = !DILocation(line: 43, column: 45, scope: !7)
!19 = !DILocation(line: 54, column: 76, scope: !7)
!20 = !DILocation(line: 54, column: 71, scope: !7)
!21 = !DILocation(line: 31, column: 36, scope: !7)
!22 = !DILocation(line: 39, column: 39, scope: !7)
!23 = !DILocation(line: 40, column: 39, scope: !7)
!24 = !DILocation(line: 41, column: 34, scope: !7)
!25 = !DILocation(line: 41, column: 39, scope: !7)
!26 = !DILocation(line: 42, column: 35, scope: !7)
!27 = !DILocation(line: 42, column: 47, scope: !7)
!28 = !DILocation(line: 43, column: 35, scope: !7)
!29 = !DILocation(line: 43, column: 50, scope: !7)
!30 = !DILocation(line: 47, column: 36, scope: !7)
!31 = !DILocation(line: 50, column: 36, scope: !7)
!32 = !DILocation(line: 53, column: 39, scope: !7)
!33 = !DILocation(line: 54, column: 35, scope: !7)
!34 = !DILocation(line: 54, column: 81, scope: !7)
!35 = !DILocation(line: 55, column: 24, scope: !7)
!36 = !DILocation(line: 56, column: 24, scope: !7)
!37 = !DILocation(line: 64, column: 29, scope: !7)
!38 = !DILocation(line: 64, column: 51, scope: !7)
!39 = !DILocation(line: 63, column: 66, scope: !7)
!40 = !DILocation(line: 61, column: 62, scope: !7)
!41 = !DILocation(line: 34, column: 25, scope: !7)
!42 = !DILocation(line: 34, column: 32, scope: !7)
!43 = !DILocation(line: 35, column: 25, scope: !7)
!44 = !DILocation(line: 35, column: 31, scope: !7)
!45 = !DILocation(line: 36, column: 23, scope: !7)
!46 = !DILocation(line: 37, column: 23, scope: !7)
!47 = !DILocation(line: 39, column: 34, scope: !7)
!48 = !DILocation(line: 40, column: 34, scope: !7)
!49 = !DILocation(line: 42, column: 40, scope: !7)
!50 = !DILocation(line: 43, column: 40, scope: !7)
!51 = !DILocation(line: 54, column: 66, scope: !7)
!52 = !DILocation(line: 54, column: 62, scope: !7)
!53 = !DILocation(line: 183, column: 24, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 59, column: 55, scope: !7)
!57 = !DILocation(line: 184, column: 30, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 185, column: 34, scope: !54, inlinedAt: !56)
!59 = !DILocation(line: 185, column: 26, scope: !54, inlinedAt: !56)
!60 = !DILocation(line: 186, column: 39, scope: !54, inlinedAt: !56)
!61 = !DILocation(line: 186, column: 31, scope: !54, inlinedAt: !56)
!62 = !DILocation(line: 186, column: 22, scope: !54, inlinedAt: !56)
!63 = !DILocation(line: 62, column: 58, scope: !7)
!64 = distinct !{!64, !65}
!65 = !{!"llvm.loop.peeled.count", i32 1}
!66 = !DILocation(line: 204, column: 46, scope: !54, inlinedAt: !67)
!67 = !DILocation(line: 66, column: 44, scope: !7)
!68 = !DILocation(line: 192, column: 21, scope: !69, inlinedAt: !67)
!69 = distinct !DILexicalBlockFile(scope: !54, file: !55, discriminator: 0)
!70 = !DILocation(line: 193, column: 28, scope: !69, inlinedAt: !67)
!71 = !DILocation(line: 194, column: 39, scope: !69, inlinedAt: !67)
!72 = !DILocation(line: 194, column: 60, scope: !69, inlinedAt: !67)
!73 = !DILocation(line: 194, column: 49, scope: !69, inlinedAt: !67)
!74 = !DILocation(line: 196, column: 25, scope: !69, inlinedAt: !67)
!75 = !DILocation(line: 196, column: 17, scope: !69, inlinedAt: !67)
!76 = !DILocation(line: 197, column: 15, scope: !69, inlinedAt: !67)
!77 = !DILocation(line: 197, column: 30, scope: !69, inlinedAt: !67)
!78 = !DILocation(line: 197, column: 38, scope: !69, inlinedAt: !67)
!79 = !DILocation(line: 197, column: 49, scope: !69, inlinedAt: !67)
!80 = !DILocation(line: 197, column: 22, scope: !69, inlinedAt: !67)
!81 = !DILocation(line: 71, column: 25, scope: !7)
!82 = !DILocation(line: 71, column: 37, scope: !7)
!83 = !DILocation(line: 72, column: 25, scope: !7)
!84 = !DILocation(line: 72, column: 37, scope: !7)
!85 = !DILocation(line: 73, column: 25, scope: !7)
!86 = !DILocation(line: 73, column: 37, scope: !7)
!87 = !DILocation(line: 73, column: 4, scope: !7)
