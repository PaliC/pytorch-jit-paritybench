; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_68(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 1556, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %16 = sdiv i32 %.frozen, 389, !dbg !15
  %17 = mul i32 %16, 389, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %.frozen6 = freeze i32 %14, !dbg !15
  %18 = sdiv i32 %.frozen6, 389, !dbg !15
  %19 = mul i32 %18, 389, !dbg !16
  %.decomposed7 = sub i32 %.frozen6, %19, !dbg !16
  %20 = shl nsw i32 %.decomposed, 2, !dbg !17
  %21 = shl nsw i32 %.decomposed7, 2, !dbg !17
  %22 = mul i32 %16, 1568, !dbg !18
  %23 = mul i32 %18, 1568, !dbg !18
  %24 = add i32 %20, %22, !dbg !19
  %25 = add i32 %21, %23, !dbg !19
  %26 = sext i32 %24 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = sext i32 %25 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %15) #3, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %15) #3, !dbg !21
  %32 = sext i32 %.decomposed to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !22
  %34 = sext i32 %.decomposed7 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %15) #3, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %15) #3, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #3, !dbg !25
  %41 = bitcast i32 %40 to float, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %15) #3, !dbg !25
  %43 = bitcast i32 %42 to float, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %15) #3, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %15) #3, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %15) #3, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %15) #3, !dbg !29
  %52 = or disjoint i32 %20, 1, !dbg !30
  %53 = or disjoint i32 %21, 1, !dbg !30
  %54 = add i32 %52, %22, !dbg !31
  %55 = add i32 %53, %23, !dbg !31
  %56 = sext i32 %54 to i64, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !32
  %58 = sext i32 %55 to i64, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %15) #3, !dbg !33
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %15) #3, !dbg !33
  %62 = or disjoint i32 %20, 2, !dbg !34
  %63 = or disjoint i32 %21, 2, !dbg !34
  %64 = add i32 %62, %22, !dbg !35
  %65 = add i32 %63, %23, !dbg !35
  %66 = sext i32 %64 to i64, !dbg !36
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !36
  %68 = sext i32 %65 to i64, !dbg !36
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !36
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %15) #3, !dbg !37
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %15) #3, !dbg !37
  %72 = or disjoint i32 %20, 3, !dbg !38
  %73 = or disjoint i32 %21, 3, !dbg !38
  %74 = add i32 %72, %22, !dbg !39
  %75 = add i32 %73, %23, !dbg !39
  %76 = sext i32 %74 to i64, !dbg !40
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !40
  %78 = sext i32 %75 to i64, !dbg !40
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !40
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %15) #3, !dbg !41
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %15) #3, !dbg !41
  %82 = fadd float %41, 0x3EE4F8B580000000, !dbg !42
  %83 = fadd float %43, 0x3EE4F8B580000000, !dbg !42
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %84, 0, !dbg !43
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %85, 0, !dbg !43
  br i1 %.not.i, label %91, label %86, !dbg !43

86:                                               ; preds = %7
  br i1 %.not1.i, label %89, label %87, !dbg !43

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

91:                                               ; preds = %7
  br i1 %.not1.i, label %94, label %92, !dbg !43

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %87, %89, %92, %94
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !43
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i1 = icmp eq i32 %96, 0, !dbg !43
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i4 = icmp eq i32 %97, 0, !dbg !43
  br i1 %.not.i1, label %103, label %98, !dbg !43

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !43

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %106, label %104, !dbg !43

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

__nv_sqrtf.exit5:                                 ; preds = %99, %101, %104, %106
  %.0.i3 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !43
  %108 = insertelement <8 x i32> poison, i32 %81, i64 0, !dbg !41
  %109 = insertelement <8 x i32> %108, i32 %80, i64 1, !dbg !41
  %110 = insertelement <8 x i32> %109, i32 %71, i64 2, !dbg !41
  %111 = insertelement <8 x i32> %110, i32 %70, i64 3, !dbg !41
  %112 = insertelement <8 x i32> %111, i32 %61, i64 4, !dbg !41
  %113 = insertelement <8 x i32> %112, i32 %60, i64 5, !dbg !41
  %114 = insertelement <8 x i32> %113, i32 %31, i64 6, !dbg !41
  %115 = insertelement <8 x i32> %114, i32 %30, i64 7, !dbg !41
  %116 = bitcast <8 x i32> %115 to <8 x float>, !dbg !41
  %117 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !23
  %118 = insertelement <2 x i32> %117, i32 %36, i64 1, !dbg !23
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !23
  %120 = shufflevector <2 x float> %119, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !23
  %121 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !29
  %122 = insertelement <2 x i32> %121, i32 %50, i64 1, !dbg !29
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !29
  %124 = shufflevector <2 x float> %123, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !29
  %125 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !27
  %126 = insertelement <2 x i32> %125, i32 %46, i64 1, !dbg !27
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !27
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !27
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !44
  %131 = fsub <8 x float> %116, %120, !dbg !45
  %132 = insertelement <8 x float> poison, float %130, i64 0, !dbg !46
  %133 = insertelement <8 x float> %132, float %129, i64 1, !dbg !46
  %134 = shufflevector <8 x float> %133, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !46
  %135 = fmul <8 x float> %131, %134, !dbg !46
  %136 = fmul <8 x float> %135, %128, !dbg !47
  %137 = fadd <8 x float> %136, %124, !dbg !48
  %138 = fcmp olt <8 x float> %137, zeroinitializer, !dbg !49
  %139 = extractelement <8 x i1> %138, i64 7, !dbg !53
  %140 = extractelement <8 x float> %137, i64 7, !dbg !53
  %141 = select i1 %139, float 0.000000e+00, float %140, !dbg !53
  %142 = extractelement <8 x i1> %138, i64 6, !dbg !53
  %143 = extractelement <8 x float> %137, i64 6, !dbg !53
  %144 = select i1 %142, float 0.000000e+00, float %143, !dbg !53
  %145 = extractelement <8 x i1> %138, i64 5, !dbg !55
  %146 = extractelement <8 x float> %137, i64 5, !dbg !55
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !55
  %148 = extractelement <8 x i1> %138, i64 4, !dbg !55
  %149 = extractelement <8 x float> %137, i64 4, !dbg !55
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !55
  %151 = fadd float %141, %147, !dbg !57
  %152 = fadd float %144, %150, !dbg !57
  %153 = extractelement <8 x i1> %138, i64 3, !dbg !58
  %154 = extractelement <8 x float> %137, i64 3, !dbg !58
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !58
  %156 = extractelement <8 x i1> %138, i64 2, !dbg !58
  %157 = extractelement <8 x float> %137, i64 2, !dbg !58
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !58
  %159 = fadd float %155, %151, !dbg !60
  %160 = fadd float %158, %152, !dbg !60
  %161 = extractelement <8 x i1> %138, i64 1, !dbg !61
  %162 = extractelement <8 x float> %137, i64 1, !dbg !61
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !61
  %164 = extractelement <8 x i1> %138, i64 0, !dbg !61
  %165 = extractelement <8 x float> %137, i64 0, !dbg !61
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !61
  %167 = fadd float %163, %159, !dbg !62
  %168 = fadd float %166, %160, !dbg !62
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float 4.000000e+00) #3, !dbg !63
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float 4.000000e+00) #3, !dbg !63
  %171 = sext i32 %13 to i64, !dbg !64
  %172 = getelementptr float, ptr addrspace(1) %5, i64 %171, !dbg !64
  %173 = bitcast float %169 to i32, !dbg !65
  %174 = bitcast float %170 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %172, i1 %15) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4ul4ity52tprmqfdernmq2a63xyv6ubxpz2pjopk23vlr5qjfsn.py", directory: "inductor_cache/4u")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_68, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_68, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_68", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_68", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 42, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 47, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 35, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 35, scope: !7)
!26 = !DILocation(line: 30, column: 31, scope: !7)
!27 = !DILocation(line: 30, column: 36, scope: !7)
!28 = !DILocation(line: 31, column: 31, scope: !7)
!29 = !DILocation(line: 31, column: 36, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 32, column: 42, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 52, scope: !7)
!34 = !DILocation(line: 33, column: 35, scope: !7)
!35 = !DILocation(line: 33, column: 42, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 52, scope: !7)
!38 = !DILocation(line: 34, column: 35, scope: !7)
!39 = !DILocation(line: 34, column: 42, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 52, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 26, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 64, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !54)
!54 = !DILocation(line: 47, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !56)
!56 = !DILocation(line: 52, column: 42, scope: !7)
!57 = !DILocation(line: 53, column: 20, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !59)
!59 = !DILocation(line: 58, column: 42, scope: !7)
!60 = !DILocation(line: 59, column: 20, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 68, column: 25, scope: !7)
!65 = !DILocation(line: 68, column: 37, scope: !7)
!66 = !DILocation(line: 68, column: 4, scope: !7)
