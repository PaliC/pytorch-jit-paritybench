; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 16, !dbg !14
  %13 = mul i32 %12, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = shl nsw i32 %.decomposed, 1, !dbg !16
  %15 = icmp sgt i32 %.decomposed, -1, !dbg !17
  %16 = shl i32 %12, 6, !dbg !18
  %17 = add i32 %14, %16, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = or disjoint i32 %17, 1, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = icmp ult i32 %.decomposed, 16, !dbg !23
  %24 = or disjoint i32 %17, 2, !dbg !24
  %25 = sext i32 %24 to i64, !dbg !25
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !25
  %27 = add i32 %17, 32, !dbg !26
  %28 = sext i32 %27 to i64, !dbg !27
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !27
  %30 = add i32 %17, 33, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !29
  %33 = add i32 %17, 34, !dbg !30
  %34 = sext i32 %33 to i64, !dbg !31
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !31
  %36 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !32
  %37 = insertelement <2 x i32> %36, i32 %11, i64 1, !dbg !32
  %38 = srem <2 x i32> %37, splat (i32 16), !dbg !32
  %39 = extractelement <2 x i32> %38, i64 0, !dbg !33
  %40 = icmp sgt i32 %39, -1, !dbg !34
  %41 = extractelement <2 x i32> %38, i64 1, !dbg !33
  %42 = shl nsw i32 %41, 1, !dbg !16
  %43 = icmp sgt i32 %41, -1, !dbg !17
  %44 = or i32 %39, %.decomposed, !dbg !33
  %45 = icmp sgt i32 %44, -1, !dbg !33
  %46 = or i32 %39, %41, !dbg !33
  %47 = icmp sgt i32 %46, -1, !dbg !33
  %48 = add i32 %16, %42, !dbg !19
  %49 = sext i32 %48 to i64, !dbg !20
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !20
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %45, i32 -8388608, i1 %45) #1, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %47, i32 -8388608, i1 %47) #1, !dbg !35
  %53 = or disjoint i32 %48, 1, !dbg !21
  %54 = sext i32 %53 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %45, i32 -8388608, i1 %45) #1, !dbg !36
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %47, i32 -8388608, i1 %47) #1, !dbg !36
  %58 = add nsw <2 x i32> %38, splat (i32 1), !dbg !37
  %59 = extractelement <2 x i32> %58, i64 1, !dbg !38
  %60 = icmp ult i32 %59, 16, !dbg !23
  %61 = and i1 %23, %40, !dbg !39
  %62 = and i1 %60, %40, !dbg !39
  %63 = add i32 %48, 2, !dbg !24
  %64 = sext i32 %63 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %61, i32 -8388608, i1 %61) #1, !dbg !40
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %62, i32 -8388608, i1 %62) #1, !dbg !40
  %68 = add i32 %48, 32, !dbg !26
  %69 = sext i32 %68 to i64, !dbg !27
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !27
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %45, i32 -8388608, i1 %45) #1, !dbg !41
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %47, i32 -8388608, i1 %47) #1, !dbg !41
  %73 = add i32 %48, 33, !dbg !28
  %74 = sext i32 %73 to i64, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !29
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %45, i32 -8388608, i1 %45) #1, !dbg !42
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %47, i32 -8388608, i1 %47) #1, !dbg !42
  %78 = add i32 %48, 34, !dbg !30
  %79 = sext i32 %78 to i64, !dbg !31
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !31
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %61, i32 -8388608, i1 %61) #1, !dbg !43
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %62, i32 -8388608, i1 %62) #1, !dbg !43
  %83 = extractelement <2 x i32> %58, i64 0, !dbg !38
  %84 = icmp ult i32 %83, 16, !dbg !37
  %85 = and i1 %15, %84, !dbg !44
  %86 = and i1 %43, %84, !dbg !44
  %87 = add i32 %17, 64, !dbg !45
  %88 = add i32 %48, 64, !dbg !45
  %89 = sext i32 %87 to i64, !dbg !46
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !46
  %91 = sext i32 %88 to i64, !dbg !46
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !46
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %85, i32 -8388608, i1 %85) #1, !dbg !47
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %86, i32 -8388608, i1 %86) #1, !dbg !47
  %95 = add i32 %17, 65, !dbg !48
  %96 = add i32 %48, 65, !dbg !48
  %97 = sext i32 %95 to i64, !dbg !49
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !49
  %99 = sext i32 %96 to i64, !dbg !49
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !49
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %85, i32 -8388608, i1 %85) #1, !dbg !50
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %86, i32 -8388608, i1 %86) #1, !dbg !50
  %103 = or i32 %83, %.decomposed, !dbg !38
  %104 = icmp ult i32 %103, 16, !dbg !38
  %105 = or i32 %83, %59, !dbg !38
  %106 = icmp ult i32 %105, 16, !dbg !38
  %107 = add i32 %17, 66, !dbg !51
  %108 = add i32 %48, 66, !dbg !51
  %109 = sext i32 %107 to i64, !dbg !52
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !52
  %111 = sext i32 %108 to i64, !dbg !52
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !52
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %104, i32 -8388608, i1 %104) #1, !dbg !53
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %106, i32 -8388608, i1 %106) #1, !dbg !53
  %115 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !35
  %116 = insertelement <2 x i32> %115, i32 %52, i64 1, !dbg !35
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !35
  %118 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !36
  %119 = insertelement <2 x i32> %118, i32 %57, i64 1, !dbg !36
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !36
  %121 = fcmp ogt <2 x float> %120, %117, !dbg !54
  %122 = fcmp uno <2 x float> %120, zeroinitializer, !dbg !58
  %123 = or <2 x i1> %121, %122, !dbg !59
  %.v = select <2 x i1> %123, <2 x i32> %119, <2 x i32> %116, !dbg !60
  %124 = bitcast <2 x i32> %.v to <2 x float>, !dbg !60
  %125 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !40
  %126 = insertelement <2 x i32> %125, i32 %67, i64 1, !dbg !40
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !40
  %128 = fcmp olt <2 x float> %124, %127, !dbg !61
  %129 = fcmp uno <2 x float> %127, zeroinitializer, !dbg !63
  %130 = or <2 x i1> %129, %128, !dbg !64
  %.v1 = select <2 x i1> %130, <2 x i32> %126, <2 x i32> %.v, !dbg !65
  %131 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !65
  %132 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !41
  %133 = insertelement <2 x i32> %132, i32 %72, i64 1, !dbg !41
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !41
  %135 = fcmp olt <2 x float> %131, %134, !dbg !66
  %136 = fcmp uno <2 x float> %134, zeroinitializer, !dbg !68
  %137 = or <2 x i1> %136, %135, !dbg !69
  %.v2 = select <2 x i1> %137, <2 x i32> %133, <2 x i32> %.v1, !dbg !70
  %138 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !70
  %139 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !42
  %140 = insertelement <2 x i32> %139, i32 %77, i64 1, !dbg !42
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !42
  %142 = fcmp olt <2 x float> %138, %141, !dbg !71
  %143 = fcmp uno <2 x float> %141, zeroinitializer, !dbg !73
  %144 = or <2 x i1> %143, %142, !dbg !74
  %.v3 = select <2 x i1> %144, <2 x i32> %140, <2 x i32> %.v2, !dbg !75
  %145 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !75
  %146 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !43
  %147 = insertelement <2 x i32> %146, i32 %82, i64 1, !dbg !43
  %148 = bitcast <2 x i32> %147 to <2 x float>, !dbg !43
  %149 = fcmp olt <2 x float> %145, %148, !dbg !76
  %150 = fcmp uno <2 x float> %148, zeroinitializer, !dbg !78
  %151 = or <2 x i1> %150, %149, !dbg !79
  %.v4 = select <2 x i1> %151, <2 x i32> %147, <2 x i32> %.v3, !dbg !80
  %152 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !80
  %153 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !47
  %154 = insertelement <2 x i32> %153, i32 %94, i64 1, !dbg !47
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !47
  %156 = fcmp olt <2 x float> %152, %155, !dbg !81
  %157 = fcmp uno <2 x float> %155, zeroinitializer, !dbg !83
  %158 = or <2 x i1> %157, %156, !dbg !84
  %.v5 = select <2 x i1> %158, <2 x i32> %154, <2 x i32> %.v4, !dbg !85
  %159 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !85
  %160 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !50
  %161 = insertelement <2 x i32> %160, i32 %102, i64 1, !dbg !50
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !50
  %163 = fcmp olt <2 x float> %159, %162, !dbg !86
  %164 = fcmp uno <2 x float> %162, zeroinitializer, !dbg !88
  %165 = or <2 x i1> %164, %163, !dbg !89
  %.v6 = select <2 x i1> %165, <2 x i32> %161, <2 x i32> %.v5, !dbg !90
  %166 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !90
  %167 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !53
  %168 = insertelement <2 x i32> %167, i32 %114, i64 1, !dbg !53
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !53
  %170 = fcmp olt <2 x float> %166, %169, !dbg !91
  %171 = bitcast i32 %113 to float, !dbg !93
  %172 = fcmp uno float %171, 0.000000e+00, !dbg !93
  %173 = bitcast i32 %114 to float, !dbg !93
  %174 = fcmp uno float %173, 0.000000e+00, !dbg !93
  %175 = extractelement <2 x i1> %170, i64 0, !dbg !94
  %176 = or i1 %172, %175, !dbg !94
  %177 = extractelement <2 x i1> %170, i64 1, !dbg !94
  %178 = or i1 %174, %177, !dbg !94
  %179 = zext <2 x i1> %121 to <2 x i8>, !dbg !95
  %180 = select <2 x i1> %128, <2 x i8> splat (i8 2), <2 x i8> %179, !dbg !96
  %181 = select <2 x i1> %135, <2 x i8> splat (i8 3), <2 x i8> %180, !dbg !97
  %182 = select <2 x i1> %142, <2 x i8> splat (i8 4), <2 x i8> %181, !dbg !98
  %183 = select <2 x i1> %149, <2 x i8> splat (i8 5), <2 x i8> %182, !dbg !99
  %184 = select <2 x i1> %156, <2 x i8> splat (i8 6), <2 x i8> %183, !dbg !100
  %185 = select <2 x i1> %163, <2 x i8> splat (i8 7), <2 x i8> %184, !dbg !101
  %186 = select <2 x i1> %170, <2 x i8> splat (i8 8), <2 x i8> %185, !dbg !102
  %187 = sext i32 %10 to i64, !dbg !103
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %187, !dbg !103
  %189 = extractelement <2 x i32> %.v6, i64 0, !dbg !104
  %190 = select i1 %176, i32 %113, i32 %189, !dbg !105
  %191 = extractelement <2 x i32> %.v6, i64 1, !dbg !104
  %192 = select i1 %178, i32 %114, i32 %191, !dbg !105
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %190, i32 %192, ptr addrspace(1) %188, i1 true) #1, !dbg !104
  %193 = getelementptr i8, ptr addrspace(1) %2, i64 %187, !dbg !106
  %194 = bitcast <2 x i8> %186 to i16, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %194, ptr addrspace(1) %193, i1 true) #1, !dbg !107
  ret void, !dbg !108
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyby4u4aazvjfa5ugjmc4jcetcd3lohcylkjwmk3rwzqc3uxgtkf.py", directory: "inductor_cache/yb")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_13", linkageName: "triton_poi_fused_max_pool2d_with_indices_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 13, scope: !7)
!17 = !DILocation(line: 35, column: 19, scope: !7)
!18 = !DILocation(line: 39, column: 41, scope: !7)
!19 = !DILocation(line: 39, column: 38, scope: !7)
!20 = !DILocation(line: 39, column: 31, scope: !7)
!21 = !DILocation(line: 45, column: 42, scope: !7)
!22 = !DILocation(line: 45, column: 31, scope: !7)
!23 = !DILocation(line: 50, column: 20, scope: !7)
!24 = !DILocation(line: 52, column: 42, scope: !7)
!25 = !DILocation(line: 52, column: 31, scope: !7)
!26 = !DILocation(line: 59, column: 43, scope: !7)
!27 = !DILocation(line: 59, column: 31, scope: !7)
!28 = !DILocation(line: 62, column: 43, scope: !7)
!29 = !DILocation(line: 62, column: 31, scope: !7)
!30 = !DILocation(line: 65, column: 43, scope: !7)
!31 = !DILocation(line: 65, column: 31, scope: !7)
!32 = !DILocation(line: 24, column: 27, scope: !7)
!33 = !DILocation(line: 38, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 39, column: 46, scope: !7)
!36 = !DILocation(line: 45, column: 50, scope: !7)
!37 = !DILocation(line: 70, column: 20, scope: !7)
!38 = !DILocation(line: 77, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 19, scope: !7)
!40 = !DILocation(line: 52, column: 50, scope: !7)
!41 = !DILocation(line: 59, column: 51, scope: !7)
!42 = !DILocation(line: 62, column: 51, scope: !7)
!43 = !DILocation(line: 65, column: 51, scope: !7)
!44 = !DILocation(line: 71, column: 20, scope: !7)
!45 = !DILocation(line: 72, column: 43, scope: !7)
!46 = !DILocation(line: 72, column: 31, scope: !7)
!47 = !DILocation(line: 72, column: 51, scope: !7)
!48 = !DILocation(line: 75, column: 43, scope: !7)
!49 = !DILocation(line: 75, column: 31, scope: !7)
!50 = !DILocation(line: 75, column: 51, scope: !7)
!51 = !DILocation(line: 78, column: 43, scope: !7)
!52 = !DILocation(line: 78, column: 31, scope: !7)
!53 = !DILocation(line: 78, column: 51, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 46, column: 42, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!61 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !62)
!62 = !DILocation(line: 53, column: 42, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !62)
!66 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !67)
!67 = !DILocation(line: 60, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !67)
!71 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !72)
!72 = !DILocation(line: 63, column: 42, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !72)
!76 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !77)
!77 = !DILocation(line: 66, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !82)
!82 = !DILocation(line: 73, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !87)
!87 = !DILocation(line: 76, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !92)
!92 = !DILocation(line: 79, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !92)
!95 = !DILocation(line: 83, column: 35, scope: !7)
!96 = !DILocation(line: 86, column: 35, scope: !7)
!97 = !DILocation(line: 89, column: 35, scope: !7)
!98 = !DILocation(line: 92, column: 35, scope: !7)
!99 = !DILocation(line: 95, column: 35, scope: !7)
!100 = !DILocation(line: 98, column: 35, scope: !7)
!101 = !DILocation(line: 101, column: 35, scope: !7)
!102 = !DILocation(line: 104, column: 35, scope: !7)
!103 = !DILocation(line: 105, column: 25, scope: !7)
!104 = !DILocation(line: 105, column: 37, scope: !7)
!105 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !92)
!106 = !DILocation(line: 106, column: 25, scope: !7)
!107 = !DILocation(line: 106, column: 37, scope: !7)
!108 = !DILocation(line: 106, column: 4, scope: !7)
