; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 1024, !dbg !14
  %14 = mul i32 %13, 1024, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = shl i32 %13, 12, !dbg !16
  %16 = add i32 %15, %.decomposed, !dbg !17
  %17 = sext i32 %16 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !19
  %20 = sext i32 %.decomposed to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !22
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !23
  %25 = bitcast i32 %24 to float, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !24
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !25
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !27
  %30 = add i32 %16, 1024, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !29
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !30
  %34 = add i32 %16, 2048, !dbg !31
  %35 = sext i32 %34 to i64, !dbg !32
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !32
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !33
  %38 = add i32 %16, 3072, !dbg !34
  %39 = sext i32 %38 to i64, !dbg !35
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !35
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !36
  %42 = fadd float %25, 0x3EE4F8B580000000, !dbg !37
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %43, 0, !dbg !38
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %44, 0, !dbg !38
  br i1 %.not.i, label %50, label %45, !dbg !38

45:                                               ; preds = %7
  br i1 %.not1.i, label %48, label %46, !dbg !38

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

50:                                               ; preds = %7
  br i1 %.not1.i, label %53, label %51, !dbg !38

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !38
  %55 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !36
  %56 = insertelement <4 x i32> %55, i32 %37, i64 1, !dbg !36
  %57 = insertelement <4 x i32> %56, i32 %33, i64 2, !dbg !36
  %58 = insertelement <4 x i32> %57, i32 %19, i64 3, !dbg !36
  %59 = bitcast <4 x i32> %58 to <4 x float>, !dbg !36
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %61 = insertelement <4 x i32> poison, i32 %22, i64 0, !dbg !40
  %62 = bitcast <4 x i32> %61 to <4 x float>, !dbg !40
  %63 = shufflevector <4 x float> %62, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %64 = fsub <4 x float> %59, %63, !dbg !40
  %65 = insertelement <4 x float> poison, float %60, i64 0, !dbg !41
  %66 = shufflevector <4 x float> %65, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !41
  %67 = fmul <4 x float> %64, %66, !dbg !41
  %68 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !42
  %69 = bitcast <4 x i32> %68 to <4 x float>, !dbg !42
  %70 = shufflevector <4 x float> %69, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !42
  %71 = fmul <4 x float> %67, %70, !dbg !42
  %72 = insertelement <4 x i32> poison, i32 %29, i64 0, !dbg !43
  %73 = bitcast <4 x i32> %72 to <4 x float>, !dbg !43
  %74 = shufflevector <4 x float> %73, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !43
  %75 = fadd <4 x float> %71, %74, !dbg !43
  %76 = fcmp olt <4 x float> %75, zeroinitializer, !dbg !44
  %77 = extractelement <4 x i1> %76, i64 3, !dbg !48
  %78 = extractelement <4 x float> %75, i64 3, !dbg !48
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !48
  %80 = extractelement <4 x i1> %76, i64 2, !dbg !50
  %81 = extractelement <4 x float> %75, i64 2, !dbg !50
  %82 = select i1 %80, float 0.000000e+00, float %81, !dbg !50
  %83 = fadd float %79, %82, !dbg !52
  %84 = extractelement <4 x i1> %76, i64 1, !dbg !53
  %85 = extractelement <4 x float> %75, i64 1, !dbg !53
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !53
  %87 = fadd float %86, %83, !dbg !55
  %88 = extractelement <4 x i1> %76, i64 0, !dbg !56
  %89 = extractelement <4 x float> %75, i64 0, !dbg !56
  %90 = select i1 %88, float 0.000000e+00, float %89, !dbg !56
  %91 = fadd float %90, %87, !dbg !57
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float 4.000000e+00) #3, !dbg !58
  %93 = sext i32 %12 to i64, !dbg !59
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %93, !dbg !59
  %95 = bitcast float %92 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %94, i1 true) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmy6zzkbukw35b64ok5eracux3mbarolcpvisvbhvvpk7zlub2uy.py", directory: "inductor_cache/my")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mean_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 40, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 43, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 53, scope: !7)
!31 = !DILocation(line: 33, column: 43, scope: !7)
!32 = !DILocation(line: 33, column: 31, scope: !7)
!33 = !DILocation(line: 33, column: 53, scope: !7)
!34 = !DILocation(line: 34, column: 43, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 53, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 26, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 60, column: 20, scope: !7)
!41 = !DILocation(line: 61, column: 20, scope: !7)
!42 = !DILocation(line: 62, column: 20, scope: !7)
!43 = !DILocation(line: 63, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 64, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 47, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !51)
!51 = !DILocation(line: 52, column: 42, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !54)
!54 = !DILocation(line: 58, column: 42, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 20, scope: !7)
!59 = !DILocation(line: 68, column: 25, scope: !7)
!60 = !DILocation(line: 68, column: 37, scope: !7)
!61 = !DILocation(line: 68, column: 4, scope: !7)
