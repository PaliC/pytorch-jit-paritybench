; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 128, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 126, !dbg !12
  %14 = and i32 %9, 63, !dbg !12
  %15 = or disjoint i32 %14, 64, !dbg !12
  %16 = lshr i32 %14, 4, !dbg !13
  %17 = lshr i32 %15, 4, !dbg !13
  %18 = srem i32 %7, 32, !dbg !14
  %19 = shl i32 %7, 7, !dbg !15
  %20 = or disjoint i32 %19, %13, !dbg !16
  %21 = sext i32 %20 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !18
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !18
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !18
  %26 = shl nuw nsw i32 %13, 1, !dbg !18
  %27 = zext nneg i32 %26 to i64, !dbg !18
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %27, !dbg !18
  %29 = insertelement <1 x i32> poison, i32 %24, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %29, i1 true) #5, !dbg !18
  %30 = or disjoint i32 %26, 2, !dbg !18
  %31 = zext nneg i32 %30 to i64, !dbg !18
  %32 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %31, !dbg !18
  %33 = insertelement <1 x i32> poison, i32 %25, i64 0, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %32, <1 x i32> %33, i1 true) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %34 = shl nuw nsw i32 %14, 1, !dbg !18
  %35 = zext nneg i32 %34 to i64, !dbg !18
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %35, !dbg !18
  %37 = load float, ptr addrspace(3) %36, align 8, !dbg !18
  %38 = shl nuw nsw i32 %15, 1, !dbg !18
  %39 = zext nneg i32 %38 to i64, !dbg !18
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %39, !dbg !18
  %41 = load float, ptr addrspace(3) %40, align 8, !dbg !18
  %42 = shl nsw i32 %18, 3, !dbg !19
  %43 = or disjoint i32 %42, %16, !dbg !20
  %44 = or disjoint i32 %42, %17, !dbg !20
  %45 = sext i32 %43 to i64, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !21
  %47 = sext i32 %44 to i64, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %8, i32 0, i1 %8) #5, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = fadd float %37, %50, !dbg !23
  %54 = fadd float %41, %52, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %55 = fadd float %53, %54, !dbg !28
  %56 = select i1 %8, float %55, float 0.000000e+00, !dbg !28
  %57 = bitcast float %56 to i32, !dbg !24
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 16, i32 31), !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = fadd float %56, %59, !dbg !28
  %61 = bitcast float %60 to i32, !dbg !24
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = fadd float %60, %63, !dbg !28
  %65 = bitcast float %64 to i32, !dbg !24
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 4, i32 31), !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = fadd float %64, %67, !dbg !28
  %69 = bitcast float %68 to i32, !dbg !24
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !24
  %71 = bitcast i32 %70 to float, !dbg !24
  %72 = fadd float %68, %71, !dbg !28
  %73 = bitcast float %72 to i32, !dbg !24
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !24
  %75 = bitcast i32 %74 to float, !dbg !24
  %76 = fadd float %72, %75, !dbg !28
  %77 = icmp eq i32 %10, 0, !dbg !24
  %78 = and i32 %11, 1, !dbg !24
  %79 = zext nneg i32 %78 to i64, !dbg !24
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i64 %79, !dbg !24
  %81 = bitcast float %76 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 %77) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %82 = icmp slt i32 %9, 2, !dbg !24
  %83 = sext i32 %9 to i64, !dbg !24
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i64 %83, !dbg !24
  %85 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %84, i1 %82) #5, !dbg !24
  %86 = bitcast i32 %85 to float, !dbg !24
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !24
  %88 = bitcast i32 %87 to float, !dbg !24
  %89 = fadd float %86, %88, !dbg !28
  %90 = and i32 %9, 1, !dbg !24
  %91 = icmp eq i32 %90, 0, !dbg !24
  %92 = and i1 %82, %91, !dbg !24
  %93 = bitcast float %89 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %93, i1 %92) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %94 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 1.280000e+02) #5, !dbg !30
  %96 = fsub float %53, %95, !dbg !31
  %97 = fsub float %54, %95, !dbg !31
  %98 = fmul float %96, %96, !dbg !32
  %99 = fmul float %97, %97, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %100 = fadd float %98, %99, !dbg !35
  %101 = select i1 %8, float %100, float 0.000000e+00, !dbg !35
  %102 = bitcast float %101 to i32, !dbg !33
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !33
  %104 = bitcast i32 %103 to float, !dbg !33
  %105 = fadd float %101, %104, !dbg !35
  %106 = bitcast float %105 to i32, !dbg !33
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !33
  %108 = bitcast i32 %107 to float, !dbg !33
  %109 = fadd float %105, %108, !dbg !35
  %110 = bitcast float %109 to i32, !dbg !33
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !33
  %112 = bitcast i32 %111 to float, !dbg !33
  %113 = fadd float %109, %112, !dbg !35
  %114 = bitcast float %113 to i32, !dbg !33
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !33
  %116 = bitcast i32 %115 to float, !dbg !33
  %117 = fadd float %113, %116, !dbg !35
  %118 = bitcast float %117 to i32, !dbg !33
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !33
  %120 = bitcast i32 %119 to float, !dbg !33
  %121 = fadd float %117, %120, !dbg !35
  %122 = bitcast float %121 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %122, i1 %77) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %123 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %84, i1 %82) #5, !dbg !33
  %124 = bitcast i32 %123 to float, !dbg !33
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !33
  %126 = bitcast i32 %125 to float, !dbg !33
  %127 = fadd float %124, %126, !dbg !35
  %128 = bitcast float %127 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %128, i1 %92) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %129 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 1.280000e+02) #5, !dbg !36
  %131 = fadd float %130, 0x3EE4F8B580000000, !dbg !37
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %132, 0, !dbg !38
  br i1 %.not.i, label %135, label %133, !dbg !38

133:                                              ; preds = %6
  %134 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

135:                                              ; preds = %6
  %136 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %133, %135
  %.0.i = phi float [ %134, %133 ], [ %136, %135 ], !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %137 = zext nneg i32 %14 to i64, !dbg !39
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %137, !dbg !39
  %139 = bitcast float %53 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #5, !dbg !39
  %140 = zext nneg i32 %15 to i64, !dbg !39
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !39
  %142 = bitcast float %54 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %143 = zext nneg i32 %13 to i64, !dbg !39
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %143, !dbg !39
  %.extract = load i32, ptr addrspace(3) %144, align 8, !dbg !39
  %145 = getelementptr inbounds i8, ptr addrspace(3) %144, i64 4, !dbg !39
  %.extract2 = load i32, ptr addrspace(3) %145, align 4, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %22, i1 %8) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %146 = sext i32 %7 to i64, !dbg !41
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !41
  %148 = icmp eq i32 %14, 0, !dbg !42
  %149 = bitcast float %.0.i to i32, !dbg !42
  %150 = and i1 %148, %8, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %147, i1 %150) #5, !dbg !42
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !43
  %152 = bitcast float %95 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %151, i1 %150) #5, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cczrg3qnqeuyvlmjhtsjprvndvcifvyhok7cbrsrl5gqypjyv3u7.py", directory: "inductor_cache/cz")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_22, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_22", linkageName: "triton_per_fused_convolution_native_group_norm_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 43, scope: !7)
!16 = !DILocation(line: 33, column: 39, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 48, scope: !7)
!19 = !DILocation(line: 34, column: 37, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 42, scope: !7)
!23 = !DILocation(line: 35, column: 18, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 40, column: 24, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 43, column: 19, scope: !7)
!31 = !DILocation(line: 44, column: 19, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 48, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !34)
!36 = !DILocation(line: 50, column: 20, scope: !7)
!37 = !DILocation(line: 52, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 28, scope: !7)
!39 = !DILocation(line: 54, column: 48, scope: !7)
!40 = !DILocation(line: 55, column: 4, scope: !7)
!41 = !DILocation(line: 56, column: 28, scope: !7)
!42 = !DILocation(line: 56, column: 40, scope: !7)
!43 = !DILocation(line: 57, column: 25, scope: !7)
!44 = !DILocation(line: 57, column: 37, scope: !7)
!45 = !DILocation(line: 57, column: 4, scope: !7)
