; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_56(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %5, 1, !dbg !13
  %11 = icmp slt i32 %9, 3328, !dbg !14
  %12 = ashr exact i32 %9, 1, !dbg !15
  %.frozen = freeze i32 %9, !dbg !16
  %13 = sdiv i32 %.frozen, 832, !dbg !16
  %14 = srem i32 %12, 416, !dbg !17
  %15 = mul i32 %13, 832, !dbg !18
  %.decomposed = sub i32 %.frozen, %15, !dbg !18
  %16 = shl nsw i32 %14, 3, !dbg !19
  %17 = mul i32 %13, 13312, !dbg !20
  %18 = add i32 %16, %17, !dbg !21
  %19 = add i32 %18, 9979, !dbg !22
  %20 = sext i32 %19 to i64, !dbg !23
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !23
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 false, i32 0, i1 false) #1, !dbg !24
  %23 = bitcast i32 %22 to float, !dbg !24
  %24 = add i32 %18, 9980, !dbg !25
  %25 = sext i32 %24 to i64, !dbg !26
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !26
  %27 = add i32 %18, 9981, !dbg !27
  %28 = sext i32 %27 to i64, !dbg !28
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !28
  %30 = add i32 %18, 9983, !dbg !29
  %31 = sext i32 %30 to i64, !dbg !30
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !30
  %33 = add i32 %18, 9984, !dbg !31
  %34 = sext i32 %33 to i64, !dbg !32
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !32
  %36 = add i32 %18, 9985, !dbg !33
  %37 = sext i32 %36 to i64, !dbg !34
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !34
  %39 = add i32 %18, 9987, !dbg !35
  %40 = sext i32 %39 to i64, !dbg !36
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !36
  %42 = add i32 %18, 9988, !dbg !37
  %43 = sext i32 %42 to i64, !dbg !38
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !38
  %45 = add i32 %18, 9989, !dbg !39
  %46 = sext i32 %45 to i64, !dbg !40
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !40
  %48 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !41
  %49 = insertelement <2 x i32> %48, i32 %12, i64 1, !dbg !41
  %50 = srem <2 x i32> %49, splat (i32 2), !dbg !41
  %51 = extractelement <2 x i32> %50, i64 0, !dbg !41
  %52 = extractelement <2 x i32> %50, i64 1, !dbg !42
  %53 = icmp sgt i32 %52, 0, !dbg !43
  %54 = shl nsw <2 x i32> %50, splat (i32 1), !dbg !44
  %55 = shl nsw i32 %51, 1, !dbg !44
  %56 = icmp sgt i32 %51, 0, !dbg !45
  %57 = and i1 %56, %53, !dbg !46
  %58 = add i32 %19, %55, !dbg !22
  %59 = sext i32 %58 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = and i1 %11, %57, !dbg !47
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %61, i32 0, i1 %61) #1, !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = icmp sgt i32 %51, -1, !dbg !48
  %65 = and i1 %64, %53, !dbg !49
  %66 = add i32 %24, %55, !dbg !25
  %67 = sext i32 %66 to i64, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !26
  %69 = and i1 %11, %53, !dbg !50
  %70 = and i1 %11, %65, !dbg !50
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %69, i32 0, i1 %69) #1, !dbg !51
  %72 = bitcast i32 %71 to float, !dbg !51
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %70, i32 0, i1 %70) #1, !dbg !51
  %74 = bitcast i32 %73 to float, !dbg !51
  %75 = fadd float %23, %72, !dbg !52
  %76 = fadd float %63, %74, !dbg !52
  %77 = add i32 %27, %55, !dbg !27
  %78 = sext i32 %77 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %69, i32 0, i1 %69) #1, !dbg !53
  %81 = bitcast i32 %80 to float, !dbg !53
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %70, i32 0, i1 %70) #1, !dbg !53
  %83 = bitcast i32 %82 to float, !dbg !53
  %84 = fadd float %75, %81, !dbg !54
  %85 = fadd float %76, %83, !dbg !54
  %86 = icmp sgt i32 %52, -1, !dbg !55
  %87 = and i1 %56, %86, !dbg !56
  %88 = add i32 %30, %55, !dbg !29
  %89 = sext i32 %88 to i64, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !30
  %91 = and i1 %11, %87, !dbg !57
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 false, i32 0, i1 false) #1, !dbg !58
  %93 = bitcast i32 %92 to float, !dbg !58
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %91, i32 0, i1 %91) #1, !dbg !58
  %95 = bitcast i32 %94 to float, !dbg !58
  %96 = fadd float %84, %93, !dbg !59
  %97 = fadd float %85, %95, !dbg !59
  %98 = or i32 %52, %51, !dbg !60
  %99 = icmp sgt i32 %98, -1, !dbg !60
  %100 = add i32 %33, %55, !dbg !31
  %101 = sext i32 %100 to i64, !dbg !32
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !32
  %103 = and i1 %11, %86, !dbg !61
  %104 = and i1 %11, %99, !dbg !61
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %103, i32 0, i1 %103) #1, !dbg !62
  %106 = bitcast i32 %105 to float, !dbg !62
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %104, i32 0, i1 %104) #1, !dbg !62
  %108 = bitcast i32 %107 to float, !dbg !62
  %109 = fadd float %96, %106, !dbg !63
  %110 = fadd float %97, %108, !dbg !63
  %111 = add i32 %36, %55, !dbg !33
  %112 = sext i32 %111 to i64, !dbg !34
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !34
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %103, i32 0, i1 %103) #1, !dbg !64
  %115 = bitcast i32 %114 to float, !dbg !64
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %104, i32 0, i1 %104) #1, !dbg !64
  %117 = bitcast i32 %116 to float, !dbg !64
  %118 = fadd float %109, %115, !dbg !65
  %119 = fadd float %110, %117, !dbg !65
  %120 = add i32 %39, %55, !dbg !35
  %121 = sext i32 %120 to i64, !dbg !36
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !36
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 false, i32 0, i1 false) #1, !dbg !66
  %124 = bitcast i32 %123 to float, !dbg !66
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %91, i32 0, i1 %91) #1, !dbg !66
  %126 = bitcast i32 %125 to float, !dbg !66
  %127 = fadd float %118, %124, !dbg !67
  %128 = fadd float %119, %126, !dbg !67
  %129 = add i32 %42, %55, !dbg !37
  %130 = sext i32 %129 to i64, !dbg !38
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !38
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %103, i32 0, i1 %103) #1, !dbg !68
  %133 = bitcast i32 %132 to float, !dbg !68
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %104, i32 0, i1 %104) #1, !dbg !68
  %135 = bitcast i32 %134 to float, !dbg !68
  %136 = fadd float %127, %133, !dbg !69
  %137 = fadd float %128, %135, !dbg !69
  %138 = add i32 %45, %55, !dbg !39
  %139 = sext i32 %138 to i64, !dbg !40
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !40
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %103, i32 0, i1 %103) #1, !dbg !70
  %142 = bitcast i32 %141 to float, !dbg !70
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %104, i32 0, i1 %104) #1, !dbg !70
  %144 = bitcast i32 %143 to float, !dbg !70
  %145 = fadd float %136, %142, !dbg !71
  %146 = fadd float %137, %144, !dbg !71
  %147 = mul nsw i32 %51, -2, !dbg !72
  %148 = mul nsw i32 %52, -2, !dbg !73
  %149 = add nsw <2 x i32> %54, splat (i32 2), !dbg !74
  %150 = extractelement <2 x i32> %149, i64 1, !dbg !75
  %151 = shl nuw nsw i32 %150, 1, !dbg !75
  %152 = extractelement <2 x i32> %149, i64 0, !dbg !42
  %153 = mul nsw i32 %148, %152, !dbg !76
  %154 = shl nsw i32 %51, 2, !dbg !77
  %155 = mul nsw i32 %154, %52, !dbg !78
  %156 = add nsw i32 %148, 3, !dbg !79
  %157 = shl nsw i32 %52, 2, !dbg !42
  %158 = sub nsw i32 %156, %157, !dbg !42
  %159 = add nsw i32 %158, %150, !dbg !80
  %160 = add nsw i32 %159, %151, !dbg !81
  %reass.add = add nsw i32 %152, %147
  %reass.mul = mul nsw i32 %reass.add, %150
  %161 = or disjoint i32 %147, 1, !dbg !82
  %162 = add nsw i32 %161, %148, !dbg !79
  %163 = add nsw i32 %162, %155, !dbg !83
  %164 = add nsw i32 %163, %152, !dbg !42
  %165 = add nsw i32 %164, %153, !dbg !84
  %166 = add i32 %165, %150, !dbg !80
  %167 = add i32 %166, %reass.mul, !dbg !81
  %168 = sitofp i32 %160 to float, !dbg !85
  %169 = sitofp i32 %167 to float, !dbg !85
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %168) #1, !dbg !85
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %169) #1, !dbg !85
  %172 = mul i32 %13, 3328, !dbg !86
  %173 = add i32 %172, %.decomposed, !dbg !87
  %174 = sext i32 %173 to i64, !dbg !88
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !88
  %176 = bitcast float %170 to i32, !dbg !89
  %177 = bitcast float %171 to i32, !dbg !89
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %177, ptr addrspace(1) %175, i1 %11) #1, !dbg !89
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cszmel42a2jqadzjiiztqtr7sixo274hvovfwprt5rgnhc5eatdd.py", directory: "inductor_cache/sz")
!4 = !{ptr @triton_poi_fused_avg_pool2d_56, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_56, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_56", linkageName: "triton_poi_fused_avg_pool2d_56", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 26, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 40, column: 47, scope: !7)
!20 = !DILocation(line: 40, column: 58, scope: !7)
!21 = !DILocation(line: 40, column: 45, scope: !7)
!22 = !DILocation(line: 40, column: 52, scope: !7)
!23 = !DILocation(line: 40, column: 31, scope: !7)
!24 = !DILocation(line: 40, column: 63, scope: !7)
!25 = !DILocation(line: 46, column: 52, scope: !7)
!26 = !DILocation(line: 46, column: 31, scope: !7)
!27 = !DILocation(line: 53, column: 52, scope: !7)
!28 = !DILocation(line: 53, column: 31, scope: !7)
!29 = !DILocation(line: 60, column: 52, scope: !7)
!30 = !DILocation(line: 60, column: 31, scope: !7)
!31 = !DILocation(line: 63, column: 52, scope: !7)
!32 = !DILocation(line: 63, column: 31, scope: !7)
!33 = !DILocation(line: 66, column: 52, scope: !7)
!34 = !DILocation(line: 66, column: 31, scope: !7)
!35 = !DILocation(line: 73, column: 52, scope: !7)
!36 = !DILocation(line: 73, column: 31, scope: !7)
!37 = !DILocation(line: 76, column: 52, scope: !7)
!38 = !DILocation(line: 76, column: 31, scope: !7)
!39 = !DILocation(line: 79, column: 52, scope: !7)
!40 = !DILocation(line: 79, column: 31, scope: !7)
!41 = !DILocation(line: 25, column: 19, scope: !7)
!42 = !DILocation(line: 81, column: 241, scope: !7)
!43 = !DILocation(line: 31, column: 19, scope: !7)
!44 = !DILocation(line: 35, column: 20, scope: !7)
!45 = !DILocation(line: 36, column: 19, scope: !7)
!46 = !DILocation(line: 39, column: 19, scope: !7)
!47 = !DILocation(line: 40, column: 71, scope: !7)
!48 = !DILocation(line: 42, column: 21, scope: !7)
!49 = !DILocation(line: 45, column: 19, scope: !7)
!50 = !DILocation(line: 46, column: 71, scope: !7)
!51 = !DILocation(line: 46, column: 63, scope: !7)
!52 = !DILocation(line: 47, column: 20, scope: !7)
!53 = !DILocation(line: 53, column: 63, scope: !7)
!54 = !DILocation(line: 54, column: 20, scope: !7)
!55 = !DILocation(line: 56, column: 21, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 71, scope: !7)
!58 = !DILocation(line: 60, column: 63, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 71, scope: !7)
!62 = !DILocation(line: 63, column: 63, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 63, scope: !7)
!65 = !DILocation(line: 67, column: 20, scope: !7)
!66 = !DILocation(line: 73, column: 63, scope: !7)
!67 = !DILocation(line: 74, column: 20, scope: !7)
!68 = !DILocation(line: 76, column: 63, scope: !7)
!69 = !DILocation(line: 77, column: 20, scope: !7)
!70 = !DILocation(line: 79, column: 63, scope: !7)
!71 = !DILocation(line: 80, column: 20, scope: !7)
!72 = !DILocation(line: 81, column: 22, scope: !7)
!73 = !DILocation(line: 81, column: 34, scope: !7)
!74 = !DILocation(line: 81, column: 60, scope: !7)
!75 = !DILocation(line: 81, column: 103, scope: !7)
!76 = !DILocation(line: 81, column: 250, scope: !7)
!77 = !DILocation(line: 81, column: 316, scope: !7)
!78 = !DILocation(line: 81, column: 319, scope: !7)
!79 = !DILocation(line: 81, column: 40, scope: !7)
!80 = !DILocation(line: 81, column: 325, scope: !7)
!81 = !DILocation(line: 81, column: 389, scope: !7)
!82 = !DILocation(line: 81, column: 29, scope: !7)
!83 = !DILocation(line: 81, column: 167, scope: !7)
!84 = !DILocation(line: 81, column: 314, scope: !7)
!85 = !DILocation(line: 82, column: 20, scope: !7)
!86 = !DILocation(line: 83, column: 35, scope: !7)
!87 = !DILocation(line: 83, column: 30, scope: !7)
!88 = !DILocation(line: 83, column: 25, scope: !7)
!89 = !DILocation(line: 83, column: 47, scope: !7)
!90 = !DILocation(line: 83, column: 4, scope: !7)
