; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 6, !dbg !11
  %12 = and i32 %11, 8128, !dbg !11
  %.frozen = freeze i32 %7, !dbg !12
  %13 = sdiv i32 %.frozen, 32, !dbg !12
  %14 = mul i32 %13, 32, !dbg !13
  %.decomposed = sub i32 %.frozen, %14, !dbg !13
  %15 = shl nsw i32 %.decomposed, 1, !dbg !14
  %16 = shl i32 %13, 14, !dbg !15
  %17 = add i32 %16, %15, !dbg !16
  %18 = add i32 %17, %12, !dbg !17
  %19 = add i32 %17, 8192, !dbg !16
  %20 = add nuw i32 %19, %12, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !19
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !19
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !19
  %28 = bitcast i32 %26 to float, !dbg !19
  %29 = bitcast i32 %27 to float, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !19
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !19
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !19
  %33 = bitcast i32 %31 to float, !dbg !19
  %34 = bitcast i32 %32 to float, !dbg !19
  %35 = fadd float %28, %29, !dbg !20
  %36 = fadd float %35, %33, !dbg !20
  %37 = fadd float %36, %34, !dbg !20
  %38 = bitcast float %37 to i32, !dbg !25
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 16, i32 31), !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = fadd float %37, %40, !dbg !20
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 8, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !20
  %46 = bitcast float %45 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fadd float %45, %48, !dbg !20
  %50 = bitcast float %49 to i32, !dbg !25
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = fadd float %49, %52, !dbg !20
  %54 = bitcast float %53 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = fadd float %53, %56, !dbg !20
  %58 = icmp eq i32 %9, 0, !dbg !25
  %59 = and i32 %10, 3, !dbg !25
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !25
  %61 = bitcast float %57 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 %58) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %62 = icmp slt i32 %8, 4, !dbg !25
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !25
  %64 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %62) #5, !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !25
  %67 = bitcast i32 %66 to float, !dbg !25
  %68 = fadd float %65, %67, !dbg !20
  %69 = bitcast float %68 to i32, !dbg !25
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !25
  %71 = bitcast i32 %70 to float, !dbg !25
  %72 = fadd float %68, %71, !dbg !20
  %73 = and i32 %8, 3, !dbg !25
  %74 = icmp eq i32 %73, 0, !dbg !25
  %75 = and i1 %62, %74, !dbg !25
  %76 = bitcast float %72 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %76, i1 %75) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %77 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %78 = fadd float %77, 0.000000e+00, !dbg !26
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float 5.120000e+02) #5, !dbg !30
  %80 = fsub float %28, %79, !dbg !31
  %81 = fsub float %29, %79, !dbg !31
  %82 = fsub float %33, %79, !dbg !31
  %83 = fsub float %34, %79, !dbg !31
  %84 = fmul float %80, %80, !dbg !32
  %85 = fmul float %81, %81, !dbg !32
  %86 = fmul float %82, %82, !dbg !32
  %87 = fmul float %83, %83, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %88 = fadd float %84, %85, !dbg !35
  %89 = fadd float %86, %88, !dbg !35
  %90 = fadd float %87, %89, !dbg !35
  %91 = bitcast float %90 to i32, !dbg !33
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 16, i32 31), !dbg !33
  %93 = bitcast i32 %92 to float, !dbg !33
  %94 = fadd float %90, %93, !dbg !35
  %95 = bitcast float %94 to i32, !dbg !33
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 8, i32 31), !dbg !33
  %97 = bitcast i32 %96 to float, !dbg !33
  %98 = fadd float %94, %97, !dbg !35
  %99 = bitcast float %98 to i32, !dbg !33
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 4, i32 31), !dbg !33
  %101 = bitcast i32 %100 to float, !dbg !33
  %102 = fadd float %98, %101, !dbg !35
  %103 = bitcast float %102 to i32, !dbg !33
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !33
  %105 = bitcast i32 %104 to float, !dbg !33
  %106 = fadd float %102, %105, !dbg !35
  %107 = bitcast float %106 to i32, !dbg !33
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = fadd float %106, %109, !dbg !35
  %111 = bitcast float %110 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %111, i1 %58) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %112 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %62) #5, !dbg !33
  %113 = bitcast i32 %112 to float, !dbg !33
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !33
  %115 = bitcast i32 %114 to float, !dbg !33
  %116 = fadd float %113, %115, !dbg !35
  %117 = bitcast float %116 to i32, !dbg !33
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !33
  %119 = bitcast i32 %118 to float, !dbg !33
  %120 = fadd float %116, %119, !dbg !35
  %121 = bitcast float %120 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %121, i1 %75) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %122 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %123 = fadd float %122, 0.000000e+00, !dbg !36
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float 5.120000e+02) #5, !dbg !38
  %125 = fadd float %124, 0x3EE4F8B580000000, !dbg !39
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %126, 0, !dbg !40
  br i1 %.not.i, label %129, label %127, !dbg !40

127:                                              ; preds = %6
  %128 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %125), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

129:                                              ; preds = %6
  %130 = tail call float @llvm.nvvm.rsqrt.approx.f(float %125), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %127, %129
  %.0.i = phi float [ %128, %127 ], [ %130, %129 ], !dbg !40
  %131 = sext i32 %7 to i64, !dbg !41
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %131, !dbg !41
  %urem = and i32 %8, 127, !dbg !42
  %133 = icmp eq i32 %urem, 0, !dbg !42
  %134 = bitcast float %.0.i to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %132, i1 %133) #5, !dbg !42
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !43
  %136 = bitcast float %79 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %135, i1 %133) #5, !dbg !44
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !45
  %138 = bitcast float %123 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %137, i1 %133) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz5lbj2gtv22hindgozlelgbj5rtx7fosf3ujavdg7pfssimbyxp.py", directory: "inductor_cache/z5")
!4 = !{ptr @triton_per_fused_native_group_norm_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_9", linkageName: "triton_per_fused_native_group_norm_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 33, column: 19, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 35, column: 37, scope: !7)
!15 = !DILocation(line: 35, column: 56, scope: !7)
!16 = !DILocation(line: 35, column: 42, scope: !7)
!17 = !DILocation(line: 35, column: 50, scope: !7)
!18 = !DILocation(line: 35, column: 30, scope: !7)
!19 = !DILocation(line: 35, column: 61, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 38, column: 57, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 38, column: 44, scope: !7)
!30 = !DILocation(line: 41, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 18, scope: !7)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !34)
!34 = !DILocation(line: 45, column: 59, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 45, column: 45, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 28, scope: !7)
!41 = !DILocation(line: 51, column: 25, scope: !7)
!42 = !DILocation(line: 51, column: 37, scope: !7)
!43 = !DILocation(line: 52, column: 25, scope: !7)
!44 = !DILocation(line: 52, column: 36, scope: !7)
!45 = !DILocation(line: 53, column: 25, scope: !7)
!46 = !DILocation(line: 53, column: 37, scope: !7)
!47 = !DILocation(line: 53, column: 4, scope: !7)
