; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = icmp slt i32 %16, 74752, !dbg !14
  %19 = icmp slt i32 %17, 74752, !dbg !14
  %20 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !15
  %21 = insertelement <2 x i32> %20, i32 %16, i64 1, !dbg !15
  %22 = sdiv <2 x i32> %21, splat (i32 16), !dbg !15
  %23 = srem <2 x i32> %22, splat (i32 1168), !dbg !16
  %24 = srem i32 %16, 16, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %25 = sdiv i32 %.frozen, 18688, !dbg !18
  %.frozen61 = freeze i32 %17, !dbg !18
  %26 = sdiv i32 %.frozen61, 18688, !dbg !18
  %27 = extractelement <2 x i32> %23, i64 1, !dbg !19
  %28 = sext i32 %27 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !20
  %30 = extractelement <2 x i32> %23, i64 0, !dbg !19
  %31 = sext i32 %30 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %18) #3, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %18) #3, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %18) #3, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %18) #3, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #3, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #3, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #3, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #3, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %18) #3, !dbg !23
  %44 = bitcast i32 %43 to float, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %18) #3, !dbg !23
  %46 = bitcast i32 %45 to float, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %18) #3, !dbg !23
  %48 = bitcast i32 %47 to float, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %18) #3, !dbg !23
  %50 = bitcast i32 %49 to float, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !23
  %52 = bitcast i32 %51 to float, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !23
  %56 = bitcast i32 %55 to float, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %19) #3, !dbg !23
  %58 = bitcast i32 %57 to float, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #3, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #3, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #3, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %18) #3, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %19) #3, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %19) #3, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %19) #3, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %19) #3, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #3, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %19) #3, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %19) #3, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %19) #3, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %19) #3, !dbg !27
  %79 = icmp slt <2 x i32> %23, splat (i32 1024), !dbg !28
  %80 = mul i32 %25, 18688, !dbg !29
  %srem.decomposed = sub i32 %.frozen, %80, !dbg !29
  %81 = mul i32 %26, 18688, !dbg !29
  %srem1.decomposed = sub i32 %.frozen61, %81, !dbg !29
  %82 = mul nsw i32 %25, 18304, !dbg !30
  %83 = mul nsw i32 %26, 18304, !dbg !30
  %84 = add nsw i32 %82, %srem.decomposed, !dbg !31
  %85 = add nsw i32 %83, %srem1.decomposed, !dbg !31
  %86 = sext i32 %84 to i64, !dbg !32
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !32
  %88 = sext i32 %85 to i64, !dbg !32
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !32
  %90 = extractelement <2 x i1> %79, i64 1, !dbg !33
  %91 = and i1 %18, %90, !dbg !33
  %92 = extractelement <2 x i1> %79, i64 0, !dbg !33
  %93 = and i1 %19, %92, !dbg !33
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !34
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #3, !dbg !34
  %96 = mul nsw i32 %25, 16768, !dbg !35
  %97 = mul nsw i32 %26, 16768, !dbg !35
  %98 = add nsw i32 %96, %srem.decomposed, !dbg !36
  %99 = add nsw i32 %97, %srem1.decomposed, !dbg !36
  %100 = sext i32 %98 to i64, !dbg !37
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !37
  %102 = sext i32 %99 to i64, !dbg !37
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !37
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !38
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #3, !dbg !38
  %106 = add nsw i32 %27, -1024, !dbg !39
  %107 = icmp ult i32 %106, 120, !dbg !39
  %108 = add nsw i32 %30, -1024, !dbg !39
  %109 = icmp ult i32 %108, 120, !dbg !39
  %110 = shl nsw i32 %27, 4, !dbg !19
  %111 = shl nsw i32 %30, 4, !dbg !19
  %112 = add nsw i32 %24, -16384, !dbg !19
  %113 = add nsw i32 %112, %82, !dbg !40
  %114 = add nsw i32 %113, %110, !dbg !41
  %115 = add nsw i32 %112, %83, !dbg !40
  %116 = add nsw i32 %115, %111, !dbg !41
  %117 = sext i32 %114 to i64, !dbg !42
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !42
  %119 = sext i32 %116 to i64, !dbg !42
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !42
  %121 = and i1 %18, %107, !dbg !43
  %122 = and i1 %19, %109, !dbg !43
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #3, !dbg !44
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #3, !dbg !44
  %125 = icmp sgt i32 %27, 1143, !dbg !45
  %126 = icmp sgt i32 %30, 1143, !dbg !45
  %127 = sext i32 %98 to i64, !dbg !46
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !46
  %129 = getelementptr i8, ptr addrspace(1) %128, i64 -7680, !dbg !46
  %130 = sext i32 %99 to i64, !dbg !46
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !46
  %132 = getelementptr i8, ptr addrspace(1) %131, i64 -7680, !dbg !46
  %133 = and i1 %18, %125, !dbg !47
  %134 = and i1 %19, %126, !dbg !47
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #3, !dbg !48
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %132, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #3, !dbg !48
  %137 = fadd float %44, 0x3F50624DE0000000, !dbg !49
  %138 = fadd float %46, 0x3F50624DE0000000, !dbg !49
  %139 = fadd float %48, 0x3F50624DE0000000, !dbg !49
  %140 = fadd float %50, 0x3F50624DE0000000, !dbg !49
  %141 = fadd float %52, 0x3F50624DE0000000, !dbg !49
  %142 = fadd float %54, 0x3F50624DE0000000, !dbg !49
  %143 = fadd float %56, 0x3F50624DE0000000, !dbg !49
  %144 = fadd float %58, 0x3F50624DE0000000, !dbg !49
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %145, 0, !dbg !50
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %146, 0, !dbg !50
  br i1 %.not.i, label %152, label %147, !dbg !50

147:                                              ; preds = %10
  br i1 %.not1.i, label %150, label %148, !dbg !50

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

152:                                              ; preds = %10
  br i1 %.not1.i, label %155, label %153, !dbg !50

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %148, %150, %153, %155
  %.0.i = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !50
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i11 = icmp eq i32 %157, 0, !dbg !50
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i14 = icmp eq i32 %158, 0, !dbg !50
  br i1 %.not.i11, label %164, label %159, !dbg !50

159:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %162, label %160, !dbg !50

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

164:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %167, label %165, !dbg !50

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

__nv_sqrtf.exit15:                                ; preds = %160, %162, %165, %167
  %.0.i13 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !50
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i16 = icmp eq i32 %169, 0, !dbg !50
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i19 = icmp eq i32 %170, 0, !dbg !50
  br i1 %.not.i16, label %176, label %171, !dbg !50

171:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %174, label %172, !dbg !50

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

176:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %179, label %177, !dbg !50

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

__nv_sqrtf.exit20:                                ; preds = %172, %174, %177, %179
  %.0.i18 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !50
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i21 = icmp eq i32 %181, 0, !dbg !50
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i24 = icmp eq i32 %182, 0, !dbg !50
  br i1 %.not.i21, label %188, label %183, !dbg !50

183:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %186, label %184, !dbg !50

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

188:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %191, label %189, !dbg !50

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

__nv_sqrtf.exit25:                                ; preds = %184, %186, %189, %191
  %.0.i23 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !50
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i26 = icmp eq i32 %193, 0, !dbg !50
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i29 = icmp eq i32 %194, 0, !dbg !50
  br i1 %.not.i26, label %200, label %195, !dbg !50

195:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %198, label %196, !dbg !50

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit30, !dbg !50

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit30, !dbg !50

200:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %203, label %201, !dbg !50

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit30, !dbg !50

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit30, !dbg !50

__nv_sqrtf.exit30:                                ; preds = %196, %198, %201, %203
  %.0.i28 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !50
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i31 = icmp eq i32 %205, 0, !dbg !50
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i34 = icmp eq i32 %206, 0, !dbg !50
  br i1 %.not.i31, label %212, label %207, !dbg !50

207:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %210, label %208, !dbg !50

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit35, !dbg !50

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit35, !dbg !50

212:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %215, label %213, !dbg !50

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit35, !dbg !50

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit35, !dbg !50

__nv_sqrtf.exit35:                                ; preds = %208, %210, %213, %215
  %.0.i33 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !50
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i36 = icmp eq i32 %217, 0, !dbg !50
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i39 = icmp eq i32 %218, 0, !dbg !50
  br i1 %.not.i36, label %224, label %219, !dbg !50

219:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %222, label %220, !dbg !50

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

224:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %227, label %225, !dbg !50

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit40, !dbg !50

__nv_sqrtf.exit40:                                ; preds = %220, %222, %225, %227
  %.0.i38 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !50
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i41 = icmp eq i32 %229, 0, !dbg !50
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i44 = icmp eq i32 %230, 0, !dbg !50
  br i1 %.not.i41, label %236, label %231, !dbg !50

231:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %234, label %232, !dbg !50

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

236:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %239, label %237, !dbg !50

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit45, !dbg !50

__nv_sqrtf.exit45:                                ; preds = %232, %234, %237, %239
  %.0.i43 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !50
  %241 = shufflevector <2 x i1> %79, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !28
  %242 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !34
  %243 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !38
  %244 = icmp slt <2 x i32> %23, splat (i32 1144), !dbg !51
  %245 = shufflevector <2 x i1> %244, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !51
  %246 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !44
  %247 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !48
  %248 = insertelement <8 x i32> poison, i32 %40, i64 0, !dbg !21
  %249 = insertelement <8 x i32> %248, i32 %39, i64 1, !dbg !21
  %250 = insertelement <8 x i32> %249, i32 %38, i64 2, !dbg !21
  %251 = insertelement <8 x i32> %250, i32 %37, i64 3, !dbg !21
  %252 = insertelement <8 x i32> %251, i32 %36, i64 4, !dbg !21
  %253 = insertelement <8 x i32> %252, i32 %35, i64 5, !dbg !21
  %254 = insertelement <8 x i32> %253, i32 %34, i64 6, !dbg !21
  %255 = insertelement <8 x i32> %254, i32 %33, i64 7, !dbg !21
  %256 = bitcast <8 x i32> %255 to <8 x float>, !dbg !21
  %257 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !34
  %258 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !38
  %259 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !44
  %260 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !48
  %261 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !34
  %262 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !38
  %263 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !44
  %264 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !48
  %265 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !34
  %266 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !38
  %267 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !44
  %268 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !48
  %269 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !34
  %270 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !38
  %271 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !44
  %272 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !48
  %273 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !34
  %274 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !38
  %275 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !44
  %276 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !48
  %277 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !34
  %278 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !38
  %279 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !44
  %280 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !48
  %281 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !34
  %282 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !38
  %283 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !44
  %284 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !48
  %285 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !27
  %286 = insertelement <8 x i32> %285, i32 %77, i64 1, !dbg !27
  %287 = insertelement <8 x i32> %286, i32 %76, i64 2, !dbg !27
  %288 = insertelement <8 x i32> %287, i32 %75, i64 3, !dbg !27
  %289 = insertelement <8 x i32> %288, i32 %74, i64 4, !dbg !27
  %290 = insertelement <8 x i32> %289, i32 %73, i64 5, !dbg !27
  %291 = insertelement <8 x i32> %290, i32 %72, i64 6, !dbg !27
  %292 = insertelement <8 x i32> %291, i32 %71, i64 7, !dbg !27
  %293 = bitcast <8 x i32> %292 to <8 x float>, !dbg !27
  %294 = insertelement <8 x i32> poison, i32 %68, i64 0, !dbg !25
  %295 = insertelement <8 x i32> %294, i32 %67, i64 1, !dbg !25
  %296 = insertelement <8 x i32> %295, i32 %66, i64 2, !dbg !25
  %297 = insertelement <8 x i32> %296, i32 %65, i64 3, !dbg !25
  %298 = insertelement <8 x i32> %297, i32 %64, i64 4, !dbg !25
  %299 = insertelement <8 x i32> %298, i32 %63, i64 5, !dbg !25
  %300 = insertelement <8 x i32> %299, i32 %62, i64 6, !dbg !25
  %301 = insertelement <8 x i32> %300, i32 %61, i64 7, !dbg !25
  %302 = bitcast <8 x i32> %301 to <8 x float>, !dbg !25
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !52
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !52
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !52
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !52
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !52
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !52
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !52
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !52
  %311 = insertelement <8 x i32> poison, i32 %242, i64 0, !dbg !34
  %312 = insertelement <8 x i32> %311, i32 %257, i64 1, !dbg !34
  %313 = insertelement <8 x i32> %312, i32 %261, i64 2, !dbg !34
  %314 = insertelement <8 x i32> %313, i32 %265, i64 3, !dbg !34
  %315 = insertelement <8 x i32> %314, i32 %269, i64 4, !dbg !34
  %316 = insertelement <8 x i32> %315, i32 %273, i64 5, !dbg !34
  %317 = insertelement <8 x i32> %316, i32 %277, i64 6, !dbg !34
  %318 = insertelement <8 x i32> %317, i32 %281, i64 7, !dbg !34
  %319 = bitcast <8 x i32> %318 to <8 x float>, !dbg !34
  %320 = insertelement <8 x i32> poison, i32 %243, i64 0, !dbg !38
  %321 = insertelement <8 x i32> %320, i32 %258, i64 1, !dbg !38
  %322 = insertelement <8 x i32> %321, i32 %262, i64 2, !dbg !38
  %323 = insertelement <8 x i32> %322, i32 %266, i64 3, !dbg !38
  %324 = insertelement <8 x i32> %323, i32 %270, i64 4, !dbg !38
  %325 = insertelement <8 x i32> %324, i32 %274, i64 5, !dbg !38
  %326 = insertelement <8 x i32> %325, i32 %278, i64 6, !dbg !38
  %327 = insertelement <8 x i32> %326, i32 %282, i64 7, !dbg !38
  %328 = bitcast <8 x i32> %327 to <8 x float>, !dbg !38
  %329 = fadd <8 x float> %319, %328, !dbg !53
  %330 = insertelement <8 x i32> poison, i32 %246, i64 0, !dbg !54
  %331 = insertelement <8 x i32> %330, i32 %259, i64 1, !dbg !54
  %332 = insertelement <8 x i32> %331, i32 %263, i64 2, !dbg !54
  %333 = insertelement <8 x i32> %332, i32 %267, i64 3, !dbg !54
  %334 = insertelement <8 x i32> %333, i32 %271, i64 4, !dbg !54
  %335 = insertelement <8 x i32> %334, i32 %275, i64 5, !dbg !54
  %336 = insertelement <8 x i32> %335, i32 %279, i64 6, !dbg !54
  %337 = insertelement <8 x i32> %336, i32 %283, i64 7, !dbg !54
  %338 = insertelement <8 x i32> poison, i32 %247, i64 0, !dbg !54
  %339 = insertelement <8 x i32> %338, i32 %260, i64 1, !dbg !54
  %340 = insertelement <8 x i32> %339, i32 %264, i64 2, !dbg !54
  %341 = insertelement <8 x i32> %340, i32 %268, i64 3, !dbg !54
  %342 = insertelement <8 x i32> %341, i32 %272, i64 4, !dbg !54
  %343 = insertelement <8 x i32> %342, i32 %276, i64 5, !dbg !54
  %344 = insertelement <8 x i32> %343, i32 %280, i64 6, !dbg !54
  %345 = insertelement <8 x i32> %344, i32 %284, i64 7, !dbg !54
  %346 = select <8 x i1> %245, <8 x i32> %337, <8 x i32> %345, !dbg !54
  %347 = bitcast <8 x i32> %346 to <8 x float>, !dbg !54
  %348 = select <8 x i1> %241, <8 x float> %329, <8 x float> %347, !dbg !55
  %349 = fsub <8 x float> %348, %256, !dbg !56
  %350 = insertelement <8 x float> poison, float %310, i64 0, !dbg !57
  %351 = insertelement <8 x float> %350, float %309, i64 1, !dbg !57
  %352 = insertelement <8 x float> %351, float %308, i64 2, !dbg !57
  %353 = insertelement <8 x float> %352, float %307, i64 3, !dbg !57
  %354 = insertelement <8 x float> %353, float %306, i64 4, !dbg !57
  %355 = insertelement <8 x float> %354, float %305, i64 5, !dbg !57
  %356 = insertelement <8 x float> %355, float %304, i64 6, !dbg !57
  %357 = insertelement <8 x float> %356, float %303, i64 7, !dbg !57
  %358 = fmul <8 x float> %349, %357, !dbg !57
  %359 = fmul <8 x float> %358, %302, !dbg !58
  %360 = fadd <8 x float> %359, %293, !dbg !59
  %361 = fcmp olt <8 x float> %360, zeroinitializer, !dbg !60
  %362 = extractelement <8 x i1> %361, i64 7, !dbg !64
  %363 = extractelement <8 x i1> %361, i64 6, !dbg !64
  %364 = extractelement <8 x i1> %361, i64 5, !dbg !64
  %365 = extractelement <8 x i1> %361, i64 4, !dbg !64
  %366 = extractelement <8 x i1> %361, i64 3, !dbg !64
  %367 = extractelement <8 x i1> %361, i64 2, !dbg !64
  %368 = extractelement <8 x i1> %361, i64 1, !dbg !64
  %369 = extractelement <8 x i1> %361, i64 0, !dbg !64
  %370 = sext i32 %16 to i64, !dbg !65
  %371 = getelementptr float, ptr addrspace(1) %7, i64 %370, !dbg !65
  %372 = sext i32 %17 to i64, !dbg !65
  %373 = getelementptr float, ptr addrspace(1) %7, i64 %372, !dbg !65
  %bc = bitcast <8 x float> %348 to <8 x i32>, !dbg !66
  %374 = extractelement <8 x i32> %bc, i64 7, !dbg !66
  %bc46 = bitcast <8 x float> %348 to <8 x i32>, !dbg !66
  %375 = extractelement <8 x i32> %bc46, i64 6, !dbg !66
  %bc47 = bitcast <8 x float> %348 to <8 x i32>, !dbg !66
  %376 = extractelement <8 x i32> %bc47, i64 5, !dbg !66
  %bc48 = bitcast <8 x float> %348 to <8 x i32>, !dbg !66
  %377 = extractelement <8 x i32> %bc48, i64 4, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %374, i32 %375, i32 %376, i32 %377, ptr addrspace(1) %371, i1 %18) #3, !dbg !66
  %bc49 = bitcast <8 x float> %348 to <8 x i32>, !dbg !66
  %378 = extractelement <8 x i32> %bc49, i64 3, !dbg !66
  %bc50 = bitcast <8 x float> %348 to <8 x i32>, !dbg !66
  %379 = extractelement <8 x i32> %bc50, i64 2, !dbg !66
  %bc51 = bitcast <8 x float> %348 to <8 x i32>, !dbg !66
  %380 = extractelement <8 x i32> %bc51, i64 1, !dbg !66
  %bc52 = bitcast <8 x float> %348 to <8 x i32>, !dbg !66
  %381 = extractelement <8 x i32> %bc52, i64 0, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %378, i32 %379, i32 %380, i32 %381, ptr addrspace(1) %373, i1 %19) #3, !dbg !66
  %382 = getelementptr float, ptr addrspace(1) %8, i64 %370, !dbg !67
  %383 = getelementptr float, ptr addrspace(1) %8, i64 %372, !dbg !67
  %bc53 = bitcast <8 x float> %360 to <8 x i32>, !dbg !68
  %384 = extractelement <8 x i32> %bc53, i64 7, !dbg !68
  %385 = select i1 %362, i32 0, i32 %384, !dbg !64
  %bc54 = bitcast <8 x float> %360 to <8 x i32>, !dbg !68
  %386 = extractelement <8 x i32> %bc54, i64 6, !dbg !68
  %387 = select i1 %363, i32 0, i32 %386, !dbg !64
  %bc55 = bitcast <8 x float> %360 to <8 x i32>, !dbg !68
  %388 = extractelement <8 x i32> %bc55, i64 5, !dbg !68
  %389 = select i1 %364, i32 0, i32 %388, !dbg !64
  %bc56 = bitcast <8 x float> %360 to <8 x i32>, !dbg !68
  %390 = extractelement <8 x i32> %bc56, i64 4, !dbg !68
  %391 = select i1 %365, i32 0, i32 %390, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %385, i32 %387, i32 %389, i32 %391, ptr addrspace(1) %382, i1 %18) #3, !dbg !68
  %bc57 = bitcast <8 x float> %360 to <8 x i32>, !dbg !68
  %392 = extractelement <8 x i32> %bc57, i64 3, !dbg !68
  %393 = select i1 %366, i32 0, i32 %392, !dbg !64
  %bc58 = bitcast <8 x float> %360 to <8 x i32>, !dbg !68
  %394 = extractelement <8 x i32> %bc58, i64 2, !dbg !68
  %395 = select i1 %367, i32 0, i32 %394, !dbg !64
  %bc59 = bitcast <8 x float> %360 to <8 x i32>, !dbg !68
  %396 = extractelement <8 x i32> %bc59, i64 1, !dbg !68
  %397 = select i1 %368, i32 0, i32 %396, !dbg !64
  %bc60 = bitcast <8 x float> %360 to <8 x i32>, !dbg !68
  %398 = extractelement <8 x i32> %bc60, i64 0, !dbg !68
  %399 = select i1 %369, i32 0, i32 %398, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %393, i32 %395, i32 %397, i32 %399, ptr addrspace(1) %383, i1 %19) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctjuexj43spcfzjxywbgysdb273qv7ftduaurcc7dycvckcgb5wh.py", directory: "inductor_cache/tj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 51, column: 40, scope: !7)
!20 = !DILocation(line: 28, column: 31, scope: !7)
!21 = !DILocation(line: 28, column: 36, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 35, scope: !7)
!30 = !DILocation(line: 37, column: 51, scope: !7)
!31 = !DILocation(line: 37, column: 45, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 63, scope: !7)
!34 = !DILocation(line: 37, column: 56, scope: !7)
!35 = !DILocation(line: 38, column: 51, scope: !7)
!36 = !DILocation(line: 38, column: 45, scope: !7)
!37 = !DILocation(line: 38, column: 30, scope: !7)
!38 = !DILocation(line: 38, column: 56, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 36, scope: !7)
!41 = !DILocation(line: 51, column: 56, scope: !7)
!42 = !DILocation(line: 51, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 75, scope: !7)
!44 = !DILocation(line: 51, column: 67, scope: !7)
!45 = !DILocation(line: 52, column: 21, scope: !7)
!46 = !DILocation(line: 56, column: 31, scope: !7)
!47 = !DILocation(line: 56, column: 94, scope: !7)
!48 = !DILocation(line: 56, column: 86, scope: !7)
!49 = !DILocation(line: 63, column: 20, scope: !7)
!50 = !DILocation(line: 64, column: 27, scope: !7)
!51 = !DILocation(line: 49, column: 20, scope: !7)
!52 = !DILocation(line: 66, column: 20, scope: !7)
!53 = !DILocation(line: 39, column: 18, scope: !7)
!54 = !DILocation(line: 57, column: 35, scope: !7)
!55 = !DILocation(line: 0, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 69, column: 20, scope: !7)
!58 = !DILocation(line: 70, column: 20, scope: !7)
!59 = !DILocation(line: 71, column: 20, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!63 = !DILocation(line: 73, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 74, column: 25, scope: !7)
!66 = !DILocation(line: 74, column: 37, scope: !7)
!67 = !DILocation(line: 75, column: 25, scope: !7)
!68 = !DILocation(line: 75, column: 37, scope: !7)
!69 = !DILocation(line: 75, column: 4, scope: !7)
