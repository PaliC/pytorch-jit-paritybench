; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = insertelement <4 x i32> poison, i32 %14, i64 0, !dbg !14
  %16 = insertelement <4 x i32> %15, i32 %13, i64 1, !dbg !14
  %17 = shufflevector <4 x i32> %16, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !14
  %18 = sdiv <4 x i32> %17, <i32 12, i32 12, i32 144, i32 144>, !dbg !14
  %19 = srem <4 x i32> %18, splat (i32 12), !dbg !15
  %20 = srem i32 %13, 12, !dbg !16
  %21 = srem i32 %14, 12, !dbg !16
  %22 = sdiv i32 %13, 1728, !dbg !17
  %23 = sdiv i32 %14, 1728, !dbg !17
  %24 = srem i32 %22, 32, !dbg !18
  %25 = srem i32 %23, 32, !dbg !18
  %26 = and <4 x i32> %19, splat (i32 -4), !dbg !19
  %27 = icmp eq <4 x i32> %26, splat (i32 4), !dbg !19
  %shift = shufflevector <4 x i1> %27, <4 x i1> poison, <4 x i32> <i32 poison, i32 3, i32 poison, i32 poison>, !dbg !19
  %28 = and <4 x i1> %shift, %27, !dbg !19
  %29 = extractelement <4 x i1> %28, i64 1, !dbg !19
  %shift36 = shufflevector <4 x i1> %27, <4 x i1> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !19
  %30 = and <4 x i1> %shift36, %27, !dbg !19
  %31 = extractelement <4 x i1> %30, i64 0, !dbg !19
  %32 = icmp eq i32 %20, 4, !dbg !20
  %33 = and i1 %32, %29, !dbg !20
  %34 = icmp eq i32 %21, 4, !dbg !20
  %35 = and i1 %34, %31, !dbg !20
  %36 = add nsw i32 %20, -84, !dbg !21
  %37 = add nsw i32 %21, -84, !dbg !21
  %38 = extractelement <4 x i32> %19, i64 1, !dbg !22
  %39 = shl nsw i32 %38, 2, !dbg !22
  %40 = extractelement <4 x i32> %19, i64 0, !dbg !22
  %41 = shl nsw i32 %40, 2, !dbg !22
  %42 = extractelement <4 x i32> %19, i64 3, !dbg !23
  %43 = shl nsw i32 %42, 4, !dbg !23
  %44 = extractelement <4 x i32> %19, i64 2, !dbg !23
  %45 = shl nsw i32 %44, 4, !dbg !23
  %46 = shl nsw i32 %22, 6, !dbg !24
  %47 = shl nsw i32 %23, 6, !dbg !24
  %48 = add nsw i32 %36, %46, !dbg !25
  %49 = add nsw i32 %48, %39, !dbg !26
  %50 = add nsw i32 %49, %43, !dbg !27
  %51 = add nsw i32 %37, %47, !dbg !25
  %52 = add nsw i32 %51, %41, !dbg !26
  %53 = add nsw i32 %52, %45, !dbg !27
  %54 = sext i32 %50 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !28
  %56 = sext i32 %53 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !29
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #3, !dbg !29
  %60 = sext i32 %24 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !30
  %62 = sext i32 %25 to i64, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %33, i32 0, i1 %33) #3, !dbg !31
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %33, i32 0, i1 %33) #3, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %33, i32 0, i1 %33) #3, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %33, i32 0, i1 %33) #3, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %35, i32 0, i1 %35) #3, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %35, i32 0, i1 %35) #3, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %35, i32 0, i1 %35) #3, !dbg !31
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %35, i32 0, i1 %35) #3, !dbg !31
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !32
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %33, i32 0, i1 %33) #3, !dbg !33
  %75 = bitcast i32 %74 to float, !dbg !33
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %33, i32 0, i1 %33) #3, !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %33, i32 0, i1 %33) #3, !dbg !33
  %79 = bitcast i32 %78 to float, !dbg !33
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %33, i32 0, i1 %33) #3, !dbg !33
  %81 = bitcast i32 %80 to float, !dbg !33
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %35, i32 0, i1 %35) #3, !dbg !33
  %83 = bitcast i32 %82 to float, !dbg !33
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %35, i32 0, i1 %35) #3, !dbg !33
  %85 = bitcast i32 %84 to float, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %35, i32 0, i1 %35) #3, !dbg !33
  %87 = bitcast i32 %86 to float, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %35, i32 0, i1 %35) #3, !dbg !33
  %89 = bitcast i32 %88 to float, !dbg !33
  %90 = fadd float %75, 0x3EE4F8B580000000, !dbg !34
  %91 = fadd float %77, 0x3EE4F8B580000000, !dbg !34
  %92 = fadd float %79, 0x3EE4F8B580000000, !dbg !34
  %93 = fadd float %81, 0x3EE4F8B580000000, !dbg !34
  %94 = fadd float %83, 0x3EE4F8B580000000, !dbg !34
  %95 = fadd float %85, 0x3EE4F8B580000000, !dbg !34
  %96 = fadd float %87, 0x3EE4F8B580000000, !dbg !34
  %97 = fadd float %89, 0x3EE4F8B580000000, !dbg !34
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %98, 0, !dbg !35
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %99, 0, !dbg !35
  br i1 %.not.i, label %105, label %100, !dbg !35

100:                                              ; preds = %7
  br i1 %.not1.i, label %103, label %101, !dbg !35

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

105:                                              ; preds = %7
  br i1 %.not1.i, label %108, label %106, !dbg !35

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %101, %103, %106, %108
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !35
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %110, 0, !dbg !35
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %111, 0, !dbg !35
  br i1 %.not.i1, label %117, label %112, !dbg !35

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %115, label %113, !dbg !35

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

117:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %120, label %118, !dbg !35

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %113, %115, %118, %120
  %.0.i3 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !35
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i6 = icmp eq i32 %122, 0, !dbg !35
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i9 = icmp eq i32 %123, 0, !dbg !35
  br i1 %.not.i6, label %129, label %124, !dbg !35

124:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %127, label %125, !dbg !35

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

129:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %132, label %130, !dbg !35

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %125, %127, %130, %132
  %.0.i8 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !35
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %134, 0, !dbg !35
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %135, 0, !dbg !35
  br i1 %.not.i11, label %141, label %136, !dbg !35

136:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %139, label %137, !dbg !35

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

141:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %144, label %142, !dbg !35

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %137, %139, %142, %144
  %.0.i13 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !35
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i16 = icmp eq i32 %146, 0, !dbg !35
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i19 = icmp eq i32 %147, 0, !dbg !35
  br i1 %.not.i16, label %153, label %148, !dbg !35

148:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %151, label %149, !dbg !35

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

153:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %156, label %154, !dbg !35

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %149, %151, %154, %156
  %.0.i18 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !35
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i21 = icmp eq i32 %158, 0, !dbg !35
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i24 = icmp eq i32 %159, 0, !dbg !35
  br i1 %.not.i21, label %165, label %160, !dbg !35

160:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %163, label %161, !dbg !35

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

165:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %168, label %166, !dbg !35

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %161, %163, %166, %168
  %.0.i23 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !35
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i26 = icmp eq i32 %170, 0, !dbg !35
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i29 = icmp eq i32 %171, 0, !dbg !35
  br i1 %.not.i26, label %177, label %172, !dbg !35

172:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %175, label %173, !dbg !35

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

177:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %180, label %178, !dbg !35

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %173, %175, %178, %180
  %.0.i28 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !35
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i31 = icmp eq i32 %182, 0, !dbg !35
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i34 = icmp eq i32 %183, 0, !dbg !35
  br i1 %.not.i31, label %189, label %184, !dbg !35

184:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %187, label %185, !dbg !35

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

189:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %192, label %190, !dbg !35

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %185, %187, %190, %192
  %.0.i33 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !35
  %194 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !29
  %195 = insertelement <8 x i32> poison, i32 %71, i64 0, !dbg !31
  %196 = insertelement <8 x i32> %195, i32 %70, i64 1, !dbg !31
  %197 = insertelement <8 x i32> %196, i32 %69, i64 2, !dbg !31
  %198 = insertelement <8 x i32> %197, i32 %68, i64 3, !dbg !31
  %199 = insertelement <8 x i32> %198, i32 %67, i64 4, !dbg !31
  %200 = insertelement <8 x i32> %199, i32 %66, i64 5, !dbg !31
  %201 = insertelement <8 x i32> %200, i32 %65, i64 6, !dbg !31
  %202 = insertelement <8 x i32> %201, i32 %64, i64 7, !dbg !31
  %203 = bitcast <8 x i32> %202 to <8 x float>, !dbg !31
  %204 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !29
  %205 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !29
  %206 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !29
  %207 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !29
  %208 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !29
  %209 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !29
  %210 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !29
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !36
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !36
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !36
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !36
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !36
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !36
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !36
  %219 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !37
  %220 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !37
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %33, i32 0, i1 %33) #3, !dbg !38
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %33, i32 0, i1 %33) #3, !dbg !38
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %33, i32 0, i1 %33) #3, !dbg !38
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %33, i32 0, i1 %33) #3, !dbg !38
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %35, i32 0, i1 %35) #3, !dbg !38
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %35, i32 0, i1 %35) #3, !dbg !38
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %35, i32 0, i1 %35) #3, !dbg !38
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %35, i32 0, i1 %35) #3, !dbg !38
  %229 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !39
  %230 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !39
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %33, i32 0, i1 %33) #3, !dbg !40
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %33, i32 0, i1 %33) #3, !dbg !40
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %33, i32 0, i1 %33) #3, !dbg !40
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %33, i32 0, i1 %33) #3, !dbg !40
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %35, i32 0, i1 %35) #3, !dbg !40
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %35, i32 0, i1 %35) #3, !dbg !40
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %35, i32 0, i1 %35) #3, !dbg !40
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %35, i32 0, i1 %35) #3, !dbg !40
  %239 = insertelement <8 x i32> poison, i32 %194, i64 0, !dbg !29
  %240 = insertelement <8 x i32> %239, i32 %204, i64 1, !dbg !29
  %241 = insertelement <8 x i32> %240, i32 %205, i64 2, !dbg !29
  %242 = insertelement <8 x i32> %241, i32 %206, i64 3, !dbg !29
  %243 = insertelement <8 x i32> %242, i32 %207, i64 4, !dbg !29
  %244 = insertelement <8 x i32> %243, i32 %208, i64 5, !dbg !29
  %245 = insertelement <8 x i32> %244, i32 %209, i64 6, !dbg !29
  %246 = insertelement <8 x i32> %245, i32 %210, i64 7, !dbg !29
  %247 = bitcast <8 x i32> %246 to <8 x float>, !dbg !29
  %248 = fsub <8 x float> %247, %203, !dbg !41
  %249 = insertelement <8 x float> poison, float %218, i64 0, !dbg !42
  %250 = insertelement <8 x float> %249, float %217, i64 1, !dbg !42
  %251 = insertelement <8 x float> %250, float %216, i64 2, !dbg !42
  %252 = insertelement <8 x float> %251, float %215, i64 3, !dbg !42
  %253 = insertelement <8 x float> %252, float %214, i64 4, !dbg !42
  %254 = insertelement <8 x float> %253, float %213, i64 5, !dbg !42
  %255 = insertelement <8 x float> %254, float %212, i64 6, !dbg !42
  %256 = insertelement <8 x float> %255, float %211, i64 7, !dbg !42
  %257 = fmul <8 x float> %248, %256, !dbg !42
  %258 = insertelement <8 x i32> poison, i32 %228, i64 0, !dbg !38
  %259 = insertelement <8 x i32> %258, i32 %227, i64 1, !dbg !38
  %260 = insertelement <8 x i32> %259, i32 %226, i64 2, !dbg !38
  %261 = insertelement <8 x i32> %260, i32 %225, i64 3, !dbg !38
  %262 = insertelement <8 x i32> %261, i32 %224, i64 4, !dbg !38
  %263 = insertelement <8 x i32> %262, i32 %223, i64 5, !dbg !38
  %264 = insertelement <8 x i32> %263, i32 %222, i64 6, !dbg !38
  %265 = insertelement <8 x i32> %264, i32 %221, i64 7, !dbg !38
  %266 = bitcast <8 x i32> %265 to <8 x float>, !dbg !38
  %267 = fmul <8 x float> %257, %266, !dbg !43
  %268 = insertelement <8 x i32> poison, i32 %238, i64 0, !dbg !40
  %269 = insertelement <8 x i32> %268, i32 %237, i64 1, !dbg !40
  %270 = insertelement <8 x i32> %269, i32 %236, i64 2, !dbg !40
  %271 = insertelement <8 x i32> %270, i32 %235, i64 3, !dbg !40
  %272 = insertelement <8 x i32> %271, i32 %234, i64 4, !dbg !40
  %273 = insertelement <8 x i32> %272, i32 %233, i64 5, !dbg !40
  %274 = insertelement <8 x i32> %273, i32 %232, i64 6, !dbg !40
  %275 = insertelement <8 x i32> %274, i32 %231, i64 7, !dbg !40
  %276 = bitcast <8 x i32> %275 to <8 x float>, !dbg !40
  %277 = fadd <8 x float> %267, %276, !dbg !44
  %278 = fcmp olt <8 x float> %277, zeroinitializer, !dbg !45
  %279 = extractelement <8 x i1> %278, i64 7, !dbg !49
  %280 = extractelement <8 x i1> %278, i64 6, !dbg !49
  %281 = extractelement <8 x i1> %278, i64 5, !dbg !49
  %282 = extractelement <8 x i1> %278, i64 4, !dbg !49
  %283 = extractelement <8 x i1> %278, i64 3, !dbg !49
  %284 = extractelement <8 x i1> %278, i64 2, !dbg !49
  %285 = extractelement <8 x i1> %278, i64 1, !dbg !49
  %286 = extractelement <8 x i1> %278, i64 0, !dbg !49
  %287 = sext i32 %13 to i64, !dbg !50
  %288 = getelementptr float, ptr addrspace(1) %5, i64 %287, !dbg !50
  %289 = sext i32 %14 to i64, !dbg !50
  %290 = getelementptr float, ptr addrspace(1) %5, i64 %289, !dbg !50
  %bc = bitcast <8 x float> %277 to <8 x i32>, !dbg !51
  %291 = extractelement <8 x i32> %bc, i64 7, !dbg !51
  %292 = select i1 %279, i32 0, i32 %291, !dbg !49
  %293 = select i1 %33, i32 %292, i32 0, !dbg !52
  %bc37 = bitcast <8 x float> %277 to <8 x i32>, !dbg !51
  %294 = extractelement <8 x i32> %bc37, i64 6, !dbg !51
  %295 = select i1 %280, i32 0, i32 %294, !dbg !49
  %296 = select i1 %33, i32 %295, i32 0, !dbg !52
  %bc38 = bitcast <8 x float> %277 to <8 x i32>, !dbg !51
  %297 = extractelement <8 x i32> %bc38, i64 5, !dbg !51
  %298 = select i1 %281, i32 0, i32 %297, !dbg !49
  %299 = select i1 %33, i32 %298, i32 0, !dbg !52
  %bc39 = bitcast <8 x float> %277 to <8 x i32>, !dbg !51
  %300 = extractelement <8 x i32> %bc39, i64 4, !dbg !51
  %301 = select i1 %282, i32 0, i32 %300, !dbg !49
  %302 = select i1 %33, i32 %301, i32 0, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %293, i32 %296, i32 %299, i32 %302, ptr addrspace(1) %288, i1 true) #3, !dbg !51
  %bc40 = bitcast <8 x float> %277 to <8 x i32>, !dbg !51
  %303 = extractelement <8 x i32> %bc40, i64 3, !dbg !51
  %304 = select i1 %283, i32 0, i32 %303, !dbg !49
  %305 = select i1 %35, i32 %304, i32 0, !dbg !52
  %bc41 = bitcast <8 x float> %277 to <8 x i32>, !dbg !51
  %306 = extractelement <8 x i32> %bc41, i64 2, !dbg !51
  %307 = select i1 %284, i32 0, i32 %306, !dbg !49
  %308 = select i1 %35, i32 %307, i32 0, !dbg !52
  %bc42 = bitcast <8 x float> %277 to <8 x i32>, !dbg !51
  %309 = extractelement <8 x i32> %bc42, i64 1, !dbg !51
  %310 = select i1 %285, i32 0, i32 %309, !dbg !49
  %311 = select i1 %35, i32 %310, i32 0, !dbg !52
  %bc43 = bitcast <8 x float> %277 to <8 x i32>, !dbg !51
  %312 = extractelement <8 x i32> %bc43, i64 0, !dbg !51
  %313 = select i1 %286, i32 0, i32 %312, !dbg !49
  %314 = select i1 %35, i32 %313, i32 0, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %305, i32 %308, i32 %311, i32 %314, ptr addrspace(1) %290, i1 true) #3, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckuc5wqum5k4hslrida6x5kjrgu3ykb355kjiof2abvyymwaxviq.py", directory: "inductor_cache/ku")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 29, scope: !7)
!19 = !DILocation(line: 43, column: 20, scope: !7)
!20 = !DILocation(line: 45, column: 20, scope: !7)
!21 = !DILocation(line: 46, column: 39, scope: !7)
!22 = !DILocation(line: 46, column: 46, scope: !7)
!23 = !DILocation(line: 46, column: 54, scope: !7)
!24 = !DILocation(line: 46, column: 62, scope: !7)
!25 = !DILocation(line: 46, column: 44, scope: !7)
!26 = !DILocation(line: 46, column: 51, scope: !7)
!27 = !DILocation(line: 46, column: 59, scope: !7)
!28 = !DILocation(line: 46, column: 31, scope: !7)
!29 = !DILocation(line: 46, column: 67, scope: !7)
!30 = !DILocation(line: 47, column: 31, scope: !7)
!31 = !DILocation(line: 47, column: 36, scope: !7)
!32 = !DILocation(line: 49, column: 31, scope: !7)
!33 = !DILocation(line: 49, column: 36, scope: !7)
!34 = !DILocation(line: 51, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 27, scope: !7)
!36 = !DILocation(line: 54, column: 20, scope: !7)
!37 = !DILocation(line: 58, column: 31, scope: !7)
!38 = !DILocation(line: 58, column: 36, scope: !7)
!39 = !DILocation(line: 60, column: 31, scope: !7)
!40 = !DILocation(line: 60, column: 36, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 57, column: 20, scope: !7)
!43 = !DILocation(line: 59, column: 20, scope: !7)
!44 = !DILocation(line: 61, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 63, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 66, column: 25, scope: !7)
!51 = !DILocation(line: 66, column: 37, scope: !7)
!52 = !DILocation(line: 65, column: 35, scope: !7)
!53 = !DILocation(line: 66, column: 4, scope: !7)
