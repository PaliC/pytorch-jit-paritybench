; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 2, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 16, !dbg !12
  %.lobit = lshr exact i32 %8, 4, !dbg !12
  %9 = shl i32 %7, 1, !dbg !12
  %10 = and i32 %9, 2, !dbg !12
  %11 = or disjoint i32 %6, %.lobit, !dbg !13
  %12 = or disjoint i32 %11, 2, !dbg !13
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = icmp slt i32 %11, 4, !dbg !14
  %15 = icmp slt i32 %12, 4, !dbg !14
  %16 = icmp slt i32 %13, 4, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 4, !dbg !16
  %19 = and i32 %7, 15, !dbg !17
  %20 = lshr i32 %7, 1, !dbg !17
  %21 = and i32 %20, 15, !dbg !17
  %22 = or disjoint i32 %18, %19, !dbg !18
  %23 = or disjoint i32 %18, %21, !dbg !18
  %24 = icmp slt i32 %22, 16, !dbg !19
  %25 = icmp slt i32 %23, 16, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %26 = sdiv i32 %.frozen, 4, !dbg !20
  %27 = mul i32 %26, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %28 = shl nsw i32 %.decomposed, 4, !dbg !22
  %29 = shl i32 %11, 6, !dbg !23
  %30 = shl i32 %12, 6, !dbg !23
  %31 = shl i32 %26, 8, !dbg !24
  %32 = add i32 %31, %29, !dbg !25
  %33 = add i32 %32, %28, !dbg !26
  %34 = add i32 %31, %30, !dbg !25
  %35 = add i32 %34, %28, !dbg !26
  %36 = sext i32 %33 to i64, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !27
  %38 = sext i32 %35 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = and i1 %14, %24, !dbg !28
  %41 = and i1 %15, %24, !dbg !28
  %42 = and i1 %16, %25, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !29
  %44 = bitcast i32 %43 to float, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = or disjoint i32 %28, 1, !dbg !30
  %48 = add i32 %32, %47, !dbg !31
  %49 = add i32 %34, %47, !dbg !31
  %50 = sext i32 %48 to i64, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !32
  %52 = sext i32 %49 to i64, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !32
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %40) #2, !dbg !33
  %55 = bitcast i32 %54 to float, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %41) #2, !dbg !33
  %57 = bitcast i32 %56 to float, !dbg !33
  %58 = or disjoint i32 %28, 2, !dbg !34
  %59 = add i32 %32, %58, !dbg !35
  %60 = add i32 %34, %58, !dbg !35
  %61 = sext i32 %59 to i64, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !36
  %63 = sext i32 %60 to i64, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %40) #2, !dbg !37
  %66 = bitcast i32 %65 to float, !dbg !37
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %41) #2, !dbg !37
  %68 = bitcast i32 %67 to float, !dbg !37
  %69 = or disjoint i32 %28, 3, !dbg !38
  %70 = add i32 %32, %69, !dbg !39
  %71 = add i32 %34, %69, !dbg !39
  %72 = sext i32 %70 to i64, !dbg !40
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !40
  %74 = sext i32 %71 to i64, !dbg !40
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !40
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %40) #2, !dbg !41
  %77 = bitcast i32 %76 to float, !dbg !41
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %41) #2, !dbg !41
  %79 = bitcast i32 %78 to float, !dbg !41
  %80 = or disjoint i32 %28, 4, !dbg !42
  %81 = add i32 %32, %80, !dbg !43
  %82 = add i32 %34, %80, !dbg !43
  %83 = sext i32 %81 to i64, !dbg !44
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !44
  %85 = sext i32 %82 to i64, !dbg !44
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !44
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %40) #2, !dbg !45
  %88 = bitcast i32 %87 to float, !dbg !45
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %41) #2, !dbg !45
  %90 = bitcast i32 %89 to float, !dbg !45
  %91 = or disjoint i32 %28, 5, !dbg !46
  %92 = add i32 %32, %91, !dbg !47
  %93 = add i32 %34, %91, !dbg !47
  %94 = sext i32 %92 to i64, !dbg !48
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !48
  %96 = sext i32 %93 to i64, !dbg !48
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !48
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %40) #2, !dbg !49
  %99 = bitcast i32 %98 to float, !dbg !49
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %41) #2, !dbg !49
  %101 = bitcast i32 %100 to float, !dbg !49
  %102 = or disjoint i32 %28, 6, !dbg !50
  %103 = add i32 %32, %102, !dbg !51
  %104 = add i32 %34, %102, !dbg !51
  %105 = sext i32 %103 to i64, !dbg !52
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !52
  %107 = sext i32 %104 to i64, !dbg !52
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !52
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %40) #2, !dbg !53
  %110 = bitcast i32 %109 to float, !dbg !53
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %41) #2, !dbg !53
  %112 = bitcast i32 %111 to float, !dbg !53
  %113 = or disjoint i32 %28, 7, !dbg !54
  %114 = add i32 %32, %113, !dbg !55
  %115 = add i32 %34, %113, !dbg !55
  %116 = sext i32 %114 to i64, !dbg !56
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !56
  %118 = sext i32 %115 to i64, !dbg !56
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !56
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %40) #2, !dbg !57
  %121 = bitcast i32 %120 to float, !dbg !57
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %41) #2, !dbg !57
  %123 = bitcast i32 %122 to float, !dbg !57
  %124 = or disjoint i32 %28, 8, !dbg !58
  %125 = add i32 %32, %124, !dbg !59
  %126 = add i32 %34, %124, !dbg !59
  %127 = sext i32 %125 to i64, !dbg !60
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !60
  %129 = sext i32 %126 to i64, !dbg !60
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !60
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %40) #2, !dbg !61
  %132 = bitcast i32 %131 to float, !dbg !61
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %41) #2, !dbg !61
  %134 = bitcast i32 %133 to float, !dbg !61
  %135 = or disjoint i32 %28, 9, !dbg !62
  %136 = add i32 %32, %135, !dbg !63
  %137 = add i32 %34, %135, !dbg !63
  %138 = sext i32 %136 to i64, !dbg !64
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !64
  %140 = sext i32 %137 to i64, !dbg !64
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !64
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %40) #2, !dbg !65
  %143 = bitcast i32 %142 to float, !dbg !65
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %41) #2, !dbg !65
  %145 = bitcast i32 %144 to float, !dbg !65
  %146 = or disjoint i32 %28, 10, !dbg !66
  %147 = add i32 %32, %146, !dbg !67
  %148 = add i32 %34, %146, !dbg !67
  %149 = sext i32 %147 to i64, !dbg !68
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !68
  %151 = sext i32 %148 to i64, !dbg !68
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !68
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %40) #2, !dbg !69
  %154 = bitcast i32 %153 to float, !dbg !69
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %41) #2, !dbg !69
  %156 = bitcast i32 %155 to float, !dbg !69
  %157 = or disjoint i32 %28, 11, !dbg !70
  %158 = add i32 %32, %157, !dbg !71
  %159 = add i32 %34, %157, !dbg !71
  %160 = sext i32 %158 to i64, !dbg !72
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !72
  %162 = sext i32 %159 to i64, !dbg !72
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !72
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %40) #2, !dbg !73
  %165 = bitcast i32 %164 to float, !dbg !73
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %41) #2, !dbg !73
  %167 = bitcast i32 %166 to float, !dbg !73
  %168 = or disjoint i32 %28, 12, !dbg !74
  %169 = add i32 %32, %168, !dbg !75
  %170 = add i32 %34, %168, !dbg !75
  %171 = sext i32 %169 to i64, !dbg !76
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !76
  %173 = sext i32 %170 to i64, !dbg !76
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !76
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %40) #2, !dbg !77
  %176 = bitcast i32 %175 to float, !dbg !77
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %41) #2, !dbg !77
  %178 = bitcast i32 %177 to float, !dbg !77
  %179 = or disjoint i32 %28, 13, !dbg !78
  %180 = add i32 %32, %179, !dbg !79
  %181 = add i32 %34, %179, !dbg !79
  %182 = sext i32 %180 to i64, !dbg !80
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !80
  %184 = sext i32 %181 to i64, !dbg !80
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !80
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %40) #2, !dbg !81
  %187 = bitcast i32 %186 to float, !dbg !81
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %41) #2, !dbg !81
  %189 = bitcast i32 %188 to float, !dbg !81
  %190 = or disjoint i32 %28, 14, !dbg !82
  %191 = add i32 %32, %190, !dbg !83
  %192 = add i32 %34, %190, !dbg !83
  %193 = sext i32 %191 to i64, !dbg !84
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !84
  %195 = sext i32 %192 to i64, !dbg !84
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !84
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 %40) #2, !dbg !85
  %198 = bitcast i32 %197 to float, !dbg !85
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 %41) #2, !dbg !85
  %200 = bitcast i32 %199 to float, !dbg !85
  %201 = or disjoint i32 %28, 15, !dbg !86
  %202 = add i32 %32, %201, !dbg !87
  %203 = add i32 %34, %201, !dbg !87
  %204 = sext i32 %202 to i64, !dbg !88
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !88
  %206 = sext i32 %203 to i64, !dbg !88
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !88
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %40) #2, !dbg !89
  %209 = bitcast i32 %208 to float, !dbg !89
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %41) #2, !dbg !89
  %211 = bitcast i32 %210 to float, !dbg !89
  %212 = fcmp ogt float %55, %44, !dbg !90
  %213 = fcmp ogt float %57, %46, !dbg !90
  %214 = fcmp uno float %55, 0.000000e+00, !dbg !94
  %215 = fcmp uno float %57, 0.000000e+00, !dbg !94
  %216 = or i1 %212, %214, !dbg !95
  %217 = or i1 %213, %215, !dbg !95
  %218 = select i1 %216, float %55, float %44, !dbg !96
  %219 = select i1 %217, float %57, float %46, !dbg !96
  %220 = fcmp olt float %218, %66, !dbg !97
  %221 = fcmp olt float %219, %68, !dbg !97
  %222 = fcmp uno float %66, 0.000000e+00, !dbg !99
  %223 = fcmp uno float %68, 0.000000e+00, !dbg !99
  %224 = or i1 %222, %220, !dbg !100
  %225 = or i1 %223, %221, !dbg !100
  %226 = select i1 %224, float %66, float %218, !dbg !101
  %227 = select i1 %225, float %68, float %219, !dbg !101
  %228 = fcmp olt float %226, %77, !dbg !102
  %229 = fcmp olt float %227, %79, !dbg !102
  %230 = fcmp uno float %77, 0.000000e+00, !dbg !104
  %231 = fcmp uno float %79, 0.000000e+00, !dbg !104
  %232 = or i1 %230, %228, !dbg !105
  %233 = or i1 %231, %229, !dbg !105
  %234 = select i1 %232, float %77, float %226, !dbg !106
  %235 = select i1 %233, float %79, float %227, !dbg !106
  %236 = fcmp olt float %234, %88, !dbg !107
  %237 = fcmp olt float %235, %90, !dbg !107
  %238 = fcmp uno float %88, 0.000000e+00, !dbg !109
  %239 = fcmp uno float %90, 0.000000e+00, !dbg !109
  %240 = or i1 %238, %236, !dbg !110
  %241 = or i1 %239, %237, !dbg !110
  %242 = select i1 %240, float %88, float %234, !dbg !111
  %243 = select i1 %241, float %90, float %235, !dbg !111
  %244 = fcmp olt float %242, %99, !dbg !112
  %245 = fcmp olt float %243, %101, !dbg !112
  %246 = fcmp uno float %99, 0.000000e+00, !dbg !114
  %247 = fcmp uno float %101, 0.000000e+00, !dbg !114
  %248 = or i1 %246, %244, !dbg !115
  %249 = or i1 %247, %245, !dbg !115
  %250 = select i1 %248, float %99, float %242, !dbg !116
  %251 = select i1 %249, float %101, float %243, !dbg !116
  %252 = fcmp olt float %250, %110, !dbg !117
  %253 = fcmp olt float %251, %112, !dbg !117
  %254 = fcmp uno float %110, 0.000000e+00, !dbg !119
  %255 = fcmp uno float %112, 0.000000e+00, !dbg !119
  %256 = or i1 %254, %252, !dbg !120
  %257 = or i1 %255, %253, !dbg !120
  %258 = select i1 %256, float %110, float %250, !dbg !121
  %259 = select i1 %257, float %112, float %251, !dbg !121
  %260 = fcmp olt float %258, %121, !dbg !122
  %261 = fcmp olt float %259, %123, !dbg !122
  %262 = fcmp uno float %121, 0.000000e+00, !dbg !124
  %263 = fcmp uno float %123, 0.000000e+00, !dbg !124
  %264 = or i1 %262, %260, !dbg !125
  %265 = or i1 %263, %261, !dbg !125
  %266 = select i1 %264, float %121, float %258, !dbg !126
  %267 = select i1 %265, float %123, float %259, !dbg !126
  %268 = fcmp olt float %266, %132, !dbg !127
  %269 = fcmp olt float %267, %134, !dbg !127
  %270 = fcmp uno float %132, 0.000000e+00, !dbg !129
  %271 = fcmp uno float %134, 0.000000e+00, !dbg !129
  %272 = or i1 %270, %268, !dbg !130
  %273 = or i1 %271, %269, !dbg !130
  %274 = select i1 %272, float %132, float %266, !dbg !131
  %275 = select i1 %273, float %134, float %267, !dbg !131
  %276 = fcmp olt float %274, %143, !dbg !132
  %277 = fcmp olt float %275, %145, !dbg !132
  %278 = fcmp uno float %143, 0.000000e+00, !dbg !134
  %279 = fcmp uno float %145, 0.000000e+00, !dbg !134
  %280 = or i1 %278, %276, !dbg !135
  %281 = or i1 %279, %277, !dbg !135
  %282 = select i1 %280, float %143, float %274, !dbg !136
  %283 = select i1 %281, float %145, float %275, !dbg !136
  %284 = fcmp olt float %282, %154, !dbg !137
  %285 = fcmp olt float %283, %156, !dbg !137
  %286 = fcmp uno float %154, 0.000000e+00, !dbg !139
  %287 = fcmp uno float %156, 0.000000e+00, !dbg !139
  %288 = or i1 %286, %284, !dbg !140
  %289 = or i1 %287, %285, !dbg !140
  %290 = select i1 %288, float %154, float %282, !dbg !141
  %291 = select i1 %289, float %156, float %283, !dbg !141
  %292 = fcmp olt float %290, %165, !dbg !142
  %293 = fcmp olt float %291, %167, !dbg !142
  %294 = fcmp uno float %165, 0.000000e+00, !dbg !144
  %295 = fcmp uno float %167, 0.000000e+00, !dbg !144
  %296 = or i1 %294, %292, !dbg !145
  %297 = or i1 %295, %293, !dbg !145
  %298 = select i1 %296, float %165, float %290, !dbg !146
  %299 = select i1 %297, float %167, float %291, !dbg !146
  %300 = fcmp olt float %298, %176, !dbg !147
  %301 = fcmp olt float %299, %178, !dbg !147
  %302 = fcmp uno float %176, 0.000000e+00, !dbg !149
  %303 = fcmp uno float %178, 0.000000e+00, !dbg !149
  %304 = or i1 %302, %300, !dbg !150
  %305 = or i1 %303, %301, !dbg !150
  %306 = select i1 %304, float %176, float %298, !dbg !151
  %307 = select i1 %305, float %178, float %299, !dbg !151
  %308 = fcmp olt float %306, %187, !dbg !152
  %309 = fcmp olt float %307, %189, !dbg !152
  %310 = fcmp uno float %187, 0.000000e+00, !dbg !154
  %311 = fcmp uno float %189, 0.000000e+00, !dbg !154
  %312 = or i1 %310, %308, !dbg !155
  %313 = or i1 %311, %309, !dbg !155
  %314 = select i1 %312, float %187, float %306, !dbg !156
  %315 = select i1 %313, float %189, float %307, !dbg !156
  %316 = fcmp olt float %314, %198, !dbg !157
  %317 = fcmp olt float %315, %200, !dbg !157
  %318 = fcmp uno float %198, 0.000000e+00, !dbg !159
  %319 = fcmp uno float %200, 0.000000e+00, !dbg !159
  %320 = or i1 %318, %316, !dbg !160
  %321 = or i1 %319, %317, !dbg !160
  %322 = select i1 %320, float %198, float %314, !dbg !161
  %323 = select i1 %321, float %200, float %315, !dbg !161
  %324 = fcmp olt float %322, %209, !dbg !162
  %325 = fcmp olt float %323, %211, !dbg !162
  %326 = fcmp uno float %209, 0.000000e+00, !dbg !164
  %327 = fcmp uno float %211, 0.000000e+00, !dbg !164
  %328 = or i1 %326, %324, !dbg !165
  %329 = or i1 %327, %325, !dbg !165
  %330 = shl i32 %23, 2, !dbg !166
  %331 = add i32 %330, %13, !dbg !167
  %332 = sext i32 %331 to i64, !dbg !168
  %333 = getelementptr float, ptr addrspace(1) %1, i64 %332, !dbg !168
  %334 = shl i32 %7, 2, !dbg !169
  %335 = and i32 %334, 60, !dbg !169
  %336 = or disjoint i32 %335, %.lobit, !dbg !169
  %337 = and i32 %9, 28, !dbg !169
  %338 = shl nuw nsw i32 %8, 1, !dbg !169
  %339 = or disjoint i32 %337, %338, !dbg !169
  %340 = or disjoint i32 %339, %10, !dbg !169
  %341 = lshr exact i32 %335, 1, !dbg !169
  %342 = add nuw nsw i32 %341, %336, !dbg !169
  %343 = zext nneg i32 %342 to i64, !dbg !169
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %343, !dbg !169
  %345 = bitcast float %322 to i32, !dbg !169
  %346 = select i1 %328, i32 %208, i32 %345, !dbg !170
  %347 = insertelement <1 x i32> poison, i32 %346, i64 0, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %347, i1 true) #2, !dbg !169
  %348 = or disjoint i32 %336, 2, !dbg !169
  %349 = add nuw nsw i32 %348, %341, !dbg !169
  %350 = zext nneg i32 %349 to i64, !dbg !169
  %351 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %350, !dbg !169
  %352 = bitcast float %323 to i32, !dbg !169
  %353 = select i1 %329, i32 %210, i32 %352, !dbg !170
  %354 = insertelement <1 x i32> poison, i32 %353, i64 0, !dbg !169
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %354, i1 true) #2, !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !169
  %355 = lshr exact i32 %339, 1, !dbg !169
  %356 = add nuw nsw i32 %340, %355, !dbg !169
  %357 = zext nneg i32 %356 to i64, !dbg !169
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %357, !dbg !169
  %.extract = load i32, ptr addrspace(3) %358, align 8, !dbg !169
  %359 = getelementptr inbounds i8, ptr addrspace(3) %358, i64 4, !dbg !169
  %.extract6 = load i32, ptr addrspace(3) %359, align 4, !dbg !169
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %333, i1 %42) #2, !dbg !169
  ret void, !dbg !171
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgsdzpi23tsunvud4h6xsoxsrt3alqiy6codmmk5fnhkls7x47ca.py", directory: "inductor_cache/gs")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_0", linkageName: "triton_poi_fused_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 65, scope: !7)
!21 = !DILocation(line: 30, column: 40, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 49, scope: !7)
!24 = !DILocation(line: 30, column: 59, scope: !7)
!25 = !DILocation(line: 30, column: 46, scope: !7)
!26 = !DILocation(line: 30, column: 54, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 78, scope: !7)
!29 = !DILocation(line: 30, column: 70, scope: !7)
!30 = !DILocation(line: 31, column: 34, scope: !7)
!31 = !DILocation(line: 31, column: 58, scope: !7)
!32 = !DILocation(line: 31, column: 30, scope: !7)
!33 = !DILocation(line: 31, column: 74, scope: !7)
!34 = !DILocation(line: 32, column: 34, scope: !7)
!35 = !DILocation(line: 32, column: 58, scope: !7)
!36 = !DILocation(line: 32, column: 30, scope: !7)
!37 = !DILocation(line: 32, column: 74, scope: !7)
!38 = !DILocation(line: 33, column: 34, scope: !7)
!39 = !DILocation(line: 33, column: 58, scope: !7)
!40 = !DILocation(line: 33, column: 30, scope: !7)
!41 = !DILocation(line: 33, column: 74, scope: !7)
!42 = !DILocation(line: 34, column: 34, scope: !7)
!43 = !DILocation(line: 34, column: 58, scope: !7)
!44 = !DILocation(line: 34, column: 30, scope: !7)
!45 = !DILocation(line: 34, column: 74, scope: !7)
!46 = !DILocation(line: 35, column: 34, scope: !7)
!47 = !DILocation(line: 35, column: 58, scope: !7)
!48 = !DILocation(line: 35, column: 30, scope: !7)
!49 = !DILocation(line: 35, column: 74, scope: !7)
!50 = !DILocation(line: 36, column: 35, scope: !7)
!51 = !DILocation(line: 36, column: 59, scope: !7)
!52 = !DILocation(line: 36, column: 31, scope: !7)
!53 = !DILocation(line: 36, column: 75, scope: !7)
!54 = !DILocation(line: 37, column: 35, scope: !7)
!55 = !DILocation(line: 37, column: 59, scope: !7)
!56 = !DILocation(line: 37, column: 31, scope: !7)
!57 = !DILocation(line: 37, column: 75, scope: !7)
!58 = !DILocation(line: 38, column: 35, scope: !7)
!59 = !DILocation(line: 38, column: 59, scope: !7)
!60 = !DILocation(line: 38, column: 31, scope: !7)
!61 = !DILocation(line: 38, column: 75, scope: !7)
!62 = !DILocation(line: 39, column: 35, scope: !7)
!63 = !DILocation(line: 39, column: 59, scope: !7)
!64 = !DILocation(line: 39, column: 31, scope: !7)
!65 = !DILocation(line: 39, column: 75, scope: !7)
!66 = !DILocation(line: 40, column: 36, scope: !7)
!67 = !DILocation(line: 40, column: 60, scope: !7)
!68 = !DILocation(line: 40, column: 31, scope: !7)
!69 = !DILocation(line: 40, column: 76, scope: !7)
!70 = !DILocation(line: 41, column: 36, scope: !7)
!71 = !DILocation(line: 41, column: 60, scope: !7)
!72 = !DILocation(line: 41, column: 31, scope: !7)
!73 = !DILocation(line: 41, column: 76, scope: !7)
!74 = !DILocation(line: 42, column: 36, scope: !7)
!75 = !DILocation(line: 42, column: 60, scope: !7)
!76 = !DILocation(line: 42, column: 31, scope: !7)
!77 = !DILocation(line: 42, column: 76, scope: !7)
!78 = !DILocation(line: 43, column: 36, scope: !7)
!79 = !DILocation(line: 43, column: 60, scope: !7)
!80 = !DILocation(line: 43, column: 31, scope: !7)
!81 = !DILocation(line: 43, column: 76, scope: !7)
!82 = !DILocation(line: 44, column: 36, scope: !7)
!83 = !DILocation(line: 44, column: 60, scope: !7)
!84 = !DILocation(line: 44, column: 31, scope: !7)
!85 = !DILocation(line: 44, column: 76, scope: !7)
!86 = !DILocation(line: 45, column: 36, scope: !7)
!87 = !DILocation(line: 45, column: 60, scope: !7)
!88 = !DILocation(line: 45, column: 31, scope: !7)
!89 = !DILocation(line: 45, column: 76, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlockFile(scope: !7, file: !92, discriminator: 0)
!92 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!93 = !DILocation(line: 46, column: 40, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !98)
!98 = !DILocation(line: 47, column: 40, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !103)
!103 = !DILocation(line: 48, column: 40, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !103)
!106 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !103)
!107 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !108)
!108 = !DILocation(line: 49, column: 40, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !108)
!112 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !113)
!113 = !DILocation(line: 50, column: 41, scope: !7)
!114 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !113)
!115 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !113)
!116 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !113)
!117 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !118)
!118 = !DILocation(line: 51, column: 42, scope: !7)
!119 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !118)
!120 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !118)
!121 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !118)
!122 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !123)
!123 = !DILocation(line: 52, column: 42, scope: !7)
!124 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !123)
!125 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !123)
!126 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !123)
!127 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !128)
!128 = !DILocation(line: 53, column: 42, scope: !7)
!129 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !128)
!130 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !128)
!131 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !128)
!132 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !133)
!133 = !DILocation(line: 54, column: 42, scope: !7)
!134 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !133)
!135 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !133)
!136 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !133)
!137 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !138)
!138 = !DILocation(line: 55, column: 42, scope: !7)
!139 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !138)
!140 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !138)
!141 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !138)
!142 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !143)
!143 = !DILocation(line: 56, column: 42, scope: !7)
!144 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !143)
!145 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !143)
!146 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !143)
!147 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !148)
!148 = !DILocation(line: 57, column: 42, scope: !7)
!149 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !148)
!150 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !148)
!151 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !148)
!152 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !153)
!153 = !DILocation(line: 58, column: 42, scope: !7)
!154 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !153)
!155 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !153)
!156 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !153)
!157 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !158)
!158 = !DILocation(line: 59, column: 42, scope: !7)
!159 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !158)
!160 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !158)
!161 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !158)
!162 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !163)
!163 = !DILocation(line: 60, column: 42, scope: !7)
!164 = !DILocation(line: 120, column: 21, scope: !91, inlinedAt: !163)
!165 = !DILocation(line: 120, column: 16, scope: !91, inlinedAt: !163)
!166 = !DILocation(line: 61, column: 32, scope: !7)
!167 = !DILocation(line: 61, column: 30, scope: !7)
!168 = !DILocation(line: 61, column: 25, scope: !7)
!169 = !DILocation(line: 61, column: 44, scope: !7)
!170 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !163)
!171 = !DILocation(line: 61, column: 4, scope: !7)
