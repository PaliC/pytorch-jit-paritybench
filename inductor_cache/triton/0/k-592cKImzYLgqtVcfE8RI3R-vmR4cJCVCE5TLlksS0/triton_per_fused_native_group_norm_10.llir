; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %13 = lshr i32 %10, 5, !dbg !14
  %14 = and i32 %13, 7, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %15 = sdiv i32 %.frozen, 64, !dbg !15
  %16 = mul i32 %15, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = srem i32 %15, 64, !dbg !17
  %18 = sdiv i32 %12, 4096, !dbg !18
  %19 = shl nsw i32 %.decomposed, 1, !dbg !19
  %20 = shl nsw i32 %17, 7, !dbg !20
  %21 = or disjoint i32 %20, %14, !dbg !21
  %22 = or disjoint i32 %21, 8, !dbg !21
  %23 = or disjoint i32 %21, 16, !dbg !21
  %24 = or disjoint i32 %21, 24, !dbg !21
  %25 = or disjoint i32 %21, 32, !dbg !21
  %26 = or disjoint i32 %21, 40, !dbg !21
  %27 = or disjoint i32 %21, 48, !dbg !21
  %28 = or disjoint i32 %21, 56, !dbg !21
  %29 = or disjoint i32 %21, 64, !dbg !21
  %30 = or disjoint i32 %21, 72, !dbg !21
  %31 = or disjoint i32 %21, 80, !dbg !21
  %32 = or disjoint i32 %21, 88, !dbg !21
  %33 = or disjoint i32 %21, 96, !dbg !21
  %34 = or disjoint i32 %21, 104, !dbg !21
  %35 = or disjoint i32 %21, 112, !dbg !21
  %36 = or disjoint i32 %21, 120, !dbg !21
  %37 = sdiv i32 %21, 4096, !dbg !22
  %38 = mul i32 %37, 4096, !dbg !23
  %.decomposed1 = sub i32 %21, %38, !dbg !23
  %39 = sdiv i32 %22, 4096, !dbg !22
  %40 = mul i32 %39, 4096, !dbg !23
  %.decomposed2 = sub i32 %22, %40, !dbg !23
  %41 = sdiv i32 %23, 4096, !dbg !22
  %42 = mul i32 %41, 4096, !dbg !23
  %.decomposed3 = sub i32 %23, %42, !dbg !23
  %43 = sdiv i32 %24, 4096, !dbg !22
  %44 = mul i32 %43, 4096, !dbg !23
  %.decomposed4 = sub i32 %24, %44, !dbg !23
  %45 = sdiv i32 %25, 4096, !dbg !22
  %46 = mul i32 %45, 4096, !dbg !23
  %.decomposed5 = sub i32 %25, %46, !dbg !23
  %47 = sdiv i32 %26, 4096, !dbg !22
  %48 = mul i32 %47, 4096, !dbg !23
  %.decomposed6 = sub i32 %26, %48, !dbg !23
  %49 = sdiv i32 %27, 4096, !dbg !22
  %50 = mul i32 %49, 4096, !dbg !23
  %.decomposed7 = sub i32 %27, %50, !dbg !23
  %51 = sdiv i32 %28, 4096, !dbg !22
  %52 = mul i32 %51, 4096, !dbg !23
  %.decomposed8 = sub i32 %28, %52, !dbg !23
  %53 = sdiv i32 %29, 4096, !dbg !22
  %54 = mul i32 %53, 4096, !dbg !23
  %.decomposed9 = sub i32 %29, %54, !dbg !23
  %55 = sdiv i32 %30, 4096, !dbg !22
  %56 = mul i32 %55, 4096, !dbg !23
  %.decomposed10 = sub i32 %30, %56, !dbg !23
  %57 = sdiv i32 %31, 4096, !dbg !22
  %58 = mul i32 %57, 4096, !dbg !23
  %.decomposed11 = sub i32 %31, %58, !dbg !23
  %59 = sdiv i32 %32, 4096, !dbg !22
  %60 = mul i32 %59, 4096, !dbg !23
  %.decomposed12 = sub i32 %32, %60, !dbg !23
  %61 = sdiv i32 %33, 4096, !dbg !22
  %62 = mul i32 %61, 4096, !dbg !23
  %.decomposed13 = sub i32 %33, %62, !dbg !23
  %63 = sdiv i32 %34, 4096, !dbg !22
  %64 = mul i32 %63, 4096, !dbg !23
  %.decomposed14 = sub i32 %34, %64, !dbg !23
  %65 = sdiv i32 %35, 4096, !dbg !22
  %66 = mul i32 %65, 4096, !dbg !23
  %.decomposed15 = sub i32 %35, %66, !dbg !23
  %67 = sdiv i32 %36, 4096, !dbg !22
  %68 = mul i32 %67, 4096, !dbg !23
  %.decomposed16 = sub i32 %36, %68, !dbg !23
  %69 = shl nsw i32 %.decomposed1, 7, !dbg !24
  %70 = shl nsw i32 %.decomposed2, 7, !dbg !24
  %71 = shl nsw i32 %.decomposed3, 7, !dbg !24
  %72 = shl nsw i32 %.decomposed4, 7, !dbg !24
  %73 = shl nsw i32 %.decomposed5, 7, !dbg !24
  %74 = shl nsw i32 %.decomposed6, 7, !dbg !24
  %75 = shl nsw i32 %.decomposed7, 7, !dbg !24
  %76 = shl nsw i32 %.decomposed8, 7, !dbg !24
  %77 = shl nsw i32 %.decomposed9, 7, !dbg !24
  %78 = shl nsw i32 %.decomposed10, 7, !dbg !24
  %79 = shl nsw i32 %.decomposed11, 7, !dbg !24
  %80 = shl nsw i32 %.decomposed12, 7, !dbg !24
  %81 = shl nsw i32 %.decomposed13, 7, !dbg !24
  %82 = shl nsw i32 %.decomposed14, 7, !dbg !24
  %83 = shl nsw i32 %.decomposed15, 7, !dbg !24
  %84 = shl nsw i32 %.decomposed16, 7, !dbg !24
  %85 = shl i32 %18, 19, !dbg !25
  %86 = add i32 %85, %19, !dbg !26
  %87 = add i32 %86, %37, !dbg !27
  %88 = add i32 %87, %69, !dbg !28
  %89 = add i32 %86, %39, !dbg !27
  %90 = add i32 %89, %70, !dbg !28
  %91 = add i32 %86, %41, !dbg !27
  %92 = add i32 %91, %71, !dbg !28
  %93 = add i32 %86, %43, !dbg !27
  %94 = add i32 %93, %72, !dbg !28
  %95 = add i32 %86, %45, !dbg !27
  %96 = add i32 %95, %73, !dbg !28
  %97 = add i32 %86, %47, !dbg !27
  %98 = add i32 %97, %74, !dbg !28
  %99 = add i32 %86, %49, !dbg !27
  %100 = add i32 %99, %75, !dbg !28
  %101 = add i32 %86, %51, !dbg !27
  %102 = add i32 %101, %76, !dbg !28
  %103 = add i32 %86, %53, !dbg !27
  %104 = add i32 %103, %77, !dbg !28
  %105 = add i32 %86, %55, !dbg !27
  %106 = add i32 %105, %78, !dbg !28
  %107 = add i32 %86, %57, !dbg !27
  %108 = add i32 %107, %79, !dbg !28
  %109 = add i32 %86, %59, !dbg !27
  %110 = add i32 %109, %80, !dbg !28
  %111 = add i32 %86, %61, !dbg !27
  %112 = add i32 %111, %81, !dbg !28
  %113 = add i32 %86, %63, !dbg !27
  %114 = add i32 %113, %82, !dbg !28
  %115 = add i32 %86, %65, !dbg !27
  %116 = add i32 %115, %83, !dbg !28
  %117 = add i32 %86, %67, !dbg !27
  %118 = add i32 %117, %84, !dbg !28
  %119 = sext i32 %88 to i64, !dbg !29
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !29
  %121 = sext i32 %90 to i64, !dbg !29
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !29
  %123 = sext i32 %92 to i64, !dbg !29
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !29
  %125 = sext i32 %94 to i64, !dbg !29
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !29
  %127 = sext i32 %96 to i64, !dbg !29
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !29
  %129 = sext i32 %98 to i64, !dbg !29
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !29
  %131 = sext i32 %100 to i64, !dbg !29
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !29
  %133 = sext i32 %102 to i64, !dbg !29
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !29
  %135 = sext i32 %104 to i64, !dbg !29
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !29
  %137 = sext i32 %106 to i64, !dbg !29
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !29
  %139 = sext i32 %108 to i64, !dbg !29
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !29
  %141 = sext i32 %110 to i64, !dbg !29
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !29
  %143 = sext i32 %112 to i64, !dbg !29
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !29
  %145 = sext i32 %114 to i64, !dbg !29
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !29
  %147 = sext i32 %116 to i64, !dbg !29
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !29
  %149 = sext i32 %118 to i64, !dbg !29
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !29
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !30
  %152 = bitcast i32 %151 to float, !dbg !30
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !30
  %154 = bitcast i32 %153 to float, !dbg !30
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !30
  %156 = bitcast i32 %155 to float, !dbg !30
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #3, !dbg !30
  %158 = bitcast i32 %157 to float, !dbg !30
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !30
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !30
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #3, !dbg !30
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !30
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #3, !dbg !30
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !30
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #3, !dbg !30
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !30
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #3, !dbg !30
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #3, !dbg !30
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !30
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #3, !dbg !30
  %171 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !31
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !31
  %173 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !31
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !31
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !31
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !31
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !31
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !31
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !31
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !31
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !31
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !31
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !31
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !31
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %147, !dbg !31
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !31
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 true) #3, !dbg !32
  %188 = bitcast i32 %187 to float, !dbg !32
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 true) #3, !dbg !32
  %190 = bitcast i32 %189 to float, !dbg !32
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #3, !dbg !32
  %192 = bitcast i32 %191 to float, !dbg !32
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #3, !dbg !32
  %194 = bitcast i32 %193 to float, !dbg !32
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #3, !dbg !32
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #3, !dbg !32
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 true) #3, !dbg !32
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #3, !dbg !32
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #3, !dbg !32
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #3, !dbg !32
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #3, !dbg !32
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #3, !dbg !32
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 true) #3, !dbg !32
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 true) #3, !dbg !32
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 true) #3, !dbg !32
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #3, !dbg !32
  %207 = fadd float %152, %188, !dbg !33
  %208 = fadd float %154, %190, !dbg !33
  %209 = fadd float %156, %192, !dbg !33
  %210 = fadd float %158, %194, !dbg !33
  %211 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !30
  %212 = insertelement <2 x i32> %211, i32 %160, i64 1, !dbg !30
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !30
  %214 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !32
  %215 = insertelement <2 x i32> %214, i32 %196, i64 1, !dbg !32
  %216 = bitcast <2 x i32> %215 to <2 x float>, !dbg !32
  %217 = fadd <2 x float> %213, %216, !dbg !33
  %218 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !30
  %219 = insertelement <2 x i32> %218, i32 %162, i64 1, !dbg !30
  %220 = bitcast <2 x i32> %219 to <2 x float>, !dbg !30
  %221 = insertelement <2 x i32> poison, i32 %197, i64 0, !dbg !32
  %222 = insertelement <2 x i32> %221, i32 %198, i64 1, !dbg !32
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !32
  %224 = fadd <2 x float> %220, %223, !dbg !33
  %225 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !30
  %226 = insertelement <2 x i32> %225, i32 %164, i64 1, !dbg !30
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !30
  %228 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !32
  %229 = insertelement <2 x i32> %228, i32 %200, i64 1, !dbg !32
  %230 = bitcast <2 x i32> %229 to <2 x float>, !dbg !32
  %231 = fadd <2 x float> %227, %230, !dbg !33
  %232 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !30
  %233 = insertelement <2 x i32> %232, i32 %166, i64 1, !dbg !30
  %234 = bitcast <2 x i32> %233 to <2 x float>, !dbg !30
  %235 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !32
  %236 = insertelement <2 x i32> %235, i32 %202, i64 1, !dbg !32
  %237 = bitcast <2 x i32> %236 to <2 x float>, !dbg !32
  %238 = fadd <2 x float> %234, %237, !dbg !33
  %239 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !30
  %240 = insertelement <2 x i32> %239, i32 %168, i64 1, !dbg !30
  %241 = bitcast <2 x i32> %240 to <2 x float>, !dbg !30
  %242 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !32
  %243 = insertelement <2 x i32> %242, i32 %204, i64 1, !dbg !32
  %244 = bitcast <2 x i32> %243 to <2 x float>, !dbg !32
  %245 = fadd <2 x float> %241, %244, !dbg !33
  %246 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !30
  %247 = insertelement <2 x i32> %246, i32 %170, i64 1, !dbg !30
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !30
  %249 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !32
  %250 = insertelement <2 x i32> %249, i32 %206, i64 1, !dbg !32
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !32
  %252 = fadd <2 x float> %248, %251, !dbg !33
  %253 = fadd float %207, %208, !dbg !34
  %254 = fadd float %253, %209, !dbg !34
  %255 = fadd float %254, %210, !dbg !34
  %256 = extractelement <2 x float> %217, i64 0, !dbg !39
  %257 = fadd float %255, %256, !dbg !34
  %258 = extractelement <2 x float> %217, i64 1, !dbg !39
  %259 = fadd float %257, %258, !dbg !34
  %260 = extractelement <2 x float> %224, i64 0, !dbg !39
  %261 = fadd float %259, %260, !dbg !34
  %262 = extractelement <2 x float> %224, i64 1, !dbg !39
  %263 = fadd float %261, %262, !dbg !34
  %264 = extractelement <2 x float> %231, i64 0, !dbg !39
  %265 = fadd float %263, %264, !dbg !34
  %266 = extractelement <2 x float> %231, i64 1, !dbg !39
  %267 = fadd float %265, %266, !dbg !34
  %268 = extractelement <2 x float> %238, i64 0, !dbg !39
  %269 = fadd float %267, %268, !dbg !34
  %270 = extractelement <2 x float> %238, i64 1, !dbg !39
  %271 = fadd float %269, %270, !dbg !34
  %272 = extractelement <2 x float> %245, i64 0, !dbg !39
  %273 = fadd float %271, %272, !dbg !34
  %274 = extractelement <2 x float> %245, i64 1, !dbg !39
  %275 = fadd float %273, %274, !dbg !34
  %276 = extractelement <2 x float> %252, i64 0, !dbg !39
  %277 = fadd float %275, %276, !dbg !34
  %278 = extractelement <2 x float> %252, i64 1, !dbg !39
  %279 = fadd float %277, %278, !dbg !34
  %280 = shl nuw nsw i32 %11, 3, !dbg !40
  %281 = or disjoint i32 %280, %14, !dbg !40
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %281, !dbg !40
  %283 = bitcast float %279 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %284 = icmp slt i32 %10, 256, !dbg !40
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !40
  %286 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %285, i1 %284) #3, !dbg !40
  %287 = bitcast i32 %286 to float, !dbg !40
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !40
  %289 = bitcast i32 %288 to float, !dbg !40
  %290 = fadd float %287, %289, !dbg !34
  %291 = bitcast float %290 to i32, !dbg !40
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 2, i32 31), !dbg !40
  %293 = bitcast i32 %292 to float, !dbg !40
  %294 = fadd float %290, %293, !dbg !34
  %295 = bitcast float %294 to i32, !dbg !40
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !40
  %297 = bitcast i32 %296 to float, !dbg !40
  %298 = fadd float %294, %297, !dbg !34
  %299 = and i32 %10, 7, !dbg !40
  %300 = icmp eq i32 %299, 0, !dbg !40
  %301 = and i1 %284, %300, !dbg !40
  %302 = bitcast float %298 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %302, i1 %301) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !40
  %304 = load float, ptr addrspace(3) %303, align 16, !dbg !40
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float 1.280000e+02) #3, !dbg !41
  %306 = fsub float %207, %305, !dbg !39
  %307 = fsub float %208, %305, !dbg !39
  %308 = fsub float %209, %305, !dbg !39
  %309 = fsub float %210, %305, !dbg !39
  %310 = fsub float %256, %305, !dbg !39
  %311 = fsub float %258, %305, !dbg !39
  %312 = fsub float %260, %305, !dbg !39
  %313 = fsub float %262, %305, !dbg !39
  %314 = fsub float %264, %305, !dbg !39
  %315 = fsub float %266, %305, !dbg !39
  %316 = fsub float %268, %305, !dbg !39
  %317 = fsub float %270, %305, !dbg !39
  %318 = fsub float %272, %305, !dbg !39
  %319 = fsub float %274, %305, !dbg !39
  %320 = fsub float %276, %305, !dbg !39
  %321 = fsub float %278, %305, !dbg !39
  %322 = fmul float %306, %306, !dbg !42
  %323 = fmul float %307, %307, !dbg !42
  %324 = fmul float %308, %308, !dbg !42
  %325 = fmul float %309, %309, !dbg !42
  %326 = fmul float %310, %310, !dbg !42
  %327 = fmul float %311, %311, !dbg !42
  %328 = fmul float %312, %312, !dbg !42
  %329 = fmul float %313, %313, !dbg !42
  %330 = fmul float %314, %314, !dbg !42
  %331 = fmul float %315, %315, !dbg !42
  %332 = fmul float %316, %316, !dbg !42
  %333 = fmul float %317, %317, !dbg !42
  %334 = fmul float %318, %318, !dbg !42
  %335 = fmul float %319, %319, !dbg !42
  %336 = fmul float %320, %320, !dbg !42
  %337 = fmul float %321, %321, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %338 = fadd float %322, %323, !dbg !45
  %339 = fadd float %324, %338, !dbg !45
  %340 = fadd float %325, %339, !dbg !45
  %341 = fadd float %326, %340, !dbg !45
  %342 = fadd float %327, %341, !dbg !45
  %343 = fadd float %328, %342, !dbg !45
  %344 = fadd float %329, %343, !dbg !45
  %345 = fadd float %330, %344, !dbg !45
  %346 = fadd float %331, %345, !dbg !45
  %347 = fadd float %332, %346, !dbg !45
  %348 = fadd float %333, %347, !dbg !45
  %349 = fadd float %334, %348, !dbg !45
  %350 = fadd float %335, %349, !dbg !45
  %351 = fadd float %336, %350, !dbg !45
  %352 = fadd float %337, %351, !dbg !45
  %353 = bitcast float %352 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %353, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %354 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %285, i1 %284) #3, !dbg !43
  %355 = bitcast i32 %354 to float, !dbg !43
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 4, i32 31), !dbg !43
  %357 = bitcast i32 %356 to float, !dbg !43
  %358 = fadd float %355, %357, !dbg !45
  %359 = bitcast float %358 to i32, !dbg !43
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 2, i32 31), !dbg !43
  %361 = bitcast i32 %360 to float, !dbg !43
  %362 = fadd float %358, %361, !dbg !45
  %363 = bitcast float %362 to i32, !dbg !43
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 1, i32 31), !dbg !43
  %365 = bitcast i32 %364 to float, !dbg !43
  %366 = fadd float %362, %365, !dbg !45
  %367 = bitcast float %366 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %367, i1 %301) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %368 = load i32, ptr addrspace(3) %303, align 16, !dbg !43
  %369 = sext i32 %12 to i64, !dbg !46
  %370 = getelementptr float, ptr addrspace(1) %2, i64 %369, !dbg !46
  %371 = icmp eq i32 %14, 0, !dbg !47
  %372 = bitcast float %305 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %372, ptr addrspace(1) %370, i1 %371) #3, !dbg !47
  %373 = getelementptr float, ptr addrspace(1) %3, i64 %369, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %368, ptr addrspace(1) %373, i1 %371) #3, !dbg !49
  %374 = getelementptr float, ptr addrspace(1) %4, i64 %369, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 1124073472, ptr addrspace(1) %374, i1 %371) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czgj2doggeqnqi3x26syystonk5xmyzr4auagbpogfj75slsyddh.py", directory: "inductor_cache/zg")
!4 = !{ptr @triton_per_fused_native_group_norm_10, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_10", linkageName: "triton_per_fused_native_group_norm_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 27, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 32, scope: !7)
!20 = !DILocation(line: 34, column: 53, scope: !7)
!21 = !DILocation(line: 34, column: 49, scope: !7)
!22 = !DILocation(line: 34, column: 98, scope: !7)
!23 = !DILocation(line: 34, column: 59, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 75, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 68, scope: !7)
!28 = !DILocation(line: 34, column: 81, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 106, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 106, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!38 = !DILocation(line: 39, column: 24, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 20, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !44)
!44 = !DILocation(line: 46, column: 26, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !44)
!46 = !DILocation(line: 47, column: 25, scope: !7)
!47 = !DILocation(line: 47, column: 37, scope: !7)
!48 = !DILocation(line: 48, column: 25, scope: !7)
!49 = !DILocation(line: 48, column: 37, scope: !7)
!50 = !DILocation(line: 49, column: 25, scope: !7)
!51 = !DILocation(line: 49, column: 36, scope: !7)
!52 = !DILocation(line: 49, column: 4, scope: !7)
