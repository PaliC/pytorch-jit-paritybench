; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_relu_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = srem i32 %13, 256, !dbg !14
  %19 = srem i32 %14, 256, !dbg !14
  %20 = srem i32 %15, 256, !dbg !14
  %21 = srem i32 %16, 256, !dbg !14
  %22 = sdiv i32 %13, 65536, !dbg !15
  %23 = sdiv i32 %17, 65536, !dbg !15
  %24 = sext i32 %13 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = sext i32 %17 to i64, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !17
  %30 = shl nsw i32 %22, 3, !dbg !18
  %31 = shl nsw i32 %23, 3, !dbg !18
  %.lhs.trunc = trunc nsw i32 %18 to i16, !dbg !19
  %32 = sdiv i16 %.lhs.trunc, 32, !dbg !19
  %.sext = sext i16 %32 to i32, !dbg !19
  %.lhs.trunc22 = trunc nsw i32 %19 to i16, !dbg !19
  %33 = sdiv i16 %.lhs.trunc22, 32, !dbg !19
  %.sext23 = sext i16 %33 to i32, !dbg !19
  %.lhs.trunc24 = trunc nsw i32 %20 to i16, !dbg !19
  %34 = sdiv i16 %.lhs.trunc24, 32, !dbg !19
  %.sext25 = sext i16 %34 to i32, !dbg !19
  %.lhs.trunc26 = trunc nsw i32 %21 to i16, !dbg !19
  %35 = sdiv i16 %.lhs.trunc26, 32, !dbg !19
  %.sext27 = sext i16 %35 to i32, !dbg !19
  %36 = add nsw i32 %30, %.sext, !dbg !20
  %37 = add nsw i32 %30, %.sext23, !dbg !20
  %38 = add nsw i32 %30, %.sext25, !dbg !20
  %39 = add nsw i32 %30, %.sext27, !dbg !20
  %40 = add nsw i32 %31, %.sext, !dbg !20
  %41 = add nsw i32 %31, %.sext23, !dbg !20
  %42 = add nsw i32 %31, %.sext25, !dbg !20
  %43 = add nsw i32 %31, %.sext27, !dbg !20
  %44 = sext i32 %36 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !21
  %46 = sext i32 %37 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !21
  %48 = sext i32 %38 to i64, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !21
  %50 = sext i32 %39 to i64, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !21
  %52 = sext i32 %40 to i64, !dbg !21
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !21
  %54 = sext i32 %41 to i64, !dbg !21
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !21
  %56 = sext i32 %42 to i64, !dbg !21
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !21
  %58 = sext i32 %43 to i64, !dbg !21
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !21
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !22
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !22
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !22
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !23
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !23
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !23
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !23
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !24
  %77 = bitcast i32 %76 to float, !dbg !24
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !24
  %79 = bitcast i32 %78 to float, !dbg !24
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !24
  %81 = bitcast i32 %80 to float, !dbg !24
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !24
  %83 = bitcast i32 %82 to float, !dbg !24
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !24
  %85 = bitcast i32 %84 to float, !dbg !24
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !24
  %87 = bitcast i32 %86 to float, !dbg !24
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !24
  %89 = bitcast i32 %88 to float, !dbg !24
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !24
  %91 = bitcast i32 %90 to float, !dbg !24
  %92 = sext i32 %18 to i64, !dbg !25
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !25
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !26
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !26
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %92, !dbg !27
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !28
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !28
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 8.192000e+03) #3, !dbg !29
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 8.192000e+03) #3, !dbg !29
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 8.192000e+03) #3, !dbg !29
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 8.192000e+03) #3, !dbg !29
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 8.192000e+03) #3, !dbg !29
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 8.192000e+03) #3, !dbg !29
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 8.192000e+03) #3, !dbg !29
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float 8.192000e+03) #3, !dbg !29
  %107 = fadd float %99, 0x3EE4F8B580000000, !dbg !30
  %108 = fadd float %100, 0x3EE4F8B580000000, !dbg !30
  %109 = fadd float %101, 0x3EE4F8B580000000, !dbg !30
  %110 = fadd float %102, 0x3EE4F8B580000000, !dbg !30
  %111 = fadd float %103, 0x3EE4F8B580000000, !dbg !30
  %112 = fadd float %104, 0x3EE4F8B580000000, !dbg !30
  %113 = fadd float %105, 0x3EE4F8B580000000, !dbg !30
  %114 = fadd float %106, 0x3EE4F8B580000000, !dbg !30
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %115, 0, !dbg !31
  br i1 %.not.i, label %118, label %116, !dbg !31

116:                                              ; preds = %7
  %117 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %107), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

118:                                              ; preds = %7
  %119 = tail call float @llvm.nvvm.rsqrt.approx.f(float %107), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %116, %118
  %.0.i = phi float [ %117, %116 ], [ %119, %118 ], !dbg !31
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %120, 0, !dbg !31
  br i1 %.not.i1, label %123, label %121, !dbg !31

121:                                              ; preds = %__nv_rsqrtf.exit
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %108), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

123:                                              ; preds = %__nv_rsqrtf.exit
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %108), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

__nv_rsqrtf.exit3:                                ; preds = %121, %123
  %.0.i2 = phi float [ %122, %121 ], [ %124, %123 ], !dbg !31
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i4 = icmp eq i32 %125, 0, !dbg !31
  br i1 %.not.i4, label %128, label %126, !dbg !31

126:                                              ; preds = %__nv_rsqrtf.exit3
  %127 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %109), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

128:                                              ; preds = %__nv_rsqrtf.exit3
  %129 = tail call float @llvm.nvvm.rsqrt.approx.f(float %109), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

__nv_rsqrtf.exit6:                                ; preds = %126, %128
  %.0.i5 = phi float [ %127, %126 ], [ %129, %128 ], !dbg !31
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i7 = icmp eq i32 %130, 0, !dbg !31
  br i1 %.not.i7, label %133, label %131, !dbg !31

131:                                              ; preds = %__nv_rsqrtf.exit6
  %132 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %110), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

133:                                              ; preds = %__nv_rsqrtf.exit6
  %134 = tail call float @llvm.nvvm.rsqrt.approx.f(float %110), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

__nv_rsqrtf.exit9:                                ; preds = %131, %133
  %.0.i8 = phi float [ %132, %131 ], [ %134, %133 ], !dbg !31
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i10 = icmp eq i32 %135, 0, !dbg !31
  br i1 %.not.i10, label %138, label %136, !dbg !31

136:                                              ; preds = %__nv_rsqrtf.exit9
  %137 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %111), !dbg !31
  br label %__nv_rsqrtf.exit12, !dbg !31

138:                                              ; preds = %__nv_rsqrtf.exit9
  %139 = tail call float @llvm.nvvm.rsqrt.approx.f(float %111), !dbg !31
  br label %__nv_rsqrtf.exit12, !dbg !31

__nv_rsqrtf.exit12:                               ; preds = %136, %138
  %.0.i11 = phi float [ %137, %136 ], [ %139, %138 ], !dbg !31
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i13 = icmp eq i32 %140, 0, !dbg !31
  br i1 %.not.i13, label %143, label %141, !dbg !31

141:                                              ; preds = %__nv_rsqrtf.exit12
  %142 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %112), !dbg !31
  br label %__nv_rsqrtf.exit15, !dbg !31

143:                                              ; preds = %__nv_rsqrtf.exit12
  %144 = tail call float @llvm.nvvm.rsqrt.approx.f(float %112), !dbg !31
  br label %__nv_rsqrtf.exit15, !dbg !31

__nv_rsqrtf.exit15:                               ; preds = %141, %143
  %.0.i14 = phi float [ %142, %141 ], [ %144, %143 ], !dbg !31
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i16 = icmp eq i32 %145, 0, !dbg !31
  br i1 %.not.i16, label %148, label %146, !dbg !31

146:                                              ; preds = %__nv_rsqrtf.exit15
  %147 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %113), !dbg !31
  br label %__nv_rsqrtf.exit18, !dbg !31

148:                                              ; preds = %__nv_rsqrtf.exit15
  %149 = tail call float @llvm.nvvm.rsqrt.approx.f(float %113), !dbg !31
  br label %__nv_rsqrtf.exit18, !dbg !31

__nv_rsqrtf.exit18:                               ; preds = %146, %148
  %.0.i17 = phi float [ %147, %146 ], [ %149, %148 ], !dbg !31
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i19 = icmp eq i32 %150, 0, !dbg !31
  br i1 %.not.i19, label %153, label %151, !dbg !31

151:                                              ; preds = %__nv_rsqrtf.exit18
  %152 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %114), !dbg !31
  br label %__nv_rsqrtf.exit21, !dbg !31

153:                                              ; preds = %__nv_rsqrtf.exit18
  %154 = tail call float @llvm.nvvm.rsqrt.approx.f(float %114), !dbg !31
  br label %__nv_rsqrtf.exit21, !dbg !31

__nv_rsqrtf.exit21:                               ; preds = %151, %153
  %.0.i20 = phi float [ %152, %151 ], [ %154, %153 ], !dbg !31
  %155 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !17
  %156 = insertelement <8 x i32> poison, i32 %67, i64 0, !dbg !22
  %157 = insertelement <8 x i32> %156, i32 %66, i64 1, !dbg !22
  %158 = insertelement <8 x i32> %157, i32 %65, i64 2, !dbg !22
  %159 = insertelement <8 x i32> %158, i32 %64, i64 3, !dbg !22
  %160 = insertelement <8 x i32> %159, i32 %63, i64 4, !dbg !22
  %161 = insertelement <8 x i32> %160, i32 %62, i64 5, !dbg !22
  %162 = insertelement <8 x i32> %161, i32 %61, i64 6, !dbg !22
  %163 = insertelement <8 x i32> %162, i32 %60, i64 7, !dbg !22
  %164 = bitcast <8 x i32> %163 to <8 x float>, !dbg !22
  %165 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !17
  %166 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !17
  %167 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !17
  %168 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %169 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %170 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %171 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %172 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !28
  %173 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !28
  %174 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !28
  %175 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !28
  %176 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !28
  %177 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !28
  %178 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !28
  %179 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !28
  %180 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !26
  %181 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !26
  %182 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !26
  %183 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !26
  %184 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !26
  %185 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !26
  %186 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !26
  %187 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !26
  %188 = insertelement <8 x i32> poison, i32 %155, i64 0, !dbg !17
  %189 = insertelement <8 x i32> %188, i32 %165, i64 1, !dbg !17
  %190 = insertelement <8 x i32> %189, i32 %166, i64 2, !dbg !17
  %191 = insertelement <8 x i32> %190, i32 %167, i64 3, !dbg !17
  %192 = insertelement <8 x i32> %191, i32 %168, i64 4, !dbg !17
  %193 = insertelement <8 x i32> %192, i32 %169, i64 5, !dbg !17
  %194 = insertelement <8 x i32> %193, i32 %170, i64 6, !dbg !17
  %195 = insertelement <8 x i32> %194, i32 %171, i64 7, !dbg !17
  %196 = bitcast <8 x i32> %195 to <8 x float>, !dbg !17
  %197 = fsub <8 x float> %196, %164, !dbg !32
  %198 = insertelement <8 x i32> poison, i32 %172, i64 0, !dbg !28
  %199 = insertelement <8 x i32> %198, i32 %173, i64 1, !dbg !28
  %200 = insertelement <8 x i32> %199, i32 %174, i64 2, !dbg !28
  %201 = insertelement <8 x i32> %200, i32 %175, i64 3, !dbg !28
  %202 = insertelement <8 x i32> %201, i32 %176, i64 4, !dbg !28
  %203 = insertelement <8 x i32> %202, i32 %177, i64 5, !dbg !28
  %204 = insertelement <8 x i32> %203, i32 %178, i64 6, !dbg !28
  %205 = insertelement <8 x i32> %204, i32 %179, i64 7, !dbg !28
  %206 = bitcast <8 x i32> %205 to <8 x float>, !dbg !28
  %207 = insertelement <8 x i32> poison, i32 %180, i64 0, !dbg !26
  %208 = insertelement <8 x i32> %207, i32 %181, i64 1, !dbg !26
  %209 = insertelement <8 x i32> %208, i32 %182, i64 2, !dbg !26
  %210 = insertelement <8 x i32> %209, i32 %183, i64 3, !dbg !26
  %211 = insertelement <8 x i32> %210, i32 %184, i64 4, !dbg !26
  %212 = insertelement <8 x i32> %211, i32 %185, i64 5, !dbg !26
  %213 = insertelement <8 x i32> %212, i32 %186, i64 6, !dbg !26
  %214 = insertelement <8 x i32> %213, i32 %187, i64 7, !dbg !26
  %215 = bitcast <8 x i32> %214 to <8 x float>, !dbg !26
  %216 = insertelement <8 x float> poison, float %.0.i20, i64 0, !dbg !33
  %217 = insertelement <8 x float> %216, float %.0.i17, i64 1, !dbg !33
  %218 = insertelement <8 x float> %217, float %.0.i14, i64 2, !dbg !33
  %219 = insertelement <8 x float> %218, float %.0.i11, i64 3, !dbg !33
  %220 = insertelement <8 x float> %219, float %.0.i8, i64 4, !dbg !33
  %221 = insertelement <8 x float> %220, float %.0.i5, i64 5, !dbg !33
  %222 = insertelement <8 x float> %221, float %.0.i2, i64 6, !dbg !33
  %223 = insertelement <8 x float> %222, float %.0.i, i64 7, !dbg !33
  %224 = fmul <8 x float> %197, %223, !dbg !33
  %225 = fmul <8 x float> %224, %215, !dbg !34
  %226 = fadd <8 x float> %225, %206, !dbg !35
  %227 = fcmp olt <8 x float> %226, zeroinitializer, !dbg !36
  %228 = extractelement <8 x i1> %227, i64 7, !dbg !40
  %229 = extractelement <8 x i1> %227, i64 6, !dbg !40
  %230 = extractelement <8 x i1> %227, i64 5, !dbg !40
  %231 = extractelement <8 x i1> %227, i64 4, !dbg !40
  %232 = extractelement <8 x i1> %227, i64 3, !dbg !40
  %233 = extractelement <8 x i1> %227, i64 2, !dbg !40
  %234 = extractelement <8 x i1> %227, i64 1, !dbg !40
  %235 = extractelement <8 x i1> %227, i64 0, !dbg !40
  %236 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !41
  %237 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !41
  %bc = bitcast <8 x float> %226 to <8 x i32>, !dbg !42
  %238 = extractelement <8 x i32> %bc, i64 7, !dbg !42
  %239 = select i1 %228, i32 0, i32 %238, !dbg !40
  %bc36 = bitcast <8 x float> %226 to <8 x i32>, !dbg !42
  %240 = extractelement <8 x i32> %bc36, i64 6, !dbg !42
  %241 = select i1 %229, i32 0, i32 %240, !dbg !40
  %bc37 = bitcast <8 x float> %226 to <8 x i32>, !dbg !42
  %242 = extractelement <8 x i32> %bc37, i64 5, !dbg !42
  %243 = select i1 %230, i32 0, i32 %242, !dbg !40
  %bc38 = bitcast <8 x float> %226 to <8 x i32>, !dbg !42
  %244 = extractelement <8 x i32> %bc38, i64 4, !dbg !42
  %245 = select i1 %231, i32 0, i32 %244, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %239, i32 %241, i32 %243, i32 %245, ptr addrspace(1) %236, i1 true) #3, !dbg !42
  %bc39 = bitcast <8 x float> %226 to <8 x i32>, !dbg !42
  %246 = extractelement <8 x i32> %bc39, i64 3, !dbg !42
  %247 = select i1 %232, i32 0, i32 %246, !dbg !40
  %bc40 = bitcast <8 x float> %226 to <8 x i32>, !dbg !42
  %248 = extractelement <8 x i32> %bc40, i64 2, !dbg !42
  %249 = select i1 %233, i32 0, i32 %248, !dbg !40
  %bc41 = bitcast <8 x float> %226 to <8 x i32>, !dbg !42
  %250 = extractelement <8 x i32> %bc41, i64 1, !dbg !42
  %251 = select i1 %234, i32 0, i32 %250, !dbg !40
  %bc42 = bitcast <8 x float> %226 to <8 x i32>, !dbg !42
  %252 = extractelement <8 x i32> %bc42, i64 0, !dbg !42
  %253 = select i1 %235, i32 0, i32 %252, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %247, i32 %249, i32 %251, i32 %253, ptr addrspace(1) %237, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crcgww2x3n5rh4yng74ny4vst4ypcayntpqdpyqmt7nnwk65sdtx.py", directory: "inductor_cache/rc")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_25", linkageName: "triton_poi_fused_native_group_norm_relu_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 44, scope: !7)
!20 = !DILocation(line: 28, column: 38, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 50, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 50, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 27, scope: !7)
!32 = !DILocation(line: 32, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 19, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 42, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 43, column: 25, scope: !7)
!42 = !DILocation(line: 43, column: 37, scope: !7)
!43 = !DILocation(line: 43, column: 4, scope: !7)
