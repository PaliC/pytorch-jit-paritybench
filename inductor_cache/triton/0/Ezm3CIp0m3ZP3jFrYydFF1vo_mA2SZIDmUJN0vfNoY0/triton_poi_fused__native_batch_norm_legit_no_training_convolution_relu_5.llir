; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = icmp slt i32 %14, 640000, !dbg !14
  %17 = icmp slt i32 %15, 640000, !dbg !14
  %18 = srem i32 %14, 256, !dbg !15
  %19 = sext i32 %14 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = sext i32 %15 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 %16) #3, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 %17) #3, !dbg !17
  %25 = sext i32 %18 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %16) #3, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %17) #3, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !20
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %16) #3, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %17) #3, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %16) #3, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %17) #3, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %16) #3, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %17) #3, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %16) #3, !dbg !27
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %17) #3, !dbg !27
  %57 = fadd float %38, 0x3EB0C6F7A0000000, !dbg !28
  %58 = fadd float %39, 0x3EB0C6F7A0000000, !dbg !28
  %59 = fadd float %40, 0x3EB0C6F7A0000000, !dbg !28
  %60 = fadd float %41, 0x3EB0C6F7A0000000, !dbg !28
  %61 = fadd float %47, 0x3EB0C6F7A0000000, !dbg !28
  %62 = fadd float %48, 0x3EB0C6F7A0000000, !dbg !28
  %63 = fadd float %49, 0x3EB0C6F7A0000000, !dbg !28
  %64 = fadd float %50, 0x3EB0C6F7A0000000, !dbg !28
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %65, 0, !dbg !29
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %66, 0, !dbg !29
  br i1 %.not.i, label %72, label %67, !dbg !29

67:                                               ; preds = %8
  br i1 %.not1.i, label %70, label %68, !dbg !29

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

72:                                               ; preds = %8
  br i1 %.not1.i, label %75, label %73, !dbg !29

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !29
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %77, 0, !dbg !29
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %78, 0, !dbg !29
  br i1 %.not.i1, label %84, label %79, !dbg !29

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !29

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !29

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %80, %82, %85, %87
  %.0.i3 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !29
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %89, 0, !dbg !29
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %90, 0, !dbg !29
  br i1 %.not.i6, label %96, label %91, !dbg !29

91:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %94, label %92, !dbg !29

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

96:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %99, label %97, !dbg !29

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %92, %94, %97, %99
  %.0.i8 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !29
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %101, 0, !dbg !29
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %102, 0, !dbg !29
  br i1 %.not.i11, label %108, label %103, !dbg !29

103:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %106, label %104, !dbg !29

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

108:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %111, label %109, !dbg !29

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %104, %106, %109, %111
  %.0.i13 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !29
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i16 = icmp eq i32 %113, 0, !dbg !29
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i19 = icmp eq i32 %114, 0, !dbg !29
  br i1 %.not.i16, label %120, label %115, !dbg !29

115:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %118, label %116, !dbg !29

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

120:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %123, label %121, !dbg !29

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %116, %118, %121, %123
  %.0.i18 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !29
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i21 = icmp eq i32 %125, 0, !dbg !29
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i24 = icmp eq i32 %126, 0, !dbg !29
  br i1 %.not.i21, label %132, label %127, !dbg !29

127:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %130, label %128, !dbg !29

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

132:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %135, label %133, !dbg !29

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %128, %130, %133, %135
  %.0.i23 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !29
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i26 = icmp eq i32 %137, 0, !dbg !29
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i29 = icmp eq i32 %138, 0, !dbg !29
  br i1 %.not.i26, label %144, label %139, !dbg !29

139:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %142, label %140, !dbg !29

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

144:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %147, label %145, !dbg !29

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %140, %142, %145, %147
  %.0.i28 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !29
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i31 = icmp eq i32 %149, 0, !dbg !29
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i34 = icmp eq i32 %150, 0, !dbg !29
  br i1 %.not.i31, label %156, label %151, !dbg !29

151:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %154, label %152, !dbg !29

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

156:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %159, label %157, !dbg !29

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %152, %154, %157, %159
  %.0.i33 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !29
  %161 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %162 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !19
  %163 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !21
  %164 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %165 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !19
  %166 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !21
  %167 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %168 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !19
  %169 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !21
  %170 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %171 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !19
  %172 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !21
  %173 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %174 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %175 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !21
  %176 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %177 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %178 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !21
  %179 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %180 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %181 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !21
  %182 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %183 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %184 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !21
  %185 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %186 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %187 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %188 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %189 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !27
  %190 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !27
  %191 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !27
  %192 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !27
  %193 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %194 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %195 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %196 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %197 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %198 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %199 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %200 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !30
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !30
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !30
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !30
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !30
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !30
  %209 = insertelement <8 x i32> poison, i32 %161, i64 0, !dbg !17
  %210 = insertelement <8 x i32> %209, i32 %164, i64 1, !dbg !17
  %211 = insertelement <8 x i32> %210, i32 %167, i64 2, !dbg !17
  %212 = insertelement <8 x i32> %211, i32 %170, i64 3, !dbg !17
  %213 = insertelement <8 x i32> %212, i32 %173, i64 4, !dbg !17
  %214 = insertelement <8 x i32> %213, i32 %176, i64 5, !dbg !17
  %215 = insertelement <8 x i32> %214, i32 %179, i64 6, !dbg !17
  %216 = insertelement <8 x i32> %215, i32 %182, i64 7, !dbg !17
  %217 = bitcast <8 x i32> %216 to <8 x float>, !dbg !17
  %218 = insertelement <8 x i32> poison, i32 %162, i64 0, !dbg !19
  %219 = insertelement <8 x i32> %218, i32 %165, i64 1, !dbg !19
  %220 = insertelement <8 x i32> %219, i32 %168, i64 2, !dbg !19
  %221 = insertelement <8 x i32> %220, i32 %171, i64 3, !dbg !19
  %222 = insertelement <8 x i32> %221, i32 %174, i64 4, !dbg !19
  %223 = insertelement <8 x i32> %222, i32 %177, i64 5, !dbg !19
  %224 = insertelement <8 x i32> %223, i32 %180, i64 6, !dbg !19
  %225 = insertelement <8 x i32> %224, i32 %183, i64 7, !dbg !19
  %226 = bitcast <8 x i32> %225 to <8 x float>, !dbg !19
  %227 = fadd <8 x float> %217, %226, !dbg !31
  %228 = insertelement <8 x i32> poison, i32 %163, i64 0, !dbg !21
  %229 = insertelement <8 x i32> %228, i32 %166, i64 1, !dbg !21
  %230 = insertelement <8 x i32> %229, i32 %169, i64 2, !dbg !21
  %231 = insertelement <8 x i32> %230, i32 %172, i64 3, !dbg !21
  %232 = insertelement <8 x i32> %231, i32 %175, i64 4, !dbg !21
  %233 = insertelement <8 x i32> %232, i32 %178, i64 5, !dbg !21
  %234 = insertelement <8 x i32> %233, i32 %181, i64 6, !dbg !21
  %235 = insertelement <8 x i32> %234, i32 %184, i64 7, !dbg !21
  %236 = bitcast <8 x i32> %235 to <8 x float>, !dbg !21
  %237 = fsub <8 x float> %227, %236, !dbg !32
  %238 = insertelement <8 x i32> poison, i32 %185, i64 0, !dbg !27
  %239 = insertelement <8 x i32> %238, i32 %186, i64 1, !dbg !27
  %240 = insertelement <8 x i32> %239, i32 %187, i64 2, !dbg !27
  %241 = insertelement <8 x i32> %240, i32 %188, i64 3, !dbg !27
  %242 = insertelement <8 x i32> %241, i32 %189, i64 4, !dbg !27
  %243 = insertelement <8 x i32> %242, i32 %190, i64 5, !dbg !27
  %244 = insertelement <8 x i32> %243, i32 %191, i64 6, !dbg !27
  %245 = insertelement <8 x i32> %244, i32 %192, i64 7, !dbg !27
  %246 = bitcast <8 x i32> %245 to <8 x float>, !dbg !27
  %247 = insertelement <8 x i32> poison, i32 %193, i64 0, !dbg !25
  %248 = insertelement <8 x i32> %247, i32 %194, i64 1, !dbg !25
  %249 = insertelement <8 x i32> %248, i32 %195, i64 2, !dbg !25
  %250 = insertelement <8 x i32> %249, i32 %196, i64 3, !dbg !25
  %251 = insertelement <8 x i32> %250, i32 %197, i64 4, !dbg !25
  %252 = insertelement <8 x i32> %251, i32 %198, i64 5, !dbg !25
  %253 = insertelement <8 x i32> %252, i32 %199, i64 6, !dbg !25
  %254 = insertelement <8 x i32> %253, i32 %200, i64 7, !dbg !25
  %255 = bitcast <8 x i32> %254 to <8 x float>, !dbg !25
  %256 = insertelement <8 x float> poison, float %208, i64 0, !dbg !33
  %257 = insertelement <8 x float> %256, float %207, i64 1, !dbg !33
  %258 = insertelement <8 x float> %257, float %206, i64 2, !dbg !33
  %259 = insertelement <8 x float> %258, float %205, i64 3, !dbg !33
  %260 = insertelement <8 x float> %259, float %204, i64 4, !dbg !33
  %261 = insertelement <8 x float> %260, float %203, i64 5, !dbg !33
  %262 = insertelement <8 x float> %261, float %202, i64 6, !dbg !33
  %263 = insertelement <8 x float> %262, float %201, i64 7, !dbg !33
  %264 = fmul <8 x float> %237, %263, !dbg !33
  %265 = fmul <8 x float> %264, %255, !dbg !34
  %266 = fadd <8 x float> %265, %246, !dbg !35
  %267 = fcmp olt <8 x float> %266, zeroinitializer, !dbg !36
  %268 = extractelement <8 x i1> %267, i64 7, !dbg !40
  %269 = extractelement <8 x i1> %267, i64 6, !dbg !40
  %270 = extractelement <8 x i1> %267, i64 5, !dbg !40
  %271 = extractelement <8 x i1> %267, i64 4, !dbg !40
  %272 = extractelement <8 x i1> %267, i64 3, !dbg !40
  %273 = extractelement <8 x i1> %267, i64 2, !dbg !40
  %274 = extractelement <8 x i1> %267, i64 1, !dbg !40
  %275 = extractelement <8 x i1> %267, i64 0, !dbg !40
  %bc = bitcast <8 x float> %227 to <8 x i32>, !dbg !41
  %276 = extractelement <8 x i32> %bc, i64 7, !dbg !41
  %bc36 = bitcast <8 x float> %227 to <8 x i32>, !dbg !41
  %277 = extractelement <8 x i32> %bc36, i64 6, !dbg !41
  %bc37 = bitcast <8 x float> %227 to <8 x i32>, !dbg !41
  %278 = extractelement <8 x i32> %bc37, i64 5, !dbg !41
  %bc38 = bitcast <8 x float> %227 to <8 x i32>, !dbg !41
  %279 = extractelement <8 x i32> %bc38, i64 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %276, i32 %277, i32 %278, i32 %279, ptr addrspace(1) %20, i1 %16) #3, !dbg !41
  %bc39 = bitcast <8 x float> %227 to <8 x i32>, !dbg !41
  %280 = extractelement <8 x i32> %bc39, i64 3, !dbg !41
  %bc40 = bitcast <8 x float> %227 to <8 x i32>, !dbg !41
  %281 = extractelement <8 x i32> %bc40, i64 2, !dbg !41
  %bc41 = bitcast <8 x float> %227 to <8 x i32>, !dbg !41
  %282 = extractelement <8 x i32> %bc41, i64 1, !dbg !41
  %bc42 = bitcast <8 x float> %227 to <8 x i32>, !dbg !41
  %283 = extractelement <8 x i32> %bc42, i64 0, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %280, i32 %281, i32 %282, i32 %283, ptr addrspace(1) %22, i1 %17) #3, !dbg !41
  %284 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !42
  %285 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !42
  %bc43 = bitcast <8 x float> %266 to <8 x i32>, !dbg !43
  %286 = extractelement <8 x i32> %bc43, i64 7, !dbg !43
  %287 = select i1 %268, i32 0, i32 %286, !dbg !40
  %bc44 = bitcast <8 x float> %266 to <8 x i32>, !dbg !43
  %288 = extractelement <8 x i32> %bc44, i64 6, !dbg !43
  %289 = select i1 %269, i32 0, i32 %288, !dbg !40
  %bc45 = bitcast <8 x float> %266 to <8 x i32>, !dbg !43
  %290 = extractelement <8 x i32> %bc45, i64 5, !dbg !43
  %291 = select i1 %270, i32 0, i32 %290, !dbg !40
  %bc46 = bitcast <8 x float> %266 to <8 x i32>, !dbg !43
  %292 = extractelement <8 x i32> %bc46, i64 4, !dbg !43
  %293 = select i1 %271, i32 0, i32 %292, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %287, i32 %289, i32 %291, i32 %293, ptr addrspace(1) %284, i1 %16) #3, !dbg !43
  %bc47 = bitcast <8 x float> %266 to <8 x i32>, !dbg !43
  %294 = extractelement <8 x i32> %bc47, i64 3, !dbg !43
  %295 = select i1 %272, i32 0, i32 %294, !dbg !40
  %bc48 = bitcast <8 x float> %266 to <8 x i32>, !dbg !43
  %296 = extractelement <8 x i32> %bc48, i64 2, !dbg !43
  %297 = select i1 %273, i32 0, i32 %296, !dbg !40
  %bc49 = bitcast <8 x float> %266 to <8 x i32>, !dbg !43
  %298 = extractelement <8 x i32> %bc49, i64 1, !dbg !43
  %299 = select i1 %274, i32 0, i32 %298, !dbg !40
  %bc50 = bitcast <8 x float> %266 to <8 x i32>, !dbg !43
  %300 = extractelement <8 x i32> %bc50, i64 0, !dbg !43
  %301 = select i1 %275, i32 0, i32 %300, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %295, i32 %297, i32 %299, i32 %301, ptr addrspace(1) %285, i1 %17) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c23x5gl2odpfn5itvymnyi2ihfgmpfbxpiqi3iapt7nkvjlvbcj4.py", directory: "inductor_cache/23")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 45, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 46, column: 39, scope: !7)
!42 = !DILocation(line: 47, column: 25, scope: !7)
!43 = !DILocation(line: 47, column: 37, scope: !7)
!44 = !DILocation(line: 47, column: 4, scope: !7)
