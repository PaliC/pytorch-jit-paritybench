; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 256, !dbg !14
  %15 = srem i32 %14, 48, !dbg !15
  %16 = mul i32 %14, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %.frozen7 = freeze i32 %13, !dbg !17
  %17 = sdiv i32 %.frozen7, 12288, !dbg !17
  %18 = icmp slt i32 %15, 24, !dbg !18
  %19 = mul i32 %17, 12288, !dbg !19
  %srem.decomposed = sub i32 %.frozen7, %19, !dbg !19
  %20 = mul nsw i32 %17, 6144, !dbg !20
  %21 = add nsw i32 %20, %srem.decomposed, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #1, !dbg !23
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !23
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !23
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !23
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !23
  %29 = sext i32 %15 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %18, i32 0, i1 %18) #1, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %18, i32 0, i1 %18) #1, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %18, i32 0, i1 %18) #1, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %18, i32 0, i1 %18) #1, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #1, !dbg !27
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !27
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !27
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !27
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %18, i32 0, i1 %18) #1, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %18, i32 0, i1 %18) #1, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %18, i32 0, i1 %18) #1, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %18, i32 0, i1 %18) #1, !dbg !29
  %46 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !23
  %47 = insertelement <2 x i32> %46, i32 %37, i64 1, !dbg !23
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !23
  %49 = fcmp ogt <2 x float> %48, zeroinitializer, !dbg !30
  %50 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !25
  %51 = insertelement <2 x i32> %50, i32 %42, i64 1, !dbg !25
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !25
  %53 = fmul <2 x float> %52, %48, !dbg !31
  %54 = select <2 x i1> %49, <2 x float> %48, <2 x float> %53, !dbg !32
  %55 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !23
  %56 = insertelement <2 x i32> %55, i32 %38, i64 1, !dbg !23
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !23
  %58 = fcmp ogt <2 x float> %57, zeroinitializer, !dbg !30
  %59 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !25
  %60 = insertelement <2 x i32> %59, i32 %43, i64 1, !dbg !25
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !25
  %62 = fmul <2 x float> %57, %61, !dbg !31
  %63 = select <2 x i1> %58, <2 x float> %57, <2 x float> %62, !dbg !32
  %64 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !23
  %65 = insertelement <2 x i32> %64, i32 %39, i64 1, !dbg !23
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !23
  %67 = fcmp ogt <2 x float> %66, zeroinitializer, !dbg !30
  %68 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !25
  %69 = insertelement <2 x i32> %68, i32 %44, i64 1, !dbg !25
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !25
  %71 = fmul <2 x float> %66, %70, !dbg !31
  %72 = select <2 x i1> %67, <2 x float> %66, <2 x float> %71, !dbg !32
  %73 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !23
  %74 = insertelement <2 x i32> %73, i32 %40, i64 1, !dbg !23
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !23
  %76 = fcmp ogt <2 x float> %75, zeroinitializer, !dbg !30
  %77 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !25
  %78 = insertelement <2 x i32> %77, i32 %45, i64 1, !dbg !25
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !25
  %80 = fmul <2 x float> %75, %79, !dbg !31
  %81 = select <2 x i1> %76, <2 x float> %75, <2 x float> %80, !dbg !32
  %shift = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %82 = fadd <2 x float> %54, %shift, !dbg !33
  %shift1 = shufflevector <2 x float> %63, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %83 = fadd <2 x float> %63, %shift1, !dbg !33
  %shift2 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %84 = fadd <2 x float> %72, %shift2, !dbg !33
  %shift3 = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !33
  %85 = fadd <2 x float> %81, %shift3, !dbg !33
  %86 = icmp sgt i32 %15, 23, !dbg !34
  %87 = shl nsw i32 %15, 8, !dbg !35
  %88 = add nsw i32 %.decomposed, -6144, !dbg !35
  %89 = add nsw i32 %88, %20, !dbg !36
  %90 = add nsw i32 %89, %87, !dbg !37
  %91 = sext i32 %90 to i64, !dbg !38
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %91, !dbg !38
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !39
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !39
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !39
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !39
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !39
  %98 = sext i32 %13 to i64, !dbg !40
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %98, !dbg !40
  %bc = bitcast <2 x float> %82 to <2 x i32>, !dbg !41
  %100 = extractelement <2 x i32> %bc, i64 0, !dbg !41
  %101 = select i1 %18, i32 %100, i32 %94, !dbg !42
  %bc4 = bitcast <2 x float> %83 to <2 x i32>, !dbg !41
  %102 = extractelement <2 x i32> %bc4, i64 0, !dbg !41
  %103 = select i1 %18, i32 %102, i32 %95, !dbg !42
  %bc5 = bitcast <2 x float> %84 to <2 x i32>, !dbg !41
  %104 = extractelement <2 x i32> %bc5, i64 0, !dbg !41
  %105 = select i1 %18, i32 %104, i32 %96, !dbg !42
  %bc6 = bitcast <2 x float> %85 to <2 x i32>, !dbg !41
  %106 = extractelement <2 x i32> %bc6, i64 0, !dbg !41
  %107 = select i1 %18, i32 %106, i32 %97, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %101, i32 %103, i32 %105, i32 %107, ptr addrspace(1) %99, i1 true) #1, !dbg !41
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6kjnbusofodht7zy2rc6spyc7wlitdwfav46smncebbcmbropjg.py", directory: "inductor_cache/6k")
!4 = !{ptr @triton_poi_fused_cat_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_15", linkageName: "triton_poi_fused_cat_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 39, column: 31, scope: !7)
!27 = !DILocation(line: 39, column: 57, scope: !7)
!28 = !DILocation(line: 41, column: 31, scope: !7)
!29 = !DILocation(line: 41, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 33, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 50, column: 41, scope: !7)
!36 = !DILocation(line: 50, column: 36, scope: !7)
!37 = !DILocation(line: 50, column: 55, scope: !7)
!38 = !DILocation(line: 50, column: 31, scope: !7)
!39 = !DILocation(line: 50, column: 65, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 37, scope: !7)
!42 = !DILocation(line: 0, scope: !7)
!43 = !DILocation(line: 52, column: 4, scope: !7)
