; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %20 = shl i32 %19, 10, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = shl i32 %21, 3, !dbg !12
  %23 = and i32 %22, 1016, !dbg !12
  %24 = or disjoint i32 %20, %23, !dbg !13
  %25 = or disjoint i32 %24, 4, !dbg !13
  %26 = srem i32 %24, 48, !dbg !14
  %27 = srem i32 %25, 48, !dbg !14
  %28 = sext i32 %24 to i64, !dbg !15
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !15
  %30 = sext i32 %25 to i64, !dbg !15
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !15
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #4, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !16
  %34 = sext i32 %26 to i64, !dbg !17
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !17
  %36 = sext i32 %27 to i64, !dbg !17
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !17
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !18
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !19
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !20
  %47 = bitcast i32 %43 to float, !dbg !20
  %48 = bitcast i32 %44 to float, !dbg !20
  %49 = bitcast i32 %45 to float, !dbg !20
  %50 = bitcast i32 %46 to float, !dbg !20
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !20
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !20
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !20
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !20
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !20
  %56 = bitcast i32 %52 to float, !dbg !20
  %57 = bitcast i32 %53 to float, !dbg !20
  %58 = bitcast i32 %54 to float, !dbg !20
  %59 = bitcast i32 %55 to float, !dbg !20
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !21
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !21
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !22
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !22
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !23
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !23
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !25
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #4, !dbg !26
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #4, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !27
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #4, !dbg !28
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #4, !dbg !28
  %76 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !29
  %77 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !29
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #4, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !30
  %83 = bitcast i32 %79 to float, !dbg !30
  %84 = bitcast i32 %80 to float, !dbg !30
  %85 = bitcast i32 %81 to float, !dbg !30
  %86 = bitcast i32 %82 to float, !dbg !30
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #4, !dbg !30
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !30
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !30
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !30
  %92 = bitcast i32 %88 to float, !dbg !30
  %93 = bitcast i32 %89 to float, !dbg !30
  %94 = bitcast i32 %90 to float, !dbg !30
  %95 = bitcast i32 %91 to float, !dbg !30
  %96 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !31
  %97 = getelementptr float, ptr addrspace(1) %8, i64 %36, !dbg !31
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #4, !dbg !32
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #4, !dbg !32
  %100 = getelementptr float, ptr addrspace(1) %9, i64 %34, !dbg !33
  %101 = getelementptr float, ptr addrspace(1) %9, i64 %36, !dbg !33
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #4, !dbg !34
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #4, !dbg !34
  %104 = getelementptr float, ptr addrspace(1) %10, i64 %34, !dbg !35
  %105 = getelementptr float, ptr addrspace(1) %10, i64 %36, !dbg !35
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 true) #4, !dbg !36
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #4, !dbg !36
  %108 = getelementptr float, ptr addrspace(1) %11, i64 %34, !dbg !37
  %109 = getelementptr float, ptr addrspace(1) %11, i64 %36, !dbg !37
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 true) #4, !dbg !38
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !38
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !38
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !38
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !38
  %115 = bitcast i32 %111 to float, !dbg !38
  %116 = bitcast i32 %112 to float, !dbg !38
  %117 = bitcast i32 %113 to float, !dbg !38
  %118 = bitcast i32 %114 to float, !dbg !38
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #4, !dbg !38
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !38
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !38
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !38
  %124 = bitcast i32 %120 to float, !dbg !38
  %125 = bitcast i32 %121 to float, !dbg !38
  %126 = bitcast i32 %122 to float, !dbg !38
  %127 = bitcast i32 %123 to float, !dbg !38
  %128 = getelementptr float, ptr addrspace(1) %12, i64 %34, !dbg !39
  %129 = getelementptr float, ptr addrspace(1) %12, i64 %36, !dbg !39
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 true) #4, !dbg !40
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 true) #4, !dbg !40
  %132 = getelementptr float, ptr addrspace(1) %13, i64 %34, !dbg !41
  %133 = getelementptr float, ptr addrspace(1) %13, i64 %36, !dbg !41
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 true) #4, !dbg !42
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %133, i1 true) #4, !dbg !42
  %136 = fadd float %47, 0x3EE4F8B580000000, !dbg !43
  %137 = fadd float %48, 0x3EE4F8B580000000, !dbg !43
  %138 = fadd float %49, 0x3EE4F8B580000000, !dbg !43
  %139 = fadd float %50, 0x3EE4F8B580000000, !dbg !43
  %140 = fadd float %56, 0x3EE4F8B580000000, !dbg !43
  %141 = fadd float %57, 0x3EE4F8B580000000, !dbg !43
  %142 = fadd float %58, 0x3EE4F8B580000000, !dbg !43
  %143 = fadd float %59, 0x3EE4F8B580000000, !dbg !43
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %144, 0, !dbg !44
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i = icmp eq i32 %145, 0, !dbg !44
  br i1 %.not.i, label %151, label %146, !dbg !44

146:                                              ; preds = %18
  br i1 %.not1.i, label %149, label %147, !dbg !44

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

151:                                              ; preds = %18
  br i1 %.not1.i, label %154, label %152, !dbg !44

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %147, %149, %152, %154
  %.0.i = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !44
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i30 = icmp eq i32 %156, 0, !dbg !44
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i33 = icmp eq i32 %157, 0, !dbg !44
  br i1 %.not.i30, label %163, label %158, !dbg !44

158:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %161, label %159, !dbg !44

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #4, !dbg !44
  br label %__nv_sqrtf.exit34, !dbg !44

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #4, !dbg !44
  br label %__nv_sqrtf.exit34, !dbg !44

163:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %166, label %164, !dbg !44

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #4, !dbg !44
  br label %__nv_sqrtf.exit34, !dbg !44

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #4, !dbg !44
  br label %__nv_sqrtf.exit34, !dbg !44

__nv_sqrtf.exit34:                                ; preds = %159, %161, %164, %166
  %.0.i32 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !44
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i35 = icmp eq i32 %168, 0, !dbg !44
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i38 = icmp eq i32 %169, 0, !dbg !44
  br i1 %.not.i35, label %175, label %170, !dbg !44

170:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %173, label %171, !dbg !44

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #4, !dbg !44
  br label %__nv_sqrtf.exit39, !dbg !44

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #4, !dbg !44
  br label %__nv_sqrtf.exit39, !dbg !44

175:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %178, label %176, !dbg !44

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #4, !dbg !44
  br label %__nv_sqrtf.exit39, !dbg !44

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #4, !dbg !44
  br label %__nv_sqrtf.exit39, !dbg !44

__nv_sqrtf.exit39:                                ; preds = %171, %173, %176, %178
  %.0.i37 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !44
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i40 = icmp eq i32 %180, 0, !dbg !44
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i43 = icmp eq i32 %181, 0, !dbg !44
  br i1 %.not.i40, label %187, label %182, !dbg !44

182:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %185, label %183, !dbg !44

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #4, !dbg !44
  br label %__nv_sqrtf.exit44, !dbg !44

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #4, !dbg !44
  br label %__nv_sqrtf.exit44, !dbg !44

187:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %190, label %188, !dbg !44

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #4, !dbg !44
  br label %__nv_sqrtf.exit44, !dbg !44

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #4, !dbg !44
  br label %__nv_sqrtf.exit44, !dbg !44

__nv_sqrtf.exit44:                                ; preds = %183, %185, %188, %190
  %.0.i42 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !44
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i45 = icmp eq i32 %192, 0, !dbg !44
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i48 = icmp eq i32 %193, 0, !dbg !44
  br i1 %.not.i45, label %199, label %194, !dbg !44

194:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %197, label %195, !dbg !44

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #4, !dbg !44
  br label %__nv_sqrtf.exit49, !dbg !44

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #4, !dbg !44
  br label %__nv_sqrtf.exit49, !dbg !44

199:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %202, label %200, !dbg !44

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #4, !dbg !44
  br label %__nv_sqrtf.exit49, !dbg !44

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #4, !dbg !44
  br label %__nv_sqrtf.exit49, !dbg !44

__nv_sqrtf.exit49:                                ; preds = %195, %197, %200, %202
  %.0.i47 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !44
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i50 = icmp eq i32 %204, 0, !dbg !44
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i53 = icmp eq i32 %205, 0, !dbg !44
  br i1 %.not.i50, label %211, label %206, !dbg !44

206:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %209, label %207, !dbg !44

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #4, !dbg !44
  br label %__nv_sqrtf.exit54, !dbg !44

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #4, !dbg !44
  br label %__nv_sqrtf.exit54, !dbg !44

211:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %214, label %212, !dbg !44

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #4, !dbg !44
  br label %__nv_sqrtf.exit54, !dbg !44

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #4, !dbg !44
  br label %__nv_sqrtf.exit54, !dbg !44

__nv_sqrtf.exit54:                                ; preds = %207, %209, %212, %214
  %.0.i52 = phi float [ %208, %207 ], [ %210, %209 ], [ %213, %212 ], [ %215, %214 ], !dbg !44
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i55 = icmp eq i32 %216, 0, !dbg !44
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i58 = icmp eq i32 %217, 0, !dbg !44
  br i1 %.not.i55, label %223, label %218, !dbg !44

218:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %221, label %219, !dbg !44

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #4, !dbg !44
  br label %__nv_sqrtf.exit59, !dbg !44

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #4, !dbg !44
  br label %__nv_sqrtf.exit59, !dbg !44

223:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %226, label %224, !dbg !44

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #4, !dbg !44
  br label %__nv_sqrtf.exit59, !dbg !44

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #4, !dbg !44
  br label %__nv_sqrtf.exit59, !dbg !44

__nv_sqrtf.exit59:                                ; preds = %219, %221, %224, %226
  %.0.i57 = phi float [ %220, %219 ], [ %222, %221 ], [ %225, %224 ], [ %227, %226 ], !dbg !44
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i60 = icmp eq i32 %228, 0, !dbg !44
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i63 = icmp eq i32 %229, 0, !dbg !44
  br i1 %.not.i60, label %235, label %230, !dbg !44

230:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %233, label %231, !dbg !44

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #4, !dbg !44
  br label %__nv_sqrtf.exit64, !dbg !44

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #4, !dbg !44
  br label %__nv_sqrtf.exit64, !dbg !44

235:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %238, label %236, !dbg !44

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #4, !dbg !44
  br label %__nv_sqrtf.exit64, !dbg !44

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #4, !dbg !44
  br label %__nv_sqrtf.exit64, !dbg !44

__nv_sqrtf.exit64:                                ; preds = %231, %233, %236, %238
  %.0.i62 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !44
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !45
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !45
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !45
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !45
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !45
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #4, !dbg !45
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #4, !dbg !45
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !45
  %248 = fadd float %83, 0x3EE4F8B580000000, !dbg !46
  %249 = fadd float %84, 0x3EE4F8B580000000, !dbg !46
  %250 = fadd float %85, 0x3EE4F8B580000000, !dbg !46
  %251 = fadd float %86, 0x3EE4F8B580000000, !dbg !46
  %252 = fadd float %92, 0x3EE4F8B580000000, !dbg !46
  %253 = fadd float %93, 0x3EE4F8B580000000, !dbg !46
  %254 = fadd float %94, 0x3EE4F8B580000000, !dbg !46
  %255 = fadd float %95, 0x3EE4F8B580000000, !dbg !46
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i65 = icmp eq i32 %256, 0, !dbg !47
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i68 = icmp eq i32 %257, 0, !dbg !47
  br i1 %.not.i65, label %263, label %258, !dbg !47

258:                                              ; preds = %__nv_sqrtf.exit64
  br i1 %.not1.i68, label %261, label %259, !dbg !47

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %248) #4, !dbg !47
  br label %__nv_sqrtf.exit69, !dbg !47

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %248) #4, !dbg !47
  br label %__nv_sqrtf.exit69, !dbg !47

263:                                              ; preds = %__nv_sqrtf.exit64
  br i1 %.not1.i68, label %266, label %264, !dbg !47

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.f(float %248) #4, !dbg !47
  br label %__nv_sqrtf.exit69, !dbg !47

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.f(float %248) #4, !dbg !47
  br label %__nv_sqrtf.exit69, !dbg !47

__nv_sqrtf.exit69:                                ; preds = %259, %261, %264, %266
  %.0.i67 = phi float [ %260, %259 ], [ %262, %261 ], [ %265, %264 ], [ %267, %266 ], !dbg !47
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i70 = icmp eq i32 %268, 0, !dbg !47
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i73 = icmp eq i32 %269, 0, !dbg !47
  br i1 %.not.i70, label %275, label %270, !dbg !47

270:                                              ; preds = %__nv_sqrtf.exit69
  br i1 %.not1.i73, label %273, label %271, !dbg !47

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %249) #4, !dbg !47
  br label %__nv_sqrtf.exit74, !dbg !47

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %249) #4, !dbg !47
  br label %__nv_sqrtf.exit74, !dbg !47

275:                                              ; preds = %__nv_sqrtf.exit69
  br i1 %.not1.i73, label %278, label %276, !dbg !47

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.f(float %249) #4, !dbg !47
  br label %__nv_sqrtf.exit74, !dbg !47

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.f(float %249) #4, !dbg !47
  br label %__nv_sqrtf.exit74, !dbg !47

__nv_sqrtf.exit74:                                ; preds = %271, %273, %276, %278
  %.0.i72 = phi float [ %272, %271 ], [ %274, %273 ], [ %277, %276 ], [ %279, %278 ], !dbg !47
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i75 = icmp eq i32 %280, 0, !dbg !47
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i78 = icmp eq i32 %281, 0, !dbg !47
  br i1 %.not.i75, label %287, label %282, !dbg !47

282:                                              ; preds = %__nv_sqrtf.exit74
  br i1 %.not1.i78, label %285, label %283, !dbg !47

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %250) #4, !dbg !47
  br label %__nv_sqrtf.exit79, !dbg !47

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %250) #4, !dbg !47
  br label %__nv_sqrtf.exit79, !dbg !47

287:                                              ; preds = %__nv_sqrtf.exit74
  br i1 %.not1.i78, label %290, label %288, !dbg !47

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.f(float %250) #4, !dbg !47
  br label %__nv_sqrtf.exit79, !dbg !47

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.f(float %250) #4, !dbg !47
  br label %__nv_sqrtf.exit79, !dbg !47

__nv_sqrtf.exit79:                                ; preds = %283, %285, %288, %290
  %.0.i77 = phi float [ %284, %283 ], [ %286, %285 ], [ %289, %288 ], [ %291, %290 ], !dbg !47
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i80 = icmp eq i32 %292, 0, !dbg !47
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i83 = icmp eq i32 %293, 0, !dbg !47
  br i1 %.not.i80, label %299, label %294, !dbg !47

294:                                              ; preds = %__nv_sqrtf.exit79
  br i1 %.not1.i83, label %297, label %295, !dbg !47

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %251) #4, !dbg !47
  br label %__nv_sqrtf.exit84, !dbg !47

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %251) #4, !dbg !47
  br label %__nv_sqrtf.exit84, !dbg !47

299:                                              ; preds = %__nv_sqrtf.exit79
  br i1 %.not1.i83, label %302, label %300, !dbg !47

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.f(float %251) #4, !dbg !47
  br label %__nv_sqrtf.exit84, !dbg !47

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.f(float %251) #4, !dbg !47
  br label %__nv_sqrtf.exit84, !dbg !47

__nv_sqrtf.exit84:                                ; preds = %295, %297, %300, %302
  %.0.i82 = phi float [ %296, %295 ], [ %298, %297 ], [ %301, %300 ], [ %303, %302 ], !dbg !47
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i85 = icmp eq i32 %304, 0, !dbg !47
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i88 = icmp eq i32 %305, 0, !dbg !47
  br i1 %.not.i85, label %311, label %306, !dbg !47

306:                                              ; preds = %__nv_sqrtf.exit84
  br i1 %.not1.i88, label %309, label %307, !dbg !47

307:                                              ; preds = %306
  %308 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %252) #4, !dbg !47
  br label %__nv_sqrtf.exit89, !dbg !47

309:                                              ; preds = %306
  %310 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %252) #4, !dbg !47
  br label %__nv_sqrtf.exit89, !dbg !47

311:                                              ; preds = %__nv_sqrtf.exit84
  br i1 %.not1.i88, label %314, label %312, !dbg !47

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.f(float %252) #4, !dbg !47
  br label %__nv_sqrtf.exit89, !dbg !47

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.f(float %252) #4, !dbg !47
  br label %__nv_sqrtf.exit89, !dbg !47

__nv_sqrtf.exit89:                                ; preds = %307, %309, %312, %314
  %.0.i87 = phi float [ %308, %307 ], [ %310, %309 ], [ %313, %312 ], [ %315, %314 ], !dbg !47
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i90 = icmp eq i32 %316, 0, !dbg !47
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i93 = icmp eq i32 %317, 0, !dbg !47
  br i1 %.not.i90, label %323, label %318, !dbg !47

318:                                              ; preds = %__nv_sqrtf.exit89
  br i1 %.not1.i93, label %321, label %319, !dbg !47

319:                                              ; preds = %318
  %320 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %253) #4, !dbg !47
  br label %__nv_sqrtf.exit94, !dbg !47

321:                                              ; preds = %318
  %322 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %253) #4, !dbg !47
  br label %__nv_sqrtf.exit94, !dbg !47

323:                                              ; preds = %__nv_sqrtf.exit89
  br i1 %.not1.i93, label %326, label %324, !dbg !47

324:                                              ; preds = %323
  %325 = tail call float @llvm.nvvm.sqrt.rn.f(float %253) #4, !dbg !47
  br label %__nv_sqrtf.exit94, !dbg !47

326:                                              ; preds = %323
  %327 = tail call float @llvm.nvvm.sqrt.approx.f(float %253) #4, !dbg !47
  br label %__nv_sqrtf.exit94, !dbg !47

__nv_sqrtf.exit94:                                ; preds = %319, %321, %324, %326
  %.0.i92 = phi float [ %320, %319 ], [ %322, %321 ], [ %325, %324 ], [ %327, %326 ], !dbg !47
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i95 = icmp eq i32 %328, 0, !dbg !47
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i98 = icmp eq i32 %329, 0, !dbg !47
  br i1 %.not.i95, label %335, label %330, !dbg !47

330:                                              ; preds = %__nv_sqrtf.exit94
  br i1 %.not1.i98, label %333, label %331, !dbg !47

331:                                              ; preds = %330
  %332 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %254) #4, !dbg !47
  br label %__nv_sqrtf.exit99, !dbg !47

333:                                              ; preds = %330
  %334 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %254) #4, !dbg !47
  br label %__nv_sqrtf.exit99, !dbg !47

335:                                              ; preds = %__nv_sqrtf.exit94
  br i1 %.not1.i98, label %338, label %336, !dbg !47

336:                                              ; preds = %335
  %337 = tail call float @llvm.nvvm.sqrt.rn.f(float %254) #4, !dbg !47
  br label %__nv_sqrtf.exit99, !dbg !47

338:                                              ; preds = %335
  %339 = tail call float @llvm.nvvm.sqrt.approx.f(float %254) #4, !dbg !47
  br label %__nv_sqrtf.exit99, !dbg !47

__nv_sqrtf.exit99:                                ; preds = %331, %333, %336, %338
  %.0.i97 = phi float [ %332, %331 ], [ %334, %333 ], [ %337, %336 ], [ %339, %338 ], !dbg !47
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i100 = icmp eq i32 %340, 0, !dbg !47
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i103 = icmp eq i32 %341, 0, !dbg !47
  br i1 %.not.i100, label %347, label %342, !dbg !47

342:                                              ; preds = %__nv_sqrtf.exit99
  br i1 %.not1.i103, label %345, label %343, !dbg !47

343:                                              ; preds = %342
  %344 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %255) #4, !dbg !47
  br label %__nv_sqrtf.exit104, !dbg !47

345:                                              ; preds = %342
  %346 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %255) #4, !dbg !47
  br label %__nv_sqrtf.exit104, !dbg !47

347:                                              ; preds = %__nv_sqrtf.exit99
  br i1 %.not1.i103, label %350, label %348, !dbg !47

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.f(float %255) #4, !dbg !47
  br label %__nv_sqrtf.exit104, !dbg !47

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.f(float %255) #4, !dbg !47
  br label %__nv_sqrtf.exit104, !dbg !47

__nv_sqrtf.exit104:                               ; preds = %343, %345, %348, %350
  %.0.i102 = phi float [ %344, %343 ], [ %346, %345 ], [ %349, %348 ], [ %351, %350 ], !dbg !47
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i67) #4, !dbg !48
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i72) #4, !dbg !48
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i77) #4, !dbg !48
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i82) #4, !dbg !48
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i87) #4, !dbg !48
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i92) #4, !dbg !48
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i97) #4, !dbg !48
  %359 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i102) #4, !dbg !48
  %360 = fadd float %115, 0x3EE4F8B580000000, !dbg !49
  %361 = fadd float %116, 0x3EE4F8B580000000, !dbg !49
  %362 = fadd float %117, 0x3EE4F8B580000000, !dbg !49
  %363 = fadd float %118, 0x3EE4F8B580000000, !dbg !49
  %364 = fadd float %124, 0x3EE4F8B580000000, !dbg !49
  %365 = fadd float %125, 0x3EE4F8B580000000, !dbg !49
  %366 = fadd float %126, 0x3EE4F8B580000000, !dbg !49
  %367 = fadd float %127, 0x3EE4F8B580000000, !dbg !49
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i105 = icmp eq i32 %368, 0, !dbg !50
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !50
  %.not1.i108 = icmp eq i32 %369, 0, !dbg !50
  br i1 %.not.i105, label %375, label %370, !dbg !50

370:                                              ; preds = %__nv_sqrtf.exit104
  br i1 %.not1.i108, label %373, label %371, !dbg !50

371:                                              ; preds = %370
  %372 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %360) #4, !dbg !50
  br label %__nv_sqrtf.exit109, !dbg !50

373:                                              ; preds = %370
  %374 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %360) #4, !dbg !50
  br label %__nv_sqrtf.exit109, !dbg !50

375:                                              ; preds = %__nv_sqrtf.exit104
  br i1 %.not1.i108, label %378, label %376, !dbg !50

376:                                              ; preds = %375
  %377 = tail call float @llvm.nvvm.sqrt.rn.f(float %360) #4, !dbg !50
  br label %__nv_sqrtf.exit109, !dbg !50

378:                                              ; preds = %375
  %379 = tail call float @llvm.nvvm.sqrt.approx.f(float %360) #4, !dbg !50
  br label %__nv_sqrtf.exit109, !dbg !50

__nv_sqrtf.exit109:                               ; preds = %371, %373, %376, %378
  %.0.i107 = phi float [ %372, %371 ], [ %374, %373 ], [ %377, %376 ], [ %379, %378 ], !dbg !50
  %380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i110 = icmp eq i32 %380, 0, !dbg !50
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !50
  %.not1.i113 = icmp eq i32 %381, 0, !dbg !50
  br i1 %.not.i110, label %387, label %382, !dbg !50

382:                                              ; preds = %__nv_sqrtf.exit109
  br i1 %.not1.i113, label %385, label %383, !dbg !50

383:                                              ; preds = %382
  %384 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %361) #4, !dbg !50
  br label %__nv_sqrtf.exit114, !dbg !50

385:                                              ; preds = %382
  %386 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %361) #4, !dbg !50
  br label %__nv_sqrtf.exit114, !dbg !50

387:                                              ; preds = %__nv_sqrtf.exit109
  br i1 %.not1.i113, label %390, label %388, !dbg !50

388:                                              ; preds = %387
  %389 = tail call float @llvm.nvvm.sqrt.rn.f(float %361) #4, !dbg !50
  br label %__nv_sqrtf.exit114, !dbg !50

390:                                              ; preds = %387
  %391 = tail call float @llvm.nvvm.sqrt.approx.f(float %361) #4, !dbg !50
  br label %__nv_sqrtf.exit114, !dbg !50

__nv_sqrtf.exit114:                               ; preds = %383, %385, %388, %390
  %.0.i112 = phi float [ %384, %383 ], [ %386, %385 ], [ %389, %388 ], [ %391, %390 ], !dbg !50
  %392 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i115 = icmp eq i32 %392, 0, !dbg !50
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !50
  %.not1.i118 = icmp eq i32 %393, 0, !dbg !50
  br i1 %.not.i115, label %399, label %394, !dbg !50

394:                                              ; preds = %__nv_sqrtf.exit114
  br i1 %.not1.i118, label %397, label %395, !dbg !50

395:                                              ; preds = %394
  %396 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %362) #4, !dbg !50
  br label %__nv_sqrtf.exit119, !dbg !50

397:                                              ; preds = %394
  %398 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %362) #4, !dbg !50
  br label %__nv_sqrtf.exit119, !dbg !50

399:                                              ; preds = %__nv_sqrtf.exit114
  br i1 %.not1.i118, label %402, label %400, !dbg !50

400:                                              ; preds = %399
  %401 = tail call float @llvm.nvvm.sqrt.rn.f(float %362) #4, !dbg !50
  br label %__nv_sqrtf.exit119, !dbg !50

402:                                              ; preds = %399
  %403 = tail call float @llvm.nvvm.sqrt.approx.f(float %362) #4, !dbg !50
  br label %__nv_sqrtf.exit119, !dbg !50

__nv_sqrtf.exit119:                               ; preds = %395, %397, %400, %402
  %.0.i117 = phi float [ %396, %395 ], [ %398, %397 ], [ %401, %400 ], [ %403, %402 ], !dbg !50
  %404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i120 = icmp eq i32 %404, 0, !dbg !50
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !50
  %.not1.i123 = icmp eq i32 %405, 0, !dbg !50
  br i1 %.not.i120, label %411, label %406, !dbg !50

406:                                              ; preds = %__nv_sqrtf.exit119
  br i1 %.not1.i123, label %409, label %407, !dbg !50

407:                                              ; preds = %406
  %408 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %363) #4, !dbg !50
  br label %__nv_sqrtf.exit124, !dbg !50

409:                                              ; preds = %406
  %410 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %363) #4, !dbg !50
  br label %__nv_sqrtf.exit124, !dbg !50

411:                                              ; preds = %__nv_sqrtf.exit119
  br i1 %.not1.i123, label %414, label %412, !dbg !50

412:                                              ; preds = %411
  %413 = tail call float @llvm.nvvm.sqrt.rn.f(float %363) #4, !dbg !50
  br label %__nv_sqrtf.exit124, !dbg !50

414:                                              ; preds = %411
  %415 = tail call float @llvm.nvvm.sqrt.approx.f(float %363) #4, !dbg !50
  br label %__nv_sqrtf.exit124, !dbg !50

__nv_sqrtf.exit124:                               ; preds = %407, %409, %412, %414
  %.0.i122 = phi float [ %408, %407 ], [ %410, %409 ], [ %413, %412 ], [ %415, %414 ], !dbg !50
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i125 = icmp eq i32 %416, 0, !dbg !50
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !50
  %.not1.i128 = icmp eq i32 %417, 0, !dbg !50
  br i1 %.not.i125, label %423, label %418, !dbg !50

418:                                              ; preds = %__nv_sqrtf.exit124
  br i1 %.not1.i128, label %421, label %419, !dbg !50

419:                                              ; preds = %418
  %420 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %364) #4, !dbg !50
  br label %__nv_sqrtf.exit129, !dbg !50

421:                                              ; preds = %418
  %422 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %364) #4, !dbg !50
  br label %__nv_sqrtf.exit129, !dbg !50

423:                                              ; preds = %__nv_sqrtf.exit124
  br i1 %.not1.i128, label %426, label %424, !dbg !50

424:                                              ; preds = %423
  %425 = tail call float @llvm.nvvm.sqrt.rn.f(float %364) #4, !dbg !50
  br label %__nv_sqrtf.exit129, !dbg !50

426:                                              ; preds = %423
  %427 = tail call float @llvm.nvvm.sqrt.approx.f(float %364) #4, !dbg !50
  br label %__nv_sqrtf.exit129, !dbg !50

__nv_sqrtf.exit129:                               ; preds = %419, %421, %424, %426
  %.0.i127 = phi float [ %420, %419 ], [ %422, %421 ], [ %425, %424 ], [ %427, %426 ], !dbg !50
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i130 = icmp eq i32 %428, 0, !dbg !50
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !50
  %.not1.i133 = icmp eq i32 %429, 0, !dbg !50
  br i1 %.not.i130, label %435, label %430, !dbg !50

430:                                              ; preds = %__nv_sqrtf.exit129
  br i1 %.not1.i133, label %433, label %431, !dbg !50

431:                                              ; preds = %430
  %432 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %365) #4, !dbg !50
  br label %__nv_sqrtf.exit134, !dbg !50

433:                                              ; preds = %430
  %434 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %365) #4, !dbg !50
  br label %__nv_sqrtf.exit134, !dbg !50

435:                                              ; preds = %__nv_sqrtf.exit129
  br i1 %.not1.i133, label %438, label %436, !dbg !50

436:                                              ; preds = %435
  %437 = tail call float @llvm.nvvm.sqrt.rn.f(float %365) #4, !dbg !50
  br label %__nv_sqrtf.exit134, !dbg !50

438:                                              ; preds = %435
  %439 = tail call float @llvm.nvvm.sqrt.approx.f(float %365) #4, !dbg !50
  br label %__nv_sqrtf.exit134, !dbg !50

__nv_sqrtf.exit134:                               ; preds = %431, %433, %436, %438
  %.0.i132 = phi float [ %432, %431 ], [ %434, %433 ], [ %437, %436 ], [ %439, %438 ], !dbg !50
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i135 = icmp eq i32 %440, 0, !dbg !50
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !50
  %.not1.i138 = icmp eq i32 %441, 0, !dbg !50
  br i1 %.not.i135, label %447, label %442, !dbg !50

442:                                              ; preds = %__nv_sqrtf.exit134
  br i1 %.not1.i138, label %445, label %443, !dbg !50

443:                                              ; preds = %442
  %444 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %366) #4, !dbg !50
  br label %__nv_sqrtf.exit139, !dbg !50

445:                                              ; preds = %442
  %446 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %366) #4, !dbg !50
  br label %__nv_sqrtf.exit139, !dbg !50

447:                                              ; preds = %__nv_sqrtf.exit134
  br i1 %.not1.i138, label %450, label %448, !dbg !50

448:                                              ; preds = %447
  %449 = tail call float @llvm.nvvm.sqrt.rn.f(float %366) #4, !dbg !50
  br label %__nv_sqrtf.exit139, !dbg !50

450:                                              ; preds = %447
  %451 = tail call float @llvm.nvvm.sqrt.approx.f(float %366) #4, !dbg !50
  br label %__nv_sqrtf.exit139, !dbg !50

__nv_sqrtf.exit139:                               ; preds = %443, %445, %448, %450
  %.0.i137 = phi float [ %444, %443 ], [ %446, %445 ], [ %449, %448 ], [ %451, %450 ], !dbg !50
  %452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i140 = icmp eq i32 %452, 0, !dbg !50
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !50
  %.not1.i143 = icmp eq i32 %453, 0, !dbg !50
  br i1 %.not.i140, label %459, label %454, !dbg !50

454:                                              ; preds = %__nv_sqrtf.exit139
  br i1 %.not1.i143, label %457, label %455, !dbg !50

455:                                              ; preds = %454
  %456 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %367) #4, !dbg !50
  br label %__nv_sqrtf.exit144, !dbg !50

457:                                              ; preds = %454
  %458 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %367) #4, !dbg !50
  br label %__nv_sqrtf.exit144, !dbg !50

459:                                              ; preds = %__nv_sqrtf.exit139
  br i1 %.not1.i143, label %462, label %460, !dbg !50

460:                                              ; preds = %459
  %461 = tail call float @llvm.nvvm.sqrt.rn.f(float %367) #4, !dbg !50
  br label %__nv_sqrtf.exit144, !dbg !50

462:                                              ; preds = %459
  %463 = tail call float @llvm.nvvm.sqrt.approx.f(float %367) #4, !dbg !50
  br label %__nv_sqrtf.exit144, !dbg !50

__nv_sqrtf.exit144:                               ; preds = %455, %457, %460, %462
  %.0.i142 = phi float [ %456, %455 ], [ %458, %457 ], [ %461, %460 ], [ %463, %462 ], !dbg !50
  %464 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !16
  %465 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !18
  %466 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !22
  %467 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %468 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !26
  %469 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !28
  %470 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !32
  %471 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !34
  %472 = insertelement <2 x i32> poison, i32 %464, i64 0, !dbg !16
  %473 = insertelement <2 x i32> %472, i32 %468, i64 1, !dbg !16
  %474 = bitcast <2 x i32> %473 to <2 x float>, !dbg !16
  %475 = insertelement <2 x i32> poison, i32 %465, i64 0, !dbg !18
  %476 = insertelement <2 x i32> %475, i32 %469, i64 1, !dbg !18
  %477 = bitcast <2 x i32> %476 to <2 x float>, !dbg !18
  %478 = fsub <2 x float> %474, %477, !dbg !51
  %479 = insertelement <2 x float> poison, float %247, i64 0, !dbg !52
  %480 = insertelement <2 x float> %479, float %359, i64 1, !dbg !52
  %481 = fmul <2 x float> %478, %480, !dbg !52
  %482 = insertelement <2 x i32> poison, i32 %466, i64 0, !dbg !22
  %483 = insertelement <2 x i32> %482, i32 %470, i64 1, !dbg !22
  %484 = bitcast <2 x i32> %483 to <2 x float>, !dbg !22
  %485 = fmul <2 x float> %481, %484, !dbg !53
  %486 = insertelement <2 x i32> poison, i32 %467, i64 0, !dbg !24
  %487 = insertelement <2 x i32> %486, i32 %471, i64 1, !dbg !24
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !24
  %489 = fadd <2 x float> %485, %488, !dbg !54
  %shift = shufflevector <2 x float> %489, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %490 = fadd <2 x float> %489, %shift, !dbg !55
  %491 = extractelement <2 x float> %490, i64 0, !dbg !55
  %492 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !36
  %493 = bitcast i32 %492 to float, !dbg !36
  %494 = fsub float %491, %493, !dbg !56
  %495 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !16
  %496 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !18
  %497 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !22
  %498 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %499 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !26
  %500 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !28
  %501 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !32
  %502 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !34
  %503 = insertelement <2 x i32> poison, i32 %495, i64 0, !dbg !16
  %504 = insertelement <2 x i32> %503, i32 %499, i64 1, !dbg !16
  %505 = bitcast <2 x i32> %504 to <2 x float>, !dbg !16
  %506 = insertelement <2 x i32> poison, i32 %496, i64 0, !dbg !18
  %507 = insertelement <2 x i32> %506, i32 %500, i64 1, !dbg !18
  %508 = bitcast <2 x i32> %507 to <2 x float>, !dbg !18
  %509 = fsub <2 x float> %505, %508, !dbg !51
  %510 = insertelement <2 x float> poison, float %246, i64 0, !dbg !52
  %511 = insertelement <2 x float> %510, float %358, i64 1, !dbg !52
  %512 = fmul <2 x float> %509, %511, !dbg !52
  %513 = insertelement <2 x i32> poison, i32 %497, i64 0, !dbg !22
  %514 = insertelement <2 x i32> %513, i32 %501, i64 1, !dbg !22
  %515 = bitcast <2 x i32> %514 to <2 x float>, !dbg !22
  %516 = fmul <2 x float> %512, %515, !dbg !53
  %517 = insertelement <2 x i32> poison, i32 %498, i64 0, !dbg !24
  %518 = insertelement <2 x i32> %517, i32 %502, i64 1, !dbg !24
  %519 = bitcast <2 x i32> %518 to <2 x float>, !dbg !24
  %520 = fadd <2 x float> %516, %519, !dbg !54
  %shift145 = shufflevector <2 x float> %520, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %521 = fadd <2 x float> %520, %shift145, !dbg !55
  %522 = extractelement <2 x float> %521, i64 0, !dbg !55
  %523 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !36
  %524 = bitcast i32 %523 to float, !dbg !36
  %525 = fsub float %522, %524, !dbg !56
  %526 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !16
  %527 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !18
  %528 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !22
  %529 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %530 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !26
  %531 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !28
  %532 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !32
  %533 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !34
  %534 = insertelement <2 x i32> poison, i32 %526, i64 0, !dbg !16
  %535 = insertelement <2 x i32> %534, i32 %530, i64 1, !dbg !16
  %536 = bitcast <2 x i32> %535 to <2 x float>, !dbg !16
  %537 = insertelement <2 x i32> poison, i32 %527, i64 0, !dbg !18
  %538 = insertelement <2 x i32> %537, i32 %531, i64 1, !dbg !18
  %539 = bitcast <2 x i32> %538 to <2 x float>, !dbg !18
  %540 = fsub <2 x float> %536, %539, !dbg !51
  %541 = insertelement <2 x float> poison, float %245, i64 0, !dbg !52
  %542 = insertelement <2 x float> %541, float %357, i64 1, !dbg !52
  %543 = fmul <2 x float> %540, %542, !dbg !52
  %544 = insertelement <2 x i32> poison, i32 %528, i64 0, !dbg !22
  %545 = insertelement <2 x i32> %544, i32 %532, i64 1, !dbg !22
  %546 = bitcast <2 x i32> %545 to <2 x float>, !dbg !22
  %547 = fmul <2 x float> %543, %546, !dbg !53
  %548 = insertelement <2 x i32> poison, i32 %529, i64 0, !dbg !24
  %549 = insertelement <2 x i32> %548, i32 %533, i64 1, !dbg !24
  %550 = bitcast <2 x i32> %549 to <2 x float>, !dbg !24
  %551 = fadd <2 x float> %547, %550, !dbg !54
  %shift146 = shufflevector <2 x float> %551, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %552 = fadd <2 x float> %551, %shift146, !dbg !55
  %553 = extractelement <2 x float> %552, i64 0, !dbg !55
  %554 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !36
  %555 = bitcast i32 %554 to float, !dbg !36
  %556 = fsub float %553, %555, !dbg !56
  %557 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !16
  %558 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !18
  %559 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !22
  %560 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %561 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !26
  %562 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !28
  %563 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !32
  %564 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !34
  %565 = insertelement <2 x i32> poison, i32 %557, i64 0, !dbg !16
  %566 = insertelement <2 x i32> %565, i32 %561, i64 1, !dbg !16
  %567 = bitcast <2 x i32> %566 to <2 x float>, !dbg !16
  %568 = insertelement <2 x i32> poison, i32 %558, i64 0, !dbg !18
  %569 = insertelement <2 x i32> %568, i32 %562, i64 1, !dbg !18
  %570 = bitcast <2 x i32> %569 to <2 x float>, !dbg !18
  %571 = fsub <2 x float> %567, %570, !dbg !51
  %572 = insertelement <2 x float> poison, float %244, i64 0, !dbg !52
  %573 = insertelement <2 x float> %572, float %356, i64 1, !dbg !52
  %574 = fmul <2 x float> %571, %573, !dbg !52
  %575 = insertelement <2 x i32> poison, i32 %559, i64 0, !dbg !22
  %576 = insertelement <2 x i32> %575, i32 %563, i64 1, !dbg !22
  %577 = bitcast <2 x i32> %576 to <2 x float>, !dbg !22
  %578 = fmul <2 x float> %574, %577, !dbg !53
  %579 = insertelement <2 x i32> poison, i32 %560, i64 0, !dbg !24
  %580 = insertelement <2 x i32> %579, i32 %564, i64 1, !dbg !24
  %581 = bitcast <2 x i32> %580 to <2 x float>, !dbg !24
  %582 = fadd <2 x float> %578, %581, !dbg !54
  %shift147 = shufflevector <2 x float> %582, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %583 = fadd <2 x float> %582, %shift147, !dbg !55
  %584 = extractelement <2 x float> %583, i64 0, !dbg !55
  %585 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !36
  %586 = bitcast i32 %585 to float, !dbg !36
  %587 = fsub float %584, %586, !dbg !56
  %588 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !16
  %589 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !18
  %590 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !22
  %591 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !24
  %592 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !26
  %593 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !28
  %594 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !32
  %595 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !34
  %596 = insertelement <2 x i32> poison, i32 %588, i64 0, !dbg !16
  %597 = insertelement <2 x i32> %596, i32 %592, i64 1, !dbg !16
  %598 = bitcast <2 x i32> %597 to <2 x float>, !dbg !16
  %599 = insertelement <2 x i32> poison, i32 %589, i64 0, !dbg !18
  %600 = insertelement <2 x i32> %599, i32 %593, i64 1, !dbg !18
  %601 = bitcast <2 x i32> %600 to <2 x float>, !dbg !18
  %602 = fsub <2 x float> %598, %601, !dbg !51
  %603 = insertelement <2 x float> poison, float %243, i64 0, !dbg !52
  %604 = insertelement <2 x float> %603, float %355, i64 1, !dbg !52
  %605 = fmul <2 x float> %602, %604, !dbg !52
  %606 = insertelement <2 x i32> poison, i32 %590, i64 0, !dbg !22
  %607 = insertelement <2 x i32> %606, i32 %594, i64 1, !dbg !22
  %608 = bitcast <2 x i32> %607 to <2 x float>, !dbg !22
  %609 = fmul <2 x float> %605, %608, !dbg !53
  %610 = insertelement <2 x i32> poison, i32 %591, i64 0, !dbg !24
  %611 = insertelement <2 x i32> %610, i32 %595, i64 1, !dbg !24
  %612 = bitcast <2 x i32> %611 to <2 x float>, !dbg !24
  %613 = fadd <2 x float> %609, %612, !dbg !54
  %shift148 = shufflevector <2 x float> %613, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %614 = fadd <2 x float> %613, %shift148, !dbg !55
  %615 = extractelement <2 x float> %614, i64 0, !dbg !55
  %616 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !36
  %617 = bitcast i32 %616 to float, !dbg !36
  %618 = fsub float %615, %617, !dbg !56
  %619 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !16
  %620 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !18
  %621 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !22
  %622 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !24
  %623 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !26
  %624 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !28
  %625 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !32
  %626 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !34
  %627 = insertelement <2 x i32> poison, i32 %619, i64 0, !dbg !16
  %628 = insertelement <2 x i32> %627, i32 %623, i64 1, !dbg !16
  %629 = bitcast <2 x i32> %628 to <2 x float>, !dbg !16
  %630 = insertelement <2 x i32> poison, i32 %620, i64 0, !dbg !18
  %631 = insertelement <2 x i32> %630, i32 %624, i64 1, !dbg !18
  %632 = bitcast <2 x i32> %631 to <2 x float>, !dbg !18
  %633 = fsub <2 x float> %629, %632, !dbg !51
  %634 = insertelement <2 x float> poison, float %242, i64 0, !dbg !52
  %635 = insertelement <2 x float> %634, float %354, i64 1, !dbg !52
  %636 = fmul <2 x float> %633, %635, !dbg !52
  %637 = insertelement <2 x i32> poison, i32 %621, i64 0, !dbg !22
  %638 = insertelement <2 x i32> %637, i32 %625, i64 1, !dbg !22
  %639 = bitcast <2 x i32> %638 to <2 x float>, !dbg !22
  %640 = fmul <2 x float> %636, %639, !dbg !53
  %641 = insertelement <2 x i32> poison, i32 %622, i64 0, !dbg !24
  %642 = insertelement <2 x i32> %641, i32 %626, i64 1, !dbg !24
  %643 = bitcast <2 x i32> %642 to <2 x float>, !dbg !24
  %644 = fadd <2 x float> %640, %643, !dbg !54
  %shift149 = shufflevector <2 x float> %644, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %645 = fadd <2 x float> %644, %shift149, !dbg !55
  %646 = extractelement <2 x float> %645, i64 0, !dbg !55
  %647 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !36
  %648 = bitcast i32 %647 to float, !dbg !36
  %649 = fsub float %646, %648, !dbg !56
  %650 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !16
  %651 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !18
  %652 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !22
  %653 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !24
  %654 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !26
  %655 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !28
  %656 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !32
  %657 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !34
  %658 = insertelement <2 x i32> poison, i32 %650, i64 0, !dbg !16
  %659 = insertelement <2 x i32> %658, i32 %654, i64 1, !dbg !16
  %660 = bitcast <2 x i32> %659 to <2 x float>, !dbg !16
  %661 = insertelement <2 x i32> poison, i32 %651, i64 0, !dbg !18
  %662 = insertelement <2 x i32> %661, i32 %655, i64 1, !dbg !18
  %663 = bitcast <2 x i32> %662 to <2 x float>, !dbg !18
  %664 = fsub <2 x float> %660, %663, !dbg !51
  %665 = insertelement <2 x float> poison, float %241, i64 0, !dbg !52
  %666 = insertelement <2 x float> %665, float %353, i64 1, !dbg !52
  %667 = fmul <2 x float> %664, %666, !dbg !52
  %668 = insertelement <2 x i32> poison, i32 %652, i64 0, !dbg !22
  %669 = insertelement <2 x i32> %668, i32 %656, i64 1, !dbg !22
  %670 = bitcast <2 x i32> %669 to <2 x float>, !dbg !22
  %671 = fmul <2 x float> %667, %670, !dbg !53
  %672 = insertelement <2 x i32> poison, i32 %653, i64 0, !dbg !24
  %673 = insertelement <2 x i32> %672, i32 %657, i64 1, !dbg !24
  %674 = bitcast <2 x i32> %673 to <2 x float>, !dbg !24
  %675 = fadd <2 x float> %671, %674, !dbg !54
  %shift150 = shufflevector <2 x float> %675, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %676 = fadd <2 x float> %675, %shift150, !dbg !55
  %677 = extractelement <2 x float> %676, i64 0, !dbg !55
  %678 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !36
  %679 = bitcast i32 %678 to float, !dbg !36
  %680 = fsub float %677, %679, !dbg !56
  %681 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !16
  %682 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !18
  %683 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !22
  %684 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !24
  %685 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !26
  %686 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !28
  %687 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !32
  %688 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !34
  %689 = insertelement <2 x i32> poison, i32 %681, i64 0, !dbg !16
  %690 = insertelement <2 x i32> %689, i32 %685, i64 1, !dbg !16
  %691 = bitcast <2 x i32> %690 to <2 x float>, !dbg !16
  %692 = insertelement <2 x i32> poison, i32 %682, i64 0, !dbg !18
  %693 = insertelement <2 x i32> %692, i32 %686, i64 1, !dbg !18
  %694 = bitcast <2 x i32> %693 to <2 x float>, !dbg !18
  %695 = fsub <2 x float> %691, %694, !dbg !51
  %696 = insertelement <2 x float> poison, float %240, i64 0, !dbg !52
  %697 = insertelement <2 x float> %696, float %352, i64 1, !dbg !52
  %698 = fmul <2 x float> %695, %697, !dbg !52
  %699 = insertelement <2 x i32> poison, i32 %683, i64 0, !dbg !22
  %700 = insertelement <2 x i32> %699, i32 %687, i64 1, !dbg !22
  %701 = bitcast <2 x i32> %700 to <2 x float>, !dbg !22
  %702 = fmul <2 x float> %698, %701, !dbg !53
  %703 = insertelement <2 x i32> poison, i32 %684, i64 0, !dbg !24
  %704 = insertelement <2 x i32> %703, i32 %688, i64 1, !dbg !24
  %705 = bitcast <2 x i32> %704 to <2 x float>, !dbg !24
  %706 = fadd <2 x float> %702, %705, !dbg !54
  %shift151 = shufflevector <2 x float> %706, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !55
  %707 = fadd <2 x float> %706, %shift151, !dbg !55
  %708 = extractelement <2 x float> %707, i64 0, !dbg !55
  %709 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !36
  %710 = bitcast i32 %709 to float, !dbg !36
  %711 = fsub float %708, %710, !dbg !56
  %712 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !42
  %713 = bitcast i32 %712 to float, !dbg !42
  %714 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !42
  %715 = bitcast i32 %714 to float, !dbg !42
  %716 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !42
  %717 = bitcast i32 %716 to float, !dbg !42
  %718 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !42
  %719 = bitcast i32 %718 to float, !dbg !42
  %720 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !42
  %721 = bitcast i32 %720 to float, !dbg !42
  %722 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !42
  %723 = bitcast i32 %722 to float, !dbg !42
  %724 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !42
  %725 = bitcast i32 %724 to float, !dbg !42
  %726 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !42
  %727 = bitcast i32 %726 to float, !dbg !42
  %728 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !40
  %729 = bitcast i32 %728 to float, !dbg !40
  %730 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !40
  %731 = bitcast i32 %730 to float, !dbg !40
  %732 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !40
  %733 = bitcast i32 %732 to float, !dbg !40
  %734 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !40
  %735 = bitcast i32 %734 to float, !dbg !40
  %736 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !40
  %737 = bitcast i32 %736 to float, !dbg !40
  %738 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !40
  %739 = bitcast i32 %738 to float, !dbg !40
  %740 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !40
  %741 = bitcast i32 %740 to float, !dbg !40
  %742 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !40
  %743 = bitcast i32 %742 to float, !dbg !40
  %744 = shl i32 %21, 2, !dbg !12
  %745 = and i32 %744, 508, !dbg !12
  %746 = or disjoint i32 %745, 512, !dbg !12
  %747 = or disjoint i32 %20, %746, !dbg !13
  %748 = or disjoint i32 %20, %745, !dbg !13
  %749 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i107) #4, !dbg !57
  %750 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i112) #4, !dbg !57
  %751 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i117) #4, !dbg !57
  %752 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i122) #4, !dbg !57
  %753 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i127) #4, !dbg !57
  %754 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i132) #4, !dbg !57
  %755 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i137) #4, !dbg !57
  %756 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i142) #4, !dbg !57
  %757 = fmul float %711, %749, !dbg !58
  %758 = fmul float %680, %750, !dbg !58
  %759 = fmul float %649, %751, !dbg !58
  %760 = fmul float %618, %752, !dbg !58
  %761 = fmul float %587, %753, !dbg !58
  %762 = fmul float %556, %754, !dbg !58
  %763 = fmul float %525, %755, !dbg !58
  %764 = fmul float %494, %756, !dbg !58
  %765 = fmul float %757, %743, !dbg !59
  %766 = fmul float %758, %741, !dbg !59
  %767 = fmul float %759, %739, !dbg !59
  %768 = fmul float %760, %737, !dbg !59
  %769 = fmul float %761, %735, !dbg !59
  %770 = fmul float %762, %733, !dbg !59
  %771 = fmul float %763, %731, !dbg !59
  %772 = fmul float %764, %729, !dbg !59
  %773 = fadd float %765, %727, !dbg !60
  %774 = fadd float %766, %725, !dbg !60
  %775 = fadd float %767, %723, !dbg !60
  %776 = fadd float %768, %721, !dbg !60
  %777 = fadd float %769, %719, !dbg !60
  %778 = fadd float %770, %717, !dbg !60
  %779 = fadd float %771, %715, !dbg !60
  %780 = fadd float %772, %713, !dbg !60
  %781 = sext i32 %748 to i64, !dbg !61
  %782 = getelementptr float, ptr addrspace(1) %14, i64 %781, !dbg !61
  %783 = sext i32 %747 to i64, !dbg !61
  %784 = getelementptr float, ptr addrspace(1) %14, i64 %783, !dbg !61
  %785 = zext nneg i32 %23 to i64, !dbg !62
  %786 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %785, !dbg !62
  %787 = bitcast float %708 to i32, !dbg !62
  %788 = bitcast float %677 to i32, !dbg !62
  %789 = bitcast float %646 to i32, !dbg !62
  %790 = bitcast float %615 to i32, !dbg !62
  %791 = bitcast float %584 to i32, !dbg !62
  %792 = bitcast float %553 to i32, !dbg !62
  %793 = bitcast float %522 to i32, !dbg !62
  %794 = bitcast float %491 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %786, i32 %787, i32 %788, i32 %789, i32 %790, i1 true) #4, !dbg !62
  %795 = getelementptr inbounds i8, ptr addrspace(3) %786, i64 16, !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %795, i32 %791, i32 %792, i32 %793, i32 %794, i1 true) #4, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %796 = zext nneg i32 %745 to i64, !dbg !62
  %797 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %796, !dbg !62
  %798 = zext nneg i32 %746 to i64, !dbg !62
  %799 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %798, !dbg !62
  %800 = load <4 x i32>, ptr addrspace(3) %799, align 16, !dbg !62
  %.extract = load i32, ptr addrspace(3) %797, align 16, !dbg !62
  %801 = getelementptr inbounds i8, ptr addrspace(3) %797, i64 4, !dbg !62
  %.extract8 = load i32, ptr addrspace(3) %801, align 4, !dbg !62
  %802 = getelementptr inbounds i8, ptr addrspace(3) %797, i64 8, !dbg !62
  %.extract9 = load i32, ptr addrspace(3) %802, align 8, !dbg !62
  %803 = getelementptr inbounds i8, ptr addrspace(3) %797, i64 12, !dbg !62
  %.extract10 = load i32, ptr addrspace(3) %803, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %782, i1 true) #4, !dbg !62
  %.extract11 = extractelement <4 x i32> %800, i64 0, !dbg !62
  %.extract12 = extractelement <4 x i32> %800, i64 1, !dbg !62
  %.extract13 = extractelement <4 x i32> %800, i64 2, !dbg !62
  %.extract14 = extractelement <4 x i32> %800, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %784, i1 true) #4, !dbg !62
  %804 = getelementptr i8, ptr addrspace(1) %15, i64 %28, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 0, i32 0, ptr addrspace(1) %804, i1 true) #4, !dbg !64
  %805 = getelementptr float, ptr addrspace(1) %16, i64 %781, !dbg !65
  %806 = getelementptr float, ptr addrspace(1) %16, i64 %783, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %807 = bitcast float %773 to i32, !dbg !66
  %808 = bitcast float %774 to i32, !dbg !66
  %809 = bitcast float %775 to i32, !dbg !66
  %810 = bitcast float %776 to i32, !dbg !66
  %811 = bitcast float %777 to i32, !dbg !66
  %812 = bitcast float %778 to i32, !dbg !66
  %813 = bitcast float %779 to i32, !dbg !66
  %814 = bitcast float %780 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %786, i32 %807, i32 %808, i32 %809, i32 %810, i1 true) #4, !dbg !66
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %795, i32 %811, i32 %812, i32 %813, i32 %814, i1 true) #4, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %815 = load <4 x i32>, ptr addrspace(3) %799, align 16, !dbg !66
  %.extract22 = load i32, ptr addrspace(3) %797, align 16, !dbg !66
  %.extract23 = load i32, ptr addrspace(3) %801, align 4, !dbg !66
  %.extract24 = load i32, ptr addrspace(3) %802, align 8, !dbg !66
  %.extract25 = load i32, ptr addrspace(3) %803, align 4, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %805, i1 true) #4, !dbg !66
  %.extract26 = extractelement <4 x i32> %815, i64 0, !dbg !66
  %.extract27 = extractelement <4 x i32> %815, i64 1, !dbg !66
  %.extract28 = extractelement <4 x i32> %815, i64 2, !dbg !66
  %.extract29 = extractelement <4 x i32> %815, i64 3, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %806, i1 true) #4, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cda2pygzuitexff7corgoqbsr7m76ivcmume4ko7i4yghklwnihe.py", directory: "inductor_cache/da")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 38, column: 32, scope: !7)
!40 = !DILocation(line: 38, column: 37, scope: !7)
!41 = !DILocation(line: 39, column: 32, scope: !7)
!42 = !DILocation(line: 39, column: 37, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 26, scope: !7)
!45 = !DILocation(line: 45, column: 18, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 53, column: 27, scope: !7)
!48 = !DILocation(line: 54, column: 19, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 27, scope: !7)
!51 = !DILocation(line: 40, column: 18, scope: !7)
!52 = !DILocation(line: 48, column: 19, scope: !7)
!53 = !DILocation(line: 49, column: 20, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 19, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 69, column: 25, scope: !7)
!62 = !DILocation(line: 69, column: 37, scope: !7)
!63 = !DILocation(line: 70, column: 25, scope: !7)
!64 = !DILocation(line: 70, column: 37, scope: !7)
!65 = !DILocation(line: 71, column: 25, scope: !7)
!66 = !DILocation(line: 71, column: 37, scope: !7)
!67 = !DILocation(line: 71, column: 4, scope: !7)
