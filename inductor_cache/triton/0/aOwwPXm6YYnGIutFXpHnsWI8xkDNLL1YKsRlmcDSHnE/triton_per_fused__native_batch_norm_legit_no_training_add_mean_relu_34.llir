; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 2048, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = srem i32 %11, 512, !dbg !13
  %16 = shl i32 %11, 6, !dbg !14
  %17 = or disjoint i32 %16, %14, !dbg !15
  %18 = sext i32 %17 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %12, i32 0, i1 %12) #5, !dbg !17
  %21 = sext i32 %15 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #5, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #5, !dbg !21
  %26 = bitcast i32 %25 to float, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %12) #5, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %12) #5, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %12, i32 0, i1 %12) #5, !dbg !27
  %33 = fadd float %26, 0x3EE4F8B580000000, !dbg !28
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i = icmp eq i32 %34, 0, !dbg !29
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i = icmp eq i32 %35, 0, !dbg !29
  br i1 %.not.i, label %41, label %36, !dbg !29

36:                                               ; preds = %10
  br i1 %.not1.i, label %39, label %37, !dbg !29

37:                                               ; preds = %36
  %38 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %33) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

39:                                               ; preds = %36
  %40 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %33) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

41:                                               ; preds = %10
  br i1 %.not1.i, label %44, label %42, !dbg !29

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.f(float %33) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.f(float %33) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %37, %39, %42, %44
  %.0.i = phi float [ %38, %37 ], [ %40, %39 ], [ %43, %42 ], [ %45, %44 ], !dbg !29
  %46 = bitcast i32 %20 to float, !dbg !17
  %47 = bitcast i32 %23 to float, !dbg !19
  %48 = fsub float %46, %47, !dbg !30
  %49 = bitcast i32 %32 to float, !dbg !27
  %50 = bitcast i32 %30 to float, !dbg !25
  %51 = bitcast i32 %28 to float, !dbg !23
  %52 = lshr i32 %13, 5, !dbg !12
  %53 = and i32 %13, 31, !dbg !12
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !31
  %55 = fmul float %48, %54, !dbg !32
  %56 = fmul float %55, %51, !dbg !33
  %57 = fadd float %56, %50, !dbg !34
  %58 = fadd float %57, %49, !dbg !35
  %59 = fcmp olt float %58, 0.000000e+00, !dbg !36
  %60 = select i1 %59, float 0.000000e+00, float %58, !dbg !40
  %61 = select i1 %12, float %60, float 0.000000e+00, !dbg !41
  %62 = bitcast float %61 to i32, !dbg !42
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 16, i32 31), !dbg !42
  %64 = bitcast i32 %63 to float, !dbg !42
  %65 = fadd float %61, %64, !dbg !46
  %66 = bitcast float %65 to i32, !dbg !42
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 8, i32 31), !dbg !42
  %68 = bitcast i32 %67 to float, !dbg !42
  %69 = fadd float %65, %68, !dbg !46
  %70 = bitcast float %69 to i32, !dbg !42
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !42
  %72 = bitcast i32 %71 to float, !dbg !42
  %73 = fadd float %69, %72, !dbg !46
  %74 = bitcast float %73 to i32, !dbg !42
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !42
  %76 = bitcast i32 %75 to float, !dbg !42
  %77 = fadd float %73, %76, !dbg !46
  %78 = bitcast float %77 to i32, !dbg !42
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !42
  %80 = bitcast i32 %79 to float, !dbg !42
  %81 = fadd float %77, %80, !dbg !46
  %82 = icmp eq i32 %53, 0, !dbg !42
  %83 = and i32 %52, 1, !dbg !42
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !42
  %85 = bitcast float %81 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 %82) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %86 = icmp slt i32 %13, 2, !dbg !42
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !42
  %88 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %87, i1 %86) #5, !dbg !42
  %89 = bitcast i32 %88 to float, !dbg !42
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !42
  %91 = bitcast i32 %90 to float, !dbg !42
  %92 = fadd float %89, %91, !dbg !46
  %93 = and i32 %13, 1, !dbg !42
  %94 = icmp eq i32 %93, 0, !dbg !42
  %95 = and i1 %86, %94, !dbg !42
  %96 = bitcast float %92 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %96, i1 %95) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %97 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 6.400000e+01) #5, !dbg !48
  %99 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !49
  %100 = bitcast float %60 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %100, ptr addrspace(1) %99, i1 %12) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %101 = sext i32 %11 to i64, !dbg !52
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !52
  %103 = icmp eq i32 %14, 0, !dbg !53
  %104 = bitcast float %98 to i32, !dbg !53
  %105 = and i1 %103, %12, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %102, i1 %105) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py", directory: "inductor_cache/7p")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 44, scope: !7)
!28 = !DILocation(line: 40, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 43, column: 18, scope: !7)
!32 = !DILocation(line: 46, column: 19, scope: !7)
!33 = !DILocation(line: 47, column: 20, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 49, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 51, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 53, column: 35, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 54, column: 26, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 25, scope: !7)
!50 = !DILocation(line: 57, column: 45, scope: !7)
!51 = !DILocation(line: 58, column: 4, scope: !7)
!52 = !DILocation(line: 59, column: 28, scope: !7)
!53 = !DILocation(line: 59, column: 40, scope: !7)
!54 = !DILocation(line: 59, column: 4, scope: !7)
