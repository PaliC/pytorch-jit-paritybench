#loc = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":19:0)
#loc1 = loc(unknown)
#loc34 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":54:26)
#loc47 = loc(callsite(#loc1 at #loc34))
module {
  tt.func public @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":19:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %cst = arith.constant dense<1.000000e+00> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<6.400000e+01> : tensor<1x1xf32> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x64xf32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c2048_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc5)
    %5 = arith.remsi %0, %c512_i32 : i32 loc(#loc6)
    %6 = arith.muli %0, %c64_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<1x64xi32> loc(#loc8)
    %8 = arith.addi %4, %7 : tensor<1x64xi32> loc(#loc8)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc9)
    %10 = tt.addptr %9, %8 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc9)
    %11 = tt.splat %1 : i1 -> tensor<1x64xi1> loc(#loc10)
    %12 = tt.load %10, %11, %cst_2 : tensor<1x64x!tt.ptr<f32>> loc(#loc10)
    %13 = tt.addptr %arg2, %5 : !tt.ptr<f32>, i32 loc(#loc11)
    %14 = tt.splat %13 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc11)
    %15 = tt.load %14, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc12)
    %16 = tt.addptr %arg3, %5 : !tt.ptr<f32>, i32 loc(#loc13)
    %17 = tt.splat %16 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc13)
    %18 = tt.load %17, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc14)
    %19 = tt.addptr %arg4, %5 : !tt.ptr<f32>, i32 loc(#loc15)
    %20 = tt.splat %19 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc15)
    %21 = tt.load %20, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc16)
    %22 = tt.addptr %arg5, %5 : !tt.ptr<f32>, i32 loc(#loc17)
    %23 = tt.splat %22 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc17)
    %24 = tt.load %23, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc18)
    %25 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc19)
    %26 = tt.addptr %25, %8 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc19)
    %27 = tt.load %26, %11, %cst_2 : tensor<1x64x!tt.ptr<f32>> loc(#loc20)
    %28 = tt.broadcast %15 : tensor<1x1xf32> -> tensor<1x64xf32> loc(#loc21)
    %29 = arith.subf %12, %28 : tensor<1x64xf32> loc(#loc21)
    %30 = arith.addf %18, %cst_1 : tensor<1x1xf32> loc(#loc22)
    %31 = tt.extern_elementwise %30 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc23)
    %32 = arith.divf %cst, %31 : tensor<1x1xf32> loc(#loc24)
    %33 = tt.broadcast %32 : tensor<1x1xf32> -> tensor<1x64xf32> loc(#loc25)
    %34 = arith.mulf %29, %33 : tensor<1x64xf32> loc(#loc25)
    %35 = tt.broadcast %21 : tensor<1x1xf32> -> tensor<1x64xf32> loc(#loc26)
    %36 = arith.mulf %34, %35 : tensor<1x64xf32> loc(#loc26)
    %37 = tt.broadcast %24 : tensor<1x1xf32> -> tensor<1x64xf32> loc(#loc27)
    %38 = arith.addf %36, %37 : tensor<1x64xf32> loc(#loc27)
    %39 = arith.addf %38, %27 : tensor<1x64xf32> loc(#loc28)
    %40 = arith.cmpf ogt, %cst_2, %39 : tensor<1x64xf32> loc(#loc44)
    %41 = arith.select %40, %cst_2, %39 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc45)
    %42 = arith.select %11, %41, %cst_2 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc32)
    %43 = "tt.reduce"(%42) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc34)), %arg11: f32 loc(callsite(#loc1 at #loc34))):
      %50 = arith.addf %arg10, %arg11 : f32 loc(#loc49)
      tt.reduce.return %50 : f32 loc(#loc46)
    }) : (tensor<1x64xf32>) -> tensor<1xf32> loc(#loc46)
    %44 = tt.expand_dims %43 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc36)
    %45 = arith.divf %44, %cst_0 : tensor<1x1xf32> loc(#loc37)
    %46 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc38)
    %47 = tt.addptr %46, %8 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc38)
    tt.store %47, %41, %11 : tensor<1x64x!tt.ptr<f32>> loc(#loc39)
    gpu.barrier loc(#loc40)
    %48 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc41)
    %49 = tt.splat %48 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc41)
    tt.store %49, %45, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":23:28)
#loc3 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":25:21)
#loc4 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":26:26)
#loc5 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":26:34)
#loc6 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":31:19)
#loc7 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":32:38)
#loc8 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":32:35)
#loc9 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":32:30)
#loc10 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":32:43)
#loc11 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":33:30)
#loc12 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":33:35)
#loc13 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":34:30)
#loc14 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":34:35)
#loc15 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":35:31)
#loc16 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":35:36)
#loc17 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":36:31)
#loc18 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":36:36)
#loc19 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":37:31)
#loc20 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":37:44)
#loc21 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":38:18)
#loc22 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":40:18)
#loc23 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":41:26)
#loc24 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":43:18)
#loc25 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":46:19)
#loc26 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":47:20)
#loc27 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":48:20)
#loc28 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":49:20)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc30 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":51:42)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc32 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":53:35)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc36 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":54:29)
#loc37 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":56:20)
#loc38 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":57:25)
#loc39 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":57:45)
#loc40 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":58:4)
#loc41 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":59:28)
#loc42 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":59:40)
#loc43 = loc("inductor_cache/7p/c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py":59:4)
#loc44 = loc(callsite(#loc29 at #loc30))
#loc45 = loc(callsite(#loc31 at #loc30))
#loc46 = loc(callsite(#loc33 at #loc34))
#loc48 = loc(callsite(#loc35 at #loc33))
#loc49 = loc(callsite(#loc48 at #loc34))
