; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, i32 %18) local_unnamed_addr !dbg !7 {
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %21 = shl i32 %20, 9, !dbg !11
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %23 = shl i32 %22, 1, !dbg !12
  %24 = and i32 %23, 510, !dbg !12
  %25 = or disjoint i32 %21, %24, !dbg !13
  %26 = sext i32 %25 to i64, !dbg !14
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !14
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !15
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !15
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !15
  %31 = bitcast i32 %29 to float, !dbg !15
  %32 = bitcast i32 %30 to float, !dbg !15
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !16
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !17
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !17
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !17
  %37 = bitcast i32 %35 to float, !dbg !17
  %38 = bitcast i32 %36 to float, !dbg !17
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !18
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !19
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !19
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !19
  %43 = bitcast i32 %41 to float, !dbg !19
  %44 = bitcast i32 %42 to float, !dbg !19
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !20
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !21
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !21
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !21
  %49 = bitcast i32 %47 to float, !dbg !21
  %50 = bitcast i32 %48 to float, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !22
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !23
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !23
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !23
  %55 = bitcast i32 %53 to float, !dbg !23
  %56 = bitcast i32 %54 to float, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !24
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !25
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !25
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !25
  %61 = bitcast i32 %59 to float, !dbg !25
  %62 = bitcast i32 %60 to float, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !27
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !27
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !27
  %67 = bitcast i32 %65 to float, !dbg !27
  %68 = bitcast i32 %66 to float, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !28
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !29
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !29
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !29
  %73 = bitcast i32 %71 to float, !dbg !29
  %74 = bitcast i32 %72 to float, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !30
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !31
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !31
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !31
  %79 = bitcast i32 %77 to float, !dbg !31
  %80 = bitcast i32 %78 to float, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !32
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !33
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !33
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !33
  %85 = bitcast i32 %83 to float, !dbg !33
  %86 = bitcast i32 %84 to float, !dbg !33
  %87 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !34
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !35
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !35
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !35
  %91 = bitcast i32 %89 to float, !dbg !35
  %92 = bitcast i32 %90 to float, !dbg !35
  %93 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !36
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !37
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !37
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !37
  %97 = bitcast i32 %95 to float, !dbg !37
  %98 = bitcast i32 %96 to float, !dbg !37
  %99 = getelementptr float, ptr addrspace(1) %12, i64 %26, !dbg !38
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !39
  %101 = extractvalue { i32, i32 } %100, 0, !dbg !39
  %102 = extractvalue { i32, i32 } %100, 1, !dbg !39
  %103 = bitcast i32 %101 to float, !dbg !39
  %104 = bitcast i32 %102 to float, !dbg !39
  %105 = getelementptr float, ptr addrspace(1) %13, i64 %26, !dbg !40
  %106 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !41
  %107 = extractvalue { i32, i32 } %106, 0, !dbg !41
  %108 = extractvalue { i32, i32 } %106, 1, !dbg !41
  %109 = bitcast i32 %107 to float, !dbg !41
  %110 = bitcast i32 %108 to float, !dbg !41
  %111 = getelementptr float, ptr addrspace(1) %14, i64 %26, !dbg !42
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !43
  %113 = extractvalue { i32, i32 } %112, 0, !dbg !43
  %114 = extractvalue { i32, i32 } %112, 1, !dbg !43
  %115 = bitcast i32 %113 to float, !dbg !43
  %116 = bitcast i32 %114 to float, !dbg !43
  %117 = getelementptr float, ptr addrspace(1) %15, i64 %26, !dbg !44
  %118 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !45
  %119 = extractvalue { i32, i32 } %118, 0, !dbg !45
  %120 = extractvalue { i32, i32 } %118, 1, !dbg !45
  %121 = bitcast i32 %119 to float, !dbg !45
  %122 = bitcast i32 %120 to float, !dbg !45
  %123 = getelementptr float, ptr addrspace(1) %16, i64 %26, !dbg !46
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !47
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !47
  %126 = extractvalue { i32, i32 } %124, 1, !dbg !47
  %127 = bitcast i32 %125 to float, !dbg !47
  %128 = bitcast i32 %126 to float, !dbg !47
  %129 = getelementptr float, ptr addrspace(1) %17, i64 %26, !dbg !48
  %130 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !49
  %131 = extractvalue { i32, i32 } %130, 0, !dbg !49
  %132 = extractvalue { i32, i32 } %130, 1, !dbg !49
  %133 = bitcast i32 %131 to float, !dbg !49
  %134 = bitcast i32 %132 to float, !dbg !49
  %135 = fadd float %31, %37, !dbg !50
  %136 = fadd float %32, %38, !dbg !50
  %137 = fadd float %135, %43, !dbg !51
  %138 = fadd float %136, %44, !dbg !51
  %139 = fadd float %137, %49, !dbg !52
  %140 = fadd float %138, %50, !dbg !52
  %141 = fadd float %139, %55, !dbg !53
  %142 = fadd float %140, %56, !dbg !53
  %143 = fadd float %141, %61, !dbg !54
  %144 = fadd float %142, %62, !dbg !54
  %145 = fadd float %143, %67, !dbg !55
  %146 = fadd float %144, %68, !dbg !55
  %147 = fadd float %145, %73, !dbg !56
  %148 = fadd float %146, %74, !dbg !56
  %149 = fadd float %147, %79, !dbg !57
  %150 = fadd float %148, %80, !dbg !57
  %151 = fadd float %149, %85, !dbg !58
  %152 = fadd float %150, %86, !dbg !58
  %153 = fadd float %151, %91, !dbg !59
  %154 = fadd float %152, %92, !dbg !59
  %155 = fadd float %153, %97, !dbg !60
  %156 = fadd float %154, %98, !dbg !60
  %157 = fadd float %155, %103, !dbg !61
  %158 = fadd float %156, %104, !dbg !61
  %159 = fadd float %157, %109, !dbg !62
  %160 = fadd float %158, %110, !dbg !62
  %161 = fadd float %159, %115, !dbg !63
  %162 = fadd float %160, %116, !dbg !63
  %163 = fadd float %161, %121, !dbg !64
  %164 = fadd float %162, %122, !dbg !64
  %165 = fadd float %163, %127, !dbg !65
  %166 = fadd float %164, %128, !dbg !65
  %167 = fadd float %165, %133, !dbg !66
  %168 = fadd float %166, %134, !dbg !66
  %169 = fcmp olt float %167, 0.000000e+00, !dbg !67
  %170 = fcmp olt float %168, 0.000000e+00, !dbg !67
  %171 = select i1 %169, float 0.000000e+00, float %167, !dbg !71
  %172 = select i1 %170, float 0.000000e+00, float %168, !dbg !71
  %173 = bitcast float %171 to i32, !dbg !72
  %174 = bitcast float %172 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %33, i1 true) #1, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu5ircb6ayensnljaf5jfrcah4ydlth5ia5hq6htsux5gflj55yf.py", directory: "inductor_cache/u5")
!4 = !{ptr @triton_poi_fused_add_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_relu_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_relu_3", linkageName: "triton_poi_fused_add_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 30, scope: !7)
!15 = !DILocation(line: 25, column: 35, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 41, column: 32, scope: !7)
!47 = !DILocation(line: 41, column: 37, scope: !7)
!48 = !DILocation(line: 42, column: 32, scope: !7)
!49 = !DILocation(line: 42, column: 37, scope: !7)
!50 = !DILocation(line: 43, column: 18, scope: !7)
!51 = !DILocation(line: 44, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 18, scope: !7)
!53 = !DILocation(line: 46, column: 18, scope: !7)
!54 = !DILocation(line: 47, column: 19, scope: !7)
!55 = !DILocation(line: 48, column: 20, scope: !7)
!56 = !DILocation(line: 49, column: 20, scope: !7)
!57 = !DILocation(line: 50, column: 20, scope: !7)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 52, column: 20, scope: !7)
!60 = !DILocation(line: 53, column: 20, scope: !7)
!61 = !DILocation(line: 54, column: 20, scope: !7)
!62 = !DILocation(line: 55, column: 20, scope: !7)
!63 = !DILocation(line: 56, column: 20, scope: !7)
!64 = !DILocation(line: 57, column: 20, scope: !7)
!65 = !DILocation(line: 58, column: 20, scope: !7)
!66 = !DILocation(line: 59, column: 20, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!70 = !DILocation(line: 61, column: 42, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !70)
!72 = !DILocation(line: 62, column: 40, scope: !7)
!73 = !DILocation(line: 62, column: 4, scope: !7)
