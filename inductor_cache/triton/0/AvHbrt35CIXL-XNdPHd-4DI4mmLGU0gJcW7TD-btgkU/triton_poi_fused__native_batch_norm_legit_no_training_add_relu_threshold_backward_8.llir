; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 4, !dbg !12
  %16 = and i32 %15, 240, !dbg !12
  %17 = lshr i32 %14, 2, !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = shl i32 %14, 2, !dbg !12
  %20 = and i32 %19, 12, !dbg !12
  %21 = and i32 %14, 255, !dbg !12
  %22 = or disjoint i32 %13, %16, !dbg !13
  %23 = or disjoint i32 %22, 4, !dbg !13
  %24 = or disjoint i32 %22, 8, !dbg !13
  %25 = or disjoint i32 %22, 12, !dbg !13
  %26 = or disjoint i32 %13, %18, !dbg !13
  %27 = or disjoint i32 %26, 64, !dbg !13
  %28 = or disjoint i32 %26, 128, !dbg !13
  %29 = or disjoint i32 %26, 192, !dbg !13
  %30 = or disjoint i32 %13, %21, !dbg !13
  %31 = icmp slt i32 %22, 512, !dbg !14
  %32 = icmp slt i32 %26, 512, !dbg !14
  %33 = icmp slt i32 %27, 512, !dbg !14
  %34 = icmp slt i32 %28, 512, !dbg !14
  %35 = icmp slt i32 %29, 512, !dbg !14
  %36 = icmp slt i32 %30, 512, !dbg !14
  %37 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %38 = shl i32 %37, 4, !dbg !16
  %39 = lshr i32 %14, 4, !dbg !17
  %40 = and i32 %39, 15, !dbg !17
  %41 = or disjoint i32 %38, %40, !dbg !18
  %42 = or disjoint i32 %38, %20, !dbg !18
  %43 = icmp slt i32 %41, 16, !dbg !19
  %44 = icmp slt i32 %42, 16, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %45 = sdiv i32 %.frozen, 128, !dbg !20
  %46 = mul i32 %45, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %46, !dbg !21
  %47 = srem i32 %23, 128, !dbg !21
  %48 = srem i32 %24, 128, !dbg !21
  %49 = srem i32 %25, 128, !dbg !21
  %50 = srem i32 %30, 128, !dbg !21
  %51 = shl i32 %41, 7, !dbg !22
  %52 = shl i32 %45, 11, !dbg !23
  %53 = add i32 %52, %51, !dbg !24
  %54 = add i32 %53, %.decomposed, !dbg !25
  %55 = add i32 %53, %47, !dbg !25
  %56 = add i32 %53, %48, !dbg !25
  %57 = add i32 %53, %49, !dbg !25
  %58 = sext i32 %54 to i64, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !26
  %60 = sext i32 %55 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !26
  %62 = sext i32 %56 to i64, !dbg !26
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !26
  %64 = sext i32 %57 to i64, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !26
  %66 = and i1 %31, %43, !dbg !27
  %67 = and i1 %32, %44, !dbg !27
  %68 = and i1 %33, %44, !dbg !27
  %69 = and i1 %34, %44, !dbg !27
  %70 = and i1 %35, %44, !dbg !27
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %66) #4, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %66) #4, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !28
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %66) #4, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !28
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %66) #4, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !28
  %91 = and i32 %15, 4080, !dbg !28
  %92 = and i32 %14, 240, !dbg !28
  %93 = add nuw nsw i32 %91, %92, !dbg !28
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %93, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %94, i32 %72, i32 %73, i32 %74, i32 %75, i1 true) #4, !dbg !28
  %95 = getelementptr inbounds i8, ptr addrspace(3) %94, i32 16, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %95, i32 %77, i32 %78, i32 %79, i32 %80, i1 true) #4, !dbg !28
  %96 = getelementptr inbounds i8, ptr addrspace(3) %94, i32 32, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %96, i32 %82, i32 %83, i32 %84, i32 %85, i1 true) #4, !dbg !28
  %97 = getelementptr inbounds i8, ptr addrspace(3) %94, i32 48, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %97, i32 %87, i32 %88, i32 %89, i32 %90, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !28
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !28
  %100 = add nuw nsw i32 %21, 272, !dbg !28
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !28
  %102 = load float, ptr addrspace(3) %101, align 4, !dbg !28
  %103 = add nuw nsw i32 %21, 544, !dbg !28
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !28
  %105 = load float, ptr addrspace(3) %104, align 4, !dbg !28
  %106 = add nuw nsw i32 %21, 816, !dbg !28
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %106, !dbg !28
  %108 = load float, ptr addrspace(3) %107, align 4, !dbg !28
  %109 = add nuw nsw i32 %21, 1088, !dbg !28
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !28
  %111 = load float, ptr addrspace(3) %110, align 4, !dbg !28
  %112 = add nuw nsw i32 %21, 1360, !dbg !28
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !28
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !28
  %115 = add nuw nsw i32 %21, 1632, !dbg !28
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !28
  %117 = load float, ptr addrspace(3) %116, align 4, !dbg !28
  %118 = add nuw nsw i32 %21, 1904, !dbg !28
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %118, !dbg !28
  %120 = load float, ptr addrspace(3) %119, align 4, !dbg !28
  %121 = add nuw nsw i32 %21, 2176, !dbg !28
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !28
  %123 = load float, ptr addrspace(3) %122, align 4, !dbg !28
  %124 = add nuw nsw i32 %21, 2448, !dbg !28
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !28
  %126 = load float, ptr addrspace(3) %125, align 4, !dbg !28
  %127 = add nuw nsw i32 %21, 2720, !dbg !28
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !28
  %129 = load float, ptr addrspace(3) %128, align 4, !dbg !28
  %130 = add nuw nsw i32 %21, 2992, !dbg !28
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %130, !dbg !28
  %132 = load float, ptr addrspace(3) %131, align 4, !dbg !28
  %133 = add nuw nsw i32 %21, 3264, !dbg !28
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %133, !dbg !28
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !28
  %136 = add nuw nsw i32 %21, 3536, !dbg !28
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !28
  %138 = load float, ptr addrspace(3) %137, align 4, !dbg !28
  %139 = add nuw nsw i32 %21, 3808, !dbg !28
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %139, !dbg !28
  %141 = load float, ptr addrspace(3) %140, align 4, !dbg !28
  %142 = add nuw nsw i32 %21, 4080, !dbg !28
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !28
  %144 = load float, ptr addrspace(3) %143, align 4, !dbg !28
  %145 = sext i32 %50 to i64, !dbg !29
  %146 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !29
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %36) #4, !dbg !30
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !31
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %36) #4, !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !33
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %36) #4, !dbg !34
  %153 = getelementptr float, ptr addrspace(1) %4, i64 %145, !dbg !35
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %36) #4, !dbg !36
  %155 = shl i32 %26, 4, !dbg !37
  %156 = shl i32 %27, 4, !dbg !37
  %157 = shl i32 %28, 4, !dbg !37
  %158 = shl i32 %29, 4, !dbg !37
  %159 = add i32 %42, %155, !dbg !38
  %160 = add i32 %42, %156, !dbg !38
  %161 = add i32 %42, %157, !dbg !38
  %162 = add i32 %42, %158, !dbg !38
  %163 = sext i32 %159 to i64, !dbg !39
  %164 = getelementptr float, ptr addrspace(1) %5, i64 %163, !dbg !39
  %165 = sext i32 %160 to i64, !dbg !39
  %166 = getelementptr float, ptr addrspace(1) %5, i64 %165, !dbg !39
  %167 = sext i32 %161 to i64, !dbg !39
  %168 = getelementptr float, ptr addrspace(1) %5, i64 %167, !dbg !39
  %169 = sext i32 %162 to i64, !dbg !39
  %170 = getelementptr float, ptr addrspace(1) %5, i64 %169, !dbg !39
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %164, i1 %67) #4, !dbg !40
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %166, i1 %68) #4, !dbg !40
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %168, i1 %69) #4, !dbg !40
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %70) #4, !dbg !40
  %175 = fadd float %150, 0x3EE4F8B580000000, !dbg !41
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %176, 0, !dbg !42
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i = icmp eq i32 %177, 0, !dbg !42
  br i1 %.not.i, label %183, label %178, !dbg !42

178:                                              ; preds = %11
  br i1 %.not1.i, label %181, label %179, !dbg !42

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

183:                                              ; preds = %11
  br i1 %.not1.i, label %186, label %184, !dbg !42

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %179, %181, %184, %186
  %.0.i = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !42
  %188 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !40
  %189 = bitcast i32 %188 to float, !dbg !40
  %190 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !40
  %191 = bitcast i32 %190 to float, !dbg !40
  %192 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !40
  %193 = bitcast i32 %192 to float, !dbg !40
  %194 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !40
  %195 = bitcast i32 %194 to float, !dbg !40
  %196 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !40
  %197 = bitcast i32 %196 to float, !dbg !40
  %198 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !40
  %199 = bitcast i32 %198 to float, !dbg !40
  %200 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !40
  %201 = bitcast i32 %200 to float, !dbg !40
  %202 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !40
  %203 = bitcast i32 %202 to float, !dbg !40
  %204 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !40
  %205 = bitcast i32 %204 to float, !dbg !40
  %206 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !40
  %207 = bitcast i32 %206 to float, !dbg !40
  %208 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !40
  %209 = bitcast i32 %208 to float, !dbg !40
  %210 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !40
  %211 = bitcast i32 %210 to float, !dbg !40
  %212 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !40
  %213 = bitcast i32 %212 to float, !dbg !40
  %214 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !40
  %215 = bitcast i32 %214 to float, !dbg !40
  %216 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !40
  %217 = bitcast i32 %216 to float, !dbg !40
  %218 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !40
  %219 = bitcast i32 %218 to float, !dbg !40
  %.lobit46 = lshr i32 %14, 6, !dbg !17
  %220 = and i32 %.lobit46, 3, !dbg !17
  %221 = or disjoint i32 %220, %38, !dbg !18
  %222 = or disjoint i32 %221, 12, !dbg !18
  %223 = icmp slt i32 %222, 16, !dbg !19
  %224 = and i32 %19, 252, !dbg !12
  %225 = or disjoint i32 %13, %224, !dbg !13
  %226 = icmp slt i32 %225, 512, !dbg !14
  %227 = and i1 %226, %223, !dbg !27
  %228 = or disjoint i32 %221, 8, !dbg !18
  %229 = icmp slt i32 %228, 16, !dbg !19
  %230 = and i1 %226, %229, !dbg !27
  %231 = or disjoint i32 %221, 4, !dbg !18
  %232 = icmp slt i32 %231, 16, !dbg !19
  %233 = and i1 %226, %232, !dbg !27
  %234 = icmp slt i32 %221, 16, !dbg !19
  %235 = and i1 %226, %234, !dbg !27
  %.frozen45 = freeze i32 %225, !dbg !20
  %236 = sdiv i32 %.frozen45, 128, !dbg !20
  %237 = mul i32 %236, 128, !dbg !21
  %.decomposed46 = sub i32 %.frozen45, %237, !dbg !21
  %238 = shl i32 %222, 7, !dbg !22
  %239 = shl i32 %236, 11, !dbg !23
  %240 = add i32 %239, %.decomposed46, !dbg !24
  %241 = add i32 %240, %238, !dbg !25
  %242 = shl i32 %228, 7, !dbg !22
  %243 = add i32 %240, %242, !dbg !25
  %244 = shl i32 %231, 7, !dbg !22
  %245 = add i32 %240, %244, !dbg !25
  %246 = shl i32 %221, 7, !dbg !22
  %247 = add i32 %240, %246, !dbg !25
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %249 = insertelement <16 x float> poison, float %144, i64 0, !dbg !44
  %250 = insertelement <16 x float> %249, float %141, i64 1, !dbg !44
  %251 = insertelement <16 x float> %250, float %138, i64 2, !dbg !44
  %252 = insertelement <16 x float> %251, float %135, i64 3, !dbg !44
  %253 = insertelement <16 x float> %252, float %132, i64 4, !dbg !44
  %254 = insertelement <16 x float> %253, float %129, i64 5, !dbg !44
  %255 = insertelement <16 x float> %254, float %126, i64 6, !dbg !44
  %256 = insertelement <16 x float> %255, float %123, i64 7, !dbg !44
  %257 = insertelement <16 x float> %256, float %120, i64 8, !dbg !44
  %258 = insertelement <16 x float> %257, float %117, i64 9, !dbg !44
  %259 = insertelement <16 x float> %258, float %114, i64 10, !dbg !44
  %260 = insertelement <16 x float> %259, float %111, i64 11, !dbg !44
  %261 = insertelement <16 x float> %260, float %108, i64 12, !dbg !44
  %262 = insertelement <16 x float> %261, float %105, i64 13, !dbg !44
  %263 = insertelement <16 x float> %262, float %102, i64 14, !dbg !44
  %264 = insertelement <16 x float> %263, float %99, i64 15, !dbg !44
  %265 = insertelement <16 x i32> poison, i32 %147, i64 0, !dbg !44
  %266 = bitcast <16 x i32> %265 to <16 x float>, !dbg !44
  %267 = shufflevector <16 x float> %266, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !44
  %268 = fsub <16 x float> %264, %267, !dbg !44
  %269 = insertelement <16 x float> poison, float %248, i64 0, !dbg !45
  %270 = shufflevector <16 x float> %269, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !45
  %271 = fmul <16 x float> %268, %270, !dbg !45
  %272 = insertelement <16 x i32> poison, i32 %152, i64 0, !dbg !46
  %273 = bitcast <16 x i32> %272 to <16 x float>, !dbg !46
  %274 = shufflevector <16 x float> %273, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !46
  %275 = fmul <16 x float> %271, %274, !dbg !46
  %276 = insertelement <16 x i32> poison, i32 %154, i64 0, !dbg !47
  %277 = bitcast <16 x i32> %276 to <16 x float>, !dbg !47
  %278 = shufflevector <16 x float> %277, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !47
  %279 = fadd <16 x float> %275, %278, !dbg !47
  %280 = fcmp olt <16 x float> %279, zeroinitializer, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %281 = and i32 %19, 1020, !dbg !52
  %282 = lshr exact i32 %91, 2, !dbg !52
  %283 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %282, !dbg !52
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %91, !dbg !52
  %285 = or disjoint i32 %91, 1, !dbg !52
  %286 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %285, !dbg !52
  %287 = or disjoint i32 %91, 2, !dbg !52
  %288 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %287, !dbg !52
  %289 = or disjoint i32 %91, 3, !dbg !52
  %290 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %289, !dbg !52
  %291 = or disjoint i32 %91, 4, !dbg !52
  %292 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %291, !dbg !52
  %293 = or disjoint i32 %91, 5, !dbg !52
  %294 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %293, !dbg !52
  %295 = or disjoint i32 %91, 6, !dbg !52
  %296 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %295, !dbg !52
  %297 = or disjoint i32 %91, 7, !dbg !52
  %298 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %297, !dbg !52
  %299 = or disjoint i32 %91, 8, !dbg !52
  %300 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %299, !dbg !52
  %301 = or disjoint i32 %91, 9, !dbg !52
  %302 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %301, !dbg !52
  %303 = or disjoint i32 %91, 10, !dbg !52
  %304 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %303, !dbg !52
  %305 = or disjoint i32 %91, 11, !dbg !52
  %306 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %305, !dbg !52
  %307 = or disjoint i32 %91, 12, !dbg !52
  %308 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %307, !dbg !52
  %309 = or disjoint i32 %91, 13, !dbg !52
  %310 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %309, !dbg !52
  %311 = or disjoint i32 %91, 14, !dbg !52
  %312 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %311, !dbg !52
  %313 = or disjoint i32 %91, 15, !dbg !52
  %314 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %313, !dbg !52
  %315 = lshr i32 %281, 4, !dbg !52
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %315, !dbg !52
  %317 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %281, !dbg !52
  %318 = or disjoint i32 %281, 1, !dbg !52
  %319 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %318, !dbg !52
  %320 = or disjoint i32 %281, 2, !dbg !52
  %321 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %320, !dbg !52
  %322 = or disjoint i32 %281, 3, !dbg !52
  %323 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %322, !dbg !52
  %324 = or disjoint i32 %281, 1024, !dbg !52
  %325 = lshr i32 %324, 4, !dbg !52
  %326 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %325, !dbg !52
  %327 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %324, !dbg !52
  %328 = or disjoint i32 %281, 1025, !dbg !52
  %329 = lshr i32 %328, 4, !dbg !52
  %330 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %329, !dbg !52
  %331 = getelementptr inbounds float, ptr addrspace(3) %330, i32 %328, !dbg !52
  %332 = or disjoint i32 %281, 1026, !dbg !52
  %333 = lshr i32 %332, 4, !dbg !52
  %334 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %333, !dbg !52
  %335 = getelementptr inbounds float, ptr addrspace(3) %334, i32 %332, !dbg !52
  %336 = or disjoint i32 %281, 1027, !dbg !52
  %337 = lshr i32 %336, 4, !dbg !52
  %338 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %337, !dbg !52
  %339 = getelementptr inbounds float, ptr addrspace(3) %338, i32 %336, !dbg !52
  %340 = or disjoint i32 %281, 2048, !dbg !52
  %341 = lshr i32 %340, 4, !dbg !52
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !52
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %340, !dbg !52
  %344 = or disjoint i32 %281, 2049, !dbg !52
  %345 = lshr i32 %344, 4, !dbg !52
  %346 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %345, !dbg !52
  %347 = getelementptr inbounds float, ptr addrspace(3) %346, i32 %344, !dbg !52
  %348 = or disjoint i32 %281, 2050, !dbg !52
  %349 = lshr i32 %348, 4, !dbg !52
  %350 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %349, !dbg !52
  %351 = getelementptr inbounds float, ptr addrspace(3) %350, i32 %348, !dbg !52
  %352 = or disjoint i32 %281, 2051, !dbg !52
  %353 = lshr i32 %352, 4, !dbg !52
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %353, !dbg !52
  %355 = getelementptr inbounds float, ptr addrspace(3) %354, i32 %352, !dbg !52
  %356 = or disjoint i32 %281, 3072, !dbg !52
  %357 = lshr i32 %356, 4, !dbg !52
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %357, !dbg !52
  %359 = getelementptr inbounds float, ptr addrspace(3) %358, i32 %356, !dbg !52
  %360 = or disjoint i32 %281, 3073, !dbg !52
  %361 = lshr i32 %360, 4, !dbg !52
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %361, !dbg !52
  %363 = getelementptr inbounds float, ptr addrspace(3) %362, i32 %360, !dbg !52
  %364 = or disjoint i32 %281, 3074, !dbg !52
  %365 = lshr i32 %364, 4, !dbg !52
  %366 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %365, !dbg !52
  %367 = getelementptr inbounds float, ptr addrspace(3) %366, i32 %364, !dbg !52
  %368 = or disjoint i32 %281, 3075, !dbg !52
  %369 = lshr i32 %368, 4, !dbg !52
  %370 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %369, !dbg !52
  %371 = getelementptr inbounds float, ptr addrspace(3) %370, i32 %368, !dbg !52
  %372 = select <16 x i1> %280, <16 x float> zeroinitializer, <16 x float> %279, !dbg !52
  %373 = extractelement <16 x float> %372, i64 15, !dbg !52
  %374 = bitcast float %373 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %374, i1 true) #4, !dbg !52
  %375 = extractelement <16 x float> %372, i64 14, !dbg !52
  %376 = bitcast float %375 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %376, i1 true) #4, !dbg !52
  %377 = extractelement <16 x float> %372, i64 13, !dbg !52
  %378 = bitcast float %377 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %378, i1 true) #4, !dbg !52
  %379 = extractelement <16 x float> %372, i64 12, !dbg !52
  %380 = bitcast float %379 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %380, i1 true) #4, !dbg !52
  %381 = extractelement <16 x float> %372, i64 11, !dbg !52
  %382 = bitcast float %381 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %382, i1 true) #4, !dbg !52
  %383 = extractelement <16 x float> %372, i64 10, !dbg !52
  %384 = bitcast float %383 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %384, i1 true) #4, !dbg !52
  %385 = extractelement <16 x float> %372, i64 9, !dbg !52
  %386 = bitcast float %385 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %386, i1 true) #4, !dbg !52
  %387 = extractelement <16 x float> %372, i64 8, !dbg !52
  %388 = bitcast float %387 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %388, i1 true) #4, !dbg !52
  %389 = extractelement <16 x float> %372, i64 7, !dbg !52
  %390 = bitcast float %389 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %390, i1 true) #4, !dbg !52
  %391 = extractelement <16 x float> %372, i64 6, !dbg !52
  %392 = bitcast float %391 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %392, i1 true) #4, !dbg !52
  %393 = extractelement <16 x float> %372, i64 5, !dbg !52
  %394 = bitcast float %393 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %394, i1 true) #4, !dbg !52
  %395 = extractelement <16 x float> %372, i64 4, !dbg !52
  %396 = bitcast float %395 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %396, i1 true) #4, !dbg !52
  %397 = extractelement <16 x float> %372, i64 3, !dbg !52
  %398 = bitcast float %397 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %398, i1 true) #4, !dbg !52
  %399 = extractelement <16 x float> %372, i64 2, !dbg !52
  %400 = bitcast float %399 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %400, i1 true) #4, !dbg !52
  %401 = extractelement <16 x float> %372, i64 1, !dbg !52
  %402 = bitcast float %401 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %402, i1 true) #4, !dbg !52
  %403 = extractelement <16 x float> %372, i64 0, !dbg !52
  %404 = bitcast float %403 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %404, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %405 = load float, ptr addrspace(3) %317, align 4, !dbg !52
  %406 = load float, ptr addrspace(3) %319, align 4, !dbg !52
  %407 = load float, ptr addrspace(3) %321, align 4, !dbg !52
  %408 = load float, ptr addrspace(3) %323, align 4, !dbg !52
  %409 = load float, ptr addrspace(3) %327, align 4, !dbg !52
  %410 = load float, ptr addrspace(3) %331, align 4, !dbg !52
  %411 = load float, ptr addrspace(3) %335, align 4, !dbg !52
  %412 = load float, ptr addrspace(3) %339, align 4, !dbg !52
  %413 = load float, ptr addrspace(3) %343, align 4, !dbg !52
  %414 = load float, ptr addrspace(3) %347, align 4, !dbg !52
  %415 = load float, ptr addrspace(3) %351, align 4, !dbg !52
  %416 = load float, ptr addrspace(3) %355, align 4, !dbg !52
  %417 = load float, ptr addrspace(3) %359, align 4, !dbg !52
  %418 = load float, ptr addrspace(3) %363, align 4, !dbg !52
  %419 = load float, ptr addrspace(3) %367, align 4, !dbg !52
  %420 = load float, ptr addrspace(3) %371, align 4, !dbg !52
  %421 = fadd float %405, %219, !dbg !53
  %422 = fadd float %406, %217, !dbg !53
  %423 = fadd float %407, %215, !dbg !53
  %424 = fadd float %408, %213, !dbg !53
  %425 = fadd float %409, %211, !dbg !53
  %426 = fadd float %410, %209, !dbg !53
  %427 = fadd float %411, %207, !dbg !53
  %428 = fadd float %412, %205, !dbg !53
  %429 = fadd float %413, %203, !dbg !53
  %430 = fadd float %414, %201, !dbg !53
  %431 = fadd float %415, %199, !dbg !53
  %432 = fadd float %416, %197, !dbg !53
  %433 = fadd float %417, %195, !dbg !53
  %434 = fadd float %418, %193, !dbg !53
  %435 = fadd float %419, %191, !dbg !53
  %436 = fadd float %420, %189, !dbg !53
  %437 = fcmp ole <16 x float> %372, zeroinitializer, !dbg !54
  %438 = getelementptr float, ptr addrspace(1) %6, i64 %163, !dbg !55
  %439 = getelementptr float, ptr addrspace(1) %6, i64 %165, !dbg !55
  %440 = getelementptr float, ptr addrspace(1) %6, i64 %167, !dbg !55
  %441 = getelementptr float, ptr addrspace(1) %6, i64 %169, !dbg !55
  %442 = bitcast float %405 to i32, !dbg !56
  %443 = bitcast float %406 to i32, !dbg !56
  %444 = bitcast float %407 to i32, !dbg !56
  %445 = bitcast float %408 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %442, i32 %443, i32 %444, i32 %445, ptr addrspace(1) %438, i1 %67) #4, !dbg !56
  %446 = bitcast float %409 to i32, !dbg !56
  %447 = bitcast float %410 to i32, !dbg !56
  %448 = bitcast float %411 to i32, !dbg !56
  %449 = bitcast float %412 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %446, i32 %447, i32 %448, i32 %449, ptr addrspace(1) %439, i1 %68) #4, !dbg !56
  %450 = bitcast float %413 to i32, !dbg !56
  %451 = bitcast float %414 to i32, !dbg !56
  %452 = bitcast float %415 to i32, !dbg !56
  %453 = bitcast float %416 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %450, i32 %451, i32 %452, i32 %453, ptr addrspace(1) %440, i1 %69) #4, !dbg !56
  %454 = bitcast float %417 to i32, !dbg !56
  %455 = bitcast float %418 to i32, !dbg !56
  %456 = bitcast float %419 to i32, !dbg !56
  %457 = bitcast float %420 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %454, i32 %455, i32 %456, i32 %457, ptr addrspace(1) %441, i1 %70) #4, !dbg !56
  %458 = sext i32 %247 to i64, !dbg !57
  %459 = getelementptr float, ptr addrspace(1) %7, i64 %458, !dbg !57
  %460 = sext i32 %245 to i64, !dbg !57
  %461 = getelementptr float, ptr addrspace(1) %7, i64 %460, !dbg !57
  %462 = sext i32 %243 to i64, !dbg !57
  %463 = getelementptr float, ptr addrspace(1) %7, i64 %462, !dbg !57
  %464 = sext i32 %241 to i64, !dbg !57
  %465 = getelementptr float, ptr addrspace(1) %7, i64 %464, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %466 = shl i32 %14, 10, !dbg !58
  %467 = and i32 %466, 3072, !dbg !58
  %468 = or disjoint i32 %467, %18, !dbg !58
  %469 = lshr exact i32 %467, 4, !dbg !58
  %470 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %469, !dbg !58
  %471 = getelementptr float, ptr addrspace(3) %470, i32 %468, !dbg !58
  %472 = bitcast float %421 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %472, i1 true) #4, !dbg !58
  %473 = or disjoint i32 %468, 256, !dbg !58
  %474 = lshr i32 %473, 6, !dbg !58
  %475 = getelementptr float, ptr addrspace(3) @global_smem, i32 %474, !dbg !58
  %476 = getelementptr float, ptr addrspace(3) %475, i32 %473, !dbg !58
  %477 = bitcast float %422 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %476, <1 x i32> %477, i1 true) #4, !dbg !58
  %478 = or disjoint i32 %468, 512, !dbg !58
  %479 = lshr i32 %478, 6, !dbg !58
  %480 = getelementptr float, ptr addrspace(3) @global_smem, i32 %479, !dbg !58
  %481 = getelementptr float, ptr addrspace(3) %480, i32 %478, !dbg !58
  %482 = bitcast float %423 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %481, <1 x i32> %482, i1 true) #4, !dbg !58
  %483 = or disjoint i32 %468, 768, !dbg !58
  %484 = lshr i32 %483, 6, !dbg !58
  %485 = getelementptr float, ptr addrspace(3) @global_smem, i32 %484, !dbg !58
  %486 = getelementptr float, ptr addrspace(3) %485, i32 %483, !dbg !58
  %487 = bitcast float %424 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %486, <1 x i32> %487, i1 true) #4, !dbg !58
  %488 = or disjoint i32 %468, 64, !dbg !58
  %489 = getelementptr float, ptr addrspace(3) %470, i32 %488, !dbg !58
  %490 = bitcast float %425 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %489, <1 x i32> %490, i1 true) #4, !dbg !58
  %491 = or disjoint i32 %468, 320, !dbg !58
  %492 = lshr i32 %491, 6, !dbg !58
  %493 = and i32 %492, 52, !dbg !58
  %494 = getelementptr float, ptr addrspace(3) @global_smem, i32 %493, !dbg !58
  %495 = getelementptr float, ptr addrspace(3) %494, i32 %491, !dbg !58
  %496 = bitcast float %426 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %496, i1 true) #4, !dbg !58
  %497 = or disjoint i32 %468, 576, !dbg !58
  %498 = lshr i32 %497, 6, !dbg !58
  %499 = and i32 %498, 56, !dbg !58
  %500 = getelementptr float, ptr addrspace(3) @global_smem, i32 %499, !dbg !58
  %501 = getelementptr float, ptr addrspace(3) %500, i32 %497, !dbg !58
  %502 = bitcast float %427 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %501, <1 x i32> %502, i1 true) #4, !dbg !58
  %503 = or disjoint i32 %468, 832, !dbg !58
  %504 = lshr i32 %503, 6, !dbg !58
  %505 = and i32 %504, 60, !dbg !58
  %506 = getelementptr float, ptr addrspace(3) @global_smem, i32 %505, !dbg !58
  %507 = getelementptr float, ptr addrspace(3) %506, i32 %503, !dbg !58
  %508 = bitcast float %428 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %507, <1 x i32> %508, i1 true) #4, !dbg !58
  %509 = or disjoint i32 %468, 128, !dbg !58
  %510 = getelementptr float, ptr addrspace(3) %470, i32 %509, !dbg !58
  %511 = bitcast float %429 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %510, <1 x i32> %511, i1 true) #4, !dbg !58
  %512 = or disjoint i32 %468, 384, !dbg !58
  %513 = lshr i32 %512, 6, !dbg !58
  %514 = and i32 %513, 52, !dbg !58
  %515 = getelementptr float, ptr addrspace(3) @global_smem, i32 %514, !dbg !58
  %516 = getelementptr float, ptr addrspace(3) %515, i32 %512, !dbg !58
  %517 = bitcast float %430 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, <1 x i32> %517, i1 true) #4, !dbg !58
  %518 = or disjoint i32 %468, 640, !dbg !58
  %519 = lshr i32 %518, 6, !dbg !58
  %520 = and i32 %519, 56, !dbg !58
  %521 = getelementptr float, ptr addrspace(3) @global_smem, i32 %520, !dbg !58
  %522 = getelementptr float, ptr addrspace(3) %521, i32 %518, !dbg !58
  %523 = bitcast float %431 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %522, <1 x i32> %523, i1 true) #4, !dbg !58
  %524 = or disjoint i32 %468, 896, !dbg !58
  %525 = lshr i32 %524, 6, !dbg !58
  %526 = and i32 %525, 60, !dbg !58
  %527 = getelementptr float, ptr addrspace(3) @global_smem, i32 %526, !dbg !58
  %528 = getelementptr float, ptr addrspace(3) %527, i32 %524, !dbg !58
  %529 = bitcast float %432 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %528, <1 x i32> %529, i1 true) #4, !dbg !58
  %530 = or disjoint i32 %468, 192, !dbg !58
  %531 = getelementptr float, ptr addrspace(3) %470, i32 %530, !dbg !58
  %532 = bitcast float %433 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %531, <1 x i32> %532, i1 true) #4, !dbg !58
  %533 = or disjoint i32 %468, 448, !dbg !58
  %534 = lshr i32 %533, 6, !dbg !58
  %535 = and i32 %534, 52, !dbg !58
  %536 = getelementptr float, ptr addrspace(3) @global_smem, i32 %535, !dbg !58
  %537 = getelementptr float, ptr addrspace(3) %536, i32 %533, !dbg !58
  %538 = bitcast float %434 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %537, <1 x i32> %538, i1 true) #4, !dbg !58
  %539 = or disjoint i32 %468, 704, !dbg !58
  %540 = lshr i32 %539, 6, !dbg !58
  %541 = and i32 %540, 56, !dbg !58
  %542 = getelementptr float, ptr addrspace(3) @global_smem, i32 %541, !dbg !58
  %543 = getelementptr float, ptr addrspace(3) %542, i32 %539, !dbg !58
  %544 = bitcast float %435 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %544, i1 true) #4, !dbg !58
  %545 = or disjoint i32 %468, 960, !dbg !58
  %546 = lshr i32 %545, 6, !dbg !58
  %547 = and i32 %546, 60, !dbg !58
  %548 = getelementptr float, ptr addrspace(3) @global_smem, i32 %547, !dbg !58
  %549 = getelementptr float, ptr addrspace(3) %548, i32 %545, !dbg !58
  %550 = bitcast float %436 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %549, <1 x i32> %550, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %551 = lshr i32 %19, 6, !dbg !58
  %552 = and i32 %551, 12, !dbg !58
  %553 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %552, !dbg !58
  %554 = getelementptr inbounds float, ptr addrspace(3) %553, i32 %281, !dbg !58
  %555 = lshr i32 %324, 6, !dbg !58
  %556 = and i32 %555, 28, !dbg !58
  %557 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %556, !dbg !58
  %558 = getelementptr inbounds float, ptr addrspace(3) %557, i32 %324, !dbg !58
  %559 = load <4 x i32>, ptr addrspace(3) %558, align 16, !dbg !58
  %560 = lshr i32 %340, 6, !dbg !58
  %561 = and i32 %560, 44, !dbg !58
  %562 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %561, !dbg !58
  %563 = getelementptr inbounds float, ptr addrspace(3) %562, i32 %340, !dbg !58
  %564 = load <4 x i32>, ptr addrspace(3) %563, align 16, !dbg !58
  %565 = lshr i32 %356, 6, !dbg !58
  %566 = and i32 %565, 60, !dbg !58
  %567 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %566, !dbg !58
  %568 = getelementptr inbounds float, ptr addrspace(3) %567, i32 %356, !dbg !58
  %569 = load <4 x i32>, ptr addrspace(3) %568, align 16, !dbg !58
  %.extract = load i32, ptr addrspace(3) %554, align 16, !dbg !58
  %570 = getelementptr inbounds i8, ptr addrspace(3) %554, i32 4, !dbg !58
  %.extract22 = load i32, ptr addrspace(3) %570, align 4, !dbg !58
  %571 = getelementptr inbounds i8, ptr addrspace(3) %554, i32 8, !dbg !58
  %.extract23 = load i32, ptr addrspace(3) %571, align 8, !dbg !58
  %572 = getelementptr inbounds i8, ptr addrspace(3) %554, i32 12, !dbg !58
  %.extract24 = load i32, ptr addrspace(3) %572, align 4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %459, i1 %235) #4, !dbg !58
  %.extract25 = extractelement <4 x i32> %559, i64 0, !dbg !58
  %.extract26 = extractelement <4 x i32> %559, i64 1, !dbg !58
  %.extract27 = extractelement <4 x i32> %559, i64 2, !dbg !58
  %.extract28 = extractelement <4 x i32> %559, i64 3, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %461, i1 %233) #4, !dbg !58
  %.extract29 = extractelement <4 x i32> %564, i64 0, !dbg !58
  %.extract30 = extractelement <4 x i32> %564, i64 1, !dbg !58
  %.extract31 = extractelement <4 x i32> %564, i64 2, !dbg !58
  %.extract32 = extractelement <4 x i32> %564, i64 3, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %463, i1 %230) #4, !dbg !58
  %.extract33 = extractelement <4 x i32> %569, i64 0, !dbg !58
  %.extract34 = extractelement <4 x i32> %569, i64 1, !dbg !58
  %.extract35 = extractelement <4 x i32> %569, i64 2, !dbg !58
  %.extract36 = extractelement <4 x i32> %569, i64 3, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract33, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %465, i1 %227) #4, !dbg !58
  %573 = getelementptr i1, ptr addrspace(1) %8, i64 %58, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %574 = extractelement <16 x i1> %437, i64 15, !dbg !60
  %575 = zext i1 %574 to i8, !dbg !60
  %576 = extractelement <16 x i1> %437, i64 14, !dbg !60
  %577 = zext i1 %576 to i8, !dbg !60
  %578 = extractelement <16 x i1> %437, i64 13, !dbg !60
  %579 = zext i1 %578 to i8, !dbg !60
  %580 = extractelement <16 x i1> %437, i64 12, !dbg !60
  %581 = zext i1 %580 to i8, !dbg !60
  %582 = extractelement <16 x i1> %437, i64 11, !dbg !60
  %583 = zext i1 %582 to i8, !dbg !60
  %584 = extractelement <16 x i1> %437, i64 10, !dbg !60
  %585 = zext i1 %584 to i8, !dbg !60
  %586 = extractelement <16 x i1> %437, i64 9, !dbg !60
  %587 = zext i1 %586 to i8, !dbg !60
  %588 = extractelement <16 x i1> %437, i64 8, !dbg !60
  %589 = zext i1 %588 to i8, !dbg !60
  %590 = extractelement <16 x i1> %437, i64 7, !dbg !60
  %591 = zext i1 %590 to i8, !dbg !60
  %592 = extractelement <16 x i1> %437, i64 6, !dbg !60
  %593 = zext i1 %592 to i8, !dbg !60
  %594 = extractelement <16 x i1> %437, i64 5, !dbg !60
  %595 = zext i1 %594 to i8, !dbg !60
  %596 = extractelement <16 x i1> %437, i64 4, !dbg !60
  %597 = zext i1 %596 to i8, !dbg !60
  %598 = extractelement <16 x i1> %437, i64 3, !dbg !60
  %599 = zext i1 %598 to i8, !dbg !60
  %600 = extractelement <16 x i1> %437, i64 2, !dbg !60
  %601 = zext i1 %600 to i8, !dbg !60
  %602 = extractelement <16 x i1> %437, i64 1, !dbg !60
  %603 = zext i1 %602 to i8, !dbg !60
  %604 = extractelement <16 x i1> %437, i64 0, !dbg !60
  %605 = zext i1 %604 to i8, !dbg !60
  %606 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %21, !dbg !60
  %607 = insertelement <1 x i8> poison, i8 %575, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %606, <1 x i8> %607, i1 true) #4, !dbg !60
  %608 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %100, !dbg !60
  %609 = insertelement <1 x i8> poison, i8 %577, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %608, <1 x i8> %609, i1 true) #4, !dbg !60
  %610 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %103, !dbg !60
  %611 = insertelement <1 x i8> poison, i8 %579, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %610, <1 x i8> %611, i1 true) #4, !dbg !60
  %612 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %106, !dbg !60
  %613 = insertelement <1 x i8> poison, i8 %581, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %612, <1 x i8> %613, i1 true) #4, !dbg !60
  %614 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %109, !dbg !60
  %615 = insertelement <1 x i8> poison, i8 %583, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %614, <1 x i8> %615, i1 true) #4, !dbg !60
  %616 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %112, !dbg !60
  %617 = insertelement <1 x i8> poison, i8 %585, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %616, <1 x i8> %617, i1 true) #4, !dbg !60
  %618 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %115, !dbg !60
  %619 = insertelement <1 x i8> poison, i8 %587, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %618, <1 x i8> %619, i1 true) #4, !dbg !60
  %620 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %118, !dbg !60
  %621 = insertelement <1 x i8> poison, i8 %589, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %620, <1 x i8> %621, i1 true) #4, !dbg !60
  %622 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %121, !dbg !60
  %623 = insertelement <1 x i8> poison, i8 %591, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %622, <1 x i8> %623, i1 true) #4, !dbg !60
  %624 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %124, !dbg !60
  %625 = insertelement <1 x i8> poison, i8 %593, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %624, <1 x i8> %625, i1 true) #4, !dbg !60
  %626 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %127, !dbg !60
  %627 = insertelement <1 x i8> poison, i8 %595, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %626, <1 x i8> %627, i1 true) #4, !dbg !60
  %628 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %130, !dbg !60
  %629 = insertelement <1 x i8> poison, i8 %597, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %628, <1 x i8> %629, i1 true) #4, !dbg !60
  %630 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %133, !dbg !60
  %631 = insertelement <1 x i8> poison, i8 %599, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %630, <1 x i8> %631, i1 true) #4, !dbg !60
  %632 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %136, !dbg !60
  %633 = insertelement <1 x i8> poison, i8 %601, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %632, <1 x i8> %633, i1 true) #4, !dbg !60
  %634 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %139, !dbg !60
  %635 = insertelement <1 x i8> poison, i8 %603, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %634, <1 x i8> %635, i1 true) #4, !dbg !60
  %636 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %142, !dbg !60
  %637 = insertelement <1 x i8> poison, i8 %605, i64 0, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %636, <1 x i8> %637, i1 true) #4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %638 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %93, !dbg !60
  %639 = load <4 x i32>, ptr addrspace(3) %638, align 16, !dbg !60
  %640 = bitcast <4 x i32> %639 to <128 x i1>, !dbg !60
  %641 = extractelement <128 x i1> %640, i64 24, !dbg !60
  %642 = extractelement <128 x i1> %640, i64 56, !dbg !60
  %643 = extractelement <128 x i1> %640, i64 88, !dbg !60
  %644 = extractelement <128 x i1> %640, i64 120, !dbg !60
  %645 = bitcast <4 x i32> %639 to <16 x i8>, !dbg !60
  %646 = extractelement <16 x i8> %645, i64 0, !dbg !60
  %647 = and i8 %646, 1, !dbg !60
  %648 = shufflevector <16 x i8> %645, <16 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !60
  %649 = and <2 x i8> %648, splat (i8 1), !dbg !60
  %650 = zext i1 %641 to i8, !dbg !60
  %651 = extractelement <16 x i8> %645, i64 4, !dbg !60
  %652 = and i8 %651, 1, !dbg !60
  %653 = shufflevector <16 x i8> %645, <16 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !60
  %654 = and <2 x i8> %653, splat (i8 1), !dbg !60
  %655 = zext i1 %642 to i8, !dbg !60
  %656 = extractelement <16 x i8> %645, i64 8, !dbg !60
  %657 = and i8 %656, 1, !dbg !60
  %658 = shufflevector <16 x i8> %645, <16 x i8> poison, <2 x i32> <i32 9, i32 10>, !dbg !60
  %659 = and <2 x i8> %658, splat (i8 1), !dbg !60
  %660 = zext i1 %643 to i8, !dbg !60
  %661 = extractelement <16 x i8> %645, i64 12, !dbg !60
  %662 = and i8 %661, 1, !dbg !60
  %663 = shufflevector <16 x i8> %645, <16 x i8> poison, <2 x i32> <i32 13, i32 14>, !dbg !60
  %664 = and <2 x i8> %663, splat (i8 1), !dbg !60
  %665 = zext i1 %644 to i8, !dbg !60
  %666 = insertelement <4 x i8> poison, i8 %647, i64 0, !dbg !60
  %667 = shufflevector <2 x i8> %649, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !60
  %668 = shufflevector <4 x i8> %666, <4 x i8> %667, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !60
  %669 = insertelement <4 x i8> %668, i8 %650, i64 3, !dbg !60
  %670 = bitcast <4 x i8> %669 to i32, !dbg !60
  %671 = insertelement <4 x i8> poison, i8 %652, i64 0, !dbg !60
  %672 = shufflevector <2 x i8> %654, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !60
  %673 = shufflevector <4 x i8> %671, <4 x i8> %672, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !60
  %674 = insertelement <4 x i8> %673, i8 %655, i64 3, !dbg !60
  %675 = bitcast <4 x i8> %674 to i32, !dbg !60
  %676 = insertelement <4 x i8> poison, i8 %657, i64 0, !dbg !60
  %677 = shufflevector <2 x i8> %659, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !60
  %678 = shufflevector <4 x i8> %676, <4 x i8> %677, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !60
  %679 = insertelement <4 x i8> %678, i8 %660, i64 3, !dbg !60
  %680 = bitcast <4 x i8> %679 to i32, !dbg !60
  %681 = insertelement <4 x i8> poison, i8 %662, i64 0, !dbg !60
  %682 = shufflevector <2 x i8> %664, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !60
  %683 = shufflevector <4 x i8> %681, <4 x i8> %682, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !60
  %684 = insertelement <4 x i8> %683, i8 %665, i64 3, !dbg !60
  %685 = bitcast <4 x i8> %684 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %670, i32 %675, i32 %680, i32 %685, ptr addrspace(1) %573, i1 %66) #4, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3wh7jwrrgf2e26oaawrjabuarzfl3bjeiohmmeb5ipye3bk55o.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 39, scope: !7)
!38 = !DILocation(line: 37, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 44, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 26, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 46, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 50, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 51, column: 20, scope: !7)
!54 = !DILocation(line: 53, column: 21, scope: !7)
!55 = !DILocation(line: 54, column: 25, scope: !7)
!56 = !DILocation(line: 54, column: 45, scope: !7)
!57 = !DILocation(line: 55, column: 25, scope: !7)
!58 = !DILocation(line: 55, column: 56, scope: !7)
!59 = !DILocation(line: 56, column: 25, scope: !7)
!60 = !DILocation(line: 56, column: 56, scope: !7)
!61 = !DILocation(line: 56, column: 4, scope: !7)
