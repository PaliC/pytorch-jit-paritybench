; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 1, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %.lobit = and i32 %10, 1, !dbg !12
  %11 = or disjoint i32 %8, %.lobit, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %14 = shl i32 %13, 7, !dbg !16
  %15 = shl i32 %9, 1, !dbg !17
  %16 = and i32 %15, 126, !dbg !17
  %17 = or disjoint i32 %14, %16, !dbg !18
  %18 = icmp slt i32 %17, 128, !dbg !19
  %19 = sdiv i32 %11, 64, !dbg !20
  %20 = shl i32 %11, 7, !dbg !21
  %21 = add i32 %17, %20, !dbg !22
  %22 = sext i32 %21 to i64, !dbg !23
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !23
  %24 = and i1 %12, %18, !dbg !24
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %24) #4, !dbg !25
  %26 = shl i32 %19, 7, !dbg !26
  %27 = add i32 %26, %17, !dbg !27
  %28 = sext i32 %27 to i64, !dbg !28
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !28
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %24) #4, !dbg !29
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !30
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %24) #4, !dbg !31
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !31
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !31
  %35 = bitcast i32 %33 to float, !dbg !31
  %36 = bitcast i32 %34 to float, !dbg !31
  %37 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float 6.400000e+01) #4, !dbg !32
  %38 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 6.400000e+01) #4, !dbg !32
  %39 = fadd float %37, 0x3EE4F8B580000000, !dbg !33
  %40 = fadd float %38, 0x3EE4F8B580000000, !dbg !33
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %41, 0, !dbg !34
  br i1 %.not.i, label %44, label %42, !dbg !34

42:                                               ; preds = %6
  %43 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %39), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

44:                                               ; preds = %6
  %45 = tail call float @llvm.nvvm.rsqrt.approx.f(float %39), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %42, %44
  %.0.i = phi float [ %43, %42 ], [ %45, %44 ], !dbg !34
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i4 = icmp eq i32 %46, 0, !dbg !34
  br i1 %.not.i4, label %49, label %47, !dbg !34

47:                                               ; preds = %__nv_rsqrtf.exit
  %48 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %40), !dbg !34
  br label %__nv_rsqrtf.exit6, !dbg !34

49:                                               ; preds = %__nv_rsqrtf.exit
  %50 = tail call float @llvm.nvvm.rsqrt.approx.f(float %40), !dbg !34
  br label %__nv_rsqrtf.exit6, !dbg !34

__nv_rsqrtf.exit6:                                ; preds = %47, %49
  %.0.i5 = phi float [ %48, %47 ], [ %50, %49 ], !dbg !34
  %51 = extractvalue { i32, i32 } %25, 1, !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = extractvalue { i32, i32 } %30, 1, !dbg !29
  %54 = bitcast i32 %53 to float, !dbg !29
  %55 = fsub float %52, %54, !dbg !35
  %56 = extractvalue { i32, i32 } %25, 0, !dbg !25
  %57 = bitcast i32 %56 to float, !dbg !25
  %58 = extractvalue { i32, i32 } %30, 0, !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = fsub float %57, %59, !dbg !35
  %61 = and i32 %9, 127, !dbg !17
  %62 = or disjoint i32 %14, %61, !dbg !18
  %63 = icmp slt i32 %62, 128, !dbg !19
  %64 = icmp slt i32 %8, 256, !dbg !14
  %65 = and i1 %64, %63, !dbg !24
  %.frozen = freeze i32 %8, !dbg !20
  %66 = sdiv i32 %.frozen, 64, !dbg !20
  %67 = mul i32 %66, 64, !dbg !36
  %.decomposed = sub i32 %.frozen, %67, !dbg !36
  %68 = fmul float %60, %.0.i, !dbg !37
  %69 = fmul float %55, %.0.i5, !dbg !37
  %70 = fcmp ogt float %68, 0.000000e+00, !dbg !38
  %71 = fcmp ogt float %69, 0.000000e+00, !dbg !38
  %72 = fmul float %68, 0x3FB99999A0000000, !dbg !39
  %73 = fmul float %69, 0x3FB99999A0000000, !dbg !39
  %74 = select i1 %70, float %68, float %72, !dbg !40
  %75 = select i1 %71, float %69, float %73, !dbg !40
  %76 = shl i32 %62, 6, !dbg !41
  %77 = shl i32 %66, 13, !dbg !42
  %78 = add i32 %77, %.decomposed, !dbg !43
  %79 = add i32 %78, %76, !dbg !44
  %80 = sext i32 %79 to i64, !dbg !45
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !45
  %82 = shl i32 %9, 2, !dbg !46
  %83 = and i32 %82, 252, !dbg !46
  %84 = or disjoint i32 %83, %.lobit, !dbg !46
  %85 = and i32 %82, 508, !dbg !46
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !46
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %84, !dbg !46
  %88 = bitcast float %74 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #4, !dbg !46
  %89 = or disjoint i32 %84, 2, !dbg !46
  %90 = or disjoint i32 %83, 2, !dbg !46
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !46
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !46
  %93 = bitcast float %75 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85, !dbg !46
  %.extract = load i32, ptr addrspace(3) %94, align 16, !dbg !46
  %95 = getelementptr inbounds i8, ptr addrspace(3) %94, i32 4, !dbg !46
  %.extract3 = load i32, ptr addrspace(3) %95, align 4, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract3, ptr addrspace(1) %81, i1 %65) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqrxbn4xxha4twhnxcpiypq3pnhagv3odimmpfdk5txco6gqif5b.py", directory: "inductor_cache/qr")
!4 = !{ptr @triton_poi_fused_leaky_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_16", linkageName: "triton_poi_fused_leaky_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 52, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 39, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 44, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 27, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 19, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 34, scope: !7)
!41 = !DILocation(line: 47, column: 33, scope: !7)
!42 = !DILocation(line: 47, column: 43, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !7)
!44 = !DILocation(line: 47, column: 38, scope: !7)
!45 = !DILocation(line: 47, column: 25, scope: !7)
!46 = !DILocation(line: 47, column: 55, scope: !7)
!47 = !DILocation(line: 47, column: 4, scope: !7)
