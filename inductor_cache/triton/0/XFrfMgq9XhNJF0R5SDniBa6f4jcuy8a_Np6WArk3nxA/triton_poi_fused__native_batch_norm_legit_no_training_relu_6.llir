; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !11
  %10 = shl i32 %9, 10, !dbg !12
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %12 = shl i32 %11, 2, !dbg !13
  %13 = and i32 %12, 508, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 513, !dbg !13
  %18 = or disjoint i32 %13, 514, !dbg !13
  %19 = or disjoint i32 %13, 515, !dbg !13
  %20 = or disjoint i32 %10, %13, !dbg !14
  %21 = or disjoint i32 %10, %14, !dbg !14
  %22 = or disjoint i32 %10, %15, !dbg !14
  %23 = or disjoint i32 %10, %16, !dbg !14
  %24 = or disjoint i32 %20, 512, !dbg !14
  %25 = or disjoint i32 %10, %17, !dbg !14
  %26 = or disjoint i32 %10, %18, !dbg !14
  %27 = or disjoint i32 %10, %19, !dbg !14
  %.frozen = freeze i32 %8, !dbg !15
  %28 = sdiv i32 %.frozen, 256, !dbg !15
  %29 = mul i32 %28, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %29, !dbg !16
  %30 = shl i32 %20, 8, !dbg !17
  %31 = shl i32 %21, 8, !dbg !17
  %32 = shl i32 %22, 8, !dbg !17
  %33 = shl i32 %23, 8, !dbg !17
  %34 = shl i32 %24, 8, !dbg !17
  %35 = shl i32 %25, 8, !dbg !17
  %36 = shl i32 %26, 8, !dbg !17
  %37 = shl i32 %27, 8, !dbg !17
  %38 = shl i32 %28, 20, !dbg !18
  %39 = add i32 %38, %.decomposed, !dbg !19
  %40 = add i32 %39, %30, !dbg !20
  %41 = add i32 %39, %31, !dbg !20
  %42 = add i32 %39, %32, !dbg !20
  %43 = add i32 %39, %33, !dbg !20
  %44 = add i32 %39, %34, !dbg !20
  %45 = add i32 %39, %35, !dbg !20
  %46 = add i32 %39, %36, !dbg !20
  %47 = add i32 %39, %37, !dbg !20
  %48 = sext i32 %40 to i64, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !21
  %50 = sext i32 %41 to i64, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !21
  %52 = sext i32 %42 to i64, !dbg !21
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !21
  %54 = sext i32 %43 to i64, !dbg !21
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !21
  %56 = sext i32 %44 to i64, !dbg !21
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !21
  %58 = sext i32 %45 to i64, !dbg !21
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !21
  %60 = sext i32 %46 to i64, !dbg !21
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !21
  %62 = sext i32 %47 to i64, !dbg !21
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !21
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !22
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !22
  %72 = sext i32 %.decomposed to i64, !dbg !23
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !23
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !24
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !24
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !24
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !26
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !26
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !26
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !26
  %83 = bitcast i32 %82 to float, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !28
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !28
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !28
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !28
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !30
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !30
  %94 = fadd float %83, 0x3EE4F8B580000000, !dbg !31
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i11 = icmp eq i32 %101, 0, !dbg !32
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i14 = icmp eq i32 %102, 0, !dbg !32
  br i1 %.not.i11, label %108, label %103, !dbg !32

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %106, label %104, !dbg !32

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %111, label %109, !dbg !32

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %104, %106, %109, %111
  %.0.i13 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !32
  %113 = insertelement <8 x i32> poison, i32 %71, i64 0, !dbg !22
  %114 = insertelement <8 x i32> %113, i32 %70, i64 1, !dbg !22
  %115 = insertelement <8 x i32> %114, i32 %69, i64 2, !dbg !22
  %116 = insertelement <8 x i32> %115, i32 %68, i64 3, !dbg !22
  %117 = insertelement <8 x i32> %116, i32 %67, i64 4, !dbg !22
  %118 = insertelement <8 x i32> %117, i32 %66, i64 5, !dbg !22
  %119 = insertelement <8 x i32> %118, i32 %65, i64 6, !dbg !22
  %120 = insertelement <8 x i32> %119, i32 %64, i64 7, !dbg !22
  %121 = bitcast <8 x i32> %120 to <8 x float>, !dbg !22
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !33
  %123 = insertelement <8 x i32> poison, i32 %77, i64 0, !dbg !34
  %124 = bitcast <8 x i32> %123 to <8 x float>, !dbg !34
  %125 = shufflevector <8 x float> %124, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !34
  %126 = fsub <8 x float> %121, %125, !dbg !34
  %127 = insertelement <8 x float> poison, float %122, i64 0, !dbg !35
  %128 = shufflevector <8 x float> %127, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !35
  %129 = fmul <8 x float> %126, %128, !dbg !35
  %130 = insertelement <8 x i32> poison, i32 %88, i64 0, !dbg !36
  %131 = bitcast <8 x i32> %130 to <8 x float>, !dbg !36
  %132 = shufflevector <8 x float> %131, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !36
  %133 = fmul <8 x float> %129, %132, !dbg !36
  %134 = insertelement <8 x i32> poison, i32 %93, i64 0, !dbg !37
  %135 = bitcast <8 x i32> %134 to <8 x float>, !dbg !37
  %136 = shufflevector <8 x float> %135, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %137 = fadd <8 x float> %133, %136, !dbg !37
  %138 = fcmp olt <8 x float> %137, zeroinitializer, !dbg !38
  %139 = extractelement <8 x i1> %138, i64 7, !dbg !42
  %140 = extractelement <8 x i1> %138, i64 6, !dbg !42
  %141 = extractelement <8 x i1> %138, i64 5, !dbg !42
  %142 = extractelement <8 x i1> %138, i64 4, !dbg !42
  %143 = extractelement <8 x i1> %138, i64 3, !dbg !42
  %144 = extractelement <8 x i1> %138, i64 2, !dbg !42
  %145 = extractelement <8 x i1> %138, i64 1, !dbg !42
  %146 = extractelement <8 x i1> %138, i64 0, !dbg !42
  %147 = shl i32 %8, 12, !dbg !43
  %148 = add i32 %20, %147, !dbg !44
  %149 = add i32 %147, %24, !dbg !44
  %150 = sext i32 %148 to i64, !dbg !45
  %151 = getelementptr float, ptr addrspace(1) %5, i64 %150, !dbg !45
  %152 = sext i32 %149 to i64, !dbg !45
  %153 = getelementptr float, ptr addrspace(1) %5, i64 %152, !dbg !45
  %bc = bitcast <8 x float> %137 to <8 x i32>, !dbg !46
  %154 = extractelement <8 x i32> %bc, i64 7, !dbg !46
  %155 = select i1 %139, i32 0, i32 %154, !dbg !42
  %bc16 = bitcast <8 x float> %137 to <8 x i32>, !dbg !46
  %156 = extractelement <8 x i32> %bc16, i64 6, !dbg !46
  %157 = select i1 %140, i32 0, i32 %156, !dbg !42
  %bc17 = bitcast <8 x float> %137 to <8 x i32>, !dbg !46
  %158 = extractelement <8 x i32> %bc17, i64 5, !dbg !46
  %159 = select i1 %141, i32 0, i32 %158, !dbg !42
  %bc18 = bitcast <8 x float> %137 to <8 x i32>, !dbg !46
  %160 = extractelement <8 x i32> %bc18, i64 4, !dbg !46
  %161 = select i1 %142, i32 0, i32 %160, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %155, i32 %157, i32 %159, i32 %161, ptr addrspace(1) %151, i1 true) #3, !dbg !46
  %bc19 = bitcast <8 x float> %137 to <8 x i32>, !dbg !46
  %162 = extractelement <8 x i32> %bc19, i64 3, !dbg !46
  %163 = select i1 %143, i32 0, i32 %162, !dbg !42
  %bc20 = bitcast <8 x float> %137 to <8 x i32>, !dbg !46
  %164 = extractelement <8 x i32> %bc20, i64 2, !dbg !46
  %165 = select i1 %144, i32 0, i32 %164, !dbg !42
  %bc21 = bitcast <8 x float> %137 to <8 x i32>, !dbg !46
  %166 = extractelement <8 x i32> %bc21, i64 1, !dbg !46
  %167 = select i1 %145, i32 0, i32 %166, !dbg !42
  %bc22 = bitcast <8 x float> %137 to <8 x i32>, !dbg !46
  %168 = extractelement <8 x i32> %bc22, i64 0, !dbg !46
  %169 = select i1 %146, i32 0, i32 %168, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %163, i32 %165, i32 %167, i32 %169, ptr addrspace(1) %153, i1 true) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfq3urejov5bdz2qdwojud2rrlxcy3m6g7ax6jgprsvqpx45dlmh.py", directory: "inductor_cache/fq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 52, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 44, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 57, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 26, scope: !7)
!33 = !DILocation(line: 42, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 49, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 50, column: 35, scope: !7)
!44 = !DILocation(line: 50, column: 30, scope: !7)
!45 = !DILocation(line: 50, column: 25, scope: !7)
!46 = !DILocation(line: 50, column: 47, scope: !7)
!47 = !DILocation(line: 50, column: 4, scope: !7)
