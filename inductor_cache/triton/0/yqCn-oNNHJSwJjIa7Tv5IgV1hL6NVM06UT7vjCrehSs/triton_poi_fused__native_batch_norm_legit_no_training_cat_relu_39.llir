; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 510, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 16, !dbg !14
  %19 = srem i32 %18, 1408, !dbg !15
  %20 = mul i32 %18, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %.frozen7 = freeze i32 %17, !dbg !17
  %21 = sdiv i32 %.frozen7, 22528, !dbg !17
  %22 = sext i32 %19 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %37 = icmp slt i32 %19, 1024, !dbg !26
  %38 = mul i32 %21, 22528, !dbg !27
  %srem.decomposed = sub i32 %.frozen7, %38, !dbg !27
  %39 = mul nsw i32 %21, 21760, !dbg !28
  %40 = add nsw i32 %39, %srem.decomposed, !dbg !29
  %41 = sext i32 %40 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !30
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !31
  %44 = mul nsw i32 %21, 16768, !dbg !32
  %45 = add nsw i32 %44, %srem.decomposed, !dbg !33
  %46 = sext i32 %45 to i64, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !34
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !35
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !36
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !37
  %51 = add nsw i32 %19, -1024, !dbg !38
  %52 = icmp ult i32 %51, 336, !dbg !39
  %53 = shl nsw i32 %19, 4, !dbg !40
  %54 = add nsw i32 %.decomposed, -16384, !dbg !40
  %55 = add nsw i32 %54, %39, !dbg !41
  %56 = add nsw i32 %55, %53, !dbg !42
  %57 = sext i32 %56 to i64, !dbg !43
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !43
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #3, !dbg !44
  %60 = add nsw i32 %19, -1360, !dbg !45
  %61 = icmp ult i32 %60, 24, !dbg !45
  %62 = add nsw i32 %.decomposed, 16384, !dbg !46
  %63 = add nsw i32 %44, %62, !dbg !47
  %64 = add nsw i32 %63, -21760, !dbg !48
  %65 = add nsw i32 %64, %53, !dbg !49
  %66 = sext i32 %65 to i64, !dbg !50
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !50
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #3, !dbg !51
  %69 = icmp sgt i32 %19, 1383, !dbg !52
  %70 = add nsw i32 %63, -22144, !dbg !53
  %71 = add nsw i32 %70, %53, !dbg !54
  %72 = sext i32 %71 to i64, !dbg !55
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !55
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #3, !dbg !56
  %75 = fadd float %28, 0x3F50624DE0000000, !dbg !57
  %76 = fadd float %30, 0x3F50624DE0000000, !dbg !57
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i = icmp eq i32 %77, 0, !dbg !58
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i = icmp eq i32 %78, 0, !dbg !58
  br i1 %.not.i, label %84, label %79, !dbg !58

79:                                               ; preds = %11
  br i1 %.not1.i, label %82, label %80, !dbg !58

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

84:                                               ; preds = %11
  br i1 %.not1.i, label %87, label %85, !dbg !58

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !58
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i2 = icmp eq i32 %89, 0, !dbg !58
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i5 = icmp eq i32 %90, 0, !dbg !58
  br i1 %.not.i2, label %96, label %91, !dbg !58

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %94, label %92, !dbg !58

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !58
  br label %__nv_sqrtf.exit6, !dbg !58

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !58
  br label %__nv_sqrtf.exit6, !dbg !58

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %99, label %97, !dbg !58

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !58
  br label %__nv_sqrtf.exit6, !dbg !58

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !58
  br label %__nv_sqrtf.exit6, !dbg !58

__nv_sqrtf.exit6:                                 ; preds = %92, %94, %97, %99
  %.0.i4 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !58
  %101 = extractvalue { i32, i32 } %43, 1, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = extractvalue { i32, i32 } %48, 1, !dbg !35
  %104 = bitcast i32 %103 to float, !dbg !35
  %105 = fadd float %102, %104, !dbg !59
  %106 = extractvalue { i32, i32 } %50, 1, !dbg !37
  %107 = bitcast i32 %106 to float, !dbg !37
  %108 = fadd float %105, %107, !dbg !60
  %109 = icmp slt i32 %19, 1384, !dbg !61
  %110 = icmp ult i32 %51, 360, !dbg !38
  %111 = icmp slt i32 %19, 1360, !dbg !62
  %112 = extractvalue { i32, i32 } %59, 1, !dbg !44
  %113 = extractvalue { i32, i32 } %68, 1, !dbg !51
  %.v1 = select i1 %111, i32 %112, i32 %113, !dbg !63
  %114 = bitcast i32 %.v1 to float, !dbg !63
  %115 = select i1 %110, float %114, float 0.000000e+00, !dbg !64
  %116 = extractvalue { i32, i32 } %74, 1, !dbg !56
  %117 = bitcast i32 %116 to float, !dbg !56
  %118 = select i1 %109, float %115, float %117, !dbg !65
  %119 = select i1 %37, float %108, float %118, !dbg !66
  %120 = bitcast i32 %25 to float, !dbg !19
  %121 = fsub float %119, %120, !dbg !67
  %122 = extractvalue { i32, i32 } %43, 0, !dbg !31
  %123 = bitcast i32 %122 to float, !dbg !31
  %124 = extractvalue { i32, i32 } %48, 0, !dbg !35
  %125 = bitcast i32 %124 to float, !dbg !35
  %126 = fadd float %123, %125, !dbg !59
  %127 = extractvalue { i32, i32 } %50, 0, !dbg !37
  %128 = bitcast i32 %127 to float, !dbg !37
  %129 = fadd float %126, %128, !dbg !60
  %130 = extractvalue { i32, i32 } %59, 0, !dbg !44
  %131 = extractvalue { i32, i32 } %68, 0, !dbg !51
  %.v = select i1 %111, i32 %130, i32 %131, !dbg !63
  %132 = bitcast i32 %.v to float, !dbg !63
  %133 = select i1 %110, float %132, float 0.000000e+00, !dbg !64
  %134 = extractvalue { i32, i32 } %74, 0, !dbg !56
  %135 = bitcast i32 %134 to float, !dbg !56
  %136 = select i1 %109, float %133, float %135, !dbg !65
  %137 = select i1 %37, float %129, float %136, !dbg !66
  %138 = bitcast i32 %24 to float, !dbg !19
  %139 = fsub float %137, %138, !dbg !67
  %140 = bitcast i32 %36 to float, !dbg !25
  %141 = bitcast i32 %35 to float, !dbg !25
  %142 = bitcast i32 %33 to float, !dbg !23
  %143 = bitcast i32 %32 to float, !dbg !23
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !68
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !68
  %146 = fmul float %139, %144, !dbg !69
  %147 = fmul float %121, %145, !dbg !69
  %148 = fmul float %146, %143, !dbg !70
  %149 = fmul float %147, %142, !dbg !70
  %150 = fadd float %148, %141, !dbg !71
  %151 = fadd float %149, %140, !dbg !71
  %152 = fcmp olt float %150, 0.000000e+00, !dbg !72
  %153 = fcmp olt float %151, 0.000000e+00, !dbg !72
  %154 = select i1 %152, float 0.000000e+00, float %150, !dbg !76
  %155 = select i1 %153, float 0.000000e+00, float %151, !dbg !76
  %156 = sext i32 %17 to i64, !dbg !77
  %157 = getelementptr float, ptr addrspace(1) %8, i64 %156, !dbg !77
  %158 = bitcast float %137 to i32, !dbg !78
  %159 = bitcast float %119 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %158, i32 %159, ptr addrspace(1) %157, i1 true) #3, !dbg !78
  %160 = getelementptr float, ptr addrspace(1) %9, i64 %156, !dbg !79
  %161 = bitcast float %154 to i32, !dbg !80
  %162 = bitcast float %155 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %161, i32 %162, ptr addrspace(1) %160, i1 true) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chvv3hqpd46futh72e4fsgep5fezx4xxi5orwk7xpw7fjgd3n5yv.py", directory: "inductor_cache/hv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_39, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_39, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_39", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 51, scope: !7)
!29 = !DILocation(line: 37, column: 45, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 56, scope: !7)
!32 = !DILocation(line: 38, column: 51, scope: !7)
!33 = !DILocation(line: 38, column: 45, scope: !7)
!34 = !DILocation(line: 38, column: 30, scope: !7)
!35 = !DILocation(line: 38, column: 56, scope: !7)
!36 = !DILocation(line: 40, column: 30, scope: !7)
!37 = !DILocation(line: 40, column: 56, scope: !7)
!38 = !DILocation(line: 52, column: 20, scope: !7)
!39 = !DILocation(line: 58, column: 20, scope: !7)
!40 = !DILocation(line: 59, column: 40, scope: !7)
!41 = !DILocation(line: 59, column: 36, scope: !7)
!42 = !DILocation(line: 59, column: 56, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 67, scope: !7)
!45 = !DILocation(line: 63, column: 20, scope: !7)
!46 = !DILocation(line: 64, column: 39, scope: !7)
!47 = !DILocation(line: 64, column: 48, scope: !7)
!48 = !DILocation(line: 64, column: 44, scope: !7)
!49 = !DILocation(line: 64, column: 75, scope: !7)
!50 = !DILocation(line: 64, column: 31, scope: !7)
!51 = !DILocation(line: 64, column: 86, scope: !7)
!52 = !DILocation(line: 68, column: 21, scope: !7)
!53 = !DILocation(line: 72, column: 44, scope: !7)
!54 = !DILocation(line: 72, column: 75, scope: !7)
!55 = !DILocation(line: 72, column: 31, scope: !7)
!56 = !DILocation(line: 72, column: 86, scope: !7)
!57 = !DILocation(line: 79, column: 20, scope: !7)
!58 = !DILocation(line: 80, column: 27, scope: !7)
!59 = !DILocation(line: 39, column: 18, scope: !7)
!60 = !DILocation(line: 41, column: 18, scope: !7)
!61 = !DILocation(line: 51, column: 20, scope: !7)
!62 = !DILocation(line: 57, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 35, scope: !7)
!64 = !DILocation(line: 67, column: 35, scope: !7)
!65 = !DILocation(line: 73, column: 35, scope: !7)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 77, column: 20, scope: !7)
!68 = !DILocation(line: 82, column: 20, scope: !7)
!69 = !DILocation(line: 85, column: 20, scope: !7)
!70 = !DILocation(line: 86, column: 20, scope: !7)
!71 = !DILocation(line: 87, column: 20, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!75 = !DILocation(line: 89, column: 42, scope: !7)
!76 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !75)
!77 = !DILocation(line: 90, column: 25, scope: !7)
!78 = !DILocation(line: 90, column: 37, scope: !7)
!79 = !DILocation(line: 91, column: 25, scope: !7)
!80 = !DILocation(line: 91, column: 37, scope: !7)
!81 = !DILocation(line: 91, column: 4, scope: !7)
