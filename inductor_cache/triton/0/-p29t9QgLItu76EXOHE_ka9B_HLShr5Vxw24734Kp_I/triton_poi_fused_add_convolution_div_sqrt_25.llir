; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_sqrt_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %11, 8, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = or disjoint i32 %13, 16, !dbg !13
  %16 = or disjoint i32 %13, 24, !dbg !13
  %17 = or disjoint i32 %13, 32, !dbg !13
  %18 = or disjoint i32 %13, 40, !dbg !13
  %19 = or disjoint i32 %13, 48, !dbg !13
  %20 = or disjoint i32 %13, 56, !dbg !13
  %21 = icmp slt i32 %13, 1536, !dbg !14
  %22 = icmp slt i32 %14, 1536, !dbg !14
  %23 = icmp slt i32 %15, 1536, !dbg !14
  %24 = icmp slt i32 %16, 1536, !dbg !14
  %25 = icmp slt i32 %17, 1536, !dbg !14
  %26 = icmp slt i32 %18, 1536, !dbg !14
  %27 = icmp slt i32 %19, 1536, !dbg !14
  %28 = icmp slt i32 %20, 1536, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %30 = shl i32 %29, 4, !dbg !16
  %31 = and i32 %9, 15, !dbg !17
  %32 = or disjoint i32 %30, %31, !dbg !18
  %33 = icmp slt i32 %32, 9, !dbg !19
  %34 = sdiv i32 %13, 384, !dbg !20
  %35 = sdiv i32 %14, 384, !dbg !20
  %36 = sdiv i32 %15, 384, !dbg !20
  %37 = sdiv i32 %16, 384, !dbg !20
  %38 = sdiv i32 %17, 384, !dbg !20
  %39 = sdiv i32 %18, 384, !dbg !20
  %40 = sdiv i32 %19, 384, !dbg !20
  %41 = sdiv i32 %20, 384, !dbg !20
  %42 = mul i32 %13, 9, !dbg !21
  %43 = mul i32 %14, 9, !dbg !21
  %44 = mul i32 %15, 9, !dbg !21
  %45 = mul i32 %16, 9, !dbg !21
  %46 = mul i32 %17, 9, !dbg !21
  %47 = mul i32 %18, 9, !dbg !21
  %48 = mul i32 %19, 9, !dbg !21
  %49 = mul i32 %20, 9, !dbg !21
  %50 = add i32 %32, %42, !dbg !22
  %51 = add i32 %32, %43, !dbg !22
  %52 = add i32 %32, %44, !dbg !22
  %53 = add i32 %32, %45, !dbg !22
  %54 = add i32 %32, %46, !dbg !22
  %55 = add i32 %32, %47, !dbg !22
  %56 = add i32 %32, %48, !dbg !22
  %57 = add i32 %32, %49, !dbg !22
  %58 = sext i32 %50 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !23
  %60 = sext i32 %51 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = sext i32 %52 to i64, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !23
  %64 = sext i32 %53 to i64, !dbg !23
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !23
  %66 = sext i32 %54 to i64, !dbg !23
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !23
  %68 = sext i32 %55 to i64, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !23
  %70 = sext i32 %56 to i64, !dbg !23
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !23
  %72 = sext i32 %57 to i64, !dbg !23
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !23
  %74 = and i1 %21, %33, !dbg !24
  %75 = and i1 %22, %33, !dbg !24
  %76 = and i1 %23, %33, !dbg !24
  %77 = and i1 %24, %33, !dbg !24
  %78 = and i1 %25, %33, !dbg !24
  %79 = and i1 %26, %33, !dbg !24
  %80 = and i1 %27, %33, !dbg !24
  %81 = and i1 %28, %33, !dbg !24
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %74) #4, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %75) #4, !dbg !25
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %76) #4, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %77) #4, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %78) #4, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %79) #4, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %80) #4, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %81) #4, !dbg !25
  %90 = mul nsw i32 %34, 9, !dbg !26
  %91 = mul nsw i32 %35, 9, !dbg !26
  %92 = mul nsw i32 %36, 9, !dbg !26
  %93 = mul nsw i32 %37, 9, !dbg !26
  %94 = mul nsw i32 %38, 9, !dbg !26
  %95 = mul nsw i32 %39, 9, !dbg !26
  %96 = mul nsw i32 %40, 9, !dbg !26
  %97 = mul nsw i32 %41, 9, !dbg !26
  %98 = add i32 %90, %32, !dbg !27
  %99 = add i32 %91, %32, !dbg !27
  %100 = add i32 %32, %92, !dbg !27
  %101 = add i32 %32, %93, !dbg !27
  %102 = add i32 %32, %94, !dbg !27
  %103 = add i32 %32, %95, !dbg !27
  %104 = add i32 %32, %96, !dbg !27
  %105 = add i32 %32, %97, !dbg !27
  %106 = sext i32 %98 to i64, !dbg !28
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !28
  %108 = sext i32 %99 to i64, !dbg !28
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !28
  %110 = sext i32 %100 to i64, !dbg !28
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !28
  %112 = sext i32 %101 to i64, !dbg !28
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !28
  %114 = sext i32 %102 to i64, !dbg !28
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !28
  %116 = sext i32 %103 to i64, !dbg !28
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !28
  %118 = sext i32 %104 to i64, !dbg !28
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !28
  %120 = sext i32 %105 to i64, !dbg !28
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !28
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %74) #4, !dbg !29
  %123 = bitcast i32 %122 to float, !dbg !29
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %75) #4, !dbg !29
  %125 = bitcast i32 %124 to float, !dbg !29
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %76) #4, !dbg !29
  %127 = bitcast i32 %126 to float, !dbg !29
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %77) #4, !dbg !29
  %129 = bitcast i32 %128 to float, !dbg !29
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %78) #4, !dbg !29
  %131 = bitcast i32 %130 to float, !dbg !29
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %79) #4, !dbg !29
  %133 = bitcast i32 %132 to float, !dbg !29
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %80) #4, !dbg !29
  %135 = bitcast i32 %134 to float, !dbg !29
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %81) #4, !dbg !29
  %137 = bitcast i32 %136 to float, !dbg !29
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i = icmp eq i32 %138, 0, !dbg !30
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i = icmp eq i32 %139, 0, !dbg !30
  br i1 %.not.i, label %145, label %140, !dbg !30

140:                                              ; preds = %6
  br i1 %.not1.i, label %143, label %141, !dbg !30

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

145:                                              ; preds = %6
  br i1 %.not1.i, label %148, label %146, !dbg !30

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %141, %143, %146, %148
  %.0.i = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !30
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i16 = icmp eq i32 %150, 0, !dbg !30
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i19 = icmp eq i32 %151, 0, !dbg !30
  br i1 %.not.i16, label %157, label %152, !dbg !30

152:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %155, label %153, !dbg !30

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #4, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #4, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

157:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %160, label %158, !dbg !30

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #4, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #4, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %153, %155, %158, %160
  %.0.i18 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !30
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i21 = icmp eq i32 %162, 0, !dbg !30
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i24 = icmp eq i32 %163, 0, !dbg !30
  br i1 %.not.i21, label %169, label %164, !dbg !30

164:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %167, label %165, !dbg !30

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #4, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #4, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

169:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %172, label %170, !dbg !30

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #4, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #4, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %165, %167, %170, %172
  %.0.i23 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !30
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i26 = icmp eq i32 %174, 0, !dbg !30
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i29 = icmp eq i32 %175, 0, !dbg !30
  br i1 %.not.i26, label %181, label %176, !dbg !30

176:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %179, label %177, !dbg !30

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #4, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #4, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

181:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %184, label %182, !dbg !30

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #4, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #4, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %177, %179, %182, %184
  %.0.i28 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !30
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i31 = icmp eq i32 %186, 0, !dbg !30
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i34 = icmp eq i32 %187, 0, !dbg !30
  br i1 %.not.i31, label %193, label %188, !dbg !30

188:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %191, label %189, !dbg !30

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #4, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #4, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

193:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %196, label %194, !dbg !30

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #4, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #4, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %189, %191, %194, %196
  %.0.i33 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !30
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i36 = icmp eq i32 %198, 0, !dbg !30
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i39 = icmp eq i32 %199, 0, !dbg !30
  br i1 %.not.i36, label %205, label %200, !dbg !30

200:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %203, label %201, !dbg !30

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #4, !dbg !30
  br label %__nv_sqrtf.exit40, !dbg !30

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #4, !dbg !30
  br label %__nv_sqrtf.exit40, !dbg !30

205:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %208, label %206, !dbg !30

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #4, !dbg !30
  br label %__nv_sqrtf.exit40, !dbg !30

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #4, !dbg !30
  br label %__nv_sqrtf.exit40, !dbg !30

__nv_sqrtf.exit40:                                ; preds = %201, %203, %206, %208
  %.0.i38 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !30
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i41 = icmp eq i32 %210, 0, !dbg !30
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i44 = icmp eq i32 %211, 0, !dbg !30
  br i1 %.not.i41, label %217, label %212, !dbg !30

212:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %215, label %213, !dbg !30

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #4, !dbg !30
  br label %__nv_sqrtf.exit45, !dbg !30

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #4, !dbg !30
  br label %__nv_sqrtf.exit45, !dbg !30

217:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %220, label %218, !dbg !30

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #4, !dbg !30
  br label %__nv_sqrtf.exit45, !dbg !30

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #4, !dbg !30
  br label %__nv_sqrtf.exit45, !dbg !30

__nv_sqrtf.exit45:                                ; preds = %213, %215, %218, %220
  %.0.i43 = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !30
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i46 = icmp eq i32 %222, 0, !dbg !30
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i49 = icmp eq i32 %223, 0, !dbg !30
  br i1 %.not.i46, label %229, label %224, !dbg !30

224:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %227, label %225, !dbg !30

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #4, !dbg !30
  br label %__nv_sqrtf.exit50, !dbg !30

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #4, !dbg !30
  br label %__nv_sqrtf.exit50, !dbg !30

229:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %232, label %230, !dbg !30

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #4, !dbg !30
  br label %__nv_sqrtf.exit50, !dbg !30

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #4, !dbg !30
  br label %__nv_sqrtf.exit50, !dbg !30

__nv_sqrtf.exit50:                                ; preds = %225, %227, %230, %232
  %.0.i48 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !30
  %234 = bitcast i32 %89 to float, !dbg !25
  %235 = bitcast i32 %88 to float, !dbg !25
  %236 = bitcast i32 %87 to float, !dbg !25
  %237 = bitcast i32 %86 to float, !dbg !25
  %238 = bitcast i32 %85 to float, !dbg !25
  %239 = bitcast i32 %84 to float, !dbg !25
  %240 = bitcast i32 %83 to float, !dbg !25
  %241 = bitcast i32 %82 to float, !dbg !25
  %242 = or disjoint i32 %30, %12, !dbg !18
  %243 = icmp slt i32 %242, 9, !dbg !19
  %244 = shl i32 %9, 2, !dbg !12
  %245 = and i32 %244, 60, !dbg !12
  %246 = or disjoint i32 %8, %245, !dbg !13
  %247 = icmp slt i32 %246, 1536, !dbg !14
  %248 = and i1 %247, %243, !dbg !24
  %249 = or disjoint i32 %30, %11, !dbg !18
  %250 = icmp slt i32 %249, 9, !dbg !19
  %251 = and i1 %247, %250, !dbg !24
  %.frozen = freeze i32 %246, !dbg !20
  %252 = sdiv i32 %.frozen, 384, !dbg !20
  %253 = mul i32 %252, 384, !dbg !31
  %.decomposed = sub i32 %.frozen, %253, !dbg !31
  %254 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !32
  %255 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !32
  %256 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !32
  %257 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !32
  %258 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !32
  %259 = fadd float %.0.i38, 0x3DDB7CDFE0000000, !dbg !32
  %260 = fadd float %.0.i43, 0x3DDB7CDFE0000000, !dbg !32
  %261 = fadd float %.0.i48, 0x3DDB7CDFE0000000, !dbg !32
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float %254) #4, !dbg !33
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float %255) #4, !dbg !33
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float %256) #4, !dbg !33
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %257) #4, !dbg !33
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %237, float %258) #4, !dbg !33
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %259) #4, !dbg !33
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %260) #4, !dbg !33
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %261) #4, !dbg !33
  %270 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !34
  %271 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !34
  %272 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !34
  %273 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !34
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !34
  %275 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !34
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !34
  %277 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !34
  %278 = bitcast float %262 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %278, ptr addrspace(1) %270, i1 %74) #4, !dbg !35
  %279 = bitcast float %263 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %279, ptr addrspace(1) %271, i1 %75) #4, !dbg !35
  %280 = bitcast float %264 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %280, ptr addrspace(1) %272, i1 %76) #4, !dbg !35
  %281 = bitcast float %265 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %281, ptr addrspace(1) %273, i1 %77) #4, !dbg !35
  %282 = bitcast float %266 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %282, ptr addrspace(1) %274, i1 %78) #4, !dbg !35
  %283 = bitcast float %267 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %283, ptr addrspace(1) %275, i1 %79) #4, !dbg !35
  %284 = bitcast float %268 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %284, ptr addrspace(1) %276, i1 %80) #4, !dbg !35
  %285 = bitcast float %269 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %285, ptr addrspace(1) %277, i1 %81) #4, !dbg !35
  %286 = mul i32 %249, 384, !dbg !36
  %287 = mul i32 %242, 384, !dbg !36
  %288 = mul i32 %252, 3456, !dbg !37
  %289 = add i32 %288, %.decomposed, !dbg !38
  %290 = add i32 %289, %286, !dbg !39
  %291 = add i32 %289, %287, !dbg !39
  %292 = sext i32 %290 to i64, !dbg !40
  %293 = getelementptr float, ptr addrspace(1) %3, i64 %292, !dbg !40
  %294 = sext i32 %291 to i64, !dbg !40
  %295 = getelementptr float, ptr addrspace(1) %3, i64 %294, !dbg !40
  %296 = shl i32 %9, 6, !dbg !41
  %297 = and i32 %296, 960, !dbg !41
  %298 = or disjoint i32 %297, %11, !dbg !41
  %299 = and i32 %244, 508, !dbg !41
  %300 = lshr exact i32 %297, 4, !dbg !41
  %301 = add nuw nsw i32 %300, %298, !dbg !41
  %302 = zext nneg i32 %301 to i64, !dbg !41
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %302, !dbg !41
  %304 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !41
  %305 = or disjoint i32 %298, 8, !dbg !41
  %306 = add nuw nsw i32 %305, %300, !dbg !41
  %307 = zext nneg i32 %306 to i64, !dbg !41
  %308 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %307, !dbg !41
  %309 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 true) #4, !dbg !41
  %310 = or disjoint i32 %298, 16, !dbg !41
  %311 = add nuw nsw i32 %310, %300, !dbg !41
  %312 = zext nneg i32 %311 to i64, !dbg !41
  %313 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %312, !dbg !41
  %314 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 true) #4, !dbg !41
  %315 = or disjoint i32 %298, 24, !dbg !41
  %316 = add nuw nsw i32 %315, %300, !dbg !41
  %317 = zext nneg i32 %316 to i64, !dbg !41
  %318 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %317, !dbg !41
  %319 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %319, i1 true) #4, !dbg !41
  %320 = or disjoint i32 %298, 32, !dbg !41
  %321 = add nuw nsw i32 %320, %300, !dbg !41
  %322 = zext nneg i32 %321 to i64, !dbg !41
  %323 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %322, !dbg !41
  %324 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #4, !dbg !41
  %325 = or disjoint i32 %298, 40, !dbg !41
  %326 = add nuw nsw i32 %325, %300, !dbg !41
  %327 = zext nneg i32 %326 to i64, !dbg !41
  %328 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %327, !dbg !41
  %329 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %329, i1 true) #4, !dbg !41
  %330 = or disjoint i32 %298, 48, !dbg !41
  %331 = add nuw nsw i32 %330, %300, !dbg !41
  %332 = zext nneg i32 %331 to i64, !dbg !41
  %333 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %332, !dbg !41
  %334 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #4, !dbg !41
  %335 = or disjoint i32 %298, 56, !dbg !41
  %336 = add nuw nsw i32 %335, %300, !dbg !41
  %337 = zext nneg i32 %336 to i64, !dbg !41
  %338 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %337, !dbg !41
  %339 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %340 = lshr i32 %244, 4, !dbg !41
  %341 = and i32 %340, 28, !dbg !41
  %342 = add nuw nsw i32 %341, %299, !dbg !41
  %343 = zext nneg i32 %342 to i64, !dbg !41
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %343, !dbg !41
  %345 = or disjoint i32 %299, 512, !dbg !41
  %346 = lshr i32 %345, 4, !dbg !41
  %347 = and i32 %346, 60, !dbg !41
  %348 = add nuw nsw i32 %347, %345, !dbg !41
  %349 = zext nneg i32 %348 to i64, !dbg !41
  %350 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %349, !dbg !41
  %351 = load <4 x i32>, ptr addrspace(3) %350, align 16, !dbg !41
  %.extract = load i32, ptr addrspace(3) %344, align 16, !dbg !41
  %352 = getelementptr inbounds i8, ptr addrspace(3) %344, i64 4, !dbg !41
  %.extract9 = load i32, ptr addrspace(3) %352, align 4, !dbg !41
  %353 = getelementptr inbounds i8, ptr addrspace(3) %344, i64 8, !dbg !41
  %.extract10 = load i32, ptr addrspace(3) %353, align 8, !dbg !41
  %354 = getelementptr inbounds i8, ptr addrspace(3) %344, i64 12, !dbg !41
  %.extract11 = load i32, ptr addrspace(3) %354, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %293, i1 %251) #4, !dbg !41
  %.extract12 = extractelement <4 x i32> %351, i64 0, !dbg !41
  %.extract13 = extractelement <4 x i32> %351, i64 1, !dbg !41
  %.extract14 = extractelement <4 x i32> %351, i64 2, !dbg !41
  %.extract15 = extractelement <4 x i32> %351, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %295, i1 %248) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c64pks6ob33pe2zjcaufj7p5xqt7yfuc47vtf6ndy3mcxe7kq3qm.py", directory: "inductor_cache/64")
!4 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_sqrt_25", linkageName: "triton_poi_fused_add_convolution_div_sqrt_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 50, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 33, column: 37, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 42, scope: !7)
!30 = !DILocation(line: 34, column: 26, scope: !7)
!31 = !DILocation(line: 31, column: 19, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 25, scope: !7)
!35 = !DILocation(line: 38, column: 43, scope: !7)
!36 = !DILocation(line: 39, column: 34, scope: !7)
!37 = !DILocation(line: 39, column: 44, scope: !7)
!38 = !DILocation(line: 39, column: 30, scope: !7)
!39 = !DILocation(line: 39, column: 39, scope: !7)
!40 = !DILocation(line: 39, column: 25, scope: !7)
!41 = !DILocation(line: 39, column: 55, scope: !7)
!42 = !DILocation(line: 39, column: 4, scope: !7)
