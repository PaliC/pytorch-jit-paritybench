; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_leaky_relu_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 2, !dbg !13
  %12 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %13 = sdiv i32 %.frozen, 64, !dbg !14
  %14 = sdiv i32 %12, 64, !dbg !14
  %15 = srem i32 %13, 64, !dbg !15
  %16 = srem i32 %14, 64, !dbg !15
  %17 = mul i32 %13, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = srem i32 %11, 64, !dbg !16
  %19 = sdiv i32 %10, 4096, !dbg !17
  %20 = sdiv i32 %12, 4096, !dbg !17
  %21 = sext i32 %15 to i64, !dbg !18
  %22 = getelementptr i64, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %16 to i64, !dbg !18
  %24 = getelementptr i64, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !19
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !19
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !19
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !19
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %33 = sext i32 %.decomposed to i64, !dbg !20
  %34 = getelementptr i64, ptr addrspace(1) %0, i64 %33, !dbg !20
  %35 = sext i32 %18 to i64, !dbg !20
  %36 = getelementptr i64, ptr addrspace(1) %0, i64 %35, !dbg !20
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !21
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !21
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !21
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !21
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !21
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !21
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !21
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !21
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !21
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !21
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !21
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !21
  %49 = lshr i64 %25, 58, !dbg !22
  %50 = and i64 %49, 32, !dbg !22
  %51 = add i64 %50, %25, !dbg !22
  %52 = lshr i64 %29, 58, !dbg !22
  %53 = and i64 %52, 32, !dbg !22
  %54 = add i64 %53, %29, !dbg !22
  %55 = lshr i64 %38, 58, !dbg !23
  %56 = and i64 %55, 32, !dbg !23
  %57 = lshr i64 %39, 58, !dbg !23
  %58 = and i64 %57, 32, !dbg !23
  %59 = lshr i64 %41, 58, !dbg !23
  %60 = and i64 %59, 32, !dbg !23
  %61 = lshr i64 %42, 58, !dbg !23
  %62 = and i64 %61, 32, !dbg !23
  %63 = lshr i64 %44, 58, !dbg !23
  %64 = and i64 %63, 32, !dbg !23
  %65 = lshr i64 %45, 58, !dbg !23
  %66 = and i64 %65, 32, !dbg !23
  %67 = lshr i64 %47, 58, !dbg !23
  %68 = and i64 %67, 32, !dbg !23
  %69 = lshr i64 %48, 58, !dbg !23
  %70 = and i64 %69, 32, !dbg !23
  %71 = shl i64 %51, 5, !dbg !24
  %72 = shl i64 %54, 5, !dbg !24
  %73 = shl nsw i32 %19, 10, !dbg !25
  %74 = shl nsw i32 %20, 10, !dbg !25
  %75 = sext i32 %73 to i64, !dbg !26
  %76 = sext i32 %74 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !27
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %56, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %71, !dbg !27
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %75, !dbg !27
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %58, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %71, !dbg !27
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %75, !dbg !27
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %60, !dbg !27
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %71, !dbg !27
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %75, !dbg !27
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !27
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %62, !dbg !27
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %71, !dbg !27
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %75, !dbg !27
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !27
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %64, !dbg !27
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %72, !dbg !27
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %76, !dbg !27
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !27
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %66, !dbg !27
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %72, !dbg !27
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %76, !dbg !27
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !27
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %68, !dbg !27
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %72, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %76, !dbg !27
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %70, !dbg !27
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %72, !dbg !27
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %76, !dbg !27
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !28
  %116 = bitcast i32 %115 to float, !dbg !28
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #1, !dbg !28
  %120 = bitcast i32 %119 to float, !dbg !28
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !28
  %122 = bitcast i32 %121 to float, !dbg !28
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !28
  %124 = bitcast i32 %123 to float, !dbg !28
  %125 = fcmp ogt float %110, 0.000000e+00, !dbg !29
  %126 = fcmp ogt float %112, 0.000000e+00, !dbg !29
  %127 = fcmp ogt float %114, 0.000000e+00, !dbg !29
  %128 = fcmp ogt float %116, 0.000000e+00, !dbg !29
  %129 = fcmp ogt float %118, 0.000000e+00, !dbg !29
  %130 = fcmp ogt float %120, 0.000000e+00, !dbg !29
  %131 = fcmp ogt float %122, 0.000000e+00, !dbg !29
  %132 = fcmp ogt float %124, 0.000000e+00, !dbg !29
  %133 = fmul float %110, 0x3FC99999A0000000, !dbg !30
  %134 = fmul float %112, 0x3FC99999A0000000, !dbg !30
  %135 = fmul float %114, 0x3FC99999A0000000, !dbg !30
  %136 = fmul float %116, 0x3FC99999A0000000, !dbg !30
  %137 = fmul float %118, 0x3FC99999A0000000, !dbg !30
  %138 = fmul float %120, 0x3FC99999A0000000, !dbg !30
  %139 = fmul float %122, 0x3FC99999A0000000, !dbg !30
  %140 = fmul float %124, 0x3FC99999A0000000, !dbg !30
  %141 = select i1 %125, float %110, float %133, !dbg !31
  %142 = select i1 %126, float %112, float %134, !dbg !31
  %143 = select i1 %127, float %114, float %135, !dbg !31
  %144 = select i1 %128, float %116, float %136, !dbg !31
  %145 = select i1 %129, float %118, float %137, !dbg !31
  %146 = select i1 %130, float %120, float %138, !dbg !31
  %147 = select i1 %131, float %122, float %139, !dbg !31
  %148 = select i1 %132, float %124, float %140, !dbg !31
  %149 = sext i32 %10 to i64, !dbg !32
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %149, !dbg !32
  %151 = sext i32 %12 to i64, !dbg !32
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %151, !dbg !32
  %153 = bitcast float %141 to i32, !dbg !33
  %154 = bitcast float %142 to i32, !dbg !33
  %155 = bitcast float %143 to i32, !dbg !33
  %156 = bitcast float %144 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %153, i32 %154, i32 %155, i32 %156, ptr addrspace(1) %150, i1 true) #1, !dbg !33
  %157 = bitcast float %145 to i32, !dbg !33
  %158 = bitcast float %146 to i32, !dbg !33
  %159 = bitcast float %147 to i32, !dbg !33
  %160 = bitcast float %148 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %157, i32 %158, i32 %159, i32 %160, ptr addrspace(1) %152, i1 true) #1, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py", directory: "inductor_cache/k7")
!4 = !{ptr @triton_poi_fused__unsafe_index_leaky_relu_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_leaky_relu_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_leaky_relu_31", linkageName: "triton_poi_fused__unsafe_index_leaky_relu_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 32, scope: !7)
!23 = !DILocation(line: 36, column: 32, scope: !7)
!24 = !DILocation(line: 37, column: 40, scope: !7)
!25 = !DILocation(line: 37, column: 52, scope: !7)
!26 = !DILocation(line: 37, column: 47, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 57, scope: !7)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 41, column: 19, scope: !7)
!31 = !DILocation(line: 42, column: 34, scope: !7)
!32 = !DILocation(line: 43, column: 25, scope: !7)
!33 = !DILocation(line: 43, column: 37, scope: !7)
!34 = !DILocation(line: 43, column: 4, scope: !7)
