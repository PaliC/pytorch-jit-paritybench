//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_poi_fused__unsafe_index_leaky_relu_31 // -- Begin function triton_poi_fused__unsafe_index_leaky_relu_31
                                        // @triton_poi_fused__unsafe_index_leaky_relu_31
.visible .entry triton_poi_fused__unsafe_index_leaky_relu_31(
	.param .u64 .ptr .global .align 1 triton_poi_fused__unsafe_index_leaky_relu_31_param_0,
	.param .u64 .ptr .global .align 1 triton_poi_fused__unsafe_index_leaky_relu_31_param_1,
	.param .u64 .ptr .global .align 1 triton_poi_fused__unsafe_index_leaky_relu_31_param_2,
	.param .u32 triton_poi_fused__unsafe_index_leaky_relu_31_param_3
)
.reqntid 128, 1, 1
{
	.reg .pred 	%p<31>;
	.reg .b32 	%r<54>;
	.reg .f32 	%f<25>;
	.reg .b64 	%rd<105>;
	.loc	1 19 0                          // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:19:0

// %bb.0:
	ld.param.u64 	%rd39, [triton_poi_fused__unsafe_index_leaky_relu_31_param_0];
	ld.param.u64 	%rd40, [triton_poi_fused__unsafe_index_leaky_relu_31_param_1];
$L__tmp0:
	.loc	1 21 28                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:21:28
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	.loc	1 21 33                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:21:33
	shl.b32 	%r18, %r1, 10;
	ld.param.u64 	%rd41, [triton_poi_fused__unsafe_index_leaky_relu_31_param_2];
	.loc	1 22 36                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:22:36
	mov.u32 	%r19, %tid.x;
	shl.b32 	%r20, %r19, 2;
	and.b32  	%r21, %r20, 508;
	.loc	1 22 23                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:22:23
	or.b32  	%r22, %r18, %r21;
	or.b32  	%r23, %r22, 2;
	or.b32  	%r24, %r22, 512;
	.loc	1 24 21                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:24:21
	shr.s32 	%r26, %r22, 31;
	shr.u32 	%r27, %r26, 26;
	add.s32 	%r28, %r22, %r27;
	shr.s32 	%r29, %r28, 6;
	bfe.s32 	%r30, %r1, 21, 1;
	.loc	1 25 19                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:25:19
	shr.u32 	%r31, %r30, 26;
	.loc	1 24 21                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:24:21
	add.s32 	%r32, %r24, %r31;
	shr.s32 	%r33, %r32, 6;
	.loc	1 24 27                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:24:27
	shr.u32 	%r34, %r29, 26;
	add.s32 	%r35, %r29, %r34;
	and.b32  	%r36, %r35, -64;
	sub.s32 	%r37, %r29, %r36;
	shr.u32 	%r38, %r33, 26;
	add.s32 	%r39, %r33, %r38;
	and.b32  	%r40, %r39, -64;
	sub.s32 	%r41, %r33, %r40;
	.loc	1 25 19                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:25:19
	and.b32  	%r42, %r28, -64;
	sub.s32 	%r43, %r22, %r42;
	add.s32 	%r44, %r23, %r31;
	and.b32  	%r45, %r44, -64;
	sub.s32 	%r46, %r23, %r45;
	.loc	1 26 19                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:26:19
	shr.u32 	%r47, %r30, 20;
	add.s32 	%r48, %r22, %r47;
	shr.s32 	%r49, %r48, 12;
	add.s32 	%r50, %r24, %r47;
	shr.s32 	%r51, %r50, 12;
	.loc	1 28 30                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:28:30
	mul.wide.s32 	%rd42, %r37, 8;
	add.s64 	%rd2, %rd39, %rd42;
	mul.wide.s32 	%rd43, %r41, 8;
	add.s64 	%rd10, %rd39, %rd43;
	mov.pred 	%p1, -1;
	.loc	1 28 35                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:28:35
	// begin inline asm
	mov.u64 %rd1, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd1 }, [ %rd2 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd3, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd3 }, [ %rd2 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd5, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd5 }, [ %rd2 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd7, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd7 }, [ %rd2 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd9, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd9 }, [ %rd10 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd11, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd11 }, [ %rd10 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd13, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd13 }, [ %rd10 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd15, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd15 }, [ %rd10 + 0 ];
	// end inline asm
	.loc	1 29 30                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:29:30
	mul.wide.s32 	%rd44, %r43, 8;
	add.s64 	%rd19, %rd39, %rd44;
	mul.wide.s32 	%rd45, %r46, 8;
	add.s64 	%rd22, %rd39, %rd45;
	.loc	1 29 35                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:29:35
	// begin inline asm
	mov.u64 %rd17, 0x0;
	mov.u64 %rd18, 0x0;
	@%p1 ld.global.L1::evict_last.v2.b64 { %rd17, %rd18 }, [ %rd19 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd20, 0x0;
	mov.u64 %rd21, 0x0;
	@%p1 ld.global.L1::evict_last.v2.b64 { %rd20, %rd21 }, [ %rd22 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd23, 0x0;
	mov.u64 %rd24, 0x0;
	@%p1 ld.global.L1::evict_last.v2.b64 { %rd23, %rd24 }, [ %rd19 + 0 ];
	// end inline asm
	// begin inline asm
	mov.u64 %rd26, 0x0;
	mov.u64 %rd27, 0x0;
	@%p1 ld.global.L1::evict_last.v2.b64 { %rd26, %rd27 }, [ %rd22 + 0 ];
	// end inline asm
	.loc	1 33 32                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:33:32
	shr.u64 	%rd46, %rd1, 58;
	and.b64  	%rd47, %rd46, 32;
	add.s64 	%rd48, %rd47, %rd1;
	shr.u64 	%rd49, %rd9, 58;
	and.b64  	%rd50, %rd49, 32;
	add.s64 	%rd51, %rd50, %rd9;
	.loc	1 37 52                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:37:52
	shl.b32 	%r52, %r49, 10;
	shl.b32 	%r53, %r51, 10;
	.loc	1 37 30                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:37:30
	shl.b64 	%rd52, %rd17, 2;
	add.s64 	%rd53, %rd40, %rd52;
	shr.u64 	%rd54, %rd17, 56;
	and.b64  	%rd55, %rd54, 128;
	add.s64 	%rd56, %rd53, %rd55;
	shl.b64 	%rd57, %rd48, 7;
	add.s64 	%rd58, %rd56, %rd57;
	mul.wide.s32 	%rd59, %r52, 4;
	add.s64 	%rd29, %rd58, %rd59;
	shl.b64 	%rd60, %rd18, 2;
	add.s64 	%rd61, %rd40, %rd60;
	shr.u64 	%rd62, %rd18, 56;
	and.b64  	%rd63, %rd62, 128;
	add.s64 	%rd64, %rd61, %rd63;
	add.s64 	%rd65, %rd64, %rd57;
	add.s64 	%rd30, %rd65, %rd59;
	shl.b64 	%rd66, %rd20, 2;
	add.s64 	%rd67, %rd40, %rd66;
	shr.u64 	%rd68, %rd20, 56;
	and.b64  	%rd69, %rd68, 128;
	add.s64 	%rd70, %rd67, %rd69;
	add.s64 	%rd71, %rd70, %rd57;
	add.s64 	%rd31, %rd71, %rd59;
	shl.b64 	%rd72, %rd21, 2;
	add.s64 	%rd73, %rd40, %rd72;
	shr.u64 	%rd74, %rd21, 56;
	and.b64  	%rd75, %rd74, 128;
	add.s64 	%rd76, %rd73, %rd75;
	add.s64 	%rd77, %rd76, %rd57;
	add.s64 	%rd32, %rd77, %rd59;
	shl.b64 	%rd78, %rd23, 2;
	add.s64 	%rd79, %rd40, %rd78;
	shr.u64 	%rd80, %rd23, 56;
	and.b64  	%rd81, %rd80, 128;
	add.s64 	%rd82, %rd79, %rd81;
	shl.b64 	%rd83, %rd51, 7;
	add.s64 	%rd84, %rd82, %rd83;
	mul.wide.s32 	%rd85, %r53, 4;
	add.s64 	%rd33, %rd84, %rd85;
	shl.b64 	%rd86, %rd24, 2;
	add.s64 	%rd87, %rd40, %rd86;
	shr.u64 	%rd88, %rd24, 56;
	and.b64  	%rd89, %rd88, 128;
	add.s64 	%rd90, %rd87, %rd89;
	add.s64 	%rd91, %rd90, %rd83;
	add.s64 	%rd34, %rd91, %rd85;
	shl.b64 	%rd92, %rd26, 2;
	add.s64 	%rd93, %rd40, %rd92;
	shr.u64 	%rd94, %rd26, 56;
	and.b64  	%rd95, %rd94, 128;
	add.s64 	%rd96, %rd93, %rd95;
	add.s64 	%rd97, %rd96, %rd83;
	add.s64 	%rd35, %rd97, %rd85;
	shl.b64 	%rd98, %rd27, 2;
	add.s64 	%rd99, %rd40, %rd98;
	shr.u64 	%rd100, %rd27, 56;
	and.b64  	%rd101, %rd100, 128;
	add.s64 	%rd102, %rd99, %rd101;
	add.s64 	%rd103, %rd102, %rd83;
	add.s64 	%rd36, %rd103, %rd85;
	.loc	1 37 57                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:37:57
	// begin inline asm
	mov.u32 %r2, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r2 }, [ %rd29 + 0 ];
	// end inline asm
	mov.b32 	%f1, %r2;
	// begin inline asm
	mov.u32 %r3, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r3 }, [ %rd30 + 0 ];
	// end inline asm
	mov.b32 	%f2, %r3;
	// begin inline asm
	mov.u32 %r4, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r4 }, [ %rd31 + 0 ];
	// end inline asm
	mov.b32 	%f3, %r4;
	// begin inline asm
	mov.u32 %r5, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r5 }, [ %rd32 + 0 ];
	// end inline asm
	mov.b32 	%f4, %r5;
	// begin inline asm
	mov.u32 %r6, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r6 }, [ %rd33 + 0 ];
	// end inline asm
	mov.b32 	%f5, %r6;
	// begin inline asm
	mov.u32 %r7, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r7 }, [ %rd34 + 0 ];
	// end inline asm
	mov.b32 	%f6, %r7;
	// begin inline asm
	mov.u32 %r8, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r8 }, [ %rd35 + 0 ];
	// end inline asm
	mov.b32 	%f7, %r8;
	// begin inline asm
	mov.u32 %r9, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r9 }, [ %rd36 + 0 ];
	// end inline asm
	mov.b32 	%f8, %r9;
	.loc	1 39 19                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:39:19
	setp.gt.f32 	%p23, %f1, 0f00000000;
	setp.gt.f32 	%p24, %f2, 0f00000000;
	setp.gt.f32 	%p25, %f3, 0f00000000;
	setp.gt.f32 	%p26, %f4, 0f00000000;
	setp.gt.f32 	%p27, %f5, 0f00000000;
	setp.gt.f32 	%p28, %f6, 0f00000000;
	setp.gt.f32 	%p29, %f7, 0f00000000;
	setp.gt.f32 	%p30, %f8, 0f00000000;
	.loc	1 41 19                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:41:19
	mul.f32 	%f9, %f1, 0f3E4CCCCD;
	mul.f32 	%f10, %f2, 0f3E4CCCCD;
	mul.f32 	%f11, %f3, 0f3E4CCCCD;
	mul.f32 	%f12, %f4, 0f3E4CCCCD;
	mul.f32 	%f13, %f5, 0f3E4CCCCD;
	mul.f32 	%f14, %f6, 0f3E4CCCCD;
	mul.f32 	%f15, %f7, 0f3E4CCCCD;
	mul.f32 	%f16, %f8, 0f3E4CCCCD;
	.loc	1 42 34                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:42:34
	selp.f32 	%f17, %f1, %f9, %p23;
	selp.f32 	%f18, %f2, %f10, %p24;
	selp.f32 	%f19, %f3, %f11, %p25;
	selp.f32 	%f20, %f4, %f12, %p26;
	selp.f32 	%f21, %f5, %f13, %p27;
	selp.f32 	%f22, %f6, %f14, %p28;
	selp.f32 	%f23, %f7, %f15, %p29;
	selp.f32 	%f24, %f8, %f16, %p30;
	.loc	1 43 25                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:43:25
	mul.wide.s32 	%rd104, %r22, 4;
	add.s64 	%rd37, %rd41, %rd104;
	add.s64 	%rd38, %rd37, 2048;
	.loc	1 43 37                         // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:43:37
	mov.b32 	%r10, %f17;
	mov.b32 	%r11, %f18;
	mov.b32 	%r12, %f19;
	mov.b32 	%r13, %f20;
	// begin inline asm
	@%p1 st.global.v4.b32 [ %rd37 + 0 ], { %r10, %r11, %r12, %r13 };
	// end inline asm
	mov.b32 	%r14, %f21;
	mov.b32 	%r15, %f22;
	mov.b32 	%r16, %f23;
	mov.b32 	%r17, %f24;
	// begin inline asm
	@%p1 st.global.v4.b32 [ %rd38 + 0 ], { %r14, %r15, %r16, %r17 };
	// end inline asm
	.loc	1 43 4                          // ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py:43:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/k7/ck7g2wbk3v3w444jxbvdi5hix52dhb2dasgxtwzlfb4ddg2lblfy.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 95                                 // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x58 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 107
.b8 55
.b8 103
.b8 50
.b8 119
.b8 98
.b8 107
.b8 51
.b8 118
.b8 51
.b8 119
.b8 52
.b8 52
.b8 52
.b8 106
.b8 120
.b8 98
.b8 118
.b8 100
.b8 105
.b8 53
.b8 104
.b8 105
.b8 120
.b8 53
.b8 50
.b8 100
.b8 104
.b8 98
.b8 50
.b8 100
.b8 97
.b8 115
.b8 103
.b8 120
.b8 116
.b8 119
.b8 122
.b8 108
.b8 102
.b8 98
.b8 52
.b8 100
.b8 100
.b8 103
.b8 50
.b8 108
.b8 98
.b8 108
.b8 102
.b8 121
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 107
.b8 55
.b8 0
	}
	.section	.debug_macinfo	{	}
