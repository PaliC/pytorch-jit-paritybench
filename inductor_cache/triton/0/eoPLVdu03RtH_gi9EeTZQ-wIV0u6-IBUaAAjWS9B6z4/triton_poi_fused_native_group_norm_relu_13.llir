; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 510, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = sdiv i32 %17, 256, !dbg !14
  %19 = srem i32 %18, 128, !dbg !15
  %20 = sext i32 %17 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !18
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = sdiv i32 %17, 1024, !dbg !20
  %26 = sext i32 %25 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = sext i32 %19 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !32
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float 1.024000e+03) #3, !dbg !33
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float 1.024000e+03) #3, !dbg !33
  %50 = fadd float %48, 0x3EE4F8B580000000, !dbg !34
  %51 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %52, 0, !dbg !35
  br i1 %.not.i, label %55, label %53, !dbg !35

53:                                               ; preds = %11
  %54 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %50), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

55:                                               ; preds = %11
  %56 = tail call float @llvm.nvvm.rsqrt.approx.f(float %50), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %53, %55
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], !dbg !35
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %57, 0, !dbg !35
  br i1 %.not.i1, label %60, label %58, !dbg !35

58:                                               ; preds = %__nv_rsqrtf.exit
  %59 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %51), !dbg !35
  br label %__nv_rsqrtf.exit3, !dbg !35

60:                                               ; preds = %__nv_rsqrtf.exit
  %61 = tail call float @llvm.nvvm.rsqrt.approx.f(float %51), !dbg !35
  br label %__nv_rsqrtf.exit3, !dbg !35

__nv_rsqrtf.exit3:                                ; preds = %58, %60
  %.0.i2 = phi float [ %59, %58 ], [ %61, %60 ], !dbg !35
  %62 = extractvalue { i32, i32 } %22, 1, !dbg !17
  %63 = extractvalue { i32, i32 } %24, 1, !dbg !19
  %64 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !22
  %65 = insertelement <2 x i32> %64, i32 %28, i64 1, !dbg !22
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !22
  %67 = extractvalue { i32, i32 } %22, 0, !dbg !17
  %68 = extractvalue { i32, i32 } %24, 0, !dbg !19
  %69 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !32
  %70 = insertelement <4 x i32> %69, i32 %46, i64 1, !dbg !32
  %71 = insertelement <4 x i32> %70, i32 %41, i64 2, !dbg !32
  %72 = insertelement <4 x i32> %71, i32 %40, i64 3, !dbg !32
  %73 = bitcast <4 x i32> %72 to <4 x float>, !dbg !32
  %74 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !30
  %75 = insertelement <4 x i32> %74, i32 %43, i64 1, !dbg !30
  %76 = insertelement <4 x i32> %75, i32 %38, i64 2, !dbg !30
  %77 = insertelement <4 x i32> %76, i32 %37, i64 3, !dbg !30
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !30
  %79 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !17
  %80 = insertelement <2 x i32> %79, i32 %67, i64 1, !dbg !17
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !17
  %82 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !19
  %83 = insertelement <2 x i32> %82, i32 %68, i64 1, !dbg !19
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !19
  %85 = fadd <2 x float> %81, %84, !dbg !36
  %86 = fsub <2 x float> %85, %66, !dbg !37
  %87 = insertelement <2 x float> poison, float %.0.i2, i64 0, !dbg !38
  %88 = insertelement <2 x float> %87, float %.0.i, i64 1, !dbg !38
  %89 = fmul <2 x float> %86, %88, !dbg !38
  %90 = shufflevector <2 x float> %89, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !38
  %91 = fmul <4 x float> %90, %78, !dbg !39
  %92 = fadd <4 x float> %91, %73, !dbg !40
  %93 = fcmp olt <4 x float> %92, zeroinitializer, !dbg !41
  %94 = extractelement <4 x i1> %93, i64 3, !dbg !45
  %95 = extractelement <4 x i1> %93, i64 2, !dbg !45
  %96 = extractelement <4 x i1> %93, i64 1, !dbg !47
  %97 = extractelement <4 x i1> %93, i64 0, !dbg !47
  %98 = getelementptr float, ptr addrspace(1) %8, i64 %20, !dbg !48
  %bc = bitcast <4 x float> %92 to <4 x i32>, !dbg !49
  %99 = extractelement <4 x i32> %bc, i64 3, !dbg !49
  %100 = select i1 %94, i32 0, i32 %99, !dbg !45
  %bc4 = bitcast <4 x float> %92 to <4 x i32>, !dbg !49
  %101 = extractelement <4 x i32> %bc4, i64 2, !dbg !49
  %102 = select i1 %95, i32 0, i32 %101, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %100, i32 %102, ptr addrspace(1) %98, i1 true) #3, !dbg !49
  %103 = getelementptr float, ptr addrspace(1) %9, i64 %20, !dbg !50
  %bc5 = bitcast <4 x float> %92 to <4 x i32>, !dbg !51
  %104 = extractelement <4 x i32> %bc5, i64 1, !dbg !51
  %105 = select i1 %96, i32 0, i32 %104, !dbg !47
  %bc6 = bitcast <4 x float> %92 to <4 x i32>, !dbg !51
  %106 = extractelement <4 x i32> %bc6, i64 0, !dbg !51
  %107 = select i1 %97, i32 0, i32 %106, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %105, i32 %107, ptr addrspace(1) %103, i1 true) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co5c3z4qdqk7mmdlusrhjxgumbxh5d2gxhphe2qtfrnz7bil2dn3.py", directory: "inductor_cache/o5")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_13", linkageName: "triton_poi_fused_native_group_norm_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 40, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !46)
!46 = !DILocation(line: 46, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 37, scope: !7)
!50 = !DILocation(line: 51, column: 25, scope: !7)
!51 = !DILocation(line: 51, column: 37, scope: !7)
!52 = !DILocation(line: 51, column: 4, scope: !7)
