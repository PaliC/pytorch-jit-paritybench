; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 2, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %17 = sdiv i32 %.frozen, 64, !dbg !14
  %18 = srem i32 %17, 64, !dbg !15
  %19 = mul i32 %17, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = srem i32 %16, 64, !dbg !16
  %21 = sdiv i32 %15, 4096, !dbg !17
  %22 = srem i32 %21, 4, !dbg !18
  %23 = sdiv i32 %15, 16384, !dbg !19
  %24 = sext i32 %18 to i64, !dbg !20
  %25 = getelementptr i64, ptr addrspace(1) %1, i64 %24, !dbg !20
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !21
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !21
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !21
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !21
  %30 = sext i32 %.decomposed to i64, !dbg !22
  %31 = getelementptr i64, ptr addrspace(1) %2, i64 %30, !dbg !22
  %32 = sext i32 %20 to i64, !dbg !22
  %33 = getelementptr i64, ptr addrspace(1) %2, i64 %32, !dbg !22
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !23
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !23
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !23
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !23
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !23
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !23
  %40 = getelementptr i64, ptr addrspace(1) %4, i64 %30, !dbg !24
  %41 = getelementptr i64, ptr addrspace(1) %4, i64 %32, !dbg !24
  %42 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !25
  %43 = extractvalue { i64, i64 } %42, 0, !dbg !25
  %44 = extractvalue { i64, i64 } %42, 1, !dbg !25
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !25
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !25
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %54 = getelementptr i64, ptr addrspace(1) %6, i64 %24, !dbg !28
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !29
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !29
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !29
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !29
  %59 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !30
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !31
  %61 = bitcast i32 %60 to float, !dbg !31
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !31
  %63 = bitcast i32 %62 to float, !dbg !31
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !31
  %65 = bitcast i32 %64 to float, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = lshr i64 %26, 60, !dbg !32
  %69 = and i64 %68, 8, !dbg !32
  %70 = add i64 %69, %26, !dbg !32
  %71 = lshr i64 %35, 60, !dbg !33
  %72 = and i64 %71, 8, !dbg !33
  %73 = add i64 %72, %35, !dbg !33
  %74 = lshr i64 %36, 60, !dbg !33
  %75 = and i64 %74, 8, !dbg !33
  %76 = add i64 %75, %36, !dbg !33
  %77 = lshr i64 %38, 60, !dbg !33
  %78 = and i64 %77, 8, !dbg !33
  %79 = add i64 %78, %38, !dbg !33
  %80 = lshr i64 %39, 60, !dbg !33
  %81 = and i64 %80, 8, !dbg !33
  %82 = add i64 %81, %39, !dbg !33
  %83 = sext i32 %22 to i64, !dbg !34
  %84 = shl i64 %70, 5, !dbg !35
  %85 = shl nsw i32 %23, 8, !dbg !36
  %86 = sext i32 %85 to i64, !dbg !37
  %.idx = shl i64 %73, 4, !dbg !38
  %87 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !38
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %83, !dbg !38
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %84, !dbg !38
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %86, !dbg !38
  %.idx1 = shl i64 %76, 4, !dbg !38
  %91 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !38
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %83, !dbg !38
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %84, !dbg !38
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %86, !dbg !38
  %.idx2 = shl i64 %79, 4, !dbg !38
  %95 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx2, !dbg !38
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %83, !dbg !38
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %84, !dbg !38
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %86, !dbg !38
  %.idx3 = shl i64 %82, 4, !dbg !38
  %99 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx3, !dbg !38
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %83, !dbg !38
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %84, !dbg !38
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %86, !dbg !38
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !39
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !39
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !39
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !39
  %107 = lshr i64 %43, 60, !dbg !40
  %108 = and i64 %107, 8, !dbg !40
  %109 = add i64 %108, %43, !dbg !40
  %110 = lshr i64 %44, 60, !dbg !40
  %111 = and i64 %110, 8, !dbg !40
  %112 = add i64 %111, %44, !dbg !40
  %113 = lshr i64 %46, 60, !dbg !40
  %114 = and i64 %113, 8, !dbg !40
  %115 = add i64 %114, %46, !dbg !40
  %116 = lshr i64 %47, 60, !dbg !40
  %117 = and i64 %116, 8, !dbg !40
  %118 = add i64 %117, %47, !dbg !40
  %.idx4 = shl i64 %109, 4, !dbg !41
  %119 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx4, !dbg !41
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %83, !dbg !41
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %84, !dbg !41
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %86, !dbg !41
  %.idx5 = shl i64 %112, 4, !dbg !41
  %123 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx5, !dbg !41
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %83, !dbg !41
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %84, !dbg !41
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %86, !dbg !41
  %.idx6 = shl i64 %115, 4, !dbg !41
  %127 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx6, !dbg !41
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %83, !dbg !41
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %84, !dbg !41
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %86, !dbg !41
  %.idx7 = shl i64 %118, 4, !dbg !41
  %131 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx7, !dbg !41
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %83, !dbg !41
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %84, !dbg !41
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %86, !dbg !41
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !42
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !42
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #1, !dbg !42
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !42
  %139 = lshr i64 %55, 60, !dbg !43
  %140 = and i64 %139, 8, !dbg !43
  %141 = add i64 %140, %55, !dbg !43
  %142 = shl i64 %141, 5, !dbg !44
  %143 = getelementptr float, ptr addrspace(1) %88, i64 %142, !dbg !45
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %86, !dbg !45
  %145 = getelementptr float, ptr addrspace(1) %92, i64 %142, !dbg !45
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %86, !dbg !45
  %147 = getelementptr float, ptr addrspace(1) %96, i64 %142, !dbg !45
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %86, !dbg !45
  %149 = getelementptr float, ptr addrspace(1) %100, i64 %142, !dbg !45
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %86, !dbg !45
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !46
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !46
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !46
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !46
  %155 = getelementptr float, ptr addrspace(1) %120, i64 %142, !dbg !47
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %86, !dbg !47
  %157 = getelementptr float, ptr addrspace(1) %124, i64 %142, !dbg !47
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %86, !dbg !47
  %159 = getelementptr float, ptr addrspace(1) %128, i64 %142, !dbg !47
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %86, !dbg !47
  %161 = getelementptr float, ptr addrspace(1) %132, i64 %142, !dbg !47
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %86, !dbg !47
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !48
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !48
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #1, !dbg !48
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #1, !dbg !48
  %167 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !46
  %168 = insertelement <2 x i32> %167, i32 %103, i64 1, !dbg !46
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !46
  %170 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !48
  %171 = insertelement <2 x i32> %170, i32 %135, i64 1, !dbg !48
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !48
  %173 = fsub <2 x float> %172, %169, !dbg !49
  %174 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !50
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !50
  %176 = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %177 = fmul <2 x float> %173, %176, !dbg !50
  %178 = fadd <2 x float> %177, %169, !dbg !51
  %179 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !46
  %180 = insertelement <2 x i32> %179, i32 %104, i64 1, !dbg !46
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !46
  %182 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !48
  %183 = insertelement <2 x i32> %182, i32 %136, i64 1, !dbg !48
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !48
  %185 = fsub <2 x float> %184, %181, !dbg !49
  %186 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !50
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !50
  %188 = shufflevector <2 x float> %187, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %189 = fmul <2 x float> %185, %188, !dbg !50
  %190 = fadd <2 x float> %189, %181, !dbg !51
  %191 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !46
  %192 = insertelement <2 x i32> %191, i32 %105, i64 1, !dbg !46
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !46
  %194 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !48
  %195 = insertelement <2 x i32> %194, i32 %137, i64 1, !dbg !48
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !48
  %197 = fsub <2 x float> %196, %193, !dbg !49
  %198 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !50
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !50
  %200 = shufflevector <2 x float> %199, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %201 = fmul <2 x float> %197, %200, !dbg !50
  %202 = fadd <2 x float> %201, %193, !dbg !51
  %203 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !46
  %204 = insertelement <2 x i32> %203, i32 %106, i64 1, !dbg !46
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !46
  %206 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !48
  %207 = insertelement <2 x i32> %206, i32 %138, i64 1, !dbg !48
  %208 = bitcast <2 x i32> %207 to <2 x float>, !dbg !48
  %209 = fsub <2 x float> %208, %205, !dbg !49
  %210 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !50
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !50
  %212 = shufflevector <2 x float> %211, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %213 = fmul <2 x float> %209, %212, !dbg !50
  %214 = fadd <2 x float> %213, %205, !dbg !51
  %215 = extractelement <2 x float> %178, i64 0, !dbg !52
  %216 = extractelement <2 x float> %178, i64 1, !dbg !53
  %217 = fsub float %215, %216, !dbg !52
  %218 = extractelement <2 x float> %190, i64 0, !dbg !52
  %219 = extractelement <2 x float> %190, i64 1, !dbg !53
  %220 = fsub float %218, %219, !dbg !52
  %221 = extractelement <2 x float> %202, i64 0, !dbg !52
  %222 = extractelement <2 x float> %202, i64 1, !dbg !53
  %223 = fsub float %221, %222, !dbg !52
  %224 = extractelement <2 x float> %214, i64 0, !dbg !52
  %225 = extractelement <2 x float> %214, i64 1, !dbg !53
  %226 = fsub float %224, %225, !dbg !52
  %227 = fmul float %217, %61, !dbg !54
  %228 = fmul float %220, %63, !dbg !54
  %229 = fmul float %223, %65, !dbg !54
  %230 = fmul float %226, %67, !dbg !54
  %231 = fadd float %216, %227, !dbg !53
  %232 = fadd float %219, %228, !dbg !53
  %233 = fadd float %222, %229, !dbg !53
  %234 = fadd float %225, %230, !dbg !53
  %235 = sext i32 %15 to i64, !dbg !55
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !55
  %237 = bitcast float %231 to i32, !dbg !56
  %238 = bitcast float %232 to i32, !dbg !56
  %239 = bitcast float %233 to i32, !dbg !56
  %240 = bitcast float %234 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %238, i32 %239, i32 %240, ptr addrspace(1) %236, i1 true) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw6sh2xlamegk4o7ollm4sxcdm5r7zeke4cglbpp6uii56noty3o.py", directory: "inductor_cache/w6")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_53, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_53, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_53", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 32, scope: !7)
!33 = !DILocation(line: 41, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 35, scope: !7)
!35 = !DILocation(line: 42, column: 47, scope: !7)
!36 = !DILocation(line: 42, column: 58, scope: !7)
!37 = !DILocation(line: 42, column: 54, scope: !7)
!38 = !DILocation(line: 42, column: 30, scope: !7)
!39 = !DILocation(line: 42, column: 63, scope: !7)
!40 = !DILocation(line: 45, column: 35, scope: !7)
!41 = !DILocation(line: 46, column: 31, scope: !7)
!42 = !DILocation(line: 46, column: 65, scope: !7)
!43 = !DILocation(line: 52, column: 35, scope: !7)
!44 = !DILocation(line: 53, column: 48, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 65, scope: !7)
!47 = !DILocation(line: 54, column: 31, scope: !7)
!48 = !DILocation(line: 54, column: 66, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 59, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 28, scope: !7)
!56 = !DILocation(line: 61, column: 40, scope: !7)
!57 = !DILocation(line: 61, column: 4, scope: !7)
