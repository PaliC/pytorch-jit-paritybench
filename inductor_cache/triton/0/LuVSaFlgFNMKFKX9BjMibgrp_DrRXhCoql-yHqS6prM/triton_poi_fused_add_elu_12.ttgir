#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_elu_12(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":19:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %6 = tt.addptr %5, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc6)
    %7 = tt.load %6 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %8, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc8)
    %10 = tt.load %9 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = arith.cmpf ogt, %10, %cst : tensor<256xf32, #blocked> loc(#loc10)
    %12 = tt.extern_elementwise %10 {libname = "", libpath = "", pure = true, symbol = "__nv_expm1f"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc11)
    %13 = arith.select %11, %10, %12 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc12)
    %14 = arith.addf %7, %13 : tensor<256xf32, #blocked> loc(#loc13)
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = tt.addptr %15, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc14)
    tt.store %16, %14 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc15)
    tt.return loc(#loc16)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":21:28)
#loc3 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":21:33)
#loc4 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":22:36)
#loc5 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":22:23)
#loc6 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":25:30)
#loc7 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":25:35)
#loc8 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":26:30)
#loc9 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":26:35)
#loc10 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":28:18)
#loc11 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":31:27)
#loc12 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":33:32)
#loc13 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":34:18)
#loc14 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":35:25)
#loc15 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":35:36)
#loc16 = loc("inductor_cache/x5/cx5j5yppb3hidw55fi3csbcpqptwl2tzw4hffi3kxexloifyk2vm.py":35:4)
