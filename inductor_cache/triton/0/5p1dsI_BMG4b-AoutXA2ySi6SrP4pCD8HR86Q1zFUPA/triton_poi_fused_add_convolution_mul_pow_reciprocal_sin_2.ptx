//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2 // -- Begin function triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
.global .align 4 .b8 __cudart_i2opi_f[24] = {65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};
                                        // @triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2
.visible .entry triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2(
	.param .u64 .ptr .global .align 1 triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2_param_0,
	.param .u64 .ptr .global .align 1 triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2_param_1,
	.param .u64 .ptr .global .align 1 triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2_param_2,
	.param .u64 .ptr .global .align 1 triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2_param_3,
	.param .u32 triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2_param_4
)
.reqntid 128, 1, 1
{
	.local .align 4 .b8 	__local_depot0[28];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<24>;
	.reg .b32 	%r<143>;
	.reg .f32 	%f<106>;
	.reg .b64 	%rd<41>;
	.reg .f64 	%fd<5>;
	.loc	1 19 0                          // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:19:0

// %bb.0:
	mov.u64 	%SPL, __local_depot0;
	ld.param.u64 	%rd13, [triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2_param_0];
	ld.param.u64 	%rd14, [triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2_param_1];
	add.u64 	%rd16, %SPL, 0;
	ld.param.u64 	%rd17, [triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2_param_2];
	add.u64 	%rd19, %SPL, 0;
$L__tmp0:
	.loc	1 21 28                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:21:28
	// begin inline asm
	mov.u32 %r41, %ctaid.x;
	// end inline asm
	.loc	1 21 33                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:21:33
	shl.b32 	%r54, %r41, 8;
	.loc	1 22 36                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:22:36
	mov.u32 	%r55, %tid.x;
	shl.b32 	%r56, %r55, 1;
	and.b32  	%r57, %r56, 254;
	.loc	1 22 23                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:22:23
	or.b32  	%r58, %r54, %r57;
	.loc	1 23 21                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:23:21
	setp.lt.s32 	%p1, %r58, 256;
	.loc	1 25 21                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:25:21
	bfe.s32 	%r59, %r41, 23, 1;
	shr.u32 	%r60, %r59, 30;
	add.s32 	%r61, %r58, %r60;
	shr.s32 	%r62, %r61, 2;
	.loc	1 25 26                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:25:26
	shr.s32 	%r63, %r61, 31;
	shr.u32 	%r64, %r63, 28;
	add.s32 	%r65, %r62, %r64;
	and.b32  	%r66, %r65, -16;
	sub.s32 	%r67, %r62, %r66;
	.loc	1 26 34                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:26:34
	mul.wide.s32 	%rd20, %r58, 4;
	add.s64 	%rd36, %rd13, %rd20;
	.loc	1 26 39                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:26:39
	// begin inline asm
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	@%p1 ld.global.v2.b32 { %r42, %r43 }, [ %rd36 + 0 ];
	// end inline asm
	mov.b32 	%f37, %r42;
	mov.b32 	%f38, %r43;
	.loc	1 27 30                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:27:30
	mul.wide.s32 	%rd21, %r67, 4;
	add.s64 	%rd9, %rd14, %rd21;
	.loc	1 27 35                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:27:35
	// begin inline asm
	mov.u32 %r44, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r44 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	%f39, %r44;
	// begin inline asm
	mov.u32 %r45, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r45 }, [ %rd9 + 0 ];
	// end inline asm
	mov.b32 	%f40, %r45;
	.loc	1 28 30                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:28:30
	add.s64 	%rd11, %rd17, %rd21;
	.loc	1 28 35                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:28:35
	// begin inline asm
	mov.u32 %r46, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r46 }, [ %rd11 + 0 ];
	// end inline asm
	mov.b32 	%f41, %r46;
	// begin inline asm
	mov.u32 %r47, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r47 }, [ %rd11 + 0 ];
	// end inline asm
	.loc	1 29 18                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:29:18
	add.f32 	%f1, %f37, %f39;
	.loc	1 34 18                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:34:18
	mul.f32 	%f5, %f1, %f41;
	.loc	1 35 23                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:35:23
	mul.f32 	%f45, %f5, 0f3F22F983;
	cvt.rni.ftz.s32.f32 	%r137, %f45;
	cvt.rn.f32.s32 	%f46, %r137;
	mov.f32 	%f47, 0fBFC90FDA;
	fma.rn.ftz.f32 	%f48, %f46, %f47, %f5;
	mov.f32 	%f49, 0fB3A22168;
	fma.rn.ftz.f32 	%f50, %f46, %f49, %f48;
	mov.f32 	%f51, 0fA7C234C5;
	fma.rn.ftz.f32 	%f96, %f46, %f51, %f50;
	abs.ftz.f32 	%f8, %f5;
	setp.ltu.f32 	%p6, %f8, 0f47CE4780;
	mov.f32 	%f93, 0f00000000;
	@%p6 bra 	$L__BB0_8;
// %bb.1:                               // %__nv_isinff.exit.i.i.i
	setp.neu.f32 	%p7, %f8, 0f7F800000;
	@%p7 bra 	$L__BB0_3;
// %bb.2:                               // %__nv_fmul_rn.exit.i.i.i
	mul.rn.ftz.f32 	%f96, %f5, %f93;
	mov.b32 	%r137, 0;
	bra.uni 	$L__BB0_8;
$L__BB0_3:
	.loc	1 0 23                          // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:0:23
	cvt.u32.u64 	%r2, %rd19;
	.loc	1 35 23                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:35:23
	mov.b32 	%r4, %f5;
	shr.u32 	%r5, %r4, 23;
	and.b32  	%r69, %r5, 224;
	add.s32 	%r70, %r69, -128;
	shl.b32 	%r71, %r4, 8;
	or.b32  	%r75, %r71, -2147483648;
	shr.u32 	%r7, %r70, 5;
	mov.b32 	%r134, 0;
	mov.u64 	%rd39, 0;
	mov.u64 	%rd23, __cudart_i2opi_f;
	mov.u32 	%r133, %r2;
$L__BB0_4:                              // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	add.s64 	%rd24, %rd23, %rd39;
	ld.global.nc.u32 	%r74, [%rd24];
	// begin inline asm
	{
	mad.lo.cc.u32   %r72, %r74, %r75, %r134;
	madc.hi.u32     %r134, %r74, %r75,  0;
	}
	// end inline asm
	st.local.u32 	[%r133], %r72;
	add.s32 	%r133, %r133, 4;
	add.s64 	%rd39, %rd39, 4;
	setp.ne.s64 	%p8, %rd39, 24;
	@%p8 bra 	$L__BB0_4;
// %bb.5:
	st.local.u32 	[%r2+24], %r134;
	and.b32  	%r12, %r5, 31;
	shl.b32 	%r77, %r7, 2;
	sub.s32 	%r13, %r2, %r77;
	ld.local.u32 	%r135, [%r13+24];
	ld.local.u32 	%r136, [%r13+20];
	setp.eq.s32 	%p9, %r12, 0;
	@%p9 bra 	$L__BB0_7;
// %bb.6:
	.loc	1 0 23                          // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:0:23
	mov.b32 	%r78, 32;
	.loc	1 35 23                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:35:23
	sub.s32 	%r79, %r78, %r12;
	shl.b32 	%r80, %r135, %r12;
	shr.u32 	%r81, %r136, %r79;
	add.s32 	%r135, %r81, %r80;
	shl.b32 	%r82, %r136, %r12;
	ld.local.u32 	%r83, [%r13+16];
	shr.u32 	%r84, %r83, %r79;
	add.s32 	%r136, %r84, %r82;
$L__BB0_7:                              // %__internal_trig_reduction_slowpath.exit.i.i.i
	shr.u32 	%r85, %r135, 30;
	shf.l.wrap.b32 	%r86, %r136, %r135, 2;
	shl.b32 	%r87, %r136, 2;
	shr.u32 	%r88, %r86, 31;
	add.s32 	%r89, %r88, %r85;
	neg.s32 	%r90, %r89;
	setp.lt.s32 	%p10, %r4, 0;
	selp.b32 	%r137, %r90, %r89, %p10;
	xor.b32  	%r91, %r86, %r4;
	shr.s32 	%r92, %r86, 31;
	xor.b32  	%r93, %r92, %r86;
	xor.b32  	%r94, %r92, %r87;
	cvt.u64.u32 	%rd25, %r93;
	shl.b64 	%rd26, %rd25, 32;
	cvt.u64.u32 	%rd27, %r94;
	or.b64  	%rd28, %rd26, %rd27;
	cvt.rn.f64.s64 	%fd1, %rd28;
	mul.f64 	%fd2, %fd1, 0d3BF921FB54442D19;
	cvt.rn.f32.f64 	%f52, %fd2;
	neg.f32 	%f53, %f52;
	setp.lt.s32 	%p11, %r91, 0;
	selp.f32 	%f96, %f53, %f52, %p11;
$L__BB0_8:                              // %__internal_trig_reduction_kernel.exit.i.i
	.loc	1 0 0                           // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:0:0
	mov.b32 	%f42, %r47;
	add.f32 	%f2, %f38, %f40;
	.loc	1 35 23                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:35:23
	mul.rn.ftz.f32 	%f12, %f96, %f96;
	and.b32  	%r96, %r137, 1;
	setp.eq.b32 	%p12, %r96, 1;
	selp.f32 	%f13, 0f3F800000, %f96, %p12;
	fma.rn.ftz.f32 	%f14, %f12, %f13, %f93;
	mov.f32 	%f59, 0fBAB607ED;
	mov.f32 	%f60, 0f37CBAC00;
	mov.f32 	%f99, 0fB94D4153;
	mov.f32 	%f98, 0f3C0885E4;
	mov.f32 	%f97, 0fBE2AAAA8;
	@!%p12 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_9:                              // %__internal_fmad.exit1.i.i.i
	.loc	1 0 23                          // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:0:23
	fma.rn.ftz.f32 	%f99, %f60, %f12, %f59;
	mov.f32 	%f98, 0f3D2AAABB;
	mov.f32 	%f97, 0fBEFFFFFF;
$L__BB0_10:                             // %__internal_fmad.exit2.i.i.i
	add.f32 	%f43, %f41, 0f3089705F;
	add.f32 	%f44, %f42, 0f3089705F;
	mov.b32 	%r49, 1065353216;
	mul.f32 	%f6, %f2, %f42;
	.loc	1 35 23                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:35:23
	fma.rn.ftz.f32 	%f63, %f99, %f12, %f98;
	fma.rn.ftz.f32 	%f64, %f63, %f12, %f97;
	fma.rn.ftz.f32 	%f100, %f64, %f14, %f13;
	and.b32  	%r97, %r137, 2;
	setp.eq.s32 	%p13, %r97, 0;
	mov.f32 	%f66, 0fBF800000;
	@%p13 bra 	$L__BB0_12;
// %bb.11:                              // %__internal_fmad.exit5.i.i.i
	.loc	1 0 23                          // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:0:23
	fma.rn.ftz.f32 	%f100, %f100, %f66, %f93;
$L__BB0_12:                             // %__nv_sinf.exit
	mov.b32 	%r50, %f43;
	mov.b32 	%r53, %f44;
	.loc	1 35 23                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:35:23
	mul.f32 	%f67, %f6, 0f3F22F983;
	cvt.rni.ftz.s32.f32 	%r142, %f67;
	cvt.rn.f32.s32 	%f68, %r142;
	fma.rn.ftz.f32 	%f70, %f68, %f47, %f6;
	fma.rn.ftz.f32 	%f72, %f68, %f49, %f70;
	fma.rn.ftz.f32 	%f101, %f68, %f51, %f72;
	abs.ftz.f32 	%f23, %f6;
	setp.ltu.f32 	%p14, %f23, 0f47CE4780;
	@%p14 bra 	$L__BB0_20;
// %bb.13:                              // %__nv_isinff.exit.i.i.i12
	setp.neu.f32 	%p15, %f23, 0f7F800000;
	@%p15 bra 	$L__BB0_15;
// %bb.14:                              // %__nv_fmul_rn.exit.i.i.i52
	mul.rn.ftz.f32 	%f101, %f6, %f93;
	mov.b32 	%r142, 0;
	bra.uni 	$L__BB0_20;
$L__BB0_15:
	.loc	1 0 23                          // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:0:23
	cvt.u32.u64 	%r1, %rd16;
	.loc	1 35 23                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:35:23
	mov.b32 	%r23, %f6;
	shr.u32 	%r24, %r23, 23;
	and.b32  	%r99, %r24, 224;
	add.s32 	%r100, %r99, -128;
	shl.b32 	%r101, %r23, 8;
	or.b32  	%r105, %r101, -2147483648;
	shr.u32 	%r26, %r100, 5;
	mov.b32 	%r139, 0;
	mov.u64 	%rd40, 0;
	mov.u64 	%rd30, __cudart_i2opi_f;
	mov.u32 	%r138, %r1;
$L__BB0_16:                             // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	add.s64 	%rd31, %rd30, %rd40;
	ld.global.nc.u32 	%r104, [%rd31];
	// begin inline asm
	{
	mad.lo.cc.u32   %r102, %r104, %r105, %r139;
	madc.hi.u32     %r139, %r104, %r105,  0;
	}
	// end inline asm
	st.local.u32 	[%r138], %r102;
	add.s32 	%r138, %r138, 4;
	add.s64 	%rd40, %rd40, 4;
	setp.ne.s64 	%p16, %rd40, 24;
	@%p16 bra 	$L__BB0_16;
// %bb.17:
	st.local.u32 	[%r1+24], %r139;
	and.b32  	%r31, %r24, 31;
	shl.b32 	%r107, %r26, 2;
	sub.s32 	%r32, %r1, %r107;
	ld.local.u32 	%r140, [%r32+24];
	ld.local.u32 	%r141, [%r32+20];
	setp.eq.s32 	%p17, %r31, 0;
	@%p17 bra 	$L__BB0_19;
// %bb.18:
	.loc	1 0 23                          // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:0:23
	mov.b32 	%r108, 32;
	.loc	1 35 23                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:35:23
	sub.s32 	%r109, %r108, %r31;
	shl.b32 	%r110, %r140, %r31;
	shr.u32 	%r111, %r141, %r109;
	add.s32 	%r140, %r111, %r110;
	shl.b32 	%r112, %r141, %r31;
	ld.local.u32 	%r113, [%r32+16];
	shr.u32 	%r114, %r113, %r109;
	add.s32 	%r141, %r114, %r112;
$L__BB0_19:                             // %__internal_trig_reduction_slowpath.exit.i.i.i18
	shr.u32 	%r115, %r140, 30;
	shf.l.wrap.b32 	%r116, %r141, %r140, 2;
	shl.b32 	%r117, %r141, 2;
	shr.u32 	%r118, %r116, 31;
	add.s32 	%r119, %r118, %r115;
	neg.s32 	%r120, %r119;
	setp.lt.s32 	%p18, %r23, 0;
	selp.b32 	%r142, %r120, %r119, %p18;
	xor.b32  	%r121, %r116, %r23;
	shr.s32 	%r122, %r116, 31;
	xor.b32  	%r123, %r122, %r116;
	xor.b32  	%r124, %r122, %r117;
	cvt.u64.u32 	%rd32, %r123;
	shl.b64 	%rd33, %rd32, 32;
	cvt.u64.u32 	%rd34, %r124;
	or.b64  	%rd35, %rd33, %rd34;
	cvt.rn.f64.s64 	%fd3, %rd35;
	mul.f64 	%fd4, %fd3, 0d3BF921FB54442D19;
	cvt.rn.f32.f64 	%f74, %fd4;
	neg.f32 	%f75, %f74;
	setp.lt.s32 	%p19, %r121, 0;
	selp.f32 	%f101, %f75, %f74, %p19;
$L__BB0_20:                             // %__internal_trig_reduction_kernel.exit.i.i29
	.loc	1 0 0                           // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:0:0
	// begin inline asm
	div.full.f32 %r48, %r49, %r50;
	// end inline asm
	// begin inline asm
	div.full.f32 %r51, %r49, %r53;
	// end inline asm
	.loc	1 35 23                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:35:23
	mul.rn.ftz.f32 	%f27, %f101, %f101;
	and.b32  	%r126, %r142, 1;
	setp.eq.b32 	%p20, %r126, 1;
	selp.f32 	%f28, 0f3F800000, %f101, %p20;
	fma.rn.ftz.f32 	%f29, %f27, %f28, %f93;
	mov.f32 	%f104, 0fB94D4153;
	mov.f32 	%f103, 0f3C0885E4;
	mov.f32 	%f102, 0fBE2AAAA8;
	@!%p20 bra 	$L__BB0_22;
	bra.uni 	$L__BB0_21;
$L__BB0_21:                             // %__internal_fmad.exit1.i.i.i37
	.loc	1 0 23                          // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:0:23
	fma.rn.ftz.f32 	%f104, %f60, %f27, %f59;
	mov.f32 	%f103, 0f3D2AAABB;
	mov.f32 	%f102, 0fBEFFFFFF;
$L__BB0_22:                             // %__internal_fmad.exit2.i.i.i40
	ld.param.u64 	%rd7, [triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_2_param_3];
	cvt.s64.s32 	%rd1, %r58;
	mov.b32 	%f3, %r48;
	mov.b32 	%f4, %r51;
	.loc	1 35 23                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:35:23
	fma.rn.ftz.f32 	%f85, %f104, %f27, %f103;
	fma.rn.ftz.f32 	%f86, %f85, %f27, %f102;
	fma.rn.ftz.f32 	%f105, %f86, %f29, %f28;
	and.b32  	%r127, %r142, 2;
	setp.eq.s32 	%p21, %r127, 0;
	@%p21 bra 	$L__BB0_24;
// %bb.23:                              // %__internal_fmad.exit5.i.i.i48
	.loc	1 0 23                          // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:0:23
	fma.rn.ftz.f32 	%f105, %f105, %f66, %f93;
$L__BB0_24:                             // %__nv_sinf.exit55
	cvt.u32.u64 	%r132, %rd1;
	.loc	1 23 21                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:23:21
	setp.lt.s32 	%p22, %r132, 256;
	.loc	1 36 19                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:36:19
	mul.f32 	%f89, %f100, %f100;
	mul.f32 	%f90, %f105, %f105;
	.loc	1 38 19                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:38:19
	fma.rn.f32 	%f91, %f3, %f89, %f1;
	fma.rn.f32 	%f92, %f4, %f90, %f2;
	.loc	1 39 39                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:39:39
	mov.b32 	%r128, %f1;
	mov.b32 	%r129, %f2;
	// begin inline asm
	@%p22 st.global.v2.b32 [ %rd36 + 0 ], { %r128, %r129 };
	// end inline asm
	.loc	1 40 25                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:40:25
	shl.b64 	%rd38, %rd1, 2;
	add.s64 	%rd37, %rd7, %rd38;
	.loc	1 40 37                         // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:40:37
	mov.b32 	%r130, %f91;
	mov.b32 	%r131, %f92;
	// begin inline asm
	@%p22 st.global.v2.b32 [ %rd37 + 0 ], { %r130, %r131 };
	// end inline asm
	.loc	1 40 4                          // cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py:40:4
	ret;
$L__tmp1:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/sw/cswwr2ds27sv6ipfv6fhb6i2p3wj3rnj6xjj544qvopimlrh76ma.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 0                                   // DW_CHILDREN_no
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 95                                 // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x58 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 115
.b8 119
.b8 119
.b8 114
.b8 50
.b8 100
.b8 115
.b8 50
.b8 55
.b8 115
.b8 118
.b8 54
.b8 105
.b8 112
.b8 102
.b8 118
.b8 54
.b8 102
.b8 104
.b8 98
.b8 54
.b8 105
.b8 50
.b8 112
.b8 51
.b8 119
.b8 106
.b8 51
.b8 114
.b8 110
.b8 106
.b8 54
.b8 120
.b8 106
.b8 106
.b8 53
.b8 52
.b8 52
.b8 113
.b8 118
.b8 111
.b8 112
.b8 105
.b8 109
.b8 108
.b8 114
.b8 104
.b8 55
.b8 54
.b8 109
.b8 97
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 115
.b8 119
.b8 0
	}
	.section	.debug_macinfo	{	}
