; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 6, !dbg !16
  %19 = shl i32 %8, 3, !dbg !17
  %20 = and i32 %19, 56, !dbg !17
  %21 = lshr i32 %8, 2, !dbg !17
  %22 = and i32 %21, 31, !dbg !17
  %23 = or disjoint i32 %18, %20, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %18, %22, !dbg !18
  %26 = or disjoint i32 %25, 32, !dbg !18
  %27 = icmp slt i32 %23, 512, !dbg !19
  %28 = icmp slt i32 %25, 512, !dbg !19
  %29 = icmp slt i32 %26, 512, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %30 = sdiv i32 %.frozen, 2, !dbg !20
  %31 = mul i32 %30, 2, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = shl nsw i32 %.decomposed, 10, !dbg !22
  %33 = shl i32 %30, 12, !dbg !23
  %34 = add i32 %33, %32, !dbg !24
  %35 = add i32 %34, %23, !dbg !25
  %36 = add i32 %34, %24, !dbg !25
  %37 = sext i32 %35 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !26
  %39 = sext i32 %36 to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !26
  %41 = and i1 %15, %27, !dbg !27
  %42 = and i1 %16, %28, !dbg !27
  %43 = and i1 %29, %16, !dbg !27
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %41) #2, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !28
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %41) #2, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !28
  %54 = or disjoint i32 %34, 512, !dbg !29
  %55 = add i32 %54, %23, !dbg !30
  %56 = add i32 %54, %24, !dbg !30
  %57 = sext i32 %55 to i64, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !31
  %59 = sext i32 %56 to i64, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !31
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %41) #2, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !32
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !32
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !32
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !32
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %41) #2, !dbg !32
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !32
  %71 = add i32 %34, 2048, !dbg !33
  %72 = add i32 %71, %23, !dbg !34
  %73 = add i32 %71, %24, !dbg !34
  %74 = sext i32 %72 to i64, !dbg !35
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !35
  %76 = sext i32 %73 to i64, !dbg !35
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !35
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %41) #2, !dbg !36
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !36
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !36
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !36
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !36
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %41) #2, !dbg !36
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !36
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !36
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !36
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !36
  %88 = add i32 %34, 2560, !dbg !37
  %89 = add i32 %88, %23, !dbg !38
  %90 = add i32 %88, %24, !dbg !38
  %91 = sext i32 %89 to i64, !dbg !39
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !39
  %93 = sext i32 %90 to i64, !dbg !39
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !39
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %41) #2, !dbg !40
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !40
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !40
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !40
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !40
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %41) #2, !dbg !40
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !40
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !40
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !40
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !40
  %105 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !28
  %106 = insertelement <4 x i32> %105, i32 %46, i64 1, !dbg !28
  %107 = insertelement <4 x i32> %106, i32 %47, i64 2, !dbg !28
  %108 = insertelement <4 x i32> %107, i32 %48, i64 3, !dbg !28
  %109 = bitcast <4 x i32> %108 to <4 x float>, !dbg !28
  %110 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !32
  %111 = insertelement <4 x i32> %110, i32 %63, i64 1, !dbg !32
  %112 = insertelement <4 x i32> %111, i32 %64, i64 2, !dbg !32
  %113 = insertelement <4 x i32> %112, i32 %65, i64 3, !dbg !32
  %114 = bitcast <4 x i32> %113 to <4 x float>, !dbg !32
  %115 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !36
  %116 = insertelement <4 x i32> %115, i32 %80, i64 1, !dbg !36
  %117 = insertelement <4 x i32> %116, i32 %81, i64 2, !dbg !36
  %118 = insertelement <4 x i32> %117, i32 %82, i64 3, !dbg !36
  %119 = bitcast <4 x i32> %118 to <4 x float>, !dbg !36
  %120 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !40
  %121 = insertelement <4 x i32> %120, i32 %97, i64 1, !dbg !40
  %122 = insertelement <4 x i32> %121, i32 %98, i64 2, !dbg !40
  %123 = insertelement <4 x i32> %122, i32 %99, i64 3, !dbg !40
  %124 = bitcast <4 x i32> %123 to <4 x float>, !dbg !40
  %125 = fcmp ogt <4 x float> %114, %109, !dbg !41
  %126 = fcmp uno <4 x float> %114, zeroinitializer, !dbg !45
  %127 = or <4 x i1> %125, %126, !dbg !46
  %.v = select <4 x i1> %127, <4 x i32> %113, <4 x i32> %108, !dbg !47
  %128 = bitcast <4 x i32> %.v to <4 x float>, !dbg !47
  %129 = fcmp olt <4 x float> %128, %119, !dbg !48
  %130 = fcmp uno <4 x float> %119, zeroinitializer, !dbg !50
  %131 = or <4 x i1> %130, %129, !dbg !51
  %.v18 = select <4 x i1> %131, <4 x i32> %118, <4 x i32> %.v, !dbg !52
  %132 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !52
  %133 = fcmp olt <4 x float> %132, %124, !dbg !53
  %134 = extractelement <4 x i1> %133, i64 0, !dbg !55
  %135 = extractelement <4 x i1> %133, i64 1, !dbg !55
  %136 = extractelement <4 x i1> %133, i64 2, !dbg !55
  %137 = extractelement <4 x i1> %133, i64 3, !dbg !55
  %138 = zext <4 x i1> %125 to <4 x i8>, !dbg !56
  %139 = select <4 x i1> %129, <4 x i8> splat (i8 2), <4 x i8> %138, !dbg !57
  %140 = select <4 x i1> %133, <4 x i8> splat (i8 3), <4 x i8> %139, !dbg !58
  %141 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !28
  %142 = insertelement <4 x i32> %141, i32 %51, i64 1, !dbg !28
  %143 = insertelement <4 x i32> %142, i32 %52, i64 2, !dbg !28
  %144 = insertelement <4 x i32> %143, i32 %53, i64 3, !dbg !28
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !28
  %146 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !32
  %147 = insertelement <4 x i32> %146, i32 %68, i64 1, !dbg !32
  %148 = insertelement <4 x i32> %147, i32 %69, i64 2, !dbg !32
  %149 = insertelement <4 x i32> %148, i32 %70, i64 3, !dbg !32
  %150 = bitcast <4 x i32> %149 to <4 x float>, !dbg !32
  %151 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !36
  %152 = insertelement <4 x i32> %151, i32 %85, i64 1, !dbg !36
  %153 = insertelement <4 x i32> %152, i32 %86, i64 2, !dbg !36
  %154 = insertelement <4 x i32> %153, i32 %87, i64 3, !dbg !36
  %155 = bitcast <4 x i32> %154 to <4 x float>, !dbg !36
  %156 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !40
  %157 = insertelement <4 x i32> %156, i32 %102, i64 1, !dbg !40
  %158 = insertelement <4 x i32> %157, i32 %103, i64 2, !dbg !40
  %159 = insertelement <4 x i32> %158, i32 %104, i64 3, !dbg !40
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !40
  %161 = fcmp ogt <4 x float> %150, %145, !dbg !41
  %162 = fcmp uno <4 x float> %150, zeroinitializer, !dbg !45
  %163 = or <4 x i1> %161, %162, !dbg !46
  %.v19 = select <4 x i1> %163, <4 x i32> %149, <4 x i32> %144, !dbg !47
  %164 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !47
  %165 = fcmp olt <4 x float> %164, %155, !dbg !48
  %166 = fcmp uno <4 x float> %155, zeroinitializer, !dbg !50
  %167 = or <4 x i1> %166, %165, !dbg !51
  %.v20 = select <4 x i1> %167, <4 x i32> %154, <4 x i32> %.v19, !dbg !52
  %168 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !52
  %169 = fcmp olt <4 x float> %168, %160, !dbg !53
  %170 = shufflevector <4 x float> %160, <4 x float> %124, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !59
  %171 = fcmp uno <8 x float> %170, zeroinitializer, !dbg !59
  %172 = extractelement <8 x i1> %171, i64 7, !dbg !55
  %173 = or i1 %172, %134, !dbg !55
  %174 = extractelement <8 x i1> %171, i64 6, !dbg !55
  %175 = or i1 %174, %135, !dbg !55
  %176 = extractelement <8 x i1> %171, i64 5, !dbg !55
  %177 = or i1 %176, %136, !dbg !55
  %178 = extractelement <8 x i1> %171, i64 4, !dbg !55
  %179 = or i1 %178, %137, !dbg !55
  %180 = extractelement <4 x i1> %169, i64 0, !dbg !55
  %181 = extractelement <8 x i1> %171, i64 3, !dbg !55
  %182 = or i1 %181, %180, !dbg !55
  %183 = extractelement <4 x i1> %169, i64 1, !dbg !55
  %184 = extractelement <8 x i1> %171, i64 2, !dbg !55
  %185 = or i1 %184, %183, !dbg !55
  %186 = extractelement <4 x i1> %169, i64 2, !dbg !55
  %187 = extractelement <8 x i1> %171, i64 1, !dbg !55
  %188 = or i1 %187, %186, !dbg !55
  %189 = extractelement <4 x i1> %169, i64 3, !dbg !55
  %190 = extractelement <8 x i1> %171, i64 0, !dbg !55
  %191 = or i1 %190, %189, !dbg !55
  %192 = zext <4 x i1> %161 to <4 x i8>, !dbg !56
  %193 = select <4 x i1> %165, <4 x i8> splat (i8 2), <4 x i8> %192, !dbg !57
  %194 = select <4 x i1> %169, <4 x i8> splat (i8 3), <4 x i8> %193, !dbg !58
  %195 = shl i32 %25, 2, !dbg !60
  %196 = shl i32 %26, 2, !dbg !60
  %197 = shl i32 %14, 9, !dbg !61
  %198 = add i32 %195, %197, !dbg !62
  %199 = add i32 %197, %196, !dbg !62
  %200 = sext i32 %198 to i64, !dbg !63
  %201 = getelementptr float, ptr addrspace(1) %1, i64 %200, !dbg !63
  %202 = sext i32 %199 to i64, !dbg !63
  %203 = getelementptr float, ptr addrspace(1) %1, i64 %202, !dbg !63
  %204 = shl i32 %8, 7, !dbg !64
  %205 = and i32 %204, 896, !dbg !64
  %206 = or disjoint i32 %205, %10, !dbg !64
  %207 = and i32 %11, 508, !dbg !64
  %208 = lshr exact i32 %205, 2, !dbg !64
  %209 = add nuw nsw i32 %208, %206, !dbg !64
  %210 = zext nneg i32 %209 to i64, !dbg !64
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %210, !dbg !64
  %212 = extractelement <4 x i32> %.v18, i64 0, !dbg !64
  %213 = select i1 %173, i32 %96, i32 %212, !dbg !65
  %214 = insertelement <1 x i32> poison, i32 %213, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %214, i1 true) #2, !dbg !64
  %215 = or disjoint i32 %206, 16, !dbg !64
  %216 = lshr i32 %215, 2, !dbg !64
  %217 = and i32 %216, 228, !dbg !64
  %218 = add nuw nsw i32 %217, %215, !dbg !64
  %219 = zext nneg i32 %218 to i64, !dbg !64
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %219, !dbg !64
  %221 = extractelement <4 x i32> %.v18, i64 1, !dbg !64
  %222 = select i1 %175, i32 %97, i32 %221, !dbg !65
  %223 = insertelement <1 x i32> poison, i32 %222, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %223, i1 true) #2, !dbg !64
  %224 = or disjoint i32 %206, 32, !dbg !64
  %225 = lshr i32 %224, 2, !dbg !64
  %226 = and i32 %225, 232, !dbg !64
  %227 = add nuw nsw i32 %226, %224, !dbg !64
  %228 = zext nneg i32 %227 to i64, !dbg !64
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %228, !dbg !64
  %230 = extractelement <4 x i32> %.v18, i64 2, !dbg !64
  %231 = select i1 %177, i32 %98, i32 %230, !dbg !65
  %232 = insertelement <1 x i32> poison, i32 %231, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %232, i1 true) #2, !dbg !64
  %233 = or disjoint i32 %206, 48, !dbg !64
  %234 = lshr i32 %233, 2, !dbg !64
  %235 = and i32 %234, 236, !dbg !64
  %236 = add nuw nsw i32 %235, %233, !dbg !64
  %237 = zext nneg i32 %236 to i64, !dbg !64
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %237, !dbg !64
  %239 = extractelement <4 x i32> %.v18, i64 3, !dbg !64
  %240 = select i1 %179, i32 %99, i32 %239, !dbg !65
  %241 = insertelement <1 x i32> poison, i32 %240, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %241, i1 true) #2, !dbg !64
  %242 = or disjoint i32 %206, 64, !dbg !64
  %243 = lshr i32 %242, 2, !dbg !64
  %244 = and i32 %243, 240, !dbg !64
  %245 = add nuw nsw i32 %244, %242, !dbg !64
  %246 = zext nneg i32 %245 to i64, !dbg !64
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %246, !dbg !64
  %248 = extractelement <4 x i32> %.v20, i64 0, !dbg !64
  %249 = select i1 %182, i32 %101, i32 %248, !dbg !65
  %250 = insertelement <1 x i32> poison, i32 %249, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %250, i1 true) #2, !dbg !64
  %251 = or disjoint i32 %206, 80, !dbg !64
  %252 = lshr i32 %251, 2, !dbg !64
  %253 = and i32 %252, 244, !dbg !64
  %254 = add nuw nsw i32 %253, %251, !dbg !64
  %255 = zext nneg i32 %254 to i64, !dbg !64
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %255, !dbg !64
  %257 = extractelement <4 x i32> %.v20, i64 1, !dbg !64
  %258 = select i1 %185, i32 %102, i32 %257, !dbg !65
  %259 = insertelement <1 x i32> poison, i32 %258, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %259, i1 true) #2, !dbg !64
  %260 = or disjoint i32 %206, 96, !dbg !64
  %261 = lshr i32 %260, 2, !dbg !64
  %262 = and i32 %261, 248, !dbg !64
  %263 = add nuw nsw i32 %262, %260, !dbg !64
  %264 = zext nneg i32 %263 to i64, !dbg !64
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %264, !dbg !64
  %266 = extractelement <4 x i32> %.v20, i64 2, !dbg !64
  %267 = select i1 %188, i32 %103, i32 %266, !dbg !65
  %268 = insertelement <1 x i32> poison, i32 %267, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %268, i1 true) #2, !dbg !64
  %269 = or disjoint i32 %206, 112, !dbg !64
  %270 = lshr i32 %269, 2, !dbg !64
  %271 = and i32 %270, 252, !dbg !64
  %272 = add nuw nsw i32 %271, %269, !dbg !64
  %273 = zext nneg i32 %272 to i64, !dbg !64
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %273, !dbg !64
  %275 = extractelement <4 x i32> %.v20, i64 3, !dbg !64
  %276 = select i1 %191, i32 %104, i32 %275, !dbg !65
  %277 = insertelement <1 x i32> poison, i32 %276, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %277, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %278 = and i32 %8, 124, !dbg !64
  %279 = add nuw nsw i32 %207, %278, !dbg !64
  %280 = zext nneg i32 %279 to i64, !dbg !64
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %280, !dbg !64
  %282 = or disjoint i32 %207, 512, !dbg !64
  %283 = lshr exact i32 %282, 2, !dbg !64
  %284 = and i32 %283, 252, !dbg !64
  %285 = add nuw nsw i32 %284, %282, !dbg !64
  %286 = zext nneg i32 %285 to i64, !dbg !64
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %286, !dbg !64
  %288 = load <4 x i32>, ptr addrspace(3) %287, align 16, !dbg !64
  %.extract = load i32, ptr addrspace(3) %281, align 16, !dbg !64
  %289 = getelementptr inbounds i8, ptr addrspace(3) %281, i64 4, !dbg !64
  %.extract11 = load i32, ptr addrspace(3) %289, align 4, !dbg !64
  %290 = getelementptr inbounds i8, ptr addrspace(3) %281, i64 8, !dbg !64
  %.extract12 = load i32, ptr addrspace(3) %290, align 8, !dbg !64
  %291 = getelementptr inbounds i8, ptr addrspace(3) %281, i64 12, !dbg !64
  %.extract13 = load i32, ptr addrspace(3) %291, align 4, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %201, i1 %42) #2, !dbg !64
  %.extract14 = extractelement <4 x i32> %288, i64 0, !dbg !64
  %.extract15 = extractelement <4 x i32> %288, i64 1, !dbg !64
  %.extract16 = extractelement <4 x i32> %288, i64 2, !dbg !64
  %.extract17 = extractelement <4 x i32> %288, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %203, i1 %43) #2, !dbg !64
  %292 = shl i32 %13, 9, !dbg !66
  %293 = add i32 %23, %292, !dbg !67
  %294 = sext i32 %293 to i64, !dbg !68
  %295 = getelementptr i8, ptr addrspace(1) %2, i64 %294, !dbg !68
  %296 = bitcast <4 x i8> %140 to i32, !dbg !69
  %297 = bitcast <4 x i8> %194 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %296, i32 %297, ptr addrspace(1) %295, i1 %41) #2, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw4mtp4minipb7uxxbhskson2tncsyqw7fpx55awfmdokoylz2di.py", directory: "inductor_cache/w4")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_18", linkageName: "triton_poi_fused_max_pool2d_with_indices_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 50, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 45, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 63, scope: !7)
!28 = !DILocation(line: 34, column: 55, scope: !7)
!29 = !DILocation(line: 35, column: 41, scope: !7)
!30 = !DILocation(line: 35, column: 51, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 61, scope: !7)
!33 = !DILocation(line: 36, column: 42, scope: !7)
!34 = !DILocation(line: 36, column: 52, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 62, scope: !7)
!37 = !DILocation(line: 37, column: 42, scope: !7)
!38 = !DILocation(line: 37, column: 52, scope: !7)
!39 = !DILocation(line: 37, column: 30, scope: !7)
!40 = !DILocation(line: 37, column: 62, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 38, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !49)
!49 = !DILocation(line: 39, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !49)
!53 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !54)
!54 = !DILocation(line: 40, column: 40, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !54)
!56 = !DILocation(line: 44, column: 33, scope: !7)
!57 = !DILocation(line: 47, column: 35, scope: !7)
!58 = !DILocation(line: 50, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !54)
!60 = !DILocation(line: 51, column: 32, scope: !7)
!61 = !DILocation(line: 51, column: 42, scope: !7)
!62 = !DILocation(line: 51, column: 37, scope: !7)
!63 = !DILocation(line: 51, column: 25, scope: !7)
!64 = !DILocation(line: 51, column: 53, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !54)
!66 = !DILocation(line: 52, column: 34, scope: !7)
!67 = !DILocation(line: 52, column: 30, scope: !7)
!68 = !DILocation(line: 52, column: 25, scope: !7)
!69 = !DILocation(line: 52, column: 46, scope: !7)
!70 = !DILocation(line: 52, column: 4, scope: !7)
