; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_31(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = ashr exact i32 %9, 1, !dbg !14
  %12 = srem i32 %11, 2, !dbg !15
  %13 = srem i32 %10, 2, !dbg !16
  %14 = icmp sgt i32 %12, 0, !dbg !17
  %15 = icmp sgt i32 %13, 0, !dbg !18
  %16 = and i1 %15, %14, !dbg !19
  %17 = add i32 %9, -3, !dbg !20
  %18 = add i32 %9, -2, !dbg !20
  %19 = sext i32 %17 to i64, !dbg !21
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !21
  %21 = sext i32 %18 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 false, i32 0, i1 false) #1, !dbg !22
  %24 = bitcast i32 %23 to float, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %16, i32 0, i1 %16) #1, !dbg !22
  %26 = bitcast i32 %25 to float, !dbg !22
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #1, !dbg !23
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !23
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !23
  %30 = bitcast i32 %28 to float, !dbg !23
  %31 = bitcast i32 %29 to float, !dbg !23
  %32 = fadd float %24, %30, !dbg !24
  %33 = fadd float %26, %31, !dbg !24
  %34 = icmp slt i32 %13, 1, !dbg !25
  %35 = and i1 %34, %14, !dbg !26
  %36 = add i32 %9, -1, !dbg !27
  %37 = sext i32 %36 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !28
  %39 = sext i32 %10 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = getelementptr i8, ptr addrspace(1) %40, i64 -4, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %14, i32 0, i1 %14) #1, !dbg !29
  %43 = bitcast i32 %42 to float, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %35, i32 0, i1 %35) #1, !dbg !29
  %45 = bitcast i32 %44 to float, !dbg !29
  %46 = fadd float %32, %43, !dbg !30
  %47 = fadd float %33, %45, !dbg !30
  %48 = icmp sgt i32 %12, -1, !dbg !31
  %49 = and i1 %15, %48, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 false, i32 0, i1 false) #1, !dbg !33
  %51 = bitcast i32 %50 to float, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %49, i32 0, i1 %49) #1, !dbg !33
  %53 = bitcast i32 %52 to float, !dbg !33
  %54 = fadd float %46, %51, !dbg !34
  %55 = fadd float %47, %53, !dbg !34
  %56 = sext i32 %9 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !35
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #1, !dbg !36
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !36
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !36
  %61 = bitcast i32 %59 to float, !dbg !36
  %62 = bitcast i32 %60 to float, !dbg !36
  %63 = fadd float %54, %61, !dbg !37
  %64 = fadd float %55, %62, !dbg !37
  %65 = and i1 %34, %48, !dbg !38
  %66 = add i32 %9, 2, !dbg !39
  %67 = sext i32 %66 to i64, !dbg !40
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !40
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %48, i32 0, i1 %48) #1, !dbg !41
  %70 = bitcast i32 %69 to float, !dbg !41
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %65, i32 0, i1 %65) #1, !dbg !41
  %72 = bitcast i32 %71 to float, !dbg !41
  %73 = fadd float %63, %70, !dbg !42
  %74 = fadd float %64, %72, !dbg !42
  %75 = icmp slt i32 %12, 1, !dbg !43
  %76 = and i1 %15, %75, !dbg !44
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 false, i32 0, i1 false) #1, !dbg !45
  %78 = bitcast i32 %77 to float, !dbg !45
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %76, i32 0, i1 %76) #1, !dbg !45
  %80 = bitcast i32 %79 to float, !dbg !45
  %81 = fadd float %73, %78, !dbg !46
  %82 = fadd float %74, %80, !dbg !46
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #1, !dbg !47
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !47
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !47
  %86 = bitcast i32 %84 to float, !dbg !47
  %87 = bitcast i32 %85 to float, !dbg !47
  %88 = fadd float %81, %86, !dbg !48
  %89 = fadd float %82, %87, !dbg !48
  %90 = and i1 %34, %75, !dbg !49
  %91 = add i32 %9, 3, !dbg !50
  %92 = add i32 %9, 4, !dbg !50
  %93 = sext i32 %91 to i64, !dbg !51
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !51
  %95 = sext i32 %92 to i64, !dbg !51
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !51
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %75, i32 0, i1 %75) #1, !dbg !52
  %98 = bitcast i32 %97 to float, !dbg !52
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %90, i32 0, i1 %90) #1, !dbg !52
  %100 = bitcast i32 %99 to float, !dbg !52
  %101 = fadd float %88, %98, !dbg !53
  %102 = fadd float %89, %100, !dbg !53
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 4.000000e+00) #1, !dbg !54
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 4.000000e+00) #1, !dbg !54
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !55
  %106 = bitcast float %103 to i32, !dbg !56
  %107 = bitcast float %104 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %106, i32 %107, ptr addrspace(1) %105, i1 true) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clyt6ljigsdiq4bommvvmkdn57edhm6hdkynyaduxcxdlc4de33s.py", directory: "inductor_cache/ly")
!4 = !{ptr @triton_poi_fused_avg_pool2d_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_31", linkageName: "triton_poi_fused_avg_pool2d_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 19, scope: !7)
!19 = !DILocation(line: 37, column: 19, scope: !7)
!20 = !DILocation(line: 38, column: 38, scope: !7)
!21 = !DILocation(line: 38, column: 31, scope: !7)
!22 = !DILocation(line: 38, column: 43, scope: !7)
!23 = !DILocation(line: 44, column: 43, scope: !7)
!24 = !DILocation(line: 45, column: 20, scope: !7)
!25 = !DILocation(line: 48, column: 20, scope: !7)
!26 = !DILocation(line: 50, column: 19, scope: !7)
!27 = !DILocation(line: 51, column: 38, scope: !7)
!28 = !DILocation(line: 51, column: 31, scope: !7)
!29 = !DILocation(line: 51, column: 43, scope: !7)
!30 = !DILocation(line: 52, column: 20, scope: !7)
!31 = !DILocation(line: 54, column: 21, scope: !7)
!32 = !DILocation(line: 57, column: 20, scope: !7)
!33 = !DILocation(line: 58, column: 43, scope: !7)
!34 = !DILocation(line: 59, column: 20, scope: !7)
!35 = !DILocation(line: 61, column: 31, scope: !7)
!36 = !DILocation(line: 61, column: 36, scope: !7)
!37 = !DILocation(line: 62, column: 20, scope: !7)
!38 = !DILocation(line: 63, column: 20, scope: !7)
!39 = !DILocation(line: 64, column: 35, scope: !7)
!40 = !DILocation(line: 64, column: 31, scope: !7)
!41 = !DILocation(line: 64, column: 40, scope: !7)
!42 = !DILocation(line: 65, column: 20, scope: !7)
!43 = !DILocation(line: 68, column: 20, scope: !7)
!44 = !DILocation(line: 70, column: 20, scope: !7)
!45 = !DILocation(line: 71, column: 40, scope: !7)
!46 = !DILocation(line: 72, column: 20, scope: !7)
!47 = !DILocation(line: 74, column: 40, scope: !7)
!48 = !DILocation(line: 75, column: 20, scope: !7)
!49 = !DILocation(line: 76, column: 20, scope: !7)
!50 = !DILocation(line: 77, column: 35, scope: !7)
!51 = !DILocation(line: 77, column: 31, scope: !7)
!52 = !DILocation(line: 77, column: 40, scope: !7)
!53 = !DILocation(line: 78, column: 20, scope: !7)
!54 = !DILocation(line: 80, column: 20, scope: !7)
!55 = !DILocation(line: 81, column: 25, scope: !7)
!56 = !DILocation(line: 81, column: 37, scope: !7)
!57 = !DILocation(line: 81, column: 4, scope: !7)
