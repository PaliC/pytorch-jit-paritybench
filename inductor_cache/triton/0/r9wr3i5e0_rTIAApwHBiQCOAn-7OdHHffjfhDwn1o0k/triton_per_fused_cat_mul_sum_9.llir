; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_cat_mul_sum_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 24, !dbg !12
  %14 = shl i32 %12, 2, !dbg !12
  %15 = and i32 %14, 28, !dbg !12
  %16 = and i32 %12, 31, !dbg !12
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = or disjoint i32 %11, %16, !dbg !13
  %19 = icmp slt i32 %17, 64, !dbg !14
  %20 = icmp slt i32 %18, 64, !dbg !14
  %21 = lshr i32 %12, 5, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %22 = sdiv i32 %.frozen, 16, !dbg !16
  %23 = mul i32 %22, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %.frozen1 = freeze i32 %18, !dbg !16
  %24 = sdiv i32 %.frozen1, 16, !dbg !16
  %25 = mul i32 %24, 16, !dbg !17
  %.decomposed2 = sub i32 %.frozen1, %25, !dbg !17
  %26 = shl i32 %12, 1, !dbg !18
  %27 = and i32 %26, 496, !dbg !18
  %28 = or disjoint i32 %27, 512, !dbg !18
  %29 = add nsw i32 %.decomposed, %27, !dbg !19
  %30 = add nsw i32 %.decomposed, %28, !dbg !19
  %31 = mul i32 %22, 5120, !dbg !20
  %32 = add i32 %29, %31, !dbg !21
  %33 = add i32 %30, %31, !dbg !21
  %34 = sext i32 %32 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = sext i32 %33 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = bitcast i32 %49 to float, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = bitcast i32 %51 to float, !dbg !23
  %56 = shl i32 %22, 10, !dbg !24
  %57 = add i32 %29, %56, !dbg !25
  %58 = add i32 %30, %56, !dbg !25
  %59 = sext i32 %57 to i64, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !26
  %61 = sext i32 %58 to i64, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !27
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !27
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !27
  %68 = bitcast i32 %64 to float, !dbg !27
  %69 = bitcast i32 %65 to float, !dbg !27
  %70 = bitcast i32 %66 to float, !dbg !27
  %71 = bitcast i32 %67 to float, !dbg !27
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !27
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !27
  %77 = bitcast i32 %73 to float, !dbg !27
  %78 = bitcast i32 %74 to float, !dbg !27
  %79 = bitcast i32 %75 to float, !dbg !27
  %80 = bitcast i32 %76 to float, !dbg !27
  %81 = add nsw i32 %.decomposed, 1024, !dbg !28
  %82 = or disjoint i32 %31, %27, !dbg !29
  %83 = add i32 %82, %81, !dbg !30
  %84 = or disjoint i32 %31, %28, !dbg !29
  %85 = add i32 %84, %81, !dbg !30
  %86 = sext i32 %83 to i64, !dbg !31
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !31
  %88 = sext i32 %85 to i64, !dbg !31
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !31
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !32
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !32
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !32
  %95 = bitcast i32 %91 to float, !dbg !32
  %96 = bitcast i32 %92 to float, !dbg !32
  %97 = bitcast i32 %93 to float, !dbg !32
  %98 = bitcast i32 %94 to float, !dbg !32
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !32
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !32
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !32
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !32
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !32
  %104 = bitcast i32 %100 to float, !dbg !32
  %105 = bitcast i32 %101 to float, !dbg !32
  %106 = bitcast i32 %102 to float, !dbg !32
  %107 = bitcast i32 %103 to float, !dbg !32
  %108 = add nsw i32 %.decomposed, 2048, !dbg !33
  %109 = add i32 %82, %108, !dbg !34
  %110 = add i32 %84, %108, !dbg !34
  %111 = sext i32 %109 to i64, !dbg !35
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !35
  %113 = sext i32 %110 to i64, !dbg !35
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !35
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !36
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !36
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !36
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !36
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !36
  %120 = bitcast i32 %116 to float, !dbg !36
  %121 = bitcast i32 %117 to float, !dbg !36
  %122 = bitcast i32 %118 to float, !dbg !36
  %123 = bitcast i32 %119 to float, !dbg !36
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !36
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !36
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !36
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !36
  %129 = bitcast i32 %125 to float, !dbg !36
  %130 = bitcast i32 %126 to float, !dbg !36
  %131 = bitcast i32 %127 to float, !dbg !36
  %132 = bitcast i32 %128 to float, !dbg !36
  %133 = add nsw i32 %.decomposed, 3072, !dbg !37
  %134 = add i32 %82, %133, !dbg !38
  %135 = add i32 %84, %133, !dbg !38
  %136 = sext i32 %134 to i64, !dbg !39
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !39
  %138 = sext i32 %135 to i64, !dbg !39
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !39
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !40
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !40
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !40
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !40
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !40
  %145 = bitcast i32 %141 to float, !dbg !40
  %146 = bitcast i32 %142 to float, !dbg !40
  %147 = bitcast i32 %143 to float, !dbg !40
  %148 = bitcast i32 %144 to float, !dbg !40
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !40
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !40
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !40
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !40
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !40
  %154 = bitcast i32 %150 to float, !dbg !40
  %155 = bitcast i32 %151 to float, !dbg !40
  %156 = bitcast i32 %152 to float, !dbg !40
  %157 = bitcast i32 %153 to float, !dbg !40
  %158 = add nsw i32 %.decomposed, 4096, !dbg !41
  %159 = add i32 %82, %158, !dbg !42
  %160 = add i32 %84, %158, !dbg !42
  %161 = sext i32 %159 to i64, !dbg !43
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !43
  %163 = sext i32 %160 to i64, !dbg !43
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !43
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %162, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !44
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !44
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !44
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !44
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !44
  %170 = bitcast i32 %166 to float, !dbg !44
  %171 = bitcast i32 %167 to float, !dbg !44
  %172 = bitcast i32 %168 to float, !dbg !44
  %173 = bitcast i32 %169 to float, !dbg !44
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %164, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !44
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !44
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !44
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !44
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !44
  %179 = bitcast i32 %175 to float, !dbg !44
  %180 = bitcast i32 %176 to float, !dbg !44
  %181 = bitcast i32 %177 to float, !dbg !44
  %182 = bitcast i32 %178 to float, !dbg !44
  %183 = fmul float %43, %68, !dbg !45
  %184 = fmul float %44, %69, !dbg !45
  %185 = fmul float %45, %70, !dbg !45
  %186 = fmul float %46, %71, !dbg !45
  %187 = fmul float %52, %77, !dbg !45
  %188 = fmul float %53, %78, !dbg !45
  %189 = fmul float %54, %79, !dbg !45
  %190 = fmul float %55, %80, !dbg !45
  %191 = fadd float %183, %187, !dbg !46
  %192 = select i1 %19, float %191, float 0.000000e+00, !dbg !46
  %193 = fadd float %184, %188, !dbg !46
  %194 = select i1 %19, float %193, float 0.000000e+00, !dbg !46
  %195 = fadd float %185, %189, !dbg !46
  %196 = select i1 %19, float %195, float 0.000000e+00, !dbg !46
  %197 = fadd float %186, %190, !dbg !46
  %198 = select i1 %19, float %197, float 0.000000e+00, !dbg !46
  %199 = bitcast float %192 to i32, !dbg !51
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 16, i32 31), !dbg !51
  %201 = bitcast i32 %200 to float, !dbg !51
  %202 = fadd float %192, %201, !dbg !46
  %203 = bitcast float %202 to i32, !dbg !51
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 8, i32 31), !dbg !51
  %205 = bitcast i32 %204 to float, !dbg !51
  %206 = fadd float %202, %205, !dbg !46
  %207 = bitcast float %194 to i32, !dbg !51
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 16, i32 31), !dbg !51
  %209 = bitcast i32 %208 to float, !dbg !51
  %210 = fadd float %194, %209, !dbg !46
  %211 = bitcast float %210 to i32, !dbg !51
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 8, i32 31), !dbg !51
  %213 = bitcast i32 %212 to float, !dbg !51
  %214 = fadd float %210, %213, !dbg !46
  %215 = bitcast float %196 to i32, !dbg !51
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 16, i32 31), !dbg !51
  %217 = bitcast i32 %216 to float, !dbg !51
  %218 = fadd float %196, %217, !dbg !46
  %219 = bitcast float %218 to i32, !dbg !51
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 8, i32 31), !dbg !51
  %221 = bitcast i32 %220 to float, !dbg !51
  %222 = fadd float %218, %221, !dbg !46
  %223 = bitcast float %198 to i32, !dbg !51
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 16, i32 31), !dbg !51
  %225 = bitcast i32 %224 to float, !dbg !51
  %226 = fadd float %198, %225, !dbg !46
  %227 = bitcast float %226 to i32, !dbg !51
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 8, i32 31), !dbg !51
  %229 = bitcast i32 %228 to float, !dbg !51
  %230 = fadd float %226, %229, !dbg !46
  %231 = icmp eq i32 %13, 0, !dbg !51
  %232 = and i32 %21, 7, !dbg !51
  %233 = shl nuw nsw i32 %15, 3, !dbg !51
  %234 = or disjoint i32 %233, %232, !dbg !51
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !51
  %236 = bitcast float %206 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 %231) #3, !dbg !51
  %237 = or disjoint i32 %233, 8, !dbg !51
  %238 = or disjoint i32 %237, %232, !dbg !51
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !51
  %240 = bitcast float %214 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 %231) #3, !dbg !51
  %241 = or disjoint i32 %233, 16, !dbg !51
  %242 = or disjoint i32 %241, %232, !dbg !51
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !51
  %244 = bitcast float %222 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 %231) #3, !dbg !51
  %245 = or disjoint i32 %233, 24, !dbg !51
  %246 = or disjoint i32 %245, %232, !dbg !51
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !51
  %248 = bitcast float %230 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 %231) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %249 = icmp slt i32 %12, 256, !dbg !51
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !51
  %251 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %250, i1 %249) #3, !dbg !51
  %252 = bitcast i32 %251 to float, !dbg !51
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !51
  %254 = bitcast i32 %253 to float, !dbg !51
  %255 = fadd float %252, %254, !dbg !46
  %256 = bitcast float %255 to i32, !dbg !51
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 2, i32 31), !dbg !51
  %258 = bitcast i32 %257 to float, !dbg !51
  %259 = fadd float %255, %258, !dbg !46
  %260 = bitcast float %259 to i32, !dbg !51
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 1, i32 31), !dbg !51
  %262 = bitcast i32 %261 to float, !dbg !51
  %263 = fadd float %259, %262, !dbg !46
  %264 = and i32 %12, 7, !dbg !51
  %265 = icmp eq i32 %264, 0, !dbg !51
  %266 = and i1 %249, %265, !dbg !51
  %267 = bitcast float %263 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %267, i1 %266) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !51
  %269 = load i32, ptr addrspace(3) %268, align 16, !dbg !51
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !51
  %271 = load i32, ptr addrspace(3) %270, align 16, !dbg !51
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %241, !dbg !51
  %273 = load i32, ptr addrspace(3) %272, align 16, !dbg !51
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %245, !dbg !51
  %275 = load i32, ptr addrspace(3) %274, align 16, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !52
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %276, i32 %269, i32 %271, i32 %273, i32 %275, i1 true) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !52
  %278 = load i32, ptr addrspace(3) %277, align 4, !dbg !52
  %279 = fmul float %68, %95, !dbg !53
  %280 = fmul float %69, %96, !dbg !53
  %281 = fmul float %70, %97, !dbg !53
  %282 = fmul float %71, %98, !dbg !53
  %283 = fmul float %77, %104, !dbg !53
  %284 = fmul float %78, %105, !dbg !53
  %285 = fmul float %79, %106, !dbg !53
  %286 = fmul float %80, %107, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %287 = fadd float %279, %283, !dbg !56
  %288 = select i1 %19, float %287, float 0.000000e+00, !dbg !56
  %289 = fadd float %280, %284, !dbg !56
  %290 = select i1 %19, float %289, float 0.000000e+00, !dbg !56
  %291 = fadd float %281, %285, !dbg !56
  %292 = select i1 %19, float %291, float 0.000000e+00, !dbg !56
  %293 = fadd float %282, %286, !dbg !56
  %294 = select i1 %19, float %293, float 0.000000e+00, !dbg !56
  %295 = bitcast float %288 to i32, !dbg !54
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 16, i32 31), !dbg !54
  %297 = bitcast i32 %296 to float, !dbg !54
  %298 = fadd float %288, %297, !dbg !56
  %299 = bitcast float %298 to i32, !dbg !54
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 8, i32 31), !dbg !54
  %301 = bitcast i32 %300 to float, !dbg !54
  %302 = fadd float %298, %301, !dbg !56
  %303 = bitcast float %290 to i32, !dbg !54
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 16, i32 31), !dbg !54
  %305 = bitcast i32 %304 to float, !dbg !54
  %306 = fadd float %290, %305, !dbg !56
  %307 = bitcast float %306 to i32, !dbg !54
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 8, i32 31), !dbg !54
  %309 = bitcast i32 %308 to float, !dbg !54
  %310 = fadd float %306, %309, !dbg !56
  %311 = bitcast float %292 to i32, !dbg !54
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 16, i32 31), !dbg !54
  %313 = bitcast i32 %312 to float, !dbg !54
  %314 = fadd float %292, %313, !dbg !56
  %315 = bitcast float %314 to i32, !dbg !54
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 8, i32 31), !dbg !54
  %317 = bitcast i32 %316 to float, !dbg !54
  %318 = fadd float %314, %317, !dbg !56
  %319 = bitcast float %294 to i32, !dbg !54
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 16, i32 31), !dbg !54
  %321 = bitcast i32 %320 to float, !dbg !54
  %322 = fadd float %294, %321, !dbg !56
  %323 = bitcast float %322 to i32, !dbg !54
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 8, i32 31), !dbg !54
  %325 = bitcast i32 %324 to float, !dbg !54
  %326 = fadd float %322, %325, !dbg !56
  %327 = bitcast float %302 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %327, i1 %231) #3, !dbg !54
  %328 = bitcast float %310 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %328, i1 %231) #3, !dbg !54
  %329 = bitcast float %318 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %329, i1 %231) #3, !dbg !54
  %330 = bitcast float %326 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %330, i1 %231) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %331 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %250, i1 %249) #3, !dbg !54
  %332 = bitcast i32 %331 to float, !dbg !54
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 4, i32 31), !dbg !54
  %334 = bitcast i32 %333 to float, !dbg !54
  %335 = fadd float %332, %334, !dbg !56
  %336 = bitcast float %335 to i32, !dbg !54
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 2, i32 31), !dbg !54
  %338 = bitcast i32 %337 to float, !dbg !54
  %339 = fadd float %335, %338, !dbg !56
  %340 = bitcast float %339 to i32, !dbg !54
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 1, i32 31), !dbg !54
  %342 = bitcast i32 %341 to float, !dbg !54
  %343 = fadd float %339, %342, !dbg !56
  %344 = bitcast float %343 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %344, i1 %266) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %345 = load i32, ptr addrspace(3) %268, align 16, !dbg !54
  %346 = load i32, ptr addrspace(3) %270, align 16, !dbg !54
  %347 = load i32, ptr addrspace(3) %272, align 16, !dbg !54
  %348 = load i32, ptr addrspace(3) %274, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %276, i32 %345, i32 %346, i32 %347, i32 %348, i1 true) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %349 = load i32, ptr addrspace(3) %277, align 4, !dbg !57
  %350 = fmul float %68, %120, !dbg !58
  %351 = fmul float %69, %121, !dbg !58
  %352 = fmul float %70, %122, !dbg !58
  %353 = fmul float %71, %123, !dbg !58
  %354 = fmul float %77, %129, !dbg !58
  %355 = fmul float %78, %130, !dbg !58
  %356 = fmul float %79, %131, !dbg !58
  %357 = fmul float %80, %132, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %358 = fadd float %350, %354, !dbg !61
  %359 = select i1 %19, float %358, float 0.000000e+00, !dbg !61
  %360 = fadd float %351, %355, !dbg !61
  %361 = select i1 %19, float %360, float 0.000000e+00, !dbg !61
  %362 = fadd float %352, %356, !dbg !61
  %363 = select i1 %19, float %362, float 0.000000e+00, !dbg !61
  %364 = fadd float %353, %357, !dbg !61
  %365 = select i1 %19, float %364, float 0.000000e+00, !dbg !61
  %366 = bitcast float %359 to i32, !dbg !59
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 16, i32 31), !dbg !59
  %368 = bitcast i32 %367 to float, !dbg !59
  %369 = fadd float %359, %368, !dbg !61
  %370 = bitcast float %369 to i32, !dbg !59
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 8, i32 31), !dbg !59
  %372 = bitcast i32 %371 to float, !dbg !59
  %373 = fadd float %369, %372, !dbg !61
  %374 = bitcast float %361 to i32, !dbg !59
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 16, i32 31), !dbg !59
  %376 = bitcast i32 %375 to float, !dbg !59
  %377 = fadd float %361, %376, !dbg !61
  %378 = bitcast float %377 to i32, !dbg !59
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 8, i32 31), !dbg !59
  %380 = bitcast i32 %379 to float, !dbg !59
  %381 = fadd float %377, %380, !dbg !61
  %382 = bitcast float %363 to i32, !dbg !59
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 16, i32 31), !dbg !59
  %384 = bitcast i32 %383 to float, !dbg !59
  %385 = fadd float %363, %384, !dbg !61
  %386 = bitcast float %385 to i32, !dbg !59
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 8, i32 31), !dbg !59
  %388 = bitcast i32 %387 to float, !dbg !59
  %389 = fadd float %385, %388, !dbg !61
  %390 = bitcast float %365 to i32, !dbg !59
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 16, i32 31), !dbg !59
  %392 = bitcast i32 %391 to float, !dbg !59
  %393 = fadd float %365, %392, !dbg !61
  %394 = bitcast float %393 to i32, !dbg !59
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 8, i32 31), !dbg !59
  %396 = bitcast i32 %395 to float, !dbg !59
  %397 = fadd float %393, %396, !dbg !61
  %398 = bitcast float %373 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %398, i1 %231) #3, !dbg !59
  %399 = bitcast float %381 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %399, i1 %231) #3, !dbg !59
  %400 = bitcast float %389 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %400, i1 %231) #3, !dbg !59
  %401 = bitcast float %397 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %401, i1 %231) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %402 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %250, i1 %249) #3, !dbg !59
  %403 = bitcast i32 %402 to float, !dbg !59
  %404 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 4, i32 31), !dbg !59
  %405 = bitcast i32 %404 to float, !dbg !59
  %406 = fadd float %403, %405, !dbg !61
  %407 = bitcast float %406 to i32, !dbg !59
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 2, i32 31), !dbg !59
  %409 = bitcast i32 %408 to float, !dbg !59
  %410 = fadd float %406, %409, !dbg !61
  %411 = bitcast float %410 to i32, !dbg !59
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 1, i32 31), !dbg !59
  %413 = bitcast i32 %412 to float, !dbg !59
  %414 = fadd float %410, %413, !dbg !61
  %415 = bitcast float %414 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %415, i1 %266) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %416 = load i32, ptr addrspace(3) %268, align 16, !dbg !59
  %417 = load i32, ptr addrspace(3) %270, align 16, !dbg !59
  %418 = load i32, ptr addrspace(3) %272, align 16, !dbg !59
  %419 = load i32, ptr addrspace(3) %274, align 16, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %276, i32 %416, i32 %417, i32 %418, i32 %419, i1 true) #3, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %420 = load i32, ptr addrspace(3) %277, align 4, !dbg !62
  %421 = fmul float %68, %145, !dbg !63
  %422 = fmul float %69, %146, !dbg !63
  %423 = fmul float %70, %147, !dbg !63
  %424 = fmul float %71, %148, !dbg !63
  %425 = fmul float %77, %154, !dbg !63
  %426 = fmul float %78, %155, !dbg !63
  %427 = fmul float %79, %156, !dbg !63
  %428 = fmul float %80, %157, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %429 = fadd float %421, %425, !dbg !66
  %430 = select i1 %19, float %429, float 0.000000e+00, !dbg !66
  %431 = fadd float %422, %426, !dbg !66
  %432 = select i1 %19, float %431, float 0.000000e+00, !dbg !66
  %433 = fadd float %423, %427, !dbg !66
  %434 = select i1 %19, float %433, float 0.000000e+00, !dbg !66
  %435 = fadd float %424, %428, !dbg !66
  %436 = select i1 %19, float %435, float 0.000000e+00, !dbg !66
  %437 = bitcast float %430 to i32, !dbg !64
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 16, i32 31), !dbg !64
  %439 = bitcast i32 %438 to float, !dbg !64
  %440 = fadd float %430, %439, !dbg !66
  %441 = bitcast float %440 to i32, !dbg !64
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 8, i32 31), !dbg !64
  %443 = bitcast i32 %442 to float, !dbg !64
  %444 = fadd float %440, %443, !dbg !66
  %445 = bitcast float %432 to i32, !dbg !64
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 16, i32 31), !dbg !64
  %447 = bitcast i32 %446 to float, !dbg !64
  %448 = fadd float %432, %447, !dbg !66
  %449 = bitcast float %448 to i32, !dbg !64
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 8, i32 31), !dbg !64
  %451 = bitcast i32 %450 to float, !dbg !64
  %452 = fadd float %448, %451, !dbg !66
  %453 = bitcast float %434 to i32, !dbg !64
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 16, i32 31), !dbg !64
  %455 = bitcast i32 %454 to float, !dbg !64
  %456 = fadd float %434, %455, !dbg !66
  %457 = bitcast float %456 to i32, !dbg !64
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 8, i32 31), !dbg !64
  %459 = bitcast i32 %458 to float, !dbg !64
  %460 = fadd float %456, %459, !dbg !66
  %461 = bitcast float %436 to i32, !dbg !64
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 16, i32 31), !dbg !64
  %463 = bitcast i32 %462 to float, !dbg !64
  %464 = fadd float %436, %463, !dbg !66
  %465 = bitcast float %464 to i32, !dbg !64
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 8, i32 31), !dbg !64
  %467 = bitcast i32 %466 to float, !dbg !64
  %468 = fadd float %464, %467, !dbg !66
  %469 = bitcast float %444 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %469, i1 %231) #3, !dbg !64
  %470 = bitcast float %452 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %470, i1 %231) #3, !dbg !64
  %471 = bitcast float %460 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %471, i1 %231) #3, !dbg !64
  %472 = bitcast float %468 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %472, i1 %231) #3, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %473 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %250, i1 %249) #3, !dbg !64
  %474 = bitcast i32 %473 to float, !dbg !64
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 4, i32 31), !dbg !64
  %476 = bitcast i32 %475 to float, !dbg !64
  %477 = fadd float %474, %476, !dbg !66
  %478 = bitcast float %477 to i32, !dbg !64
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 2, i32 31), !dbg !64
  %480 = bitcast i32 %479 to float, !dbg !64
  %481 = fadd float %477, %480, !dbg !66
  %482 = bitcast float %481 to i32, !dbg !64
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 1, i32 31), !dbg !64
  %484 = bitcast i32 %483 to float, !dbg !64
  %485 = fadd float %481, %484, !dbg !66
  %486 = bitcast float %485 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %486, i1 %266) #3, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %487 = load i32, ptr addrspace(3) %268, align 16, !dbg !64
  %488 = load i32, ptr addrspace(3) %270, align 16, !dbg !64
  %489 = load i32, ptr addrspace(3) %272, align 16, !dbg !64
  %490 = load i32, ptr addrspace(3) %274, align 16, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %276, i32 %487, i32 %488, i32 %489, i32 %490, i1 true) #3, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %491 = load i32, ptr addrspace(3) %277, align 4, !dbg !67
  %492 = fmul float %68, %170, !dbg !68
  %493 = fmul float %69, %171, !dbg !68
  %494 = fmul float %70, %172, !dbg !68
  %495 = fmul float %71, %173, !dbg !68
  %496 = fmul float %77, %179, !dbg !68
  %497 = fmul float %78, %180, !dbg !68
  %498 = fmul float %79, %181, !dbg !68
  %499 = fmul float %80, %182, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %500 = fadd float %492, %496, !dbg !71
  %501 = select i1 %19, float %500, float 0.000000e+00, !dbg !71
  %502 = fadd float %493, %497, !dbg !71
  %503 = select i1 %19, float %502, float 0.000000e+00, !dbg !71
  %504 = fadd float %494, %498, !dbg !71
  %505 = select i1 %19, float %504, float 0.000000e+00, !dbg !71
  %506 = fadd float %495, %499, !dbg !71
  %507 = select i1 %19, float %506, float 0.000000e+00, !dbg !71
  %508 = bitcast float %501 to i32, !dbg !69
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 16, i32 31), !dbg !69
  %510 = bitcast i32 %509 to float, !dbg !69
  %511 = fadd float %501, %510, !dbg !71
  %512 = bitcast float %511 to i32, !dbg !69
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 8, i32 31), !dbg !69
  %514 = bitcast i32 %513 to float, !dbg !69
  %515 = fadd float %511, %514, !dbg !71
  %516 = bitcast float %503 to i32, !dbg !69
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 16, i32 31), !dbg !69
  %518 = bitcast i32 %517 to float, !dbg !69
  %519 = fadd float %503, %518, !dbg !71
  %520 = bitcast float %519 to i32, !dbg !69
  %521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %520, i32 8, i32 31), !dbg !69
  %522 = bitcast i32 %521 to float, !dbg !69
  %523 = fadd float %519, %522, !dbg !71
  %524 = bitcast float %505 to i32, !dbg !69
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 16, i32 31), !dbg !69
  %526 = bitcast i32 %525 to float, !dbg !69
  %527 = fadd float %505, %526, !dbg !71
  %528 = bitcast float %527 to i32, !dbg !69
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 8, i32 31), !dbg !69
  %530 = bitcast i32 %529 to float, !dbg !69
  %531 = fadd float %527, %530, !dbg !71
  %532 = bitcast float %507 to i32, !dbg !69
  %533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %532, i32 16, i32 31), !dbg !69
  %534 = bitcast i32 %533 to float, !dbg !69
  %535 = fadd float %507, %534, !dbg !71
  %536 = bitcast float %535 to i32, !dbg !69
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 8, i32 31), !dbg !69
  %538 = bitcast i32 %537 to float, !dbg !69
  %539 = fadd float %535, %538, !dbg !71
  %540 = bitcast float %515 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %540, i1 %231) #3, !dbg !69
  %541 = bitcast float %523 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %541, i1 %231) #3, !dbg !69
  %542 = bitcast float %531 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %542, i1 %231) #3, !dbg !69
  %543 = bitcast float %539 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %543, i1 %231) #3, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %544 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %250, i1 %249) #3, !dbg !69
  %545 = bitcast i32 %544 to float, !dbg !69
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %544, i32 4, i32 31), !dbg !69
  %547 = bitcast i32 %546 to float, !dbg !69
  %548 = fadd float %545, %547, !dbg !71
  %549 = bitcast float %548 to i32, !dbg !69
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 2, i32 31), !dbg !69
  %551 = bitcast i32 %550 to float, !dbg !69
  %552 = fadd float %548, %551, !dbg !71
  %553 = bitcast float %552 to i32, !dbg !69
  %554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %553, i32 1, i32 31), !dbg !69
  %555 = bitcast i32 %554 to float, !dbg !69
  %556 = fadd float %552, %555, !dbg !71
  %557 = bitcast float %556 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %557, i1 %266) #3, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %558 = load i32, ptr addrspace(3) %268, align 16, !dbg !69
  %559 = load i32, ptr addrspace(3) %270, align 16, !dbg !69
  %560 = load i32, ptr addrspace(3) %272, align 16, !dbg !69
  %561 = load i32, ptr addrspace(3) %274, align 16, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %276, i32 %558, i32 %559, i32 %560, i32 %561, i1 true) #3, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %562 = load i32, ptr addrspace(3) %277, align 4, !dbg !72
  %563 = mul i32 %24, 80, !dbg !73
  %564 = add i32 %563, %.decomposed2, !dbg !74
  %565 = sext i32 %564 to i64, !dbg !75
  %566 = getelementptr float, ptr addrspace(1) %2, i64 %565, !dbg !75
  %567 = icmp eq i32 %232, 0, !dbg !76
  %568 = and i1 %567, %20, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %278, ptr addrspace(1) %566, i1 %568) #3, !dbg !76
  %569 = getelementptr float, ptr addrspace(1) %3, i64 %565, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %569, i1 %568) #3, !dbg !78
  %570 = getelementptr float, ptr addrspace(1) %4, i64 %565, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %420, ptr addrspace(1) %570, i1 %568) #3, !dbg !80
  %571 = getelementptr float, ptr addrspace(1) %5, i64 %565, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %491, ptr addrspace(1) %571, i1 %568) #3, !dbg !82
  %572 = getelementptr float, ptr addrspace(1) %6, i64 %565, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %562, ptr addrspace(1) %572, i1 %568) #3, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbayb3surdfdkob3gyq2thbb5blc24goorugo4cvrtl6ozru6rfz.py", directory: "inductor_cache/ba")
!4 = !{ptr @triton_per_fused_cat_mul_sum_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_mul_sum_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_mul_sum_9", linkageName: "triton_per_fused_cat_mul_sum_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 34, column: 48, scope: !7)
!25 = !DILocation(line: 34, column: 43, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 53, scope: !7)
!28 = !DILocation(line: 35, column: 37, scope: !7)
!29 = !DILocation(line: 35, column: 42, scope: !7)
!30 = !DILocation(line: 35, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 60, scope: !7)
!33 = !DILocation(line: 36, column: 38, scope: !7)
!34 = !DILocation(line: 36, column: 51, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 61, scope: !7)
!37 = !DILocation(line: 37, column: 38, scope: !7)
!38 = !DILocation(line: 37, column: 51, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 61, scope: !7)
!41 = !DILocation(line: 38, column: 38, scope: !7)
!42 = !DILocation(line: 38, column: 51, scope: !7)
!43 = !DILocation(line: 38, column: 31, scope: !7)
!44 = !DILocation(line: 38, column: 61, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !50)
!47 = distinct !DILexicalBlockFile(scope: !49, file: !48, discriminator: 0)
!48 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!49 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!50 = !DILocation(line: 42, column: 24, scope: !7)
!51 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !50)
!52 = !DILocation(line: 42, column: 27, scope: !7)
!53 = !DILocation(line: 43, column: 18, scope: !7)
!54 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !55)
!55 = !DILocation(line: 46, column: 26, scope: !7)
!56 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !55)
!57 = !DILocation(line: 46, column: 29, scope: !7)
!58 = !DILocation(line: 47, column: 20, scope: !7)
!59 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 26, scope: !7)
!61 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !60)
!62 = !DILocation(line: 50, column: 29, scope: !7)
!63 = !DILocation(line: 51, column: 20, scope: !7)
!64 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !65)
!65 = !DILocation(line: 54, column: 26, scope: !7)
!66 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !65)
!67 = !DILocation(line: 54, column: 29, scope: !7)
!68 = !DILocation(line: 55, column: 20, scope: !7)
!69 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !70)
!70 = !DILocation(line: 58, column: 26, scope: !7)
!71 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !70)
!72 = !DILocation(line: 58, column: 29, scope: !7)
!73 = !DILocation(line: 59, column: 33, scope: !7)
!74 = !DILocation(line: 59, column: 30, scope: !7)
!75 = !DILocation(line: 59, column: 25, scope: !7)
!76 = !DILocation(line: 59, column: 44, scope: !7)
!77 = !DILocation(line: 60, column: 25, scope: !7)
!78 = !DILocation(line: 60, column: 45, scope: !7)
!79 = !DILocation(line: 61, column: 25, scope: !7)
!80 = !DILocation(line: 61, column: 45, scope: !7)
!81 = !DILocation(line: 62, column: 25, scope: !7)
!82 = !DILocation(line: 62, column: 45, scope: !7)
!83 = !DILocation(line: 63, column: 25, scope: !7)
!84 = !DILocation(line: 63, column: 45, scope: !7)
!85 = !DILocation(line: 63, column: 4, scope: !7)
