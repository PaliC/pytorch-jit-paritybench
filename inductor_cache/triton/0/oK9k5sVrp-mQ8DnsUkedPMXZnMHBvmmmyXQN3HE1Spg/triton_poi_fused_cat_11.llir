; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 49280, !dbg !14
  %14 = sdiv i32 %12, 16, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %15 = sdiv i32 %.frozen, 12320, !dbg !16
  %16 = mul i32 %15, 12320, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = shl nsw i32 %15, 13, !dbg !18
  %18 = add nsw i32 %17, %srem.decomposed, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = shl nsw i32 %15, 12, !dbg !21
  %22 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !22
  %23 = insertelement <2 x i32> %22, i32 %14, i64 1, !dbg !22
  %24 = srem <2 x i32> %23, <i32 16, i32 770>, !dbg !22
  %25 = extractelement <2 x i32> %24, i64 1, !dbg !23
  %26 = icmp slt i32 %25, 512, !dbg !24
  %27 = and i1 %13, %26, !dbg !25
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #1, !dbg !26
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !26
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !26
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !26
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !26
  %33 = and i32 %25, -256, !dbg !27
  %34 = icmp eq i32 %33, 512, !dbg !27
  %35 = insertelement <2 x i32> <i32 poison, i32 -512>, i32 %21, i64 0, !dbg !28
  %36 = add nsw <2 x i32> %35, %24, !dbg !28
  %37 = extractelement <2 x i32> %36, i64 1, !dbg !29
  %38 = shl nsw i32 %37, 4, !dbg !29
  %39 = extractelement <2 x i32> %36, i64 0, !dbg !30
  %40 = add nsw i32 %39, %38, !dbg !30
  %41 = sext i32 %40 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !31
  %43 = and i1 %13, %34, !dbg !32
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #1, !dbg !33
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !33
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !33
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !33
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !33
  %49 = sext i32 %37 to i64, !dbg !34
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !34
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %43, i32 0, i1 %43) #1, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %43, i32 0, i1 %43) #1, !dbg !35
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %43, i32 0, i1 %43) #1, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %43, i32 0, i1 %43) #1, !dbg !35
  %55 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !33
  %56 = insertelement <4 x i32> %55, i32 %47, i64 1, !dbg !33
  %57 = insertelement <4 x i32> %56, i32 %46, i64 2, !dbg !33
  %58 = insertelement <4 x i32> %57, i32 %45, i64 3, !dbg !33
  %59 = bitcast <4 x i32> %58 to <4 x float>, !dbg !33
  %60 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !35
  %61 = insertelement <4 x i32> %60, i32 %53, i64 1, !dbg !35
  %62 = insertelement <4 x i32> %61, i32 %52, i64 2, !dbg !35
  %63 = insertelement <4 x i32> %62, i32 %51, i64 3, !dbg !35
  %64 = bitcast <4 x i32> %63 to <4 x float>, !dbg !35
  %65 = fadd <4 x float> %59, %64, !dbg !36
  %66 = fcmp ogt <4 x float> %65, zeroinitializer, !dbg !37
  %67 = extractelement <4 x float> %65, i64 3, !dbg !38
  %68 = fmul float %67, 0x3FB99999A0000000, !dbg !39
  %69 = extractelement <4 x float> %65, i64 2, !dbg !38
  %70 = fmul float %69, 0x3FB99999A0000000, !dbg !39
  %71 = extractelement <4 x float> %65, i64 1, !dbg !38
  %72 = fmul float %71, 0x3FB99999A0000000, !dbg !39
  %73 = extractelement <4 x float> %65, i64 0, !dbg !38
  %74 = fmul float %73, 0x3FB99999A0000000, !dbg !39
  %75 = extractelement <4 x i1> %66, i64 3, !dbg !38
  %76 = select i1 %75, float %67, float %68, !dbg !38
  %77 = extractelement <4 x i1> %66, i64 2, !dbg !38
  %78 = select i1 %77, float %69, float %70, !dbg !38
  %79 = extractelement <4 x i1> %66, i64 1, !dbg !38
  %80 = select i1 %79, float %71, float %72, !dbg !38
  %81 = extractelement <4 x i1> %66, i64 0, !dbg !38
  %82 = select i1 %81, float %73, float %74, !dbg !38
  %83 = icmp sgt i32 %25, 767, !dbg !40
  %84 = shl nsw i32 %25, 4, !dbg !23
  %85 = shl nsw i32 %15, 5, !dbg !41
  %86 = extractelement <2 x i32> %24, i64 0, !dbg !23
  %87 = add nsw i32 %86, -12288, !dbg !23
  %88 = add nsw i32 %87, %85, !dbg !42
  %89 = add nsw i32 %88, %84, !dbg !43
  %90 = sext i32 %89 to i64, !dbg !44
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !44
  %92 = and i1 %13, %83, !dbg !45
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #1, !dbg !46
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !46
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !46
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !46
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !46
  %98 = sext i32 %12 to i64, !dbg !47
  %99 = getelementptr float, ptr addrspace(1) %4, i64 %98, !dbg !47
  %100 = bitcast float %76 to i32, !dbg !48
  %101 = select i1 %34, i32 %100, i32 %94, !dbg !49
  %102 = select i1 %26, i32 %29, i32 %101, !dbg !50
  %103 = bitcast float %78 to i32, !dbg !48
  %104 = select i1 %34, i32 %103, i32 %95, !dbg !49
  %105 = select i1 %26, i32 %30, i32 %104, !dbg !50
  %106 = bitcast float %80 to i32, !dbg !48
  %107 = select i1 %34, i32 %106, i32 %96, !dbg !49
  %108 = select i1 %26, i32 %31, i32 %107, !dbg !50
  %109 = bitcast float %82 to i32, !dbg !48
  %110 = select i1 %34, i32 %109, i32 %97, !dbg !49
  %111 = select i1 %26, i32 %32, i32 %110, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %102, i32 %105, i32 %108, i32 %111, ptr addrspace(1) %99, i1 %13) #1, !dbg !48
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "citw46js5arlkmekkrxmbwntyu72u45ikcaclf3vea6bw2cfdzv3.py", directory: "inductor_cache/it")
!4 = !{ptr @triton_poi_fused_cat_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_11", linkageName: "triton_poi_fused_cat_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 50, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 38, column: 60, scope: !7)
!22 = !DILocation(line: 25, column: 19, scope: !7)
!23 = !DILocation(line: 51, column: 40, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 62, scope: !7)
!26 = !DILocation(line: 33, column: 55, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 40, scope: !7)
!30 = !DILocation(line: 38, column: 55, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 72, scope: !7)
!33 = !DILocation(line: 38, column: 65, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 45, scope: !7)
!36 = !DILocation(line: 40, column: 20, scope: !7)
!37 = !DILocation(line: 42, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 35, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 58, scope: !7)
!42 = !DILocation(line: 51, column: 36, scope: !7)
!43 = !DILocation(line: 51, column: 55, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 71, scope: !7)
!46 = !DILocation(line: 51, column: 63, scope: !7)
!47 = !DILocation(line: 54, column: 25, scope: !7)
!48 = !DILocation(line: 54, column: 37, scope: !7)
!49 = !DILocation(line: 0, scope: !7)
!50 = !DILocation(line: 53, column: 33, scope: !7)
!51 = !DILocation(line: 54, column: 4, scope: !7)
