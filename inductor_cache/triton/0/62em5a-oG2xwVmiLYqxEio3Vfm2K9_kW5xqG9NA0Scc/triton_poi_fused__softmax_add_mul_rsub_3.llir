; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_add_mul_rsub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = sdiv i32 %11, 16, !dbg !15
  %14 = shl i32 %11, 2, !dbg !16
  %15 = or disjoint i32 %14, 4, !dbg !16
  %16 = sext i32 %14 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !17
  %18 = sext i32 %15 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %12) #1, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %12) #1, !dbg !18
  %22 = shl nsw i32 %13, 2, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #1, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #1, !dbg !21
  %27 = or disjoint i32 %14, 1, !dbg !22
  %28 = or disjoint i32 %14, 5, !dbg !22
  %29 = sext i32 %27 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = sext i32 %28 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #1, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %12) #1, !dbg !24
  %35 = or disjoint i32 %22, 1, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %12) #1, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %12) #1, !dbg !27
  %40 = or disjoint i32 %14, 2, !dbg !28
  %41 = or disjoint i32 %14, 6, !dbg !28
  %42 = sext i32 %40 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !29
  %44 = sext i32 %41 to i64, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %12) #1, !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %12) #1, !dbg !30
  %49 = bitcast i32 %48 to float, !dbg !30
  %50 = or disjoint i32 %22, 2, !dbg !31
  %51 = sext i32 %50 to i64, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %12) #1, !dbg !33
  %54 = bitcast i32 %53 to float, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %12) #1, !dbg !33
  %56 = bitcast i32 %55 to float, !dbg !33
  %57 = or disjoint i32 %14, 3, !dbg !34
  %58 = or disjoint i32 %14, 7, !dbg !34
  %59 = sext i32 %57 to i64, !dbg !35
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !35
  %61 = sext i32 %58 to i64, !dbg !35
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %12) #1, !dbg !36
  %64 = bitcast i32 %63 to float, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %12) #1, !dbg !36
  %66 = bitcast i32 %65 to float, !dbg !36
  %67 = or disjoint i32 %22, 3, !dbg !37
  %68 = sext i32 %67 to i64, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !38
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %12) #1, !dbg !39
  %71 = bitcast i32 %70 to float, !dbg !39
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %12) #1, !dbg !39
  %73 = bitcast i32 %72 to float, !dbg !39
  %74 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !18
  %75 = insertelement <2 x i32> %74, i32 %33, i64 1, !dbg !18
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !18
  %77 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !21
  %78 = insertelement <2 x i32> %77, i32 %38, i64 1, !dbg !21
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !21
  %80 = fmul <2 x float> %76, %79, !dbg !40
  %81 = fsub <2 x float> splat (float 1.000000e+00), %79, !dbg !41
  %82 = fmul <2 x float> %81, splat (float 0x46293E5940000000), !dbg !42
  %83 = fsub <2 x float> %80, %82, !dbg !43
  %84 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !18
  %85 = insertelement <2 x i32> %84, i32 %34, i64 1, !dbg !18
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !18
  %87 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !21
  %88 = insertelement <2 x i32> %87, i32 %39, i64 1, !dbg !21
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !21
  %90 = fmul <2 x float> %86, %89, !dbg !40
  %91 = fsub <2 x float> splat (float 1.000000e+00), %89, !dbg !41
  %92 = fmul <2 x float> %91, splat (float 0x46293E5940000000), !dbg !42
  %93 = fsub <2 x float> %90, %92, !dbg !43
  %94 = extractelement <2 x float> %83, i64 0, !dbg !44
  %95 = extractelement <2 x float> %83, i64 1, !dbg !44
  %96 = fcmp ogt float %94, %95, !dbg !44
  %97 = extractelement <2 x float> %93, i64 0, !dbg !44
  %98 = extractelement <2 x float> %93, i64 1, !dbg !44
  %99 = fcmp ogt float %97, %98, !dbg !44
  %100 = fcmp uno float %94, 0.000000e+00, !dbg !48
  %101 = fcmp uno float %97, 0.000000e+00, !dbg !48
  %102 = or i1 %100, %96, !dbg !49
  %103 = or i1 %101, %99, !dbg !49
  %104 = select i1 %102, float %94, float %95, !dbg !50
  %105 = select i1 %103, float %97, float %98, !dbg !50
  %106 = fmul float %47, %54, !dbg !51
  %107 = fmul float %49, %56, !dbg !51
  %108 = fsub float 1.000000e+00, %54, !dbg !52
  %109 = fsub float 1.000000e+00, %56, !dbg !52
  %110 = fmul float %108, 0x46293E5940000000, !dbg !53
  %111 = fmul float %109, 0x46293E5940000000, !dbg !53
  %112 = fsub float %106, %110, !dbg !54
  %113 = fsub float %107, %111, !dbg !54
  %114 = fcmp ogt float %104, %112, !dbg !55
  %115 = fcmp ogt float %105, %113, !dbg !55
  %116 = fcmp uno float %104, 0.000000e+00, !dbg !57
  %117 = fcmp uno float %105, 0.000000e+00, !dbg !57
  %118 = or i1 %116, %114, !dbg !58
  %119 = or i1 %117, %115, !dbg !58
  %120 = select i1 %118, float %104, float %112, !dbg !59
  %121 = select i1 %119, float %105, float %113, !dbg !59
  %122 = fmul float %64, %71, !dbg !60
  %123 = fmul float %66, %73, !dbg !60
  %124 = fsub float 1.000000e+00, %71, !dbg !61
  %125 = fsub float 1.000000e+00, %73, !dbg !61
  %126 = fmul float %124, 0x46293E5940000000, !dbg !62
  %127 = fmul float %125, 0x46293E5940000000, !dbg !62
  %128 = fsub float %122, %126, !dbg !63
  %129 = fsub float %123, %127, !dbg !63
  %130 = fcmp ogt float %120, %128, !dbg !64
  %131 = fcmp ogt float %121, %129, !dbg !64
  %132 = fcmp uno float %120, 0.000000e+00, !dbg !66
  %133 = fcmp uno float %121, 0.000000e+00, !dbg !66
  %134 = or i1 %132, %130, !dbg !67
  %135 = or i1 %133, %131, !dbg !67
  %136 = select i1 %134, float %120, float %128, !dbg !68
  %137 = select i1 %135, float %121, float %129, !dbg !68
  %138 = fsub float %94, %136, !dbg !69
  %139 = fsub float %97, %137, !dbg !69
  %140 = fmul float %138, 0x3FF7154760000000, !dbg !70
  %141 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %140) #1, !dbg !70
  %142 = fmul float %139, 0x3FF7154760000000, !dbg !70
  %143 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %142) #1, !dbg !70
  %144 = fsub float %95, %136, !dbg !71
  %145 = fsub float %98, %137, !dbg !71
  %146 = fmul float %144, 0x3FF7154760000000, !dbg !72
  %147 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %146) #1, !dbg !72
  %148 = fmul float %145, 0x3FF7154760000000, !dbg !72
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #1, !dbg !72
  %150 = fadd float %141, %147, !dbg !73
  %151 = fadd float %143, %149, !dbg !73
  %152 = fsub float %112, %136, !dbg !74
  %153 = fsub float %113, %137, !dbg !74
  %154 = fmul float %152, 0x3FF7154760000000, !dbg !75
  %155 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %154) #1, !dbg !75
  %156 = fmul float %153, 0x3FF7154760000000, !dbg !75
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %156) #1, !dbg !75
  %158 = fadd float %150, %155, !dbg !76
  %159 = fadd float %151, %157, !dbg !76
  %160 = fsub float %128, %136, !dbg !77
  %161 = fsub float %129, %137, !dbg !77
  %162 = fmul float %160, 0x3FF7154760000000, !dbg !78
  %163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %162) #1, !dbg !78
  %164 = fmul float %161, 0x3FF7154760000000, !dbg !78
  %165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #1, !dbg !78
  %166 = fadd float %158, %163, !dbg !79
  %167 = fadd float %159, %165, !dbg !79
  %168 = sext i32 %11 to i64, !dbg !80
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %168, !dbg !80
  %170 = bitcast float %136 to i32, !dbg !81
  %171 = bitcast float %137 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %171, ptr addrspace(1) %169, i1 %12) #1, !dbg !81
  %172 = getelementptr float, ptr addrspace(1) %3, i64 %168, !dbg !82
  %173 = bitcast float %166 to i32, !dbg !83
  %174 = bitcast float %167 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %172, i1 %12) #1, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4gewrjketnkm4oyk2vafdqqqbfrdoxc2kvf72wkbs5sdoxhb5i4.py", directory: "inductor_cache/4g")
!4 = !{ptr @triton_poi_fused__softmax_add_mul_rsub_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_add_mul_rsub_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_add_mul_rsub_3", linkageName: "triton_poi_fused__softmax_add_mul_rsub_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 32, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 31, scope: !7)
!30 = !DILocation(line: 30, column: 42, scope: !7)
!31 = !DILocation(line: 31, column: 35, scope: !7)
!32 = !DILocation(line: 31, column: 31, scope: !7)
!33 = !DILocation(line: 31, column: 42, scope: !7)
!34 = !DILocation(line: 32, column: 35, scope: !7)
!35 = !DILocation(line: 32, column: 31, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 33, column: 35, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 42, scope: !7)
!40 = !DILocation(line: 34, column: 18, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 44, column: 41, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 45, column: 20, scope: !7)
!52 = !DILocation(line: 46, column: 19, scope: !7)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 48, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !56)
!56 = !DILocation(line: 49, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !56)
!60 = !DILocation(line: 50, column: 20, scope: !7)
!61 = !DILocation(line: 51, column: 19, scope: !7)
!62 = !DILocation(line: 52, column: 20, scope: !7)
!63 = !DILocation(line: 53, column: 20, scope: !7)
!64 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !65)
!65 = !DILocation(line: 54, column: 42, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !65)
!69 = !DILocation(line: 55, column: 19, scope: !7)
!70 = !DILocation(line: 56, column: 24, scope: !7)
!71 = !DILocation(line: 57, column: 20, scope: !7)
!72 = !DILocation(line: 58, column: 24, scope: !7)
!73 = !DILocation(line: 59, column: 20, scope: !7)
!74 = !DILocation(line: 60, column: 20, scope: !7)
!75 = !DILocation(line: 61, column: 24, scope: !7)
!76 = !DILocation(line: 62, column: 20, scope: !7)
!77 = !DILocation(line: 63, column: 20, scope: !7)
!78 = !DILocation(line: 64, column: 24, scope: !7)
!79 = !DILocation(line: 65, column: 20, scope: !7)
!80 = !DILocation(line: 66, column: 25, scope: !7)
!81 = !DILocation(line: 66, column: 37, scope: !7)
!82 = !DILocation(line: 67, column: 25, scope: !7)
!83 = !DILocation(line: 67, column: 37, scope: !7)
!84 = !DILocation(line: 67, column: 4, scope: !7)
