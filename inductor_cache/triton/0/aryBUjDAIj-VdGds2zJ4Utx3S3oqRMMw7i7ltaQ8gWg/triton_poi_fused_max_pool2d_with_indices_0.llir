; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 144, !dbg !14
  %12 = sdiv i32 %9, 3, !dbg !15
  %13 = sdiv i32 %10, 3, !dbg !15
  %14 = sdiv i32 %9, 9, !dbg !16
  %15 = sdiv i32 %10, 9, !dbg !16
  %16 = shl i32 %14, 4, !dbg !17
  %17 = shl i32 %15, 4, !dbg !17
  %18 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !18
  %19 = insertelement <2 x i32> %18, i32 %12, i64 1, !dbg !18
  %20 = srem <2 x i32> %19, splat (i32 3), !dbg !18
  %21 = extractelement <2 x i32> %20, i64 1, !dbg !19
  %22 = icmp sgt i32 %21, 0, !dbg !20
  %23 = extractelement <2 x i32> %20, i64 0, !dbg !21
  %24 = icmp sgt i32 %23, 0, !dbg !22
  %25 = and i1 %24, %22, !dbg !23
  %26 = shl nsw i32 %21, 2, !dbg !24
  %27 = add i32 %16, %23, !dbg !21
  %28 = add i32 %27, -5, !dbg !25
  %29 = add i32 %28, %26, !dbg !26
  %30 = sext i32 %29 to i64, !dbg !27
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !27
  %32 = and i1 %11, %25, !dbg !28
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 -8388608, i1 %32) #1, !dbg !29
  %34 = bitcast i32 %33 to float, !dbg !29
  %35 = icmp sgt i32 %23, -1, !dbg !30
  %36 = and i1 %35, %22, !dbg !31
  %37 = add i32 %27, -4, !dbg !32
  %38 = add i32 %37, %26, !dbg !33
  %39 = sext i32 %38 to i64, !dbg !34
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !34
  %41 = and i1 %11, %36, !dbg !35
  %42 = icmp sgt i32 %23, -2, !dbg !36
  %43 = and i1 %42, %22, !dbg !37
  %44 = add i32 %27, -3, !dbg !38
  %45 = add i32 %44, %26, !dbg !39
  %46 = sext i32 %45 to i64, !dbg !40
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !40
  %48 = and i1 %11, %43, !dbg !41
  %49 = icmp slt <2 x i32> %20, splat (i32 2), !dbg !42
  %50 = extractelement <2 x i1> %49, i64 0, !dbg !43
  %51 = and i1 %50, %22, !dbg !43
  %52 = add i32 %27, -2, !dbg !44
  %53 = add i32 %52, %26, !dbg !45
  %54 = sext i32 %53 to i64, !dbg !46
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !46
  %56 = and i1 %11, %51, !dbg !47
  %57 = icmp sgt i32 %21, -1, !dbg !48
  %58 = and i1 %24, %57, !dbg !49
  %59 = add i32 %27, -1, !dbg !50
  %60 = add i32 %59, %26, !dbg !51
  %61 = sext i32 %60 to i64, !dbg !52
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !52
  %63 = and i1 %11, %58, !dbg !53
  %64 = or i32 %21, %23, !dbg !54
  %65 = icmp sgt i32 %64, -1, !dbg !54
  %66 = add i32 %27, %26, !dbg !55
  %67 = sext i32 %66 to i64, !dbg !56
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !56
  %69 = and i1 %11, %65, !dbg !57
  %70 = and i1 %42, %57, !dbg !58
  %71 = add i32 %27, 1, !dbg !59
  %72 = add i32 %71, %26, !dbg !60
  %73 = sext i32 %72 to i64, !dbg !61
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !61
  %75 = and i1 %11, %70, !dbg !62
  %76 = and i1 %50, %57, !dbg !63
  %77 = add i32 %27, 2, !dbg !64
  %78 = add i32 %77, %26, !dbg !65
  %79 = sext i32 %78 to i64, !dbg !66
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !66
  %81 = and i1 %11, %76, !dbg !67
  %82 = icmp sgt i32 %21, -2, !dbg !19
  %83 = and i1 %24, %82, !dbg !68
  %84 = add i32 %27, 3, !dbg !69
  %85 = add i32 %84, %26, !dbg !70
  %86 = sext i32 %85 to i64, !dbg !71
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !71
  %88 = and i1 %11, %83, !dbg !72
  %89 = and i1 %35, %82, !dbg !73
  %90 = add i32 %27, 4, !dbg !74
  %91 = add i32 %90, %26, !dbg !75
  %92 = sext i32 %91 to i64, !dbg !76
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !76
  %94 = and i1 %11, %89, !dbg !77
  %95 = and i1 %42, %82, !dbg !78
  %96 = add i32 %27, 5, !dbg !79
  %97 = add i32 %96, %26, !dbg !80
  %98 = sext i32 %97 to i64, !dbg !81
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !81
  %100 = and i1 %11, %95, !dbg !82
  %101 = and i1 %50, %82, !dbg !83
  %102 = add i32 %27, 6, !dbg !84
  %103 = add i32 %102, %26, !dbg !85
  %104 = sext i32 %103 to i64, !dbg !86
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !86
  %106 = and i1 %11, %101, !dbg !87
  %107 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !18
  %108 = insertelement <2 x i32> %107, i32 %13, i64 1, !dbg !18
  %109 = srem <2 x i32> %108, splat (i32 3), !dbg !18
  %110 = extractelement <2 x i32> %109, i64 1, !dbg !19
  %111 = icmp sgt i32 %110, 0, !dbg !20
  %112 = extractelement <2 x i32> %109, i64 0, !dbg !21
  %113 = icmp sgt i32 %112, 0, !dbg !22
  %114 = and i1 %113, %111, !dbg !23
  %115 = shl nsw i32 %110, 2, !dbg !24
  %116 = add i32 %17, %112, !dbg !21
  %117 = add i32 %116, -5, !dbg !25
  %118 = add i32 %117, %115, !dbg !26
  %119 = sext i32 %118 to i64, !dbg !27
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !27
  %121 = and i1 %114, %11, !dbg !28
  %122 = icmp sgt i32 %112, -1, !dbg !30
  %123 = and i1 %122, %111, !dbg !31
  %124 = add i32 %116, -4, !dbg !32
  %125 = add i32 %124, %115, !dbg !33
  %126 = sext i32 %125 to i64, !dbg !34
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !34
  %128 = and i1 %123, %11, !dbg !35
  %129 = icmp sgt i32 %112, -2, !dbg !36
  %130 = and i1 %129, %111, !dbg !37
  %131 = add i32 %116, -3, !dbg !38
  %132 = add i32 %131, %115, !dbg !39
  %133 = sext i32 %132 to i64, !dbg !40
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !40
  %135 = and i1 %130, %11, !dbg !41
  %136 = icmp slt <2 x i32> %109, splat (i32 2), !dbg !42
  %137 = extractelement <2 x i1> %136, i64 0, !dbg !43
  %138 = and i1 %137, %111, !dbg !43
  %139 = add i32 %116, -2, !dbg !44
  %140 = add i32 %139, %115, !dbg !45
  %141 = sext i32 %140 to i64, !dbg !46
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !46
  %143 = and i1 %138, %11, !dbg !47
  %144 = icmp sgt i32 %110, -1, !dbg !48
  %145 = and i1 %113, %144, !dbg !49
  %146 = add i32 %116, -1, !dbg !50
  %147 = add i32 %146, %115, !dbg !51
  %148 = sext i32 %147 to i64, !dbg !52
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !52
  %150 = and i1 %145, %11, !dbg !53
  %151 = or i32 %110, %112, !dbg !54
  %152 = icmp sgt i32 %151, -1, !dbg !54
  %153 = add i32 %116, %115, !dbg !55
  %154 = sext i32 %153 to i64, !dbg !56
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !56
  %156 = and i1 %152, %11, !dbg !57
  %157 = and i1 %129, %144, !dbg !58
  %158 = add i32 %116, 1, !dbg !59
  %159 = add i32 %158, %115, !dbg !60
  %160 = sext i32 %159 to i64, !dbg !61
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !61
  %162 = and i1 %157, %11, !dbg !62
  %163 = and i1 %137, %144, !dbg !63
  %164 = add i32 %116, 2, !dbg !64
  %165 = add i32 %164, %115, !dbg !65
  %166 = sext i32 %165 to i64, !dbg !66
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !66
  %168 = and i1 %163, %11, !dbg !67
  %169 = icmp sgt i32 %110, -2, !dbg !19
  %170 = and i1 %113, %169, !dbg !68
  %171 = add i32 %116, 3, !dbg !69
  %172 = add i32 %171, %115, !dbg !70
  %173 = sext i32 %172 to i64, !dbg !71
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !71
  %175 = and i1 %170, %11, !dbg !72
  %176 = and i1 %122, %169, !dbg !73
  %177 = add i32 %116, 4, !dbg !74
  %178 = add i32 %177, %115, !dbg !75
  %179 = sext i32 %178 to i64, !dbg !76
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !76
  %181 = and i1 %176, %11, !dbg !77
  %182 = and i1 %129, %169, !dbg !78
  %183 = add i32 %116, 5, !dbg !79
  %184 = add i32 %183, %115, !dbg !80
  %185 = sext i32 %184 to i64, !dbg !81
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !81
  %187 = and i1 %182, %11, !dbg !82
  %188 = and i1 %137, %169, !dbg !83
  %189 = add i32 %116, 6, !dbg !84
  %190 = add i32 %189, %115, !dbg !85
  %191 = sext i32 %190 to i64, !dbg !86
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !86
  %193 = and i1 %188, %11, !dbg !87
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %121, i32 -8388608, i1 %121) #1, !dbg !29
  %195 = bitcast i32 %194 to float, !dbg !29
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %41, i32 -8388608, i1 %41) #1, !dbg !88
  %197 = bitcast i32 %196 to float, !dbg !88
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %128, i32 -8388608, i1 %128) #1, !dbg !88
  %199 = bitcast i32 %198 to float, !dbg !88
  %200 = fcmp ogt float %197, %34, !dbg !89
  %201 = fcmp ogt float %199, %195, !dbg !89
  %202 = fcmp uno float %197, 0.000000e+00, !dbg !93
  %203 = fcmp uno float %199, 0.000000e+00, !dbg !93
  %204 = or i1 %200, %202, !dbg !94
  %205 = or i1 %201, %203, !dbg !94
  %206 = select i1 %204, float %197, float %34, !dbg !95
  %207 = select i1 %205, float %199, float %195, !dbg !95
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %48, i32 -8388608, i1 %48) #1, !dbg !96
  %209 = bitcast i32 %208 to float, !dbg !96
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %135, i32 -8388608, i1 %135) #1, !dbg !96
  %211 = bitcast i32 %210 to float, !dbg !96
  %212 = fcmp olt float %206, %209, !dbg !97
  %213 = fcmp olt float %207, %211, !dbg !97
  %214 = fcmp uno float %209, 0.000000e+00, !dbg !99
  %215 = fcmp uno float %211, 0.000000e+00, !dbg !99
  %216 = or i1 %214, %212, !dbg !100
  %217 = or i1 %215, %213, !dbg !100
  %218 = select i1 %216, float %209, float %206, !dbg !101
  %219 = select i1 %217, float %211, float %207, !dbg !101
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %56, i32 -8388608, i1 %56) #1, !dbg !102
  %221 = bitcast i32 %220 to float, !dbg !102
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %143, i32 -8388608, i1 %143) #1, !dbg !102
  %223 = bitcast i32 %222 to float, !dbg !102
  %224 = fcmp olt float %218, %221, !dbg !103
  %225 = fcmp olt float %219, %223, !dbg !103
  %226 = fcmp uno float %221, 0.000000e+00, !dbg !105
  %227 = fcmp uno float %223, 0.000000e+00, !dbg !105
  %228 = or i1 %226, %224, !dbg !106
  %229 = or i1 %227, %225, !dbg !106
  %230 = select i1 %228, float %221, float %218, !dbg !107
  %231 = select i1 %229, float %223, float %219, !dbg !107
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 -8388608, i1 %63) #1, !dbg !108
  %233 = bitcast i32 %232 to float, !dbg !108
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %150, i32 -8388608, i1 %150) #1, !dbg !108
  %235 = bitcast i32 %234 to float, !dbg !108
  %236 = fcmp olt float %230, %233, !dbg !109
  %237 = fcmp olt float %231, %235, !dbg !109
  %238 = fcmp uno float %233, 0.000000e+00, !dbg !111
  %239 = fcmp uno float %235, 0.000000e+00, !dbg !111
  %240 = or i1 %238, %236, !dbg !112
  %241 = or i1 %239, %237, !dbg !112
  %242 = select i1 %240, float %233, float %230, !dbg !113
  %243 = select i1 %241, float %235, float %231, !dbg !113
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %69, i32 -8388608, i1 %69) #1, !dbg !114
  %245 = bitcast i32 %244 to float, !dbg !114
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %156, i32 -8388608, i1 %156) #1, !dbg !114
  %247 = bitcast i32 %246 to float, !dbg !114
  %248 = fcmp olt float %242, %245, !dbg !115
  %249 = fcmp olt float %243, %247, !dbg !115
  %250 = fcmp uno float %245, 0.000000e+00, !dbg !117
  %251 = fcmp uno float %247, 0.000000e+00, !dbg !117
  %252 = or i1 %250, %248, !dbg !118
  %253 = or i1 %251, %249, !dbg !118
  %254 = select i1 %252, float %245, float %242, !dbg !119
  %255 = select i1 %253, float %247, float %243, !dbg !119
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 -8388608, i1 %75) #1, !dbg !120
  %257 = bitcast i32 %256 to float, !dbg !120
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %162, i32 -8388608, i1 %162) #1, !dbg !120
  %259 = bitcast i32 %258 to float, !dbg !120
  %260 = fcmp olt float %254, %257, !dbg !121
  %261 = fcmp olt float %255, %259, !dbg !121
  %262 = fcmp uno float %257, 0.000000e+00, !dbg !123
  %263 = fcmp uno float %259, 0.000000e+00, !dbg !123
  %264 = or i1 %262, %260, !dbg !124
  %265 = or i1 %263, %261, !dbg !124
  %266 = select i1 %264, float %257, float %254, !dbg !125
  %267 = select i1 %265, float %259, float %255, !dbg !125
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %81, i32 -8388608, i1 %81) #1, !dbg !126
  %269 = bitcast i32 %268 to float, !dbg !126
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %168, i32 -8388608, i1 %168) #1, !dbg !126
  %271 = bitcast i32 %270 to float, !dbg !126
  %272 = fcmp olt float %266, %269, !dbg !127
  %273 = fcmp olt float %267, %271, !dbg !127
  %274 = fcmp uno float %269, 0.000000e+00, !dbg !129
  %275 = fcmp uno float %271, 0.000000e+00, !dbg !129
  %276 = or i1 %274, %272, !dbg !130
  %277 = or i1 %275, %273, !dbg !130
  %278 = select i1 %276, float %269, float %266, !dbg !131
  %279 = select i1 %277, float %271, float %267, !dbg !131
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %88, i32 -8388608, i1 %88) #1, !dbg !132
  %281 = bitcast i32 %280 to float, !dbg !132
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %175, i32 -8388608, i1 %175) #1, !dbg !132
  %283 = bitcast i32 %282 to float, !dbg !132
  %284 = fcmp olt float %278, %281, !dbg !133
  %285 = fcmp olt float %279, %283, !dbg !133
  %286 = fcmp uno float %281, 0.000000e+00, !dbg !135
  %287 = fcmp uno float %283, 0.000000e+00, !dbg !135
  %288 = or i1 %286, %284, !dbg !136
  %289 = or i1 %287, %285, !dbg !136
  %290 = select i1 %288, float %281, float %278, !dbg !137
  %291 = select i1 %289, float %283, float %279, !dbg !137
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %94, i32 -8388608, i1 %94) #1, !dbg !138
  %293 = bitcast i32 %292 to float, !dbg !138
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %181, i32 -8388608, i1 %181) #1, !dbg !138
  %295 = bitcast i32 %294 to float, !dbg !138
  %296 = fcmp olt float %290, %293, !dbg !139
  %297 = fcmp olt float %291, %295, !dbg !139
  %298 = fcmp uno float %293, 0.000000e+00, !dbg !141
  %299 = fcmp uno float %295, 0.000000e+00, !dbg !141
  %300 = or i1 %298, %296, !dbg !142
  %301 = or i1 %299, %297, !dbg !142
  %302 = select i1 %300, float %293, float %290, !dbg !143
  %303 = select i1 %301, float %295, float %291, !dbg !143
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %100, i32 -8388608, i1 %100) #1, !dbg !144
  %305 = bitcast i32 %304 to float, !dbg !144
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %187, i32 -8388608, i1 %187) #1, !dbg !144
  %307 = bitcast i32 %306 to float, !dbg !144
  %308 = fcmp olt float %302, %305, !dbg !145
  %309 = fcmp olt float %303, %307, !dbg !145
  %310 = fcmp uno float %305, 0.000000e+00, !dbg !147
  %311 = fcmp uno float %307, 0.000000e+00, !dbg !147
  %312 = or i1 %310, %308, !dbg !148
  %313 = or i1 %311, %309, !dbg !148
  %314 = select i1 %312, float %305, float %302, !dbg !149
  %315 = select i1 %313, float %307, float %303, !dbg !149
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %106, i32 -8388608, i1 %106) #1, !dbg !150
  %317 = bitcast i32 %316 to float, !dbg !150
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %193, i32 -8388608, i1 %193) #1, !dbg !150
  %319 = bitcast i32 %318 to float, !dbg !150
  %320 = fcmp olt float %314, %317, !dbg !151
  %321 = fcmp olt float %315, %319, !dbg !151
  %322 = fcmp uno float %317, 0.000000e+00, !dbg !153
  %323 = fcmp uno float %319, 0.000000e+00, !dbg !153
  %324 = or i1 %322, %320, !dbg !154
  %325 = or i1 %323, %321, !dbg !154
  %326 = select i1 %324, float %317, float %314, !dbg !155
  %327 = select i1 %325, float %319, float %315, !dbg !155
  %328 = extractelement <2 x i1> %49, i64 1, !dbg !156
  %329 = and i1 %24, %328, !dbg !156
  %330 = extractelement <2 x i1> %136, i64 1, !dbg !156
  %331 = and i1 %113, %330, !dbg !156
  %332 = add i32 %27, 7, !dbg !157
  %333 = add i32 %332, %26, !dbg !158
  %334 = add i32 %116, 7, !dbg !157
  %335 = add i32 %334, %115, !dbg !158
  %336 = sext i32 %333 to i64, !dbg !159
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !159
  %338 = sext i32 %335 to i64, !dbg !159
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !159
  %340 = and i1 %11, %329, !dbg !160
  %341 = and i1 %331, %11, !dbg !160
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %337, i1 %340, i32 -8388608, i1 %340) #1, !dbg !161
  %343 = bitcast i32 %342 to float, !dbg !161
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %341, i32 -8388608, i1 %341) #1, !dbg !161
  %345 = bitcast i32 %344 to float, !dbg !161
  %346 = fcmp olt float %326, %343, !dbg !162
  %347 = fcmp olt float %327, %345, !dbg !162
  %348 = fcmp uno float %343, 0.000000e+00, !dbg !164
  %349 = fcmp uno float %345, 0.000000e+00, !dbg !164
  %350 = or i1 %348, %346, !dbg !165
  %351 = or i1 %349, %347, !dbg !165
  %352 = select i1 %350, float %343, float %326, !dbg !166
  %353 = select i1 %351, float %345, float %327, !dbg !166
  %354 = and i1 %35, %328, !dbg !167
  %355 = and i1 %122, %330, !dbg !167
  %356 = add i32 %27, 8, !dbg !168
  %357 = add i32 %356, %26, !dbg !169
  %358 = add i32 %116, 8, !dbg !168
  %359 = add i32 %358, %115, !dbg !169
  %360 = sext i32 %357 to i64, !dbg !170
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !170
  %362 = sext i32 %359 to i64, !dbg !170
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !170
  %364 = and i1 %11, %354, !dbg !171
  %365 = and i1 %355, %11, !dbg !171
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %361, i1 %364, i32 -8388608, i1 %364) #1, !dbg !172
  %367 = bitcast i32 %366 to float, !dbg !172
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %363, i1 %365, i32 -8388608, i1 %365) #1, !dbg !172
  %369 = bitcast i32 %368 to float, !dbg !172
  %370 = fcmp olt float %352, %367, !dbg !173
  %371 = fcmp olt float %353, %369, !dbg !173
  %372 = fcmp uno float %367, 0.000000e+00, !dbg !175
  %373 = fcmp uno float %369, 0.000000e+00, !dbg !175
  %374 = or i1 %372, %370, !dbg !176
  %375 = or i1 %373, %371, !dbg !176
  %376 = select i1 %374, float %367, float %352, !dbg !177
  %377 = select i1 %375, float %369, float %353, !dbg !177
  %378 = and i1 %42, %328, !dbg !178
  %379 = and i1 %129, %330, !dbg !178
  %380 = add i32 %27, 9, !dbg !179
  %381 = add i32 %380, %26, !dbg !180
  %382 = add i32 %116, 9, !dbg !179
  %383 = add i32 %382, %115, !dbg !180
  %384 = sext i32 %381 to i64, !dbg !181
  %385 = getelementptr float, ptr addrspace(1) %0, i64 %384, !dbg !181
  %386 = sext i32 %383 to i64, !dbg !181
  %387 = getelementptr float, ptr addrspace(1) %0, i64 %386, !dbg !181
  %388 = and i1 %11, %378, !dbg !182
  %389 = and i1 %379, %11, !dbg !182
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %385, i1 %388, i32 -8388608, i1 %388) #1, !dbg !183
  %391 = bitcast i32 %390 to float, !dbg !183
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %387, i1 %389, i32 -8388608, i1 %389) #1, !dbg !183
  %393 = bitcast i32 %392 to float, !dbg !183
  %394 = fcmp olt float %376, %391, !dbg !184
  %395 = fcmp olt float %377, %393, !dbg !184
  %396 = fcmp uno float %391, 0.000000e+00, !dbg !186
  %397 = fcmp uno float %393, 0.000000e+00, !dbg !186
  %398 = or i1 %396, %394, !dbg !187
  %399 = or i1 %397, %395, !dbg !187
  %400 = select i1 %398, float %391, float %376, !dbg !188
  %401 = select i1 %399, float %393, float %377, !dbg !188
  %402 = and i1 %50, %328, !dbg !189
  %403 = and i1 %137, %330, !dbg !189
  %404 = add i32 %27, 10, !dbg !190
  %405 = add i32 %404, %26, !dbg !191
  %406 = add i32 %116, 10, !dbg !190
  %407 = add i32 %406, %115, !dbg !191
  %408 = sext i32 %405 to i64, !dbg !192
  %409 = getelementptr float, ptr addrspace(1) %0, i64 %408, !dbg !192
  %410 = sext i32 %407 to i64, !dbg !192
  %411 = getelementptr float, ptr addrspace(1) %0, i64 %410, !dbg !192
  %412 = and i1 %11, %402, !dbg !193
  %413 = and i1 %403, %11, !dbg !193
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %409, i1 %412, i32 -8388608, i1 %412) #1, !dbg !194
  %415 = bitcast i32 %414 to float, !dbg !194
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %411, i1 %413, i32 -8388608, i1 %413) #1, !dbg !194
  %417 = bitcast i32 %416 to float, !dbg !194
  %418 = fcmp olt float %400, %415, !dbg !195
  %419 = fcmp olt float %401, %417, !dbg !195
  %420 = fcmp uno float %415, 0.000000e+00, !dbg !197
  %421 = fcmp uno float %417, 0.000000e+00, !dbg !197
  %422 = or i1 %420, %418, !dbg !198
  %423 = or i1 %421, %419, !dbg !198
  %424 = sext i32 %9 to i64, !dbg !199
  %425 = getelementptr float, ptr addrspace(1) %1, i64 %424, !dbg !199
  %426 = bitcast float %400 to i32, !dbg !200
  %427 = select i1 %422, i32 %414, i32 %426, !dbg !201
  %428 = bitcast float %401 to i32, !dbg !200
  %429 = select i1 %423, i32 %416, i32 %428, !dbg !201
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %427, i32 %429, ptr addrspace(1) %425, i1 %11) #1, !dbg !200
  ret void, !dbg !202
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cci3f6rtr7rlyx6eglpw6xquc5nomjcz3fe3xaxbaafbu6ecsih2.py", directory: "inductor_cache/ci")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_0", linkageName: "triton_poi_fused_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 39, column: 53, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 78, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 39, column: 38, scope: !7)
!22 = !DILocation(line: 35, column: 19, scope: !7)
!23 = !DILocation(line: 38, column: 19, scope: !7)
!24 = !DILocation(line: 39, column: 45, scope: !7)
!25 = !DILocation(line: 39, column: 43, scope: !7)
!26 = !DILocation(line: 39, column: 50, scope: !7)
!27 = !DILocation(line: 39, column: 31, scope: !7)
!28 = !DILocation(line: 39, column: 66, scope: !7)
!29 = !DILocation(line: 39, column: 58, scope: !7)
!30 = !DILocation(line: 41, column: 21, scope: !7)
!31 = !DILocation(line: 44, column: 19, scope: !7)
!32 = !DILocation(line: 45, column: 43, scope: !7)
!33 = !DILocation(line: 45, column: 50, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 66, scope: !7)
!36 = !DILocation(line: 48, column: 21, scope: !7)
!37 = !DILocation(line: 51, column: 19, scope: !7)
!38 = !DILocation(line: 52, column: 43, scope: !7)
!39 = !DILocation(line: 52, column: 50, scope: !7)
!40 = !DILocation(line: 52, column: 31, scope: !7)
!41 = !DILocation(line: 52, column: 66, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 58, column: 19, scope: !7)
!44 = !DILocation(line: 59, column: 43, scope: !7)
!45 = !DILocation(line: 59, column: 50, scope: !7)
!46 = !DILocation(line: 59, column: 31, scope: !7)
!47 = !DILocation(line: 59, column: 66, scope: !7)
!48 = !DILocation(line: 62, column: 21, scope: !7)
!49 = !DILocation(line: 65, column: 20, scope: !7)
!50 = !DILocation(line: 66, column: 43, scope: !7)
!51 = !DILocation(line: 66, column: 50, scope: !7)
!52 = !DILocation(line: 66, column: 31, scope: !7)
!53 = !DILocation(line: 66, column: 66, scope: !7)
!54 = !DILocation(line: 68, column: 20, scope: !7)
!55 = !DILocation(line: 69, column: 43, scope: !7)
!56 = !DILocation(line: 69, column: 31, scope: !7)
!57 = !DILocation(line: 69, column: 59, scope: !7)
!58 = !DILocation(line: 71, column: 20, scope: !7)
!59 = !DILocation(line: 72, column: 40, scope: !7)
!60 = !DILocation(line: 72, column: 47, scope: !7)
!61 = !DILocation(line: 72, column: 31, scope: !7)
!62 = !DILocation(line: 72, column: 63, scope: !7)
!63 = !DILocation(line: 74, column: 20, scope: !7)
!64 = !DILocation(line: 75, column: 40, scope: !7)
!65 = !DILocation(line: 75, column: 47, scope: !7)
!66 = !DILocation(line: 75, column: 31, scope: !7)
!67 = !DILocation(line: 75, column: 63, scope: !7)
!68 = !DILocation(line: 81, column: 20, scope: !7)
!69 = !DILocation(line: 82, column: 40, scope: !7)
!70 = !DILocation(line: 82, column: 47, scope: !7)
!71 = !DILocation(line: 82, column: 31, scope: !7)
!72 = !DILocation(line: 82, column: 63, scope: !7)
!73 = !DILocation(line: 84, column: 20, scope: !7)
!74 = !DILocation(line: 85, column: 40, scope: !7)
!75 = !DILocation(line: 85, column: 47, scope: !7)
!76 = !DILocation(line: 85, column: 31, scope: !7)
!77 = !DILocation(line: 85, column: 63, scope: !7)
!78 = !DILocation(line: 87, column: 20, scope: !7)
!79 = !DILocation(line: 88, column: 40, scope: !7)
!80 = !DILocation(line: 88, column: 47, scope: !7)
!81 = !DILocation(line: 88, column: 31, scope: !7)
!82 = !DILocation(line: 88, column: 63, scope: !7)
!83 = !DILocation(line: 90, column: 20, scope: !7)
!84 = !DILocation(line: 91, column: 40, scope: !7)
!85 = !DILocation(line: 91, column: 47, scope: !7)
!86 = !DILocation(line: 91, column: 31, scope: !7)
!87 = !DILocation(line: 91, column: 63, scope: !7)
!88 = !DILocation(line: 45, column: 58, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 46, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!96 = !DILocation(line: 52, column: 58, scope: !7)
!97 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !98)
!98 = !DILocation(line: 53, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !98)
!102 = !DILocation(line: 59, column: 58, scope: !7)
!103 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !104)
!104 = !DILocation(line: 60, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !104)
!108 = !DILocation(line: 66, column: 58, scope: !7)
!109 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !110)
!110 = !DILocation(line: 67, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !110)
!114 = !DILocation(line: 69, column: 51, scope: !7)
!115 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !116)
!116 = !DILocation(line: 70, column: 42, scope: !7)
!117 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !116)
!118 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !116)
!119 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !116)
!120 = !DILocation(line: 72, column: 55, scope: !7)
!121 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !122)
!122 = !DILocation(line: 73, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !122)
!126 = !DILocation(line: 75, column: 55, scope: !7)
!127 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !128)
!128 = !DILocation(line: 76, column: 42, scope: !7)
!129 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !128)
!130 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !128)
!131 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !128)
!132 = !DILocation(line: 82, column: 55, scope: !7)
!133 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !134)
!134 = !DILocation(line: 83, column: 42, scope: !7)
!135 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !134)
!136 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !134)
!137 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !134)
!138 = !DILocation(line: 85, column: 55, scope: !7)
!139 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !140)
!140 = !DILocation(line: 86, column: 42, scope: !7)
!141 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !140)
!142 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !140)
!143 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !140)
!144 = !DILocation(line: 88, column: 55, scope: !7)
!145 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !146)
!146 = !DILocation(line: 89, column: 42, scope: !7)
!147 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !146)
!148 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !146)
!149 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !146)
!150 = !DILocation(line: 91, column: 55, scope: !7)
!151 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !152)
!152 = !DILocation(line: 92, column: 42, scope: !7)
!153 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !152)
!154 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !152)
!155 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !152)
!156 = !DILocation(line: 97, column: 20, scope: !7)
!157 = !DILocation(line: 98, column: 40, scope: !7)
!158 = !DILocation(line: 98, column: 47, scope: !7)
!159 = !DILocation(line: 98, column: 31, scope: !7)
!160 = !DILocation(line: 98, column: 63, scope: !7)
!161 = !DILocation(line: 98, column: 55, scope: !7)
!162 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !163)
!163 = !DILocation(line: 99, column: 42, scope: !7)
!164 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !163)
!165 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !163)
!166 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !163)
!167 = !DILocation(line: 100, column: 20, scope: !7)
!168 = !DILocation(line: 101, column: 40, scope: !7)
!169 = !DILocation(line: 101, column: 47, scope: !7)
!170 = !DILocation(line: 101, column: 31, scope: !7)
!171 = !DILocation(line: 101, column: 63, scope: !7)
!172 = !DILocation(line: 101, column: 55, scope: !7)
!173 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !174)
!174 = !DILocation(line: 102, column: 42, scope: !7)
!175 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !174)
!176 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !174)
!177 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !174)
!178 = !DILocation(line: 103, column: 20, scope: !7)
!179 = !DILocation(line: 104, column: 40, scope: !7)
!180 = !DILocation(line: 104, column: 47, scope: !7)
!181 = !DILocation(line: 104, column: 31, scope: !7)
!182 = !DILocation(line: 104, column: 63, scope: !7)
!183 = !DILocation(line: 104, column: 55, scope: !7)
!184 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !185)
!185 = !DILocation(line: 105, column: 42, scope: !7)
!186 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !185)
!187 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !185)
!188 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !185)
!189 = !DILocation(line: 106, column: 20, scope: !7)
!190 = !DILocation(line: 107, column: 41, scope: !7)
!191 = !DILocation(line: 107, column: 48, scope: !7)
!192 = !DILocation(line: 107, column: 31, scope: !7)
!193 = !DILocation(line: 107, column: 64, scope: !7)
!194 = !DILocation(line: 107, column: 56, scope: !7)
!195 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !196)
!196 = !DILocation(line: 108, column: 42, scope: !7)
!197 = !DILocation(line: 120, column: 21, scope: !90, inlinedAt: !196)
!198 = !DILocation(line: 120, column: 16, scope: !90, inlinedAt: !196)
!199 = !DILocation(line: 109, column: 25, scope: !7)
!200 = !DILocation(line: 109, column: 37, scope: !7)
!201 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !196)
!202 = !DILocation(line: 109, column: 4, scope: !7)
