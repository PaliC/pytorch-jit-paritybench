; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/qj/cqjayu3d5juyvx3qz67uc3pn4c26i7r6vi27w3bogwzzba22wptd.py\00"
@assertMessage_0 = internal constant [41 x i8] c"index out of bounds: 0 <= tmp9 < 1048576\00"
@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_convolution_max_unpool2d_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !11 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !12
  %11 = shl i32 %10, 10, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = shl i32 %12, 2, !dbg !14
  %14 = and i32 %13, 508, !dbg !14
  %15 = or disjoint i32 %11, %14, !dbg !15
  %16 = or disjoint i32 %15, 2, !dbg !15
  %17 = or disjoint i32 %15, 512, !dbg !15
  %18 = or disjoint i32 %15, 514, !dbg !15
  %19 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !16
  %20 = insertelement <2 x i32> %19, i32 %17, i64 1, !dbg !16
  %21 = sdiv <2 x i32> %20, splat (i32 1024), !dbg !16
  %22 = extractelement <2 x i32> %21, i64 0, !dbg !17
  %23 = srem i32 %22, 64, !dbg !17
  %24 = extractelement <2 x i32> %21, i64 1, !dbg !17
  %25 = srem i32 %24, 64, !dbg !17
  %26 = sext i32 %15 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !18
  %28 = sext i32 %17 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !18
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #6, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #6, !dbg !19
  %32 = sext i32 %23 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !20
  %34 = sext i32 %25 to i64, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #6, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #6, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #6, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #6, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #6, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #6, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #6, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #6, !dbg !21
  %44 = getelementptr i64, ptr addrspace(1) %2, i64 %26, !dbg !22
  %45 = sext i32 %16 to i64, !dbg !22
  %46 = getelementptr i64, ptr addrspace(1) %2, i64 %45, !dbg !22
  %47 = getelementptr i64, ptr addrspace(1) %2, i64 %28, !dbg !22
  %48 = sext i32 %18 to i64, !dbg !22
  %49 = getelementptr i64, ptr addrspace(1) %2, i64 %48, !dbg !22
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #6, !dbg !23
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !23
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !23
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 true) #6, !dbg !23
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !23
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !23
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #6, !dbg !23
  %57 = extractvalue { i64, i64 } %56, 0, !dbg !23
  %58 = extractvalue { i64, i64 } %56, 1, !dbg !23
  %59 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 true) #6, !dbg !23
  %60 = extractvalue { i64, i64 } %59, 0, !dbg !23
  %61 = extractvalue { i64, i64 } %59, 1, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #6, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #6, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #6, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #6, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #6, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #6, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #6, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #6, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #6, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #6, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #6, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #6, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #6, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #6, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #6, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #6, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !28
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !28
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #6, !dbg !29
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #6, !dbg !29
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #6, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #6, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #6, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #6, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #6, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #6, !dbg !29
  %92 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !30
  %93 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !30
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #6, !dbg !31
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #6, !dbg !31
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #6, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #6, !dbg !31
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #6, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #6, !dbg !31
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #6, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #6, !dbg !31
  %102 = shl <2 x i32> %21, splat (i32 12), !dbg !32
  %103 = sext <2 x i32> %102 to <2 x i64>, !dbg !33
  %104 = shufflevector <2 x i64> %103, <2 x i64> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !33
  %105 = insertelement <8 x i64> poison, i64 %51, i64 0, !dbg !33
  %106 = insertelement <8 x i64> %105, i64 %52, i64 1, !dbg !33
  %107 = insertelement <8 x i64> %106, i64 %54, i64 2, !dbg !33
  %108 = insertelement <8 x i64> %107, i64 %55, i64 3, !dbg !33
  %109 = insertelement <8 x i64> %108, i64 %57, i64 4, !dbg !33
  %110 = insertelement <8 x i64> %109, i64 %58, i64 5, !dbg !33
  %111 = insertelement <8 x i64> %110, i64 %60, i64 6, !dbg !33
  %112 = insertelement <8 x i64> %111, i64 %61, i64 7, !dbg !33
  %113 = add <8 x i64> %112, %104, !dbg !33
  %114 = lshr <8 x i64> %113, splat (i64 43), !dbg !34
  %115 = and <8 x i64> %114, splat (i64 1048576), !dbg !34
  %116 = add <8 x i64> %115, %113, !dbg !34
  %117 = tail call i64 @llvm.vector.reduce.or.v8i64(<8 x i64> %116), !dbg !35
  %.not = icmp ult i64 %117, 1048576, !dbg !35
  br i1 %.not, label %119, label %118, !dbg !35

118:                                              ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !35
  unreachable, !dbg !35

119:                                              ; preds = %9
  %120 = bitcast i32 %81 to float, !dbg !27
  %121 = bitcast i32 %80 to float, !dbg !27
  %122 = bitcast i32 %79 to float, !dbg !27
  %123 = bitcast i32 %78 to float, !dbg !27
  %124 = bitcast i32 %77 to float, !dbg !27
  %125 = bitcast i32 %76 to float, !dbg !27
  %126 = bitcast i32 %75 to float, !dbg !27
  %127 = bitcast i32 %74 to float, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %128 = fadd float %127, 0x3EE4F8B580000000, !dbg !36
  %129 = fadd float %126, 0x3EE4F8B580000000, !dbg !36
  %130 = fadd float %125, 0x3EE4F8B580000000, !dbg !36
  %131 = fadd float %124, 0x3EE4F8B580000000, !dbg !36
  %132 = fadd float %123, 0x3EE4F8B580000000, !dbg !36
  %133 = fadd float %122, 0x3EE4F8B580000000, !dbg !36
  %134 = fadd float %121, 0x3EE4F8B580000000, !dbg !36
  %135 = fadd float %120, 0x3EE4F8B580000000, !dbg !36
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i = icmp eq i32 %136, 0, !dbg !37
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i = icmp eq i32 %137, 0, !dbg !37
  br i1 %.not.i, label %143, label %138, !dbg !37

138:                                              ; preds = %119
  br i1 %.not1.i, label %141, label %139, !dbg !37

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #6, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #6, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

143:                                              ; preds = %119
  br i1 %.not1.i, label %146, label %144, !dbg !37

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #6, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #6, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %139, %141, %144, %146
  %.0.i = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !37
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i1 = icmp eq i32 %148, 0, !dbg !37
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i4 = icmp eq i32 %149, 0, !dbg !37
  br i1 %.not.i1, label %155, label %150, !dbg !37

150:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %153, label %151, !dbg !37

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #6, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #6, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

155:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %158, label %156, !dbg !37

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #6, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #6, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %151, %153, %156, %158
  %.0.i3 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !37
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i6 = icmp eq i32 %160, 0, !dbg !37
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i9 = icmp eq i32 %161, 0, !dbg !37
  br i1 %.not.i6, label %167, label %162, !dbg !37

162:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %165, label %163, !dbg !37

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #6, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #6, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

167:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %170, label %168, !dbg !37

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #6, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #6, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %163, %165, %168, %170
  %.0.i8 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !37
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i11 = icmp eq i32 %172, 0, !dbg !37
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i14 = icmp eq i32 %173, 0, !dbg !37
  br i1 %.not.i11, label %179, label %174, !dbg !37

174:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %177, label %175, !dbg !37

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #6, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #6, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

179:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %182, label %180, !dbg !37

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #6, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #6, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %175, %177, %180, %182
  %.0.i13 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !37
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i16 = icmp eq i32 %184, 0, !dbg !37
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i19 = icmp eq i32 %185, 0, !dbg !37
  br i1 %.not.i16, label %191, label %186, !dbg !37

186:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %189, label %187, !dbg !37

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #6, !dbg !37
  br label %__nv_sqrtf.exit20, !dbg !37

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #6, !dbg !37
  br label %__nv_sqrtf.exit20, !dbg !37

191:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %194, label %192, !dbg !37

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #6, !dbg !37
  br label %__nv_sqrtf.exit20, !dbg !37

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #6, !dbg !37
  br label %__nv_sqrtf.exit20, !dbg !37

__nv_sqrtf.exit20:                                ; preds = %187, %189, %192, %194
  %.0.i18 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !37
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i21 = icmp eq i32 %196, 0, !dbg !37
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i24 = icmp eq i32 %197, 0, !dbg !37
  br i1 %.not.i21, label %203, label %198, !dbg !37

198:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %201, label %199, !dbg !37

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #6, !dbg !37
  br label %__nv_sqrtf.exit25, !dbg !37

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #6, !dbg !37
  br label %__nv_sqrtf.exit25, !dbg !37

203:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %206, label %204, !dbg !37

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #6, !dbg !37
  br label %__nv_sqrtf.exit25, !dbg !37

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #6, !dbg !37
  br label %__nv_sqrtf.exit25, !dbg !37

__nv_sqrtf.exit25:                                ; preds = %199, %201, %204, %206
  %.0.i23 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !37
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i26 = icmp eq i32 %208, 0, !dbg !37
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i29 = icmp eq i32 %209, 0, !dbg !37
  br i1 %.not.i26, label %215, label %210, !dbg !37

210:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %213, label %211, !dbg !37

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #6, !dbg !37
  br label %__nv_sqrtf.exit30, !dbg !37

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #6, !dbg !37
  br label %__nv_sqrtf.exit30, !dbg !37

215:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %218, label %216, !dbg !37

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #6, !dbg !37
  br label %__nv_sqrtf.exit30, !dbg !37

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #6, !dbg !37
  br label %__nv_sqrtf.exit30, !dbg !37

__nv_sqrtf.exit30:                                ; preds = %211, %213, %216, %218
  %.0.i28 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !37
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !37
  %.not.i31 = icmp eq i32 %220, 0, !dbg !37
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #6, !dbg !37
  %.not1.i34 = icmp eq i32 %221, 0, !dbg !37
  br i1 %.not.i31, label %227, label %222, !dbg !37

222:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %225, label %223, !dbg !37

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #6, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #6, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

227:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %230, label %228, !dbg !37

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #6, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #6, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

__nv_sqrtf.exit35:                                ; preds = %223, %225, %228, %230
  %.0.i33 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !37
  %232 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !19
  %233 = insertelement <8 x i32> poison, i32 %43, i64 0, !dbg !21
  %234 = insertelement <8 x i32> %233, i32 %42, i64 1, !dbg !21
  %235 = insertelement <8 x i32> %234, i32 %41, i64 2, !dbg !21
  %236 = insertelement <8 x i32> %235, i32 %40, i64 3, !dbg !21
  %237 = insertelement <8 x i32> %236, i32 %39, i64 4, !dbg !21
  %238 = insertelement <8 x i32> %237, i32 %38, i64 5, !dbg !21
  %239 = insertelement <8 x i32> %238, i32 %37, i64 6, !dbg !21
  %240 = insertelement <8 x i32> %239, i32 %36, i64 7, !dbg !21
  %241 = bitcast <8 x i32> %240 to <8 x float>, !dbg !21
  %242 = insertelement <8 x i32> poison, i32 %71, i64 0, !dbg !25
  %243 = insertelement <8 x i32> %242, i32 %70, i64 1, !dbg !25
  %244 = insertelement <8 x i32> %243, i32 %69, i64 2, !dbg !25
  %245 = insertelement <8 x i32> %244, i32 %68, i64 3, !dbg !25
  %246 = insertelement <8 x i32> %245, i32 %67, i64 4, !dbg !25
  %247 = insertelement <8 x i32> %246, i32 %66, i64 5, !dbg !25
  %248 = insertelement <8 x i32> %247, i32 %65, i64 6, !dbg !25
  %249 = insertelement <8 x i32> %248, i32 %64, i64 7, !dbg !25
  %250 = bitcast <8 x i32> %249 to <8 x float>, !dbg !25
  %251 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !19
  %252 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !19
  %253 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !19
  %254 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !19
  %255 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !19
  %256 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !19
  %257 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !19
  %258 = insertelement <8 x i32> poison, i32 %91, i64 0, !dbg !29
  %259 = insertelement <8 x i32> %258, i32 %90, i64 1, !dbg !29
  %260 = insertelement <8 x i32> %259, i32 %89, i64 2, !dbg !29
  %261 = insertelement <8 x i32> %260, i32 %88, i64 3, !dbg !29
  %262 = insertelement <8 x i32> %261, i32 %87, i64 4, !dbg !29
  %263 = insertelement <8 x i32> %262, i32 %86, i64 5, !dbg !29
  %264 = insertelement <8 x i32> %263, i32 %85, i64 6, !dbg !29
  %265 = insertelement <8 x i32> %264, i32 %84, i64 7, !dbg !29
  %266 = bitcast <8 x i32> %265 to <8 x float>, !dbg !29
  %267 = insertelement <8 x i32> poison, i32 %101, i64 0, !dbg !31
  %268 = insertelement <8 x i32> %267, i32 %100, i64 1, !dbg !31
  %269 = insertelement <8 x i32> %268, i32 %99, i64 2, !dbg !31
  %270 = insertelement <8 x i32> %269, i32 %98, i64 3, !dbg !31
  %271 = insertelement <8 x i32> %270, i32 %97, i64 4, !dbg !31
  %272 = insertelement <8 x i32> %271, i32 %96, i64 5, !dbg !31
  %273 = insertelement <8 x i32> %272, i32 %95, i64 6, !dbg !31
  %274 = insertelement <8 x i32> %273, i32 %94, i64 7, !dbg !31
  %275 = bitcast <8 x i32> %274 to <8 x float>, !dbg !31
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #6, !dbg !38
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #6, !dbg !38
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #6, !dbg !38
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #6, !dbg !38
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #6, !dbg !38
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #6, !dbg !38
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #6, !dbg !38
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #6, !dbg !38
  %284 = insertelement <8 x i32> poison, i32 %232, i64 0, !dbg !19
  %285 = insertelement <8 x i32> %284, i32 %251, i64 1, !dbg !19
  %286 = insertelement <8 x i32> %285, i32 %252, i64 2, !dbg !19
  %287 = insertelement <8 x i32> %286, i32 %253, i64 3, !dbg !19
  %288 = insertelement <8 x i32> %287, i32 %254, i64 4, !dbg !19
  %289 = insertelement <8 x i32> %288, i32 %255, i64 5, !dbg !19
  %290 = insertelement <8 x i32> %289, i32 %256, i64 6, !dbg !19
  %291 = insertelement <8 x i32> %290, i32 %257, i64 7, !dbg !19
  %292 = bitcast <8 x i32> %291 to <8 x float>, !dbg !19
  %293 = fadd <8 x float> %292, %241, !dbg !39
  %294 = fsub <8 x float> %293, %250, !dbg !40
  %295 = insertelement <8 x float> poison, float %283, i64 0, !dbg !41
  %296 = insertelement <8 x float> %295, float %282, i64 1, !dbg !41
  %297 = insertelement <8 x float> %296, float %281, i64 2, !dbg !41
  %298 = insertelement <8 x float> %297, float %280, i64 3, !dbg !41
  %299 = insertelement <8 x float> %298, float %279, i64 4, !dbg !41
  %300 = insertelement <8 x float> %299, float %278, i64 5, !dbg !41
  %301 = insertelement <8 x float> %300, float %277, i64 6, !dbg !41
  %302 = insertelement <8 x float> %301, float %276, i64 7, !dbg !41
  %303 = fmul <8 x float> %294, %302, !dbg !41
  %304 = fmul <8 x float> %303, %266, !dbg !42
  %305 = fadd <8 x float> %304, %275, !dbg !43
  %306 = fcmp olt <8 x float> %305, zeroinitializer, !dbg !44
  %307 = extractelement <8 x i1> %306, i64 7, !dbg !48
  %308 = extractelement <8 x i1> %306, i64 6, !dbg !48
  %309 = extractelement <8 x i1> %306, i64 5, !dbg !48
  %310 = extractelement <8 x i1> %306, i64 4, !dbg !48
  %311 = extractelement <8 x i1> %306, i64 3, !dbg !48
  %312 = extractelement <8 x i1> %306, i64 2, !dbg !48
  %313 = extractelement <8 x i1> %306, i64 1, !dbg !48
  %314 = extractelement <8 x i1> %306, i64 0, !dbg !48
  %bc = bitcast <8 x float> %293 to <8 x i32>, !dbg !49
  %315 = extractelement <8 x i32> %bc, i64 7, !dbg !49
  %bc36 = bitcast <8 x float> %293 to <8 x i32>, !dbg !49
  %316 = extractelement <8 x i32> %bc36, i64 6, !dbg !49
  %bc37 = bitcast <8 x float> %293 to <8 x i32>, !dbg !49
  %317 = extractelement <8 x i32> %bc37, i64 5, !dbg !49
  %bc38 = bitcast <8 x float> %293 to <8 x i32>, !dbg !49
  %318 = extractelement <8 x i32> %bc38, i64 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %315, i32 %316, i32 %317, i32 %318, ptr addrspace(1) %27, i1 true) #6, !dbg !49
  %bc39 = bitcast <8 x float> %293 to <8 x i32>, !dbg !49
  %319 = extractelement <8 x i32> %bc39, i64 3, !dbg !49
  %bc40 = bitcast <8 x float> %293 to <8 x i32>, !dbg !49
  %320 = extractelement <8 x i32> %bc40, i64 2, !dbg !49
  %bc41 = bitcast <8 x float> %293 to <8 x i32>, !dbg !49
  %321 = extractelement <8 x i32> %bc41, i64 1, !dbg !49
  %bc42 = bitcast <8 x float> %293 to <8 x i32>, !dbg !49
  %322 = extractelement <8 x i32> %bc42, i64 0, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %319, i32 %320, i32 %321, i32 %322, ptr addrspace(1) %29, i1 true) #6, !dbg !49
  %323 = extractelement <8 x i64> %116, i64 0, !dbg !50
  %324 = getelementptr float, ptr addrspace(1) %7, i64 %323, !dbg !50
  %325 = extractelement <8 x i64> %116, i64 1, !dbg !50
  %326 = getelementptr float, ptr addrspace(1) %7, i64 %325, !dbg !50
  %327 = extractelement <8 x i64> %116, i64 2, !dbg !50
  %328 = getelementptr float, ptr addrspace(1) %7, i64 %327, !dbg !50
  %329 = extractelement <8 x i64> %116, i64 3, !dbg !50
  %330 = getelementptr float, ptr addrspace(1) %7, i64 %329, !dbg !50
  %331 = extractelement <8 x i64> %116, i64 4, !dbg !50
  %332 = getelementptr float, ptr addrspace(1) %7, i64 %331, !dbg !50
  %333 = extractelement <8 x i64> %116, i64 5, !dbg !50
  %334 = getelementptr float, ptr addrspace(1) %7, i64 %333, !dbg !50
  %335 = extractelement <8 x i64> %116, i64 6, !dbg !50
  %336 = getelementptr float, ptr addrspace(1) %7, i64 %335, !dbg !50
  %337 = extractelement <8 x i64> %116, i64 7, !dbg !50
  %338 = getelementptr float, ptr addrspace(1) %7, i64 %337, !dbg !50
  %339 = ptrtoint ptr addrspace(1) %324 to i64, !dbg !51
  %340 = ptrtoint ptr addrspace(1) %326 to i64, !dbg !51
  %341 = ptrtoint ptr addrspace(1) %328 to i64, !dbg !51
  %342 = ptrtoint ptr addrspace(1) %330 to i64, !dbg !51
  %343 = ptrtoint ptr addrspace(1) %332 to i64, !dbg !51
  %344 = ptrtoint ptr addrspace(1) %334 to i64, !dbg !51
  %345 = ptrtoint ptr addrspace(1) %336 to i64, !dbg !51
  %346 = ptrtoint ptr addrspace(1) %338 to i64, !dbg !51
  %347 = and i32 %12, 127, !dbg !51
  %348 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %14, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %348, i64 %339, i64 %340, i1 true) #6, !dbg !51
  %349 = getelementptr inbounds i8, ptr addrspace(3) %348, i32 16, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %349, i64 %341, i64 %342, i1 true) #6, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %350 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %347, !dbg !51
  %351 = load i64, ptr addrspace(3) %350, align 8, !dbg !51
  %352 = or disjoint i32 %347, 128, !dbg !51
  %353 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %352, !dbg !51
  %354 = load i64, ptr addrspace(3) %353, align 8, !dbg !51
  %355 = or disjoint i32 %347, 256, !dbg !51
  %356 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %355, !dbg !51
  %357 = load i64, ptr addrspace(3) %356, align 8, !dbg !51
  %358 = or disjoint i32 %347, 384, !dbg !51
  %359 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %358, !dbg !51
  %360 = load i64, ptr addrspace(3) %359, align 8, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %348, i64 %343, i64 %344, i1 true) #6, !dbg !51
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %349, i64 %345, i64 %346, i1 true) #6, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %361 = load i64, ptr addrspace(3) %350, align 8, !dbg !51
  %362 = load i64, ptr addrspace(3) %353, align 8, !dbg !51
  %363 = load i64, ptr addrspace(3) %356, align 8, !dbg !51
  %364 = load i64, ptr addrspace(3) %359, align 8, !dbg !51
  %365 = inttoptr i64 %351 to ptr addrspace(1), !dbg !51
  %366 = inttoptr i64 %354 to ptr addrspace(1), !dbg !51
  %367 = inttoptr i64 %357 to ptr addrspace(1), !dbg !51
  %368 = inttoptr i64 %360 to ptr addrspace(1), !dbg !51
  %369 = inttoptr i64 %361 to ptr addrspace(1), !dbg !51
  %370 = inttoptr i64 %362 to ptr addrspace(1), !dbg !51
  %371 = inttoptr i64 %363 to ptr addrspace(1), !dbg !51
  %372 = inttoptr i64 %364 to ptr addrspace(1), !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %373 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !51
  %bc43 = bitcast <8 x float> %305 to <8 x i32>, !dbg !51
  %374 = extractelement <8 x i32> %bc43, i64 7, !dbg !51
  %375 = select i1 %307, i32 0, i32 %374, !dbg !48
  %bc44 = bitcast <8 x float> %305 to <8 x i32>, !dbg !51
  %376 = extractelement <8 x i32> %bc44, i64 6, !dbg !51
  %377 = select i1 %308, i32 0, i32 %376, !dbg !48
  %bc45 = bitcast <8 x float> %305 to <8 x i32>, !dbg !51
  %378 = extractelement <8 x i32> %bc45, i64 5, !dbg !51
  %379 = select i1 %309, i32 0, i32 %378, !dbg !48
  %bc46 = bitcast <8 x float> %305 to <8 x i32>, !dbg !51
  %380 = extractelement <8 x i32> %bc46, i64 4, !dbg !51
  %381 = select i1 %310, i32 0, i32 %380, !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %373, i32 %375, i32 %377, i32 %379, i32 %381, i1 true) #6, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %347, !dbg !51
  %383 = load i32, ptr addrspace(3) %382, align 4, !dbg !51
  %384 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %352, !dbg !51
  %385 = load i32, ptr addrspace(3) %384, align 4, !dbg !51
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %355, !dbg !51
  %387 = load i32, ptr addrspace(3) %386, align 4, !dbg !51
  %388 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %358, !dbg !51
  %389 = load i32, ptr addrspace(3) %388, align 4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %bc47 = bitcast <8 x float> %305 to <8 x i32>, !dbg !51
  %390 = extractelement <8 x i32> %bc47, i64 3, !dbg !51
  %391 = select i1 %311, i32 0, i32 %390, !dbg !48
  %bc48 = bitcast <8 x float> %305 to <8 x i32>, !dbg !51
  %392 = extractelement <8 x i32> %bc48, i64 2, !dbg !51
  %393 = select i1 %312, i32 0, i32 %392, !dbg !48
  %bc49 = bitcast <8 x float> %305 to <8 x i32>, !dbg !51
  %394 = extractelement <8 x i32> %bc49, i64 1, !dbg !51
  %395 = select i1 %313, i32 0, i32 %394, !dbg !48
  %bc50 = bitcast <8 x float> %305 to <8 x i32>, !dbg !51
  %396 = extractelement <8 x i32> %bc50, i64 0, !dbg !51
  %397 = select i1 %314, i32 0, i32 %396, !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %373, i32 %391, i32 %393, i32 %395, i32 %397, i1 true) #6, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %398 = load i32, ptr addrspace(3) %382, align 4, !dbg !51
  %399 = load i32, ptr addrspace(3) %384, align 4, !dbg !51
  %400 = load i32, ptr addrspace(3) %386, align 4, !dbg !51
  %401 = load i32, ptr addrspace(3) %388, align 4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %383, ptr addrspace(1) %365, i1 true) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %385, ptr addrspace(1) %366, i1 true) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %387, ptr addrspace(1) %367, i1 true) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %389, ptr addrspace(1) %368, i1 true) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %398, ptr addrspace(1) %369, i1 true) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %399, ptr addrspace(1) %370, i1 true) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %400, ptr addrspace(1) %371, i1 true) #6, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %401, ptr addrspace(1) %372, i1 true) #6, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v8i64(<8 x i64>) #5

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqjayu3d5juyvx3qz67uc3pn4c26i7r6vi27w3bogwzzba22wptd.py", directory: "inductor_cache/qj")
!4 = !{ptr @triton_poi_fused_convolution_max_unpool2d_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_unpool2d_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_unpool2d_22", linkageName: "triton_poi_fused_convolution_max_unpool2d_22", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 29, scope: !11)
!18 = !DILocation(line: 26, column: 34, scope: !11)
!19 = !DILocation(line: 26, column: 39, scope: !11)
!20 = !DILocation(line: 27, column: 30, scope: !11)
!21 = !DILocation(line: 27, column: 35, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 35, scope: !11)
!24 = !DILocation(line: 29, column: 32, scope: !11)
!25 = !DILocation(line: 29, column: 53, scope: !11)
!26 = !DILocation(line: 30, column: 32, scope: !11)
!27 = !DILocation(line: 30, column: 53, scope: !11)
!28 = !DILocation(line: 31, column: 32, scope: !11)
!29 = !DILocation(line: 31, column: 53, scope: !11)
!30 = !DILocation(line: 32, column: 32, scope: !11)
!31 = !DILocation(line: 32, column: 53, scope: !11)
!32 = !DILocation(line: 34, column: 17, scope: !11)
!33 = !DILocation(line: 35, column: 18, scope: !11)
!34 = !DILocation(line: 39, column: 32, scope: !11)
!35 = !DILocation(line: 40, column: 53, scope: !11)
!36 = !DILocation(line: 43, column: 20, scope: !11)
!37 = !DILocation(line: 44, column: 27, scope: !11)
!38 = !DILocation(line: 46, column: 20, scope: !11)
!39 = !DILocation(line: 33, column: 18, scope: !11)
!40 = !DILocation(line: 41, column: 19, scope: !11)
!41 = !DILocation(line: 49, column: 20, scope: !11)
!42 = !DILocation(line: 50, column: 20, scope: !11)
!43 = !DILocation(line: 51, column: 20, scope: !11)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !11, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 53, column: 42, scope: !11)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 54, column: 39, scope: !11)
!50 = !DILocation(line: 55, column: 25, scope: !11)
!51 = !DILocation(line: 55, column: 66, scope: !11)
!52 = !DILocation(line: 55, column: 4, scope: !11)
