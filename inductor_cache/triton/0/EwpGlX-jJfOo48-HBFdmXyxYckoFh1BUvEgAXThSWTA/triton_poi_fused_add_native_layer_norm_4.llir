; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 2, !dbg !12
  %14 = and i32 %12, 14, !dbg !12
  %15 = lshr i32 %11, 1, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = or disjoint i32 %10, %16, !dbg !13
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = icmp slt i32 %18, 16, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 2, !dbg !16
  %23 = lshr i32 %11, 3, !dbg !17
  %24 = and i32 %23, 3, !dbg !17
  %25 = or disjoint i32 %22, %24, !dbg !18
  %26 = or disjoint i32 %22, %13, !dbg !18
  %27 = icmp slt i32 %25, 4, !dbg !19
  %28 = icmp slt i32 %26, 4, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %29 = sdiv i32 %.frozen, 4, !dbg !20
  %30 = mul i32 %29, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = shl i32 %25, 2, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = shl i32 %29, 4, !dbg !24
  %34 = add i32 %32, %33, !dbg !25
  %35 = sext i32 %34 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = and i1 %19, %27, !dbg !27
  %38 = and i1 %20, %28, !dbg !27
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %37) #4, !dbg !28
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !28
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !28
  %42 = shl i32 %11, 3, !dbg !28
  %43 = and i32 %42, 56, !dbg !28
  %44 = or disjoint i32 %43, %24, !dbg !28
  %45 = and i32 %12, 62, !dbg !28
  %46 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %43, !dbg !28
  %47 = getelementptr inbounds float, ptr addrspace(3) %46, i32 %44, !dbg !28
  %48 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #4, !dbg !28
  %49 = or disjoint i32 %44, 4, !dbg !28
  %50 = lshr i32 %49, 2, !dbg !28
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !28
  %52 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %49, !dbg !28
  %53 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %54 = lshr i32 %45, 2, !dbg !28
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !28
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %45, !dbg !28
  %57 = load float, ptr addrspace(3) %56, align 4, !dbg !28
  %58 = or disjoint i32 %45, 1, !dbg !28
  %59 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %58, !dbg !28
  %60 = load float, ptr addrspace(3) %59, align 4, !dbg !28
  %61 = shl i32 %18, 2, !dbg !29
  %62 = add i32 %26, %61, !dbg !30
  %63 = sext i32 %62 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !31
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %38) #4, !dbg !32
  %66 = sext i32 %18 to i64, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !33
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %20) #4, !dbg !34
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %20) #4, !dbg !34
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !35
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %20) #4, !dbg !36
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %20) #4, !dbg !36
  %73 = bitcast i32 %72 to float, !dbg !36
  %74 = sext i32 %26 to i64, !dbg !37
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !37
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %28) #4, !dbg !38
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %74, !dbg !39
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %77, i1 %28) #4, !dbg !40
  %79 = fadd float %73, 0x3EE4F8B580000000, !dbg !41
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i3 = icmp eq i32 %81, 0, !dbg !42
  br i1 %.not.i3, label %84, label %82, !dbg !42

82:                                               ; preds = %__nv_rsqrtf.exit
  %83 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %79), !dbg !42
  br label %__nv_rsqrtf.exit5, !dbg !42

84:                                               ; preds = %__nv_rsqrtf.exit
  %85 = tail call float @llvm.nvvm.rsqrt.approx.f(float %79), !dbg !42
  br label %__nv_rsqrtf.exit5, !dbg !42

__nv_rsqrtf.exit5:                                ; preds = %82, %84
  %.0.i4 = phi float [ %83, %82 ], [ %85, %84 ], !dbg !42
  %86 = extractvalue { i32, i32 } %65, 1, !dbg !32
  %87 = bitcast i32 %86 to float, !dbg !32
  %88 = fadd float %60, %87, !dbg !43
  %89 = bitcast i32 %69 to float, !dbg !34
  %90 = fsub float %88, %89, !dbg !44
  %91 = extractvalue { i32, i32 } %65, 0, !dbg !32
  %92 = bitcast i32 %91 to float, !dbg !32
  %93 = fadd float %57, %92, !dbg !43
  %94 = fsub float %93, %89, !dbg !44
  %95 = extractvalue { i32, i32 } %78, 1, !dbg !40
  %96 = bitcast i32 %95 to float, !dbg !40
  %97 = extractvalue { i32, i32 } %78, 0, !dbg !40
  %98 = bitcast i32 %97 to float, !dbg !40
  %99 = extractvalue { i32, i32 } %76, 1, !dbg !38
  %100 = bitcast i32 %99 to float, !dbg !38
  %101 = extractvalue { i32, i32 } %76, 0, !dbg !38
  %102 = bitcast i32 %101 to float, !dbg !38
  %103 = fmul float %94, %.0.i4, !dbg !45
  %104 = fmul float %90, %.0.i4, !dbg !45
  %105 = fmul float %103, %102, !dbg !46
  %106 = fmul float %104, %100, !dbg !46
  %107 = fadd float %105, %98, !dbg !47
  %108 = fadd float %106, %96, !dbg !47
  %109 = getelementptr float, ptr addrspace(1) %6, i64 %63, !dbg !48
  %110 = bitcast float %107 to i32, !dbg !49
  %111 = bitcast float %108 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %110, i32 %111, ptr addrspace(1) %109, i1 %38) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clzy7cjix66v35ryqsuyrt7vmsfqrttk7bnr4w3teo5ov4feyyug.py", directory: "inductor_cache/lz")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_4, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_4", linkageName: "triton_poi_fused_add_native_layer_norm_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 58, scope: !7)
!28 = !DILocation(line: 32, column: 50, scope: !7)
!29 = !DILocation(line: 33, column: 37, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 42, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 27, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 43, column: 18, scope: !7)
!46 = !DILocation(line: 44, column: 19, scope: !7)
!47 = !DILocation(line: 45, column: 20, scope: !7)
!48 = !DILocation(line: 46, column: 25, scope: !7)
!49 = !DILocation(line: 46, column: 44, scope: !7)
!50 = !DILocation(line: 46, column: 4, scope: !7)
