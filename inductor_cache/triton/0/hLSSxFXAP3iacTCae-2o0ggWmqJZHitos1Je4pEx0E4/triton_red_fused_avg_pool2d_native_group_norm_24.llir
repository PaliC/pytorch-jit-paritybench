; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 2, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = and i32 %10, 3, !dbg !12
  %13 = lshr i32 %10, 5, !dbg !12
  %14 = and i32 %13, 3, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = icmp slt i32 %16, 128, !dbg !14
  %19 = lshr i32 %10, 2, !dbg !15
  %20 = shl i32 %10, 2, !dbg !15
  %21 = and i32 %20, 124, !dbg !15
  %22 = shl nuw nsw i32 %19, 1, !dbg !16
  %23 = and i32 %22, 6, !dbg !16
  %24 = and i32 %10, 112, !dbg !17
  %25 = or disjoint i32 %23, %24, !dbg !18
  %26 = or disjoint i32 %25, 128, !dbg !18
  %27 = or disjoint i32 %25, 256, !dbg !18
  %28 = or disjoint i32 %25, 384, !dbg !18
  %29 = shl i32 %15, 9, !dbg !19
  %30 = or disjoint i32 %29, %25, !dbg !20
  %31 = or disjoint i32 %29, %26, !dbg !20
  %32 = or disjoint i32 %29, %27, !dbg !20
  %33 = or disjoint i32 %29, %28, !dbg !20
  %34 = sext i32 %30 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = sext i32 %31 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = sext i32 %32 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !21
  %40 = sext i32 %33 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %47 = bitcast i32 %46 to float, !dbg !22
  %48 = or disjoint i32 %30, 1, !dbg !23
  %49 = or disjoint i32 %31, 1, !dbg !23
  %50 = or disjoint i32 %32, 1, !dbg !23
  %51 = or disjoint i32 %33, 1, !dbg !23
  %52 = sext i32 %48 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = sext i32 %49 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = sext i32 %50 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !24
  %58 = sext i32 %51 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %63 = bitcast i32 %62 to float, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = or disjoint i32 %30, 8, !dbg !26
  %67 = or disjoint i32 %31, 8, !dbg !26
  %68 = or disjoint i32 %32, 8, !dbg !26
  %69 = or disjoint i32 %33, 8, !dbg !26
  %70 = sext i32 %66 to i64, !dbg !27
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !27
  %72 = sext i32 %67 to i64, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !27
  %74 = sext i32 %68 to i64, !dbg !27
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !27
  %76 = sext i32 %69 to i64, !dbg !27
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %83 = bitcast i32 %82 to float, !dbg !28
  %84 = or disjoint i32 %30, 9, !dbg !29
  %85 = or disjoint i32 %31, 9, !dbg !29
  %86 = or disjoint i32 %32, 9, !dbg !29
  %87 = or disjoint i32 %33, 9, !dbg !29
  %88 = sext i32 %84 to i64, !dbg !30
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !30
  %90 = sext i32 %85 to i64, !dbg !30
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !30
  %92 = sext i32 %86 to i64, !dbg !30
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !30
  %94 = sext i32 %87 to i64, !dbg !30
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !30
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %17, i32 0, i1 %17) #5, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %17, i32 0, i1 %17) #5, !dbg !31
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %17, i32 0, i1 %17) #5, !dbg !31
  %99 = bitcast i32 %98 to float, !dbg !31
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %17, i32 0, i1 %17) #5, !dbg !31
  %101 = bitcast i32 %100 to float, !dbg !31
  %102 = fadd float %45, %63, !dbg !32
  %103 = fadd float %47, %65, !dbg !32
  %104 = fadd float %102, %81, !dbg !33
  %105 = fadd float %103, %83, !dbg !33
  %106 = fadd float %104, %99, !dbg !34
  %107 = fadd float %105, %101, !dbg !34
  %108 = fmul float %106, 2.500000e-01, !dbg !35
  %109 = fmul float %107, 2.500000e-01, !dbg !35
  %110 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !22
  %111 = insertelement <2 x i32> %110, i32 %42, i64 1, !dbg !22
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !22
  %113 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !25
  %114 = insertelement <2 x i32> %113, i32 %60, i64 1, !dbg !25
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !25
  %116 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !28
  %117 = insertelement <2 x i32> %116, i32 %78, i64 1, !dbg !28
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !28
  %119 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !31
  %120 = insertelement <2 x i32> %119, i32 %96, i64 1, !dbg !31
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !31
  %122 = fadd <2 x float> %112, %115, !dbg !32
  %123 = fadd <2 x float> %122, %118, !dbg !33
  %124 = fadd <2 x float> %123, %121, !dbg !34
  %125 = fmul <2 x float> %124, splat (float 2.500000e-01), !dbg !35
  %126 = insertelement <2 x i1> poison, i1 %17, i64 0, !dbg !36
  %127 = shufflevector <2 x i1> %126, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !36
  %128 = select <2 x i1> %127, <2 x float> %125, <2 x float> zeroinitializer, !dbg !36
  %129 = select i1 %17, float %108, float 0.000000e+00, !dbg !36
  %130 = select i1 %17, float %109, float 0.000000e+00, !dbg !36
  %131 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !37
  %132 = shl i32 %16, 7, !dbg !38
  %133 = or disjoint i32 %132, %21, !dbg !39
  %134 = sext i32 %133 to i64, !dbg !40
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !40
  %136 = shl i32 %10, 7, !dbg !41
  %137 = and i32 %136, 384, !dbg !41
  %138 = and i32 %19, 31, !dbg !41
  %139 = or disjoint i32 %137, %138, !dbg !41
  %140 = and i32 %20, 508, !dbg !41
  %141 = lshr exact i32 %137, 3, !dbg !41
  %142 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %141, !dbg !41
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %139, !dbg !41
  %144 = extractelement <2 x float> %125, i64 1, !dbg !41
  %145 = bitcast float %144 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %145, i1 true) #5, !dbg !41
  %146 = or disjoint i32 %139, 32, !dbg !41
  %147 = getelementptr float, ptr addrspace(3) %142, i32 %146, !dbg !41
  %148 = extractelement <2 x float> %125, i64 0, !dbg !41
  %149 = bitcast float %148 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %149, i1 true) #5, !dbg !41
  %150 = or disjoint i32 %139, 64, !dbg !41
  %151 = getelementptr float, ptr addrspace(3) %142, i32 %150, !dbg !41
  %152 = bitcast float %108 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #5, !dbg !41
  %153 = or disjoint i32 %139, 96, !dbg !41
  %154 = getelementptr float, ptr addrspace(3) %142, i32 %153, !dbg !41
  %155 = bitcast float %109 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %156 = lshr i32 %20, 5, !dbg !41
  %157 = and i32 %156, 12, !dbg !41
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !41
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %140, !dbg !41
  %.extract = load i32, ptr addrspace(3) %159, align 16, !dbg !41
  %160 = getelementptr inbounds i8, ptr addrspace(3) %159, i32 4, !dbg !41
  %.extract7 = load i32, ptr addrspace(3) %160, align 4, !dbg !41
  %161 = getelementptr inbounds i8, ptr addrspace(3) %159, i32 8, !dbg !41
  %.extract8 = load i32, ptr addrspace(3) %161, align 8, !dbg !41
  %162 = getelementptr inbounds i8, ptr addrspace(3) %159, i32 12, !dbg !41
  %.extract9 = load i32, ptr addrspace(3) %162, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %135, i1 %18) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %163 = extractelement <2 x float> %128, i64 0, !dbg !46
  %164 = extractelement <2 x float> %128, i64 1, !dbg !48
  %165 = fsub float %163, %164, !dbg !46
  %166 = select i1 %17, float 2.000000e+00, float 0.000000e+00, !dbg !49
  %167 = fcmp oeq float %166, 0.000000e+00, !dbg !50
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %166) #5, !dbg !51
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !52
  %170 = fmul float %165, %169, !dbg !53
  %171 = fadd float %164, %170, !dbg !48
  %172 = fmul float %165, %165, !dbg !54
  %173 = fmul float %131, %172, !dbg !55
  %174 = fmul float %173, %169, !dbg !56
  %175 = fadd float %174, 0.000000e+00, !dbg !57
  %176 = fsub float %129, %171, !dbg !46
  %177 = select i1 %17, float 3.000000e+00, float 0.000000e+00, !dbg !49
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !50
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %177) #5, !dbg !51
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !52
  %181 = fmul float %180, %176, !dbg !53
  %182 = fadd float %171, %181, !dbg !48
  %183 = fmul float %176, %176, !dbg !54
  %184 = fmul float %166, %183, !dbg !55
  %185 = fmul float %180, %184, !dbg !56
  %186 = fadd float %175, %185, !dbg !57
  %187 = fsub float %130, %182, !dbg !46
  %188 = select i1 %17, float 4.000000e+00, float 0.000000e+00, !dbg !49
  %189 = fcmp oeq float %188, 0.000000e+00, !dbg !50
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %188) #5, !dbg !51
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !52
  %192 = fmul float %191, %187, !dbg !53
  %193 = fadd float %182, %192, !dbg !48
  %194 = fmul float %187, %187, !dbg !54
  %195 = fmul float %177, %194, !dbg !55
  %196 = fmul float %191, %195, !dbg !56
  %197 = fadd float %186, %196, !dbg !57
  %198 = bitcast float %193 to i32, !dbg !42
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !42
  %200 = bitcast i32 %199 to float, !dbg !42
  %201 = bitcast float %197 to i32, !dbg !42
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 16, i32 31), !dbg !42
  %203 = bitcast i32 %202 to float, !dbg !42
  %204 = bitcast float %188 to i32, !dbg !42
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 16, i32 31), !dbg !42
  %206 = bitcast i32 %205 to float, !dbg !42
  %207 = fsub float %200, %193, !dbg !46
  %208 = fadd float %188, %206, !dbg !49
  %209 = fcmp oeq float %208, 0.000000e+00, !dbg !50
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %208) #5, !dbg !51
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !52
  %212 = fmul float %211, %207, !dbg !53
  %213 = fadd float %193, %212, !dbg !48
  %214 = fadd float %197, %203, !dbg !58
  %215 = fmul float %207, %207, !dbg !54
  %216 = fmul float %188, %215, !dbg !55
  %217 = fmul float %211, %216, !dbg !56
  %218 = fadd float %214, %217, !dbg !57
  %219 = bitcast float %213 to i32, !dbg !42
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 8, i32 31), !dbg !42
  %221 = bitcast i32 %220 to float, !dbg !42
  %222 = bitcast float %218 to i32, !dbg !42
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 8, i32 31), !dbg !42
  %224 = bitcast i32 %223 to float, !dbg !42
  %225 = bitcast float %208 to i32, !dbg !42
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 8, i32 31), !dbg !42
  %227 = bitcast i32 %226 to float, !dbg !42
  %228 = fsub float %221, %213, !dbg !46
  %229 = fadd float %208, %227, !dbg !49
  %230 = fcmp oeq float %229, 0.000000e+00, !dbg !50
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %229) #5, !dbg !51
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !52
  %233 = fmul float %228, %232, !dbg !53
  %234 = fadd float %213, %233, !dbg !48
  %235 = fadd float %218, %224, !dbg !58
  %236 = fmul float %228, %228, !dbg !54
  %237 = fmul float %208, %236, !dbg !55
  %238 = fmul float %232, %237, !dbg !56
  %239 = fadd float %235, %238, !dbg !57
  %240 = bitcast float %234 to i32, !dbg !42
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 4, i32 31), !dbg !42
  %242 = bitcast i32 %241 to float, !dbg !42
  %243 = bitcast float %239 to i32, !dbg !42
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 4, i32 31), !dbg !42
  %245 = bitcast i32 %244 to float, !dbg !42
  %246 = bitcast float %229 to i32, !dbg !42
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 4, i32 31), !dbg !42
  %248 = bitcast i32 %247 to float, !dbg !42
  %249 = fsub float %242, %234, !dbg !46
  %250 = fadd float %229, %248, !dbg !49
  %251 = fcmp oeq float %250, 0.000000e+00, !dbg !50
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %250) #5, !dbg !51
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !52
  %254 = fmul float %249, %253, !dbg !53
  %255 = fadd float %234, %254, !dbg !48
  %256 = fadd float %239, %245, !dbg !58
  %257 = fmul float %249, %249, !dbg !54
  %258 = fmul float %229, %257, !dbg !55
  %259 = fmul float %253, %258, !dbg !56
  %260 = fadd float %256, %259, !dbg !57
  %261 = lshr i32 %11, 2, !dbg !42
  %262 = icmp samesign ult i32 %11, 4, !dbg !42
  %263 = shl nuw nsw i32 %12, 2, !dbg !42
  %264 = or disjoint i32 %263, %14, !dbg !42
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %264, !dbg !42
  %266 = bitcast float %255 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 %262) #5, !dbg !42
  %267 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %264, !dbg !42
  %268 = bitcast float %260 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 %262) #5, !dbg !42
  %269 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %264, !dbg !42
  %270 = bitcast float %250 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 %262) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %271 = icmp slt i32 %10, 16, !dbg !42
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !42
  %273 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %272, i1 %271) #5, !dbg !42
  %274 = bitcast i32 %273 to float, !dbg !42
  %275 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %10, !dbg !42
  %276 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %275, i1 %271) #5, !dbg !42
  %277 = bitcast i32 %276 to float, !dbg !42
  %278 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %10, !dbg !42
  %279 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %278, i1 %271) #5, !dbg !42
  %280 = bitcast i32 %279 to float, !dbg !42
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 2, i32 31), !dbg !42
  %282 = bitcast i32 %281 to float, !dbg !42
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 2, i32 31), !dbg !42
  %284 = bitcast i32 %283 to float, !dbg !42
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !42
  %286 = bitcast i32 %285 to float, !dbg !42
  %287 = fsub float %282, %274, !dbg !46
  %288 = fadd float %280, %286, !dbg !49
  %289 = fcmp oeq float %288, 0.000000e+00, !dbg !50
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float %288) #5, !dbg !51
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !52
  %292 = fmul float %287, %291, !dbg !53
  %293 = fadd float %292, %274, !dbg !48
  %294 = fadd float %277, %284, !dbg !58
  %295 = fmul float %287, %287, !dbg !54
  %296 = fmul float %295, %280, !dbg !55
  %297 = fmul float %296, %291, !dbg !56
  %298 = fadd float %294, %297, !dbg !57
  %299 = bitcast float %293 to i32, !dbg !42
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !42
  %301 = bitcast i32 %300 to float, !dbg !42
  %302 = bitcast float %298 to i32, !dbg !42
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !42
  %304 = bitcast i32 %303 to float, !dbg !42
  %305 = bitcast float %288 to i32, !dbg !42
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !42
  %307 = bitcast i32 %306 to float, !dbg !42
  %308 = fsub float %301, %293, !dbg !46
  %309 = fadd float %288, %307, !dbg !49
  %310 = fcmp oeq float %309, 0.000000e+00, !dbg !50
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float %309) #5, !dbg !51
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !52
  %313 = fmul float %308, %312, !dbg !53
  %314 = fadd float %293, %313, !dbg !48
  %315 = fadd float %298, %304, !dbg !58
  %316 = fmul float %308, %308, !dbg !54
  %317 = fmul float %288, %316, !dbg !55
  %318 = fmul float %312, %317, !dbg !56
  %319 = fadd float %315, %318, !dbg !57
  %320 = icmp eq i32 %12, 0, !dbg !42
  %321 = and i1 %271, %320, !dbg !42
  %322 = bitcast float %314 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %322, i1 %321) #5, !dbg !42
  %323 = bitcast float %319 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %323, i1 %321) #5, !dbg !42
  %324 = bitcast float %309 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %324, i1 %321) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !42
  %326 = load i32, ptr addrspace(3) %325, align 16, !dbg !42
  %327 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %263, !dbg !42
  %328 = load float, ptr addrspace(3) %327, align 16, !dbg !42
  %329 = sext i32 %15 to i64, !dbg !59
  %330 = getelementptr float, ptr addrspace(1) %2, i64 %329, !dbg !59
  %331 = shl nuw nsw i32 %14, 3, !dbg !60
  %332 = or disjoint i32 %331, %261, !dbg !60
  %333 = icmp eq i32 %332, 0, !dbg !60
  %334 = and i1 %333, %17, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %326, ptr addrspace(1) %330, i1 %334) #5, !dbg !60
  %335 = getelementptr float, ptr addrspace(1) %3, i64 %329, !dbg !61
  %336 = bitcast float %328 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %336, ptr addrspace(1) %335, i1 %334) #5, !dbg !62
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %328, float 1.280000e+02) #5, !dbg !63
  %338 = fadd float %337, 0x3EE4F8B580000000, !dbg !64
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !65
  %.not.i = icmp eq i32 %339, 0, !dbg !65
  br i1 %.not.i, label %342, label %340, !dbg !65

340:                                              ; preds = %7
  %341 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %338), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

342:                                              ; preds = %7
  %343 = tail call float @llvm.nvvm.rsqrt.approx.f(float %338), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

__nv_rsqrtf.exit:                                 ; preds = %340, %342
  %.0.i = phi float [ %341, %340 ], [ %343, %342 ], !dbg !65
  %344 = getelementptr float, ptr addrspace(1) %4, i64 %329, !dbg !66
  %345 = bitcast float %.0.i to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %345, ptr addrspace(1) %344, i1 %334) #5, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5wz7ctqcquzljbcks5u73pwutuwwyrsyvfne7nlac53bvasgdos.py", directory: "inductor_cache/5w")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_24, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_24", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 36, scope: !7)
!17 = !DILocation(line: 36, column: 44, scope: !7)
!18 = !DILocation(line: 36, column: 41, scope: !7)
!19 = !DILocation(line: 36, column: 53, scope: !7)
!20 = !DILocation(line: 36, column: 49, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 58, scope: !7)
!23 = !DILocation(line: 37, column: 53, scope: !7)
!24 = !DILocation(line: 37, column: 34, scope: !7)
!25 = !DILocation(line: 37, column: 62, scope: !7)
!26 = !DILocation(line: 38, column: 53, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 38, column: 62, scope: !7)
!29 = !DILocation(line: 39, column: 53, scope: !7)
!30 = !DILocation(line: 39, column: 34, scope: !7)
!31 = !DILocation(line: 39, column: 62, scope: !7)
!32 = !DILocation(line: 40, column: 22, scope: !7)
!33 = !DILocation(line: 41, column: 22, scope: !7)
!34 = !DILocation(line: 42, column: 22, scope: !7)
!35 = !DILocation(line: 44, column: 22, scope: !7)
!36 = !DILocation(line: 49, column: 62, scope: !7)
!37 = !DILocation(line: 51, column: 66, scope: !7)
!38 = !DILocation(line: 52, column: 38, scope: !7)
!39 = !DILocation(line: 52, column: 34, scope: !7)
!40 = !DILocation(line: 52, column: 29, scope: !7)
!41 = !DILocation(line: 52, column: 49, scope: !7)
!42 = !DILocation(line: 204, column: 46, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 54, column: 44, scope: !7)
!46 = !DILocation(line: 192, column: 21, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!48 = !DILocation(line: 196, column: 17, scope: !47, inlinedAt: !45)
!49 = !DILocation(line: 193, column: 28, scope: !47, inlinedAt: !45)
!50 = !DILocation(line: 194, column: 39, scope: !47, inlinedAt: !45)
!51 = !DILocation(line: 194, column: 60, scope: !47, inlinedAt: !45)
!52 = !DILocation(line: 194, column: 49, scope: !47, inlinedAt: !45)
!53 = !DILocation(line: 196, column: 25, scope: !47, inlinedAt: !45)
!54 = !DILocation(line: 197, column: 30, scope: !47, inlinedAt: !45)
!55 = !DILocation(line: 197, column: 38, scope: !47, inlinedAt: !45)
!56 = !DILocation(line: 197, column: 49, scope: !47, inlinedAt: !45)
!57 = !DILocation(line: 197, column: 22, scope: !47, inlinedAt: !45)
!58 = !DILocation(line: 197, column: 15, scope: !47, inlinedAt: !45)
!59 = !DILocation(line: 59, column: 25, scope: !7)
!60 = !DILocation(line: 59, column: 37, scope: !7)
!61 = !DILocation(line: 60, column: 25, scope: !7)
!62 = !DILocation(line: 60, column: 37, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 28, scope: !7)
!66 = !DILocation(line: 66, column: 25, scope: !7)
!67 = !DILocation(line: 66, column: 37, scope: !7)
!68 = !DILocation(line: 66, column: 4, scope: !7)
