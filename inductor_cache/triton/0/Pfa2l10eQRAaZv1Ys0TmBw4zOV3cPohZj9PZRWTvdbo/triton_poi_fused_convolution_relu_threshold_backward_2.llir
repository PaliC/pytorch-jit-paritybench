; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = lshr i32 %10, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = or disjoint i32 %16, 8, !dbg !13
  %18 = icmp slt i32 %15, 16, !dbg !14
  %19 = icmp slt i32 %16, 16, !dbg !14
  %20 = icmp slt i32 %17, 16, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %22 = shl i32 %21, 6, !dbg !16
  %23 = lshr i32 %10, 2, !dbg !17
  %24 = and i32 %23, 31, !dbg !17
  %25 = or disjoint i32 %24, 32, !dbg !17
  %26 = and i32 %11, 60, !dbg !17
  %27 = or disjoint i32 %22, %24, !dbg !18
  %28 = or disjoint i32 %22, %25, !dbg !18
  %29 = or disjoint i32 %22, %26, !dbg !18
  %30 = shl i32 %27, 2, !dbg !19
  %31 = shl i32 %28, 2, !dbg !19
  %32 = shl i32 %15, 12, !dbg !20
  %33 = add i32 %30, %32, !dbg !21
  %34 = add i32 %31, %32, !dbg !21
  %35 = sext i32 %33 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = sext i32 %34 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %18) #2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %18) #2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 %18) #2, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %54 = shl i32 %16, 12, !dbg !25
  %55 = shl i32 %17, 12, !dbg !25
  %56 = add i32 %29, %54, !dbg !26
  %57 = add i32 %29, %55, !dbg !26
  %58 = sext i32 %56 to i64, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !27
  %60 = sext i32 %57 to i64, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !27
  %62 = shl i32 %10, 8, !dbg !28
  %63 = and i32 %62, 768, !dbg !28
  %64 = or disjoint i32 %63, %24, !dbg !28
  %65 = and i32 %11, 508, !dbg !28
  %66 = lshr exact i32 %63, 4, !dbg !28
  %67 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %66, !dbg !28
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %64, !dbg !28
  %69 = or disjoint i32 %64, 64, !dbg !28
  %70 = lshr i32 %69, 6, !dbg !28
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !28
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %69, !dbg !28
  %73 = or disjoint i32 %64, 128, !dbg !28
  %74 = lshr i32 %73, 6, !dbg !28
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !28
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %73, !dbg !28
  %77 = or disjoint i32 %64, 192, !dbg !28
  %78 = lshr i32 %77, 6, !dbg !28
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !28
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %77, !dbg !28
  %81 = or disjoint i32 %64, 32, !dbg !28
  %82 = getelementptr float, ptr addrspace(3) %67, i32 %81, !dbg !28
  %83 = or disjoint i32 %64, 96, !dbg !28
  %84 = lshr i32 %83, 6, !dbg !28
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !28
  %86 = getelementptr float, ptr addrspace(3) %85, i32 %83, !dbg !28
  %87 = or disjoint i32 %64, 160, !dbg !28
  %88 = lshr i32 %87, 6, !dbg !28
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !28
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !28
  %91 = or disjoint i32 %64, 224, !dbg !28
  %92 = lshr i32 %91, 6, !dbg !28
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !28
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %91, !dbg !28
  %95 = lshr i32 %65, 6, !dbg !28
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !28
  %97 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %65, !dbg !28
  %98 = or disjoint i32 %65, 1, !dbg !28
  %99 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %98, !dbg !28
  %100 = or disjoint i32 %65, 2, !dbg !28
  %101 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %100, !dbg !28
  %102 = or disjoint i32 %65, 3, !dbg !28
  %103 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %102, !dbg !28
  %104 = or disjoint i32 %65, 512, !dbg !28
  %105 = lshr i32 %104, 6, !dbg !28
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %105, !dbg !28
  %107 = getelementptr inbounds float, ptr addrspace(3) %106, i32 %104, !dbg !28
  %108 = or disjoint i32 %65, 513, !dbg !28
  %109 = lshr i32 %108, 6, !dbg !28
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !28
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %108, !dbg !28
  %112 = or disjoint i32 %65, 514, !dbg !28
  %113 = lshr i32 %112, 6, !dbg !28
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !28
  %115 = getelementptr inbounds float, ptr addrspace(3) %114, i32 %112, !dbg !28
  %116 = or disjoint i32 %65, 515, !dbg !28
  %117 = lshr i32 %116, 6, !dbg !28
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !28
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %116, !dbg !28
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !29
  %121 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !29
  %122 = getelementptr i1, ptr addrspace(1) %4, i64 %35, !dbg !30
  %123 = getelementptr i1, ptr addrspace(1) %4, i64 %37, !dbg !30
  %124 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !23
  %125 = insertelement <4 x i32> %124, i32 %41, i64 1, !dbg !23
  %126 = insertelement <4 x i32> %125, i32 %42, i64 2, !dbg !23
  %127 = insertelement <4 x i32> %126, i32 %43, i64 3, !dbg !23
  %128 = bitcast <4 x i32> %127 to <4 x float>, !dbg !23
  %129 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !24
  %130 = insertelement <4 x i32> %129, i32 %51, i64 1, !dbg !24
  %131 = insertelement <4 x i32> %130, i32 %52, i64 2, !dbg !24
  %132 = insertelement <4 x i32> %131, i32 %53, i64 3, !dbg !24
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !24
  %134 = fadd <4 x float> %128, %133, !dbg !31
  %135 = fcmp olt <4 x float> %134, zeroinitializer, !dbg !32
  %136 = select <4 x i1> %135, <4 x float> zeroinitializer, <4 x float> %134, !dbg !36
  %137 = fcmp ole <4 x float> %136, zeroinitializer, !dbg !37
  %138 = extractelement <4 x float> %134, i64 0, !dbg !28
  %139 = bitcast float %138 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %139, i1 true) #2, !dbg !28
  %140 = extractelement <4 x float> %134, i64 1, !dbg !28
  %141 = bitcast float %140 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %141, i1 true) #2, !dbg !28
  %142 = extractelement <4 x float> %134, i64 2, !dbg !28
  %143 = bitcast float %142 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %143, i1 true) #2, !dbg !28
  %144 = extractelement <4 x float> %134, i64 3, !dbg !28
  %145 = bitcast float %144 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %145, i1 true) #2, !dbg !28
  %146 = extractelement <4 x float> %136, i64 0, !dbg !38
  %147 = bitcast float %146 to <1 x i32>, !dbg !38
  %148 = extractelement <4 x float> %136, i64 1, !dbg !38
  %149 = bitcast float %148 to <1 x i32>, !dbg !38
  %150 = extractelement <4 x float> %136, i64 2, !dbg !38
  %151 = bitcast float %150 to <1 x i32>, !dbg !38
  %152 = extractelement <4 x float> %136, i64 3, !dbg !38
  %153 = bitcast float %152 to <1 x i32>, !dbg !38
  %154 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !23
  %155 = insertelement <4 x i32> %154, i32 %46, i64 1, !dbg !23
  %156 = insertelement <4 x i32> %155, i32 %47, i64 2, !dbg !23
  %157 = insertelement <4 x i32> %156, i32 %48, i64 3, !dbg !23
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !23
  %159 = fadd <4 x float> %158, %133, !dbg !31
  %160 = fcmp olt <4 x float> %159, zeroinitializer, !dbg !32
  %161 = select <4 x i1> %160, <4 x float> zeroinitializer, <4 x float> %159, !dbg !36
  %162 = fcmp ole <4 x float> %161, zeroinitializer, !dbg !37
  %163 = extractelement <4 x float> %159, i64 0, !dbg !28
  %164 = bitcast float %163 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %164, i1 true) #2, !dbg !28
  %165 = extractelement <4 x float> %159, i64 1, !dbg !28
  %166 = bitcast float %165 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %166, i1 true) #2, !dbg !28
  %167 = extractelement <4 x float> %159, i64 2, !dbg !28
  %168 = bitcast float %167 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %168, i1 true) #2, !dbg !28
  %169 = extractelement <4 x float> %159, i64 3, !dbg !28
  %170 = bitcast float %169 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %170, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %171 = load i32, ptr addrspace(3) %97, align 4, !dbg !28
  %172 = load i32, ptr addrspace(3) %99, align 4, !dbg !28
  %173 = load i32, ptr addrspace(3) %101, align 4, !dbg !28
  %174 = load i32, ptr addrspace(3) %103, align 4, !dbg !28
  %175 = load i32, ptr addrspace(3) %107, align 4, !dbg !28
  %176 = load i32, ptr addrspace(3) %111, align 4, !dbg !28
  %177 = load i32, ptr addrspace(3) %115, align 4, !dbg !28
  %178 = load i32, ptr addrspace(3) %119, align 4, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %171, i32 %172, i32 %173, i32 %174, ptr addrspace(1) %59, i1 %19) #2, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %175, i32 %176, i32 %177, i32 %178, ptr addrspace(1) %61, i1 %20) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %147, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %149, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %151, i1 true) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %153, i1 true) #2, !dbg !38
  %179 = extractelement <4 x float> %161, i64 0, !dbg !38
  %180 = bitcast float %179 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %180, i1 true) #2, !dbg !38
  %181 = extractelement <4 x float> %161, i64 1, !dbg !38
  %182 = bitcast float %181 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %182, i1 true) #2, !dbg !38
  %183 = extractelement <4 x float> %161, i64 2, !dbg !38
  %184 = bitcast float %183 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %184, i1 true) #2, !dbg !38
  %185 = extractelement <4 x float> %161, i64 3, !dbg !38
  %186 = bitcast float %185 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %186, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %187 = load i32, ptr addrspace(3) %97, align 4, !dbg !38
  %188 = load i32, ptr addrspace(3) %99, align 4, !dbg !38
  %189 = load i32, ptr addrspace(3) %101, align 4, !dbg !38
  %190 = load i32, ptr addrspace(3) %103, align 4, !dbg !38
  %191 = load i32, ptr addrspace(3) %107, align 4, !dbg !38
  %192 = load i32, ptr addrspace(3) %111, align 4, !dbg !38
  %193 = load i32, ptr addrspace(3) %115, align 4, !dbg !38
  %194 = load i32, ptr addrspace(3) %119, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %187, i32 %188, i32 %189, i32 %190, ptr addrspace(1) %120, i1 %19) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %191, i32 %192, i32 %193, i32 %194, ptr addrspace(1) %121, i1 %20) #2, !dbg !38
  %195 = zext <4 x i1> %137 to <4 x i8>, !dbg !39
  %196 = bitcast <4 x i8> %195 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %122, i1 %18) #2, !dbg !39
  %197 = zext <4 x i1> %162 to <4 x i8>, !dbg !39
  %198 = bitcast <4 x i8> %197 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %123, i1 %18) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py", directory: "inductor_cache/mi")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_2", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 48, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 39, column: 35, scope: !7)
!26 = !DILocation(line: 39, column: 30, scope: !7)
!27 = !DILocation(line: 39, column: 25, scope: !7)
!28 = !DILocation(line: 39, column: 46, scope: !7)
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 41, column: 25, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 36, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 38, column: 19, scope: !7)
!38 = !DILocation(line: 40, column: 46, scope: !7)
!39 = !DILocation(line: 41, column: 54, scope: !7)
!40 = !DILocation(line: 41, column: 4, scope: !7)
