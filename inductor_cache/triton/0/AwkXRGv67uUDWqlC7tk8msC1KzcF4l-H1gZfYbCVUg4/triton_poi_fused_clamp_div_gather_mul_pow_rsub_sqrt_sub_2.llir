; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/wc/cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp7 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_clamp_div_gather_mul_pow_rsub_sqrt_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %7 = shl i32 %6, 8, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = shl i32 %8, 1, !dbg !14
  %10 = and i32 %9, 254, !dbg !14
  %11 = or disjoint i32 %7, %10, !dbg !15
  %12 = icmp slt i32 %11, 256, !dbg !16
  %13 = sdiv i32 %11, 4, !dbg !17
  %14 = sext i32 %11 to i64, !dbg !18
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !18
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %12) #5, !dbg !19
  %17 = sext i32 %13 to i64, !dbg !20
  %18 = getelementptr i64, ptr addrspace(1) %1, i64 %17, !dbg !20
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %12) #5, !dbg !21
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 %12) #5, !dbg !21
  %21 = add i64 %19, -1, !dbg !22
  %22 = add i64 %19, 3, !dbg !23
  %23 = icmp slt i64 %21, 0, !dbg !24
  %24 = select i1 %23, i64 %22, i64 %21, !dbg !25
  %25 = icmp ugt i64 %24, 3, !dbg !26
  %.not1 = and i1 %12, %25, !dbg !27
  br i1 %.not1, label %26, label %27, !dbg !27

26:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 34, ptr nonnull @assertFunc_0, i64 1), !dbg !27
  unreachable, !dbg !27

27:                                               ; preds = %5
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %28 = shl nsw i32 %13, 2, !dbg !28
  %29 = sext i32 %28 to i64, !dbg !29
  %30 = add i64 %24, %29, !dbg !29
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !30
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %12) #5, !dbg !31
  %33 = bitcast i32 %32 to float, !dbg !31
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %12) #5, !dbg !31
  %35 = bitcast i32 %34 to float, !dbg !31
  %36 = add i64 %24, 1, !dbg !32
  %37 = sitofp i64 %36 to float, !dbg !33
  %38 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float %37) #5, !dbg !34
  %39 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float %37) #5, !dbg !34
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !35
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #5, !dbg !36
  %42 = bitcast i32 %41 to float, !dbg !36
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #5, !dbg !36
  %44 = bitcast i32 %43 to float, !dbg !36
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %37) #5, !dbg !37
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %37) #5, !dbg !37
  %47 = fmul float %38, %38, !dbg !38
  %48 = fmul float %39, %39, !dbg !38
  %49 = fsub float %45, %47, !dbg !39
  %50 = fsub float %46, %48, !dbg !39
  %51 = fmul float %49, %37, !dbg !40
  %52 = fmul float %50, %37, !dbg !40
  %53 = fsub float 1.000000e+00, %51, !dbg !41
  %54 = fsub float 1.000000e+00, %52, !dbg !41
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float %37) #5, !dbg !42
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float %37) #5, !dbg !42
  %.inv = fcmp ole float %55, 0.000000e+00, !dbg !43
  %57 = select i1 %.inv, float 0.000000e+00, float %55, !dbg !43
  %.inv2 = fcmp ole float %56, 0.000000e+00, !dbg !43
  %58 = select i1 %.inv2, float 0.000000e+00, float %56, !dbg !43
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %59, 0, !dbg !47
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !47
  %.not1.i = icmp eq i32 %60, 0, !dbg !47
  br i1 %.not.i, label %66, label %61, !dbg !47

61:                                               ; preds = %27
  br i1 %.not1.i, label %64, label %62, !dbg !47

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

66:                                               ; preds = %27
  br i1 %.not1.i, label %69, label %67, !dbg !47

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !47
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i5 = icmp eq i32 %71, 0, !dbg !47
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !47
  %.not1.i8 = icmp eq i32 %72, 0, !dbg !47
  br i1 %.not.i5, label %78, label %73, !dbg !47

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %76, label %74, !dbg !47

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #5, !dbg !47
  br label %__nv_sqrtf.exit9, !dbg !47

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #5, !dbg !47
  br label %__nv_sqrtf.exit9, !dbg !47

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %81, label %79, !dbg !47

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #5, !dbg !47
  br label %__nv_sqrtf.exit9, !dbg !47

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #5, !dbg !47
  br label %__nv_sqrtf.exit9, !dbg !47

__nv_sqrtf.exit9:                                 ; preds = %74, %76, %79, %81
  %.0.i7 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !47
  %83 = extractvalue { i32, i32 } %16, 0, !dbg !19
  %84 = bitcast i32 %83 to float, !dbg !19
  %85 = extractvalue { i32, i32 } %16, 1, !dbg !19
  %86 = bitcast i32 %85 to float, !dbg !19
  %87 = fsub float %38, %.0.i, !dbg !48
  %88 = fsub float %39, %.0.i7, !dbg !48
  %89 = fsub float %84, %87, !dbg !49
  %90 = fsub float %86, %88, !dbg !49
  %.inv3 = fcmp ole float %89, 0.000000e+00, !dbg !50
  %91 = select i1 %.inv3, float 0.000000e+00, float %89, !dbg !50
  %.inv4 = fcmp ole float %90, 0.000000e+00, !dbg !50
  %92 = select i1 %.inv4, float 0.000000e+00, float %90, !dbg !50
  %93 = fmul float %91, %91, !dbg !52
  %94 = fmul float %92, %92, !dbg !52
  %95 = bitcast float %93 to i32, !dbg !53
  %96 = bitcast float %94 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %95, i32 %96, ptr addrspace(1) %15, i1 %12) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwcpw4vaqf3p7lx25j2oxazhppscevwp4dibb7xmt5jipjzsardm.py", directory: "inductor_cache/wc")
!4 = !{ptr @triton_poi_fused_clamp_div_gather_mul_pow_rsub_sqrt_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clamp_div_gather_mul_pow_rsub_sqrt_sub_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_clamp_div_gather_mul_pow_rsub_sqrt_sub_2", linkageName: "triton_poi_fused_clamp_div_gather_mul_pow_rsub_sqrt_sub_2", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 19, scope: !11)
!18 = !DILocation(line: 26, column: 34, scope: !11)
!19 = !DILocation(line: 26, column: 39, scope: !11)
!20 = !DILocation(line: 27, column: 30, scope: !11)
!21 = !DILocation(line: 27, column: 35, scope: !11)
!22 = !DILocation(line: 29, column: 18, scope: !11)
!23 = !DILocation(line: 31, column: 18, scope: !11)
!24 = !DILocation(line: 32, column: 18, scope: !11)
!25 = !DILocation(line: 33, column: 32, scope: !11)
!26 = !DILocation(line: 34, column: 37, scope: !11)
!27 = !DILocation(line: 34, column: 60, scope: !11)
!28 = !DILocation(line: 35, column: 39, scope: !11)
!29 = !DILocation(line: 35, column: 37, scope: !11)
!30 = !DILocation(line: 35, column: 30, scope: !11)
!31 = !DILocation(line: 35, column: 44, scope: !11)
!32 = !DILocation(line: 36, column: 16, scope: !11)
!33 = !DILocation(line: 37, column: 21, scope: !11)
!34 = !DILocation(line: 38, column: 19, scope: !11)
!35 = !DILocation(line: 39, column: 31, scope: !11)
!36 = !DILocation(line: 39, column: 45, scope: !11)
!37 = !DILocation(line: 40, column: 20, scope: !11)
!38 = !DILocation(line: 41, column: 20, scope: !11)
!39 = !DILocation(line: 42, column: 20, scope: !11)
!40 = !DILocation(line: 43, column: 20, scope: !11)
!41 = !DILocation(line: 45, column: 20, scope: !11)
!42 = !DILocation(line: 46, column: 20, scope: !11)
!43 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !11, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 48, column: 42, scope: !11)
!47 = !DILocation(line: 49, column: 27, scope: !11)
!48 = !DILocation(line: 50, column: 20, scope: !11)
!49 = !DILocation(line: 51, column: 19, scope: !11)
!50 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 52, column: 42, scope: !11)
!52 = !DILocation(line: 53, column: 20, scope: !11)
!53 = !DILocation(line: 54, column: 40, scope: !11)
!54 = !DILocation(line: 54, column: 4, scope: !11)
