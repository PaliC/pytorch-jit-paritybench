; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_8(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = sdiv i32 %9, 4, !dbg !14
  %12 = srem i32 %10, 4, !dbg !15
  %13 = sdiv i32 %9, 16, !dbg !16
  %14 = shl nsw i32 %12, 1, !dbg !17
  %15 = icmp sgt i32 %12, 0, !dbg !18
  %16 = mul i32 %13, 36, !dbg !19
  %17 = icmp ult i32 %12, 3, !dbg !20
  %18 = mul nsw i32 %12, -2, !dbg !21
  %19 = or disjoint i32 %14, 1, !dbg !22
  %20 = icmp sgt i32 %12, 2, !dbg !23
  %21 = select i1 %20, i32 7, i32 0, !dbg !24
  %22 = icmp slt i32 %19, 7, !dbg !25
  %23 = select i1 %22, i32 %19, i32 0, !dbg !26
  %24 = add nsw i32 %23, %21, !dbg !27
  %25 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %26 = insertelement <2 x i32> %25, i32 %11, i64 1, !dbg !15
  %27 = srem <2 x i32> %26, splat (i32 4), !dbg !15
  %28 = extractelement <2 x i32> %27, i64 0, !dbg !15
  %29 = extractelement <2 x i32> %27, i64 1, !dbg !28
  %30 = icmp sgt i32 %29, 0, !dbg !29
  %31 = shl nsw <2 x i32> %27, splat (i32 1), !dbg !17
  %32 = shl nsw i32 %28, 1, !dbg !17
  %33 = icmp sgt i32 %28, 0, !dbg !18
  %34 = and i1 %33, %30, !dbg !30
  %35 = and i1 %15, %30, !dbg !30
  %36 = mul nsw i32 %29, 12, !dbg !31
  %37 = add i32 %36, %16, !dbg !32
  %38 = add i32 %37, -7, !dbg !33
  %39 = add i32 %38, %32, !dbg !34
  %40 = add i32 %38, %14, !dbg !34
  %41 = sext i32 %39 to i64, !dbg !35
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !35
  %43 = sext i32 %40 to i64, !dbg !35
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !35
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %34, i32 0, i1 %34) #1, !dbg !36
  %46 = bitcast i32 %45 to float, !dbg !36
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %35, i32 0, i1 %35) #1, !dbg !36
  %48 = bitcast i32 %47 to float, !dbg !36
  %49 = icmp ult i32 %28, 3, !dbg !20
  %50 = and i1 %49, %30, !dbg !37
  %51 = and i1 %17, %30, !dbg !37
  %52 = add i32 %37, -6, !dbg !38
  %53 = add i32 %52, %32, !dbg !39
  %54 = add i32 %52, %14, !dbg !39
  %55 = sext i32 %53 to i64, !dbg !40
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !40
  %57 = sext i32 %54 to i64, !dbg !40
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !40
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %50, i32 0, i1 %50) #1, !dbg !41
  %60 = bitcast i32 %59 to float, !dbg !41
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %51, i32 0, i1 %51) #1, !dbg !41
  %62 = bitcast i32 %61 to float, !dbg !41
  %63 = fadd float %46, %60, !dbg !42
  %64 = fadd float %48, %62, !dbg !42
  %65 = icmp ult i32 %29, 3, !dbg !28
  %66 = and i1 %33, %65, !dbg !43
  %67 = and i1 %15, %65, !dbg !43
  %68 = add i32 %37, -1, !dbg !44
  %69 = add i32 %68, %32, !dbg !45
  %70 = add i32 %68, %14, !dbg !45
  %71 = sext i32 %69 to i64, !dbg !46
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !46
  %73 = sext i32 %70 to i64, !dbg !46
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !46
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %66, i32 0, i1 %66) #1, !dbg !47
  %76 = bitcast i32 %75 to float, !dbg !47
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %67, i32 0, i1 %67) #1, !dbg !47
  %78 = bitcast i32 %77 to float, !dbg !47
  %79 = fadd float %63, %76, !dbg !48
  %80 = fadd float %64, %78, !dbg !48
  %81 = and i1 %49, %65, !dbg !49
  %82 = and i1 %17, %65, !dbg !49
  %83 = add i32 %37, %32, !dbg !50
  %84 = add i32 %37, %14, !dbg !50
  %85 = sext i32 %83 to i64, !dbg !51
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !51
  %87 = sext i32 %84 to i64, !dbg !51
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !51
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %81, i32 0, i1 %81) #1, !dbg !52
  %90 = bitcast i32 %89 to float, !dbg !52
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %82, i32 0, i1 %82) #1, !dbg !52
  %92 = bitcast i32 %91 to float, !dbg !52
  %93 = fadd float %79, %90, !dbg !53
  %94 = fadd float %80, %92, !dbg !53
  %95 = mul nsw i32 %28, -2, !dbg !21
  %96 = mul nsw i32 %29, -2, !dbg !54
  %97 = or disjoint <2 x i32> %31, splat (i32 1), !dbg !22
  %98 = icmp sgt <2 x i32> %27, splat (i32 2), !dbg !23
  %99 = select <2 x i1> %98, <2 x i32> splat (i32 7), <2 x i32> zeroinitializer, !dbg !24
  %100 = icmp slt <2 x i32> %97, splat (i32 7), !dbg !25
  %101 = select <2 x i1> %100, <2 x i32> %97, <2 x i32> zeroinitializer, !dbg !26
  %102 = add nsw <2 x i32> %101, %99, !dbg !27
  %103 = extractelement <2 x i32> %102, i64 0, !dbg !55
  %104 = mul nsw i32 %103, %96, !dbg !56
  %105 = mul nsw i32 %96, %24, !dbg !56
  %106 = shl nsw i32 %28, 2, !dbg !57
  %107 = shl nsw i32 %12, 2, !dbg !57
  %108 = mul nsw i32 %106, %29, !dbg !58
  %109 = mul nsw i32 %107, %29, !dbg !58
  %reass.add = add nsw i32 %103, %95
  %110 = extractelement <2 x i32> %102, i64 1
  %reass.mul = mul nsw i32 %reass.add, %110
  %111 = add nsw i32 %110, %96, !dbg !59
  %112 = add nsw i32 %111, 1, !dbg !60
  %113 = add i32 %112, %95, !dbg !61
  %114 = add i32 %113, %108, !dbg !62
  %115 = add i32 %114, %103, !dbg !55
  %116 = add i32 %115, %104, !dbg !63
  %117 = add i32 %116, %reass.mul, !dbg !64
  %reass.add1 = add nsw i32 %24, %18
  %reass.mul2 = mul nsw i32 %110, %reass.add1
  %118 = add i32 %112, %18, !dbg !61
  %119 = add i32 %118, %24, !dbg !62
  %120 = add i32 %119, %109, !dbg !55
  %121 = add i32 %120, %105, !dbg !63
  %122 = add i32 %121, %reass.mul2, !dbg !64
  %123 = sitofp i32 %117 to float, !dbg !65
  %124 = sitofp i32 %122 to float, !dbg !65
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %123) #1, !dbg !65
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %124) #1, !dbg !65
  %127 = sext i32 %9 to i64, !dbg !66
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !66
  %129 = bitcast float %125 to i32, !dbg !67
  %130 = bitcast float %126 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %129, i32 %130, ptr addrspace(1) %128, i1 true) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctxyovogxo7dgfbyu6hcbskynayl52iujqpnfkwp2qu7bwi6jxkg.py", directory: "inductor_cache/tx")
!4 = !{ptr @triton_poi_fused_avg_pool2d_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_8", linkageName: "triton_poi_fused_avg_pool2d_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 20, scope: !7)
!18 = !DILocation(line: 35, column: 19, scope: !7)
!19 = !DILocation(line: 39, column: 56, scope: !7)
!20 = !DILocation(line: 43, column: 20, scope: !7)
!21 = !DILocation(line: 57, column: 22, scope: !7)
!22 = !DILocation(line: 57, column: 60, scope: !7)
!23 = !DILocation(line: 57, column: 56, scope: !7)
!24 = !DILocation(line: 57, column: 48, scope: !7)
!25 = !DILocation(line: 57, column: 97, scope: !7)
!26 = !DILocation(line: 57, column: 83, scope: !7)
!27 = !DILocation(line: 57, column: 69, scope: !7)
!28 = !DILocation(line: 50, column: 20, scope: !7)
!29 = !DILocation(line: 30, column: 19, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 48, scope: !7)
!32 = !DILocation(line: 39, column: 38, scope: !7)
!33 = !DILocation(line: 39, column: 45, scope: !7)
!34 = !DILocation(line: 39, column: 53, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 61, scope: !7)
!37 = !DILocation(line: 44, column: 19, scope: !7)
!38 = !DILocation(line: 45, column: 45, scope: !7)
!39 = !DILocation(line: 45, column: 53, scope: !7)
!40 = !DILocation(line: 45, column: 31, scope: !7)
!41 = !DILocation(line: 45, column: 61, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 45, scope: !7)
!45 = !DILocation(line: 52, column: 53, scope: !7)
!46 = !DILocation(line: 52, column: 31, scope: !7)
!47 = !DILocation(line: 52, column: 61, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 46, scope: !7)
!51 = !DILocation(line: 55, column: 31, scope: !7)
!52 = !DILocation(line: 55, column: 54, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 34, scope: !7)
!55 = !DILocation(line: 57, column: 314, scope: !7)
!56 = !DILocation(line: 57, column: 250, scope: !7)
!57 = !DILocation(line: 57, column: 316, scope: !7)
!58 = !DILocation(line: 57, column: 319, scope: !7)
!59 = !DILocation(line: 57, column: 29, scope: !7)
!60 = !DILocation(line: 57, column: 40, scope: !7)
!61 = !DILocation(line: 57, column: 167, scope: !7)
!62 = !DILocation(line: 57, column: 241, scope: !7)
!63 = !DILocation(line: 57, column: 325, scope: !7)
!64 = !DILocation(line: 57, column: 389, scope: !7)
!65 = !DILocation(line: 58, column: 20, scope: !7)
!66 = !DILocation(line: 59, column: 25, scope: !7)
!67 = !DILocation(line: 59, column: 37, scope: !7)
!68 = !DILocation(line: 59, column: 4, scope: !7)
