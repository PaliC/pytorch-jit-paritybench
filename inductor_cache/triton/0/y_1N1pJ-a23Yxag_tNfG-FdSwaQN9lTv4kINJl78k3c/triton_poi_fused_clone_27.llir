; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = icmp slt i32 %9, 16, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %12 = shl i32 %11, 8, !dbg !13
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %14 = shl i32 %13, 1, !dbg !14
  %15 = and i32 %14, 254, !dbg !14
  %16 = or disjoint i32 %15, 1, !dbg !14
  %17 = or disjoint i32 %12, %15, !dbg !15
  %18 = or disjoint i32 %12, %16, !dbg !15
  %19 = icmp slt i32 %17, 2048, !dbg !16
  %20 = srem i32 %17, 512, !dbg !17
  %21 = shl i32 %17, 4, !dbg !18
  %22 = shl i32 %18, 4, !dbg !18
  %23 = add i32 %21, %9, !dbg !19
  %24 = add i32 %22, %9, !dbg !19
  %25 = sext i32 %23 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !20
  %27 = sext i32 %24 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = and i1 %10, %19, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %29) #3, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %29) #3, !dbg !22
  %32 = sdiv i32 %17, 16, !dbg !23
  %33 = sext i32 %32 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %19) #3, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %19) #3, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = sext i32 %20 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !28
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %19) #3, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !30
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %19) #3, !dbg !31
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float 2.560000e+02) #3, !dbg !32
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float 2.560000e+02) #3, !dbg !32
  %49 = fadd float %47, 0x3EE4F8B580000000, !dbg !33
  %50 = fadd float %48, 0x3EE4F8B580000000, !dbg !33
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %51, 0, !dbg !34
  br i1 %.not.i, label %54, label %52, !dbg !34

52:                                               ; preds = %8
  %53 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %49), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

54:                                               ; preds = %8
  %55 = tail call float @llvm.nvvm.rsqrt.approx.f(float %49), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %52, %54
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], !dbg !34
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i1 = icmp eq i32 %56, 0, !dbg !34
  br i1 %.not.i1, label %59, label %57, !dbg !34

57:                                               ; preds = %__nv_rsqrtf.exit
  %58 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %50), !dbg !34
  br label %__nv_rsqrtf.exit3, !dbg !34

59:                                               ; preds = %__nv_rsqrtf.exit
  %60 = tail call float @llvm.nvvm.rsqrt.approx.f(float %50), !dbg !34
  br label %__nv_rsqrtf.exit3, !dbg !34

__nv_rsqrtf.exit3:                                ; preds = %57, %59
  %.0.i2 = phi float [ %58, %57 ], [ %60, %59 ], !dbg !34
  %61 = bitcast i32 %31 to float, !dbg !22
  %62 = bitcast i32 %36 to float, !dbg !25
  %63 = fsub float %61, %62, !dbg !35
  %64 = bitcast i32 %30 to float, !dbg !22
  %65 = bitcast i32 %35 to float, !dbg !25
  %66 = fsub float %64, %65, !dbg !35
  %67 = extractvalue { i32, i32 } %46, 1, !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = extractvalue { i32, i32 } %46, 0, !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = extractvalue { i32, i32 } %44, 1, !dbg !29
  %72 = bitcast i32 %71 to float, !dbg !29
  %73 = extractvalue { i32, i32 } %44, 0, !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = fmul float %66, %.0.i, !dbg !36
  %76 = fmul float %63, %.0.i2, !dbg !36
  %77 = fmul float %75, %74, !dbg !37
  %78 = fmul float %76, %72, !dbg !37
  %79 = fadd float %77, %70, !dbg !38
  %80 = fadd float %78, %68, !dbg !38
  %81 = shl i32 %9, 11, !dbg !39
  %82 = add i32 %17, %81, !dbg !40
  %83 = sext i32 %82 to i64, !dbg !41
  %84 = getelementptr float, ptr addrspace(1) %5, i64 %83, !dbg !41
  %85 = bitcast float %79 to i32, !dbg !42
  %86 = bitcast float %80 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %85, i32 %86, ptr addrspace(1) %84, i1 %29) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czuwiecqcgwoxntkrxikx2iquhuyvzp66ikodxf5qw33jd3y6a4c.py", directory: "inductor_cache/zu")
!4 = !{ptr @triton_poi_fused_clone_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_27", linkageName: "triton_poi_fused_clone_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 38, scope: !7)
!19 = !DILocation(line: 31, column: 35, scope: !7)
!20 = !DILocation(line: 31, column: 30, scope: !7)
!21 = !DILocation(line: 31, column: 51, scope: !7)
!22 = !DILocation(line: 31, column: 43, scope: !7)
!23 = !DILocation(line: 32, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 41, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 41, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 27, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 19, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 45, column: 35, scope: !7)
!40 = !DILocation(line: 45, column: 30, scope: !7)
!41 = !DILocation(line: 45, column: 25, scope: !7)
!42 = !DILocation(line: 45, column: 47, scope: !7)
!43 = !DILocation(line: 45, column: 4, scope: !7)
