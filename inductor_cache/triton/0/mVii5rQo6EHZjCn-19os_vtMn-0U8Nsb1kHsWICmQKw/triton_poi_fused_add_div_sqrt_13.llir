; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = icmp slt i32 %12, 512, !dbg !14
  %18 = icmp slt i32 %13, 512, !dbg !14
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 8, !dbg !16
  %24 = lshr i32 %8, 2, !dbg !17
  %25 = and i32 %24, 63, !dbg !17
  %26 = and i32 %9, 252, !dbg !17
  %27 = or disjoint i32 %23, %25, !dbg !18
  %28 = or disjoint i32 %27, 64, !dbg !18
  %29 = or disjoint i32 %27, 128, !dbg !18
  %30 = or disjoint i32 %27, 192, !dbg !18
  %31 = or disjoint i32 %23, %26, !dbg !18
  %32 = icmp slt i32 %27, 1024, !dbg !19
  %33 = icmp slt i32 %28, 1024, !dbg !19
  %34 = icmp slt i32 %29, 1024, !dbg !19
  %35 = icmp slt i32 %30, 1024, !dbg !19
  %36 = icmp slt i32 %31, 1024, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %37 = sdiv i32 %.frozen, 128, !dbg !20
  %38 = mul i32 %37, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %38, !dbg !21
  %39 = sdiv i32 %13, 128, !dbg !20
  %40 = sdiv i32 %14, 128, !dbg !20
  %41 = sdiv i32 %15, 128, !dbg !20
  %42 = sdiv i32 %16, 128, !dbg !20
  %43 = shl i32 %27, 7, !dbg !22
  %44 = shl i32 %28, 7, !dbg !22
  %45 = shl i32 %29, 7, !dbg !22
  %46 = shl i32 %30, 7, !dbg !22
  %47 = shl i32 %37, 17, !dbg !23
  %48 = add i32 %47, %.decomposed, !dbg !24
  %49 = add i32 %48, %43, !dbg !25
  %50 = add i32 %48, %44, !dbg !25
  %51 = add i32 %48, %45, !dbg !25
  %52 = add i32 %48, %46, !dbg !25
  %53 = sext i32 %49 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !26
  %55 = sext i32 %50 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !26
  %57 = sext i32 %51 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !26
  %59 = sext i32 %52 to i64, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !26
  %61 = and i1 %17, %32, !dbg !27
  %62 = and i1 %33, %17, !dbg !27
  %63 = and i1 %34, %17, !dbg !27
  %64 = and i1 %35, %17, !dbg !27
  %65 = and i1 %18, %36, !dbg !27
  %66 = and i1 %19, %36, !dbg !27
  %67 = and i1 %20, %36, !dbg !27
  %68 = and i1 %21, %36, !dbg !27
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %61) #4, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !28
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %62) #4, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !28
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %63) #4, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !28
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %64) #4, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !28
  %89 = shl i32 %8, 10, !dbg !28
  %90 = and i32 %89, 3072, !dbg !28
  %91 = or disjoint i32 %90, %25, !dbg !28
  %92 = and i32 %9, 1020, !dbg !28
  %93 = lshr exact i32 %90, 6, !dbg !28
  %94 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %93, !dbg !28
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %91, !dbg !28
  %96 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #4, !dbg !28
  %97 = or disjoint i32 %91, 256, !dbg !28
  %98 = lshr i32 %97, 8, !dbg !28
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !28
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %97, !dbg !28
  %101 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !28
  %102 = or disjoint i32 %91, 512, !dbg !28
  %103 = lshr i32 %102, 8, !dbg !28
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !28
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !28
  %106 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !28
  %107 = or disjoint i32 %91, 768, !dbg !28
  %108 = lshr i32 %107, 8, !dbg !28
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !28
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !28
  %111 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #4, !dbg !28
  %112 = or disjoint i32 %91, 64, !dbg !28
  %113 = getelementptr float, ptr addrspace(3) %94, i32 %112, !dbg !28
  %114 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #4, !dbg !28
  %115 = or disjoint i32 %91, 320, !dbg !28
  %116 = lshr i32 %115, 8, !dbg !28
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !28
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !28
  %119 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #4, !dbg !28
  %120 = or disjoint i32 %91, 576, !dbg !28
  %121 = lshr i32 %120, 8, !dbg !28
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !28
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !28
  %124 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #4, !dbg !28
  %125 = or disjoint i32 %91, 832, !dbg !28
  %126 = lshr i32 %125, 8, !dbg !28
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !28
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %125, !dbg !28
  %129 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !28
  %130 = or disjoint i32 %91, 128, !dbg !28
  %131 = getelementptr float, ptr addrspace(3) %94, i32 %130, !dbg !28
  %132 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #4, !dbg !28
  %133 = or disjoint i32 %91, 384, !dbg !28
  %134 = lshr i32 %133, 8, !dbg !28
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !28
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !28
  %137 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #4, !dbg !28
  %138 = or disjoint i32 %91, 640, !dbg !28
  %139 = lshr i32 %138, 8, !dbg !28
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !28
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !28
  %142 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #4, !dbg !28
  %143 = or disjoint i32 %91, 896, !dbg !28
  %144 = lshr i32 %143, 8, !dbg !28
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !28
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !28
  %147 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #4, !dbg !28
  %148 = or disjoint i32 %91, 192, !dbg !28
  %149 = getelementptr float, ptr addrspace(3) %94, i32 %148, !dbg !28
  %150 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #4, !dbg !28
  %151 = or disjoint i32 %91, 448, !dbg !28
  %152 = lshr i32 %151, 8, !dbg !28
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !28
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !28
  %155 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #4, !dbg !28
  %156 = or disjoint i32 %91, 704, !dbg !28
  %157 = lshr i32 %156, 8, !dbg !28
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !28
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !28
  %160 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #4, !dbg !28
  %161 = or disjoint i32 %91, 960, !dbg !28
  %162 = lshr i32 %161, 8, !dbg !28
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !28
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %161, !dbg !28
  %165 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %166 = lshr i32 %92, 8, !dbg !28
  %167 = or disjoint i32 %166, %92, !dbg !28
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !28
  %169 = load float, ptr addrspace(3) %168, align 4, !dbg !28
  %170 = or disjoint i32 %92, 1, !dbg !28
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !28
  %172 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %170, !dbg !28
  %173 = load float, ptr addrspace(3) %172, align 4, !dbg !28
  %174 = or disjoint i32 %92, 2, !dbg !28
  %175 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %174, !dbg !28
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !28
  %177 = or disjoint i32 %92, 3, !dbg !28
  %178 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %177, !dbg !28
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !28
  %180 = or disjoint i32 %92, 1024, !dbg !28
  %181 = lshr i32 %180, 8, !dbg !28
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !28
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %180, !dbg !28
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !28
  %185 = or disjoint i32 %92, 1025, !dbg !28
  %186 = lshr i32 %185, 8, !dbg !28
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !28
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %185, !dbg !28
  %189 = load float, ptr addrspace(3) %188, align 4, !dbg !28
  %190 = or disjoint i32 %92, 1026, !dbg !28
  %191 = lshr i32 %190, 8, !dbg !28
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !28
  %193 = getelementptr inbounds float, ptr addrspace(3) %192, i32 %190, !dbg !28
  %194 = load float, ptr addrspace(3) %193, align 4, !dbg !28
  %195 = or disjoint i32 %92, 1027, !dbg !28
  %196 = lshr i32 %195, 8, !dbg !28
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !28
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %195, !dbg !28
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !28
  %200 = or disjoint i32 %92, 2048, !dbg !28
  %201 = lshr i32 %200, 8, !dbg !28
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !28
  %203 = getelementptr inbounds float, ptr addrspace(3) %202, i32 %200, !dbg !28
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !28
  %205 = or disjoint i32 %92, 2049, !dbg !28
  %206 = lshr i32 %205, 8, !dbg !28
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !28
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %205, !dbg !28
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !28
  %210 = or disjoint i32 %92, 2050, !dbg !28
  %211 = lshr i32 %210, 8, !dbg !28
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !28
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !28
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !28
  %215 = or disjoint i32 %92, 2051, !dbg !28
  %216 = lshr i32 %215, 8, !dbg !28
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !28
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !28
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !28
  %220 = or disjoint i32 %92, 3072, !dbg !28
  %221 = lshr i32 %220, 8, !dbg !28
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !28
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !28
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !28
  %225 = or disjoint i32 %92, 3073, !dbg !28
  %226 = lshr i32 %225, 8, !dbg !28
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !28
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !28
  %229 = load float, ptr addrspace(3) %228, align 4, !dbg !28
  %230 = or disjoint i32 %92, 3074, !dbg !28
  %231 = lshr i32 %230, 8, !dbg !28
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !28
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !28
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !28
  %235 = or disjoint i32 %92, 3075, !dbg !28
  %236 = lshr i32 %235, 8, !dbg !28
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !28
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !28
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !28
  %240 = shl i32 %39, 10, !dbg !29
  %241 = shl i32 %40, 10, !dbg !29
  %242 = shl i32 %41, 10, !dbg !29
  %243 = shl i32 %42, 10, !dbg !29
  %244 = add i32 %240, %31, !dbg !30
  %245 = add i32 %31, %241, !dbg !30
  %246 = add i32 %31, %242, !dbg !30
  %247 = add i32 %31, %243, !dbg !30
  %248 = sext i32 %244 to i64, !dbg !31
  %249 = getelementptr float, ptr addrspace(1) %1, i64 %248, !dbg !31
  %250 = sext i32 %245 to i64, !dbg !31
  %251 = getelementptr float, ptr addrspace(1) %1, i64 %250, !dbg !31
  %252 = sext i32 %246 to i64, !dbg !31
  %253 = getelementptr float, ptr addrspace(1) %1, i64 %252, !dbg !31
  %254 = sext i32 %247 to i64, !dbg !31
  %255 = getelementptr float, ptr addrspace(1) %1, i64 %254, !dbg !31
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %249, i1 %65) #4, !dbg !32
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !32
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !32
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !32
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !32
  %261 = bitcast i32 %257 to float, !dbg !32
  %262 = bitcast i32 %258 to float, !dbg !32
  %263 = bitcast i32 %259 to float, !dbg !32
  %264 = bitcast i32 %260 to float, !dbg !32
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %251, i1 %66) #4, !dbg !32
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !32
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !32
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !32
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !32
  %270 = bitcast i32 %266 to float, !dbg !32
  %271 = bitcast i32 %267 to float, !dbg !32
  %272 = bitcast i32 %268 to float, !dbg !32
  %273 = bitcast i32 %269 to float, !dbg !32
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %253, i1 %67) #4, !dbg !32
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !32
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !32
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !32
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !32
  %279 = bitcast i32 %275 to float, !dbg !32
  %280 = bitcast i32 %276 to float, !dbg !32
  %281 = bitcast i32 %277 to float, !dbg !32
  %282 = bitcast i32 %278 to float, !dbg !32
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %255, i1 %68) #4, !dbg !32
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !32
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !32
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !32
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !32
  %288 = bitcast i32 %284 to float, !dbg !32
  %289 = bitcast i32 %285 to float, !dbg !32
  %290 = bitcast i32 %286 to float, !dbg !32
  %291 = bitcast i32 %287 to float, !dbg !32
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %292, 0, !dbg !33
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %293, 0, !dbg !33
  br i1 %.not.i, label %299, label %294, !dbg !33

294:                                              ; preds = %5
  br i1 %.not1.i, label %297, label %295, !dbg !33

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %261) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %261) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

299:                                              ; preds = %5
  br i1 %.not1.i, label %302, label %300, !dbg !33

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.f(float %261) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.f(float %261) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %295, %297, %300, %302
  %.0.i = phi float [ %296, %295 ], [ %298, %297 ], [ %301, %300 ], [ %303, %302 ], !dbg !33
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i3 = icmp eq i32 %304, 0, !dbg !33
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i6 = icmp eq i32 %305, 0, !dbg !33
  br i1 %.not.i3, label %311, label %306, !dbg !33

306:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %309, label %307, !dbg !33

307:                                              ; preds = %306
  %308 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %262) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

309:                                              ; preds = %306
  %310 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %262) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

311:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %314, label %312, !dbg !33

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.f(float %262) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.f(float %262) #4, !dbg !33
  br label %__nv_sqrtf.exit7, !dbg !33

__nv_sqrtf.exit7:                                 ; preds = %307, %309, %312, %314
  %.0.i5 = phi float [ %308, %307 ], [ %310, %309 ], [ %313, %312 ], [ %315, %314 ], !dbg !33
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i8 = icmp eq i32 %316, 0, !dbg !33
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i11 = icmp eq i32 %317, 0, !dbg !33
  br i1 %.not.i8, label %323, label %318, !dbg !33

318:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %321, label %319, !dbg !33

319:                                              ; preds = %318
  %320 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %263) #4, !dbg !33
  br label %__nv_sqrtf.exit12, !dbg !33

321:                                              ; preds = %318
  %322 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %263) #4, !dbg !33
  br label %__nv_sqrtf.exit12, !dbg !33

323:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %326, label %324, !dbg !33

324:                                              ; preds = %323
  %325 = tail call float @llvm.nvvm.sqrt.rn.f(float %263) #4, !dbg !33
  br label %__nv_sqrtf.exit12, !dbg !33

326:                                              ; preds = %323
  %327 = tail call float @llvm.nvvm.sqrt.approx.f(float %263) #4, !dbg !33
  br label %__nv_sqrtf.exit12, !dbg !33

__nv_sqrtf.exit12:                                ; preds = %319, %321, %324, %326
  %.0.i10 = phi float [ %320, %319 ], [ %322, %321 ], [ %325, %324 ], [ %327, %326 ], !dbg !33
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i13 = icmp eq i32 %328, 0, !dbg !33
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i16 = icmp eq i32 %329, 0, !dbg !33
  br i1 %.not.i13, label %335, label %330, !dbg !33

330:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %333, label %331, !dbg !33

331:                                              ; preds = %330
  %332 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %264) #4, !dbg !33
  br label %__nv_sqrtf.exit17, !dbg !33

333:                                              ; preds = %330
  %334 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %264) #4, !dbg !33
  br label %__nv_sqrtf.exit17, !dbg !33

335:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %338, label %336, !dbg !33

336:                                              ; preds = %335
  %337 = tail call float @llvm.nvvm.sqrt.rn.f(float %264) #4, !dbg !33
  br label %__nv_sqrtf.exit17, !dbg !33

338:                                              ; preds = %335
  %339 = tail call float @llvm.nvvm.sqrt.approx.f(float %264) #4, !dbg !33
  br label %__nv_sqrtf.exit17, !dbg !33

__nv_sqrtf.exit17:                                ; preds = %331, %333, %336, %338
  %.0.i15 = phi float [ %332, %331 ], [ %334, %333 ], [ %337, %336 ], [ %339, %338 ], !dbg !33
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i18 = icmp eq i32 %340, 0, !dbg !33
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i21 = icmp eq i32 %341, 0, !dbg !33
  br i1 %.not.i18, label %347, label %342, !dbg !33

342:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %345, label %343, !dbg !33

343:                                              ; preds = %342
  %344 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %270) #4, !dbg !33
  br label %__nv_sqrtf.exit22, !dbg !33

345:                                              ; preds = %342
  %346 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %270) #4, !dbg !33
  br label %__nv_sqrtf.exit22, !dbg !33

347:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %350, label %348, !dbg !33

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.f(float %270) #4, !dbg !33
  br label %__nv_sqrtf.exit22, !dbg !33

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.f(float %270) #4, !dbg !33
  br label %__nv_sqrtf.exit22, !dbg !33

__nv_sqrtf.exit22:                                ; preds = %343, %345, %348, %350
  %.0.i20 = phi float [ %344, %343 ], [ %346, %345 ], [ %349, %348 ], [ %351, %350 ], !dbg !33
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i23 = icmp eq i32 %352, 0, !dbg !33
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i26 = icmp eq i32 %353, 0, !dbg !33
  br i1 %.not.i23, label %359, label %354, !dbg !33

354:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %357, label %355, !dbg !33

355:                                              ; preds = %354
  %356 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %271) #4, !dbg !33
  br label %__nv_sqrtf.exit27, !dbg !33

357:                                              ; preds = %354
  %358 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %271) #4, !dbg !33
  br label %__nv_sqrtf.exit27, !dbg !33

359:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %362, label %360, !dbg !33

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.f(float %271) #4, !dbg !33
  br label %__nv_sqrtf.exit27, !dbg !33

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.f(float %271) #4, !dbg !33
  br label %__nv_sqrtf.exit27, !dbg !33

__nv_sqrtf.exit27:                                ; preds = %355, %357, %360, %362
  %.0.i25 = phi float [ %356, %355 ], [ %358, %357 ], [ %361, %360 ], [ %363, %362 ], !dbg !33
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i28 = icmp eq i32 %364, 0, !dbg !33
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i31 = icmp eq i32 %365, 0, !dbg !33
  br i1 %.not.i28, label %371, label %366, !dbg !33

366:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %369, label %367, !dbg !33

367:                                              ; preds = %366
  %368 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %272) #4, !dbg !33
  br label %__nv_sqrtf.exit32, !dbg !33

369:                                              ; preds = %366
  %370 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %272) #4, !dbg !33
  br label %__nv_sqrtf.exit32, !dbg !33

371:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %374, label %372, !dbg !33

372:                                              ; preds = %371
  %373 = tail call float @llvm.nvvm.sqrt.rn.f(float %272) #4, !dbg !33
  br label %__nv_sqrtf.exit32, !dbg !33

374:                                              ; preds = %371
  %375 = tail call float @llvm.nvvm.sqrt.approx.f(float %272) #4, !dbg !33
  br label %__nv_sqrtf.exit32, !dbg !33

__nv_sqrtf.exit32:                                ; preds = %367, %369, %372, %374
  %.0.i30 = phi float [ %368, %367 ], [ %370, %369 ], [ %373, %372 ], [ %375, %374 ], !dbg !33
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i33 = icmp eq i32 %376, 0, !dbg !33
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i36 = icmp eq i32 %377, 0, !dbg !33
  br i1 %.not.i33, label %383, label %378, !dbg !33

378:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %381, label %379, !dbg !33

379:                                              ; preds = %378
  %380 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %273) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

381:                                              ; preds = %378
  %382 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %273) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

383:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %386, label %384, !dbg !33

384:                                              ; preds = %383
  %385 = tail call float @llvm.nvvm.sqrt.rn.f(float %273) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

386:                                              ; preds = %383
  %387 = tail call float @llvm.nvvm.sqrt.approx.f(float %273) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

__nv_sqrtf.exit37:                                ; preds = %379, %381, %384, %386
  %.0.i35 = phi float [ %380, %379 ], [ %382, %381 ], [ %385, %384 ], [ %387, %386 ], !dbg !33
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i38 = icmp eq i32 %388, 0, !dbg !33
  %389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i41 = icmp eq i32 %389, 0, !dbg !33
  br i1 %.not.i38, label %395, label %390, !dbg !33

390:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %393, label %391, !dbg !33

391:                                              ; preds = %390
  %392 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

393:                                              ; preds = %390
  %394 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

395:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %398, label %396, !dbg !33

396:                                              ; preds = %395
  %397 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

398:                                              ; preds = %395
  %399 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

__nv_sqrtf.exit42:                                ; preds = %391, %393, %396, %398
  %.0.i40 = phi float [ %392, %391 ], [ %394, %393 ], [ %397, %396 ], [ %399, %398 ], !dbg !33
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i43 = icmp eq i32 %400, 0, !dbg !33
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i46 = icmp eq i32 %401, 0, !dbg !33
  br i1 %.not.i43, label %407, label %402, !dbg !33

402:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %405, label %403, !dbg !33

403:                                              ; preds = %402
  %404 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %280) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

405:                                              ; preds = %402
  %406 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %280) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

407:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %410, label %408, !dbg !33

408:                                              ; preds = %407
  %409 = tail call float @llvm.nvvm.sqrt.rn.f(float %280) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

410:                                              ; preds = %407
  %411 = tail call float @llvm.nvvm.sqrt.approx.f(float %280) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

__nv_sqrtf.exit47:                                ; preds = %403, %405, %408, %410
  %.0.i45 = phi float [ %404, %403 ], [ %406, %405 ], [ %409, %408 ], [ %411, %410 ], !dbg !33
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i48 = icmp eq i32 %412, 0, !dbg !33
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i51 = icmp eq i32 %413, 0, !dbg !33
  br i1 %.not.i48, label %419, label %414, !dbg !33

414:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %417, label %415, !dbg !33

415:                                              ; preds = %414
  %416 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %281) #4, !dbg !33
  br label %__nv_sqrtf.exit52, !dbg !33

417:                                              ; preds = %414
  %418 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %281) #4, !dbg !33
  br label %__nv_sqrtf.exit52, !dbg !33

419:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %422, label %420, !dbg !33

420:                                              ; preds = %419
  %421 = tail call float @llvm.nvvm.sqrt.rn.f(float %281) #4, !dbg !33
  br label %__nv_sqrtf.exit52, !dbg !33

422:                                              ; preds = %419
  %423 = tail call float @llvm.nvvm.sqrt.approx.f(float %281) #4, !dbg !33
  br label %__nv_sqrtf.exit52, !dbg !33

__nv_sqrtf.exit52:                                ; preds = %415, %417, %420, %422
  %.0.i50 = phi float [ %416, %415 ], [ %418, %417 ], [ %421, %420 ], [ %423, %422 ], !dbg !33
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i53 = icmp eq i32 %424, 0, !dbg !33
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i56 = icmp eq i32 %425, 0, !dbg !33
  br i1 %.not.i53, label %431, label %426, !dbg !33

426:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %429, label %427, !dbg !33

427:                                              ; preds = %426
  %428 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %282) #4, !dbg !33
  br label %__nv_sqrtf.exit57, !dbg !33

429:                                              ; preds = %426
  %430 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %282) #4, !dbg !33
  br label %__nv_sqrtf.exit57, !dbg !33

431:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %434, label %432, !dbg !33

432:                                              ; preds = %431
  %433 = tail call float @llvm.nvvm.sqrt.rn.f(float %282) #4, !dbg !33
  br label %__nv_sqrtf.exit57, !dbg !33

434:                                              ; preds = %431
  %435 = tail call float @llvm.nvvm.sqrt.approx.f(float %282) #4, !dbg !33
  br label %__nv_sqrtf.exit57, !dbg !33

__nv_sqrtf.exit57:                                ; preds = %427, %429, %432, %434
  %.0.i55 = phi float [ %428, %427 ], [ %430, %429 ], [ %433, %432 ], [ %435, %434 ], !dbg !33
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i58 = icmp eq i32 %436, 0, !dbg !33
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i61 = icmp eq i32 %437, 0, !dbg !33
  br i1 %.not.i58, label %443, label %438, !dbg !33

438:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %441, label %439, !dbg !33

439:                                              ; preds = %438
  %440 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %288) #4, !dbg !33
  br label %__nv_sqrtf.exit62, !dbg !33

441:                                              ; preds = %438
  %442 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %288) #4, !dbg !33
  br label %__nv_sqrtf.exit62, !dbg !33

443:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %446, label %444, !dbg !33

444:                                              ; preds = %443
  %445 = tail call float @llvm.nvvm.sqrt.rn.f(float %288) #4, !dbg !33
  br label %__nv_sqrtf.exit62, !dbg !33

446:                                              ; preds = %443
  %447 = tail call float @llvm.nvvm.sqrt.approx.f(float %288) #4, !dbg !33
  br label %__nv_sqrtf.exit62, !dbg !33

__nv_sqrtf.exit62:                                ; preds = %439, %441, %444, %446
  %.0.i60 = phi float [ %440, %439 ], [ %442, %441 ], [ %445, %444 ], [ %447, %446 ], !dbg !33
  %448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i63 = icmp eq i32 %448, 0, !dbg !33
  %449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i66 = icmp eq i32 %449, 0, !dbg !33
  br i1 %.not.i63, label %455, label %450, !dbg !33

450:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %453, label %451, !dbg !33

451:                                              ; preds = %450
  %452 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %289) #4, !dbg !33
  br label %__nv_sqrtf.exit67, !dbg !33

453:                                              ; preds = %450
  %454 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %289) #4, !dbg !33
  br label %__nv_sqrtf.exit67, !dbg !33

455:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %458, label %456, !dbg !33

456:                                              ; preds = %455
  %457 = tail call float @llvm.nvvm.sqrt.rn.f(float %289) #4, !dbg !33
  br label %__nv_sqrtf.exit67, !dbg !33

458:                                              ; preds = %455
  %459 = tail call float @llvm.nvvm.sqrt.approx.f(float %289) #4, !dbg !33
  br label %__nv_sqrtf.exit67, !dbg !33

__nv_sqrtf.exit67:                                ; preds = %451, %453, %456, %458
  %.0.i65 = phi float [ %452, %451 ], [ %454, %453 ], [ %457, %456 ], [ %459, %458 ], !dbg !33
  %460 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i68 = icmp eq i32 %460, 0, !dbg !33
  %461 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i71 = icmp eq i32 %461, 0, !dbg !33
  br i1 %.not.i68, label %467, label %462, !dbg !33

462:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %465, label %463, !dbg !33

463:                                              ; preds = %462
  %464 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %290) #4, !dbg !33
  br label %__nv_sqrtf.exit72, !dbg !33

465:                                              ; preds = %462
  %466 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %290) #4, !dbg !33
  br label %__nv_sqrtf.exit72, !dbg !33

467:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %470, label %468, !dbg !33

468:                                              ; preds = %467
  %469 = tail call float @llvm.nvvm.sqrt.rn.f(float %290) #4, !dbg !33
  br label %__nv_sqrtf.exit72, !dbg !33

470:                                              ; preds = %467
  %471 = tail call float @llvm.nvvm.sqrt.approx.f(float %290) #4, !dbg !33
  br label %__nv_sqrtf.exit72, !dbg !33

__nv_sqrtf.exit72:                                ; preds = %463, %465, %468, %470
  %.0.i70 = phi float [ %464, %463 ], [ %466, %465 ], [ %469, %468 ], [ %471, %470 ], !dbg !33
  %472 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i73 = icmp eq i32 %472, 0, !dbg !33
  %473 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i76 = icmp eq i32 %473, 0, !dbg !33
  br i1 %.not.i73, label %479, label %474, !dbg !33

474:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %477, label %475, !dbg !33

475:                                              ; preds = %474
  %476 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %291) #4, !dbg !33
  br label %__nv_sqrtf.exit77, !dbg !33

477:                                              ; preds = %474
  %478 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %291) #4, !dbg !33
  br label %__nv_sqrtf.exit77, !dbg !33

479:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %482, label %480, !dbg !33

480:                                              ; preds = %479
  %481 = tail call float @llvm.nvvm.sqrt.rn.f(float %291) #4, !dbg !33
  br label %__nv_sqrtf.exit77, !dbg !33

482:                                              ; preds = %479
  %483 = tail call float @llvm.nvvm.sqrt.approx.f(float %291) #4, !dbg !33
  br label %__nv_sqrtf.exit77, !dbg !33

__nv_sqrtf.exit77:                                ; preds = %475, %477, %480, %482
  %.0.i75 = phi float [ %476, %475 ], [ %478, %477 ], [ %481, %480 ], [ %483, %482 ], !dbg !33
  %484 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !34
  %485 = fadd float %.0.i5, 0x3DDB7CDFE0000000, !dbg !34
  %486 = fadd float %.0.i10, 0x3DDB7CDFE0000000, !dbg !34
  %487 = fadd float %.0.i15, 0x3DDB7CDFE0000000, !dbg !34
  %488 = fadd float %.0.i20, 0x3DDB7CDFE0000000, !dbg !34
  %489 = fadd float %.0.i25, 0x3DDB7CDFE0000000, !dbg !34
  %490 = fadd float %.0.i30, 0x3DDB7CDFE0000000, !dbg !34
  %491 = fadd float %.0.i35, 0x3DDB7CDFE0000000, !dbg !34
  %492 = fadd float %.0.i40, 0x3DDB7CDFE0000000, !dbg !34
  %493 = fadd float %.0.i45, 0x3DDB7CDFE0000000, !dbg !34
  %494 = fadd float %.0.i50, 0x3DDB7CDFE0000000, !dbg !34
  %495 = fadd float %.0.i55, 0x3DDB7CDFE0000000, !dbg !34
  %496 = fadd float %.0.i60, 0x3DDB7CDFE0000000, !dbg !34
  %497 = fadd float %.0.i65, 0x3DDB7CDFE0000000, !dbg !34
  %498 = fadd float %.0.i70, 0x3DDB7CDFE0000000, !dbg !34
  %499 = fadd float %.0.i75, 0x3DDB7CDFE0000000, !dbg !34
  %500 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %484) #4, !dbg !35
  %501 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %485) #4, !dbg !35
  %502 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %486) #4, !dbg !35
  %503 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %487) #4, !dbg !35
  %504 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %488) #4, !dbg !35
  %505 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %489) #4, !dbg !35
  %506 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %490) #4, !dbg !35
  %507 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %491) #4, !dbg !35
  %508 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %492) #4, !dbg !35
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %493) #4, !dbg !35
  %510 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %494) #4, !dbg !35
  %511 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %495) #4, !dbg !35
  %512 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %496) #4, !dbg !35
  %513 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %497) #4, !dbg !35
  %514 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %498) #4, !dbg !35
  %515 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float %499) #4, !dbg !35
  %516 = shl i32 %13, 10, !dbg !36
  %517 = shl i32 %14, 10, !dbg !36
  %518 = shl i32 %15, 10, !dbg !36
  %519 = shl i32 %16, 10, !dbg !36
  %520 = add i32 %31, %516, !dbg !37
  %521 = add i32 %31, %517, !dbg !37
  %522 = add i32 %31, %518, !dbg !37
  %523 = add i32 %31, %519, !dbg !37
  %524 = sext i32 %520 to i64, !dbg !38
  %525 = getelementptr float, ptr addrspace(1) %2, i64 %524, !dbg !38
  %526 = sext i32 %521 to i64, !dbg !38
  %527 = getelementptr float, ptr addrspace(1) %2, i64 %526, !dbg !38
  %528 = sext i32 %522 to i64, !dbg !38
  %529 = getelementptr float, ptr addrspace(1) %2, i64 %528, !dbg !38
  %530 = sext i32 %523 to i64, !dbg !38
  %531 = getelementptr float, ptr addrspace(1) %2, i64 %530, !dbg !38
  %532 = bitcast float %500 to i32, !dbg !39
  %533 = bitcast float %501 to i32, !dbg !39
  %534 = bitcast float %502 to i32, !dbg !39
  %535 = bitcast float %503 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %532, i32 %533, i32 %534, i32 %535, ptr addrspace(1) %525, i1 %65) #4, !dbg !39
  %536 = bitcast float %504 to i32, !dbg !39
  %537 = bitcast float %505 to i32, !dbg !39
  %538 = bitcast float %506 to i32, !dbg !39
  %539 = bitcast float %507 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %536, i32 %537, i32 %538, i32 %539, ptr addrspace(1) %527, i1 %66) #4, !dbg !39
  %540 = bitcast float %508 to i32, !dbg !39
  %541 = bitcast float %509 to i32, !dbg !39
  %542 = bitcast float %510 to i32, !dbg !39
  %543 = bitcast float %511 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %540, i32 %541, i32 %542, i32 %543, ptr addrspace(1) %529, i1 %67) #4, !dbg !39
  %544 = bitcast float %512 to i32, !dbg !39
  %545 = bitcast float %513 to i32, !dbg !39
  %546 = bitcast float %514 to i32, !dbg !39
  %547 = bitcast float %515 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %544, i32 %545, i32 %546, i32 %547, ptr addrspace(1) %531, i1 %68) #4, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crgvmqzazod3ucvhtqvt2iswtmt4jiiv4ypddm4vvf3w7whokxtw.py", directory: "inductor_cache/rg")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_13", linkageName: "triton_poi_fused_add_div_sqrt_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 64, scope: !7)
!28 = !DILocation(line: 32, column: 56, scope: !7)
!29 = !DILocation(line: 33, column: 40, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 45, scope: !7)
!33 = !DILocation(line: 34, column: 26, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 35, scope: !7)
!37 = !DILocation(line: 38, column: 30, scope: !7)
!38 = !DILocation(line: 38, column: 25, scope: !7)
!39 = !DILocation(line: 38, column: 46, scope: !7)
!40 = !DILocation(line: 38, column: 4, scope: !7)
