; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 16, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %16 = shl i32 %15, 6, !dbg !16
  %17 = lshr i32 %10, 2, !dbg !17
  %18 = and i32 %17, 31, !dbg !17
  %19 = or disjoint i32 %16, %18, !dbg !18
  %20 = or disjoint i32 %19, 32, !dbg !18
  %21 = icmp slt i32 %19, 2048, !dbg !19
  %22 = icmp slt i32 %20, 2048, !dbg !19
  %23 = srem i32 %19, 512, !dbg !20
  %24 = srem i32 %20, 512, !dbg !20
  %25 = shl i32 %19, 4, !dbg !21
  %26 = shl i32 %20, 4, !dbg !21
  %27 = add i32 %25, %13, !dbg !22
  %28 = add i32 %13, %26, !dbg !22
  %29 = sext i32 %27 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = sext i32 %28 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = and i1 %14, %21, !dbg !24
  %34 = and i1 %22, %14, !dbg !24
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !25
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %34) #4, !dbg !25
  %37 = sdiv i32 %19, 16, !dbg !26
  %38 = sdiv i32 %20, 16, !dbg !26
  %39 = sext i32 %37 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !27
  %41 = sext i32 %38 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #4, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #4, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #4, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #4, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %22) #4, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %22) #4, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %22) #4, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %22) #4, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %21) #4, !dbg !30
  %54 = bitcast i32 %53 to float, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %21) #4, !dbg !30
  %56 = bitcast i32 %55 to float, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %21) #4, !dbg !30
  %58 = bitcast i32 %57 to float, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %21) #4, !dbg !30
  %60 = bitcast i32 %59 to float, !dbg !30
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %22) #4, !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %22) #4, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %22) #4, !dbg !30
  %66 = bitcast i32 %65 to float, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %22) #4, !dbg !30
  %68 = bitcast i32 %67 to float, !dbg !30
  %69 = sext i32 %23 to i64, !dbg !31
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !31
  %71 = sext i32 %24 to i64, !dbg !31
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %21) #4, !dbg !32
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %21) #4, !dbg !32
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %21) #4, !dbg !32
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %21) #4, !dbg !32
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #4, !dbg !32
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #4, !dbg !32
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #4, !dbg !32
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #4, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %69, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !33
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #4, !dbg !34
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #4, !dbg !34
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #4, !dbg !34
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #4, !dbg !34
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %22) #4, !dbg !34
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %22) #4, !dbg !34
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %22) #4, !dbg !34
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %22) #4, !dbg !34
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 2.560000e+02) #4, !dbg !35
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 2.560000e+02) #4, !dbg !35
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 2.560000e+02) #4, !dbg !35
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 2.560000e+02) #4, !dbg !35
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 2.560000e+02) #4, !dbg !35
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 2.560000e+02) #4, !dbg !35
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 2.560000e+02) #4, !dbg !35
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 2.560000e+02) #4, !dbg !35
  %99 = fadd float %94, 0x3EE4F8B580000000, !dbg !36
  %100 = fadd float %98, 0x3EE4F8B580000000, !dbg !36
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i9 = icmp eq i32 %104, 0, !dbg !37
  br i1 %.not.i9, label %107, label %105, !dbg !37

105:                                              ; preds = %__nv_rsqrtf.exit
  %106 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %99), !dbg !37
  br label %__nv_rsqrtf.exit11, !dbg !37

107:                                              ; preds = %__nv_rsqrtf.exit
  %108 = tail call float @llvm.nvvm.rsqrt.approx.f(float %99), !dbg !37
  br label %__nv_rsqrtf.exit11, !dbg !37

__nv_rsqrtf.exit11:                               ; preds = %105, %107
  %.0.i10 = phi float [ %106, %105 ], [ %108, %107 ], !dbg !37
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i21 = icmp eq i32 %112, 0, !dbg !37
  br i1 %.not.i21, label %115, label %113, !dbg !37

113:                                              ; preds = %__nv_rsqrtf.exit11
  %114 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %100), !dbg !37
  br label %__nv_rsqrtf.exit23, !dbg !37

115:                                              ; preds = %__nv_rsqrtf.exit11
  %116 = tail call float @llvm.nvvm.rsqrt.approx.f(float %100), !dbg !37
  br label %__nv_rsqrtf.exit23, !dbg !37

__nv_rsqrtf.exit23:                               ; preds = %113, %115
  %.0.i22 = phi float [ %114, %113 ], [ %116, %115 ], !dbg !37
  %117 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !25
  %118 = bitcast i32 %117 to float, !dbg !25
  %119 = bitcast i32 %50 to float, !dbg !28
  %120 = fsub float %118, %119, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !25
  %122 = bitcast i32 %121 to float, !dbg !25
  %123 = fsub float %122, %119, !dbg !38
  %124 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !25
  %125 = bitcast i32 %124 to float, !dbg !25
  %126 = fsub float %125, %119, !dbg !38
  %127 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !25
  %128 = bitcast i32 %127 to float, !dbg !25
  %129 = fsub float %128, %119, !dbg !38
  %130 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !25
  %131 = bitcast i32 %130 to float, !dbg !25
  %132 = bitcast i32 %46 to float, !dbg !28
  %133 = fsub float %131, %132, !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !25
  %135 = bitcast i32 %134 to float, !dbg !25
  %136 = fsub float %135, %132, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !25
  %138 = bitcast i32 %137 to float, !dbg !25
  %139 = fsub float %138, %132, !dbg !38
  %140 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !25
  %141 = bitcast i32 %140 to float, !dbg !25
  %142 = fsub float %141, %132, !dbg !38
  %143 = bitcast i32 %90 to float, !dbg !34
  %144 = bitcast i32 %86 to float, !dbg !34
  %145 = bitcast i32 %80 to float, !dbg !32
  %146 = bitcast i32 %76 to float, !dbg !32
  %147 = and i32 %11, 60, !dbg !17
  %148 = or disjoint i32 %16, %147, !dbg !18
  %149 = icmp slt i32 %148, 2048, !dbg !19
  %150 = lshr i32 %10, 4, !dbg !12
  %151 = and i32 %150, 7, !dbg !12
  %152 = or disjoint i32 %151, %9, !dbg !13
  %153 = or disjoint i32 %152, 8, !dbg !13
  %154 = icmp slt i32 %153, 16, !dbg !14
  %155 = and i1 %154, %149, !dbg !24
  %156 = icmp slt i32 %152, 16, !dbg !14
  %157 = and i1 %156, %149, !dbg !24
  %158 = fmul float %142, %.0.i10, !dbg !39
  %159 = fmul float %139, %.0.i10, !dbg !39
  %160 = fmul float %136, %.0.i10, !dbg !39
  %161 = fmul float %133, %.0.i10, !dbg !39
  %162 = fmul float %129, %.0.i22, !dbg !39
  %163 = fmul float %126, %.0.i22, !dbg !39
  %164 = fmul float %123, %.0.i22, !dbg !39
  %165 = fmul float %120, %.0.i22, !dbg !39
  %166 = fmul float %158, %146, !dbg !40
  %167 = fmul float %159, %146, !dbg !40
  %168 = fmul float %160, %146, !dbg !40
  %169 = fmul float %161, %146, !dbg !40
  %170 = fmul float %162, %145, !dbg !40
  %171 = fmul float %163, %145, !dbg !40
  %172 = fmul float %164, %145, !dbg !40
  %173 = fmul float %165, %145, !dbg !40
  %174 = fadd float %166, %144, !dbg !41
  %175 = fadd float %167, %144, !dbg !41
  %176 = fadd float %168, %144, !dbg !41
  %177 = fadd float %169, %144, !dbg !41
  %178 = fadd float %170, %143, !dbg !41
  %179 = fadd float %171, %143, !dbg !41
  %180 = fadd float %172, %143, !dbg !41
  %181 = fadd float %173, %143, !dbg !41
  %182 = shl i32 %152, 11, !dbg !42
  %183 = shl i32 %153, 11, !dbg !42
  %184 = add i32 %148, %182, !dbg !43
  %185 = add i32 %148, %183, !dbg !43
  %186 = sext i32 %184 to i64, !dbg !44
  %187 = getelementptr float, ptr addrspace(1) %5, i64 %186, !dbg !44
  %188 = sext i32 %185 to i64, !dbg !44
  %189 = getelementptr float, ptr addrspace(1) %5, i64 %188, !dbg !44
  %190 = shl i32 %10, 8, !dbg !45
  %191 = and i32 %190, 768, !dbg !45
  %192 = or disjoint i32 %191, %18, !dbg !45
  %193 = and i32 %11, 508, !dbg !45
  %194 = lshr exact i32 %191, 6, !dbg !45
  %195 = add nuw nsw i32 %194, %192, !dbg !45
  %196 = zext nneg i32 %195 to i64, !dbg !45
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %196, !dbg !45
  %198 = bitcast float %174 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #4, !dbg !45
  %199 = or disjoint i32 %192, 64, !dbg !45
  %200 = lshr i32 %199, 6, !dbg !45
  %201 = add nuw nsw i32 %200, %199, !dbg !45
  %202 = zext nneg i32 %201 to i64, !dbg !45
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %202, !dbg !45
  %204 = bitcast float %175 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #4, !dbg !45
  %205 = or disjoint i32 %192, 128, !dbg !45
  %206 = lshr i32 %205, 6, !dbg !45
  %207 = add nuw nsw i32 %206, %205, !dbg !45
  %208 = zext nneg i32 %207 to i64, !dbg !45
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %208, !dbg !45
  %210 = bitcast float %176 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #4, !dbg !45
  %211 = or disjoint i32 %192, 192, !dbg !45
  %212 = lshr i32 %211, 6, !dbg !45
  %213 = add nuw nsw i32 %212, %211, !dbg !45
  %214 = zext nneg i32 %213 to i64, !dbg !45
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %214, !dbg !45
  %216 = bitcast float %177 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #4, !dbg !45
  %217 = or disjoint i32 %192, 32, !dbg !45
  %218 = add nuw nsw i32 %217, %194, !dbg !45
  %219 = zext nneg i32 %218 to i64, !dbg !45
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %219, !dbg !45
  %221 = bitcast float %178 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #4, !dbg !45
  %222 = or disjoint i32 %192, 96, !dbg !45
  %223 = lshr i32 %222, 6, !dbg !45
  %224 = add nuw nsw i32 %223, %222, !dbg !45
  %225 = zext nneg i32 %224 to i64, !dbg !45
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %225, !dbg !45
  %227 = bitcast float %179 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !45
  %228 = or disjoint i32 %192, 160, !dbg !45
  %229 = lshr i32 %228, 6, !dbg !45
  %230 = add nuw nsw i32 %229, %228, !dbg !45
  %231 = zext nneg i32 %230 to i64, !dbg !45
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %231, !dbg !45
  %233 = bitcast float %180 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !45
  %234 = or disjoint i32 %192, 224, !dbg !45
  %235 = lshr i32 %234, 6, !dbg !45
  %236 = add nuw nsw i32 %235, %234, !dbg !45
  %237 = zext nneg i32 %236 to i64, !dbg !45
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %237, !dbg !45
  %239 = bitcast float %181 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %240 = lshr i32 %193, 6, !dbg !45
  %241 = add nuw nsw i32 %240, %193, !dbg !45
  %242 = zext nneg i32 %241 to i64, !dbg !45
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %242, !dbg !45
  %244 = load i32, ptr addrspace(3) %243, align 4, !dbg !45
  %245 = or disjoint i32 %193, 1, !dbg !45
  %246 = add nuw nsw i32 %245, %240, !dbg !45
  %247 = zext nneg i32 %246 to i64, !dbg !45
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %247, !dbg !45
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !45
  %250 = or disjoint i32 %193, 2, !dbg !45
  %251 = add nuw nsw i32 %250, %240, !dbg !45
  %252 = zext nneg i32 %251 to i64, !dbg !45
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %252, !dbg !45
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !45
  %255 = or disjoint i32 %193, 3, !dbg !45
  %256 = add nuw nsw i32 %255, %240, !dbg !45
  %257 = zext nneg i32 %256 to i64, !dbg !45
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %257, !dbg !45
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !45
  %260 = or disjoint i32 %193, 512, !dbg !45
  %261 = lshr i32 %260, 6, !dbg !45
  %262 = add nuw nsw i32 %261, %260, !dbg !45
  %263 = zext nneg i32 %262 to i64, !dbg !45
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %263, !dbg !45
  %265 = load i32, ptr addrspace(3) %264, align 4, !dbg !45
  %266 = or disjoint i32 %193, 513, !dbg !45
  %267 = lshr i32 %266, 6, !dbg !45
  %268 = add nuw nsw i32 %267, %266, !dbg !45
  %269 = zext nneg i32 %268 to i64, !dbg !45
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %269, !dbg !45
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !45
  %272 = or disjoint i32 %193, 514, !dbg !45
  %273 = lshr i32 %272, 6, !dbg !45
  %274 = add nuw nsw i32 %273, %272, !dbg !45
  %275 = zext nneg i32 %274 to i64, !dbg !45
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %275, !dbg !45
  %277 = load i32, ptr addrspace(3) %276, align 4, !dbg !45
  %278 = or disjoint i32 %193, 515, !dbg !45
  %279 = lshr i32 %278, 6, !dbg !45
  %280 = add nuw nsw i32 %279, %278, !dbg !45
  %281 = zext nneg i32 %280 to i64, !dbg !45
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %281, !dbg !45
  %283 = load i32, ptr addrspace(3) %282, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %249, i32 %254, i32 %259, ptr addrspace(1) %187, i1 %157) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %265, i32 %271, i32 %277, i32 %283, ptr addrspace(1) %189, i1 %155) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czuwiecqcgwoxntkrxikx2iquhuyvzp66ikodxf5qw33jd3y6a4c.py", directory: "inductor_cache/zu")
!4 = !{ptr @triton_poi_fused_clone_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_27", linkageName: "triton_poi_fused_clone_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 38, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 51, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 41, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 41, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 27, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 20, scope: !7)
!42 = !DILocation(line: 45, column: 35, scope: !7)
!43 = !DILocation(line: 45, column: 30, scope: !7)
!44 = !DILocation(line: 45, column: 25, scope: !7)
!45 = !DILocation(line: 45, column: 47, scope: !7)
!46 = !DILocation(line: 45, column: 4, scope: !7)
