; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_native_layer_norm_silu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = shl i32 %11, 2, !dbg !15
  %14 = or disjoint i32 %13, 4, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %12) #1, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #1, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #1, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = or disjoint i32 %13, 1, !dbg !20
  %30 = or disjoint i32 %13, 5, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %12) #1, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %12) #1, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %12) #1, !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #1, !dbg !24
  %44 = bitcast i32 %43 to float, !dbg !24
  %45 = or disjoint i32 %13, 2, !dbg !25
  %46 = or disjoint i32 %13, 6, !dbg !25
  %47 = sext i32 %45 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %46 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %12) #1, !dbg !27
  %52 = bitcast i32 %51 to float, !dbg !27
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %12) #1, !dbg !27
  %54 = bitcast i32 %53 to float, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %12) #1, !dbg !29
  %58 = bitcast i32 %57 to float, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %12) #1, !dbg !29
  %60 = bitcast i32 %59 to float, !dbg !29
  %61 = or disjoint i32 %13, 3, !dbg !30
  %62 = or disjoint i32 %13, 7, !dbg !30
  %63 = sext i32 %61 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !31
  %65 = sext i32 %62 to i64, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %12) #1, !dbg !32
  %68 = bitcast i32 %67 to float, !dbg !32
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %12) #1, !dbg !32
  %70 = bitcast i32 %69 to float, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !33
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !33
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %12) #1, !dbg !34
  %74 = bitcast i32 %73 to float, !dbg !34
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %12) #1, !dbg !34
  %76 = bitcast i32 %75 to float, !dbg !34
  %77 = fsub float 0.000000e+00, %20, !dbg !35
  %78 = fsub float 0.000000e+00, %22, !dbg !35
  %79 = fmul float %77, 0x3FF7154760000000, !dbg !39
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #1, !dbg !39
  %81 = fmul float %78, 0x3FF7154760000000, !dbg !39
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #1, !dbg !39
  %83 = fadd float %80, 1.000000e+00, !dbg !40
  %84 = fadd float %82, 1.000000e+00, !dbg !40
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %83) #1, !dbg !41
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %84) #1, !dbg !41
  %87 = fmul float %85, %20, !dbg !42
  %88 = fmul float %86, %22, !dbg !42
  %89 = fmul float %87, %26, !dbg !43
  %90 = fmul float %88, %28, !dbg !43
  %91 = fsub float 0.000000e+00, %36, !dbg !44
  %92 = fsub float 0.000000e+00, %38, !dbg !44
  %93 = fmul float %91, 0x3FF7154760000000, !dbg !46
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %93) #1, !dbg !46
  %95 = fmul float %92, 0x3FF7154760000000, !dbg !46
  %96 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %95) #1, !dbg !46
  %97 = fadd float %94, 1.000000e+00, !dbg !47
  %98 = fadd float %96, 1.000000e+00, !dbg !47
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %97) #1, !dbg !48
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %98) #1, !dbg !48
  %101 = fmul float %99, %36, !dbg !49
  %102 = fmul float %100, %38, !dbg !49
  %103 = fmul float %101, %42, !dbg !50
  %104 = fmul float %102, %44, !dbg !50
  %105 = fadd float %89, %103, !dbg !51
  %106 = fadd float %90, %104, !dbg !51
  %107 = fsub float 0.000000e+00, %52, !dbg !52
  %108 = fsub float 0.000000e+00, %54, !dbg !52
  %109 = fmul float %107, 0x3FF7154760000000, !dbg !54
  %110 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %109) #1, !dbg !54
  %111 = fmul float %108, 0x3FF7154760000000, !dbg !54
  %112 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %111) #1, !dbg !54
  %113 = fadd float %110, 1.000000e+00, !dbg !55
  %114 = fadd float %112, 1.000000e+00, !dbg !55
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %113) #1, !dbg !56
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %114) #1, !dbg !56
  %117 = fmul float %115, %52, !dbg !57
  %118 = fmul float %116, %54, !dbg !57
  %119 = fmul float %117, %58, !dbg !58
  %120 = fmul float %118, %60, !dbg !58
  %121 = fadd float %105, %119, !dbg !59
  %122 = fadd float %106, %120, !dbg !59
  %123 = fsub float 0.000000e+00, %68, !dbg !60
  %124 = fsub float 0.000000e+00, %70, !dbg !60
  %125 = fmul float %123, 0x3FF7154760000000, !dbg !62
  %126 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %125) #1, !dbg !62
  %127 = fmul float %124, 0x3FF7154760000000, !dbg !62
  %128 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %127) #1, !dbg !62
  %129 = fadd float %126, 1.000000e+00, !dbg !63
  %130 = fadd float %128, 1.000000e+00, !dbg !63
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %129) #1, !dbg !64
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %130) #1, !dbg !64
  %133 = fmul float %131, %68, !dbg !65
  %134 = fmul float %132, %70, !dbg !65
  %135 = fmul float %133, %74, !dbg !66
  %136 = fmul float %134, %76, !dbg !66
  %137 = fadd float %121, %135, !dbg !67
  %138 = fadd float %122, %136, !dbg !67
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float 4.000000e+00) #1, !dbg !68
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 4.000000e+00) #1, !dbg !68
  %141 = fsub float %89, %139, !dbg !69
  %142 = fsub float %90, %140, !dbg !69
  %143 = fmul float %141, %141, !dbg !70
  %144 = fmul float %142, %142, !dbg !70
  %145 = fsub float %103, %139, !dbg !71
  %146 = fsub float %104, %140, !dbg !71
  %147 = fmul float %145, %145, !dbg !72
  %148 = fmul float %146, %146, !dbg !72
  %149 = fadd float %143, %147, !dbg !73
  %150 = fadd float %144, %148, !dbg !73
  %151 = fsub float %119, %139, !dbg !74
  %152 = fsub float %120, %140, !dbg !74
  %153 = fmul float %151, %151, !dbg !75
  %154 = fmul float %152, %152, !dbg !75
  %155 = fadd float %153, %149, !dbg !76
  %156 = fadd float %154, %150, !dbg !76
  %157 = fsub float %135, %139, !dbg !77
  %158 = fsub float %136, %140, !dbg !77
  %159 = fmul float %157, %157, !dbg !78
  %160 = fmul float %158, %158, !dbg !78
  %161 = fadd float %159, %155, !dbg !79
  %162 = fadd float %160, %156, !dbg !79
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float 4.000000e+00) #1, !dbg !80
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 4.000000e+00) #1, !dbg !80
  %165 = sext i32 %11 to i64, !dbg !81
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !81
  %167 = bitcast float %139 to i32, !dbg !82
  %168 = bitcast float %140 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %167, i32 %168, ptr addrspace(1) %166, i1 %12) #1, !dbg !82
  %169 = getelementptr float, ptr addrspace(1) %3, i64 %165, !dbg !83
  %170 = bitcast float %163 to i32, !dbg !84
  %171 = bitcast float %164 to i32, !dbg !84
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %171, ptr addrspace(1) %169, i1 %12) #1, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czyr6wy7khrpybwmodnoaq3atj4uyeytprfavxxjllfxxuwvt5am.py", directory: "inductor_cache/zy")
!4 = !{ptr @triton_poi_fused_mul_native_layer_norm_silu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_native_layer_norm_silu_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_native_layer_norm_silu_0", linkageName: "triton_poi_fused_mul_native_layer_norm_silu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 35, scope: !7)
!26 = !DILocation(line: 29, column: 31, scope: !7)
!27 = !DILocation(line: 29, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 47, column: 30, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = !DILocation(line: 33, column: 22, scope: !7)
!39 = !DILocation(line: 47, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 47, column: 20, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 47, column: 16, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 34, column: 18, scope: !7)
!43 = !DILocation(line: 35, column: 18, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !36, inlinedAt: !45)
!45 = !DILocation(line: 36, column: 22, scope: !7)
!46 = !DILocation(line: 47, column: 29, scope: !36, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 20, scope: !36, inlinedAt: !45)
!48 = !DILocation(line: 47, column: 16, scope: !36, inlinedAt: !45)
!49 = !DILocation(line: 37, column: 18, scope: !7)
!50 = !DILocation(line: 38, column: 18, scope: !7)
!51 = !DILocation(line: 39, column: 19, scope: !7)
!52 = !DILocation(line: 47, column: 30, scope: !36, inlinedAt: !53)
!53 = !DILocation(line: 40, column: 23, scope: !7)
!54 = !DILocation(line: 47, column: 29, scope: !36, inlinedAt: !53)
!55 = !DILocation(line: 47, column: 20, scope: !36, inlinedAt: !53)
!56 = !DILocation(line: 47, column: 16, scope: !36, inlinedAt: !53)
!57 = !DILocation(line: 41, column: 20, scope: !7)
!58 = !DILocation(line: 42, column: 20, scope: !7)
!59 = !DILocation(line: 43, column: 20, scope: !7)
!60 = !DILocation(line: 47, column: 30, scope: !36, inlinedAt: !61)
!61 = !DILocation(line: 44, column: 23, scope: !7)
!62 = !DILocation(line: 47, column: 29, scope: !36, inlinedAt: !61)
!63 = !DILocation(line: 47, column: 20, scope: !36, inlinedAt: !61)
!64 = !DILocation(line: 47, column: 16, scope: !36, inlinedAt: !61)
!65 = !DILocation(line: 45, column: 20, scope: !7)
!66 = !DILocation(line: 46, column: 20, scope: !7)
!67 = !DILocation(line: 47, column: 20, scope: !7)
!68 = !DILocation(line: 49, column: 20, scope: !7)
!69 = !DILocation(line: 50, column: 19, scope: !7)
!70 = !DILocation(line: 51, column: 20, scope: !7)
!71 = !DILocation(line: 52, column: 19, scope: !7)
!72 = !DILocation(line: 53, column: 20, scope: !7)
!73 = !DILocation(line: 54, column: 20, scope: !7)
!74 = !DILocation(line: 55, column: 20, scope: !7)
!75 = !DILocation(line: 56, column: 20, scope: !7)
!76 = !DILocation(line: 57, column: 20, scope: !7)
!77 = !DILocation(line: 58, column: 20, scope: !7)
!78 = !DILocation(line: 59, column: 20, scope: !7)
!79 = !DILocation(line: 60, column: 20, scope: !7)
!80 = !DILocation(line: 61, column: 20, scope: !7)
!81 = !DILocation(line: 62, column: 25, scope: !7)
!82 = !DILocation(line: 62, column: 37, scope: !7)
!83 = !DILocation(line: 63, column: 25, scope: !7)
!84 = !DILocation(line: 63, column: 37, scope: !7)
!85 = !DILocation(line: 63, column: 4, scope: !7)
