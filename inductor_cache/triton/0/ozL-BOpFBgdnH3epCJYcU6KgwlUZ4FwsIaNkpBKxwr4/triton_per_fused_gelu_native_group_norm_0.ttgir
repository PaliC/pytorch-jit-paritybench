#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":19:0)
#loc1 = loc(unknown)
#loc16 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":39:24)
#loc23 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":47:26)
#loc45 = loc(callsite(#loc1 at #loc16))
#loc48 = loc(callsite(#loc1 at #loc23))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_gelu_native_group_norm_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":19:0), %arg6: i32 loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<0.707106769> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<5.000000e-01> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %6 = arith.divsi %4, %cst_0 : tensor<1x64xi32, #blocked1> loc(#loc5)
    %7 = arith.muli %0, %c64_i32 : i32 loc(#loc6)
    %8 = tt.splat %7 : i32 -> tensor<1x64xi32, #blocked> loc(#loc7)
    %9 = arith.addi %5, %8 : tensor<1x64xi32, #blocked> loc(#loc7)
    %10 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.addptr %10, %9 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc8)
    %12 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc9)
    %13 = tt.load %11, %12, %cst_1 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %14 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %15 = tt.addptr %14, %6 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc10)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %17 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %18 = tt.addptr %17, %6 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc12)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %20 = arith.select %12, %13, %cst_1 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc14)
    %21 = "tt.reduce"(%20) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc16)), %arg9: f32 loc(callsite(#loc1 at #loc16))):
      %59 = arith.addf %arg8, %arg9 : f32 loc(#loc49)
      tt.reduce.return %59 : f32 loc(#loc44)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc44)
    %22 = triton_gpu.convert_layout %21 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc18)
    %23 = tt.expand_dims %22 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc19)
    %24 = tt.expand_dims %21 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc19)
    %25 = arith.divf %23, %cst_7 : tensor<1x1xf32, #blocked1> loc(#loc18)
    %26 = arith.divf %24, %cst : tensor<1x1xf32, #blocked> loc(#loc18)
    %27 = tt.broadcast %26 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc20)
    %28 = arith.subf %13, %27 : tensor<1x64xf32, #blocked> loc(#loc20)
    %29 = arith.mulf %28, %28 : tensor<1x64xf32, #blocked> loc(#loc21)
    %30 = arith.select %12, %29, %cst_1 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc22)
    %31 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc23)), %arg9: f32 loc(callsite(#loc1 at #loc23))):
      %59 = arith.addf %arg8, %arg9 : f32 loc(#loc50)
      tt.reduce.return %59 : f32 loc(#loc47)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc47)
    %32 = triton_gpu.convert_layout %31 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc24)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc25)
    %34 = tt.expand_dims %31 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc25)
    %35 = arith.divf %33, %cst_7 : tensor<1x1xf32, #blocked1> loc(#loc26)
    %36 = arith.divf %34, %cst : tensor<1x1xf32, #blocked> loc(#loc26)
    %37 = arith.addf %35, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc27)
    %38 = arith.addf %36, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc27)
    %39 = tt.extern_elementwise %37 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc24)
    %40 = tt.extern_elementwise %38 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc24)
    %41 = tt.broadcast %40 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc28)
    %42 = arith.mulf %28, %41 : tensor<1x64xf32, #blocked> loc(#loc28)
    %43 = triton_gpu.convert_layout %42 {fastmath = #arith.fastmath<none>} : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc28)
    %44 = arith.mulf %43, %16 : tensor<1x64xf32, #blocked1> loc(#loc29)
    %45 = arith.addf %44, %19 : tensor<1x64xf32, #blocked1> loc(#loc30)
    %46 = arith.mulf %45, %cst_4 : tensor<1x64xf32, #blocked1> loc(#loc31)
    %47 = arith.mulf %45, %cst_3 : tensor<1x64xf32, #blocked1> loc(#loc32)
    %48 = tt.extern_elementwise %47 {libname = "", libpath = "", pure = true, symbol = "__nv_erff"} : (tensor<1x64xf32, #blocked1>) -> tensor<1x64xf32, #blocked1> loc(#loc33)
    %49 = arith.addf %48, %cst_2 : tensor<1x64xf32, #blocked1> loc(#loc34)
    %50 = arith.mulf %46, %49 : tensor<1x64xf32, #blocked1> loc(#loc35)
    gpu.barrier loc(#loc36)
    %51 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc37)
    %52 = tt.splat %51 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %53 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc38)
    tt.store %52, %39, %53 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    %54 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc39)
    %55 = tt.addptr %54, %9 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc39)
    %56 = triton_gpu.convert_layout %50 : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc40)
    tt.store %55, %56, %12 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc40)
    %57 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc41)
    %58 = tt.splat %57 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    tt.store %58, %25, %53 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":23:28)
#loc3 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":25:21)
#loc4 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":26:34)
#loc5 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":31:19)
#loc6 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":32:38)
#loc7 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":32:35)
#loc8 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":32:30)
#loc9 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":32:43)
#loc10 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":33:31)
#loc11 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":33:36)
#loc12 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":34:31)
#loc13 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":34:36)
#loc14 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":38:33)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc18 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":42:19)
#loc19 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":39:27)
#loc20 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":43:19)
#loc21 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":44:20)
#loc22 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":46:35)
#loc24 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":52:28)
#loc25 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":47:29)
#loc26 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":49:20)
#loc27 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":51:20)
#loc28 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":54:20)
#loc29 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":55:20)
#loc30 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":56:20)
#loc31 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":58:20)
#loc32 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":60:20)
#loc33 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":61:26)
#loc34 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":63:20)
#loc35 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":64:20)
#loc36 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":65:4)
#loc37 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":66:28)
#loc38 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":66:40)
#loc39 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":67:28)
#loc40 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":67:48)
#loc41 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":68:25)
#loc42 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":68:37)
#loc43 = loc("inductor_cache/7l/c7ltntlhgfybz6ztoxd3zqlgtlg3tmz44txmls6mivcm6xe7xhii.py":68:4)
#loc44 = loc(callsite(#loc15 at #loc16))
#loc46 = loc(callsite(#loc17 at #loc15))
#loc47 = loc(callsite(#loc15 at #loc23))
#loc49 = loc(callsite(#loc46 at #loc16))
#loc50 = loc(callsite(#loc46 at #loc23))
