; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_linalg_vector_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = shl i32 %7, 2, !dbg !11
  %11 = and i32 %10, 252, !dbg !11
  %12 = shl i32 %6, 8, !dbg !12
  %13 = or disjoint i32 %12, %11, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #5, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %21 = bitcast i32 %17 to float, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = bitcast i32 %20 to float, !dbg !15
  %25 = fmul float %21, %21, !dbg !16
  %26 = fmul float %22, %22, !dbg !16
  %27 = fmul float %23, %23, !dbg !16
  %28 = fmul float %24, %24, !dbg !16
  %29 = fadd float %25, %26, !dbg !17
  %30 = fadd float %27, %29, !dbg !17
  %31 = fadd float %28, %30, !dbg !17
  %32 = bitcast float %31 to i32, !dbg !22
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !22
  %34 = bitcast i32 %33 to float, !dbg !22
  %35 = fadd float %31, %34, !dbg !17
  %36 = bitcast float %35 to i32, !dbg !22
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 8, i32 31), !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = fadd float %35, %38, !dbg !17
  %40 = bitcast float %39 to i32, !dbg !22
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !22
  %42 = bitcast i32 %41 to float, !dbg !22
  %43 = fadd float %39, %42, !dbg !17
  %44 = bitcast float %43 to i32, !dbg !22
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 2, i32 31), !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = fadd float %43, %46, !dbg !17
  %48 = bitcast float %47 to i32, !dbg !22
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = fadd float %47, %50, !dbg !17
  %52 = icmp eq i32 %8, 0, !dbg !22
  %53 = and i32 %9, 1, !dbg !22
  %54 = zext nneg i32 %53 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i64 %54, !dbg !22
  %56 = bitcast float %51 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 %52) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %57 = icmp slt i32 %7, 2, !dbg !22
  %58 = sext i32 %7 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i64 %58, !dbg !22
  %60 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %59, i1 %57) #5, !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !22
  %63 = bitcast i32 %62 to float, !dbg !22
  %64 = fadd float %61, %63, !dbg !17
  %65 = and i32 %7, 1, !dbg !22
  %66 = icmp eq i32 %65, 0, !dbg !22
  %67 = and i1 %57, %66, !dbg !22
  %68 = bitcast float %64 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %68, i1 %67) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %69 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %70 = fadd float %69, 0.000000e+00, !dbg !23
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i = icmp eq i32 %71, 0, !dbg !27
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i = icmp eq i32 %72, 0, !dbg !27
  br i1 %.not.i, label %78, label %73, !dbg !27

73:                                               ; preds = %5
  br i1 %.not1.i, label %76, label %74, !dbg !27

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

78:                                               ; preds = %5
  br i1 %.not1.i, label %81, label %79, !dbg !27

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !27
  %83 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !28
  %84 = fcmp uno float %.0.i, 0.000000e+00, !dbg !30
  %85 = or i1 %83, %84, !dbg !31
  %86 = select i1 %85, float %.0.i, float 0x3D71979980000000, !dbg !32
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %21, float %86) #5, !dbg !33
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %22, float %86) #5, !dbg !33
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %23, float %86) #5, !dbg !33
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %24, float %86) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %91 = sext i32 %6 to i64, !dbg !35
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !35
  %urem = and i32 %7, 63, !dbg !36
  %93 = icmp eq i32 %urem, 0, !dbg !36
  %94 = bitcast float %.0.i to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %92, i1 %93) #5, !dbg !36
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !37
  %96 = bitcast float %87 to i32, !dbg !38
  %97 = bitcast float %88 to i32, !dbg !38
  %98 = bitcast float %89 to i32, !dbg !38
  %99 = bitcast float %90 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %96, i32 %97, i32 %98, i32 %99, ptr addrspace(1) %95, i1 true) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "camyubodxolk2cggubvfmvjyjr2z5gyqj2g2wik53kbcomkoureb.py", directory: "inductor_cache/am")
!4 = !{ptr @triton_per_fused_div_linalg_vector_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_linalg_vector_norm_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_linalg_vector_norm_1", linkageName: "triton_per_fused_div_linalg_vector_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 39, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 44, scope: !7)
!16 = !DILocation(line: 33, column: 18, scope: !7)
!17 = !DILocation(line: 256, column: 15, scope: !18, inlinedAt: !21)
!18 = distinct !DILexicalBlockFile(scope: !20, file: !19, discriminator: 0)
!19 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!20 = distinct !DILexicalBlockFile(scope: !7, file: !19, discriminator: 0)
!21 = !DILocation(line: 35, column: 57, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !21)
!23 = !DILocation(line: 73, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 35, column: 44, scope: !7)
!27 = !DILocation(line: 36, column: 26, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !29)
!29 = !DILocation(line: 38, column: 40, scope: !7)
!30 = !DILocation(line: 120, column: 21, scope: !24, inlinedAt: !29)
!31 = !DILocation(line: 120, column: 16, scope: !24, inlinedAt: !29)
!32 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !29)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 42, column: 45, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
