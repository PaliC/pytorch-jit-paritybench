; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_relu_threshold_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !11
  %8 = shl i32 %7, 10, !dbg !12
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %10 = and i32 %9, 127, !dbg !13
  %11 = or disjoint i32 %8, %10, !dbg !14
  %12 = or disjoint i32 %11, 128, !dbg !14
  %13 = or disjoint i32 %11, 256, !dbg !14
  %14 = or disjoint i32 %11, 384, !dbg !14
  %15 = or disjoint i32 %11, 512, !dbg !14
  %16 = or disjoint i32 %11, 640, !dbg !14
  %17 = or disjoint i32 %11, 768, !dbg !14
  %18 = or disjoint i32 %11, 896, !dbg !14
  %19 = icmp slt i32 %11, 3721, !dbg !15
  %20 = icmp slt i32 %12, 3721, !dbg !15
  %21 = icmp slt i32 %13, 3721, !dbg !15
  %22 = icmp slt i32 %14, 3721, !dbg !15
  %23 = icmp slt i32 %15, 3721, !dbg !15
  %24 = icmp slt i32 %16, 3721, !dbg !15
  %25 = icmp slt i32 %17, 3721, !dbg !15
  %26 = icmp slt i32 %18, 3721, !dbg !15
  %.frozen = freeze i32 %6, !dbg !16
  %27 = sdiv i32 %.frozen, 4096, !dbg !16
  %28 = mul i32 %27, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %28, !dbg !17
  %29 = shl i32 %11, 12, !dbg !18
  %30 = shl i32 %12, 12, !dbg !18
  %31 = shl i32 %13, 12, !dbg !18
  %32 = shl i32 %14, 12, !dbg !18
  %33 = shl i32 %15, 12, !dbg !18
  %34 = shl i32 %16, 12, !dbg !18
  %35 = shl i32 %17, 12, !dbg !18
  %36 = shl i32 %18, 12, !dbg !18
  %37 = mul i32 %27, 15241216, !dbg !19
  %38 = add i32 %37, %.decomposed, !dbg !20
  %39 = add i32 %38, %29, !dbg !21
  %40 = add i32 %38, %30, !dbg !21
  %41 = add i32 %38, %31, !dbg !21
  %42 = add i32 %38, %32, !dbg !21
  %43 = add i32 %38, %33, !dbg !21
  %44 = add i32 %38, %34, !dbg !21
  %45 = add i32 %38, %35, !dbg !21
  %46 = add i32 %38, %36, !dbg !21
  %47 = sext i32 %39 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = sext i32 %40 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = sext i32 %41 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !22
  %53 = sext i32 %42 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = sext i32 %43 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !22
  %57 = sext i32 %44 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !22
  %59 = sext i32 %45 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !22
  %61 = sext i32 %46 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %19) #1, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %20) #1, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #1, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %22) #1, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %23) #1, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %24) #1, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %25) #1, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %26) #1, !dbg !23
  %71 = insertelement <8 x i32> poison, i32 %70, i64 0, !dbg !23
  %72 = insertelement <8 x i32> %71, i32 %69, i64 1, !dbg !23
  %73 = insertelement <8 x i32> %72, i32 %68, i64 2, !dbg !23
  %74 = insertelement <8 x i32> %73, i32 %67, i64 3, !dbg !23
  %75 = insertelement <8 x i32> %74, i32 %66, i64 4, !dbg !23
  %76 = insertelement <8 x i32> %75, i32 %65, i64 5, !dbg !23
  %77 = insertelement <8 x i32> %76, i32 %64, i64 6, !dbg !23
  %78 = insertelement <8 x i32> %77, i32 %63, i64 7, !dbg !23
  %79 = bitcast <8 x i32> %78 to <8 x float>, !dbg !23
  %80 = fcmp olt <8 x float> %79, zeroinitializer, !dbg !24
  %81 = select <8 x i1> %80, <8 x float> zeroinitializer, <8 x float> %79, !dbg !28
  %82 = fcmp ole <8 x float> %81, zeroinitializer, !dbg !29
  %83 = mul i32 %6, 3721, !dbg !30
  %84 = add i32 %11, %83, !dbg !31
  %85 = add i32 %83, %12, !dbg !31
  %86 = add i32 %83, %13, !dbg !31
  %87 = add i32 %83, %14, !dbg !31
  %88 = add i32 %83, %15, !dbg !31
  %89 = add i32 %83, %16, !dbg !31
  %90 = add i32 %83, %17, !dbg !31
  %91 = add i32 %83, %18, !dbg !31
  %92 = sext i32 %84 to i64, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !32
  %94 = sext i32 %85 to i64, !dbg !32
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !32
  %96 = sext i32 %86 to i64, !dbg !32
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !32
  %98 = sext i32 %87 to i64, !dbg !32
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !32
  %100 = sext i32 %88 to i64, !dbg !32
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !32
  %102 = sext i32 %89 to i64, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !32
  %104 = sext i32 %90 to i64, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !32
  %106 = sext i32 %91 to i64, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !32
  %bc = bitcast <8 x float> %81 to <8 x i32>, !dbg !33
  %108 = extractelement <8 x i32> %bc, i64 7, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %93, i1 %19) #1, !dbg !33
  %bc1 = bitcast <8 x float> %81 to <8 x i32>, !dbg !33
  %109 = extractelement <8 x i32> %bc1, i64 6, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %95, i1 %20) #1, !dbg !33
  %bc2 = bitcast <8 x float> %81 to <8 x i32>, !dbg !33
  %110 = extractelement <8 x i32> %bc2, i64 5, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %97, i1 %21) #1, !dbg !33
  %bc3 = bitcast <8 x float> %81 to <8 x i32>, !dbg !33
  %111 = extractelement <8 x i32> %bc3, i64 4, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %99, i1 %22) #1, !dbg !33
  %bc4 = bitcast <8 x float> %81 to <8 x i32>, !dbg !33
  %112 = extractelement <8 x i32> %bc4, i64 3, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %101, i1 %23) #1, !dbg !33
  %bc5 = bitcast <8 x float> %81 to <8 x i32>, !dbg !33
  %113 = extractelement <8 x i32> %bc5, i64 2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %103, i1 %24) #1, !dbg !33
  %bc6 = bitcast <8 x float> %81 to <8 x i32>, !dbg !33
  %114 = extractelement <8 x i32> %bc6, i64 1, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %105, i1 %25) #1, !dbg !33
  %bc7 = bitcast <8 x float> %81 to <8 x i32>, !dbg !33
  %115 = extractelement <8 x i32> %bc7, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %107, i1 %26) #1, !dbg !33
  %116 = getelementptr i1, ptr addrspace(1) %2, i64 %47, !dbg !34
  %117 = getelementptr i1, ptr addrspace(1) %2, i64 %49, !dbg !34
  %118 = getelementptr i1, ptr addrspace(1) %2, i64 %51, !dbg !34
  %119 = getelementptr i1, ptr addrspace(1) %2, i64 %53, !dbg !34
  %120 = getelementptr i1, ptr addrspace(1) %2, i64 %55, !dbg !34
  %121 = getelementptr i1, ptr addrspace(1) %2, i64 %57, !dbg !34
  %122 = getelementptr i1, ptr addrspace(1) %2, i64 %59, !dbg !34
  %123 = getelementptr i1, ptr addrspace(1) %2, i64 %61, !dbg !34
  %124 = extractelement <8 x i1> %82, i64 7, !dbg !35
  %125 = zext i1 %124 to i8, !dbg !35
  %126 = extractelement <8 x i1> %82, i64 6, !dbg !35
  %127 = zext i1 %126 to i8, !dbg !35
  %128 = extractelement <8 x i1> %82, i64 5, !dbg !35
  %129 = zext i1 %128 to i8, !dbg !35
  %130 = extractelement <8 x i1> %82, i64 4, !dbg !35
  %131 = zext i1 %130 to i8, !dbg !35
  %132 = extractelement <8 x i1> %82, i64 3, !dbg !35
  %133 = zext i1 %132 to i8, !dbg !35
  %134 = extractelement <8 x i1> %82, i64 2, !dbg !35
  %135 = zext i1 %134 to i8, !dbg !35
  %136 = extractelement <8 x i1> %82, i64 1, !dbg !35
  %137 = zext i1 %136 to i8, !dbg !35
  %138 = extractelement <8 x i1> %82, i64 0, !dbg !35
  %139 = zext i1 %138 to i8, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %125, ptr addrspace(1) %116, i1 %19) #1, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %127, ptr addrspace(1) %117, i1 %20) #1, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %129, ptr addrspace(1) %118, i1 %21) #1, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %131, ptr addrspace(1) %119, i1 %22) #1, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %133, ptr addrspace(1) %120, i1 %23) #1, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %135, ptr addrspace(1) %121, i1 %24) #1, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %137, ptr addrspace(1) %122, i1 %25) #1, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %139, ptr addrspace(1) %123, i1 %26) #1, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdbuclcgsihuoleqvv56zaqbyoa447jzxe7coqyebbwpg27d6hqb.py", directory: "inductor_cache/db")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_5", linkageName: "triton_poi_fused_relu_threshold_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 54, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 59, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 34, column: 40, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 36, column: 19, scope: !7)
!30 = !DILocation(line: 37, column: 35, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 25, scope: !7)
!33 = !DILocation(line: 37, column: 46, scope: !7)
!34 = !DILocation(line: 38, column: 25, scope: !7)
!35 = !DILocation(line: 38, column: 60, scope: !7)
!36 = !DILocation(line: 38, column: 4, scope: !7)
