; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = and i32 %8, 1, !dbg !12
  %12 = shl nuw nsw i32 %11, 1, !dbg !12
  %13 = shl i32 %8, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %14, !dbg !13
  %17 = icmp slt i32 %15, 64, !dbg !14
  %18 = icmp slt i32 %16, 64, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 2, !dbg !16
  %.lobit12 = lshr i32 %8, 5, !dbg !17
  %21 = and i32 %.lobit12, 3, !dbg !17
  %22 = or disjoint i32 %20, %12, !dbg !18
  %23 = or disjoint i32 %20, %21, !dbg !18
  %24 = icmp slt i32 %22, 512, !dbg !19
  %25 = icmp slt i32 %23, 512, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %26 = sdiv i32 %.frozen, 4, !dbg !20
  %27 = mul i32 %26, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %.frozen6 = freeze i32 %16, !dbg !22
  %28 = sdiv i32 %.frozen6, 16, !dbg !22
  %29 = mul i32 %28, 16, !dbg !23
  %.decomposed7 = sub i32 %.frozen6, %29, !dbg !23
  %30 = shl nsw i32 %.decomposed, 10, !dbg !24
  %31 = shl i32 %26, 13, !dbg !25
  %32 = add i32 %31, %30, !dbg !26
  %33 = add i32 %32, %22, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !28
  %36 = and i1 %17, %24, !dbg !29
  %37 = and i1 %18, %25, !dbg !29
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %36) #2, !dbg !30
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !30
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !30
  %41 = or disjoint i32 %32, 512, !dbg !31
  %42 = add i32 %41, %22, !dbg !32
  %43 = sext i32 %42 to i64, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !33
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %36) #2, !dbg !34
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !34
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !34
  %48 = add i32 %32, 4096, !dbg !35
  %49 = add i32 %48, %22, !dbg !36
  %50 = sext i32 %49 to i64, !dbg !37
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !37
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %36) #2, !dbg !38
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !38
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !38
  %55 = add i32 %32, 4608, !dbg !39
  %56 = add i32 %55, %22, !dbg !40
  %57 = sext i32 %56 to i64, !dbg !41
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !41
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %36) #2, !dbg !42
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !42
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !42
  %62 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !30
  %63 = insertelement <2 x i32> %62, i32 %40, i64 1, !dbg !30
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !30
  %65 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !34
  %66 = insertelement <2 x i32> %65, i32 %47, i64 1, !dbg !34
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !34
  %68 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !38
  %69 = insertelement <2 x i32> %68, i32 %54, i64 1, !dbg !38
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !38
  %71 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !42
  %72 = insertelement <2 x i32> %71, i32 %61, i64 1, !dbg !42
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !42
  %74 = fcmp ogt <2 x float> %67, %64, !dbg !43
  %75 = fcmp uno <2 x float> %67, zeroinitializer, !dbg !47
  %76 = or <2 x i1> %74, %75, !dbg !48
  %.v = select <2 x i1> %76, <2 x i32> %66, <2 x i32> %63, !dbg !49
  %77 = bitcast <2 x i32> %.v to <2 x float>, !dbg !49
  %78 = fcmp olt <2 x float> %77, %70, !dbg !50
  %79 = fcmp uno <2 x float> %70, zeroinitializer, !dbg !52
  %80 = or <2 x i1> %79, %78, !dbg !53
  %.v5 = select <2 x i1> %80, <2 x i32> %69, <2 x i32> %.v, !dbg !54
  %81 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !54
  %82 = fcmp olt <2 x float> %81, %73, !dbg !55
  %83 = bitcast i32 %60 to float, !dbg !57
  %84 = fcmp uno float %83, 0.000000e+00, !dbg !57
  %85 = bitcast i32 %61 to float, !dbg !57
  %86 = fcmp uno float %85, 0.000000e+00, !dbg !57
  %87 = extractelement <2 x i1> %82, i64 0, !dbg !58
  %88 = or i1 %84, %87, !dbg !58
  %89 = extractelement <2 x i1> %82, i64 1, !dbg !58
  %90 = or i1 %86, %89, !dbg !58
  %91 = zext <2 x i1> %74 to <2 x i8>, !dbg !59
  %92 = select <2 x i1> %78, <2 x i8> splat (i8 2), <2 x i8> %91, !dbg !60
  %93 = select <2 x i1> %82, <2 x i8> splat (i8 3), <2 x i8> %92, !dbg !61
  %94 = shl i32 %23, 4, !dbg !62
  %95 = add i32 %94, %.decomposed7, !dbg !63
  %96 = shl i32 %28, 13, !dbg !64
  %97 = add i32 %95, %96, !dbg !65
  %98 = sext i32 %97 to i64, !dbg !66
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !66
  %100 = shl nuw nsw i32 %11, 7, !dbg !67
  %101 = or disjoint i32 %100, %10, !dbg !67
  %102 = and i32 %13, 254, !dbg !67
  %.idx = shl nuw nsw i32 %11, 4, !dbg !67
  %103 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !67
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %101, !dbg !67
  %105 = extractelement <2 x i32> %.v5, i64 0, !dbg !67
  %106 = select i1 %88, i32 %60, i32 %105, !dbg !68
  %107 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %107, i1 true) #2, !dbg !67
  %108 = or disjoint i32 %101, 64, !dbg !67
  %109 = lshr i32 %108, 5, !dbg !67
  %110 = and i32 %109, 6, !dbg !67
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !67
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %108, !dbg !67
  %113 = extractelement <2 x i32> %.v5, i64 1, !dbg !67
  %114 = select i1 %90, i32 %61, i32 %113, !dbg !68
  %115 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %115, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %116 = lshr i32 %13, 5, !dbg !67
  %117 = and i32 %116, 6, !dbg !67
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !67
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %102, !dbg !67
  %.extract = load i32, ptr addrspace(3) %119, align 8, !dbg !67
  %120 = getelementptr inbounds i8, ptr addrspace(3) %119, i32 4, !dbg !67
  %.extract4 = load i32, ptr addrspace(3) %120, align 4, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %99, i1 %37) #2, !dbg !67
  %121 = shl i32 %15, 9, !dbg !69
  %122 = add i32 %22, %121, !dbg !70
  %123 = sext i32 %122 to i64, !dbg !71
  %124 = getelementptr i8, ptr addrspace(1) %2, i64 %123, !dbg !71
  %125 = bitcast <2 x i8> %93 to i16, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %125, ptr addrspace(1) %124, i1 %36) #2, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py", directory: "inductor_cache/ag")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_18", linkageName: "triton_poi_fused_max_pool2d_with_indices_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 50, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 63, scope: !7)
!30 = !DILocation(line: 34, column: 55, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 51, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 61, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 52, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 62, scope: !7)
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 62, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 38, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 44, column: 33, scope: !7)
!60 = !DILocation(line: 47, column: 35, scope: !7)
!61 = !DILocation(line: 50, column: 35, scope: !7)
!62 = !DILocation(line: 51, column: 33, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 43, scope: !7)
!65 = !DILocation(line: 51, column: 38, scope: !7)
!66 = !DILocation(line: 51, column: 25, scope: !7)
!67 = !DILocation(line: 51, column: 54, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!69 = !DILocation(line: 52, column: 34, scope: !7)
!70 = !DILocation(line: 52, column: 30, scope: !7)
!71 = !DILocation(line: 52, column: 25, scope: !7)
!72 = !DILocation(line: 52, column: 46, scope: !7)
!73 = !DILocation(line: 52, column: 4, scope: !7)
