; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %9, 252, !dbg !12
  %12 = lshr i32 %8, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %13, 64, !dbg !12
  %15 = or disjoint i32 %13, 128, !dbg !12
  %16 = or disjoint i32 %13, 192, !dbg !12
  %17 = and i32 %8, 255, !dbg !12
  %18 = or disjoint i32 %7, %11, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %14, !dbg !13
  %21 = or disjoint i32 %7, %15, !dbg !13
  %22 = or disjoint i32 %7, %16, !dbg !13
  %23 = or disjoint i32 %7, %17, !dbg !13
  %24 = icmp slt i32 %18, 1280, !dbg !14
  %25 = icmp slt i32 %19, 1280, !dbg !14
  %26 = icmp slt i32 %20, 1280, !dbg !14
  %27 = icmp slt i32 %21, 1280, !dbg !14
  %28 = icmp slt i32 %22, 1280, !dbg !14
  %29 = icmp slt i32 %23, 1280, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 4, !dbg !16
  %32 = lshr i32 %8, 6, !dbg !17
  %33 = and i32 %32, 3, !dbg !17
  %34 = or disjoint i32 %31, %33, !dbg !18
  %35 = or disjoint i32 %34, 4, !dbg !18
  %36 = or disjoint i32 %34, 8, !dbg !18
  %37 = or disjoint i32 %34, 12, !dbg !18
  %38 = or disjoint i32 %31, %10, !dbg !18
  %39 = icmp slt i32 %34, 176, !dbg !19
  %40 = icmp slt i32 %35, 176, !dbg !19
  %41 = icmp slt i32 %36, 176, !dbg !19
  %42 = icmp slt i32 %37, 176, !dbg !19
  %43 = icmp slt i32 %38, 176, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %44 = sdiv i32 %.frozen, 320, !dbg !20
  %45 = mul i32 %44, 320, !dbg !21
  %.decomposed = sub i32 %.frozen, %45, !dbg !21
  %46 = srem i32 %23, 320, !dbg !21
  %47 = mul i32 %34, 320, !dbg !22
  %48 = mul i32 %35, 320, !dbg !22
  %49 = mul i32 %36, 320, !dbg !22
  %50 = mul i32 %37, 320, !dbg !22
  %51 = mul i32 %44, 56320, !dbg !23
  %52 = add i32 %51, %.decomposed, !dbg !24
  %53 = add i32 %52, %47, !dbg !25
  %54 = add i32 %52, %48, !dbg !25
  %55 = add i32 %52, %49, !dbg !25
  %56 = add i32 %52, %50, !dbg !25
  %57 = sext i32 %53 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !26
  %59 = sext i32 %54 to i64, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !26
  %61 = sext i32 %55 to i64, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !26
  %63 = sext i32 %56 to i64, !dbg !26
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !26
  %65 = and i1 %24, %39, !dbg !27
  %66 = and i1 %40, %24, !dbg !27
  %67 = and i1 %41, %24, !dbg !27
  %68 = and i1 %42, %24, !dbg !27
  %69 = and i1 %25, %43, !dbg !27
  %70 = and i1 %26, %43, !dbg !27
  %71 = and i1 %27, %43, !dbg !27
  %72 = and i1 %28, %43, !dbg !27
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %65) #2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !28
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %66) #2, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !28
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %67) #2, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !28
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %68) #2, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !28
  %93 = shl i32 %8, 6, !dbg !28
  %94 = and i32 %93, 4032, !dbg !28
  %95 = or disjoint i32 %94, %33, !dbg !28
  %96 = and i32 %9, 1020, !dbg !28
  %97 = lshr exact i32 %94, 2, !dbg !28
  %98 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %97, !dbg !28
  %99 = getelementptr float, ptr addrspace(3) %98, i32 %95, !dbg !28
  %100 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !28
  %101 = or disjoint i32 %95, 16, !dbg !28
  %102 = lshr i32 %101, 4, !dbg !28
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !28
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %101, !dbg !28
  %105 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !28
  %106 = or disjoint i32 %95, 32, !dbg !28
  %107 = lshr i32 %106, 4, !dbg !28
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !28
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !28
  %110 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !28
  %111 = or disjoint i32 %95, 48, !dbg !28
  %112 = lshr i32 %111, 4, !dbg !28
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !28
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !28
  %115 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !28
  %116 = or disjoint i32 %95, 4, !dbg !28
  %117 = getelementptr float, ptr addrspace(3) %98, i32 %116, !dbg !28
  %118 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !28
  %119 = or disjoint i32 %95, 20, !dbg !28
  %120 = lshr i32 %119, 4, !dbg !28
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !28
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %119, !dbg !28
  %123 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !28
  %124 = or disjoint i32 %95, 36, !dbg !28
  %125 = lshr i32 %124, 4, !dbg !28
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !28
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !28
  %128 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !28
  %129 = or disjoint i32 %95, 52, !dbg !28
  %130 = lshr i32 %129, 4, !dbg !28
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !28
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !28
  %133 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !28
  %134 = or disjoint i32 %95, 8, !dbg !28
  %135 = getelementptr float, ptr addrspace(3) %98, i32 %134, !dbg !28
  %136 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !28
  %137 = or disjoint i32 %95, 24, !dbg !28
  %138 = lshr i32 %137, 4, !dbg !28
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !28
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %137, !dbg !28
  %141 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !28
  %142 = or disjoint i32 %95, 40, !dbg !28
  %143 = lshr i32 %142, 4, !dbg !28
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !28
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !28
  %146 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !28
  %147 = or disjoint i32 %95, 56, !dbg !28
  %148 = lshr i32 %147, 4, !dbg !28
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !28
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !28
  %151 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !28
  %152 = or disjoint i32 %95, 12, !dbg !28
  %153 = getelementptr float, ptr addrspace(3) %98, i32 %152, !dbg !28
  %154 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !28
  %155 = or disjoint i32 %95, 28, !dbg !28
  %156 = lshr i32 %155, 4, !dbg !28
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !28
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %155, !dbg !28
  %159 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !28
  %160 = or disjoint i32 %95, 44, !dbg !28
  %161 = lshr i32 %160, 4, !dbg !28
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !28
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %160, !dbg !28
  %164 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !28
  %165 = or disjoint i32 %95, 60, !dbg !28
  %166 = lshr i32 %165, 4, !dbg !28
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !28
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %165, !dbg !28
  %169 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %170 = lshr i32 %96, 4, !dbg !28
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %170, !dbg !28
  %172 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %96, !dbg !28
  %173 = load float, ptr addrspace(3) %172, align 4, !dbg !28
  %174 = or disjoint i32 %96, 1, !dbg !28
  %175 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %174, !dbg !28
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !28
  %177 = or disjoint i32 %96, 2, !dbg !28
  %178 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %177, !dbg !28
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !28
  %180 = or disjoint i32 %96, 3, !dbg !28
  %181 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %180, !dbg !28
  %182 = load float, ptr addrspace(3) %181, align 4, !dbg !28
  %183 = or disjoint i32 %96, 1024, !dbg !28
  %184 = lshr i32 %183, 4, !dbg !28
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %184, !dbg !28
  %186 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %183, !dbg !28
  %187 = load float, ptr addrspace(3) %186, align 4, !dbg !28
  %188 = or disjoint i32 %96, 1025, !dbg !28
  %189 = lshr i32 %188, 4, !dbg !28
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !28
  %191 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %188, !dbg !28
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !28
  %193 = or disjoint i32 %96, 1026, !dbg !28
  %194 = lshr i32 %193, 4, !dbg !28
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %194, !dbg !28
  %196 = getelementptr inbounds float, ptr addrspace(3) %195, i32 %193, !dbg !28
  %197 = load float, ptr addrspace(3) %196, align 4, !dbg !28
  %198 = or disjoint i32 %96, 1027, !dbg !28
  %199 = lshr i32 %198, 4, !dbg !28
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %199, !dbg !28
  %201 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %198, !dbg !28
  %202 = load float, ptr addrspace(3) %201, align 4, !dbg !28
  %203 = or disjoint i32 %96, 2048, !dbg !28
  %204 = lshr i32 %203, 4, !dbg !28
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !28
  %206 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %203, !dbg !28
  %207 = load float, ptr addrspace(3) %206, align 4, !dbg !28
  %208 = or disjoint i32 %96, 2049, !dbg !28
  %209 = lshr i32 %208, 4, !dbg !28
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %209, !dbg !28
  %211 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %208, !dbg !28
  %212 = load float, ptr addrspace(3) %211, align 4, !dbg !28
  %213 = or disjoint i32 %96, 2050, !dbg !28
  %214 = lshr i32 %213, 4, !dbg !28
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %214, !dbg !28
  %216 = getelementptr inbounds float, ptr addrspace(3) %215, i32 %213, !dbg !28
  %217 = load float, ptr addrspace(3) %216, align 4, !dbg !28
  %218 = or disjoint i32 %96, 2051, !dbg !28
  %219 = lshr i32 %218, 4, !dbg !28
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %219, !dbg !28
  %221 = getelementptr inbounds float, ptr addrspace(3) %220, i32 %218, !dbg !28
  %222 = load float, ptr addrspace(3) %221, align 4, !dbg !28
  %223 = or disjoint i32 %96, 3072, !dbg !28
  %224 = lshr i32 %223, 4, !dbg !28
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !28
  %226 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %223, !dbg !28
  %227 = load float, ptr addrspace(3) %226, align 4, !dbg !28
  %228 = or disjoint i32 %96, 3073, !dbg !28
  %229 = lshr i32 %228, 4, !dbg !28
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !28
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %228, !dbg !28
  %232 = load float, ptr addrspace(3) %231, align 4, !dbg !28
  %233 = or disjoint i32 %96, 3074, !dbg !28
  %234 = lshr i32 %233, 4, !dbg !28
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !28
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %233, !dbg !28
  %237 = load float, ptr addrspace(3) %236, align 4, !dbg !28
  %238 = or disjoint i32 %96, 3075, !dbg !28
  %239 = lshr i32 %238, 4, !dbg !28
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %239, !dbg !28
  %241 = getelementptr inbounds float, ptr addrspace(3) %240, i32 %238, !dbg !28
  %242 = load float, ptr addrspace(3) %241, align 4, !dbg !28
  %243 = sext i32 %46 to i64, !dbg !29
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %243, !dbg !29
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 %29) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx = shl nuw nsw i32 %17, 3, !dbg !31
  %246 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !31
  %247 = insertelement <1 x i32> poison, i32 %245, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx4 = shl nuw nsw i32 %13, 3, !dbg !31
  %248 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !31
  %249 = load float, ptr addrspace(3) %248, align 8, !dbg !31
  %.idx5 = shl nuw nsw i32 %14, 3, !dbg !31
  %250 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !31
  %251 = load float, ptr addrspace(3) %250, align 8, !dbg !31
  %.idx6 = shl nuw nsw i32 %15, 3, !dbg !31
  %252 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !31
  %253 = load float, ptr addrspace(3) %252, align 8, !dbg !31
  %.idx7 = shl nuw nsw i32 %16, 3, !dbg !31
  %254 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !31
  %255 = load float, ptr addrspace(3) %254, align 8, !dbg !31
  %256 = fadd float %173, %249, !dbg !31
  %257 = fadd float %176, %249, !dbg !31
  %258 = fadd float %179, %249, !dbg !31
  %259 = fadd float %182, %249, !dbg !31
  %260 = fadd float %187, %251, !dbg !31
  %261 = fadd float %192, %251, !dbg !31
  %262 = fadd float %197, %251, !dbg !31
  %263 = fadd float %202, %251, !dbg !31
  %264 = fadd float %207, %253, !dbg !31
  %265 = fadd float %212, %253, !dbg !31
  %266 = fadd float %217, %253, !dbg !31
  %267 = fadd float %222, %253, !dbg !31
  %268 = fadd float %227, %255, !dbg !31
  %269 = fadd float %232, %255, !dbg !31
  %270 = fadd float %237, %255, !dbg !31
  %271 = fadd float %242, %255, !dbg !31
  %272 = mul i32 %19, 176, !dbg !32
  %273 = mul i32 %20, 176, !dbg !32
  %274 = mul i32 %21, 176, !dbg !32
  %275 = mul i32 %22, 176, !dbg !32
  %276 = add i32 %38, %272, !dbg !33
  %277 = add i32 %38, %273, !dbg !33
  %278 = add i32 %38, %274, !dbg !33
  %279 = add i32 %38, %275, !dbg !33
  %280 = sext i32 %276 to i64, !dbg !34
  %281 = getelementptr float, ptr addrspace(1) %2, i64 %280, !dbg !34
  %282 = sext i32 %277 to i64, !dbg !34
  %283 = getelementptr float, ptr addrspace(1) %2, i64 %282, !dbg !34
  %284 = sext i32 %278 to i64, !dbg !34
  %285 = getelementptr float, ptr addrspace(1) %2, i64 %284, !dbg !34
  %286 = sext i32 %279 to i64, !dbg !34
  %287 = getelementptr float, ptr addrspace(1) %2, i64 %286, !dbg !34
  %288 = bitcast float %256 to i32, !dbg !35
  %289 = bitcast float %257 to i32, !dbg !35
  %290 = bitcast float %258 to i32, !dbg !35
  %291 = bitcast float %259 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %288, i32 %289, i32 %290, i32 %291, ptr addrspace(1) %281, i1 %69) #2, !dbg !35
  %292 = bitcast float %260 to i32, !dbg !35
  %293 = bitcast float %261 to i32, !dbg !35
  %294 = bitcast float %262 to i32, !dbg !35
  %295 = bitcast float %263 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %293, i32 %294, i32 %295, ptr addrspace(1) %283, i1 %70) #2, !dbg !35
  %296 = bitcast float %264 to i32, !dbg !35
  %297 = bitcast float %265 to i32, !dbg !35
  %298 = bitcast float %266 to i32, !dbg !35
  %299 = bitcast float %267 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %297, i32 %298, i32 %299, ptr addrspace(1) %285, i1 %71) #2, !dbg !35
  %300 = bitcast float %268 to i32, !dbg !35
  %301 = bitcast float %269 to i32, !dbg !35
  %302 = bitcast float %270 to i32, !dbg !35
  %303 = bitcast float %271 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %301, i32 %302, i32 %303, ptr addrspace(1) %287, i1 %72) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckdfb3cuegt3p6mmo63qdvflwuhgmrfu37dvu2dzlbf6b2htv7pe.py", directory: "inductor_cache/kd")
!4 = !{ptr @triton_poi_fused_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_14", linkageName: "triton_poi_fused_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 63, scope: !7)
!28 = !DILocation(line: 32, column: 55, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 45, scope: !7)
!36 = !DILocation(line: 35, column: 4, scope: !7)
