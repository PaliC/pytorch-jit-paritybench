; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_11 = internal constant [8 x i8] c"unknown\00"
@assertFile_11 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_11 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp182 < 4\00"
@assertFunc_10 = internal constant [8 x i8] c"unknown\00"
@assertFile_10 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_10 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp177 < 4\00"
@assertFunc_9 = internal constant [8 x i8] c"unknown\00"
@assertFile_9 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_9 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp164 < 4\00"
@assertFunc_8 = internal constant [8 x i8] c"unknown\00"
@assertFile_8 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_8 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp159 < 4\00"
@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_7 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp148 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_6 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp142 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_5 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp135 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_4 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp130 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_3 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp117 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_2 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp112 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_1 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp101 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/jv/cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp95 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !11 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %18 = shl i32 %17, 8, !dbg !13
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %20 = shl i32 %19, 1, !dbg !14
  %21 = and i32 %20, 254, !dbg !14
  %22 = or disjoint i32 %18, %21, !dbg !15
  %.frozen = freeze i32 %22, !dbg !16
  %23 = sdiv i32 %.frozen, 16, !dbg !16
  %24 = mul i32 %23, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %24, !dbg !17
  %25 = sdiv i32 %22, 64, !dbg !18
  %26 = shl nsw i32 %25, 5, !dbg !19
  %27 = add nsw i32 %26, %.decomposed, !dbg !20
  %28 = add nsw i32 %27, 16, !dbg !21
  %29 = sext i32 %28 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !22
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !23
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !23
  %34 = bitcast i32 %32 to float, !dbg !23
  %35 = bitcast i32 %33 to float, !dbg !23
  %36 = sext i32 %27 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !24
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !25
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !25
  %41 = bitcast i32 %39 to float, !dbg !25
  %42 = bitcast i32 %40 to float, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !26
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !27
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !27
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !27
  %47 = bitcast i32 %45 to float, !dbg !27
  %48 = bitcast i32 %46 to float, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !28
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #4, !dbg !29
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !29
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !29
  %53 = bitcast i32 %51 to float, !dbg !29
  %54 = bitcast i32 %52 to float, !dbg !29
  %55 = fmul float %34, 2.000000e+00, !dbg !30
  %56 = fmul float %35, 2.000000e+00, !dbg !30
  %57 = fmul float %55, 0x3FD5555560000000, !dbg !31
  %58 = fmul float %56, 0x3FD5555560000000, !dbg !31
  %59 = fadd float %57, -1.000000e+00, !dbg !32
  %60 = fadd float %58, -1.000000e+00, !dbg !32
  %61 = fmul float %41, 2.000000e+00, !dbg !33
  %62 = fmul float %42, 2.000000e+00, !dbg !33
  %63 = fadd float %61, 1.500000e+00, !dbg !34
  %64 = fadd float %62, 1.500000e+00, !dbg !34
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %66 = tail call float @llvm.nvvm.floor.ftz.f(float %63), !dbg !35
  %67 = tail call float @llvm.nvvm.floor.f(float %63), !dbg !35
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %69 = tail call float @llvm.nvvm.floor.ftz.f(float %64), !dbg !35
  %70 = tail call float @llvm.nvvm.floor.f(float %64), !dbg !35
  %71 = fmul float %59, 2.000000e+00, !dbg !36
  %72 = fmul float %60, 2.000000e+00, !dbg !36
  %73 = fadd float %71, 1.500000e+00, !dbg !37
  %74 = fadd float %72, 1.500000e+00, !dbg !37
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %76 = tail call float @llvm.nvvm.floor.ftz.f(float %73), !dbg !38
  %77 = tail call float @llvm.nvvm.floor.f(float %73), !dbg !38
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %79 = tail call float @llvm.nvvm.floor.ftz.f(float %74), !dbg !38
  %80 = tail call float @llvm.nvvm.floor.f(float %74), !dbg !38
  %81 = fmul float %47, 2.000000e+00, !dbg !39
  %82 = fmul float %48, 2.000000e+00, !dbg !39
  %83 = fmul float %81, 0x3FD5555560000000, !dbg !40
  %84 = fmul float %82, 0x3FD5555560000000, !dbg !40
  %85 = fadd float %83, -1.000000e+00, !dbg !41
  %86 = fadd float %84, -1.000000e+00, !dbg !41
  %87 = fmul float %53, 2.000000e+00, !dbg !42
  %88 = fmul float %54, 2.000000e+00, !dbg !42
  %89 = fadd float %87, 1.500000e+00, !dbg !43
  %90 = fadd float %88, 1.500000e+00, !dbg !43
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %92 = tail call float @llvm.nvvm.floor.ftz.f(float %89), !dbg !44
  %93 = tail call float @llvm.nvvm.floor.f(float %89), !dbg !44
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %95 = tail call float @llvm.nvvm.floor.ftz.f(float %90), !dbg !44
  %96 = tail call float @llvm.nvvm.floor.f(float %90), !dbg !44
  %97 = fmul float %85, 2.000000e+00, !dbg !45
  %98 = fmul float %86, 2.000000e+00, !dbg !45
  %99 = fadd float %97, 1.500000e+00, !dbg !46
  %100 = fadd float %98, 1.500000e+00, !dbg !46
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %102 = tail call float @llvm.nvvm.floor.ftz.f(float %99), !dbg !47
  %103 = tail call float @llvm.nvvm.floor.f(float %99), !dbg !47
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %105 = tail call float @llvm.nvvm.floor.ftz.f(float %100), !dbg !47
  %106 = tail call float @llvm.nvvm.floor.f(float %100), !dbg !47
  %107 = insertelement <8 x i32> poison, i32 %104, i64 0, !dbg !47
  %108 = insertelement <8 x i32> %107, i32 %101, i64 1, !dbg !47
  %109 = insertelement <8 x i32> %108, i32 %94, i64 2, !dbg !47
  %110 = insertelement <8 x i32> %109, i32 %91, i64 3, !dbg !47
  %111 = insertelement <8 x i32> %110, i32 %78, i64 4, !dbg !47
  %112 = insertelement <8 x i32> %111, i32 %75, i64 5, !dbg !47
  %113 = insertelement <8 x i32> %112, i32 %68, i64 6, !dbg !47
  %114 = insertelement <8 x i32> %113, i32 %65, i64 7, !dbg !47
  %115 = icmp eq <8 x i32> %114, zeroinitializer, !dbg !47
  %116 = insertelement <8 x float> poison, float %106, i64 0, !dbg !47
  %117 = insertelement <8 x float> %116, float %103, i64 1, !dbg !47
  %118 = insertelement <8 x float> %117, float %96, i64 2, !dbg !47
  %119 = insertelement <8 x float> %118, float %93, i64 3, !dbg !47
  %120 = insertelement <8 x float> %119, float %80, i64 4, !dbg !47
  %121 = insertelement <8 x float> %120, float %77, i64 5, !dbg !47
  %122 = insertelement <8 x float> %121, float %70, i64 6, !dbg !47
  %123 = insertelement <8 x float> %122, float %67, i64 7, !dbg !47
  %124 = insertelement <8 x float> poison, float %105, i64 0, !dbg !47
  %125 = insertelement <8 x float> %124, float %102, i64 1, !dbg !47
  %126 = insertelement <8 x float> %125, float %95, i64 2, !dbg !47
  %127 = insertelement <8 x float> %126, float %92, i64 3, !dbg !47
  %128 = insertelement <8 x float> %127, float %79, i64 4, !dbg !47
  %129 = insertelement <8 x float> %128, float %76, i64 5, !dbg !47
  %130 = insertelement <8 x float> %129, float %69, i64 6, !dbg !47
  %131 = insertelement <8 x float> %130, float %66, i64 7, !dbg !47
  %132 = select <8 x i1> %115, <8 x float> %123, <8 x float> %131, !dbg !47
  %133 = extractelement <8 x float> %132, i64 7, !dbg !48
  %134 = extractelement <8 x float> %132, i64 6, !dbg !48
  %135 = fcmp olt float %133, 4.000000e+00, !dbg !49
  %136 = fcmp olt float %134, 4.000000e+00, !dbg !49
  %137 = extractelement <8 x float> %132, i64 5, !dbg !50
  %138 = extractelement <8 x float> %132, i64 4, !dbg !50
  %139 = fcmp olt float %137, 4.000000e+00, !dbg !51
  %140 = fcmp olt float %138, 4.000000e+00, !dbg !51
  %141 = fptosi float %137 to i64, !dbg !52
  %142 = fptosi float %138 to i64, !dbg !52
  %143 = fptosi float %133 to i64, !dbg !53
  %144 = fptosi float %134 to i64, !dbg !53
  %145 = extractelement <8 x float> %132, i64 3, !dbg !54
  %146 = extractelement <8 x float> %132, i64 2, !dbg !54
  %147 = fcmp olt float %145, 4.000000e+00, !dbg !55
  %148 = fcmp olt float %146, 4.000000e+00, !dbg !55
  %149 = extractelement <8 x float> %132, i64 1, !dbg !56
  %150 = extractelement <8 x float> %132, i64 0, !dbg !56
  %151 = fcmp olt float %149, 4.000000e+00, !dbg !57
  %152 = fcmp olt float %150, 4.000000e+00, !dbg !57
  %153 = fptosi float %149 to i64, !dbg !58
  %154 = fptosi float %150 to i64, !dbg !58
  %155 = fptosi float %145 to i64, !dbg !59
  %156 = fptosi float %146 to i64, !dbg !59
  %157 = fadd <8 x float> %132, splat (float 1.000000e+00), !dbg !60
  %158 = fcmp olt <8 x float> %157, splat (float 4.000000e+00), !dbg !61
  %159 = extractelement <8 x i1> %158, i64 5, !dbg !62
  %160 = extractelement <8 x i1> %158, i64 4, !dbg !62
  %161 = extractelement <8 x i1> %158, i64 7, !dbg !63
  %162 = extractelement <8 x i1> %158, i64 6, !dbg !63
  %163 = extractelement <8 x i1> %158, i64 1, !dbg !64
  %164 = extractelement <8 x i1> %158, i64 0, !dbg !64
  %165 = extractelement <8 x i1> %158, i64 3, !dbg !65
  %166 = extractelement <8 x i1> %158, i64 2, !dbg !65
  %167 = shufflevector <8 x float> %157, <8 x float> %132, <16 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !66
  %168 = fcmp oge <16 x float> %167, zeroinitializer, !dbg !66
  %169 = extractelement <16 x i1> %168, i64 13, !dbg !67
  %170 = and i1 %169, %139, !dbg !67
  %171 = extractelement <16 x i1> %168, i64 12, !dbg !67
  %172 = and i1 %171, %140, !dbg !67
  %173 = extractelement <16 x i1> %168, i64 9, !dbg !68
  %174 = and i1 %173, %151, !dbg !68
  %175 = extractelement <16 x i1> %168, i64 8, !dbg !68
  %176 = and i1 %175, %152, !dbg !68
  %177 = extractelement <16 x i1> %168, i64 7, !dbg !62
  %178 = and i1 %177, %159, !dbg !62
  %179 = extractelement <16 x i1> %168, i64 6, !dbg !62
  %180 = and i1 %179, %160, !dbg !62
  %181 = and i1 %161, %178, !dbg !69
  %182 = and i1 %162, %180, !dbg !69
  %183 = and i1 %135, %178, !dbg !70
  %184 = and i1 %136, %180, !dbg !70
  %185 = extractelement <16 x i1> %168, i64 15, !dbg !71
  %186 = and i1 %185, %183, !dbg !71
  %187 = extractelement <16 x i1> %168, i64 14, !dbg !71
  %188 = and i1 %187, %184, !dbg !71
  %189 = and i1 %161, %170, !dbg !63
  %190 = and i1 %162, %172, !dbg !63
  %191 = extractelement <16 x i1> %168, i64 5, !dbg !72
  %192 = and i1 %191, %189, !dbg !72
  %193 = extractelement <16 x i1> %168, i64 4, !dbg !72
  %194 = and i1 %193, %190, !dbg !72
  %195 = extractelement <16 x i1> %168, i64 3, !dbg !64
  %196 = and i1 %195, %163, !dbg !64
  %197 = extractelement <16 x i1> %168, i64 2, !dbg !64
  %198 = and i1 %197, %164, !dbg !64
  %199 = and i1 %165, %196, !dbg !73
  %200 = and i1 %166, %198, !dbg !73
  %201 = and i1 %147, %196, !dbg !74
  %202 = and i1 %148, %198, !dbg !74
  %203 = extractelement <16 x i1> %168, i64 11, !dbg !75
  %204 = and i1 %203, %201, !dbg !75
  %205 = extractelement <16 x i1> %168, i64 10, !dbg !75
  %206 = and i1 %205, %202, !dbg !75
  %207 = and i1 %165, %174, !dbg !65
  %208 = and i1 %166, %176, !dbg !65
  %209 = extractelement <16 x i1> %168, i64 1, !dbg !76
  %210 = and i1 %209, %207, !dbg !76
  %211 = extractelement <16 x i1> %168, i64 0, !dbg !76
  %212 = and i1 %211, %208, !dbg !76
  %213 = select i1 %210, i64 %153, i64 0, !dbg !77
  %214 = select i1 %212, i64 %154, i64 0, !dbg !77
  %215 = lshr i64 %213, 61, !dbg !78
  %216 = and i64 %215, 4, !dbg !78
  %217 = add i64 %216, %213, !dbg !78
  %218 = lshr i64 %214, 61, !dbg !78
  %219 = and i64 %218, 4, !dbg !78
  %220 = add i64 %219, %214, !dbg !78
  %221 = or i64 %220, %217, !dbg !79
  %.not = icmp ult i64 %221, 4, !dbg !79
  br i1 %.not, label %223, label %222, !dbg !79

222:                                              ; preds = %16
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 124, ptr nonnull @assertFunc_0, i64 1), !dbg !79
  unreachable, !dbg !79

223:                                              ; preds = %16
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %224 = extractelement <8 x float> %157, i64 3, !dbg !80
  %225 = fptosi float %224 to i64, !dbg !80
  %226 = extractelement <8 x float> %157, i64 2, !dbg !80
  %227 = fptosi float %226 to i64, !dbg !80
  %228 = select i1 %210, i64 %225, i64 0, !dbg !81
  %229 = select i1 %212, i64 %227, i64 0, !dbg !81
  %230 = lshr i64 %228, 61, !dbg !82
  %231 = and i64 %230, 4, !dbg !82
  %232 = add i64 %231, %228, !dbg !82
  %233 = lshr i64 %229, 61, !dbg !82
  %234 = and i64 %233, 4, !dbg !82
  %235 = add i64 %234, %229, !dbg !82
  %236 = or i64 %235, %232, !dbg !83
  %.not1 = icmp ult i64 %236, 4, !dbg !83
  br i1 %.not1, label %238, label %237, !dbg !83

237:                                              ; preds = %223
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 130, ptr nonnull @assertFunc_1, i64 1), !dbg !83
  unreachable, !dbg !83

238:                                              ; preds = %223
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %239 = shl nuw nsw i64 %217, 2, !dbg !84
  %240 = shl nuw nsw i64 %220, 2, !dbg !84
  %241 = or disjoint i64 %239, %232, !dbg !85
  %242 = or disjoint i64 %240, %235, !dbg !85
  %243 = shl nsw i32 %23, 4, !dbg !86
  %244 = sext i32 %243 to i64, !dbg !87
  %245 = or disjoint i64 %241, %244, !dbg !87
  %246 = or disjoint i64 %242, %244, !dbg !87
  %247 = getelementptr float, ptr addrspace(1) %8, i64 %245, !dbg !88
  %248 = getelementptr float, ptr addrspace(1) %8, i64 %246, !dbg !88
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 true) #4, !dbg !89
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #4, !dbg !89
  %251 = extractelement <8 x float> %157, i64 1, !dbg !90
  %252 = fptosi float %251 to i64, !dbg !90
  %253 = extractelement <8 x float> %157, i64 0, !dbg !90
  %254 = fptosi float %253 to i64, !dbg !90
  %255 = select i1 %204, i64 %252, i64 0, !dbg !91
  %256 = select i1 %206, i64 %254, i64 0, !dbg !91
  %257 = lshr i64 %255, 61, !dbg !92
  %258 = and i64 %257, 4, !dbg !92
  %259 = add i64 %258, %255, !dbg !92
  %260 = lshr i64 %256, 61, !dbg !92
  %261 = and i64 %260, 4, !dbg !92
  %262 = add i64 %261, %256, !dbg !92
  %263 = or i64 %262, %259, !dbg !93
  %.not2 = icmp ult i64 %263, 4, !dbg !93
  br i1 %.not2, label %265, label %264, !dbg !93

264:                                              ; preds = %238
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 141, ptr nonnull @assertFunc_2, i64 1), !dbg !93
  unreachable, !dbg !93

265:                                              ; preds = %238
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %266 = select i1 %204, i64 %155, i64 0, !dbg !94
  %267 = select i1 %206, i64 %156, i64 0, !dbg !94
  %268 = lshr i64 %266, 61, !dbg !95
  %269 = and i64 %268, 4, !dbg !95
  %270 = add i64 %269, %266, !dbg !95
  %271 = lshr i64 %267, 61, !dbg !95
  %272 = and i64 %271, 4, !dbg !95
  %273 = add i64 %272, %267, !dbg !95
  %274 = or i64 %273, %270, !dbg !96
  %.not3 = icmp ult i64 %274, 4, !dbg !96
  br i1 %.not3, label %276, label %275, !dbg !96

275:                                              ; preds = %265
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 146, ptr nonnull @assertFunc_3, i64 1), !dbg !96
  unreachable, !dbg !96

276:                                              ; preds = %265
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %277 = shl nuw nsw i64 %259, 2, !dbg !97
  %278 = shl nuw nsw i64 %262, 2, !dbg !97
  %279 = or disjoint i64 %277, %270, !dbg !98
  %280 = or disjoint i64 %278, %273, !dbg !98
  %281 = or disjoint i64 %279, %244, !dbg !99
  %282 = or disjoint i64 %280, %244, !dbg !99
  %283 = getelementptr float, ptr addrspace(1) %8, i64 %281, !dbg !100
  %284 = getelementptr float, ptr addrspace(1) %8, i64 %282, !dbg !100
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 true) #4, !dbg !101
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 true) #4, !dbg !101
  %287 = and i1 %209, %199, !dbg !102
  %288 = and i1 %211, %200, !dbg !102
  %289 = select i1 %287, i64 %252, i64 0, !dbg !103
  %290 = select i1 %288, i64 %254, i64 0, !dbg !103
  %291 = lshr i64 %289, 61, !dbg !104
  %292 = and i64 %291, 4, !dbg !104
  %293 = add i64 %292, %289, !dbg !104
  %294 = lshr i64 %290, 61, !dbg !104
  %295 = and i64 %294, 4, !dbg !104
  %296 = add i64 %295, %290, !dbg !104
  %297 = or i64 %296, %293, !dbg !105
  %.not4 = icmp ult i64 %297, 4, !dbg !105
  br i1 %.not4, label %299, label %298, !dbg !105

298:                                              ; preds = %276
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 159, ptr nonnull @assertFunc_4, i64 1), !dbg !105
  unreachable, !dbg !105

299:                                              ; preds = %276
  tail call void @llvm.nvvm.barrier0(), !dbg !105
  %300 = select i1 %287, i64 %225, i64 0, !dbg !106
  %301 = select i1 %288, i64 %227, i64 0, !dbg !106
  %302 = lshr i64 %300, 61, !dbg !107
  %303 = and i64 %302, 4, !dbg !107
  %304 = add i64 %303, %300, !dbg !107
  %305 = lshr i64 %301, 61, !dbg !107
  %306 = and i64 %305, 4, !dbg !107
  %307 = add i64 %306, %301, !dbg !107
  %308 = or i64 %307, %304, !dbg !108
  %.not5 = icmp ult i64 %308, 4, !dbg !108
  br i1 %.not5, label %310, label %309, !dbg !108

309:                                              ; preds = %299
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 164, ptr nonnull @assertFunc_5, i64 1), !dbg !108
  unreachable, !dbg !108

310:                                              ; preds = %299
  tail call void @llvm.nvvm.barrier0(), !dbg !108
  %311 = shl nuw nsw i64 %293, 2, !dbg !109
  %312 = shl nuw nsw i64 %296, 2, !dbg !109
  %313 = or disjoint i64 %311, %304, !dbg !110
  %314 = or disjoint i64 %312, %307, !dbg !110
  %315 = or disjoint i64 %313, %244, !dbg !111
  %316 = or disjoint i64 %314, %244, !dbg !111
  %317 = getelementptr float, ptr addrspace(1) %8, i64 %315, !dbg !112
  %318 = getelementptr float, ptr addrspace(1) %8, i64 %316, !dbg !112
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %317, i1 true) #4, !dbg !113
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %318, i1 true) #4, !dbg !113
  %321 = select i1 %192, i64 %141, i64 0, !dbg !114
  %322 = select i1 %194, i64 %142, i64 0, !dbg !114
  %323 = lshr i64 %321, 61, !dbg !115
  %324 = and i64 %323, 4, !dbg !115
  %325 = add i64 %324, %321, !dbg !115
  %326 = lshr i64 %322, 61, !dbg !115
  %327 = and i64 %326, 4, !dbg !115
  %328 = add i64 %327, %322, !dbg !115
  %329 = or i64 %325, %328, !dbg !116
  %.not6 = icmp ult i64 %329, 4, !dbg !116
  br i1 %.not6, label %331, label %330, !dbg !116

330:                                              ; preds = %310
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 171, ptr nonnull @assertFunc_6, i64 1), !dbg !116
  unreachable, !dbg !116

331:                                              ; preds = %310
  tail call void @llvm.nvvm.barrier0(), !dbg !116
  %332 = extractelement <8 x float> %157, i64 7, !dbg !117
  %333 = fptosi float %332 to i64, !dbg !117
  %334 = extractelement <8 x float> %157, i64 6, !dbg !117
  %335 = fptosi float %334 to i64, !dbg !117
  %336 = select i1 %192, i64 %333, i64 0, !dbg !118
  %337 = select i1 %194, i64 %335, i64 0, !dbg !118
  %338 = lshr i64 %336, 61, !dbg !119
  %339 = and i64 %338, 4, !dbg !119
  %340 = add i64 %339, %336, !dbg !119
  %341 = lshr i64 %337, 61, !dbg !119
  %342 = and i64 %341, 4, !dbg !119
  %343 = add i64 %342, %337, !dbg !119
  %344 = or i64 %340, %343, !dbg !120
  %.not7 = icmp ult i64 %344, 4, !dbg !120
  br i1 %.not7, label %346, label %345, !dbg !120

345:                                              ; preds = %331
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 177, ptr nonnull @assertFunc_7, i64 1), !dbg !120
  unreachable, !dbg !120

346:                                              ; preds = %331
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %347 = shl nuw nsw i64 %325, 2, !dbg !121
  %348 = shl nuw nsw i64 %328, 2, !dbg !121
  %349 = or disjoint i64 %347, %340, !dbg !122
  %350 = or disjoint i64 %348, %343, !dbg !122
  %351 = or disjoint i64 %349, %244, !dbg !123
  %352 = or disjoint i64 %350, %244, !dbg !123
  %353 = getelementptr float, ptr addrspace(1) %8, i64 %351, !dbg !124
  %354 = getelementptr float, ptr addrspace(1) %8, i64 %352, !dbg !124
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %353, i1 true) #4, !dbg !125
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %354, i1 true) #4, !dbg !125
  %357 = extractelement <8 x float> %157, i64 5, !dbg !126
  %358 = fptosi float %357 to i64, !dbg !126
  %359 = extractelement <8 x float> %157, i64 4, !dbg !126
  %360 = fptosi float %359 to i64, !dbg !126
  %361 = select i1 %186, i64 %358, i64 0, !dbg !127
  %362 = select i1 %188, i64 %360, i64 0, !dbg !127
  %363 = lshr i64 %361, 61, !dbg !128
  %364 = and i64 %363, 4, !dbg !128
  %365 = add i64 %364, %361, !dbg !128
  %366 = lshr i64 %362, 61, !dbg !128
  %367 = and i64 %366, 4, !dbg !128
  %368 = add i64 %367, %362, !dbg !128
  %369 = or i64 %365, %368, !dbg !129
  %.not8 = icmp ult i64 %369, 4, !dbg !129
  br i1 %.not8, label %371, label %370, !dbg !129

370:                                              ; preds = %346
  tail call void @__assertfail(ptr nonnull @assertMessage_8, ptr nonnull @assertFile_8, i32 188, ptr nonnull @assertFunc_8, i64 1), !dbg !129
  unreachable, !dbg !129

371:                                              ; preds = %346
  tail call void @llvm.nvvm.barrier0(), !dbg !129
  %372 = select i1 %186, i64 %143, i64 0, !dbg !130
  %373 = select i1 %188, i64 %144, i64 0, !dbg !130
  %374 = lshr i64 %372, 61, !dbg !131
  %375 = and i64 %374, 4, !dbg !131
  %376 = add i64 %375, %372, !dbg !131
  %377 = lshr i64 %373, 61, !dbg !131
  %378 = and i64 %377, 4, !dbg !131
  %379 = add i64 %378, %373, !dbg !131
  %380 = or i64 %376, %379, !dbg !132
  %.not9 = icmp ult i64 %380, 4, !dbg !132
  br i1 %.not9, label %382, label %381, !dbg !132

381:                                              ; preds = %371
  tail call void @__assertfail(ptr nonnull @assertMessage_9, ptr nonnull @assertFile_9, i32 193, ptr nonnull @assertFunc_9, i64 1), !dbg !132
  unreachable, !dbg !132

382:                                              ; preds = %371
  tail call void @llvm.nvvm.barrier0(), !dbg !132
  %383 = shl nuw nsw i64 %365, 2, !dbg !133
  %384 = shl nuw nsw i64 %368, 2, !dbg !133
  %385 = or disjoint i64 %383, %376, !dbg !134
  %386 = or disjoint i64 %384, %379, !dbg !134
  %387 = or disjoint i64 %385, %244, !dbg !135
  %388 = or disjoint i64 %386, %244, !dbg !135
  %389 = getelementptr float, ptr addrspace(1) %8, i64 %387, !dbg !136
  %390 = getelementptr float, ptr addrspace(1) %8, i64 %388, !dbg !136
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %389, i1 true) #4, !dbg !137
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %390, i1 true) #4, !dbg !137
  %393 = and i1 %191, %181, !dbg !138
  %394 = and i1 %193, %182, !dbg !138
  %395 = select i1 %393, i64 %358, i64 0, !dbg !139
  %396 = select i1 %394, i64 %360, i64 0, !dbg !139
  %397 = lshr i64 %395, 61, !dbg !140
  %398 = and i64 %397, 4, !dbg !140
  %399 = add i64 %398, %395, !dbg !140
  %400 = lshr i64 %396, 61, !dbg !140
  %401 = and i64 %400, 4, !dbg !140
  %402 = add i64 %401, %396, !dbg !140
  %403 = or i64 %399, %402, !dbg !141
  %.not10 = icmp ult i64 %403, 4, !dbg !141
  br i1 %.not10, label %405, label %404, !dbg !141

404:                                              ; preds = %382
  tail call void @__assertfail(ptr nonnull @assertMessage_10, ptr nonnull @assertFile_10, i32 206, ptr nonnull @assertFunc_10, i64 1), !dbg !141
  unreachable, !dbg !141

405:                                              ; preds = %382
  tail call void @llvm.nvvm.barrier0(), !dbg !141
  %406 = select i1 %393, i64 %333, i64 0, !dbg !142
  %407 = select i1 %394, i64 %335, i64 0, !dbg !142
  %408 = lshr i64 %406, 61, !dbg !143
  %409 = and i64 %408, 4, !dbg !143
  %410 = add i64 %409, %406, !dbg !143
  %411 = lshr i64 %407, 61, !dbg !143
  %412 = and i64 %411, 4, !dbg !143
  %413 = add i64 %412, %407, !dbg !143
  %414 = or i64 %410, %413, !dbg !144
  %.not11 = icmp ult i64 %414, 4, !dbg !144
  br i1 %.not11, label %416, label %415, !dbg !144

415:                                              ; preds = %405
  tail call void @__assertfail(ptr nonnull @assertMessage_11, ptr nonnull @assertFile_11, i32 211, ptr nonnull @assertFunc_11, i64 1), !dbg !144
  unreachable, !dbg !144

416:                                              ; preds = %405
  %417 = fsub float %64, %134, !dbg !145
  %418 = fsub float %74, %138, !dbg !146
  %419 = fmul float %417, %418, !dbg !147
  %420 = select i1 %394, float %419, float 0.000000e+00, !dbg !148
  %421 = fsub float %63, %133, !dbg !145
  %422 = fsub float %73, %137, !dbg !146
  %423 = fmul float %421, %422, !dbg !147
  %424 = select i1 %393, float %423, float 0.000000e+00, !dbg !148
  %425 = bitcast i32 %392 to float, !dbg !137
  %426 = fsub float %334, %64, !dbg !149
  %427 = fmul float %426, %418, !dbg !150
  %428 = select i1 %188, float %427, float 0.000000e+00, !dbg !151
  %429 = fmul float %428, %425, !dbg !152
  %430 = bitcast i32 %391 to float, !dbg !137
  %431 = fsub float %332, %63, !dbg !149
  %432 = fmul float %431, %422, !dbg !150
  %433 = select i1 %186, float %432, float 0.000000e+00, !dbg !151
  %434 = fmul float %433, %430, !dbg !152
  %435 = bitcast i32 %356 to float, !dbg !125
  %436 = fsub float %359, %74, !dbg !153
  %437 = fmul float %417, %436, !dbg !154
  %438 = select i1 %194, float %437, float 0.000000e+00, !dbg !155
  %439 = fmul float %438, %435, !dbg !156
  %440 = bitcast i32 %355 to float, !dbg !125
  %441 = fsub float %357, %73, !dbg !153
  %442 = fmul float %421, %441, !dbg !154
  %443 = select i1 %192, float %442, float 0.000000e+00, !dbg !155
  %444 = fmul float %443, %440, !dbg !156
  %445 = bitcast i32 %320 to float, !dbg !113
  %446 = fsub float %90, %146, !dbg !157
  %447 = fsub float %100, %150, !dbg !158
  %448 = fmul float %446, %447, !dbg !159
  %449 = select i1 %288, float %448, float 0.000000e+00, !dbg !160
  %450 = fmul float %449, %445, !dbg !161
  %451 = bitcast i32 %319 to float, !dbg !113
  %452 = fsub float %89, %145, !dbg !157
  %453 = fsub float %99, %149, !dbg !158
  %454 = fmul float %452, %453, !dbg !159
  %455 = select i1 %287, float %454, float 0.000000e+00, !dbg !160
  %456 = fmul float %455, %451, !dbg !161
  %457 = bitcast i32 %286 to float, !dbg !101
  %458 = fsub float %226, %90, !dbg !162
  %459 = fmul float %458, %447, !dbg !163
  %460 = select i1 %206, float %459, float 0.000000e+00, !dbg !164
  %461 = fmul float %460, %457, !dbg !165
  %462 = bitcast i32 %285 to float, !dbg !101
  %463 = fsub float %224, %89, !dbg !162
  %464 = fmul float %463, %453, !dbg !163
  %465 = select i1 %204, float %464, float 0.000000e+00, !dbg !164
  %466 = fmul float %465, %462, !dbg !165
  %467 = bitcast i32 %250 to float, !dbg !89
  %468 = fsub float %253, %100, !dbg !166
  %469 = fmul float %446, %468, !dbg !167
  %470 = select i1 %212, float %469, float 0.000000e+00, !dbg !168
  %471 = fmul float %470, %467, !dbg !169
  %472 = bitcast i32 %249 to float, !dbg !89
  %473 = fsub float %251, %99, !dbg !166
  %474 = fmul float %452, %473, !dbg !167
  %475 = select i1 %210, float %474, float 0.000000e+00, !dbg !168
  %476 = fmul float %475, %472, !dbg !169
  %477 = and i1 %148, %176, !dbg !170
  %478 = and i1 %205, %477, !dbg !171
  %479 = fmul float %458, %468, !dbg !172
  %480 = and i1 %147, %174, !dbg !170
  %481 = and i1 %203, %480, !dbg !171
  %482 = fmul float %463, %473, !dbg !172
  %483 = select i1 %478, i64 %156, i64 0, !dbg !173
  %484 = select i1 %481, i64 %155, i64 0, !dbg !173
  %485 = select i1 %478, i64 %154, i64 0, !dbg !174
  %486 = select i1 %481, i64 %153, i64 0, !dbg !174
  %487 = and i1 %136, %172, !dbg !175
  %488 = and i1 %187, %487, !dbg !176
  %489 = fmul float %426, %436, !dbg !177
  %490 = and i1 %135, %170, !dbg !175
  %491 = and i1 %185, %490, !dbg !176
  %492 = fmul float %431, %441, !dbg !177
  %493 = select i1 %488, i64 %144, i64 0, !dbg !178
  %494 = select i1 %491, i64 %143, i64 0, !dbg !178
  %495 = select i1 %488, i64 %142, i64 0, !dbg !179
  %496 = select i1 %491, i64 %141, i64 0, !dbg !179
  tail call void @llvm.nvvm.barrier0(), !dbg !144
  %497 = shl nuw nsw i64 %399, 2, !dbg !180
  %498 = shl nuw nsw i64 %402, 2, !dbg !180
  %499 = or disjoint i64 %497, %410, !dbg !181
  %500 = or disjoint i64 %498, %413, !dbg !181
  %501 = or disjoint i64 %499, %244, !dbg !182
  %502 = or disjoint i64 %500, %244, !dbg !182
  %503 = getelementptr float, ptr addrspace(1) %8, i64 %501, !dbg !183
  %504 = getelementptr float, ptr addrspace(1) %8, i64 %502, !dbg !183
  %505 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %503, i1 true) #4, !dbg !184
  %506 = bitcast i32 %505 to float, !dbg !184
  %507 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %504, i1 true) #4, !dbg !184
  %508 = bitcast i32 %507 to float, !dbg !184
  %509 = fmul float %424, %506, !dbg !185
  %510 = fmul float %420, %508, !dbg !185
  %511 = sext i32 %22 to i64, !dbg !186
  %512 = getelementptr i64, ptr addrspace(1) %9, i64 %511, !dbg !186
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %496, i64 %495, ptr addrspace(1) %512, i1 true) #4, !dbg !187
  %513 = getelementptr i64, ptr addrspace(1) %10, i64 %511, !dbg !188
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %494, i64 %493, ptr addrspace(1) %513, i1 true) #4, !dbg !189
  %514 = getelementptr float, ptr addrspace(1) %11, i64 %511, !dbg !190
  %515 = bitcast float %492 to i32, !dbg !191
  %516 = select i1 %491, i32 %515, i32 0, !dbg !192
  %517 = bitcast float %489 to i32, !dbg !191
  %518 = select i1 %488, i32 %517, i32 0, !dbg !192
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %516, i32 %518, ptr addrspace(1) %514, i1 true) #4, !dbg !191
  %519 = getelementptr i64, ptr addrspace(1) %12, i64 %511, !dbg !193
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %486, i64 %485, ptr addrspace(1) %519, i1 true) #4, !dbg !194
  %520 = getelementptr i64, ptr addrspace(1) %13, i64 %511, !dbg !195
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %484, i64 %483, ptr addrspace(1) %520, i1 true) #4, !dbg !196
  %521 = getelementptr float, ptr addrspace(1) %14, i64 %511, !dbg !197
  %522 = bitcast float %482 to i32, !dbg !198
  %523 = select i1 %481, i32 %522, i32 0, !dbg !199
  %524 = bitcast float %479 to i32, !dbg !198
  %525 = select i1 %478, i32 %524, i32 0, !dbg !199
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %523, i32 %525, ptr addrspace(1) %521, i1 true) #4, !dbg !198
  %526 = getelementptr float, ptr addrspace(1) %0, i64 %511, !dbg !200
  %527 = bitcast float %476 to i32, !dbg !201
  %528 = bitcast float %471 to i32, !dbg !201
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %527, i32 %528, ptr addrspace(1) %526, i1 true) #4, !dbg !201
  %529 = getelementptr float, ptr addrspace(1) %1, i64 %511, !dbg !202
  %530 = bitcast float %466 to i32, !dbg !203
  %531 = bitcast float %461 to i32, !dbg !203
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %530, i32 %531, ptr addrspace(1) %529, i1 true) #4, !dbg !203
  %532 = getelementptr float, ptr addrspace(1) %2, i64 %511, !dbg !204
  %533 = bitcast float %456 to i32, !dbg !205
  %534 = bitcast float %450 to i32, !dbg !205
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %533, i32 %534, ptr addrspace(1) %532, i1 true) #4, !dbg !205
  %535 = getelementptr float, ptr addrspace(1) %3, i64 %511, !dbg !206
  %536 = bitcast float %444 to i32, !dbg !207
  %537 = bitcast float %439 to i32, !dbg !207
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %536, i32 %537, ptr addrspace(1) %535, i1 true) #4, !dbg !207
  %538 = getelementptr float, ptr addrspace(1) %4, i64 %511, !dbg !208
  %539 = bitcast float %434 to i32, !dbg !209
  %540 = bitcast float %429 to i32, !dbg !209
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %539, i32 %540, ptr addrspace(1) %538, i1 true) #4, !dbg !209
  %541 = getelementptr float, ptr addrspace(1) %5, i64 %511, !dbg !210
  %542 = bitcast float %509 to i32, !dbg !211
  %543 = bitcast float %510 to i32, !dbg !211
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %542, i32 %543, ptr addrspace(1) %541, i1 true) #4, !dbg !211
  ret void, !dbg !212
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjvm2muod2elpjas7ev5q57kdw2vo2g7hjq2t73v3oe3ia5cabha.py", directory: "inductor_cache/jv")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_2", linkageName: "triton_poi_fused_grid_sampler_2d_2", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 27, column: 19, scope: !11)
!17 = !DILocation(line: 24, column: 19, scope: !11)
!18 = !DILocation(line: 25, column: 19, scope: !11)
!19 = !DILocation(line: 28, column: 43, scope: !11)
!20 = !DILocation(line: 28, column: 35, scope: !11)
!21 = !DILocation(line: 28, column: 40, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 48, scope: !11)
!24 = !DILocation(line: 29, column: 31, scope: !11)
!25 = !DILocation(line: 29, column: 44, scope: !11)
!26 = !DILocation(line: 30, column: 31, scope: !11)
!27 = !DILocation(line: 30, column: 49, scope: !11)
!28 = !DILocation(line: 31, column: 31, scope: !11)
!29 = !DILocation(line: 31, column: 44, scope: !11)
!30 = !DILocation(line: 36, column: 18, scope: !11)
!31 = !DILocation(line: 38, column: 18, scope: !11)
!32 = !DILocation(line: 40, column: 18, scope: !11)
!33 = !DILocation(line: 42, column: 20, scope: !11)
!34 = !DILocation(line: 44, column: 20, scope: !11)
!35 = !DILocation(line: 45, column: 28, scope: !11)
!36 = !DILocation(line: 52, column: 20, scope: !11)
!37 = !DILocation(line: 53, column: 20, scope: !11)
!38 = !DILocation(line: 54, column: 28, scope: !11)
!39 = !DILocation(line: 71, column: 20, scope: !11)
!40 = !DILocation(line: 72, column: 20, scope: !11)
!41 = !DILocation(line: 73, column: 20, scope: !11)
!42 = !DILocation(line: 75, column: 20, scope: !11)
!43 = !DILocation(line: 76, column: 20, scope: !11)
!44 = !DILocation(line: 77, column: 28, scope: !11)
!45 = !DILocation(line: 81, column: 20, scope: !11)
!46 = !DILocation(line: 82, column: 20, scope: !11)
!47 = !DILocation(line: 83, column: 28, scope: !11)
!48 = !DILocation(line: 47, column: 21, scope: !11)
!49 = !DILocation(line: 49, column: 20, scope: !11)
!50 = !DILocation(line: 55, column: 21, scope: !11)
!51 = !DILocation(line: 56, column: 20, scope: !11)
!52 = !DILocation(line: 60, column: 21, scope: !11)
!53 = !DILocation(line: 63, column: 21, scope: !11)
!54 = !DILocation(line: 78, column: 21, scope: !11)
!55 = !DILocation(line: 79, column: 20, scope: !11)
!56 = !DILocation(line: 84, column: 21, scope: !11)
!57 = !DILocation(line: 85, column: 20, scope: !11)
!58 = !DILocation(line: 89, column: 21, scope: !11)
!59 = !DILocation(line: 91, column: 21, scope: !11)
!60 = !DILocation(line: 95, column: 20, scope: !11)
!61 = !DILocation(line: 111, column: 20, scope: !11)
!62 = !DILocation(line: 102, column: 20, scope: !11)
!63 = !DILocation(line: 107, column: 20, scope: !11)
!64 = !DILocation(line: 112, column: 20, scope: !11)
!65 = !DILocation(line: 117, column: 20, scope: !11)
!66 = !DILocation(line: 116, column: 21, scope: !11)
!67 = !DILocation(line: 57, column: 20, scope: !11)
!68 = !DILocation(line: 86, column: 20, scope: !11)
!69 = !DILocation(line: 103, column: 20, scope: !11)
!70 = !DILocation(line: 104, column: 20, scope: !11)
!71 = !DILocation(line: 105, column: 20, scope: !11)
!72 = !DILocation(line: 108, column: 20, scope: !11)
!73 = !DILocation(line: 113, column: 20, scope: !11)
!74 = !DILocation(line: 114, column: 20, scope: !11)
!75 = !DILocation(line: 115, column: 20, scope: !11)
!76 = !DILocation(line: 118, column: 20, scope: !11)
!77 = !DILocation(line: 119, column: 35, scope: !11)
!78 = !DILocation(line: 123, column: 35, scope: !11)
!79 = !DILocation(line: 124, column: 49, scope: !11)
!80 = !DILocation(line: 125, column: 21, scope: !11)
!81 = !DILocation(line: 126, column: 35, scope: !11)
!82 = !DILocation(line: 129, column: 37, scope: !11)
!83 = !DILocation(line: 130, column: 51, scope: !11)
!84 = !DILocation(line: 131, column: 43, scope: !11)
!85 = !DILocation(line: 131, column: 41, scope: !11)
!86 = !DILocation(line: 131, column: 54, scope: !11)
!87 = !DILocation(line: 131, column: 51, scope: !11)
!88 = !DILocation(line: 131, column: 32, scope: !11)
!89 = !DILocation(line: 131, column: 59, scope: !11)
!90 = !DILocation(line: 136, column: 22, scope: !11)
!91 = !DILocation(line: 137, column: 37, scope: !11)
!92 = !DILocation(line: 140, column: 38, scope: !11)
!93 = !DILocation(line: 141, column: 51, scope: !11)
!94 = !DILocation(line: 142, column: 36, scope: !11)
!95 = !DILocation(line: 145, column: 38, scope: !11)
!96 = !DILocation(line: 146, column: 51, scope: !11)
!97 = !DILocation(line: 147, column: 43, scope: !11)
!98 = !DILocation(line: 147, column: 41, scope: !11)
!99 = !DILocation(line: 147, column: 52, scope: !11)
!100 = !DILocation(line: 147, column: 32, scope: !11)
!101 = !DILocation(line: 147, column: 60, scope: !11)
!102 = !DILocation(line: 152, column: 21, scope: !11)
!103 = !DILocation(line: 155, column: 38, scope: !11)
!104 = !DILocation(line: 158, column: 38, scope: !11)
!105 = !DILocation(line: 159, column: 51, scope: !11)
!106 = !DILocation(line: 160, column: 37, scope: !11)
!107 = !DILocation(line: 163, column: 38, scope: !11)
!108 = !DILocation(line: 164, column: 51, scope: !11)
!109 = !DILocation(line: 165, column: 43, scope: !11)
!110 = !DILocation(line: 165, column: 41, scope: !11)
!111 = !DILocation(line: 165, column: 52, scope: !11)
!112 = !DILocation(line: 165, column: 32, scope: !11)
!113 = !DILocation(line: 165, column: 60, scope: !11)
!114 = !DILocation(line: 167, column: 36, scope: !11)
!115 = !DILocation(line: 170, column: 38, scope: !11)
!116 = !DILocation(line: 171, column: 51, scope: !11)
!117 = !DILocation(line: 172, column: 22, scope: !11)
!118 = !DILocation(line: 173, column: 37, scope: !11)
!119 = !DILocation(line: 176, column: 38, scope: !11)
!120 = !DILocation(line: 177, column: 51, scope: !11)
!121 = !DILocation(line: 178, column: 43, scope: !11)
!122 = !DILocation(line: 178, column: 41, scope: !11)
!123 = !DILocation(line: 178, column: 52, scope: !11)
!124 = !DILocation(line: 178, column: 32, scope: !11)
!125 = !DILocation(line: 178, column: 60, scope: !11)
!126 = !DILocation(line: 183, column: 22, scope: !11)
!127 = !DILocation(line: 184, column: 37, scope: !11)
!128 = !DILocation(line: 187, column: 38, scope: !11)
!129 = !DILocation(line: 188, column: 51, scope: !11)
!130 = !DILocation(line: 189, column: 36, scope: !11)
!131 = !DILocation(line: 192, column: 38, scope: !11)
!132 = !DILocation(line: 193, column: 51, scope: !11)
!133 = !DILocation(line: 194, column: 43, scope: !11)
!134 = !DILocation(line: 194, column: 41, scope: !11)
!135 = !DILocation(line: 194, column: 52, scope: !11)
!136 = !DILocation(line: 194, column: 32, scope: !11)
!137 = !DILocation(line: 194, column: 60, scope: !11)
!138 = !DILocation(line: 199, column: 21, scope: !11)
!139 = !DILocation(line: 202, column: 38, scope: !11)
!140 = !DILocation(line: 205, column: 38, scope: !11)
!141 = !DILocation(line: 206, column: 51, scope: !11)
!142 = !DILocation(line: 207, column: 38, scope: !11)
!143 = !DILocation(line: 210, column: 38, scope: !11)
!144 = !DILocation(line: 211, column: 51, scope: !11)
!145 = !DILocation(line: 179, column: 21, scope: !11)
!146 = !DILocation(line: 195, column: 21, scope: !11)
!147 = !DILocation(line: 200, column: 22, scope: !11)
!148 = !DILocation(line: 201, column: 38, scope: !11)
!149 = !DILocation(line: 66, column: 20, scope: !11)
!150 = !DILocation(line: 196, column: 21, scope: !11)
!151 = !DILocation(line: 197, column: 37, scope: !11)
!152 = !DILocation(line: 198, column: 22, scope: !11)
!153 = !DILocation(line: 68, column: 20, scope: !11)
!154 = !DILocation(line: 180, column: 22, scope: !11)
!155 = !DILocation(line: 181, column: 37, scope: !11)
!156 = !DILocation(line: 182, column: 22, scope: !11)
!157 = !DILocation(line: 132, column: 21, scope: !11)
!158 = !DILocation(line: 148, column: 21, scope: !11)
!159 = !DILocation(line: 153, column: 22, scope: !11)
!160 = !DILocation(line: 154, column: 38, scope: !11)
!161 = !DILocation(line: 166, column: 22, scope: !11)
!162 = !DILocation(line: 94, column: 20, scope: !11)
!163 = !DILocation(line: 149, column: 21, scope: !11)
!164 = !DILocation(line: 150, column: 37, scope: !11)
!165 = !DILocation(line: 151, column: 22, scope: !11)
!166 = !DILocation(line: 96, column: 20, scope: !11)
!167 = !DILocation(line: 133, column: 22, scope: !11)
!168 = !DILocation(line: 134, column: 37, scope: !11)
!169 = !DILocation(line: 135, column: 22, scope: !11)
!170 = !DILocation(line: 87, column: 20, scope: !11)
!171 = !DILocation(line: 88, column: 20, scope: !11)
!172 = !DILocation(line: 97, column: 20, scope: !11)
!173 = !DILocation(line: 92, column: 35, scope: !11)
!174 = !DILocation(line: 90, column: 35, scope: !11)
!175 = !DILocation(line: 58, column: 20, scope: !11)
!176 = !DILocation(line: 59, column: 20, scope: !11)
!177 = !DILocation(line: 69, column: 20, scope: !11)
!178 = !DILocation(line: 64, column: 35, scope: !11)
!179 = !DILocation(line: 62, column: 35, scope: !11)
!180 = !DILocation(line: 212, column: 43, scope: !11)
!181 = !DILocation(line: 212, column: 41, scope: !11)
!182 = !DILocation(line: 212, column: 52, scope: !11)
!183 = !DILocation(line: 212, column: 32, scope: !11)
!184 = !DILocation(line: 212, column: 60, scope: !11)
!185 = !DILocation(line: 213, column: 22, scope: !11)
!186 = !DILocation(line: 214, column: 25, scope: !11)
!187 = !DILocation(line: 214, column: 37, scope: !11)
!188 = !DILocation(line: 215, column: 25, scope: !11)
!189 = !DILocation(line: 215, column: 37, scope: !11)
!190 = !DILocation(line: 216, column: 25, scope: !11)
!191 = !DILocation(line: 216, column: 37, scope: !11)
!192 = !DILocation(line: 70, column: 35, scope: !11)
!193 = !DILocation(line: 217, column: 25, scope: !11)
!194 = !DILocation(line: 217, column: 37, scope: !11)
!195 = !DILocation(line: 218, column: 25, scope: !11)
!196 = !DILocation(line: 218, column: 37, scope: !11)
!197 = !DILocation(line: 219, column: 25, scope: !11)
!198 = !DILocation(line: 219, column: 37, scope: !11)
!199 = !DILocation(line: 98, column: 35, scope: !11)
!200 = !DILocation(line: 220, column: 28, scope: !11)
!201 = !DILocation(line: 220, column: 41, scope: !11)
!202 = !DILocation(line: 221, column: 28, scope: !11)
!203 = !DILocation(line: 221, column: 41, scope: !11)
!204 = !DILocation(line: 222, column: 28, scope: !11)
!205 = !DILocation(line: 222, column: 41, scope: !11)
!206 = !DILocation(line: 223, column: 28, scope: !11)
!207 = !DILocation(line: 223, column: 41, scope: !11)
!208 = !DILocation(line: 224, column: 28, scope: !11)
!209 = !DILocation(line: 224, column: 41, scope: !11)
!210 = !DILocation(line: 225, column: 28, scope: !11)
!211 = !DILocation(line: 225, column: 41, scope: !11)
!212 = !DILocation(line: 225, column: 4, scope: !11)
