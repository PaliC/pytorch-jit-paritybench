; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 9, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 510, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %.frozen = freeze i32 %28, !dbg !14
  %29 = sdiv i32 %.frozen, 4096, !dbg !14
  %30 = srem i32 %29, 96, !dbg !15
  %31 = mul i32 %29, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %31, !dbg !16
  %.frozen36 = freeze i32 %28, !dbg !17
  %32 = sdiv i32 %.frozen36, 393216, !dbg !17
  %33 = icmp slt i32 %30, 24, !dbg !18
  %34 = mul i32 %32, 393216, !dbg !19
  %srem.decomposed = sub i32 %.frozen36, %34, !dbg !19
  %35 = mul nsw i32 %32, 98304, !dbg !20
  %36 = add nsw i32 %35, %srem.decomposed, !dbg !21
  %37 = sext i32 %36 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !23
  %40 = sext i32 %30 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %33, i32 0, i1 %33) #3, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %33, i32 0, i1 %33) #3, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %33, i32 0, i1 %33) #3, !dbg !27
  %46 = bitcast i32 %45 to float, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %33, i32 0, i1 %33) #3, !dbg !27
  %48 = bitcast i32 %47 to float, !dbg !27
  %49 = fadd float %46, 0x3EE4F8B580000000, !dbg !28
  %50 = fadd float %48, 0x3EE4F8B580000000, !dbg !28
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %51, 0, !dbg !29
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %52, 0, !dbg !29
  br i1 %.not.i, label %58, label %53, !dbg !29

53:                                               ; preds = %22
  br i1 %.not1.i, label %56, label %54, !dbg !29

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

58:                                               ; preds = %22
  br i1 %.not1.i, label %61, label %59, !dbg !29

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %54, %56, %59, %61
  %.0.i = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !29
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %63, 0, !dbg !29
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %64, 0, !dbg !29
  br i1 %.not.i1, label %70, label %65, !dbg !29

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !29

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !29

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %66, %68, %71, %73
  %.0.i3 = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !29
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %33, i32 0, i1 %33) #3, !dbg !32
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %33, i32 0, i1 %33) #3, !dbg !32
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !33
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %33, i32 0, i1 %33) #3, !dbg !34
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %33, i32 0, i1 %33) #3, !dbg !34
  %83 = add nsw i32 %30, -24, !dbg !35
  %84 = icmp ult i32 %83, 24, !dbg !35
  %85 = shl nsw i32 %83, 12, !dbg !36
  %86 = add nsw i32 %35, %.decomposed, !dbg !37
  %87 = add nsw i32 %86, %85, !dbg !38
  %88 = sext i32 %87 to i64, !dbg !39
  %89 = getelementptr float, ptr addrspace(1) %5, i64 %88, !dbg !39
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #3, !dbg !40
  %91 = sext i32 %83 to i64, !dbg !41
  %92 = getelementptr float, ptr addrspace(1) %6, i64 %91, !dbg !41
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %84, i32 0, i1 %84) #3, !dbg !42
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %84, i32 0, i1 %84) #3, !dbg !42
  %95 = getelementptr float, ptr addrspace(1) %7, i64 %91, !dbg !43
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %84, i32 0, i1 %84) #3, !dbg !44
  %97 = bitcast i32 %96 to float, !dbg !44
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %84, i32 0, i1 %84) #3, !dbg !44
  %99 = bitcast i32 %98 to float, !dbg !44
  %100 = fadd float %97, 0x3EE4F8B580000000, !dbg !45
  %101 = fadd float %99, 0x3EE4F8B580000000, !dbg !45
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i6 = icmp eq i32 %102, 0, !dbg !46
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i9 = icmp eq i32 %103, 0, !dbg !46
  br i1 %.not.i6, label %109, label %104, !dbg !46

104:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %107, label %105, !dbg !46

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

109:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %112, label %110, !dbg !46

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

__nv_sqrtf.exit10:                                ; preds = %105, %107, %110, %112
  %.0.i8 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !46
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i11 = icmp eq i32 %114, 0, !dbg !46
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i14 = icmp eq i32 %115, 0, !dbg !46
  br i1 %.not.i11, label %121, label %116, !dbg !46

116:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %119, label %117, !dbg !46

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

121:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %124, label %122, !dbg !46

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

__nv_sqrtf.exit15:                                ; preds = %117, %119, %122, %124
  %.0.i13 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !46
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !47
  %128 = getelementptr float, ptr addrspace(1) %8, i64 %91, !dbg !48
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %84, i32 0, i1 %84) #3, !dbg !49
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %84, i32 0, i1 %84) #3, !dbg !49
  %131 = getelementptr float, ptr addrspace(1) %9, i64 %91, !dbg !50
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %84, i32 0, i1 %84) #3, !dbg !51
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %84, i32 0, i1 %84) #3, !dbg !51
  %134 = add nsw i32 %30, -48, !dbg !52
  %135 = icmp ult i32 %134, 24, !dbg !52
  %136 = shl nsw i32 %134, 12, !dbg !53
  %137 = add nsw i32 %86, %136, !dbg !54
  %138 = sext i32 %137 to i64, !dbg !55
  %139 = getelementptr float, ptr addrspace(1) %10, i64 %138, !dbg !55
  %140 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %139, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #3, !dbg !56
  %141 = sext i32 %134 to i64, !dbg !57
  %142 = getelementptr float, ptr addrspace(1) %11, i64 %141, !dbg !57
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %135, i32 0, i1 %135) #3, !dbg !58
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %135, i32 0, i1 %135) #3, !dbg !58
  %145 = getelementptr float, ptr addrspace(1) %12, i64 %141, !dbg !59
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %135, i32 0, i1 %135) #3, !dbg !60
  %147 = bitcast i32 %146 to float, !dbg !60
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %135, i32 0, i1 %135) #3, !dbg !60
  %149 = bitcast i32 %148 to float, !dbg !60
  %150 = fadd float %147, 0x3EE4F8B580000000, !dbg !61
  %151 = fadd float %149, 0x3EE4F8B580000000, !dbg !61
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !62
  %.not.i16 = icmp eq i32 %152, 0, !dbg !62
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !62
  %.not1.i19 = icmp eq i32 %153, 0, !dbg !62
  br i1 %.not.i16, label %159, label %154, !dbg !62

154:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %157, label %155, !dbg !62

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #3, !dbg !62
  br label %__nv_sqrtf.exit20, !dbg !62

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #3, !dbg !62
  br label %__nv_sqrtf.exit20, !dbg !62

159:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %162, label %160, !dbg !62

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #3, !dbg !62
  br label %__nv_sqrtf.exit20, !dbg !62

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #3, !dbg !62
  br label %__nv_sqrtf.exit20, !dbg !62

__nv_sqrtf.exit20:                                ; preds = %155, %157, %160, %162
  %.0.i18 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !62
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !62
  %.not.i21 = icmp eq i32 %164, 0, !dbg !62
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !62
  %.not1.i24 = icmp eq i32 %165, 0, !dbg !62
  br i1 %.not.i21, label %171, label %166, !dbg !62

166:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %169, label %167, !dbg !62

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %151) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %151) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

171:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %174, label %172, !dbg !62

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %151) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %151) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

__nv_sqrtf.exit25:                                ; preds = %167, %169, %172, %174
  %.0.i23 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !62
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !63
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !63
  %178 = getelementptr float, ptr addrspace(1) %13, i64 %141, !dbg !64
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %135, i32 0, i1 %135) #3, !dbg !65
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %135, i32 0, i1 %135) #3, !dbg !65
  %181 = getelementptr float, ptr addrspace(1) %14, i64 %141, !dbg !66
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %135, i32 0, i1 %135) #3, !dbg !67
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %135, i32 0, i1 %135) #3, !dbg !67
  %184 = icmp sgt i32 %30, 71, !dbg !68
  %185 = add nsw i32 %30, -72, !dbg !69
  %186 = shl nsw i32 %185, 12, !dbg !70
  %187 = add nsw i32 %86, %186, !dbg !71
  %188 = sext i32 %187 to i64, !dbg !72
  %189 = getelementptr float, ptr addrspace(1) %15, i64 %188, !dbg !72
  %190 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %189, i1 %184, i32 0, i1 %184, i32 0, i1 %184) #3, !dbg !73
  %191 = sext i32 %185 to i64, !dbg !74
  %192 = getelementptr float, ptr addrspace(1) %16, i64 %191, !dbg !74
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %184, i32 0, i1 %184) #3, !dbg !75
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %184, i32 0, i1 %184) #3, !dbg !75
  %195 = getelementptr float, ptr addrspace(1) %17, i64 %191, !dbg !76
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %184, i32 0, i1 %184) #3, !dbg !77
  %197 = bitcast i32 %196 to float, !dbg !77
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %184, i32 0, i1 %184) #3, !dbg !77
  %199 = bitcast i32 %198 to float, !dbg !77
  %200 = fadd float %197, 0x3EE4F8B580000000, !dbg !78
  %201 = fadd float %199, 0x3EE4F8B580000000, !dbg !78
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i26 = icmp eq i32 %202, 0, !dbg !79
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i29 = icmp eq i32 %203, 0, !dbg !79
  br i1 %.not.i26, label %209, label %204, !dbg !79

204:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %207, label %205, !dbg !79

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %200) #3, !dbg !79
  br label %__nv_sqrtf.exit30, !dbg !79

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %200) #3, !dbg !79
  br label %__nv_sqrtf.exit30, !dbg !79

209:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %212, label %210, !dbg !79

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.f(float %200) #3, !dbg !79
  br label %__nv_sqrtf.exit30, !dbg !79

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.f(float %200) #3, !dbg !79
  br label %__nv_sqrtf.exit30, !dbg !79

__nv_sqrtf.exit30:                                ; preds = %205, %207, %210, %212
  %.0.i28 = phi float [ %206, %205 ], [ %208, %207 ], [ %211, %210 ], [ %213, %212 ], !dbg !79
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i31 = icmp eq i32 %214, 0, !dbg !79
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i34 = icmp eq i32 %215, 0, !dbg !79
  br i1 %.not.i31, label %221, label %216, !dbg !79

216:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %219, label %217, !dbg !79

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %201) #3, !dbg !79
  br label %__nv_sqrtf.exit35, !dbg !79

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %201) #3, !dbg !79
  br label %__nv_sqrtf.exit35, !dbg !79

221:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %224, label %222, !dbg !79

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.f(float %201) #3, !dbg !79
  br label %__nv_sqrtf.exit35, !dbg !79

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.f(float %201) #3, !dbg !79
  br label %__nv_sqrtf.exit35, !dbg !79

__nv_sqrtf.exit35:                                ; preds = %217, %219, %222, %224
  %.0.i33 = phi float [ %218, %217 ], [ %220, %219 ], [ %223, %222 ], [ %225, %224 ], !dbg !79
  %226 = extractvalue { i32, i32 } %190, 1, !dbg !73
  %227 = insertelement <8 x i32> poison, i32 %194, i64 0, !dbg !75
  %228 = insertelement <8 x i32> %227, i32 %193, i64 1, !dbg !75
  %229 = insertelement <8 x i32> %228, i32 %42, i64 2, !dbg !75
  %230 = insertelement <8 x i32> %229, i32 %43, i64 3, !dbg !75
  %231 = insertelement <8 x i32> %230, i32 %93, i64 4, !dbg !75
  %232 = insertelement <8 x i32> %231, i32 %94, i64 5, !dbg !75
  %233 = insertelement <8 x i32> %232, i32 %143, i64 6, !dbg !75
  %234 = insertelement <8 x i32> %233, i32 %144, i64 7, !dbg !75
  %235 = bitcast <8 x i32> %234 to <8 x float>, !dbg !75
  %236 = extractvalue { i32, i32 } %190, 0, !dbg !73
  %237 = extractvalue { i32, i32 } %140, 1, !dbg !56
  %238 = extractvalue { i32, i32 } %140, 0, !dbg !56
  %239 = extractvalue { i32, i32 } %90, 1, !dbg !40
  %240 = extractvalue { i32, i32 } %90, 0, !dbg !40
  %241 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %242 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !80
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !80
  %245 = getelementptr float, ptr addrspace(1) %18, i64 %191, !dbg !81
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %184, i32 0, i1 %184) #3, !dbg !82
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %184, i32 0, i1 %184) #3, !dbg !82
  %248 = getelementptr float, ptr addrspace(1) %19, i64 %191, !dbg !83
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %184, i32 0, i1 %184) #3, !dbg !84
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %184, i32 0, i1 %184) #3, !dbg !84
  %251 = insertelement <8 x i32> poison, i32 %226, i64 0, !dbg !73
  %252 = insertelement <8 x i32> %251, i32 %236, i64 1, !dbg !73
  %253 = insertelement <8 x i32> %252, i32 %242, i64 2, !dbg !73
  %254 = insertelement <8 x i32> %253, i32 %241, i64 3, !dbg !73
  %255 = insertelement <8 x i32> %254, i32 %240, i64 4, !dbg !73
  %256 = insertelement <8 x i32> %255, i32 %239, i64 5, !dbg !73
  %257 = insertelement <8 x i32> %256, i32 %238, i64 6, !dbg !73
  %258 = insertelement <8 x i32> %257, i32 %237, i64 7, !dbg !73
  %259 = bitcast <8 x i32> %258 to <8 x float>, !dbg !73
  %260 = fsub <8 x float> %259, %235, !dbg !85
  %261 = insertelement <8 x float> poison, float %244, i64 0, !dbg !86
  %262 = insertelement <8 x float> %261, float %243, i64 1, !dbg !86
  %263 = insertelement <8 x float> %262, float %75, i64 2, !dbg !86
  %264 = insertelement <8 x float> %263, float %76, i64 3, !dbg !86
  %265 = insertelement <8 x float> %264, float %126, i64 4, !dbg !86
  %266 = insertelement <8 x float> %265, float %127, i64 5, !dbg !86
  %267 = insertelement <8 x float> %266, float %176, i64 6, !dbg !86
  %268 = insertelement <8 x float> %267, float %177, i64 7, !dbg !86
  %269 = fmul <8 x float> %260, %268, !dbg !86
  %270 = insertelement <8 x i32> poison, i32 %247, i64 0, !dbg !82
  %271 = insertelement <8 x i32> %270, i32 %246, i64 1, !dbg !82
  %272 = insertelement <8 x i32> %271, i32 %78, i64 2, !dbg !82
  %273 = insertelement <8 x i32> %272, i32 %79, i64 3, !dbg !82
  %274 = insertelement <8 x i32> %273, i32 %129, i64 4, !dbg !82
  %275 = insertelement <8 x i32> %274, i32 %130, i64 5, !dbg !82
  %276 = insertelement <8 x i32> %275, i32 %179, i64 6, !dbg !82
  %277 = insertelement <8 x i32> %276, i32 %180, i64 7, !dbg !82
  %278 = bitcast <8 x i32> %277 to <8 x float>, !dbg !82
  %279 = fmul <8 x float> %269, %278, !dbg !87
  %280 = insertelement <8 x i32> poison, i32 %250, i64 0, !dbg !84
  %281 = insertelement <8 x i32> %280, i32 %249, i64 1, !dbg !84
  %282 = insertelement <8 x i32> %281, i32 %81, i64 2, !dbg !84
  %283 = insertelement <8 x i32> %282, i32 %82, i64 3, !dbg !84
  %284 = insertelement <8 x i32> %283, i32 %132, i64 4, !dbg !84
  %285 = insertelement <8 x i32> %284, i32 %133, i64 5, !dbg !84
  %286 = insertelement <8 x i32> %285, i32 %182, i64 6, !dbg !84
  %287 = insertelement <8 x i32> %286, i32 %183, i64 7, !dbg !84
  %288 = bitcast <8 x i32> %287 to <8 x float>, !dbg !84
  %289 = fadd <8 x float> %279, %288, !dbg !88
  %290 = fcmp olt <8 x float> %289, zeroinitializer, !dbg !89
  %291 = extractelement <8 x i1> %290, i64 7, !dbg !93
  %292 = extractelement <8 x float> %289, i64 7, !dbg !93
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !93
  %294 = extractelement <8 x i1> %290, i64 6, !dbg !93
  %295 = extractelement <8 x float> %289, i64 6, !dbg !93
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !93
  %297 = extractelement <8 x i1> %290, i64 5, !dbg !95
  %298 = extractelement <8 x float> %289, i64 5, !dbg !95
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !95
  %300 = extractelement <8 x i1> %290, i64 4, !dbg !95
  %301 = extractelement <8 x float> %289, i64 4, !dbg !95
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !95
  %303 = extractelement <8 x i1> %290, i64 3, !dbg !97
  %304 = extractelement <8 x float> %289, i64 3, !dbg !97
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !97
  %306 = extractelement <8 x i1> %290, i64 2, !dbg !97
  %307 = extractelement <8 x float> %289, i64 2, !dbg !97
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !97
  %309 = extractelement <8 x i1> %290, i64 1, !dbg !99
  %310 = extractelement <8 x float> %289, i64 1, !dbg !99
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !99
  %312 = extractelement <8 x i1> %290, i64 0, !dbg !99
  %313 = extractelement <8 x float> %289, i64 0, !dbg !99
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !99
  %315 = select i1 %184, float %311, float 0.000000e+00, !dbg !100
  %316 = select i1 %184, float %314, float 0.000000e+00, !dbg !100
  %317 = select i1 %135, float %296, float %315, !dbg !101
  %318 = select i1 %135, float %293, float %316, !dbg !101
  %319 = select i1 %84, float %302, float %317, !dbg !101
  %320 = select i1 %84, float %299, float %318, !dbg !101
  %321 = select i1 %33, float %308, float %319, !dbg !101
  %322 = select i1 %33, float %305, float %320, !dbg !101
  %323 = sext i32 %28 to i64, !dbg !102
  %324 = getelementptr float, ptr addrspace(1) %20, i64 %323, !dbg !102
  %325 = bitcast float %321 to i32, !dbg !103
  %326 = bitcast float %322 to i32, !dbg !103
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %325, i32 %326, ptr addrspace(1) %324, i1 true) #3, !dbg !103
  ret void, !dbg !104
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crqybxvcnskpbiuvgwvw2ankdaivf7houhv54ixu2h7eutqsdem7.py", directory: "inductor_cache/rq")
!4 = !{ptr @triton_poi_fused_cat_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_5", linkageName: "triton_poi_fused_cat_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 53, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 58, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 19, scope: !7)
!29 = !DILocation(line: 39, column: 27, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 56, column: 20, scope: !7)
!36 = !DILocation(line: 57, column: 42, scope: !7)
!37 = !DILocation(line: 57, column: 36, scope: !7)
!38 = !DILocation(line: 57, column: 56, scope: !7)
!39 = !DILocation(line: 57, column: 31, scope: !7)
!40 = !DILocation(line: 57, column: 67, scope: !7)
!41 = !DILocation(line: 58, column: 31, scope: !7)
!42 = !DILocation(line: 58, column: 44, scope: !7)
!43 = !DILocation(line: 60, column: 31, scope: !7)
!44 = !DILocation(line: 60, column: 44, scope: !7)
!45 = !DILocation(line: 62, column: 20, scope: !7)
!46 = !DILocation(line: 63, column: 27, scope: !7)
!47 = !DILocation(line: 65, column: 20, scope: !7)
!48 = !DILocation(line: 69, column: 31, scope: !7)
!49 = !DILocation(line: 69, column: 44, scope: !7)
!50 = !DILocation(line: 71, column: 31, scope: !7)
!51 = !DILocation(line: 71, column: 44, scope: !7)
!52 = !DILocation(line: 80, column: 20, scope: !7)
!53 = !DILocation(line: 81, column: 43, scope: !7)
!54 = !DILocation(line: 81, column: 57, scope: !7)
!55 = !DILocation(line: 81, column: 32, scope: !7)
!56 = !DILocation(line: 81, column: 68, scope: !7)
!57 = !DILocation(line: 82, column: 32, scope: !7)
!58 = !DILocation(line: 82, column: 45, scope: !7)
!59 = !DILocation(line: 84, column: 32, scope: !7)
!60 = !DILocation(line: 84, column: 45, scope: !7)
!61 = !DILocation(line: 86, column: 20, scope: !7)
!62 = !DILocation(line: 87, column: 27, scope: !7)
!63 = !DILocation(line: 89, column: 20, scope: !7)
!64 = !DILocation(line: 93, column: 32, scope: !7)
!65 = !DILocation(line: 93, column: 45, scope: !7)
!66 = !DILocation(line: 95, column: 32, scope: !7)
!67 = !DILocation(line: 95, column: 45, scope: !7)
!68 = !DILocation(line: 101, column: 20, scope: !7)
!69 = !DILocation(line: 104, column: 51, scope: !7)
!70 = !DILocation(line: 104, column: 43, scope: !7)
!71 = !DILocation(line: 104, column: 57, scope: !7)
!72 = !DILocation(line: 104, column: 32, scope: !7)
!73 = !DILocation(line: 104, column: 68, scope: !7)
!74 = !DILocation(line: 105, column: 32, scope: !7)
!75 = !DILocation(line: 105, column: 45, scope: !7)
!76 = !DILocation(line: 107, column: 32, scope: !7)
!77 = !DILocation(line: 107, column: 45, scope: !7)
!78 = !DILocation(line: 109, column: 20, scope: !7)
!79 = !DILocation(line: 110, column: 27, scope: !7)
!80 = !DILocation(line: 112, column: 20, scope: !7)
!81 = !DILocation(line: 116, column: 32, scope: !7)
!82 = !DILocation(line: 116, column: 45, scope: !7)
!83 = !DILocation(line: 118, column: 32, scope: !7)
!84 = !DILocation(line: 118, column: 45, scope: !7)
!85 = !DILocation(line: 106, column: 20, scope: !7)
!86 = !DILocation(line: 115, column: 20, scope: !7)
!87 = !DILocation(line: 117, column: 20, scope: !7)
!88 = !DILocation(line: 119, column: 20, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 121, column: 42, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !94)
!94 = !DILocation(line: 98, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !96)
!96 = !DILocation(line: 74, column: 42, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !98)
!98 = !DILocation(line: 50, column: 42, scope: !7)
!99 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!100 = !DILocation(line: 123, column: 35, scope: !7)
!101 = !DILocation(line: 0, scope: !7)
!102 = !DILocation(line: 127, column: 25, scope: !7)
!103 = !DILocation(line: 127, column: 37, scope: !7)
!104 = !DILocation(line: 127, column: 4, scope: !7)
