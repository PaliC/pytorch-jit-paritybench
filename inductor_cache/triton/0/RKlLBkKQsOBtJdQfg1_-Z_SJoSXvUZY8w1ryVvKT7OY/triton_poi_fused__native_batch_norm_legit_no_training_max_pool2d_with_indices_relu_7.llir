; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 3, !dbg !12
  %13 = and i32 %12, 1016, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %16 = sdiv i32 %.frozen, 128, !dbg !14
  %17 = mul i32 %16, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %17, !dbg !15
  %18 = srem i32 %15, 128, !dbg !15
  %19 = srem i32 %16, 16, !dbg !16
  %20 = sdiv i32 %14, 2048, !dbg !17
  %21 = shl nsw i32 %19, 8, !dbg !18
  %22 = shl i32 %20, 13, !dbg !19
  %23 = add i32 %21, %22, !dbg !20
  %24 = add i32 %23, %.decomposed, !dbg !21
  %25 = add i32 %23, %18, !dbg !21
  %26 = sext i32 %24 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !23
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #4, !dbg !23
  %32 = or disjoint i32 %23, 128, !dbg !24
  %33 = add nsw i32 %32, %.decomposed, !dbg !25
  %34 = add nsw i32 %32, %18, !dbg !25
  %35 = sext i32 %33 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = sext i32 %34 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !26
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #4, !dbg !27
  %41 = add i32 %23, 4096, !dbg !28
  %42 = add i32 %41, %.decomposed, !dbg !29
  %43 = add i32 %41, %18, !dbg !29
  %44 = sext i32 %42 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !30
  %46 = sext i32 %43 to i64, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !30
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !31
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #4, !dbg !31
  %50 = add i32 %23, 4224, !dbg !32
  %51 = add nsw i32 %50, %.decomposed, !dbg !33
  %52 = add nsw i32 %50, %18, !dbg !33
  %53 = sext i32 %51 to i64, !dbg !34
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !34
  %55 = sext i32 %52 to i64, !dbg !34
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !34
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #4, !dbg !35
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !35
  %59 = sext i32 %.decomposed to i64, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !36
  %61 = sext i32 %18 to i64, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !36
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !37
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !38
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !38
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !39
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !39
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !39
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !39
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !39
  %72 = bitcast i32 %68 to float, !dbg !39
  %73 = bitcast i32 %69 to float, !dbg !39
  %74 = bitcast i32 %70 to float, !dbg !39
  %75 = bitcast i32 %71 to float, !dbg !39
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !39
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !39
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !39
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !39
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !39
  %81 = bitcast i32 %77 to float, !dbg !39
  %82 = bitcast i32 %78 to float, !dbg !39
  %83 = bitcast i32 %79 to float, !dbg !39
  %84 = bitcast i32 %80 to float, !dbg !39
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !40
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !40
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #4, !dbg !41
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #4, !dbg !41
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !42
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !42
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 true) #4, !dbg !43
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #4, !dbg !43
  %93 = fadd float %72, 0x3EE4F8B580000000, !dbg !44
  %94 = fadd float %73, 0x3EE4F8B580000000, !dbg !44
  %95 = fadd float %74, 0x3EE4F8B580000000, !dbg !44
  %96 = fadd float %75, 0x3EE4F8B580000000, !dbg !44
  %97 = fadd float %81, 0x3EE4F8B580000000, !dbg !44
  %98 = fadd float %82, 0x3EE4F8B580000000, !dbg !44
  %99 = fadd float %83, 0x3EE4F8B580000000, !dbg !44
  %100 = fadd float %84, 0x3EE4F8B580000000, !dbg !44
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %101, 0, !dbg !45
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %102, 0, !dbg !45
  br i1 %.not.i, label %108, label %103, !dbg !45

103:                                              ; preds = %8
  br i1 %.not1.i, label %106, label %104, !dbg !45

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

108:                                              ; preds = %8
  br i1 %.not1.i, label %111, label %109, !dbg !45

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %104, %106, %109, %111
  %.0.i = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !45
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i15 = icmp eq i32 %113, 0, !dbg !45
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i18 = icmp eq i32 %114, 0, !dbg !45
  br i1 %.not.i15, label %120, label %115, !dbg !45

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %118, label %116, !dbg !45

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #4, !dbg !45
  br label %__nv_sqrtf.exit19, !dbg !45

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #4, !dbg !45
  br label %__nv_sqrtf.exit19, !dbg !45

120:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %123, label %121, !dbg !45

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #4, !dbg !45
  br label %__nv_sqrtf.exit19, !dbg !45

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #4, !dbg !45
  br label %__nv_sqrtf.exit19, !dbg !45

__nv_sqrtf.exit19:                                ; preds = %116, %118, %121, %123
  %.0.i17 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !45
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i20 = icmp eq i32 %125, 0, !dbg !45
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i23 = icmp eq i32 %126, 0, !dbg !45
  br i1 %.not.i20, label %132, label %127, !dbg !45

127:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %130, label %128, !dbg !45

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #4, !dbg !45
  br label %__nv_sqrtf.exit24, !dbg !45

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #4, !dbg !45
  br label %__nv_sqrtf.exit24, !dbg !45

132:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %135, label %133, !dbg !45

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #4, !dbg !45
  br label %__nv_sqrtf.exit24, !dbg !45

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #4, !dbg !45
  br label %__nv_sqrtf.exit24, !dbg !45

__nv_sqrtf.exit24:                                ; preds = %128, %130, %133, %135
  %.0.i22 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !45
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i25 = icmp eq i32 %137, 0, !dbg !45
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i28 = icmp eq i32 %138, 0, !dbg !45
  br i1 %.not.i25, label %144, label %139, !dbg !45

139:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %142, label %140, !dbg !45

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #4, !dbg !45
  br label %__nv_sqrtf.exit29, !dbg !45

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #4, !dbg !45
  br label %__nv_sqrtf.exit29, !dbg !45

144:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %147, label %145, !dbg !45

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #4, !dbg !45
  br label %__nv_sqrtf.exit29, !dbg !45

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #4, !dbg !45
  br label %__nv_sqrtf.exit29, !dbg !45

__nv_sqrtf.exit29:                                ; preds = %140, %142, %145, %147
  %.0.i27 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !45
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i30 = icmp eq i32 %149, 0, !dbg !45
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i33 = icmp eq i32 %150, 0, !dbg !45
  br i1 %.not.i30, label %156, label %151, !dbg !45

151:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %154, label %152, !dbg !45

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #4, !dbg !45
  br label %__nv_sqrtf.exit34, !dbg !45

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #4, !dbg !45
  br label %__nv_sqrtf.exit34, !dbg !45

156:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %159, label %157, !dbg !45

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #4, !dbg !45
  br label %__nv_sqrtf.exit34, !dbg !45

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #4, !dbg !45
  br label %__nv_sqrtf.exit34, !dbg !45

__nv_sqrtf.exit34:                                ; preds = %152, %154, %157, %159
  %.0.i32 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !45
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i35 = icmp eq i32 %161, 0, !dbg !45
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i38 = icmp eq i32 %162, 0, !dbg !45
  br i1 %.not.i35, label %168, label %163, !dbg !45

163:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %166, label %164, !dbg !45

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #4, !dbg !45
  br label %__nv_sqrtf.exit39, !dbg !45

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #4, !dbg !45
  br label %__nv_sqrtf.exit39, !dbg !45

168:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %171, label %169, !dbg !45

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #4, !dbg !45
  br label %__nv_sqrtf.exit39, !dbg !45

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #4, !dbg !45
  br label %__nv_sqrtf.exit39, !dbg !45

__nv_sqrtf.exit39:                                ; preds = %164, %166, %169, %171
  %.0.i37 = phi float [ %165, %164 ], [ %167, %166 ], [ %170, %169 ], [ %172, %171 ], !dbg !45
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i40 = icmp eq i32 %173, 0, !dbg !45
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i43 = icmp eq i32 %174, 0, !dbg !45
  br i1 %.not.i40, label %180, label %175, !dbg !45

175:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %178, label %176, !dbg !45

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #4, !dbg !45
  br label %__nv_sqrtf.exit44, !dbg !45

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #4, !dbg !45
  br label %__nv_sqrtf.exit44, !dbg !45

180:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %183, label %181, !dbg !45

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #4, !dbg !45
  br label %__nv_sqrtf.exit44, !dbg !45

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #4, !dbg !45
  br label %__nv_sqrtf.exit44, !dbg !45

__nv_sqrtf.exit44:                                ; preds = %176, %178, %181, %183
  %.0.i42 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !45
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i45 = icmp eq i32 %185, 0, !dbg !45
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i48 = icmp eq i32 %186, 0, !dbg !45
  br i1 %.not.i45, label %192, label %187, !dbg !45

187:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %190, label %188, !dbg !45

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #4, !dbg !45
  br label %__nv_sqrtf.exit49, !dbg !45

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #4, !dbg !45
  br label %__nv_sqrtf.exit49, !dbg !45

192:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %195, label %193, !dbg !45

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #4, !dbg !45
  br label %__nv_sqrtf.exit49, !dbg !45

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #4, !dbg !45
  br label %__nv_sqrtf.exit49, !dbg !45

__nv_sqrtf.exit49:                                ; preds = %188, %190, %193, %195
  %.0.i47 = phi float [ %189, %188 ], [ %191, %190 ], [ %194, %193 ], [ %196, %195 ], !dbg !45
  %197 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %198 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %199 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !31
  %200 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !35
  %201 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !37
  %202 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %203 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %204 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !31
  %205 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !35
  %206 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !37
  %207 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %208 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %209 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !31
  %210 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !35
  %211 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !37
  %212 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %213 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %214 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !31
  %215 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !35
  %216 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !37
  %217 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !27
  %218 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %219 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !31
  %220 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !35
  %221 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !37
  %222 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !27
  %223 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %224 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !31
  %225 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !35
  %226 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !37
  %227 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !27
  %228 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %229 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !31
  %230 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !35
  %231 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !37
  %232 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !27
  %233 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %234 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !31
  %235 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !35
  %236 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !37
  %237 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !35
  %238 = insertelement <4 x i32> %237, i32 %210, i64 1, !dbg !35
  %239 = insertelement <4 x i32> %238, i32 %205, i64 2, !dbg !35
  %240 = insertelement <4 x i32> %239, i32 %200, i64 3, !dbg !35
  %241 = bitcast <4 x i32> %240 to <4 x float>, !dbg !35
  %242 = insertelement <4 x i32> poison, i32 %212, i64 0, !dbg !27
  %243 = insertelement <4 x i32> %242, i32 %207, i64 1, !dbg !27
  %244 = insertelement <4 x i32> %243, i32 %202, i64 2, !dbg !27
  %245 = insertelement <4 x i32> %244, i32 %197, i64 3, !dbg !27
  %246 = bitcast <4 x i32> %245 to <4 x float>, !dbg !27
  %247 = insertelement <4 x i32> poison, i32 %213, i64 0, !dbg !23
  %248 = insertelement <4 x i32> %247, i32 %208, i64 1, !dbg !23
  %249 = insertelement <4 x i32> %248, i32 %203, i64 2, !dbg !23
  %250 = insertelement <4 x i32> %249, i32 %198, i64 3, !dbg !23
  %251 = bitcast <4 x i32> %250 to <4 x float>, !dbg !23
  %252 = fcmp ogt <4 x float> %246, %251, !dbg !46
  %253 = fcmp uno <4 x float> %246, zeroinitializer, !dbg !47
  %254 = or <4 x i1> %252, %253, !dbg !51
  %.v = select <4 x i1> %254, <4 x i32> %245, <4 x i32> %250, !dbg !52
  %255 = bitcast <4 x i32> %.v to <4 x float>, !dbg !52
  %256 = insertelement <4 x i32> poison, i32 %214, i64 0, !dbg !31
  %257 = insertelement <4 x i32> %256, i32 %209, i64 1, !dbg !31
  %258 = insertelement <4 x i32> %257, i32 %204, i64 2, !dbg !31
  %259 = insertelement <4 x i32> %258, i32 %199, i64 3, !dbg !31
  %260 = bitcast <4 x i32> %259 to <4 x float>, !dbg !31
  %261 = fcmp olt <4 x float> %255, %260, !dbg !53
  %262 = fcmp uno <4 x float> %260, zeroinitializer, !dbg !54
  %263 = or <4 x i1> %262, %261, !dbg !56
  %.v50 = select <4 x i1> %263, <4 x i32> %259, <4 x i32> %.v, !dbg !57
  %264 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !57
  %265 = fcmp olt <4 x float> %264, %241, !dbg !58
  %266 = zext <4 x i1> %252 to <4 x i8>, !dbg !59
  %267 = select <4 x i1> %261, <4 x i8> splat (i8 2), <4 x i8> %266, !dbg !60
  %268 = select <4 x i1> %265, <4 x i8> splat (i8 3), <4 x i8> %267, !dbg !61
  %269 = insertelement <4 x i32> poison, i32 %235, i64 0, !dbg !35
  %270 = insertelement <4 x i32> %269, i32 %230, i64 1, !dbg !35
  %271 = insertelement <4 x i32> %270, i32 %225, i64 2, !dbg !35
  %272 = insertelement <4 x i32> %271, i32 %220, i64 3, !dbg !35
  %273 = bitcast <4 x i32> %272 to <4 x float>, !dbg !35
  %274 = insertelement <4 x i32> poison, i32 %232, i64 0, !dbg !27
  %275 = insertelement <4 x i32> %274, i32 %227, i64 1, !dbg !27
  %276 = insertelement <4 x i32> %275, i32 %222, i64 2, !dbg !27
  %277 = insertelement <4 x i32> %276, i32 %217, i64 3, !dbg !27
  %278 = bitcast <4 x i32> %277 to <4 x float>, !dbg !27
  %279 = insertelement <4 x i32> poison, i32 %233, i64 0, !dbg !23
  %280 = insertelement <4 x i32> %279, i32 %228, i64 1, !dbg !23
  %281 = insertelement <4 x i32> %280, i32 %223, i64 2, !dbg !23
  %282 = insertelement <4 x i32> %281, i32 %218, i64 3, !dbg !23
  %283 = bitcast <4 x i32> %282 to <4 x float>, !dbg !23
  %284 = fcmp ogt <4 x float> %278, %283, !dbg !46
  %285 = fcmp uno <4 x float> %278, zeroinitializer, !dbg !47
  %286 = or <4 x i1> %284, %285, !dbg !51
  %.v51 = select <4 x i1> %286, <4 x i32> %277, <4 x i32> %282, !dbg !52
  %287 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !52
  %288 = insertelement <4 x i32> poison, i32 %234, i64 0, !dbg !31
  %289 = insertelement <4 x i32> %288, i32 %229, i64 1, !dbg !31
  %290 = insertelement <4 x i32> %289, i32 %224, i64 2, !dbg !31
  %291 = insertelement <4 x i32> %290, i32 %219, i64 3, !dbg !31
  %292 = bitcast <4 x i32> %291 to <4 x float>, !dbg !31
  %293 = fcmp olt <4 x float> %287, %292, !dbg !53
  %294 = fcmp uno <4 x float> %292, zeroinitializer, !dbg !54
  %295 = or <4 x i1> %294, %293, !dbg !56
  %.v52 = select <4 x i1> %295, <4 x i32> %291, <4 x i32> %.v51, !dbg !57
  %296 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !57
  %297 = fcmp olt <4 x float> %296, %273, !dbg !58
  %298 = zext <4 x i1> %284 to <4 x i8>, !dbg !59
  %299 = select <4 x i1> %293, <4 x i8> splat (i8 2), <4 x i8> %298, !dbg !60
  %300 = select <4 x i1> %297, <4 x i8> splat (i8 3), <4 x i8> %299, !dbg !61
  %301 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !43
  %302 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !43
  %303 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !43
  %304 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !43
  %305 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !43
  %306 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !43
  %307 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !43
  %308 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !43
  %309 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !41
  %310 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !41
  %311 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !41
  %312 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !41
  %313 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !41
  %314 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !41
  %315 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !41
  %316 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !41
  %317 = shl i32 %11, 2, !dbg !12
  %318 = and i32 %317, 508, !dbg !12
  %319 = or disjoint i32 %318, 512, !dbg !12
  %320 = or disjoint i32 %10, %319, !dbg !13
  %321 = or disjoint i32 %10, %318, !dbg !13
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !62
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !62
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !62
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !62
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !62
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !62
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !62
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !62
  %330 = insertelement <8 x i32> poison, i32 %201, i64 0, !dbg !37
  %331 = insertelement <8 x i32> %330, i32 %206, i64 1, !dbg !37
  %332 = insertelement <8 x i32> %331, i32 %211, i64 2, !dbg !37
  %333 = insertelement <8 x i32> %332, i32 %216, i64 3, !dbg !37
  %334 = insertelement <8 x i32> %333, i32 %221, i64 4, !dbg !37
  %335 = insertelement <8 x i32> %334, i32 %226, i64 5, !dbg !37
  %336 = insertelement <8 x i32> %335, i32 %231, i64 6, !dbg !37
  %337 = insertelement <8 x i32> %336, i32 %236, i64 7, !dbg !37
  %338 = bitcast <8 x i32> %337 to <8 x float>, !dbg !37
  %339 = shufflevector <4 x float> %241, <4 x float> %273, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !63
  %340 = fcmp uno <8 x float> %339, zeroinitializer, !dbg !63
  %341 = shufflevector <4 x i1> %265, <4 x i1> %297, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !65
  %342 = or <8 x i1> %340, %341, !dbg !65
  %343 = shufflevector <4 x float> %264, <4 x float> %296, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !66
  %344 = select <8 x i1> %342, <8 x float> %339, <8 x float> %343, !dbg !66
  %345 = fsub <8 x float> %344, %338, !dbg !67
  %346 = insertelement <8 x i32> poison, i32 %301, i64 0, !dbg !43
  %347 = insertelement <8 x i32> %346, i32 %302, i64 1, !dbg !43
  %348 = insertelement <8 x i32> %347, i32 %303, i64 2, !dbg !43
  %349 = insertelement <8 x i32> %348, i32 %304, i64 3, !dbg !43
  %350 = insertelement <8 x i32> %349, i32 %305, i64 4, !dbg !43
  %351 = insertelement <8 x i32> %350, i32 %306, i64 5, !dbg !43
  %352 = insertelement <8 x i32> %351, i32 %307, i64 6, !dbg !43
  %353 = insertelement <8 x i32> %352, i32 %308, i64 7, !dbg !43
  %354 = bitcast <8 x i32> %353 to <8 x float>, !dbg !43
  %355 = insertelement <8 x i32> poison, i32 %309, i64 0, !dbg !41
  %356 = insertelement <8 x i32> %355, i32 %310, i64 1, !dbg !41
  %357 = insertelement <8 x i32> %356, i32 %311, i64 2, !dbg !41
  %358 = insertelement <8 x i32> %357, i32 %312, i64 3, !dbg !41
  %359 = insertelement <8 x i32> %358, i32 %313, i64 4, !dbg !41
  %360 = insertelement <8 x i32> %359, i32 %314, i64 5, !dbg !41
  %361 = insertelement <8 x i32> %360, i32 %315, i64 6, !dbg !41
  %362 = insertelement <8 x i32> %361, i32 %316, i64 7, !dbg !41
  %363 = bitcast <8 x i32> %362 to <8 x float>, !dbg !41
  %364 = insertelement <8 x float> poison, float %329, i64 0, !dbg !68
  %365 = insertelement <8 x float> %364, float %328, i64 1, !dbg !68
  %366 = insertelement <8 x float> %365, float %327, i64 2, !dbg !68
  %367 = insertelement <8 x float> %366, float %326, i64 3, !dbg !68
  %368 = insertelement <8 x float> %367, float %325, i64 4, !dbg !68
  %369 = insertelement <8 x float> %368, float %324, i64 5, !dbg !68
  %370 = insertelement <8 x float> %369, float %323, i64 6, !dbg !68
  %371 = insertelement <8 x float> %370, float %322, i64 7, !dbg !68
  %372 = fmul <8 x float> %345, %371, !dbg !68
  %373 = fmul <8 x float> %372, %363, !dbg !69
  %374 = fadd <8 x float> %373, %354, !dbg !70
  %375 = fcmp olt <8 x float> %374, zeroinitializer, !dbg !71
  %376 = extractelement <8 x i1> %375, i64 7, !dbg !73
  %377 = extractelement <8 x i1> %375, i64 6, !dbg !73
  %378 = extractelement <8 x i1> %375, i64 5, !dbg !73
  %379 = extractelement <8 x i1> %375, i64 4, !dbg !73
  %380 = extractelement <8 x i1> %375, i64 3, !dbg !73
  %381 = extractelement <8 x i1> %375, i64 2, !dbg !73
  %382 = extractelement <8 x i1> %375, i64 1, !dbg !73
  %383 = extractelement <8 x i1> %375, i64 0, !dbg !73
  %384 = sext i32 %14 to i64, !dbg !74
  %385 = getelementptr i8, ptr addrspace(1) %5, i64 %384, !dbg !74
  %386 = bitcast <4 x i8> %300 to i32, !dbg !75
  %387 = bitcast <4 x i8> %268 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %386, i32 %387, ptr addrspace(1) %385, i1 true) #4, !dbg !75
  %388 = sext i32 %321 to i64, !dbg !76
  %389 = getelementptr float, ptr addrspace(1) %6, i64 %388, !dbg !76
  %390 = sext i32 %320 to i64, !dbg !76
  %391 = getelementptr float, ptr addrspace(1) %6, i64 %390, !dbg !76
  %392 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !77
  %bc = bitcast <8 x float> %374 to <8 x i32>, !dbg !77
  %393 = extractelement <8 x i32> %bc, i64 7, !dbg !77
  %394 = select i1 %376, i32 0, i32 %393, !dbg !73
  %bc53 = bitcast <8 x float> %374 to <8 x i32>, !dbg !77
  %395 = extractelement <8 x i32> %bc53, i64 6, !dbg !77
  %396 = select i1 %377, i32 0, i32 %395, !dbg !73
  %bc54 = bitcast <8 x float> %374 to <8 x i32>, !dbg !77
  %397 = extractelement <8 x i32> %bc54, i64 5, !dbg !77
  %398 = select i1 %378, i32 0, i32 %397, !dbg !73
  %bc55 = bitcast <8 x float> %374 to <8 x i32>, !dbg !77
  %399 = extractelement <8 x i32> %bc55, i64 4, !dbg !77
  %400 = select i1 %379, i32 0, i32 %399, !dbg !73
  %bc56 = bitcast <8 x float> %374 to <8 x i32>, !dbg !77
  %401 = extractelement <8 x i32> %bc56, i64 3, !dbg !77
  %402 = select i1 %380, i32 0, i32 %401, !dbg !73
  %bc57 = bitcast <8 x float> %374 to <8 x i32>, !dbg !77
  %403 = extractelement <8 x i32> %bc57, i64 2, !dbg !77
  %404 = select i1 %381, i32 0, i32 %403, !dbg !73
  %bc58 = bitcast <8 x float> %374 to <8 x i32>, !dbg !77
  %405 = extractelement <8 x i32> %bc58, i64 1, !dbg !77
  %406 = select i1 %382, i32 0, i32 %405, !dbg !73
  %bc59 = bitcast <8 x float> %374 to <8 x i32>, !dbg !77
  %407 = extractelement <8 x i32> %bc59, i64 0, !dbg !77
  %408 = select i1 %383, i32 0, i32 %407, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %392, i32 %394, i32 %396, i32 %398, i32 %400, i1 true) #4, !dbg !77
  %409 = getelementptr inbounds i8, ptr addrspace(3) %392, i32 16, !dbg !77
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %409, i32 %402, i32 %404, i32 %406, i32 %408, i1 true) #4, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %410 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !77
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %319, !dbg !77
  %412 = load <4 x i32>, ptr addrspace(3) %411, align 16, !dbg !77
  %.extract = load i32, ptr addrspace(3) %410, align 16, !dbg !77
  %413 = getelementptr inbounds i8, ptr addrspace(3) %410, i32 4, !dbg !77
  %.extract8 = load i32, ptr addrspace(3) %413, align 4, !dbg !77
  %414 = getelementptr inbounds i8, ptr addrspace(3) %410, i32 8, !dbg !77
  %.extract9 = load i32, ptr addrspace(3) %414, align 8, !dbg !77
  %415 = getelementptr inbounds i8, ptr addrspace(3) %410, i32 12, !dbg !77
  %.extract10 = load i32, ptr addrspace(3) %415, align 4, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %389, i1 true) #4, !dbg !77
  %.extract11 = extractelement <4 x i32> %412, i64 0, !dbg !77
  %.extract12 = extractelement <4 x i32> %412, i64 1, !dbg !77
  %.extract13 = extractelement <4 x i32> %412, i64 2, !dbg !77
  %.extract14 = extractelement <4 x i32> %412, i64 3, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %391, i1 true) #4, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cccxhfa5h4djbxxok6mvvycj2optguo6sxfu4pyn5rk2mibjdi3m.py", directory: "inductor_cache/cc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 49, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 54, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 60, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 61, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 52, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 62, scope: !7)
!36 = !DILocation(line: 32, column: 31, scope: !7)
!37 = !DILocation(line: 32, column: 36, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 36, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 36, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 27, scope: !7)
!46 = !DILocation(line: 36, column: 18, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 40, column: 40, scope: !7)
!51 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!53 = !DILocation(line: 41, column: 18, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !55)
!55 = !DILocation(line: 44, column: 41, scope: !7)
!56 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !55)
!57 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !55)
!58 = !DILocation(line: 45, column: 20, scope: !7)
!59 = !DILocation(line: 39, column: 32, scope: !7)
!60 = !DILocation(line: 43, column: 33, scope: !7)
!61 = !DILocation(line: 47, column: 35, scope: !7)
!62 = !DILocation(line: 54, column: 20, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !48, inlinedAt: !64)
!64 = !DILocation(line: 48, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 16, scope: !48, inlinedAt: !64)
!66 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !64)
!67 = !DILocation(line: 49, column: 20, scope: !7)
!68 = !DILocation(line: 57, column: 20, scope: !7)
!69 = !DILocation(line: 58, column: 20, scope: !7)
!70 = !DILocation(line: 59, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !72)
!72 = !DILocation(line: 61, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !72)
!74 = !DILocation(line: 62, column: 25, scope: !7)
!75 = !DILocation(line: 62, column: 37, scope: !7)
!76 = !DILocation(line: 63, column: 25, scope: !7)
!77 = !DILocation(line: 63, column: 37, scope: !7)
!78 = !DILocation(line: 63, column: 4, scope: !7)
