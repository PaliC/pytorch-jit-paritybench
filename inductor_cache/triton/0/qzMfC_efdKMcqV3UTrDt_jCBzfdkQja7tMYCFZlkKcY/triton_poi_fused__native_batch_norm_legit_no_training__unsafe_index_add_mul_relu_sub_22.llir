; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_22(ptr addrspace(1) %0, ptr addrspace(1) nocapture readnone %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) %3, ptr addrspace(1) nocapture readnone %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) nocapture readnone %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 9, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 2, !dbg !12
  %20 = and i32 %19, 508, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %.frozen = freeze i32 %21, !dbg !14
  %22 = sdiv i32 %.frozen, 64, !dbg !14
  %23 = srem i32 %22, 64, !dbg !15
  %24 = mul i32 %22, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %.frozen16 = freeze i32 %21, !dbg !17
  %25 = sdiv i32 %.frozen16, 4096, !dbg !17
  %26 = sdiv i32 %21, 16384, !dbg !18
  %27 = mul i32 %25, 4096, !dbg !19
  %.decomposed17 = sub i32 %.frozen16, %27, !dbg !19
  %28 = srem i32 %25, 4, !dbg !20
  %29 = sext i32 %25 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %35 = sext i32 %.decomposed to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %38 = shl nsw i32 %26, 12, !dbg !25
  %39 = add nsw i32 %38, %.decomposed17, !dbg !26
  %40 = sext i32 %39 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !27
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !28
  %43 = sext i32 %21 to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %7, i64 %43, !dbg !29
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !30
  %46 = sext i32 %28 to i64, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %8, i64 %46, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %9, i64 %46, !dbg !33
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !34
  %54 = bitcast i32 %53 to float, !dbg !34
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !34
  %56 = bitcast i32 %55 to float, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !34
  %60 = bitcast i32 %59 to float, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %10, i64 %46, !dbg !35
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %11, i64 %46, !dbg !37
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !38
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !38
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !38
  %71 = sext i32 %23 to i64, !dbg !39
  %72 = getelementptr float, ptr addrspace(1) %13, i64 %71, !dbg !39
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !40
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !40
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !40
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !40
  %77 = fadd float %54, 0x3EE4F8B580000000, !dbg !41
  %78 = fadd float %56, 0x3EE4F8B580000000, !dbg !41
  %79 = fadd float %58, 0x3EE4F8B580000000, !dbg !41
  %80 = fadd float %60, 0x3EE4F8B580000000, !dbg !41
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %81, 0, !dbg !42
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %82, 0, !dbg !42
  br i1 %.not.i, label %88, label %83, !dbg !42

83:                                               ; preds = %15
  br i1 %.not1.i, label %86, label %84, !dbg !42

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

88:                                               ; preds = %15
  br i1 %.not1.i, label %91, label %89, !dbg !42

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !42
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %93, 0, !dbg !42
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i4 = icmp eq i32 %94, 0, !dbg !42
  br i1 %.not.i1, label %100, label %95, !dbg !42

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !42

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !42

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %96, %98, %101, %103
  %.0.i3 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !42
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i6 = icmp eq i32 %105, 0, !dbg !42
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i9 = icmp eq i32 %106, 0, !dbg !42
  br i1 %.not.i6, label %112, label %107, !dbg !42

107:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %110, label %108, !dbg !42

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

112:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %115, label %113, !dbg !42

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

__nv_sqrtf.exit10:                                ; preds = %108, %110, %113, %115
  %.0.i8 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !42
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i11 = icmp eq i32 %117, 0, !dbg !42
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i14 = icmp eq i32 %118, 0, !dbg !42
  br i1 %.not.i11, label %124, label %119, !dbg !42

119:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %122, label %120, !dbg !42

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

124:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %127, label %125, !dbg !42

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %120, %122, %125, %127
  %.0.i13 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !42
  %129 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !30
  %130 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !32
  %131 = insertelement <4 x i32> %130, i32 %50, i64 1, !dbg !32
  %132 = insertelement <4 x i32> %131, i32 %49, i64 2, !dbg !32
  %133 = insertelement <4 x i32> %132, i32 %48, i64 3, !dbg !32
  %134 = bitcast <4 x i32> %133 to <4 x float>, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !30
  %136 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !30
  %138 = bitcast i32 %34 to float, !dbg !22
  %139 = fsub float %138, %138, !dbg !43
  %140 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !24
  %141 = bitcast i32 %140 to float, !dbg !24
  %142 = fmul float %139, %141, !dbg !44
  %143 = fadd float %142, %138, !dbg !45
  %144 = bitcast i32 %33 to float, !dbg !22
  %145 = fsub float %144, %144, !dbg !43
  %146 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !24
  %147 = bitcast i32 %146 to float, !dbg !24
  %148 = fmul float %145, %147, !dbg !44
  %149 = fadd float %148, %144, !dbg !45
  %150 = bitcast i32 %32 to float, !dbg !22
  %151 = fsub float %150, %150, !dbg !43
  %152 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !24
  %153 = bitcast i32 %152 to float, !dbg !24
  %154 = fmul float %151, %153, !dbg !44
  %155 = fadd float %154, %150, !dbg !45
  %156 = bitcast i32 %31 to float, !dbg !22
  %157 = fsub float %156, %156, !dbg !43
  %158 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !24
  %159 = bitcast i32 %158 to float, !dbg !24
  %160 = fmul float %157, %159, !dbg !44
  %161 = fadd float %160, %156, !dbg !45
  %162 = bitcast i32 %76 to float, !dbg !40
  %163 = bitcast i32 %75 to float, !dbg !40
  %164 = bitcast i32 %74 to float, !dbg !40
  %165 = bitcast i32 %73 to float, !dbg !40
  %166 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !38
  %167 = insertelement <4 x i32> %166, i32 %69, i64 1, !dbg !38
  %168 = insertelement <4 x i32> %167, i32 %68, i64 2, !dbg !38
  %169 = insertelement <4 x i32> %168, i32 %67, i64 3, !dbg !38
  %170 = bitcast <4 x i32> %169 to <4 x float>, !dbg !38
  %171 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !36
  %172 = insertelement <4 x i32> %171, i32 %64, i64 1, !dbg !36
  %173 = insertelement <4 x i32> %172, i32 %63, i64 2, !dbg !36
  %174 = insertelement <4 x i32> %173, i32 %62, i64 3, !dbg !36
  %175 = bitcast <4 x i32> %174 to <4 x float>, !dbg !36
  %176 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !28
  %177 = bitcast i32 %176 to float, !dbg !28
  %178 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !28
  %179 = bitcast i32 %178 to float, !dbg !28
  %180 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !28
  %181 = bitcast i32 %180 to float, !dbg !28
  %182 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !28
  %183 = bitcast i32 %182 to float, !dbg !28
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !46
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !46
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !46
  %188 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !30
  %189 = insertelement <4 x i32> %188, i32 %135, i64 1, !dbg !30
  %190 = insertelement <4 x i32> %189, i32 %136, i64 2, !dbg !30
  %191 = insertelement <4 x i32> %190, i32 %137, i64 3, !dbg !30
  %192 = bitcast <4 x i32> %191 to <4 x float>, !dbg !30
  %193 = fsub <4 x float> %192, %134, !dbg !47
  %194 = insertelement <4 x float> poison, float %187, i64 0, !dbg !48
  %195 = insertelement <4 x float> %194, float %186, i64 1, !dbg !48
  %196 = insertelement <4 x float> %195, float %185, i64 2, !dbg !48
  %197 = insertelement <4 x float> %196, float %184, i64 3, !dbg !48
  %198 = fmul <4 x float> %193, %197, !dbg !48
  %199 = fmul <4 x float> %198, %175, !dbg !49
  %200 = fadd <4 x float> %199, %170, !dbg !50
  %201 = fcmp olt <4 x float> %200, zeroinitializer, !dbg !51
  %202 = extractelement <4 x i1> %201, i64 3, !dbg !55
  %203 = extractelement <4 x float> %200, i64 3, !dbg !55
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !55
  %205 = extractelement <4 x i1> %201, i64 2, !dbg !55
  %206 = extractelement <4 x float> %200, i64 2, !dbg !55
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !55
  %208 = extractelement <4 x i1> %201, i64 1, !dbg !55
  %209 = extractelement <4 x float> %200, i64 1, !dbg !55
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !55
  %211 = extractelement <4 x i1> %201, i64 0, !dbg !55
  %212 = extractelement <4 x float> %200, i64 0, !dbg !55
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !55
  %214 = fmul float %204, %183, !dbg !56
  %215 = fmul float %207, %181, !dbg !56
  %216 = fmul float %210, %179, !dbg !56
  %217 = fmul float %213, %177, !dbg !56
  %218 = fsub float %161, %161, !dbg !57
  %219 = fsub float %155, %155, !dbg !57
  %220 = fsub float %149, %149, !dbg !57
  %221 = fsub float %143, %143, !dbg !57
  %222 = fmul float %218, %165, !dbg !58
  %223 = fmul float %219, %164, !dbg !58
  %224 = fmul float %220, %163, !dbg !58
  %225 = fmul float %221, %162, !dbg !58
  %226 = fadd float %161, %222, !dbg !59
  %227 = fadd float %155, %223, !dbg !59
  %228 = fadd float %149, %224, !dbg !59
  %229 = fadd float %143, %225, !dbg !59
  %230 = fadd float %226, %214, !dbg !60
  %231 = fadd float %227, %215, !dbg !60
  %232 = fadd float %228, %216, !dbg !60
  %233 = fadd float %229, %217, !dbg !60
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !61
  %235 = bitcast float %230 to i32, !dbg !62
  %236 = bitcast float %231 to i32, !dbg !62
  %237 = bitcast float %232 to i32, !dbg !62
  %238 = bitcast float %233 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %235, i32 %236, i32 %237, i32 %238, ptr addrspace(1) %234, i1 true) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgw4idrf2cplrhx7chpguwedfrsuqnhkrd4776lw6ve5rmseyhpw.py", directory: "inductor_cache/gw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 29, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 36, scope: !7)
!25 = !DILocation(line: 36, column: 41, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 46, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 32, scope: !7)
!38 = !DILocation(line: 41, column: 37, scope: !7)
!39 = !DILocation(line: 43, column: 32, scope: !7)
!40 = !DILocation(line: 43, column: 37, scope: !7)
!41 = !DILocation(line: 59, column: 20, scope: !7)
!42 = !DILocation(line: 60, column: 27, scope: !7)
!43 = !DILocation(line: 54, column: 19, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 19, scope: !7)
!46 = !DILocation(line: 62, column: 20, scope: !7)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 65, column: 20, scope: !7)
!49 = !DILocation(line: 66, column: 20, scope: !7)
!50 = !DILocation(line: 67, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 69, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 70, column: 20, scope: !7)
!57 = !DILocation(line: 74, column: 20, scope: !7)
!58 = !DILocation(line: 75, column: 20, scope: !7)
!59 = !DILocation(line: 76, column: 20, scope: !7)
!60 = !DILocation(line: 77, column: 20, scope: !7)
!61 = !DILocation(line: 78, column: 28, scope: !7)
!62 = !DILocation(line: 78, column: 40, scope: !7)
!63 = !DILocation(line: 78, column: 4, scope: !7)
