; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_37(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = sdiv i32 %9, 6, !dbg !14
  %12 = srem i32 %10, 6, !dbg !15
  %13 = sdiv i32 %9, 36, !dbg !16
  %.tr13 = trunc nsw i32 %12 to i8, !dbg !17
  %.lhs.trunc5 = shl nsw i8 %.tr13, 2, !dbg !17
  %14 = shl nsw i8 %.tr13, 3, !dbg !18
  %.lhs.trunc9 = add nsw i8 %14, 13, !dbg !18
  %15 = insertelement <2 x i8> poison, i8 %.lhs.trunc5, i64 0, !dbg !17
  %16 = insertelement <2 x i8> %15, i8 %.lhs.trunc9, i64 1, !dbg !17
  %17 = sdiv <2 x i8> %16, <i8 3, i8 6>, !dbg !17
  %18 = extractelement <2 x i8> %17, i64 0, !dbg !19
  %.sext6 = sext i8 %18 to i32, !dbg !17
  %19 = extractelement <2 x i8> %17, i64 1, !dbg !19
  %.sext10 = sext i8 %19 to i32, !dbg !18
  %20 = icmp slt i8 %18, %19, !dbg !19
  %21 = shl i32 %13, 6, !dbg !20
  %22 = add nsw i32 %.sext6, 1, !dbg !21
  %23 = icmp slt i32 %22, %.sext10, !dbg !22
  %24 = add nsw i32 %.sext6, 2, !dbg !23
  %25 = icmp slt i32 %24, %.sext10, !dbg !24
  %26 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %27 = insertelement <2 x i32> %26, i32 %11, i64 1, !dbg !15
  %28 = srem <2 x i32> %27, splat (i32 6), !dbg !15
  %29 = trunc nsw <2 x i32> %28 to <2 x i8>, !dbg !17
  %30 = shl nsw <2 x i8> %29, splat (i8 2), !dbg !17
  %31 = sdiv <2 x i8> %30, splat (i8 3), !dbg !17
  %32 = shl nsw <2 x i8> %29, splat (i8 3), !dbg !18
  %33 = add nsw <2 x i8> %32, splat (i8 13), !dbg !18
  %34 = sdiv <2 x i8> %33, splat (i8 6), !dbg !18
  %35 = sext <2 x i8> %31 to <2 x i32>, !dbg !17
  %36 = icmp slt <2 x i8> %31, %34, !dbg !19
  %37 = extractelement <2 x i1> %36, i64 0, !dbg !25
  %38 = extractelement <2 x i1> %36, i64 1, !dbg !25
  %39 = and i1 %37, %38, !dbg !25
  %40 = and i1 %20, %38, !dbg !25
  %41 = extractelement <2 x i32> %35, i64 1, !dbg !26
  %42 = shl nsw i32 %41, 3, !dbg !26
  %43 = add i32 %42, %21, !dbg !27
  %44 = extractelement <2 x i32> %35, i64 0, !dbg !28
  %45 = add i32 %43, %44, !dbg !29
  %46 = add i32 %43, %.sext6, !dbg !29
  %47 = sext i32 %45 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !30
  %49 = sext i32 %46 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %39, i32 0, i1 %39) #1, !dbg !31
  %52 = bitcast i32 %51 to float, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %40, i32 0, i1 %40) #1, !dbg !31
  %54 = bitcast i32 %53 to float, !dbg !31
  %55 = and i1 %23, %38, !dbg !32
  %56 = or disjoint i32 %42, 1, !dbg !33
  %57 = add i32 %56, %21, !dbg !34
  %58 = add i32 %57, %44, !dbg !35
  %59 = add i32 %57, %.sext6, !dbg !35
  %60 = sext i32 %58 to i64, !dbg !36
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !36
  %62 = sext i32 %59 to i64, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !36
  %64 = add nsw <2 x i32> %35, splat (i32 2), !dbg !23
  %65 = sext <2 x i8> %34 to <2 x i32>, !dbg !24
  %66 = icmp slt <2 x i32> %64, %65, !dbg !24
  %67 = extractelement <2 x i1> %66, i64 0, !dbg !37
  %68 = and i1 %38, %67, !dbg !38
  %69 = and i1 %25, %38, !dbg !38
  %70 = or disjoint i32 %42, 2, !dbg !39
  %71 = add i32 %70, %21, !dbg !40
  %72 = add i32 %71, %44, !dbg !41
  %73 = add i32 %71, %.sext6, !dbg !41
  %74 = sext i32 %72 to i64, !dbg !42
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !42
  %76 = sext i32 %73 to i64, !dbg !42
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !42
  %78 = add nsw <2 x i32> %35, splat (i32 1), !dbg !21
  %79 = sext <2 x i8> %34 to <2 x i32>, !dbg !22
  %80 = icmp slt <2 x i32> %78, %79, !dbg !22
  %81 = extractelement <2 x i1> %80, i64 0, !dbg !43
  %82 = and i1 %38, %81, !dbg !32
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %82, i32 0, i1 %82) #1, !dbg !44
  %84 = bitcast i32 %83 to float, !dbg !44
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %55, i32 0, i1 %55) #1, !dbg !44
  %86 = bitcast i32 %85 to float, !dbg !44
  %87 = fadd float %52, %84, !dbg !45
  %88 = fadd float %54, %86, !dbg !45
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %68, i32 0, i1 %68) #1, !dbg !46
  %90 = bitcast i32 %89 to float, !dbg !46
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %69, i32 0, i1 %69) #1, !dbg !46
  %92 = bitcast i32 %91 to float, !dbg !46
  %93 = fadd float %87, %90, !dbg !47
  %94 = fadd float %88, %92, !dbg !47
  %95 = extractelement <2 x i1> %80, i64 1, !dbg !48
  %96 = and i1 %37, %95, !dbg !49
  %97 = and i1 %20, %95, !dbg !49
  %98 = add i32 %43, 8, !dbg !50
  %99 = add i32 %98, %44, !dbg !51
  %100 = add i32 %98, %.sext6, !dbg !51
  %101 = sext i32 %99 to i64, !dbg !52
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !52
  %103 = sext i32 %100 to i64, !dbg !52
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !52
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %96, i32 0, i1 %96) #1, !dbg !53
  %106 = bitcast i32 %105 to float, !dbg !53
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %97, i32 0, i1 %97) #1, !dbg !53
  %108 = bitcast i32 %107 to float, !dbg !53
  %109 = fadd float %93, %106, !dbg !54
  %110 = fadd float %94, %108, !dbg !54
  %111 = and i1 %81, %95, !dbg !55
  %112 = and i1 %23, %95, !dbg !55
  %113 = add i32 %43, 9, !dbg !56
  %114 = add i32 %113, %44, !dbg !57
  %115 = add i32 %113, %.sext6, !dbg !57
  %116 = sext i32 %114 to i64, !dbg !58
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !58
  %118 = sext i32 %115 to i64, !dbg !58
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !58
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %111, i32 0, i1 %111) #1, !dbg !59
  %121 = bitcast i32 %120 to float, !dbg !59
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %112, i32 0, i1 %112) #1, !dbg !59
  %123 = bitcast i32 %122 to float, !dbg !59
  %124 = fadd float %109, %121, !dbg !60
  %125 = fadd float %110, %123, !dbg !60
  %126 = and i1 %67, %95, !dbg !48
  %127 = and i1 %25, %95, !dbg !48
  %128 = add i32 %43, 10, !dbg !61
  %129 = add i32 %128, %44, !dbg !62
  %130 = add i32 %128, %.sext6, !dbg !62
  %131 = sext i32 %129 to i64, !dbg !63
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !63
  %133 = sext i32 %130 to i64, !dbg !63
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !63
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %126, i32 0, i1 %126) #1, !dbg !64
  %136 = bitcast i32 %135 to float, !dbg !64
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %127, i32 0, i1 %127) #1, !dbg !64
  %138 = bitcast i32 %137 to float, !dbg !64
  %139 = fadd float %124, %136, !dbg !65
  %140 = fadd float %125, %138, !dbg !65
  %141 = extractelement <2 x i1> %66, i64 1, !dbg !37
  %142 = and i1 %37, %141, !dbg !66
  %143 = and i1 %20, %141, !dbg !66
  %144 = add i32 %43, 16, !dbg !67
  %145 = add i32 %144, %44, !dbg !68
  %146 = add i32 %144, %.sext6, !dbg !68
  %147 = sext i32 %145 to i64, !dbg !69
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !69
  %149 = sext i32 %146 to i64, !dbg !69
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !69
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %142, i32 0, i1 %142) #1, !dbg !70
  %152 = bitcast i32 %151 to float, !dbg !70
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %143, i32 0, i1 %143) #1, !dbg !70
  %154 = bitcast i32 %153 to float, !dbg !70
  %155 = fadd float %139, %152, !dbg !71
  %156 = fadd float %140, %154, !dbg !71
  %157 = and i1 %81, %141, !dbg !43
  %158 = and i1 %23, %141, !dbg !43
  %159 = add i32 %43, 17, !dbg !72
  %160 = add i32 %159, %44, !dbg !73
  %161 = add i32 %159, %.sext6, !dbg !73
  %162 = sext i32 %160 to i64, !dbg !74
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !74
  %164 = sext i32 %161 to i64, !dbg !74
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !74
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %157, i32 0, i1 %157) #1, !dbg !75
  %167 = bitcast i32 %166 to float, !dbg !75
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %158, i32 0, i1 %158) #1, !dbg !75
  %169 = bitcast i32 %168 to float, !dbg !75
  %170 = fadd float %155, %167, !dbg !76
  %171 = fadd float %156, %169, !dbg !76
  %172 = and i1 %67, %141, !dbg !37
  %173 = and i1 %25, %141, !dbg !37
  %174 = add i32 %43, 18, !dbg !77
  %175 = add i32 %174, %44, !dbg !28
  %176 = add i32 %174, %.sext6, !dbg !28
  %177 = sext i32 %175 to i64, !dbg !78
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !78
  %179 = sext i32 %176 to i64, !dbg !78
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !78
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %172, i32 0, i1 %172) #1, !dbg !79
  %182 = bitcast i32 %181 to float, !dbg !79
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %173, i32 0, i1 %173) #1, !dbg !79
  %184 = bitcast i32 %183 to float, !dbg !79
  %185 = fadd float %170, %182, !dbg !80
  %186 = fadd float %171, %184, !dbg !80
  %187 = select i1 %39, float 1.000000e+00, float 0.000000e+00, !dbg !81
  %188 = select i1 %40, float 1.000000e+00, float 0.000000e+00, !dbg !81
  %189 = select i1 %82, float 1.000000e+00, float 0.000000e+00, !dbg !82
  %190 = select i1 %55, float 1.000000e+00, float 0.000000e+00, !dbg !82
  %191 = fadd float %189, %187, !dbg !83
  %192 = fadd float %190, %188, !dbg !83
  %193 = select i1 %68, float 1.000000e+00, float 0.000000e+00, !dbg !84
  %194 = select i1 %69, float 1.000000e+00, float 0.000000e+00, !dbg !84
  %195 = fadd float %193, %191, !dbg !85
  %196 = fadd float %194, %192, !dbg !85
  %197 = select i1 %96, float 1.000000e+00, float 0.000000e+00, !dbg !86
  %198 = select i1 %97, float 1.000000e+00, float 0.000000e+00, !dbg !86
  %199 = fadd float %197, %195, !dbg !87
  %200 = fadd float %198, %196, !dbg !87
  %201 = select i1 %111, float 1.000000e+00, float 0.000000e+00, !dbg !88
  %202 = select i1 %112, float 1.000000e+00, float 0.000000e+00, !dbg !88
  %203 = fadd float %201, %199, !dbg !89
  %204 = fadd float %202, %200, !dbg !89
  %205 = select i1 %126, float 1.000000e+00, float 0.000000e+00, !dbg !90
  %206 = select i1 %127, float 1.000000e+00, float 0.000000e+00, !dbg !90
  %207 = fadd float %205, %203, !dbg !91
  %208 = fadd float %206, %204, !dbg !91
  %209 = select i1 %142, float 1.000000e+00, float 0.000000e+00, !dbg !92
  %210 = select i1 %143, float 1.000000e+00, float 0.000000e+00, !dbg !92
  %211 = fadd float %209, %207, !dbg !93
  %212 = fadd float %210, %208, !dbg !93
  %213 = select i1 %157, float 1.000000e+00, float 0.000000e+00, !dbg !94
  %214 = select i1 %158, float 1.000000e+00, float 0.000000e+00, !dbg !94
  %215 = fadd float %213, %211, !dbg !95
  %216 = fadd float %214, %212, !dbg !95
  %217 = select i1 %172, float 1.000000e+00, float 0.000000e+00, !dbg !96
  %218 = select i1 %173, float 1.000000e+00, float 0.000000e+00, !dbg !96
  %219 = fadd float %217, %215, !dbg !97
  %220 = fadd float %218, %216, !dbg !97
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float %219) #1, !dbg !98
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %220) #1, !dbg !98
  %223 = sext i32 %9 to i64, !dbg !99
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %223, !dbg !99
  %225 = bitcast float %221 to i32, !dbg !100
  %226 = bitcast float %222 to i32, !dbg !100
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %225, i32 %226, ptr addrspace(1) %224, i1 true) #1, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cauyjquegba66krjnneorvbo5ijxknxrwyezga7t5gxrjfate7zs.py", directory: "inductor_cache/au")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_37, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_37", linkageName: "triton_poi_fused__adaptive_avg_pool2d_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 26, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 35, column: 51, scope: !7)
!21 = !DILocation(line: 36, column: 16, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 41, column: 17, scope: !7)
!24 = !DILocation(line: 42, column: 20, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 33, scope: !7)
!27 = !DILocation(line: 35, column: 48, scope: !7)
!28 = !DILocation(line: 66, column: 63, scope: !7)
!29 = !DILocation(line: 35, column: 57, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 72, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 39, column: 35, scope: !7)
!34 = !DILocation(line: 39, column: 53, scope: !7)
!35 = !DILocation(line: 39, column: 62, scope: !7)
!36 = !DILocation(line: 39, column: 31, scope: !7)
!37 = !DILocation(line: 65, column: 20, scope: !7)
!38 = !DILocation(line: 43, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 35, scope: !7)
!40 = !DILocation(line: 44, column: 53, scope: !7)
!41 = !DILocation(line: 44, column: 62, scope: !7)
!42 = !DILocation(line: 44, column: 31, scope: !7)
!43 = !DILocation(line: 62, column: 20, scope: !7)
!44 = !DILocation(line: 39, column: 77, scope: !7)
!45 = !DILocation(line: 40, column: 20, scope: !7)
!46 = !DILocation(line: 44, column: 77, scope: !7)
!47 = !DILocation(line: 45, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 53, scope: !7)
!51 = !DILocation(line: 49, column: 62, scope: !7)
!52 = !DILocation(line: 49, column: 31, scope: !7)
!53 = !DILocation(line: 49, column: 77, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 51, column: 20, scope: !7)
!56 = !DILocation(line: 52, column: 53, scope: !7)
!57 = !DILocation(line: 52, column: 62, scope: !7)
!58 = !DILocation(line: 52, column: 31, scope: !7)
!59 = !DILocation(line: 52, column: 77, scope: !7)
!60 = !DILocation(line: 53, column: 20, scope: !7)
!61 = !DILocation(line: 55, column: 54, scope: !7)
!62 = !DILocation(line: 55, column: 63, scope: !7)
!63 = !DILocation(line: 55, column: 31, scope: !7)
!64 = !DILocation(line: 55, column: 78, scope: !7)
!65 = !DILocation(line: 56, column: 20, scope: !7)
!66 = !DILocation(line: 59, column: 20, scope: !7)
!67 = !DILocation(line: 60, column: 54, scope: !7)
!68 = !DILocation(line: 60, column: 63, scope: !7)
!69 = !DILocation(line: 60, column: 31, scope: !7)
!70 = !DILocation(line: 60, column: 78, scope: !7)
!71 = !DILocation(line: 61, column: 20, scope: !7)
!72 = !DILocation(line: 63, column: 54, scope: !7)
!73 = !DILocation(line: 63, column: 63, scope: !7)
!74 = !DILocation(line: 63, column: 31, scope: !7)
!75 = !DILocation(line: 63, column: 78, scope: !7)
!76 = !DILocation(line: 64, column: 20, scope: !7)
!77 = !DILocation(line: 66, column: 54, scope: !7)
!78 = !DILocation(line: 66, column: 31, scope: !7)
!79 = !DILocation(line: 66, column: 78, scope: !7)
!80 = !DILocation(line: 67, column: 20, scope: !7)
!81 = !DILocation(line: 70, column: 34, scope: !7)
!82 = !DILocation(line: 73, column: 35, scope: !7)
!83 = !DILocation(line: 74, column: 20, scope: !7)
!84 = !DILocation(line: 77, column: 35, scope: !7)
!85 = !DILocation(line: 78, column: 20, scope: !7)
!86 = !DILocation(line: 81, column: 35, scope: !7)
!87 = !DILocation(line: 82, column: 20, scope: !7)
!88 = !DILocation(line: 85, column: 35, scope: !7)
!89 = !DILocation(line: 86, column: 20, scope: !7)
!90 = !DILocation(line: 89, column: 35, scope: !7)
!91 = !DILocation(line: 90, column: 20, scope: !7)
!92 = !DILocation(line: 93, column: 35, scope: !7)
!93 = !DILocation(line: 94, column: 20, scope: !7)
!94 = !DILocation(line: 97, column: 35, scope: !7)
!95 = !DILocation(line: 98, column: 20, scope: !7)
!96 = !DILocation(line: 101, column: 35, scope: !7)
!97 = !DILocation(line: 102, column: 20, scope: !7)
!98 = !DILocation(line: 103, column: 20, scope: !7)
!99 = !DILocation(line: 104, column: 25, scope: !7)
!100 = !DILocation(line: 104, column: 37, scope: !7)
!101 = !DILocation(line: 104, column: 4, scope: !7)
