; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = lshr i32 %10, 4, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = or disjoint i32 %9, %11, !dbg !13
  %15 = or disjoint i32 %9, %13, !dbg !13
  %16 = or disjoint i32 %15, 32, !dbg !13
  %17 = icmp slt i32 %14, 128, !dbg !14
  %18 = icmp slt i32 %15, 128, !dbg !14
  %19 = icmp slt i32 %16, 128, !dbg !14
  %20 = lshr i32 %10, 6, !dbg !15
  %21 = and i32 %20, 4, !dbg !15
  %22 = and i32 %20, 7, !dbg !15
  %23 = or disjoint i32 %22, 8, !dbg !15
  %24 = or disjoint i32 %22, 16, !dbg !15
  %25 = or disjoint i32 %22, 24, !dbg !15
  %26 = or disjoint i32 %22, 32, !dbg !15
  %27 = or disjoint i32 %22, 40, !dbg !15
  %28 = or disjoint i32 %22, 48, !dbg !15
  %29 = or disjoint i32 %22, 56, !dbg !15
  %30 = shl i32 %10, 2, !dbg !15
  %31 = and i32 %30, 60, !dbg !15
  %32 = shl i32 %14, 9, !dbg !16
  %33 = shl i32 %15, 7, !dbg !17
  %34 = shl i32 %16, 7, !dbg !17
  %35 = shl nuw nsw i32 %20, 1
  %36 = and i32 %35, 6
  %invariant.op = or disjoint i32 %36, %32, !dbg !18
  %37 = shl i32 %10, 6
  %38 = and i32 %37, 4032
  %39 = and i32 %20, 3
  %40 = or disjoint i32 %38, %39
  %41 = or disjoint i32 %40, %21
  %42 = and i32 %30, 2044
  %43 = lshr exact i32 %38, 2
  %44 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %43
  %45 = getelementptr float, ptr addrspace(3) %44, i32 %41
  %46 = or disjoint i32 %41, 8
  %47 = getelementptr float, ptr addrspace(3) %44, i32 %46
  %48 = or disjoint i32 %41, 16
  %49 = getelementptr float, ptr addrspace(3) %44, i32 %48
  %50 = or disjoint i32 %41, 24
  %51 = getelementptr float, ptr addrspace(3) %44, i32 %50
  %52 = or disjoint i32 %41, 32
  %53 = getelementptr float, ptr addrspace(3) %44, i32 %52
  %54 = or disjoint i32 %41, 40
  %55 = getelementptr float, ptr addrspace(3) %44, i32 %54
  %56 = or disjoint i32 %41, 48
  %57 = getelementptr float, ptr addrspace(3) %44, i32 %56
  %58 = or disjoint i32 %41, 56
  %59 = getelementptr float, ptr addrspace(3) %44, i32 %58
  %60 = lshr i32 %30, 4
  %61 = and i32 %60, 124
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %61
  %63 = getelementptr inbounds float, ptr addrspace(3) %62, i32 %42
  %64 = or disjoint i32 %42, 2048
  %65 = lshr i32 %64, 4
  %66 = and i32 %65, 252
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %66
  %68 = getelementptr inbounds float, ptr addrspace(3) %67, i32 %64
  %69 = zext nneg i32 %31 to i64, !dbg !18
  %70 = sext i32 %33 to i64, !dbg !18
  %71 = sext i32 %34 to i64, !dbg !18
  %72 = zext nneg i32 %21 to i64, !dbg !18
  %73 = zext i32 %invariant.op to i64, !dbg !18
  %74 = zext nneg i32 %23 to i64, !dbg !18
  %75 = zext nneg i32 %36 to i64, !dbg !18
  %76 = sext i32 %32 to i64, !dbg !18
  %77 = zext nneg i32 %24 to i64, !dbg !18
  %78 = zext nneg i32 %25 to i64, !dbg !18
  %79 = zext nneg i32 %26 to i64, !dbg !18
  %80 = zext nneg i32 %27 to i64, !dbg !18
  %81 = zext nneg i32 %28 to i64, !dbg !18
  %82 = zext nneg i32 %29 to i64, !dbg !18
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !18
  %invariant.gep144 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !18
  %83 = getelementptr inbounds i8, ptr addrspace(3) %63, i32 4
  %84 = getelementptr inbounds i8, ptr addrspace(3) %63, i32 8
  %85 = getelementptr inbounds i8, ptr addrspace(3) %63, i32 12
  %86 = insertelement <8 x i1> poison, i1 %17, i64 0, !dbg !19
  %87 = shufflevector <8 x i1> %86, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !19
  %invariant.op201 = or i64 %76, %75, !dbg !18
  %invariant.op202 = or i64 %76, %75, !dbg !18
  %invariant.op203 = or i64 %76, %75, !dbg !18
  %invariant.op204 = or i64 %76, %75, !dbg !18
  %invariant.op205 = or i64 %76, %75, !dbg !18
  %invariant.op206 = or i64 %76, %75, !dbg !18
  %invariant.op207 = or i64 %76, %75, !dbg !18
  br label %88, !dbg !18

88:                                               ; preds = %7, %._crit_edge
  %89 = phi i1 [ true, %7 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %7 ], [ 64, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %7 ], [ %364, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %7 ], [ %365, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %7 ], [ %366, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %7 ], [ %367, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %7 ], [ %368, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %7 ], [ %369, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %7 ], [ %370, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %7 ], [ %371, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %7 ], [ %356, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %7 ], [ %357, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %7 ], [ %358, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %7 ], [ %359, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %7 ], [ %360, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %7 ], [ %361, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %7 ], [ %362, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %7 ], [ %363, %._crit_edge ]
  %106 = phi <8 x float> [ zeroinitializer, %7 ], [ %355, %._crit_edge ]
  %107 = or disjoint i64 %indvars.iv, %72, !dbg !20
  %108 = or disjoint i64 %indvars.iv, %74, !dbg !20
  %109 = or disjoint i64 %indvars.iv, %77, !dbg !20
  %110 = or disjoint i64 %indvars.iv, %78, !dbg !20
  %111 = or disjoint i64 %indvars.iv, %79, !dbg !20
  %112 = or disjoint i64 %indvars.iv, %80, !dbg !20
  %113 = or disjoint i64 %indvars.iv, %81, !dbg !20
  %114 = or disjoint i64 %indvars.iv, %82, !dbg !20
  %115 = or disjoint i64 %indvars.iv, %69, !dbg !20
  %116 = shl nuw nsw i64 %107, 2, !dbg !21
  %117 = shl nuw nsw i64 %108, 2, !dbg !21
  %118 = and i64 %117, 304, !dbg !21
  %119 = shl nuw nsw i64 %109, 2, !dbg !21
  %120 = and i64 %119, 336, !dbg !21
  %121 = shl nuw nsw i64 %110, 2, !dbg !21
  %122 = and i64 %121, 368, !dbg !21
  %123 = shl nuw nsw i64 %111, 2, !dbg !21
  %124 = and i64 %123, 400, !dbg !21
  %125 = shl nuw nsw i64 %112, 2, !dbg !21
  %126 = and i64 %125, 432, !dbg !21
  %127 = shl nuw nsw i64 %113, 2, !dbg !21
  %128 = and i64 %127, 464, !dbg !21
  %129 = shl nuw nsw i64 %114, 2, !dbg !21
  %130 = and i64 %129, 496, !dbg !21
  %131 = or disjoint i64 %116, %73
  %.reass.reass = or i64 %118, %invariant.op201
  %.reass133.reass = or i64 %120, %invariant.op202
  %.reass135.reass = or i64 %122, %invariant.op203
  %.reass137.reass = or i64 %124, %invariant.op204
  %.reass139.reass = or i64 %126, %invariant.op205
  %.reass141.reass = or i64 %128, %invariant.op206
  %.reass143.reass = or i64 %130, %invariant.op207
  %sext = shl nuw i64 %131, 32, !dbg !22
  %132 = ashr exact i64 %sext, 30, !dbg !22
  %133 = getelementptr i8, ptr addrspace(1) %0, i64 %132, !dbg !22
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %.reass.reass, !dbg !22
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %.reass133.reass, !dbg !22
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %.reass135.reass, !dbg !22
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %.reass137.reass, !dbg !22
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %.reass139.reass, !dbg !22
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %.reass141.reass, !dbg !22
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %.reass143.reass, !dbg !22
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %17, i32 0, i1 %17) #5, !dbg !23
  %149 = or disjoint i64 %.reass.reass, 1, !dbg !24
  %150 = or disjoint i64 %.reass133.reass, 1, !dbg !24
  %151 = or disjoint i64 %.reass135.reass, 1, !dbg !24
  %152 = or disjoint i64 %.reass137.reass, 1, !dbg !24
  %153 = or disjoint i64 %.reass139.reass, 1, !dbg !24
  %154 = or disjoint i64 %.reass141.reass, 1, !dbg !24
  %155 = or disjoint i64 %.reass143.reass, 1, !dbg !24
  %156 = shl nuw i64 %131, 32, !dbg !25
  %sext105 = ashr exact i64 %156, 32, !dbg !25
  %157 = or i64 %sext105, 1, !dbg !25
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !25
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !25
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !25
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !25
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !25
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !25
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !25
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !25
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %17, i32 0, i1 %17) #5, !dbg !26
  %174 = or disjoint i64 %.reass.reass, 8, !dbg !27
  %175 = or disjoint i64 %.reass133.reass, 8, !dbg !27
  %176 = or disjoint i64 %.reass135.reass, 8, !dbg !27
  %177 = or disjoint i64 %.reass137.reass, 8, !dbg !27
  %178 = or disjoint i64 %.reass139.reass, 8, !dbg !27
  %179 = or disjoint i64 %.reass141.reass, 8, !dbg !27
  %180 = or disjoint i64 %.reass143.reass, 8, !dbg !27
  %181 = shl nuw i64 %131, 32, !dbg !28
  %sext106 = ashr exact i64 %181, 32, !dbg !28
  %182 = or i64 %sext106, 8, !dbg !28
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !28
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !28
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !28
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !28
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !28
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !28
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !28
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !28
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %17, i32 0, i1 %17) #5, !dbg !29
  %199 = or disjoint i64 %.reass.reass, 9, !dbg !30
  %200 = or disjoint i64 %.reass133.reass, 9, !dbg !30
  %201 = or disjoint i64 %.reass135.reass, 9, !dbg !30
  %202 = or disjoint i64 %.reass137.reass, 9, !dbg !30
  %203 = or disjoint i64 %.reass139.reass, 9, !dbg !30
  %204 = or disjoint i64 %.reass141.reass, 9, !dbg !30
  %205 = or disjoint i64 %.reass143.reass, 9, !dbg !30
  %206 = shl nuw i64 %131, 32, !dbg !31
  %sext107 = ashr exact i64 %206, 32, !dbg !31
  %207 = or i64 %sext107, 9, !dbg !31
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !31
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !31
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !31
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !31
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !31
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !31
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !31
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !31
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 %17, i32 0, i1 %17) #5, !dbg !32
  %224 = insertelement <8 x i32> poison, i32 %141, i64 0, !dbg !23
  %225 = insertelement <8 x i32> %224, i32 %142, i64 1, !dbg !23
  %226 = insertelement <8 x i32> %225, i32 %143, i64 2, !dbg !23
  %227 = insertelement <8 x i32> %226, i32 %144, i64 3, !dbg !23
  %228 = insertelement <8 x i32> %227, i32 %145, i64 4, !dbg !23
  %229 = insertelement <8 x i32> %228, i32 %146, i64 5, !dbg !23
  %230 = insertelement <8 x i32> %229, i32 %147, i64 6, !dbg !23
  %231 = insertelement <8 x i32> %230, i32 %148, i64 7, !dbg !23
  %232 = bitcast <8 x i32> %231 to <8 x float>, !dbg !23
  %233 = insertelement <8 x i32> poison, i32 %166, i64 0, !dbg !26
  %234 = insertelement <8 x i32> %233, i32 %167, i64 1, !dbg !26
  %235 = insertelement <8 x i32> %234, i32 %168, i64 2, !dbg !26
  %236 = insertelement <8 x i32> %235, i32 %169, i64 3, !dbg !26
  %237 = insertelement <8 x i32> %236, i32 %170, i64 4, !dbg !26
  %238 = insertelement <8 x i32> %237, i32 %171, i64 5, !dbg !26
  %239 = insertelement <8 x i32> %238, i32 %172, i64 6, !dbg !26
  %240 = insertelement <8 x i32> %239, i32 %173, i64 7, !dbg !26
  %241 = bitcast <8 x i32> %240 to <8 x float>, !dbg !26
  %242 = insertelement <8 x i32> poison, i32 %191, i64 0, !dbg !29
  %243 = insertelement <8 x i32> %242, i32 %192, i64 1, !dbg !29
  %244 = insertelement <8 x i32> %243, i32 %193, i64 2, !dbg !29
  %245 = insertelement <8 x i32> %244, i32 %194, i64 3, !dbg !29
  %246 = insertelement <8 x i32> %245, i32 %195, i64 4, !dbg !29
  %247 = insertelement <8 x i32> %246, i32 %196, i64 5, !dbg !29
  %248 = insertelement <8 x i32> %247, i32 %197, i64 6, !dbg !29
  %249 = insertelement <8 x i32> %248, i32 %198, i64 7, !dbg !29
  %250 = bitcast <8 x i32> %249 to <8 x float>, !dbg !29
  %251 = insertelement <8 x i32> poison, i32 %216, i64 0, !dbg !32
  %252 = insertelement <8 x i32> %251, i32 %217, i64 1, !dbg !32
  %253 = insertelement <8 x i32> %252, i32 %218, i64 2, !dbg !32
  %254 = insertelement <8 x i32> %253, i32 %219, i64 3, !dbg !32
  %255 = insertelement <8 x i32> %254, i32 %220, i64 4, !dbg !32
  %256 = insertelement <8 x i32> %255, i32 %221, i64 5, !dbg !32
  %257 = insertelement <8 x i32> %256, i32 %222, i64 6, !dbg !32
  %258 = insertelement <8 x i32> %257, i32 %223, i64 7, !dbg !32
  %259 = bitcast <8 x i32> %258 to <8 x float>, !dbg !32
  %260 = fadd <8 x float> %232, %241, !dbg !33
  %261 = fadd <8 x float> %260, %250, !dbg !34
  %262 = fadd <8 x float> %261, %259, !dbg !35
  %263 = fmul <8 x float> %262, splat (float 2.500000e-01), !dbg !36
  br i1 %89, label %._crit_edge, label %264, !dbg !37

264:                                              ; preds = %88
  %265 = fsub <8 x float> %263, %106, !dbg !41
  %266 = extractelement <8 x float> %265, i64 0, !dbg !41
  %267 = fsub <8 x float> %263, %106, !dbg !41
  %268 = extractelement <8 x float> %267, i64 1, !dbg !41
  %269 = fsub <8 x float> %263, %106, !dbg !41
  %270 = extractelement <8 x float> %269, i64 2, !dbg !41
  %271 = fsub <8 x float> %263, %106, !dbg !41
  %272 = extractelement <8 x float> %271, i64 3, !dbg !41
  %273 = fsub <8 x float> %263, %106, !dbg !41
  %274 = extractelement <8 x float> %273, i64 4, !dbg !41
  %275 = fsub <8 x float> %263, %106, !dbg !41
  %276 = extractelement <8 x float> %275, i64 5, !dbg !41
  %277 = fsub <8 x float> %263, %106, !dbg !41
  %278 = extractelement <8 x float> %277, i64 6, !dbg !41
  %279 = fsub <8 x float> %263, %106, !dbg !41
  %280 = extractelement <8 x float> %279, i64 7, !dbg !41
  %281 = fadd float %90, 1.000000e+00, !dbg !42
  %282 = fadd float %91, 1.000000e+00, !dbg !42
  %283 = fadd float %92, 1.000000e+00, !dbg !42
  %284 = fadd float %93, 1.000000e+00, !dbg !42
  %285 = fadd float %94, 1.000000e+00, !dbg !42
  %286 = fadd float %95, 1.000000e+00, !dbg !42
  %287 = fadd float %96, 1.000000e+00, !dbg !42
  %288 = fadd float %97, 1.000000e+00, !dbg !42
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %281) #5, !dbg !43
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %282) #5, !dbg !43
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float %283) #5, !dbg !43
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %272, float %284) #5, !dbg !43
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %274, float %285) #5, !dbg !43
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float %286) #5, !dbg !43
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %287) #5, !dbg !43
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float %288) #5, !dbg !43
  %297 = insertelement <8 x float> poison, float %289, i64 0, !dbg !44
  %298 = insertelement <8 x float> %297, float %290, i64 1, !dbg !44
  %299 = insertelement <8 x float> %298, float %291, i64 2, !dbg !44
  %300 = insertelement <8 x float> %299, float %292, i64 3, !dbg !44
  %301 = insertelement <8 x float> %300, float %293, i64 4, !dbg !44
  %302 = insertelement <8 x float> %301, float %294, i64 5, !dbg !44
  %303 = insertelement <8 x float> %302, float %295, i64 6, !dbg !44
  %304 = insertelement <8 x float> %303, float %296, i64 7, !dbg !44
  %305 = fadd <8 x float> %106, %304, !dbg !44
  %306 = fsub <8 x float> %263, %305, !dbg !45
  %307 = fsub <8 x float> %263, %305, !dbg !45
  %308 = fsub <8 x float> %263, %305, !dbg !45
  %309 = fsub <8 x float> %263, %305, !dbg !45
  %310 = fsub <8 x float> %263, %305, !dbg !45
  %311 = fsub <8 x float> %263, %305, !dbg !45
  %312 = fsub <8 x float> %263, %305, !dbg !45
  %313 = fsub <8 x float> %263, %305, !dbg !45
  %314 = fmul <8 x float> %265, %306, !dbg !46
  %315 = extractelement <8 x float> %314, i64 0, !dbg !46
  %316 = fmul <8 x float> %267, %307, !dbg !46
  %317 = extractelement <8 x float> %316, i64 1, !dbg !46
  %318 = fmul <8 x float> %269, %308, !dbg !46
  %319 = extractelement <8 x float> %318, i64 2, !dbg !46
  %320 = fmul <8 x float> %271, %309, !dbg !46
  %321 = extractelement <8 x float> %320, i64 3, !dbg !46
  %322 = fmul <8 x float> %273, %310, !dbg !46
  %323 = extractelement <8 x float> %322, i64 4, !dbg !46
  %324 = fmul <8 x float> %275, %311, !dbg !46
  %325 = extractelement <8 x float> %324, i64 5, !dbg !46
  %326 = fmul <8 x float> %277, %312, !dbg !46
  %327 = extractelement <8 x float> %326, i64 6, !dbg !46
  %328 = fmul <8 x float> %279, %313, !dbg !46
  %329 = extractelement <8 x float> %328, i64 7, !dbg !46
  %330 = fadd float %98, %315, !dbg !47
  %331 = fadd float %99, %317, !dbg !47
  %332 = fadd float %100, %319, !dbg !47
  %333 = fadd float %101, %321, !dbg !47
  %334 = fadd float %102, %323, !dbg !47
  %335 = fadd float %103, %325, !dbg !47
  %336 = fadd float %104, %327, !dbg !47
  %337 = fadd float %105, %329, !dbg !47
  br label %._crit_edge, !dbg !37

._crit_edge:                                      ; preds = %88, %264
  %338 = phi float [ %330, %264 ], [ 0.000000e+00, %88 ], !dbg !40
  %339 = phi float [ %331, %264 ], [ 0.000000e+00, %88 ], !dbg !40
  %340 = phi float [ %332, %264 ], [ 0.000000e+00, %88 ], !dbg !40
  %341 = phi float [ %333, %264 ], [ 0.000000e+00, %88 ], !dbg !40
  %342 = phi float [ %334, %264 ], [ 0.000000e+00, %88 ], !dbg !40
  %343 = phi float [ %335, %264 ], [ 0.000000e+00, %88 ], !dbg !40
  %344 = phi float [ %336, %264 ], [ 0.000000e+00, %88 ], !dbg !40
  %345 = phi float [ %337, %264 ], [ 0.000000e+00, %88 ], !dbg !40
  %346 = phi float [ %281, %264 ], [ 1.000000e+00, %88 ], !dbg !40
  %347 = phi float [ %282, %264 ], [ 1.000000e+00, %88 ], !dbg !40
  %348 = phi float [ %283, %264 ], [ 1.000000e+00, %88 ], !dbg !40
  %349 = phi float [ %284, %264 ], [ 1.000000e+00, %88 ], !dbg !40
  %350 = phi float [ %285, %264 ], [ 1.000000e+00, %88 ], !dbg !40
  %351 = phi float [ %286, %264 ], [ 1.000000e+00, %88 ], !dbg !40
  %352 = phi float [ %287, %264 ], [ 1.000000e+00, %88 ], !dbg !40
  %353 = phi float [ %288, %264 ], [ 1.000000e+00, %88 ], !dbg !40
  %354 = phi <8 x float> [ %305, %264 ], [ %263, %88 ]
  %355 = select <8 x i1> %87, <8 x float> %354, <8 x float> %106, !dbg !19
  %356 = select i1 %17, float %338, float %98, !dbg !48
  %357 = select i1 %17, float %339, float %99, !dbg !48
  %358 = select i1 %17, float %340, float %100, !dbg !48
  %359 = select i1 %17, float %341, float %101, !dbg !48
  %360 = select i1 %17, float %342, float %102, !dbg !48
  %361 = select i1 %17, float %343, float %103, !dbg !48
  %362 = select i1 %17, float %344, float %104, !dbg !48
  %363 = select i1 %17, float %345, float %105, !dbg !48
  %364 = select i1 %17, float %346, float %90, !dbg !49
  %365 = select i1 %17, float %347, float %91, !dbg !49
  %366 = select i1 %17, float %348, float %92, !dbg !49
  %367 = select i1 %17, float %349, float %93, !dbg !49
  %368 = select i1 %17, float %350, float %94, !dbg !49
  %369 = select i1 %17, float %351, float %95, !dbg !49
  %370 = select i1 %17, float %352, float %96, !dbg !49
  %371 = select i1 %17, float %353, float %97, !dbg !49
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %115, !dbg !50
  %gep145 = getelementptr float, ptr addrspace(1) %invariant.gep144, i64 %115, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %372 = extractelement <8 x float> %263, i64 0, !dbg !51
  %373 = bitcast float %372 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %373, i1 true) #5, !dbg !51
  %374 = extractelement <8 x float> %263, i64 1, !dbg !51
  %375 = bitcast float %374 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %375, i1 true) #5, !dbg !51
  %376 = extractelement <8 x float> %263, i64 2, !dbg !51
  %377 = bitcast float %376 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %377, i1 true) #5, !dbg !51
  %378 = extractelement <8 x float> %263, i64 3, !dbg !51
  %379 = bitcast float %378 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %379, i1 true) #5, !dbg !51
  %380 = extractelement <8 x float> %263, i64 4, !dbg !51
  %381 = bitcast float %380 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %381, i1 true) #5, !dbg !51
  %382 = extractelement <8 x float> %263, i64 5, !dbg !51
  %383 = bitcast float %382 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %383, i1 true) #5, !dbg !51
  %384 = extractelement <8 x float> %263, i64 6, !dbg !51
  %385 = bitcast float %384 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %385, i1 true) #5, !dbg !51
  %386 = extractelement <8 x float> %263, i64 7, !dbg !51
  %387 = bitcast float %386 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %387, i1 true) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %388 = load <4 x i32>, ptr addrspace(3) %68, align 16, !dbg !51
  %.extract = load i32, ptr addrspace(3) %63, align 16, !dbg !51
  %.extract26 = load i32, ptr addrspace(3) %83, align 4, !dbg !51
  %.extract27 = load i32, ptr addrspace(3) %84, align 8, !dbg !51
  %.extract28 = load i32, ptr addrspace(3) %85, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %gep, i1 %18) #5, !dbg !51
  %.extract29 = extractelement <4 x i32> %388, i64 0, !dbg !51
  %.extract30 = extractelement <4 x i32> %388, i64 1, !dbg !51
  %.extract31 = extractelement <4 x i32> %388, i64 2, !dbg !51
  %.extract32 = extractelement <4 x i32> %388, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %gep145, i1 %19) #5, !dbg !51
  br i1 %89, label %88, label %389, !dbg !18

389:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %390 = extractelement <8 x float> %355, i64 0, !dbg !54
  %391 = extractelement <8 x float> %355, i64 1, !dbg !54
  %392 = fsub float %391, %390, !dbg !54
  %393 = fadd float %364, %365, !dbg !56
  %394 = fcmp oeq float %393, 0.000000e+00, !dbg !57
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float %393) #5, !dbg !58
  %396 = select i1 %394, float 0.000000e+00, float %395, !dbg !59
  %397 = fmul float %392, %396, !dbg !60
  %398 = fadd float %390, %397, !dbg !61
  %399 = fadd float %356, %357, !dbg !62
  %400 = fmul float %392, %392, !dbg !63
  %401 = fmul float %400, %364, !dbg !64
  %402 = fmul float %401, %396, !dbg !65
  %403 = fadd float %399, %402, !dbg !66
  %404 = extractelement <8 x float> %355, i64 2, !dbg !54
  %405 = fsub float %404, %398, !dbg !54
  %406 = fadd float %366, %393, !dbg !56
  %407 = fcmp oeq float %406, 0.000000e+00, !dbg !57
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %406) #5, !dbg !58
  %409 = select i1 %407, float 0.000000e+00, float %408, !dbg !59
  %410 = fmul float %409, %405, !dbg !60
  %411 = fadd float %398, %410, !dbg !61
  %412 = fadd float %358, %403, !dbg !62
  %413 = fmul float %405, %405, !dbg !63
  %414 = fmul float %393, %413, !dbg !64
  %415 = fmul float %409, %414, !dbg !65
  %416 = fadd float %412, %415, !dbg !66
  %417 = extractelement <8 x float> %355, i64 3, !dbg !54
  %418 = fsub float %417, %411, !dbg !54
  %419 = fadd float %367, %406, !dbg !56
  %420 = fcmp oeq float %419, 0.000000e+00, !dbg !57
  %421 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float %419) #5, !dbg !58
  %422 = select i1 %420, float 0.000000e+00, float %421, !dbg !59
  %423 = fmul float %422, %418, !dbg !60
  %424 = fadd float %411, %423, !dbg !61
  %425 = fadd float %359, %416, !dbg !62
  %426 = fmul float %418, %418, !dbg !63
  %427 = fmul float %406, %426, !dbg !64
  %428 = fmul float %422, %427, !dbg !65
  %429 = fadd float %425, %428, !dbg !66
  %430 = extractelement <8 x float> %355, i64 4, !dbg !54
  %431 = fsub float %430, %424, !dbg !54
  %432 = fadd float %368, %419, !dbg !56
  %433 = fcmp oeq float %432, 0.000000e+00, !dbg !57
  %434 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %368, float %432) #5, !dbg !58
  %435 = select i1 %433, float 0.000000e+00, float %434, !dbg !59
  %436 = fmul float %435, %431, !dbg !60
  %437 = fadd float %424, %436, !dbg !61
  %438 = fadd float %360, %429, !dbg !62
  %439 = fmul float %431, %431, !dbg !63
  %440 = fmul float %419, %439, !dbg !64
  %441 = fmul float %435, %440, !dbg !65
  %442 = fadd float %438, %441, !dbg !66
  %443 = extractelement <8 x float> %355, i64 5, !dbg !54
  %444 = fsub float %443, %437, !dbg !54
  %445 = fadd float %369, %432, !dbg !56
  %446 = fcmp oeq float %445, 0.000000e+00, !dbg !57
  %447 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %369, float %445) #5, !dbg !58
  %448 = select i1 %446, float 0.000000e+00, float %447, !dbg !59
  %449 = fmul float %448, %444, !dbg !60
  %450 = fadd float %437, %449, !dbg !61
  %451 = fadd float %361, %442, !dbg !62
  %452 = fmul float %444, %444, !dbg !63
  %453 = fmul float %432, %452, !dbg !64
  %454 = fmul float %448, %453, !dbg !65
  %455 = fadd float %451, %454, !dbg !66
  %456 = extractelement <8 x float> %355, i64 6, !dbg !54
  %457 = fsub float %456, %450, !dbg !54
  %458 = fadd float %370, %445, !dbg !56
  %459 = fcmp oeq float %458, 0.000000e+00, !dbg !57
  %460 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %370, float %458) #5, !dbg !58
  %461 = select i1 %459, float 0.000000e+00, float %460, !dbg !59
  %462 = fmul float %461, %457, !dbg !60
  %463 = fadd float %450, %462, !dbg !61
  %464 = fadd float %362, %455, !dbg !62
  %465 = fmul float %457, %457, !dbg !63
  %466 = fmul float %445, %465, !dbg !64
  %467 = fmul float %461, %466, !dbg !65
  %468 = fadd float %464, %467, !dbg !66
  %469 = extractelement <8 x float> %355, i64 7, !dbg !54
  %470 = fsub float %469, %463, !dbg !54
  %471 = fadd float %371, %458, !dbg !56
  %472 = fcmp oeq float %471, 0.000000e+00, !dbg !57
  %473 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %371, float %471) #5, !dbg !58
  %474 = select i1 %472, float 0.000000e+00, float %473, !dbg !59
  %475 = fmul float %474, %470, !dbg !60
  %476 = fadd float %463, %475, !dbg !61
  %477 = fadd float %363, %468, !dbg !62
  %478 = fmul float %470, %470, !dbg !63
  %479 = fmul float %458, %478, !dbg !64
  %480 = fmul float %474, %479, !dbg !65
  %481 = fadd float %477, %480, !dbg !66
  %482 = shl nuw nsw i32 %11, 3, !dbg !52
  %483 = or disjoint i32 %482, %22, !dbg !52
  %484 = getelementptr float, ptr addrspace(3) @global_smem, i32 %483, !dbg !52
  %485 = bitcast float %476 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %484, <1 x i32> %485, i1 true) #5, !dbg !52
  %486 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %483, !dbg !52
  %487 = bitcast float %481 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %486, <1 x i32> %487, i1 true) #5, !dbg !52
  %488 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %483, !dbg !52
  %489 = bitcast float %471 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %488, <1 x i32> %489, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %490 = icmp slt i32 %10, 512, !dbg !52
  %491 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !52
  %492 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %491, i1 %490) #5, !dbg !52
  %493 = bitcast i32 %492 to float, !dbg !52
  %494 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %10, !dbg !52
  %495 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %494, i1 %490) #5, !dbg !52
  %496 = bitcast i32 %495 to float, !dbg !52
  %497 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %10, !dbg !52
  %498 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %497, i1 %490) #5, !dbg !52
  %499 = bitcast i32 %498 to float, !dbg !52
  %500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 4, i32 31), !dbg !52
  %501 = bitcast i32 %500 to float, !dbg !52
  %502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %495, i32 4, i32 31), !dbg !52
  %503 = bitcast i32 %502 to float, !dbg !52
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 4, i32 31), !dbg !52
  %505 = bitcast i32 %504 to float, !dbg !52
  %506 = fsub float %501, %493, !dbg !54
  %507 = fadd float %499, %505, !dbg !56
  %508 = fcmp oeq float %507, 0.000000e+00, !dbg !57
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %505, float %507) #5, !dbg !58
  %510 = select i1 %508, float 0.000000e+00, float %509, !dbg !59
  %511 = fmul float %506, %510, !dbg !60
  %512 = fadd float %511, %493, !dbg !61
  %513 = fadd float %496, %503, !dbg !62
  %514 = fmul float %506, %506, !dbg !63
  %515 = fmul float %514, %499, !dbg !64
  %516 = fmul float %515, %510, !dbg !65
  %517 = fadd float %513, %516, !dbg !66
  %518 = bitcast float %512 to i32, !dbg !52
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 2, i32 31), !dbg !52
  %520 = bitcast i32 %519 to float, !dbg !52
  %521 = bitcast float %517 to i32, !dbg !52
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 2, i32 31), !dbg !52
  %523 = bitcast i32 %522 to float, !dbg !52
  %524 = bitcast float %507 to i32, !dbg !52
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 2, i32 31), !dbg !52
  %526 = bitcast i32 %525 to float, !dbg !52
  %527 = fsub float %520, %512, !dbg !54
  %528 = fadd float %507, %526, !dbg !56
  %529 = fcmp oeq float %528, 0.000000e+00, !dbg !57
  %530 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %526, float %528) #5, !dbg !58
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !59
  %532 = fmul float %527, %531, !dbg !60
  %533 = fadd float %512, %532, !dbg !61
  %534 = fadd float %517, %523, !dbg !62
  %535 = fmul float %527, %527, !dbg !63
  %536 = fmul float %507, %535, !dbg !64
  %537 = fmul float %531, %536, !dbg !65
  %538 = fadd float %534, %537, !dbg !66
  %539 = bitcast float %533 to i32, !dbg !52
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 1, i32 31), !dbg !52
  %541 = bitcast i32 %540 to float, !dbg !52
  %542 = bitcast float %538 to i32, !dbg !52
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 1, i32 31), !dbg !52
  %544 = bitcast i32 %543 to float, !dbg !52
  %545 = bitcast float %528 to i32, !dbg !52
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 1, i32 31), !dbg !52
  %547 = bitcast i32 %546 to float, !dbg !52
  %548 = fsub float %541, %533, !dbg !54
  %549 = fadd float %528, %547, !dbg !56
  %550 = fcmp oeq float %549, 0.000000e+00, !dbg !57
  %551 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %547, float %549) #5, !dbg !58
  %552 = select i1 %550, float 0.000000e+00, float %551, !dbg !59
  %553 = fmul float %548, %552, !dbg !60
  %554 = fadd float %533, %553, !dbg !61
  %555 = fadd float %538, %544, !dbg !62
  %556 = fmul float %548, %548, !dbg !63
  %557 = fmul float %528, %556, !dbg !64
  %558 = fmul float %552, %557, !dbg !65
  %559 = fadd float %555, %558, !dbg !66
  %560 = and i32 %10, 7, !dbg !52
  %561 = icmp eq i32 %560, 0, !dbg !52
  %562 = and i1 %490, %561, !dbg !52
  %563 = bitcast float %554 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %563, i1 %562) #5, !dbg !52
  %564 = bitcast float %559 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %494, <1 x i32> %564, i1 %562) #5, !dbg !52
  %565 = bitcast float %549 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %565, i1 %562) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %566 = getelementptr float, ptr addrspace(3) @global_smem, i32 %482, !dbg !52
  %567 = load i32, ptr addrspace(3) %566, align 16, !dbg !52
  %568 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %482, !dbg !52
  %569 = load float, ptr addrspace(3) %568, align 16, !dbg !52
  %570 = sext i32 %14 to i64, !dbg !67
  %571 = getelementptr float, ptr addrspace(1) %2, i64 %570, !dbg !67
  %572 = icmp eq i32 %22, 0, !dbg !68
  %573 = and i1 %572, %17, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %567, ptr addrspace(1) %571, i1 %573) #5, !dbg !68
  %574 = getelementptr float, ptr addrspace(1) %3, i64 %570, !dbg !69
  %575 = bitcast float %569 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %575, ptr addrspace(1) %574, i1 %573) #5, !dbg !70
  %576 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %569, float 1.280000e+02) #5, !dbg !71
  %577 = fadd float %576, 0x3EE4F8B580000000, !dbg !72
  %578 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !73
  %.not.i = icmp eq i32 %578, 0, !dbg !73
  br i1 %.not.i, label %581, label %579, !dbg !73

579:                                              ; preds = %389
  %580 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %577), !dbg !73
  br label %__nv_rsqrtf.exit, !dbg !73

581:                                              ; preds = %389
  %582 = tail call float @llvm.nvvm.rsqrt.approx.f(float %577), !dbg !73
  br label %__nv_rsqrtf.exit, !dbg !73

__nv_rsqrtf.exit:                                 ; preds = %579, %581
  %.0.i = phi float [ %580, %579 ], [ %582, %581 ], !dbg !73
  %583 = getelementptr float, ptr addrspace(1) %4, i64 %570, !dbg !74
  %584 = bitcast float %.0.i to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %584, ptr addrspace(1) %583, i1 %573) #5, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5wz7ctqcquzljbcks5u73pwutuwwyrsyvfne7nlac53bvasgdos.py", directory: "inductor_cache/5w")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_24, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_24, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_24", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 53, scope: !7)
!17 = !DILocation(line: 52, column: 38, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 49, column: 62, scope: !7)
!20 = !DILocation(line: 31, column: 27, scope: !7)
!21 = !DILocation(line: 36, column: 44, scope: !7)
!22 = !DILocation(line: 36, column: 34, scope: !7)
!23 = !DILocation(line: 36, column: 58, scope: !7)
!24 = !DILocation(line: 37, column: 53, scope: !7)
!25 = !DILocation(line: 37, column: 34, scope: !7)
!26 = !DILocation(line: 37, column: 62, scope: !7)
!27 = !DILocation(line: 38, column: 53, scope: !7)
!28 = !DILocation(line: 38, column: 34, scope: !7)
!29 = !DILocation(line: 38, column: 62, scope: !7)
!30 = !DILocation(line: 39, column: 53, scope: !7)
!31 = !DILocation(line: 39, column: 34, scope: !7)
!32 = !DILocation(line: 39, column: 62, scope: !7)
!33 = !DILocation(line: 40, column: 22, scope: !7)
!34 = !DILocation(line: 41, column: 22, scope: !7)
!35 = !DILocation(line: 42, column: 22, scope: !7)
!36 = !DILocation(line: 44, column: 22, scope: !7)
!37 = !DILocation(line: 178, column: 7, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 47, column: 54, scope: !7)
!41 = !DILocation(line: 183, column: 24, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 184, column: 30, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 185, column: 34, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 185, column: 26, scope: !38, inlinedAt: !40)
!45 = !DILocation(line: 186, column: 39, scope: !38, inlinedAt: !40)
!46 = !DILocation(line: 186, column: 31, scope: !38, inlinedAt: !40)
!47 = !DILocation(line: 186, column: 22, scope: !38, inlinedAt: !40)
!48 = !DILocation(line: 50, column: 58, scope: !7)
!49 = !DILocation(line: 51, column: 66, scope: !7)
!50 = !DILocation(line: 52, column: 29, scope: !7)
!51 = !DILocation(line: 52, column: 49, scope: !7)
!52 = !DILocation(line: 204, column: 46, scope: !38, inlinedAt: !53)
!53 = !DILocation(line: 54, column: 44, scope: !7)
!54 = !DILocation(line: 192, column: 21, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !38, file: !39, discriminator: 0)
!56 = !DILocation(line: 193, column: 28, scope: !55, inlinedAt: !53)
!57 = !DILocation(line: 194, column: 39, scope: !55, inlinedAt: !53)
!58 = !DILocation(line: 194, column: 60, scope: !55, inlinedAt: !53)
!59 = !DILocation(line: 194, column: 49, scope: !55, inlinedAt: !53)
!60 = !DILocation(line: 196, column: 25, scope: !55, inlinedAt: !53)
!61 = !DILocation(line: 196, column: 17, scope: !55, inlinedAt: !53)
!62 = !DILocation(line: 197, column: 15, scope: !55, inlinedAt: !53)
!63 = !DILocation(line: 197, column: 30, scope: !55, inlinedAt: !53)
!64 = !DILocation(line: 197, column: 38, scope: !55, inlinedAt: !53)
!65 = !DILocation(line: 197, column: 49, scope: !55, inlinedAt: !53)
!66 = !DILocation(line: 197, column: 22, scope: !55, inlinedAt: !53)
!67 = !DILocation(line: 59, column: 25, scope: !7)
!68 = !DILocation(line: 59, column: 37, scope: !7)
!69 = !DILocation(line: 60, column: 25, scope: !7)
!70 = !DILocation(line: 60, column: 37, scope: !7)
!71 = !DILocation(line: 62, column: 20, scope: !7)
!72 = !DILocation(line: 64, column: 20, scope: !7)
!73 = !DILocation(line: 65, column: 28, scope: !7)
!74 = !DILocation(line: 66, column: 25, scope: !7)
!75 = !DILocation(line: 66, column: 37, scope: !7)
!76 = !DILocation(line: 66, column: 4, scope: !7)
