; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__softmax_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 128, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 16, !dbg !15
  %14 = mul i32 %13, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = sdiv i32 %11, 32, !dbg !17
  %16 = shl nsw i32 %15, 4, !dbg !18
  %17 = add nsw i32 %16, %.decomposed, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !20
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 %12) #3, !dbg !21
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !21
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !21
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !21
  %25 = bitcast i32 %21 to float, !dbg !21
  %26 = bitcast i32 %22 to float, !dbg !21
  %27 = bitcast i32 %23 to float, !dbg !21
  %28 = bitcast i32 %24 to float, !dbg !21
  %29 = shl i32 %13, 11, !dbg !22
  %.mask = and i32 %8, 112
  %30 = add nsw i32 %.decomposed, %.mask
  %31 = add i32 %30, %29
  br label %32, !dbg !23

32:                                               ; preds = %5, %32
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %32 ]
  %33 = phi float [ 0.000000e+00, %5 ], [ %66, %32 ]
  %34 = phi float [ 0.000000e+00, %5 ], [ %67, %32 ]
  %35 = phi float [ 0.000000e+00, %5 ], [ %68, %32 ]
  %36 = phi float [ 0.000000e+00, %5 ], [ %69, %32 ]
  %indvars.iv.tr = trunc i64 %indvars.iv to i32, !dbg !24
  %37 = shl nuw nsw i32 %indvars.iv.tr, 4, !dbg !24
  %38 = add i32 %31, %37, !dbg !24
  %39 = sext i32 %38 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #3, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = fsub float %46, %25, !dbg !27
  %51 = fsub float %47, %26, !dbg !27
  %52 = fsub float %48, %27, !dbg !27
  %53 = fsub float %49, %28, !dbg !27
  %54 = fmul float %50, 0x3FF7154760000000, !dbg !28
  %55 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %54) #3, !dbg !28
  %56 = fmul float %51, 0x3FF7154760000000, !dbg !28
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #3, !dbg !28
  %58 = fmul float %52, 0x3FF7154760000000, !dbg !28
  %59 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %58) #3, !dbg !28
  %60 = fmul float %53, 0x3FF7154760000000, !dbg !28
  %61 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %60) #3, !dbg !28
  %62 = fadd float %33, %55, !dbg !29
  %63 = fadd float %34, %57, !dbg !29
  %64 = fadd float %35, %59, !dbg !29
  %65 = fadd float %36, %61, !dbg !29
  %66 = select i1 %12, float %62, float %33, !dbg !30
  %67 = select i1 %12, float %63, float %34, !dbg !30
  %68 = select i1 %12, float %64, float %35, !dbg !30
  %69 = select i1 %12, float %65, float %36, !dbg !30
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !23
  %70 = icmp samesign ult i64 %indvars.iv, 120, !dbg !23
  br i1 %70, label %32, label %71, !dbg !23

71:                                               ; preds = %32
  %72 = lshr i32 %8, 5, !dbg !12
  %73 = and i32 %8, 63, !dbg !12
  %74 = or disjoint i32 %7, %73, !dbg !13
  %75 = icmp slt i32 %74, 128, !dbg !14
  %76 = and i32 %8, 16, !dbg !12
  %77 = bitcast float %66 to i32, !dbg !31
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !31
  %79 = bitcast i32 %78 to float, !dbg !31
  %80 = fadd float %66, %79, !dbg !35
  %81 = bitcast float %67 to i32, !dbg !31
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 16, i32 31), !dbg !31
  %83 = bitcast i32 %82 to float, !dbg !31
  %84 = fadd float %67, %83, !dbg !35
  %85 = bitcast float %68 to i32, !dbg !31
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 16, i32 31), !dbg !31
  %87 = bitcast i32 %86 to float, !dbg !31
  %88 = fadd float %68, %87, !dbg !35
  %89 = bitcast float %69 to i32, !dbg !31
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 16, i32 31), !dbg !31
  %91 = bitcast i32 %90 to float, !dbg !31
  %92 = fadd float %69, %91, !dbg !35
  %93 = icmp eq i32 %76, 0, !dbg !31
  %94 = and i32 %72, 3, !dbg !31
  %95 = shl nuw nsw i32 %10, 2, !dbg !31
  %96 = or disjoint i32 %95, %94, !dbg !31
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !31
  %98 = bitcast float %80 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 %93) #3, !dbg !31
  %99 = or disjoint i32 %95, 4, !dbg !31
  %100 = or disjoint i32 %99, %94, !dbg !31
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !31
  %102 = bitcast float %84 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 %93) #3, !dbg !31
  %103 = or disjoint i32 %95, 8, !dbg !31
  %104 = or disjoint i32 %103, %94, !dbg !31
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !31
  %106 = bitcast float %88 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 %93) #3, !dbg !31
  %107 = or disjoint i32 %95, 12, !dbg !31
  %108 = or disjoint i32 %107, %94, !dbg !31
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !31
  %110 = bitcast float %92 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 %93) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %111 = icmp slt i32 %8, 256, !dbg !31
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !31
  %113 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %112, i1 %111) #3, !dbg !31
  %114 = bitcast i32 %113 to float, !dbg !31
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 2, i32 31), !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = fadd float %114, %116, !dbg !35
  %118 = bitcast float %117 to i32, !dbg !31
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = fadd float %117, %120, !dbg !35
  %122 = and i32 %8, 3, !dbg !31
  %123 = icmp eq i32 %122, 0, !dbg !31
  %124 = and i1 %111, %123, !dbg !31
  %125 = bitcast float %121 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %125, i1 %124) #3, !dbg !31
  %126 = getelementptr i8, ptr addrspace(3) %112, i32 512, !dbg !31
  %127 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %126, i1 %111) #3, !dbg !31
  %128 = bitcast i32 %127 to float, !dbg !31
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !31
  %130 = bitcast i32 %129 to float, !dbg !31
  %131 = fadd float %128, %130, !dbg !35
  %132 = bitcast float %131 to i32, !dbg !31
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !31
  %134 = bitcast i32 %133 to float, !dbg !31
  %135 = fadd float %131, %134, !dbg !35
  %136 = bitcast float %135 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %136, i1 %124) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !31
  %138 = load i32, ptr addrspace(3) %137, align 16, !dbg !31
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !31
  %140 = load i32, ptr addrspace(3) %139, align 16, !dbg !31
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !31
  %142 = load i32, ptr addrspace(3) %141, align 16, !dbg !31
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !31
  %144 = load i32, ptr addrspace(3) %143, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !37
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %145, i32 %138, i32 %140, i32 %142, i32 %144, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !37
  %147 = load i32, ptr addrspace(3) %146, align 4, !dbg !37
  %148 = sext i32 %74 to i64, !dbg !38
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !38
  %150 = and i32 %8, 64, !dbg !39
  %151 = icmp eq i32 %150, 0, !dbg !39
  %152 = and i1 %151, %75, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %149, i1 %152) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyk3jgu7r7hosikwsvffmwl5zuyrvgcu3hhhcfybzktmdxeleqgg.py", directory: "inductor_cache/yk")
!4 = !{ptr @triton_red_fused__softmax_3, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__softmax_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__softmax_3", linkageName: "triton_red_fused__softmax_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 38, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 43, scope: !7)
!22 = !DILocation(line: 36, column: 52, scope: !7)
!23 = !DILocation(line: 32, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 47, scope: !7)
!25 = !DILocation(line: 36, column: 34, scope: !7)
!26 = !DILocation(line: 36, column: 57, scope: !7)
!27 = !DILocation(line: 39, column: 22, scope: !7)
!28 = !DILocation(line: 41, column: 27, scope: !7)
!29 = !DILocation(line: 43, column: 23, scope: !7)
!30 = !DILocation(line: 44, column: 46, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 45, column: 25, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 45, column: 28, scope: !7)
!38 = !DILocation(line: 46, column: 25, scope: !7)
!39 = !DILocation(line: 46, column: 36, scope: !7)
!40 = !DILocation(line: 46, column: 4, scope: !7)
