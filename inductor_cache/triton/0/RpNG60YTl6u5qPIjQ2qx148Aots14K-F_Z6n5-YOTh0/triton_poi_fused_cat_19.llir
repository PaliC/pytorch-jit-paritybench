; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 510, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 1, !dbg !13
  %22 = icmp slt i32 %20, 388448, !dbg !14
  %.frozen = freeze i32 %20, !dbg !15
  %23 = sdiv i32 %.frozen, 97112, !dbg !15
  %24 = mul i32 %23, 97112, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %21, 97112, !dbg !16
  %26 = icmp slt i32 %.decomposed, 65536, !dbg !17
  %27 = sdiv i32 %.decomposed, 16, !dbg !18
  %28 = mul i32 %27, 16, !dbg !19
  %.decomposed23 = sub i32 %.decomposed, %28, !dbg !19
  %.frozen24 = freeze i32 %25, !dbg !18
  %29 = sdiv i32 %.frozen24, 16, !dbg !18
  %30 = mul i32 %29, 16, !dbg !19
  %.decomposed25 = sub i32 %.frozen24, %30, !dbg !19
  %31 = shl nsw i32 %.decomposed23, 12, !dbg !20
  %32 = shl nsw i32 %.decomposed25, 12, !dbg !20
  %33 = shl nsw i32 %23, 16, !dbg !21
  %34 = add nsw i32 %31, %33, !dbg !22
  %.lhs.trunc = trunc nsw i32 %27 to i16, !dbg !23
  %35 = srem i16 %.lhs.trunc, 4096, !dbg !23
  %.sext = sext i16 %35 to i32, !dbg !23
  %.lhs.trunc1 = trunc nsw i32 %29 to i16, !dbg !23
  %36 = srem i16 %.lhs.trunc1, 4096, !dbg !23
  %.sext2 = sext i16 %36 to i32, !dbg !23
  %37 = add nsw i32 %34, %.sext, !dbg !24
  %38 = add nsw i32 %32, %.sext2, !dbg !22
  %39 = add nsw i32 %38, %33, !dbg !24
  %40 = sext i32 %37 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = sext i32 %39 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = and i1 %22, %26, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %44, i32 0, i1 %44) #1, !dbg !27
  %46 = bitcast i32 %45 to float, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %44, i32 0, i1 %44) #1, !dbg !27
  %48 = bitcast i32 %47 to float, !dbg !27
  %49 = sext i32 %.decomposed23 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !28
  %51 = sext i32 %.decomposed25 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %44, i32 0, i1 %44) #1, !dbg !29
  %54 = bitcast i32 %53 to float, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %44, i32 0, i1 %44) #1, !dbg !29
  %56 = bitcast i32 %55 to float, !dbg !29
  %57 = fadd float %46, %54, !dbg !30
  %58 = fadd float %48, %56, !dbg !30
  %59 = add nsw i32 %.decomposed, -65536, !dbg !31
  %60 = icmp ult i32 %59, 23064, !dbg !31
  %61 = add nsw i32 %25, -65536, !dbg !32
  %62 = sdiv i32 %59, 24, !dbg !33
  %63 = mul i32 %62, 24, !dbg !34
  %.decomposed26 = sub i32 %59, %63, !dbg !34
  %.frozen27 = freeze i32 %61, !dbg !33
  %64 = sdiv i32 %.frozen27, 24, !dbg !33
  %65 = mul i32 %64, 24, !dbg !34
  %.decomposed28 = sub i32 %.frozen27, %65, !dbg !34
  %66 = mul nsw i32 %.decomposed26, 961, !dbg !35
  %67 = mul nsw i32 %.decomposed28, 961, !dbg !35
  %68 = mul nsw i32 %23, 23064, !dbg !36
  %69 = add nsw i32 %66, %68, !dbg !37
  %.lhs.trunc3 = trunc nsw i32 %62 to i16, !dbg !38
  %70 = srem i16 %.lhs.trunc3, 961, !dbg !38
  %.sext4 = sext i16 %70 to i32, !dbg !38
  %.lhs.trunc5 = trunc nsw i32 %64 to i16, !dbg !38
  %71 = srem i16 %.lhs.trunc5, 961, !dbg !38
  %.sext6 = sext i16 %71 to i32, !dbg !38
  %72 = add nsw i32 %69, %.sext4, !dbg !39
  %73 = add nsw i32 %67, %.sext6, !dbg !37
  %74 = add nsw i32 %73, %68, !dbg !39
  %75 = sext i32 %72 to i64, !dbg !40
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !40
  %77 = sext i32 %74 to i64, !dbg !40
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !40
  %79 = and i1 %22, %60, !dbg !41
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %79, i32 0, i1 %79) #1, !dbg !42
  %81 = bitcast i32 %80 to float, !dbg !42
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 0, i1 %79) #1, !dbg !42
  %83 = bitcast i32 %82 to float, !dbg !42
  %84 = sext i32 %.decomposed26 to i64, !dbg !43
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !43
  %86 = sext i32 %.decomposed28 to i64, !dbg !43
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !43
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %79, i32 0, i1 %79) #1, !dbg !44
  %89 = bitcast i32 %88 to float, !dbg !44
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %79, i32 0, i1 %79) #1, !dbg !44
  %91 = bitcast i32 %90 to float, !dbg !44
  %92 = fadd float %81, %89, !dbg !45
  %93 = fadd float %83, %91, !dbg !45
  %94 = add nsw i32 %.decomposed, -88600, !dbg !46
  %95 = icmp ult i32 %94, 6144, !dbg !46
  %96 = add nsw i32 %25, -88600, !dbg !47
  %97 = sdiv i32 %94, 24, !dbg !48
  %98 = mul i32 %97, 24, !dbg !49
  %.decomposed29 = sub i32 %94, %98, !dbg !49
  %.frozen30 = freeze i32 %96, !dbg !48
  %99 = sdiv i32 %.frozen30, 24, !dbg !48
  %100 = mul i32 %99, 24, !dbg !49
  %.decomposed31 = sub i32 %.frozen30, %100, !dbg !49
  %101 = shl nsw i32 %.decomposed29, 8, !dbg !50
  %102 = shl nsw i32 %.decomposed31, 8, !dbg !50
  %103 = mul nsw i32 %23, 6144, !dbg !51
  %104 = add nsw i32 %101, %103, !dbg !52
  %.lhs.trunc7 = trunc nsw i32 %97 to i16, !dbg !53
  %105 = srem i16 %.lhs.trunc7, 256, !dbg !53
  %.sext8 = sext i16 %105 to i32, !dbg !53
  %.lhs.trunc9 = trunc nsw i32 %99 to i16, !dbg !53
  %106 = srem i16 %.lhs.trunc9, 256, !dbg !53
  %.sext10 = sext i16 %106 to i32, !dbg !53
  %107 = add nsw i32 %104, %.sext8, !dbg !54
  %108 = add nsw i32 %102, %.sext10, !dbg !52
  %109 = add nsw i32 %108, %103, !dbg !54
  %110 = sext i32 %107 to i64, !dbg !55
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %110, !dbg !55
  %112 = sext i32 %109 to i64, !dbg !55
  %113 = getelementptr float, ptr addrspace(1) %4, i64 %112, !dbg !55
  %114 = and i1 %22, %95, !dbg !56
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %114, i32 0, i1 %114) #1, !dbg !57
  %116 = bitcast i32 %115 to float, !dbg !57
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %114, i32 0, i1 %114) #1, !dbg !57
  %118 = bitcast i32 %117 to float, !dbg !57
  %119 = sext i32 %.decomposed29 to i64, !dbg !58
  %120 = getelementptr float, ptr addrspace(1) %5, i64 %119, !dbg !58
  %121 = sext i32 %.decomposed31 to i64, !dbg !58
  %122 = getelementptr float, ptr addrspace(1) %5, i64 %121, !dbg !58
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %114, i32 0, i1 %114) #1, !dbg !59
  %124 = bitcast i32 %123 to float, !dbg !59
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %114, i32 0, i1 %114) #1, !dbg !59
  %126 = bitcast i32 %125 to float, !dbg !59
  %127 = fadd float %116, %124, !dbg !60
  %128 = fadd float %118, %126, !dbg !60
  %129 = add nsw i32 %.decomposed, -94744, !dbg !61
  %130 = icmp ult i32 %129, 1536, !dbg !61
  %131 = add nsw i32 %25, -94744, !dbg !62
  %132 = sdiv i32 %129, 24, !dbg !63
  %133 = mul i32 %132, 24, !dbg !64
  %.decomposed32 = sub i32 %129, %133, !dbg !64
  %.frozen33 = freeze i32 %131, !dbg !63
  %134 = sdiv i32 %.frozen33, 24, !dbg !63
  %135 = mul i32 %134, 24, !dbg !64
  %.decomposed34 = sub i32 %.frozen33, %135, !dbg !64
  %136 = shl nsw i32 %.decomposed32, 6, !dbg !65
  %137 = shl nsw i32 %.decomposed34, 6, !dbg !65
  %138 = mul nsw i32 %23, 1536, !dbg !66
  %139 = add nsw i32 %136, %138, !dbg !67
  %.lhs.trunc11 = trunc nsw i32 %132 to i16, !dbg !68
  %140 = srem i16 %.lhs.trunc11, 64, !dbg !68
  %.sext12 = sext i16 %140 to i32, !dbg !68
  %.lhs.trunc13 = trunc nsw i32 %134 to i16, !dbg !68
  %141 = srem i16 %.lhs.trunc13, 64, !dbg !68
  %.sext14 = sext i16 %141 to i32, !dbg !68
  %142 = add nsw i32 %139, %.sext12, !dbg !69
  %143 = add nsw i32 %137, %.sext14, !dbg !67
  %144 = add nsw i32 %143, %138, !dbg !69
  %145 = sext i32 %142 to i64, !dbg !70
  %146 = getelementptr float, ptr addrspace(1) %6, i64 %145, !dbg !70
  %147 = sext i32 %144 to i64, !dbg !70
  %148 = getelementptr float, ptr addrspace(1) %6, i64 %147, !dbg !70
  %149 = and i1 %22, %130, !dbg !71
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %149, i32 0, i1 %149) #1, !dbg !72
  %151 = bitcast i32 %150 to float, !dbg !72
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %149, i32 0, i1 %149) #1, !dbg !72
  %153 = bitcast i32 %152 to float, !dbg !72
  %154 = sext i32 %.decomposed32 to i64, !dbg !73
  %155 = getelementptr float, ptr addrspace(1) %7, i64 %154, !dbg !73
  %156 = sext i32 %.decomposed34 to i64, !dbg !73
  %157 = getelementptr float, ptr addrspace(1) %7, i64 %156, !dbg !73
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %149, i32 0, i1 %149) #1, !dbg !74
  %159 = bitcast i32 %158 to float, !dbg !74
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %149, i32 0, i1 %149) #1, !dbg !74
  %161 = bitcast i32 %160 to float, !dbg !74
  %162 = fadd float %151, %159, !dbg !75
  %163 = fadd float %153, %161, !dbg !75
  %164 = add nsw i32 %.decomposed, -96280, !dbg !76
  %165 = icmp ult i32 %164, 576, !dbg !76
  %166 = add nsw i32 %25, -96280, !dbg !77
  %167 = sdiv i32 %164, 16, !dbg !78
  %168 = mul i32 %167, 16, !dbg !79
  %.decomposed35 = sub i32 %164, %168, !dbg !79
  %.frozen36 = freeze i32 %166, !dbg !78
  %169 = sdiv i32 %.frozen36, 16, !dbg !78
  %170 = mul i32 %169, 16, !dbg !79
  %.decomposed37 = sub i32 %.frozen36, %170, !dbg !79
  %171 = mul nsw i32 %.decomposed35, 36, !dbg !80
  %172 = mul nsw i32 %.decomposed37, 36, !dbg !80
  %173 = mul nsw i32 %23, 576, !dbg !81
  %174 = add nsw i32 %171, %173, !dbg !82
  %.lhs.trunc15 = trunc nsw i32 %167 to i16, !dbg !83
  %175 = srem i16 %.lhs.trunc15, 36, !dbg !83
  %.sext16 = sext i16 %175 to i32, !dbg !83
  %.lhs.trunc17 = trunc nsw i32 %169 to i16, !dbg !83
  %176 = srem i16 %.lhs.trunc17, 36, !dbg !83
  %.sext18 = sext i16 %176 to i32, !dbg !83
  %177 = add nsw i32 %174, %.sext16, !dbg !84
  %178 = add nsw i32 %172, %.sext18, !dbg !82
  %179 = add nsw i32 %178, %173, !dbg !84
  %180 = sext i32 %177 to i64, !dbg !85
  %181 = getelementptr float, ptr addrspace(1) %8, i64 %180, !dbg !85
  %182 = sext i32 %179 to i64, !dbg !85
  %183 = getelementptr float, ptr addrspace(1) %8, i64 %182, !dbg !85
  %184 = and i1 %22, %165, !dbg !86
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %184, i32 0, i1 %184) #1, !dbg !87
  %186 = bitcast i32 %185 to float, !dbg !87
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %184, i32 0, i1 %184) #1, !dbg !87
  %188 = bitcast i32 %187 to float, !dbg !87
  %189 = sext i32 %.decomposed35 to i64, !dbg !88
  %190 = getelementptr float, ptr addrspace(1) %9, i64 %189, !dbg !88
  %191 = sext i32 %.decomposed37 to i64, !dbg !88
  %192 = getelementptr float, ptr addrspace(1) %9, i64 %191, !dbg !88
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %184, i32 0, i1 %184) #1, !dbg !89
  %194 = bitcast i32 %193 to float, !dbg !89
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %184, i32 0, i1 %184) #1, !dbg !89
  %196 = bitcast i32 %195 to float, !dbg !89
  %197 = fadd float %186, %194, !dbg !90
  %198 = fadd float %188, %196, !dbg !90
  %199 = icmp sgt i32 %.decomposed, 96855, !dbg !91
  %200 = add nsw i32 %.decomposed, -96856, !dbg !92
  %201 = add nsw i32 %25, -96856, !dbg !92
  %202 = sdiv i32 %200, 16, !dbg !93
  %203 = mul i32 %202, 16, !dbg !94
  %.decomposed38 = sub i32 %200, %203, !dbg !94
  %.frozen39 = freeze i32 %201, !dbg !93
  %204 = sdiv i32 %.frozen39, 16, !dbg !93
  %205 = mul i32 %204, 16, !dbg !94
  %.decomposed40 = sub i32 %.frozen39, %205, !dbg !94
  %206 = shl nsw i32 %.decomposed38, 4, !dbg !95
  %207 = shl nsw i32 %.decomposed40, 4, !dbg !95
  %208 = shl nsw i32 %23, 8, !dbg !96
  %209 = add nsw i32 %206, %208, !dbg !97
  %.lhs.trunc19 = trunc nsw i32 %202 to i16, !dbg !98
  %210 = srem i16 %.lhs.trunc19, 16, !dbg !98
  %.sext20 = sext i16 %210 to i32, !dbg !98
  %.lhs.trunc21 = trunc nsw i32 %204 to i16, !dbg !98
  %211 = srem i16 %.lhs.trunc21, 16, !dbg !98
  %.sext22 = sext i16 %211 to i32, !dbg !98
  %212 = add nsw i32 %209, %.sext20, !dbg !99
  %213 = add nsw i32 %207, %.sext22, !dbg !97
  %214 = add nsw i32 %213, %208, !dbg !99
  %215 = sext i32 %212 to i64, !dbg !100
  %216 = getelementptr float, ptr addrspace(1) %10, i64 %215, !dbg !100
  %217 = sext i32 %214 to i64, !dbg !100
  %218 = getelementptr float, ptr addrspace(1) %10, i64 %217, !dbg !100
  %219 = and i1 %22, %199, !dbg !101
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %219, i32 0, i1 %219) #1, !dbg !102
  %221 = bitcast i32 %220 to float, !dbg !102
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %218, i1 %219, i32 0, i1 %219) #1, !dbg !102
  %223 = bitcast i32 %222 to float, !dbg !102
  %224 = sext i32 %.decomposed38 to i64, !dbg !103
  %225 = getelementptr float, ptr addrspace(1) %11, i64 %224, !dbg !103
  %226 = sext i32 %.decomposed40 to i64, !dbg !103
  %227 = getelementptr float, ptr addrspace(1) %11, i64 %226, !dbg !103
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %219, i32 0, i1 %219) #1, !dbg !104
  %229 = bitcast i32 %228 to float, !dbg !104
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %219, i32 0, i1 %219) #1, !dbg !104
  %231 = bitcast i32 %230 to float, !dbg !104
  %232 = fadd float %221, %229, !dbg !105
  %233 = fadd float %223, %231, !dbg !105
  %234 = select i1 %199, float %232, float 0.000000e+00, !dbg !106
  %235 = select i1 %199, float %233, float 0.000000e+00, !dbg !106
  %236 = select i1 %165, float %197, float %234, !dbg !107
  %237 = select i1 %165, float %198, float %235, !dbg !107
  %238 = select i1 %130, float %162, float %236, !dbg !107
  %239 = select i1 %130, float %163, float %237, !dbg !107
  %240 = select i1 %95, float %127, float %238, !dbg !107
  %241 = select i1 %95, float %128, float %239, !dbg !107
  %242 = select i1 %60, float %92, float %240, !dbg !107
  %243 = select i1 %60, float %93, float %241, !dbg !107
  %244 = select i1 %26, float %57, float %242, !dbg !107
  %245 = select i1 %26, float %58, float %243, !dbg !107
  %246 = sext i32 %20 to i64, !dbg !108
  %247 = getelementptr float, ptr addrspace(1) %12, i64 %246, !dbg !108
  %248 = bitcast float %244 to i32, !dbg !109
  %249 = bitcast float %245 to i32, !dbg !109
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %248, i32 %249, ptr addrspace(1) %247, i1 %22) #1, !dbg !109
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw6jz6z3yzgjppn4qkrjaswgrzekfkc5vrhkt4ip3xdlhe6iwjew.py", directory: "inductor_cache/w6")
!4 = !{ptr @triton_poi_fused_cat_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_19, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_19", linkageName: "triton_poi_fused_cat_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 73, scope: !7)
!19 = !DILocation(line: 32, column: 44, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 57, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 79, scope: !7)
!24 = !DILocation(line: 32, column: 64, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 95, scope: !7)
!27 = !DILocation(line: 32, column: 88, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 49, scope: !7)
!33 = !DILocation(line: 41, column: 95, scope: !7)
!34 = !DILocation(line: 41, column: 55, scope: !7)
!35 = !DILocation(line: 41, column: 37, scope: !7)
!36 = !DILocation(line: 41, column: 68, scope: !7)
!37 = !DILocation(line: 41, column: 62, scope: !7)
!38 = !DILocation(line: 41, column: 101, scope: !7)
!39 = !DILocation(line: 41, column: 75, scope: !7)
!40 = !DILocation(line: 41, column: 31, scope: !7)
!41 = !DILocation(line: 41, column: 117, scope: !7)
!42 = !DILocation(line: 41, column: 109, scope: !7)
!43 = !DILocation(line: 42, column: 32, scope: !7)
!44 = !DILocation(line: 42, column: 56, scope: !7)
!45 = !DILocation(line: 43, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 49, scope: !7)
!48 = !DILocation(line: 50, column: 94, scope: !7)
!49 = !DILocation(line: 50, column: 55, scope: !7)
!50 = !DILocation(line: 50, column: 37, scope: !7)
!51 = !DILocation(line: 50, column: 67, scope: !7)
!52 = !DILocation(line: 50, column: 62, scope: !7)
!53 = !DILocation(line: 50, column: 100, scope: !7)
!54 = !DILocation(line: 50, column: 74, scope: !7)
!55 = !DILocation(line: 50, column: 31, scope: !7)
!56 = !DILocation(line: 50, column: 116, scope: !7)
!57 = !DILocation(line: 50, column: 108, scope: !7)
!58 = !DILocation(line: 51, column: 32, scope: !7)
!59 = !DILocation(line: 51, column: 56, scope: !7)
!60 = !DILocation(line: 52, column: 20, scope: !7)
!61 = !DILocation(line: 58, column: 20, scope: !7)
!62 = !DILocation(line: 59, column: 48, scope: !7)
!63 = !DILocation(line: 59, column: 93, scope: !7)
!64 = !DILocation(line: 59, column: 54, scope: !7)
!65 = !DILocation(line: 59, column: 36, scope: !7)
!66 = !DILocation(line: 59, column: 66, scope: !7)
!67 = !DILocation(line: 59, column: 61, scope: !7)
!68 = !DILocation(line: 59, column: 99, scope: !7)
!69 = !DILocation(line: 59, column: 73, scope: !7)
!70 = !DILocation(line: 59, column: 31, scope: !7)
!71 = !DILocation(line: 59, column: 114, scope: !7)
!72 = !DILocation(line: 59, column: 106, scope: !7)
!73 = !DILocation(line: 60, column: 32, scope: !7)
!74 = !DILocation(line: 60, column: 56, scope: !7)
!75 = !DILocation(line: 61, column: 20, scope: !7)
!76 = !DILocation(line: 67, column: 20, scope: !7)
!77 = !DILocation(line: 68, column: 48, scope: !7)
!78 = !DILocation(line: 68, column: 92, scope: !7)
!79 = !DILocation(line: 68, column: 54, scope: !7)
!80 = !DILocation(line: 68, column: 36, scope: !7)
!81 = !DILocation(line: 68, column: 65, scope: !7)
!82 = !DILocation(line: 68, column: 61, scope: !7)
!83 = !DILocation(line: 68, column: 98, scope: !7)
!84 = !DILocation(line: 68, column: 72, scope: !7)
!85 = !DILocation(line: 68, column: 31, scope: !7)
!86 = !DILocation(line: 68, column: 113, scope: !7)
!87 = !DILocation(line: 68, column: 105, scope: !7)
!88 = !DILocation(line: 69, column: 32, scope: !7)
!89 = !DILocation(line: 69, column: 56, scope: !7)
!90 = !DILocation(line: 70, column: 20, scope: !7)
!91 = !DILocation(line: 73, column: 20, scope: !7)
!92 = !DILocation(line: 76, column: 49, scope: !7)
!93 = !DILocation(line: 76, column: 93, scope: !7)
!94 = !DILocation(line: 76, column: 55, scope: !7)
!95 = !DILocation(line: 76, column: 37, scope: !7)
!96 = !DILocation(line: 76, column: 66, scope: !7)
!97 = !DILocation(line: 76, column: 62, scope: !7)
!98 = !DILocation(line: 76, column: 99, scope: !7)
!99 = !DILocation(line: 76, column: 73, scope: !7)
!100 = !DILocation(line: 76, column: 32, scope: !7)
!101 = !DILocation(line: 76, column: 114, scope: !7)
!102 = !DILocation(line: 76, column: 106, scope: !7)
!103 = !DILocation(line: 77, column: 33, scope: !7)
!104 = !DILocation(line: 77, column: 57, scope: !7)
!105 = !DILocation(line: 78, column: 20, scope: !7)
!106 = !DILocation(line: 80, column: 35, scope: !7)
!107 = !DILocation(line: 0, scope: !7)
!108 = !DILocation(line: 86, column: 25, scope: !7)
!109 = !DILocation(line: 86, column: 37, scope: !7)
!110 = !DILocation(line: 86, column: 4, scope: !7)
