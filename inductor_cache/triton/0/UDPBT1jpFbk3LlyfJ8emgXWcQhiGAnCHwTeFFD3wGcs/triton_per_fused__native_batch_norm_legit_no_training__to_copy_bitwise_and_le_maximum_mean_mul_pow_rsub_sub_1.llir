; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training__to_copy_bitwise_and_le_maximum_mean_mul_pow_rsub_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %12 = shl i32 %11, 2, !dbg !10
  %13 = and i32 %12, 252, !dbg !10
  %14 = lshr i32 %12, 4, !dbg !11
  %15 = and i32 %14, 3, !dbg !11
  %16 = zext nneg i32 %13 to i64, !dbg !12
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !12
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #5, !dbg !13
  %19 = zext nneg i32 %15 to i64, !dbg !14
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !14
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !15
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !15
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !15
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !15
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !16
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !17
  %27 = bitcast i32 %26 to float, !dbg !17
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !17
  %29 = bitcast i32 %28 to float, !dbg !17
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !17
  %31 = bitcast i32 %30 to float, !dbg !17
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !17
  %33 = bitcast i32 %32 to float, !dbg !17
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !18
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %6, i64 %16, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !25
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !25
  %51 = fadd float %27, 0x3EE4F8B580000000, !dbg !26
  %52 = fadd float %29, 0x3EE4F8B580000000, !dbg !26
  %53 = fadd float %31, 0x3EE4F8B580000000, !dbg !26
  %54 = fadd float %33, 0x3EE4F8B580000000, !dbg !26
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i = icmp eq i32 %55, 0, !dbg !27
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i = icmp eq i32 %56, 0, !dbg !27
  br i1 %.not.i, label %62, label %57, !dbg !27

57:                                               ; preds = %10
  br i1 %.not1.i, label %60, label %58, !dbg !27

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

62:                                               ; preds = %10
  br i1 %.not1.i, label %65, label %63, !dbg !27

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %58, %60, %63, %65
  %.0.i = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !27
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i1 = icmp eq i32 %67, 0, !dbg !27
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i4 = icmp eq i32 %68, 0, !dbg !27
  br i1 %.not.i1, label %74, label %69, !dbg !27

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !27

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !27

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %70, %72, %75, %77
  %.0.i3 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !27
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i6 = icmp eq i32 %79, 0, !dbg !27
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i9 = icmp eq i32 %80, 0, !dbg !27
  br i1 %.not.i6, label %86, label %81, !dbg !27

81:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %84, label %82, !dbg !27

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

86:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %89, label %87, !dbg !27

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %82, %84, %87, %89
  %.0.i8 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !27
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i11 = icmp eq i32 %91, 0, !dbg !27
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i14 = icmp eq i32 %92, 0, !dbg !27
  br i1 %.not.i11, label %98, label %93, !dbg !27

93:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %96, label %94, !dbg !27

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

98:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %101, label %99, !dbg !27

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %94, %96, %99, %101
  %.0.i13 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !27
  %103 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !13
  %104 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !15
  %105 = insertelement <2 x i32> %104, i32 %24, i64 1, !dbg !15
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !15
  %107 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !13
  %108 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !13
  %109 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !15
  %110 = insertelement <2 x i32> %109, i32 %22, i64 1, !dbg !15
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !15
  %112 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !13
  %113 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !25
  %114 = insertelement <2 x i32> %113, i32 %50, i64 1, !dbg !25
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !25
  %116 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !25
  %117 = insertelement <2 x i32> %116, i32 %48, i64 1, !dbg !25
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !23
  %120 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !23
  %121 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !23
  %122 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !23
  %123 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !21
  %124 = insertelement <2 x i32> %123, i32 %43, i64 1, !dbg !21
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !21
  %126 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !21
  %127 = insertelement <2 x i32> %126, i32 %41, i64 1, !dbg !21
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !21
  %129 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !19
  %130 = insertelement <2 x i32> %129, i32 %38, i64 1, !dbg !19
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !19
  %132 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !19
  %133 = insertelement <2 x i32> %132, i32 %36, i64 1, !dbg !19
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !19
  %135 = lshr i32 %11, 5, !dbg !10
  %136 = and i32 %11, 31, !dbg !10
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !28
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !28
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #5, !dbg !28
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !28
  %141 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !13
  %142 = insertelement <2 x i32> %141, i32 %108, i64 1, !dbg !13
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !13
  %144 = fsub <2 x float> %143, %111, !dbg !29
  %145 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !23
  %146 = insertelement <2 x i32> %145, i32 %121, i64 1, !dbg !23
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !23
  %148 = insertelement <2 x float> poison, float %137, i64 0, !dbg !30
  %149 = insertelement <2 x float> %148, float %138, i64 1, !dbg !30
  %150 = fmul <2 x float> %144, %149, !dbg !30
  %151 = fmul <2 x float> %150, %134, !dbg !31
  %152 = fadd <2 x float> %151, %128, !dbg !32
  %153 = fcmp ogt <2 x float> %147, %118, !dbg !33
  %154 = fcmp uno <2 x float> %147, zeroinitializer, !dbg !37
  %155 = or <2 x i1> %154, %153, !dbg !38
  %.v = select <2 x i1> %155, <2 x i32> %146, <2 x i32> %117, !dbg !39
  %156 = bitcast <2 x i32> %.v to <2 x float>, !dbg !39
  %157 = fcmp ole <2 x float> %152, %156, !dbg !40
  %158 = fcmp ole <2 x float> %156, zeroinitializer, !dbg !41
  %159 = and <2 x i1> %158, %157, !dbg !42
  %160 = fsub <2 x float> %152, %156, !dbg !43
  %161 = fmul <2 x float> %160, %160, !dbg !44
  %162 = uitofp <2 x i1> %159 to <2 x float>, !dbg !45
  %163 = fsub <2 x float> splat (float 1.000000e+00), %162, !dbg !46
  %164 = fmul <2 x float> %161, %163, !dbg !47
  %165 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !13
  %166 = insertelement <2 x i32> %165, i32 %103, i64 1, !dbg !13
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !13
  %168 = fsub <2 x float> %167, %106, !dbg !29
  %169 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !23
  %170 = insertelement <2 x i32> %169, i32 %119, i64 1, !dbg !23
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !23
  %172 = insertelement <2 x float> poison, float %139, i64 0, !dbg !30
  %173 = insertelement <2 x float> %172, float %140, i64 1, !dbg !30
  %174 = fmul <2 x float> %168, %173, !dbg !30
  %175 = fmul <2 x float> %174, %131, !dbg !31
  %176 = fadd <2 x float> %175, %125, !dbg !32
  %177 = fcmp ogt <2 x float> %171, %115, !dbg !33
  %178 = fcmp uno <2 x float> %171, zeroinitializer, !dbg !37
  %179 = or <2 x i1> %178, %177, !dbg !38
  %.v17 = select <2 x i1> %179, <2 x i32> %170, <2 x i32> %114, !dbg !39
  %180 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !39
  %181 = fcmp ole <2 x float> %176, %180, !dbg !40
  %182 = fcmp ole <2 x float> %180, zeroinitializer, !dbg !41
  %183 = and <2 x i1> %182, %181, !dbg !42
  %184 = fsub <2 x float> %176, %180, !dbg !43
  %185 = fmul <2 x float> %184, %184, !dbg !44
  %186 = uitofp <2 x i1> %183 to <2 x float>, !dbg !45
  %187 = fsub <2 x float> splat (float 1.000000e+00), %186, !dbg !46
  %188 = fmul <2 x float> %185, %187, !dbg !47
  %shift = shufflevector <2 x float> %164, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %189 = fadd <2 x float> %164, %shift, !dbg !48
  %190 = fadd <2 x float> %189, %188, !dbg !48
  %shift16 = shufflevector <2 x float> %188, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %191 = fadd <2 x float> %190, %shift16, !dbg !48
  %192 = extractelement <2 x float> %191, i64 0, !dbg !48
  %193 = bitcast float %192 to i32, !dbg !53
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 16, i32 31), !dbg !53
  %195 = bitcast i32 %194 to float, !dbg !53
  %196 = fadd float %192, %195, !dbg !48
  %197 = bitcast float %196 to i32, !dbg !53
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 8, i32 31), !dbg !53
  %199 = bitcast i32 %198 to float, !dbg !53
  %200 = fadd float %196, %199, !dbg !48
  %201 = bitcast float %200 to i32, !dbg !53
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 4, i32 31), !dbg !53
  %203 = bitcast i32 %202 to float, !dbg !53
  %204 = fadd float %200, %203, !dbg !48
  %205 = bitcast float %204 to i32, !dbg !53
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 2, i32 31), !dbg !53
  %207 = bitcast i32 %206 to float, !dbg !53
  %208 = fadd float %204, %207, !dbg !48
  %209 = bitcast float %208 to i32, !dbg !53
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 1, i32 31), !dbg !53
  %211 = bitcast i32 %210 to float, !dbg !53
  %212 = fadd float %208, %211, !dbg !48
  %213 = icmp eq i32 %136, 0, !dbg !53
  %214 = and i32 %135, 1, !dbg !53
  %215 = zext nneg i32 %214 to i64, !dbg !53
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i64 %215, !dbg !53
  %217 = bitcast float %212 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 %213) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %218 = icmp slt i32 %11, 2, !dbg !53
  %219 = sext i32 %11 to i64, !dbg !53
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i64 %219, !dbg !53
  %221 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %220, i1 %218) #5, !dbg !53
  %222 = bitcast i32 %221 to float, !dbg !53
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 1, i32 31), !dbg !53
  %224 = bitcast i32 %223 to float, !dbg !53
  %225 = fadd float %222, %224, !dbg !48
  %226 = and i32 %11, 1, !dbg !53
  %227 = icmp eq i32 %226, 0, !dbg !53
  %228 = and i1 %218, %227, !dbg !53
  %229 = bitcast float %225 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %229, i1 %228) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %230 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %231 = fadd float %230, 0.000000e+00, !dbg !54
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float 2.560000e+02) #5, !dbg !56
  %233 = getelementptr i1, ptr addrspace(1) %8, i64 %16, !dbg !57
  %234 = shufflevector <2 x i1> %159, <2 x i1> %183, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !58
  %235 = zext <4 x i1> %234 to <4 x i8>, !dbg !58
  %236 = bitcast <4 x i8> %235 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %236, ptr addrspace(1) %233, i1 true) #5, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %urem = and i32 %11, 63, !dbg !60
  %237 = icmp eq i32 %urem, 0, !dbg !60
  %238 = bitcast float %232 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %238, ptr addrspace(1) %0, i1 %237) #5, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdy6v7jexh3hbtc7h2ed6usfvzholsrnixtiphpsoqhgaeakducz.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training__to_copy_bitwise_and_le_maximum_mean_mul_pow_rsub_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training__to_copy_bitwise_and_le_maximum_mean_mul_pow_rsub_sub_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training__to_copy_bitwise_and_le_maximum_mean_mul_pow_rsub_sub_1", linkageName: "triton_per_fused__native_batch_norm_legit_no_training__to_copy_bitwise_and_le_maximum_mean_mul_pow_rsub_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 21, scope: !7)
!12 = !DILocation(line: 32, column: 30, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 33, column: 30, scope: !7)
!15 = !DILocation(line: 33, column: 35, scope: !7)
!16 = !DILocation(line: 34, column: 30, scope: !7)
!17 = !DILocation(line: 34, column: 35, scope: !7)
!18 = !DILocation(line: 35, column: 31, scope: !7)
!19 = !DILocation(line: 35, column: 36, scope: !7)
!20 = !DILocation(line: 36, column: 31, scope: !7)
!21 = !DILocation(line: 36, column: 36, scope: !7)
!22 = !DILocation(line: 37, column: 31, scope: !7)
!23 = !DILocation(line: 37, column: 36, scope: !7)
!24 = !DILocation(line: 38, column: 31, scope: !7)
!25 = !DILocation(line: 38, column: 36, scope: !7)
!26 = !DILocation(line: 41, column: 18, scope: !7)
!27 = !DILocation(line: 42, column: 26, scope: !7)
!28 = !DILocation(line: 44, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 47, column: 19, scope: !7)
!31 = !DILocation(line: 48, column: 20, scope: !7)
!32 = !DILocation(line: 49, column: 20, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 50, column: 42, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 51, column: 21, scope: !7)
!41 = !DILocation(line: 53, column: 21, scope: !7)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 21, scope: !7)
!46 = !DILocation(line: 58, column: 19, scope: !7)
!47 = !DILocation(line: 59, column: 20, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !52)
!49 = distinct !DILexicalBlockFile(scope: !51, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!51 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!52 = !DILocation(line: 61, column: 59, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !52)
!54 = !DILocation(line: 73, column: 15, scope: !34, inlinedAt: !55)
!55 = !DILocation(line: 61, column: 45, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 25, scope: !7)
!58 = !DILocation(line: 64, column: 64, scope: !7)
!59 = !DILocation(line: 65, column: 4, scope: !7)
!60 = !DILocation(line: 66, column: 63, scope: !7)
!61 = !DILocation(line: 66, column: 4, scope: !7)
