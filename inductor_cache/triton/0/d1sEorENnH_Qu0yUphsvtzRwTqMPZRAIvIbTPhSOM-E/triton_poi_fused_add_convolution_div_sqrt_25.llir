; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_sqrt_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 8, !dbg !13
  %14 = icmp slt i32 %12, 1536, !dbg !14
  %15 = icmp slt i32 %13, 1536, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 4, !dbg !16
  %18 = and i32 %9, 15, !dbg !17
  %19 = or disjoint i32 %17, %18, !dbg !18
  %20 = icmp slt i32 %19, 9, !dbg !19
  %21 = sdiv i32 %12, 384, !dbg !20
  %22 = sdiv i32 %13, 384, !dbg !20
  %23 = mul i32 %12, 9, !dbg !21
  %24 = mul i32 %13, 9, !dbg !21
  %25 = add i32 %19, %23, !dbg !22
  %26 = add i32 %19, %24, !dbg !22
  %27 = sext i32 %25 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = sext i32 %26 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = and i1 %14, %20, !dbg !24
  %32 = and i1 %15, %20, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %31) #4, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %32) #4, !dbg !25
  %35 = mul nsw i32 %21, 9, !dbg !26
  %36 = mul nsw i32 %22, 9, !dbg !26
  %37 = add i32 %35, %19, !dbg !27
  %38 = add i32 %19, %36, !dbg !27
  %39 = sext i32 %37 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !28
  %41 = sext i32 %38 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %31) #4, !dbg !29
  %44 = bitcast i32 %43 to float, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %32) #4, !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = fadd float %44, 0x3E112E0BE0000000, !dbg !30
  %48 = fadd float %46, 0x3E112E0BE0000000, !dbg !30
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %49, 0, !dbg !31
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %50, 0, !dbg !31
  br i1 %.not.i, label %56, label %51, !dbg !31

51:                                               ; preds = %6
  br i1 %.not1.i, label %54, label %52, !dbg !31

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

56:                                               ; preds = %6
  br i1 %.not1.i, label %59, label %57, !dbg !31

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !31
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i7 = icmp eq i32 %61, 0, !dbg !31
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i10 = icmp eq i32 %62, 0, !dbg !31
  br i1 %.not.i7, label %68, label %63, !dbg !31

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i10, label %66, label %64, !dbg !31

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i10, label %71, label %69, !dbg !31

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

__nv_sqrtf.exit11:                                ; preds = %64, %66, %69, %71
  %.0.i9 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !31
  %73 = bitcast i32 %34 to float, !dbg !25
  %74 = bitcast i32 %33 to float, !dbg !25
  %75 = lshr i32 %9, 3, !dbg !17
  %76 = and i32 %75, 15, !dbg !17
  %77 = or disjoint i32 %17, %76, !dbg !18
  %78 = icmp slt i32 %77, 9, !dbg !19
  %79 = shl i32 %9, 1, !dbg !12
  %80 = and i32 %79, 14, !dbg !12
  %81 = or disjoint i32 %8, %80, !dbg !13
  %82 = icmp slt i32 %81, 1536, !dbg !14
  %83 = and i1 %82, %78, !dbg !24
  %.frozen = freeze i32 %81, !dbg !20
  %84 = sdiv i32 %.frozen, 384, !dbg !20
  %85 = mul i32 %84, 384, !dbg !32
  %.decomposed = sub i32 %.frozen, %85, !dbg !32
  %86 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !33
  %87 = fadd float %.0.i9, 0x3DDB7CDFE0000000, !dbg !33
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %86) #4, !dbg !34
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %87) #4, !dbg !34
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !35
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !35
  %92 = bitcast float %88 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %90, i1 %31) #4, !dbg !36
  %93 = bitcast float %89 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %91, i1 %32) #4, !dbg !36
  %94 = mul i32 %77, 384, !dbg !37
  %95 = add i32 %94, %.decomposed, !dbg !38
  %96 = mul i32 %84, 3456, !dbg !39
  %97 = add i32 %95, %96, !dbg !40
  %98 = sext i32 %97 to i64, !dbg !41
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %98, !dbg !41
  %100 = shl i32 %9, 4, !dbg !42
  %101 = and i32 %100, 240, !dbg !42
  %102 = or disjoint i32 %101, %11, !dbg !42
  %103 = and i32 %79, 254, !dbg !42
  %104 = lshr exact i32 %101, 1, !dbg !42
  %105 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %104, !dbg !42
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %102, !dbg !42
  %107 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #4, !dbg !42
  %108 = or disjoint i32 %102, 8, !dbg !42
  %109 = getelementptr float, ptr addrspace(3) %105, i32 %108, !dbg !42
  %110 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %111 = lshr i32 %79, 3, !dbg !42
  %112 = and i32 %111, 30, !dbg !42
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !42
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %103, !dbg !42
  %.extract = load i32, ptr addrspace(3) %114, align 8, !dbg !42
  %115 = getelementptr inbounds i8, ptr addrspace(3) %114, i32 4, !dbg !42
  %.extract6 = load i32, ptr addrspace(3) %115, align 4, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %99, i1 %83) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdvuhjwd6e5fwikxsykcegooshh5i3w66grisz4a5ashtmni5j6e.py", directory: "inductor_cache/dv")
!4 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_sqrt_25", linkageName: "triton_poi_fused_add_convolution_div_sqrt_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 50, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 33, column: 37, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 42, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 26, scope: !7)
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 25, scope: !7)
!36 = !DILocation(line: 40, column: 43, scope: !7)
!37 = !DILocation(line: 41, column: 34, scope: !7)
!38 = !DILocation(line: 41, column: 30, scope: !7)
!39 = !DILocation(line: 41, column: 44, scope: !7)
!40 = !DILocation(line: 41, column: 39, scope: !7)
!41 = !DILocation(line: 41, column: 25, scope: !7)
!42 = !DILocation(line: 41, column: 55, scope: !7)
!43 = !DILocation(line: 41, column: 4, scope: !7)
