; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %12, 32, !dbg !12
  %15 = or disjoint i32 %12, 48, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = icmp slt i32 %16, 1280, !dbg !14
  %22 = icmp slt i32 %17, 1280, !dbg !14
  %23 = icmp slt i32 %18, 1280, !dbg !14
  %24 = icmp slt i32 %19, 1280, !dbg !14
  %25 = icmp slt i32 %20, 1280, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %27 = shl i32 %26, 6, !dbg !16
  %28 = or disjoint i32 %27, %12, !dbg !17
  %29 = or disjoint i32 %27, %13, !dbg !17
  %30 = or disjoint i32 %27, %14, !dbg !17
  %31 = or disjoint i32 %27, %15, !dbg !17
  %32 = or disjoint i32 %27, %10, !dbg !17
  %33 = icmp slt i32 %28, 176, !dbg !18
  %34 = icmp slt i32 %29, 176, !dbg !18
  %35 = icmp slt i32 %30, 176, !dbg !18
  %36 = icmp slt i32 %31, 176, !dbg !18
  %37 = icmp slt i32 %32, 176, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %38 = sdiv i32 %.frozen, 320, !dbg !19
  %39 = mul i32 %38, 320, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %40 = mul i32 %28, 320, !dbg !21
  %41 = mul i32 %29, 320, !dbg !21
  %42 = mul i32 %30, 320, !dbg !21
  %43 = mul i32 %31, 320, !dbg !21
  %44 = mul i32 %38, 56320, !dbg !22
  %45 = add i32 %44, %.decomposed, !dbg !23
  %46 = add i32 %45, %40, !dbg !24
  %47 = add i32 %45, %41, !dbg !24
  %48 = add i32 %45, %42, !dbg !24
  %49 = add i32 %45, %43, !dbg !24
  %50 = sext i32 %46 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = sext i32 %47 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = sext i32 %48 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !25
  %56 = sext i32 %49 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !25
  %58 = and i1 %21, %33, !dbg !26
  %59 = and i1 %21, %34, !dbg !26
  %60 = and i1 %21, %35, !dbg !26
  %61 = and i1 %21, %36, !dbg !26
  %62 = and i1 %22, %37, !dbg !26
  %63 = and i1 %23, %37, !dbg !26
  %64 = and i1 %24, %37, !dbg !26
  %65 = and i1 %25, %37, !dbg !26
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %58) #2, !dbg !27
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !27
  %71 = bitcast i32 %67 to float, !dbg !27
  %72 = bitcast i32 %68 to float, !dbg !27
  %73 = bitcast i32 %69 to float, !dbg !27
  %74 = bitcast i32 %70 to float, !dbg !27
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %59) #2, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !27
  %80 = bitcast i32 %76 to float, !dbg !27
  %81 = bitcast i32 %77 to float, !dbg !27
  %82 = bitcast i32 %78 to float, !dbg !27
  %83 = bitcast i32 %79 to float, !dbg !27
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %60) #2, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !27
  %89 = bitcast i32 %85 to float, !dbg !27
  %90 = bitcast i32 %86 to float, !dbg !27
  %91 = bitcast i32 %87 to float, !dbg !27
  %92 = bitcast i32 %88 to float, !dbg !27
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %61) #2, !dbg !27
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !27
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !27
  %98 = bitcast i32 %94 to float, !dbg !27
  %99 = bitcast i32 %95 to float, !dbg !27
  %100 = bitcast i32 %96 to float, !dbg !27
  %101 = bitcast i32 %97 to float, !dbg !27
  %102 = sext i32 %.decomposed to i64, !dbg !28
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !28
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %21) #2, !dbg !29
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !29
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !29
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !29
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !29
  %109 = bitcast i32 %105 to float, !dbg !29
  %110 = bitcast i32 %106 to float, !dbg !29
  %111 = bitcast i32 %107 to float, !dbg !29
  %112 = bitcast i32 %108 to float, !dbg !29
  %113 = fadd float %71, %109, !dbg !30
  %114 = fadd float %72, %110, !dbg !30
  %115 = fadd float %73, %111, !dbg !30
  %116 = fadd float %74, %112, !dbg !30
  %117 = fadd float %80, %109, !dbg !30
  %118 = fadd float %81, %110, !dbg !30
  %119 = fadd float %82, %111, !dbg !30
  %120 = fadd float %83, %112, !dbg !30
  %121 = fadd float %89, %109, !dbg !30
  %122 = fadd float %90, %110, !dbg !30
  %123 = fadd float %91, %111, !dbg !30
  %124 = fadd float %92, %112, !dbg !30
  %125 = fadd float %98, %109, !dbg !30
  %126 = fadd float %99, %110, !dbg !30
  %127 = fadd float %100, %111, !dbg !30
  %128 = fadd float %101, %112, !dbg !30
  %129 = mul i32 %17, 176, !dbg !31
  %130 = mul i32 %18, 176, !dbg !31
  %131 = mul i32 %19, 176, !dbg !31
  %132 = mul i32 %20, 176, !dbg !31
  %133 = add i32 %32, %129, !dbg !32
  %134 = add i32 %32, %130, !dbg !32
  %135 = add i32 %32, %131, !dbg !32
  %136 = add i32 %32, %132, !dbg !32
  %137 = sext i32 %133 to i64, !dbg !33
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !33
  %139 = sext i32 %134 to i64, !dbg !33
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !33
  %141 = sext i32 %135 to i64, !dbg !33
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !33
  %143 = sext i32 %136 to i64, !dbg !33
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !33
  %145 = shl i32 %8, 8, !dbg !34
  %146 = and i32 %145, 3840, !dbg !34
  %147 = or disjoint i32 %146, %12, !dbg !34
  %148 = and i32 %9, 1020, !dbg !34
  %149 = lshr exact i32 %146, 4, !dbg !34
  %150 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %149, !dbg !34
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %147, !dbg !34
  %152 = bitcast float %113 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !34
  %153 = or disjoint i32 %147, 64, !dbg !34
  %154 = lshr i32 %153, 6, !dbg !34
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !34
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %153, !dbg !34
  %157 = bitcast float %114 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !34
  %158 = or disjoint i32 %147, 128, !dbg !34
  %159 = lshr i32 %158, 6, !dbg !34
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !34
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %158, !dbg !34
  %162 = bitcast float %115 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !34
  %163 = or disjoint i32 %147, 192, !dbg !34
  %164 = lshr i32 %163, 6, !dbg !34
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %164, !dbg !34
  %166 = getelementptr float, ptr addrspace(3) %165, i32 %163, !dbg !34
  %167 = bitcast float %116 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !34
  %168 = or disjoint i32 %147, 16, !dbg !34
  %169 = getelementptr float, ptr addrspace(3) %150, i32 %168, !dbg !34
  %170 = bitcast float %117 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !34
  %171 = or disjoint i32 %147, 80, !dbg !34
  %172 = lshr i32 %171, 6, !dbg !34
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !34
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !34
  %175 = bitcast float %118 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !34
  %176 = or disjoint i32 %147, 144, !dbg !34
  %177 = lshr i32 %176, 6, !dbg !34
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !34
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %176, !dbg !34
  %180 = bitcast float %119 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !34
  %181 = or disjoint i32 %147, 208, !dbg !34
  %182 = lshr i32 %181, 6, !dbg !34
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !34
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %181, !dbg !34
  %185 = bitcast float %120 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !34
  %186 = or disjoint i32 %147, 32, !dbg !34
  %187 = getelementptr float, ptr addrspace(3) %150, i32 %186, !dbg !34
  %188 = bitcast float %121 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !34
  %189 = or disjoint i32 %147, 96, !dbg !34
  %190 = lshr i32 %189, 6, !dbg !34
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !34
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !34
  %193 = bitcast float %122 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !34
  %194 = or disjoint i32 %147, 160, !dbg !34
  %195 = lshr i32 %194, 6, !dbg !34
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !34
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %194, !dbg !34
  %198 = bitcast float %123 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !34
  %199 = or disjoint i32 %147, 224, !dbg !34
  %200 = lshr i32 %199, 6, !dbg !34
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !34
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %199, !dbg !34
  %203 = bitcast float %124 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !34
  %204 = or disjoint i32 %147, 48, !dbg !34
  %205 = getelementptr float, ptr addrspace(3) %150, i32 %204, !dbg !34
  %206 = bitcast float %125 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !34
  %207 = or disjoint i32 %147, 112, !dbg !34
  %208 = lshr i32 %207, 6, !dbg !34
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !34
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %207, !dbg !34
  %211 = bitcast float %126 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !34
  %212 = or disjoint i32 %147, 176, !dbg !34
  %213 = lshr i32 %212, 6, !dbg !34
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !34
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %212, !dbg !34
  %216 = bitcast float %127 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !34
  %217 = or disjoint i32 %147, 240, !dbg !34
  %218 = lshr i32 %217, 6, !dbg !34
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !34
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %217, !dbg !34
  %221 = bitcast float %128 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %222 = lshr i32 %148, 6, !dbg !34
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %222, !dbg !34
  %224 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %148, !dbg !34
  %225 = load i32, ptr addrspace(3) %224, align 4, !dbg !34
  %226 = or disjoint i32 %148, 1, !dbg !34
  %227 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %226, !dbg !34
  %228 = load i32, ptr addrspace(3) %227, align 4, !dbg !34
  %229 = or disjoint i32 %148, 2, !dbg !34
  %230 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %229, !dbg !34
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !34
  %232 = or disjoint i32 %148, 3, !dbg !34
  %233 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %232, !dbg !34
  %234 = load i32, ptr addrspace(3) %233, align 4, !dbg !34
  %235 = or disjoint i32 %148, 1024, !dbg !34
  %236 = lshr i32 %235, 6, !dbg !34
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !34
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !34
  %239 = load i32, ptr addrspace(3) %238, align 4, !dbg !34
  %240 = or disjoint i32 %148, 1025, !dbg !34
  %241 = lshr i32 %240, 6, !dbg !34
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !34
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %240, !dbg !34
  %244 = load i32, ptr addrspace(3) %243, align 4, !dbg !34
  %245 = or disjoint i32 %148, 1026, !dbg !34
  %246 = lshr i32 %245, 6, !dbg !34
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !34
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %245, !dbg !34
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !34
  %250 = or disjoint i32 %148, 1027, !dbg !34
  %251 = lshr i32 %250, 6, !dbg !34
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %251, !dbg !34
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %250, !dbg !34
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !34
  %255 = or disjoint i32 %148, 2048, !dbg !34
  %256 = lshr i32 %255, 6, !dbg !34
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !34
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %255, !dbg !34
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !34
  %260 = or disjoint i32 %148, 2049, !dbg !34
  %261 = lshr i32 %260, 6, !dbg !34
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !34
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %260, !dbg !34
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !34
  %265 = or disjoint i32 %148, 2050, !dbg !34
  %266 = lshr i32 %265, 6, !dbg !34
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !34
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !34
  %269 = load i32, ptr addrspace(3) %268, align 4, !dbg !34
  %270 = or disjoint i32 %148, 2051, !dbg !34
  %271 = lshr i32 %270, 6, !dbg !34
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !34
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !34
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !34
  %275 = or disjoint i32 %148, 3072, !dbg !34
  %276 = lshr i32 %275, 6, !dbg !34
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !34
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !34
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !34
  %280 = or disjoint i32 %148, 3073, !dbg !34
  %281 = lshr i32 %280, 6, !dbg !34
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !34
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !34
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !34
  %285 = or disjoint i32 %148, 3074, !dbg !34
  %286 = lshr i32 %285, 6, !dbg !34
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !34
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !34
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !34
  %290 = or disjoint i32 %148, 3075, !dbg !34
  %291 = lshr i32 %290, 6, !dbg !34
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !34
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !34
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %225, i32 %228, i32 %231, i32 %234, ptr addrspace(1) %138, i1 %62) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %239, i32 %244, i32 %249, i32 %254, ptr addrspace(1) %140, i1 %63) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %259, i32 %264, i32 %269, i32 %274, ptr addrspace(1) %142, i1 %64) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %284, i32 %289, i32 %294, ptr addrspace(1) %144, i1 %65) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckdfb3cuegt3p6mmo63qdvflwuhgmrfu37dvu2dzlbf6b2htv7pe.py", directory: "inductor_cache/kd")
!4 = !{ptr @triton_poi_fused_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_14", linkageName: "triton_poi_fused_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 63, scope: !7)
!27 = !DILocation(line: 32, column: 55, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 34, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 25, scope: !7)
!34 = !DILocation(line: 35, column: 45, scope: !7)
!35 = !DILocation(line: 35, column: 4, scope: !7)
