; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_atan_div_mean_mul_pow_rsub_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 15, !dbg !11
  %7 = shl i32 %5, 2, !dbg !12
  %8 = and i32 %7, 192, !dbg !12
  %9 = or disjoint i32 %8, %6, !dbg !13
  %10 = zext nneg i32 %9 to i64, !dbg !14
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !14
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !15
  %13 = or disjoint i32 %9, 32, !dbg !16
  %14 = zext nneg i32 %13 to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !17
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #4, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !19
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !21
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #4, !dbg !22
  %21 = or disjoint i32 %9, 16, !dbg !23
  %22 = zext nneg i32 %21 to i64, !dbg !24
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !24
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !25
  %25 = or disjoint i32 %9, 48, !dbg !26
  %26 = zext nneg i32 %25 to i64, !dbg !27
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !27
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !28
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !29
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #4, !dbg !30
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !31
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !32
  %33 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !20
  %34 = insertelement <2 x i32> %33, i32 %30, i64 1, !dbg !20
  %35 = bitcast <2 x i32> %34 to <2 x float>, !dbg !20
  %36 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !22
  %37 = insertelement <2 x i32> %36, i32 %32, i64 1, !dbg !22
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !22
  %39 = bitcast i32 %16 to float, !dbg !33
  %40 = bitcast i32 %12 to float, !dbg !33
  %41 = fadd float %40, %39, !dbg !33
  %42 = bitcast i32 %20 to float, !dbg !34
  %43 = bitcast i32 %18 to float, !dbg !34
  %44 = fadd float %43, %42, !dbg !34
  %45 = fsub float %41, %44, !dbg !35
  %46 = fmul float %45, %45, !dbg !36
  %47 = fmul float %46, 2.500000e-01, !dbg !37
  %48 = bitcast i32 %28 to float, !dbg !38
  %49 = bitcast i32 %24 to float, !dbg !38
  %50 = fadd float %49, %48, !dbg !38
  %51 = bitcast i32 %32 to float, !dbg !39
  %52 = bitcast i32 %30 to float, !dbg !39
  %53 = fadd float %52, %51, !dbg !39
  %54 = fsub float %50, %53, !dbg !40
  %55 = fmul float %54, %54, !dbg !41
  %56 = fmul float %55, 2.500000e-01, !dbg !42
  %57 = fadd float %47, %56, !dbg !43
  %58 = fcmp ogt float %42, %39, !dbg !44
  %59 = fcmp uno <2 x float> %38, zeroinitializer, !dbg !48
  %60 = extractelement <2 x i1> %59, i64 0, !dbg !49
  %61 = or i1 %58, %60, !dbg !49
  %62 = select i1 %61, float %42, float %39, !dbg !50
  %63 = fcmp olt float %43, %40, !dbg !51
  %64 = fcmp uno <2 x float> %35, zeroinitializer, !dbg !53
  %65 = extractelement <2 x i1> %64, i64 0, !dbg !54
  %66 = or i1 %63, %65, !dbg !54
  %67 = select i1 %66, float %43, float %40, !dbg !55
  %68 = fsub float %62, %67, !dbg !56
  %.inv = fcmp ole float %68, 0.000000e+00, !dbg !57
  %69 = select i1 %.inv, float 0.000000e+00, float %68, !dbg !57
  %70 = fmul float %69, %69, !dbg !59
  %71 = fcmp ogt float %51, %48, !dbg !60
  %72 = extractelement <2 x i1> %59, i64 1, !dbg !62
  %73 = or i1 %71, %72, !dbg !62
  %74 = select i1 %73, float %51, float %48, !dbg !63
  %75 = fcmp olt float %52, %49, !dbg !64
  %76 = extractelement <2 x i1> %64, i64 1, !dbg !66
  %77 = or i1 %75, %76, !dbg !66
  %78 = select i1 %77, float %52, float %49, !dbg !67
  %79 = fsub float %74, %78, !dbg !68
  %.inv1 = fcmp ole float %79, 0.000000e+00, !dbg !69
  %80 = select i1 %.inv1, float 0.000000e+00, float %79, !dbg !69
  %81 = fmul float %80, %80, !dbg !71
  %82 = fadd float %70, %81, !dbg !72
  %83 = fadd float %82, 0x3EB0C6F7A0000000, !dbg !73
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %83) #4, !dbg !74
  %85 = fsub float %39, %40, !dbg !75
  %86 = fsub float %48, %49, !dbg !76
  %87 = fadd float %86, 0x3EB0C6F7A0000000, !dbg !77
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float %87) #4, !dbg !78
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %.not.i = icmp eq i32 %89, 0, !dbg !79
  %90 = tail call float @llvm.nvvm.fabs.ftz.f(float %88) #4, !dbg !79
  %91 = tail call float @llvm.nvvm.fabs.f(float %88) #4, !dbg !79
  %.0.i = select i1 %.not.i, float %91, float %90, !dbg !79
  %92 = fcmp ogt float %.0.i, 1.000000e+00, !dbg !79
  %93 = fdiv float 1.000000e+00, %.0.i, !dbg !79
  %t1.0.i = select i1 %92, float %93, float %.0.i, !dbg !79
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %.not1.i = icmp eq i32 %94, 0, !dbg !79
  %95 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t1.0.i, float %t1.0.i) #4, !dbg !79
  %96 = tail call float @llvm.nvvm.mul.rn.f(float %t1.0.i, float %t1.0.i) #4, !dbg !79
  %.01.i = select i1 %.not1.i, float %96, float %95, !dbg !79
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %.not2.i = icmp eq i32 %97, 0, !dbg !79
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float 0xBFEA58FD40000000, float 0xC016B31060000000) #4, !dbg !79
  %99 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float 0xBFEA58FD40000000, float 0xC016B31060000000) #4, !dbg !79
  %.02.i = select i1 %.not2.i, float %99, float %98, !dbg !79
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %.not3.i = icmp eq i32 %100, 0, !dbg !79
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %.01.i, float 0xC01A4320E0000000) #4, !dbg !79
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %.01.i, float 0xC01A4320E0000000) #4, !dbg !79
  %.03.i = select i1 %.not3.i, float %102, float %101, !dbg !79
  %103 = fmul float %.01.i, %.03.i, !dbg !79
  %104 = fmul float %t1.0.i, %103, !dbg !79
  %105 = fadd float %.01.i, 0x4026ABB800000000, !dbg !79
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %.not4.i = icmp eq i32 %106, 0, !dbg !79
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %105, float %.01.i, float 0x403CD7AC00000000) #4, !dbg !79
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %105, float %.01.i, float 0x403CD7AC00000000) #4, !dbg !79
  %.04.i = select i1 %.not4.i, float %108, float %107, !dbg !79
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %.not5.i = icmp eq i32 %109, 0, !dbg !79
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %.01.i, float 0x4033B25900000000) #4, !dbg !79
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %.01.i, float 0x4033B25900000000) #4, !dbg !79
  %.05.i = select i1 %.not5.i, float %111, float %110, !dbg !79
  %112 = fdiv float 1.000000e+00, %.05.i, !dbg !79
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !79
  %.not6.i = icmp eq i32 %113, 0, !dbg !79
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %104, float %112, float %t1.0.i) #4, !dbg !79
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %104, float %112, float %t1.0.i) #4, !dbg !79
  %.06.i = select i1 %.not6.i, float %115, float %114, !dbg !79
  %116 = fsub float 0x3FF921FB60000000, %.06.i, !dbg !79
  %t1.1.i = select i1 %92, float %116, float %.06.i, !dbg !79
  %117 = fcmp ord float %.0.i, 0.000000e+00, !dbg !79
  br i1 %117, label %118, label %__nv_atanf.exit, !dbg !79

118:                                              ; preds = %4
  %119 = bitcast float %t1.1.i to i32, !dbg !79
  %120 = bitcast float %88 to i32, !dbg !79
  %121 = and i32 %120, -2147483648, !dbg !79
  %122 = or i32 %121, %119, !dbg !79
  %123 = bitcast i32 %122 to float, !dbg !79
  br label %__nv_atanf.exit, !dbg !79

__nv_atanf.exit:                                  ; preds = %4, %118
  %t1.2.i = phi float [ %123, %118 ], [ %t1.1.i, %4 ], !dbg !79
  %124 = fsub float %42, %43, !dbg !80
  %125 = fsub float %51, %52, !dbg !81
  %126 = fadd float %125, 0x3EB0C6F7A0000000, !dbg !82
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %126) #4, !dbg !83
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not.i4 = icmp eq i32 %128, 0, !dbg !84
  %129 = tail call float @llvm.nvvm.fabs.ftz.f(float %127) #4, !dbg !84
  %130 = tail call float @llvm.nvvm.fabs.f(float %127) #4, !dbg !84
  %.0.i5 = select i1 %.not.i4, float %130, float %129, !dbg !84
  %131 = fcmp ogt float %.0.i5, 1.000000e+00, !dbg !84
  %132 = fdiv float 1.000000e+00, %.0.i5, !dbg !84
  %t1.0.i6 = select i1 %131, float %132, float %.0.i5, !dbg !84
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not1.i7 = icmp eq i32 %133, 0, !dbg !84
  %134 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t1.0.i6, float %t1.0.i6) #4, !dbg !84
  %135 = tail call float @llvm.nvvm.mul.rn.f(float %t1.0.i6, float %t1.0.i6) #4, !dbg !84
  %.01.i8 = select i1 %.not1.i7, float %135, float %134, !dbg !84
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not2.i9 = icmp eq i32 %136, 0, !dbg !84
  %137 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i8, float 0xBFEA58FD40000000, float 0xC016B31060000000) #4, !dbg !84
  %138 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i8, float 0xBFEA58FD40000000, float 0xC016B31060000000) #4, !dbg !84
  %.02.i10 = select i1 %.not2.i9, float %138, float %137, !dbg !84
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not3.i11 = icmp eq i32 %139, 0, !dbg !84
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i10, float %.01.i8, float 0xC01A4320E0000000) #4, !dbg !84
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i10, float %.01.i8, float 0xC01A4320E0000000) #4, !dbg !84
  %.03.i12 = select i1 %.not3.i11, float %141, float %140, !dbg !84
  %142 = fmul float %.01.i8, %.03.i12, !dbg !84
  %143 = fmul float %t1.0.i6, %142, !dbg !84
  %144 = fadd float %.01.i8, 0x4026ABB800000000, !dbg !84
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not4.i13 = icmp eq i32 %145, 0, !dbg !84
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %144, float %.01.i8, float 0x403CD7AC00000000) #4, !dbg !84
  %147 = tail call float @llvm.nvvm.fma.rn.f(float %144, float %.01.i8, float 0x403CD7AC00000000) #4, !dbg !84
  %.04.i14 = select i1 %.not4.i13, float %147, float %146, !dbg !84
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not5.i15 = icmp eq i32 %148, 0, !dbg !84
  %149 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i14, float %.01.i8, float 0x4033B25900000000) #4, !dbg !84
  %150 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i14, float %.01.i8, float 0x4033B25900000000) #4, !dbg !84
  %.05.i16 = select i1 %.not5.i15, float %150, float %149, !dbg !84
  %151 = fdiv float 1.000000e+00, %.05.i16, !dbg !84
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not6.i17 = icmp eq i32 %152, 0, !dbg !84
  %153 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %143, float %151, float %t1.0.i6) #4, !dbg !84
  %154 = tail call float @llvm.nvvm.fma.rn.f(float %143, float %151, float %t1.0.i6) #4, !dbg !84
  %.06.i18 = select i1 %.not6.i17, float %154, float %153, !dbg !84
  %155 = fsub float 0x3FF921FB60000000, %.06.i18, !dbg !84
  %t1.1.i19 = select i1 %131, float %155, float %.06.i18, !dbg !84
  %156 = fcmp ord float %.0.i5, 0.000000e+00, !dbg !84
  br i1 %156, label %157, label %__nv_atanf.exit21, !dbg !84

157:                                              ; preds = %__nv_atanf.exit
  %158 = bitcast float %t1.1.i19 to i32, !dbg !84
  %159 = bitcast float %127 to i32, !dbg !84
  %160 = and i32 %159, -2147483648, !dbg !84
  %161 = or i32 %160, %158, !dbg !84
  %162 = bitcast i32 %161 to float, !dbg !84
  br label %__nv_atanf.exit21, !dbg !84

__nv_atanf.exit21:                                ; preds = %__nv_atanf.exit, %157
  %t1.2.i20 = phi float [ %162, %157 ], [ %t1.1.i19, %__nv_atanf.exit ], !dbg !84
  %163 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !15
  %164 = insertelement <2 x i32> %163, i32 %24, i64 1, !dbg !15
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !15
  %166 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !18
  %167 = insertelement <2 x i32> %166, i32 %28, i64 1, !dbg !18
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !18
  %169 = lshr i32 %5, 5, !dbg !10
  %170 = and i32 %5, 31, !dbg !10
  %171 = fsub float %t1.2.i, %t1.2.i20, !dbg !85
  %172 = fmul float %171, %171, !dbg !86
  %173 = fmul float %172, 0x3FD9F02F60000000, !dbg !87
  %174 = fcmp olt <2 x float> %38, %168, !dbg !88
  %175 = fcmp ogt <2 x float> %35, %165, !dbg !90
  %176 = or <2 x i1> %174, %59, !dbg !92
  %.v = select <2 x i1> %176, <2 x i32> %37, <2 x i32> %167, !dbg !93
  %177 = bitcast <2 x i32> %.v to <2 x float>, !dbg !93
  %178 = or <2 x i1> %175, %64, !dbg !94
  %.v22 = select <2 x i1> %178, <2 x i32> %34, <2 x i32> %164, !dbg !95
  %179 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !95
  %180 = fsub <2 x float> %177, %179, !dbg !96
  %181 = fcmp ole <2 x float> %180, zeroinitializer, !dbg !97
  %182 = select <2 x i1> %181, <2 x float> zeroinitializer, <2 x float> %180, !dbg !97
  %shift = shufflevector <2 x float> %182, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !99
  %183 = fmul <2 x float> %182, %shift, !dbg !99
  %184 = extractelement <2 x float> %183, i64 0, !dbg !99
  %185 = fmul float %124, %125, !dbg !100
  %186 = fmul float %85, %86, !dbg !101
  %187 = fadd float %186, %185, !dbg !102
  %188 = fsub float %187, %184, !dbg !103
  %189 = fadd float %188, 0x3EB0C6F7A0000000, !dbg !104
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %189) #4, !dbg !105
  %191 = fmul float %173, %173, !dbg !106
  %192 = fsub float 1.000000e+00, %190, !dbg !107
  %193 = fadd float %192, %173, !dbg !108
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %193) #4, !dbg !109
  %195 = fadd float %84, %194, !dbg !110
  %196 = fsub float %195, %190, !dbg !111
  %197 = fadd float %196, 1.000000e+00, !dbg !111
  %198 = bitcast float %197 to i32, !dbg !112
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !112
  %200 = bitcast i32 %199 to float, !dbg !112
  %201 = fadd float %197, %200, !dbg !116
  %202 = bitcast float %201 to i32, !dbg !112
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 8, i32 31), !dbg !112
  %204 = bitcast i32 %203 to float, !dbg !112
  %205 = fadd float %201, %204, !dbg !116
  %206 = bitcast float %205 to i32, !dbg !112
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 4, i32 31), !dbg !112
  %208 = bitcast i32 %207 to float, !dbg !112
  %209 = fadd float %205, %208, !dbg !116
  %210 = bitcast float %209 to i32, !dbg !112
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 2, i32 31), !dbg !112
  %212 = bitcast i32 %211 to float, !dbg !112
  %213 = fadd float %209, %212, !dbg !116
  %214 = bitcast float %213 to i32, !dbg !112
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 1, i32 31), !dbg !112
  %216 = bitcast i32 %215 to float, !dbg !112
  %217 = fadd float %213, %216, !dbg !116
  %218 = icmp eq i32 %170, 0, !dbg !112
  %219 = and i32 %169, 1, !dbg !112
  %220 = zext nneg i32 %219 to i64, !dbg !112
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i64 %220, !dbg !112
  %222 = bitcast float %217 to <1 x i32>, !dbg !112
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 %218) #4, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %223 = icmp slt i32 %5, 2, !dbg !112
  %224 = sext i32 %5 to i64, !dbg !112
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i64 %224, !dbg !112
  %226 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %225, i1 %223) #4, !dbg !112
  %227 = bitcast i32 %226 to float, !dbg !112
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 1, i32 31), !dbg !112
  %229 = bitcast i32 %228 to float, !dbg !112
  %230 = fadd float %227, %229, !dbg !116
  %231 = and i32 %5, 1, !dbg !112
  %232 = icmp eq i32 %231, 0, !dbg !112
  %233 = and i1 %223, %232, !dbg !112
  %234 = bitcast float %230 to <1 x i32>, !dbg !112
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %234, i1 %233) #4, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %235 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !112
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float 6.400000e+01) #4, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %urem = and i32 %5, 63, !dbg !120
  %237 = icmp eq i32 %urem, 0, !dbg !120
  %238 = bitcast float %236 to i32, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %238, ptr addrspace(1) %0, i1 %237) #4, !dbg !120
  ret void, !dbg !121
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckx4neweb4a4g4qthiwbrwqbpvuxlytl7n3kjr3l74o3ixns37i4.py", directory: "inductor_cache/kx")
!4 = !{ptr @triton_per_fused_add_atan_div_mean_mul_pow_rsub_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_atan_div_mean_mul_pow_rsub_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_atan_div_mean_mul_pow_rsub_sub_0", linkageName: "triton_per_fused_add_atan_div_mean_mul_pow_rsub_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 32, column: 38, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 43, scope: !7)
!16 = !DILocation(line: 33, column: 40, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 48, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 43, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 48, scope: !7)
!23 = !DILocation(line: 36, column: 41, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 49, scope: !7)
!26 = !DILocation(line: 37, column: 41, scope: !7)
!27 = !DILocation(line: 37, column: 31, scope: !7)
!28 = !DILocation(line: 37, column: 49, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 49, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 49, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 19, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 52, column: 41, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !52)
!52 = !DILocation(line: 53, column: 41, scope: !7)
!53 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !52)
!55 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !52)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !58)
!58 = !DILocation(line: 56, column: 42, scope: !7)
!59 = !DILocation(line: 57, column: 20, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !61)
!61 = !DILocation(line: 58, column: 42, scope: !7)
!62 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !61)
!63 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !61)
!64 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !65)
!65 = !DILocation(line: 59, column: 42, scope: !7)
!66 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !65)
!67 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !65)
!68 = !DILocation(line: 60, column: 20, scope: !7)
!69 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !70)
!70 = !DILocation(line: 61, column: 42, scope: !7)
!71 = !DILocation(line: 62, column: 20, scope: !7)
!72 = !DILocation(line: 63, column: 20, scope: !7)
!73 = !DILocation(line: 65, column: 20, scope: !7)
!74 = !DILocation(line: 66, column: 20, scope: !7)
!75 = !DILocation(line: 67, column: 19, scope: !7)
!76 = !DILocation(line: 68, column: 20, scope: !7)
!77 = !DILocation(line: 69, column: 20, scope: !7)
!78 = !DILocation(line: 70, column: 20, scope: !7)
!79 = !DILocation(line: 71, column: 27, scope: !7)
!80 = !DILocation(line: 72, column: 19, scope: !7)
!81 = !DILocation(line: 73, column: 20, scope: !7)
!82 = !DILocation(line: 74, column: 20, scope: !7)
!83 = !DILocation(line: 75, column: 20, scope: !7)
!84 = !DILocation(line: 76, column: 27, scope: !7)
!85 = !DILocation(line: 77, column: 20, scope: !7)
!86 = !DILocation(line: 78, column: 20, scope: !7)
!87 = !DILocation(line: 80, column: 20, scope: !7)
!88 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !89)
!89 = !DILocation(line: 81, column: 41, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !91)
!91 = !DILocation(line: 82, column: 41, scope: !7)
!92 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !89)
!93 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !89)
!94 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !91)
!95 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !91)
!96 = !DILocation(line: 83, column: 20, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !98)
!98 = !DILocation(line: 84, column: 42, scope: !7)
!99 = !DILocation(line: 89, column: 20, scope: !7)
!100 = !DILocation(line: 90, column: 20, scope: !7)
!101 = !DILocation(line: 91, column: 20, scope: !7)
!102 = !DILocation(line: 92, column: 20, scope: !7)
!103 = !DILocation(line: 93, column: 20, scope: !7)
!104 = !DILocation(line: 94, column: 20, scope: !7)
!105 = !DILocation(line: 95, column: 20, scope: !7)
!106 = !DILocation(line: 96, column: 20, scope: !7)
!107 = !DILocation(line: 98, column: 20, scope: !7)
!108 = !DILocation(line: 99, column: 20, scope: !7)
!109 = !DILocation(line: 100, column: 20, scope: !7)
!110 = !DILocation(line: 101, column: 20, scope: !7)
!111 = !DILocation(line: 103, column: 20, scope: !7)
!112 = !DILocation(line: 267, column: 36, scope: !113, inlinedAt: !115)
!113 = distinct !DILexicalBlockFile(scope: !7, file: !114, discriminator: 0)
!114 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!115 = !DILocation(line: 105, column: 26, scope: !7)
!116 = !DILocation(line: 256, column: 15, scope: !117, inlinedAt: !115)
!117 = distinct !DILexicalBlockFile(scope: !113, file: !114, discriminator: 0)
!118 = !DILocation(line: 107, column: 20, scope: !7)
!119 = !DILocation(line: 109, column: 4, scope: !7)
!120 = !DILocation(line: 110, column: 71, scope: !7)
!121 = !DILocation(line: 110, column: 4, scope: !7)
