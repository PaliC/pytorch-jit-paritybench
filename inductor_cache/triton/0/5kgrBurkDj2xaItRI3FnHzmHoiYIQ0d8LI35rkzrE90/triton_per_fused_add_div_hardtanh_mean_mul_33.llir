; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_div_hardtanh_mean_mul_33(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = shl i32 %7, 1, !dbg !12
  %10 = and i32 %9, 6, !dbg !12
  %11 = and i32 %7, 7, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 960, !dbg !14
  %15 = icmp slt i32 %13, 960, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %17 = lshr i32 %7, 2, !dbg !15
  %18 = and i32 %17, 15, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %19 = sdiv i32 %.frozen, 240, !dbg !16
  %20 = mul i32 %19, 240, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = mul nuw nsw i32 %18, 240, !dbg !18
  %22 = add nsw i32 %.decomposed, %21, !dbg !19
  %23 = mul i32 %19, 3840, !dbg !20
  %24 = add i32 %22, %23, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !23
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !23
  %30 = bitcast i32 %28 to float, !dbg !23
  %31 = bitcast i32 %29 to float, !dbg !23
  %32 = fadd float %30, 3.000000e+00, !dbg !24
  %33 = fadd float %31, 3.000000e+00, !dbg !24
  %.inv = fcmp ole float %32, 0.000000e+00, !dbg !25
  %34 = select i1 %.inv, float 0.000000e+00, float %32, !dbg !25
  %.inv1 = fcmp ole float %33, 0.000000e+00, !dbg !25
  %35 = select i1 %.inv1, float 0.000000e+00, float %33, !dbg !25
  %36 = fcmp olt float %34, 6.000000e+00, !dbg !29
  %37 = fcmp olt float %35, 6.000000e+00, !dbg !29
  %38 = fcmp uno float %34, 0.000000e+00, !dbg !31
  %39 = fcmp uno float %35, 0.000000e+00, !dbg !31
  %40 = or i1 %36, %38, !dbg !32
  %41 = or i1 %37, %39, !dbg !32
  %42 = select i1 %40, float %34, float 6.000000e+00, !dbg !33
  %43 = select i1 %41, float %35, float 6.000000e+00, !dbg !33
  %44 = fmul float %42, %30, !dbg !34
  %45 = fmul float %43, %31, !dbg !34
  %46 = fmul float %44, 0x3FC5555560000000, !dbg !35
  %47 = fmul float %45, 0x3FC5555560000000, !dbg !35
  %48 = select i1 %14, float %46, float 0.000000e+00, !dbg !36
  %49 = select i1 %14, float %47, float 0.000000e+00, !dbg !36
  %50 = bitcast float %48 to i32, !dbg !37
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 16, i32 31), !dbg !37
  %52 = bitcast i32 %51 to float, !dbg !37
  %53 = fadd float %48, %52, !dbg !41
  %54 = bitcast float %53 to i32, !dbg !37
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !37
  %56 = bitcast i32 %55 to float, !dbg !37
  %57 = fadd float %53, %56, !dbg !41
  %58 = bitcast float %57 to i32, !dbg !37
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 4, i32 31), !dbg !37
  %60 = bitcast i32 %59 to float, !dbg !37
  %61 = fadd float %57, %60, !dbg !41
  %62 = bitcast float %49 to i32, !dbg !37
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 16, i32 31), !dbg !37
  %64 = bitcast i32 %63 to float, !dbg !37
  %65 = fadd float %49, %64, !dbg !41
  %66 = bitcast float %65 to i32, !dbg !37
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 8, i32 31), !dbg !37
  %68 = bitcast i32 %67 to float, !dbg !37
  %69 = fadd float %65, %68, !dbg !41
  %70 = bitcast float %69 to i32, !dbg !37
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !37
  %72 = bitcast i32 %71 to float, !dbg !37
  %73 = fadd float %69, %72, !dbg !41
  %74 = icmp samesign ult i32 %8, 4, !dbg !37
  %75 = and i32 %16, 1, !dbg !37
  %76 = shl nuw nsw i32 %10, 1, !dbg !37
  %77 = or disjoint i32 %76, %75, !dbg !37
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !37
  %79 = bitcast float %61 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 %74) #3, !dbg !37
  %80 = or disjoint i32 %76, 2, !dbg !37
  %81 = or disjoint i32 %80, %75, !dbg !37
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !37
  %83 = bitcast float %73 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 %74) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %84 = icmp slt i32 %7, 16, !dbg !37
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !37
  %86 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %85, i1 %84) #3, !dbg !37
  %87 = bitcast i32 %86 to float, !dbg !37
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !37
  %89 = bitcast i32 %88 to float, !dbg !37
  %90 = fadd float %87, %89, !dbg !41
  %91 = and i32 %7, 1, !dbg !37
  %92 = icmp eq i32 %91, 0, !dbg !37
  %93 = and i1 %84, %92, !dbg !37
  %94 = bitcast float %90 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %94, i1 %93) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !37
  %96 = load i32, ptr addrspace(3) %95, align 16, !dbg !37
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !37
  %98 = load i32, ptr addrspace(3) %97, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !43
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %99, i32 %96, i32 %98, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !43
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !43
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 1.600000e+01) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %103 = sext i32 %13 to i64, !dbg !45
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !45
  %105 = lshr i32 %8, 3, !dbg !46
  %106 = shl nuw nsw i32 %75, 2, !dbg !46
  %107 = or disjoint i32 %106, %105, !dbg !46
  %108 = icmp eq i32 %107, 0, !dbg !46
  %109 = bitcast float %102 to i32, !dbg !46
  %110 = and i1 %108, %15, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %104, i1 %110) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chgkil2ouv5s54venbmegfulfhi42v7d6dmwjxryehlc2ukhna3z.py", directory: "inductor_cache/hg")
!4 = !{ptr @triton_per_fused_add_div_hardtanh_mean_mul_33, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_hardtanh_mean_mul_33, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_hardtanh_mean_mul_33", linkageName: "triton_per_fused_add_div_hardtanh_mean_mul_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 49, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 37, column: 40, scope: !7)
!29 = !DILocation(line: 110, column: 15, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 39, column: 40, scope: !7)
!31 = !DILocation(line: 112, column: 21, scope: !26, inlinedAt: !30)
!32 = !DILocation(line: 112, column: 16, scope: !26, inlinedAt: !30)
!33 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !30)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 44, column: 35, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!40 = !DILocation(line: 45, column: 26, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !40)
!42 = distinct !DILexicalBlockFile(scope: !38, file: !39, discriminator: 0)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 4, scope: !7)
!45 = !DILocation(line: 49, column: 28, scope: !7)
!46 = !DILocation(line: 49, column: 40, scope: !7)
!47 = !DILocation(line: 49, column: 4, scope: !7)
