; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 7, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = and i32 %25, 127, !dbg !12
  %27 = or disjoint i32 %24, %26, !dbg !13
  %.frozen = freeze i32 %27, !dbg !14
  %28 = sdiv i32 %.frozen, 64, !dbg !14
  %29 = srem i32 %28, 16, !dbg !15
  %30 = mul i32 %28, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %30, !dbg !16
  %.frozen16 = freeze i32 %27, !dbg !17
  %31 = sdiv i32 %.frozen16, 1024, !dbg !17
  %32 = icmp slt i32 %29, 4, !dbg !18
  %33 = mul i32 %31, 1024, !dbg !19
  %srem.decomposed = sub i32 %.frozen16, %33, !dbg !19
  %34 = shl nsw i32 %31, 8, !dbg !20
  %35 = add nsw i32 %34, %srem.decomposed, !dbg !21
  %36 = sext i32 %35 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %32, i32 0, i1 %32) #3, !dbg !23
  %39 = sext i32 %29 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %32, i32 0, i1 %32) #3, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %32, i32 0, i1 %32) #3, !dbg !27
  %44 = bitcast i32 %43 to float, !dbg !27
  %45 = fadd float %44, 0x3EE4F8B580000000, !dbg !28
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %46, 0, !dbg !29
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %47, 0, !dbg !29
  br i1 %.not.i, label %53, label %48, !dbg !29

48:                                               ; preds = %22
  br i1 %.not1.i, label %51, label %49, !dbg !29

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

53:                                               ; preds = %22
  br i1 %.not1.i, label %56, label %54, !dbg !29

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !29
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !31
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %32, i32 0, i1 %32) #3, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !33
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %32, i32 0, i1 %32) #3, !dbg !34
  %63 = and i32 %29, -4, !dbg !35
  %64 = icmp eq i32 %63, 4, !dbg !35
  %65 = add nsw i32 %29, -4, !dbg !36
  %66 = shl nsw i32 %65, 6, !dbg !37
  %67 = add nsw i32 %34, %.decomposed, !dbg !38
  %68 = add nsw i32 %67, %66, !dbg !39
  %69 = sext i32 %68 to i64, !dbg !40
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %69, !dbg !40
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %64, i32 0, i1 %64) #3, !dbg !41
  %72 = sext i32 %65 to i64, !dbg !42
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %72, !dbg !42
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %64, i32 0, i1 %64) #3, !dbg !43
  %75 = getelementptr float, ptr addrspace(1) %7, i64 %72, !dbg !44
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %64, i32 0, i1 %64) #3, !dbg !45
  %77 = bitcast i32 %76 to float, !dbg !45
  %78 = fadd float %77, 0x3EE4F8B580000000, !dbg !46
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i1 = icmp eq i32 %79, 0, !dbg !47
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i4 = icmp eq i32 %80, 0, !dbg !47
  br i1 %.not.i1, label %86, label %81, !dbg !47

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !47

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !47

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

__nv_sqrtf.exit5:                                 ; preds = %82, %84, %87, %89
  %.0.i3 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !47
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !48
  %92 = getelementptr float, ptr addrspace(1) %8, i64 %72, !dbg !49
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %64, i32 0, i1 %64) #3, !dbg !50
  %94 = getelementptr float, ptr addrspace(1) %9, i64 %72, !dbg !51
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %64, i32 0, i1 %64) #3, !dbg !52
  %96 = icmp eq i32 %63, 8, !dbg !53
  %97 = add nsw i32 %29, -8, !dbg !54
  %98 = shl nsw i32 %97, 6, !dbg !55
  %99 = add nsw i32 %67, %98, !dbg !56
  %100 = sext i32 %99 to i64, !dbg !57
  %101 = getelementptr float, ptr addrspace(1) %10, i64 %100, !dbg !57
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %96, i32 0, i1 %96) #3, !dbg !58
  %103 = sext i32 %97 to i64, !dbg !59
  %104 = getelementptr float, ptr addrspace(1) %11, i64 %103, !dbg !59
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %96, i32 0, i1 %96) #3, !dbg !60
  %106 = getelementptr float, ptr addrspace(1) %12, i64 %103, !dbg !61
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %96, i32 0, i1 %96) #3, !dbg !62
  %108 = bitcast i32 %107 to float, !dbg !62
  %109 = fadd float %108, 0x3EE4F8B580000000, !dbg !63
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not.i6 = icmp eq i32 %110, 0, !dbg !64
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !64
  %.not1.i9 = icmp eq i32 %111, 0, !dbg !64
  br i1 %.not.i6, label %117, label %112, !dbg !64

112:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %115, label %113, !dbg !64

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

117:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %120, label %118, !dbg !64

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !64
  br label %__nv_sqrtf.exit10, !dbg !64

__nv_sqrtf.exit10:                                ; preds = %113, %115, %118, %120
  %.0.i8 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !64
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !65
  %123 = getelementptr float, ptr addrspace(1) %13, i64 %103, !dbg !66
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %96, i32 0, i1 %96) #3, !dbg !67
  %125 = getelementptr float, ptr addrspace(1) %14, i64 %103, !dbg !68
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %96, i32 0, i1 %96) #3, !dbg !69
  %127 = icmp sgt i32 %29, 11, !dbg !70
  %128 = add nsw i32 %29, -12, !dbg !71
  %129 = shl nsw i32 %128, 6, !dbg !72
  %130 = add nsw i32 %67, %129, !dbg !73
  %131 = sext i32 %130 to i64, !dbg !74
  %132 = getelementptr float, ptr addrspace(1) %15, i64 %131, !dbg !74
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %127, i32 0, i1 %127) #3, !dbg !75
  %134 = sext i32 %128 to i64, !dbg !76
  %135 = getelementptr float, ptr addrspace(1) %16, i64 %134, !dbg !76
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %127, i32 0, i1 %127) #3, !dbg !77
  %137 = getelementptr float, ptr addrspace(1) %17, i64 %134, !dbg !78
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %127, i32 0, i1 %127) #3, !dbg !79
  %139 = bitcast i32 %138 to float, !dbg !79
  %140 = fadd float %139, 0x3EE4F8B580000000, !dbg !80
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !81
  %.not.i11 = icmp eq i32 %141, 0, !dbg !81
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !81
  %.not1.i14 = icmp eq i32 %142, 0, !dbg !81
  br i1 %.not.i11, label %148, label %143, !dbg !81

143:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %146, label %144, !dbg !81

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !81
  br label %__nv_sqrtf.exit15, !dbg !81

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !81
  br label %__nv_sqrtf.exit15, !dbg !81

148:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %151, label %149, !dbg !81

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !81
  br label %__nv_sqrtf.exit15, !dbg !81

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !81
  br label %__nv_sqrtf.exit15, !dbg !81

__nv_sqrtf.exit15:                                ; preds = %144, %146, %149, %151
  %.0.i13 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !81
  %153 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !75
  %154 = insertelement <4 x i32> %153, i32 %38, i64 1, !dbg !75
  %155 = insertelement <4 x i32> %154, i32 %71, i64 2, !dbg !75
  %156 = insertelement <4 x i32> %155, i32 %102, i64 3, !dbg !75
  %157 = bitcast <4 x i32> %156 to <4 x float>, !dbg !75
  %158 = insertelement <4 x i32> poison, i32 %136, i64 0, !dbg !77
  %159 = insertelement <4 x i32> %158, i32 %41, i64 1, !dbg !77
  %160 = insertelement <4 x i32> %159, i32 %74, i64 2, !dbg !77
  %161 = insertelement <4 x i32> %160, i32 %105, i64 3, !dbg !77
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !77
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !82
  %164 = getelementptr float, ptr addrspace(1) %18, i64 %134, !dbg !83
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %127, i32 0, i1 %127) #3, !dbg !84
  %166 = getelementptr float, ptr addrspace(1) %19, i64 %134, !dbg !85
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %127, i32 0, i1 %127) #3, !dbg !86
  %168 = fsub <4 x float> %157, %162, !dbg !87
  %169 = insertelement <4 x float> poison, float %163, i64 0, !dbg !88
  %170 = insertelement <4 x float> %169, float %58, i64 1, !dbg !88
  %171 = insertelement <4 x float> %170, float %91, i64 2, !dbg !88
  %172 = insertelement <4 x float> %171, float %122, i64 3, !dbg !88
  %173 = fmul <4 x float> %168, %172, !dbg !88
  %174 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !84
  %175 = insertelement <4 x i32> %174, i32 %60, i64 1, !dbg !84
  %176 = insertelement <4 x i32> %175, i32 %93, i64 2, !dbg !84
  %177 = insertelement <4 x i32> %176, i32 %124, i64 3, !dbg !84
  %178 = bitcast <4 x i32> %177 to <4 x float>, !dbg !84
  %179 = fmul <4 x float> %173, %178, !dbg !89
  %180 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !86
  %181 = insertelement <4 x i32> %180, i32 %62, i64 1, !dbg !86
  %182 = insertelement <4 x i32> %181, i32 %95, i64 2, !dbg !86
  %183 = insertelement <4 x i32> %182, i32 %126, i64 3, !dbg !86
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !86
  %185 = fadd <4 x float> %179, %184, !dbg !90
  %186 = fcmp olt <4 x float> %185, zeroinitializer, !dbg !91
  %187 = extractelement <4 x i1> %186, i64 3, !dbg !95
  %188 = extractelement <4 x float> %185, i64 3, !dbg !95
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !95
  %190 = extractelement <4 x i1> %186, i64 2, !dbg !97
  %191 = extractelement <4 x float> %185, i64 2, !dbg !97
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !97
  %193 = extractelement <4 x i1> %186, i64 1, !dbg !99
  %194 = extractelement <4 x float> %185, i64 1, !dbg !99
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !99
  %196 = extractelement <4 x i1> %186, i64 0, !dbg !101
  %197 = extractelement <4 x float> %185, i64 0, !dbg !101
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !101
  %199 = select i1 %127, float %198, float 0.000000e+00, !dbg !102
  %200 = select i1 %96, float %189, float %199, !dbg !103
  %201 = select i1 %64, float %192, float %200, !dbg !103
  %202 = select i1 %32, float %195, float %201, !dbg !103
  %203 = sext i32 %27 to i64, !dbg !104
  %204 = getelementptr float, ptr addrspace(1) %20, i64 %203, !dbg !104
  %205 = bitcast float %202 to i32, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %204, i1 true) #3, !dbg !105
  ret void, !dbg !106
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgseaqmtrxuyvqqmx2dompwh3npeyjzxwqkptehwuan63btaw4v4.py", directory: "inductor_cache/gs")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 49, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 19, scope: !7)
!29 = !DILocation(line: 39, column: 27, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 56, column: 20, scope: !7)
!36 = !DILocation(line: 57, column: 47, scope: !7)
!37 = !DILocation(line: 57, column: 40, scope: !7)
!38 = !DILocation(line: 57, column: 36, scope: !7)
!39 = !DILocation(line: 57, column: 53, scope: !7)
!40 = !DILocation(line: 57, column: 31, scope: !7)
!41 = !DILocation(line: 57, column: 62, scope: !7)
!42 = !DILocation(line: 58, column: 31, scope: !7)
!43 = !DILocation(line: 58, column: 43, scope: !7)
!44 = !DILocation(line: 60, column: 31, scope: !7)
!45 = !DILocation(line: 60, column: 43, scope: !7)
!46 = !DILocation(line: 62, column: 20, scope: !7)
!47 = !DILocation(line: 63, column: 27, scope: !7)
!48 = !DILocation(line: 65, column: 20, scope: !7)
!49 = !DILocation(line: 69, column: 31, scope: !7)
!50 = !DILocation(line: 69, column: 43, scope: !7)
!51 = !DILocation(line: 71, column: 31, scope: !7)
!52 = !DILocation(line: 71, column: 43, scope: !7)
!53 = !DILocation(line: 80, column: 20, scope: !7)
!54 = !DILocation(line: 81, column: 48, scope: !7)
!55 = !DILocation(line: 81, column: 41, scope: !7)
!56 = !DILocation(line: 81, column: 54, scope: !7)
!57 = !DILocation(line: 81, column: 32, scope: !7)
!58 = !DILocation(line: 81, column: 63, scope: !7)
!59 = !DILocation(line: 82, column: 32, scope: !7)
!60 = !DILocation(line: 82, column: 44, scope: !7)
!61 = !DILocation(line: 84, column: 32, scope: !7)
!62 = !DILocation(line: 84, column: 44, scope: !7)
!63 = !DILocation(line: 86, column: 20, scope: !7)
!64 = !DILocation(line: 87, column: 27, scope: !7)
!65 = !DILocation(line: 89, column: 20, scope: !7)
!66 = !DILocation(line: 93, column: 32, scope: !7)
!67 = !DILocation(line: 93, column: 44, scope: !7)
!68 = !DILocation(line: 95, column: 32, scope: !7)
!69 = !DILocation(line: 95, column: 44, scope: !7)
!70 = !DILocation(line: 101, column: 20, scope: !7)
!71 = !DILocation(line: 104, column: 49, scope: !7)
!72 = !DILocation(line: 104, column: 41, scope: !7)
!73 = !DILocation(line: 104, column: 55, scope: !7)
!74 = !DILocation(line: 104, column: 32, scope: !7)
!75 = !DILocation(line: 104, column: 64, scope: !7)
!76 = !DILocation(line: 105, column: 32, scope: !7)
!77 = !DILocation(line: 105, column: 45, scope: !7)
!78 = !DILocation(line: 107, column: 32, scope: !7)
!79 = !DILocation(line: 107, column: 45, scope: !7)
!80 = !DILocation(line: 109, column: 20, scope: !7)
!81 = !DILocation(line: 110, column: 27, scope: !7)
!82 = !DILocation(line: 112, column: 20, scope: !7)
!83 = !DILocation(line: 116, column: 32, scope: !7)
!84 = !DILocation(line: 116, column: 45, scope: !7)
!85 = !DILocation(line: 118, column: 32, scope: !7)
!86 = !DILocation(line: 118, column: 45, scope: !7)
!87 = !DILocation(line: 106, column: 20, scope: !7)
!88 = !DILocation(line: 115, column: 20, scope: !7)
!89 = !DILocation(line: 117, column: 20, scope: !7)
!90 = !DILocation(line: 119, column: 20, scope: !7)
!91 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !94)
!92 = distinct !DILexicalBlockFile(scope: !7, file: !93, discriminator: 0)
!93 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!94 = !DILocation(line: 121, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !96)
!96 = !DILocation(line: 98, column: 42, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !98)
!98 = !DILocation(line: 74, column: 42, scope: !7)
!99 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !100)
!100 = !DILocation(line: 50, column: 42, scope: !7)
!101 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !94)
!102 = !DILocation(line: 123, column: 35, scope: !7)
!103 = !DILocation(line: 0, scope: !7)
!104 = !DILocation(line: 127, column: 25, scope: !7)
!105 = !DILocation(line: 127, column: 37, scope: !7)
!106 = !DILocation(line: 127, column: 4, scope: !7)
