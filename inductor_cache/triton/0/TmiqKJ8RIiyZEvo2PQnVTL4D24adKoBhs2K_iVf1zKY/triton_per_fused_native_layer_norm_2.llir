; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_layer_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 256, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %.frozen = freeze i32 %9, !dbg !13
  %13 = sdiv i32 %.frozen, 64, !dbg !13
  %14 = mul i32 %13, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %14, !dbg !14
  %15 = shl nuw nsw i32 %12, 6, !dbg !15
  %16 = add nsw i32 %.decomposed, %15, !dbg !16
  %17 = shl i32 %13, 11, !dbg !17
  %18 = add i32 %16, %17, !dbg !18
  %19 = sext i32 %18 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %10, i32 0, i1 %10) #5, !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %10, i32 0, i1 %10) #5, !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = zext nneg i32 %12 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !24
  %30 = select i1 %10, float %22, float 0.000000e+00, !dbg !25
  %31 = select i1 %10, float %24, float 0.000000e+00, !dbg !25
  %32 = bitcast float %30 to i32, !dbg !26
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = fadd float %30, %34, !dbg !30
  %36 = bitcast float %35 to i32, !dbg !26
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 8, i32 31), !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = fadd float %35, %38, !dbg !30
  %40 = bitcast float %39 to i32, !dbg !26
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = fadd float %39, %42, !dbg !30
  %44 = bitcast float %43 to i32, !dbg !26
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 2, i32 31), !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = fadd float %43, %46, !dbg !30
  %48 = bitcast float %47 to i32, !dbg !26
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = fadd float %47, %50, !dbg !30
  %52 = bitcast float %31 to i32, !dbg !26
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !26
  %54 = bitcast i32 %53 to float, !dbg !26
  %55 = fadd float %31, %54, !dbg !30
  %56 = bitcast float %55 to i32, !dbg !26
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !26
  %58 = bitcast i32 %57 to float, !dbg !26
  %59 = fadd float %55, %58, !dbg !30
  %60 = bitcast float %59 to i32, !dbg !26
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !26
  %62 = bitcast i32 %61 to float, !dbg !26
  %63 = fadd float %59, %62, !dbg !30
  %64 = bitcast float %63 to i32, !dbg !26
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = fadd float %63, %66, !dbg !30
  %68 = bitcast float %67 to i32, !dbg !26
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = fadd float %67, %70, !dbg !30
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 3.200000e+01) #5, !dbg !32
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 3.200000e+01) #5, !dbg !32
  %74 = fsub float %22, %72, !dbg !33
  %75 = fsub float %24, %73, !dbg !33
  %76 = fmul float %74, %74, !dbg !34
  %77 = fmul float %75, %75, !dbg !34
  %78 = select i1 %10, float %76, float 0.000000e+00, !dbg !35
  %79 = select i1 %10, float %77, float 0.000000e+00, !dbg !35
  %80 = bitcast float %78 to i32, !dbg !36
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !36
  %82 = bitcast i32 %81 to float, !dbg !36
  %83 = fadd float %78, %82, !dbg !38
  %84 = bitcast float %83 to i32, !dbg !36
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 8, i32 31), !dbg !36
  %86 = bitcast i32 %85 to float, !dbg !36
  %87 = fadd float %83, %86, !dbg !38
  %88 = bitcast float %87 to i32, !dbg !36
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !36
  %90 = bitcast i32 %89 to float, !dbg !36
  %91 = fadd float %87, %90, !dbg !38
  %92 = bitcast float %91 to i32, !dbg !36
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !36
  %94 = bitcast i32 %93 to float, !dbg !36
  %95 = fadd float %91, %94, !dbg !38
  %96 = bitcast float %95 to i32, !dbg !36
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !36
  %98 = bitcast i32 %97 to float, !dbg !36
  %99 = fadd float %95, %98, !dbg !38
  %100 = bitcast float %79 to i32, !dbg !36
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !36
  %102 = bitcast i32 %101 to float, !dbg !36
  %103 = fadd float %79, %102, !dbg !38
  %104 = bitcast float %103 to i32, !dbg !36
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !36
  %106 = bitcast i32 %105 to float, !dbg !36
  %107 = fadd float %103, %106, !dbg !38
  %108 = bitcast float %107 to i32, !dbg !36
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !36
  %110 = bitcast i32 %109 to float, !dbg !36
  %111 = fadd float %107, %110, !dbg !38
  %112 = bitcast float %111 to i32, !dbg !36
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !36
  %114 = bitcast i32 %113 to float, !dbg !36
  %115 = fadd float %111, %114, !dbg !38
  %116 = bitcast float %115 to i32, !dbg !36
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !36
  %118 = bitcast i32 %117 to float, !dbg !36
  %119 = fadd float %115, %118, !dbg !38
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 3.200000e+01) #5, !dbg !39
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float 3.200000e+01) #5, !dbg !39
  %122 = fadd float %120, 0x3EE4F8B580000000, !dbg !40
  %123 = fadd float %121, 0x3EE4F8B580000000, !dbg !40
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %124, 0, !dbg !41
  br i1 %.not.i, label %127, label %125, !dbg !41

125:                                              ; preds = %8
  %126 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %122), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

127:                                              ; preds = %8
  %128 = tail call float @llvm.nvvm.rsqrt.approx.f(float %122), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %125, %127
  %.0.i = phi float [ %126, %125 ], [ %128, %127 ], !dbg !41
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i1 = icmp eq i32 %129, 0, !dbg !41
  br i1 %.not.i1, label %132, label %130, !dbg !41

130:                                              ; preds = %__nv_rsqrtf.exit
  %131 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %123), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

132:                                              ; preds = %__nv_rsqrtf.exit
  %133 = tail call float @llvm.nvvm.rsqrt.approx.f(float %123), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

__nv_rsqrtf.exit3:                                ; preds = %130, %132
  %.0.i2 = phi float [ %131, %130 ], [ %133, %132 ], !dbg !41
  %134 = bitcast i32 %29 to float, !dbg !24
  %135 = bitcast i32 %27 to float, !dbg !22
  %136 = fmul float %74, %.0.i, !dbg !42
  %137 = fmul float %136, %135, !dbg !43
  %138 = fadd float %137, %134, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %139 = sext i32 %9 to i64, !dbg !46
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !46
  %urem = and i32 %11, 63, !dbg !47
  %141 = icmp eq i32 %urem, 0, !dbg !47
  %142 = bitcast float %.0.i2 to i32, !dbg !47
  %143 = and i1 %141, %10, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %140, i1 %143) #5, !dbg !47
  %144 = shl i32 %9, 5, !dbg !48
  %145 = or disjoint i32 %144, %12, !dbg !49
  %146 = sext i32 %145 to i64, !dbg !50
  %147 = getelementptr float, ptr addrspace(1) %5, i64 %146, !dbg !50
  %148 = and i32 %11, 32, !dbg !51
  %149 = icmp eq i32 %148, 0, !dbg !51
  %150 = bitcast float %138 to i32, !dbg !51
  %151 = and i1 %149, %10, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %147, i1 %151) #5, !dbg !51
  %152 = getelementptr float, ptr addrspace(1) %4, i64 %139, !dbg !52
  %153 = bitcast float %73 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %152, i1 %143) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvsc36iptsv2cfg5djtaknliti74ddda4nwuwx446wlek6af2hpp.py", directory: "inductor_cache/vs")
!4 = !{ptr @triton_per_fused_native_layer_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_layer_norm_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_layer_norm_2", linkageName: "triton_per_fused_native_layer_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 38, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 48, scope: !7)
!18 = !DILocation(line: 33, column: 43, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 53, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 36, scope: !7)
!25 = !DILocation(line: 39, column: 33, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 40, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 35, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 48, column: 26, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !37)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 28, scope: !7)
!42 = !DILocation(line: 55, column: 20, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 4, scope: !7)
!46 = !DILocation(line: 59, column: 28, scope: !7)
!47 = !DILocation(line: 59, column: 40, scope: !7)
!48 = !DILocation(line: 60, column: 33, scope: !7)
!49 = !DILocation(line: 60, column: 30, scope: !7)
!50 = !DILocation(line: 60, column: 25, scope: !7)
!51 = !DILocation(line: 60, column: 45, scope: !7)
!52 = !DILocation(line: 61, column: 25, scope: !7)
!53 = !DILocation(line: 61, column: 37, scope: !7)
!54 = !DILocation(line: 61, column: 4, scope: !7)
