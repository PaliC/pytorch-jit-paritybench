; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = sdiv i32 %16, 4096, !dbg !14
  %18 = srem i32 %17, 4, !dbg !15
  %19 = sext i32 %16 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %22 = sext i32 %18 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !20
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !27
  %43 = bitcast i32 %42 to float, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !27
  %45 = bitcast i32 %44 to float, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !31
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !31
  %56 = fadd float %39, 0x3EE4F8B580000000, !dbg !32
  %57 = fadd float %41, 0x3EE4F8B580000000, !dbg !32
  %58 = fadd float %43, 0x3EE4F8B580000000, !dbg !32
  %59 = fadd float %45, 0x3EE4F8B580000000, !dbg !32
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %60, 0, !dbg !33
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i = icmp eq i32 %61, 0, !dbg !33
  br i1 %.not.i, label %67, label %62, !dbg !33

62:                                               ; preds = %10
  br i1 %.not1.i, label %65, label %63, !dbg !33

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

67:                                               ; preds = %10
  br i1 %.not1.i, label %70, label %68, !dbg !33

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !33
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i1 = icmp eq i32 %72, 0, !dbg !33
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i4 = icmp eq i32 %73, 0, !dbg !33
  br i1 %.not.i1, label %79, label %74, !dbg !33

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !33

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !33

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

__nv_sqrtf.exit5:                                 ; preds = %75, %77, %80, %82
  %.0.i3 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i6 = icmp eq i32 %84, 0, !dbg !33
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i9 = icmp eq i32 %85, 0, !dbg !33
  br i1 %.not.i6, label %91, label %86, !dbg !33

86:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %89, label %87, !dbg !33

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

91:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %94, label %92, !dbg !33

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

__nv_sqrtf.exit10:                                ; preds = %87, %89, %92, %94
  %.0.i8 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !33
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i11 = icmp eq i32 %96, 0, !dbg !33
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i14 = icmp eq i32 %97, 0, !dbg !33
  br i1 %.not.i11, label %103, label %98, !dbg !33

98:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %101, label %99, !dbg !33

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

103:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %106, label %104, !dbg !33

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

__nv_sqrtf.exit15:                                ; preds = %99, %101, %104, %106
  %.0.i13 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !33
  %108 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %109 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !21
  %110 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %111 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !17
  %112 = insertelement <2 x i32> %111, i32 %109, i64 1, !dbg !17
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !17
  %114 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %115 = insertelement <2 x i32> %114, i32 %110, i64 1, !dbg !19
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !19
  %117 = fadd <2 x float> %113, %116, !dbg !34
  %118 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !25
  %119 = insertelement <4 x i32> %118, i32 %35, i64 1, !dbg !25
  %120 = insertelement <4 x i32> %119, i32 %34, i64 2, !dbg !25
  %121 = insertelement <4 x i32> %120, i32 %33, i64 3, !dbg !25
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !25
  %123 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %124 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !21
  %125 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %126 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !17
  %127 = insertelement <2 x i32> %126, i32 %124, i64 1, !dbg !17
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !17
  %129 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !19
  %130 = insertelement <2 x i32> %129, i32 %125, i64 1, !dbg !19
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !19
  %132 = fadd <2 x float> %128, %131, !dbg !34
  %133 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %134 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !21
  %135 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %136 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !17
  %137 = insertelement <2 x i32> %136, i32 %134, i64 1, !dbg !17
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !17
  %139 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !19
  %140 = insertelement <2 x i32> %139, i32 %135, i64 1, !dbg !19
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !19
  %142 = fadd <2 x float> %138, %141, !dbg !34
  %143 = shufflevector <2 x float> %142, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %144 = shufflevector <2 x float> %142, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %145 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %146 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !21
  %147 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %148 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !17
  %149 = insertelement <2 x i32> %148, i32 %146, i64 1, !dbg !17
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !17
  %151 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %152 = insertelement <2 x i32> %151, i32 %147, i64 1, !dbg !19
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !19
  %154 = fadd <2 x float> %150, %153, !dbg !34
  %155 = shufflevector <2 x float> %154, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %156 = shufflevector <2 x float> %154, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %157 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !31
  %158 = insertelement <4 x i32> %157, i32 %54, i64 1, !dbg !31
  %159 = insertelement <4 x i32> %158, i32 %53, i64 2, !dbg !31
  %160 = insertelement <4 x i32> %159, i32 %52, i64 3, !dbg !31
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !31
  %162 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !29
  %163 = insertelement <4 x i32> %162, i32 %49, i64 1, !dbg !29
  %164 = insertelement <4 x i32> %163, i32 %48, i64 2, !dbg !29
  %165 = insertelement <4 x i32> %164, i32 %47, i64 3, !dbg !29
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !29
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !35
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !35
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !35
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !35
  %171 = shufflevector <2 x float> %117, <2 x float> %132, <4 x i32> <i32 0, i32 2, i32 poison, i32 poison>, !dbg !36
  %172 = shufflevector <4 x float> %171, <4 x float> %144, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !36
  %173 = shufflevector <4 x float> %172, <4 x float> %156, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !36
  %174 = shufflevector <2 x float> %117, <2 x float> %132, <4 x i32> <i32 1, i32 3, i32 poison, i32 poison>, !dbg !36
  %175 = shufflevector <4 x float> %174, <4 x float> %143, <4 x i32> <i32 0, i32 1, i32 5, i32 poison>, !dbg !36
  %176 = shufflevector <4 x float> %175, <4 x float> %155, <4 x i32> <i32 0, i32 1, i32 2, i32 5>, !dbg !36
  %177 = fadd <4 x float> %173, %176, !dbg !36
  %178 = fsub <4 x float> %177, %122, !dbg !37
  %179 = insertelement <4 x float> poison, float %170, i64 0, !dbg !38
  %180 = insertelement <4 x float> %179, float %169, i64 1, !dbg !38
  %181 = insertelement <4 x float> %180, float %168, i64 2, !dbg !38
  %182 = insertelement <4 x float> %181, float %167, i64 3, !dbg !38
  %183 = fmul <4 x float> %178, %182, !dbg !38
  %184 = fmul <4 x float> %183, %166, !dbg !39
  %185 = fadd <4 x float> %184, %161, !dbg !40
  %186 = fcmp olt <4 x float> %185, zeroinitializer, !dbg !41
  %187 = extractelement <4 x i1> %186, i64 3, !dbg !45
  %188 = extractelement <4 x i1> %186, i64 2, !dbg !45
  %189 = extractelement <4 x i1> %186, i64 1, !dbg !45
  %190 = extractelement <4 x i1> %186, i64 0, !dbg !45
  %191 = getelementptr float, ptr addrspace(1) %8, i64 %19, !dbg !46
  %bc = bitcast <4 x float> %185 to <4 x i32>, !dbg !47
  %192 = extractelement <4 x i32> %bc, i64 3, !dbg !47
  %193 = select i1 %187, i32 0, i32 %192, !dbg !45
  %bc16 = bitcast <4 x float> %185 to <4 x i32>, !dbg !47
  %194 = extractelement <4 x i32> %bc16, i64 2, !dbg !47
  %195 = select i1 %188, i32 0, i32 %194, !dbg !45
  %bc17 = bitcast <4 x float> %185 to <4 x i32>, !dbg !47
  %196 = extractelement <4 x i32> %bc17, i64 1, !dbg !47
  %197 = select i1 %189, i32 0, i32 %196, !dbg !45
  %bc18 = bitcast <4 x float> %185 to <4 x i32>, !dbg !47
  %198 = extractelement <4 x i32> %bc18, i64 0, !dbg !47
  %199 = select i1 %190, i32 0, i32 %198, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %193, i32 %195, i32 %197, i32 %199, ptr addrspace(1) %191, i1 true) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6lgfobamw6fqmpp7txmpiwmnad45d2vkmsvadwrapk77vwbs2g2.py", directory: "inductor_cache/6l")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 40, column: 27, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 37, scope: !7)
!48 = !DILocation(line: 50, column: 4, scope: !7)
