; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_addmm_native_layer_norm_native_layer_norm_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %12 = icmp slt i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = shl i32 %11, 4, !dbg !13
  %16 = or disjoint i32 %15, %14, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %12, i32 0, i1 %12) #4, !dbg !16
  %20 = bitcast i32 %19 to float, !dbg !16
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %12, i32 0, i1 %12) #4, !dbg !16
  %22 = bitcast i32 %21 to float, !dbg !16
  %23 = zext nneg i32 %14 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #4, !dbg !18
  %26 = bitcast i32 %25 to float, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #4, !dbg !18
  %28 = bitcast i32 %27 to float, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %12, i32 0, i1 %12) #4, !dbg !20
  %31 = bitcast i32 %30 to float, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %12, i32 0, i1 %12) #4, !dbg !20
  %33 = bitcast i32 %32 to float, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !26
  %43 = fadd float %20, %26, !dbg !27
  %44 = fadd float %22, %28, !dbg !27
  %45 = fadd float %31, %36, !dbg !28
  %46 = fadd float %33, %38, !dbg !28
  %47 = fadd float %43, %45, !dbg !29
  %48 = fadd float %44, %46, !dbg !29
  %49 = select i1 %12, float %47, float 0.000000e+00, !dbg !30
  %50 = select i1 %12, float %48, float 0.000000e+00, !dbg !30
  %51 = bitcast float %49 to i32, !dbg !31
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 8, i32 31), !dbg !31
  %53 = bitcast i32 %52 to float, !dbg !31
  %54 = fadd float %49, %53, !dbg !35
  %55 = bitcast float %54 to i32, !dbg !31
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 4, i32 31), !dbg !31
  %57 = bitcast i32 %56 to float, !dbg !31
  %58 = fadd float %54, %57, !dbg !35
  %59 = bitcast float %58 to i32, !dbg !31
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 2, i32 31), !dbg !31
  %61 = bitcast i32 %60 to float, !dbg !31
  %62 = fadd float %58, %61, !dbg !35
  %63 = bitcast float %62 to i32, !dbg !31
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 1, i32 31), !dbg !31
  %65 = bitcast i32 %64 to float, !dbg !31
  %66 = fadd float %62, %65, !dbg !35
  %67 = bitcast float %50 to i32, !dbg !31
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 8, i32 31), !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = fadd float %50, %69, !dbg !35
  %71 = bitcast float %70 to i32, !dbg !31
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 4, i32 31), !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = fadd float %70, %73, !dbg !35
  %75 = bitcast float %74 to i32, !dbg !31
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 2, i32 31), !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = fadd float %74, %77, !dbg !35
  %79 = bitcast float %78 to i32, !dbg !31
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !31
  %81 = bitcast i32 %80 to float, !dbg !31
  %82 = fadd float %78, %81, !dbg !35
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 1.600000e+01) #4, !dbg !37
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 1.600000e+01) #4, !dbg !37
  %85 = fsub float %47, %83, !dbg !38
  %86 = fsub float %48, %84, !dbg !38
  %87 = fmul float %85, %85, !dbg !39
  %88 = fmul float %86, %86, !dbg !39
  %89 = select i1 %12, float %87, float 0.000000e+00, !dbg !40
  %90 = select i1 %12, float %88, float 0.000000e+00, !dbg !40
  %91 = bitcast float %89 to i32, !dbg !41
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !41
  %93 = bitcast i32 %92 to float, !dbg !41
  %94 = fadd float %89, %93, !dbg !43
  %95 = bitcast float %94 to i32, !dbg !41
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !41
  %97 = bitcast i32 %96 to float, !dbg !41
  %98 = fadd float %94, %97, !dbg !43
  %99 = bitcast float %98 to i32, !dbg !41
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !41
  %101 = bitcast i32 %100 to float, !dbg !41
  %102 = fadd float %98, %101, !dbg !43
  %103 = bitcast float %102 to i32, !dbg !41
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !41
  %105 = bitcast i32 %104 to float, !dbg !41
  %106 = fadd float %102, %105, !dbg !43
  %107 = bitcast float %90 to i32, !dbg !41
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !41
  %109 = bitcast i32 %108 to float, !dbg !41
  %110 = fadd float %90, %109, !dbg !43
  %111 = bitcast float %110 to i32, !dbg !41
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !41
  %113 = bitcast i32 %112 to float, !dbg !41
  %114 = fadd float %110, %113, !dbg !43
  %115 = bitcast float %114 to i32, !dbg !41
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !41
  %117 = bitcast i32 %116 to float, !dbg !41
  %118 = fadd float %114, %117, !dbg !43
  %119 = bitcast float %118 to i32, !dbg !41
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !41
  %121 = bitcast i32 %120 to float, !dbg !41
  %122 = fadd float %118, %121, !dbg !43
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 1.600000e+01) #4, !dbg !44
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float 1.600000e+01) #4, !dbg !44
  %125 = fadd float %123, 0x3EE4F8B580000000, !dbg !45
  %126 = fadd float %124, 0x3EE4F8B580000000, !dbg !45
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i = icmp eq i32 %127, 0, !dbg !46
  br i1 %.not.i, label %130, label %128, !dbg !46

128:                                              ; preds = %10
  %129 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %125), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

130:                                              ; preds = %10
  %131 = tail call float @llvm.nvvm.rsqrt.approx.f(float %125), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %128, %130
  %.0.i = phi float [ %129, %128 ], [ %131, %130 ], !dbg !46
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i1 = icmp eq i32 %132, 0, !dbg !46
  br i1 %.not.i1, label %135, label %133, !dbg !46

133:                                              ; preds = %__nv_rsqrtf.exit
  %134 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !46
  br label %__nv_rsqrtf.exit3, !dbg !46

135:                                              ; preds = %__nv_rsqrtf.exit
  %136 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !46
  br label %__nv_rsqrtf.exit3, !dbg !46

__nv_rsqrtf.exit3:                                ; preds = %133, %135
  %.0.i2 = phi float [ %134, %133 ], [ %136, %135 ], !dbg !46
  %137 = bitcast i32 %42 to float, !dbg !26
  %138 = bitcast i32 %40 to float, !dbg !24
  %139 = fmul float %85, %.0.i, !dbg !47
  %140 = fmul float %139, %138, !dbg !48
  %141 = fadd float %140, %137, !dbg !49
  %142 = fmul float %.0.i2, 6.250000e-02, !dbg !50
  %143 = and i32 %13, 48, !dbg !51
  %144 = icmp eq i32 %143, 0, !dbg !51
  %145 = bitcast float %139 to i32, !dbg !51
  %146 = and i1 %144, %12, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %18, i1 %146) #4, !dbg !51
  %147 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !52
  %148 = bitcast float %141 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %147, i1 %146) #4, !dbg !53
  %149 = sext i32 %11 to i64, !dbg !54
  %150 = getelementptr float, ptr addrspace(1) %7, i64 %149, !dbg !54
  %urem = and i32 %13, 63, !dbg !55
  %151 = icmp eq i32 %urem, 0, !dbg !55
  %152 = bitcast float %142 to i32, !dbg !55
  %153 = and i1 %151, %12, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %150, i1 %153) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmszmfqrnpdcidhb5qklfc47msoitngim4i3h7pu26irnxd3ihum.py", directory: "inductor_cache/ms")
!4 = !{ptr @triton_per_fused_add_addmm_native_layer_norm_native_layer_norm_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_addmm_native_layer_norm_native_layer_norm_backward_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_addmm_native_layer_norm_native_layer_norm_backward_1", linkageName: "triton_per_fused_add_addmm_native_layer_norm_native_layer_norm_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 42, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 47, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 36, scope: !7)
!25 = !DILocation(line: 36, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 43, column: 35, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 44, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 19, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !42)
!42 = !DILocation(line: 52, column: 26, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !42)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 20, scope: !7)
!46 = !DILocation(line: 58, column: 28, scope: !7)
!47 = !DILocation(line: 59, column: 20, scope: !7)
!48 = !DILocation(line: 60, column: 20, scope: !7)
!49 = !DILocation(line: 61, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 20, scope: !7)
!51 = !DILocation(line: 64, column: 48, scope: !7)
!52 = !DILocation(line: 65, column: 25, scope: !7)
!53 = !DILocation(line: 65, column: 45, scope: !7)
!54 = !DILocation(line: 66, column: 25, scope: !7)
!55 = !DILocation(line: 66, column: 37, scope: !7)
!56 = !DILocation(line: 66, column: 4, scope: !7)
