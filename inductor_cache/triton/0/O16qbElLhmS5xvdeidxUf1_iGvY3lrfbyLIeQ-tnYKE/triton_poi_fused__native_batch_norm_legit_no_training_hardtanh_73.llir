; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = icmp slt i32 %13, 300, !dbg !14
  %16 = icmp slt i32 %14, 300, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %18 = icmp slt i32 %17, 4, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %19 = sdiv i32 %.frozen, 75, !dbg !17
  %20 = mul i32 %19, 75, !dbg !18
  %.decomposed = sub i32 %.frozen, %20, !dbg !18
  %.frozen7 = freeze i32 %14, !dbg !17
  %21 = sdiv i32 %.frozen7, 75, !dbg !17
  %22 = mul i32 %21, 75, !dbg !18
  %.decomposed8 = sub i32 %.frozen7, %22, !dbg !18
  %23 = mul i32 %17, 75, !dbg !19
  %24 = add i32 %.decomposed, %23, !dbg !20
  %25 = mul i32 %19, 300, !dbg !21
  %26 = mul i32 %21, 300, !dbg !21
  %27 = add i32 %24, %25, !dbg !22
  %28 = add i32 %26, %.decomposed8, !dbg !20
  %29 = add i32 %28, %23, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = and i1 %18, %15, !dbg !24
  %35 = and i1 %16, %18, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %34) #3, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %35) #3, !dbg !25
  %38 = sext i32 %.decomposed to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !26
  %40 = sext i32 %.decomposed8 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %15) #3, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %16) #3, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %15) #3, !dbg !29
  %47 = bitcast i32 %46 to float, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %16) #3, !dbg !29
  %49 = bitcast i32 %48 to float, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %15) #3, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %16) #3, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %15) #3, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %16) #3, !dbg !33
  %58 = fadd float %47, 0x3EE4F8B580000000, !dbg !34
  %59 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %60, 0, !dbg !35
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %61, 0, !dbg !35
  br i1 %.not.i, label %67, label %62, !dbg !35

62:                                               ; preds = %8
  br i1 %.not1.i, label %65, label %63, !dbg !35

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

67:                                               ; preds = %8
  br i1 %.not1.i, label %70, label %68, !dbg !35

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !35
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i2 = icmp eq i32 %72, 0, !dbg !35
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i5 = icmp eq i32 %73, 0, !dbg !35
  br i1 %.not.i2, label %79, label %74, !dbg !35

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %77, label %75, !dbg !35

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %82, label %80, !dbg !35

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !35
  br label %__nv_sqrtf.exit6, !dbg !35

__nv_sqrtf.exit6:                                 ; preds = %75, %77, %80, %82
  %.0.i4 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !35
  %84 = bitcast i32 %37 to float, !dbg !25
  %85 = bitcast i32 %43 to float, !dbg !27
  %86 = fsub float %84, %85, !dbg !36
  %87 = bitcast i32 %36 to float, !dbg !25
  %88 = bitcast i32 %42 to float, !dbg !27
  %89 = fsub float %87, %88, !dbg !36
  %90 = bitcast i32 %57 to float, !dbg !33
  %91 = bitcast i32 %56 to float, !dbg !33
  %92 = bitcast i32 %53 to float, !dbg !31
  %93 = bitcast i32 %52 to float, !dbg !31
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !37
  %96 = fmul float %89, %94, !dbg !38
  %97 = fmul float %86, %95, !dbg !38
  %98 = fmul float %96, %93, !dbg !39
  %99 = fmul float %97, %92, !dbg !39
  %100 = fadd float %98, %91, !dbg !40
  %101 = fadd float %99, %90, !dbg !40
  %.inv = fcmp ole float %100, 0.000000e+00, !dbg !41
  %102 = select i1 %.inv, float 0.000000e+00, float %100, !dbg !41
  %.inv1 = fcmp ole float %101, 0.000000e+00, !dbg !41
  %103 = select i1 %.inv1, float 0.000000e+00, float %101, !dbg !41
  %104 = fcmp olt float %102, 6.000000e+00, !dbg !45
  %105 = fcmp olt float %103, 6.000000e+00, !dbg !45
  %106 = fcmp uno float %102, 0.000000e+00, !dbg !47
  %107 = fcmp uno float %103, 0.000000e+00, !dbg !47
  %108 = or i1 %104, %106, !dbg !48
  %109 = or i1 %105, %107, !dbg !48
  %110 = shl i32 %13, 2, !dbg !49
  %111 = shl i32 %14, 2, !dbg !49
  %112 = add i32 %110, %17, !dbg !50
  %113 = add i32 %17, %111, !dbg !50
  %114 = sext i32 %112 to i64, !dbg !51
  %115 = getelementptr float, ptr addrspace(1) %5, i64 %114, !dbg !51
  %116 = sext i32 %113 to i64, !dbg !51
  %117 = getelementptr float, ptr addrspace(1) %5, i64 %116, !dbg !51
  %118 = bitcast float %102 to i32, !dbg !52
  %119 = select i1 %108, i32 %118, i32 1086324736, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %119, ptr addrspace(1) %115, i1 %34) #3, !dbg !52
  %120 = bitcast float %103 to i32, !dbg !52
  %121 = select i1 %109, i32 %120, i32 1086324736, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %117, i1 %35) #3, !dbg !52
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp4eii4lrrcyvxbunrdtov4ghtp4jpwkm4vgl4mr73jsiyujrzwg.py", directory: "inductor_cache/p4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_73", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 47, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 60, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 110, column: 15, scope: !42, inlinedAt: !46)
!46 = !DILocation(line: 51, column: 42, scope: !7)
!47 = !DILocation(line: 112, column: 21, scope: !42, inlinedAt: !46)
!48 = !DILocation(line: 112, column: 16, scope: !42, inlinedAt: !46)
!49 = !DILocation(line: 52, column: 32, scope: !7)
!50 = !DILocation(line: 52, column: 30, scope: !7)
!51 = !DILocation(line: 52, column: 25, scope: !7)
!52 = !DILocation(line: 52, column: 44, scope: !7)
!53 = !DILocation(line: 113, column: 29, scope: !42, inlinedAt: !46)
!54 = !DILocation(line: 52, column: 4, scope: !7)
