; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_reflection_pad2d_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = icmp slt i32 %10, 52272, !dbg !14
  %15 = srem i32 %11, 66, !dbg !15
  %16 = srem i32 %13, 66, !dbg !15
  %17 = sdiv i32 %10, 66, !dbg !16
  %18 = sdiv i32 %12, 66, !dbg !16
  %19 = sdiv i32 %10, 4356, !dbg !17
  %20 = srem i32 %19, 3, !dbg !18
  %21 = add nsw i32 %15, -1, !dbg !19
  %22 = add nsw i32 %16, -1, !dbg !19
  %23 = tail call i32 @llvm.abs.i32(i32 %21, i1 true), !dbg !20
  %24 = tail call i32 @llvm.abs.i32(i32 %22, i1 true), !dbg !20
  %25 = add nsw i32 %23, -63, !dbg !21
  %26 = add nsw i32 %24, -63, !dbg !21
  %27 = tail call i32 @llvm.abs.i32(i32 %25, i1 true), !dbg !22
  %28 = tail call i32 @llvm.abs.i32(i32 %26, i1 true), !dbg !22
  %29 = shl nsw i32 %19, 12, !dbg !23
  %reass.sub = or disjoint i32 %29, 4095, !dbg !24
  %30 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %31 = insertelement <2 x i32> %30, i32 %17, i64 1, !dbg !15
  %32 = srem <2 x i32> %31, splat (i32 66), !dbg !15
  %33 = add nsw <2 x i32> %32, splat (i32 -1), !dbg !19
  %34 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %33, i1 true), !dbg !20
  %35 = add nsw <2 x i32> %34, splat (i32 -63), !dbg !21
  %36 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %35, i1 true), !dbg !22
  %37 = extractelement <2 x i32> %36, i64 0, !dbg !25
  %38 = sub nuw i32 %reass.sub, %37, !dbg !25
  %39 = extractelement <2 x i32> %36, i64 1, !dbg !25
  %40 = mul nsw i32 %39, -64, !dbg !25
  %41 = add i32 %38, %40, !dbg !25
  %42 = sub nuw i32 %reass.sub, %27, !dbg !24
  %43 = add i32 %42, %40, !dbg !25
  %44 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !15
  %45 = insertelement <2 x i32> %44, i32 %18, i64 1, !dbg !15
  %46 = srem <2 x i32> %45, splat (i32 66), !dbg !15
  %47 = add nsw <2 x i32> %46, splat (i32 -1), !dbg !19
  %48 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %47, i1 true), !dbg !20
  %49 = add nsw <2 x i32> %48, splat (i32 -63), !dbg !21
  %50 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %49, i1 true), !dbg !22
  %51 = extractelement <2 x i32> %50, i64 0, !dbg !25
  %52 = sub nuw i32 %reass.sub, %51, !dbg !25
  %53 = extractelement <2 x i32> %50, i64 1, !dbg !25
  %54 = mul nsw i32 %53, -64, !dbg !25
  %55 = add i32 %52, %54, !dbg !25
  %56 = sub nuw i32 %reass.sub, %28, !dbg !24
  %57 = add i32 %56, %54, !dbg !25
  %58 = sext i32 %41 to i64, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !26
  %60 = sext i32 %43 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !26
  %62 = sext i32 %55 to i64, !dbg !26
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !26
  %64 = sext i32 %57 to i64, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %14) #2, !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %14) #2, !dbg !27
  %69 = bitcast i32 %68 to float, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %14) #2, !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %14) #2, !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = sext i32 %20 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %14) #2, !dbg !29
  %77 = bitcast i32 %76 to float, !dbg !29
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %14) #2, !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %14) #2, !dbg !29
  %81 = bitcast i32 %80 to float, !dbg !29
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %14) #2, !dbg !29
  %83 = bitcast i32 %82 to float, !dbg !29
  %84 = fadd float %67, %77, !dbg !30
  %85 = fadd float %69, %79, !dbg !30
  %86 = fadd float %71, %81, !dbg !30
  %87 = fadd float %73, %83, !dbg !30
  %88 = sext i32 %10 to i64, !dbg !31
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !31
  %90 = bitcast float %84 to i32, !dbg !32
  %91 = bitcast float %85 to i32, !dbg !32
  %92 = bitcast float %86 to i32, !dbg !32
  %93 = bitcast float %87 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %90, i32 %91, i32 %92, i32 %93, ptr addrspace(1) %89, i1 %14) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqgureo7lmnwshqfkuf2dy74kgptoryxsbpxbk3hc3qugdynkqjk.py", directory: "inductor_cache/qg")
!4 = !{ptr @triton_poi_fused_convolution_reflection_pad2d_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_reflection_pad2d_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_reflection_pad2d_0", linkageName: "triton_poi_fused_convolution_reflection_pad2d_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 82, scope: !7)
!20 = !DILocation(line: 29, column: 75, scope: !7)
!21 = !DILocation(line: 29, column: 63, scope: !7)
!22 = !DILocation(line: 29, column: 55, scope: !7)
!23 = !DILocation(line: 29, column: 149, scope: !7)
!24 = !DILocation(line: 29, column: 91, scope: !7)
!25 = !DILocation(line: 29, column: 144, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 154, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 35, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 32, column: 25, scope: !7)
!32 = !DILocation(line: 32, column: 36, scope: !7)
!33 = !DILocation(line: 32, column: 4, scope: !7)
