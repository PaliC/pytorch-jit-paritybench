#loc = loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":19:0)
#loc1 = loc(unknown)
#loc7 = loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":32:24)
#loc15 = loc(callsite(#loc1 at #loc7))
module {
  tt.func public @triton_per_fused_eq_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":19:0), %arg1: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x1xf32> loc(#loc1)
    %0 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc3)
    %2 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc4)
    %3 = tt.addptr %2, %1 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc4)
    %4 = tt.load %3 : tensor<1x16x!tt.ptr<f32>> loc(#loc5)
    %5 = "tt.reduce"(%4) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc7)), %arg4: f32 loc(callsite(#loc1 at #loc7))):
      %12 = arith.addf %arg3, %arg4 : f32 loc(#loc17)
      tt.reduce.return %12 : f32 loc(#loc14)
    }) : (tensor<1x16xf32>) -> tensor<1xf32> loc(#loc14)
    %6 = tt.expand_dims %5 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc9)
    %7 = arith.cmpf oeq, %6, %cst : tensor<1x1xf32> loc(#loc10)
    %8 = tt.addptr %arg1, %c0_i32 : !tt.ptr<i1>, i32 loc(#loc11)
    %9 = tt.bitcast %8 : !tt.ptr<i1> -> !tt.ptr<i8> loc(#loc12)
    %10 = tt.splat %9 : !tt.ptr<i8> -> tensor<1x1x!tt.ptr<i8>> loc(#loc12)
    %11 = arith.extui %7 : tensor<1x1xi1> to tensor<1x1xi8> loc(#loc12)
    tt.store %10, %11 : tensor<1x1x!tt.ptr<i8>> loc(#loc12)
    tt.return loc(#loc13)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":26:26)
#loc3 = loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":26:34)
#loc4 = loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":30:30)
#loc5 = loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":30:35)
#loc6 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc8 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc9 = loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":32:27)
#loc10 = loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":34:19)
#loc11 = loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":35:25)
#loc12 = loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":35:67)
#loc13 = loc("inductor_cache/pq/cpqs5tgoyjirfbdoezf25maw24bn7wmgs4pknmkojht5rdkfbvfn.py":35:4)
#loc14 = loc(callsite(#loc6 at #loc7))
#loc16 = loc(callsite(#loc8 at #loc6))
#loc17 = loc(callsite(#loc16 at #loc7))
