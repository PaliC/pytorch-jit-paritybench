; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 7, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = icmp slt i32 %13, 128, !dbg !14
  %15 = shl i32 %9, 2, !dbg !15
  %16 = and i32 %15, 28, !dbg !15
  %17 = shl i32 %13, 5, !dbg !16
  %18 = or disjoint i32 %17, %16, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !19
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !19
  %26 = bitcast i32 %22 to float, !dbg !19
  %27 = bitcast i32 %23 to float, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = fadd float %26, %27, !dbg !20
  %31 = fadd float %30, %28, !dbg !20
  %32 = fadd float %31, %29, !dbg !20
  %33 = select i1 %14, float %32, float 0.000000e+00, !dbg !20
  %34 = bitcast float %33 to i32, !dbg !25
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 4, i32 31), !dbg !25
  %36 = bitcast i32 %35 to float, !dbg !25
  %37 = fadd float %33, %36, !dbg !20
  %38 = bitcast float %37 to i32, !dbg !25
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 2, i32 31), !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = fadd float %37, %40, !dbg !20
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 1, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !20
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %47 = bitcast float %45 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !26
  %49 = load float, ptr addrspace(3) %48, align 4, !dbg !26
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 3.200000e+01) #5, !dbg !26
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 3.200000e+01) #5, !dbg !26
  %52 = fsub float %26, %51, !dbg !27
  %53 = fsub float %27, %51, !dbg !27
  %54 = fsub float %28, %51, !dbg !27
  %55 = fsub float %29, %51, !dbg !27
  %56 = fmul float %52, %52, !dbg !28
  %57 = fmul float %53, %53, !dbg !28
  %58 = fmul float %54, %54, !dbg !28
  %59 = fmul float %55, %55, !dbg !28
  %60 = fadd float %56, %57, !dbg !29
  %61 = fadd float %58, %60, !dbg !29
  %62 = fadd float %59, %61, !dbg !29
  %63 = select i1 %14, float %62, float 0.000000e+00, !dbg !29
  %64 = bitcast float %63 to i32, !dbg !31
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 4, i32 31), !dbg !31
  %66 = bitcast i32 %65 to float, !dbg !31
  %67 = fadd float %63, %66, !dbg !29
  %68 = bitcast float %67 to i32, !dbg !31
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = fadd float %67, %70, !dbg !29
  %72 = bitcast float %71 to i32, !dbg !31
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = fadd float %71, %74, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %76 = bitcast float %75 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %76, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %77 = load float, ptr addrspace(3) %48, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %76, i1 true) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %78 = load i32, ptr addrspace(3) %48, align 4, !dbg !33
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 3.200000e+01) #5, !dbg !34
  %80 = fadd float %79, 0x3EE4F8B580000000, !dbg !35
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %81, 0, !dbg !32
  br i1 %.not.i, label %84, label %82, !dbg !32

82:                                               ; preds = %6
  %83 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

84:                                               ; preds = %6
  %85 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %82, %84
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], !dbg !32
  %86 = or disjoint i32 %8, %12, !dbg !13
  %87 = icmp slt i32 %86, 128, !dbg !14
  %88 = sext i32 %86 to i64, !dbg !36
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !36
  %90 = and i32 %9, 56, !dbg !37
  %91 = icmp eq i32 %90, 0, !dbg !37
  %92 = bitcast float %.0.i to i32, !dbg !37
  %93 = and i1 %91, %87, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %89, i1 %93) #5, !dbg !37
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !38
  %95 = bitcast float %50 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %94, i1 %93) #5, !dbg !39
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %96, i1 %93) #5, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvrzc52y3f2llkmt2yfomjg3e77by66lifg6g4gs5g5btxeqjlbi.py", directory: "inductor_cache/vr")
!4 = !{ptr @triton_per_fused_native_group_norm_28, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_28, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_28", linkageName: "triton_per_fused_native_group_norm_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 49, column: 28, scope: !7)
!33 = !DILocation(line: 44, column: 29, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 20, scope: !7)
!36 = !DILocation(line: 50, column: 25, scope: !7)
!37 = !DILocation(line: 50, column: 37, scope: !7)
!38 = !DILocation(line: 51, column: 25, scope: !7)
!39 = !DILocation(line: 51, column: 37, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 37, scope: !7)
!42 = !DILocation(line: 52, column: 4, scope: !7)
