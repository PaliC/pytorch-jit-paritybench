; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = srem i32 %11, 256, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !16
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !16
  %20 = sext i32 %12 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %39 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !16
  %40 = insertelement <2 x i32> %39, i32 %29, i64 1, !dbg !16
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !16
  %42 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !18
  %43 = insertelement <2 x i32> %42, i32 %35, i64 1, !dbg !18
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !18
  %45 = fadd <2 x float> %41, %44, !dbg !23
  %46 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !16
  %47 = insertelement <2 x i32> %46, i32 %30, i64 1, !dbg !16
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !16
  %49 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !18
  %50 = insertelement <2 x i32> %49, i32 %36, i64 1, !dbg !18
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !18
  %52 = fadd <2 x float> %48, %51, !dbg !23
  %53 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !16
  %54 = insertelement <2 x i32> %53, i32 %31, i64 1, !dbg !16
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !16
  %56 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !18
  %57 = insertelement <2 x i32> %56, i32 %37, i64 1, !dbg !18
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !18
  %59 = fadd <2 x float> %55, %58, !dbg !23
  %60 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !16
  %61 = insertelement <2 x i32> %60, i32 %32, i64 1, !dbg !16
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !16
  %63 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !18
  %64 = insertelement <2 x i32> %63, i32 %38, i64 1, !dbg !18
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !18
  %66 = fadd <2 x float> %62, %65, !dbg !23
  %shift = shufflevector <2 x float> %45, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %67 = fadd <2 x float> %45, %shift, !dbg !24
  %shift1 = shufflevector <2 x float> %52, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %68 = fadd <2 x float> %52, %shift1, !dbg !24
  %shift2 = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %69 = fadd <2 x float> %59, %shift2, !dbg !24
  %shift3 = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !24
  %70 = fadd <2 x float> %66, %shift3, !dbg !24
  %bc = bitcast <2 x float> %67 to <2 x i32>, !dbg !25
  %71 = extractelement <2 x i32> %bc, i64 0, !dbg !25
  %bc4 = bitcast <2 x float> %68 to <2 x i32>, !dbg !25
  %72 = extractelement <2 x i32> %bc4, i64 0, !dbg !25
  %bc5 = bitcast <2 x float> %69 to <2 x i32>, !dbg !25
  %73 = extractelement <2 x i32> %bc5, i64 0, !dbg !25
  %bc6 = bitcast <2 x float> %70 to <2 x i32>, !dbg !25
  %74 = extractelement <2 x i32> %bc6, i64 0, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %71, i32 %72, i32 %73, i32 %74, ptr addrspace(1) %14, i1 true) #1, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv6fiqugicilxw5ucgbatzwdkd4md4747ixdvfzsqautq637eyjh.py", directory: "inductor_cache/v6")
!4 = !{ptr @triton_poi_fused_add_convolution_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_26", linkageName: "triton_poi_fused_add_convolution_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 18, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 4, scope: !7)
