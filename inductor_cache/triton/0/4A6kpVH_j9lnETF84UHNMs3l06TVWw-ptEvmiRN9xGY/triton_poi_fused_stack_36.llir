; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_stack_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 16384, !dbg !14
  %16 = sdiv i32 %14, 16384, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %17 = sdiv i32 %.frozen, 1024, !dbg !15
  %18 = mul i32 %17, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %.frozen76 = freeze i32 %14, !dbg !15
  %19 = sdiv i32 %.frozen76, 1024, !dbg !15
  %20 = mul i32 %19, 1024, !dbg !16
  %.decomposed77 = sub i32 %.frozen76, %20, !dbg !16
  %21 = srem i32 %17, 16, !dbg !17
  %22 = srem i32 %19, 16, !dbg !17
  %23 = icmp slt i32 %13, 65536, !dbg !18
  %24 = icmp slt i32 %14, 65536, !dbg !18
  %25 = shl nsw i32 %21, 11, !dbg !19
  %26 = shl nsw i32 %22, 11, !dbg !19
  %27 = shl i32 %15, 15, !dbg !20
  %28 = shl i32 %16, 15, !dbg !20
  %29 = add i32 %25, %27, !dbg !21
  %30 = add i32 %29, %.decomposed, !dbg !22
  %31 = add i32 %26, %28, !dbg !21
  %32 = add i32 %31, %.decomposed77, !dbg !22
  %33 = sext i32 %30 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = sext i32 %32 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !24
  %39 = sext i32 %.decomposed to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !25
  %41 = sext i32 %.decomposed77 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !27
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !28
  %52 = bitcast i32 %48 to float, !dbg !28
  %53 = bitcast i32 %49 to float, !dbg !28
  %54 = bitcast i32 %50 to float, !dbg !28
  %55 = bitcast i32 %51 to float, !dbg !28
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !28
  %61 = bitcast i32 %57 to float, !dbg !28
  %62 = bitcast i32 %58 to float, !dbg !28
  %63 = bitcast i32 %59 to float, !dbg !28
  %64 = bitcast i32 %60 to float, !dbg !28
  %65 = fadd float %52, 0x3EE4F8B580000000, !dbg !29
  %66 = fadd float %53, 0x3EE4F8B580000000, !dbg !29
  %67 = fadd float %54, 0x3EE4F8B580000000, !dbg !29
  %68 = fadd float %55, 0x3EE4F8B580000000, !dbg !29
  %69 = fadd float %61, 0x3EE4F8B580000000, !dbg !29
  %70 = fadd float %62, 0x3EE4F8B580000000, !dbg !29
  %71 = fadd float %63, 0x3EE4F8B580000000, !dbg !29
  %72 = fadd float %64, 0x3EE4F8B580000000, !dbg !29
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %73, 0, !dbg !30
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %74, 0, !dbg !30
  br i1 %.not.i, label %80, label %75, !dbg !30

75:                                               ; preds = %7
  br i1 %.not1.i, label %78, label %76, !dbg !30

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

80:                                               ; preds = %7
  br i1 %.not1.i, label %83, label %81, !dbg !30

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !30
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %85, 0, !dbg !30
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %86, 0, !dbg !30
  br i1 %.not.i1, label %92, label %87, !dbg !30

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !30

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !30

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %88, %90, %93, %95
  %.0.i3 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !30
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %97, 0, !dbg !30
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %98, 0, !dbg !30
  br i1 %.not.i6, label %104, label %99, !dbg !30

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !30

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

104:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %107, label %105, !dbg !30

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %100, %102, %105, %107
  %.0.i8 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !30
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %109, 0, !dbg !30
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %110, 0, !dbg !30
  br i1 %.not.i11, label %116, label %111, !dbg !30

111:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %114, label %112, !dbg !30

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

116:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %119, label %117, !dbg !30

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %112, %114, %117, %119
  %.0.i13 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !30
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %121, 0, !dbg !30
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %122, 0, !dbg !30
  br i1 %.not.i16, label %128, label %123, !dbg !30

123:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %126, label %124, !dbg !30

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

128:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %131, label %129, !dbg !30

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %124, %126, %129, %131
  %.0.i18 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !30
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %133, 0, !dbg !30
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %134, 0, !dbg !30
  br i1 %.not.i21, label %140, label %135, !dbg !30

135:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %138, label %136, !dbg !30

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

140:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %143, label %141, !dbg !30

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %136, %138, %141, %143
  %.0.i23 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !30
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %145, 0, !dbg !30
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %146, 0, !dbg !30
  br i1 %.not.i26, label %152, label %147, !dbg !30

147:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %150, label %148, !dbg !30

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

152:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %155, label %153, !dbg !30

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %148, %150, %153, %155
  %.0.i28 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !30
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %157, 0, !dbg !30
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %158, 0, !dbg !30
  br i1 %.not.i31, label %164, label %159, !dbg !30

159:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %162, label %160, !dbg !30

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

164:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %167, label %165, !dbg !30

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %160, %162, %165, %167
  %.0.i33 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !30
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !31
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !31
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !31
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !31
  %177 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !32
  %178 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !32
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !33
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !33
  %181 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !34
  %182 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !34
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !35
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !35
  %185 = icmp sgt i32 %13, 65535, !dbg !36
  %186 = icmp sgt i32 %14, 65535, !dbg !36
  %187 = add nsw i32 %.decomposed, 1024, !dbg !37
  %188 = add nsw i32 %.decomposed77, 1024, !dbg !37
  %189 = add i32 %27, -131072, !dbg !38
  %190 = add i32 %189, %187, !dbg !39
  %191 = add i32 %190, %25, !dbg !40
  %192 = add i32 %28, -131072, !dbg !38
  %193 = add i32 %192, %188, !dbg !39
  %194 = add i32 %193, %26, !dbg !40
  %195 = sext i32 %191 to i64, !dbg !41
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !41
  %197 = sext i32 %194 to i64, !dbg !41
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !41
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %196, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #3, !dbg !42
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186) #3, !dbg !42
  %201 = zext nneg i32 %187 to i64, !dbg !43
  %202 = getelementptr float, ptr addrspace(1) %1, i64 %201, !dbg !43
  %203 = zext nneg i32 %188 to i64, !dbg !43
  %204 = getelementptr float, ptr addrspace(1) %1, i64 %203, !dbg !43
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %202, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #3, !dbg !44
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %204, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186) #3, !dbg !44
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %201, !dbg !45
  %208 = getelementptr float, ptr addrspace(1) %2, i64 %203, !dbg !45
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %207, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #3, !dbg !46
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !46
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !46
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !46
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !46
  %214 = bitcast i32 %210 to float, !dbg !46
  %215 = bitcast i32 %211 to float, !dbg !46
  %216 = bitcast i32 %212 to float, !dbg !46
  %217 = bitcast i32 %213 to float, !dbg !46
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %208, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186) #3, !dbg !46
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !46
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !46
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !46
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !46
  %223 = bitcast i32 %219 to float, !dbg !46
  %224 = bitcast i32 %220 to float, !dbg !46
  %225 = bitcast i32 %221 to float, !dbg !46
  %226 = bitcast i32 %222 to float, !dbg !46
  %227 = fadd float %214, 0x3EE4F8B580000000, !dbg !47
  %228 = fadd float %215, 0x3EE4F8B580000000, !dbg !47
  %229 = fadd float %216, 0x3EE4F8B580000000, !dbg !47
  %230 = fadd float %217, 0x3EE4F8B580000000, !dbg !47
  %231 = fadd float %223, 0x3EE4F8B580000000, !dbg !47
  %232 = fadd float %224, 0x3EE4F8B580000000, !dbg !47
  %233 = fadd float %225, 0x3EE4F8B580000000, !dbg !47
  %234 = fadd float %226, 0x3EE4F8B580000000, !dbg !47
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i36 = icmp eq i32 %235, 0, !dbg !48
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i39 = icmp eq i32 %236, 0, !dbg !48
  br i1 %.not.i36, label %242, label %237, !dbg !48

237:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %240, label %238, !dbg !48

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %227) #3, !dbg !48
  br label %__nv_sqrtf.exit40, !dbg !48

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %227) #3, !dbg !48
  br label %__nv_sqrtf.exit40, !dbg !48

242:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %245, label %243, !dbg !48

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.f(float %227) #3, !dbg !48
  br label %__nv_sqrtf.exit40, !dbg !48

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.f(float %227) #3, !dbg !48
  br label %__nv_sqrtf.exit40, !dbg !48

__nv_sqrtf.exit40:                                ; preds = %238, %240, %243, %245
  %.0.i38 = phi float [ %239, %238 ], [ %241, %240 ], [ %244, %243 ], [ %246, %245 ], !dbg !48
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i41 = icmp eq i32 %247, 0, !dbg !48
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i44 = icmp eq i32 %248, 0, !dbg !48
  br i1 %.not.i41, label %254, label %249, !dbg !48

249:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %252, label %250, !dbg !48

250:                                              ; preds = %249
  %251 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %228) #3, !dbg !48
  br label %__nv_sqrtf.exit45, !dbg !48

252:                                              ; preds = %249
  %253 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %228) #3, !dbg !48
  br label %__nv_sqrtf.exit45, !dbg !48

254:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %257, label %255, !dbg !48

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.f(float %228) #3, !dbg !48
  br label %__nv_sqrtf.exit45, !dbg !48

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.f(float %228) #3, !dbg !48
  br label %__nv_sqrtf.exit45, !dbg !48

__nv_sqrtf.exit45:                                ; preds = %250, %252, %255, %257
  %.0.i43 = phi float [ %251, %250 ], [ %253, %252 ], [ %256, %255 ], [ %258, %257 ], !dbg !48
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i46 = icmp eq i32 %259, 0, !dbg !48
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i49 = icmp eq i32 %260, 0, !dbg !48
  br i1 %.not.i46, label %266, label %261, !dbg !48

261:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %264, label %262, !dbg !48

262:                                              ; preds = %261
  %263 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %229) #3, !dbg !48
  br label %__nv_sqrtf.exit50, !dbg !48

264:                                              ; preds = %261
  %265 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %229) #3, !dbg !48
  br label %__nv_sqrtf.exit50, !dbg !48

266:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %269, label %267, !dbg !48

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.f(float %229) #3, !dbg !48
  br label %__nv_sqrtf.exit50, !dbg !48

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.f(float %229) #3, !dbg !48
  br label %__nv_sqrtf.exit50, !dbg !48

__nv_sqrtf.exit50:                                ; preds = %262, %264, %267, %269
  %.0.i48 = phi float [ %263, %262 ], [ %265, %264 ], [ %268, %267 ], [ %270, %269 ], !dbg !48
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i51 = icmp eq i32 %271, 0, !dbg !48
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i54 = icmp eq i32 %272, 0, !dbg !48
  br i1 %.not.i51, label %278, label %273, !dbg !48

273:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %276, label %274, !dbg !48

274:                                              ; preds = %273
  %275 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %230) #3, !dbg !48
  br label %__nv_sqrtf.exit55, !dbg !48

276:                                              ; preds = %273
  %277 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %230) #3, !dbg !48
  br label %__nv_sqrtf.exit55, !dbg !48

278:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %281, label %279, !dbg !48

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.f(float %230) #3, !dbg !48
  br label %__nv_sqrtf.exit55, !dbg !48

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.f(float %230) #3, !dbg !48
  br label %__nv_sqrtf.exit55, !dbg !48

__nv_sqrtf.exit55:                                ; preds = %274, %276, %279, %281
  %.0.i53 = phi float [ %275, %274 ], [ %277, %276 ], [ %280, %279 ], [ %282, %281 ], !dbg !48
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i56 = icmp eq i32 %283, 0, !dbg !48
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i59 = icmp eq i32 %284, 0, !dbg !48
  br i1 %.not.i56, label %290, label %285, !dbg !48

285:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %288, label %286, !dbg !48

286:                                              ; preds = %285
  %287 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %231) #3, !dbg !48
  br label %__nv_sqrtf.exit60, !dbg !48

288:                                              ; preds = %285
  %289 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %231) #3, !dbg !48
  br label %__nv_sqrtf.exit60, !dbg !48

290:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %293, label %291, !dbg !48

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.f(float %231) #3, !dbg !48
  br label %__nv_sqrtf.exit60, !dbg !48

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.f(float %231) #3, !dbg !48
  br label %__nv_sqrtf.exit60, !dbg !48

__nv_sqrtf.exit60:                                ; preds = %286, %288, %291, %293
  %.0.i58 = phi float [ %287, %286 ], [ %289, %288 ], [ %292, %291 ], [ %294, %293 ], !dbg !48
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i61 = icmp eq i32 %295, 0, !dbg !48
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i64 = icmp eq i32 %296, 0, !dbg !48
  br i1 %.not.i61, label %302, label %297, !dbg !48

297:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %300, label %298, !dbg !48

298:                                              ; preds = %297
  %299 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %232) #3, !dbg !48
  br label %__nv_sqrtf.exit65, !dbg !48

300:                                              ; preds = %297
  %301 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %232) #3, !dbg !48
  br label %__nv_sqrtf.exit65, !dbg !48

302:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %305, label %303, !dbg !48

303:                                              ; preds = %302
  %304 = tail call float @llvm.nvvm.sqrt.rn.f(float %232) #3, !dbg !48
  br label %__nv_sqrtf.exit65, !dbg !48

305:                                              ; preds = %302
  %306 = tail call float @llvm.nvvm.sqrt.approx.f(float %232) #3, !dbg !48
  br label %__nv_sqrtf.exit65, !dbg !48

__nv_sqrtf.exit65:                                ; preds = %298, %300, %303, %305
  %.0.i63 = phi float [ %299, %298 ], [ %301, %300 ], [ %304, %303 ], [ %306, %305 ], !dbg !48
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i66 = icmp eq i32 %307, 0, !dbg !48
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i69 = icmp eq i32 %308, 0, !dbg !48
  br i1 %.not.i66, label %314, label %309, !dbg !48

309:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %312, label %310, !dbg !48

310:                                              ; preds = %309
  %311 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %233) #3, !dbg !48
  br label %__nv_sqrtf.exit70, !dbg !48

312:                                              ; preds = %309
  %313 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %233) #3, !dbg !48
  br label %__nv_sqrtf.exit70, !dbg !48

314:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %317, label %315, !dbg !48

315:                                              ; preds = %314
  %316 = tail call float @llvm.nvvm.sqrt.rn.f(float %233) #3, !dbg !48
  br label %__nv_sqrtf.exit70, !dbg !48

317:                                              ; preds = %314
  %318 = tail call float @llvm.nvvm.sqrt.approx.f(float %233) #3, !dbg !48
  br label %__nv_sqrtf.exit70, !dbg !48

__nv_sqrtf.exit70:                                ; preds = %310, %312, %315, %317
  %.0.i68 = phi float [ %311, %310 ], [ %313, %312 ], [ %316, %315 ], [ %318, %317 ], !dbg !48
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i71 = icmp eq i32 %319, 0, !dbg !48
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i74 = icmp eq i32 %320, 0, !dbg !48
  br i1 %.not.i71, label %326, label %321, !dbg !48

321:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %324, label %322, !dbg !48

322:                                              ; preds = %321
  %323 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %234) #3, !dbg !48
  br label %__nv_sqrtf.exit75, !dbg !48

324:                                              ; preds = %321
  %325 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %234) #3, !dbg !48
  br label %__nv_sqrtf.exit75, !dbg !48

326:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %329, label %327, !dbg !48

327:                                              ; preds = %326
  %328 = tail call float @llvm.nvvm.sqrt.rn.f(float %234) #3, !dbg !48
  br label %__nv_sqrtf.exit75, !dbg !48

329:                                              ; preds = %326
  %330 = tail call float @llvm.nvvm.sqrt.approx.f(float %234) #3, !dbg !48
  br label %__nv_sqrtf.exit75, !dbg !48

__nv_sqrtf.exit75:                                ; preds = %322, %324, %327, %329
  %.0.i73 = phi float [ %323, %322 ], [ %325, %324 ], [ %328, %327 ], [ %330, %329 ], !dbg !48
  %331 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !42
  %332 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !44
  %333 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !42
  %334 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !44
  %335 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !42
  %336 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !44
  %337 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !42
  %338 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !44
  %339 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !42
  %340 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !44
  %341 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !42
  %342 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !44
  %343 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !42
  %344 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !44
  %345 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !42
  %346 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !44
  %347 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !24
  %348 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %349 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !33
  %350 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !35
  %351 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !24
  %352 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %353 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !33
  %354 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !35
  %355 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !24
  %356 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %357 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !33
  %358 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !35
  %359 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !24
  %360 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %361 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !33
  %362 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !35
  %363 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !24
  %364 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %365 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !33
  %366 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !35
  %367 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !24
  %368 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %369 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !33
  %370 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !35
  %371 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !24
  %372 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %373 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !33
  %374 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !35
  %375 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !24
  %376 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %377 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !33
  %378 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !35
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !49
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !49
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !49
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !49
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !49
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !49
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !49
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !49
  %387 = getelementptr float, ptr addrspace(1) %3, i64 %201, !dbg !50
  %388 = getelementptr float, ptr addrspace(1) %3, i64 %203, !dbg !50
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %387, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #3, !dbg !51
  %390 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !51
  %391 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !51
  %392 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !51
  %393 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !51
  %394 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %388, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186) #3, !dbg !51
  %395 = extractvalue { i32, i32, i32, i32 } %394, 0, !dbg !51
  %396 = extractvalue { i32, i32, i32, i32 } %394, 1, !dbg !51
  %397 = extractvalue { i32, i32, i32, i32 } %394, 2, !dbg !51
  %398 = extractvalue { i32, i32, i32, i32 } %394, 3, !dbg !51
  %399 = getelementptr float, ptr addrspace(1) %4, i64 %201, !dbg !52
  %400 = getelementptr float, ptr addrspace(1) %4, i64 %203, !dbg !52
  %401 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %399, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #3, !dbg !53
  %402 = extractvalue { i32, i32, i32, i32 } %401, 0, !dbg !53
  %403 = extractvalue { i32, i32, i32, i32 } %401, 1, !dbg !53
  %404 = extractvalue { i32, i32, i32, i32 } %401, 2, !dbg !53
  %405 = extractvalue { i32, i32, i32, i32 } %401, 3, !dbg !53
  %406 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %400, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186) #3, !dbg !53
  %407 = extractvalue { i32, i32, i32, i32 } %406, 0, !dbg !53
  %408 = extractvalue { i32, i32, i32, i32 } %406, 1, !dbg !53
  %409 = extractvalue { i32, i32, i32, i32 } %406, 2, !dbg !53
  %410 = extractvalue { i32, i32, i32, i32 } %406, 3, !dbg !53
  %411 = insertelement <16 x i32> poison, i32 %331, i64 0, !dbg !42
  %412 = insertelement <16 x i32> %411, i32 %333, i64 1, !dbg !42
  %413 = insertelement <16 x i32> %412, i32 %335, i64 2, !dbg !42
  %414 = insertelement <16 x i32> %413, i32 %337, i64 3, !dbg !42
  %415 = insertelement <16 x i32> %414, i32 %339, i64 4, !dbg !42
  %416 = insertelement <16 x i32> %415, i32 %341, i64 5, !dbg !42
  %417 = insertelement <16 x i32> %416, i32 %343, i64 6, !dbg !42
  %418 = insertelement <16 x i32> %417, i32 %345, i64 7, !dbg !42
  %419 = insertelement <16 x i32> %418, i32 %375, i64 8, !dbg !42
  %420 = insertelement <16 x i32> %419, i32 %371, i64 9, !dbg !42
  %421 = insertelement <16 x i32> %420, i32 %367, i64 10, !dbg !42
  %422 = insertelement <16 x i32> %421, i32 %363, i64 11, !dbg !42
  %423 = insertelement <16 x i32> %422, i32 %359, i64 12, !dbg !42
  %424 = insertelement <16 x i32> %423, i32 %355, i64 13, !dbg !42
  %425 = insertelement <16 x i32> %424, i32 %351, i64 14, !dbg !42
  %426 = insertelement <16 x i32> %425, i32 %347, i64 15, !dbg !42
  %427 = bitcast <16 x i32> %426 to <16 x float>, !dbg !42
  %428 = insertelement <16 x i32> poison, i32 %332, i64 0, !dbg !44
  %429 = insertelement <16 x i32> %428, i32 %334, i64 1, !dbg !44
  %430 = insertelement <16 x i32> %429, i32 %336, i64 2, !dbg !44
  %431 = insertelement <16 x i32> %430, i32 %338, i64 3, !dbg !44
  %432 = insertelement <16 x i32> %431, i32 %340, i64 4, !dbg !44
  %433 = insertelement <16 x i32> %432, i32 %342, i64 5, !dbg !44
  %434 = insertelement <16 x i32> %433, i32 %344, i64 6, !dbg !44
  %435 = insertelement <16 x i32> %434, i32 %346, i64 7, !dbg !44
  %436 = insertelement <16 x i32> %435, i32 %376, i64 8, !dbg !44
  %437 = insertelement <16 x i32> %436, i32 %372, i64 9, !dbg !44
  %438 = insertelement <16 x i32> %437, i32 %368, i64 10, !dbg !44
  %439 = insertelement <16 x i32> %438, i32 %364, i64 11, !dbg !44
  %440 = insertelement <16 x i32> %439, i32 %360, i64 12, !dbg !44
  %441 = insertelement <16 x i32> %440, i32 %356, i64 13, !dbg !44
  %442 = insertelement <16 x i32> %441, i32 %352, i64 14, !dbg !44
  %443 = insertelement <16 x i32> %442, i32 %348, i64 15, !dbg !44
  %444 = bitcast <16 x i32> %443 to <16 x float>, !dbg !44
  %445 = fsub <16 x float> %427, %444, !dbg !54
  %446 = insertelement <16 x float> poison, float %386, i64 0, !dbg !55
  %447 = insertelement <16 x float> %446, float %385, i64 1, !dbg !55
  %448 = insertelement <16 x float> %447, float %384, i64 2, !dbg !55
  %449 = insertelement <16 x float> %448, float %383, i64 3, !dbg !55
  %450 = insertelement <16 x float> %449, float %382, i64 4, !dbg !55
  %451 = insertelement <16 x float> %450, float %381, i64 5, !dbg !55
  %452 = insertelement <16 x float> %451, float %380, i64 6, !dbg !55
  %453 = insertelement <16 x float> %452, float %379, i64 7, !dbg !55
  %454 = insertelement <16 x float> %453, float %169, i64 8, !dbg !55
  %455 = insertelement <16 x float> %454, float %170, i64 9, !dbg !55
  %456 = insertelement <16 x float> %455, float %171, i64 10, !dbg !55
  %457 = insertelement <16 x float> %456, float %172, i64 11, !dbg !55
  %458 = insertelement <16 x float> %457, float %173, i64 12, !dbg !55
  %459 = insertelement <16 x float> %458, float %174, i64 13, !dbg !55
  %460 = insertelement <16 x float> %459, float %175, i64 14, !dbg !55
  %461 = insertelement <16 x float> %460, float %176, i64 15, !dbg !55
  %462 = fmul <16 x float> %445, %461, !dbg !55
  %463 = insertelement <16 x i32> poison, i32 %398, i64 0, !dbg !51
  %464 = insertelement <16 x i32> %463, i32 %397, i64 1, !dbg !51
  %465 = insertelement <16 x i32> %464, i32 %396, i64 2, !dbg !51
  %466 = insertelement <16 x i32> %465, i32 %395, i64 3, !dbg !51
  %467 = insertelement <16 x i32> %466, i32 %393, i64 4, !dbg !51
  %468 = insertelement <16 x i32> %467, i32 %392, i64 5, !dbg !51
  %469 = insertelement <16 x i32> %468, i32 %391, i64 6, !dbg !51
  %470 = insertelement <16 x i32> %469, i32 %390, i64 7, !dbg !51
  %471 = insertelement <16 x i32> %470, i32 %377, i64 8, !dbg !51
  %472 = insertelement <16 x i32> %471, i32 %373, i64 9, !dbg !51
  %473 = insertelement <16 x i32> %472, i32 %369, i64 10, !dbg !51
  %474 = insertelement <16 x i32> %473, i32 %365, i64 11, !dbg !51
  %475 = insertelement <16 x i32> %474, i32 %361, i64 12, !dbg !51
  %476 = insertelement <16 x i32> %475, i32 %357, i64 13, !dbg !51
  %477 = insertelement <16 x i32> %476, i32 %353, i64 14, !dbg !51
  %478 = insertelement <16 x i32> %477, i32 %349, i64 15, !dbg !51
  %479 = bitcast <16 x i32> %478 to <16 x float>, !dbg !51
  %480 = fmul <16 x float> %462, %479, !dbg !56
  %481 = insertelement <16 x i32> poison, i32 %410, i64 0, !dbg !53
  %482 = insertelement <16 x i32> %481, i32 %409, i64 1, !dbg !53
  %483 = insertelement <16 x i32> %482, i32 %408, i64 2, !dbg !53
  %484 = insertelement <16 x i32> %483, i32 %407, i64 3, !dbg !53
  %485 = insertelement <16 x i32> %484, i32 %405, i64 4, !dbg !53
  %486 = insertelement <16 x i32> %485, i32 %404, i64 5, !dbg !53
  %487 = insertelement <16 x i32> %486, i32 %403, i64 6, !dbg !53
  %488 = insertelement <16 x i32> %487, i32 %402, i64 7, !dbg !53
  %489 = insertelement <16 x i32> %488, i32 %378, i64 8, !dbg !53
  %490 = insertelement <16 x i32> %489, i32 %374, i64 9, !dbg !53
  %491 = insertelement <16 x i32> %490, i32 %370, i64 10, !dbg !53
  %492 = insertelement <16 x i32> %491, i32 %366, i64 11, !dbg !53
  %493 = insertelement <16 x i32> %492, i32 %362, i64 12, !dbg !53
  %494 = insertelement <16 x i32> %493, i32 %358, i64 13, !dbg !53
  %495 = insertelement <16 x i32> %494, i32 %354, i64 14, !dbg !53
  %496 = insertelement <16 x i32> %495, i32 %350, i64 15, !dbg !53
  %497 = bitcast <16 x i32> %496 to <16 x float>, !dbg !53
  %498 = fadd <16 x float> %480, %497, !dbg !57
  %499 = fcmp olt <16 x float> %498, zeroinitializer, !dbg !58
  %500 = extractelement <16 x i1> %499, i64 15, !dbg !62
  %501 = extractelement <16 x float> %498, i64 15, !dbg !62
  %502 = select i1 %500, float 0.000000e+00, float %501, !dbg !62
  %503 = extractelement <16 x i1> %499, i64 14, !dbg !62
  %504 = extractelement <16 x float> %498, i64 14, !dbg !62
  %505 = select i1 %503, float 0.000000e+00, float %504, !dbg !62
  %506 = extractelement <16 x i1> %499, i64 13, !dbg !62
  %507 = extractelement <16 x float> %498, i64 13, !dbg !62
  %508 = select i1 %506, float 0.000000e+00, float %507, !dbg !62
  %509 = extractelement <16 x i1> %499, i64 12, !dbg !62
  %510 = extractelement <16 x float> %498, i64 12, !dbg !62
  %511 = select i1 %509, float 0.000000e+00, float %510, !dbg !62
  %512 = extractelement <16 x i1> %499, i64 11, !dbg !62
  %513 = extractelement <16 x float> %498, i64 11, !dbg !62
  %514 = select i1 %512, float 0.000000e+00, float %513, !dbg !62
  %515 = extractelement <16 x i1> %499, i64 10, !dbg !62
  %516 = extractelement <16 x float> %498, i64 10, !dbg !62
  %517 = select i1 %515, float 0.000000e+00, float %516, !dbg !62
  %518 = extractelement <16 x i1> %499, i64 9, !dbg !62
  %519 = extractelement <16 x float> %498, i64 9, !dbg !62
  %520 = select i1 %518, float 0.000000e+00, float %519, !dbg !62
  %521 = extractelement <16 x i1> %499, i64 8, !dbg !62
  %522 = extractelement <16 x float> %498, i64 8, !dbg !62
  %523 = select i1 %521, float 0.000000e+00, float %522, !dbg !62
  %524 = extractelement <16 x i1> %499, i64 7, !dbg !64
  %525 = extractelement <16 x float> %498, i64 7, !dbg !64
  %526 = select i1 %524, float 0.000000e+00, float %525, !dbg !64
  %527 = extractelement <16 x i1> %499, i64 6, !dbg !64
  %528 = extractelement <16 x float> %498, i64 6, !dbg !64
  %529 = select i1 %527, float 0.000000e+00, float %528, !dbg !64
  %530 = extractelement <16 x i1> %499, i64 5, !dbg !64
  %531 = extractelement <16 x float> %498, i64 5, !dbg !64
  %532 = select i1 %530, float 0.000000e+00, float %531, !dbg !64
  %533 = extractelement <16 x i1> %499, i64 4, !dbg !64
  %534 = extractelement <16 x float> %498, i64 4, !dbg !64
  %535 = select i1 %533, float 0.000000e+00, float %534, !dbg !64
  %536 = extractelement <16 x i1> %499, i64 3, !dbg !64
  %537 = extractelement <16 x float> %498, i64 3, !dbg !64
  %538 = select i1 %536, float 0.000000e+00, float %537, !dbg !64
  %539 = extractelement <16 x i1> %499, i64 2, !dbg !64
  %540 = extractelement <16 x float> %498, i64 2, !dbg !64
  %541 = select i1 %539, float 0.000000e+00, float %540, !dbg !64
  %542 = extractelement <16 x i1> %499, i64 1, !dbg !64
  %543 = extractelement <16 x float> %498, i64 1, !dbg !64
  %544 = select i1 %542, float 0.000000e+00, float %543, !dbg !64
  %545 = extractelement <16 x i1> %499, i64 0, !dbg !64
  %546 = extractelement <16 x float> %498, i64 0, !dbg !64
  %547 = select i1 %545, float 0.000000e+00, float %546, !dbg !64
  %548 = select i1 %23, float %523, float %526, !dbg !65
  %549 = select i1 %23, float %520, float %529, !dbg !65
  %550 = select i1 %23, float %517, float %532, !dbg !65
  %551 = select i1 %23, float %514, float %535, !dbg !65
  %552 = select i1 %24, float %511, float %538, !dbg !65
  %553 = select i1 %24, float %508, float %541, !dbg !65
  %554 = select i1 %24, float %505, float %544, !dbg !65
  %555 = select i1 %24, float %502, float %547, !dbg !65
  %556 = sext i32 %13 to i64, !dbg !66
  %557 = getelementptr float, ptr addrspace(1) %5, i64 %556, !dbg !66
  %558 = sext i32 %14 to i64, !dbg !66
  %559 = getelementptr float, ptr addrspace(1) %5, i64 %558, !dbg !66
  %560 = bitcast float %548 to i32, !dbg !67
  %561 = bitcast float %549 to i32, !dbg !67
  %562 = bitcast float %550 to i32, !dbg !67
  %563 = bitcast float %551 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %560, i32 %561, i32 %562, i32 %563, ptr addrspace(1) %557, i1 true) #3, !dbg !67
  %564 = bitcast float %552 to i32, !dbg !67
  %565 = bitcast float %553 to i32, !dbg !67
  %566 = bitcast float %554 to i32, !dbg !67
  %567 = bitcast float %555 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %564, i32 %565, i32 %566, i32 %567, ptr addrspace(1) %559, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz26flq24qvjrygha2fzxhheo2juimbk6prawukgqc4zugs324dg.py", directory: "inductor_cache/z2")
!4 = !{ptr @triton_poi_fused_stack_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_36", linkageName: "triton_poi_fused_stack_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 40, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 58, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 56, column: 38, scope: !7)
!38 = !DILocation(line: 56, column: 43, scope: !7)
!39 = !DILocation(line: 56, column: 60, scope: !7)
!40 = !DILocation(line: 56, column: 53, scope: !7)
!41 = !DILocation(line: 56, column: 31, scope: !7)
!42 = !DILocation(line: 56, column: 73, scope: !7)
!43 = !DILocation(line: 57, column: 31, scope: !7)
!44 = !DILocation(line: 57, column: 43, scope: !7)
!45 = !DILocation(line: 59, column: 31, scope: !7)
!46 = !DILocation(line: 59, column: 43, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 62, column: 27, scope: !7)
!49 = !DILocation(line: 64, column: 20, scope: !7)
!50 = !DILocation(line: 68, column: 31, scope: !7)
!51 = !DILocation(line: 68, column: 43, scope: !7)
!52 = !DILocation(line: 70, column: 31, scope: !7)
!53 = !DILocation(line: 70, column: 43, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 67, column: 20, scope: !7)
!56 = !DILocation(line: 69, column: 20, scope: !7)
!57 = !DILocation(line: 71, column: 20, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!61 = !DILocation(line: 73, column: 42, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !63)
!63 = !DILocation(line: 50, column: 42, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !61)
!65 = !DILocation(line: 0, scope: !7)
!66 = !DILocation(line: 77, column: 25, scope: !7)
!67 = !DILocation(line: 77, column: 37, scope: !7)
!68 = !DILocation(line: 77, column: 4, scope: !7)
