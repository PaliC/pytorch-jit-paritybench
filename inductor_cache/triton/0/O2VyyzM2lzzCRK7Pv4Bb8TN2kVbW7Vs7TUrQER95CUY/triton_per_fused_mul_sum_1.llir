; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mul_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %8, 63, !dbg !12
  %12 = sdiv i32 %6, 64, !dbg !13
  %13 = and i32 %8, 15, !dbg !14
  %.frozen = freeze i32 %6, !dbg !15
  %14 = sdiv i32 %.frozen, 16, !dbg !15
  %15 = mul i32 %14, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = srem i32 %14, 4, !dbg !17
  %17 = shl nsw i32 %12, 6, !dbg !18
  %18 = or disjoint i32 %17, %11, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %7, i32 0, i1 %7) #3, !dbg !21
  %22 = bitcast i32 %21 to float, !dbg !21
  %23 = shl nsw i32 %.decomposed, 4, !dbg !22
  %24 = shl nuw nsw i32 %11, 4, !dbg !23
  %25 = and i32 %24, 768, !dbg !23
  %26 = shl nsw i32 %16, 10, !dbg !24
  %27 = or disjoint i32 %25, %13, !dbg !25
  %28 = add nsw i32 %27, %23, !dbg !26
  %29 = add nsw i32 %28, %26, !dbg !27
  %30 = sext i32 %29 to i64, !dbg !28
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !28
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %7, i32 0, i1 %7) #3, !dbg !29
  %33 = bitcast i32 %32 to float, !dbg !29
  %34 = fmul float %22, %33, !dbg !30
  %35 = select i1 %7, float %34, float 0.000000e+00, !dbg !31
  %36 = bitcast float %35 to i32, !dbg !32
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 16, i32 31), !dbg !32
  %38 = bitcast i32 %37 to float, !dbg !32
  %39 = fadd float %35, %38, !dbg !36
  %40 = bitcast float %39 to i32, !dbg !32
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 8, i32 31), !dbg !32
  %42 = bitcast i32 %41 to float, !dbg !32
  %43 = fadd float %39, %42, !dbg !36
  %44 = bitcast float %43 to i32, !dbg !32
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 4, i32 31), !dbg !32
  %46 = bitcast i32 %45 to float, !dbg !32
  %47 = fadd float %43, %46, !dbg !36
  %48 = bitcast float %47 to i32, !dbg !32
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !32
  %50 = bitcast i32 %49 to float, !dbg !32
  %51 = fadd float %47, %50, !dbg !36
  %52 = bitcast float %51 to i32, !dbg !32
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !32
  %54 = bitcast i32 %53 to float, !dbg !32
  %55 = fadd float %51, %54, !dbg !36
  %56 = icmp eq i32 %9, 0, !dbg !32
  %57 = and i32 %10, 1, !dbg !32
  %58 = zext nneg i32 %57 to i64, !dbg !32
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i64 %58, !dbg !32
  %60 = bitcast float %55 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 %56) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %61 = icmp slt i32 %8, 2, !dbg !32
  %62 = sext i32 %8 to i64, !dbg !32
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i64 %62, !dbg !32
  %64 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %61) #3, !dbg !32
  %65 = bitcast i32 %64 to float, !dbg !32
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !32
  %67 = bitcast i32 %66 to float, !dbg !32
  %68 = fadd float %65, %67, !dbg !36
  %69 = and i32 %8, 1, !dbg !32
  %70 = icmp eq i32 %69, 0, !dbg !32
  %71 = and i1 %61, %70, !dbg !32
  %72 = bitcast float %68 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %72, i1 %71) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %73 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %74 = sext i32 %6 to i64, !dbg !38
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !38
  %76 = icmp eq i32 %11, 0, !dbg !39
  %77 = and i1 %76, %7, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %73, ptr addrspace(1) %75, i1 %77) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clije5n3zqrlejmzf2iasbdve5mbuijnh6airagjdz45z6fxthuk.py", directory: "inductor_cache/li")
!4 = !{ptr @triton_per_fused_mul_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_sum_1", linkageName: "triton_per_fused_mul_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 34, column: 21, scope: !7)
!16 = !DILocation(line: 33, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 27, scope: !7)
!18 = !DILocation(line: 36, column: 38, scope: !7)
!19 = !DILocation(line: 36, column: 35, scope: !7)
!20 = !DILocation(line: 36, column: 30, scope: !7)
!21 = !DILocation(line: 36, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 38, scope: !7)
!23 = !DILocation(line: 37, column: 47, scope: !7)
!24 = !DILocation(line: 37, column: 57, scope: !7)
!25 = !DILocation(line: 37, column: 35, scope: !7)
!26 = !DILocation(line: 37, column: 43, scope: !7)
!27 = !DILocation(line: 37, column: 52, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 62, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 33, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 41, column: 24, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !35)
!37 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!38 = !DILocation(line: 42, column: 25, scope: !7)
!39 = !DILocation(line: 42, column: 36, scope: !7)
!40 = !DILocation(line: 42, column: 4, scope: !7)
