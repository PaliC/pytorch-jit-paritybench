; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !11
  %8 = shl i32 %7, 8, !dbg !12
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %10 = shl i32 %9, 1, !dbg !13
  %11 = and i32 %10, 254, !dbg !13
  %12 = and i32 %9, 127, !dbg !13
  %13 = or disjoint i32 %12, 128, !dbg !13
  %14 = or disjoint i32 %8, %11, !dbg !14
  %15 = or disjoint i32 %8, %12, !dbg !14
  %16 = or disjoint i32 %8, %13, !dbg !14
  %17 = icmp slt i32 %15, 320, !dbg !15
  %18 = icmp slt i32 %16, 320, !dbg !15
  %.frozen = freeze i32 %6, !dbg !16
  %19 = sdiv i32 %.frozen, 4, !dbg !16
  %20 = srem i32 %19, 4, !dbg !17
  %21 = mul i32 %19, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %21, !dbg !18
  %.frozen7 = freeze i32 %6, !dbg !19
  %22 = sdiv i32 %.frozen7, 16, !dbg !19
  %23 = mul i32 %22, 16, !dbg !20
  %.decomposed8 = sub i32 %.frozen7, %23, !dbg !20
  %24 = icmp sgt i32 %20, -1, !dbg !21
  %25 = or i32 %20, %.decomposed, !dbg !22
  %26 = icmp sgt i32 %25, -1, !dbg !22
  %27 = mul nsw i32 %.decomposed, 640, !dbg !23
  %28 = mul i32 %19, 5120, !dbg !24
  %29 = add i32 %28, %27, !dbg !25
  %30 = add i32 %29, %14, !dbg !26
  %31 = sext i32 %30 to i64, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !27
  %33 = add i32 %29, 320, !dbg !28
  %34 = add i32 %33, %14, !dbg !29
  %35 = sext i32 %34 to i64, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !30
  %37 = add nsw i32 %.decomposed, 1, !dbg !31
  %38 = icmp ult i32 %37, 4, !dbg !31
  %39 = and i1 %24, %38, !dbg !32
  %40 = add i32 %29, 640, !dbg !33
  %41 = add i32 %40, %14, !dbg !34
  %42 = sext i32 %41 to i64, !dbg !35
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !35
  %44 = add i32 %29, 2560, !dbg !36
  %45 = add i32 %44, %14, !dbg !37
  %46 = sext i32 %45 to i64, !dbg !38
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !38
  %48 = add i32 %29, 2880, !dbg !39
  %49 = add i32 %48, %14, !dbg !40
  %50 = sext i32 %49 to i64, !dbg !41
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !41
  %52 = add i32 %29, 3200, !dbg !42
  %53 = add i32 %52, %14, !dbg !43
  %54 = sext i32 %53 to i64, !dbg !44
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !44
  %56 = add nsw i32 %20, 1, !dbg !45
  %57 = insertelement <4 x i32> <i32 poison, i32 poison, i32 poison, i32 -1>, i32 %14, i64 0, !dbg !15
  %58 = insertelement <4 x i32> %57, i32 %6, i64 1, !dbg !15
  %59 = insertelement <4 x i32> %58, i32 %56, i64 2, !dbg !15
  %60 = insertelement <4 x i32> <i32 320, i32 64, i32 4, i32 poison>, i32 %.decomposed, i64 3, !dbg !15
  %61 = icmp slt <4 x i32> %59, %60, !dbg !15
  %62 = icmp ult <4 x i32> %59, %60, !dbg !15
  %63 = shufflevector <4 x i1> %61, <4 x i1> %62, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !15
  %64 = extractelement <4 x i1> %61, i64 0, !dbg !46
  %65 = and i1 %26, %64, !dbg !47
  %66 = extractelement <4 x i1> %61, i64 1, !dbg !46
  %67 = and i1 %66, %65, !dbg !48
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #2, !dbg !49
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !49
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !49
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #2, !dbg !50
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !50
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !50
  %74 = and i1 %39, %64, !dbg !51
  %75 = and i1 %66, %74, !dbg !52
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %75, i32 -8388608, i1 %75, i32 -8388608, i1 %75) #2, !dbg !53
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !53
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !53
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #2, !dbg !54
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !54
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !54
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #2, !dbg !55
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !55
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !55
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %75, i32 -8388608, i1 %75, i32 -8388608, i1 %75) #2, !dbg !56
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !56
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !56
  %88 = add i32 %29, 5120, !dbg !57
  %89 = add i32 %88, %14, !dbg !58
  %90 = sext i32 %89 to i64, !dbg !59
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !59
  %92 = bitcast <4 x i1> %63 to i4, !dbg !60
  %93 = icmp eq i4 %92, -1, !dbg !60
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %91, i1 %93, i32 -8388608, i1 %93, i32 -8388608, i1 %93) #2, !dbg !61
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !61
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !61
  %97 = add i32 %29, 5440, !dbg !62
  %98 = add i32 %97, %14, !dbg !63
  %99 = sext i32 %98 to i64, !dbg !64
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !64
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %93, i32 -8388608, i1 %93, i32 -8388608, i1 %93) #2, !dbg !65
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !65
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !65
  %104 = or i32 %56, %37, !dbg !66
  %105 = icmp ult i32 %104, 4, !dbg !66
  %106 = add i32 %29, 5760, !dbg !67
  %107 = add i32 %106, %14, !dbg !68
  %108 = sext i32 %107 to i64, !dbg !69
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !69
  %110 = and i1 %64, %105, !dbg !70
  %111 = and i1 %66, %110, !dbg !71
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %109, i1 %111, i32 -8388608, i1 %111, i32 -8388608, i1 %111) #2, !dbg !72
  %113 = extractvalue { i32, i32 } %112, 0, !dbg !72
  %114 = extractvalue { i32, i32 } %112, 1, !dbg !72
  %115 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !49
  %116 = insertelement <2 x i32> %115, i32 %70, i64 1, !dbg !49
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !49
  %118 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !50
  %119 = insertelement <2 x i32> %118, i32 %73, i64 1, !dbg !50
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !50
  %121 = fcmp ogt <2 x float> %120, %117, !dbg !73
  %122 = fcmp uno <2 x float> %120, zeroinitializer, !dbg !77
  %123 = or <2 x i1> %121, %122, !dbg !78
  %.v = select <2 x i1> %123, <2 x i32> %119, <2 x i32> %116, !dbg !79
  %124 = bitcast <2 x i32> %.v to <2 x float>, !dbg !79
  %125 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !53
  %126 = insertelement <2 x i32> %125, i32 %78, i64 1, !dbg !53
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !53
  %128 = fcmp olt <2 x float> %124, %127, !dbg !80
  %129 = fcmp uno <2 x float> %127, zeroinitializer, !dbg !82
  %130 = or <2 x i1> %129, %128, !dbg !83
  %.v1 = select <2 x i1> %130, <2 x i32> %126, <2 x i32> %.v, !dbg !84
  %131 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !84
  %132 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !54
  %133 = insertelement <2 x i32> %132, i32 %81, i64 1, !dbg !54
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !54
  %135 = fcmp olt <2 x float> %131, %134, !dbg !85
  %136 = fcmp uno <2 x float> %134, zeroinitializer, !dbg !87
  %137 = or <2 x i1> %136, %135, !dbg !88
  %.v2 = select <2 x i1> %137, <2 x i32> %133, <2 x i32> %.v1, !dbg !89
  %138 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !89
  %139 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !55
  %140 = insertelement <2 x i32> %139, i32 %84, i64 1, !dbg !55
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !55
  %142 = fcmp olt <2 x float> %138, %141, !dbg !90
  %143 = fcmp uno <2 x float> %141, zeroinitializer, !dbg !92
  %144 = or <2 x i1> %143, %142, !dbg !93
  %.v3 = select <2 x i1> %144, <2 x i32> %140, <2 x i32> %.v2, !dbg !94
  %145 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !94
  %146 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !56
  %147 = insertelement <2 x i32> %146, i32 %87, i64 1, !dbg !56
  %148 = bitcast <2 x i32> %147 to <2 x float>, !dbg !56
  %149 = fcmp olt <2 x float> %145, %148, !dbg !95
  %150 = fcmp uno <2 x float> %148, zeroinitializer, !dbg !97
  %151 = or <2 x i1> %150, %149, !dbg !98
  %.v4 = select <2 x i1> %151, <2 x i32> %147, <2 x i32> %.v3, !dbg !99
  %152 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !99
  %153 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !61
  %154 = insertelement <2 x i32> %153, i32 %96, i64 1, !dbg !61
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !61
  %156 = fcmp olt <2 x float> %152, %155, !dbg !100
  %157 = fcmp uno <2 x float> %155, zeroinitializer, !dbg !102
  %158 = or <2 x i1> %157, %156, !dbg !103
  %.v5 = select <2 x i1> %158, <2 x i32> %154, <2 x i32> %.v4, !dbg !104
  %159 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !104
  %160 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !65
  %161 = insertelement <2 x i32> %160, i32 %103, i64 1, !dbg !65
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !65
  %163 = fcmp olt <2 x float> %159, %162, !dbg !105
  %164 = fcmp uno <2 x float> %162, zeroinitializer, !dbg !107
  %165 = or <2 x i1> %164, %163, !dbg !108
  %.v6 = select <2 x i1> %165, <2 x i32> %161, <2 x i32> %.v5, !dbg !109
  %166 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !109
  %167 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !72
  %168 = insertelement <2 x i32> %167, i32 %114, i64 1, !dbg !72
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !72
  %170 = fcmp olt <2 x float> %166, %169, !dbg !110
  %171 = bitcast i32 %113 to float, !dbg !112
  %172 = fcmp uno float %171, 0.000000e+00, !dbg !112
  %173 = bitcast i32 %114 to float, !dbg !112
  %174 = fcmp uno float %173, 0.000000e+00, !dbg !112
  %175 = extractelement <2 x i1> %170, i64 0, !dbg !113
  %176 = or i1 %172, %175, !dbg !113
  %177 = extractelement <2 x i1> %170, i64 1, !dbg !113
  %178 = or i1 %174, %177, !dbg !113
  %179 = zext <2 x i1> %121 to <2 x i8>, !dbg !114
  %180 = select <2 x i1> %128, <2 x i8> splat (i8 2), <2 x i8> %179, !dbg !115
  %181 = select <2 x i1> %135, <2 x i8> splat (i8 3), <2 x i8> %180, !dbg !116
  %182 = select <2 x i1> %142, <2 x i8> splat (i8 4), <2 x i8> %181, !dbg !117
  %183 = select <2 x i1> %149, <2 x i8> splat (i8 5), <2 x i8> %182, !dbg !118
  %184 = select <2 x i1> %156, <2 x i8> splat (i8 6), <2 x i8> %183, !dbg !119
  %185 = select <2 x i1> %163, <2 x i8> splat (i8 7), <2 x i8> %184, !dbg !120
  %186 = select <2 x i1> %170, <2 x i8> splat (i8 8), <2 x i8> %185, !dbg !121
  %187 = shl i32 %15, 4, !dbg !122
  %188 = shl i32 %16, 4, !dbg !122
  %189 = mul i32 %22, 9216, !dbg !123
  %190 = add i32 %189, %.decomposed8, !dbg !124
  %191 = add i32 %190, %187, !dbg !125
  %192 = add i32 %190, %188, !dbg !125
  %193 = sext i32 %191 to i64, !dbg !126
  %194 = getelementptr float, ptr addrspace(1) %1, i64 %193, !dbg !126
  %195 = sext i32 %192 to i64, !dbg !126
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !126
  %197 = and i1 %66, %17, !dbg !46
  %198 = and i1 %66, %18, !dbg !46
  %199 = and i1 %66, %64, !dbg !46
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !127
  %201 = extractelement <2 x i32> %.v6, i64 0, !dbg !127
  %202 = select i1 %176, i32 %113, i32 %201, !dbg !128
  %203 = insertelement <1 x i32> poison, i32 %202, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %203, i1 true) #2, !dbg !127
  %204 = or disjoint i32 %11, 1, !dbg !127
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !127
  %206 = extractelement <2 x i32> %.v6, i64 1, !dbg !127
  %207 = select i1 %178, i32 %114, i32 %206, !dbg !128
  %208 = insertelement <1 x i32> poison, i32 %207, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %208, i1 true) #2, !dbg !127
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !127
  %210 = load i32, ptr addrspace(3) %209, align 4, !dbg !127
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !127
  %212 = load i32, ptr addrspace(3) %211, align 4, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %194, i1 %197) #2, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %212, ptr addrspace(1) %196, i1 %198) #2, !dbg !127
  %213 = mul i32 %6, 320, !dbg !129
  %214 = add i32 %14, %213, !dbg !130
  %215 = sext i32 %214 to i64, !dbg !131
  %216 = getelementptr i8, ptr addrspace(1) %2, i64 %215, !dbg !131
  %217 = bitcast <2 x i8> %186 to i16, !dbg !132
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %217, ptr addrspace(1) %216, i1 %199) #2, !dbg !132
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6ijtva23cuteqkec5iksnu4hqrsf2ow6ntv6gac2t7rd5w6uwha.py", directory: "inductor_cache/6i")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_36", linkageName: "triton_poi_fused_max_pool2d_with_indices_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 28, column: 26, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 37, column: 19, scope: !7)
!22 = !DILocation(line: 45, column: 19, scope: !7)
!23 = !DILocation(line: 46, column: 40, scope: !7)
!24 = !DILocation(line: 46, column: 50, scope: !7)
!25 = !DILocation(line: 46, column: 36, scope: !7)
!26 = !DILocation(line: 46, column: 45, scope: !7)
!27 = !DILocation(line: 46, column: 31, scope: !7)
!28 = !DILocation(line: 52, column: 42, scope: !7)
!29 = !DILocation(line: 52, column: 51, scope: !7)
!30 = !DILocation(line: 52, column: 31, scope: !7)
!31 = !DILocation(line: 57, column: 20, scope: !7)
!32 = !DILocation(line: 58, column: 19, scope: !7)
!33 = !DILocation(line: 59, column: 42, scope: !7)
!34 = !DILocation(line: 59, column: 51, scope: !7)
!35 = !DILocation(line: 59, column: 31, scope: !7)
!36 = !DILocation(line: 66, column: 43, scope: !7)
!37 = !DILocation(line: 66, column: 52, scope: !7)
!38 = !DILocation(line: 66, column: 31, scope: !7)
!39 = !DILocation(line: 69, column: 43, scope: !7)
!40 = !DILocation(line: 69, column: 52, scope: !7)
!41 = !DILocation(line: 69, column: 31, scope: !7)
!42 = !DILocation(line: 72, column: 43, scope: !7)
!43 = !DILocation(line: 72, column: 52, scope: !7)
!44 = !DILocation(line: 72, column: 31, scope: !7)
!45 = !DILocation(line: 77, column: 20, scope: !7)
!46 = !DILocation(line: 112, column: 63, scope: !7)
!47 = !DILocation(line: 46, column: 63, scope: !7)
!48 = !DILocation(line: 46, column: 71, scope: !7)
!49 = !DILocation(line: 46, column: 55, scope: !7)
!50 = !DILocation(line: 52, column: 61, scope: !7)
!51 = !DILocation(line: 59, column: 69, scope: !7)
!52 = !DILocation(line: 59, column: 77, scope: !7)
!53 = !DILocation(line: 59, column: 61, scope: !7)
!54 = !DILocation(line: 66, column: 62, scope: !7)
!55 = !DILocation(line: 69, column: 62, scope: !7)
!56 = !DILocation(line: 72, column: 62, scope: !7)
!57 = !DILocation(line: 79, column: 43, scope: !7)
!58 = !DILocation(line: 79, column: 52, scope: !7)
!59 = !DILocation(line: 79, column: 31, scope: !7)
!60 = !DILocation(line: 79, column: 78, scope: !7)
!61 = !DILocation(line: 79, column: 62, scope: !7)
!62 = !DILocation(line: 82, column: 43, scope: !7)
!63 = !DILocation(line: 82, column: 52, scope: !7)
!64 = !DILocation(line: 82, column: 31, scope: !7)
!65 = !DILocation(line: 82, column: 62, scope: !7)
!66 = !DILocation(line: 84, column: 20, scope: !7)
!67 = !DILocation(line: 85, column: 43, scope: !7)
!68 = !DILocation(line: 85, column: 52, scope: !7)
!69 = !DILocation(line: 85, column: 31, scope: !7)
!70 = !DILocation(line: 85, column: 70, scope: !7)
!71 = !DILocation(line: 85, column: 78, scope: !7)
!72 = !DILocation(line: 85, column: 62, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 53, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !81)
!81 = !DILocation(line: 60, column: 42, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !86)
!86 = !DILocation(line: 67, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !91)
!91 = !DILocation(line: 70, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !96)
!96 = !DILocation(line: 73, column: 42, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !101)
!101 = !DILocation(line: 80, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !106)
!106 = !DILocation(line: 83, column: 42, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !106)
!110 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !111)
!111 = !DILocation(line: 86, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !111)
!114 = !DILocation(line: 90, column: 35, scope: !7)
!115 = !DILocation(line: 93, column: 35, scope: !7)
!116 = !DILocation(line: 96, column: 35, scope: !7)
!117 = !DILocation(line: 99, column: 35, scope: !7)
!118 = !DILocation(line: 102, column: 35, scope: !7)
!119 = !DILocation(line: 105, column: 35, scope: !7)
!120 = !DILocation(line: 108, column: 35, scope: !7)
!121 = !DILocation(line: 111, column: 35, scope: !7)
!122 = !DILocation(line: 112, column: 33, scope: !7)
!123 = !DILocation(line: 112, column: 43, scope: !7)
!124 = !DILocation(line: 112, column: 30, scope: !7)
!125 = !DILocation(line: 112, column: 38, scope: !7)
!126 = !DILocation(line: 112, column: 25, scope: !7)
!127 = !DILocation(line: 112, column: 55, scope: !7)
!128 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !111)
!129 = !DILocation(line: 113, column: 34, scope: !7)
!130 = !DILocation(line: 113, column: 30, scope: !7)
!131 = !DILocation(line: 113, column: 25, scope: !7)
!132 = !DILocation(line: 113, column: 46, scope: !7)
!133 = !DILocation(line: 113, column: 4, scope: !7)
