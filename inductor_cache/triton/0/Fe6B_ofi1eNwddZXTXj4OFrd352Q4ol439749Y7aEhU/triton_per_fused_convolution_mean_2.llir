; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_convolution_mean_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = and i32 %8, 7, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %12, 64, !dbg !14
  %15 = icmp slt i32 %13, 64, !dbg !14
  %16 = shl i32 %8, 1, !dbg !15
  %17 = and i32 %16, 14, !dbg !15
  %18 = srem i32 %12, 4, !dbg !16
  %19 = shl i32 %12, 4, !dbg !17
  %20 = or disjoint i32 %19, %17, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !20
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !20
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !20
  %26 = bitcast i32 %24 to float, !dbg !20
  %27 = bitcast i32 %25 to float, !dbg !20
  %28 = sext i32 %18 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %14) #3, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %14) #3, !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = fadd float %26, %32, !dbg !23
  %34 = fadd float %27, %32, !dbg !23
  %35 = fadd float %33, %34, !dbg !24
  %36 = select i1 %14, float %35, float 0.000000e+00, !dbg !24
  %37 = bitcast float %36 to i32, !dbg !29
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 4, i32 31), !dbg !29
  %39 = bitcast i32 %38 to float, !dbg !29
  %40 = fadd float %36, %39, !dbg !24
  %41 = bitcast float %40 to i32, !dbg !29
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 2, i32 31), !dbg !29
  %43 = bitcast i32 %42 to float, !dbg !29
  %44 = fadd float %40, %43, !dbg !24
  %45 = bitcast float %44 to i32, !dbg !29
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 1, i32 31), !dbg !29
  %47 = bitcast i32 %46 to float, !dbg !29
  %48 = fadd float %44, %47, !dbg !24
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %50 = bitcast float %48 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %52 = load float, ptr addrspace(3) %51, align 4, !dbg !30
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 1.600000e+01) #3, !dbg !30
  %54 = bitcast float %33 to i32, !dbg !31
  %55 = bitcast float %34 to i32, !dbg !31
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %54, i32 %55, ptr addrspace(1) %22, i1 %14) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %56 = sext i32 %13 to i64, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !33
  %58 = and i32 %8, 56, !dbg !34
  %59 = icmp eq i32 %58, 0, !dbg !34
  %60 = bitcast float %53 to i32, !dbg !34
  %61 = and i1 %59, %15, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %60, ptr addrspace(1) %57, i1 %61) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqao3yfr4goqytynd6qy7im2bwg3dtypxyucii6i3okt5kzgiaea.py", directory: "inductor_cache/qa")
!4 = !{ptr @triton_per_fused_convolution_mean_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_mean_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_mean_2", linkageName: "triton_per_fused_convolution_mean_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 37, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 47, scope: !7)
!32 = !DILocation(line: 41, column: 4, scope: !7)
!33 = !DILocation(line: 42, column: 28, scope: !7)
!34 = !DILocation(line: 42, column: 39, scope: !7)
!35 = !DILocation(line: 42, column: 4, scope: !7)
