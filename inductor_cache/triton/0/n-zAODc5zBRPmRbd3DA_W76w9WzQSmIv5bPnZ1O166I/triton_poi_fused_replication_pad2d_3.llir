; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_replication_pad2d_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = icmp slt i32 %9, 82944, !dbg !14
  %18 = icmp slt i32 %13, 82944, !dbg !14
  %19 = insertelement <8 x i32> poison, i32 %16, i64 0, !dbg !15
  %20 = insertelement <8 x i32> %19, i32 %15, i64 1, !dbg !15
  %21 = insertelement <8 x i32> %20, i32 %14, i64 2, !dbg !15
  %22 = insertelement <8 x i32> %21, i32 %13, i64 3, !dbg !15
  %23 = insertelement <8 x i32> %22, i32 %12, i64 4, !dbg !15
  %24 = insertelement <8 x i32> %23, i32 %11, i64 5, !dbg !15
  %25 = insertelement <8 x i32> %24, i32 %10, i64 6, !dbg !15
  %26 = insertelement <8 x i32> %25, i32 %9, i64 7, !dbg !15
  %27 = srem <8 x i32> %26, splat (i32 36), !dbg !15
  %28 = sdiv i32 %9, 36, !dbg !16
  %29 = sdiv i32 %13, 36, !dbg !16
  %30 = srem i32 %28, 36, !dbg !17
  %31 = srem i32 %29, 36, !dbg !17
  %32 = sdiv i32 %9, 1296, !dbg !18
  %33 = sdiv i32 %13, 1296, !dbg !18
  %34 = icmp sgt i32 %30, 2, !dbg !19
  %35 = icmp sgt i32 %31, 2, !dbg !19
  %36 = tail call i32 @llvm.smin.i32(i32 %30, i32 33), !dbg !20
  %37 = tail call i32 @llvm.smin.i32(i32 %31, i32 33), !dbg !20
  %38 = shl nsw i32 %36, 5, !dbg !21
  %39 = add nsw i32 %38, -64, !dbg !21
  %40 = select i1 %34, i32 %39, i32 0, !dbg !22
  %41 = shl nsw i32 %37, 5, !dbg !21
  %42 = add nsw i32 %41, -64, !dbg !21
  %43 = select i1 %35, i32 %42, i32 0, !dbg !22
  %44 = shl nsw i32 %32, 10, !dbg !23
  %45 = shl nsw i32 %33, 10, !dbg !23
  %46 = add nsw i32 %40, %44, !dbg !24
  %47 = add nsw i32 %43, %45, !dbg !24
  %48 = icmp sgt <8 x i32> %27, splat (i32 2), !dbg !25
  %49 = extractelement <8 x i32> %27, i64 7, !dbg !26
  %50 = tail call i32 @llvm.smin.i32(i32 %49, i32 33), !dbg !26
  %51 = add nsw i32 %50, -2, !dbg !26
  %52 = extractelement <8 x i1> %48, i64 7, !dbg !27
  %53 = select i1 %52, i32 %51, i32 0, !dbg !27
  %54 = extractelement <8 x i32> %27, i64 6, !dbg !26
  %55 = tail call i32 @llvm.smin.i32(i32 %54, i32 33), !dbg !26
  %56 = add nsw i32 %55, -2, !dbg !26
  %57 = extractelement <8 x i1> %48, i64 6, !dbg !27
  %58 = select i1 %57, i32 %56, i32 0, !dbg !27
  %59 = extractelement <8 x i32> %27, i64 5, !dbg !26
  %60 = tail call i32 @llvm.smin.i32(i32 %59, i32 33), !dbg !26
  %61 = add nsw i32 %60, -2, !dbg !26
  %62 = extractelement <8 x i1> %48, i64 5, !dbg !27
  %63 = select i1 %62, i32 %61, i32 0, !dbg !27
  %64 = extractelement <8 x i32> %27, i64 4, !dbg !26
  %65 = tail call i32 @llvm.smin.i32(i32 %64, i32 33), !dbg !26
  %66 = add nsw i32 %65, -2, !dbg !26
  %67 = extractelement <8 x i1> %48, i64 4, !dbg !27
  %68 = select i1 %67, i32 %66, i32 0, !dbg !27
  %69 = extractelement <8 x i32> %27, i64 3, !dbg !26
  %70 = tail call i32 @llvm.smin.i32(i32 %69, i32 33), !dbg !26
  %71 = add nsw i32 %70, -2, !dbg !26
  %72 = extractelement <8 x i1> %48, i64 3, !dbg !27
  %73 = select i1 %72, i32 %71, i32 0, !dbg !27
  %74 = extractelement <8 x i32> %27, i64 2, !dbg !26
  %75 = tail call i32 @llvm.smin.i32(i32 %74, i32 33), !dbg !26
  %76 = add nsw i32 %75, -2, !dbg !26
  %77 = extractelement <8 x i1> %48, i64 2, !dbg !27
  %78 = select i1 %77, i32 %76, i32 0, !dbg !27
  %79 = extractelement <8 x i32> %27, i64 1, !dbg !26
  %80 = tail call i32 @llvm.smin.i32(i32 %79, i32 33), !dbg !26
  %81 = add nsw i32 %80, -2, !dbg !26
  %82 = extractelement <8 x i1> %48, i64 1, !dbg !27
  %83 = select i1 %82, i32 %81, i32 0, !dbg !27
  %84 = extractelement <8 x i32> %27, i64 0, !dbg !26
  %85 = tail call i32 @llvm.smin.i32(i32 %84, i32 33), !dbg !26
  %86 = add nsw i32 %85, -2, !dbg !26
  %87 = extractelement <8 x i1> %48, i64 0, !dbg !27
  %88 = select i1 %87, i32 %86, i32 0, !dbg !27
  %89 = add nsw i32 %46, %53, !dbg !28
  %90 = add nsw i32 %46, %58, !dbg !28
  %91 = add nsw i32 %46, %63, !dbg !28
  %92 = add nsw i32 %46, %68, !dbg !28
  %93 = add nsw i32 %47, %73, !dbg !28
  %94 = add nsw i32 %47, %78, !dbg !28
  %95 = add nsw i32 %47, %83, !dbg !28
  %96 = add nsw i32 %47, %88, !dbg !28
  %97 = sext i32 %89 to i64, !dbg !29
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !29
  %99 = sext i32 %90 to i64, !dbg !29
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !29
  %101 = sext i32 %91 to i64, !dbg !29
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !29
  %103 = sext i32 %92 to i64, !dbg !29
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !29
  %105 = sext i32 %93 to i64, !dbg !29
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !29
  %107 = sext i32 %94 to i64, !dbg !29
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !29
  %109 = sext i32 %95 to i64, !dbg !29
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !29
  %111 = sext i32 %96 to i64, !dbg !29
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !29
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %17) #2, !dbg !30
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %17) #2, !dbg !30
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %17) #2, !dbg !30
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %17) #2, !dbg !30
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %18) #2, !dbg !30
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %18) #2, !dbg !30
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %18) #2, !dbg !30
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %18) #2, !dbg !30
  %121 = sext i32 %9 to i64, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !31
  %123 = sext i32 %13 to i64, !dbg !31
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %113, i32 %114, i32 %115, i32 %116, ptr addrspace(1) %122, i1 %17) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %117, i32 %118, i32 %119, i32 %120, ptr addrspace(1) %124, i1 %18) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqlpccp2hrihdqmapk22inzk63ahau5aflgp6pylzczksl7npo2l.py", directory: "inductor_cache/ql")
!4 = !{ptr @triton_poi_fused_replication_pad2d_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_replication_pad2d_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_replication_pad2d_3", linkageName: "triton_poi_fused_replication_pad2d_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 111, scope: !7)
!20 = !DILocation(line: 28, column: 120, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 96, scope: !7)
!23 = !DILocation(line: 28, column: 273, scope: !7)
!24 = !DILocation(line: 28, column: 268, scope: !7)
!25 = !DILocation(line: 28, column: 356, scope: !7)
!26 = !DILocation(line: 28, column: 365, scope: !7)
!27 = !DILocation(line: 28, column: 341, scope: !7)
!28 = !DILocation(line: 28, column: 279, scope: !7)
!29 = !DILocation(line: 28, column: 30, scope: !7)
!30 = !DILocation(line: 28, column: 513, scope: !7)
!31 = !DILocation(line: 29, column: 25, scope: !7)
!32 = !DILocation(line: 29, column: 36, scope: !7)
!33 = !DILocation(line: 29, column: 4, scope: !7)
