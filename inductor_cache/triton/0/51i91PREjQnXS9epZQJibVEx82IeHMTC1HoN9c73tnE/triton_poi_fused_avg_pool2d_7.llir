; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 256, !dbg !14
  %11 = add i32 %9, -20, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = add i32 %9, -16, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = add i32 %9, -12, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = add i32 %9, -4, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = sext i32 %9 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = add i32 %9, 4, !dbg !24
  %26 = sext i32 %25 to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = add i32 %9, 12, !dbg !26
  %29 = sext i32 %28 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !27
  %31 = add i32 %9, 16, !dbg !28
  %32 = sext i32 %31 to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !29
  %34 = add i32 %9, 20, !dbg !30
  %35 = sext i32 %34 to i64, !dbg !31
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !31
  %37 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !32
  %38 = shufflevector <2 x i32> %37, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %39 = sdiv <2 x i32> %38, <i32 4, i32 16>, !dbg !32
  %40 = srem <2 x i32> %39, splat (i32 4), !dbg !33
  %41 = extractelement <2 x i32> %40, i64 1, !dbg !34
  %42 = icmp sgt i32 %41, 0, !dbg !35
  %43 = extractelement <2 x i32> %40, i64 0, !dbg !34
  %44 = icmp sgt i32 %43, 0, !dbg !36
  %45 = and i1 %42, %44, !dbg !37
  %46 = and i1 %10, %45, !dbg !38
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %13, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #1, !dbg !39
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !39
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !39
  %50 = bitcast i32 %48 to float, !dbg !39
  %51 = bitcast i32 %49 to float, !dbg !39
  %52 = icmp sgt i32 %43, -1, !dbg !40
  %53 = and i1 %42, %52, !dbg !41
  %54 = and i1 %10, %53, !dbg !42
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #1, !dbg !43
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !43
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !43
  %58 = bitcast i32 %56 to float, !dbg !43
  %59 = bitcast i32 %57 to float, !dbg !43
  %60 = fadd float %50, %58, !dbg !44
  %61 = fadd float %51, %59, !dbg !44
  %62 = add nsw i32 %43, 1, !dbg !45
  %63 = icmp ult i32 %62, 4, !dbg !45
  %64 = and i1 %42, %63, !dbg !46
  %65 = and i1 %10, %64, !dbg !47
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !48
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !48
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !48
  %69 = bitcast i32 %67 to float, !dbg !48
  %70 = bitcast i32 %68 to float, !dbg !48
  %71 = fadd float %60, %69, !dbg !49
  %72 = fadd float %61, %70, !dbg !49
  %73 = icmp sgt i32 %41, -1, !dbg !50
  %74 = and i1 %73, %44, !dbg !51
  %75 = and i1 %10, %74, !dbg !52
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #1, !dbg !53
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !53
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !53
  %79 = bitcast i32 %77 to float, !dbg !53
  %80 = bitcast i32 %78 to float, !dbg !53
  %81 = fadd float %71, %79, !dbg !54
  %82 = fadd float %72, %80, !dbg !54
  %83 = or i32 %41, %43, !dbg !55
  %84 = icmp sgt i32 %83, -1, !dbg !55
  %85 = and i1 %10, %84, !dbg !56
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #1, !dbg !57
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !57
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !57
  %89 = bitcast i32 %87 to float, !dbg !57
  %90 = bitcast i32 %88 to float, !dbg !57
  %91 = fadd float %81, %89, !dbg !58
  %92 = fadd float %82, %90, !dbg !58
  %93 = and i1 %73, %63, !dbg !59
  %94 = and i1 %10, %93, !dbg !60
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !61
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !61
  %97 = extractvalue { i32, i32 } %95, 1, !dbg !61
  %98 = bitcast i32 %96 to float, !dbg !61
  %99 = bitcast i32 %97 to float, !dbg !61
  %100 = fadd float %91, %98, !dbg !62
  %101 = fadd float %92, %99, !dbg !62
  %102 = add nsw i32 %41, 1, !dbg !63
  %103 = icmp ult i32 %102, 4, !dbg !63
  %104 = and i1 %44, %103, !dbg !64
  %105 = and i1 %10, %104, !dbg !65
  %106 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #1, !dbg !66
  %107 = extractvalue { i32, i32 } %106, 0, !dbg !66
  %108 = extractvalue { i32, i32 } %106, 1, !dbg !66
  %109 = bitcast i32 %107 to float, !dbg !66
  %110 = bitcast i32 %108 to float, !dbg !66
  %111 = fadd float %100, %109, !dbg !67
  %112 = fadd float %101, %110, !dbg !67
  %113 = and i1 %52, %103, !dbg !68
  %114 = and i1 %10, %113, !dbg !69
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %114, i32 0, i1 %114, i32 0, i1 %114) #1, !dbg !70
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !70
  %117 = extractvalue { i32, i32 } %115, 1, !dbg !70
  %118 = bitcast i32 %116 to float, !dbg !70
  %119 = bitcast i32 %117 to float, !dbg !70
  %120 = fadd float %111, %118, !dbg !71
  %121 = fadd float %112, %119, !dbg !71
  %122 = or i32 %102, %62, !dbg !72
  %123 = icmp ult i32 %122, 4, !dbg !72
  %124 = and i1 %10, %123, !dbg !73
  %125 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %124, i32 0, i1 %124, i32 0, i1 %124) #1, !dbg !74
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !74
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !74
  %128 = bitcast i32 %126 to float, !dbg !74
  %129 = bitcast i32 %127 to float, !dbg !74
  %130 = fadd float %120, %128, !dbg !75
  %131 = fadd float %121, %129, !dbg !75
  %132 = mul nsw i32 %43, %41, !dbg !76
  %133 = add nsw <2 x i32> %40, splat (i32 2), !dbg !77
  %134 = icmp sgt <2 x i32> %40, splat (i32 2), !dbg !78
  %135 = select <2 x i1> %134, <2 x i32> splat (i32 5), <2 x i32> zeroinitializer, !dbg !79
  %136 = icmp slt <2 x i32> %40, splat (i32 3), !dbg !80
  %137 = select <2 x i1> %136, <2 x i32> %133, <2 x i32> zeroinitializer, !dbg !81
  %138 = add nsw <2 x i32> %135, %137, !dbg !82
  %139 = extractelement <2 x i32> %138, i64 0, !dbg !83
  %140 = extractelement <2 x i32> %138, i64 1, !dbg !84
  %141 = mul nsw i32 %139, %140, !dbg !85
  %142 = shufflevector <2 x i32> %40, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !84
  %143 = mul nsw <2 x i32> %138, %142, !dbg !84
  %shift = shufflevector <2 x i32> %143, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %144 = add nsw <2 x i32> %shift, %143
  %reass.add = extractelement <2 x i32> %144, i64 0
  %145 = add nsw i32 %41, %43, !dbg !34
  %reass.sub6 = sub nsw i32 %132, %145, !dbg !34
  %146 = add nsw i32 %reass.sub6, 1, !dbg !34
  %147 = add nsw i32 %146, %139, !dbg !83
  %148 = add nsw i32 %147, %140, !dbg !84
  %149 = add nsw i32 %148, %141, !dbg !86
  %150 = sub nsw i32 %149, %reass.add, !dbg !87
  %151 = sitofp i32 %150 to float, !dbg !88
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %151) #1, !dbg !88
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %151) #1, !dbg !88
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !89
  %155 = bitcast float %152 to i32, !dbg !90
  %156 = bitcast float %153 to i32, !dbg !90
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %155, i32 %156, ptr addrspace(1) %154, i1 %10) #1, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cilagps4lp43slppaqpuel7ga4uqx3nztlxjcraf425eghih7p5i.py", directory: "inductor_cache/il")
!4 = !{ptr @triton_poi_fused_avg_pool2d_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_7", linkageName: "triton_poi_fused_avg_pool2d_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 39, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 39, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 39, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 58, column: 38, scope: !7)
!22 = !DILocation(line: 58, column: 31, scope: !7)
!23 = !DILocation(line: 61, column: 31, scope: !7)
!24 = !DILocation(line: 64, column: 35, scope: !7)
!25 = !DILocation(line: 64, column: 31, scope: !7)
!26 = !DILocation(line: 71, column: 36, scope: !7)
!27 = !DILocation(line: 71, column: 31, scope: !7)
!28 = !DILocation(line: 74, column: 36, scope: !7)
!29 = !DILocation(line: 74, column: 31, scope: !7)
!30 = !DILocation(line: 77, column: 36, scope: !7)
!31 = !DILocation(line: 77, column: 31, scope: !7)
!32 = !DILocation(line: 24, column: 21, scope: !7)
!33 = !DILocation(line: 24, column: 27, scope: !7)
!34 = !DILocation(line: 79, column: 40, scope: !7)
!35 = !DILocation(line: 29, column: 19, scope: !7)
!36 = !DILocation(line: 34, column: 19, scope: !7)
!37 = !DILocation(line: 37, column: 19, scope: !7)
!38 = !DILocation(line: 38, column: 52, scope: !7)
!39 = !DILocation(line: 38, column: 44, scope: !7)
!40 = !DILocation(line: 40, column: 21, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 52, scope: !7)
!43 = !DILocation(line: 44, column: 44, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 52, scope: !7)
!48 = !DILocation(line: 51, column: 44, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 21, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 51, scope: !7)
!53 = !DILocation(line: 58, column: 43, scope: !7)
!54 = !DILocation(line: 59, column: 20, scope: !7)
!55 = !DILocation(line: 60, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 44, scope: !7)
!57 = !DILocation(line: 61, column: 36, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 48, scope: !7)
!61 = !DILocation(line: 64, column: 40, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 20, scope: !7)
!64 = !DILocation(line: 70, column: 20, scope: !7)
!65 = !DILocation(line: 71, column: 49, scope: !7)
!66 = !DILocation(line: 71, column: 41, scope: !7)
!67 = !DILocation(line: 72, column: 20, scope: !7)
!68 = !DILocation(line: 73, column: 20, scope: !7)
!69 = !DILocation(line: 74, column: 49, scope: !7)
!70 = !DILocation(line: 74, column: 41, scope: !7)
!71 = !DILocation(line: 75, column: 20, scope: !7)
!72 = !DILocation(line: 76, column: 20, scope: !7)
!73 = !DILocation(line: 77, column: 49, scope: !7)
!74 = !DILocation(line: 77, column: 41, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 79, column: 43, scope: !7)
!77 = !DILocation(line: 79, column: 124, scope: !7)
!78 = !DILocation(line: 79, column: 120, scope: !7)
!79 = !DILocation(line: 79, column: 112, scope: !7)
!80 = !DILocation(line: 79, column: 155, scope: !7)
!81 = !DILocation(line: 79, column: 143, scope: !7)
!82 = !DILocation(line: 79, column: 131, scope: !7)
!83 = !DILocation(line: 79, column: 48, scope: !7)
!84 = !DILocation(line: 79, column: 231, scope: !7)
!85 = !DILocation(line: 79, column: 105, scope: !7)
!86 = !DILocation(line: 79, column: 299, scope: !7)
!87 = !DILocation(line: 79, column: 357, scope: !7)
!88 = !DILocation(line: 80, column: 20, scope: !7)
!89 = !DILocation(line: 81, column: 25, scope: !7)
!90 = !DILocation(line: 81, column: 37, scope: !7)
!91 = !DILocation(line: 81, column: 4, scope: !7)
