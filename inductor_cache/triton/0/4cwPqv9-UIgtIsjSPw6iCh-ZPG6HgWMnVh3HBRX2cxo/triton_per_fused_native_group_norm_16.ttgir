#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":19:0)
#loc1 = loc(unknown)
#loc24 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":42:67)
#loc48 = loc(callsite(#loc1 at #loc24))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_native_group_norm_16(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<96> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<96> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<24> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<24> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1536> : tensor<8x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_2 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc7)
    %14 = arith.remsi %8, %cst_3 : tensor<8x1xi32, #blocked> loc(#loc8)
    %15 = arith.divsi %8, %cst_3 : tensor<8x1xi32, #blocked> loc(#loc9)
    %16 = arith.muli %13, %cst_4 : tensor<1x64xi32, #blocked> loc(#loc10)
    %17 = tt.broadcast %14 : tensor<8x1xi32, #blocked> -> tensor<8x64xi32, #blocked> loc(#loc11)
    %18 = tt.broadcast %16 : tensor<1x64xi32, #blocked> -> tensor<8x64xi32, #blocked> loc(#loc11)
    %19 = arith.addi %17, %18 : tensor<8x64xi32, #blocked> loc(#loc11)
    %20 = arith.muli %15, %cst_5 : tensor<8x1xi32, #blocked> loc(#loc12)
    %21 = tt.broadcast %20 : tensor<8x1xi32, #blocked> -> tensor<8x64xi32, #blocked> loc(#loc13)
    %22 = arith.addi %19, %21 : tensor<8x64xi32, #blocked> loc(#loc13)
    %23 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %24 = tt.addptr %23, %22 : tensor<8x64x!tt.ptr<f32>, #blocked>, tensor<8x64xi32, #blocked> loc(#loc14)
    %25 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x64xi1, #blocked> loc(#loc15)
    %26 = tt.load %24, %25, %cst : tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc15)
    %27 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc16)
    %28 = tt.addptr %27, %22 : tensor<8x64x!tt.ptr<f32>, #blocked>, tensor<8x64xi32, #blocked> loc(#loc16)
    %29 = tt.load %28, %25, %cst : tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc17)
    %30 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc18)
    %31 = tt.addptr %30, %22 : tensor<8x64x!tt.ptr<f32>, #blocked>, tensor<8x64xi32, #blocked> loc(#loc18)
    %32 = tt.load %31, %25, %cst : tensor<8x64x!tt.ptr<f32>, #blocked> loc(#loc19)
    %33 = arith.select %25, %26, %cst : tensor<8x64xi1, #blocked>, tensor<8x64xf32, #blocked> loc(#loc20)
    %34 = arith.select %25, %29, %cst : tensor<8x64xi1, #blocked>, tensor<8x64xf32, #blocked> loc(#loc21)
    %35 = arith.select %25, %32, %cst : tensor<8x64xi1, #blocked>, tensor<8x64xf32, #blocked> loc(#loc22)
    %36:3 = "tt.reduce"(%33, %34, %35) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc24)), %arg9: f32 loc(callsite(#loc1 at #loc24)), %arg10: f32 loc(callsite(#loc1 at #loc24)), %arg11: f32 loc(callsite(#loc1 at #loc24)), %arg12: f32 loc(callsite(#loc1 at #loc24)), %arg13: f32 loc(callsite(#loc1 at #loc24))):
      %49 = arith.subf %arg11, %arg8 : f32 loc(#loc61)
      %50 = arith.addf %arg10, %arg13 : f32 loc(#loc62)
      %51 = arith.cmpf oeq, %50, %cst_0 : f32 loc(#loc63)
      %52 = arith.divf %arg13, %50 : f32 loc(#loc64)
      %53 = arith.select %51, %cst_0, %52 : f32 loc(#loc65)
      %54 = arith.mulf %49, %53 : f32 loc(#loc66)
      %55 = arith.addf %arg8, %54 : f32 loc(#loc67)
      %56 = arith.addf %arg9, %arg12 : f32 loc(#loc68)
      %57 = arith.mulf %49, %49 : f32 loc(#loc69)
      %58 = arith.mulf %57, %arg10 : f32 loc(#loc70)
      %59 = arith.mulf %58, %53 : f32 loc(#loc71)
      %60 = arith.addf %56, %59 : f32 loc(#loc72)
      tt.reduce.return %55, %60, %50 : f32, f32, f32 loc(#loc47)
    }) : (tensor<8x64xf32, #blocked>, tensor<8x64xf32, #blocked>, tensor<8x64xf32, #blocked>) -> (tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc47)
    %37 = triton_gpu.convert_layout %36#0 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc37)
    %38 = tt.expand_dims %37 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc37)
    %39 = triton_gpu.convert_layout %36#1 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc38)
    %40 = tt.expand_dims %39 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc38)
    %41 = triton_gpu.convert_layout %36#2 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc39)
    %42 = tt.expand_dims %41 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc39)
    %43 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    %44 = tt.addptr %43, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc40)
    tt.store %44, %38, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    %45 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    %46 = tt.addptr %45, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc42)
    tt.store %46, %40, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc43)
    %47 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc44)
    %48 = tt.addptr %47, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc44)
    tt.store %48, %42, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc45)
    tt.return loc(#loc46)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":23:28)
#loc3 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":23:33)
#loc4 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":24:44)
#loc5 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":24:23)
#loc6 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":25:21)
#loc7 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":26:34)
#loc8 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":30:19)
#loc9 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":31:19)
#loc10 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":33:38)
#loc11 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":33:35)
#loc12 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":33:48)
#loc13 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":33:43)
#loc14 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":33:30)
#loc15 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":33:53)
#loc16 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":34:30)
#loc17 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":34:53)
#loc18 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":35:30)
#loc19 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":35:53)
#loc20 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":39:33)
#loc21 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":40:33)
#loc22 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":41:33)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc37 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":43:18)
#loc38 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":44:18)
#loc39 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":45:18)
#loc40 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":46:25)
#loc41 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":46:37)
#loc42 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":47:25)
#loc43 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":47:37)
#loc44 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":48:25)
#loc45 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":48:37)
#loc46 = loc("inductor_cache/3z/c3zxwnyaatyutsmpd7jyey6oytpma3xdhgbahmp2zjsxjjhy5fmd.py":48:4)
#loc47 = loc(callsite(#loc23 at #loc24))
#loc49 = loc(callsite(#loc25 at #loc23))
#loc50 = loc(callsite(#loc26 at #loc23))
#loc51 = loc(callsite(#loc27 at #loc23))
#loc52 = loc(callsite(#loc28 at #loc23))
#loc53 = loc(callsite(#loc29 at #loc23))
#loc54 = loc(callsite(#loc30 at #loc23))
#loc55 = loc(callsite(#loc31 at #loc23))
#loc56 = loc(callsite(#loc32 at #loc23))
#loc57 = loc(callsite(#loc33 at #loc23))
#loc58 = loc(callsite(#loc34 at #loc23))
#loc59 = loc(callsite(#loc35 at #loc23))
#loc60 = loc(callsite(#loc36 at #loc23))
#loc61 = loc(callsite(#loc49 at #loc24))
#loc62 = loc(callsite(#loc50 at #loc24))
#loc63 = loc(callsite(#loc51 at #loc24))
#loc64 = loc(callsite(#loc52 at #loc24))
#loc65 = loc(callsite(#loc53 at #loc24))
#loc66 = loc(callsite(#loc54 at #loc24))
#loc67 = loc(callsite(#loc55 at #loc24))
#loc68 = loc(callsite(#loc56 at #loc24))
#loc69 = loc(callsite(#loc57 at #loc24))
#loc70 = loc(callsite(#loc58 at #loc24))
#loc71 = loc(callsite(#loc59 at #loc24))
#loc72 = loc(callsite(#loc60 at #loc24))
