; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_34(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 60, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = lshr i32 %7, 4, !dbg !14
  %12 = and i32 %11, 31, !dbg !14
  %13 = or disjoint i32 %12, 32, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %14 = sdiv i32 %.frozen, 4096, !dbg !15
  %15 = mul i32 %14, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = shl i32 %14, 20, !dbg !17
  %17 = add i32 %16, %.decomposed
  %18 = shl nuw nsw i32 %12, 12, !dbg !18
  %19 = shl nuw nsw i32 %13, 12, !dbg !18
  %20 = add i32 %17, %18, !dbg !19
  %21 = add i32 %17, %19, !dbg !19
  %22 = sext i32 %20 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = sext i32 %21 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !20
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !21
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !21
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !21
  %36 = shl nuw nsw i32 %12, 12, !dbg !18
  %37 = or disjoint i32 %36, 262144, !dbg !18
  %38 = shl nuw nsw i32 %13, 12, !dbg !18
  %39 = or disjoint i32 %38, 262144, !dbg !18
  %40 = add i32 %17, %37, !dbg !19
  %41 = add i32 %17, %39, !dbg !19
  %42 = sext i32 %40 to i64, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !20
  %44 = sext i32 %41 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !20
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !21
  %56 = shl nuw nsw i32 %12, 12, !dbg !18
  %57 = or disjoint i32 %56, 524288, !dbg !18
  %58 = shl nuw nsw i32 %13, 12, !dbg !18
  %59 = or disjoint i32 %58, 524288, !dbg !18
  %60 = add i32 %17, %57, !dbg !19
  %61 = add i32 %17, %59, !dbg !19
  %62 = sext i32 %60 to i64, !dbg !20
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !20
  %64 = sext i32 %61 to i64, !dbg !20
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !20
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !21
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !21
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !21
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !21
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !21
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !21
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !21
  %76 = shl nuw nsw i32 %12, 12, !dbg !18
  %77 = or disjoint i32 %76, 786432, !dbg !18
  %78 = shl nuw nsw i32 %12, 12, !dbg !18
  %79 = or disjoint i32 %78, 917504, !dbg !18
  %80 = add i32 %17, %77, !dbg !19
  %81 = add i32 %17, %79, !dbg !19
  %82 = sext i32 %80 to i64, !dbg !20
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !20
  %84 = sext i32 %81 to i64, !dbg !20
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !20
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !21
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !21
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !21
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !21
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !21
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !21
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !21
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !21
  %96 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !21
  %97 = insertelement <2 x i32> %96, i32 %32, i64 1, !dbg !21
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !21
  %99 = fadd <2 x float> %98, zeroinitializer, !dbg !22
  %100 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !21
  %101 = insertelement <2 x i32> %100, i32 %52, i64 1, !dbg !21
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !21
  %103 = fadd <2 x float> %99, %102, !dbg !22
  %104 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !21
  %105 = insertelement <2 x i32> %104, i32 %72, i64 1, !dbg !21
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !21
  %107 = fadd <2 x float> %103, %106, !dbg !22
  %108 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !21
  %109 = insertelement <2 x i32> %108, i32 %92, i64 1, !dbg !21
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !21
  %111 = fadd <2 x float> %107, %110, !dbg !22
  %112 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !21
  %113 = insertelement <2 x i32> %112, i32 %33, i64 1, !dbg !21
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !21
  %115 = fadd <2 x float> %114, zeroinitializer, !dbg !22
  %116 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !21
  %117 = insertelement <2 x i32> %116, i32 %53, i64 1, !dbg !21
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !21
  %119 = fadd <2 x float> %115, %118, !dbg !22
  %120 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !21
  %121 = insertelement <2 x i32> %120, i32 %73, i64 1, !dbg !21
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !21
  %123 = fadd <2 x float> %119, %122, !dbg !22
  %124 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !21
  %125 = insertelement <2 x i32> %124, i32 %93, i64 1, !dbg !21
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !21
  %127 = fadd <2 x float> %123, %126, !dbg !22
  %128 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !21
  %129 = insertelement <2 x i32> %128, i32 %34, i64 1, !dbg !21
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !21
  %131 = fadd <2 x float> %130, zeroinitializer, !dbg !22
  %132 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !21
  %133 = insertelement <2 x i32> %132, i32 %54, i64 1, !dbg !21
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !21
  %135 = fadd <2 x float> %131, %134, !dbg !22
  %136 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !21
  %137 = insertelement <2 x i32> %136, i32 %74, i64 1, !dbg !21
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !21
  %139 = fadd <2 x float> %135, %138, !dbg !22
  %140 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !21
  %141 = insertelement <2 x i32> %140, i32 %94, i64 1, !dbg !21
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !21
  %143 = fadd <2 x float> %139, %142, !dbg !22
  %144 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %145 = insertelement <2 x i32> %144, i32 %35, i64 1, !dbg !21
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !21
  %147 = fadd <2 x float> %146, zeroinitializer, !dbg !22
  %148 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !21
  %149 = insertelement <2 x i32> %148, i32 %55, i64 1, !dbg !21
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !21
  %151 = fadd <2 x float> %147, %150, !dbg !22
  %152 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !21
  %153 = insertelement <2 x i32> %152, i32 %75, i64 1, !dbg !21
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !21
  %155 = fadd <2 x float> %151, %154, !dbg !22
  %156 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !21
  %157 = insertelement <2 x i32> %156, i32 %95, i64 1, !dbg !21
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !21
  %159 = fadd <2 x float> %155, %158, !dbg !22
  %160 = lshr i32 %7, 5, !dbg !12
  %161 = and i32 %7, 63, !dbg !12
  %162 = or disjoint i32 %6, %161, !dbg !13
  %163 = and i32 %7, 16, !dbg !12
  %shift = shufflevector <2 x float> %111, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %164 = fadd <2 x float> %111, %shift, !dbg !23
  %165 = extractelement <2 x float> %164, i64 0, !dbg !23
  %shift8 = shufflevector <2 x float> %127, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %166 = fadd <2 x float> %127, %shift8, !dbg !23
  %167 = extractelement <2 x float> %166, i64 0, !dbg !23
  %shift9 = shufflevector <2 x float> %143, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %168 = fadd <2 x float> %143, %shift9, !dbg !23
  %169 = extractelement <2 x float> %168, i64 0, !dbg !23
  %shift10 = shufflevector <2 x float> %159, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %170 = fadd <2 x float> %159, %shift10, !dbg !23
  %171 = extractelement <2 x float> %170, i64 0, !dbg !23
  %172 = bitcast float %165 to i32, !dbg !28
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 16, i32 31), !dbg !28
  %174 = bitcast i32 %173 to float, !dbg !28
  %175 = fadd float %165, %174, !dbg !23
  %176 = bitcast float %167 to i32, !dbg !28
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 16, i32 31), !dbg !28
  %178 = bitcast i32 %177 to float, !dbg !28
  %179 = fadd float %167, %178, !dbg !23
  %180 = bitcast float %169 to i32, !dbg !28
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 16, i32 31), !dbg !28
  %182 = bitcast i32 %181 to float, !dbg !28
  %183 = fadd float %169, %182, !dbg !23
  %184 = bitcast float %171 to i32, !dbg !28
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 16, i32 31), !dbg !28
  %186 = bitcast i32 %185 to float, !dbg !28
  %187 = fadd float %171, %186, !dbg !23
  %188 = icmp eq i32 %163, 0, !dbg !28
  %189 = and i32 %160, 15, !dbg !28
  %190 = shl nuw nsw i32 %9, 4, !dbg !28
  %191 = or disjoint i32 %190, %189, !dbg !28
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !28
  %193 = bitcast float %175 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 %188) #3, !dbg !28
  %194 = or disjoint i32 %190, 16, !dbg !28
  %195 = or disjoint i32 %194, %189, !dbg !28
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !28
  %197 = bitcast float %179 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 %188) #3, !dbg !28
  %198 = or disjoint i32 %190, 32, !dbg !28
  %199 = or disjoint i32 %198, %189, !dbg !28
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !28
  %201 = bitcast float %183 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 %188) #3, !dbg !28
  %202 = or disjoint i32 %190, 48, !dbg !28
  %203 = or disjoint i32 %202, %189, !dbg !28
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !28
  %205 = bitcast float %187 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 %188) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %206 = icmp slt i32 %7, 1024, !dbg !28
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !28
  %208 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %207, i1 %206) #3, !dbg !28
  %209 = bitcast i32 %208 to float, !dbg !28
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 8, i32 31), !dbg !28
  %211 = bitcast i32 %210 to float, !dbg !28
  %212 = fadd float %209, %211, !dbg !23
  %213 = bitcast float %212 to i32, !dbg !28
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 4, i32 31), !dbg !28
  %215 = bitcast i32 %214 to float, !dbg !28
  %216 = fadd float %212, %215, !dbg !23
  %217 = bitcast float %216 to i32, !dbg !28
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 2, i32 31), !dbg !28
  %219 = bitcast i32 %218 to float, !dbg !28
  %220 = fadd float %216, %219, !dbg !23
  %221 = bitcast float %220 to i32, !dbg !28
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 1, i32 31), !dbg !28
  %223 = bitcast i32 %222 to float, !dbg !28
  %224 = fadd float %220, %223, !dbg !23
  %225 = and i32 %7, 15, !dbg !28
  %226 = icmp eq i32 %225, 0, !dbg !28
  %227 = and i1 %206, %226, !dbg !28
  %228 = bitcast float %224 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %228, i1 %227) #3, !dbg !28
  %229 = getelementptr i8, ptr addrspace(3) %207, i32 2048, !dbg !28
  %230 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %229, i1 %206) #3, !dbg !28
  %231 = bitcast i32 %230 to float, !dbg !28
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !28
  %233 = bitcast i32 %232 to float, !dbg !28
  %234 = fadd float %231, %233, !dbg !23
  %235 = bitcast float %234 to i32, !dbg !28
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 4, i32 31), !dbg !28
  %237 = bitcast i32 %236 to float, !dbg !28
  %238 = fadd float %234, %237, !dbg !23
  %239 = bitcast float %238 to i32, !dbg !28
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 2, i32 31), !dbg !28
  %241 = bitcast i32 %240 to float, !dbg !28
  %242 = fadd float %238, %241, !dbg !23
  %243 = bitcast float %242 to i32, !dbg !28
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 1, i32 31), !dbg !28
  %245 = bitcast i32 %244 to float, !dbg !28
  %246 = fadd float %242, %245, !dbg !23
  %247 = bitcast float %246 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %247, i1 %227) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !28
  %249 = load i32, ptr addrspace(3) %248, align 16, !dbg !28
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !28
  %251 = load i32, ptr addrspace(3) %250, align 16, !dbg !28
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %198, !dbg !28
  %253 = load i32, ptr addrspace(3) %252, align 16, !dbg !28
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %202, !dbg !28
  %255 = load i32, ptr addrspace(3) %254, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %256, i32 %249, i32 %251, i32 %253, i32 %255, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %161, !dbg !29
  %258 = load float, ptr addrspace(3) %257, align 4, !dbg !29
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %258, float 2.560000e+02) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %260 = sext i32 %162 to i64, !dbg !31
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !31
  %262 = and i32 %7, 448, !dbg !32
  %263 = icmp eq i32 %262, 0, !dbg !32
  %264 = bitcast float %259 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %264, ptr addrspace(1) %261, i1 %263) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ojoprknxyrg2pes6evjhkfhlrqmz3umcwmfqqxdx5ngnm7ksel.py", directory: "inductor_cache/3o")
!4 = !{ptr @triton_red_fused_mean_34, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_34, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_34", linkageName: "triton_red_fused_mean_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 57, scope: !7)
!18 = !DILocation(line: 34, column: 44, scope: !7)
!19 = !DILocation(line: 34, column: 49, scope: !7)
!20 = !DILocation(line: 34, column: 34, scope: !7)
!21 = !DILocation(line: 34, column: 62, scope: !7)
!22 = !DILocation(line: 36, column: 23, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 38, column: 25, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 4, scope: !7)
!31 = !DILocation(line: 42, column: 28, scope: !7)
!32 = !DILocation(line: 42, column: 39, scope: !7)
!33 = !DILocation(line: 42, column: 4, scope: !7)
