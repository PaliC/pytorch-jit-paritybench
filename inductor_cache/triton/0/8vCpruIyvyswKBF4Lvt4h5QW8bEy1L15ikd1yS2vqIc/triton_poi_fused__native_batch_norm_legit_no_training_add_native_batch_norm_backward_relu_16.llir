; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = srem i32 %16, 320, !dbg !14
  %19 = srem i32 %17, 320, !dbg !14
  %20 = sext i32 %16 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = sext i32 %17 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %34 = sext i32 %18 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !21
  %36 = sext i32 %19 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !24
  %47 = bitcast i32 %43 to float, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %56 = bitcast i32 %52 to float, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !26
  %64 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !28
  %68 = fadd float %47, 0x3EE4F8B580000000, !dbg !29
  %69 = fadd float %48, 0x3EE4F8B580000000, !dbg !29
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !29
  %71 = fadd float %50, 0x3EE4F8B580000000, !dbg !29
  %72 = fadd float %56, 0x3EE4F8B580000000, !dbg !29
  %73 = fadd float %57, 0x3EE4F8B580000000, !dbg !29
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !29
  %75 = fadd float %59, 0x3EE4F8B580000000, !dbg !29
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %76, 0, !dbg !30
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %77, 0, !dbg !30
  br i1 %.not.i, label %83, label %78, !dbg !30

78:                                               ; preds = %10
  br i1 %.not1.i, label %81, label %79, !dbg !30

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

83:                                               ; preds = %10
  br i1 %.not1.i, label %86, label %84, !dbg !30

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !30
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %88, 0, !dbg !30
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %89, 0, !dbg !30
  br i1 %.not.i1, label %95, label %90, !dbg !30

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !30

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !30

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %91, %93, %96, %98
  %.0.i3 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !30
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %100, 0, !dbg !30
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %101, 0, !dbg !30
  br i1 %.not.i6, label %107, label %102, !dbg !30

102:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %105, label %103, !dbg !30

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

107:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %110, label %108, !dbg !30

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %103, %105, %108, %110
  %.0.i8 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !30
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %112, 0, !dbg !30
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %113, 0, !dbg !30
  br i1 %.not.i11, label %119, label %114, !dbg !30

114:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %117, label %115, !dbg !30

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

119:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %122, label %120, !dbg !30

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %115, %117, %120, %122
  %.0.i13 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !30
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %124, 0, !dbg !30
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %125, 0, !dbg !30
  br i1 %.not.i16, label %131, label %126, !dbg !30

126:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %129, label %127, !dbg !30

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

131:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %134, label %132, !dbg !30

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %127, %129, %132, %134
  %.0.i18 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !30
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %136, 0, !dbg !30
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %137, 0, !dbg !30
  br i1 %.not.i21, label %143, label %138, !dbg !30

138:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %141, label %139, !dbg !30

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

143:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %146, label %144, !dbg !30

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %139, %141, %144, %146
  %.0.i23 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !30
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %148, 0, !dbg !30
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %149, 0, !dbg !30
  br i1 %.not.i26, label %155, label %150, !dbg !30

150:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %153, label %151, !dbg !30

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

155:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %158, label %156, !dbg !30

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %151, %153, %156, %158
  %.0.i28 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !30
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %160, 0, !dbg !30
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %161, 0, !dbg !30
  br i1 %.not.i31, label %167, label %162, !dbg !30

162:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %165, label %163, !dbg !30

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

167:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %170, label %168, !dbg !30

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %163, %165, %168, %170
  %.0.i33 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !30
  %172 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %173 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %174 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %175 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %176 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %177 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %178 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %179 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %180 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %181 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %182 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %183 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %184 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %185 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %186 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %187 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %188 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %189 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %190 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %191 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %192 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %193 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %194 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %195 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %196 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %197 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %198 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %199 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %200 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %201 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %202 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %203 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %204 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %205 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %206 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %207 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %208 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %209 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %210 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %211 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %212 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %213 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %214 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %215 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %216 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %217 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %218 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %219 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !31
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !31
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !31
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !31
  %228 = insertelement <8 x i32> poison, i32 %172, i64 0, !dbg !16
  %229 = insertelement <8 x i32> %228, i32 %176, i64 1, !dbg !16
  %230 = insertelement <8 x i32> %229, i32 %180, i64 2, !dbg !16
  %231 = insertelement <8 x i32> %230, i32 %184, i64 3, !dbg !16
  %232 = insertelement <8 x i32> %231, i32 %188, i64 4, !dbg !16
  %233 = insertelement <8 x i32> %232, i32 %192, i64 5, !dbg !16
  %234 = insertelement <8 x i32> %233, i32 %196, i64 6, !dbg !16
  %235 = insertelement <8 x i32> %234, i32 %200, i64 7, !dbg !16
  %236 = bitcast <8 x i32> %235 to <8 x float>, !dbg !16
  %237 = insertelement <8 x i32> poison, i32 %173, i64 0, !dbg !18
  %238 = insertelement <8 x i32> %237, i32 %177, i64 1, !dbg !18
  %239 = insertelement <8 x i32> %238, i32 %181, i64 2, !dbg !18
  %240 = insertelement <8 x i32> %239, i32 %185, i64 3, !dbg !18
  %241 = insertelement <8 x i32> %240, i32 %189, i64 4, !dbg !18
  %242 = insertelement <8 x i32> %241, i32 %193, i64 5, !dbg !18
  %243 = insertelement <8 x i32> %242, i32 %197, i64 6, !dbg !18
  %244 = insertelement <8 x i32> %243, i32 %201, i64 7, !dbg !18
  %245 = bitcast <8 x i32> %244 to <8 x float>, !dbg !18
  %246 = fadd <8 x float> %236, %245, !dbg !32
  %247 = insertelement <8 x i32> poison, i32 %174, i64 0, !dbg !20
  %248 = insertelement <8 x i32> %247, i32 %178, i64 1, !dbg !20
  %249 = insertelement <8 x i32> %248, i32 %182, i64 2, !dbg !20
  %250 = insertelement <8 x i32> %249, i32 %186, i64 3, !dbg !20
  %251 = insertelement <8 x i32> %250, i32 %190, i64 4, !dbg !20
  %252 = insertelement <8 x i32> %251, i32 %194, i64 5, !dbg !20
  %253 = insertelement <8 x i32> %252, i32 %198, i64 6, !dbg !20
  %254 = insertelement <8 x i32> %253, i32 %202, i64 7, !dbg !20
  %255 = bitcast <8 x i32> %254 to <8 x float>, !dbg !20
  %256 = fadd <8 x float> %246, %255, !dbg !33
  %257 = insertelement <8 x i32> poison, i32 %175, i64 0, !dbg !22
  %258 = insertelement <8 x i32> %257, i32 %179, i64 1, !dbg !22
  %259 = insertelement <8 x i32> %258, i32 %183, i64 2, !dbg !22
  %260 = insertelement <8 x i32> %259, i32 %187, i64 3, !dbg !22
  %261 = insertelement <8 x i32> %260, i32 %191, i64 4, !dbg !22
  %262 = insertelement <8 x i32> %261, i32 %195, i64 5, !dbg !22
  %263 = insertelement <8 x i32> %262, i32 %199, i64 6, !dbg !22
  %264 = insertelement <8 x i32> %263, i32 %203, i64 7, !dbg !22
  %265 = bitcast <8 x i32> %264 to <8 x float>, !dbg !22
  %266 = fsub <8 x float> %256, %265, !dbg !34
  %267 = insertelement <8 x i32> poison, i32 %204, i64 0, !dbg !28
  %268 = insertelement <8 x i32> %267, i32 %205, i64 1, !dbg !28
  %269 = insertelement <8 x i32> %268, i32 %206, i64 2, !dbg !28
  %270 = insertelement <8 x i32> %269, i32 %207, i64 3, !dbg !28
  %271 = insertelement <8 x i32> %270, i32 %208, i64 4, !dbg !28
  %272 = insertelement <8 x i32> %271, i32 %209, i64 5, !dbg !28
  %273 = insertelement <8 x i32> %272, i32 %210, i64 6, !dbg !28
  %274 = insertelement <8 x i32> %273, i32 %211, i64 7, !dbg !28
  %275 = bitcast <8 x i32> %274 to <8 x float>, !dbg !28
  %276 = insertelement <8 x i32> poison, i32 %212, i64 0, !dbg !26
  %277 = insertelement <8 x i32> %276, i32 %213, i64 1, !dbg !26
  %278 = insertelement <8 x i32> %277, i32 %214, i64 2, !dbg !26
  %279 = insertelement <8 x i32> %278, i32 %215, i64 3, !dbg !26
  %280 = insertelement <8 x i32> %279, i32 %216, i64 4, !dbg !26
  %281 = insertelement <8 x i32> %280, i32 %217, i64 5, !dbg !26
  %282 = insertelement <8 x i32> %281, i32 %218, i64 6, !dbg !26
  %283 = insertelement <8 x i32> %282, i32 %219, i64 7, !dbg !26
  %284 = bitcast <8 x i32> %283 to <8 x float>, !dbg !26
  %285 = insertelement <8 x float> poison, float %227, i64 0, !dbg !35
  %286 = insertelement <8 x float> %285, float %226, i64 1, !dbg !35
  %287 = insertelement <8 x float> %286, float %225, i64 2, !dbg !35
  %288 = insertelement <8 x float> %287, float %224, i64 3, !dbg !35
  %289 = insertelement <8 x float> %288, float %223, i64 4, !dbg !35
  %290 = insertelement <8 x float> %289, float %222, i64 5, !dbg !35
  %291 = insertelement <8 x float> %290, float %221, i64 6, !dbg !35
  %292 = insertelement <8 x float> %291, float %220, i64 7, !dbg !35
  %293 = fmul <8 x float> %266, %292, !dbg !35
  %294 = fmul <8 x float> %293, %284, !dbg !36
  %295 = fadd <8 x float> %294, %275, !dbg !37
  %296 = fcmp olt <8 x float> %295, zeroinitializer, !dbg !38
  %297 = extractelement <8 x i1> %296, i64 7, !dbg !42
  %298 = extractelement <8 x i1> %296, i64 6, !dbg !42
  %299 = extractelement <8 x i1> %296, i64 5, !dbg !42
  %300 = extractelement <8 x i1> %296, i64 4, !dbg !42
  %301 = extractelement <8 x i1> %296, i64 3, !dbg !42
  %302 = extractelement <8 x i1> %296, i64 2, !dbg !42
  %303 = extractelement <8 x i1> %296, i64 1, !dbg !42
  %304 = extractelement <8 x i1> %296, i64 0, !dbg !42
  %305 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !43
  %306 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !43
  %bc = bitcast <8 x float> %295 to <8 x i32>, !dbg !44
  %307 = extractelement <8 x i32> %bc, i64 7, !dbg !44
  %308 = select i1 %297, i32 0, i32 %307, !dbg !42
  %bc36 = bitcast <8 x float> %295 to <8 x i32>, !dbg !44
  %309 = extractelement <8 x i32> %bc36, i64 6, !dbg !44
  %310 = select i1 %298, i32 0, i32 %309, !dbg !42
  %bc37 = bitcast <8 x float> %295 to <8 x i32>, !dbg !44
  %311 = extractelement <8 x i32> %bc37, i64 5, !dbg !44
  %312 = select i1 %299, i32 0, i32 %311, !dbg !42
  %bc38 = bitcast <8 x float> %295 to <8 x i32>, !dbg !44
  %313 = extractelement <8 x i32> %bc38, i64 4, !dbg !44
  %314 = select i1 %300, i32 0, i32 %313, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %308, i32 %310, i32 %312, i32 %314, ptr addrspace(1) %305, i1 true) #3, !dbg !44
  %bc39 = bitcast <8 x float> %295 to <8 x i32>, !dbg !44
  %315 = extractelement <8 x i32> %bc39, i64 3, !dbg !44
  %316 = select i1 %301, i32 0, i32 %315, !dbg !42
  %bc40 = bitcast <8 x float> %295 to <8 x i32>, !dbg !44
  %317 = extractelement <8 x i32> %bc40, i64 2, !dbg !44
  %318 = select i1 %302, i32 0, i32 %317, !dbg !42
  %bc41 = bitcast <8 x float> %295 to <8 x i32>, !dbg !44
  %319 = extractelement <8 x i32> %bc41, i64 1, !dbg !44
  %320 = select i1 %303, i32 0, i32 %319, !dbg !42
  %bc42 = bitcast <8 x float> %295 to <8 x i32>, !dbg !44
  %321 = extractelement <8 x i32> %bc42, i64 0, !dbg !44
  %322 = select i1 %304, i32 0, i32 %321, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %316, i32 %318, i32 %320, i32 %322, ptr addrspace(1) %306, i1 true) #3, !dbg !44
  %323 = getelementptr float, ptr addrspace(1) %8, i64 %20, !dbg !45
  %324 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !45
  %bc43 = bitcast <8 x float> %266 to <8 x i32>, !dbg !46
  %325 = extractelement <8 x i32> %bc43, i64 7, !dbg !46
  %bc44 = bitcast <8 x float> %266 to <8 x i32>, !dbg !46
  %326 = extractelement <8 x i32> %bc44, i64 6, !dbg !46
  %bc45 = bitcast <8 x float> %266 to <8 x i32>, !dbg !46
  %327 = extractelement <8 x i32> %bc45, i64 5, !dbg !46
  %bc46 = bitcast <8 x float> %266 to <8 x i32>, !dbg !46
  %328 = extractelement <8 x i32> %bc46, i64 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %325, i32 %326, i32 %327, i32 %328, ptr addrspace(1) %323, i1 true) #3, !dbg !46
  %bc47 = bitcast <8 x float> %266 to <8 x i32>, !dbg !46
  %329 = extractelement <8 x i32> %bc47, i64 3, !dbg !46
  %bc48 = bitcast <8 x float> %266 to <8 x i32>, !dbg !46
  %330 = extractelement <8 x i32> %bc48, i64 2, !dbg !46
  %bc49 = bitcast <8 x float> %266 to <8 x i32>, !dbg !46
  %331 = extractelement <8 x i32> %bc49, i64 1, !dbg !46
  %bc50 = bitcast <8 x float> %266 to <8 x i32>, !dbg !46
  %332 = extractelement <8 x i32> %bc50, i64 0, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %330, i32 %331, i32 %332, ptr addrspace(1) %324, i1 true) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfd5yabqqqpsetvkykqy5p53chgc7x3gsa4t5qugpfxvw3dhqoku.py", directory: "inductor_cache/fd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 27, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 48, column: 25, scope: !7)
!44 = !DILocation(line: 48, column: 37, scope: !7)
!45 = !DILocation(line: 49, column: 25, scope: !7)
!46 = !DILocation(line: 49, column: 36, scope: !7)
!47 = !DILocation(line: 49, column: 4, scope: !7)
