; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = icmp slt i32 %13, 139392, !dbg !14
  %18 = icmp slt i32 %15, 139392, !dbg !14
  %19 = icmp slt i32 %16, 139392, !dbg !14
  %20 = srem i32 %13, 32, !dbg !15
  %21 = srem i32 %14, 32, !dbg !15
  %22 = sdiv i32 %13, 34848, !dbg !16
  %23 = shl i32 %22, 17, !dbg !17
  %24 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !18
  %25 = shufflevector <2 x i32> %24, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %26 = sdiv <2 x i32> %25, <i32 1056, i32 32>, !dbg !18
  %27 = srem <2 x i32> %26, splat (i32 33), !dbg !19
  %28 = extractelement <2 x i32> %27, i64 0, !dbg !20
  %29 = icmp sgt i32 %28, 0, !dbg !21
  %30 = extractelement <2 x i32> %27, i64 1, !dbg !22
  %31 = icmp sgt i32 %30, 0, !dbg !22
  %32 = and i1 %29, %31, !dbg !22
  %33 = extractelement <2 x i32> %27, i64 1, !dbg !20
  %34 = shl nsw i32 %33, 6, !dbg !23
  %35 = shl nsw i32 %28, 12, !dbg !24
  %36 = add i32 %34, %23, !dbg !25
  %37 = add i32 %36, -2080, !dbg !26
  %38 = add nsw i32 %37, %20, !dbg !27
  %39 = add i32 %38, %35, !dbg !28
  %40 = add nsw i32 %37, %21, !dbg !27
  %41 = add i32 %40, %35, !dbg !28
  %42 = sext i32 %39 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !29
  %44 = sext i32 %41 to i64, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !29
  %46 = and i1 %17, %32, !dbg !30
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46) #2, !dbg !31
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !31
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !31
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !31
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !31
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46, i32 -8388608, i1 %46) #2, !dbg !31
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !31
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !31
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !31
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !31
  %57 = icmp ult i32 %33, 32, !dbg !32
  %58 = and i1 %29, %57, !dbg !33
  %59 = add i32 %36, -2048, !dbg !34
  %60 = add i32 %59, %20, !dbg !35
  %61 = add i32 %60, %35, !dbg !36
  %62 = add i32 %59, %21, !dbg !35
  %63 = add i32 %62, %35, !dbg !36
  %64 = sext i32 %61 to i64, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !37
  %66 = sext i32 %63 to i64, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !37
  %68 = and i1 %17, %58, !dbg !38
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68) #2, !dbg !39
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !39
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !39
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !39
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !39
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68) #2, !dbg !39
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !39
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !39
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !39
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !39
  %79 = extractelement <2 x i32> %27, i64 0, !dbg !40
  %80 = icmp ult i32 %79, 32, !dbg !40
  %81 = and i1 %80, %31, !dbg !40
  %82 = add i32 %36, -32, !dbg !41
  %83 = add nsw i32 %82, %20, !dbg !42
  %84 = add i32 %83, %35, !dbg !43
  %85 = add nsw i32 %82, %21, !dbg !42
  %86 = add i32 %85, %35, !dbg !43
  %87 = sext i32 %84 to i64, !dbg !44
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !44
  %89 = sext i32 %86 to i64, !dbg !44
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !44
  %91 = and i1 %17, %81, !dbg !45
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91) #2, !dbg !46
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !46
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !46
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !46
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !46
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91) #2, !dbg !46
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !46
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !46
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !46
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !46
  %102 = or i32 %28, %33, !dbg !20
  %103 = icmp ult i32 %102, 32, !dbg !20
  %104 = add i32 %36, %20, !dbg !47
  %105 = add i32 %104, %35, !dbg !48
  %106 = add i32 %36, %21, !dbg !47
  %107 = add i32 %106, %35, !dbg !48
  %108 = sext i32 %105 to i64, !dbg !49
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !49
  %110 = sext i32 %107 to i64, !dbg !49
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !49
  %112 = and i1 %17, %103, !dbg !50
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112) #2, !dbg !51
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !51
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !51
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !51
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !51
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112) #2, !dbg !51
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !51
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !51
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !51
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !51
  %123 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !31
  %124 = insertelement <4 x i32> %123, i32 %49, i64 1, !dbg !31
  %125 = insertelement <4 x i32> %124, i32 %50, i64 2, !dbg !31
  %126 = insertelement <4 x i32> %125, i32 %51, i64 3, !dbg !31
  %127 = bitcast <4 x i32> %126 to <4 x float>, !dbg !31
  %128 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !39
  %129 = insertelement <4 x i32> %128, i32 %71, i64 1, !dbg !39
  %130 = insertelement <4 x i32> %129, i32 %72, i64 2, !dbg !39
  %131 = insertelement <4 x i32> %130, i32 %73, i64 3, !dbg !39
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !39
  %133 = fcmp ogt <4 x float> %132, %127, !dbg !52
  %134 = fcmp uno <4 x float> %132, zeroinitializer, !dbg !56
  %135 = or <4 x i1> %133, %134, !dbg !57
  %.v = select <4 x i1> %135, <4 x i32> %131, <4 x i32> %126, !dbg !58
  %136 = bitcast <4 x i32> %.v to <4 x float>, !dbg !58
  %137 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !46
  %138 = insertelement <4 x i32> %137, i32 %94, i64 1, !dbg !46
  %139 = insertelement <4 x i32> %138, i32 %95, i64 2, !dbg !46
  %140 = insertelement <4 x i32> %139, i32 %96, i64 3, !dbg !46
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !46
  %142 = fcmp olt <4 x float> %136, %141, !dbg !59
  %143 = fcmp uno <4 x float> %141, zeroinitializer, !dbg !61
  %144 = or <4 x i1> %143, %142, !dbg !62
  %.v15 = select <4 x i1> %144, <4 x i32> %140, <4 x i32> %.v, !dbg !63
  %145 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !63
  %146 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !51
  %147 = insertelement <4 x i32> %146, i32 %115, i64 1, !dbg !51
  %148 = insertelement <4 x i32> %147, i32 %116, i64 2, !dbg !51
  %149 = insertelement <4 x i32> %148, i32 %117, i64 3, !dbg !51
  %150 = bitcast <4 x i32> %149 to <4 x float>, !dbg !51
  %151 = fcmp olt <4 x float> %145, %150, !dbg !64
  %152 = extractelement <4 x i1> %151, i64 0, !dbg !66
  %153 = extractelement <4 x i1> %151, i64 1, !dbg !66
  %154 = extractelement <4 x i1> %151, i64 2, !dbg !66
  %155 = extractelement <4 x i1> %151, i64 3, !dbg !66
  %156 = zext <4 x i1> %133 to <4 x i8>, !dbg !67
  %157 = select <4 x i1> %142, <4 x i8> splat (i8 2), <4 x i8> %156, !dbg !68
  %158 = select <4 x i1> %151, <4 x i8> splat (i8 3), <4 x i8> %157, !dbg !69
  %159 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !31
  %160 = insertelement <4 x i32> %159, i32 %54, i64 1, !dbg !31
  %161 = insertelement <4 x i32> %160, i32 %55, i64 2, !dbg !31
  %162 = insertelement <4 x i32> %161, i32 %56, i64 3, !dbg !31
  %163 = bitcast <4 x i32> %162 to <4 x float>, !dbg !31
  %164 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !39
  %165 = insertelement <4 x i32> %164, i32 %76, i64 1, !dbg !39
  %166 = insertelement <4 x i32> %165, i32 %77, i64 2, !dbg !39
  %167 = insertelement <4 x i32> %166, i32 %78, i64 3, !dbg !39
  %168 = bitcast <4 x i32> %167 to <4 x float>, !dbg !39
  %169 = fcmp ogt <4 x float> %168, %163, !dbg !52
  %170 = fcmp uno <4 x float> %168, zeroinitializer, !dbg !56
  %171 = or <4 x i1> %169, %170, !dbg !57
  %.v16 = select <4 x i1> %171, <4 x i32> %167, <4 x i32> %162, !dbg !58
  %172 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !58
  %173 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !46
  %174 = insertelement <4 x i32> %173, i32 %99, i64 1, !dbg !46
  %175 = insertelement <4 x i32> %174, i32 %100, i64 2, !dbg !46
  %176 = insertelement <4 x i32> %175, i32 %101, i64 3, !dbg !46
  %177 = bitcast <4 x i32> %176 to <4 x float>, !dbg !46
  %178 = fcmp olt <4 x float> %172, %177, !dbg !59
  %179 = fcmp uno <4 x float> %177, zeroinitializer, !dbg !61
  %180 = or <4 x i1> %179, %178, !dbg !62
  %.v17 = select <4 x i1> %180, <4 x i32> %176, <4 x i32> %.v16, !dbg !63
  %181 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !63
  %182 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !51
  %183 = insertelement <4 x i32> %182, i32 %120, i64 1, !dbg !51
  %184 = insertelement <4 x i32> %183, i32 %121, i64 2, !dbg !51
  %185 = insertelement <4 x i32> %184, i32 %122, i64 3, !dbg !51
  %186 = bitcast <4 x i32> %185 to <4 x float>, !dbg !51
  %187 = fcmp olt <4 x float> %181, %186, !dbg !64
  %188 = shufflevector <4 x float> %186, <4 x float> %150, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !70
  %189 = fcmp uno <8 x float> %188, zeroinitializer, !dbg !70
  %190 = extractelement <8 x i1> %189, i64 7, !dbg !66
  %191 = or i1 %190, %152, !dbg !66
  %192 = extractelement <8 x i1> %189, i64 6, !dbg !66
  %193 = or i1 %192, %153, !dbg !66
  %194 = extractelement <8 x i1> %189, i64 5, !dbg !66
  %195 = or i1 %194, %154, !dbg !66
  %196 = extractelement <8 x i1> %189, i64 4, !dbg !66
  %197 = or i1 %196, %155, !dbg !66
  %198 = extractelement <4 x i1> %187, i64 0, !dbg !66
  %199 = extractelement <8 x i1> %189, i64 3, !dbg !66
  %200 = or i1 %199, %198, !dbg !66
  %201 = extractelement <4 x i1> %187, i64 1, !dbg !66
  %202 = extractelement <8 x i1> %189, i64 2, !dbg !66
  %203 = or i1 %202, %201, !dbg !66
  %204 = extractelement <4 x i1> %187, i64 2, !dbg !66
  %205 = extractelement <8 x i1> %189, i64 1, !dbg !66
  %206 = or i1 %205, %204, !dbg !66
  %207 = extractelement <4 x i1> %187, i64 3, !dbg !66
  %208 = extractelement <8 x i1> %189, i64 0, !dbg !66
  %209 = or i1 %208, %207, !dbg !66
  %210 = zext <4 x i1> %169 to <4 x i8>, !dbg !67
  %211 = select <4 x i1> %178, <4 x i8> splat (i8 2), <4 x i8> %210, !dbg !68
  %212 = select <4 x i1> %187, <4 x i8> splat (i8 3), <4 x i8> %211, !dbg !69
  %213 = sext i32 %15 to i64, !dbg !71
  %214 = getelementptr float, ptr addrspace(1) %1, i64 %213, !dbg !71
  %215 = sext i32 %16 to i64, !dbg !71
  %216 = getelementptr float, ptr addrspace(1) %1, i64 %215, !dbg !71
  %217 = zext nneg i32 %9 to i64, !dbg !72
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %217, !dbg !72
  %219 = extractelement <4 x i32> %.v15, i64 0, !dbg !72
  %220 = select i1 %191, i32 %114, i32 %219, !dbg !73
  %221 = extractelement <4 x i32> %.v15, i64 1, !dbg !72
  %222 = select i1 %193, i32 %115, i32 %221, !dbg !73
  %223 = extractelement <4 x i32> %.v15, i64 2, !dbg !72
  %224 = select i1 %195, i32 %116, i32 %223, !dbg !73
  %225 = extractelement <4 x i32> %.v15, i64 3, !dbg !72
  %226 = select i1 %197, i32 %117, i32 %225, !dbg !73
  %227 = extractelement <4 x i32> %.v17, i64 0, !dbg !72
  %228 = select i1 %200, i32 %119, i32 %227, !dbg !73
  %229 = extractelement <4 x i32> %.v17, i64 1, !dbg !72
  %230 = select i1 %203, i32 %120, i32 %229, !dbg !73
  %231 = extractelement <4 x i32> %.v17, i64 2, !dbg !72
  %232 = select i1 %206, i32 %121, i32 %231, !dbg !73
  %233 = extractelement <4 x i32> %.v17, i64 3, !dbg !72
  %234 = select i1 %209, i32 %122, i32 %233, !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %218, i32 %220, i32 %222, i32 %224, i32 %226, i1 true) #2, !dbg !72
  %235 = getelementptr inbounds i8, ptr addrspace(3) %218, i64 16, !dbg !72
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %235, i32 %228, i32 %230, i32 %232, i32 %234, i1 true) #2, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %236 = zext nneg i32 %11 to i64, !dbg !72
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %236, !dbg !72
  %238 = zext nneg i32 %12 to i64, !dbg !72
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %238, !dbg !72
  %240 = load <4 x i32>, ptr addrspace(3) %239, align 16, !dbg !72
  %.extract = load i32, ptr addrspace(3) %237, align 16, !dbg !72
  %241 = getelementptr inbounds i8, ptr addrspace(3) %237, i64 4, !dbg !72
  %.extract8 = load i32, ptr addrspace(3) %241, align 4, !dbg !72
  %242 = getelementptr inbounds i8, ptr addrspace(3) %237, i64 8, !dbg !72
  %.extract9 = load i32, ptr addrspace(3) %242, align 8, !dbg !72
  %243 = getelementptr inbounds i8, ptr addrspace(3) %237, i64 12, !dbg !72
  %.extract10 = load i32, ptr addrspace(3) %243, align 4, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %214, i1 %18) #2, !dbg !72
  %.extract11 = extractelement <4 x i32> %240, i64 0, !dbg !72
  %.extract12 = extractelement <4 x i32> %240, i64 1, !dbg !72
  %.extract13 = extractelement <4 x i32> %240, i64 2, !dbg !72
  %.extract14 = extractelement <4 x i32> %240, i64 3, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %216, i1 %19) #2, !dbg !72
  %244 = sext i32 %13 to i64, !dbg !74
  %245 = getelementptr i8, ptr addrspace(1) %2, i64 %244, !dbg !74
  %246 = bitcast <4 x i8> %158 to i32, !dbg !75
  %247 = bitcast <4 x i8> %212 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %246, i32 %247, ptr addrspace(1) %245, i1 %17) #2, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cihvo7z2n4srl7imj5vnoxbrimhuohwsur5px2jm4tvpi73oh32d.py", directory: "inductor_cache/ih")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_7", linkageName: "triton_poi_fused_max_pool2d_with_indices_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 40, column: 71, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 24, column: 29, scope: !7)
!20 = !DILocation(line: 55, column: 20, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 39, column: 19, scope: !7)
!23 = !DILocation(line: 40, column: 49, scope: !7)
!24 = !DILocation(line: 40, column: 59, scope: !7)
!25 = !DILocation(line: 40, column: 41, scope: !7)
!26 = !DILocation(line: 40, column: 46, scope: !7)
!27 = !DILocation(line: 40, column: 54, scope: !7)
!28 = !DILocation(line: 40, column: 64, scope: !7)
!29 = !DILocation(line: 40, column: 31, scope: !7)
!30 = !DILocation(line: 40, column: 84, scope: !7)
!31 = !DILocation(line: 40, column: 76, scope: !7)
!32 = !DILocation(line: 44, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 46, scope: !7)
!35 = !DILocation(line: 46, column: 54, scope: !7)
!36 = !DILocation(line: 46, column: 64, scope: !7)
!37 = !DILocation(line: 46, column: 31, scope: !7)
!38 = !DILocation(line: 46, column: 84, scope: !7)
!39 = !DILocation(line: 46, column: 76, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 44, scope: !7)
!42 = !DILocation(line: 53, column: 52, scope: !7)
!43 = !DILocation(line: 53, column: 62, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 82, scope: !7)
!46 = !DILocation(line: 53, column: 74, scope: !7)
!47 = !DILocation(line: 56, column: 44, scope: !7)
!48 = !DILocation(line: 56, column: 54, scope: !7)
!49 = !DILocation(line: 56, column: 31, scope: !7)
!50 = !DILocation(line: 56, column: 74, scope: !7)
!51 = !DILocation(line: 56, column: 66, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 47, column: 42, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!59 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !60)
!60 = !DILocation(line: 54, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !60)
!62 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !60)
!63 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !60)
!64 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !65)
!65 = !DILocation(line: 57, column: 42, scope: !7)
!66 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !65)
!67 = !DILocation(line: 61, column: 35, scope: !7)
!68 = !DILocation(line: 64, column: 35, scope: !7)
!69 = !DILocation(line: 67, column: 35, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !65)
!71 = !DILocation(line: 68, column: 25, scope: !7)
!72 = !DILocation(line: 68, column: 37, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !65)
!74 = !DILocation(line: 69, column: 25, scope: !7)
!75 = !DILocation(line: 69, column: 37, scope: !7)
!76 = !DILocation(line: 69, column: 4, scope: !7)
