; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/r4/cr46mgb5sukaj5km7t2sax6dh46atnububwvbrafdmdrgwru4zxx.py\00"
@assertMessage_1 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp9 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/r4/cr46mgb5sukaj5km7t2sax6dh46atnububwvbrafdmdrgwru4zxx.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_gather_linalg_vector_norm_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 6, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 1, !dbg !14
  %12 = and i32 %11, 62, !dbg !14
  %13 = or disjoint i32 %9, %12, !dbg !15
  %14 = icmp slt i32 %13, 64, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %15 = sdiv i32 %.frozen, 4, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr i64, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %14) #3, !dbg !19
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %17, i1 %14) #3, !dbg !19
  %20 = lshr i64 %18, 61, !dbg !20
  %21 = and i64 %20, 4, !dbg !20
  %22 = add i64 %21, %18, !dbg !20
  %23 = icmp ugt i64 %22, 3, !dbg !21
  %.not1 = and i1 %14, %23, !dbg !22
  br i1 %.not1, label %24, label %25, !dbg !22

24:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 33, ptr nonnull @assertFunc_0, i64 1), !dbg !22
  unreachable, !dbg !22

25:                                               ; preds = %7
  %26 = sdiv i32 %13, 16, !dbg !23
  %27 = mul i32 %15, 4, !dbg !24
  %.decomposed = sub i32 %.frozen, %27, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %28 = shl i64 %22, 2, !dbg !25
  %29 = sext i32 %.decomposed to i64, !dbg !26
  %30 = shl nsw i32 %26, 4, !dbg !27
  %31 = sext i32 %30 to i64, !dbg !28
  %32 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !29
  %33 = getelementptr i64, ptr addrspace(1) %32, i64 %29, !dbg !29
  %34 = getelementptr i64, ptr addrspace(1) %33, i64 %31, !dbg !29
  %35 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %34, i1 %14) #3, !dbg !30
  %36 = extractvalue { i64, i64 } %35, 0, !dbg !30
  %37 = extractvalue { i64, i64 } %35, 1, !dbg !30
  %38 = insertelement <2 x i64> poison, i64 %36, i64 0, !dbg !31
  %39 = insertelement <2 x i64> %38, i64 %37, i64 1, !dbg !31
  %40 = lshr <2 x i64> %39, splat (i64 61), !dbg !31
  %41 = and <2 x i64> %40, splat (i64 4), !dbg !31
  %42 = add <2 x i64> %41, %39, !dbg !31
  %43 = extractelement <2 x i64> %42, i64 0, !dbg !32
  %44 = extractelement <2 x i64> %42, i64 1, !dbg !32
  %45 = or i64 %43, %44, !dbg !32
  %.not24 = icmp ugt i64 %45, 3, !dbg !32
  %46 = and i1 %14, %.not24, !dbg !32
  br i1 %46, label %47, label %48, !dbg !32

47:                                               ; preds = %25
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 38, ptr nonnull @assertFunc_1, i64 1), !dbg !32
  unreachable, !dbg !32

48:                                               ; preds = %25
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %49 = add i64 %28, %31, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !34
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %14) #3, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %14) #3, !dbg !35
  %53 = shl i64 %43, 2, !dbg !36
  %54 = shl i64 %44, 2, !dbg !36
  %55 = add i64 %53, %31, !dbg !37
  %56 = add i64 %54, %31, !dbg !37
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !38
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !38
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %14) #3, !dbg !39
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %14) #3, !dbg !39
  %61 = or disjoint i64 %28, 1, !dbg !40
  %62 = add i64 %61, %31, !dbg !41
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !42
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %14) #3, !dbg !43
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %14) #3, !dbg !43
  %66 = or disjoint i64 %53, 1, !dbg !44
  %67 = or disjoint i64 %54, 1, !dbg !44
  %68 = add i64 %66, %31, !dbg !45
  %69 = add i64 %67, %31, !dbg !45
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !46
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !46
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %14) #3, !dbg !47
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %14) #3, !dbg !47
  %74 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !35
  %75 = insertelement <2 x i32> %74, i32 %64, i64 1, !dbg !35
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !35
  %77 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !39
  %78 = insertelement <2 x i32> %77, i32 %72, i64 1, !dbg !39
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !39
  %80 = fsub <2 x float> %76, %79, !dbg !48
  %81 = fmul <2 x float> %80, %80, !dbg !49
  %82 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !35
  %83 = insertelement <2 x i32> %82, i32 %65, i64 1, !dbg !35
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !35
  %85 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !39
  %86 = insertelement <2 x i32> %85, i32 %73, i64 1, !dbg !39
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !39
  %88 = fsub <2 x float> %84, %87, !dbg !48
  %89 = fmul <2 x float> %88, %88, !dbg !49
  %shift = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %90 = fadd <2 x float> %81, %shift, !dbg !50
  %shift5 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %91 = fadd <2 x float> %89, %shift5, !dbg !50
  %92 = or disjoint i64 %28, 2, !dbg !51
  %93 = add i64 %92, %31, !dbg !52
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !53
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %14) #3, !dbg !54
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %14) #3, !dbg !54
  %97 = or disjoint i64 %53, 2, !dbg !55
  %98 = or disjoint i64 %54, 2, !dbg !55
  %99 = add i64 %97, %31, !dbg !56
  %100 = add i64 %98, %31, !dbg !56
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !57
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !57
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %14) #3, !dbg !58
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %14) #3, !dbg !58
  %105 = or disjoint i64 %28, 3, !dbg !59
  %106 = add i64 %105, %31, !dbg !60
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !61
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %14) #3, !dbg !62
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %14) #3, !dbg !62
  %110 = or disjoint i64 %53, 3, !dbg !63
  %111 = or disjoint i64 %54, 3, !dbg !63
  %112 = add i64 %110, %31, !dbg !64
  %113 = add i64 %111, %31, !dbg !64
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !65
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !65
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %14) #3, !dbg !66
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %14) #3, !dbg !66
  %118 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !54
  %119 = insertelement <2 x i32> %118, i32 %108, i64 1, !dbg !54
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !54
  %121 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !58
  %122 = insertelement <2 x i32> %121, i32 %116, i64 1, !dbg !58
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !58
  %124 = fsub <2 x float> %120, %123, !dbg !67
  %125 = fmul <2 x float> %124, %124, !dbg !68
  %126 = fadd <2 x float> %90, %125, !dbg !69
  %127 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !54
  %128 = insertelement <2 x i32> %127, i32 %109, i64 1, !dbg !54
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !54
  %130 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !58
  %131 = insertelement <2 x i32> %130, i32 %117, i64 1, !dbg !58
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !58
  %133 = fsub <2 x float> %129, %132, !dbg !67
  %134 = fmul <2 x float> %133, %133, !dbg !68
  %135 = fadd <2 x float> %91, %134, !dbg !69
  %shift6 = shufflevector <2 x float> %125, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !70
  %136 = fadd <2 x float> %126, %shift6, !dbg !70
  %shift7 = shufflevector <2 x float> %134, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !70
  %137 = fadd <2 x float> %135, %shift7, !dbg !70
  %138 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !71
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %14) #3, !dbg !72
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %14) #3, !dbg !72
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !73
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !73
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %14) #3, !dbg !74
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %14) #3, !dbg !74
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !75
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %14) #3, !dbg !76
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %14) #3, !dbg !76
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !77
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !77
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %14) #3, !dbg !78
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %14) #3, !dbg !78
  %152 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !72
  %153 = insertelement <2 x i32> %152, i32 %146, i64 1, !dbg !72
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !72
  %155 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !74
  %156 = insertelement <2 x i32> %155, i32 %150, i64 1, !dbg !74
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !74
  %158 = fsub <2 x float> %154, %157, !dbg !79
  %159 = fmul <2 x float> %158, %158, !dbg !80
  %160 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !72
  %161 = insertelement <2 x i32> %160, i32 %147, i64 1, !dbg !72
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !72
  %163 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !74
  %164 = insertelement <2 x i32> %163, i32 %151, i64 1, !dbg !74
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !74
  %166 = fsub <2 x float> %162, %165, !dbg !79
  %167 = fmul <2 x float> %166, %166, !dbg !80
  %shift8 = shufflevector <2 x float> %159, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !81
  %168 = fadd <2 x float> %159, %shift8, !dbg !81
  %shift9 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !81
  %169 = fadd <2 x float> %167, %shift9, !dbg !81
  %170 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !82
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %14) #3, !dbg !83
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %14) #3, !dbg !83
  %173 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !84
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !84
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %14) #3, !dbg !85
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %14) #3, !dbg !85
  %177 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !86
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %14) #3, !dbg !87
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %14) #3, !dbg !87
  %180 = getelementptr float, ptr addrspace(1) %3, i64 %112, !dbg !88
  %181 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !88
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %14) #3, !dbg !89
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %14) #3, !dbg !89
  %184 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !83
  %185 = insertelement <2 x i32> %184, i32 %178, i64 1, !dbg !83
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !83
  %187 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !85
  %188 = insertelement <2 x i32> %187, i32 %182, i64 1, !dbg !85
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !85
  %190 = fsub <2 x float> %186, %189, !dbg !90
  %191 = fmul <2 x float> %190, %190, !dbg !91
  %192 = fadd <2 x float> %168, %191, !dbg !92
  %193 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !83
  %194 = insertelement <2 x i32> %193, i32 %179, i64 1, !dbg !83
  %195 = bitcast <2 x i32> %194 to <2 x float>, !dbg !83
  %196 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !85
  %197 = insertelement <2 x i32> %196, i32 %183, i64 1, !dbg !85
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !85
  %199 = fsub <2 x float> %195, %198, !dbg !90
  %200 = fmul <2 x float> %199, %199, !dbg !91
  %201 = fadd <2 x float> %169, %200, !dbg !92
  %shift10 = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !93
  %202 = fadd <2 x float> %192, %shift10, !dbg !93
  %shift11 = shufflevector <2 x float> %200, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !93
  %203 = fadd <2 x float> %201, %shift11, !dbg !93
  %204 = sext i32 %13 to i64, !dbg !94
  %205 = getelementptr float, ptr addrspace(1) %4, i64 %204, !dbg !94
  %bc = bitcast <2 x float> %136 to <2 x i32>, !dbg !95
  %206 = extractelement <2 x i32> %bc, i64 0, !dbg !95
  %bc12 = bitcast <2 x float> %137 to <2 x i32>, !dbg !95
  %207 = extractelement <2 x i32> %bc12, i64 0, !dbg !95
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %206, i32 %207, ptr addrspace(1) %205, i1 %14) #3, !dbg !95
  %208 = getelementptr float, ptr addrspace(1) %5, i64 %204, !dbg !96
  %bc13 = bitcast <2 x float> %202 to <2 x i32>, !dbg !97
  %209 = extractelement <2 x i32> %bc13, i64 0, !dbg !97
  %bc14 = bitcast <2 x float> %203 to <2 x i32>, !dbg !97
  %210 = extractelement <2 x i32> %bc14, i64 0, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %209, i32 %210, ptr addrspace(1) %208, i1 %14) #3, !dbg !97
  ret void, !dbg !98
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr46mgb5sukaj5km7t2sax6dh46atnububwvbrafdmdrgwru4zxx.py", directory: "inductor_cache/r4")
!4 = !{ptr @triton_poi_fused_gather_linalg_vector_norm_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_gather_linalg_vector_norm_sub_7, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_gather_linalg_vector_norm_sub_7", linkageName: "triton_poi_fused_gather_linalg_vector_norm_sub_7", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 24, column: 19, scope: !11)
!18 = !DILocation(line: 28, column: 30, scope: !11)
!19 = !DILocation(line: 28, column: 35, scope: !11)
!20 = !DILocation(line: 32, column: 32, scope: !11)
!21 = !DILocation(line: 33, column: 37, scope: !11)
!22 = !DILocation(line: 33, column: 60, scope: !11)
!23 = !DILocation(line: 26, column: 19, scope: !11)
!24 = !DILocation(line: 25, column: 19, scope: !11)
!25 = !DILocation(line: 34, column: 37, scope: !11)
!26 = !DILocation(line: 34, column: 35, scope: !11)
!27 = !DILocation(line: 34, column: 47, scope: !11)
!28 = !DILocation(line: 34, column: 44, scope: !11)
!29 = !DILocation(line: 34, column: 30, scope: !11)
!30 = !DILocation(line: 34, column: 52, scope: !11)
!31 = !DILocation(line: 37, column: 32, scope: !11)
!32 = !DILocation(line: 38, column: 60, scope: !11)
!33 = !DILocation(line: 39, column: 40, scope: !11)
!34 = !DILocation(line: 39, column: 31, scope: !11)
!35 = !DILocation(line: 39, column: 48, scope: !11)
!36 = !DILocation(line: 40, column: 33, scope: !11)
!37 = !DILocation(line: 40, column: 40, scope: !11)
!38 = !DILocation(line: 40, column: 31, scope: !11)
!39 = !DILocation(line: 40, column: 48, scope: !11)
!40 = !DILocation(line: 43, column: 35, scope: !11)
!41 = !DILocation(line: 43, column: 44, scope: !11)
!42 = !DILocation(line: 43, column: 31, scope: !11)
!43 = !DILocation(line: 43, column: 52, scope: !11)
!44 = !DILocation(line: 44, column: 35, scope: !11)
!45 = !DILocation(line: 44, column: 44, scope: !11)
!46 = !DILocation(line: 44, column: 31, scope: !11)
!47 = !DILocation(line: 44, column: 52, scope: !11)
!48 = !DILocation(line: 41, column: 20, scope: !11)
!49 = !DILocation(line: 42, column: 20, scope: !11)
!50 = !DILocation(line: 47, column: 20, scope: !11)
!51 = !DILocation(line: 48, column: 35, scope: !11)
!52 = !DILocation(line: 48, column: 44, scope: !11)
!53 = !DILocation(line: 48, column: 31, scope: !11)
!54 = !DILocation(line: 48, column: 52, scope: !11)
!55 = !DILocation(line: 49, column: 35, scope: !11)
!56 = !DILocation(line: 49, column: 44, scope: !11)
!57 = !DILocation(line: 49, column: 31, scope: !11)
!58 = !DILocation(line: 49, column: 52, scope: !11)
!59 = !DILocation(line: 53, column: 35, scope: !11)
!60 = !DILocation(line: 53, column: 44, scope: !11)
!61 = !DILocation(line: 53, column: 31, scope: !11)
!62 = !DILocation(line: 53, column: 52, scope: !11)
!63 = !DILocation(line: 54, column: 35, scope: !11)
!64 = !DILocation(line: 54, column: 44, scope: !11)
!65 = !DILocation(line: 54, column: 31, scope: !11)
!66 = !DILocation(line: 54, column: 52, scope: !11)
!67 = !DILocation(line: 50, column: 20, scope: !11)
!68 = !DILocation(line: 51, column: 20, scope: !11)
!69 = !DILocation(line: 52, column: 20, scope: !11)
!70 = !DILocation(line: 57, column: 20, scope: !11)
!71 = !DILocation(line: 58, column: 31, scope: !11)
!72 = !DILocation(line: 58, column: 48, scope: !11)
!73 = !DILocation(line: 59, column: 31, scope: !11)
!74 = !DILocation(line: 59, column: 48, scope: !11)
!75 = !DILocation(line: 62, column: 31, scope: !11)
!76 = !DILocation(line: 62, column: 52, scope: !11)
!77 = !DILocation(line: 63, column: 31, scope: !11)
!78 = !DILocation(line: 63, column: 52, scope: !11)
!79 = !DILocation(line: 60, column: 20, scope: !11)
!80 = !DILocation(line: 61, column: 20, scope: !11)
!81 = !DILocation(line: 66, column: 20, scope: !11)
!82 = !DILocation(line: 67, column: 31, scope: !11)
!83 = !DILocation(line: 67, column: 52, scope: !11)
!84 = !DILocation(line: 68, column: 31, scope: !11)
!85 = !DILocation(line: 68, column: 52, scope: !11)
!86 = !DILocation(line: 72, column: 31, scope: !11)
!87 = !DILocation(line: 72, column: 52, scope: !11)
!88 = !DILocation(line: 73, column: 31, scope: !11)
!89 = !DILocation(line: 73, column: 52, scope: !11)
!90 = !DILocation(line: 69, column: 20, scope: !11)
!91 = !DILocation(line: 70, column: 20, scope: !11)
!92 = !DILocation(line: 71, column: 20, scope: !11)
!93 = !DILocation(line: 76, column: 20, scope: !11)
!94 = !DILocation(line: 77, column: 25, scope: !11)
!95 = !DILocation(line: 77, column: 37, scope: !11)
!96 = !DILocation(line: 78, column: 25, scope: !11)
!97 = !DILocation(line: 78, column: 37, scope: !11)
!98 = !DILocation(line: 78, column: 4, scope: !11)
