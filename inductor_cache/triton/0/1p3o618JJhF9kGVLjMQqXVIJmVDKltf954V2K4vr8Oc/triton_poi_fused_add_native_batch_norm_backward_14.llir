; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_native_batch_norm_backward_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = srem i32 %16, 32, !dbg !14
  %19 = sext i32 %16 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !15
  %21 = sext i32 %17 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %28 = bitcast i32 %24 to float, !dbg !16
  %29 = bitcast i32 %25 to float, !dbg !16
  %30 = bitcast i32 %26 to float, !dbg !16
  %31 = bitcast i32 %27 to float, !dbg !16
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !16
  %37 = bitcast i32 %33 to float, !dbg !16
  %38 = bitcast i32 %34 to float, !dbg !16
  %39 = bitcast i32 %35 to float, !dbg !16
  %40 = bitcast i32 %36 to float, !dbg !16
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !17
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !17
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !18
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !18
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !18
  %48 = bitcast i32 %44 to float, !dbg !18
  %49 = bitcast i32 %45 to float, !dbg !18
  %50 = bitcast i32 %46 to float, !dbg !18
  %51 = bitcast i32 %47 to float, !dbg !18
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !18
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !18
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !18
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !18
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !18
  %57 = bitcast i32 %53 to float, !dbg !18
  %58 = bitcast i32 %54 to float, !dbg !18
  %59 = bitcast i32 %55 to float, !dbg !18
  %60 = bitcast i32 %56 to float, !dbg !18
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !19
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !20
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !20
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !20
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !20
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !20
  %68 = bitcast i32 %64 to float, !dbg !20
  %69 = bitcast i32 %65 to float, !dbg !20
  %70 = bitcast i32 %66 to float, !dbg !20
  %71 = bitcast i32 %67 to float, !dbg !20
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !20
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !20
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !20
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !20
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !20
  %77 = bitcast i32 %73 to float, !dbg !20
  %78 = bitcast i32 %74 to float, !dbg !20
  %79 = bitcast i32 %75 to float, !dbg !20
  %80 = bitcast i32 %76 to float, !dbg !20
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !21
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !21
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !22
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !22
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !22
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !22
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !22
  %88 = bitcast i32 %84 to float, !dbg !22
  %89 = bitcast i32 %85 to float, !dbg !22
  %90 = bitcast i32 %86 to float, !dbg !22
  %91 = bitcast i32 %87 to float, !dbg !22
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !22
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !22
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !22
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !22
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !22
  %97 = bitcast i32 %93 to float, !dbg !22
  %98 = bitcast i32 %94 to float, !dbg !22
  %99 = bitcast i32 %95 to float, !dbg !22
  %100 = bitcast i32 %96 to float, !dbg !22
  %101 = sext i32 %18 to i64, !dbg !23
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !23
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !24
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !24
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !24
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !24
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !24
  %108 = bitcast i32 %104 to float, !dbg !24
  %109 = bitcast i32 %105 to float, !dbg !24
  %110 = bitcast i32 %106 to float, !dbg !24
  %111 = bitcast i32 %107 to float, !dbg !24
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !24
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !24
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !24
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !24
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !24
  %117 = bitcast i32 %113 to float, !dbg !24
  %118 = bitcast i32 %114 to float, !dbg !24
  %119 = bitcast i32 %115 to float, !dbg !24
  %120 = bitcast i32 %116 to float, !dbg !24
  %121 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !25
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 true) #1, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !26
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !26
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !26
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !26
  %127 = bitcast i32 %123 to float, !dbg !26
  %128 = bitcast i32 %124 to float, !dbg !26
  %129 = bitcast i32 %125 to float, !dbg !26
  %130 = bitcast i32 %126 to float, !dbg !26
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 true) #1, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !26
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !26
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !26
  %136 = bitcast i32 %132 to float, !dbg !26
  %137 = bitcast i32 %133 to float, !dbg !26
  %138 = bitcast i32 %134 to float, !dbg !26
  %139 = bitcast i32 %135 to float, !dbg !26
  %140 = getelementptr float, ptr addrspace(1) %6, i64 %101, !dbg !27
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !28
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !28
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !28
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !28
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !28
  %146 = bitcast i32 %142 to float, !dbg !28
  %147 = bitcast i32 %143 to float, !dbg !28
  %148 = bitcast i32 %144 to float, !dbg !28
  %149 = bitcast i32 %145 to float, !dbg !28
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !28
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !28
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !28
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !28
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !28
  %155 = bitcast i32 %151 to float, !dbg !28
  %156 = bitcast i32 %152 to float, !dbg !28
  %157 = bitcast i32 %153 to float, !dbg !28
  %158 = bitcast i32 %154 to float, !dbg !28
  %159 = fadd float %28, %48, !dbg !29
  %160 = fadd float %29, %49, !dbg !29
  %161 = fadd float %30, %50, !dbg !29
  %162 = fadd float %31, %51, !dbg !29
  %163 = fadd float %37, %57, !dbg !29
  %164 = fadd float %38, %58, !dbg !29
  %165 = fadd float %39, %59, !dbg !29
  %166 = fadd float %40, %60, !dbg !29
  %167 = fadd float %159, %68, !dbg !30
  %168 = fadd float %160, %69, !dbg !30
  %169 = fadd float %161, %70, !dbg !30
  %170 = fadd float %162, %71, !dbg !30
  %171 = fadd float %163, %77, !dbg !30
  %172 = fadd float %164, %78, !dbg !30
  %173 = fadd float %165, %79, !dbg !30
  %174 = fadd float %166, %80, !dbg !30
  %175 = fadd float %167, %88, !dbg !31
  %176 = fadd float %168, %89, !dbg !31
  %177 = fadd float %169, %90, !dbg !31
  %178 = fadd float %170, %91, !dbg !31
  %179 = fadd float %171, %97, !dbg !31
  %180 = fadd float %172, %98, !dbg !31
  %181 = fadd float %173, %99, !dbg !31
  %182 = fadd float %174, %100, !dbg !31
  %183 = fsub float %175, %108, !dbg !32
  %184 = fsub float %176, %109, !dbg !32
  %185 = fsub float %177, %110, !dbg !32
  %186 = fsub float %178, %111, !dbg !32
  %187 = fsub float %179, %117, !dbg !32
  %188 = fsub float %180, %118, !dbg !32
  %189 = fsub float %181, %119, !dbg !32
  %190 = fsub float %182, %120, !dbg !32
  %191 = fsub float %167, %127, !dbg !33
  %192 = fsub float %168, %128, !dbg !33
  %193 = fsub float %169, %129, !dbg !33
  %194 = fsub float %170, %130, !dbg !33
  %195 = fsub float %171, %136, !dbg !33
  %196 = fsub float %172, %137, !dbg !33
  %197 = fsub float %173, %138, !dbg !33
  %198 = fsub float %174, %139, !dbg !33
  %199 = fsub float %159, %146, !dbg !34
  %200 = fsub float %160, %147, !dbg !34
  %201 = fsub float %161, %148, !dbg !34
  %202 = fsub float %162, %149, !dbg !34
  %203 = fsub float %163, %155, !dbg !34
  %204 = fsub float %164, %156, !dbg !34
  %205 = fsub float %165, %157, !dbg !34
  %206 = fsub float %166, %158, !dbg !34
  %207 = bitcast float %183 to i32, !dbg !35
  %208 = bitcast float %184 to i32, !dbg !35
  %209 = bitcast float %185 to i32, !dbg !35
  %210 = bitcast float %186 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %208, i32 %209, i32 %210, ptr addrspace(1) %81, i1 true) #1, !dbg !35
  %211 = bitcast float %187 to i32, !dbg !35
  %212 = bitcast float %188 to i32, !dbg !35
  %213 = bitcast float %189 to i32, !dbg !35
  %214 = bitcast float %190 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %211, i32 %212, i32 %213, i32 %214, ptr addrspace(1) %82, i1 true) #1, !dbg !35
  %215 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !36
  %216 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !36
  %217 = bitcast float %191 to i32, !dbg !37
  %218 = bitcast float %192 to i32, !dbg !37
  %219 = bitcast float %193 to i32, !dbg !37
  %220 = bitcast float %194 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %217, i32 %218, i32 %219, i32 %220, ptr addrspace(1) %215, i1 true) #1, !dbg !37
  %221 = bitcast float %195 to i32, !dbg !37
  %222 = bitcast float %196 to i32, !dbg !37
  %223 = bitcast float %197 to i32, !dbg !37
  %224 = bitcast float %198 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %221, i32 %222, i32 %223, i32 %224, ptr addrspace(1) %216, i1 true) #1, !dbg !37
  %225 = getelementptr float, ptr addrspace(1) %8, i64 %19, !dbg !38
  %226 = getelementptr float, ptr addrspace(1) %8, i64 %21, !dbg !38
  %227 = bitcast float %199 to i32, !dbg !39
  %228 = bitcast float %200 to i32, !dbg !39
  %229 = bitcast float %201 to i32, !dbg !39
  %230 = bitcast float %202 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %227, i32 %228, i32 %229, i32 %230, ptr addrspace(1) %225, i1 true) #1, !dbg !39
  %231 = bitcast float %203 to i32, !dbg !39
  %232 = bitcast float %204 to i32, !dbg !39
  %233 = bitcast float %205 to i32, !dbg !39
  %234 = bitcast float %206 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %231, i32 %232, i32 %233, i32 %234, ptr addrspace(1) %226, i1 true) #1, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv3dlno6lio2j4gwz6obyros52gjc74gythkp4lvshdjho7wk2td.py", directory: "inductor_cache/v3")
!4 = !{ptr @triton_poi_fused_add_native_batch_norm_backward_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_batch_norm_backward_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_batch_norm_backward_14", linkageName: "triton_poi_fused_add_native_batch_norm_backward_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 34, scope: !7)
!22 = !DILocation(line: 29, column: 39, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 19, scope: !7)
!34 = !DILocation(line: 38, column: 19, scope: !7)
!35 = !DILocation(line: 39, column: 39, scope: !7)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 37, scope: !7)
!38 = !DILocation(line: 41, column: 25, scope: !7)
!39 = !DILocation(line: 41, column: 37, scope: !7)
!40 = !DILocation(line: 41, column: 4, scope: !7)
