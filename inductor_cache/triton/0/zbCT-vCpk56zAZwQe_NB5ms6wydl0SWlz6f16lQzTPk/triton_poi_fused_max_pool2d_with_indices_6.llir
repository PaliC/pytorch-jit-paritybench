; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_6(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = or disjoint i32 %9, 8, !dbg !12
  %11 = shl i32 %7, 2, !dbg !12
  %12 = and i32 %11, 60, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %13, 16, !dbg !13
  %16 = or disjoint i32 %13, 24, !dbg !13
  %17 = or disjoint i32 %13, 32, !dbg !13
  %18 = or disjoint i32 %13, 40, !dbg !13
  %19 = or disjoint i32 %13, 48, !dbg !13
  %20 = or disjoint i32 %13, 56, !dbg !13
  %21 = or disjoint i32 %6, %12, !dbg !13
  %22 = icmp slt i32 %13, 768, !dbg !14
  %23 = icmp slt i32 %14, 768, !dbg !14
  %24 = icmp slt i32 %15, 768, !dbg !14
  %25 = icmp slt i32 %16, 768, !dbg !14
  %26 = icmp slt i32 %17, 768, !dbg !14
  %27 = icmp slt i32 %18, 768, !dbg !14
  %28 = icmp slt i32 %19, 768, !dbg !14
  %29 = icmp slt i32 %20, 768, !dbg !14
  %30 = icmp slt i32 %21, 768, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %32 = shl i32 %31, 4, !dbg !16
  %33 = and i32 %7, 15, !dbg !17
  %34 = or disjoint i32 %32, %33, !dbg !18
  %35 = or disjoint i32 %32, %9, !dbg !18
  %36 = or disjoint i32 %32, %10, !dbg !18
  %37 = icmp slt i32 %34, 9, !dbg !19
  %38 = icmp slt i32 %35, 9, !dbg !19
  %39 = icmp slt i32 %36, 9, !dbg !19
  %.frozen = freeze i32 %34, !dbg !20
  %40 = sdiv i32 %.frozen, 3, !dbg !20
  %41 = mul i32 %40, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %41, !dbg !21
  %.frozen16 = freeze i32 %21, !dbg !22
  %42 = sdiv i32 %.frozen16, 192, !dbg !22
  %43 = mul i32 %42, 192, !dbg !23
  %.decomposed17 = sub i32 %.frozen16, %43, !dbg !23
  %44 = shl nsw i32 %.decomposed, 1, !dbg !24
  %45 = mul i32 %40, 14, !dbg !25
  %46 = add i32 %44, %45, !dbg !26
  %47 = mul i32 %13, 49, !dbg !27
  %48 = mul i32 %14, 49, !dbg !27
  %49 = mul i32 %15, 49, !dbg !27
  %50 = mul i32 %16, 49, !dbg !27
  %51 = mul i32 %17, 49, !dbg !27
  %52 = mul i32 %18, 49, !dbg !27
  %53 = mul i32 %19, 49, !dbg !27
  %54 = mul i32 %20, 49, !dbg !27
  %55 = add i32 %46, %47, !dbg !28
  %56 = add i32 %46, %48, !dbg !28
  %57 = add i32 %46, %49, !dbg !28
  %58 = add i32 %46, %50, !dbg !28
  %59 = add i32 %46, %51, !dbg !28
  %60 = add i32 %46, %52, !dbg !28
  %61 = add i32 %46, %53, !dbg !28
  %62 = add i32 %46, %54, !dbg !28
  %63 = sext i32 %55 to i64, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !29
  %65 = sext i32 %56 to i64, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !29
  %67 = sext i32 %57 to i64, !dbg !29
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !29
  %69 = sext i32 %58 to i64, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !29
  %71 = sext i32 %59 to i64, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !29
  %73 = sext i32 %60 to i64, !dbg !29
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !29
  %75 = sext i32 %61 to i64, !dbg !29
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !29
  %77 = sext i32 %62 to i64, !dbg !29
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !29
  %79 = and i1 %22, %37, !dbg !30
  %80 = and i1 %23, %37, !dbg !30
  %81 = and i1 %24, %37, !dbg !30
  %82 = and i1 %25, %37, !dbg !30
  %83 = and i1 %26, %37, !dbg !30
  %84 = and i1 %27, %37, !dbg !30
  %85 = and i1 %28, %37, !dbg !30
  %86 = and i1 %29, %37, !dbg !30
  %87 = and i1 %30, %38, !dbg !30
  %88 = and i1 %30, %39, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %79) #2, !dbg !31
  %90 = bitcast i32 %89 to float, !dbg !31
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %80) #2, !dbg !31
  %92 = bitcast i32 %91 to float, !dbg !31
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %81) #2, !dbg !31
  %94 = bitcast i32 %93 to float, !dbg !31
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %82) #2, !dbg !31
  %96 = bitcast i32 %95 to float, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %83) #2, !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %84) #2, !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %85) #2, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %86) #2, !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = or disjoint i32 %44, 1, !dbg !32
  %106 = add i32 %105, %45, !dbg !33
  %107 = add i32 %106, %47, !dbg !34
  %108 = add i32 %106, %48, !dbg !34
  %109 = add i32 %106, %49, !dbg !34
  %110 = add i32 %106, %50, !dbg !34
  %111 = add i32 %106, %51, !dbg !34
  %112 = add i32 %106, %52, !dbg !34
  %113 = add i32 %106, %53, !dbg !34
  %114 = add i32 %106, %54, !dbg !34
  %115 = sext i32 %107 to i64, !dbg !35
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !35
  %117 = sext i32 %108 to i64, !dbg !35
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !35
  %119 = sext i32 %109 to i64, !dbg !35
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !35
  %121 = sext i32 %110 to i64, !dbg !35
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !35
  %123 = sext i32 %111 to i64, !dbg !35
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !35
  %125 = sext i32 %112 to i64, !dbg !35
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !35
  %127 = sext i32 %113 to i64, !dbg !35
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !35
  %129 = sext i32 %114 to i64, !dbg !35
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !35
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %79) #2, !dbg !36
  %132 = bitcast i32 %131 to float, !dbg !36
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %80) #2, !dbg !36
  %134 = bitcast i32 %133 to float, !dbg !36
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %81) #2, !dbg !36
  %136 = bitcast i32 %135 to float, !dbg !36
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %82) #2, !dbg !36
  %138 = bitcast i32 %137 to float, !dbg !36
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %83) #2, !dbg !36
  %140 = bitcast i32 %139 to float, !dbg !36
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %84) #2, !dbg !36
  %142 = bitcast i32 %141 to float, !dbg !36
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %85) #2, !dbg !36
  %144 = bitcast i32 %143 to float, !dbg !36
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %86) #2, !dbg !36
  %146 = bitcast i32 %145 to float, !dbg !36
  %147 = add i32 %46, 2, !dbg !37
  %148 = add i32 %147, %47, !dbg !38
  %149 = add i32 %147, %48, !dbg !38
  %150 = add i32 %147, %49, !dbg !38
  %151 = add i32 %147, %50, !dbg !38
  %152 = add i32 %147, %51, !dbg !38
  %153 = add i32 %147, %52, !dbg !38
  %154 = add i32 %147, %53, !dbg !38
  %155 = add i32 %147, %54, !dbg !38
  %156 = sext i32 %148 to i64, !dbg !39
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !39
  %158 = sext i32 %149 to i64, !dbg !39
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !39
  %160 = sext i32 %150 to i64, !dbg !39
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !39
  %162 = sext i32 %151 to i64, !dbg !39
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !39
  %164 = sext i32 %152 to i64, !dbg !39
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !39
  %166 = sext i32 %153 to i64, !dbg !39
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !39
  %168 = sext i32 %154 to i64, !dbg !39
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !39
  %170 = sext i32 %155 to i64, !dbg !39
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !39
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %79) #2, !dbg !40
  %173 = bitcast i32 %172 to float, !dbg !40
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %80) #2, !dbg !40
  %175 = bitcast i32 %174 to float, !dbg !40
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %81) #2, !dbg !40
  %177 = bitcast i32 %176 to float, !dbg !40
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %82) #2, !dbg !40
  %179 = bitcast i32 %178 to float, !dbg !40
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %83) #2, !dbg !40
  %181 = bitcast i32 %180 to float, !dbg !40
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %84) #2, !dbg !40
  %183 = bitcast i32 %182 to float, !dbg !40
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %85) #2, !dbg !40
  %185 = bitcast i32 %184 to float, !dbg !40
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %86) #2, !dbg !40
  %187 = bitcast i32 %186 to float, !dbg !40
  %188 = add i32 %46, 7, !dbg !41
  %189 = add i32 %188, %47, !dbg !42
  %190 = add i32 %188, %48, !dbg !42
  %191 = add i32 %188, %49, !dbg !42
  %192 = add i32 %188, %50, !dbg !42
  %193 = add i32 %188, %51, !dbg !42
  %194 = add i32 %188, %52, !dbg !42
  %195 = add i32 %188, %53, !dbg !42
  %196 = add i32 %188, %54, !dbg !42
  %197 = sext i32 %189 to i64, !dbg !43
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !43
  %199 = sext i32 %190 to i64, !dbg !43
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !43
  %201 = sext i32 %191 to i64, !dbg !43
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !43
  %203 = sext i32 %192 to i64, !dbg !43
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !43
  %205 = sext i32 %193 to i64, !dbg !43
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !43
  %207 = sext i32 %194 to i64, !dbg !43
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !43
  %209 = sext i32 %195 to i64, !dbg !43
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !43
  %211 = sext i32 %196 to i64, !dbg !43
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !43
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %79) #2, !dbg !44
  %214 = bitcast i32 %213 to float, !dbg !44
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %80) #2, !dbg !44
  %216 = bitcast i32 %215 to float, !dbg !44
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 %81) #2, !dbg !44
  %218 = bitcast i32 %217 to float, !dbg !44
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 %82) #2, !dbg !44
  %220 = bitcast i32 %219 to float, !dbg !44
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 %83) #2, !dbg !44
  %222 = bitcast i32 %221 to float, !dbg !44
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %84) #2, !dbg !44
  %224 = bitcast i32 %223 to float, !dbg !44
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 %85) #2, !dbg !44
  %226 = bitcast i32 %225 to float, !dbg !44
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 %86) #2, !dbg !44
  %228 = bitcast i32 %227 to float, !dbg !44
  %229 = add i32 %46, 8, !dbg !45
  %230 = add i32 %229, %47, !dbg !46
  %231 = add i32 %229, %48, !dbg !46
  %232 = add i32 %229, %49, !dbg !46
  %233 = add i32 %229, %50, !dbg !46
  %234 = add i32 %229, %51, !dbg !46
  %235 = add i32 %229, %52, !dbg !46
  %236 = add i32 %229, %53, !dbg !46
  %237 = add i32 %229, %54, !dbg !46
  %238 = sext i32 %230 to i64, !dbg !47
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !47
  %240 = sext i32 %231 to i64, !dbg !47
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !47
  %242 = sext i32 %232 to i64, !dbg !47
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !47
  %244 = sext i32 %233 to i64, !dbg !47
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !47
  %246 = sext i32 %234 to i64, !dbg !47
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !47
  %248 = sext i32 %235 to i64, !dbg !47
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !47
  %250 = sext i32 %236 to i64, !dbg !47
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !47
  %252 = sext i32 %237 to i64, !dbg !47
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %252, !dbg !47
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %79) #2, !dbg !48
  %255 = bitcast i32 %254 to float, !dbg !48
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %80) #2, !dbg !48
  %257 = bitcast i32 %256 to float, !dbg !48
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %81) #2, !dbg !48
  %259 = bitcast i32 %258 to float, !dbg !48
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %82) #2, !dbg !48
  %261 = bitcast i32 %260 to float, !dbg !48
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 %83) #2, !dbg !48
  %263 = bitcast i32 %262 to float, !dbg !48
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 %84) #2, !dbg !48
  %265 = bitcast i32 %264 to float, !dbg !48
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %85) #2, !dbg !48
  %267 = bitcast i32 %266 to float, !dbg !48
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 %86) #2, !dbg !48
  %269 = bitcast i32 %268 to float, !dbg !48
  %270 = add i32 %46, 9, !dbg !49
  %271 = add i32 %270, %47, !dbg !50
  %272 = add i32 %270, %48, !dbg !50
  %273 = add i32 %270, %49, !dbg !50
  %274 = add i32 %270, %50, !dbg !50
  %275 = add i32 %270, %51, !dbg !50
  %276 = add i32 %270, %52, !dbg !50
  %277 = add i32 %270, %53, !dbg !50
  %278 = add i32 %270, %54, !dbg !50
  %279 = sext i32 %271 to i64, !dbg !51
  %280 = getelementptr float, ptr addrspace(1) %0, i64 %279, !dbg !51
  %281 = sext i32 %272 to i64, !dbg !51
  %282 = getelementptr float, ptr addrspace(1) %0, i64 %281, !dbg !51
  %283 = sext i32 %273 to i64, !dbg !51
  %284 = getelementptr float, ptr addrspace(1) %0, i64 %283, !dbg !51
  %285 = sext i32 %274 to i64, !dbg !51
  %286 = getelementptr float, ptr addrspace(1) %0, i64 %285, !dbg !51
  %287 = sext i32 %275 to i64, !dbg !51
  %288 = getelementptr float, ptr addrspace(1) %0, i64 %287, !dbg !51
  %289 = sext i32 %276 to i64, !dbg !51
  %290 = getelementptr float, ptr addrspace(1) %0, i64 %289, !dbg !51
  %291 = sext i32 %277 to i64, !dbg !51
  %292 = getelementptr float, ptr addrspace(1) %0, i64 %291, !dbg !51
  %293 = sext i32 %278 to i64, !dbg !51
  %294 = getelementptr float, ptr addrspace(1) %0, i64 %293, !dbg !51
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 %79) #2, !dbg !52
  %296 = bitcast i32 %295 to float, !dbg !52
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 %80) #2, !dbg !52
  %298 = bitcast i32 %297 to float, !dbg !52
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 %81) #2, !dbg !52
  %300 = bitcast i32 %299 to float, !dbg !52
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 %82) #2, !dbg !52
  %302 = bitcast i32 %301 to float, !dbg !52
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 %83) #2, !dbg !52
  %304 = bitcast i32 %303 to float, !dbg !52
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 %84) #2, !dbg !52
  %306 = bitcast i32 %305 to float, !dbg !52
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 %85) #2, !dbg !52
  %308 = bitcast i32 %307 to float, !dbg !52
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 %86) #2, !dbg !52
  %310 = bitcast i32 %309 to float, !dbg !52
  %311 = add i32 %46, 14, !dbg !53
  %312 = add i32 %311, %47, !dbg !54
  %313 = add i32 %311, %48, !dbg !54
  %314 = add i32 %311, %49, !dbg !54
  %315 = add i32 %311, %50, !dbg !54
  %316 = add i32 %311, %51, !dbg !54
  %317 = add i32 %311, %52, !dbg !54
  %318 = add i32 %311, %53, !dbg !54
  %319 = add i32 %311, %54, !dbg !54
  %320 = sext i32 %312 to i64, !dbg !55
  %321 = getelementptr float, ptr addrspace(1) %0, i64 %320, !dbg !55
  %322 = sext i32 %313 to i64, !dbg !55
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !55
  %324 = sext i32 %314 to i64, !dbg !55
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !55
  %326 = sext i32 %315 to i64, !dbg !55
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !55
  %328 = sext i32 %316 to i64, !dbg !55
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !55
  %330 = sext i32 %317 to i64, !dbg !55
  %331 = getelementptr float, ptr addrspace(1) %0, i64 %330, !dbg !55
  %332 = sext i32 %318 to i64, !dbg !55
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !55
  %334 = sext i32 %319 to i64, !dbg !55
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !55
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 %79) #2, !dbg !56
  %337 = bitcast i32 %336 to float, !dbg !56
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %323, i1 %80) #2, !dbg !56
  %339 = bitcast i32 %338 to float, !dbg !56
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %81) #2, !dbg !56
  %341 = bitcast i32 %340 to float, !dbg !56
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %82) #2, !dbg !56
  %343 = bitcast i32 %342 to float, !dbg !56
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %83) #2, !dbg !56
  %345 = bitcast i32 %344 to float, !dbg !56
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %84) #2, !dbg !56
  %347 = bitcast i32 %346 to float, !dbg !56
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %85) #2, !dbg !56
  %349 = bitcast i32 %348 to float, !dbg !56
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %86) #2, !dbg !56
  %351 = bitcast i32 %350 to float, !dbg !56
  %352 = add i32 %46, 15, !dbg !57
  %353 = add i32 %352, %47, !dbg !58
  %354 = add i32 %352, %48, !dbg !58
  %355 = add i32 %352, %49, !dbg !58
  %356 = add i32 %352, %50, !dbg !58
  %357 = add i32 %352, %51, !dbg !58
  %358 = add i32 %352, %52, !dbg !58
  %359 = add i32 %352, %53, !dbg !58
  %360 = add i32 %352, %54, !dbg !58
  %361 = sext i32 %353 to i64, !dbg !59
  %362 = getelementptr float, ptr addrspace(1) %0, i64 %361, !dbg !59
  %363 = sext i32 %354 to i64, !dbg !59
  %364 = getelementptr float, ptr addrspace(1) %0, i64 %363, !dbg !59
  %365 = sext i32 %355 to i64, !dbg !59
  %366 = getelementptr float, ptr addrspace(1) %0, i64 %365, !dbg !59
  %367 = sext i32 %356 to i64, !dbg !59
  %368 = getelementptr float, ptr addrspace(1) %0, i64 %367, !dbg !59
  %369 = sext i32 %357 to i64, !dbg !59
  %370 = getelementptr float, ptr addrspace(1) %0, i64 %369, !dbg !59
  %371 = sext i32 %358 to i64, !dbg !59
  %372 = getelementptr float, ptr addrspace(1) %0, i64 %371, !dbg !59
  %373 = sext i32 %359 to i64, !dbg !59
  %374 = getelementptr float, ptr addrspace(1) %0, i64 %373, !dbg !59
  %375 = sext i32 %360 to i64, !dbg !59
  %376 = getelementptr float, ptr addrspace(1) %0, i64 %375, !dbg !59
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %362, i1 %79) #2, !dbg !60
  %378 = bitcast i32 %377 to float, !dbg !60
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %364, i1 %80) #2, !dbg !60
  %380 = bitcast i32 %379 to float, !dbg !60
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %366, i1 %81) #2, !dbg !60
  %382 = bitcast i32 %381 to float, !dbg !60
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %368, i1 %82) #2, !dbg !60
  %384 = bitcast i32 %383 to float, !dbg !60
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %370, i1 %83) #2, !dbg !60
  %386 = bitcast i32 %385 to float, !dbg !60
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %372, i1 %84) #2, !dbg !60
  %388 = bitcast i32 %387 to float, !dbg !60
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %374, i1 %85) #2, !dbg !60
  %390 = bitcast i32 %389 to float, !dbg !60
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %376, i1 %86) #2, !dbg !60
  %392 = bitcast i32 %391 to float, !dbg !60
  %393 = add i32 %46, 16, !dbg !61
  %394 = add i32 %393, %47, !dbg !62
  %395 = add i32 %393, %48, !dbg !62
  %396 = add i32 %393, %49, !dbg !62
  %397 = add i32 %393, %50, !dbg !62
  %398 = add i32 %393, %51, !dbg !62
  %399 = add i32 %393, %52, !dbg !62
  %400 = add i32 %393, %53, !dbg !62
  %401 = add i32 %393, %54, !dbg !62
  %402 = sext i32 %394 to i64, !dbg !63
  %403 = getelementptr float, ptr addrspace(1) %0, i64 %402, !dbg !63
  %404 = sext i32 %395 to i64, !dbg !63
  %405 = getelementptr float, ptr addrspace(1) %0, i64 %404, !dbg !63
  %406 = sext i32 %396 to i64, !dbg !63
  %407 = getelementptr float, ptr addrspace(1) %0, i64 %406, !dbg !63
  %408 = sext i32 %397 to i64, !dbg !63
  %409 = getelementptr float, ptr addrspace(1) %0, i64 %408, !dbg !63
  %410 = sext i32 %398 to i64, !dbg !63
  %411 = getelementptr float, ptr addrspace(1) %0, i64 %410, !dbg !63
  %412 = sext i32 %399 to i64, !dbg !63
  %413 = getelementptr float, ptr addrspace(1) %0, i64 %412, !dbg !63
  %414 = sext i32 %400 to i64, !dbg !63
  %415 = getelementptr float, ptr addrspace(1) %0, i64 %414, !dbg !63
  %416 = sext i32 %401 to i64, !dbg !63
  %417 = getelementptr float, ptr addrspace(1) %0, i64 %416, !dbg !63
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %403, i1 %79) #2, !dbg !64
  %419 = bitcast i32 %418 to float, !dbg !64
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %405, i1 %80) #2, !dbg !64
  %421 = bitcast i32 %420 to float, !dbg !64
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 %81) #2, !dbg !64
  %423 = bitcast i32 %422 to float, !dbg !64
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %409, i1 %82) #2, !dbg !64
  %425 = bitcast i32 %424 to float, !dbg !64
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %411, i1 %83) #2, !dbg !64
  %427 = bitcast i32 %426 to float, !dbg !64
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 %84) #2, !dbg !64
  %429 = bitcast i32 %428 to float, !dbg !64
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %415, i1 %85) #2, !dbg !64
  %431 = bitcast i32 %430 to float, !dbg !64
  %432 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %417, i1 %86) #2, !dbg !64
  %433 = bitcast i32 %432 to float, !dbg !64
  %434 = fcmp ogt float %132, %90, !dbg !65
  %435 = fcmp ogt float %134, %92, !dbg !65
  %436 = fcmp ogt float %136, %94, !dbg !65
  %437 = fcmp ogt float %138, %96, !dbg !65
  %438 = fcmp ogt float %140, %98, !dbg !65
  %439 = fcmp ogt float %142, %100, !dbg !65
  %440 = fcmp ogt float %144, %102, !dbg !65
  %441 = fcmp ogt float %146, %104, !dbg !65
  %442 = fcmp uno float %132, 0.000000e+00, !dbg !69
  %443 = fcmp uno float %134, 0.000000e+00, !dbg !69
  %444 = fcmp uno float %136, 0.000000e+00, !dbg !69
  %445 = fcmp uno float %138, 0.000000e+00, !dbg !69
  %446 = fcmp uno float %140, 0.000000e+00, !dbg !69
  %447 = fcmp uno float %142, 0.000000e+00, !dbg !69
  %448 = fcmp uno float %144, 0.000000e+00, !dbg !69
  %449 = fcmp uno float %146, 0.000000e+00, !dbg !69
  %450 = or i1 %434, %442, !dbg !70
  %451 = or i1 %435, %443, !dbg !70
  %452 = or i1 %436, %444, !dbg !70
  %453 = or i1 %437, %445, !dbg !70
  %454 = or i1 %438, %446, !dbg !70
  %455 = or i1 %439, %447, !dbg !70
  %456 = or i1 %440, %448, !dbg !70
  %457 = or i1 %441, %449, !dbg !70
  %458 = select i1 %450, float %132, float %90, !dbg !71
  %459 = select i1 %451, float %134, float %92, !dbg !71
  %460 = select i1 %452, float %136, float %94, !dbg !71
  %461 = select i1 %453, float %138, float %96, !dbg !71
  %462 = select i1 %454, float %140, float %98, !dbg !71
  %463 = select i1 %455, float %142, float %100, !dbg !71
  %464 = select i1 %456, float %144, float %102, !dbg !71
  %465 = select i1 %457, float %146, float %104, !dbg !71
  %466 = fcmp olt float %458, %173, !dbg !72
  %467 = fcmp olt float %459, %175, !dbg !72
  %468 = fcmp olt float %460, %177, !dbg !72
  %469 = fcmp olt float %461, %179, !dbg !72
  %470 = fcmp olt float %462, %181, !dbg !72
  %471 = fcmp olt float %463, %183, !dbg !72
  %472 = fcmp olt float %464, %185, !dbg !72
  %473 = fcmp olt float %465, %187, !dbg !72
  %474 = fcmp uno float %173, 0.000000e+00, !dbg !74
  %475 = fcmp uno float %175, 0.000000e+00, !dbg !74
  %476 = fcmp uno float %177, 0.000000e+00, !dbg !74
  %477 = fcmp uno float %179, 0.000000e+00, !dbg !74
  %478 = fcmp uno float %181, 0.000000e+00, !dbg !74
  %479 = fcmp uno float %183, 0.000000e+00, !dbg !74
  %480 = fcmp uno float %185, 0.000000e+00, !dbg !74
  %481 = fcmp uno float %187, 0.000000e+00, !dbg !74
  %482 = or i1 %466, %474, !dbg !75
  %483 = or i1 %467, %475, !dbg !75
  %484 = or i1 %468, %476, !dbg !75
  %485 = or i1 %469, %477, !dbg !75
  %486 = or i1 %470, %478, !dbg !75
  %487 = or i1 %471, %479, !dbg !75
  %488 = or i1 %472, %480, !dbg !75
  %489 = or i1 %473, %481, !dbg !75
  %490 = select i1 %482, float %173, float %458, !dbg !76
  %491 = select i1 %483, float %175, float %459, !dbg !76
  %492 = select i1 %484, float %177, float %460, !dbg !76
  %493 = select i1 %485, float %179, float %461, !dbg !76
  %494 = select i1 %486, float %181, float %462, !dbg !76
  %495 = select i1 %487, float %183, float %463, !dbg !76
  %496 = select i1 %488, float %185, float %464, !dbg !76
  %497 = select i1 %489, float %187, float %465, !dbg !76
  %498 = fcmp olt float %490, %214, !dbg !77
  %499 = fcmp olt float %491, %216, !dbg !77
  %500 = fcmp olt float %492, %218, !dbg !77
  %501 = fcmp olt float %493, %220, !dbg !77
  %502 = fcmp olt float %494, %222, !dbg !77
  %503 = fcmp olt float %495, %224, !dbg !77
  %504 = fcmp olt float %496, %226, !dbg !77
  %505 = fcmp olt float %497, %228, !dbg !77
  %506 = fcmp uno float %214, 0.000000e+00, !dbg !79
  %507 = fcmp uno float %216, 0.000000e+00, !dbg !79
  %508 = fcmp uno float %218, 0.000000e+00, !dbg !79
  %509 = fcmp uno float %220, 0.000000e+00, !dbg !79
  %510 = fcmp uno float %222, 0.000000e+00, !dbg !79
  %511 = fcmp uno float %224, 0.000000e+00, !dbg !79
  %512 = fcmp uno float %226, 0.000000e+00, !dbg !79
  %513 = fcmp uno float %228, 0.000000e+00, !dbg !79
  %514 = or i1 %498, %506, !dbg !80
  %515 = or i1 %499, %507, !dbg !80
  %516 = or i1 %500, %508, !dbg !80
  %517 = or i1 %501, %509, !dbg !80
  %518 = or i1 %502, %510, !dbg !80
  %519 = or i1 %503, %511, !dbg !80
  %520 = or i1 %504, %512, !dbg !80
  %521 = or i1 %505, %513, !dbg !80
  %522 = select i1 %514, float %214, float %490, !dbg !81
  %523 = select i1 %515, float %216, float %491, !dbg !81
  %524 = select i1 %516, float %218, float %492, !dbg !81
  %525 = select i1 %517, float %220, float %493, !dbg !81
  %526 = select i1 %518, float %222, float %494, !dbg !81
  %527 = select i1 %519, float %224, float %495, !dbg !81
  %528 = select i1 %520, float %226, float %496, !dbg !81
  %529 = select i1 %521, float %228, float %497, !dbg !81
  %530 = fcmp olt float %522, %255, !dbg !82
  %531 = fcmp olt float %523, %257, !dbg !82
  %532 = fcmp olt float %524, %259, !dbg !82
  %533 = fcmp olt float %525, %261, !dbg !82
  %534 = fcmp olt float %526, %263, !dbg !82
  %535 = fcmp olt float %527, %265, !dbg !82
  %536 = fcmp olt float %528, %267, !dbg !82
  %537 = fcmp olt float %529, %269, !dbg !82
  %538 = fcmp uno float %255, 0.000000e+00, !dbg !84
  %539 = fcmp uno float %257, 0.000000e+00, !dbg !84
  %540 = fcmp uno float %259, 0.000000e+00, !dbg !84
  %541 = fcmp uno float %261, 0.000000e+00, !dbg !84
  %542 = fcmp uno float %263, 0.000000e+00, !dbg !84
  %543 = fcmp uno float %265, 0.000000e+00, !dbg !84
  %544 = fcmp uno float %267, 0.000000e+00, !dbg !84
  %545 = fcmp uno float %269, 0.000000e+00, !dbg !84
  %546 = or i1 %530, %538, !dbg !85
  %547 = or i1 %531, %539, !dbg !85
  %548 = or i1 %532, %540, !dbg !85
  %549 = or i1 %533, %541, !dbg !85
  %550 = or i1 %534, %542, !dbg !85
  %551 = or i1 %535, %543, !dbg !85
  %552 = or i1 %536, %544, !dbg !85
  %553 = or i1 %537, %545, !dbg !85
  %554 = select i1 %546, float %255, float %522, !dbg !86
  %555 = select i1 %547, float %257, float %523, !dbg !86
  %556 = select i1 %548, float %259, float %524, !dbg !86
  %557 = select i1 %549, float %261, float %525, !dbg !86
  %558 = select i1 %550, float %263, float %526, !dbg !86
  %559 = select i1 %551, float %265, float %527, !dbg !86
  %560 = select i1 %552, float %267, float %528, !dbg !86
  %561 = select i1 %553, float %269, float %529, !dbg !86
  %562 = fcmp olt float %554, %296, !dbg !87
  %563 = fcmp olt float %555, %298, !dbg !87
  %564 = fcmp olt float %556, %300, !dbg !87
  %565 = fcmp olt float %557, %302, !dbg !87
  %566 = fcmp olt float %558, %304, !dbg !87
  %567 = fcmp olt float %559, %306, !dbg !87
  %568 = fcmp olt float %560, %308, !dbg !87
  %569 = fcmp olt float %561, %310, !dbg !87
  %570 = fcmp uno float %296, 0.000000e+00, !dbg !89
  %571 = fcmp uno float %298, 0.000000e+00, !dbg !89
  %572 = fcmp uno float %300, 0.000000e+00, !dbg !89
  %573 = fcmp uno float %302, 0.000000e+00, !dbg !89
  %574 = fcmp uno float %304, 0.000000e+00, !dbg !89
  %575 = fcmp uno float %306, 0.000000e+00, !dbg !89
  %576 = fcmp uno float %308, 0.000000e+00, !dbg !89
  %577 = fcmp uno float %310, 0.000000e+00, !dbg !89
  %578 = or i1 %562, %570, !dbg !90
  %579 = or i1 %563, %571, !dbg !90
  %580 = or i1 %564, %572, !dbg !90
  %581 = or i1 %565, %573, !dbg !90
  %582 = or i1 %566, %574, !dbg !90
  %583 = or i1 %567, %575, !dbg !90
  %584 = or i1 %568, %576, !dbg !90
  %585 = or i1 %569, %577, !dbg !90
  %586 = select i1 %578, float %296, float %554, !dbg !91
  %587 = select i1 %579, float %298, float %555, !dbg !91
  %588 = select i1 %580, float %300, float %556, !dbg !91
  %589 = select i1 %581, float %302, float %557, !dbg !91
  %590 = select i1 %582, float %304, float %558, !dbg !91
  %591 = select i1 %583, float %306, float %559, !dbg !91
  %592 = select i1 %584, float %308, float %560, !dbg !91
  %593 = select i1 %585, float %310, float %561, !dbg !91
  %594 = fcmp olt float %586, %337, !dbg !92
  %595 = fcmp olt float %587, %339, !dbg !92
  %596 = fcmp olt float %588, %341, !dbg !92
  %597 = fcmp olt float %589, %343, !dbg !92
  %598 = fcmp olt float %590, %345, !dbg !92
  %599 = fcmp olt float %591, %347, !dbg !92
  %600 = fcmp olt float %592, %349, !dbg !92
  %601 = fcmp olt float %593, %351, !dbg !92
  %602 = fcmp uno float %337, 0.000000e+00, !dbg !94
  %603 = fcmp uno float %339, 0.000000e+00, !dbg !94
  %604 = fcmp uno float %341, 0.000000e+00, !dbg !94
  %605 = fcmp uno float %343, 0.000000e+00, !dbg !94
  %606 = fcmp uno float %345, 0.000000e+00, !dbg !94
  %607 = fcmp uno float %347, 0.000000e+00, !dbg !94
  %608 = fcmp uno float %349, 0.000000e+00, !dbg !94
  %609 = fcmp uno float %351, 0.000000e+00, !dbg !94
  %610 = or i1 %594, %602, !dbg !95
  %611 = or i1 %595, %603, !dbg !95
  %612 = or i1 %596, %604, !dbg !95
  %613 = or i1 %597, %605, !dbg !95
  %614 = or i1 %598, %606, !dbg !95
  %615 = or i1 %599, %607, !dbg !95
  %616 = or i1 %600, %608, !dbg !95
  %617 = or i1 %601, %609, !dbg !95
  %618 = select i1 %610, float %337, float %586, !dbg !96
  %619 = select i1 %611, float %339, float %587, !dbg !96
  %620 = select i1 %612, float %341, float %588, !dbg !96
  %621 = select i1 %613, float %343, float %589, !dbg !96
  %622 = select i1 %614, float %345, float %590, !dbg !96
  %623 = select i1 %615, float %347, float %591, !dbg !96
  %624 = select i1 %616, float %349, float %592, !dbg !96
  %625 = select i1 %617, float %351, float %593, !dbg !96
  %626 = fcmp olt float %618, %378, !dbg !97
  %627 = fcmp olt float %619, %380, !dbg !97
  %628 = fcmp olt float %620, %382, !dbg !97
  %629 = fcmp olt float %621, %384, !dbg !97
  %630 = fcmp olt float %622, %386, !dbg !97
  %631 = fcmp olt float %623, %388, !dbg !97
  %632 = fcmp olt float %624, %390, !dbg !97
  %633 = fcmp olt float %625, %392, !dbg !97
  %634 = fcmp uno float %378, 0.000000e+00, !dbg !99
  %635 = fcmp uno float %380, 0.000000e+00, !dbg !99
  %636 = fcmp uno float %382, 0.000000e+00, !dbg !99
  %637 = fcmp uno float %384, 0.000000e+00, !dbg !99
  %638 = fcmp uno float %386, 0.000000e+00, !dbg !99
  %639 = fcmp uno float %388, 0.000000e+00, !dbg !99
  %640 = fcmp uno float %390, 0.000000e+00, !dbg !99
  %641 = fcmp uno float %392, 0.000000e+00, !dbg !99
  %642 = or i1 %626, %634, !dbg !100
  %643 = or i1 %627, %635, !dbg !100
  %644 = or i1 %628, %636, !dbg !100
  %645 = or i1 %629, %637, !dbg !100
  %646 = or i1 %630, %638, !dbg !100
  %647 = or i1 %631, %639, !dbg !100
  %648 = or i1 %632, %640, !dbg !100
  %649 = or i1 %633, %641, !dbg !100
  %650 = select i1 %642, float %378, float %618, !dbg !101
  %651 = select i1 %643, float %380, float %619, !dbg !101
  %652 = select i1 %644, float %382, float %620, !dbg !101
  %653 = select i1 %645, float %384, float %621, !dbg !101
  %654 = select i1 %646, float %386, float %622, !dbg !101
  %655 = select i1 %647, float %388, float %623, !dbg !101
  %656 = select i1 %648, float %390, float %624, !dbg !101
  %657 = select i1 %649, float %392, float %625, !dbg !101
  %658 = fcmp olt float %650, %419, !dbg !102
  %659 = fcmp olt float %651, %421, !dbg !102
  %660 = fcmp olt float %652, %423, !dbg !102
  %661 = fcmp olt float %653, %425, !dbg !102
  %662 = fcmp olt float %654, %427, !dbg !102
  %663 = fcmp olt float %655, %429, !dbg !102
  %664 = fcmp olt float %656, %431, !dbg !102
  %665 = fcmp olt float %657, %433, !dbg !102
  %666 = fcmp uno float %419, 0.000000e+00, !dbg !104
  %667 = fcmp uno float %421, 0.000000e+00, !dbg !104
  %668 = fcmp uno float %423, 0.000000e+00, !dbg !104
  %669 = fcmp uno float %425, 0.000000e+00, !dbg !104
  %670 = fcmp uno float %427, 0.000000e+00, !dbg !104
  %671 = fcmp uno float %429, 0.000000e+00, !dbg !104
  %672 = fcmp uno float %431, 0.000000e+00, !dbg !104
  %673 = fcmp uno float %433, 0.000000e+00, !dbg !104
  %674 = or i1 %658, %666, !dbg !105
  %675 = or i1 %659, %667, !dbg !105
  %676 = or i1 %660, %668, !dbg !105
  %677 = or i1 %661, %669, !dbg !105
  %678 = or i1 %662, %670, !dbg !105
  %679 = or i1 %663, %671, !dbg !105
  %680 = or i1 %664, %672, !dbg !105
  %681 = or i1 %665, %673, !dbg !105
  %682 = mul i32 %35, 192, !dbg !106
  %683 = mul i32 %36, 192, !dbg !106
  %684 = mul i32 %42, 1728, !dbg !107
  %685 = add i32 %684, %.decomposed17, !dbg !108
  %686 = add i32 %685, %682, !dbg !109
  %687 = add i32 %685, %683, !dbg !109
  %688 = sext i32 %686 to i64, !dbg !110
  %689 = getelementptr float, ptr addrspace(1) %1, i64 %688, !dbg !110
  %690 = sext i32 %687 to i64, !dbg !110
  %691 = getelementptr float, ptr addrspace(1) %1, i64 %690, !dbg !110
  %692 = shl i32 %7, 6, !dbg !111
  %693 = and i32 %692, 960, !dbg !111
  %694 = or disjoint i32 %693, %9, !dbg !111
  %695 = and i32 %11, 508, !dbg !111
  %696 = lshr exact i32 %693, 4, !dbg !111
  %697 = add nuw nsw i32 %696, %694, !dbg !111
  %698 = zext nneg i32 %697 to i64, !dbg !111
  %699 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %698, !dbg !111
  %700 = bitcast float %650 to i32, !dbg !111
  %701 = select i1 %674, i32 %418, i32 %700, !dbg !112
  %702 = insertelement <1 x i32> poison, i32 %701, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %699, <1 x i32> %702, i1 true) #2, !dbg !111
  %703 = or disjoint i32 %694, 8, !dbg !111
  %704 = add nuw nsw i32 %703, %696, !dbg !111
  %705 = zext nneg i32 %704 to i64, !dbg !111
  %706 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %705, !dbg !111
  %707 = bitcast float %651 to i32, !dbg !111
  %708 = select i1 %675, i32 %420, i32 %707, !dbg !112
  %709 = insertelement <1 x i32> poison, i32 %708, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %706, <1 x i32> %709, i1 true) #2, !dbg !111
  %710 = or disjoint i32 %694, 16, !dbg !111
  %711 = add nuw nsw i32 %710, %696, !dbg !111
  %712 = zext nneg i32 %711 to i64, !dbg !111
  %713 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %712, !dbg !111
  %714 = bitcast float %652 to i32, !dbg !111
  %715 = select i1 %676, i32 %422, i32 %714, !dbg !112
  %716 = insertelement <1 x i32> poison, i32 %715, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %713, <1 x i32> %716, i1 true) #2, !dbg !111
  %717 = or disjoint i32 %694, 24, !dbg !111
  %718 = add nuw nsw i32 %717, %696, !dbg !111
  %719 = zext nneg i32 %718 to i64, !dbg !111
  %720 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %719, !dbg !111
  %721 = bitcast float %653 to i32, !dbg !111
  %722 = select i1 %677, i32 %424, i32 %721, !dbg !112
  %723 = insertelement <1 x i32> poison, i32 %722, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %720, <1 x i32> %723, i1 true) #2, !dbg !111
  %724 = or disjoint i32 %694, 32, !dbg !111
  %725 = add nuw nsw i32 %724, %696, !dbg !111
  %726 = zext nneg i32 %725 to i64, !dbg !111
  %727 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %726, !dbg !111
  %728 = bitcast float %654 to i32, !dbg !111
  %729 = select i1 %678, i32 %426, i32 %728, !dbg !112
  %730 = insertelement <1 x i32> poison, i32 %729, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %727, <1 x i32> %730, i1 true) #2, !dbg !111
  %731 = or disjoint i32 %694, 40, !dbg !111
  %732 = add nuw nsw i32 %731, %696, !dbg !111
  %733 = zext nneg i32 %732 to i64, !dbg !111
  %734 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %733, !dbg !111
  %735 = bitcast float %655 to i32, !dbg !111
  %736 = select i1 %679, i32 %428, i32 %735, !dbg !112
  %737 = insertelement <1 x i32> poison, i32 %736, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %734, <1 x i32> %737, i1 true) #2, !dbg !111
  %738 = or disjoint i32 %694, 48, !dbg !111
  %739 = add nuw nsw i32 %738, %696, !dbg !111
  %740 = zext nneg i32 %739 to i64, !dbg !111
  %741 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %740, !dbg !111
  %742 = bitcast float %656 to i32, !dbg !111
  %743 = select i1 %680, i32 %430, i32 %742, !dbg !112
  %744 = insertelement <1 x i32> poison, i32 %743, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %741, <1 x i32> %744, i1 true) #2, !dbg !111
  %745 = or disjoint i32 %694, 56, !dbg !111
  %746 = add nuw nsw i32 %745, %696, !dbg !111
  %747 = zext nneg i32 %746 to i64, !dbg !111
  %748 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %747, !dbg !111
  %749 = bitcast float %657 to i32, !dbg !111
  %750 = select i1 %681, i32 %432, i32 %749, !dbg !112
  %751 = insertelement <1 x i32> poison, i32 %750, i64 0, !dbg !111
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %748, <1 x i32> %751, i1 true) #2, !dbg !111
  tail call void @llvm.nvvm.barrier0(), !dbg !111
  %752 = lshr i32 %11, 4, !dbg !111
  %753 = and i32 %752, 28, !dbg !111
  %754 = add nuw nsw i32 %753, %695, !dbg !111
  %755 = zext nneg i32 %754 to i64, !dbg !111
  %756 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %755, !dbg !111
  %757 = or disjoint i32 %695, 512, !dbg !111
  %758 = lshr i32 %757, 4, !dbg !111
  %759 = and i32 %758, 60, !dbg !111
  %760 = add nuw nsw i32 %759, %757, !dbg !111
  %761 = zext nneg i32 %760 to i64, !dbg !111
  %762 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %761, !dbg !111
  %763 = load <4 x i32>, ptr addrspace(3) %762, align 16, !dbg !111
  %.extract = load i32, ptr addrspace(3) %756, align 16, !dbg !111
  %764 = getelementptr inbounds i8, ptr addrspace(3) %756, i64 4, !dbg !111
  %.extract9 = load i32, ptr addrspace(3) %764, align 4, !dbg !111
  %765 = getelementptr inbounds i8, ptr addrspace(3) %756, i64 8, !dbg !111
  %.extract10 = load i32, ptr addrspace(3) %765, align 8, !dbg !111
  %766 = getelementptr inbounds i8, ptr addrspace(3) %756, i64 12, !dbg !111
  %.extract11 = load i32, ptr addrspace(3) %766, align 4, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %689, i1 %87) #2, !dbg !111
  %.extract12 = extractelement <4 x i32> %763, i64 0, !dbg !111
  %.extract13 = extractelement <4 x i32> %763, i64 1, !dbg !111
  %.extract14 = extractelement <4 x i32> %763, i64 2, !dbg !111
  %.extract15 = extractelement <4 x i32> %763, i64 3, !dbg !111
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %691, i1 %88) #2, !dbg !111
  ret void, !dbg !113
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp65uqnklhonly2eeazvbh76rlutkgbc3eg7azctj7vseqz7hztm.py", directory: "inductor_cache/p6")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_6", linkageName: "triton_poi_fused_max_pool2d_with_indices_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 48, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 61, scope: !7)
!31 = !DILocation(line: 34, column: 53, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 49, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 57, scope: !7)
!37 = !DILocation(line: 36, column: 41, scope: !7)
!38 = !DILocation(line: 36, column: 49, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 57, scope: !7)
!41 = !DILocation(line: 37, column: 41, scope: !7)
!42 = !DILocation(line: 37, column: 49, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 57, scope: !7)
!45 = !DILocation(line: 38, column: 41, scope: !7)
!46 = !DILocation(line: 38, column: 49, scope: !7)
!47 = !DILocation(line: 38, column: 30, scope: !7)
!48 = !DILocation(line: 38, column: 57, scope: !7)
!49 = !DILocation(line: 39, column: 41, scope: !7)
!50 = !DILocation(line: 39, column: 49, scope: !7)
!51 = !DILocation(line: 39, column: 30, scope: !7)
!52 = !DILocation(line: 39, column: 57, scope: !7)
!53 = !DILocation(line: 40, column: 43, scope: !7)
!54 = !DILocation(line: 40, column: 51, scope: !7)
!55 = !DILocation(line: 40, column: 31, scope: !7)
!56 = !DILocation(line: 40, column: 59, scope: !7)
!57 = !DILocation(line: 41, column: 43, scope: !7)
!58 = !DILocation(line: 41, column: 51, scope: !7)
!59 = !DILocation(line: 41, column: 31, scope: !7)
!60 = !DILocation(line: 41, column: 59, scope: !7)
!61 = !DILocation(line: 42, column: 43, scope: !7)
!62 = !DILocation(line: 42, column: 51, scope: !7)
!63 = !DILocation(line: 42, column: 31, scope: !7)
!64 = !DILocation(line: 42, column: 59, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 43, column: 40, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !73)
!73 = !DILocation(line: 44, column: 40, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !78)
!78 = !DILocation(line: 45, column: 40, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !83)
!83 = !DILocation(line: 46, column: 40, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !88)
!88 = !DILocation(line: 47, column: 41, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !93)
!93 = !DILocation(line: 48, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !98)
!98 = !DILocation(line: 49, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !103)
!103 = !DILocation(line: 50, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !103)
!106 = !DILocation(line: 51, column: 34, scope: !7)
!107 = !DILocation(line: 51, column: 44, scope: !7)
!108 = !DILocation(line: 51, column: 30, scope: !7)
!109 = !DILocation(line: 51, column: 39, scope: !7)
!110 = !DILocation(line: 51, column: 25, scope: !7)
!111 = !DILocation(line: 51, column: 56, scope: !7)
!112 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !103)
!113 = !DILocation(line: 51, column: 4, scope: !7)
