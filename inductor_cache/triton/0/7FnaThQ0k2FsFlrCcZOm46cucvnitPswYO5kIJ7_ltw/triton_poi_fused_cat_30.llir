; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 1024, !dbg !14
  %15 = srem i32 %14, 320, !dbg !15
  %.frozen8 = freeze i32 %13, !dbg !16
  %16 = sdiv i32 %.frozen8, 327680, !dbg !16
  %17 = mul i32 %14, 1024, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %.frozen6 = freeze i32 %13, !dbg !18
  %18 = sdiv i32 %.frozen6, 32, !dbg !18
  %19 = srem i32 %18, 32, !dbg !19
  %20 = mul i32 %18, 32, !dbg !20
  %.decomposed7 = sub i32 %.frozen6, %20, !dbg !20
  %21 = icmp slt i32 %15, 64, !dbg !21
  %22 = mul i32 %16, 327680, !dbg !22
  %srem.decomposed = sub i32 %.frozen8, %22, !dbg !22
  %23 = shl nsw i32 %16, 16, !dbg !23
  %24 = add nsw i32 %23, %srem.decomposed, !dbg !24
  %25 = sext i32 %24 to i64, !dbg !25
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !25
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !26
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !26
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !26
  %30 = and i32 %15, -64, !dbg !27
  %31 = icmp eq i32 %30, 64, !dbg !27
  %32 = shl nsw i32 %15, 10, !dbg !28
  %33 = add nsw i32 %23, %.decomposed, !dbg !28
  %34 = add nsw i32 %33, -65536, !dbg !29
  %35 = add nsw i32 %34, %32, !dbg !30
  %36 = sext i32 %35 to i64, !dbg !31
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !31
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !32
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !32
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !32
  %41 = icmp eq i32 %30, 128, !dbg !33
  %42 = add nsw i32 %33, -131072, !dbg !34
  %43 = add nsw i32 %42, %32, !dbg !35
  %44 = sext i32 %43 to i64, !dbg !36
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !36
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #1, !dbg !37
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !37
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !37
  %49 = icmp sgt i32 %15, 191, !dbg !38
  %50 = sext i32 %19 to i64, !dbg !39
  %51 = getelementptr i64, ptr addrspace(1) %3, i64 %50, !dbg !39
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %51, i1 %49, i1 %49) #1, !dbg !40
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %51, i1 %49, i1 %49) #1, !dbg !40
  %54 = lshr i64 %52, 59, !dbg !41
  %55 = and i64 %54, 16, !dbg !41
  %56 = add i64 %55, %52, !dbg !41
  %57 = sext i32 %.decomposed7 to i64, !dbg !42
  %58 = getelementptr i64, ptr addrspace(1) %3, i64 %57, !dbg !42
  %59 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %58, i1 %49, i1 %49, i1 %49) #1, !dbg !43
  %60 = extractvalue { i64, i64 } %59, 0, !dbg !43
  %61 = extractvalue { i64, i64 } %59, 1, !dbg !43
  %62 = lshr i64 %60, 59, !dbg !44
  %63 = and i64 %62, 16, !dbg !44
  %64 = lshr i64 %61, 59, !dbg !44
  %65 = and i64 %64, 16, !dbg !44
  %66 = shl i64 %56, 4, !dbg !45
  %67 = shl nsw i32 %15, 8, !dbg !46
  %68 = add nsw i32 %67, -49152, !dbg !46
  %69 = sext i32 %68 to i64, !dbg !47
  %70 = shl nsw i32 %16, 17, !dbg !48
  %71 = sext i32 %70 to i64, !dbg !49
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !50
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %63, !dbg !50
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %66, !dbg !50
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %69, !dbg !50
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %71, !dbg !50
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !50
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %65, !dbg !50
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %66, !dbg !50
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %69, !dbg !50
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %71, !dbg !50
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %49, i32 0, i1 %49) #1, !dbg !51
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %49, i32 0, i1 %49) #1, !dbg !51
  %.v = select i1 %41, i32 %47, i32 %82, !dbg !52
  %.v1 = select i1 %41, i32 %48, i32 %83, !dbg !52
  %.v2 = select i1 %31, i32 %39, i32 %.v, !dbg !53
  %.v3 = select i1 %31, i32 %40, i32 %.v1, !dbg !53
  %.v4 = select i1 %21, i32 %28, i32 %.v2, !dbg !54
  %.v5 = select i1 %21, i32 %29, i32 %.v3, !dbg !54
  %84 = sext i32 %13 to i64, !dbg !55
  %85 = getelementptr float, ptr addrspace(1) %5, i64 %84, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v4, i32 %.v5, ptr addrspace(1) %85, i1 true) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvbirwga6cgsqos6v3wiiy6nbmfvhkqaqd6p34anaqwhocuilozc.py", directory: "inductor_cache/vb")
!4 = !{ptr @triton_poi_fused_cat_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_30, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_30", linkageName: "triton_poi_fused_cat_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 27, column: 27, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 53, scope: !7)
!24 = !DILocation(line: 35, column: 47, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 58, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 42, scope: !7)
!29 = !DILocation(line: 40, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 56, scope: !7)
!31 = !DILocation(line: 40, column: 31, scope: !7)
!32 = !DILocation(line: 40, column: 67, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 45, column: 57, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 68, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 31, scope: !7)
!40 = !DILocation(line: 49, column: 36, scope: !7)
!41 = !DILocation(line: 53, column: 35, scope: !7)
!42 = !DILocation(line: 54, column: 31, scope: !7)
!43 = !DILocation(line: 54, column: 36, scope: !7)
!44 = !DILocation(line: 57, column: 35, scope: !7)
!45 = !DILocation(line: 58, column: 42, scope: !7)
!46 = !DILocation(line: 58, column: 55, scope: !7)
!47 = !DILocation(line: 58, column: 50, scope: !7)
!48 = !DILocation(line: 58, column: 77, scope: !7)
!49 = !DILocation(line: 58, column: 70, scope: !7)
!50 = !DILocation(line: 58, column: 31, scope: !7)
!51 = !DILocation(line: 58, column: 82, scope: !7)
!52 = !DILocation(line: 59, column: 35, scope: !7)
!53 = !DILocation(line: 60, column: 34, scope: !7)
!54 = !DILocation(line: 61, column: 33, scope: !7)
!55 = !DILocation(line: 62, column: 25, scope: !7)
!56 = !DILocation(line: 62, column: 37, scope: !7)
!57 = !DILocation(line: 62, column: 4, scope: !7)
