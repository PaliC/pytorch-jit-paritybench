; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_linalg_vector_norm_mean_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 15, !dbg !11
  %7 = shl i32 %5, 2, !dbg !12
  %8 = and i32 %7, 192, !dbg !12
  %9 = or disjoint i32 %8, %6, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = zext nneg i32 %10 to i64, !dbg !14
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !14
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #5, !dbg !15
  %14 = bitcast i32 %13 to float, !dbg !15
  %15 = zext nneg i32 %9 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #5, !dbg !17
  %18 = bitcast i32 %17 to float, !dbg !17
  %19 = or disjoint i32 %9, 528, !dbg !18
  %20 = zext nneg i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #5, !dbg !20
  %23 = bitcast i32 %22 to float, !dbg !20
  %24 = or disjoint i32 %9, 16, !dbg !21
  %25 = zext nneg i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !23
  %28 = bitcast i32 %27 to float, !dbg !23
  %29 = or disjoint i32 %9, 544, !dbg !24
  %30 = zext nneg i32 %29 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !26
  %33 = bitcast i32 %32 to float, !dbg !26
  %34 = or disjoint i32 %9, 32, !dbg !27
  %35 = zext nneg i32 %34 to i64, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !28
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !29
  %38 = bitcast i32 %37 to float, !dbg !29
  %39 = or disjoint i32 %9, 560, !dbg !30
  %40 = zext nneg i32 %39 to i64, !dbg !31
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !31
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #5, !dbg !32
  %43 = bitcast i32 %42 to float, !dbg !32
  %44 = or disjoint i32 %9, 48, !dbg !33
  %45 = zext nneg i32 %44 to i64, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !34
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !35
  %48 = bitcast i32 %47 to float, !dbg !35
  %49 = fsub float %14, %18, !dbg !36
  %50 = fmul float %49, %49, !dbg !37
  %51 = fsub float %23, %28, !dbg !38
  %52 = fmul float %51, %51, !dbg !39
  %53 = fadd float %50, %52, !dbg !40
  %54 = fsub float %33, %38, !dbg !41
  %55 = fmul float %54, %54, !dbg !42
  %56 = fadd float %53, %55, !dbg !43
  %57 = fsub float %43, %48, !dbg !44
  %58 = fmul float %57, %57, !dbg !45
  %59 = fadd float %56, %58, !dbg !46
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %60, 0, !dbg !47
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !47
  %.not1.i = icmp eq i32 %61, 0, !dbg !47
  br i1 %.not.i, label %67, label %62, !dbg !47

62:                                               ; preds = %4
  br i1 %.not1.i, label %65, label %63, !dbg !47

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

67:                                               ; preds = %4
  br i1 %.not1.i, label %70, label %68, !dbg !47

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !47
  %72 = lshr i32 %5, 5, !dbg !10
  %73 = and i32 %5, 31, !dbg !10
  %74 = bitcast float %.0.i to i32, !dbg !48
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 16, i32 31), !dbg !48
  %76 = bitcast i32 %75 to float, !dbg !48
  %77 = fadd float %.0.i, %76, !dbg !52
  %78 = bitcast float %77 to i32, !dbg !48
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 8, i32 31), !dbg !48
  %80 = bitcast i32 %79 to float, !dbg !48
  %81 = fadd float %77, %80, !dbg !52
  %82 = bitcast float %81 to i32, !dbg !48
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 4, i32 31), !dbg !48
  %84 = bitcast i32 %83 to float, !dbg !48
  %85 = fadd float %81, %84, !dbg !52
  %86 = bitcast float %85 to i32, !dbg !48
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 2, i32 31), !dbg !48
  %88 = bitcast i32 %87 to float, !dbg !48
  %89 = fadd float %85, %88, !dbg !52
  %90 = bitcast float %89 to i32, !dbg !48
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !48
  %92 = bitcast i32 %91 to float, !dbg !48
  %93 = fadd float %89, %92, !dbg !52
  %94 = icmp eq i32 %73, 0, !dbg !48
  %95 = and i32 %72, 1, !dbg !48
  %96 = zext nneg i32 %95 to i64, !dbg !48
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i64 %96, !dbg !48
  %98 = bitcast float %93 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 %94) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %99 = icmp slt i32 %5, 2, !dbg !48
  %100 = sext i32 %5 to i64, !dbg !48
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i64 %100, !dbg !48
  %102 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %101, i1 %99) #5, !dbg !48
  %103 = bitcast i32 %102 to float, !dbg !48
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !48
  %105 = bitcast i32 %104 to float, !dbg !48
  %106 = fadd float %103, %105, !dbg !52
  %107 = and i32 %5, 1, !dbg !48
  %108 = icmp eq i32 %107, 0, !dbg !48
  %109 = and i1 %99, %108, !dbg !48
  %110 = bitcast float %106 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %110, i1 %109) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %111 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %urem = and i32 %5, 63, !dbg !54
  %112 = icmp eq i32 %urem, 0, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %2, i1 %112) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py", directory: "inductor_cache/zd")
!4 = !{ptr @triton_per_fused_linalg_vector_norm_mean_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_linalg_vector_norm_mean_sub_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_linalg_vector_norm_mean_sub_3", linkageName: "triton_per_fused_linalg_vector_norm_mean_sub_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 31, column: 44, scope: !7)
!13 = !DILocation(line: 31, column: 41, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 49, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 41, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 49, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 48, scope: !7)
!24 = !DILocation(line: 35, column: 41, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 49, scope: !7)
!27 = !DILocation(line: 36, column: 41, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 49, scope: !7)
!30 = !DILocation(line: 37, column: 42, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 50, scope: !7)
!33 = !DILocation(line: 38, column: 41, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 49, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 19, scope: !7)
!44 = !DILocation(line: 47, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 27, scope: !7)
!48 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!51 = !DILocation(line: 52, column: 26, scope: !7)
!52 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !51)
!53 = distinct !DILexicalBlockFile(scope: !49, file: !50, discriminator: 0)
!54 = !DILocation(line: 53, column: 68, scope: !7)
!55 = !DILocation(line: 53, column: 4, scope: !7)
