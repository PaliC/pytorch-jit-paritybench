#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":19:0)
#loc1 = loc(unknown)
#loc50 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":52:26)
#loc57 = loc(callsite(#loc1 at #loc50))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_linalg_vector_norm_mean_sub_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<48> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<560> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<32> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<544> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<528> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<512> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %2 = arith.remsi %1, %cst_6 : tensor<1x64xi32, #blocked> loc(#loc3)
    %3 = arith.divsi %1, %cst_6 : tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.addi %2, %cst_5 : tensor<1x64xi32, #blocked> loc(#loc5)
    %5 = arith.muli %3, %cst_4 : tensor<1x64xi32, #blocked> loc(#loc6)
    %6 = arith.addi %4, %5 : tensor<1x64xi32, #blocked> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.addptr %7, %6 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc8)
    %9 = tt.load %8 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = arith.addi %2, %5 : tensor<1x64xi32, #blocked> loc(#loc10)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = tt.addptr %11, %10 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc11)
    %13 = tt.load %12 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc12)
    %14 = arith.addi %2, %cst_3 : tensor<1x64xi32, #blocked> loc(#loc13)
    %15 = arith.addi %14, %5 : tensor<1x64xi32, #blocked> loc(#loc14)
    %16 = tt.addptr %7, %15 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc15)
    %17 = tt.load %16 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = arith.addi %2, %cst_6 : tensor<1x64xi32, #blocked> loc(#loc17)
    %19 = arith.addi %18, %5 : tensor<1x64xi32, #blocked> loc(#loc18)
    %20 = tt.addptr %11, %19 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc19)
    %21 = tt.load %20 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc20)
    %22 = arith.addi %2, %cst_2 : tensor<1x64xi32, #blocked> loc(#loc21)
    %23 = arith.addi %22, %5 : tensor<1x64xi32, #blocked> loc(#loc22)
    %24 = tt.addptr %7, %23 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc23)
    %25 = tt.load %24 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc24)
    %26 = arith.addi %2, %cst_1 : tensor<1x64xi32, #blocked> loc(#loc25)
    %27 = arith.addi %26, %5 : tensor<1x64xi32, #blocked> loc(#loc26)
    %28 = tt.addptr %11, %27 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc27)
    %29 = tt.load %28 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc28)
    %30 = arith.addi %2, %cst_0 : tensor<1x64xi32, #blocked> loc(#loc29)
    %31 = arith.addi %30, %5 : tensor<1x64xi32, #blocked> loc(#loc30)
    %32 = tt.addptr %7, %31 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc31)
    %33 = tt.load %32 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc32)
    %34 = arith.addi %2, %cst : tensor<1x64xi32, #blocked> loc(#loc33)
    %35 = arith.addi %34, %5 : tensor<1x64xi32, #blocked> loc(#loc34)
    %36 = tt.addptr %11, %35 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc35)
    %37 = tt.load %36 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc36)
    %38 = arith.subf %9, %13 : tensor<1x64xf32, #blocked> loc(#loc37)
    %39 = arith.mulf %38, %38 : tensor<1x64xf32, #blocked> loc(#loc38)
    %40 = arith.subf %17, %21 : tensor<1x64xf32, #blocked> loc(#loc39)
    %41 = arith.mulf %40, %40 : tensor<1x64xf32, #blocked> loc(#loc40)
    %42 = arith.addf %39, %41 : tensor<1x64xf32, #blocked> loc(#loc41)
    %43 = arith.subf %25, %29 : tensor<1x64xf32, #blocked> loc(#loc42)
    %44 = arith.mulf %43, %43 : tensor<1x64xf32, #blocked> loc(#loc43)
    %45 = arith.addf %42, %44 : tensor<1x64xf32, #blocked> loc(#loc44)
    %46 = arith.subf %33, %37 : tensor<1x64xf32, #blocked> loc(#loc45)
    %47 = arith.mulf %46, %46 : tensor<1x64xf32, #blocked> loc(#loc46)
    %48 = arith.addf %45, %47 : tensor<1x64xf32, #blocked> loc(#loc47)
    %49 = tt.extern_elementwise %48 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xf32, #blocked> loc(#loc48)
    %50 = "tt.reduce"(%49) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc50)), %arg5: f32 loc(callsite(#loc1 at #loc50))):
      %55 = arith.addf %arg4, %arg5 : f32 loc(#loc59)
      tt.reduce.return %55 : f32 loc(#loc56)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc56)
    %51 = triton_gpu.convert_layout %50 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc52)
    %52 = tt.expand_dims %51 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc52)
    %53 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc53)
    %54 = tt.splat %53 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc54)
    tt.store %54, %52 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc54)
    tt.return loc(#loc55)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":26:34)
#loc3 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":29:19)
#loc4 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":30:19)
#loc5 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":31:36)
#loc6 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":31:44)
#loc7 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":31:41)
#loc8 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":31:30)
#loc9 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":31:49)
#loc10 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":32:35)
#loc11 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":32:30)
#loc12 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":32:43)
#loc13 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":33:36)
#loc14 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":33:41)
#loc15 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":33:30)
#loc16 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":33:49)
#loc17 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":34:35)
#loc18 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":34:40)
#loc19 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":34:30)
#loc20 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":34:48)
#loc21 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":35:36)
#loc22 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":35:41)
#loc23 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":35:30)
#loc24 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":35:49)
#loc25 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":36:36)
#loc26 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":36:41)
#loc27 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":36:31)
#loc28 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":36:49)
#loc29 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":37:37)
#loc30 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":37:42)
#loc31 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":37:31)
#loc32 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":37:50)
#loc33 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":38:36)
#loc34 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":38:41)
#loc35 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":38:31)
#loc36 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":38:49)
#loc37 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":39:18)
#loc38 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":40:18)
#loc39 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":41:18)
#loc40 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":42:18)
#loc41 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":43:18)
#loc42 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":44:19)
#loc43 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":45:20)
#loc44 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":46:19)
#loc45 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":47:20)
#loc46 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":48:20)
#loc47 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":49:20)
#loc48 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":50:27)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc52 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":52:29)
#loc53 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":53:25)
#loc54 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":53:68)
#loc55 = loc("inductor_cache/zd/czdi25dgaofhlbtbinpnu6ko3p4mdpyl44s7rjvnltiywd4btelt.py":53:4)
#loc56 = loc(callsite(#loc49 at #loc50))
#loc58 = loc(callsite(#loc51 at #loc49))
#loc59 = loc(callsite(#loc58 at #loc50))
