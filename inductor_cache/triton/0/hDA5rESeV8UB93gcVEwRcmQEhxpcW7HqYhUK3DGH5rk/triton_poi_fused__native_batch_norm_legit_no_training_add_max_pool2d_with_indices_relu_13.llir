; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 46592, !dbg !14
  %18 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %19 = shufflevector <2 x i32> %18, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %20 = sdiv <2 x i32> %19, <i32 2912, i32 728>, !dbg !15
  %21 = srem <2 x i32> %20, splat (i32 4), !dbg !16
  %22 = srem i32 %16, 728, !dbg !17
  %23 = sext i32 %16 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %17) #3, !dbg !19
  %26 = sext i32 %22 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %17) #3, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %17) #3, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !27
  %43 = extractelement <2 x i32> %21, i64 0, !dbg !28
  %44 = icmp sgt i32 %43, 0, !dbg !29
  %45 = extractelement <2 x i32> %21, i64 1, !dbg !28
  %46 = icmp sgt i32 %45, 0, !dbg !30
  %47 = and i1 %44, %46, !dbg !31
  %48 = mul nsw i32 %45, 1456, !dbg !32
  %49 = extractelement <2 x i32> %20, i64 0, !dbg !33
  %50 = mul i32 %49, 11648, !dbg !33
  %51 = add i32 %50, %22, !dbg !34
  %52 = add i32 %51, -6552, !dbg !35
  %53 = add i32 %52, %48, !dbg !36
  %54 = sext i32 %53 to i64, !dbg !37
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !37
  %56 = and i1 %17, %47, !dbg !38
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56) #3, !dbg !39
  %58 = icmp sgt i32 %45, -1, !dbg !40
  %59 = and i1 %44, %58, !dbg !41
  %60 = add i32 %51, -5824, !dbg !42
  %61 = add i32 %60, %48, !dbg !43
  %62 = sext i32 %61 to i64, !dbg !44
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !44
  %64 = and i1 %17, %59, !dbg !45
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %64, i32 -8388608, i1 %64, i32 -8388608, i1 %64, i32 -8388608, i1 %64, i32 -8388608, i1 %64) #3, !dbg !46
  %66 = add i32 %51, -5096, !dbg !47
  %67 = add i32 %66, %48, !dbg !48
  %68 = sext i32 %67 to i64, !dbg !49
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !49
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %64, i32 -8388608, i1 %64, i32 -8388608, i1 %64, i32 -8388608, i1 %64, i32 -8388608, i1 %64) #3, !dbg !50
  %71 = icmp sgt i32 %43, -1, !dbg !51
  %72 = and i1 %71, %46, !dbg !52
  %73 = add i32 %51, -728, !dbg !53
  %74 = add i32 %73, %48, !dbg !54
  %75 = sext i32 %74 to i64, !dbg !55
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !55
  %77 = and i1 %17, %72, !dbg !56
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77) #3, !dbg !57
  %79 = or i32 %43, %45, !dbg !28
  %80 = icmp sgt i32 %79, -1, !dbg !28
  %81 = add i32 %51, %48, !dbg !58
  %82 = sext i32 %81 to i64, !dbg !59
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !59
  %84 = and i1 %17, %80, !dbg !60
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84) #3, !dbg !61
  %86 = add i32 %51, 728, !dbg !62
  %87 = add i32 %86, %48, !dbg !63
  %88 = sext i32 %87 to i64, !dbg !64
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !64
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84) #3, !dbg !65
  %91 = add i32 %51, 5096, !dbg !66
  %92 = add i32 %91, %48, !dbg !67
  %93 = sext i32 %92 to i64, !dbg !68
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !68
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77, i32 -8388608, i1 %77) #3, !dbg !69
  %96 = add i32 %51, 5824, !dbg !70
  %97 = add i32 %96, %48, !dbg !71
  %98 = sext i32 %97 to i64, !dbg !72
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !72
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84) #3, !dbg !73
  %101 = add i32 %51, 6552, !dbg !74
  %102 = add i32 %101, %48, !dbg !75
  %103 = sext i32 %102 to i64, !dbg !76
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !76
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %104, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84) #3, !dbg !77
  %106 = fadd float %35, 0x3EE4F8B580000000, !dbg !78
  %107 = fadd float %36, 0x3EE4F8B580000000, !dbg !78
  %108 = fadd float %37, 0x3EE4F8B580000000, !dbg !78
  %109 = fadd float %38, 0x3EE4F8B580000000, !dbg !78
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i = icmp eq i32 %110, 0, !dbg !79
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i = icmp eq i32 %111, 0, !dbg !79
  br i1 %.not.i, label %117, label %112, !dbg !79

112:                                              ; preds = %10
  br i1 %.not1.i, label %115, label %113, !dbg !79

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

117:                                              ; preds = %10
  br i1 %.not1.i, label %120, label %118, !dbg !79

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

__nv_sqrtf.exit:                                  ; preds = %113, %115, %118, %120
  %.0.i = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !79
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i1 = icmp eq i32 %122, 0, !dbg !79
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i4 = icmp eq i32 %123, 0, !dbg !79
  br i1 %.not.i1, label %129, label %124, !dbg !79

124:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %127, label %125, !dbg !79

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !79
  br label %__nv_sqrtf.exit5, !dbg !79

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !79
  br label %__nv_sqrtf.exit5, !dbg !79

129:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %132, label %130, !dbg !79

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !79
  br label %__nv_sqrtf.exit5, !dbg !79

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !79
  br label %__nv_sqrtf.exit5, !dbg !79

__nv_sqrtf.exit5:                                 ; preds = %125, %127, %130, %132
  %.0.i3 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !79
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i6 = icmp eq i32 %134, 0, !dbg !79
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i9 = icmp eq i32 %135, 0, !dbg !79
  br i1 %.not.i6, label %141, label %136, !dbg !79

136:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %139, label %137, !dbg !79

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !79
  br label %__nv_sqrtf.exit10, !dbg !79

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !79
  br label %__nv_sqrtf.exit10, !dbg !79

141:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %144, label %142, !dbg !79

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !79
  br label %__nv_sqrtf.exit10, !dbg !79

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !79
  br label %__nv_sqrtf.exit10, !dbg !79

__nv_sqrtf.exit10:                                ; preds = %137, %139, %142, %144
  %.0.i8 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !79
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i11 = icmp eq i32 %146, 0, !dbg !79
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i14 = icmp eq i32 %147, 0, !dbg !79
  br i1 %.not.i11, label %153, label %148, !dbg !79

148:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %151, label %149, !dbg !79

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !79
  br label %__nv_sqrtf.exit15, !dbg !79

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !79
  br label %__nv_sqrtf.exit15, !dbg !79

153:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %156, label %154, !dbg !79

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !79
  br label %__nv_sqrtf.exit15, !dbg !79

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !79
  br label %__nv_sqrtf.exit15, !dbg !79

__nv_sqrtf.exit15:                                ; preds = %149, %151, %154, %156
  %.0.i13 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !79
  %158 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %159 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %160 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %161 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %162 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %163 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %164 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %165 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %166 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !46
  %167 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !39
  %168 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !50
  %169 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !57
  %170 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !61
  %171 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !65
  %172 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !69
  %173 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !73
  %174 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !77
  %175 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !46
  %176 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !39
  %177 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !50
  %178 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !57
  %179 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !61
  %180 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !65
  %181 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !69
  %182 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !73
  %183 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !77
  %184 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !46
  %185 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !39
  %186 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !50
  %187 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !57
  %188 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !61
  %189 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !65
  %190 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !69
  %191 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !73
  %192 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !77
  %193 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !46
  %194 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !39
  %195 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !50
  %196 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !57
  %197 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !61
  %198 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !65
  %199 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !69
  %200 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !73
  %201 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !77
  %202 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !46
  %203 = insertelement <4 x i32> %202, i32 %184, i64 1, !dbg !46
  %204 = insertelement <4 x i32> %203, i32 %175, i64 2, !dbg !46
  %205 = insertelement <4 x i32> %204, i32 %166, i64 3, !dbg !46
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !46
  %207 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !39
  %208 = insertelement <4 x i32> %207, i32 %185, i64 1, !dbg !39
  %209 = insertelement <4 x i32> %208, i32 %176, i64 2, !dbg !39
  %210 = insertelement <4 x i32> %209, i32 %167, i64 3, !dbg !39
  %211 = bitcast <4 x i32> %210 to <4 x float>, !dbg !39
  %212 = fcmp ogt <4 x float> %206, %211, !dbg !80
  %213 = insertelement <4 x i32> poison, i32 %196, i64 0, !dbg !57
  %214 = insertelement <4 x i32> %213, i32 %187, i64 1, !dbg !57
  %215 = insertelement <4 x i32> %214, i32 %178, i64 2, !dbg !57
  %216 = insertelement <4 x i32> %215, i32 %169, i64 3, !dbg !57
  %217 = bitcast <4 x i32> %216 to <4 x float>, !dbg !57
  %218 = fcmp uno <4 x float> %206, zeroinitializer, !dbg !84
  %219 = or <4 x i1> %212, %218, !dbg !85
  %.v = select <4 x i1> %219, <4 x i32> %205, <4 x i32> %210, !dbg !86
  %220 = bitcast <4 x i32> %.v to <4 x float>, !dbg !86
  %221 = insertelement <4 x i32> poison, i32 %195, i64 0, !dbg !50
  %222 = insertelement <4 x i32> %221, i32 %186, i64 1, !dbg !50
  %223 = insertelement <4 x i32> %222, i32 %177, i64 2, !dbg !50
  %224 = insertelement <4 x i32> %223, i32 %168, i64 3, !dbg !50
  %225 = bitcast <4 x i32> %224 to <4 x float>, !dbg !50
  %226 = fcmp olt <4 x float> %220, %225, !dbg !87
  %227 = fcmp uno <4 x float> %225, zeroinitializer, !dbg !89
  %228 = or <4 x i1> %227, %226, !dbg !90
  %.v16 = select <4 x i1> %228, <4 x i32> %224, <4 x i32> %.v, !dbg !91
  %229 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !91
  %230 = fcmp olt <4 x float> %229, %217, !dbg !92
  %231 = insertelement <4 x i32> poison, i32 %197, i64 0, !dbg !61
  %232 = insertelement <4 x i32> %231, i32 %188, i64 1, !dbg !61
  %233 = insertelement <4 x i32> %232, i32 %179, i64 2, !dbg !61
  %234 = insertelement <4 x i32> %233, i32 %170, i64 3, !dbg !61
  %235 = bitcast <4 x i32> %234 to <4 x float>, !dbg !61
  %236 = fcmp uno <4 x float> %217, zeroinitializer, !dbg !94
  %237 = or <4 x i1> %236, %230, !dbg !95
  %.v17 = select <4 x i1> %237, <4 x i32> %216, <4 x i32> %.v16, !dbg !96
  %238 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !96
  %239 = fcmp olt <4 x float> %238, %235, !dbg !97
  %240 = fcmp uno <4 x float> %235, zeroinitializer, !dbg !99
  %241 = or <4 x i1> %240, %239, !dbg !100
  %.v18 = select <4 x i1> %241, <4 x i32> %234, <4 x i32> %.v17, !dbg !101
  %242 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !101
  %243 = insertelement <4 x i32> poison, i32 %198, i64 0, !dbg !65
  %244 = insertelement <4 x i32> %243, i32 %189, i64 1, !dbg !65
  %245 = insertelement <4 x i32> %244, i32 %180, i64 2, !dbg !65
  %246 = insertelement <4 x i32> %245, i32 %171, i64 3, !dbg !65
  %247 = bitcast <4 x i32> %246 to <4 x float>, !dbg !65
  %248 = fcmp olt <4 x float> %242, %247, !dbg !102
  %249 = fcmp uno <4 x float> %247, zeroinitializer, !dbg !104
  %250 = or <4 x i1> %249, %248, !dbg !105
  %.v19 = select <4 x i1> %250, <4 x i32> %246, <4 x i32> %.v18, !dbg !106
  %251 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !106
  %252 = insertelement <4 x i32> poison, i32 %199, i64 0, !dbg !69
  %253 = insertelement <4 x i32> %252, i32 %190, i64 1, !dbg !69
  %254 = insertelement <4 x i32> %253, i32 %181, i64 2, !dbg !69
  %255 = insertelement <4 x i32> %254, i32 %172, i64 3, !dbg !69
  %256 = bitcast <4 x i32> %255 to <4 x float>, !dbg !69
  %257 = fcmp olt <4 x float> %251, %256, !dbg !107
  %258 = fcmp uno <4 x float> %256, zeroinitializer, !dbg !109
  %259 = or <4 x i1> %258, %257, !dbg !110
  %.v20 = select <4 x i1> %259, <4 x i32> %255, <4 x i32> %.v19, !dbg !111
  %260 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !111
  %261 = insertelement <4 x i32> poison, i32 %200, i64 0, !dbg !73
  %262 = insertelement <4 x i32> %261, i32 %191, i64 1, !dbg !73
  %263 = insertelement <4 x i32> %262, i32 %182, i64 2, !dbg !73
  %264 = insertelement <4 x i32> %263, i32 %173, i64 3, !dbg !73
  %265 = bitcast <4 x i32> %264 to <4 x float>, !dbg !73
  %266 = fcmp olt <4 x float> %260, %265, !dbg !112
  %267 = fcmp uno <4 x float> %265, zeroinitializer, !dbg !114
  %268 = or <4 x i1> %267, %266, !dbg !115
  %.v21 = select <4 x i1> %268, <4 x i32> %264, <4 x i32> %.v20, !dbg !116
  %269 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !116
  %270 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !77
  %271 = insertelement <4 x i32> %270, i32 %192, i64 1, !dbg !77
  %272 = insertelement <4 x i32> %271, i32 %183, i64 2, !dbg !77
  %273 = insertelement <4 x i32> %272, i32 %174, i64 3, !dbg !77
  %274 = bitcast <4 x i32> %273 to <4 x float>, !dbg !77
  %275 = fcmp olt <4 x float> %269, %274, !dbg !117
  %276 = zext <4 x i1> %212 to <4 x i8>, !dbg !119
  %277 = select <4 x i1> %226, <4 x i8> splat (i8 2), <4 x i8> %276, !dbg !120
  %278 = select <4 x i1> %230, <4 x i8> splat (i8 3), <4 x i8> %277, !dbg !121
  %279 = select <4 x i1> %239, <4 x i8> splat (i8 4), <4 x i8> %278, !dbg !122
  %280 = select <4 x i1> %248, <4 x i8> splat (i8 5), <4 x i8> %279, !dbg !123
  %281 = select <4 x i1> %257, <4 x i8> splat (i8 6), <4 x i8> %280, !dbg !124
  %282 = select <4 x i1> %266, <4 x i8> splat (i8 7), <4 x i8> %281, !dbg !125
  %283 = select <4 x i1> %275, <4 x i8> splat (i8 8), <4 x i8> %282, !dbg !126
  %284 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %285 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %286 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %287 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %288 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %289 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %290 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %291 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !127
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !127
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !127
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !127
  %296 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !19
  %297 = insertelement <4 x i32> %296, i32 %162, i64 1, !dbg !19
  %298 = insertelement <4 x i32> %297, i32 %160, i64 2, !dbg !19
  %299 = insertelement <4 x i32> %298, i32 %158, i64 3, !dbg !19
  %300 = bitcast <4 x i32> %299 to <4 x float>, !dbg !19
  %301 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !21
  %302 = insertelement <4 x i32> %301, i32 %163, i64 1, !dbg !21
  %303 = insertelement <4 x i32> %302, i32 %161, i64 2, !dbg !21
  %304 = insertelement <4 x i32> %303, i32 %159, i64 3, !dbg !21
  %305 = bitcast <4 x i32> %304 to <4 x float>, !dbg !21
  %306 = fsub <4 x float> %300, %305, !dbg !128
  %307 = fcmp uno <4 x float> %274, zeroinitializer, !dbg !129
  %308 = or <4 x i1> %307, %275, !dbg !130
  %.v22 = select <4 x i1> %308, <4 x i32> %273, <4 x i32> %.v21, !dbg !131
  %309 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !131
  %310 = insertelement <4 x i32> poison, i32 %287, i64 0, !dbg !27
  %311 = insertelement <4 x i32> %310, i32 %286, i64 1, !dbg !27
  %312 = insertelement <4 x i32> %311, i32 %285, i64 2, !dbg !27
  %313 = insertelement <4 x i32> %312, i32 %284, i64 3, !dbg !27
  %314 = bitcast <4 x i32> %313 to <4 x float>, !dbg !27
  %315 = insertelement <4 x i32> poison, i32 %291, i64 0, !dbg !25
  %316 = insertelement <4 x i32> %315, i32 %290, i64 1, !dbg !25
  %317 = insertelement <4 x i32> %316, i32 %289, i64 2, !dbg !25
  %318 = insertelement <4 x i32> %317, i32 %288, i64 3, !dbg !25
  %319 = bitcast <4 x i32> %318 to <4 x float>, !dbg !25
  %320 = insertelement <4 x float> poison, float %292, i64 0, !dbg !132
  %321 = insertelement <4 x float> %320, float %293, i64 1, !dbg !132
  %322 = insertelement <4 x float> %321, float %294, i64 2, !dbg !132
  %323 = insertelement <4 x float> %322, float %295, i64 3, !dbg !132
  %324 = fmul <4 x float> %306, %323, !dbg !132
  %325 = fmul <4 x float> %324, %319, !dbg !133
  %326 = fadd <4 x float> %325, %314, !dbg !134
  %327 = fadd <4 x float> %326, %309, !dbg !135
  %328 = fcmp olt <4 x float> %327, zeroinitializer, !dbg !136
  %329 = extractelement <4 x i1> %328, i64 0, !dbg !138
  %330 = extractelement <4 x float> %327, i64 0, !dbg !139
  %331 = extractelement <4 x i1> %328, i64 1, !dbg !138
  %332 = extractelement <4 x float> %327, i64 1, !dbg !139
  %333 = extractelement <4 x i1> %328, i64 2, !dbg !138
  %334 = extractelement <4 x float> %327, i64 2, !dbg !139
  %335 = extractelement <4 x i1> %328, i64 3, !dbg !138
  %336 = extractelement <4 x float> %327, i64 3, !dbg !139
  %337 = getelementptr i8, ptr addrspace(1) %7, i64 %23, !dbg !140
  %338 = bitcast <4 x i8> %283 to i32, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %338, ptr addrspace(1) %337, i1 %17) #3, !dbg !141
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !142
  %340 = bitcast float %330 to i32, !dbg !139
  %341 = bitcast float %332 to i32, !dbg !139
  %342 = bitcast float %334 to i32, !dbg !139
  %343 = bitcast float %336 to i32, !dbg !139
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %341, i32 %342, i32 %343, ptr addrspace(1) %339, i1 %17) #3, !dbg !139
  %344 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !143
  %345 = bitcast float %330 to i32, !dbg !144
  %346 = select i1 %329, i32 0, i32 %345, !dbg !138
  %347 = bitcast float %332 to i32, !dbg !144
  %348 = select i1 %331, i32 0, i32 %347, !dbg !138
  %349 = bitcast float %334 to i32, !dbg !144
  %350 = select i1 %333, i32 0, i32 %349, !dbg !138
  %351 = bitcast float %336 to i32, !dbg !144
  %352 = select i1 %335, i32 0, i32 %351, !dbg !138
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %346, i32 %348, i32 %350, i32 %352, ptr addrspace(1) %344, i1 %17) #3, !dbg !144
  ret void, !dbg !145
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cig6dcvobucbyozpxavafnbneswdps5yoyrd3jjcnxsibzspyl4m.py", directory: "inductor_cache/ig")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 31, scope: !7)
!19 = !DILocation(line: 29, column: 36, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 67, column: 20, scope: !7)
!29 = !DILocation(line: 36, column: 19, scope: !7)
!30 = !DILocation(line: 41, column: 19, scope: !7)
!31 = !DILocation(line: 44, column: 19, scope: !7)
!32 = !DILocation(line: 45, column: 51, scope: !7)
!33 = !DILocation(line: 45, column: 62, scope: !7)
!34 = !DILocation(line: 45, column: 41, scope: !7)
!35 = !DILocation(line: 45, column: 46, scope: !7)
!36 = !DILocation(line: 45, column: 56, scope: !7)
!37 = !DILocation(line: 45, column: 31, scope: !7)
!38 = !DILocation(line: 45, column: 75, scope: !7)
!39 = !DILocation(line: 45, column: 67, scope: !7)
!40 = !DILocation(line: 47, column: 21, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 46, scope: !7)
!43 = !DILocation(line: 51, column: 56, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 75, scope: !7)
!46 = !DILocation(line: 51, column: 67, scope: !7)
!47 = !DILocation(line: 58, column: 46, scope: !7)
!48 = !DILocation(line: 58, column: 56, scope: !7)
!49 = !DILocation(line: 58, column: 31, scope: !7)
!50 = !DILocation(line: 58, column: 67, scope: !7)
!51 = !DILocation(line: 61, column: 21, scope: !7)
!52 = !DILocation(line: 64, column: 20, scope: !7)
!53 = !DILocation(line: 65, column: 45, scope: !7)
!54 = !DILocation(line: 65, column: 55, scope: !7)
!55 = !DILocation(line: 65, column: 31, scope: !7)
!56 = !DILocation(line: 65, column: 74, scope: !7)
!57 = !DILocation(line: 65, column: 66, scope: !7)
!58 = !DILocation(line: 68, column: 46, scope: !7)
!59 = !DILocation(line: 68, column: 31, scope: !7)
!60 = !DILocation(line: 68, column: 65, scope: !7)
!61 = !DILocation(line: 68, column: 57, scope: !7)
!62 = !DILocation(line: 71, column: 42, scope: !7)
!63 = !DILocation(line: 71, column: 52, scope: !7)
!64 = !DILocation(line: 71, column: 31, scope: !7)
!65 = !DILocation(line: 71, column: 63, scope: !7)
!66 = !DILocation(line: 78, column: 43, scope: !7)
!67 = !DILocation(line: 78, column: 53, scope: !7)
!68 = !DILocation(line: 78, column: 31, scope: !7)
!69 = !DILocation(line: 78, column: 64, scope: !7)
!70 = !DILocation(line: 81, column: 43, scope: !7)
!71 = !DILocation(line: 81, column: 53, scope: !7)
!72 = !DILocation(line: 81, column: 31, scope: !7)
!73 = !DILocation(line: 81, column: 64, scope: !7)
!74 = !DILocation(line: 84, column: 43, scope: !7)
!75 = !DILocation(line: 84, column: 53, scope: !7)
!76 = !DILocation(line: 84, column: 31, scope: !7)
!77 = !DILocation(line: 84, column: 64, scope: !7)
!78 = !DILocation(line: 113, column: 20, scope: !7)
!79 = !DILocation(line: 114, column: 27, scope: !7)
!80 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlockFile(scope: !7, file: !82, discriminator: 0)
!82 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!83 = !DILocation(line: 52, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !88)
!88 = !DILocation(line: 59, column: 42, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !93)
!93 = !DILocation(line: 66, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !98)
!98 = !DILocation(line: 69, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !103)
!103 = !DILocation(line: 72, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !103)
!106 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !103)
!107 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !108)
!108 = !DILocation(line: 79, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !108)
!112 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !113)
!113 = !DILocation(line: 82, column: 42, scope: !7)
!114 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !113)
!115 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !113)
!116 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !113)
!117 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !118)
!118 = !DILocation(line: 85, column: 42, scope: !7)
!119 = !DILocation(line: 89, column: 35, scope: !7)
!120 = !DILocation(line: 92, column: 35, scope: !7)
!121 = !DILocation(line: 95, column: 35, scope: !7)
!122 = !DILocation(line: 98, column: 35, scope: !7)
!123 = !DILocation(line: 101, column: 35, scope: !7)
!124 = !DILocation(line: 104, column: 35, scope: !7)
!125 = !DILocation(line: 107, column: 35, scope: !7)
!126 = !DILocation(line: 110, column: 35, scope: !7)
!127 = !DILocation(line: 116, column: 20, scope: !7)
!128 = !DILocation(line: 111, column: 20, scope: !7)
!129 = !DILocation(line: 120, column: 21, scope: !81, inlinedAt: !118)
!130 = !DILocation(line: 120, column: 16, scope: !81, inlinedAt: !118)
!131 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !118)
!132 = !DILocation(line: 119, column: 20, scope: !7)
!133 = !DILocation(line: 120, column: 20, scope: !7)
!134 = !DILocation(line: 121, column: 20, scope: !7)
!135 = !DILocation(line: 122, column: 20, scope: !7)
!136 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !137)
!137 = !DILocation(line: 124, column: 42, scope: !7)
!138 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !137)
!139 = !DILocation(line: 126, column: 40, scope: !7)
!140 = !DILocation(line: 125, column: 25, scope: !7)
!141 = !DILocation(line: 125, column: 37, scope: !7)
!142 = !DILocation(line: 126, column: 28, scope: !7)
!143 = !DILocation(line: 127, column: 25, scope: !7)
!144 = !DILocation(line: 127, column: 37, scope: !7)
!145 = !DILocation(line: 127, column: 4, scope: !7)
