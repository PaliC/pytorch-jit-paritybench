; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 510, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %8, 1, !dbg !13
  %14 = srem i32 %13, 2, !dbg !14
  %15 = sdiv i32 %12, 4, !dbg !15
  %16 = srem i32 %15, 512, !dbg !16
  %17 = shl nsw i32 %14, 2, !dbg !17
  %18 = shl i32 %12, 4, !dbg !18
  %19 = add i32 %17, %18, !dbg !19
  %20 = sext i32 %18 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !20
  %22 = sext i32 %19 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %26 = or disjoint i32 %18, 1, !dbg !22
  %27 = or disjoint i32 %19, 1, !dbg !22
  %28 = sext i32 %26 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = sext i32 %27 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !24
  %34 = or disjoint i32 %18, 2, !dbg !25
  %35 = or disjoint i32 %19, 2, !dbg !25
  %36 = sext i32 %34 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = sext i32 %35 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !27
  %42 = or disjoint i32 %18, 3, !dbg !28
  %43 = or disjoint i32 %19, 3, !dbg !28
  %44 = sext i32 %42 to i64, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !29
  %46 = sext i32 %43 to i64, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !30
  %50 = or disjoint i32 %18, 8, !dbg !31
  %51 = add i32 %19, 8, !dbg !31
  %52 = sext i32 %50 to i64, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !32
  %54 = sext i32 %51 to i64, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !33
  %58 = or disjoint i32 %18, 9, !dbg !34
  %59 = add i32 %19, 9, !dbg !34
  %60 = sext i32 %58 to i64, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !35
  %62 = sext i32 %59 to i64, !dbg !35
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !36
  %66 = or disjoint i32 %18, 10, !dbg !37
  %67 = add i32 %19, 10, !dbg !37
  %68 = sext i32 %66 to i64, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !38
  %70 = sext i32 %67 to i64, !dbg !38
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !38
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !39
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !39
  %74 = or disjoint i32 %18, 11, !dbg !40
  %75 = add i32 %19, 11, !dbg !40
  %76 = sext i32 %74 to i64, !dbg !41
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !41
  %78 = sext i32 %75 to i64, !dbg !41
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !41
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !42
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !42
  %82 = or disjoint i32 %18, 16, !dbg !43
  %83 = add i32 %19, 16, !dbg !43
  %84 = sext i32 %82 to i64, !dbg !44
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !44
  %86 = sext i32 %83 to i64, !dbg !44
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !44
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !45
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !45
  %90 = or disjoint i32 %18, 17, !dbg !46
  %91 = add i32 %19, 17, !dbg !46
  %92 = sext i32 %90 to i64, !dbg !47
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !47
  %94 = sext i32 %91 to i64, !dbg !47
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !47
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !48
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !48
  %98 = or disjoint i32 %18, 18, !dbg !49
  %99 = add i32 %19, 18, !dbg !49
  %100 = sext i32 %98 to i64, !dbg !50
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !50
  %102 = sext i32 %99 to i64, !dbg !50
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !50
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !51
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !51
  %106 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !51
  %107 = insertelement <2 x i32> %106, i32 %105, i64 1, !dbg !51
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !51
  %109 = or disjoint i32 %18, 19, !dbg !52
  %110 = add i32 %19, 19, !dbg !52
  %111 = sext i32 %109 to i64, !dbg !53
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !53
  %113 = sext i32 %110 to i64, !dbg !53
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !53
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #1, !dbg !54
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #1, !dbg !54
  %117 = or disjoint i32 %18, 24, !dbg !55
  %118 = add i32 %19, 24, !dbg !55
  %119 = sext i32 %117 to i64, !dbg !56
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !56
  %121 = sext i32 %118 to i64, !dbg !56
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !56
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #1, !dbg !57
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !57
  %125 = or disjoint i32 %18, 25, !dbg !58
  %126 = add i32 %19, 25, !dbg !58
  %127 = sext i32 %125 to i64, !dbg !59
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !59
  %129 = sext i32 %126 to i64, !dbg !59
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !59
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !60
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #1, !dbg !60
  %133 = or disjoint i32 %18, 26, !dbg !61
  %134 = add i32 %19, 26, !dbg !61
  %135 = sext i32 %133 to i64, !dbg !62
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !62
  %137 = sext i32 %134 to i64, !dbg !62
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !62
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !63
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #1, !dbg !63
  %141 = or disjoint i32 %18, 27, !dbg !64
  %142 = add i32 %19, 27, !dbg !64
  %143 = sext i32 %141 to i64, !dbg !65
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !65
  %145 = sext i32 %142 to i64, !dbg !65
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !65
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !66
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !66
  %149 = sext i32 %15 to i64, !dbg !67
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !67
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !68
  %152 = bitcast i32 %151 to float, !dbg !68
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !68
  %154 = bitcast i32 %153 to float, !dbg !68
  %155 = sext i32 %16 to i64, !dbg !69
  %156 = getelementptr float, ptr addrspace(1) %2, i64 %155, !dbg !69
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !70
  %158 = bitcast i32 %157 to float, !dbg !70
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !70
  %160 = bitcast i32 %159 to float, !dbg !70
  %161 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !21
  %162 = insertelement <2 x i32> %161, i32 %25, i64 1, !dbg !21
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !21
  %164 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !24
  %165 = insertelement <2 x i32> %164, i32 %33, i64 1, !dbg !24
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !24
  %167 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !27
  %168 = insertelement <2 x i32> %167, i32 %41, i64 1, !dbg !27
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !27
  %170 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !30
  %171 = insertelement <2 x i32> %170, i32 %49, i64 1, !dbg !30
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !30
  %173 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !33
  %174 = insertelement <2 x i32> %173, i32 %57, i64 1, !dbg !33
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !33
  %176 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !36
  %177 = insertelement <2 x i32> %176, i32 %65, i64 1, !dbg !36
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !36
  %179 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !39
  %180 = insertelement <2 x i32> %179, i32 %73, i64 1, !dbg !39
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !39
  %182 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !42
  %183 = insertelement <2 x i32> %182, i32 %81, i64 1, !dbg !42
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !42
  %185 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !45
  %186 = insertelement <2 x i32> %185, i32 %89, i64 1, !dbg !45
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !45
  %188 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !48
  %189 = insertelement <2 x i32> %188, i32 %97, i64 1, !dbg !48
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !48
  %191 = fadd <2 x float> %163, %166, !dbg !71
  %192 = fadd <2 x float> %191, %169, !dbg !72
  %193 = fadd <2 x float> %192, %172, !dbg !73
  %194 = fadd <2 x float> %193, %175, !dbg !74
  %195 = fadd <2 x float> %194, %178, !dbg !75
  %196 = fadd <2 x float> %195, %181, !dbg !76
  %197 = fadd <2 x float> %196, %184, !dbg !77
  %198 = fadd <2 x float> %197, %187, !dbg !78
  %199 = fadd <2 x float> %198, %190, !dbg !79
  %200 = fadd float %152, %158, !dbg !80
  %201 = fadd float %154, %160, !dbg !80
  %202 = sext i32 %12 to i64, !dbg !81
  %203 = getelementptr float, ptr addrspace(1) %3, i64 %202, !dbg !81
  %204 = getelementptr i1, ptr addrspace(1) %4, i64 %202, !dbg !82
  %205 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !54
  %206 = insertelement <2 x i32> %205, i32 %116, i64 1, !dbg !54
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !54
  %208 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !57
  %209 = insertelement <2 x i32> %208, i32 %124, i64 1, !dbg !57
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !57
  %211 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !60
  %212 = insertelement <2 x i32> %211, i32 %132, i64 1, !dbg !60
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !60
  %214 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !63
  %215 = insertelement <2 x i32> %214, i32 %140, i64 1, !dbg !63
  %216 = bitcast <2 x i32> %215 to <2 x float>, !dbg !63
  %217 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !66
  %218 = insertelement <2 x i32> %217, i32 %148, i64 1, !dbg !66
  %219 = bitcast <2 x i32> %218 to <2 x float>, !dbg !66
  %220 = fadd <2 x float> %199, %108, !dbg !83
  %221 = fadd <2 x float> %220, %207, !dbg !84
  %222 = fadd <2 x float> %221, %210, !dbg !85
  %223 = fadd <2 x float> %222, %213, !dbg !86
  %224 = fadd <2 x float> %223, %216, !dbg !87
  %225 = fadd <2 x float> %224, %219, !dbg !88
  %226 = fmul <2 x float> %225, splat (float 6.250000e-02), !dbg !89
  %227 = fcmp olt <2 x float> %226, zeroinitializer, !dbg !90
  %228 = select <2 x i1> %227, <2 x float> zeroinitializer, <2 x float> %226, !dbg !94
  %229 = extractelement <2 x float> %228, i64 0, !dbg !95
  %230 = fadd float %229, %200, !dbg !95
  %231 = extractelement <2 x float> %228, i64 1, !dbg !95
  %232 = fadd float %231, %201, !dbg !95
  %233 = fcmp ole <2 x float> %228, zeroinitializer, !dbg !96
  %234 = bitcast float %230 to i32, !dbg !97
  %235 = bitcast float %232 to i32, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %234, i32 %235, ptr addrspace(1) %203, i1 true) #1, !dbg !97
  %236 = zext <2 x i1> %233 to <2 x i8>, !dbg !98
  %237 = bitcast <2 x i8> %236 to i16, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %237, ptr addrspace(1) %204, i1 true) #1, !dbg !98
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5n73dhkgjqpaabxovrqdhqskaq2estbuyfl5wstufwixfwppjyi.py", directory: "inductor_cache/5n")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_relu_threshold_backward_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_relu_threshold_backward_12", linkageName: "triton_poi_fused_add_avg_pool2d_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 26, scope: !7)
!17 = !DILocation(line: 29, column: 32, scope: !7)
!18 = !DILocation(line: 29, column: 40, scope: !7)
!19 = !DILocation(line: 29, column: 37, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 45, scope: !7)
!22 = !DILocation(line: 30, column: 41, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 49, scope: !7)
!25 = !DILocation(line: 31, column: 41, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 49, scope: !7)
!28 = !DILocation(line: 32, column: 41, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 49, scope: !7)
!31 = !DILocation(line: 33, column: 41, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 49, scope: !7)
!34 = !DILocation(line: 34, column: 41, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 49, scope: !7)
!37 = !DILocation(line: 35, column: 43, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 51, scope: !7)
!40 = !DILocation(line: 36, column: 43, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 51, scope: !7)
!43 = !DILocation(line: 37, column: 43, scope: !7)
!44 = !DILocation(line: 37, column: 31, scope: !7)
!45 = !DILocation(line: 37, column: 51, scope: !7)
!46 = !DILocation(line: 38, column: 43, scope: !7)
!47 = !DILocation(line: 38, column: 31, scope: !7)
!48 = !DILocation(line: 38, column: 51, scope: !7)
!49 = !DILocation(line: 39, column: 43, scope: !7)
!50 = !DILocation(line: 39, column: 31, scope: !7)
!51 = !DILocation(line: 39, column: 51, scope: !7)
!52 = !DILocation(line: 40, column: 43, scope: !7)
!53 = !DILocation(line: 40, column: 31, scope: !7)
!54 = !DILocation(line: 40, column: 51, scope: !7)
!55 = !DILocation(line: 41, column: 43, scope: !7)
!56 = !DILocation(line: 41, column: 31, scope: !7)
!57 = !DILocation(line: 41, column: 51, scope: !7)
!58 = !DILocation(line: 42, column: 43, scope: !7)
!59 = !DILocation(line: 42, column: 31, scope: !7)
!60 = !DILocation(line: 42, column: 51, scope: !7)
!61 = !DILocation(line: 43, column: 43, scope: !7)
!62 = !DILocation(line: 43, column: 31, scope: !7)
!63 = !DILocation(line: 43, column: 51, scope: !7)
!64 = !DILocation(line: 44, column: 43, scope: !7)
!65 = !DILocation(line: 44, column: 31, scope: !7)
!66 = !DILocation(line: 44, column: 51, scope: !7)
!67 = !DILocation(line: 45, column: 31, scope: !7)
!68 = !DILocation(line: 45, column: 36, scope: !7)
!69 = !DILocation(line: 46, column: 31, scope: !7)
!70 = !DILocation(line: 46, column: 36, scope: !7)
!71 = !DILocation(line: 47, column: 18, scope: !7)
!72 = !DILocation(line: 48, column: 18, scope: !7)
!73 = !DILocation(line: 49, column: 18, scope: !7)
!74 = !DILocation(line: 50, column: 18, scope: !7)
!75 = !DILocation(line: 51, column: 19, scope: !7)
!76 = !DILocation(line: 52, column: 20, scope: !7)
!77 = !DILocation(line: 53, column: 20, scope: !7)
!78 = !DILocation(line: 54, column: 20, scope: !7)
!79 = !DILocation(line: 55, column: 20, scope: !7)
!80 = !DILocation(line: 66, column: 20, scope: !7)
!81 = !DILocation(line: 70, column: 25, scope: !7)
!82 = !DILocation(line: 71, column: 25, scope: !7)
!83 = !DILocation(line: 56, column: 20, scope: !7)
!84 = !DILocation(line: 57, column: 20, scope: !7)
!85 = !DILocation(line: 58, column: 20, scope: !7)
!86 = !DILocation(line: 59, column: 20, scope: !7)
!87 = !DILocation(line: 60, column: 20, scope: !7)
!88 = !DILocation(line: 61, column: 20, scope: !7)
!89 = !DILocation(line: 63, column: 20, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !91, inlinedAt: !93)
!91 = distinct !DILexicalBlockFile(scope: !7, file: !92, discriminator: 0)
!92 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!93 = !DILocation(line: 65, column: 42, scope: !7)
!94 = !DILocation(line: 121, column: 29, scope: !91, inlinedAt: !93)
!95 = !DILocation(line: 67, column: 20, scope: !7)
!96 = !DILocation(line: 69, column: 21, scope: !7)
!97 = !DILocation(line: 70, column: 37, scope: !7)
!98 = !DILocation(line: 71, column: 37, scope: !7)
!99 = !DILocation(line: 71, column: 4, scope: !7)
