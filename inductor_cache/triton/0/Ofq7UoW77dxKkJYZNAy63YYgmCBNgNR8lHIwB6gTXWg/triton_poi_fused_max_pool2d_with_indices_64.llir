; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_64(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 13312, !dbg !14
  %12 = srem i32 %10, 832, !dbg !15
  %13 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !16
  %14 = shufflevector <2 x i32> %13, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %15 = sdiv <2 x i32> %14, <i32 1664, i32 832>, !dbg !16
  %16 = srem <2 x i32> %15, splat (i32 2), !dbg !17
  %17 = extractelement <2 x i32> %16, i64 0, !dbg !18
  %18 = icmp sgt i32 %17, -1, !dbg !19
  %19 = shl nsw <2 x i32> %16, splat (i32 1), !dbg !20
  %20 = extractelement <2 x i32> %16, i64 1, !dbg !18
  %21 = icmp sgt i32 %20, -1, !dbg !21
  %22 = or i32 %17, %20, !dbg !18
  %23 = icmp sgt i32 %22, -1, !dbg !18
  %24 = mul nsw i32 %20, 1664, !dbg !22
  %25 = extractelement <2 x i32> %15, i64 0, !dbg !23
  %26 = mul i32 %25, 6656, !dbg !23
  %27 = add i32 %26, %12, !dbg !24
  %28 = add i32 %27, %24, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !26
  %31 = and i1 %11, %23, !dbg !27
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 -8388608, i1 %31, i32 -8388608, i1 %31) #1, !dbg !28
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !28
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !28
  %35 = add i32 %27, 832, !dbg !29
  %36 = add i32 %35, %24, !dbg !30
  %37 = sext i32 %36 to i64, !dbg !31
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !31
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %31, i32 -8388608, i1 %31, i32 -8388608, i1 %31) #1, !dbg !32
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !32
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !32
  %42 = add nsw <2 x i32> %19, splat (i32 2), !dbg !33
  %43 = extractelement <2 x i32> %42, i64 1, !dbg !34
  %44 = icmp samesign ult i32 %43, 4, !dbg !35
  %45 = and i1 %18, %44, !dbg !36
  %46 = add i32 %27, 1664, !dbg !37
  %47 = add i32 %46, %24, !dbg !38
  %48 = sext i32 %47 to i64, !dbg !39
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !39
  %50 = and i1 %11, %45, !dbg !40
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %49, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50) #1, !dbg !41
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !41
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !41
  %54 = add i32 %27, 3328, !dbg !42
  %55 = add i32 %54, %24, !dbg !43
  %56 = sext i32 %55 to i64, !dbg !44
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !44
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %31, i32 -8388608, i1 %31, i32 -8388608, i1 %31) #1, !dbg !45
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !45
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !45
  %61 = add i32 %27, 4160, !dbg !46
  %62 = add i32 %61, %24, !dbg !47
  %63 = sext i32 %62 to i64, !dbg !48
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !48
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %31, i32 -8388608, i1 %31, i32 -8388608, i1 %31) #1, !dbg !49
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !49
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !49
  %68 = add i32 %27, 4992, !dbg !50
  %69 = add i32 %68, %24, !dbg !51
  %70 = sext i32 %69 to i64, !dbg !52
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !52
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %71, i1 %50, i32 -8388608, i1 %50, i32 -8388608, i1 %50) #1, !dbg !53
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !53
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !53
  %75 = extractelement <2 x i32> %42, i64 0, !dbg !34
  %76 = icmp samesign ult i32 %75, 4, !dbg !54
  %77 = and i1 %21, %76, !dbg !55
  %78 = add i32 %27, 6656, !dbg !56
  %79 = add i32 %78, %24, !dbg !57
  %80 = sext i32 %79 to i64, !dbg !58
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !58
  %82 = and i1 %11, %77, !dbg !59
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %82, i32 -8388608, i1 %82, i32 -8388608, i1 %82) #1, !dbg !60
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !60
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !60
  %86 = add i32 %27, 7488, !dbg !61
  %87 = add i32 %86, %24, !dbg !62
  %88 = sext i32 %87 to i64, !dbg !63
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !63
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %82, i32 -8388608, i1 %82, i32 -8388608, i1 %82) #1, !dbg !64
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !64
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !64
  %93 = or i32 %75, %43, !dbg !34
  %94 = icmp samesign ult i32 %93, 4, !dbg !34
  %95 = add i32 %27, 8320, !dbg !65
  %96 = add i32 %95, %24, !dbg !66
  %97 = sext i32 %96 to i64, !dbg !67
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !67
  %99 = and i1 %11, %94, !dbg !68
  %100 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %98, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99) #1, !dbg !69
  %101 = extractvalue { i32, i32 } %100, 0, !dbg !69
  %102 = extractvalue { i32, i32 } %100, 1, !dbg !69
  %103 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !28
  %104 = insertelement <2 x i32> %103, i32 %34, i64 1, !dbg !28
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !28
  %106 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !32
  %107 = insertelement <2 x i32> %106, i32 %41, i64 1, !dbg !32
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !32
  %109 = fcmp ogt <2 x float> %108, %105, !dbg !70
  %110 = fcmp uno <2 x float> %108, zeroinitializer, !dbg !74
  %111 = or <2 x i1> %109, %110, !dbg !75
  %.v = select <2 x i1> %111, <2 x i32> %107, <2 x i32> %104, !dbg !76
  %112 = bitcast <2 x i32> %.v to <2 x float>, !dbg !76
  %113 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !41
  %114 = insertelement <2 x i32> %113, i32 %53, i64 1, !dbg !41
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !41
  %116 = fcmp olt <2 x float> %112, %115, !dbg !77
  %117 = fcmp uno <2 x float> %115, zeroinitializer, !dbg !79
  %118 = or <2 x i1> %117, %116, !dbg !80
  %.v1 = select <2 x i1> %118, <2 x i32> %114, <2 x i32> %.v, !dbg !81
  %119 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !81
  %120 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !45
  %121 = insertelement <2 x i32> %120, i32 %60, i64 1, !dbg !45
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !45
  %123 = fcmp olt <2 x float> %119, %122, !dbg !82
  %124 = fcmp uno <2 x float> %122, zeroinitializer, !dbg !84
  %125 = or <2 x i1> %124, %123, !dbg !85
  %.v2 = select <2 x i1> %125, <2 x i32> %121, <2 x i32> %.v1, !dbg !86
  %126 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !86
  %127 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !49
  %128 = insertelement <2 x i32> %127, i32 %67, i64 1, !dbg !49
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !49
  %130 = fcmp olt <2 x float> %126, %129, !dbg !87
  %131 = fcmp uno <2 x float> %129, zeroinitializer, !dbg !89
  %132 = or <2 x i1> %131, %130, !dbg !90
  %.v3 = select <2 x i1> %132, <2 x i32> %128, <2 x i32> %.v2, !dbg !91
  %133 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !91
  %134 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !53
  %135 = insertelement <2 x i32> %134, i32 %74, i64 1, !dbg !53
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !53
  %137 = fcmp olt <2 x float> %133, %136, !dbg !92
  %138 = fcmp uno <2 x float> %136, zeroinitializer, !dbg !94
  %139 = or <2 x i1> %138, %137, !dbg !95
  %.v4 = select <2 x i1> %139, <2 x i32> %135, <2 x i32> %.v3, !dbg !96
  %140 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !96
  %141 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !60
  %142 = insertelement <2 x i32> %141, i32 %85, i64 1, !dbg !60
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !60
  %144 = fcmp olt <2 x float> %140, %143, !dbg !97
  %145 = fcmp uno <2 x float> %143, zeroinitializer, !dbg !99
  %146 = or <2 x i1> %145, %144, !dbg !100
  %.v5 = select <2 x i1> %146, <2 x i32> %142, <2 x i32> %.v4, !dbg !101
  %147 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !101
  %148 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !64
  %149 = insertelement <2 x i32> %148, i32 %92, i64 1, !dbg !64
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !64
  %151 = fcmp olt <2 x float> %147, %150, !dbg !102
  %152 = fcmp uno <2 x float> %150, zeroinitializer, !dbg !104
  %153 = or <2 x i1> %152, %151, !dbg !105
  %.v6 = select <2 x i1> %153, <2 x i32> %149, <2 x i32> %.v5, !dbg !106
  %154 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !106
  %155 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !69
  %156 = insertelement <2 x i32> %155, i32 %102, i64 1, !dbg !69
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !69
  %158 = fcmp olt <2 x float> %154, %157, !dbg !107
  %159 = bitcast i32 %101 to float, !dbg !109
  %160 = fcmp uno float %159, 0.000000e+00, !dbg !109
  %161 = bitcast i32 %102 to float, !dbg !109
  %162 = fcmp uno float %161, 0.000000e+00, !dbg !109
  %163 = extractelement <2 x i1> %158, i64 0, !dbg !110
  %164 = or i1 %160, %163, !dbg !110
  %165 = extractelement <2 x i1> %158, i64 1, !dbg !110
  %166 = or i1 %162, %165, !dbg !110
  %167 = zext <2 x i1> %109 to <2 x i8>, !dbg !111
  %168 = select <2 x i1> %116, <2 x i8> splat (i8 2), <2 x i8> %167, !dbg !112
  %169 = select <2 x i1> %123, <2 x i8> splat (i8 3), <2 x i8> %168, !dbg !113
  %170 = select <2 x i1> %130, <2 x i8> splat (i8 4), <2 x i8> %169, !dbg !114
  %171 = select <2 x i1> %137, <2 x i8> splat (i8 5), <2 x i8> %170, !dbg !115
  %172 = select <2 x i1> %144, <2 x i8> splat (i8 6), <2 x i8> %171, !dbg !116
  %173 = select <2 x i1> %151, <2 x i8> splat (i8 7), <2 x i8> %172, !dbg !117
  %174 = select <2 x i1> %158, <2 x i8> splat (i8 8), <2 x i8> %173, !dbg !118
  %175 = sext i32 %10 to i64, !dbg !119
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !119
  %177 = extractelement <2 x i32> %.v6, i64 0, !dbg !120
  %178 = select i1 %164, i32 %101, i32 %177, !dbg !121
  %179 = extractelement <2 x i32> %.v6, i64 1, !dbg !120
  %180 = select i1 %166, i32 %102, i32 %179, !dbg !121
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %178, i32 %180, ptr addrspace(1) %176, i1 %11) #1, !dbg !120
  %181 = getelementptr i8, ptr addrspace(1) %2, i64 %175, !dbg !122
  %182 = bitcast <2 x i8> %174 to i16, !dbg !123
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %182, ptr addrspace(1) %181, i1 %11) #1, !dbg !123
  ret void, !dbg !124
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjoxkbhl2bpz73ryxftjyh4skjfuu5uh2or6tgqsmwf4a6menesv.py", directory: "inductor_cache/jo")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_64, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_64, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_64", linkageName: "triton_poi_fused_max_pool2d_with_indices_64", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 21, scope: !7)
!17 = !DILocation(line: 24, column: 29, scope: !7)
!18 = !DILocation(line: 39, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 13, scope: !7)
!21 = !DILocation(line: 36, column: 19, scope: !7)
!22 = !DILocation(line: 40, column: 41, scope: !7)
!23 = !DILocation(line: 40, column: 51, scope: !7)
!24 = !DILocation(line: 40, column: 36, scope: !7)
!25 = !DILocation(line: 40, column: 46, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 64, scope: !7)
!28 = !DILocation(line: 40, column: 56, scope: !7)
!29 = !DILocation(line: 46, column: 42, scope: !7)
!30 = !DILocation(line: 46, column: 52, scope: !7)
!31 = !DILocation(line: 46, column: 31, scope: !7)
!32 = !DILocation(line: 46, column: 62, scope: !7)
!33 = !DILocation(line: 68, column: 16, scope: !7)
!34 = !DILocation(line: 78, column: 20, scope: !7)
!35 = !DILocation(line: 50, column: 20, scope: !7)
!36 = !DILocation(line: 52, column: 19, scope: !7)
!37 = !DILocation(line: 53, column: 43, scope: !7)
!38 = !DILocation(line: 53, column: 53, scope: !7)
!39 = !DILocation(line: 53, column: 31, scope: !7)
!40 = !DILocation(line: 53, column: 71, scope: !7)
!41 = !DILocation(line: 53, column: 63, scope: !7)
!42 = !DILocation(line: 60, column: 43, scope: !7)
!43 = !DILocation(line: 60, column: 53, scope: !7)
!44 = !DILocation(line: 60, column: 31, scope: !7)
!45 = !DILocation(line: 60, column: 63, scope: !7)
!46 = !DILocation(line: 63, column: 43, scope: !7)
!47 = !DILocation(line: 63, column: 53, scope: !7)
!48 = !DILocation(line: 63, column: 31, scope: !7)
!49 = !DILocation(line: 63, column: 63, scope: !7)
!50 = !DILocation(line: 66, column: 43, scope: !7)
!51 = !DILocation(line: 66, column: 53, scope: !7)
!52 = !DILocation(line: 66, column: 31, scope: !7)
!53 = !DILocation(line: 66, column: 63, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 72, column: 20, scope: !7)
!56 = !DILocation(line: 73, column: 43, scope: !7)
!57 = !DILocation(line: 73, column: 53, scope: !7)
!58 = !DILocation(line: 73, column: 31, scope: !7)
!59 = !DILocation(line: 73, column: 71, scope: !7)
!60 = !DILocation(line: 73, column: 63, scope: !7)
!61 = !DILocation(line: 76, column: 43, scope: !7)
!62 = !DILocation(line: 76, column: 53, scope: !7)
!63 = !DILocation(line: 76, column: 31, scope: !7)
!64 = !DILocation(line: 76, column: 63, scope: !7)
!65 = !DILocation(line: 79, column: 43, scope: !7)
!66 = !DILocation(line: 79, column: 53, scope: !7)
!67 = !DILocation(line: 79, column: 31, scope: !7)
!68 = !DILocation(line: 79, column: 71, scope: !7)
!69 = !DILocation(line: 79, column: 63, scope: !7)
!70 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !73)
!71 = distinct !DILexicalBlockFile(scope: !7, file: !72, discriminator: 0)
!72 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!73 = !DILocation(line: 47, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !78)
!78 = !DILocation(line: 54, column: 42, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !83)
!83 = !DILocation(line: 61, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !88)
!88 = !DILocation(line: 64, column: 42, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !93)
!93 = !DILocation(line: 67, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !98)
!98 = !DILocation(line: 74, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !103)
!103 = !DILocation(line: 77, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !103)
!106 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !103)
!107 = !DILocation(line: 118, column: 15, scope: !71, inlinedAt: !108)
!108 = !DILocation(line: 80, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !71, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !71, inlinedAt: !108)
!111 = !DILocation(line: 84, column: 35, scope: !7)
!112 = !DILocation(line: 87, column: 35, scope: !7)
!113 = !DILocation(line: 90, column: 35, scope: !7)
!114 = !DILocation(line: 93, column: 35, scope: !7)
!115 = !DILocation(line: 96, column: 35, scope: !7)
!116 = !DILocation(line: 99, column: 35, scope: !7)
!117 = !DILocation(line: 102, column: 35, scope: !7)
!118 = !DILocation(line: 105, column: 35, scope: !7)
!119 = !DILocation(line: 106, column: 25, scope: !7)
!120 = !DILocation(line: 106, column: 37, scope: !7)
!121 = !DILocation(line: 121, column: 29, scope: !71, inlinedAt: !108)
!122 = !DILocation(line: 107, column: 25, scope: !7)
!123 = !DILocation(line: 107, column: 37, scope: !7)
!124 = !DILocation(line: 107, column: 4, scope: !7)
