; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_leaky_relu_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %12, 2, !dbg !13
  %15 = or disjoint i32 %12, 3, !dbg !13
  %16 = sdiv i32 %12, 11, !dbg !14
  %17 = sdiv i32 %13, 11, !dbg !14
  %18 = sdiv i32 %14, 11, !dbg !14
  %19 = sdiv i32 %15, 11, !dbg !14
  %20 = srem i32 %16, 1024, !dbg !15
  %21 = srem i32 %17, 1024, !dbg !15
  %22 = srem i32 %18, 1024, !dbg !15
  %23 = srem i32 %19, 1024, !dbg !15
  %24 = sext i32 %12 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !17
  %31 = sext i32 %20 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = sext i32 %21 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !18
  %35 = sext i32 %22 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !18
  %37 = sext i32 %23 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !18
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !20
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !20
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !21
  %48 = bitcast i32 %47 to float, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !21
  %50 = bitcast i32 %49 to float, !dbg !21
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !21
  %52 = bitcast i32 %51 to float, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !21
  %54 = bitcast i32 %53 to float, !dbg !21
  %55 = getelementptr i1, ptr addrspace(1) %3, i64 %24, !dbg !22
  %56 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !17
  %57 = insertelement <4 x i32> %56, i32 %28, i64 1, !dbg !17
  %58 = insertelement <4 x i32> %57, i32 %29, i64 2, !dbg !17
  %59 = insertelement <4 x i32> %58, i32 %30, i64 3, !dbg !17
  %60 = bitcast <4 x i32> %59 to <4 x float>, !dbg !17
  %61 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !19
  %62 = insertelement <4 x i32> %61, i32 %40, i64 1, !dbg !19
  %63 = insertelement <4 x i32> %62, i32 %41, i64 2, !dbg !19
  %64 = insertelement <4 x i32> %63, i32 %42, i64 3, !dbg !19
  %65 = bitcast <4 x i32> %64 to <4 x float>, !dbg !19
  %66 = fadd <4 x float> %60, %65, !dbg !23
  %67 = fcmp ogt <4 x float> %66, zeroinitializer, !dbg !24
  %68 = extractelement <4 x float> %66, i64 0, !dbg !25
  %69 = fmul float %68, 0x3FB99999A0000000, !dbg !26
  %70 = extractelement <4 x float> %66, i64 1, !dbg !25
  %71 = fmul float %70, 0x3FB99999A0000000, !dbg !26
  %72 = extractelement <4 x float> %66, i64 2, !dbg !25
  %73 = fmul float %72, 0x3FB99999A0000000, !dbg !26
  %74 = extractelement <4 x float> %66, i64 3, !dbg !25
  %75 = fmul float %74, 0x3FB99999A0000000, !dbg !26
  %76 = extractelement <4 x i1> %67, i64 0, !dbg !25
  %77 = select i1 %76, float %68, float %69, !dbg !25
  %78 = extractelement <4 x i1> %67, i64 1, !dbg !25
  %79 = select i1 %78, float %70, float %71, !dbg !25
  %80 = extractelement <4 x i1> %67, i64 2, !dbg !25
  %81 = select i1 %80, float %72, float %73, !dbg !25
  %82 = extractelement <4 x i1> %67, i64 3, !dbg !25
  %83 = select i1 %82, float %74, float %75, !dbg !25
  %84 = fadd float %77, %48, !dbg !27
  %85 = fadd float %79, %50, !dbg !27
  %86 = fadd float %81, %52, !dbg !27
  %87 = fadd float %83, %54, !dbg !27
  %88 = zext <4 x i1> %67 to <4 x i8>, !dbg !28
  %89 = bitcast <4 x i8> %88 to i32, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %55, i1 true) #1, !dbg !28
  %90 = bitcast float %77 to i32, !dbg !29
  %91 = bitcast float %79 to i32, !dbg !29
  %92 = bitcast float %81 to i32, !dbg !29
  %93 = bitcast float %83 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %90, i32 %91, i32 %92, i32 %93, ptr addrspace(1) %25, i1 true) #1, !dbg !29
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !30
  %95 = bitcast float %84 to i32, !dbg !31
  %96 = bitcast float %85 to i32, !dbg !31
  %97 = bitcast float %86 to i32, !dbg !31
  %98 = bitcast float %87 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %95, i32 %96, i32 %97, i32 %98, ptr addrspace(1) %94, i1 true) #1, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdwfejjgj5rojelvmptgfxuider2uzgvq4wax6gke4iqiosdvlrs.py", directory: "inductor_cache/dw")
!4 = !{ptr @triton_poi_fused_add_convolution_leaky_relu_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_leaky_relu_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_leaky_relu_36", linkageName: "triton_poi_fused_add_convolution_leaky_relu_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 36, column: 25, scope: !7)
!23 = !DILocation(line: 29, column: 18, scope: !7)
!24 = !DILocation(line: 31, column: 18, scope: !7)
!25 = !DILocation(line: 34, column: 32, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 39, scope: !7)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 4, scope: !7)
