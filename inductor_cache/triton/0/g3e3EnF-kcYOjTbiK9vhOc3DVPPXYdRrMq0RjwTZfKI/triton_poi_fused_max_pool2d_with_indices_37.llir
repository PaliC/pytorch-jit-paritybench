; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = sdiv i32 %9, 4, !dbg !14
  %11 = add i32 %9, -10, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = add i32 %9, -9, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = add i32 %9, -8, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = add i32 %9, -7, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = add i32 %9, -6, !dbg !23
  %24 = sext i32 %23 to i64, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !24
  %26 = add i32 %9, -5, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !26
  %29 = add i32 %9, -4, !dbg !27
  %30 = sext i32 %29 to i64, !dbg !28
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !28
  %32 = add i32 %9, -3, !dbg !29
  %33 = sext i32 %32 to i64, !dbg !30
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !30
  %35 = add i32 %9, -2, !dbg !31
  %36 = sext i32 %35 to i64, !dbg !32
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !32
  %38 = add i32 %9, -1, !dbg !33
  %39 = sext i32 %38 to i64, !dbg !34
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !34
  %41 = sext i32 %9 to i64, !dbg !35
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !35
  %43 = add i32 %9, 1, !dbg !36
  %44 = sext i32 %43 to i64, !dbg !37
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !37
  %46 = add i32 %9, 2, !dbg !38
  %47 = sext i32 %46 to i64, !dbg !39
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !39
  %49 = add i32 %9, 3, !dbg !40
  %50 = sext i32 %49 to i64, !dbg !41
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !41
  %52 = add i32 %9, 4, !dbg !42
  %53 = sext i32 %52 to i64, !dbg !43
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !43
  %55 = add i32 %9, 5, !dbg !44
  %56 = sext i32 %55 to i64, !dbg !45
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !45
  %58 = add i32 %9, 6, !dbg !46
  %59 = sext i32 %58 to i64, !dbg !47
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !47
  %61 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !48
  %62 = insertelement <2 x i32> %61, i32 %9, i64 1, !dbg !48
  %63 = srem <2 x i32> %62, splat (i32 4), !dbg !48
  %64 = extractelement <2 x i32> %63, i64 0, !dbg !49
  %65 = icmp sgt i32 %64, 1, !dbg !50
  %66 = extractelement <2 x i32> %63, i64 1, !dbg !51
  %67 = icmp sgt i32 %66, 1, !dbg !52
  %68 = and i1 %67, %65, !dbg !53
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %68, i32 -8388608, i1 %68) #1, !dbg !54
  %70 = bitcast i32 %69 to float, !dbg !54
  %71 = icmp sgt i32 %66, 0, !dbg !55
  %72 = and i1 %71, %65, !dbg !56
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %72, i32 -8388608, i1 %72) #1, !dbg !57
  %74 = bitcast i32 %73 to float, !dbg !57
  %75 = fcmp ogt float %74, %70, !dbg !58
  %76 = fcmp uno float %74, 0.000000e+00, !dbg !62
  %77 = or i1 %75, %76, !dbg !63
  %78 = select i1 %77, float %74, float %70, !dbg !64
  %79 = icmp sgt i32 %66, -1, !dbg !65
  %80 = and i1 %79, %65, !dbg !66
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %80, i32 -8388608, i1 %80) #1, !dbg !67
  %82 = bitcast i32 %81 to float, !dbg !67
  %83 = fcmp olt float %78, %82, !dbg !68
  %84 = fcmp uno float %82, 0.000000e+00, !dbg !70
  %85 = or i1 %84, %83, !dbg !71
  %86 = select i1 %85, float %82, float %78, !dbg !72
  %87 = add nsw i32 %66, 1, !dbg !73
  %88 = icmp ult i32 %87, 4, !dbg !73
  %89 = and i1 %65, %88, !dbg !74
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %89, i32 -8388608, i1 %89) #1, !dbg !75
  %91 = bitcast i32 %90 to float, !dbg !75
  %92 = fcmp olt float %86, %91, !dbg !76
  %93 = fcmp uno float %91, 0.000000e+00, !dbg !78
  %94 = or i1 %93, %92, !dbg !79
  %95 = select i1 %94, float %91, float %86, !dbg !80
  %96 = add nsw <2 x i32> %63, splat (i32 2), !dbg !81
  %97 = extractelement <2 x i32> %96, i64 1, !dbg !82
  %98 = icmp ult i32 %97, 4, !dbg !83
  %99 = and i1 %65, %98, !dbg !84
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %99, i32 -8388608, i1 %99) #1, !dbg !85
  %101 = bitcast i32 %100 to float, !dbg !85
  %102 = fcmp olt float %95, %101, !dbg !86
  %103 = fcmp uno float %101, 0.000000e+00, !dbg !88
  %104 = or i1 %103, %102, !dbg !89
  %105 = select i1 %104, float %101, float %95, !dbg !90
  %106 = icmp sgt i32 %64, 0, !dbg !91
  %107 = and i1 %67, %106, !dbg !92
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %107, i32 -8388608, i1 %107) #1, !dbg !93
  %109 = bitcast i32 %108 to float, !dbg !93
  %110 = fcmp olt float %105, %109, !dbg !94
  %111 = fcmp uno float %109, 0.000000e+00, !dbg !96
  %112 = or i1 %111, %110, !dbg !97
  %113 = select i1 %112, float %109, float %105, !dbg !98
  %114 = and i1 %71, %106, !dbg !99
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %114, i32 -8388608, i1 %114) #1, !dbg !100
  %116 = bitcast i32 %115 to float, !dbg !100
  %117 = fcmp olt float %113, %116, !dbg !101
  %118 = fcmp uno float %116, 0.000000e+00, !dbg !103
  %119 = or i1 %118, %117, !dbg !104
  %120 = select i1 %119, float %116, float %113, !dbg !105
  %121 = and i1 %79, %106, !dbg !106
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %121, i32 -8388608, i1 %121) #1, !dbg !107
  %123 = bitcast i32 %122 to float, !dbg !107
  %124 = fcmp olt float %120, %123, !dbg !108
  %125 = fcmp uno float %123, 0.000000e+00, !dbg !110
  %126 = or i1 %125, %124, !dbg !111
  %127 = select i1 %126, float %123, float %120, !dbg !112
  %128 = and i1 %106, %88, !dbg !113
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %128, i32 -8388608, i1 %128) #1, !dbg !114
  %130 = bitcast i32 %129 to float, !dbg !114
  %131 = fcmp olt float %127, %130, !dbg !115
  %132 = fcmp uno float %130, 0.000000e+00, !dbg !117
  %133 = or i1 %132, %131, !dbg !118
  %134 = select i1 %133, float %130, float %127, !dbg !119
  %135 = and i1 %106, %98, !dbg !120
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %135, i32 -8388608, i1 %135) #1, !dbg !121
  %137 = bitcast i32 %136 to float, !dbg !121
  %138 = fcmp olt float %134, %137, !dbg !122
  %139 = fcmp uno float %137, 0.000000e+00, !dbg !124
  %140 = or i1 %139, %138, !dbg !125
  %141 = select i1 %140, float %137, float %134, !dbg !126
  %142 = icmp sgt i32 %64, -1, !dbg !127
  %143 = and i1 %67, %142, !dbg !128
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %143, i32 -8388608, i1 %143) #1, !dbg !129
  %145 = bitcast i32 %144 to float, !dbg !129
  %146 = fcmp olt float %141, %145, !dbg !130
  %147 = fcmp uno float %145, 0.000000e+00, !dbg !132
  %148 = or i1 %147, %146, !dbg !133
  %149 = select i1 %148, float %145, float %141, !dbg !134
  %150 = and i1 %71, %142, !dbg !135
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %150, i32 -8388608, i1 %150) #1, !dbg !136
  %152 = bitcast i32 %151 to float, !dbg !136
  %153 = fcmp olt float %149, %152, !dbg !137
  %154 = fcmp uno float %152, 0.000000e+00, !dbg !139
  %155 = or i1 %154, %153, !dbg !140
  %156 = select i1 %155, float %152, float %149, !dbg !141
  %157 = or i32 %64, %66, !dbg !51
  %158 = icmp sgt i32 %157, -1, !dbg !51
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %158, i32 -8388608, i1 %158) #1, !dbg !142
  %160 = bitcast i32 %159 to float, !dbg !142
  %161 = fcmp olt float %156, %160, !dbg !143
  %162 = fcmp uno float %160, 0.000000e+00, !dbg !145
  %163 = or i1 %162, %161, !dbg !146
  %164 = select i1 %163, float %160, float %156, !dbg !147
  %165 = and i1 %142, %88, !dbg !148
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %165, i32 -8388608, i1 %165) #1, !dbg !149
  %167 = bitcast i32 %166 to float, !dbg !149
  %168 = fcmp olt float %164, %167, !dbg !150
  %169 = fcmp uno float %167, 0.000000e+00, !dbg !152
  %170 = or i1 %169, %168, !dbg !153
  %171 = select i1 %170, float %167, float %164, !dbg !154
  %172 = and i1 %142, %98, !dbg !155
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %172, i32 -8388608, i1 %172) #1, !dbg !156
  %174 = bitcast i32 %173 to float, !dbg !156
  %175 = fcmp olt float %171, %174, !dbg !157
  %176 = fcmp uno float %174, 0.000000e+00, !dbg !159
  %177 = or i1 %176, %175, !dbg !160
  %178 = select i1 %177, float %174, float %171, !dbg !161
  %179 = add nsw i32 %64, 1, !dbg !49
  %180 = icmp ult i32 %179, 4, !dbg !49
  %181 = and i1 %67, %180, !dbg !162
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %181, i32 -8388608, i1 %181) #1, !dbg !163
  %183 = bitcast i32 %182 to float, !dbg !163
  %184 = fcmp olt float %178, %183, !dbg !164
  %185 = fcmp uno float %183, 0.000000e+00, !dbg !166
  %186 = or i1 %185, %184, !dbg !167
  %187 = select i1 %186, float %183, float %178, !dbg !168
  %188 = and i1 %71, %180, !dbg !169
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %188, i32 -8388608, i1 %188) #1, !dbg !170
  %190 = bitcast i32 %189 to float, !dbg !170
  %191 = fcmp olt float %187, %190, !dbg !171
  %192 = fcmp uno float %190, 0.000000e+00, !dbg !173
  %193 = or i1 %192, %191, !dbg !174
  %194 = select i1 %193, float %190, float %187, !dbg !175
  %195 = and i1 %79, %180, !dbg !176
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %195, i32 -8388608, i1 %195) #1, !dbg !177
  %197 = bitcast i32 %196 to float, !dbg !177
  %198 = fcmp olt float %194, %197, !dbg !178
  %199 = fcmp uno float %197, 0.000000e+00, !dbg !180
  %200 = or i1 %199, %198, !dbg !181
  %201 = select i1 %200, float %197, float %194, !dbg !182
  %202 = or i32 %179, %87, !dbg !183
  %203 = icmp ult i32 %202, 4, !dbg !183
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %203, i32 -8388608, i1 %203) #1, !dbg !184
  %205 = bitcast i32 %204 to float, !dbg !184
  %206 = fcmp olt float %201, %205, !dbg !185
  %207 = fcmp uno float %205, 0.000000e+00, !dbg !187
  %208 = or i1 %207, %206, !dbg !188
  %209 = select i1 %208, float %205, float %201, !dbg !189
  %210 = or i32 %179, %97, !dbg !190
  %211 = icmp ult i32 %210, 4, !dbg !190
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %211, i32 -8388608, i1 %211) #1, !dbg !191
  %213 = bitcast i32 %212 to float, !dbg !191
  %214 = fcmp olt float %209, %213, !dbg !192
  %215 = fcmp uno float %213, 0.000000e+00, !dbg !194
  %216 = or i1 %215, %214, !dbg !195
  %217 = select i1 %216, float %213, float %209, !dbg !196
  %218 = extractelement <2 x i32> %96, i64 0, !dbg !82
  %219 = icmp ult i32 %218, 4, !dbg !81
  %220 = and i1 %67, %219, !dbg !197
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %220, i32 -8388608, i1 %220) #1, !dbg !198
  %222 = bitcast i32 %221 to float, !dbg !198
  %223 = fcmp olt float %217, %222, !dbg !199
  %224 = fcmp uno float %222, 0.000000e+00, !dbg !201
  %225 = or i1 %224, %223, !dbg !202
  %226 = select i1 %225, float %222, float %217, !dbg !203
  %227 = and i1 %71, %219, !dbg !204
  %228 = add i32 %9, 7, !dbg !205
  %229 = sext i32 %228 to i64, !dbg !206
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !206
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %230, i1 %227, i32 -8388608, i1 %227) #1, !dbg !207
  %232 = bitcast i32 %231 to float, !dbg !207
  %233 = fcmp olt float %226, %232, !dbg !208
  %234 = fcmp uno float %232, 0.000000e+00, !dbg !210
  %235 = or i1 %234, %233, !dbg !211
  %236 = select i1 %235, float %232, float %226, !dbg !212
  %237 = and i1 %79, %219, !dbg !213
  %238 = add i32 %9, 8, !dbg !214
  %239 = sext i32 %238 to i64, !dbg !215
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !215
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %237, i32 -8388608, i1 %237) #1, !dbg !216
  %242 = bitcast i32 %241 to float, !dbg !216
  %243 = fcmp olt float %236, %242, !dbg !217
  %244 = fcmp uno float %242, 0.000000e+00, !dbg !219
  %245 = or i1 %244, %243, !dbg !220
  %246 = select i1 %245, float %242, float %236, !dbg !221
  %247 = or i32 %218, %87, !dbg !222
  %248 = icmp ult i32 %247, 4, !dbg !222
  %249 = add i32 %9, 9, !dbg !223
  %250 = sext i32 %249 to i64, !dbg !224
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !224
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %248, i32 -8388608, i1 %248) #1, !dbg !225
  %253 = bitcast i32 %252 to float, !dbg !225
  %254 = fcmp olt float %246, %253, !dbg !226
  %255 = fcmp uno float %253, 0.000000e+00, !dbg !228
  %256 = or i1 %255, %254, !dbg !229
  %257 = select i1 %256, float %253, float %246, !dbg !230
  %258 = or i32 %218, %97, !dbg !82
  %259 = icmp ult i32 %258, 4, !dbg !82
  %260 = add i32 %9, 10, !dbg !231
  %261 = sext i32 %260 to i64, !dbg !232
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !232
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %259, i32 -8388608, i1 %259) #1, !dbg !233
  %264 = bitcast i32 %263 to float, !dbg !233
  %265 = fcmp olt float %257, %264, !dbg !234
  %266 = fcmp uno float %264, 0.000000e+00, !dbg !236
  %267 = or i1 %266, %265, !dbg !237
  %268 = zext i1 %75 to i8, !dbg !238
  %269 = select i1 %83, i8 2, i8 %268, !dbg !239
  %270 = select i1 %92, i8 3, i8 %269, !dbg !240
  %271 = select i1 %102, i8 4, i8 %270, !dbg !241
  %272 = select i1 %110, i8 5, i8 %271, !dbg !242
  %273 = select i1 %117, i8 6, i8 %272, !dbg !243
  %274 = select i1 %124, i8 7, i8 %273, !dbg !244
  %275 = select i1 %131, i8 8, i8 %274, !dbg !245
  %276 = select i1 %138, i8 9, i8 %275, !dbg !246
  %277 = select i1 %146, i8 10, i8 %276, !dbg !247
  %278 = select i1 %153, i8 11, i8 %277, !dbg !248
  %279 = select i1 %161, i8 12, i8 %278, !dbg !249
  %280 = select i1 %168, i8 13, i8 %279, !dbg !250
  %281 = select i1 %175, i8 14, i8 %280, !dbg !251
  %282 = select i1 %184, i8 15, i8 %281, !dbg !252
  %283 = select i1 %191, i8 16, i8 %282, !dbg !253
  %284 = select i1 %198, i8 17, i8 %283, !dbg !254
  %285 = select i1 %206, i8 18, i8 %284, !dbg !255
  %286 = select i1 %214, i8 19, i8 %285, !dbg !256
  %287 = select i1 %223, i8 20, i8 %286, !dbg !257
  %288 = select i1 %233, i8 21, i8 %287, !dbg !258
  %289 = select i1 %243, i8 22, i8 %288, !dbg !259
  %290 = select i1 %254, i8 23, i8 %289, !dbg !260
  %291 = select i1 %265, i8 24, i8 %290, !dbg !261
  %292 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !262
  %293 = bitcast float %257 to i32, !dbg !263
  %294 = select i1 %267, i32 %263, i32 %293, !dbg !264
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %294, ptr addrspace(1) %292, i1 true) #1, !dbg !263
  %295 = getelementptr i8, ptr addrspace(1) %2, i64 %41, !dbg !265
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %291, ptr addrspace(1) %295, i1 true) #1, !dbg !266
  ret void, !dbg !267
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck44k4ztyg5kbzvjxmivvoworcmggdw4gtgcvalsi2n5wqq4mhtc.py", directory: "inductor_cache/k4")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_37", linkageName: "triton_poi_fused_max_pool2d_with_indices_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 39, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 38, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 38, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 58, column: 38, scope: !7)
!22 = !DILocation(line: 58, column: 31, scope: !7)
!23 = !DILocation(line: 65, column: 38, scope: !7)
!24 = !DILocation(line: 65, column: 31, scope: !7)
!25 = !DILocation(line: 75, column: 38, scope: !7)
!26 = !DILocation(line: 75, column: 31, scope: !7)
!27 = !DILocation(line: 78, column: 38, scope: !7)
!28 = !DILocation(line: 78, column: 31, scope: !7)
!29 = !DILocation(line: 81, column: 38, scope: !7)
!30 = !DILocation(line: 81, column: 31, scope: !7)
!31 = !DILocation(line: 84, column: 38, scope: !7)
!32 = !DILocation(line: 84, column: 31, scope: !7)
!33 = !DILocation(line: 94, column: 38, scope: !7)
!34 = !DILocation(line: 94, column: 31, scope: !7)
!35 = !DILocation(line: 97, column: 31, scope: !7)
!36 = !DILocation(line: 100, column: 35, scope: !7)
!37 = !DILocation(line: 100, column: 31, scope: !7)
!38 = !DILocation(line: 103, column: 35, scope: !7)
!39 = !DILocation(line: 103, column: 31, scope: !7)
!40 = !DILocation(line: 113, column: 35, scope: !7)
!41 = !DILocation(line: 113, column: 31, scope: !7)
!42 = !DILocation(line: 116, column: 35, scope: !7)
!43 = !DILocation(line: 116, column: 31, scope: !7)
!44 = !DILocation(line: 119, column: 35, scope: !7)
!45 = !DILocation(line: 119, column: 31, scope: !7)
!46 = !DILocation(line: 122, column: 35, scope: !7)
!47 = !DILocation(line: 122, column: 31, scope: !7)
!48 = !DILocation(line: 24, column: 26, scope: !7)
!49 = !DILocation(line: 108, column: 20, scope: !7)
!50 = !DILocation(line: 29, column: 19, scope: !7)
!51 = !DILocation(line: 96, column: 20, scope: !7)
!52 = !DILocation(line: 34, column: 19, scope: !7)
!53 = !DILocation(line: 37, column: 19, scope: !7)
!54 = !DILocation(line: 38, column: 44, scope: !7)
!55 = !DILocation(line: 40, column: 21, scope: !7)
!56 = !DILocation(line: 43, column: 19, scope: !7)
!57 = !DILocation(line: 44, column: 43, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!61 = !DILocation(line: 45, column: 42, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !61)
!63 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !61)
!64 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !61)
!65 = !DILocation(line: 47, column: 21, scope: !7)
!66 = !DILocation(line: 50, column: 19, scope: !7)
!67 = !DILocation(line: 51, column: 43, scope: !7)
!68 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !69)
!69 = !DILocation(line: 52, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !69)
!73 = !DILocation(line: 56, column: 20, scope: !7)
!74 = !DILocation(line: 57, column: 19, scope: !7)
!75 = !DILocation(line: 58, column: 43, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !77)
!77 = !DILocation(line: 59, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !77)
!81 = !DILocation(line: 127, column: 21, scope: !7)
!82 = !DILocation(line: 140, column: 22, scope: !7)
!83 = !DILocation(line: 63, column: 20, scope: !7)
!84 = !DILocation(line: 64, column: 19, scope: !7)
!85 = !DILocation(line: 65, column: 43, scope: !7)
!86 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !87)
!87 = !DILocation(line: 66, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !87)
!91 = !DILocation(line: 68, column: 21, scope: !7)
!92 = !DILocation(line: 71, column: 20, scope: !7)
!93 = !DILocation(line: 72, column: 43, scope: !7)
!94 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !95)
!95 = !DILocation(line: 73, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !95)
!99 = !DILocation(line: 74, column: 20, scope: !7)
!100 = !DILocation(line: 75, column: 43, scope: !7)
!101 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !102)
!102 = !DILocation(line: 76, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !102)
!106 = !DILocation(line: 77, column: 20, scope: !7)
!107 = !DILocation(line: 78, column: 43, scope: !7)
!108 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !109)
!109 = !DILocation(line: 79, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !109)
!113 = !DILocation(line: 80, column: 20, scope: !7)
!114 = !DILocation(line: 81, column: 43, scope: !7)
!115 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !116)
!116 = !DILocation(line: 82, column: 42, scope: !7)
!117 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !116)
!118 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !116)
!119 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !116)
!120 = !DILocation(line: 83, column: 20, scope: !7)
!121 = !DILocation(line: 84, column: 43, scope: !7)
!122 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !123)
!123 = !DILocation(line: 85, column: 42, scope: !7)
!124 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !123)
!125 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !123)
!126 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !123)
!127 = !DILocation(line: 87, column: 21, scope: !7)
!128 = !DILocation(line: 90, column: 20, scope: !7)
!129 = !DILocation(line: 91, column: 43, scope: !7)
!130 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !131)
!131 = !DILocation(line: 92, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !131)
!134 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !131)
!135 = !DILocation(line: 93, column: 20, scope: !7)
!136 = !DILocation(line: 94, column: 43, scope: !7)
!137 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !138)
!138 = !DILocation(line: 95, column: 42, scope: !7)
!139 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !138)
!140 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !138)
!141 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !138)
!142 = !DILocation(line: 97, column: 36, scope: !7)
!143 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !144)
!144 = !DILocation(line: 98, column: 42, scope: !7)
!145 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !144)
!146 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !144)
!147 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !144)
!148 = !DILocation(line: 99, column: 20, scope: !7)
!149 = !DILocation(line: 100, column: 40, scope: !7)
!150 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !151)
!151 = !DILocation(line: 101, column: 42, scope: !7)
!152 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !151)
!153 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !151)
!154 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !151)
!155 = !DILocation(line: 102, column: 20, scope: !7)
!156 = !DILocation(line: 103, column: 40, scope: !7)
!157 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !158)
!158 = !DILocation(line: 104, column: 42, scope: !7)
!159 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !158)
!160 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !158)
!161 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !158)
!162 = !DILocation(line: 109, column: 20, scope: !7)
!163 = !DILocation(line: 110, column: 40, scope: !7)
!164 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !165)
!165 = !DILocation(line: 111, column: 42, scope: !7)
!166 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !165)
!167 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !165)
!168 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !165)
!169 = !DILocation(line: 112, column: 20, scope: !7)
!170 = !DILocation(line: 113, column: 40, scope: !7)
!171 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !172)
!172 = !DILocation(line: 114, column: 42, scope: !7)
!173 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !172)
!174 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !172)
!175 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !172)
!176 = !DILocation(line: 115, column: 20, scope: !7)
!177 = !DILocation(line: 116, column: 40, scope: !7)
!178 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !179)
!179 = !DILocation(line: 117, column: 42, scope: !7)
!180 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !179)
!181 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !179)
!182 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !179)
!183 = !DILocation(line: 118, column: 20, scope: !7)
!184 = !DILocation(line: 119, column: 40, scope: !7)
!185 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !186)
!186 = !DILocation(line: 120, column: 42, scope: !7)
!187 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !186)
!188 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !186)
!189 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !186)
!190 = !DILocation(line: 121, column: 20, scope: !7)
!191 = !DILocation(line: 122, column: 40, scope: !7)
!192 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !193)
!193 = !DILocation(line: 123, column: 42, scope: !7)
!194 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !193)
!195 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !193)
!196 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !193)
!197 = !DILocation(line: 128, column: 22, scope: !7)
!198 = !DILocation(line: 129, column: 41, scope: !7)
!199 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !200)
!200 = !DILocation(line: 130, column: 44, scope: !7)
!201 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !200)
!202 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !200)
!203 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !200)
!204 = !DILocation(line: 131, column: 22, scope: !7)
!205 = !DILocation(line: 132, column: 36, scope: !7)
!206 = !DILocation(line: 132, column: 32, scope: !7)
!207 = !DILocation(line: 132, column: 41, scope: !7)
!208 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !209)
!209 = !DILocation(line: 133, column: 44, scope: !7)
!210 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !209)
!211 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !209)
!212 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !209)
!213 = !DILocation(line: 134, column: 22, scope: !7)
!214 = !DILocation(line: 135, column: 36, scope: !7)
!215 = !DILocation(line: 135, column: 32, scope: !7)
!216 = !DILocation(line: 135, column: 41, scope: !7)
!217 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !218)
!218 = !DILocation(line: 136, column: 44, scope: !7)
!219 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !218)
!220 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !218)
!221 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !218)
!222 = !DILocation(line: 137, column: 22, scope: !7)
!223 = !DILocation(line: 138, column: 36, scope: !7)
!224 = !DILocation(line: 138, column: 32, scope: !7)
!225 = !DILocation(line: 138, column: 41, scope: !7)
!226 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !227)
!227 = !DILocation(line: 139, column: 44, scope: !7)
!228 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !227)
!229 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !227)
!230 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !227)
!231 = !DILocation(line: 141, column: 37, scope: !7)
!232 = !DILocation(line: 141, column: 32, scope: !7)
!233 = !DILocation(line: 141, column: 42, scope: !7)
!234 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !235)
!235 = !DILocation(line: 142, column: 44, scope: !7)
!236 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !235)
!237 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !235)
!238 = !DILocation(line: 146, column: 38, scope: !7)
!239 = !DILocation(line: 149, column: 38, scope: !7)
!240 = !DILocation(line: 152, column: 38, scope: !7)
!241 = !DILocation(line: 155, column: 38, scope: !7)
!242 = !DILocation(line: 158, column: 38, scope: !7)
!243 = !DILocation(line: 161, column: 38, scope: !7)
!244 = !DILocation(line: 164, column: 38, scope: !7)
!245 = !DILocation(line: 167, column: 38, scope: !7)
!246 = !DILocation(line: 170, column: 38, scope: !7)
!247 = !DILocation(line: 173, column: 38, scope: !7)
!248 = !DILocation(line: 176, column: 38, scope: !7)
!249 = !DILocation(line: 179, column: 38, scope: !7)
!250 = !DILocation(line: 182, column: 38, scope: !7)
!251 = !DILocation(line: 185, column: 38, scope: !7)
!252 = !DILocation(line: 188, column: 38, scope: !7)
!253 = !DILocation(line: 191, column: 38, scope: !7)
!254 = !DILocation(line: 194, column: 38, scope: !7)
!255 = !DILocation(line: 197, column: 38, scope: !7)
!256 = !DILocation(line: 200, column: 38, scope: !7)
!257 = !DILocation(line: 203, column: 38, scope: !7)
!258 = !DILocation(line: 206, column: 38, scope: !7)
!259 = !DILocation(line: 209, column: 38, scope: !7)
!260 = !DILocation(line: 212, column: 38, scope: !7)
!261 = !DILocation(line: 215, column: 38, scope: !7)
!262 = !DILocation(line: 216, column: 25, scope: !7)
!263 = !DILocation(line: 216, column: 38, scope: !7)
!264 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !235)
!265 = !DILocation(line: 217, column: 25, scope: !7)
!266 = !DILocation(line: 217, column: 38, scope: !7)
!267 = !DILocation(line: 217, column: 4, scope: !7)
