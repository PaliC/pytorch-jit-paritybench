; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = icmp slt i32 %13, 984064, !dbg !14
  %18 = icmp slt i32 %15, 984064, !dbg !14
  %19 = icmp slt i32 %16, 984064, !dbg !14
  %20 = srem i32 %13, 256, !dbg !15
  %21 = srem i32 %14, 256, !dbg !15
  %22 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !16
  %23 = shufflevector <2 x i32> %22, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %24 = sdiv <2 x i32> %23, <i32 7936, i32 256>, !dbg !16
  %25 = srem <2 x i32> %24, splat (i32 31), !dbg !17
  %26 = extractelement <2 x i32> %25, i64 0, !dbg !18
  %27 = icmp sgt i32 %26, -1, !dbg !19
  %28 = extractelement <2 x i32> %25, i64 1, !dbg !20
  %29 = icmp sgt i32 %28, -1, !dbg !21
  %30 = or i32 %26, %28, !dbg !18
  %31 = icmp sgt i32 %30, -1, !dbg !18
  %32 = shl nsw i32 %28, 9, !dbg !20
  %33 = extractelement <2 x i32> %24, i64 0, !dbg !22
  %34 = mul i32 %33, 31744, !dbg !22
  %35 = add i32 %32, %34, !dbg !23
  %36 = add i32 %35, %20, !dbg !24
  %37 = add i32 %35, %21, !dbg !24
  %38 = sext i32 %36 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = sext i32 %37 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = and i1 %17, %31, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42) #2, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42) #2, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %53 = or disjoint i32 %35, 256, !dbg !28
  %54 = add nsw i32 %53, %20, !dbg !29
  %55 = add nsw i32 %53, %21, !dbg !29
  %56 = sext i32 %54 to i64, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !30
  %58 = sext i32 %55 to i64, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !30
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42) #2, !dbg !31
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !31
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !31
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !31
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !31
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42) #2, !dbg !31
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !31
  %70 = add nsw <2 x i32> %25, splat (i32 1), !dbg !32
  %71 = icmp ult <2 x i32> %70, splat (i32 31), !dbg !32
  %72 = extractelement <2 x i1> %71, i64 1, !dbg !33
  %73 = and i1 %27, %72, !dbg !33
  %74 = add i32 %35, 512, !dbg !34
  %75 = add i32 %74, %20, !dbg !35
  %76 = add i32 %74, %21, !dbg !35
  %77 = sext i32 %75 to i64, !dbg !36
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !36
  %79 = sext i32 %76 to i64, !dbg !36
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !36
  %81 = and i1 %17, %73, !dbg !37
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81) #2, !dbg !38
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !38
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !38
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !38
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !38
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81) #2, !dbg !38
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !38
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !38
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !38
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !38
  %92 = add i32 %35, 15872, !dbg !39
  %93 = add i32 %92, %20, !dbg !40
  %94 = add i32 %92, %21, !dbg !40
  %95 = sext i32 %93 to i64, !dbg !41
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !41
  %97 = sext i32 %94 to i64, !dbg !41
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !41
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42) #2, !dbg !42
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !42
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !42
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !42
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !42
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42) #2, !dbg !42
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !42
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !42
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !42
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !42
  %109 = add i32 %35, 16128, !dbg !43
  %110 = add nsw i32 %109, %20, !dbg !44
  %111 = add nsw i32 %109, %21, !dbg !44
  %112 = sext i32 %110 to i64, !dbg !45
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !45
  %114 = sext i32 %111 to i64, !dbg !45
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !45
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42) #2, !dbg !46
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !46
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !46
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !46
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !46
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42) #2, !dbg !46
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !46
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !46
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !46
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !46
  %126 = add i32 %35, 16384, !dbg !47
  %127 = add i32 %126, %20, !dbg !48
  %128 = add i32 %126, %21, !dbg !48
  %129 = sext i32 %127 to i64, !dbg !49
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !49
  %131 = sext i32 %128 to i64, !dbg !49
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !49
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %130, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81) #2, !dbg !50
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !50
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !50
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !50
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !50
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %132, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81) #2, !dbg !50
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !50
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !50
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !50
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !50
  %143 = extractelement <2 x i1> %71, i64 0, !dbg !51
  %144 = and i1 %29, %143, !dbg !51
  %145 = add i32 %35, 31744, !dbg !52
  %146 = add i32 %145, %20, !dbg !53
  %147 = add i32 %145, %21, !dbg !53
  %148 = sext i32 %146 to i64, !dbg !54
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !54
  %150 = sext i32 %147 to i64, !dbg !54
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !54
  %152 = and i1 %17, %144, !dbg !55
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152) #2, !dbg !56
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !56
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !56
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !56
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !56
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %151, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152) #2, !dbg !56
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !56
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !56
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !56
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !56
  %163 = add i32 %35, 32000, !dbg !57
  %164 = add nsw i32 %163, %20, !dbg !58
  %165 = add nsw i32 %163, %21, !dbg !58
  %166 = sext i32 %164 to i64, !dbg !59
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !59
  %168 = sext i32 %165 to i64, !dbg !59
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !59
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %167, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152) #2, !dbg !60
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !60
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !60
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !60
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !60
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %169, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152, i32 -8388608, i1 %152) #2, !dbg !60
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !60
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !60
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !60
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !60
  %180 = and i1 %143, %72, !dbg !61
  %181 = add i32 %35, 32256, !dbg !62
  %182 = add i32 %181, %20, !dbg !63
  %183 = add i32 %181, %21, !dbg !63
  %184 = sext i32 %182 to i64, !dbg !64
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !64
  %186 = sext i32 %183 to i64, !dbg !64
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !64
  %188 = and i1 %17, %180, !dbg !65
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %185, i1 %188, i32 -8388608, i1 %188, i32 -8388608, i1 %188, i32 -8388608, i1 %188, i32 -8388608, i1 %188) #2, !dbg !66
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !66
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !66
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !66
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !66
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %187, i1 %188, i32 -8388608, i1 %188, i32 -8388608, i1 %188, i32 -8388608, i1 %188, i32 -8388608, i1 %188) #2, !dbg !66
  %195 = extractvalue { i32, i32, i32, i32 } %194, 0, !dbg !66
  %196 = extractvalue { i32, i32, i32, i32 } %194, 1, !dbg !66
  %197 = extractvalue { i32, i32, i32, i32 } %194, 2, !dbg !66
  %198 = extractvalue { i32, i32, i32, i32 } %194, 3, !dbg !66
  %199 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !27
  %200 = insertelement <4 x i32> %199, i32 %45, i64 1, !dbg !27
  %201 = insertelement <4 x i32> %200, i32 %46, i64 2, !dbg !27
  %202 = insertelement <4 x i32> %201, i32 %47, i64 3, !dbg !27
  %203 = bitcast <4 x i32> %202 to <4 x float>, !dbg !27
  %204 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !31
  %205 = insertelement <4 x i32> %204, i32 %62, i64 1, !dbg !31
  %206 = insertelement <4 x i32> %205, i32 %63, i64 2, !dbg !31
  %207 = insertelement <4 x i32> %206, i32 %64, i64 3, !dbg !31
  %208 = bitcast <4 x i32> %207 to <4 x float>, !dbg !31
  %209 = fcmp ogt <4 x float> %208, %203, !dbg !67
  %210 = fcmp uno <4 x float> %208, zeroinitializer, !dbg !71
  %211 = or <4 x i1> %209, %210, !dbg !72
  %.v = select <4 x i1> %211, <4 x i32> %207, <4 x i32> %202, !dbg !73
  %212 = bitcast <4 x i32> %.v to <4 x float>, !dbg !73
  %213 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !38
  %214 = insertelement <4 x i32> %213, i32 %84, i64 1, !dbg !38
  %215 = insertelement <4 x i32> %214, i32 %85, i64 2, !dbg !38
  %216 = insertelement <4 x i32> %215, i32 %86, i64 3, !dbg !38
  %217 = bitcast <4 x i32> %216 to <4 x float>, !dbg !38
  %218 = fcmp olt <4 x float> %212, %217, !dbg !74
  %219 = fcmp uno <4 x float> %217, zeroinitializer, !dbg !76
  %220 = or <4 x i1> %219, %218, !dbg !77
  %.v15 = select <4 x i1> %220, <4 x i32> %216, <4 x i32> %.v, !dbg !78
  %221 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !78
  %222 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !42
  %223 = insertelement <4 x i32> %222, i32 %101, i64 1, !dbg !42
  %224 = insertelement <4 x i32> %223, i32 %102, i64 2, !dbg !42
  %225 = insertelement <4 x i32> %224, i32 %103, i64 3, !dbg !42
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !42
  %227 = fcmp olt <4 x float> %221, %226, !dbg !79
  %228 = fcmp uno <4 x float> %226, zeroinitializer, !dbg !81
  %229 = or <4 x i1> %228, %227, !dbg !82
  %.v16 = select <4 x i1> %229, <4 x i32> %225, <4 x i32> %.v15, !dbg !83
  %230 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !83
  %231 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !46
  %232 = insertelement <4 x i32> %231, i32 %118, i64 1, !dbg !46
  %233 = insertelement <4 x i32> %232, i32 %119, i64 2, !dbg !46
  %234 = insertelement <4 x i32> %233, i32 %120, i64 3, !dbg !46
  %235 = bitcast <4 x i32> %234 to <4 x float>, !dbg !46
  %236 = fcmp olt <4 x float> %230, %235, !dbg !84
  %237 = fcmp uno <4 x float> %235, zeroinitializer, !dbg !86
  %238 = or <4 x i1> %237, %236, !dbg !87
  %.v17 = select <4 x i1> %238, <4 x i32> %234, <4 x i32> %.v16, !dbg !88
  %239 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !88
  %240 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !50
  %241 = insertelement <4 x i32> %240, i32 %135, i64 1, !dbg !50
  %242 = insertelement <4 x i32> %241, i32 %136, i64 2, !dbg !50
  %243 = insertelement <4 x i32> %242, i32 %137, i64 3, !dbg !50
  %244 = bitcast <4 x i32> %243 to <4 x float>, !dbg !50
  %245 = fcmp olt <4 x float> %239, %244, !dbg !89
  %246 = fcmp uno <4 x float> %244, zeroinitializer, !dbg !91
  %247 = or <4 x i1> %246, %245, !dbg !92
  %.v18 = select <4 x i1> %247, <4 x i32> %243, <4 x i32> %.v17, !dbg !93
  %248 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !93
  %249 = insertelement <4 x i32> poison, i32 %154, i64 0, !dbg !56
  %250 = insertelement <4 x i32> %249, i32 %155, i64 1, !dbg !56
  %251 = insertelement <4 x i32> %250, i32 %156, i64 2, !dbg !56
  %252 = insertelement <4 x i32> %251, i32 %157, i64 3, !dbg !56
  %253 = bitcast <4 x i32> %252 to <4 x float>, !dbg !56
  %254 = fcmp olt <4 x float> %248, %253, !dbg !94
  %255 = fcmp uno <4 x float> %253, zeroinitializer, !dbg !96
  %256 = or <4 x i1> %255, %254, !dbg !97
  %.v19 = select <4 x i1> %256, <4 x i32> %252, <4 x i32> %.v18, !dbg !98
  %257 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !98
  %258 = insertelement <4 x i32> poison, i32 %171, i64 0, !dbg !60
  %259 = insertelement <4 x i32> %258, i32 %172, i64 1, !dbg !60
  %260 = insertelement <4 x i32> %259, i32 %173, i64 2, !dbg !60
  %261 = insertelement <4 x i32> %260, i32 %174, i64 3, !dbg !60
  %262 = bitcast <4 x i32> %261 to <4 x float>, !dbg !60
  %263 = fcmp olt <4 x float> %257, %262, !dbg !99
  %264 = fcmp uno <4 x float> %262, zeroinitializer, !dbg !101
  %265 = or <4 x i1> %264, %263, !dbg !102
  %.v20 = select <4 x i1> %265, <4 x i32> %261, <4 x i32> %.v19, !dbg !103
  %266 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !103
  %267 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !66
  %268 = insertelement <4 x i32> %267, i32 %191, i64 1, !dbg !66
  %269 = insertelement <4 x i32> %268, i32 %192, i64 2, !dbg !66
  %270 = insertelement <4 x i32> %269, i32 %193, i64 3, !dbg !66
  %271 = bitcast <4 x i32> %270 to <4 x float>, !dbg !66
  %272 = fcmp olt <4 x float> %266, %271, !dbg !104
  %273 = extractelement <4 x i1> %272, i64 0, !dbg !106
  %274 = extractelement <4 x i1> %272, i64 1, !dbg !106
  %275 = extractelement <4 x i1> %272, i64 2, !dbg !106
  %276 = extractelement <4 x i1> %272, i64 3, !dbg !106
  %277 = zext <4 x i1> %209 to <4 x i8>, !dbg !107
  %278 = select <4 x i1> %218, <4 x i8> splat (i8 2), <4 x i8> %277, !dbg !108
  %279 = select <4 x i1> %227, <4 x i8> splat (i8 3), <4 x i8> %278, !dbg !109
  %280 = select <4 x i1> %236, <4 x i8> splat (i8 4), <4 x i8> %279, !dbg !110
  %281 = select <4 x i1> %245, <4 x i8> splat (i8 5), <4 x i8> %280, !dbg !111
  %282 = select <4 x i1> %254, <4 x i8> splat (i8 6), <4 x i8> %281, !dbg !112
  %283 = select <4 x i1> %263, <4 x i8> splat (i8 7), <4 x i8> %282, !dbg !113
  %284 = select <4 x i1> %272, <4 x i8> splat (i8 8), <4 x i8> %283, !dbg !114
  %285 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !27
  %286 = insertelement <4 x i32> %285, i32 %50, i64 1, !dbg !27
  %287 = insertelement <4 x i32> %286, i32 %51, i64 2, !dbg !27
  %288 = insertelement <4 x i32> %287, i32 %52, i64 3, !dbg !27
  %289 = bitcast <4 x i32> %288 to <4 x float>, !dbg !27
  %290 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !31
  %291 = insertelement <4 x i32> %290, i32 %67, i64 1, !dbg !31
  %292 = insertelement <4 x i32> %291, i32 %68, i64 2, !dbg !31
  %293 = insertelement <4 x i32> %292, i32 %69, i64 3, !dbg !31
  %294 = bitcast <4 x i32> %293 to <4 x float>, !dbg !31
  %295 = fcmp ogt <4 x float> %294, %289, !dbg !67
  %296 = fcmp uno <4 x float> %294, zeroinitializer, !dbg !71
  %297 = or <4 x i1> %295, %296, !dbg !72
  %.v21 = select <4 x i1> %297, <4 x i32> %293, <4 x i32> %288, !dbg !73
  %298 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !73
  %299 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !38
  %300 = insertelement <4 x i32> %299, i32 %89, i64 1, !dbg !38
  %301 = insertelement <4 x i32> %300, i32 %90, i64 2, !dbg !38
  %302 = insertelement <4 x i32> %301, i32 %91, i64 3, !dbg !38
  %303 = bitcast <4 x i32> %302 to <4 x float>, !dbg !38
  %304 = fcmp olt <4 x float> %298, %303, !dbg !74
  %305 = fcmp uno <4 x float> %303, zeroinitializer, !dbg !76
  %306 = or <4 x i1> %305, %304, !dbg !77
  %.v22 = select <4 x i1> %306, <4 x i32> %302, <4 x i32> %.v21, !dbg !78
  %307 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !78
  %308 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !42
  %309 = insertelement <4 x i32> %308, i32 %106, i64 1, !dbg !42
  %310 = insertelement <4 x i32> %309, i32 %107, i64 2, !dbg !42
  %311 = insertelement <4 x i32> %310, i32 %108, i64 3, !dbg !42
  %312 = bitcast <4 x i32> %311 to <4 x float>, !dbg !42
  %313 = fcmp olt <4 x float> %307, %312, !dbg !79
  %314 = fcmp uno <4 x float> %312, zeroinitializer, !dbg !81
  %315 = or <4 x i1> %314, %313, !dbg !82
  %.v23 = select <4 x i1> %315, <4 x i32> %311, <4 x i32> %.v22, !dbg !83
  %316 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !83
  %317 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !46
  %318 = insertelement <4 x i32> %317, i32 %123, i64 1, !dbg !46
  %319 = insertelement <4 x i32> %318, i32 %124, i64 2, !dbg !46
  %320 = insertelement <4 x i32> %319, i32 %125, i64 3, !dbg !46
  %321 = bitcast <4 x i32> %320 to <4 x float>, !dbg !46
  %322 = fcmp olt <4 x float> %316, %321, !dbg !84
  %323 = fcmp uno <4 x float> %321, zeroinitializer, !dbg !86
  %324 = or <4 x i1> %323, %322, !dbg !87
  %.v24 = select <4 x i1> %324, <4 x i32> %320, <4 x i32> %.v23, !dbg !88
  %325 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !88
  %326 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !50
  %327 = insertelement <4 x i32> %326, i32 %140, i64 1, !dbg !50
  %328 = insertelement <4 x i32> %327, i32 %141, i64 2, !dbg !50
  %329 = insertelement <4 x i32> %328, i32 %142, i64 3, !dbg !50
  %330 = bitcast <4 x i32> %329 to <4 x float>, !dbg !50
  %331 = fcmp olt <4 x float> %325, %330, !dbg !89
  %332 = fcmp uno <4 x float> %330, zeroinitializer, !dbg !91
  %333 = or <4 x i1> %332, %331, !dbg !92
  %.v25 = select <4 x i1> %333, <4 x i32> %329, <4 x i32> %.v24, !dbg !93
  %334 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !93
  %335 = insertelement <4 x i32> poison, i32 %159, i64 0, !dbg !56
  %336 = insertelement <4 x i32> %335, i32 %160, i64 1, !dbg !56
  %337 = insertelement <4 x i32> %336, i32 %161, i64 2, !dbg !56
  %338 = insertelement <4 x i32> %337, i32 %162, i64 3, !dbg !56
  %339 = bitcast <4 x i32> %338 to <4 x float>, !dbg !56
  %340 = fcmp olt <4 x float> %334, %339, !dbg !94
  %341 = fcmp uno <4 x float> %339, zeroinitializer, !dbg !96
  %342 = or <4 x i1> %341, %340, !dbg !97
  %.v26 = select <4 x i1> %342, <4 x i32> %338, <4 x i32> %.v25, !dbg !98
  %343 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !98
  %344 = insertelement <4 x i32> poison, i32 %176, i64 0, !dbg !60
  %345 = insertelement <4 x i32> %344, i32 %177, i64 1, !dbg !60
  %346 = insertelement <4 x i32> %345, i32 %178, i64 2, !dbg !60
  %347 = insertelement <4 x i32> %346, i32 %179, i64 3, !dbg !60
  %348 = bitcast <4 x i32> %347 to <4 x float>, !dbg !60
  %349 = fcmp olt <4 x float> %343, %348, !dbg !99
  %350 = fcmp uno <4 x float> %348, zeroinitializer, !dbg !101
  %351 = or <4 x i1> %350, %349, !dbg !102
  %.v27 = select <4 x i1> %351, <4 x i32> %347, <4 x i32> %.v26, !dbg !103
  %352 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !103
  %353 = insertelement <4 x i32> poison, i32 %195, i64 0, !dbg !66
  %354 = insertelement <4 x i32> %353, i32 %196, i64 1, !dbg !66
  %355 = insertelement <4 x i32> %354, i32 %197, i64 2, !dbg !66
  %356 = insertelement <4 x i32> %355, i32 %198, i64 3, !dbg !66
  %357 = bitcast <4 x i32> %356 to <4 x float>, !dbg !66
  %358 = fcmp olt <4 x float> %352, %357, !dbg !104
  %359 = shufflevector <4 x float> %357, <4 x float> %271, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !115
  %360 = fcmp uno <8 x float> %359, zeroinitializer, !dbg !115
  %361 = extractelement <8 x i1> %360, i64 7, !dbg !106
  %362 = or i1 %361, %273, !dbg !106
  %363 = extractelement <8 x i1> %360, i64 6, !dbg !106
  %364 = or i1 %363, %274, !dbg !106
  %365 = extractelement <8 x i1> %360, i64 5, !dbg !106
  %366 = or i1 %365, %275, !dbg !106
  %367 = extractelement <8 x i1> %360, i64 4, !dbg !106
  %368 = or i1 %367, %276, !dbg !106
  %369 = extractelement <4 x i1> %358, i64 0, !dbg !106
  %370 = extractelement <8 x i1> %360, i64 3, !dbg !106
  %371 = or i1 %370, %369, !dbg !106
  %372 = extractelement <4 x i1> %358, i64 1, !dbg !106
  %373 = extractelement <8 x i1> %360, i64 2, !dbg !106
  %374 = or i1 %373, %372, !dbg !106
  %375 = extractelement <4 x i1> %358, i64 2, !dbg !106
  %376 = extractelement <8 x i1> %360, i64 1, !dbg !106
  %377 = or i1 %376, %375, !dbg !106
  %378 = extractelement <4 x i1> %358, i64 3, !dbg !106
  %379 = extractelement <8 x i1> %360, i64 0, !dbg !106
  %380 = or i1 %379, %378, !dbg !106
  %381 = zext <4 x i1> %295 to <4 x i8>, !dbg !107
  %382 = select <4 x i1> %304, <4 x i8> splat (i8 2), <4 x i8> %381, !dbg !108
  %383 = select <4 x i1> %313, <4 x i8> splat (i8 3), <4 x i8> %382, !dbg !109
  %384 = select <4 x i1> %322, <4 x i8> splat (i8 4), <4 x i8> %383, !dbg !110
  %385 = select <4 x i1> %331, <4 x i8> splat (i8 5), <4 x i8> %384, !dbg !111
  %386 = select <4 x i1> %340, <4 x i8> splat (i8 6), <4 x i8> %385, !dbg !112
  %387 = select <4 x i1> %349, <4 x i8> splat (i8 7), <4 x i8> %386, !dbg !113
  %388 = select <4 x i1> %358, <4 x i8> splat (i8 8), <4 x i8> %387, !dbg !114
  %389 = sext i32 %15 to i64, !dbg !116
  %390 = getelementptr float, ptr addrspace(1) %1, i64 %389, !dbg !116
  %391 = sext i32 %16 to i64, !dbg !116
  %392 = getelementptr float, ptr addrspace(1) %1, i64 %391, !dbg !116
  %393 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !117
  %394 = extractelement <4 x i32> %.v20, i64 0, !dbg !117
  %395 = select i1 %362, i32 %190, i32 %394, !dbg !118
  %396 = extractelement <4 x i32> %.v20, i64 1, !dbg !117
  %397 = select i1 %364, i32 %191, i32 %396, !dbg !118
  %398 = extractelement <4 x i32> %.v20, i64 2, !dbg !117
  %399 = select i1 %366, i32 %192, i32 %398, !dbg !118
  %400 = extractelement <4 x i32> %.v20, i64 3, !dbg !117
  %401 = select i1 %368, i32 %193, i32 %400, !dbg !118
  %402 = extractelement <4 x i32> %.v27, i64 0, !dbg !117
  %403 = select i1 %371, i32 %195, i32 %402, !dbg !118
  %404 = extractelement <4 x i32> %.v27, i64 1, !dbg !117
  %405 = select i1 %374, i32 %196, i32 %404, !dbg !118
  %406 = extractelement <4 x i32> %.v27, i64 2, !dbg !117
  %407 = select i1 %377, i32 %197, i32 %406, !dbg !118
  %408 = extractelement <4 x i32> %.v27, i64 3, !dbg !117
  %409 = select i1 %380, i32 %198, i32 %408, !dbg !118
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %393, i32 %395, i32 %397, i32 %399, i32 %401, i1 true) #2, !dbg !117
  %410 = getelementptr inbounds i8, ptr addrspace(3) %393, i32 16, !dbg !117
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %410, i32 %403, i32 %405, i32 %407, i32 %409, i1 true) #2, !dbg !117
  tail call void @llvm.nvvm.barrier0(), !dbg !117
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !117
  %412 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !117
  %413 = load <4 x i32>, ptr addrspace(3) %412, align 16, !dbg !117
  %.extract = load i32, ptr addrspace(3) %411, align 16, !dbg !117
  %414 = getelementptr inbounds i8, ptr addrspace(3) %411, i32 4, !dbg !117
  %.extract8 = load i32, ptr addrspace(3) %414, align 4, !dbg !117
  %415 = getelementptr inbounds i8, ptr addrspace(3) %411, i32 8, !dbg !117
  %.extract9 = load i32, ptr addrspace(3) %415, align 8, !dbg !117
  %416 = getelementptr inbounds i8, ptr addrspace(3) %411, i32 12, !dbg !117
  %.extract10 = load i32, ptr addrspace(3) %416, align 4, !dbg !117
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %390, i1 %18) #2, !dbg !117
  %.extract11 = extractelement <4 x i32> %413, i64 0, !dbg !117
  %.extract12 = extractelement <4 x i32> %413, i64 1, !dbg !117
  %.extract13 = extractelement <4 x i32> %413, i64 2, !dbg !117
  %.extract14 = extractelement <4 x i32> %413, i64 3, !dbg !117
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %392, i1 %19) #2, !dbg !117
  %417 = sext i32 %13 to i64, !dbg !119
  %418 = getelementptr i8, ptr addrspace(1) %2, i64 %417, !dbg !119
  %419 = bitcast <4 x i8> %284 to i32, !dbg !120
  %420 = bitcast <4 x i8> %388 to i32, !dbg !120
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %419, i32 %420, ptr addrspace(1) %418, i1 %17) #2, !dbg !120
  ret void, !dbg !121
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3mu2yeshvfxlfl6auwhdit4bpkljr5ywjkykz55kjrap3muyn4x.py", directory: "inductor_cache/3m")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_14", linkageName: "triton_poi_fused_max_pool2d_with_indices_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 21, scope: !7)
!17 = !DILocation(line: 24, column: 29, scope: !7)
!18 = !DILocation(line: 39, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 40, column: 40, scope: !7)
!21 = !DILocation(line: 36, column: 19, scope: !7)
!22 = !DILocation(line: 40, column: 51, scope: !7)
!23 = !DILocation(line: 40, column: 36, scope: !7)
!24 = !DILocation(line: 40, column: 45, scope: !7)
!25 = !DILocation(line: 40, column: 31, scope: !7)
!26 = !DILocation(line: 40, column: 64, scope: !7)
!27 = !DILocation(line: 40, column: 56, scope: !7)
!28 = !DILocation(line: 46, column: 42, scope: !7)
!29 = !DILocation(line: 46, column: 51, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 62, scope: !7)
!32 = !DILocation(line: 71, column: 20, scope: !7)
!33 = !DILocation(line: 52, column: 19, scope: !7)
!34 = !DILocation(line: 53, column: 42, scope: !7)
!35 = !DILocation(line: 53, column: 51, scope: !7)
!36 = !DILocation(line: 53, column: 31, scope: !7)
!37 = !DILocation(line: 53, column: 70, scope: !7)
!38 = !DILocation(line: 53, column: 62, scope: !7)
!39 = !DILocation(line: 60, column: 44, scope: !7)
!40 = !DILocation(line: 60, column: 53, scope: !7)
!41 = !DILocation(line: 60, column: 31, scope: !7)
!42 = !DILocation(line: 60, column: 64, scope: !7)
!43 = !DILocation(line: 63, column: 44, scope: !7)
!44 = !DILocation(line: 63, column: 53, scope: !7)
!45 = !DILocation(line: 63, column: 31, scope: !7)
!46 = !DILocation(line: 63, column: 64, scope: !7)
!47 = !DILocation(line: 66, column: 44, scope: !7)
!48 = !DILocation(line: 66, column: 53, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 64, scope: !7)
!51 = !DILocation(line: 72, column: 20, scope: !7)
!52 = !DILocation(line: 73, column: 44, scope: !7)
!53 = !DILocation(line: 73, column: 53, scope: !7)
!54 = !DILocation(line: 73, column: 31, scope: !7)
!55 = !DILocation(line: 73, column: 72, scope: !7)
!56 = !DILocation(line: 73, column: 64, scope: !7)
!57 = !DILocation(line: 76, column: 44, scope: !7)
!58 = !DILocation(line: 76, column: 53, scope: !7)
!59 = !DILocation(line: 76, column: 31, scope: !7)
!60 = !DILocation(line: 76, column: 64, scope: !7)
!61 = !DILocation(line: 78, column: 20, scope: !7)
!62 = !DILocation(line: 79, column: 44, scope: !7)
!63 = !DILocation(line: 79, column: 53, scope: !7)
!64 = !DILocation(line: 79, column: 31, scope: !7)
!65 = !DILocation(line: 79, column: 72, scope: !7)
!66 = !DILocation(line: 79, column: 64, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!70 = !DILocation(line: 47, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !70)
!74 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !75)
!75 = !DILocation(line: 54, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !80)
!80 = !DILocation(line: 61, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !85)
!85 = !DILocation(line: 64, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !90)
!90 = !DILocation(line: 67, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !95)
!95 = !DILocation(line: 74, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !100)
!100 = !DILocation(line: 77, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !105)
!105 = !DILocation(line: 80, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !105)
!107 = !DILocation(line: 84, column: 35, scope: !7)
!108 = !DILocation(line: 87, column: 35, scope: !7)
!109 = !DILocation(line: 90, column: 35, scope: !7)
!110 = !DILocation(line: 93, column: 35, scope: !7)
!111 = !DILocation(line: 96, column: 35, scope: !7)
!112 = !DILocation(line: 99, column: 35, scope: !7)
!113 = !DILocation(line: 102, column: 35, scope: !7)
!114 = !DILocation(line: 105, column: 35, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !105)
!116 = !DILocation(line: 106, column: 25, scope: !7)
!117 = !DILocation(line: 106, column: 37, scope: !7)
!118 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !105)
!119 = !DILocation(line: 107, column: 25, scope: !7)
!120 = !DILocation(line: 107, column: 37, scope: !7)
!121 = !DILocation(line: 107, column: 4, scope: !7)
