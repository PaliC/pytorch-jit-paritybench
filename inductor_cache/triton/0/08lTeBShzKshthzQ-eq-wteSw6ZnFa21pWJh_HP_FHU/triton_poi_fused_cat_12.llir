; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %12, 2, !dbg !13
  %15 = or disjoint i32 %12, 3, !dbg !13
  %16 = icmp slt i32 %12, 50176, !dbg !14
  %17 = insertelement <4 x i32> poison, i32 %15, i64 0, !dbg !15
  %18 = insertelement <4 x i32> %17, i32 %14, i64 1, !dbg !15
  %19 = insertelement <4 x i32> %18, i32 %13, i64 2, !dbg !15
  %20 = insertelement <4 x i32> %19, i32 %12, i64 3, !dbg !15
  %21 = sdiv <4 x i32> %20, splat (i32 49), !dbg !15
  %22 = srem <4 x i32> %21, splat (i32 256), !dbg !16
  %23 = srem i32 %12, 49, !dbg !17
  %24 = srem i32 %13, 49, !dbg !17
  %25 = srem i32 %14, 49, !dbg !17
  %26 = srem i32 %15, 49, !dbg !17
  %27 = sdiv i32 %12, 12544, !dbg !18
  %28 = icmp slt <4 x i32> %22, splat (i32 128), !dbg !19
  %29 = shl nsw i32 %23, 7, !dbg !20
  %30 = shl nsw i32 %24, 7, !dbg !20
  %31 = shl nsw i32 %25, 7, !dbg !20
  %32 = shl nsw i32 %26, 7, !dbg !20
  %33 = mul nsw i32 %27, 6272, !dbg !21
  %34 = add nsw i32 %29, %33, !dbg !22
  %35 = add nsw i32 %33, %30, !dbg !22
  %36 = add nsw i32 %33, %31, !dbg !22
  %37 = add nsw i32 %33, %32, !dbg !22
  %38 = extractelement <4 x i32> %22, i64 3, !dbg !23
  %39 = add nsw i32 %34, %38, !dbg !24
  %40 = extractelement <4 x i32> %22, i64 2, !dbg !23
  %41 = add nsw i32 %35, %40, !dbg !24
  %42 = extractelement <4 x i32> %22, i64 1, !dbg !23
  %43 = add nsw i32 %36, %42, !dbg !24
  %44 = extractelement <4 x i32> %22, i64 0, !dbg !23
  %45 = add nsw i32 %37, %44, !dbg !24
  %46 = sext i32 %39 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %41 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = sext i32 %43 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = sext i32 %45 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = extractelement <4 x i1> %28, i64 3, !dbg !26
  %55 = and i1 %16, %54, !dbg !26
  %56 = extractelement <4 x i1> %28, i64 2, !dbg !26
  %57 = and i1 %56, %16, !dbg !26
  %58 = extractelement <4 x i1> %28, i64 1, !dbg !26
  %59 = and i1 %58, %16, !dbg !26
  %60 = extractelement <4 x i1> %28, i64 0, !dbg !26
  %61 = and i1 %60, %16, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %55, i32 0, i1 %55) #1, !dbg !27
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %57, i32 0, i1 %57) #1, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %59, i32 0, i1 %59) #1, !dbg !27
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %61, i32 0, i1 %61) #1, !dbg !27
  %66 = sext i32 %38 to i64, !dbg !28
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !28
  %68 = sext i32 %40 to i64, !dbg !28
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !28
  %70 = sext i32 %42 to i64, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !28
  %72 = sext i32 %44 to i64, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %55, i32 0, i1 %55) #1, !dbg !29
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %57, i32 0, i1 %57) #1, !dbg !29
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %59, i32 0, i1 %59) #1, !dbg !29
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %61, i32 0, i1 %61) #1, !dbg !29
  %78 = icmp sgt i32 %38, 127, !dbg !23
  %79 = icmp sgt i32 %40, 127, !dbg !23
  %80 = icmp sgt i32 %42, 127, !dbg !23
  %81 = icmp sgt i32 %44, 127, !dbg !23
  %82 = add nsw i32 %38, -128, !dbg !30
  %83 = add nsw i32 %40, -128, !dbg !30
  %84 = add nsw i32 %42, -128, !dbg !30
  %85 = add nsw i32 %44, -128, !dbg !30
  %86 = add nsw i32 %34, %82, !dbg !31
  %87 = add nsw i32 %35, %83, !dbg !31
  %88 = add nsw i32 %36, %84, !dbg !31
  %89 = add nsw i32 %37, %85, !dbg !31
  %90 = sext i32 %86 to i64, !dbg !32
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !32
  %92 = sext i32 %87 to i64, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !32
  %94 = sext i32 %88 to i64, !dbg !32
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !32
  %96 = sext i32 %89 to i64, !dbg !32
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !32
  %98 = and i1 %16, %78, !dbg !33
  %99 = and i1 %79, %16, !dbg !33
  %100 = and i1 %80, %16, !dbg !33
  %101 = and i1 %81, %16, !dbg !33
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %98, i32 0, i1 %98) #1, !dbg !34
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %99, i32 0, i1 %99) #1, !dbg !34
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %100, i32 0, i1 %100) #1, !dbg !34
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %101, i32 0, i1 %101) #1, !dbg !34
  %106 = sext i32 %82 to i64, !dbg !35
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !35
  %108 = sext i32 %83 to i64, !dbg !35
  %109 = getelementptr float, ptr addrspace(1) %3, i64 %108, !dbg !35
  %110 = sext i32 %84 to i64, !dbg !35
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %110, !dbg !35
  %112 = sext i32 %85 to i64, !dbg !35
  %113 = getelementptr float, ptr addrspace(1) %3, i64 %112, !dbg !35
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %98, i32 0, i1 %98) #1, !dbg !36
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %99, i32 0, i1 %99) #1, !dbg !36
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %100, i32 0, i1 %100) #1, !dbg !36
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %101, i32 0, i1 %101) #1, !dbg !36
  %118 = insertelement <8 x i32> poison, i32 %105, i64 0, !dbg !34
  %119 = insertelement <8 x i32> %118, i32 %104, i64 1, !dbg !34
  %120 = insertelement <8 x i32> %119, i32 %103, i64 2, !dbg !34
  %121 = insertelement <8 x i32> %120, i32 %102, i64 3, !dbg !34
  %122 = insertelement <8 x i32> %121, i32 %65, i64 4, !dbg !34
  %123 = insertelement <8 x i32> %122, i32 %64, i64 5, !dbg !34
  %124 = insertelement <8 x i32> %123, i32 %63, i64 6, !dbg !34
  %125 = insertelement <8 x i32> %124, i32 %62, i64 7, !dbg !34
  %126 = bitcast <8 x i32> %125 to <8 x float>, !dbg !34
  %127 = insertelement <8 x i32> poison, i32 %117, i64 0, !dbg !36
  %128 = insertelement <8 x i32> %127, i32 %116, i64 1, !dbg !36
  %129 = insertelement <8 x i32> %128, i32 %115, i64 2, !dbg !36
  %130 = insertelement <8 x i32> %129, i32 %114, i64 3, !dbg !36
  %131 = insertelement <8 x i32> %130, i32 %77, i64 4, !dbg !36
  %132 = insertelement <8 x i32> %131, i32 %76, i64 5, !dbg !36
  %133 = insertelement <8 x i32> %132, i32 %75, i64 6, !dbg !36
  %134 = insertelement <8 x i32> %133, i32 %74, i64 7, !dbg !36
  %135 = bitcast <8 x i32> %134 to <8 x float>, !dbg !36
  %136 = fadd <8 x float> %126, %135, !dbg !37
  %137 = fcmp olt <8 x float> %136, zeroinitializer, !dbg !38
  %138 = extractelement <8 x i1> %137, i64 7, !dbg !42
  %139 = extractelement <8 x float> %136, i64 7, !dbg !42
  %140 = select i1 %138, float 0.000000e+00, float %139, !dbg !42
  %141 = extractelement <8 x i1> %137, i64 6, !dbg !42
  %142 = extractelement <8 x float> %136, i64 6, !dbg !42
  %143 = select i1 %141, float 0.000000e+00, float %142, !dbg !42
  %144 = extractelement <8 x i1> %137, i64 5, !dbg !42
  %145 = extractelement <8 x float> %136, i64 5, !dbg !42
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !42
  %147 = extractelement <8 x i1> %137, i64 4, !dbg !42
  %148 = extractelement <8 x float> %136, i64 4, !dbg !42
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !42
  %150 = extractelement <8 x i1> %137, i64 3, !dbg !44
  %151 = extractelement <8 x float> %136, i64 3, !dbg !44
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !44
  %153 = extractelement <8 x i1> %137, i64 2, !dbg !44
  %154 = extractelement <8 x float> %136, i64 2, !dbg !44
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !44
  %156 = extractelement <8 x i1> %137, i64 1, !dbg !44
  %157 = extractelement <8 x float> %136, i64 1, !dbg !44
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !44
  %159 = extractelement <8 x i1> %137, i64 0, !dbg !44
  %160 = extractelement <8 x float> %136, i64 0, !dbg !44
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !44
  %162 = select i1 %54, float %140, float %152, !dbg !45
  %163 = select i1 %56, float %143, float %155, !dbg !45
  %164 = select i1 %58, float %146, float %158, !dbg !45
  %165 = select i1 %60, float %149, float %161, !dbg !45
  %166 = sext i32 %12 to i64, !dbg !46
  %167 = getelementptr float, ptr addrspace(1) %4, i64 %166, !dbg !46
  %168 = bitcast float %162 to i32, !dbg !47
  %169 = bitcast float %163 to i32, !dbg !47
  %170 = bitcast float %164 to i32, !dbg !47
  %171 = bitcast float %165 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %168, i32 %169, i32 %170, i32 %171, ptr addrspace(1) %167, i1 %16) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c523s56fau73mabc6ur5rfwrsidgvgw575fqer2nr6giovw3lvpo.py", directory: "inductor_cache/52")
!4 = !{ptr @triton_poi_fused_cat_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_12", linkageName: "triton_poi_fused_cat_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 40, column: 20, scope: !7)
!24 = !DILocation(line: 33, column: 50, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 63, scope: !7)
!27 = !DILocation(line: 33, column: 56, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 43, column: 60, scope: !7)
!31 = !DILocation(line: 43, column: 51, scope: !7)
!32 = !DILocation(line: 43, column: 31, scope: !7)
!33 = !DILocation(line: 43, column: 74, scope: !7)
!34 = !DILocation(line: 43, column: 66, scope: !7)
!35 = !DILocation(line: 44, column: 31, scope: !7)
!36 = !DILocation(line: 44, column: 45, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !43)
!43 = !DILocation(line: 37, column: 40, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 0, scope: !7)
!46 = !DILocation(line: 51, column: 25, scope: !7)
!47 = !DILocation(line: 51, column: 37, scope: !7)
!48 = !DILocation(line: 51, column: 4, scope: !7)
