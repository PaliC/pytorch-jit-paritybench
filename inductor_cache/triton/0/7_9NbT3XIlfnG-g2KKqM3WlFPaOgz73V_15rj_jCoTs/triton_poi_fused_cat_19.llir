; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %.frozen4 = freeze i32 %13, !dbg !14
  %15 = sdiv i32 %.frozen4, 64, !dbg !14
  %16 = srem i32 %15, 352, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %17 = sdiv i32 %.frozen, 8, !dbg !16
  %18 = srem i32 %17, 8, !dbg !17
  %19 = mul i32 %17, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %19, !dbg !18
  %20 = sdiv i32 %13, 22528, !dbg !19
  %21 = mul i32 %15, 64, !dbg !20
  %.decomposed5 = sub i32 %.frozen4, %21, !dbg !20
  %22 = srem i32 %14, 64, !dbg !20
  %23 = sext i32 %16 to i64, !dbg !21
  %24 = icmp slt i32 %16, 32, !dbg !21
  %25 = sext i32 %18 to i64, !dbg !22
  %26 = getelementptr i64, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %26, i1 %24, i1 %24) #1, !dbg !23
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %26, i1 %24, i1 %24) #1, !dbg !23
  %29 = lshr i64 %27, 57, !dbg !24
  %30 = and i64 %29, 64, !dbg !24
  %31 = add i64 %30, %27, !dbg !24
  %32 = sext i32 %.decomposed to i64, !dbg !25
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %33, i1 %24, i1 %24, i1 %24) #1, !dbg !26
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !26
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !26
  %37 = lshr i64 %35, 57, !dbg !27
  %38 = and i64 %37, 64, !dbg !27
  %39 = add i64 %38, %35, !dbg !27
  %40 = lshr i64 %36, 57, !dbg !27
  %41 = and i64 %40, 64, !dbg !27
  %42 = add i64 %41, %36, !dbg !27
  %43 = shl i64 %31, 11, !dbg !28
  %44 = shl i32 %20, 17, !dbg !29
  %45 = sext i32 %44 to i64, !dbg !30
  %.idx = shl i64 %39, 7, !dbg !31
  %46 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %46, i64 %43, !dbg !31
  %48 = getelementptr float, ptr addrspace(1) %47, i64 %45, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %48, i64 %23, !dbg !31
  %.idx1 = shl i64 %42, 7, !dbg !31
  %50 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx1, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %50, i64 %43, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %51, i64 %45, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %52, i64 %23, !dbg !31
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %24, i32 0, i1 %24) #1, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %24, i32 0, i1 %24) #1, !dbg !32
  %56 = add nsw i32 %16, -32, !dbg !33
  %57 = icmp ult i32 %56, 64, !dbg !33
  %58 = getelementptr i64, ptr addrspace(1) %2, i64 %25, !dbg !34
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %58, i1 %57, i1 %57) #1, !dbg !35
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %58, i1 %57, i1 %57) #1, !dbg !35
  %61 = lshr i64 %59, 58, !dbg !36
  %62 = and i64 %61, 32, !dbg !36
  %63 = add i64 %62, %59, !dbg !36
  %64 = getelementptr i64, ptr addrspace(1) %2, i64 %32, !dbg !37
  %65 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %64, i1 %57, i1 %57, i1 %57) #1, !dbg !38
  %66 = extractvalue { i64, i64 } %65, 0, !dbg !38
  %67 = extractvalue { i64, i64 } %65, 1, !dbg !38
  %68 = lshr i64 %66, 58, !dbg !39
  %69 = and i64 %68, 32, !dbg !39
  %70 = add i64 %69, %66, !dbg !39
  %71 = lshr i64 %67, 58, !dbg !39
  %72 = and i64 %71, 32, !dbg !39
  %73 = add i64 %72, %67, !dbg !39
  %74 = shl i64 %63, 11, !dbg !40
  %75 = shl i32 %20, 16, !dbg !41
  %76 = sext i32 %75 to i64, !dbg !42
  %77 = sext i32 %56 to i64, !dbg !43
  %.idx2 = shl i64 %70, 8, !dbg !44
  %78 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx2, !dbg !44
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %74, !dbg !44
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %76, !dbg !44
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %77, !dbg !44
  %.idx3 = shl i64 %73, 8, !dbg !44
  %82 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx3, !dbg !44
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %74, !dbg !44
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %76, !dbg !44
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %77, !dbg !44
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %57, i32 0, i1 %57) #1, !dbg !45
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %57, i32 0, i1 %57) #1, !dbg !45
  %88 = icmp sgt i32 %16, 95, !dbg !46
  %89 = shl nsw i32 %.decomposed5, 8, !dbg !47
  %90 = shl nsw i32 %22, 8, !dbg !47
  %91 = shl nsw i32 %20, 14, !dbg !48
  %92 = add nsw i32 %16, -96, !dbg !49
  %93 = add nsw i32 %92, %91, !dbg !50
  %94 = add nsw i32 %93, %89, !dbg !51
  %95 = add nsw i32 %93, %90, !dbg !51
  %96 = sext i32 %94 to i64, !dbg !52
  %97 = getelementptr float, ptr addrspace(1) %4, i64 %96, !dbg !52
  %98 = sext i32 %95 to i64, !dbg !52
  %99 = getelementptr float, ptr addrspace(1) %4, i64 %98, !dbg !52
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %88, i32 0, i1 %88) #1, !dbg !53
  %101 = bitcast i32 %100 to float, !dbg !53
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %88, i32 0, i1 %88) #1, !dbg !53
  %103 = bitcast i32 %102 to float, !dbg !53
  %104 = fcmp ogt float %101, 0.000000e+00, !dbg !54
  %105 = fcmp ogt float %103, 0.000000e+00, !dbg !54
  %106 = fmul float %101, 0x3F847AE140000000, !dbg !55
  %107 = fmul float %103, 0x3F847AE140000000, !dbg !55
  %108 = select i1 %104, float %101, float %106, !dbg !56
  %109 = select i1 %105, float %103, float %107, !dbg !56
  %110 = sext i32 %13 to i64, !dbg !57
  %111 = getelementptr float, ptr addrspace(1) %5, i64 %110, !dbg !57
  %112 = bitcast float %108 to i32, !dbg !58
  %113 = select i1 %88, i32 %112, i32 0, !dbg !59
  %114 = select i1 %57, i32 %86, i32 %113, !dbg !60
  %115 = select i1 %24, i32 %54, i32 %114, !dbg !61
  %116 = bitcast float %109 to i32, !dbg !58
  %117 = select i1 %88, i32 %116, i32 0, !dbg !59
  %118 = select i1 %57, i32 %87, i32 %117, !dbg !60
  %119 = select i1 %24, i32 %55, i32 %118, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %115, i32 %119, ptr addrspace(1) %111, i1 true) #1, !dbg !58
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmix6bem36tqjg32vv4cl54vyzhapwukekp3vnbewtw2bteetboz.py", directory: "inductor_cache/mi")
!4 = !{ptr @triton_poi_fused_cat_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_19, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_19", linkageName: "triton_poi_fused_cat_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 39, column: 32, scope: !7)
!25 = !DILocation(line: 40, column: 31, scope: !7)
!26 = !DILocation(line: 40, column: 36, scope: !7)
!27 = !DILocation(line: 43, column: 35, scope: !7)
!28 = !DILocation(line: 44, column: 47, scope: !7)
!29 = !DILocation(line: 44, column: 61, scope: !7)
!30 = !DILocation(line: 44, column: 54, scope: !7)
!31 = !DILocation(line: 44, column: 31, scope: !7)
!32 = !DILocation(line: 44, column: 73, scope: !7)
!33 = !DILocation(line: 48, column: 20, scope: !7)
!34 = !DILocation(line: 49, column: 31, scope: !7)
!35 = !DILocation(line: 49, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 35, scope: !7)
!37 = !DILocation(line: 54, column: 31, scope: !7)
!38 = !DILocation(line: 54, column: 36, scope: !7)
!39 = !DILocation(line: 57, column: 35, scope: !7)
!40 = !DILocation(line: 58, column: 47, scope: !7)
!41 = !DILocation(line: 58, column: 61, scope: !7)
!42 = !DILocation(line: 58, column: 55, scope: !7)
!43 = !DILocation(line: 58, column: 67, scope: !7)
!44 = !DILocation(line: 58, column: 31, scope: !7)
!45 = !DILocation(line: 58, column: 81, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 35, scope: !7)
!48 = !DILocation(line: 62, column: 46, scope: !7)
!49 = !DILocation(line: 62, column: 60, scope: !7)
!50 = !DILocation(line: 62, column: 40, scope: !7)
!51 = !DILocation(line: 62, column: 52, scope: !7)
!52 = !DILocation(line: 62, column: 31, scope: !7)
!53 = !DILocation(line: 62, column: 66, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 66, column: 20, scope: !7)
!56 = !DILocation(line: 67, column: 35, scope: !7)
!57 = !DILocation(line: 72, column: 25, scope: !7)
!58 = !DILocation(line: 72, column: 37, scope: !7)
!59 = !DILocation(line: 69, column: 35, scope: !7)
!60 = !DILocation(line: 70, column: 35, scope: !7)
!61 = !DILocation(line: 71, column: 34, scope: !7)
!62 = !DILocation(line: 72, column: 4, scope: !7)
