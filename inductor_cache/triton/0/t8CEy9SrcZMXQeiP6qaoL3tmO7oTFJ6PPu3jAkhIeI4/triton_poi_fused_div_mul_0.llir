; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_div_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 16, !dbg !15
  %13 = mul i32 %12, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = sdiv i32 %10, 64, !dbg !17
  %15 = srem i32 %12, 4, !dbg !18
  %16 = sext i32 %10 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 %11) #3, !dbg !20
  %19 = shl nsw i32 %14, 6, !dbg !21
  %20 = add i32 %19, %.decomposed, !dbg !22
  %21 = sext i32 %20 to i64, !dbg !23
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !23
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %11) #3, !dbg !24
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !24
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !24
  %26 = bitcast i32 %24 to float, !dbg !24
  %27 = bitcast i32 %25 to float, !dbg !24
  %28 = add i32 %20, 16, !dbg !25
  %29 = sext i32 %28 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !26
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %11) #3, !dbg !27
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !27
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !27
  %34 = bitcast i32 %32 to float, !dbg !27
  %35 = bitcast i32 %33 to float, !dbg !27
  %36 = add i32 %20, 32, !dbg !28
  %37 = sext i32 %36 to i64, !dbg !29
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !29
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %11) #3, !dbg !30
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !30
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !30
  %42 = bitcast i32 %40 to float, !dbg !30
  %43 = bitcast i32 %41 to float, !dbg !30
  %44 = add i32 %20, 48, !dbg !31
  %45 = sext i32 %44 to i64, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !32
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %11) #3, !dbg !33
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !33
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !33
  %50 = bitcast i32 %48 to float, !dbg !33
  %51 = bitcast i32 %49 to float, !dbg !33
  %52 = sext i32 %15 to i64, !dbg !34
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !34
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %11) #3, !dbg !35
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %11) #3, !dbg !35
  %56 = fmul float %26, %26, !dbg !36
  %57 = fmul float %27, %27, !dbg !36
  %58 = fmul float %34, %34, !dbg !37
  %59 = fmul float %35, %35, !dbg !37
  %60 = fadd float %56, %58, !dbg !38
  %61 = fadd float %57, %59, !dbg !38
  %62 = fmul float %42, %42, !dbg !39
  %63 = fmul float %43, %43, !dbg !39
  %64 = fadd float %60, %62, !dbg !40
  %65 = fadd float %61, %63, !dbg !40
  %66 = fmul float %50, %50, !dbg !41
  %67 = fmul float %51, %51, !dbg !41
  %68 = fadd float %64, %66, !dbg !42
  %69 = fadd float %65, %67, !dbg !42
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %70, 0, !dbg !43
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %71, 0, !dbg !43
  br i1 %.not.i, label %77, label %72, !dbg !43

72:                                               ; preds = %4
  br i1 %.not1.i, label %75, label %73, !dbg !43

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

77:                                               ; preds = %4
  br i1 %.not1.i, label %80, label %78, !dbg !43

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !43
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i1 = icmp eq i32 %82, 0, !dbg !43
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i4 = icmp eq i32 %83, 0, !dbg !43
  br i1 %.not.i1, label %89, label %84, !dbg !43

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !43

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !43

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

__nv_sqrtf.exit5:                                 ; preds = %85, %87, %90, %92
  %.0.i3 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !43
  %94 = bitcast i32 %55 to float, !dbg !35
  %95 = bitcast i32 %54 to float, !dbg !35
  %96 = extractvalue { i32, i32 } %18, 1, !dbg !20
  %97 = bitcast i32 %96 to float, !dbg !20
  %98 = extractvalue { i32, i32 } %18, 0, !dbg !20
  %99 = bitcast i32 %98 to float, !dbg !20
  %100 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !44
  %101 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !44
  %102 = fcmp uno float %.0.i, 0.000000e+00, !dbg !48
  %103 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !48
  %104 = or i1 %100, %102, !dbg !49
  %105 = or i1 %101, %103, !dbg !49
  %106 = select i1 %104, float %.0.i, float 0x3D71979980000000, !dbg !50
  %107 = select i1 %105, float %.0.i3, float 0x3D71979980000000, !dbg !50
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %106) #3, !dbg !51
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %107) #3, !dbg !51
  %110 = fmul float %108, %95, !dbg !52
  %111 = fmul float %109, %94, !dbg !52
  %112 = fmul float %110, 2.000000e+00, !dbg !53
  %113 = fmul float %111, 2.000000e+00, !dbg !53
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !54
  %115 = bitcast float %112 to i32, !dbg !55
  %116 = bitcast float %113 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %115, i32 %116, ptr addrspace(1) %114, i1 %11) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqdkvumhsbnwm6fd5nd2lrkkvlnqor3p34ycsnve2ddemvl5lfih.py", directory: "inductor_cache/qd")
!4 = !{ptr @triton_poi_fused_div_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_mul_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_mul_0", linkageName: "triton_poi_fused_div_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 38, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 43, scope: !7)
!25 = !DILocation(line: 30, column: 40, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 48, scope: !7)
!28 = !DILocation(line: 31, column: 40, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 48, scope: !7)
!31 = !DILocation(line: 32, column: 40, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 48, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 19, scope: !7)
!42 = !DILocation(line: 40, column: 19, scope: !7)
!43 = !DILocation(line: 41, column: 27, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 43, column: 42, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 44, column: 19, scope: !7)
!52 = !DILocation(line: 45, column: 20, scope: !7)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 48, column: 25, scope: !7)
!55 = !DILocation(line: 48, column: 37, scope: !7)
!56 = !DILocation(line: 48, column: 4, scope: !7)
