; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_42(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 5, !dbg !12
  %9 = and i32 %8, 3, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %15 = shl i32 %14, 5, !dbg !15
  %16 = and i32 %7, 31, !dbg !16
  %17 = lshr i32 %7, 3, !dbg !16
  %18 = and i32 %17, 15, !dbg !16
  %19 = or disjoint i32 %18, 16, !dbg !16
  %20 = or disjoint i32 %15, %16, !dbg !17
  %21 = or disjoint i32 %15, %18, !dbg !17
  %22 = or disjoint i32 %15, %19, !dbg !17
  %.frozen = freeze i32 %20, !dbg !18
  %23 = sdiv i32 %.frozen, 64, !dbg !18
  %24 = mul i32 %23, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %24, !dbg !19
  %.frozen19 = freeze i32 %13, !dbg !20
  %25 = sdiv i32 %.frozen19, 256, !dbg !20
  %26 = mul i32 %25, 256, !dbg !21
  %.decomposed20 = sub i32 %.frozen19, %26, !dbg !21
  %27 = shl nsw i32 %.decomposed, 1, !dbg !22
  %28 = shl i32 %23, 8, !dbg !23
  %29 = add i32 %27, %28, !dbg !24
  %30 = shl i32 %12, 14, !dbg !25
  %31 = or disjoint i32 %30, 65536, !dbg !25
  %32 = or disjoint i32 %30, 131072, !dbg !25
  %33 = or disjoint i32 %30, 196608, !dbg !25
  %34 = or disjoint i32 %30, 262144, !dbg !25
  %35 = or disjoint i32 %30, 327680, !dbg !25
  %36 = or disjoint i32 %30, 393216, !dbg !25
  %37 = or disjoint i32 %30, 458752, !dbg !25
  %38 = add i32 %29, %30, !dbg !26
  %39 = add i32 %29, %31, !dbg !26
  %40 = add i32 %29, %32, !dbg !26
  %41 = add i32 %29, %33, !dbg !26
  %42 = add i32 %29, %34, !dbg !26
  %43 = add i32 %29, %35, !dbg !26
  %44 = add i32 %29, %36, !dbg !26
  %45 = add i32 %29, %37, !dbg !26
  %46 = sext i32 %38 to i64, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !27
  %48 = sext i32 %39 to i64, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !27
  %50 = sext i32 %40 to i64, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !27
  %52 = sext i32 %41 to i64, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !27
  %54 = sext i32 %42 to i64, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !27
  %56 = sext i32 %43 to i64, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !27
  %58 = sext i32 %44 to i64, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !27
  %60 = sext i32 %45 to i64, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !27
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !28
  %63 = bitcast i32 %62 to float, !dbg !28
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !28
  %65 = bitcast i32 %64 to float, !dbg !28
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #2, !dbg !28
  %67 = bitcast i32 %66 to float, !dbg !28
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !28
  %69 = bitcast i32 %68 to float, !dbg !28
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #2, !dbg !28
  %71 = bitcast i32 %70 to float, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !28
  %73 = bitcast i32 %72 to float, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !28
  %75 = bitcast i32 %74 to float, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #2, !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = or disjoint i32 %27, 1, !dbg !29
  %79 = add i32 %78, %28, !dbg !30
  %80 = add i32 %79, %30, !dbg !31
  %81 = add i32 %79, %31, !dbg !31
  %82 = add i32 %79, %32, !dbg !31
  %83 = add i32 %79, %33, !dbg !31
  %84 = add i32 %79, %34, !dbg !31
  %85 = add i32 %79, %35, !dbg !31
  %86 = add i32 %79, %36, !dbg !31
  %87 = add i32 %79, %37, !dbg !31
  %88 = sext i32 %80 to i64, !dbg !32
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !32
  %90 = sext i32 %81 to i64, !dbg !32
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !32
  %92 = sext i32 %82 to i64, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !32
  %94 = sext i32 %83 to i64, !dbg !32
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !32
  %96 = sext i32 %84 to i64, !dbg !32
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !32
  %98 = sext i32 %85 to i64, !dbg !32
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !32
  %100 = sext i32 %86 to i64, !dbg !32
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !32
  %102 = sext i32 %87 to i64, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !32
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #2, !dbg !33
  %105 = bitcast i32 %104 to float, !dbg !33
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #2, !dbg !33
  %107 = bitcast i32 %106 to float, !dbg !33
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #2, !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #2, !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !33
  %113 = bitcast i32 %112 to float, !dbg !33
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #2, !dbg !33
  %115 = bitcast i32 %114 to float, !dbg !33
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #2, !dbg !33
  %117 = bitcast i32 %116 to float, !dbg !33
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #2, !dbg !33
  %119 = bitcast i32 %118 to float, !dbg !33
  %120 = add i32 %29, 128, !dbg !34
  %121 = add i32 %120, %30, !dbg !35
  %122 = add i32 %120, %31, !dbg !35
  %123 = add i32 %120, %32, !dbg !35
  %124 = add i32 %120, %33, !dbg !35
  %125 = add i32 %120, %34, !dbg !35
  %126 = add i32 %120, %35, !dbg !35
  %127 = add i32 %120, %36, !dbg !35
  %128 = add i32 %120, %37, !dbg !35
  %129 = sext i32 %121 to i64, !dbg !36
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !36
  %131 = sext i32 %122 to i64, !dbg !36
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !36
  %133 = sext i32 %123 to i64, !dbg !36
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !36
  %135 = sext i32 %124 to i64, !dbg !36
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !36
  %137 = sext i32 %125 to i64, !dbg !36
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !36
  %139 = sext i32 %126 to i64, !dbg !36
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !36
  %141 = sext i32 %127 to i64, !dbg !36
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !36
  %143 = sext i32 %128 to i64, !dbg !36
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !36
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !37
  %146 = bitcast i32 %145 to float, !dbg !37
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #2, !dbg !37
  %148 = bitcast i32 %147 to float, !dbg !37
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #2, !dbg !37
  %150 = bitcast i32 %149 to float, !dbg !37
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #2, !dbg !37
  %152 = bitcast i32 %151 to float, !dbg !37
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #2, !dbg !37
  %154 = bitcast i32 %153 to float, !dbg !37
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #2, !dbg !37
  %156 = bitcast i32 %155 to float, !dbg !37
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #2, !dbg !37
  %158 = bitcast i32 %157 to float, !dbg !37
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #2, !dbg !37
  %160 = bitcast i32 %159 to float, !dbg !37
  %161 = add i32 %29, 129, !dbg !38
  %162 = add i32 %161, %30, !dbg !39
  %163 = add i32 %161, %31, !dbg !39
  %164 = add i32 %161, %32, !dbg !39
  %165 = add i32 %161, %33, !dbg !39
  %166 = add i32 %161, %34, !dbg !39
  %167 = add i32 %161, %35, !dbg !39
  %168 = add i32 %161, %36, !dbg !39
  %169 = add i32 %161, %37, !dbg !39
  %170 = sext i32 %162 to i64, !dbg !40
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !40
  %172 = sext i32 %163 to i64, !dbg !40
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !40
  %174 = sext i32 %164 to i64, !dbg !40
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !40
  %176 = sext i32 %165 to i64, !dbg !40
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !40
  %178 = sext i32 %166 to i64, !dbg !40
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !40
  %180 = sext i32 %167 to i64, !dbg !40
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !40
  %182 = sext i32 %168 to i64, !dbg !40
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !40
  %184 = sext i32 %169 to i64, !dbg !40
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !40
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 true) #2, !dbg !41
  %187 = bitcast i32 %186 to float, !dbg !41
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #2, !dbg !41
  %189 = bitcast i32 %188 to float, !dbg !41
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #2, !dbg !41
  %191 = bitcast i32 %190 to float, !dbg !41
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 true) #2, !dbg !41
  %193 = bitcast i32 %192 to float, !dbg !41
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #2, !dbg !41
  %195 = bitcast i32 %194 to float, !dbg !41
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #2, !dbg !41
  %197 = bitcast i32 %196 to float, !dbg !41
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 true) #2, !dbg !41
  %199 = bitcast i32 %198 to float, !dbg !41
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 true) #2, !dbg !41
  %201 = bitcast i32 %200 to float, !dbg !41
  %202 = fcmp ogt float %105, %63, !dbg !42
  %203 = fcmp ogt float %107, %65, !dbg !42
  %204 = fcmp ogt float %109, %67, !dbg !42
  %205 = fcmp ogt float %111, %69, !dbg !42
  %206 = fcmp ogt float %113, %71, !dbg !42
  %207 = fcmp ogt float %115, %73, !dbg !42
  %208 = fcmp ogt float %117, %75, !dbg !42
  %209 = fcmp ogt float %119, %77, !dbg !42
  %210 = fcmp uno float %105, 0.000000e+00, !dbg !46
  %211 = fcmp uno float %107, 0.000000e+00, !dbg !46
  %212 = fcmp uno float %109, 0.000000e+00, !dbg !46
  %213 = fcmp uno float %111, 0.000000e+00, !dbg !46
  %214 = fcmp uno float %113, 0.000000e+00, !dbg !46
  %215 = fcmp uno float %115, 0.000000e+00, !dbg !46
  %216 = fcmp uno float %117, 0.000000e+00, !dbg !46
  %217 = fcmp uno float %119, 0.000000e+00, !dbg !46
  %218 = or i1 %202, %210, !dbg !47
  %219 = or i1 %203, %211, !dbg !47
  %220 = or i1 %204, %212, !dbg !47
  %221 = or i1 %205, %213, !dbg !47
  %222 = or i1 %206, %214, !dbg !47
  %223 = or i1 %207, %215, !dbg !47
  %224 = or i1 %208, %216, !dbg !47
  %225 = or i1 %209, %217, !dbg !47
  %226 = select i1 %218, float %105, float %63, !dbg !48
  %227 = select i1 %219, float %107, float %65, !dbg !48
  %228 = select i1 %220, float %109, float %67, !dbg !48
  %229 = select i1 %221, float %111, float %69, !dbg !48
  %230 = select i1 %222, float %113, float %71, !dbg !48
  %231 = select i1 %223, float %115, float %73, !dbg !48
  %232 = select i1 %224, float %117, float %75, !dbg !48
  %233 = select i1 %225, float %119, float %77, !dbg !48
  %234 = fcmp olt float %226, %146, !dbg !49
  %235 = fcmp olt float %227, %148, !dbg !49
  %236 = fcmp olt float %228, %150, !dbg !49
  %237 = fcmp olt float %229, %152, !dbg !49
  %238 = fcmp olt float %230, %154, !dbg !49
  %239 = fcmp olt float %231, %156, !dbg !49
  %240 = fcmp olt float %232, %158, !dbg !49
  %241 = fcmp olt float %233, %160, !dbg !49
  %242 = fcmp uno float %146, 0.000000e+00, !dbg !51
  %243 = fcmp uno float %148, 0.000000e+00, !dbg !51
  %244 = fcmp uno float %150, 0.000000e+00, !dbg !51
  %245 = fcmp uno float %152, 0.000000e+00, !dbg !51
  %246 = fcmp uno float %154, 0.000000e+00, !dbg !51
  %247 = fcmp uno float %156, 0.000000e+00, !dbg !51
  %248 = fcmp uno float %158, 0.000000e+00, !dbg !51
  %249 = fcmp uno float %160, 0.000000e+00, !dbg !51
  %250 = or i1 %234, %242, !dbg !52
  %251 = or i1 %235, %243, !dbg !52
  %252 = or i1 %236, %244, !dbg !52
  %253 = or i1 %237, %245, !dbg !52
  %254 = or i1 %238, %246, !dbg !52
  %255 = or i1 %239, %247, !dbg !52
  %256 = or i1 %240, %248, !dbg !52
  %257 = or i1 %241, %249, !dbg !52
  %258 = select i1 %250, float %146, float %226, !dbg !53
  %259 = select i1 %251, float %148, float %227, !dbg !53
  %260 = select i1 %252, float %150, float %228, !dbg !53
  %261 = select i1 %253, float %152, float %229, !dbg !53
  %262 = select i1 %254, float %154, float %230, !dbg !53
  %263 = select i1 %255, float %156, float %231, !dbg !53
  %264 = select i1 %256, float %158, float %232, !dbg !53
  %265 = select i1 %257, float %160, float %233, !dbg !53
  %266 = fcmp olt float %258, %187, !dbg !54
  %267 = fcmp olt float %259, %189, !dbg !54
  %268 = fcmp olt float %260, %191, !dbg !54
  %269 = fcmp olt float %261, %193, !dbg !54
  %270 = fcmp olt float %262, %195, !dbg !54
  %271 = fcmp olt float %263, %197, !dbg !54
  %272 = fcmp olt float %264, %199, !dbg !54
  %273 = fcmp olt float %265, %201, !dbg !54
  %274 = fcmp uno float %187, 0.000000e+00, !dbg !56
  %275 = fcmp uno float %189, 0.000000e+00, !dbg !56
  %276 = fcmp uno float %191, 0.000000e+00, !dbg !56
  %277 = fcmp uno float %193, 0.000000e+00, !dbg !56
  %278 = fcmp uno float %195, 0.000000e+00, !dbg !56
  %279 = fcmp uno float %197, 0.000000e+00, !dbg !56
  %280 = fcmp uno float %199, 0.000000e+00, !dbg !56
  %281 = fcmp uno float %201, 0.000000e+00, !dbg !56
  %282 = or i1 %266, %274, !dbg !57
  %283 = or i1 %267, %275, !dbg !57
  %284 = or i1 %268, %276, !dbg !57
  %285 = or i1 %269, %277, !dbg !57
  %286 = or i1 %270, %278, !dbg !57
  %287 = or i1 %271, %279, !dbg !57
  %288 = or i1 %272, %280, !dbg !57
  %289 = or i1 %273, %281, !dbg !57
  %290 = shl i32 %21, 8, !dbg !58
  %291 = shl i32 %22, 8, !dbg !58
  %292 = shl i32 %25, 20, !dbg !59
  %293 = add i32 %292, %.decomposed20, !dbg !60
  %294 = add i32 %293, %290, !dbg !61
  %295 = add i32 %293, %291, !dbg !61
  %296 = sext i32 %294 to i64, !dbg !62
  %297 = getelementptr float, ptr addrspace(1) %1, i64 %296, !dbg !62
  %298 = sext i32 %295 to i64, !dbg !62
  %299 = getelementptr float, ptr addrspace(1) %1, i64 %298, !dbg !62
  %300 = shl i32 %7, 5, !dbg !63
  %301 = and i32 %300, 992, !dbg !63
  %302 = or disjoint i32 %301, %9, !dbg !63
  %303 = and i32 %10, 508, !dbg !63
  %304 = lshr exact i32 %301, 1, !dbg !63
  %305 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %304, !dbg !63
  %306 = getelementptr float, ptr addrspace(3) %305, i32 %302, !dbg !63
  %307 = bitcast float %258 to i32, !dbg !63
  %308 = select i1 %282, i32 %186, i32 %307, !dbg !64
  %309 = insertelement <1 x i32> poison, i32 %308, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %309, i1 true) #2, !dbg !63
  %310 = or disjoint i32 %302, 4, !dbg !63
  %311 = getelementptr float, ptr addrspace(3) %305, i32 %310, !dbg !63
  %312 = bitcast float %259 to i32, !dbg !63
  %313 = select i1 %283, i32 %188, i32 %312, !dbg !64
  %314 = insertelement <1 x i32> poison, i32 %313, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %314, i1 true) #2, !dbg !63
  %315 = or disjoint i32 %302, 8, !dbg !63
  %316 = getelementptr float, ptr addrspace(3) %305, i32 %315, !dbg !63
  %317 = bitcast float %260 to i32, !dbg !63
  %318 = select i1 %284, i32 %190, i32 %317, !dbg !64
  %319 = insertelement <1 x i32> poison, i32 %318, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %319, i1 true) #2, !dbg !63
  %320 = or disjoint i32 %302, 12, !dbg !63
  %321 = getelementptr float, ptr addrspace(3) %305, i32 %320, !dbg !63
  %322 = bitcast float %261 to i32, !dbg !63
  %323 = select i1 %285, i32 %192, i32 %322, !dbg !64
  %324 = insertelement <1 x i32> poison, i32 %323, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %324, i1 true) #2, !dbg !63
  %325 = or disjoint i32 %302, 16, !dbg !63
  %326 = getelementptr float, ptr addrspace(3) %305, i32 %325, !dbg !63
  %327 = bitcast float %262 to i32, !dbg !63
  %328 = select i1 %286, i32 %194, i32 %327, !dbg !64
  %329 = insertelement <1 x i32> poison, i32 %328, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %329, i1 true) #2, !dbg !63
  %330 = or disjoint i32 %302, 20, !dbg !63
  %331 = getelementptr float, ptr addrspace(3) %305, i32 %330, !dbg !63
  %332 = bitcast float %263 to i32, !dbg !63
  %333 = select i1 %287, i32 %196, i32 %332, !dbg !64
  %334 = insertelement <1 x i32> poison, i32 %333, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %334, i1 true) #2, !dbg !63
  %335 = or disjoint i32 %302, 24, !dbg !63
  %336 = getelementptr float, ptr addrspace(3) %305, i32 %335, !dbg !63
  %337 = bitcast float %264 to i32, !dbg !63
  %338 = select i1 %288, i32 %198, i32 %337, !dbg !64
  %339 = insertelement <1 x i32> poison, i32 %338, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %339, i1 true) #2, !dbg !63
  %340 = or disjoint i32 %302, 28, !dbg !63
  %341 = getelementptr float, ptr addrspace(3) %305, i32 %340, !dbg !63
  %342 = bitcast float %265 to i32, !dbg !63
  %343 = select i1 %289, i32 %200, i32 %342, !dbg !64
  %344 = insertelement <1 x i32> poison, i32 %343, i64 0, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %344, i1 true) #2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %345 = lshr i32 %10, 3, !dbg !63
  %346 = and i32 %345, 60, !dbg !63
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346, !dbg !63
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %303, !dbg !63
  %349 = or disjoint i32 %303, 512, !dbg !63
  %350 = lshr i32 %349, 3, !dbg !63
  %351 = and i32 %350, 124, !dbg !63
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %351, !dbg !63
  %353 = getelementptr inbounds float, ptr addrspace(3) %352, i32 %349, !dbg !63
  %354 = load <4 x i32>, ptr addrspace(3) %353, align 16, !dbg !63
  %.extract = load i32, ptr addrspace(3) %348, align 16, !dbg !63
  %355 = getelementptr inbounds i8, ptr addrspace(3) %348, i32 4, !dbg !63
  %.extract12 = load i32, ptr addrspace(3) %355, align 4, !dbg !63
  %356 = getelementptr inbounds i8, ptr addrspace(3) %348, i32 8, !dbg !63
  %.extract13 = load i32, ptr addrspace(3) %356, align 8, !dbg !63
  %357 = getelementptr inbounds i8, ptr addrspace(3) %348, i32 12, !dbg !63
  %.extract14 = load i32, ptr addrspace(3) %357, align 4, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %297, i1 true) #2, !dbg !63
  %.extract15 = extractelement <4 x i32> %354, i64 0, !dbg !63
  %.extract16 = extractelement <4 x i32> %354, i64 1, !dbg !63
  %.extract17 = extractelement <4 x i32> %354, i64 2, !dbg !63
  %.extract18 = extractelement <4 x i32> %354, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %299, i1 true) #2, !dbg !63
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbud6knn2y57dh6roes5adenyj2xgidzxpiespagnlfnac7v5ozn.py", directory: "inductor_cache/bu")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_42, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_42", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 32, scope: !7)
!23 = !DILocation(line: 34, column: 41, scope: !7)
!24 = !DILocation(line: 34, column: 37, scope: !7)
!25 = !DILocation(line: 34, column: 52, scope: !7)
!26 = !DILocation(line: 34, column: 46, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 57, scope: !7)
!29 = !DILocation(line: 35, column: 34, scope: !7)
!30 = !DILocation(line: 35, column: 41, scope: !7)
!31 = !DILocation(line: 35, column: 50, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 61, scope: !7)
!34 = !DILocation(line: 36, column: 43, scope: !7)
!35 = !DILocation(line: 36, column: 52, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 63, scope: !7)
!38 = !DILocation(line: 37, column: 43, scope: !7)
!39 = !DILocation(line: 37, column: 52, scope: !7)
!40 = !DILocation(line: 37, column: 30, scope: !7)
!41 = !DILocation(line: 37, column: 63, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 38, column: 40, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !50)
!50 = !DILocation(line: 39, column: 40, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !50)
!54 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !55)
!55 = !DILocation(line: 40, column: 40, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !55)
!58 = !DILocation(line: 41, column: 34, scope: !7)
!59 = !DILocation(line: 41, column: 47, scope: !7)
!60 = !DILocation(line: 41, column: 30, scope: !7)
!61 = !DILocation(line: 41, column: 39, scope: !7)
!62 = !DILocation(line: 41, column: 25, scope: !7)
!63 = !DILocation(line: 41, column: 58, scope: !7)
!64 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !55)
!65 = !DILocation(line: 41, column: 4, scope: !7)
