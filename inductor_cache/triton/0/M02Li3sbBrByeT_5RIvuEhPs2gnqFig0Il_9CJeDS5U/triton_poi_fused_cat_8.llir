; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 510, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %.frozen6 = freeze i32 %15, !dbg !14
  %16 = sdiv i32 %.frozen6, 256, !dbg !14
  %17 = srem i32 %16, 768, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %18 = sdiv i32 %.frozen, 16, !dbg !16
  %19 = srem i32 %18, 16, !dbg !17
  %20 = mul i32 %18, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %20, !dbg !18
  %21 = sdiv i32 %15, 196608, !dbg !19
  %22 = icmp slt i32 %17, 512, !dbg !20
  %23 = sext i32 %19 to i64, !dbg !21
  %24 = getelementptr i64, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %24, i1 %22, i1 %22) #3, !dbg !22
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %24, i1 %22, i1 %22) #3, !dbg !22
  %27 = lshr i64 %25, 60, !dbg !23
  %28 = and i64 %27, 8, !dbg !23
  %29 = add i64 %28, %25, !dbg !23
  %30 = sext i32 %.decomposed to i64, !dbg !24
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %31, i1 %22, i1 %22, i1 %22) #3, !dbg !25
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !25
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !25
  %35 = lshr i64 %33, 60, !dbg !26
  %36 = and i64 %35, 8, !dbg !26
  %37 = lshr i64 %34, 60, !dbg !26
  %38 = and i64 %37, 8, !dbg !26
  %39 = shl i64 %29, 3, !dbg !27
  %40 = shl nsw i32 %17, 6, !dbg !28
  %41 = sext i32 %40 to i64, !dbg !29
  %42 = shl nsw i32 %21, 15, !dbg !30
  %43 = sext i32 %42 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %44, i64 %36, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %45, i64 %39, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %46, i64 %41, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %47, i64 %43, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %49, i64 %38, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %50, i64 %39, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %51, i64 %41, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %52, i64 %43, !dbg !32
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %22, i32 0, i1 %22) #3, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %22, i32 0, i1 %22) #3, !dbg !33
  %56 = sext i32 %17 to i64, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %22, i32 0, i1 %22) #3, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %22, i32 0, i1 %22) #3, !dbg !35
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !36
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %22, i32 0, i1 %22) #3, !dbg !37
  %62 = bitcast i32 %61 to float, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %22, i32 0, i1 %22) #3, !dbg !37
  %64 = bitcast i32 %63 to float, !dbg !37
  %65 = fadd float %62, 0x3EE4F8B580000000, !dbg !38
  %66 = fadd float %64, 0x3EE4F8B580000000, !dbg !38
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %67, 0, !dbg !39
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %68, 0, !dbg !39
  br i1 %.not.i, label %74, label %69, !dbg !39

69:                                               ; preds = %9
  br i1 %.not1.i, label %72, label %70, !dbg !39

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

74:                                               ; preds = %9
  br i1 %.not1.i, label %77, label %75, !dbg !39

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %70, %72, %75, %77
  %.0.i = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !39
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %79, 0, !dbg !39
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %80, 0, !dbg !39
  br i1 %.not.i1, label %86, label %81, !dbg !39

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !39

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !39

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %82, %84, %87, %89
  %.0.i3 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !39
  %91 = bitcast i32 %55 to float, !dbg !33
  %92 = bitcast i32 %59 to float, !dbg !35
  %93 = fsub float %91, %92, !dbg !40
  %94 = bitcast i32 %54 to float, !dbg !33
  %95 = bitcast i32 %58 to float, !dbg !35
  %96 = fsub float %94, %95, !dbg !40
  %97 = mul i32 %16, 256, !dbg !41
  %.decomposed7 = sub i32 %.frozen6, %97, !dbg !41
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %100 = fmul float %96, %98, !dbg !43
  %101 = fmul float %93, %99, !dbg !43
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !44
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %22, i32 0, i1 %22) #3, !dbg !45
  %104 = bitcast i32 %103 to float, !dbg !45
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %22, i32 0, i1 %22) #3, !dbg !45
  %106 = bitcast i32 %105 to float, !dbg !45
  %107 = fmul float %100, %104, !dbg !46
  %108 = fmul float %101, %106, !dbg !46
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %56, !dbg !47
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %22, i32 0, i1 %22) #3, !dbg !48
  %111 = bitcast i32 %110 to float, !dbg !48
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %22, i32 0, i1 %22) #3, !dbg !48
  %113 = bitcast i32 %112 to float, !dbg !48
  %114 = fadd float %107, %111, !dbg !49
  %115 = fadd float %108, %113, !dbg !49
  %116 = fcmp olt float %114, 0.000000e+00, !dbg !50
  %117 = fcmp olt float %115, 0.000000e+00, !dbg !50
  %118 = select i1 %116, float 0.000000e+00, float %114, !dbg !54
  %119 = select i1 %117, float 0.000000e+00, float %115, !dbg !54
  %120 = icmp sgt i32 %17, 511, !dbg !55
  %121 = shl nsw i32 %17, 8, !dbg !56
  %122 = shl nsw i32 %21, 16, !dbg !57
  %123 = add nsw i32 %.decomposed7, -131072, !dbg !56
  %124 = add nsw i32 %123, %122, !dbg !58
  %125 = add nsw i32 %124, %121, !dbg !59
  %126 = sext i32 %125 to i64, !dbg !60
  %127 = getelementptr float, ptr addrspace(1) %6, i64 %126, !dbg !60
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %127, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !61
  %129 = extractvalue { i32, i32 } %128, 0, !dbg !61
  %130 = extractvalue { i32, i32 } %128, 1, !dbg !61
  %131 = sext i32 %15 to i64, !dbg !62
  %132 = getelementptr float, ptr addrspace(1) %7, i64 %131, !dbg !62
  %133 = bitcast float %118 to i32, !dbg !63
  %134 = select i1 %22, i32 %133, i32 %129, !dbg !64
  %135 = bitcast float %119 to i32, !dbg !63
  %136 = select i1 %22, i32 %135, i32 %130, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %134, i32 %136, ptr addrspace(1) %132, i1 true) #3, !dbg !63
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2uxinoryt5gjgp2oifnoz5n2pv4vsmqwymawdkxnpc3vsw7pdms.py", directory: "inductor_cache/2u")
!4 = !{ptr @triton_poi_fused_cat_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_8", linkageName: "triton_poi_fused_cat_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 39, column: 32, scope: !7)
!24 = !DILocation(line: 40, column: 31, scope: !7)
!25 = !DILocation(line: 40, column: 36, scope: !7)
!26 = !DILocation(line: 43, column: 35, scope: !7)
!27 = !DILocation(line: 44, column: 41, scope: !7)
!28 = !DILocation(line: 44, column: 52, scope: !7)
!29 = !DILocation(line: 44, column: 48, scope: !7)
!30 = !DILocation(line: 44, column: 64, scope: !7)
!31 = !DILocation(line: 44, column: 58, scope: !7)
!32 = !DILocation(line: 44, column: 31, scope: !7)
!33 = !DILocation(line: 44, column: 69, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 27, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 28, column: 19, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 31, scope: !7)
!45 = !DILocation(line: 56, column: 36, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 31, scope: !7)
!48 = !DILocation(line: 58, column: 36, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 61, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 67, column: 41, scope: !7)
!57 = !DILocation(line: 67, column: 62, scope: !7)
!58 = !DILocation(line: 67, column: 36, scope: !7)
!59 = !DILocation(line: 67, column: 56, scope: !7)
!60 = !DILocation(line: 67, column: 31, scope: !7)
!61 = !DILocation(line: 67, column: 67, scope: !7)
!62 = !DILocation(line: 69, column: 25, scope: !7)
!63 = !DILocation(line: 69, column: 37, scope: !7)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 69, column: 4, scope: !7)
