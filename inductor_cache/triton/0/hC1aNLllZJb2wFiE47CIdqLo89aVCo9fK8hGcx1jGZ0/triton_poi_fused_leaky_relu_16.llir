; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = shl i32 %9, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %14, !dbg !17
  %22 = icmp slt i32 %21, 128, !dbg !18
  %23 = sdiv i32 %15, 64, !dbg !19
  %24 = sdiv i32 %16, 64, !dbg !19
  %25 = shl i32 %15, 7, !dbg !20
  %26 = shl i32 %16, 7, !dbg !20
  %27 = add i32 %21, %25, !dbg !21
  %28 = add i32 %21, %26, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = and i1 %17, %22, !dbg !23
  %34 = and i1 %18, %22, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !24
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %34) #4, !dbg !24
  %37 = shl i32 %23, 7, !dbg !25
  %38 = shl i32 %24, 7, !dbg !25
  %39 = add i32 %37, %21, !dbg !26
  %40 = add i32 %38, %21, !dbg !26
  %41 = sext i32 %39 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !27
  %43 = sext i32 %40 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !27
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %33) #4, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %34) #4, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !29
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %33) #4, !dbg !30
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !30
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !30
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !30
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !30
  %54 = bitcast i32 %50 to float, !dbg !30
  %55 = bitcast i32 %51 to float, !dbg !30
  %56 = bitcast i32 %52 to float, !dbg !30
  %57 = bitcast i32 %53 to float, !dbg !30
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %34) #4, !dbg !30
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !30
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !30
  %63 = bitcast i32 %59 to float, !dbg !30
  %64 = bitcast i32 %60 to float, !dbg !30
  %65 = bitcast i32 %61 to float, !dbg !30
  %66 = bitcast i32 %62 to float, !dbg !30
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 6.400000e+01) #4, !dbg !31
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 6.400000e+01) #4, !dbg !31
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 6.400000e+01) #4, !dbg !31
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 6.400000e+01) #4, !dbg !31
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 6.400000e+01) #4, !dbg !31
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 6.400000e+01) #4, !dbg !31
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 6.400000e+01) #4, !dbg !31
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 6.400000e+01) #4, !dbg !31
  %75 = fadd float %67, 0x3EE4F8B580000000, !dbg !32
  %76 = fadd float %68, 0x3EE4F8B580000000, !dbg !32
  %77 = fadd float %69, 0x3EE4F8B580000000, !dbg !32
  %78 = fadd float %70, 0x3EE4F8B580000000, !dbg !32
  %79 = fadd float %71, 0x3EE4F8B580000000, !dbg !32
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !32
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !32
  %82 = fadd float %74, 0x3EE4F8B580000000, !dbg !32
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %83, 0, !dbg !33
  br i1 %.not.i, label %86, label %84, !dbg !33

84:                                               ; preds = %6
  %85 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %75), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

86:                                               ; preds = %6
  %87 = tail call float @llvm.nvvm.rsqrt.approx.f(float %75), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %84, %86
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], !dbg !33
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %88, 0, !dbg !33
  br i1 %.not.i15, label %91, label %89, !dbg !33

89:                                               ; preds = %__nv_rsqrtf.exit
  %90 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %76), !dbg !33
  br label %__nv_rsqrtf.exit17, !dbg !33

91:                                               ; preds = %__nv_rsqrtf.exit
  %92 = tail call float @llvm.nvvm.rsqrt.approx.f(float %76), !dbg !33
  br label %__nv_rsqrtf.exit17, !dbg !33

__nv_rsqrtf.exit17:                               ; preds = %89, %91
  %.0.i16 = phi float [ %90, %89 ], [ %92, %91 ], !dbg !33
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i18 = icmp eq i32 %93, 0, !dbg !33
  br i1 %.not.i18, label %96, label %94, !dbg !33

94:                                               ; preds = %__nv_rsqrtf.exit17
  %95 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %77), !dbg !33
  br label %__nv_rsqrtf.exit20, !dbg !33

96:                                               ; preds = %__nv_rsqrtf.exit17
  %97 = tail call float @llvm.nvvm.rsqrt.approx.f(float %77), !dbg !33
  br label %__nv_rsqrtf.exit20, !dbg !33

__nv_rsqrtf.exit20:                               ; preds = %94, %96
  %.0.i19 = phi float [ %95, %94 ], [ %97, %96 ], !dbg !33
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i21 = icmp eq i32 %98, 0, !dbg !33
  br i1 %.not.i21, label %101, label %99, !dbg !33

99:                                               ; preds = %__nv_rsqrtf.exit20
  %100 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %78), !dbg !33
  br label %__nv_rsqrtf.exit23, !dbg !33

101:                                              ; preds = %__nv_rsqrtf.exit20
  %102 = tail call float @llvm.nvvm.rsqrt.approx.f(float %78), !dbg !33
  br label %__nv_rsqrtf.exit23, !dbg !33

__nv_rsqrtf.exit23:                               ; preds = %99, %101
  %.0.i22 = phi float [ %100, %99 ], [ %102, %101 ], !dbg !33
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i24 = icmp eq i32 %103, 0, !dbg !33
  br i1 %.not.i24, label %106, label %104, !dbg !33

104:                                              ; preds = %__nv_rsqrtf.exit23
  %105 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %79), !dbg !33
  br label %__nv_rsqrtf.exit26, !dbg !33

106:                                              ; preds = %__nv_rsqrtf.exit23
  %107 = tail call float @llvm.nvvm.rsqrt.approx.f(float %79), !dbg !33
  br label %__nv_rsqrtf.exit26, !dbg !33

__nv_rsqrtf.exit26:                               ; preds = %104, %106
  %.0.i25 = phi float [ %105, %104 ], [ %107, %106 ], !dbg !33
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i27 = icmp eq i32 %108, 0, !dbg !33
  br i1 %.not.i27, label %111, label %109, !dbg !33

109:                                              ; preds = %__nv_rsqrtf.exit26
  %110 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !33
  br label %__nv_rsqrtf.exit29, !dbg !33

111:                                              ; preds = %__nv_rsqrtf.exit26
  %112 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !33
  br label %__nv_rsqrtf.exit29, !dbg !33

__nv_rsqrtf.exit29:                               ; preds = %109, %111
  %.0.i28 = phi float [ %110, %109 ], [ %112, %111 ], !dbg !33
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i30 = icmp eq i32 %113, 0, !dbg !33
  br i1 %.not.i30, label %116, label %114, !dbg !33

114:                                              ; preds = %__nv_rsqrtf.exit29
  %115 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %81), !dbg !33
  br label %__nv_rsqrtf.exit32, !dbg !33

116:                                              ; preds = %__nv_rsqrtf.exit29
  %117 = tail call float @llvm.nvvm.rsqrt.approx.f(float %81), !dbg !33
  br label %__nv_rsqrtf.exit32, !dbg !33

__nv_rsqrtf.exit32:                               ; preds = %114, %116
  %.0.i31 = phi float [ %115, %114 ], [ %117, %116 ], !dbg !33
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i33 = icmp eq i32 %118, 0, !dbg !33
  br i1 %.not.i33, label %121, label %119, !dbg !33

119:                                              ; preds = %__nv_rsqrtf.exit32
  %120 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !33
  br label %__nv_rsqrtf.exit35, !dbg !33

121:                                              ; preds = %__nv_rsqrtf.exit32
  %122 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !33
  br label %__nv_rsqrtf.exit35, !dbg !33

__nv_rsqrtf.exit35:                               ; preds = %119, %121
  %.0.i34 = phi float [ %120, %119 ], [ %122, %121 ], !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %124 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !28
  %125 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %126 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %128 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !28
  %129 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %130 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !28
  %131 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %132 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !28
  %133 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %134 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !28
  %135 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %136 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !28
  %137 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %138 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !28
  %139 = or disjoint i32 %20, %12, !dbg !17
  %140 = icmp slt i32 %139, 128, !dbg !18
  %141 = or disjoint i32 %8, %14, !dbg !13
  %142 = icmp slt i32 %141, 256, !dbg !14
  %143 = and i1 %142, %140, !dbg !23
  %144 = or disjoint i32 %20, %11, !dbg !17
  %145 = icmp slt i32 %144, 128, !dbg !18
  %146 = and i1 %142, %145, !dbg !23
  %.frozen = freeze i32 %141, !dbg !19
  %147 = sdiv i32 %.frozen, 64, !dbg !19
  %148 = mul i32 %147, 64, !dbg !34
  %.decomposed = sub i32 %.frozen, %148, !dbg !34
  %149 = insertelement <8 x i32> poison, i32 %123, i64 0, !dbg !24
  %150 = insertelement <8 x i32> %149, i32 %125, i64 1, !dbg !24
  %151 = insertelement <8 x i32> %150, i32 %127, i64 2, !dbg !24
  %152 = insertelement <8 x i32> %151, i32 %129, i64 3, !dbg !24
  %153 = insertelement <8 x i32> %152, i32 %131, i64 4, !dbg !24
  %154 = insertelement <8 x i32> %153, i32 %133, i64 5, !dbg !24
  %155 = insertelement <8 x i32> %154, i32 %135, i64 6, !dbg !24
  %156 = insertelement <8 x i32> %155, i32 %137, i64 7, !dbg !24
  %157 = bitcast <8 x i32> %156 to <8 x float>, !dbg !24
  %158 = insertelement <8 x i32> poison, i32 %124, i64 0, !dbg !28
  %159 = insertelement <8 x i32> %158, i32 %126, i64 1, !dbg !28
  %160 = insertelement <8 x i32> %159, i32 %128, i64 2, !dbg !28
  %161 = insertelement <8 x i32> %160, i32 %130, i64 3, !dbg !28
  %162 = insertelement <8 x i32> %161, i32 %132, i64 4, !dbg !28
  %163 = insertelement <8 x i32> %162, i32 %134, i64 5, !dbg !28
  %164 = insertelement <8 x i32> %163, i32 %136, i64 6, !dbg !28
  %165 = insertelement <8 x i32> %164, i32 %138, i64 7, !dbg !28
  %166 = bitcast <8 x i32> %165 to <8 x float>, !dbg !28
  %167 = fsub <8 x float> %157, %166, !dbg !35
  %168 = insertelement <8 x float> poison, float %.0.i34, i64 0, !dbg !36
  %169 = insertelement <8 x float> %168, float %.0.i31, i64 1, !dbg !36
  %170 = insertelement <8 x float> %169, float %.0.i28, i64 2, !dbg !36
  %171 = insertelement <8 x float> %170, float %.0.i25, i64 3, !dbg !36
  %172 = insertelement <8 x float> %171, float %.0.i22, i64 4, !dbg !36
  %173 = insertelement <8 x float> %172, float %.0.i19, i64 5, !dbg !36
  %174 = insertelement <8 x float> %173, float %.0.i16, i64 6, !dbg !36
  %175 = insertelement <8 x float> %174, float %.0.i, i64 7, !dbg !36
  %176 = fmul <8 x float> %167, %175, !dbg !36
  %177 = fcmp ogt <8 x float> %176, zeroinitializer, !dbg !37
  %178 = extractelement <8 x float> %176, i64 7, !dbg !38
  %179 = fmul float %178, 0x3FB99999A0000000, !dbg !39
  %180 = extractelement <8 x float> %176, i64 6, !dbg !38
  %181 = fmul float %180, 0x3FB99999A0000000, !dbg !39
  %182 = extractelement <8 x float> %176, i64 5, !dbg !38
  %183 = fmul float %182, 0x3FB99999A0000000, !dbg !39
  %184 = extractelement <8 x float> %176, i64 4, !dbg !38
  %185 = fmul float %184, 0x3FB99999A0000000, !dbg !39
  %186 = extractelement <8 x float> %176, i64 3, !dbg !38
  %187 = fmul float %186, 0x3FB99999A0000000, !dbg !39
  %188 = extractelement <8 x float> %176, i64 2, !dbg !38
  %189 = fmul float %188, 0x3FB99999A0000000, !dbg !39
  %190 = extractelement <8 x float> %176, i64 1, !dbg !38
  %191 = fmul float %190, 0x3FB99999A0000000, !dbg !39
  %192 = extractelement <8 x float> %176, i64 0, !dbg !38
  %193 = fmul float %192, 0x3FB99999A0000000, !dbg !39
  %194 = extractelement <8 x i1> %177, i64 7, !dbg !38
  %195 = select i1 %194, float %178, float %179, !dbg !38
  %196 = extractelement <8 x i1> %177, i64 6, !dbg !38
  %197 = select i1 %196, float %180, float %181, !dbg !38
  %198 = extractelement <8 x i1> %177, i64 5, !dbg !38
  %199 = select i1 %198, float %182, float %183, !dbg !38
  %200 = extractelement <8 x i1> %177, i64 4, !dbg !38
  %201 = select i1 %200, float %184, float %185, !dbg !38
  %202 = extractelement <8 x i1> %177, i64 3, !dbg !38
  %203 = select i1 %202, float %186, float %187, !dbg !38
  %204 = extractelement <8 x i1> %177, i64 2, !dbg !38
  %205 = select i1 %204, float %188, float %189, !dbg !38
  %206 = extractelement <8 x i1> %177, i64 1, !dbg !38
  %207 = select i1 %206, float %190, float %191, !dbg !38
  %208 = extractelement <8 x i1> %177, i64 0, !dbg !38
  %209 = select i1 %208, float %192, float %193, !dbg !38
  %210 = shl i32 %144, 6, !dbg !40
  %211 = shl i32 %139, 6, !dbg !40
  %212 = shl i32 %147, 13, !dbg !41
  %213 = add i32 %212, %.decomposed, !dbg !42
  %214 = add i32 %213, %210, !dbg !43
  %215 = add i32 %213, %211, !dbg !43
  %216 = sext i32 %214 to i64, !dbg !44
  %217 = getelementptr float, ptr addrspace(1) %3, i64 %216, !dbg !44
  %218 = sext i32 %215 to i64, !dbg !44
  %219 = getelementptr float, ptr addrspace(1) %3, i64 %218, !dbg !44
  %220 = shl i32 %9, 7, !dbg !45
  %221 = and i32 %220, 896, !dbg !45
  %222 = or disjoint i32 %221, %11, !dbg !45
  %223 = and i32 %13, 508, !dbg !45
  %224 = lshr exact i32 %221, 3, !dbg !45
  %225 = or disjoint i32 %224, %222, !dbg !45
  %226 = zext nneg i32 %225 to i64, !dbg !45
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %226, !dbg !45
  %228 = bitcast float %195 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #4, !dbg !45
  %229 = or disjoint i32 %222, 32, !dbg !45
  %230 = lshr i32 %229, 3, !dbg !45
  %231 = and i32 %230, 116, !dbg !45
  %232 = add nuw nsw i32 %231, %229, !dbg !45
  %233 = zext nneg i32 %232 to i64, !dbg !45
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %233, !dbg !45
  %235 = bitcast float %197 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #4, !dbg !45
  %236 = or disjoint i32 %222, 64, !dbg !45
  %237 = lshr i32 %236, 3, !dbg !45
  %238 = and i32 %237, 120, !dbg !45
  %239 = add nuw nsw i32 %238, %236, !dbg !45
  %240 = zext nneg i32 %239 to i64, !dbg !45
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %240, !dbg !45
  %242 = bitcast float %199 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !45
  %243 = or disjoint i32 %222, 96, !dbg !45
  %244 = lshr i32 %243, 3, !dbg !45
  %245 = and i32 %244, 124, !dbg !45
  %246 = add nuw nsw i32 %245, %243, !dbg !45
  %247 = zext nneg i32 %246 to i64, !dbg !45
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %247, !dbg !45
  %249 = bitcast float %201 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #4, !dbg !45
  %250 = or disjoint i32 %222, 16, !dbg !45
  %251 = add nuw nsw i32 %250, %224, !dbg !45
  %252 = zext nneg i32 %251 to i64, !dbg !45
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %252, !dbg !45
  %254 = bitcast float %203 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !45
  %255 = or disjoint i32 %222, 48, !dbg !45
  %256 = lshr i32 %255, 3, !dbg !45
  %257 = and i32 %256, 116, !dbg !45
  %258 = add nuw nsw i32 %257, %255, !dbg !45
  %259 = zext nneg i32 %258 to i64, !dbg !45
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %259, !dbg !45
  %261 = bitcast float %205 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !45
  %262 = or disjoint i32 %222, 80, !dbg !45
  %263 = lshr i32 %262, 3, !dbg !45
  %264 = and i32 %263, 120, !dbg !45
  %265 = add nuw nsw i32 %264, %262, !dbg !45
  %266 = zext nneg i32 %265 to i64, !dbg !45
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %266, !dbg !45
  %268 = bitcast float %207 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !45
  %269 = or disjoint i32 %222, 112, !dbg !45
  %270 = lshr i32 %269, 3, !dbg !45
  %271 = and i32 %270, 124, !dbg !45
  %272 = add nuw nsw i32 %271, %269, !dbg !45
  %273 = zext nneg i32 %272 to i64, !dbg !45
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %273, !dbg !45
  %275 = bitcast float %209 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %276 = lshr i32 %13, 3, !dbg !45
  %277 = and i32 %276, 60, !dbg !45
  %278 = add nuw nsw i32 %277, %223, !dbg !45
  %279 = zext nneg i32 %278 to i64, !dbg !45
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %279, !dbg !45
  %281 = or disjoint i32 %223, 512, !dbg !45
  %282 = lshr i32 %281, 3, !dbg !45
  %283 = and i32 %282, 124, !dbg !45
  %284 = add nuw nsw i32 %283, %281, !dbg !45
  %285 = zext nneg i32 %284 to i64, !dbg !45
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %285, !dbg !45
  %287 = load <4 x i32>, ptr addrspace(3) %286, align 16, !dbg !45
  %.extract = load i32, ptr addrspace(3) %280, align 16, !dbg !45
  %288 = getelementptr inbounds i8, ptr addrspace(3) %280, i64 4, !dbg !45
  %.extract8 = load i32, ptr addrspace(3) %288, align 4, !dbg !45
  %289 = getelementptr inbounds i8, ptr addrspace(3) %280, i64 8, !dbg !45
  %.extract9 = load i32, ptr addrspace(3) %289, align 8, !dbg !45
  %290 = getelementptr inbounds i8, ptr addrspace(3) %280, i64 12, !dbg !45
  %.extract10 = load i32, ptr addrspace(3) %290, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %217, i1 %146) #4, !dbg !45
  %.extract11 = extractelement <4 x i32> %287, i64 0, !dbg !45
  %.extract12 = extractelement <4 x i32> %287, i64 1, !dbg !45
  %.extract13 = extractelement <4 x i32> %287, i64 2, !dbg !45
  %.extract14 = extractelement <4 x i32> %287, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %219, i1 %143) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqrxbn4xxha4twhnxcpiypq3pnhagv3odimmpfdk5txco6gqif5b.py", directory: "inductor_cache/qr")
!4 = !{ptr @triton_poi_fused_leaky_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_16", linkageName: "triton_poi_fused_leaky_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 44, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 44, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 27, scope: !7)
!34 = !DILocation(line: 31, column: 19, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 34, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 33, scope: !7)
!41 = !DILocation(line: 47, column: 43, scope: !7)
!42 = !DILocation(line: 47, column: 30, scope: !7)
!43 = !DILocation(line: 47, column: 38, scope: !7)
!44 = !DILocation(line: 47, column: 25, scope: !7)
!45 = !DILocation(line: 47, column: 55, scope: !7)
!46 = !DILocation(line: 47, column: 4, scope: !7)
