; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 24, !dbg !12
  %12 = shl i32 %10, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = and i32 %12, 28, !dbg !12
  %15 = lshr i32 %10, 5, !dbg !12
  %16 = lshr i32 %10, 2, !dbg !12
  %17 = and i32 %16, 3, !dbg !12
  %18 = and i32 %10, 16, !dbg !12
  %19 = lshr exact i32 %18, 2, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !12
  %21 = and i32 %10, 32, !dbg !12
  %22 = lshr exact i32 %21, 2, !dbg !12
  %23 = or disjoint i32 %20, %22, !dbg !12
  %24 = and i32 %10, 64, !dbg !12
  %25 = lshr exact i32 %24, 2, !dbg !12
  %26 = or disjoint i32 %23, %25, !dbg !12
  %27 = and i32 %10, 31, !dbg !12
  %28 = or disjoint i32 %9, %14, !dbg !13
  %29 = or disjoint i32 %26, %9, !dbg !13
  %30 = icmp slt i32 %28, 1024, !dbg !14
  %31 = icmp slt i32 %29, 1024, !dbg !14
  %32 = lshr i32 %10, 3, !dbg !15
  %.lobit2 = and i32 %32, 1, !dbg !15
  %33 = lshr exact i32 %18, 3, !dbg !15
  %34 = or disjoint i32 %.lobit2, %33, !dbg !15
  %35 = lshr exact i32 %21, 3, !dbg !15
  %36 = or disjoint i32 %34, %35, !dbg !15
  %37 = lshr exact i32 %24, 3, !dbg !15
  %38 = or disjoint i32 %36, %37, !dbg !15
  %.frozen = freeze i32 %28, !dbg !16
  %39 = sdiv i32 %.frozen, 256, !dbg !16
  %40 = mul i32 %39, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %40, !dbg !17
  %41 = shl nuw nsw i32 %38, 8, !dbg !18
  %42 = shl i32 %39, 12, !dbg !19
  %43 = add nsw i32 %.decomposed, %41, !dbg !20
  %44 = add i32 %43, %42, !dbg !21
  %45 = sext i32 %44 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = bitcast i32 %49 to float, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = bitcast i32 %51 to float, !dbg !23
  %56 = shl i32 %29, 4, !dbg !24
  %57 = or disjoint i32 %56, %13, !dbg !25
  %58 = sext i32 %57 to i64, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !27
  %65 = shl i32 %10, 7, !dbg !27
  %66 = and i32 %65, 384, !dbg !27
  %67 = or disjoint i32 %17, %66, !dbg !27
  %68 = or disjoint i32 %67, %19, !dbg !27
  %69 = or disjoint i32 %68, %22, !dbg !27
  %70 = or disjoint i32 %69, %25, !dbg !27
  %71 = and i32 %12, 508, !dbg !27
  %72 = lshr exact i32 %66, 3, !dbg !27
  %73 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %72, !dbg !27
  %74 = getelementptr inbounds float, ptr addrspace(3) %73, i32 %70, !dbg !27
  %75 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #5, !dbg !27
  %76 = or disjoint i32 %70, 32, !dbg !27
  %77 = lshr i32 %76, 5, !dbg !27
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !27
  %79 = getelementptr float, ptr addrspace(3) %78, i32 %76, !dbg !27
  %80 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #5, !dbg !27
  %81 = or disjoint i32 %70, 64, !dbg !27
  %82 = lshr i32 %81, 5, !dbg !27
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !27
  %84 = getelementptr float, ptr addrspace(3) %83, i32 %81, !dbg !27
  %85 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #5, !dbg !27
  %86 = or disjoint i32 %70, 96, !dbg !27
  %87 = lshr i32 %86, 5, !dbg !27
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !27
  %89 = getelementptr float, ptr addrspace(3) %88, i32 %86, !dbg !27
  %90 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %91 = lshr i32 %71, 5, !dbg !27
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !27
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %71, !dbg !27
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !27
  %95 = or disjoint i32 %71, 1, !dbg !27
  %96 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %95, !dbg !27
  %97 = load float, ptr addrspace(3) %96, align 4, !dbg !27
  %98 = or disjoint i32 %71, 2, !dbg !27
  %99 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %98, !dbg !27
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !27
  %101 = or disjoint i32 %71, 3, !dbg !27
  %102 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %101, !dbg !27
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !27
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !28
  %105 = select i1 %30, float %52, float 0.000000e+00, !dbg !29
  %106 = select i1 %30, float %53, float 0.000000e+00, !dbg !29
  %107 = select i1 %30, float %54, float 0.000000e+00, !dbg !29
  %108 = select i1 %30, float %55, float 0.000000e+00, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %109 = bitcast float %105 to i32, !dbg !30
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !30
  %111 = bitcast i32 %110 to float, !dbg !30
  %112 = fadd float %105, %111, !dbg !34
  %113 = bitcast float %112 to i32, !dbg !30
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !30
  %115 = bitcast i32 %114 to float, !dbg !30
  %116 = fadd float %112, %115, !dbg !34
  %117 = bitcast float %106 to i32, !dbg !30
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !30
  %119 = bitcast i32 %118 to float, !dbg !30
  %120 = fadd float %106, %119, !dbg !34
  %121 = bitcast float %120 to i32, !dbg !30
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !30
  %123 = bitcast i32 %122 to float, !dbg !30
  %124 = fadd float %120, %123, !dbg !34
  %125 = bitcast float %107 to i32, !dbg !30
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 16, i32 31), !dbg !30
  %127 = bitcast i32 %126 to float, !dbg !30
  %128 = fadd float %107, %127, !dbg !34
  %129 = bitcast float %128 to i32, !dbg !30
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 8, i32 31), !dbg !30
  %131 = bitcast i32 %130 to float, !dbg !30
  %132 = fadd float %128, %131, !dbg !34
  %133 = bitcast float %108 to i32, !dbg !30
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 16, i32 31), !dbg !30
  %135 = bitcast i32 %134 to float, !dbg !30
  %136 = fadd float %108, %135, !dbg !34
  %137 = bitcast float %136 to i32, !dbg !30
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !30
  %139 = bitcast i32 %138 to float, !dbg !30
  %140 = fadd float %136, %139, !dbg !34
  %141 = icmp eq i32 %11, 0, !dbg !30
  %142 = and i32 %15, 3, !dbg !30
  %143 = shl nuw nsw i32 %14, 2, !dbg !30
  %144 = or disjoint i32 %143, %142, !dbg !30
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !30
  %146 = bitcast float %116 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 %141) #5, !dbg !30
  %147 = or disjoint i32 %143, 4, !dbg !30
  %148 = or disjoint i32 %147, %142, !dbg !30
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !30
  %150 = bitcast float %124 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 %141) #5, !dbg !30
  %151 = or disjoint i32 %143, 8, !dbg !30
  %152 = or disjoint i32 %151, %142, !dbg !30
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !30
  %154 = bitcast float %132 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 %141) #5, !dbg !30
  %155 = or disjoint i32 %143, 12, !dbg !30
  %156 = or disjoint i32 %155, %142, !dbg !30
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !30
  %158 = bitcast float %140 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 %141) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %159 = icmp slt i32 %10, 128, !dbg !30
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %159) #5, !dbg !30
  %162 = bitcast i32 %161 to float, !dbg !30
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !30
  %164 = bitcast i32 %163 to float, !dbg !30
  %165 = fadd float %162, %164, !dbg !34
  %166 = bitcast float %165 to i32, !dbg !30
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 1, i32 31), !dbg !30
  %168 = bitcast i32 %167 to float, !dbg !30
  %169 = fadd float %165, %168, !dbg !34
  %170 = and i32 %10, 3, !dbg !30
  %171 = icmp eq i32 %170, 0, !dbg !30
  %172 = and i1 %159, %171, !dbg !30
  %173 = bitcast float %169 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %173, i1 %172) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !30
  %175 = load float, ptr addrspace(3) %174, align 16, !dbg !30
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !30
  %177 = load float, ptr addrspace(3) %176, align 16, !dbg !30
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !30
  %179 = load float, ptr addrspace(3) %178, align 16, !dbg !30
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !30
  %181 = load float, ptr addrspace(3) %180, align 16, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !36
  %183 = bitcast float %175 to i32, !dbg !36
  %184 = bitcast float %177 to i32, !dbg !36
  %185 = bitcast float %179 to i32, !dbg !36
  %186 = bitcast float %181 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %182, i32 %183, i32 %184, i32 %185, i32 %186, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27, !dbg !36
  %188 = load float, ptr addrspace(3) %187, align 4, !dbg !36
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float 1.600000e+01) #5, !dbg !36
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 1.600000e+01) #5, !dbg !36
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float 1.600000e+01) #5, !dbg !36
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float 1.600000e+01) #5, !dbg !36
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float 1.600000e+01) #5, !dbg !36
  %194 = fsub float %52, %190, !dbg !37
  %195 = fsub float %53, %191, !dbg !37
  %196 = fsub float %54, %192, !dbg !37
  %197 = fsub float %55, %193, !dbg !37
  %198 = fmul float %194, %194, !dbg !38
  %199 = fmul float %195, %195, !dbg !38
  %200 = fmul float %196, %196, !dbg !38
  %201 = fmul float %197, %197, !dbg !38
  %202 = select i1 %30, float %198, float 0.000000e+00, !dbg !39
  %203 = select i1 %30, float %199, float 0.000000e+00, !dbg !39
  %204 = select i1 %30, float %200, float 0.000000e+00, !dbg !39
  %205 = select i1 %30, float %201, float 0.000000e+00, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %206 = bitcast float %202 to i32, !dbg !40
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 16, i32 31), !dbg !40
  %208 = bitcast i32 %207 to float, !dbg !40
  %209 = fadd float %202, %208, !dbg !42
  %210 = bitcast float %209 to i32, !dbg !40
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 8, i32 31), !dbg !40
  %212 = bitcast i32 %211 to float, !dbg !40
  %213 = fadd float %209, %212, !dbg !42
  %214 = bitcast float %203 to i32, !dbg !40
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 16, i32 31), !dbg !40
  %216 = bitcast i32 %215 to float, !dbg !40
  %217 = fadd float %203, %216, !dbg !42
  %218 = bitcast float %217 to i32, !dbg !40
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 8, i32 31), !dbg !40
  %220 = bitcast i32 %219 to float, !dbg !40
  %221 = fadd float %217, %220, !dbg !42
  %222 = bitcast float %204 to i32, !dbg !40
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 16, i32 31), !dbg !40
  %224 = bitcast i32 %223 to float, !dbg !40
  %225 = fadd float %204, %224, !dbg !42
  %226 = bitcast float %225 to i32, !dbg !40
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 8, i32 31), !dbg !40
  %228 = bitcast i32 %227 to float, !dbg !40
  %229 = fadd float %225, %228, !dbg !42
  %230 = bitcast float %205 to i32, !dbg !40
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 16, i32 31), !dbg !40
  %232 = bitcast i32 %231 to float, !dbg !40
  %233 = fadd float %205, %232, !dbg !42
  %234 = bitcast float %233 to i32, !dbg !40
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 8, i32 31), !dbg !40
  %236 = bitcast i32 %235 to float, !dbg !40
  %237 = fadd float %233, %236, !dbg !42
  %238 = bitcast float %213 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %238, i1 %141) #5, !dbg !40
  %239 = bitcast float %221 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %239, i1 %141) #5, !dbg !40
  %240 = bitcast float %229 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %240, i1 %141) #5, !dbg !40
  %241 = bitcast float %237 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %241, i1 %141) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %242 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %159) #5, !dbg !40
  %243 = bitcast i32 %242 to float, !dbg !40
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 2, i32 31), !dbg !40
  %245 = bitcast i32 %244 to float, !dbg !40
  %246 = fadd float %243, %245, !dbg !42
  %247 = bitcast float %246 to i32, !dbg !40
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 1, i32 31), !dbg !40
  %249 = bitcast i32 %248 to float, !dbg !40
  %250 = fadd float %246, %249, !dbg !42
  %251 = bitcast float %250 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %251, i1 %172) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %252 = load float, ptr addrspace(3) %174, align 16, !dbg !40
  %253 = load float, ptr addrspace(3) %176, align 16, !dbg !40
  %254 = load float, ptr addrspace(3) %178, align 16, !dbg !40
  %255 = load float, ptr addrspace(3) %180, align 16, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %256 = bitcast float %252 to i32, !dbg !43
  %257 = bitcast float %253 to i32, !dbg !43
  %258 = bitcast float %254 to i32, !dbg !43
  %259 = bitcast float %255 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %182, i32 %256, i32 %257, i32 %258, i32 %259, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %260 = load float, ptr addrspace(3) %187, align 4, !dbg !43
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %260, float 1.600000e+01) #5, !dbg !44
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float 1.600000e+01) #5, !dbg !44
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %253, float 1.600000e+01) #5, !dbg !44
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float 1.600000e+01) #5, !dbg !44
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float 1.600000e+01) #5, !dbg !44
  %266 = fadd float %261, 0x3EE4F8B580000000, !dbg !45
  %267 = fadd float %262, 0x3EE4F8B580000000, !dbg !45
  %268 = fadd float %263, 0x3EE4F8B580000000, !dbg !45
  %269 = fadd float %264, 0x3EE4F8B580000000, !dbg !45
  %270 = fadd float %265, 0x3EE4F8B580000000, !dbg !45
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %271, 0, !dbg !43
  br i1 %.not.i, label %274, label %272, !dbg !43

272:                                              ; preds = %7
  %273 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %266), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

274:                                              ; preds = %7
  %275 = tail call float @llvm.nvvm.rsqrt.approx.f(float %266), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %272, %274
  %.0.i = phi float [ %273, %272 ], [ %275, %274 ], !dbg !43
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i10 = icmp eq i32 %276, 0, !dbg !43
  br i1 %.not.i10, label %279, label %277, !dbg !43

277:                                              ; preds = %__nv_rsqrtf.exit
  %278 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %267), !dbg !43
  br label %__nv_rsqrtf.exit12, !dbg !43

279:                                              ; preds = %__nv_rsqrtf.exit
  %280 = tail call float @llvm.nvvm.rsqrt.approx.f(float %267), !dbg !43
  br label %__nv_rsqrtf.exit12, !dbg !43

__nv_rsqrtf.exit12:                               ; preds = %277, %279
  %.0.i11 = phi float [ %278, %277 ], [ %280, %279 ], !dbg !43
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i13 = icmp eq i32 %281, 0, !dbg !43
  br i1 %.not.i13, label %284, label %282, !dbg !43

282:                                              ; preds = %__nv_rsqrtf.exit12
  %283 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %268), !dbg !43
  br label %__nv_rsqrtf.exit15, !dbg !43

284:                                              ; preds = %__nv_rsqrtf.exit12
  %285 = tail call float @llvm.nvvm.rsqrt.approx.f(float %268), !dbg !43
  br label %__nv_rsqrtf.exit15, !dbg !43

__nv_rsqrtf.exit15:                               ; preds = %282, %284
  %.0.i14 = phi float [ %283, %282 ], [ %285, %284 ], !dbg !43
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i16 = icmp eq i32 %286, 0, !dbg !43
  br i1 %.not.i16, label %289, label %287, !dbg !43

287:                                              ; preds = %__nv_rsqrtf.exit15
  %288 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %269), !dbg !43
  br label %__nv_rsqrtf.exit18, !dbg !43

289:                                              ; preds = %__nv_rsqrtf.exit15
  %290 = tail call float @llvm.nvvm.rsqrt.approx.f(float %269), !dbg !43
  br label %__nv_rsqrtf.exit18, !dbg !43

__nv_rsqrtf.exit18:                               ; preds = %287, %289
  %.0.i17 = phi float [ %288, %287 ], [ %290, %289 ], !dbg !43
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i19 = icmp eq i32 %291, 0, !dbg !43
  br i1 %.not.i19, label %294, label %292, !dbg !43

292:                                              ; preds = %__nv_rsqrtf.exit18
  %293 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %270), !dbg !43
  br label %__nv_rsqrtf.exit21, !dbg !43

294:                                              ; preds = %__nv_rsqrtf.exit18
  %295 = tail call float @llvm.nvvm.rsqrt.approx.f(float %270), !dbg !43
  br label %__nv_rsqrtf.exit21, !dbg !43

__nv_rsqrtf.exit21:                               ; preds = %292, %294
  %.0.i20 = phi float [ %293, %292 ], [ %295, %294 ], !dbg !43
  %296 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !28
  %297 = bitcast i32 %296 to float, !dbg !28
  %298 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !28
  %299 = bitcast i32 %298 to float, !dbg !28
  %300 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !28
  %301 = bitcast i32 %300 to float, !dbg !28
  %302 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !28
  %303 = bitcast i32 %302 to float, !dbg !28
  %304 = or disjoint i32 %9, %27, !dbg !13
  %305 = icmp slt i32 %304, 1024, !dbg !14
  %306 = fsub float %303, %190, !dbg !46
  %307 = fsub float %301, %191, !dbg !46
  %308 = fsub float %299, %192, !dbg !46
  %309 = fsub float %297, %193, !dbg !46
  %310 = fmul float %306, %.0.i11, !dbg !47
  %311 = fmul float %307, %.0.i14, !dbg !47
  %312 = fmul float %308, %.0.i17, !dbg !47
  %313 = fmul float %309, %.0.i20, !dbg !47
  %314 = fadd float %94, %310, !dbg !48
  %315 = fadd float %97, %311, !dbg !48
  %316 = fadd float %100, %312, !dbg !48
  %317 = fadd float %103, %313, !dbg !48
  %318 = sext i32 %304 to i64, !dbg !49
  %319 = getelementptr float, ptr addrspace(1) %3, i64 %318, !dbg !49
  %320 = icmp eq i32 %142, 0, !dbg !50
  %321 = bitcast float %.0.i to i32, !dbg !50
  %322 = and i1 %320, %305, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %321, ptr addrspace(1) %319, i1 %322) #5, !dbg !50
  %323 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %324 = shl i32 %10, 6, !dbg !52
  %325 = and i32 %324, 448, !dbg !52
  %326 = or disjoint i32 %325, %.lobit2, !dbg !52
  %327 = or disjoint i32 %326, %33, !dbg !52
  %328 = or disjoint i32 %327, %35, !dbg !52
  %329 = or disjoint i32 %328, %37, !dbg !52
  %330 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %325, !dbg !52
  %331 = getelementptr float, ptr addrspace(3) %330, i32 %329, !dbg !52
  %332 = bitcast float %314 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #5, !dbg !52
  %333 = or disjoint i32 %329, 16, !dbg !52
  %334 = lshr i32 %333, 2, !dbg !52
  %335 = and i32 %334, 1073741820, !dbg !52
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i32 %335, !dbg !52
  %337 = getelementptr float, ptr addrspace(3) %336, i32 %333, !dbg !52
  %338 = bitcast float %315 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %338, i1 true) #5, !dbg !52
  %339 = or disjoint i32 %329, 32, !dbg !52
  %340 = lshr i32 %339, 2, !dbg !52
  %341 = and i32 %340, 1073741820, !dbg !52
  %342 = getelementptr float, ptr addrspace(3) @global_smem, i32 %341, !dbg !52
  %343 = getelementptr float, ptr addrspace(3) %342, i32 %339, !dbg !52
  %344 = bitcast float %316 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %344, i1 true) #5, !dbg !52
  %345 = or disjoint i32 %329, 48, !dbg !52
  %346 = lshr i32 %345, 2, !dbg !52
  %347 = and i32 %346, 1073741820, !dbg !52
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i32 %347, !dbg !52
  %349 = getelementptr float, ptr addrspace(3) %348, i32 %345, !dbg !52
  %350 = bitcast float %317 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %350, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %351 = and i32 %10, 124, !dbg !52
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %351, !dbg !52
  %353 = getelementptr inbounds float, ptr addrspace(3) %352, i32 %71, !dbg !52
  %.extract = load i32, ptr addrspace(3) %353, align 16, !dbg !52
  %354 = getelementptr inbounds i8, ptr addrspace(3) %353, i32 4, !dbg !52
  %.extract7 = load i32, ptr addrspace(3) %354, align 4, !dbg !52
  %355 = getelementptr inbounds i8, ptr addrspace(3) %353, i32 8, !dbg !52
  %.extract8 = load i32, ptr addrspace(3) %355, align 8, !dbg !52
  %356 = getelementptr inbounds i8, ptr addrspace(3) %353, i32 12, !dbg !52
  %.extract9 = load i32, ptr addrspace(3) %356, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %323, i1 %31) #5, !dbg !52
  %357 = getelementptr float, ptr addrspace(1) %2, i64 %318, !dbg !53
  %358 = bitcast float %189 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %358, ptr addrspace(1) %357, i1 %322) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmjq4i2er7sdn4e6up5ad5jio7wjn4new2zdsaecwdzrdahghmaj.py", directory: "inductor_cache/mj")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_6", linkageName: "triton_per_fused__native_batch_norm_legit_add_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 33, column: 60, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 73, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 55, scope: !7)
!29 = !DILocation(line: 39, column: 33, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 40, column: 24, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 44, column: 19, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 35, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !41)
!41 = !DILocation(line: 48, column: 26, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !41)
!43 = !DILocation(line: 53, column: 28, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 25, scope: !7)
!50 = !DILocation(line: 57, column: 37, scope: !7)
!51 = !DILocation(line: 58, column: 25, scope: !7)
!52 = !DILocation(line: 58, column: 45, scope: !7)
!53 = !DILocation(line: 59, column: 25, scope: !7)
!54 = !DILocation(line: 59, column: 37, scope: !7)
!55 = !DILocation(line: 59, column: 4, scope: !7)
