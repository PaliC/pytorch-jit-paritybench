; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = shl i32 %7, 1, !dbg !12
  %10 = and i32 %9, 6, !dbg !12
  %11 = and i32 %7, 7, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 16, !dbg !14
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %17 = and i32 %7, 60, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %18 = sdiv i32 %.frozen, 4, !dbg !16
  %19 = mul i32 %18, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = add nsw i32 %.decomposed, %17, !dbg !18
  %21 = shl i32 %18, 6, !dbg !19
  %22 = add i32 %20, %21, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !22
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !22
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = bitcast i32 %27 to float, !dbg !22
  %30 = select i1 %14, float %28, float 0.000000e+00, !dbg !23
  %31 = select i1 %14, float %29, float 0.000000e+00, !dbg !23
  %32 = bitcast float %30 to i32, !dbg !24
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = fadd float %30, %34, !dbg !28
  %36 = bitcast float %35 to i32, !dbg !24
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 8, i32 31), !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = fadd float %35, %38, !dbg !28
  %40 = bitcast float %39 to i32, !dbg !24
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = fadd float %39, %42, !dbg !28
  %44 = bitcast float %31 to i32, !dbg !24
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 16, i32 31), !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = fadd float %31, %46, !dbg !28
  %48 = bitcast float %47 to i32, !dbg !24
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 8, i32 31), !dbg !24
  %50 = bitcast i32 %49 to float, !dbg !24
  %51 = fadd float %47, %50, !dbg !28
  %52 = bitcast float %51 to i32, !dbg !24
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = fadd float %51, %54, !dbg !28
  %56 = icmp samesign ult i32 %8, 4, !dbg !24
  %57 = and i32 %16, 1, !dbg !24
  %58 = shl nuw nsw i32 %10, 1, !dbg !24
  %59 = or disjoint i32 %58, %57, !dbg !24
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !24
  %61 = bitcast float %43 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 %56) #3, !dbg !24
  %62 = or disjoint i32 %58, 2, !dbg !24
  %63 = or disjoint i32 %62, %57, !dbg !24
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !24
  %65 = bitcast float %55 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 %56) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %66 = icmp slt i32 %7, 16, !dbg !24
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !24
  %68 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %67, i1 %66) #3, !dbg !24
  %69 = bitcast i32 %68 to float, !dbg !24
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !24
  %71 = bitcast i32 %70 to float, !dbg !24
  %72 = fadd float %69, %71, !dbg !28
  %73 = and i32 %7, 1, !dbg !24
  %74 = icmp eq i32 %73, 0, !dbg !24
  %75 = and i1 %66, %74, !dbg !24
  %76 = bitcast float %72 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %76, i1 %75) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !24
  %78 = load i32, ptr addrspace(3) %77, align 16, !dbg !24
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !24
  %80 = load i32, ptr addrspace(3) %79, align 8, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %81, i32 %78, i32 %80, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %83 = load float, ptr addrspace(3) %82, align 4, !dbg !30
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 1.600000e+01) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %85 = sext i32 %13 to i64, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !32
  %87 = lshr i32 %8, 3, !dbg !33
  %88 = shl nuw nsw i32 %57, 2, !dbg !33
  %89 = or disjoint i32 %88, %87, !dbg !33
  %90 = icmp eq i32 %89, 0, !dbg !33
  %91 = bitcast float %84 to i32, !dbg !33
  %92 = and i1 %90, %15, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %86, i1 %92) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cybpusikrgcqve2fy2ev2oxi3l4ylyd3dvsk3m3psut2ypvj62q4.py", directory: "inductor_cache/yb")
!4 = !{ptr @triton_per_fused_mean_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_4", linkageName: "triton_per_fused_mean_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 42, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 50, scope: !7)
!23 = !DILocation(line: 35, column: 33, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
!32 = !DILocation(line: 40, column: 28, scope: !7)
!33 = !DILocation(line: 40, column: 39, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
