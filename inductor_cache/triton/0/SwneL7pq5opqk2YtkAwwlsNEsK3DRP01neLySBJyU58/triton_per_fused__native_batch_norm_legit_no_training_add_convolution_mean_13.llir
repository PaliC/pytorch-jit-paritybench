; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = shl i32 %12, 5, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 4, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %13, %16, !dbg !13
  %19 = or disjoint i32 %13, %17, !dbg !13
  %20 = icmp slt i32 %18, 512, !dbg !14
  %21 = icmp slt i32 %19, 512, !dbg !14
  %22 = shl i32 %14, 2, !dbg !15
  %23 = and i32 %22, 60, !dbg !15
  %24 = srem i32 %18, 128, !dbg !16
  %25 = srem i32 %19, 128, !dbg !16
  %26 = shl i32 %18, 6, !dbg !17
  %27 = shl i32 %19, 6, !dbg !17
  %28 = or disjoint i32 %26, %23, !dbg !18
  %29 = or disjoint i32 %27, %23, !dbg !18
  %30 = sext i32 %28 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = sext i32 %29 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !20
  %36 = sext i32 %24 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !21
  %38 = sext i32 %25 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %20) #5, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %20) #5, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %20) #5, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %20) #5, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %21) #5, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %21) #5, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %21) #5, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %21) #5, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !26
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !26
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %20) #5, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #5, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #5, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #5, !dbg !26
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #5, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #5, !dbg !28
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #5, !dbg !28
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #5, !dbg !28
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %20) #5, !dbg !28
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %21) #5, !dbg !28
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %21) #5, !dbg !28
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %21) #5, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %21) #5, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !29
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %20) #5, !dbg !30
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %20) #5, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %20) #5, !dbg !30
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %20) #5, !dbg !30
  %78 = bitcast i32 %77 to float, !dbg !30
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %21) #5, !dbg !30
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %21) #5, !dbg !30
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %21) #5, !dbg !30
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %21) #5, !dbg !30
  %83 = bitcast i32 %82 to float, !dbg !30
  %84 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !31
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !31
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %20) #5, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %20) #5, !dbg !32
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %20) #5, !dbg !32
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %20) #5, !dbg !32
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %21) #5, !dbg !32
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %21) #5, !dbg !32
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %21) #5, !dbg !32
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %21) #5, !dbg !32
  %94 = getelementptr float, ptr addrspace(1) %8, i64 %36, !dbg !33
  %95 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !33
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %20) #5, !dbg !34
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %20) #5, !dbg !34
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %20) #5, !dbg !34
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %20) #5, !dbg !34
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #5, !dbg !34
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #5, !dbg !34
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #5, !dbg !34
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %21) #5, !dbg !34
  %104 = fadd float %78, 0x3EE4F8B580000000, !dbg !35
  %105 = fadd float %83, 0x3EE4F8B580000000, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i12 = icmp eq i32 %112, 0, !dbg !36
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i15 = icmp eq i32 %113, 0, !dbg !36
  br i1 %.not.i12, label %119, label %114, !dbg !36

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %117, label %115, !dbg !36

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #5, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #5, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

119:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %122, label %120, !dbg !36

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #5, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #5, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

__nv_sqrtf.exit16:                                ; preds = %115, %117, %120, %122
  %.0.i14 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !36
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i32 = icmp eq i32 %130, 0, !dbg !36
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i35 = icmp eq i32 %131, 0, !dbg !36
  br i1 %.not.i32, label %137, label %132, !dbg !36

132:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %135, label %133, !dbg !36

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #5, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #5, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

137:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %140, label %138, !dbg !36

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #5, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #5, !dbg !36
  br label %__nv_sqrtf.exit36, !dbg !36

__nv_sqrtf.exit36:                                ; preds = %133, %135, %138, %140
  %.0.i34 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !36
  %142 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %143 = bitcast i32 %142 to float, !dbg !24
  %144 = bitcast i32 %61 to float, !dbg !26
  %145 = fadd float %143, %144, !dbg !37
  %146 = bitcast i32 %71 to float, !dbg !28
  %147 = fsub float %145, %146, !dbg !38
  %148 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %149 = bitcast i32 %148 to float, !dbg !24
  %150 = fadd float %149, %144, !dbg !37
  %151 = fsub float %150, %146, !dbg !38
  %152 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %153 = bitcast i32 %152 to float, !dbg !24
  %154 = fadd float %153, %144, !dbg !37
  %155 = fsub float %154, %146, !dbg !38
  %156 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %157 = bitcast i32 %156 to float, !dbg !24
  %158 = fadd float %157, %144, !dbg !37
  %159 = fsub float %158, %146, !dbg !38
  %160 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %161 = bitcast i32 %160 to float, !dbg !24
  %162 = bitcast i32 %57 to float, !dbg !26
  %163 = fadd float %161, %162, !dbg !37
  %164 = bitcast i32 %67 to float, !dbg !28
  %165 = fsub float %163, %164, !dbg !38
  %166 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %167 = bitcast i32 %166 to float, !dbg !24
  %168 = fadd float %167, %162, !dbg !37
  %169 = fsub float %168, %164, !dbg !38
  %170 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %171 = bitcast i32 %170 to float, !dbg !24
  %172 = fadd float %171, %162, !dbg !37
  %173 = fsub float %172, %164, !dbg !38
  %174 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %175 = bitcast i32 %174 to float, !dbg !24
  %176 = fadd float %175, %162, !dbg !37
  %177 = fsub float %176, %164, !dbg !38
  %178 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %179 = bitcast i32 %178 to float, !dbg !20
  %180 = bitcast i32 %47 to float, !dbg !22
  %181 = fadd float %179, %180, !dbg !39
  %182 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %183 = bitcast i32 %182 to float, !dbg !20
  %184 = fadd float %183, %180, !dbg !39
  %185 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %186 = bitcast i32 %185 to float, !dbg !20
  %187 = fadd float %186, %180, !dbg !39
  %188 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %189 = bitcast i32 %188 to float, !dbg !20
  %190 = fadd float %189, %180, !dbg !39
  %191 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %192 = bitcast i32 %191 to float, !dbg !20
  %193 = bitcast i32 %43 to float, !dbg !22
  %194 = fadd float %192, %193, !dbg !39
  %195 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %196 = bitcast i32 %195 to float, !dbg !20
  %197 = fadd float %196, %193, !dbg !39
  %198 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %199 = bitcast i32 %198 to float, !dbg !20
  %200 = fadd float %199, %193, !dbg !39
  %201 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %202 = bitcast i32 %201 to float, !dbg !20
  %203 = fadd float %202, %193, !dbg !39
  %204 = bitcast i32 %103 to float, !dbg !34
  %205 = bitcast i32 %99 to float, !dbg !34
  %206 = bitcast i32 %93 to float, !dbg !32
  %207 = bitcast i32 %89 to float, !dbg !32
  %208 = and i32 %14, 31, !dbg !12
  %209 = or disjoint i32 %13, %208, !dbg !13
  %210 = icmp slt i32 %209, 512, !dbg !14
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #5, !dbg !40
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #5, !dbg !40
  %213 = fmul float %177, %211, !dbg !41
  %214 = fmul float %173, %211, !dbg !41
  %215 = fmul float %169, %211, !dbg !41
  %216 = fmul float %165, %211, !dbg !41
  %217 = fmul float %159, %212, !dbg !41
  %218 = fmul float %155, %212, !dbg !41
  %219 = fmul float %151, %212, !dbg !41
  %220 = fmul float %147, %212, !dbg !41
  %221 = fmul float %213, %207, !dbg !42
  %222 = fmul float %214, %207, !dbg !42
  %223 = fmul float %215, %207, !dbg !42
  %224 = fmul float %216, %207, !dbg !42
  %225 = fmul float %217, %206, !dbg !42
  %226 = fmul float %218, %206, !dbg !42
  %227 = fmul float %219, %206, !dbg !42
  %228 = fmul float %220, %206, !dbg !42
  %229 = fadd float %221, %205, !dbg !43
  %230 = fadd float %222, %205, !dbg !43
  %231 = fadd float %223, %205, !dbg !43
  %232 = fadd float %224, %205, !dbg !43
  %233 = fadd float %225, %204, !dbg !43
  %234 = fadd float %226, %204, !dbg !43
  %235 = fadd float %227, %204, !dbg !43
  %236 = fadd float %228, %204, !dbg !43
  %237 = fadd float %203, %229, !dbg !44
  %238 = fadd float %200, %230, !dbg !44
  %239 = fadd float %197, %231, !dbg !44
  %240 = fadd float %194, %232, !dbg !44
  %241 = fadd float %190, %233, !dbg !44
  %242 = fadd float %187, %234, !dbg !44
  %243 = fadd float %184, %235, !dbg !44
  %244 = fadd float %181, %236, !dbg !44
  %245 = fadd float %237, %238, !dbg !45
  %246 = fadd float %239, %245, !dbg !45
  %247 = fadd float %240, %246, !dbg !45
  %248 = select i1 %20, float %247, float 0.000000e+00, !dbg !45
  %249 = fadd float %241, %242, !dbg !45
  %250 = fadd float %243, %249, !dbg !45
  %251 = fadd float %244, %250, !dbg !45
  %252 = select i1 %21, float %251, float 0.000000e+00, !dbg !45
  %253 = bitcast float %248 to i32, !dbg !50
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 8, i32 31), !dbg !50
  %255 = bitcast i32 %254 to float, !dbg !50
  %256 = fadd float %248, %255, !dbg !45
  %257 = bitcast float %256 to i32, !dbg !50
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !50
  %259 = bitcast i32 %258 to float, !dbg !50
  %260 = fadd float %256, %259, !dbg !45
  %261 = bitcast float %260 to i32, !dbg !50
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 2, i32 31), !dbg !50
  %263 = bitcast i32 %262 to float, !dbg !50
  %264 = fadd float %260, %263, !dbg !45
  %265 = bitcast float %264 to i32, !dbg !50
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 1, i32 31), !dbg !50
  %267 = bitcast i32 %266 to float, !dbg !50
  %268 = fadd float %264, %267, !dbg !45
  %269 = bitcast float %252 to i32, !dbg !50
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 8, i32 31), !dbg !50
  %271 = bitcast i32 %270 to float, !dbg !50
  %272 = fadd float %252, %271, !dbg !45
  %273 = bitcast float %272 to i32, !dbg !50
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 4, i32 31), !dbg !50
  %275 = bitcast i32 %274 to float, !dbg !50
  %276 = fadd float %272, %275, !dbg !45
  %277 = bitcast float %276 to i32, !dbg !50
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !50
  %279 = bitcast i32 %278 to float, !dbg !50
  %280 = fadd float %276, %279, !dbg !45
  %281 = bitcast float %280 to i32, !dbg !50
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 1, i32 31), !dbg !50
  %283 = bitcast i32 %282 to float, !dbg !50
  %284 = fadd float %280, %283, !dbg !45
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !51
  %286 = bitcast float %268 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #5, !dbg !51
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !51
  %288 = bitcast float %284 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !51
  %290 = load float, ptr addrspace(3) %289, align 4, !dbg !51
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %290, float 6.400000e+01) #5, !dbg !51
  %292 = bitcast float %203 to i32, !dbg !52
  %293 = bitcast float %200 to i32, !dbg !52
  %294 = bitcast float %197 to i32, !dbg !52
  %295 = bitcast float %194 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %293, i32 %294, i32 %295, ptr addrspace(1) %31, i1 %20) #5, !dbg !52
  %296 = bitcast float %190 to i32, !dbg !52
  %297 = bitcast float %187 to i32, !dbg !52
  %298 = bitcast float %184 to i32, !dbg !52
  %299 = bitcast float %181 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %297, i32 %298, i32 %299, ptr addrspace(1) %33, i1 %21) #5, !dbg !52
  %300 = bitcast float %176 to i32, !dbg !53
  %301 = bitcast float %172 to i32, !dbg !53
  %302 = bitcast float %168 to i32, !dbg !53
  %303 = bitcast float %163 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %301, i32 %302, i32 %303, ptr addrspace(1) %48, i1 %20) #5, !dbg !53
  %304 = bitcast float %158 to i32, !dbg !53
  %305 = bitcast float %154 to i32, !dbg !53
  %306 = bitcast float %150 to i32, !dbg !53
  %307 = bitcast float %145 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %304, i32 %305, i32 %306, i32 %307, ptr addrspace(1) %49, i1 %21) #5, !dbg !53
  %308 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !54
  %309 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !54
  %310 = bitcast float %237 to i32, !dbg !55
  %311 = bitcast float %238 to i32, !dbg !55
  %312 = bitcast float %239 to i32, !dbg !55
  %313 = bitcast float %240 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %310, i32 %311, i32 %312, i32 %313, ptr addrspace(1) %308, i1 %20) #5, !dbg !55
  %314 = bitcast float %241 to i32, !dbg !55
  %315 = bitcast float %242 to i32, !dbg !55
  %316 = bitcast float %243 to i32, !dbg !55
  %317 = bitcast float %244 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %314, i32 %315, i32 %316, i32 %317, ptr addrspace(1) %309, i1 %21) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %318 = sext i32 %209 to i64, !dbg !57
  %319 = getelementptr float, ptr addrspace(1) %2, i64 %318, !dbg !57
  %320 = and i32 %14, 224, !dbg !58
  %321 = icmp eq i32 %320, 0, !dbg !58
  %322 = bitcast float %291 to i32, !dbg !58
  %323 = and i1 %321, %210, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %322, ptr addrspace(1) %319, i1 %323) #5, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py", directory: "inductor_cache/bp")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 34, scope: !7)
!24 = !DILocation(line: 34, column: 47, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 44, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 27, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 19, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !46, inlinedAt: !49)
!46 = distinct !DILexicalBlockFile(scope: !48, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!48 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!49 = !DILocation(line: 56, column: 26, scope: !7)
!50 = !DILocation(line: 267, column: 36, scope: !48, inlinedAt: !49)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 47, scope: !7)
!53 = !DILocation(line: 60, column: 47, scope: !7)
!54 = !DILocation(line: 61, column: 25, scope: !7)
!55 = !DILocation(line: 61, column: 45, scope: !7)
!56 = !DILocation(line: 62, column: 4, scope: !7)
!57 = !DILocation(line: 63, column: 28, scope: !7)
!58 = !DILocation(line: 63, column: 40, scope: !7)
!59 = !DILocation(line: 63, column: 4, scope: !7)
