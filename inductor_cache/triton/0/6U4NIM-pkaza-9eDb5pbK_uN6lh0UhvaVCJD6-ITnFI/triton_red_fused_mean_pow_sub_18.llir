; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_pow_sub_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr4 = freeze i32 %6, !dbg !11
  %7 = shl i32 %.fr4, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 512, !dbg !14
  %13 = lshr i32 %8, 4, !dbg !15
  %14 = and i32 %13, 7, !dbg !15
  %15 = sdiv i32 %11, 64, !dbg !16
  %16 = mul i32 %15, 64, !dbg !17
  %.decomposed = sub i32 %11, %16, !dbg !17
  %17 = sdiv i32 %11, 128, !dbg !18
  %18 = shl nsw i32 %17, 6, !dbg !19
  %19 = add nsw i32 %18, %.decomposed, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !21
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 %12) #3, !dbg !22
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !22
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !22
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !22
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !22
  %27 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !22
  %28 = insertelement <4 x i32> %27, i32 %24, i64 1, !dbg !22
  %29 = insertelement <4 x i32> %28, i32 %25, i64 2, !dbg !22
  %30 = insertelement <4 x i32> %29, i32 %26, i64 3, !dbg !22
  %31 = bitcast <4 x i32> %30 to <4 x float>, !dbg !22
  %32 = mul i32 %15, 6144, !dbg !23
  %33 = add i32 %32, %.decomposed
  br i1 %12, label %.split.us, label %.split.preheader

.split.preheader:                                 ; preds = %5
  %34 = shl nuw nsw i32 %14, 6, !dbg !24
  %35 = or disjoint i32 %33, %34, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  %39 = shl nuw nsw i32 %14, 6, !dbg !24
  %40 = or disjoint i32 %39, 512, !dbg !24
  %41 = or disjoint i32 %33, %40, !dbg !25
  %42 = sext i32 %41 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  %45 = shl nuw nsw i32 %14, 6, !dbg !24
  %46 = or disjoint i32 %45, 1024, !dbg !24
  %47 = or disjoint i32 %33, %46, !dbg !25
  %48 = sext i32 %47 to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  %51 = shl nuw nsw i32 %14, 6, !dbg !24
  %52 = or disjoint i32 %51, 1536, !dbg !24
  %53 = or disjoint i32 %33, %52, !dbg !25
  %54 = sext i32 %53 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  %57 = shl nuw nsw i32 %14, 6, !dbg !24
  %58 = or disjoint i32 %57, 2048, !dbg !24
  %59 = add i32 %33, %58, !dbg !25
  %60 = sext i32 %59 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  %63 = shl nuw nsw i32 %14, 6, !dbg !24
  %64 = or disjoint i32 %63, 2560, !dbg !24
  %65 = add i32 %33, %64, !dbg !25
  %66 = sext i32 %65 to i64, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !26
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  %69 = shl nuw nsw i32 %14, 6, !dbg !24
  %70 = or disjoint i32 %69, 3072, !dbg !24
  %71 = add i32 %33, %70, !dbg !25
  %72 = sext i32 %71 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  %75 = shl nuw nsw i32 %14, 6, !dbg !24
  %76 = or disjoint i32 %75, 3584, !dbg !24
  %77 = add i32 %33, %76, !dbg !25
  %78 = sext i32 %77 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !26
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  %81 = shl nuw nsw i32 %14, 6, !dbg !24
  %82 = or disjoint i32 %81, 4096, !dbg !24
  %83 = add i32 %33, %82, !dbg !25
  %84 = sext i32 %83 to i64, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !26
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  %87 = shl nuw nsw i32 %14, 6, !dbg !24
  %88 = or disjoint i32 %87, 4608, !dbg !24
  %89 = add i32 %33, %88, !dbg !25
  %90 = sext i32 %89 to i64, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !26
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  %93 = shl nuw nsw i32 %14, 6, !dbg !24
  %94 = or disjoint i32 %93, 5120, !dbg !24
  %95 = add i32 %33, %94, !dbg !25
  %96 = sext i32 %95 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !26
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  %99 = shl nuw nsw i32 %14, 6, !dbg !24
  %100 = or disjoint i32 %99, 5632, !dbg !24
  %101 = add i32 %33, %100, !dbg !25
  %102 = sext i32 %101 to i64, !dbg !26
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !26
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !27
  br label %.split2.us, !dbg !12

.split.us:                                        ; preds = %5, %.split.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %.split.us ], [ 0, %5 ]
  %105 = phi <4 x float> [ %123, %.split.us ], [ zeroinitializer, %5 ]
  %106 = trunc i64 %indvars.iv to i32, !dbg !25
  %.tr = or disjoint i32 %14, %106, !dbg !25
  %107 = shl i32 %.tr, 6, !dbg !25
  %108 = add i32 %33, %107, !dbg !25
  %109 = sext i32 %108 to i64, !dbg !26
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !26
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !27
  %116 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !27
  %117 = insertelement <4 x i32> %116, i32 %113, i64 1, !dbg !27
  %118 = insertelement <4 x i32> %117, i32 %114, i64 2, !dbg !27
  %119 = insertelement <4 x i32> %118, i32 %115, i64 3, !dbg !27
  %120 = bitcast <4 x i32> %119 to <4 x float>, !dbg !27
  %121 = fsub <4 x float> %120, %31, !dbg !28
  %122 = fmul <4 x float> %121, %121, !dbg !29
  %123 = fadd <4 x float> %105, %122, !dbg !30
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !31
  %124 = icmp samesign ult i64 %indvars.iv, 88, !dbg !31
  br i1 %124, label %.split.us, label %.split2.us, !dbg !31

.split2.us:                                       ; preds = %.split.us, %.split.preheader
  %125 = phi <4 x float> [ zeroinitializer, %.split.preheader ], [ %123, %.split.us ], !dbg !12
  %126 = lshr i32 %8, 5, !dbg !12
  %127 = and i32 %8, 63, !dbg !12
  %128 = or disjoint i32 %7, %127, !dbg !13
  %129 = icmp slt i32 %128, 512, !dbg !14
  %130 = and i32 %8, 16, !dbg !12
  %131 = extractelement <4 x float> %125, i64 0, !dbg !32
  %132 = bitcast float %131 to i32, !dbg !32
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 16, i32 31), !dbg !32
  %134 = bitcast i32 %133 to float, !dbg !32
  %135 = fadd float %131, %134, !dbg !36
  %136 = extractelement <4 x float> %125, i64 1, !dbg !32
  %137 = bitcast float %136 to i32, !dbg !32
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 16, i32 31), !dbg !32
  %139 = bitcast i32 %138 to float, !dbg !32
  %140 = fadd float %136, %139, !dbg !36
  %141 = extractelement <4 x float> %125, i64 2, !dbg !32
  %142 = bitcast float %141 to i32, !dbg !32
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 16, i32 31), !dbg !32
  %144 = bitcast i32 %143 to float, !dbg !32
  %145 = fadd float %141, %144, !dbg !36
  %146 = extractelement <4 x float> %125, i64 3, !dbg !32
  %147 = bitcast float %146 to i32, !dbg !32
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !32
  %149 = bitcast i32 %148 to float, !dbg !32
  %150 = fadd float %146, %149, !dbg !36
  %151 = icmp eq i32 %130, 0, !dbg !32
  %152 = and i32 %126, 3, !dbg !32
  %153 = shl nuw nsw i32 %10, 2, !dbg !32
  %154 = or disjoint i32 %153, %152, !dbg !32
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !32
  %156 = bitcast float %135 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 %151) #3, !dbg !32
  %157 = or disjoint i32 %153, 4, !dbg !32
  %158 = or disjoint i32 %157, %152, !dbg !32
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !32
  %160 = bitcast float %140 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 %151) #3, !dbg !32
  %161 = or disjoint i32 %153, 8, !dbg !32
  %162 = or disjoint i32 %161, %152, !dbg !32
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !32
  %164 = bitcast float %145 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 %151) #3, !dbg !32
  %165 = or disjoint i32 %153, 12, !dbg !32
  %166 = or disjoint i32 %165, %152, !dbg !32
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !32
  %168 = bitcast float %150 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 %151) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %169 = icmp slt i32 %8, 256, !dbg !32
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !32
  %171 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %170, i1 %169) #3, !dbg !32
  %172 = bitcast i32 %171 to float, !dbg !32
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !32
  %174 = bitcast i32 %173 to float, !dbg !32
  %175 = fadd float %172, %174, !dbg !36
  %176 = bitcast float %175 to i32, !dbg !32
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !32
  %178 = bitcast i32 %177 to float, !dbg !32
  %179 = fadd float %175, %178, !dbg !36
  %180 = and i32 %8, 3, !dbg !32
  %181 = icmp eq i32 %180, 0, !dbg !32
  %182 = and i1 %169, %181, !dbg !32
  %183 = bitcast float %179 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %183, i1 %182) #3, !dbg !32
  %184 = getelementptr i8, ptr addrspace(3) %170, i32 512, !dbg !32
  %185 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %184, i1 %169) #3, !dbg !32
  %186 = bitcast i32 %185 to float, !dbg !32
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 2, i32 31), !dbg !32
  %188 = bitcast i32 %187 to float, !dbg !32
  %189 = fadd float %186, %188, !dbg !36
  %190 = bitcast float %189 to i32, !dbg !32
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 1, i32 31), !dbg !32
  %192 = bitcast i32 %191 to float, !dbg !32
  %193 = fadd float %189, %192, !dbg !36
  %194 = bitcast float %193 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %194, i1 %182) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !32
  %196 = load i32, ptr addrspace(3) %195, align 16, !dbg !32
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !32
  %198 = load i32, ptr addrspace(3) %197, align 16, !dbg !32
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !32
  %200 = load i32, ptr addrspace(3) %199, align 16, !dbg !32
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !32
  %202 = load i32, ptr addrspace(3) %201, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !38
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %203, i32 %196, i32 %198, i32 %200, i32 %202, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !38
  %205 = load i32, ptr addrspace(3) %204, align 4, !dbg !38
  %206 = sext i32 %128 to i64, !dbg !39
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %206, !dbg !39
  %208 = and i32 %8, 64, !dbg !40
  %209 = icmp eq i32 %208, 0, !dbg !40
  %210 = and i1 %209, %129, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %207, i1 %210) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6jujydpqqqkytigdqi7zy5r3dtdir2i62npl4c74v6twkvrjzs6.py", directory: "inductor_cache/6j")
!4 = !{ptr @triton_red_fused_mean_pow_sub_18, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_pow_sub_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_pow_sub_18", linkageName: "triton_red_fused_mean_pow_sub_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 38, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 43, scope: !7)
!23 = !DILocation(line: 36, column: 52, scope: !7)
!24 = !DILocation(line: 36, column: 42, scope: !7)
!25 = !DILocation(line: 36, column: 47, scope: !7)
!26 = !DILocation(line: 36, column: 34, scope: !7)
!27 = !DILocation(line: 36, column: 57, scope: !7)
!28 = !DILocation(line: 37, column: 22, scope: !7)
!29 = !DILocation(line: 38, column: 22, scope: !7)
!30 = !DILocation(line: 40, column: 23, scope: !7)
!31 = !DILocation(line: 32, column: 36, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 42, column: 25, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !35)
!37 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!38 = !DILocation(line: 42, column: 28, scope: !7)
!39 = !DILocation(line: 43, column: 25, scope: !7)
!40 = !DILocation(line: 43, column: 36, scope: !7)
!41 = !DILocation(line: 43, column: 4, scope: !7)
