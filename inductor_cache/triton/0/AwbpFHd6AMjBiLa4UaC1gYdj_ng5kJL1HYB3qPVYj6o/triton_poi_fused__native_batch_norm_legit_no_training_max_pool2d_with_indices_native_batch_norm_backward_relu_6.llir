; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = or disjoint i32 %15, 2, !dbg !13
  %18 = or disjoint i32 %15, 3, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %19 = sdiv i32 %.frozen, 16, !dbg !14
  %20 = mul i32 %19, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %20, !dbg !15
  %21 = srem i32 %16, 16, !dbg !15
  %22 = srem i32 %17, 16, !dbg !15
  %23 = srem i32 %18, 16, !dbg !15
  %24 = sdiv i32 %15, 256, !dbg !16
  %25 = srem i32 %24, 56, !dbg !17
  %26 = shl nsw i32 %.decomposed, 1, !dbg !18
  %27 = shl nsw i32 %21, 1, !dbg !18
  %28 = shl nsw i32 %22, 1, !dbg !18
  %29 = shl nsw i32 %23, 1, !dbg !18
  %30 = shl i32 %19, 6, !dbg !19
  %31 = add i32 %26, %30, !dbg !20
  %32 = add i32 %30, %27, !dbg !20
  %33 = add i32 %30, %28, !dbg !20
  %34 = add i32 %30, %29, !dbg !20
  %35 = sext i32 %31 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !21
  %37 = sext i32 %32 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !21
  %39 = sext i32 %33 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = sext i32 %34 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !22
  %47 = or disjoint i32 %31, 1, !dbg !23
  %48 = or disjoint i32 %32, 1, !dbg !23
  %49 = or disjoint i32 %33, 1, !dbg !23
  %50 = or disjoint i32 %34, 1, !dbg !23
  %51 = sext i32 %47 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = sext i32 %48 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = sext i32 %49 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = sext i32 %50 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !25
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !25
  %63 = or disjoint i32 %30, 32, !dbg !26
  %64 = add i32 %63, %26, !dbg !27
  %65 = add i32 %63, %27, !dbg !27
  %66 = add i32 %63, %28, !dbg !27
  %67 = add i32 %63, %29, !dbg !27
  %68 = sext i32 %64 to i64, !dbg !28
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !28
  %70 = sext i32 %65 to i64, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !28
  %72 = sext i32 %66 to i64, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !28
  %74 = sext i32 %67 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !29
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !29
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !29
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !29
  %80 = or disjoint i32 %30, 33, !dbg !30
  %81 = add i32 %80, %26, !dbg !31
  %82 = add i32 %80, %27, !dbg !31
  %83 = add i32 %80, %28, !dbg !31
  %84 = add i32 %80, %29, !dbg !31
  %85 = sext i32 %81 to i64, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !32
  %87 = sext i32 %82 to i64, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !32
  %89 = sext i32 %83 to i64, !dbg !32
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !32
  %91 = sext i32 %84 to i64, !dbg !32
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !32
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !33
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !33
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !33
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !33
  %97 = sext i32 %25 to i64, !dbg !34
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !34
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !35
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !35
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !35
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !35
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !36
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !37
  %105 = bitcast i32 %104 to float, !dbg !37
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !37
  %107 = bitcast i32 %106 to float, !dbg !37
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !37
  %109 = bitcast i32 %108 to float, !dbg !37
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #3, !dbg !37
  %111 = bitcast i32 %110 to float, !dbg !37
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %97, !dbg !38
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !39
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !39
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !39
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !39
  %117 = getelementptr float, ptr addrspace(1) %4, i64 %97, !dbg !40
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !41
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !41
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !41
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #3, !dbg !41
  %122 = fadd float %105, 0x3EE4F8B580000000, !dbg !42
  %123 = fadd float %107, 0x3EE4F8B580000000, !dbg !42
  %124 = fadd float %109, 0x3EE4F8B580000000, !dbg !42
  %125 = fadd float %111, 0x3EE4F8B580000000, !dbg !42
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %126, 0, !dbg !43
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %127, 0, !dbg !43
  br i1 %.not.i, label %133, label %128, !dbg !43

128:                                              ; preds = %9
  br i1 %.not1.i, label %131, label %129, !dbg !43

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

133:                                              ; preds = %9
  br i1 %.not1.i, label %136, label %134, !dbg !43

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %129, %131, %134, %136
  %.0.i = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !43
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i1 = icmp eq i32 %138, 0, !dbg !43
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i4 = icmp eq i32 %139, 0, !dbg !43
  br i1 %.not.i1, label %145, label %140, !dbg !43

140:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %143, label %141, !dbg !43

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

145:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %148, label %146, !dbg !43

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

__nv_sqrtf.exit5:                                 ; preds = %141, %143, %146, %148
  %.0.i3 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !43
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i6 = icmp eq i32 %150, 0, !dbg !43
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i9 = icmp eq i32 %151, 0, !dbg !43
  br i1 %.not.i6, label %157, label %152, !dbg !43

152:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %155, label %153, !dbg !43

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

157:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %160, label %158, !dbg !43

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

__nv_sqrtf.exit10:                                ; preds = %153, %155, %158, %160
  %.0.i8 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !43
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i11 = icmp eq i32 %162, 0, !dbg !43
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i14 = icmp eq i32 %163, 0, !dbg !43
  br i1 %.not.i11, label %169, label %164, !dbg !43

164:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %167, label %165, !dbg !43

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

169:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %172, label %170, !dbg !43

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

__nv_sqrtf.exit15:                                ; preds = %165, %167, %170, %172
  %.0.i13 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !43
  %174 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !25
  %175 = insertelement <4 x i32> %174, i32 %60, i64 1, !dbg !25
  %176 = insertelement <4 x i32> %175, i32 %61, i64 2, !dbg !25
  %177 = insertelement <4 x i32> %176, i32 %62, i64 3, !dbg !25
  %178 = bitcast <4 x i32> %177 to <4 x float>, !dbg !25
  %179 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !22
  %180 = insertelement <4 x i32> %179, i32 %44, i64 1, !dbg !22
  %181 = insertelement <4 x i32> %180, i32 %45, i64 2, !dbg !22
  %182 = insertelement <4 x i32> %181, i32 %46, i64 3, !dbg !22
  %183 = bitcast <4 x i32> %182 to <4 x float>, !dbg !22
  %184 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !29
  %185 = insertelement <4 x i32> %184, i32 %77, i64 1, !dbg !29
  %186 = insertelement <4 x i32> %185, i32 %78, i64 2, !dbg !29
  %187 = insertelement <4 x i32> %186, i32 %79, i64 3, !dbg !29
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !29
  %189 = insertelement <4 x i32> poison, i32 %93, i64 0, !dbg !33
  %190 = insertelement <4 x i32> %189, i32 %94, i64 1, !dbg !33
  %191 = insertelement <4 x i32> %190, i32 %95, i64 2, !dbg !33
  %192 = insertelement <4 x i32> %191, i32 %96, i64 3, !dbg !33
  %193 = bitcast <4 x i32> %192 to <4 x float>, !dbg !33
  %194 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !35
  %195 = insertelement <4 x i32> %194, i32 %100, i64 1, !dbg !35
  %196 = insertelement <4 x i32> %195, i32 %101, i64 2, !dbg !35
  %197 = insertelement <4 x i32> %196, i32 %102, i64 3, !dbg !35
  %198 = bitcast <4 x i32> %197 to <4 x float>, !dbg !35
  %199 = fcmp ogt <4 x float> %178, %183, !dbg !44
  %200 = fcmp uno <4 x float> %178, zeroinitializer, !dbg !45
  %201 = or <4 x i1> %199, %200, !dbg !49
  %.v = select <4 x i1> %201, <4 x i32> %177, <4 x i32> %182, !dbg !50
  %202 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %203 = fcmp olt <4 x float> %202, %188, !dbg !51
  %204 = fcmp uno <4 x float> %188, zeroinitializer, !dbg !52
  %205 = or <4 x i1> %203, %204, !dbg !54
  %.v16 = select <4 x i1> %205, <4 x i32> %187, <4 x i32> %.v, !dbg !55
  %206 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !55
  %207 = fcmp olt <4 x float> %206, %193, !dbg !56
  %208 = zext <4 x i1> %199 to <4 x i8>, !dbg !57
  %209 = select <4 x i1> %203, <4 x i8> splat (i8 2), <4 x i8> %208, !dbg !58
  %210 = select <4 x i1> %207, <4 x i8> splat (i8 3), <4 x i8> %209, !dbg !59
  %211 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !41
  %212 = insertelement <4 x i32> %211, i32 %119, i64 1, !dbg !41
  %213 = insertelement <4 x i32> %212, i32 %120, i64 2, !dbg !41
  %214 = insertelement <4 x i32> %213, i32 %121, i64 3, !dbg !41
  %215 = bitcast <4 x i32> %214 to <4 x float>, !dbg !41
  %216 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !39
  %217 = insertelement <4 x i32> %216, i32 %114, i64 1, !dbg !39
  %218 = insertelement <4 x i32> %217, i32 %115, i64 2, !dbg !39
  %219 = insertelement <4 x i32> %218, i32 %116, i64 3, !dbg !39
  %220 = bitcast <4 x i32> %219 to <4 x float>, !dbg !39
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !60
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !60
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !60
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !60
  %225 = fcmp uno <4 x float> %193, zeroinitializer, !dbg !61
  %226 = or <4 x i1> %207, %225, !dbg !63
  %.v17 = select <4 x i1> %226, <4 x i32> %192, <4 x i32> %.v16, !dbg !64
  %227 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !64
  %228 = fsub <4 x float> %227, %198, !dbg !65
  %229 = insertelement <4 x float> poison, float %221, i64 0, !dbg !66
  %230 = insertelement <4 x float> %229, float %222, i64 1, !dbg !66
  %231 = insertelement <4 x float> %230, float %223, i64 2, !dbg !66
  %232 = insertelement <4 x float> %231, float %224, i64 3, !dbg !66
  %233 = fmul <4 x float> %228, %232, !dbg !66
  %234 = fmul <4 x float> %233, %220, !dbg !67
  %235 = fadd <4 x float> %234, %215, !dbg !68
  %236 = fcmp olt <4 x float> %235, zeroinitializer, !dbg !69
  %237 = extractelement <4 x i1> %236, i64 0, !dbg !71
  %238 = extractelement <4 x i1> %236, i64 1, !dbg !71
  %239 = extractelement <4 x i1> %236, i64 2, !dbg !71
  %240 = extractelement <4 x i1> %236, i64 3, !dbg !71
  %241 = sext i32 %15 to i64, !dbg !72
  %242 = getelementptr i8, ptr addrspace(1) %5, i64 %241, !dbg !72
  %243 = bitcast <4 x i8> %210 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %243, ptr addrspace(1) %242, i1 true) #3, !dbg !73
  %244 = getelementptr float, ptr addrspace(1) %6, i64 %241, !dbg !74
  %bc = bitcast <4 x float> %235 to <4 x i32>, !dbg !75
  %245 = extractelement <4 x i32> %bc, i64 0, !dbg !75
  %246 = select i1 %237, i32 0, i32 %245, !dbg !71
  %bc18 = bitcast <4 x float> %235 to <4 x i32>, !dbg !75
  %247 = extractelement <4 x i32> %bc18, i64 1, !dbg !75
  %248 = select i1 %238, i32 0, i32 %247, !dbg !71
  %bc19 = bitcast <4 x float> %235 to <4 x i32>, !dbg !75
  %249 = extractelement <4 x i32> %bc19, i64 2, !dbg !75
  %250 = select i1 %239, i32 0, i32 %249, !dbg !71
  %bc20 = bitcast <4 x float> %235 to <4 x i32>, !dbg !75
  %251 = extractelement <4 x i32> %bc20, i64 3, !dbg !75
  %252 = select i1 %240, i32 0, i32 %251, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %248, i32 %250, i32 %252, ptr addrspace(1) %244, i1 true) #3, !dbg !75
  %253 = getelementptr float, ptr addrspace(1) %7, i64 %241, !dbg !76
  %bc21 = bitcast <4 x float> %228 to <4 x i32>, !dbg !77
  %254 = extractelement <4 x i32> %bc21, i64 0, !dbg !77
  %bc22 = bitcast <4 x float> %228 to <4 x i32>, !dbg !77
  %255 = extractelement <4 x i32> %bc22, i64 1, !dbg !77
  %bc23 = bitcast <4 x float> %228 to <4 x i32>, !dbg !77
  %256 = extractelement <4 x i32> %bc23, i64 2, !dbg !77
  %bc24 = bitcast <4 x float> %228 to <4 x i32>, !dbg !77
  %257 = extractelement <4 x i32> %bc24, i64 3, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %254, i32 %255, i32 %256, i32 %257, ptr addrspace(1) %253, i1 true) #3, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck5q2a4rctkicuukmjpmg2b2kfoy6othilqcbbaus5nuckwxrgke.py", directory: "inductor_cache/k5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 28, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 40, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 45, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 49, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 30, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 50, scope: !7)
!30 = !DILocation(line: 31, column: 36, scope: !7)
!31 = !DILocation(line: 31, column: 43, scope: !7)
!32 = !DILocation(line: 31, column: 31, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 32, column: 31, scope: !7)
!35 = !DILocation(line: 32, column: 36, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 36, scope: !7)
!38 = !DILocation(line: 34, column: 31, scope: !7)
!39 = !DILocation(line: 34, column: 36, scope: !7)
!40 = !DILocation(line: 35, column: 31, scope: !7)
!41 = !DILocation(line: 35, column: 36, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 27, scope: !7)
!44 = !DILocation(line: 36, column: 18, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 40, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 41, column: 18, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !53)
!53 = !DILocation(line: 44, column: 41, scope: !7)
!54 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !53)
!55 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !53)
!56 = !DILocation(line: 45, column: 20, scope: !7)
!57 = !DILocation(line: 39, column: 32, scope: !7)
!58 = !DILocation(line: 43, column: 33, scope: !7)
!59 = !DILocation(line: 47, column: 35, scope: !7)
!60 = !DILocation(line: 54, column: 20, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !62)
!62 = !DILocation(line: 48, column: 42, scope: !7)
!63 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !62)
!64 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !62)
!65 = !DILocation(line: 49, column: 20, scope: !7)
!66 = !DILocation(line: 57, column: 20, scope: !7)
!67 = !DILocation(line: 58, column: 20, scope: !7)
!68 = !DILocation(line: 59, column: 20, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !70)
!70 = !DILocation(line: 61, column: 42, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !70)
!72 = !DILocation(line: 62, column: 25, scope: !7)
!73 = !DILocation(line: 62, column: 37, scope: !7)
!74 = !DILocation(line: 63, column: 25, scope: !7)
!75 = !DILocation(line: 63, column: 37, scope: !7)
!76 = !DILocation(line: 64, column: 25, scope: !7)
!77 = !DILocation(line: 64, column: 37, scope: !7)
!78 = !DILocation(line: 64, column: 4, scope: !7)
