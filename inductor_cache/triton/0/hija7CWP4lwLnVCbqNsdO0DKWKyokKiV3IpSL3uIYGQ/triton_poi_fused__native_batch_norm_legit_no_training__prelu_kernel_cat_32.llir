; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = and i32 %17, 127, !dbg !12
  %19 = or disjoint i32 %18, 128, !dbg !12
  %20 = or disjoint i32 %16, %18, !dbg !13
  %21 = or disjoint i32 %16, %19, !dbg !13
  %22 = icmp slt i32 %20, 256, !dbg !14
  %23 = icmp slt i32 %21, 256, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 1, !dbg !16
  %26 = icmp slt i32 %25, 256, !dbg !17
  %27 = sdiv i32 %20, 64, !dbg !18
  %28 = sdiv i32 %21, 64, !dbg !18
  %29 = sext i32 %25 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !19
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %26) #4, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %26) #4, !dbg !22
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %36 = bitcast i32 %34 to float, !dbg !22
  %37 = bitcast i32 %35 to float, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !23
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %26) #4, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !25
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %26) #4, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !27
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %26) #4, !dbg !28
  %44 = icmp slt i32 %25, 128, !dbg !29
  %45 = shl i32 %20, 7, !dbg !30
  %46 = shl i32 %21, 7, !dbg !30
  %47 = add i32 %45, %25, !dbg !31
  %48 = add i32 %46, %25, !dbg !31
  %49 = sext i32 %47 to i64, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !32
  %51 = sext i32 %48 to i64, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !32
  %53 = and i1 %44, %22, !dbg !33
  %54 = and i1 %44, %23, !dbg !33
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #4, !dbg !34
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #4, !dbg !34
  %57 = add i32 %25, -128, !dbg !35
  %58 = add i32 %45, %57, !dbg !36
  %59 = add i32 %46, %57, !dbg !36
  %60 = sext i32 %58 to i64, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !37
  %62 = sext i32 %59 to i64, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !37
  %64 = and i32 %24, 2147483584, !dbg !38
  %65 = icmp eq i32 %64, 64, !dbg !38
  %66 = and i1 %65, %22, !dbg !39
  %67 = and i1 %65, %23, !dbg !39
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #4, !dbg !40
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #4, !dbg !40
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !41
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !41
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #4, !dbg !42
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %71, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #4, !dbg !42
  %74 = sext i32 %57 to i64, !dbg !43
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !43
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #4, !dbg !44
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #4, !dbg !44
  %78 = shl i32 %27, 7, !dbg !45
  %79 = shl i32 %28, 7, !dbg !45
  %80 = add i32 %78, %57, !dbg !46
  %81 = add i32 %79, %57, !dbg !46
  %82 = sext i32 %80 to i64, !dbg !47
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %82, !dbg !47
  %84 = sext i32 %81 to i64, !dbg !47
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %84, !dbg !47
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %83, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #4, !dbg !48
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !48
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !48
  %89 = bitcast i32 %87 to float, !dbg !48
  %90 = bitcast i32 %88 to float, !dbg !48
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %85, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #4, !dbg !48
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !48
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !48
  %94 = bitcast i32 %92 to float, !dbg !48
  %95 = bitcast i32 %93 to float, !dbg !48
  %96 = fsub float 0.000000e+00, %89, !dbg !49
  %97 = fsub float 0.000000e+00, %90, !dbg !49
  %98 = fsub float 0.000000e+00, %94, !dbg !49
  %99 = fsub float 0.000000e+00, %95, !dbg !49
  %100 = fmul float %96, 0x3FF7154760000000, !dbg !53
  %101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %100) #4, !dbg !53
  %102 = fmul float %97, 0x3FF7154760000000, !dbg !53
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #4, !dbg !53
  %104 = fmul float %98, 0x3FF7154760000000, !dbg !53
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #4, !dbg !53
  %106 = fmul float %99, 0x3FF7154760000000, !dbg !53
  %107 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %106) #4, !dbg !53
  %108 = fadd float %101, 1.000000e+00, !dbg !54
  %109 = fadd float %103, 1.000000e+00, !dbg !54
  %110 = fadd float %105, 1.000000e+00, !dbg !54
  %111 = fadd float %107, 1.000000e+00, !dbg !54
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %108) #4, !dbg !55
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %109) #4, !dbg !55
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %110) #4, !dbg !55
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %111) #4, !dbg !55
  %116 = fadd float %36, 0x3EE4F8B580000000, !dbg !56
  %117 = fadd float %37, 0x3EE4F8B580000000, !dbg !56
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not.i = icmp eq i32 %118, 0, !dbg !57
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !57
  %.not1.i = icmp eq i32 %119, 0, !dbg !57
  br i1 %.not.i, label %125, label %120, !dbg !57

120:                                              ; preds = %14
  br i1 %.not1.i, label %123, label %121, !dbg !57

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #4, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #4, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

125:                                              ; preds = %14
  br i1 %.not1.i, label %128, label %126, !dbg !57

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #4, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #4, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

__nv_sqrtf.exit:                                  ; preds = %121, %123, %126, %128
  %.0.i = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !57
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !57
  %.not.i7 = icmp eq i32 %130, 0, !dbg !57
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !57
  %.not1.i10 = icmp eq i32 %131, 0, !dbg !57
  br i1 %.not.i7, label %137, label %132, !dbg !57

132:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i10, label %135, label %133, !dbg !57

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #4, !dbg !57
  br label %__nv_sqrtf.exit11, !dbg !57

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #4, !dbg !57
  br label %__nv_sqrtf.exit11, !dbg !57

137:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i10, label %140, label %138, !dbg !57

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #4, !dbg !57
  br label %__nv_sqrtf.exit11, !dbg !57

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #4, !dbg !57
  br label %__nv_sqrtf.exit11, !dbg !57

__nv_sqrtf.exit11:                                ; preds = %133, %135, %138, %140
  %.0.i9 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !57
  %142 = extractvalue { i32, i32 } %56, 1, !dbg !34
  %143 = extractvalue { i32, i32 } %73, 1, !dbg !42
  %144 = extractvalue { i32, i32 } %77, 1, !dbg !44
  %145 = extractvalue { i32, i32 } %69, 1, !dbg !40
  %146 = extractvalue { i32, i32 } %31, 1, !dbg !20
  %147 = extractvalue { i32, i32 } %56, 0, !dbg !34
  %148 = extractvalue { i32, i32 } %73, 0, !dbg !42
  %149 = extractvalue { i32, i32 } %77, 0, !dbg !44
  %150 = extractvalue { i32, i32 } %69, 0, !dbg !40
  %151 = extractvalue { i32, i32 } %31, 0, !dbg !20
  %152 = extractvalue { i32, i32 } %55, 1, !dbg !34
  %153 = extractvalue { i32, i32 } %72, 1, !dbg !42
  %154 = extractvalue { i32, i32 } %76, 1, !dbg !44
  %155 = extractvalue { i32, i32 } %68, 1, !dbg !40
  %156 = extractvalue { i32, i32 } %55, 0, !dbg !34
  %157 = extractvalue { i32, i32 } %72, 0, !dbg !42
  %158 = extractvalue { i32, i32 } %76, 0, !dbg !44
  %159 = extractvalue { i32, i32 } %68, 0, !dbg !40
  %160 = extractvalue { i32, i32 } %43, 1, !dbg !28
  %161 = bitcast i32 %160 to float, !dbg !28
  %162 = extractvalue { i32, i32 } %43, 0, !dbg !28
  %163 = bitcast i32 %162 to float, !dbg !28
  %164 = extractvalue { i32, i32 } %41, 1, !dbg !26
  %165 = extractvalue { i32, i32 } %41, 0, !dbg !26
  %166 = extractvalue { i32, i32 } %39, 1, !dbg !24
  %167 = extractvalue { i32, i32 } %39, 0, !dbg !24
  %168 = shl i32 %17, 2, !dbg !12
  %169 = and i32 %168, 252, !dbg !12
  %170 = or disjoint i32 %16, %169, !dbg !13
  %.frozen = freeze i32 %170, !dbg !18
  %171 = sdiv i32 %.frozen, 64, !dbg !18
  %172 = mul i32 %171, 64, !dbg !58
  %.decomposed = sub i32 %.frozen, %172, !dbg !58
  %173 = lshr i32 %17, 6, !dbg !59
  %.lobit = and i32 %173, 1, !dbg !59
  %174 = or disjoint i32 %25, %.lobit, !dbg !60
  %175 = icmp slt i32 %174, 256, !dbg !17
  %176 = icmp slt i32 %170, 256, !dbg !14
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !61
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #4, !dbg !61
  %179 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !20
  %180 = insertelement <2 x i32> %179, i32 %151, i64 1, !dbg !20
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !20
  %182 = shufflevector <2 x float> %181, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !20
  %183 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !34
  %184 = insertelement <4 x i32> %183, i32 %147, i64 1, !dbg !34
  %185 = insertelement <4 x i32> %184, i32 %152, i64 2, !dbg !34
  %186 = insertelement <4 x i32> %185, i32 %156, i64 3, !dbg !34
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !34
  %188 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !42
  %189 = insertelement <4 x i32> %188, i32 %148, i64 1, !dbg !42
  %190 = insertelement <4 x i32> %189, i32 %153, i64 2, !dbg !42
  %191 = insertelement <4 x i32> %190, i32 %157, i64 3, !dbg !42
  %192 = bitcast <4 x i32> %191 to <4 x float>, !dbg !42
  %193 = fcmp ogt <4 x float> %192, zeroinitializer, !dbg !62
  %194 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !44
  %195 = insertelement <4 x i32> %194, i32 %149, i64 1, !dbg !44
  %196 = insertelement <4 x i32> %195, i32 %154, i64 2, !dbg !44
  %197 = insertelement <4 x i32> %196, i32 %158, i64 3, !dbg !44
  %198 = bitcast <4 x i32> %197 to <4 x float>, !dbg !44
  %199 = fmul <4 x float> %192, %198, !dbg !63
  %200 = select <4 x i1> %193, <4 x float> %192, <4 x float> %199, !dbg !64
  %201 = insertelement <4 x float> poison, float %115, i64 0, !dbg !65
  %202 = insertelement <4 x float> %201, float %114, i64 1, !dbg !65
  %203 = insertelement <4 x float> %202, float %113, i64 2, !dbg !65
  %204 = insertelement <4 x float> %203, float %112, i64 3, !dbg !65
  %205 = fmul <4 x float> %200, %204, !dbg !65
  %206 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !40
  %207 = insertelement <4 x i32> %206, i32 %150, i64 1, !dbg !40
  %208 = insertelement <4 x i32> %207, i32 %155, i64 2, !dbg !40
  %209 = insertelement <4 x i32> %208, i32 %159, i64 3, !dbg !40
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !40
  %211 = fadd <4 x float> %205, %210, !dbg !66
  %212 = insertelement <4 x i1> poison, i1 %44, i64 0, !dbg !67
  %213 = shufflevector <4 x i1> %212, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !67
  %214 = select <4 x i1> %213, <4 x float> %187, <4 x float> %211, !dbg !67
  %215 = fsub <4 x float> %214, %182, !dbg !68
  %216 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !26
  %217 = insertelement <2 x i32> %216, i32 %165, i64 1, !dbg !26
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !26
  %219 = shufflevector <2 x float> %218, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !26
  %220 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !24
  %221 = insertelement <2 x i32> %220, i32 %167, i64 1, !dbg !24
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !24
  %223 = shufflevector <2 x float> %222, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !24
  %224 = insertelement <4 x float> poison, float %178, i64 0, !dbg !69
  %225 = insertelement <4 x float> %224, float %177, i64 1, !dbg !69
  %226 = shufflevector <4 x float> %225, <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !69
  %227 = fmul <4 x float> %215, %226, !dbg !69
  %228 = fmul <4 x float> %227, %223, !dbg !70
  %229 = fadd <4 x float> %228, %219, !dbg !71
  %230 = fcmp ogt <4 x float> %229, zeroinitializer, !dbg !72
  %231 = extractelement <4 x float> %229, i64 3, !dbg !73
  %232 = fmul float %231, %163, !dbg !74
  %233 = extractelement <4 x float> %229, i64 2, !dbg !73
  %234 = fmul float %233, %161, !dbg !74
  %235 = extractelement <4 x float> %229, i64 1, !dbg !73
  %236 = fmul float %235, %163, !dbg !74
  %237 = extractelement <4 x float> %229, i64 0, !dbg !73
  %238 = fmul float %237, %161, !dbg !74
  %239 = extractelement <4 x i1> %230, i64 3, !dbg !73
  %240 = select i1 %239, float %231, float %232, !dbg !73
  %241 = extractelement <4 x i1> %230, i64 2, !dbg !73
  %242 = select i1 %241, float %233, float %234, !dbg !73
  %243 = extractelement <4 x i1> %230, i64 1, !dbg !73
  %244 = select i1 %243, float %235, float %236, !dbg !73
  %245 = extractelement <4 x i1> %230, i64 0, !dbg !73
  %246 = select i1 %245, float %237, float %238, !dbg !73
  %247 = shl i32 %20, 8, !dbg !75
  %248 = shl i32 %21, 8, !dbg !75
  %249 = add i32 %247, %25, !dbg !76
  %250 = add i32 %248, %25, !dbg !76
  %251 = sext i32 %249 to i64, !dbg !77
  %252 = getelementptr float, ptr addrspace(1) %10, i64 %251, !dbg !77
  %253 = sext i32 %250 to i64, !dbg !77
  %254 = getelementptr float, ptr addrspace(1) %10, i64 %253, !dbg !77
  %255 = and i1 %26, %22, !dbg !78
  %256 = and i1 %26, %23, !dbg !78
  %257 = and i1 %176, %175, !dbg !78
  %bc = bitcast <4 x float> %214 to <4 x i32>, !dbg !79
  %258 = extractelement <4 x i32> %bc, i64 3, !dbg !79
  %bc12 = bitcast <4 x float> %214 to <4 x i32>, !dbg !79
  %259 = extractelement <4 x i32> %bc12, i64 2, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %258, i32 %259, ptr addrspace(1) %252, i1 %255) #4, !dbg !79
  %bc13 = bitcast <4 x float> %214 to <4 x i32>, !dbg !79
  %260 = extractelement <4 x i32> %bc13, i64 1, !dbg !79
  %bc14 = bitcast <4 x float> %214 to <4 x i32>, !dbg !79
  %261 = extractelement <4 x i32> %bc14, i64 0, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %260, i32 %261, ptr addrspace(1) %254, i1 %256) #4, !dbg !79
  %262 = shl i32 %174, 6, !dbg !80
  %263 = add i32 %262, %.decomposed, !dbg !81
  %264 = shl i32 %171, 14, !dbg !82
  %265 = add i32 %263, %264, !dbg !83
  %266 = sext i32 %265 to i64, !dbg !84
  %267 = getelementptr float, ptr addrspace(1) %11, i64 %266, !dbg !84
  %268 = and i32 %168, 508, !dbg !85
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !85
  %270 = bitcast float %240 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #4, !dbg !85
  %271 = getelementptr inbounds i8, ptr addrspace(3) %269, i32 1040, !dbg !85
  %272 = bitcast float %242 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !85
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !85
  %274 = bitcast float %244 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !85
  %275 = getelementptr inbounds i8, ptr addrspace(3) %269, i32 1552, !dbg !85
  %276 = bitcast float %246 to <1 x i32>, !dbg !85
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %277 = lshr i32 %168, 6, !dbg !85
  %278 = and i32 %277, 4, !dbg !85
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !85
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %268, !dbg !85
  %.extract = load i32, ptr addrspace(3) %280, align 16, !dbg !85
  %281 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 4, !dbg !85
  %.extract4 = load i32, ptr addrspace(3) %281, align 4, !dbg !85
  %282 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 8, !dbg !85
  %.extract5 = load i32, ptr addrspace(3) %282, align 8, !dbg !85
  %283 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 12, !dbg !85
  %.extract6 = load i32, ptr addrspace(3) %283, align 4, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %267, i1 %257) #4, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6snqral2cga6kcvwcun52ivdbwdiym73i3wjdoctbxvkexq4hdy.py", directory: "inductor_cache/6s")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 31, scope: !7)
!20 = !DILocation(line: 32, column: 36, scope: !7)
!21 = !DILocation(line: 33, column: 31, scope: !7)
!22 = !DILocation(line: 33, column: 36, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 41, column: 18, scope: !7)
!30 = !DILocation(line: 42, column: 34, scope: !7)
!31 = !DILocation(line: 42, column: 40, scope: !7)
!32 = !DILocation(line: 42, column: 30, scope: !7)
!33 = !DILocation(line: 42, column: 61, scope: !7)
!34 = !DILocation(line: 42, column: 46, scope: !7)
!35 = !DILocation(line: 46, column: 49, scope: !7)
!36 = !DILocation(line: 46, column: 40, scope: !7)
!37 = !DILocation(line: 46, column: 30, scope: !7)
!38 = !DILocation(line: 46, column: 62, scope: !7)
!39 = !DILocation(line: 46, column: 70, scope: !7)
!40 = !DILocation(line: 46, column: 55, scope: !7)
!41 = !DILocation(line: 47, column: 31, scope: !7)
!42 = !DILocation(line: 47, column: 56, scope: !7)
!43 = !DILocation(line: 50, column: 31, scope: !7)
!44 = !DILocation(line: 50, column: 80, scope: !7)
!45 = !DILocation(line: 53, column: 35, scope: !7)
!46 = !DILocation(line: 53, column: 41, scope: !7)
!47 = !DILocation(line: 53, column: 31, scope: !7)
!48 = !DILocation(line: 53, column: 56, scope: !7)
!49 = !DILocation(line: 47, column: 30, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!52 = !DILocation(line: 54, column: 23, scope: !7)
!53 = !DILocation(line: 47, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 47, column: 20, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 47, column: 16, scope: !50, inlinedAt: !52)
!56 = !DILocation(line: 62, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 27, scope: !7)
!58 = !DILocation(line: 31, column: 19, scope: !7)
!59 = !DILocation(line: 26, column: 44, scope: !7)
!60 = !DILocation(line: 26, column: 23, scope: !7)
!61 = !DILocation(line: 65, column: 20, scope: !7)
!62 = !DILocation(line: 49, column: 20, scope: !7)
!63 = !DILocation(line: 51, column: 20, scope: !7)
!64 = !DILocation(line: 52, column: 35, scope: !7)
!65 = !DILocation(line: 55, column: 20, scope: !7)
!66 = !DILocation(line: 56, column: 19, scope: !7)
!67 = !DILocation(line: 59, column: 33, scope: !7)
!68 = !DILocation(line: 60, column: 20, scope: !7)
!69 = !DILocation(line: 68, column: 20, scope: !7)
!70 = !DILocation(line: 69, column: 20, scope: !7)
!71 = !DILocation(line: 70, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 74, column: 35, scope: !7)
!74 = !DILocation(line: 73, column: 20, scope: !7)
!75 = !DILocation(line: 75, column: 34, scope: !7)
!76 = !DILocation(line: 75, column: 30, scope: !7)
!77 = !DILocation(line: 75, column: 25, scope: !7)
!78 = !DILocation(line: 75, column: 54, scope: !7)
!79 = !DILocation(line: 75, column: 46, scope: !7)
!80 = !DILocation(line: 76, column: 33, scope: !7)
!81 = !DILocation(line: 76, column: 30, scope: !7)
!82 = !DILocation(line: 76, column: 44, scope: !7)
!83 = !DILocation(line: 76, column: 38, scope: !7)
!84 = !DILocation(line: 76, column: 25, scope: !7)
!85 = !DILocation(line: 76, column: 56, scope: !7)
!86 = !DILocation(line: 76, column: 4, scope: !7)
