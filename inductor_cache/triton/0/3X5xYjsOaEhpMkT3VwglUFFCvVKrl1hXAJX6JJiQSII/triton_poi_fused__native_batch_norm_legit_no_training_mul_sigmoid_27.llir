; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 512, !dbg !13
  %16 = or disjoint i32 %13, 514, !dbg !13
  %17 = icmp slt i32 %13, 93696, !dbg !14
  %18 = icmp slt i32 %15, 93696, !dbg !14
  %19 = srem i32 %13, 366, !dbg !15
  %20 = srem i32 %14, 366, !dbg !15
  %21 = srem i32 %15, 366, !dbg !15
  %22 = srem i32 %16, 366, !dbg !15
  %23 = sext i32 %13 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !16
  %25 = sext i32 %15 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %17) #3, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %18) #3, !dbg !17
  %29 = sext i32 %19 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !18
  %31 = sext i32 %20 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !18
  %33 = sext i32 %21 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !18
  %35 = sext i32 %22 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !18
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %17) #3, !dbg !19
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %17) #3, !dbg !19
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %18) #3, !dbg !19
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %18) #3, !dbg !19
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !20
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !21
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !21
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !21
  %48 = bitcast i32 %46 to float, !dbg !21
  %49 = bitcast i32 %47 to float, !dbg !21
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %17) #3, !dbg !21
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !21
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !21
  %53 = bitcast i32 %51 to float, !dbg !21
  %54 = bitcast i32 %52 to float, !dbg !21
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %18) #3, !dbg !21
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !21
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !21
  %58 = bitcast i32 %56 to float, !dbg !21
  %59 = bitcast i32 %57 to float, !dbg !21
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %18) #3, !dbg !21
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !21
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !21
  %63 = bitcast i32 %61 to float, !dbg !21
  %64 = bitcast i32 %62 to float, !dbg !21
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !22
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !22
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !22
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !22
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %17) #3, !dbg !23
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %17) #3, !dbg !23
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %18) #3, !dbg !23
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 %18) #3, !dbg !23
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !24
  %74 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !24
  %75 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !24
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 %17) #3, !dbg !25
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %17) #3, !dbg !25
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %18) #3, !dbg !25
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %18) #3, !dbg !25
  %81 = fadd float %48, 0x3EE4F8B580000000, !dbg !26
  %82 = fadd float %49, 0x3EE4F8B580000000, !dbg !26
  %83 = fadd float %53, 0x3EE4F8B580000000, !dbg !26
  %84 = fadd float %54, 0x3EE4F8B580000000, !dbg !26
  %85 = fadd float %58, 0x3EE4F8B580000000, !dbg !26
  %86 = fadd float %59, 0x3EE4F8B580000000, !dbg !26
  %87 = fadd float %63, 0x3EE4F8B580000000, !dbg !26
  %88 = fadd float %64, 0x3EE4F8B580000000, !dbg !26
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %89, 0, !dbg !27
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i = icmp eq i32 %90, 0, !dbg !27
  br i1 %.not.i, label %96, label %91, !dbg !27

91:                                               ; preds = %7
  br i1 %.not1.i, label %94, label %92, !dbg !27

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

96:                                               ; preds = %7
  br i1 %.not1.i, label %99, label %97, !dbg !27

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %92, %94, %97, %99
  %.0.i = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !27
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i1 = icmp eq i32 %101, 0, !dbg !27
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i4 = icmp eq i32 %102, 0, !dbg !27
  br i1 %.not.i1, label %108, label %103, !dbg !27

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %106, label %104, !dbg !27

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %111, label %109, !dbg !27

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %104, %106, %109, %111
  %.0.i3 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !27
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i6 = icmp eq i32 %113, 0, !dbg !27
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i9 = icmp eq i32 %114, 0, !dbg !27
  br i1 %.not.i6, label %120, label %115, !dbg !27

115:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %118, label %116, !dbg !27

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

120:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %123, label %121, !dbg !27

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %116, %118, %121, %123
  %.0.i8 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !27
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i11 = icmp eq i32 %125, 0, !dbg !27
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i14 = icmp eq i32 %126, 0, !dbg !27
  br i1 %.not.i11, label %132, label %127, !dbg !27

127:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %130, label %128, !dbg !27

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

132:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %135, label %133, !dbg !27

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %128, %130, %133, %135
  %.0.i13 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !27
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i16 = icmp eq i32 %137, 0, !dbg !27
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i19 = icmp eq i32 %138, 0, !dbg !27
  br i1 %.not.i16, label %144, label %139, !dbg !27

139:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %142, label %140, !dbg !27

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

144:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %147, label %145, !dbg !27

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

__nv_sqrtf.exit20:                                ; preds = %140, %142, %145, %147
  %.0.i18 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !27
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i21 = icmp eq i32 %149, 0, !dbg !27
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i24 = icmp eq i32 %150, 0, !dbg !27
  br i1 %.not.i21, label %156, label %151, !dbg !27

151:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %154, label %152, !dbg !27

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

156:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %159, label %157, !dbg !27

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

__nv_sqrtf.exit25:                                ; preds = %152, %154, %157, %159
  %.0.i23 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !27
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i26 = icmp eq i32 %161, 0, !dbg !27
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i29 = icmp eq i32 %162, 0, !dbg !27
  br i1 %.not.i26, label %168, label %163, !dbg !27

163:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %166, label %164, !dbg !27

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

168:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %171, label %169, !dbg !27

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

__nv_sqrtf.exit30:                                ; preds = %164, %166, %169, %171
  %.0.i28 = phi float [ %165, %164 ], [ %167, %166 ], [ %170, %169 ], [ %172, %171 ], !dbg !27
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i31 = icmp eq i32 %173, 0, !dbg !27
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i34 = icmp eq i32 %174, 0, !dbg !27
  br i1 %.not.i31, label %180, label %175, !dbg !27

175:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %178, label %176, !dbg !27

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

180:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %183, label %181, !dbg !27

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

__nv_sqrtf.exit35:                                ; preds = %176, %178, %181, %183
  %.0.i33 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !27
  %185 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %186 = bitcast i32 %185 to float, !dbg !17
  %187 = extractvalue { i32, i32 } %40, 1, !dbg !19
  %188 = bitcast i32 %187 to float, !dbg !19
  %189 = fsub float %186, %188, !dbg !28
  %190 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %191 = bitcast i32 %190 to float, !dbg !17
  %192 = extractvalue { i32, i32 } %40, 0, !dbg !19
  %193 = bitcast i32 %192 to float, !dbg !19
  %194 = fsub float %191, %193, !dbg !28
  %195 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %196 = bitcast i32 %195 to float, !dbg !17
  %197 = extractvalue { i32, i32 } %39, 1, !dbg !19
  %198 = bitcast i32 %197 to float, !dbg !19
  %199 = fsub float %196, %198, !dbg !28
  %200 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %201 = bitcast i32 %200 to float, !dbg !17
  %202 = extractvalue { i32, i32 } %39, 0, !dbg !19
  %203 = bitcast i32 %202 to float, !dbg !19
  %204 = fsub float %201, %203, !dbg !28
  %205 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %206 = bitcast i32 %205 to float, !dbg !17
  %207 = extractvalue { i32, i32 } %38, 1, !dbg !19
  %208 = bitcast i32 %207 to float, !dbg !19
  %209 = fsub float %206, %208, !dbg !28
  %210 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %211 = bitcast i32 %210 to float, !dbg !17
  %212 = extractvalue { i32, i32 } %38, 0, !dbg !19
  %213 = bitcast i32 %212 to float, !dbg !19
  %214 = fsub float %211, %213, !dbg !28
  %215 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %216 = bitcast i32 %215 to float, !dbg !17
  %217 = extractvalue { i32, i32 } %37, 1, !dbg !19
  %218 = bitcast i32 %217 to float, !dbg !19
  %219 = fsub float %216, %218, !dbg !28
  %220 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %221 = bitcast i32 %220 to float, !dbg !17
  %222 = extractvalue { i32, i32 } %37, 0, !dbg !19
  %223 = bitcast i32 %222 to float, !dbg !19
  %224 = fsub float %221, %223, !dbg !28
  %225 = extractvalue { i32, i32 } %80, 1, !dbg !25
  %226 = bitcast i32 %225 to float, !dbg !25
  %227 = extractvalue { i32, i32 } %80, 0, !dbg !25
  %228 = bitcast i32 %227 to float, !dbg !25
  %229 = extractvalue { i32, i32 } %79, 1, !dbg !25
  %230 = bitcast i32 %229 to float, !dbg !25
  %231 = extractvalue { i32, i32 } %79, 0, !dbg !25
  %232 = bitcast i32 %231 to float, !dbg !25
  %233 = extractvalue { i32, i32 } %78, 1, !dbg !25
  %234 = bitcast i32 %233 to float, !dbg !25
  %235 = extractvalue { i32, i32 } %78, 0, !dbg !25
  %236 = bitcast i32 %235 to float, !dbg !25
  %237 = extractvalue { i32, i32 } %77, 1, !dbg !25
  %238 = bitcast i32 %237 to float, !dbg !25
  %239 = extractvalue { i32, i32 } %77, 0, !dbg !25
  %240 = bitcast i32 %239 to float, !dbg !25
  %241 = extractvalue { i32, i32 } %72, 1, !dbg !23
  %242 = bitcast i32 %241 to float, !dbg !23
  %243 = extractvalue { i32, i32 } %72, 0, !dbg !23
  %244 = bitcast i32 %243 to float, !dbg !23
  %245 = extractvalue { i32, i32 } %71, 1, !dbg !23
  %246 = bitcast i32 %245 to float, !dbg !23
  %247 = extractvalue { i32, i32 } %71, 0, !dbg !23
  %248 = bitcast i32 %247 to float, !dbg !23
  %249 = extractvalue { i32, i32 } %70, 1, !dbg !23
  %250 = bitcast i32 %249 to float, !dbg !23
  %251 = extractvalue { i32, i32 } %70, 0, !dbg !23
  %252 = bitcast i32 %251 to float, !dbg !23
  %253 = extractvalue { i32, i32 } %69, 1, !dbg !23
  %254 = bitcast i32 %253 to float, !dbg !23
  %255 = extractvalue { i32, i32 } %69, 0, !dbg !23
  %256 = bitcast i32 %255 to float, !dbg !23
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !29
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !29
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !29
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !29
  %265 = fmul float %224, %257, !dbg !30
  %266 = fmul float %219, %258, !dbg !30
  %267 = fmul float %214, %259, !dbg !30
  %268 = fmul float %209, %260, !dbg !30
  %269 = fmul float %204, %261, !dbg !30
  %270 = fmul float %199, %262, !dbg !30
  %271 = fmul float %194, %263, !dbg !30
  %272 = fmul float %189, %264, !dbg !30
  %273 = fmul float %265, %256, !dbg !31
  %274 = fmul float %266, %254, !dbg !31
  %275 = fmul float %267, %252, !dbg !31
  %276 = fmul float %268, %250, !dbg !31
  %277 = fmul float %269, %248, !dbg !31
  %278 = fmul float %270, %246, !dbg !31
  %279 = fmul float %271, %244, !dbg !31
  %280 = fmul float %272, %242, !dbg !31
  %281 = fadd float %273, %240, !dbg !32
  %282 = fadd float %274, %238, !dbg !32
  %283 = fadd float %275, %236, !dbg !32
  %284 = fadd float %276, %234, !dbg !32
  %285 = fadd float %277, %232, !dbg !32
  %286 = fadd float %278, %230, !dbg !32
  %287 = fadd float %279, %228, !dbg !32
  %288 = fadd float %280, %226, !dbg !32
  %289 = fsub float 0.000000e+00, %281, !dbg !33
  %290 = fsub float 0.000000e+00, %282, !dbg !33
  %291 = fsub float 0.000000e+00, %283, !dbg !33
  %292 = fsub float 0.000000e+00, %284, !dbg !33
  %293 = fsub float 0.000000e+00, %285, !dbg !33
  %294 = fsub float 0.000000e+00, %286, !dbg !33
  %295 = fsub float 0.000000e+00, %287, !dbg !33
  %296 = fsub float 0.000000e+00, %288, !dbg !33
  %297 = fmul float %289, 0x3FF7154760000000, !dbg !37
  %298 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %297) #3, !dbg !37
  %299 = fmul float %290, 0x3FF7154760000000, !dbg !37
  %300 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %299) #3, !dbg !37
  %301 = fmul float %291, 0x3FF7154760000000, !dbg !37
  %302 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %301) #3, !dbg !37
  %303 = fmul float %292, 0x3FF7154760000000, !dbg !37
  %304 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %303) #3, !dbg !37
  %305 = fmul float %293, 0x3FF7154760000000, !dbg !37
  %306 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %305) #3, !dbg !37
  %307 = fmul float %294, 0x3FF7154760000000, !dbg !37
  %308 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %307) #3, !dbg !37
  %309 = fmul float %295, 0x3FF7154760000000, !dbg !37
  %310 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %309) #3, !dbg !37
  %311 = fmul float %296, 0x3FF7154760000000, !dbg !37
  %312 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %311) #3, !dbg !37
  %313 = fadd float %298, 1.000000e+00, !dbg !38
  %314 = fadd float %300, 1.000000e+00, !dbg !38
  %315 = fadd float %302, 1.000000e+00, !dbg !38
  %316 = fadd float %304, 1.000000e+00, !dbg !38
  %317 = fadd float %306, 1.000000e+00, !dbg !38
  %318 = fadd float %308, 1.000000e+00, !dbg !38
  %319 = fadd float %310, 1.000000e+00, !dbg !38
  %320 = fadd float %312, 1.000000e+00, !dbg !38
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %313) #3, !dbg !39
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %314) #3, !dbg !39
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %315) #3, !dbg !39
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %316) #3, !dbg !39
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %317) #3, !dbg !39
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %318) #3, !dbg !39
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %319) #3, !dbg !39
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %320) #3, !dbg !39
  %329 = fmul float %281, %321, !dbg !40
  %330 = fmul float %282, %322, !dbg !40
  %331 = fmul float %283, %323, !dbg !40
  %332 = fmul float %284, %324, !dbg !40
  %333 = fmul float %285, %325, !dbg !40
  %334 = fmul float %286, %326, !dbg !40
  %335 = fmul float %287, %327, !dbg !40
  %336 = fmul float %288, %328, !dbg !40
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !41
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !41
  %339 = bitcast float %329 to i32, !dbg !42
  %340 = bitcast float %330 to i32, !dbg !42
  %341 = bitcast float %331 to i32, !dbg !42
  %342 = bitcast float %332 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %339, i32 %340, i32 %341, i32 %342, ptr addrspace(1) %337, i1 %17) #3, !dbg !42
  %343 = bitcast float %333 to i32, !dbg !42
  %344 = bitcast float %334 to i32, !dbg !42
  %345 = bitcast float %335 to i32, !dbg !42
  %346 = bitcast float %336 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %343, i32 %344, i32 %345, i32 %346, ptr addrspace(1) %338, i1 %18) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxyl2x3bcigbk52gycmfn4dgnmsoj6uwq3gnzwuvqy5n5n2edynm.py", directory: "inductor_cache/xy")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_27", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 26, scope: !7)
!28 = !DILocation(line: 31, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 47, column: 30, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = !DILocation(line: 42, column: 23, scope: !7)
!37 = !DILocation(line: 47, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 47, column: 20, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 47, column: 16, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 44, column: 28, scope: !7)
!42 = !DILocation(line: 44, column: 40, scope: !7)
!43 = !DILocation(line: 44, column: 4, scope: !7)
