; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_convolution_div_mean_mul_pow_sqrt_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %12, 7, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = icmp slt i32 %16, 1024, !dbg !14
  %18 = shl i32 %12, 2, !dbg !15
  %19 = and i32 %18, 124, !dbg !15
  %20 = icmp samesign ult i32 %19, 96, !dbg !16
  %21 = mul i32 %16, 96, !dbg !17
  %22 = add i32 %21, %19, !dbg !18
  %23 = sext i32 %22 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = and i1 %20, %17, !dbg !20
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #5, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !21
  %31 = zext nneg i32 %19 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !26
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !27
  %42 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !21
  %43 = insertelement <2 x i32> %42, i32 %28, i64 1, !dbg !21
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !21
  %45 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !23
  %46 = insertelement <2 x i32> %45, i32 %35, i64 1, !dbg !23
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !23
  %48 = fadd <2 x float> %44, %47, !dbg !28
  %49 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %50 = insertelement <2 x i32> %49, i32 %29, i64 1, !dbg !21
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !21
  %52 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !23
  %53 = insertelement <2 x i32> %52, i32 %36, i64 1, !dbg !23
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !23
  %55 = fadd <2 x float> %51, %54, !dbg !28
  %56 = extractelement <2 x float> %48, i64 0, !dbg !29
  %57 = extractelement <2 x float> %48, i64 1, !dbg !29
  %58 = fadd float %56, %57, !dbg !29
  %59 = extractelement <2 x float> %55, i64 1, !dbg !29
  %60 = fadd float %59, %58, !dbg !29
  %61 = extractelement <2 x float> %55, i64 0, !dbg !29
  %62 = fadd float %61, %60, !dbg !29
  %63 = select i1 %25, float %62, float 0.000000e+00, !dbg !29
  %64 = bitcast float %63 to i32, !dbg !34
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 16, i32 31), !dbg !34
  %66 = bitcast i32 %65 to float, !dbg !34
  %67 = fadd float %63, %66, !dbg !29
  %68 = bitcast float %67 to i32, !dbg !34
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 8, i32 31), !dbg !34
  %70 = bitcast i32 %69 to float, !dbg !34
  %71 = fadd float %67, %70, !dbg !29
  %72 = bitcast float %71 to i32, !dbg !34
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 4, i32 31), !dbg !34
  %74 = bitcast i32 %73 to float, !dbg !34
  %75 = fadd float %71, %74, !dbg !29
  %76 = bitcast float %75 to i32, !dbg !34
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 2, i32 31), !dbg !34
  %78 = bitcast i32 %77 to float, !dbg !34
  %79 = fadd float %75, %78, !dbg !29
  %80 = bitcast float %79 to i32, !dbg !34
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !34
  %82 = bitcast i32 %81 to float, !dbg !34
  %83 = fadd float %79, %82, !dbg !29
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !35
  %85 = bitcast float %83 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !35
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !35
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 9.600000e+01) #5, !dbg !35
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 9.600000e+01) #5, !dbg !35
  %90 = fsub float %56, %89, !dbg !36
  %91 = fsub float %57, %89, !dbg !36
  %92 = fsub float %59, %89, !dbg !36
  %93 = fsub float %61, %89, !dbg !36
  %94 = fmul float %90, %90, !dbg !37
  %95 = fmul float %91, %91, !dbg !37
  %96 = fmul float %92, %92, !dbg !37
  %97 = fmul float %93, %93, !dbg !37
  %98 = fadd float %94, %95, !dbg !38
  %99 = fadd float %96, %98, !dbg !38
  %100 = fadd float %97, %99, !dbg !38
  %101 = select i1 %25, float %100, float 0.000000e+00, !dbg !38
  %102 = bitcast float %101 to i32, !dbg !40
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !40
  %104 = bitcast i32 %103 to float, !dbg !40
  %105 = fadd float %101, %104, !dbg !38
  %106 = bitcast float %105 to i32, !dbg !40
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !40
  %108 = bitcast i32 %107 to float, !dbg !40
  %109 = fadd float %105, %108, !dbg !38
  %110 = bitcast float %109 to i32, !dbg !40
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !40
  %112 = bitcast i32 %111 to float, !dbg !40
  %113 = fadd float %109, %112, !dbg !38
  %114 = bitcast float %113 to i32, !dbg !40
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !40
  %116 = bitcast i32 %115 to float, !dbg !40
  %117 = fadd float %113, %116, !dbg !38
  %118 = bitcast float %117 to i32, !dbg !40
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !40
  %120 = bitcast i32 %119 to float, !dbg !40
  %121 = fadd float %117, %120, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %122 = bitcast float %121 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %122, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %123 = load float, ptr addrspace(3) %86, align 4, !dbg !41
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float 9.600000e+01) #5, !dbg !42
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 9.600000e+01) #5, !dbg !42
  %126 = fadd float %124, 0x3EB0C6F7A0000000, !dbg !43
  %127 = fadd float %125, 0x3EB0C6F7A0000000, !dbg !43
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %128, 0, !dbg !41
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i = icmp eq i32 %129, 0, !dbg !41
  br i1 %.not.i, label %135, label %130, !dbg !41

130:                                              ; preds = %9
  br i1 %.not1.i, label %133, label %131, !dbg !41

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

135:                                              ; preds = %9
  br i1 %.not1.i, label %138, label %136, !dbg !41

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %131, %133, %136, %138
  %.0.i = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !41
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i16 = icmp eq i32 %146, 0, !dbg !41
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i19 = icmp eq i32 %147, 0, !dbg !41
  br i1 %.not.i16, label %153, label %148, !dbg !41

148:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %151, label %149, !dbg !41

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #5, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #5, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

153:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %156, label %154, !dbg !41

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #5, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #5, !dbg !41
  br label %__nv_sqrtf.exit20, !dbg !41

__nv_sqrtf.exit20:                                ; preds = %149, %151, %154, %156
  %.0.i18 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !41
  %158 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %159 = bitcast i32 %158 to float, !dbg !27
  %160 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %161 = bitcast i32 %160 to float, !dbg !27
  %162 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %163 = bitcast i32 %162 to float, !dbg !27
  %164 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %165 = bitcast i32 %164 to float, !dbg !27
  %166 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !25
  %167 = bitcast i32 %166 to float, !dbg !25
  %168 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !25
  %169 = bitcast i32 %168 to float, !dbg !25
  %170 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !25
  %171 = bitcast i32 %170 to float, !dbg !25
  %172 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !25
  %173 = bitcast i32 %172 to float, !dbg !25
  %174 = or disjoint i32 %11, %15, !dbg !13
  %175 = icmp slt i32 %174, 1024, !dbg !14
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %.0.i18) #5, !dbg !44
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %.0.i18) #5, !dbg !44
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %.0.i18) #5, !dbg !44
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %.0.i18) #5, !dbg !44
  %180 = fmul float %176, %173, !dbg !45
  %181 = fmul float %177, %171, !dbg !45
  %182 = fmul float %178, %169, !dbg !45
  %183 = fmul float %179, %167, !dbg !45
  %184 = fadd float %180, %165, !dbg !46
  %185 = fadd float %181, %163, !dbg !46
  %186 = fadd float %182, %161, !dbg !46
  %187 = fadd float %183, %159, !dbg !46
  %188 = bitcast float %56 to i32, !dbg !47
  %189 = bitcast float %57 to i32, !dbg !47
  %190 = bitcast float %59 to i32, !dbg !47
  %191 = bitcast float %61 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %189, i32 %190, i32 %191, ptr addrspace(1) %24, i1 %25) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %192 = sext i32 %174 to i64, !dbg !49
  %193 = getelementptr float, ptr addrspace(1) %1, i64 %192, !dbg !49
  %194 = and i32 %12, 248, !dbg !50
  %195 = icmp eq i32 %194, 0, !dbg !50
  %196 = bitcast float %88 to i32, !dbg !50
  %197 = and i1 %195, %175, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %193, i1 %197) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !52
  %199 = bitcast float %.0.i to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %198, i1 %197) #5, !dbg !53
  %200 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !54
  %201 = bitcast float %184 to i32, !dbg !55
  %202 = bitcast float %185 to i32, !dbg !55
  %203 = bitcast float %186 to i32, !dbg !55
  %204 = bitcast float %187 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %202, i32 %203, i32 %204, ptr addrspace(1) %200, i1 %25) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crrzwwb64e3al7r3mg2qszdo6usuq5oppr4blgn5egzl4f2dxmmo.py", directory: "inductor_cache/rr")
!4 = !{ptr @triton_per_fused_add_convolution_div_mean_mul_pow_sqrt_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_div_mean_mul_pow_sqrt_sub_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_div_mean_mul_pow_sqrt_sub_5", linkageName: "triton_per_fused_add_convolution_div_mean_mul_pow_sqrt_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 42, scope: !7)
!18 = !DILocation(line: 31, column: 39, scope: !7)
!19 = !DILocation(line: 31, column: 34, scope: !7)
!20 = !DILocation(line: 31, column: 55, scope: !7)
!21 = !DILocation(line: 31, column: 47, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 31, scope: !7)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 34, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 38, column: 24, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 19, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !39)
!39 = !DILocation(line: 45, column: 26, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 49, column: 27, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 19, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 53, column: 47, scope: !7)
!48 = !DILocation(line: 54, column: 4, scope: !7)
!49 = !DILocation(line: 55, column: 28, scope: !7)
!50 = !DILocation(line: 55, column: 39, scope: !7)
!51 = !DILocation(line: 56, column: 4, scope: !7)
!52 = !DILocation(line: 57, column: 28, scope: !7)
!53 = !DILocation(line: 57, column: 40, scope: !7)
!54 = !DILocation(line: 58, column: 25, scope: !7)
!55 = !DILocation(line: 58, column: 45, scope: !7)
!56 = !DILocation(line: 58, column: 4, scope: !7)
