; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 98816, !dbg !14
  %15 = sdiv i32 %13, 64, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %16 = sdiv i32 %.frozen, 24704, !dbg !16
  %17 = mul i32 %16, 24704, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = shl nsw i32 %16, 14, !dbg !18
  %19 = add nsw i32 %18, %srem.decomposed, !dbg !19
  %20 = sext i32 %19 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !20
  %22 = shl nsw i32 %16, 13, !dbg !21
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !22
  %24 = insertelement <2 x i32> %23, i32 %15, i64 1, !dbg !22
  %25 = srem <2 x i32> %24, <i32 64, i32 386>, !dbg !22
  %26 = extractelement <2 x i32> %25, i64 1, !dbg !23
  %27 = icmp slt i32 %26, 256, !dbg !24
  %28 = and i1 %14, %27, !dbg !25
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !26
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !26
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !26
  %32 = and i32 %26, -128, !dbg !27
  %33 = icmp eq i32 %32, 256, !dbg !27
  %34 = insertelement <2 x i32> <i32 poison, i32 -256>, i32 %22, i64 0, !dbg !28
  %35 = add nsw <2 x i32> %34, %25, !dbg !28
  %36 = extractelement <2 x i32> %35, i64 1, !dbg !29
  %37 = shl nsw i32 %36, 6, !dbg !29
  %38 = extractelement <2 x i32> %35, i64 0, !dbg !30
  %39 = add nsw i32 %38, %37, !dbg !30
  %40 = sext i32 %39 to i64, !dbg !31
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !31
  %42 = and i1 %14, %33, !dbg !32
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #1, !dbg !33
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !33
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !33
  %46 = bitcast i32 %44 to float, !dbg !33
  %47 = bitcast i32 %45 to float, !dbg !33
  %48 = sext i32 %36 to i64, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !34
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %42, i32 0, i1 %42) #1, !dbg !35
  %51 = bitcast i32 %50 to float, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %42, i32 0, i1 %42) #1, !dbg !35
  %53 = bitcast i32 %52 to float, !dbg !35
  %54 = fadd float %46, %51, !dbg !36
  %55 = fadd float %47, %53, !dbg !36
  %56 = fcmp ogt float %54, 0.000000e+00, !dbg !37
  %57 = fcmp ogt float %55, 0.000000e+00, !dbg !37
  %58 = fmul float %54, 0x3FB99999A0000000, !dbg !38
  %59 = fmul float %55, 0x3FB99999A0000000, !dbg !38
  %60 = select i1 %56, float %54, float %58, !dbg !39
  %61 = select i1 %57, float %55, float %59, !dbg !39
  %62 = icmp sgt i32 %26, 383, !dbg !23
  %63 = add nsw i32 %26, -384, !dbg !40
  %64 = shl nsw i32 %63, 6, !dbg !41
  %65 = shl nsw i32 %16, 7, !dbg !42
  %66 = extractelement <2 x i32> %25, i64 0, !dbg !43
  %67 = add nsw i32 %65, %66, !dbg !43
  %68 = add nsw i32 %67, %64, !dbg !44
  %69 = sext i32 %68 to i64, !dbg !45
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !45
  %71 = and i1 %14, %62, !dbg !46
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #1, !dbg !47
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !47
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !47
  %75 = bitcast i32 %73 to float, !dbg !47
  %76 = bitcast i32 %74 to float, !dbg !47
  %77 = sext i32 %63 to i64, !dbg !48
  %78 = getelementptr float, ptr addrspace(1) %4, i64 %77, !dbg !48
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %71, i32 0, i1 %71) #1, !dbg !49
  %80 = bitcast i32 %79 to float, !dbg !49
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %71, i32 0, i1 %71) #1, !dbg !49
  %82 = bitcast i32 %81 to float, !dbg !49
  %83 = fadd float %75, %80, !dbg !50
  %84 = fadd float %76, %82, !dbg !50
  %85 = select i1 %62, float %83, float 0.000000e+00, !dbg !51
  %86 = select i1 %62, float %84, float 0.000000e+00, !dbg !51
  %87 = select i1 %33, float %60, float %85, !dbg !52
  %88 = select i1 %33, float %61, float %86, !dbg !52
  %89 = sext i32 %13 to i64, !dbg !53
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %89, !dbg !53
  %91 = bitcast float %87 to i32, !dbg !54
  %92 = select i1 %27, i32 %30, i32 %91, !dbg !55
  %93 = bitcast float %88 to i32, !dbg !54
  %94 = select i1 %27, i32 %31, i32 %93, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %92, i32 %94, ptr addrspace(1) %90, i1 %14) #1, !dbg !54
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnbhtxxkjnxrneli7qumb6j7qolrcmkrwp4mpvafo7ne6ngkbnqh.py", directory: "inductor_cache/nb")
!4 = !{ptr @triton_poi_fused_cat_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_18", linkageName: "triton_poi_fused_cat_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 51, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 38, column: 60, scope: !7)
!22 = !DILocation(line: 25, column: 19, scope: !7)
!23 = !DILocation(line: 48, column: 20, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 63, scope: !7)
!26 = !DILocation(line: 33, column: 56, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 40, scope: !7)
!30 = !DILocation(line: 38, column: 55, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 72, scope: !7)
!33 = !DILocation(line: 38, column: 65, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 45, scope: !7)
!36 = !DILocation(line: 40, column: 20, scope: !7)
!37 = !DILocation(line: 42, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 45, column: 35, scope: !7)
!40 = !DILocation(line: 51, column: 49, scope: !7)
!41 = !DILocation(line: 51, column: 40, scope: !7)
!42 = !DILocation(line: 51, column: 59, scope: !7)
!43 = !DILocation(line: 51, column: 36, scope: !7)
!44 = !DILocation(line: 51, column: 55, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 72, scope: !7)
!47 = !DILocation(line: 51, column: 64, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 45, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 55, column: 35, scope: !7)
!52 = !DILocation(line: 0, scope: !7)
!53 = !DILocation(line: 58, column: 25, scope: !7)
!54 = !DILocation(line: 58, column: 37, scope: !7)
!55 = !DILocation(line: 57, column: 33, scope: !7)
!56 = !DILocation(line: 58, column: 4, scope: !7)
