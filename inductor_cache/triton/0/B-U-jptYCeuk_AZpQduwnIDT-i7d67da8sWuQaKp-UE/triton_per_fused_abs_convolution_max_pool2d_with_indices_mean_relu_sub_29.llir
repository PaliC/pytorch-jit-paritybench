; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = icmp slt i32 %7, 256, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %9, 63, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %13 = sdiv i32 %.frozen, 64, !dbg !13
  %14 = mul i32 %13, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %14, !dbg !14
  %15 = shl nsw i32 %.decomposed, 3, !dbg !15
  %16 = shl i32 %9, 9, !dbg !16
  %17 = and i32 %16, 7680, !dbg !16
  %18 = add nsw i32 %15, %17, !dbg !17
  %19 = shl i32 %13, 13, !dbg !18
  %20 = add i32 %18, %19, !dbg !19
  %21 = lshr i32 %12, 4, !dbg !20
  %22 = or disjoint i32 %21, 4, !dbg !20
  %23 = or disjoint i32 %20, %21, !dbg !21
  %24 = or disjoint i32 %20, %22, !dbg !21
  %25 = sext i32 %23 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %8, i32 0, i1 %8) #4, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %8, i32 0, i1 %8) #4, !dbg !23
  %31 = or disjoint i32 %15, %21, !dbg !24
  %32 = or disjoint i32 %15, %22, !dbg !24
  %33 = sext i32 %31 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !25
  %35 = sext i32 %32 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %8, i32 0, i1 %8) #4, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %8, i32 0, i1 %8) #4, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %8, i32 0, i1 %8) #4, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %8, i32 0, i1 %8) #4, !dbg !28
  %43 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !23
  %44 = insertelement <2 x i32> %43, i32 %30, i64 1, !dbg !23
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !23
  %46 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !26
  %47 = insertelement <2 x i32> %46, i32 %38, i64 1, !dbg !26
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !26
  %49 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !28
  %50 = insertelement <2 x i32> %49, i32 %42, i64 1, !dbg !28
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !28
  %52 = fadd <2 x float> %45, %48, !dbg !29
  %53 = fcmp olt <2 x float> %52, zeroinitializer, !dbg !30
  %54 = select <2 x i1> %53, <2 x float> zeroinitializer, <2 x float> %52, !dbg !34
  %55 = fadd <2 x float> %48, %51, !dbg !35
  %56 = fcmp olt <2 x float> %55, zeroinitializer, !dbg !36
  %57 = select <2 x i1> %56, <2 x float> zeroinitializer, <2 x float> %55, !dbg !38
  %58 = fsub <2 x float> %54, %57, !dbg !39
  %59 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %58), !dbg !40
  %shift = shufflevector <2 x float> %59, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %60 = fadd <2 x float> %59, %shift, !dbg !41
  %61 = extractelement <2 x float> %60, i64 0, !dbg !41
  %62 = select i1 %8, float %61, float 0.000000e+00, !dbg !41
  %63 = bitcast float %62 to i32, !dbg !46
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 16, i32 31), !dbg !46
  %65 = bitcast i32 %64 to float, !dbg !46
  %66 = fadd float %62, %65, !dbg !41
  %67 = bitcast float %66 to i32, !dbg !46
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 8, i32 31), !dbg !46
  %69 = bitcast i32 %68 to float, !dbg !46
  %70 = fadd float %66, %69, !dbg !41
  %71 = bitcast float %70 to i32, !dbg !46
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 4, i32 31), !dbg !46
  %73 = bitcast i32 %72 to float, !dbg !46
  %74 = fadd float %70, %73, !dbg !41
  %75 = bitcast float %74 to i32, !dbg !46
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 2, i32 31), !dbg !46
  %77 = bitcast i32 %76 to float, !dbg !46
  %78 = fadd float %74, %77, !dbg !41
  %79 = bitcast float %78 to i32, !dbg !46
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !46
  %81 = bitcast i32 %80 to float, !dbg !46
  %82 = fadd float %78, %81, !dbg !41
  %83 = icmp eq i32 %10, 0, !dbg !46
  %84 = and i32 %11, 1, !dbg !46
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !46
  %86 = bitcast float %82 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 %83) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %87 = icmp slt i32 %9, 2, !dbg !46
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !46
  %89 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %87) #4, !dbg !46
  %90 = bitcast i32 %89 to float, !dbg !46
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !46
  %92 = bitcast i32 %91 to float, !dbg !46
  %93 = fadd float %90, %92, !dbg !41
  %94 = and i32 %9, 1, !dbg !46
  %95 = icmp eq i32 %94, 0, !dbg !46
  %96 = and i1 %87, %95, !dbg !46
  %97 = bitcast float %93 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %97, i1 %96) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %98 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !46
  %99 = sext i32 %7 to i64, !dbg !47
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !47
  %101 = icmp eq i32 %12, 0, !dbg !48
  %102 = and i1 %101, %8, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %100, i1 %102) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca4hx7seppzsan2hh336ykjwelv7efejchxbi5vyjfkxvqyz76kw.py", directory: "inductor_cache/a4")
!4 = !{ptr @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_29, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_29, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_29", linkageName: "triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 32, scope: !7)
!16 = !DILocation(line: 33, column: 43, scope: !7)
!17 = !DILocation(line: 33, column: 37, scope: !7)
!18 = !DILocation(line: 33, column: 60, scope: !7)
!19 = !DILocation(line: 33, column: 55, scope: !7)
!20 = !DILocation(line: 33, column: 103, scope: !7)
!21 = !DILocation(line: 33, column: 97, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 109, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 50, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 109, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 38, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !37)
!37 = !DILocation(line: 40, column: 40, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !37)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 23, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !45)
!42 = distinct !DILexicalBlockFile(scope: !44, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!45 = !DILocation(line: 45, column: 26, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !44, inlinedAt: !45)
!47 = !DILocation(line: 46, column: 25, scope: !7)
!48 = !DILocation(line: 46, column: 37, scope: !7)
!49 = !DILocation(line: 46, column: 4, scope: !7)
