; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %11, 32, !dbg !12
  %14 = or disjoint i32 %11, 48, !dbg !12
  %15 = shl i32 %9, 2, !dbg !12
  %16 = and i32 %15, 60, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %12, !dbg !13
  %19 = or disjoint i32 %8, %13, !dbg !13
  %20 = or disjoint i32 %8, %14, !dbg !13
  %21 = icmp slt i32 %17, 64, !dbg !14
  %22 = icmp slt i32 %18, 64, !dbg !14
  %23 = icmp slt i32 %19, 64, !dbg !14
  %24 = icmp slt i32 %20, 64, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %26 = shl i32 %25, 6, !dbg !16
  %27 = or disjoint i32 %26, %16, !dbg !17
  %28 = icmp slt i32 %27, 128, !dbg !18
  %29 = sdiv i32 %17, 16, !dbg !19
  %30 = sdiv i32 %18, 16, !dbg !19
  %31 = sdiv i32 %19, 16, !dbg !19
  %32 = sdiv i32 %20, 16, !dbg !19
  %33 = shl i32 %17, 7, !dbg !20
  %34 = shl i32 %18, 7, !dbg !20
  %35 = shl i32 %19, 7, !dbg !20
  %36 = shl i32 %20, 7, !dbg !20
  %37 = add i32 %27, %33, !dbg !21
  %38 = add i32 %27, %34, !dbg !21
  %39 = add i32 %27, %35, !dbg !21
  %40 = add i32 %27, %36, !dbg !21
  %41 = sext i32 %37 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %38 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = sext i32 %39 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = sext i32 %40 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = and i1 %21, %28, !dbg !23
  %50 = and i1 %22, %28, !dbg !23
  %51 = and i1 %23, %28, !dbg !23
  %52 = and i1 %24, %28, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %49) #4, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %50) #4, !dbg !24
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %51) #4, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %52) #4, !dbg !24
  %57 = shl i32 %29, 7, !dbg !25
  %58 = shl i32 %30, 7, !dbg !25
  %59 = shl i32 %31, 7, !dbg !25
  %60 = shl i32 %32, 7, !dbg !25
  %61 = add i32 %57, %27, !dbg !26
  %62 = add i32 %58, %27, !dbg !26
  %63 = add i32 %59, %27, !dbg !26
  %64 = add i32 %60, %27, !dbg !26
  %65 = sext i32 %61 to i64, !dbg !27
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !27
  %67 = sext i32 %62 to i64, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !27
  %69 = sext i32 %63 to i64, !dbg !27
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !27
  %71 = sext i32 %64 to i64, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !27
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %49) #4, !dbg !28
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %50) #4, !dbg !28
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %51) #4, !dbg !28
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %52) #4, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !29
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !29
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !29
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %49) #4, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !30
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !30
  %86 = bitcast i32 %82 to float, !dbg !30
  %87 = bitcast i32 %83 to float, !dbg !30
  %88 = bitcast i32 %84 to float, !dbg !30
  %89 = bitcast i32 %85 to float, !dbg !30
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %50) #4, !dbg !30
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !30
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !30
  %95 = bitcast i32 %91 to float, !dbg !30
  %96 = bitcast i32 %92 to float, !dbg !30
  %97 = bitcast i32 %93 to float, !dbg !30
  %98 = bitcast i32 %94 to float, !dbg !30
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %51) #4, !dbg !30
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !30
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !30
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !30
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !30
  %104 = bitcast i32 %100 to float, !dbg !30
  %105 = bitcast i32 %101 to float, !dbg !30
  %106 = bitcast i32 %102 to float, !dbg !30
  %107 = bitcast i32 %103 to float, !dbg !30
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %52) #4, !dbg !30
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !30
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !30
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !30
  %113 = bitcast i32 %109 to float, !dbg !30
  %114 = bitcast i32 %110 to float, !dbg !30
  %115 = bitcast i32 %111 to float, !dbg !30
  %116 = bitcast i32 %112 to float, !dbg !30
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 1.600000e+01) #4, !dbg !31
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 1.600000e+01) #4, !dbg !31
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 1.600000e+01) #4, !dbg !31
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 1.600000e+01) #4, !dbg !31
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 1.600000e+01) #4, !dbg !31
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 1.600000e+01) #4, !dbg !31
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 1.600000e+01) #4, !dbg !31
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 1.600000e+01) #4, !dbg !31
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 1.600000e+01) #4, !dbg !31
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 1.600000e+01) #4, !dbg !31
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 1.600000e+01) #4, !dbg !31
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 1.600000e+01) #4, !dbg !31
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 1.600000e+01) #4, !dbg !31
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float 1.600000e+01) #4, !dbg !31
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float 1.600000e+01) #4, !dbg !31
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float 1.600000e+01) #4, !dbg !31
  %133 = fadd float %117, 0x3EE4F8B580000000, !dbg !32
  %134 = fadd float %118, 0x3EE4F8B580000000, !dbg !32
  %135 = fadd float %119, 0x3EE4F8B580000000, !dbg !32
  %136 = fadd float %120, 0x3EE4F8B580000000, !dbg !32
  %137 = fadd float %121, 0x3EE4F8B580000000, !dbg !32
  %138 = fadd float %122, 0x3EE4F8B580000000, !dbg !32
  %139 = fadd float %123, 0x3EE4F8B580000000, !dbg !32
  %140 = fadd float %124, 0x3EE4F8B580000000, !dbg !32
  %141 = fadd float %125, 0x3EE4F8B580000000, !dbg !32
  %142 = fadd float %126, 0x3EE4F8B580000000, !dbg !32
  %143 = fadd float %127, 0x3EE4F8B580000000, !dbg !32
  %144 = fadd float %128, 0x3EE4F8B580000000, !dbg !32
  %145 = fadd float %129, 0x3EE4F8B580000000, !dbg !32
  %146 = fadd float %130, 0x3EE4F8B580000000, !dbg !32
  %147 = fadd float %131, 0x3EE4F8B580000000, !dbg !32
  %148 = fadd float %132, 0x3EE4F8B580000000, !dbg !32
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %149, 0, !dbg !33
  br i1 %.not.i, label %152, label %150, !dbg !33

150:                                              ; preds = %6
  %151 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

152:                                              ; preds = %6
  %153 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %150, %152
  %.0.i = phi float [ %151, %150 ], [ %153, %152 ], !dbg !33
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i31 = icmp eq i32 %154, 0, !dbg !33
  br i1 %.not.i31, label %157, label %155, !dbg !33

155:                                              ; preds = %__nv_rsqrtf.exit
  %156 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %134), !dbg !33
  br label %__nv_rsqrtf.exit33, !dbg !33

157:                                              ; preds = %__nv_rsqrtf.exit
  %158 = tail call float @llvm.nvvm.rsqrt.approx.f(float %134), !dbg !33
  br label %__nv_rsqrtf.exit33, !dbg !33

__nv_rsqrtf.exit33:                               ; preds = %155, %157
  %.0.i32 = phi float [ %156, %155 ], [ %158, %157 ], !dbg !33
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i34 = icmp eq i32 %159, 0, !dbg !33
  br i1 %.not.i34, label %162, label %160, !dbg !33

160:                                              ; preds = %__nv_rsqrtf.exit33
  %161 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %135), !dbg !33
  br label %__nv_rsqrtf.exit36, !dbg !33

162:                                              ; preds = %__nv_rsqrtf.exit33
  %163 = tail call float @llvm.nvvm.rsqrt.approx.f(float %135), !dbg !33
  br label %__nv_rsqrtf.exit36, !dbg !33

__nv_rsqrtf.exit36:                               ; preds = %160, %162
  %.0.i35 = phi float [ %161, %160 ], [ %163, %162 ], !dbg !33
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i37 = icmp eq i32 %164, 0, !dbg !33
  br i1 %.not.i37, label %167, label %165, !dbg !33

165:                                              ; preds = %__nv_rsqrtf.exit36
  %166 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %136), !dbg !33
  br label %__nv_rsqrtf.exit39, !dbg !33

167:                                              ; preds = %__nv_rsqrtf.exit36
  %168 = tail call float @llvm.nvvm.rsqrt.approx.f(float %136), !dbg !33
  br label %__nv_rsqrtf.exit39, !dbg !33

__nv_rsqrtf.exit39:                               ; preds = %165, %167
  %.0.i38 = phi float [ %166, %165 ], [ %168, %167 ], !dbg !33
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i40 = icmp eq i32 %169, 0, !dbg !33
  br i1 %.not.i40, label %172, label %170, !dbg !33

170:                                              ; preds = %__nv_rsqrtf.exit39
  %171 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %137), !dbg !33
  br label %__nv_rsqrtf.exit42, !dbg !33

172:                                              ; preds = %__nv_rsqrtf.exit39
  %173 = tail call float @llvm.nvvm.rsqrt.approx.f(float %137), !dbg !33
  br label %__nv_rsqrtf.exit42, !dbg !33

__nv_rsqrtf.exit42:                               ; preds = %170, %172
  %.0.i41 = phi float [ %171, %170 ], [ %173, %172 ], !dbg !33
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i43 = icmp eq i32 %174, 0, !dbg !33
  br i1 %.not.i43, label %177, label %175, !dbg !33

175:                                              ; preds = %__nv_rsqrtf.exit42
  %176 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %138), !dbg !33
  br label %__nv_rsqrtf.exit45, !dbg !33

177:                                              ; preds = %__nv_rsqrtf.exit42
  %178 = tail call float @llvm.nvvm.rsqrt.approx.f(float %138), !dbg !33
  br label %__nv_rsqrtf.exit45, !dbg !33

__nv_rsqrtf.exit45:                               ; preds = %175, %177
  %.0.i44 = phi float [ %176, %175 ], [ %178, %177 ], !dbg !33
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i46 = icmp eq i32 %179, 0, !dbg !33
  br i1 %.not.i46, label %182, label %180, !dbg !33

180:                                              ; preds = %__nv_rsqrtf.exit45
  %181 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %139), !dbg !33
  br label %__nv_rsqrtf.exit48, !dbg !33

182:                                              ; preds = %__nv_rsqrtf.exit45
  %183 = tail call float @llvm.nvvm.rsqrt.approx.f(float %139), !dbg !33
  br label %__nv_rsqrtf.exit48, !dbg !33

__nv_rsqrtf.exit48:                               ; preds = %180, %182
  %.0.i47 = phi float [ %181, %180 ], [ %183, %182 ], !dbg !33
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i49 = icmp eq i32 %184, 0, !dbg !33
  br i1 %.not.i49, label %187, label %185, !dbg !33

185:                                              ; preds = %__nv_rsqrtf.exit48
  %186 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %140), !dbg !33
  br label %__nv_rsqrtf.exit51, !dbg !33

187:                                              ; preds = %__nv_rsqrtf.exit48
  %188 = tail call float @llvm.nvvm.rsqrt.approx.f(float %140), !dbg !33
  br label %__nv_rsqrtf.exit51, !dbg !33

__nv_rsqrtf.exit51:                               ; preds = %185, %187
  %.0.i50 = phi float [ %186, %185 ], [ %188, %187 ], !dbg !33
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i52 = icmp eq i32 %189, 0, !dbg !33
  br i1 %.not.i52, label %192, label %190, !dbg !33

190:                                              ; preds = %__nv_rsqrtf.exit51
  %191 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %141), !dbg !33
  br label %__nv_rsqrtf.exit54, !dbg !33

192:                                              ; preds = %__nv_rsqrtf.exit51
  %193 = tail call float @llvm.nvvm.rsqrt.approx.f(float %141), !dbg !33
  br label %__nv_rsqrtf.exit54, !dbg !33

__nv_rsqrtf.exit54:                               ; preds = %190, %192
  %.0.i53 = phi float [ %191, %190 ], [ %193, %192 ], !dbg !33
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i55 = icmp eq i32 %194, 0, !dbg !33
  br i1 %.not.i55, label %197, label %195, !dbg !33

195:                                              ; preds = %__nv_rsqrtf.exit54
  %196 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %142), !dbg !33
  br label %__nv_rsqrtf.exit57, !dbg !33

197:                                              ; preds = %__nv_rsqrtf.exit54
  %198 = tail call float @llvm.nvvm.rsqrt.approx.f(float %142), !dbg !33
  br label %__nv_rsqrtf.exit57, !dbg !33

__nv_rsqrtf.exit57:                               ; preds = %195, %197
  %.0.i56 = phi float [ %196, %195 ], [ %198, %197 ], !dbg !33
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i58 = icmp eq i32 %199, 0, !dbg !33
  br i1 %.not.i58, label %202, label %200, !dbg !33

200:                                              ; preds = %__nv_rsqrtf.exit57
  %201 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %143), !dbg !33
  br label %__nv_rsqrtf.exit60, !dbg !33

202:                                              ; preds = %__nv_rsqrtf.exit57
  %203 = tail call float @llvm.nvvm.rsqrt.approx.f(float %143), !dbg !33
  br label %__nv_rsqrtf.exit60, !dbg !33

__nv_rsqrtf.exit60:                               ; preds = %200, %202
  %.0.i59 = phi float [ %201, %200 ], [ %203, %202 ], !dbg !33
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i61 = icmp eq i32 %204, 0, !dbg !33
  br i1 %.not.i61, label %207, label %205, !dbg !33

205:                                              ; preds = %__nv_rsqrtf.exit60
  %206 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !33
  br label %__nv_rsqrtf.exit63, !dbg !33

207:                                              ; preds = %__nv_rsqrtf.exit60
  %208 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !33
  br label %__nv_rsqrtf.exit63, !dbg !33

__nv_rsqrtf.exit63:                               ; preds = %205, %207
  %.0.i62 = phi float [ %206, %205 ], [ %208, %207 ], !dbg !33
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i64 = icmp eq i32 %209, 0, !dbg !33
  br i1 %.not.i64, label %212, label %210, !dbg !33

210:                                              ; preds = %__nv_rsqrtf.exit63
  %211 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !33
  br label %__nv_rsqrtf.exit66, !dbg !33

212:                                              ; preds = %__nv_rsqrtf.exit63
  %213 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !33
  br label %__nv_rsqrtf.exit66, !dbg !33

__nv_rsqrtf.exit66:                               ; preds = %210, %212
  %.0.i65 = phi float [ %211, %210 ], [ %213, %212 ], !dbg !33
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i67 = icmp eq i32 %214, 0, !dbg !33
  br i1 %.not.i67, label %217, label %215, !dbg !33

215:                                              ; preds = %__nv_rsqrtf.exit66
  %216 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %146), !dbg !33
  br label %__nv_rsqrtf.exit69, !dbg !33

217:                                              ; preds = %__nv_rsqrtf.exit66
  %218 = tail call float @llvm.nvvm.rsqrt.approx.f(float %146), !dbg !33
  br label %__nv_rsqrtf.exit69, !dbg !33

__nv_rsqrtf.exit69:                               ; preds = %215, %217
  %.0.i68 = phi float [ %216, %215 ], [ %218, %217 ], !dbg !33
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i70 = icmp eq i32 %219, 0, !dbg !33
  br i1 %.not.i70, label %222, label %220, !dbg !33

220:                                              ; preds = %__nv_rsqrtf.exit69
  %221 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !33
  br label %__nv_rsqrtf.exit72, !dbg !33

222:                                              ; preds = %__nv_rsqrtf.exit69
  %223 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !33
  br label %__nv_rsqrtf.exit72, !dbg !33

__nv_rsqrtf.exit72:                               ; preds = %220, %222
  %.0.i71 = phi float [ %221, %220 ], [ %223, %222 ], !dbg !33
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i73 = icmp eq i32 %224, 0, !dbg !33
  br i1 %.not.i73, label %227, label %225, !dbg !33

225:                                              ; preds = %__nv_rsqrtf.exit72
  %226 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %148), !dbg !33
  br label %__nv_rsqrtf.exit75, !dbg !33

227:                                              ; preds = %__nv_rsqrtf.exit72
  %228 = tail call float @llvm.nvvm.rsqrt.approx.f(float %148), !dbg !33
  br label %__nv_rsqrtf.exit75, !dbg !33

__nv_rsqrtf.exit75:                               ; preds = %225, %227
  %.0.i74 = phi float [ %226, %225 ], [ %228, %227 ], !dbg !33
  %229 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %230 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !28
  %231 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %232 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !28
  %233 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %234 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !28
  %235 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %236 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !28
  %237 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !24
  %238 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !28
  %239 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !24
  %240 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !28
  %241 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !24
  %242 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !28
  %243 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !24
  %244 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !28
  %245 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %246 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !28
  %247 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %248 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !28
  %249 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %250 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !28
  %251 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %252 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !28
  %253 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !24
  %254 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !28
  %255 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !24
  %256 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !28
  %257 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !24
  %258 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !28
  %259 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !24
  %260 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !28
  %261 = or disjoint i32 %26, %14, !dbg !17
  %262 = icmp slt i32 %261, 128, !dbg !18
  %263 = or disjoint i32 %8, %16, !dbg !13
  %264 = icmp slt i32 %263, 64, !dbg !14
  %265 = and i1 %264, %262, !dbg !23
  %266 = or disjoint i32 %26, %13, !dbg !17
  %267 = icmp slt i32 %266, 128, !dbg !18
  %268 = and i1 %264, %267, !dbg !23
  %269 = or disjoint i32 %26, %12, !dbg !17
  %270 = icmp slt i32 %269, 128, !dbg !18
  %271 = and i1 %264, %270, !dbg !23
  %272 = or disjoint i32 %26, %11, !dbg !17
  %273 = icmp slt i32 %272, 128, !dbg !18
  %274 = and i1 %264, %273, !dbg !23
  %.frozen = freeze i32 %263, !dbg !19
  %275 = sdiv i32 %.frozen, 16, !dbg !19
  %276 = mul i32 %275, 16, !dbg !34
  %.decomposed = sub i32 %.frozen, %276, !dbg !34
  %277 = insertelement <16 x i32> poison, i32 %229, i64 0, !dbg !24
  %278 = insertelement <16 x i32> %277, i32 %231, i64 1, !dbg !24
  %279 = insertelement <16 x i32> %278, i32 %233, i64 2, !dbg !24
  %280 = insertelement <16 x i32> %279, i32 %235, i64 3, !dbg !24
  %281 = insertelement <16 x i32> %280, i32 %237, i64 4, !dbg !24
  %282 = insertelement <16 x i32> %281, i32 %239, i64 5, !dbg !24
  %283 = insertelement <16 x i32> %282, i32 %241, i64 6, !dbg !24
  %284 = insertelement <16 x i32> %283, i32 %243, i64 7, !dbg !24
  %285 = insertelement <16 x i32> %284, i32 %245, i64 8, !dbg !24
  %286 = insertelement <16 x i32> %285, i32 %247, i64 9, !dbg !24
  %287 = insertelement <16 x i32> %286, i32 %249, i64 10, !dbg !24
  %288 = insertelement <16 x i32> %287, i32 %251, i64 11, !dbg !24
  %289 = insertelement <16 x i32> %288, i32 %253, i64 12, !dbg !24
  %290 = insertelement <16 x i32> %289, i32 %255, i64 13, !dbg !24
  %291 = insertelement <16 x i32> %290, i32 %257, i64 14, !dbg !24
  %292 = insertelement <16 x i32> %291, i32 %259, i64 15, !dbg !24
  %293 = bitcast <16 x i32> %292 to <16 x float>, !dbg !24
  %294 = insertelement <16 x i32> poison, i32 %230, i64 0, !dbg !28
  %295 = insertelement <16 x i32> %294, i32 %232, i64 1, !dbg !28
  %296 = insertelement <16 x i32> %295, i32 %234, i64 2, !dbg !28
  %297 = insertelement <16 x i32> %296, i32 %236, i64 3, !dbg !28
  %298 = insertelement <16 x i32> %297, i32 %238, i64 4, !dbg !28
  %299 = insertelement <16 x i32> %298, i32 %240, i64 5, !dbg !28
  %300 = insertelement <16 x i32> %299, i32 %242, i64 6, !dbg !28
  %301 = insertelement <16 x i32> %300, i32 %244, i64 7, !dbg !28
  %302 = insertelement <16 x i32> %301, i32 %246, i64 8, !dbg !28
  %303 = insertelement <16 x i32> %302, i32 %248, i64 9, !dbg !28
  %304 = insertelement <16 x i32> %303, i32 %250, i64 10, !dbg !28
  %305 = insertelement <16 x i32> %304, i32 %252, i64 11, !dbg !28
  %306 = insertelement <16 x i32> %305, i32 %254, i64 12, !dbg !28
  %307 = insertelement <16 x i32> %306, i32 %256, i64 13, !dbg !28
  %308 = insertelement <16 x i32> %307, i32 %258, i64 14, !dbg !28
  %309 = insertelement <16 x i32> %308, i32 %260, i64 15, !dbg !28
  %310 = bitcast <16 x i32> %309 to <16 x float>, !dbg !28
  %311 = fsub <16 x float> %293, %310, !dbg !35
  %312 = insertelement <16 x float> poison, float %.0.i74, i64 0, !dbg !36
  %313 = insertelement <16 x float> %312, float %.0.i71, i64 1, !dbg !36
  %314 = insertelement <16 x float> %313, float %.0.i68, i64 2, !dbg !36
  %315 = insertelement <16 x float> %314, float %.0.i65, i64 3, !dbg !36
  %316 = insertelement <16 x float> %315, float %.0.i62, i64 4, !dbg !36
  %317 = insertelement <16 x float> %316, float %.0.i59, i64 5, !dbg !36
  %318 = insertelement <16 x float> %317, float %.0.i56, i64 6, !dbg !36
  %319 = insertelement <16 x float> %318, float %.0.i53, i64 7, !dbg !36
  %320 = insertelement <16 x float> %319, float %.0.i50, i64 8, !dbg !36
  %321 = insertelement <16 x float> %320, float %.0.i47, i64 9, !dbg !36
  %322 = insertelement <16 x float> %321, float %.0.i44, i64 10, !dbg !36
  %323 = insertelement <16 x float> %322, float %.0.i41, i64 11, !dbg !36
  %324 = insertelement <16 x float> %323, float %.0.i38, i64 12, !dbg !36
  %325 = insertelement <16 x float> %324, float %.0.i35, i64 13, !dbg !36
  %326 = insertelement <16 x float> %325, float %.0.i32, i64 14, !dbg !36
  %327 = insertelement <16 x float> %326, float %.0.i, i64 15, !dbg !36
  %328 = fmul <16 x float> %311, %327, !dbg !36
  %329 = fcmp ogt <16 x float> %328, zeroinitializer, !dbg !37
  %330 = extractelement <16 x float> %328, i64 15, !dbg !38
  %331 = fmul float %330, 0x3FC99999A0000000, !dbg !39
  %332 = extractelement <16 x float> %328, i64 14, !dbg !38
  %333 = fmul float %332, 0x3FC99999A0000000, !dbg !39
  %334 = extractelement <16 x float> %328, i64 13, !dbg !38
  %335 = fmul float %334, 0x3FC99999A0000000, !dbg !39
  %336 = extractelement <16 x float> %328, i64 12, !dbg !38
  %337 = fmul float %336, 0x3FC99999A0000000, !dbg !39
  %338 = extractelement <16 x float> %328, i64 11, !dbg !38
  %339 = fmul float %338, 0x3FC99999A0000000, !dbg !39
  %340 = extractelement <16 x float> %328, i64 10, !dbg !38
  %341 = fmul float %340, 0x3FC99999A0000000, !dbg !39
  %342 = extractelement <16 x float> %328, i64 9, !dbg !38
  %343 = fmul float %342, 0x3FC99999A0000000, !dbg !39
  %344 = extractelement <16 x float> %328, i64 8, !dbg !38
  %345 = fmul float %344, 0x3FC99999A0000000, !dbg !39
  %346 = extractelement <16 x float> %328, i64 7, !dbg !38
  %347 = fmul float %346, 0x3FC99999A0000000, !dbg !39
  %348 = extractelement <16 x float> %328, i64 6, !dbg !38
  %349 = fmul float %348, 0x3FC99999A0000000, !dbg !39
  %350 = extractelement <16 x float> %328, i64 5, !dbg !38
  %351 = fmul float %350, 0x3FC99999A0000000, !dbg !39
  %352 = extractelement <16 x float> %328, i64 4, !dbg !38
  %353 = fmul float %352, 0x3FC99999A0000000, !dbg !39
  %354 = extractelement <16 x float> %328, i64 3, !dbg !38
  %355 = fmul float %354, 0x3FC99999A0000000, !dbg !39
  %356 = extractelement <16 x float> %328, i64 2, !dbg !38
  %357 = fmul float %356, 0x3FC99999A0000000, !dbg !39
  %358 = extractelement <16 x float> %328, i64 1, !dbg !38
  %359 = fmul float %358, 0x3FC99999A0000000, !dbg !39
  %360 = extractelement <16 x float> %328, i64 0, !dbg !38
  %361 = fmul float %360, 0x3FC99999A0000000, !dbg !39
  %362 = extractelement <16 x i1> %329, i64 15, !dbg !38
  %363 = select i1 %362, float %330, float %331, !dbg !38
  %364 = extractelement <16 x i1> %329, i64 14, !dbg !38
  %365 = select i1 %364, float %332, float %333, !dbg !38
  %366 = extractelement <16 x i1> %329, i64 13, !dbg !38
  %367 = select i1 %366, float %334, float %335, !dbg !38
  %368 = extractelement <16 x i1> %329, i64 12, !dbg !38
  %369 = select i1 %368, float %336, float %337, !dbg !38
  %370 = extractelement <16 x i1> %329, i64 11, !dbg !38
  %371 = select i1 %370, float %338, float %339, !dbg !38
  %372 = extractelement <16 x i1> %329, i64 10, !dbg !38
  %373 = select i1 %372, float %340, float %341, !dbg !38
  %374 = extractelement <16 x i1> %329, i64 9, !dbg !38
  %375 = select i1 %374, float %342, float %343, !dbg !38
  %376 = extractelement <16 x i1> %329, i64 8, !dbg !38
  %377 = select i1 %376, float %344, float %345, !dbg !38
  %378 = extractelement <16 x i1> %329, i64 7, !dbg !38
  %379 = select i1 %378, float %346, float %347, !dbg !38
  %380 = extractelement <16 x i1> %329, i64 6, !dbg !38
  %381 = select i1 %380, float %348, float %349, !dbg !38
  %382 = extractelement <16 x i1> %329, i64 5, !dbg !38
  %383 = select i1 %382, float %350, float %351, !dbg !38
  %384 = extractelement <16 x i1> %329, i64 4, !dbg !38
  %385 = select i1 %384, float %352, float %353, !dbg !38
  %386 = extractelement <16 x i1> %329, i64 3, !dbg !38
  %387 = select i1 %386, float %354, float %355, !dbg !38
  %388 = extractelement <16 x i1> %329, i64 2, !dbg !38
  %389 = select i1 %388, float %356, float %357, !dbg !38
  %390 = extractelement <16 x i1> %329, i64 1, !dbg !38
  %391 = select i1 %390, float %358, float %359, !dbg !38
  %392 = extractelement <16 x i1> %329, i64 0, !dbg !38
  %393 = select i1 %392, float %360, float %361, !dbg !38
  %394 = shl i32 %272, 4, !dbg !40
  %395 = shl i32 %269, 4, !dbg !40
  %396 = shl i32 %266, 4, !dbg !40
  %397 = shl i32 %261, 4, !dbg !40
  %398 = shl i32 %275, 11, !dbg !41
  %399 = add i32 %398, %.decomposed, !dbg !42
  %400 = add i32 %399, %394, !dbg !43
  %401 = add i32 %399, %395, !dbg !43
  %402 = add i32 %399, %396, !dbg !43
  %403 = add i32 %399, %397, !dbg !43
  %404 = sext i32 %400 to i64, !dbg !44
  %405 = getelementptr float, ptr addrspace(1) %3, i64 %404, !dbg !44
  %406 = sext i32 %401 to i64, !dbg !44
  %407 = getelementptr float, ptr addrspace(1) %3, i64 %406, !dbg !44
  %408 = sext i32 %402 to i64, !dbg !44
  %409 = getelementptr float, ptr addrspace(1) %3, i64 %408, !dbg !44
  %410 = sext i32 %403 to i64, !dbg !44
  %411 = getelementptr float, ptr addrspace(1) %3, i64 %410, !dbg !44
  %412 = shl i32 %9, 8, !dbg !45
  %413 = and i32 %412, 3840, !dbg !45
  %414 = or disjoint i32 %413, %11, !dbg !45
  %415 = and i32 %15, 1020, !dbg !45
  %416 = lshr exact i32 %413, 2, !dbg !45
  %417 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %416, !dbg !45
  %418 = getelementptr float, ptr addrspace(3) %417, i32 %414, !dbg !45
  %419 = bitcast float %363 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 true) #4, !dbg !45
  %420 = or disjoint i32 %414, 64, !dbg !45
  %421 = lshr i32 %420, 4, !dbg !45
  %422 = getelementptr float, ptr addrspace(3) @global_smem, i32 %421, !dbg !45
  %423 = getelementptr float, ptr addrspace(3) %422, i32 %420, !dbg !45
  %424 = bitcast float %365 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %424, i1 true) #4, !dbg !45
  %425 = or disjoint i32 %414, 128, !dbg !45
  %426 = lshr i32 %425, 4, !dbg !45
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !45
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %425, !dbg !45
  %429 = bitcast float %367 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #4, !dbg !45
  %430 = or disjoint i32 %414, 192, !dbg !45
  %431 = lshr i32 %430, 4, !dbg !45
  %432 = getelementptr float, ptr addrspace(3) @global_smem, i32 %431, !dbg !45
  %433 = getelementptr float, ptr addrspace(3) %432, i32 %430, !dbg !45
  %434 = bitcast float %369 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %434, i1 true) #4, !dbg !45
  %435 = or disjoint i32 %414, 16, !dbg !45
  %436 = getelementptr float, ptr addrspace(3) %417, i32 %435, !dbg !45
  %437 = bitcast float %371 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %437, i1 true) #4, !dbg !45
  %438 = or disjoint i32 %414, 80, !dbg !45
  %439 = lshr i32 %438, 4, !dbg !45
  %440 = and i32 %439, 244, !dbg !45
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %440, !dbg !45
  %442 = getelementptr float, ptr addrspace(3) %441, i32 %438, !dbg !45
  %443 = bitcast float %373 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %443, i1 true) #4, !dbg !45
  %444 = or disjoint i32 %414, 144, !dbg !45
  %445 = lshr i32 %444, 4, !dbg !45
  %446 = and i32 %445, 248, !dbg !45
  %447 = getelementptr float, ptr addrspace(3) @global_smem, i32 %446, !dbg !45
  %448 = getelementptr float, ptr addrspace(3) %447, i32 %444, !dbg !45
  %449 = bitcast float %375 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %449, i1 true) #4, !dbg !45
  %450 = or disjoint i32 %414, 208, !dbg !45
  %451 = lshr i32 %450, 4, !dbg !45
  %452 = and i32 %451, 252, !dbg !45
  %453 = getelementptr float, ptr addrspace(3) @global_smem, i32 %452, !dbg !45
  %454 = getelementptr float, ptr addrspace(3) %453, i32 %450, !dbg !45
  %455 = bitcast float %377 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, <1 x i32> %455, i1 true) #4, !dbg !45
  %456 = or disjoint i32 %414, 32, !dbg !45
  %457 = getelementptr float, ptr addrspace(3) %417, i32 %456, !dbg !45
  %458 = bitcast float %379 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %457, <1 x i32> %458, i1 true) #4, !dbg !45
  %459 = or disjoint i32 %414, 96, !dbg !45
  %460 = lshr i32 %459, 4, !dbg !45
  %461 = and i32 %460, 244, !dbg !45
  %462 = getelementptr float, ptr addrspace(3) @global_smem, i32 %461, !dbg !45
  %463 = getelementptr float, ptr addrspace(3) %462, i32 %459, !dbg !45
  %464 = bitcast float %381 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %464, i1 true) #4, !dbg !45
  %465 = or disjoint i32 %414, 160, !dbg !45
  %466 = lshr i32 %465, 4, !dbg !45
  %467 = and i32 %466, 248, !dbg !45
  %468 = getelementptr float, ptr addrspace(3) @global_smem, i32 %467, !dbg !45
  %469 = getelementptr float, ptr addrspace(3) %468, i32 %465, !dbg !45
  %470 = bitcast float %383 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %470, i1 true) #4, !dbg !45
  %471 = or disjoint i32 %414, 224, !dbg !45
  %472 = lshr i32 %471, 4, !dbg !45
  %473 = and i32 %472, 252, !dbg !45
  %474 = getelementptr float, ptr addrspace(3) @global_smem, i32 %473, !dbg !45
  %475 = getelementptr float, ptr addrspace(3) %474, i32 %471, !dbg !45
  %476 = bitcast float %385 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %476, i1 true) #4, !dbg !45
  %477 = or disjoint i32 %414, 48, !dbg !45
  %478 = getelementptr float, ptr addrspace(3) %417, i32 %477, !dbg !45
  %479 = bitcast float %387 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #4, !dbg !45
  %480 = or disjoint i32 %414, 112, !dbg !45
  %481 = lshr i32 %480, 4, !dbg !45
  %482 = and i32 %481, 244, !dbg !45
  %483 = getelementptr float, ptr addrspace(3) @global_smem, i32 %482, !dbg !45
  %484 = getelementptr float, ptr addrspace(3) %483, i32 %480, !dbg !45
  %485 = bitcast float %389 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %484, <1 x i32> %485, i1 true) #4, !dbg !45
  %486 = or disjoint i32 %414, 176, !dbg !45
  %487 = lshr i32 %486, 4, !dbg !45
  %488 = and i32 %487, 248, !dbg !45
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i32 %488, !dbg !45
  %490 = getelementptr float, ptr addrspace(3) %489, i32 %486, !dbg !45
  %491 = bitcast float %391 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %491, i1 true) #4, !dbg !45
  %492 = or disjoint i32 %414, 240, !dbg !45
  %493 = lshr i32 %492, 4, !dbg !45
  %494 = and i32 %493, 252, !dbg !45
  %495 = getelementptr float, ptr addrspace(3) @global_smem, i32 %494, !dbg !45
  %496 = getelementptr float, ptr addrspace(3) %495, i32 %492, !dbg !45
  %497 = bitcast float %393 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %496, <1 x i32> %497, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %498 = lshr i32 %15, 4, !dbg !45
  %499 = and i32 %498, 60, !dbg !45
  %500 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %499, !dbg !45
  %501 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %415, !dbg !45
  %502 = or disjoint i32 %415, 1024, !dbg !45
  %503 = lshr i32 %502, 4, !dbg !45
  %504 = and i32 %503, 124, !dbg !45
  %505 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %504, !dbg !45
  %506 = getelementptr inbounds float, ptr addrspace(3) %505, i32 %502, !dbg !45
  %507 = load <4 x i32>, ptr addrspace(3) %506, align 16, !dbg !45
  %508 = or disjoint i32 %415, 2048, !dbg !45
  %509 = lshr i32 %508, 4, !dbg !45
  %510 = and i32 %509, 188, !dbg !45
  %511 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %510, !dbg !45
  %512 = getelementptr inbounds float, ptr addrspace(3) %511, i32 %508, !dbg !45
  %513 = load <4 x i32>, ptr addrspace(3) %512, align 16, !dbg !45
  %514 = or disjoint i32 %415, 3072, !dbg !45
  %515 = lshr i32 %514, 4, !dbg !45
  %516 = and i32 %515, 252, !dbg !45
  %517 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %516, !dbg !45
  %518 = getelementptr inbounds float, ptr addrspace(3) %517, i32 %514, !dbg !45
  %519 = load <4 x i32>, ptr addrspace(3) %518, align 16, !dbg !45
  %.extract = load i32, ptr addrspace(3) %501, align 16, !dbg !45
  %520 = getelementptr inbounds i8, ptr addrspace(3) %501, i32 4, !dbg !45
  %.extract16 = load i32, ptr addrspace(3) %520, align 4, !dbg !45
  %521 = getelementptr inbounds i8, ptr addrspace(3) %501, i32 8, !dbg !45
  %.extract17 = load i32, ptr addrspace(3) %521, align 8, !dbg !45
  %522 = getelementptr inbounds i8, ptr addrspace(3) %501, i32 12, !dbg !45
  %.extract18 = load i32, ptr addrspace(3) %522, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %405, i1 %274) #4, !dbg !45
  %.extract19 = extractelement <4 x i32> %507, i64 0, !dbg !45
  %.extract20 = extractelement <4 x i32> %507, i64 1, !dbg !45
  %.extract21 = extractelement <4 x i32> %507, i64 2, !dbg !45
  %.extract22 = extractelement <4 x i32> %507, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %407, i1 %271) #4, !dbg !45
  %.extract23 = extractelement <4 x i32> %513, i64 0, !dbg !45
  %.extract24 = extractelement <4 x i32> %513, i64 1, !dbg !45
  %.extract25 = extractelement <4 x i32> %513, i64 2, !dbg !45
  %.extract26 = extractelement <4 x i32> %513, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %409, i1 %268) #4, !dbg !45
  %.extract27 = extractelement <4 x i32> %519, i64 0, !dbg !45
  %.extract28 = extractelement <4 x i32> %519, i64 1, !dbg !45
  %.extract29 = extractelement <4 x i32> %519, i64 2, !dbg !45
  %.extract30 = extractelement <4 x i32> %519, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %411, i1 %265) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctqg3p5neoavtzcww6lzw3lknaiwzozxwyo35zdn4qlovo4hlqxd.py", directory: "inductor_cache/tq")
!4 = !{ptr @triton_poi_fused_leaky_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_4", linkageName: "triton_poi_fused_leaky_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 44, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 44, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 27, scope: !7)
!34 = !DILocation(line: 31, column: 19, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 34, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 33, scope: !7)
!41 = !DILocation(line: 47, column: 43, scope: !7)
!42 = !DILocation(line: 47, column: 30, scope: !7)
!43 = !DILocation(line: 47, column: 38, scope: !7)
!44 = !DILocation(line: 47, column: 25, scope: !7)
!45 = !DILocation(line: 47, column: 55, scope: !7)
!46 = !DILocation(line: 47, column: 4, scope: !7)
