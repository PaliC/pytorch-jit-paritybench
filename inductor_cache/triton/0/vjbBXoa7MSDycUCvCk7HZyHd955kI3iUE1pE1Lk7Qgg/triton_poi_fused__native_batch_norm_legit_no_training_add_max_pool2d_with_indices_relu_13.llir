; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 46592, !dbg !14
  %18 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %19 = shufflevector <2 x i32> %18, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %20 = sdiv <2 x i32> %19, <i32 2912, i32 728>, !dbg !15
  %21 = srem <2 x i32> %20, splat (i32 4), !dbg !16
  %22 = srem i32 %16, 728, !dbg !17
  %23 = sext i32 %16 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %17) #3, !dbg !19
  %26 = sext i32 %22 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !20
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !22
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %17) #3, !dbg !23
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !23
  %33 = bitcast i32 %31 to float, !dbg !23
  %34 = bitcast i32 %32 to float, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %17) #3, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %17) #3, !dbg !27
  %39 = extractelement <2 x i32> %21, i64 0, !dbg !28
  %40 = icmp sgt i32 %39, 0, !dbg !29
  %41 = extractelement <2 x i32> %21, i64 1, !dbg !28
  %42 = icmp sgt i32 %41, 0, !dbg !30
  %43 = and i1 %40, %42, !dbg !31
  %44 = mul nsw i32 %41, 1456, !dbg !32
  %45 = extractelement <2 x i32> %20, i64 0, !dbg !33
  %46 = mul i32 %45, 11648, !dbg !33
  %47 = add i32 %46, %22, !dbg !34
  %48 = add i32 %47, -6552, !dbg !35
  %49 = add i32 %48, %44, !dbg !36
  %50 = sext i32 %49 to i64, !dbg !37
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !37
  %52 = and i1 %17, %43, !dbg !38
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52) #3, !dbg !39
  %54 = icmp sgt i32 %41, -1, !dbg !40
  %55 = and i1 %40, %54, !dbg !41
  %56 = add i32 %47, -5824, !dbg !42
  %57 = add i32 %56, %44, !dbg !43
  %58 = sext i32 %57 to i64, !dbg !44
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !44
  %60 = and i1 %17, %55, !dbg !45
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %60, i32 -8388608, i1 %60, i32 -8388608, i1 %60) #3, !dbg !46
  %62 = add i32 %47, -5096, !dbg !47
  %63 = add i32 %62, %44, !dbg !48
  %64 = sext i32 %63 to i64, !dbg !49
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !49
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %60, i32 -8388608, i1 %60, i32 -8388608, i1 %60) #3, !dbg !50
  %67 = icmp sgt i32 %39, -1, !dbg !51
  %68 = and i1 %67, %42, !dbg !52
  %69 = add i32 %47, -728, !dbg !53
  %70 = add i32 %69, %44, !dbg !54
  %71 = sext i32 %70 to i64, !dbg !55
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !55
  %73 = and i1 %17, %68, !dbg !56
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %73, i32 -8388608, i1 %73, i32 -8388608, i1 %73) #3, !dbg !57
  %75 = or i32 %39, %41, !dbg !28
  %76 = icmp sgt i32 %75, -1, !dbg !28
  %77 = add i32 %47, %44, !dbg !58
  %78 = sext i32 %77 to i64, !dbg !59
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !59
  %80 = and i1 %17, %76, !dbg !60
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80) #3, !dbg !61
  %82 = add i32 %47, 728, !dbg !62
  %83 = add i32 %82, %44, !dbg !63
  %84 = sext i32 %83 to i64, !dbg !64
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !64
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %85, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80) #3, !dbg !65
  %87 = add i32 %47, 5096, !dbg !66
  %88 = add i32 %87, %44, !dbg !67
  %89 = sext i32 %88 to i64, !dbg !68
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !68
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %90, i1 %73, i32 -8388608, i1 %73, i32 -8388608, i1 %73) #3, !dbg !69
  %92 = add i32 %47, 5824, !dbg !70
  %93 = add i32 %92, %44, !dbg !71
  %94 = sext i32 %93 to i64, !dbg !72
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !72
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %95, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80) #3, !dbg !73
  %97 = add i32 %47, 6552, !dbg !74
  %98 = add i32 %97, %44, !dbg !75
  %99 = sext i32 %98 to i64, !dbg !76
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !76
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80) #3, !dbg !77
  %102 = fadd float %33, 0x3EE4F8B580000000, !dbg !78
  %103 = fadd float %34, 0x3EE4F8B580000000, !dbg !78
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i = icmp eq i32 %104, 0, !dbg !79
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i = icmp eq i32 %105, 0, !dbg !79
  br i1 %.not.i, label %111, label %106, !dbg !79

106:                                              ; preds = %10
  br i1 %.not1.i, label %109, label %107, !dbg !79

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

111:                                              ; preds = %10
  br i1 %.not1.i, label %114, label %112, !dbg !79

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

__nv_sqrtf.exit:                                  ; preds = %107, %109, %112, %114
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !79
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i1 = icmp eq i32 %116, 0, !dbg !79
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i4 = icmp eq i32 %117, 0, !dbg !79
  br i1 %.not.i1, label %123, label %118, !dbg !79

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %121, label %119, !dbg !79

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !79
  br label %__nv_sqrtf.exit5, !dbg !79

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !79
  br label %__nv_sqrtf.exit5, !dbg !79

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %126, label %124, !dbg !79

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !79
  br label %__nv_sqrtf.exit5, !dbg !79

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !79
  br label %__nv_sqrtf.exit5, !dbg !79

__nv_sqrtf.exit5:                                 ; preds = %119, %121, %124, %126
  %.0.i3 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !79
  %128 = extractvalue { i32, i32 } %25, 1, !dbg !19
  %129 = bitcast i32 %128 to float, !dbg !19
  %130 = extractvalue { i32, i32 } %28, 1, !dbg !21
  %131 = bitcast i32 %130 to float, !dbg !21
  %132 = fsub float %129, %131, !dbg !80
  %133 = extractvalue { i32, i32 } %25, 0, !dbg !19
  %134 = bitcast i32 %133 to float, !dbg !19
  %135 = extractvalue { i32, i32 } %28, 0, !dbg !21
  %136 = bitcast i32 %135 to float, !dbg !21
  %137 = fsub float %134, %136, !dbg !80
  %138 = extractvalue { i32, i32 } %61, 1, !dbg !46
  %139 = extractvalue { i32, i32 } %53, 1, !dbg !39
  %140 = extractvalue { i32, i32 } %66, 1, !dbg !50
  %141 = extractvalue { i32, i32 } %74, 1, !dbg !57
  %142 = extractvalue { i32, i32 } %81, 1, !dbg !61
  %143 = extractvalue { i32, i32 } %86, 1, !dbg !65
  %144 = extractvalue { i32, i32 } %91, 1, !dbg !69
  %145 = extractvalue { i32, i32 } %96, 1, !dbg !73
  %146 = extractvalue { i32, i32 } %101, 1, !dbg !77
  %147 = extractvalue { i32, i32 } %61, 0, !dbg !46
  %148 = extractvalue { i32, i32 } %53, 0, !dbg !39
  %149 = extractvalue { i32, i32 } %66, 0, !dbg !50
  %150 = extractvalue { i32, i32 } %74, 0, !dbg !57
  %151 = extractvalue { i32, i32 } %81, 0, !dbg !61
  %152 = extractvalue { i32, i32 } %86, 0, !dbg !65
  %153 = extractvalue { i32, i32 } %91, 0, !dbg !69
  %154 = extractvalue { i32, i32 } %96, 0, !dbg !73
  %155 = extractvalue { i32, i32 } %101, 0, !dbg !77
  %156 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !46
  %157 = insertelement <2 x i32> %156, i32 %138, i64 1, !dbg !46
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !46
  %159 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !39
  %160 = insertelement <2 x i32> %159, i32 %139, i64 1, !dbg !39
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !39
  %162 = fcmp ogt <2 x float> %158, %161, !dbg !81
  %163 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !57
  %164 = insertelement <2 x i32> %163, i32 %141, i64 1, !dbg !57
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !57
  %166 = fcmp uno <2 x float> %158, zeroinitializer, !dbg !85
  %167 = or <2 x i1> %162, %166, !dbg !86
  %.v = select <2 x i1> %167, <2 x i32> %157, <2 x i32> %160, !dbg !87
  %168 = bitcast <2 x i32> %.v to <2 x float>, !dbg !87
  %169 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !50
  %170 = insertelement <2 x i32> %169, i32 %140, i64 1, !dbg !50
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !50
  %172 = fcmp olt <2 x float> %168, %171, !dbg !88
  %173 = fcmp uno <2 x float> %171, zeroinitializer, !dbg !90
  %174 = or <2 x i1> %173, %172, !dbg !91
  %.v6 = select <2 x i1> %174, <2 x i32> %170, <2 x i32> %.v, !dbg !92
  %175 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !92
  %176 = fcmp olt <2 x float> %175, %165, !dbg !93
  %177 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !61
  %178 = insertelement <2 x i32> %177, i32 %142, i64 1, !dbg !61
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !61
  %180 = fcmp uno <2 x float> %165, zeroinitializer, !dbg !95
  %181 = or <2 x i1> %180, %176, !dbg !96
  %.v7 = select <2 x i1> %181, <2 x i32> %164, <2 x i32> %.v6, !dbg !97
  %182 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !97
  %183 = fcmp olt <2 x float> %182, %179, !dbg !98
  %184 = fcmp uno <2 x float> %179, zeroinitializer, !dbg !100
  %185 = or <2 x i1> %184, %183, !dbg !101
  %.v8 = select <2 x i1> %185, <2 x i32> %178, <2 x i32> %.v7, !dbg !102
  %186 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !102
  %187 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !65
  %188 = insertelement <2 x i32> %187, i32 %143, i64 1, !dbg !65
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !65
  %190 = fcmp olt <2 x float> %186, %189, !dbg !103
  %191 = fcmp uno <2 x float> %189, zeroinitializer, !dbg !105
  %192 = or <2 x i1> %191, %190, !dbg !106
  %.v9 = select <2 x i1> %192, <2 x i32> %188, <2 x i32> %.v8, !dbg !107
  %193 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !107
  %194 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !69
  %195 = insertelement <2 x i32> %194, i32 %144, i64 1, !dbg !69
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !69
  %197 = fcmp olt <2 x float> %193, %196, !dbg !108
  %198 = fcmp uno <2 x float> %196, zeroinitializer, !dbg !110
  %199 = or <2 x i1> %198, %197, !dbg !111
  %.v10 = select <2 x i1> %199, <2 x i32> %195, <2 x i32> %.v9, !dbg !112
  %200 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !112
  %201 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !73
  %202 = insertelement <2 x i32> %201, i32 %145, i64 1, !dbg !73
  %203 = bitcast <2 x i32> %202 to <2 x float>, !dbg !73
  %204 = fcmp olt <2 x float> %200, %203, !dbg !113
  %205 = fcmp uno <2 x float> %203, zeroinitializer, !dbg !115
  %206 = or <2 x i1> %205, %204, !dbg !116
  %.v11 = select <2 x i1> %206, <2 x i32> %202, <2 x i32> %.v10, !dbg !117
  %207 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !117
  %208 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !77
  %209 = insertelement <2 x i32> %208, i32 %146, i64 1, !dbg !77
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !77
  %211 = fcmp olt <2 x float> %207, %210, !dbg !118
  %212 = zext <2 x i1> %162 to <2 x i8>, !dbg !120
  %213 = select <2 x i1> %172, <2 x i8> splat (i8 2), <2 x i8> %212, !dbg !121
  %214 = select <2 x i1> %176, <2 x i8> splat (i8 3), <2 x i8> %213, !dbg !122
  %215 = select <2 x i1> %183, <2 x i8> splat (i8 4), <2 x i8> %214, !dbg !123
  %216 = select <2 x i1> %190, <2 x i8> splat (i8 5), <2 x i8> %215, !dbg !124
  %217 = select <2 x i1> %197, <2 x i8> splat (i8 6), <2 x i8> %216, !dbg !125
  %218 = select <2 x i1> %204, <2 x i8> splat (i8 7), <2 x i8> %217, !dbg !126
  %219 = select <2 x i1> %211, <2 x i8> splat (i8 8), <2 x i8> %218, !dbg !127
  %220 = bitcast i32 %146 to float, !dbg !128
  %221 = fcmp uno float %220, 0.000000e+00, !dbg !128
  %222 = extractelement <2 x i1> %211, i64 1, !dbg !129
  %223 = or i1 %221, %222, !dbg !129
  %224 = extractelement <2 x float> %207, i64 1, !dbg !130
  %225 = select i1 %223, float %220, float %224, !dbg !130
  %226 = bitcast i32 %155 to float, !dbg !128
  %227 = fcmp uno float %226, 0.000000e+00, !dbg !128
  %228 = extractelement <2 x i1> %211, i64 0, !dbg !129
  %229 = or i1 %227, %228, !dbg !129
  %230 = extractelement <2 x float> %207, i64 0, !dbg !130
  %231 = select i1 %229, float %226, float %230, !dbg !130
  %232 = extractvalue { i32, i32 } %38, 1, !dbg !27
  %233 = bitcast i32 %232 to float, !dbg !27
  %234 = extractvalue { i32, i32 } %38, 0, !dbg !27
  %235 = bitcast i32 %234 to float, !dbg !27
  %236 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %237 = bitcast i32 %236 to float, !dbg !25
  %238 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %239 = bitcast i32 %238 to float, !dbg !25
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !131
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !131
  %242 = fmul float %137, %240, !dbg !132
  %243 = fmul float %132, %241, !dbg !132
  %244 = fmul float %242, %239, !dbg !133
  %245 = fmul float %243, %237, !dbg !133
  %246 = fadd float %244, %235, !dbg !134
  %247 = fadd float %245, %233, !dbg !134
  %248 = fadd float %231, %246, !dbg !135
  %249 = fadd float %225, %247, !dbg !135
  %250 = fcmp olt float %248, 0.000000e+00, !dbg !136
  %251 = fcmp olt float %249, 0.000000e+00, !dbg !136
  %252 = select i1 %250, float 0.000000e+00, float %248, !dbg !138
  %253 = select i1 %251, float 0.000000e+00, float %249, !dbg !138
  %254 = getelementptr i8, ptr addrspace(1) %7, i64 %23, !dbg !139
  %255 = bitcast <2 x i8> %219 to i16, !dbg !140
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %255, ptr addrspace(1) %254, i1 %17) #3, !dbg !140
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !141
  %257 = bitcast float %248 to i32, !dbg !142
  %258 = bitcast float %249 to i32, !dbg !142
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %257, i32 %258, ptr addrspace(1) %256, i1 %17) #3, !dbg !142
  %259 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !143
  %260 = bitcast float %252 to i32, !dbg !144
  %261 = bitcast float %253 to i32, !dbg !144
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %260, i32 %261, ptr addrspace(1) %259, i1 %17) #3, !dbg !144
  ret void, !dbg !145
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cig6dcvobucbyozpxavafnbneswdps5yoyrd3jjcnxsibzspyl4m.py", directory: "inductor_cache/ig")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 31, scope: !7)
!19 = !DILocation(line: 29, column: 36, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 67, column: 20, scope: !7)
!29 = !DILocation(line: 36, column: 19, scope: !7)
!30 = !DILocation(line: 41, column: 19, scope: !7)
!31 = !DILocation(line: 44, column: 19, scope: !7)
!32 = !DILocation(line: 45, column: 51, scope: !7)
!33 = !DILocation(line: 45, column: 62, scope: !7)
!34 = !DILocation(line: 45, column: 41, scope: !7)
!35 = !DILocation(line: 45, column: 46, scope: !7)
!36 = !DILocation(line: 45, column: 56, scope: !7)
!37 = !DILocation(line: 45, column: 31, scope: !7)
!38 = !DILocation(line: 45, column: 75, scope: !7)
!39 = !DILocation(line: 45, column: 67, scope: !7)
!40 = !DILocation(line: 47, column: 21, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 46, scope: !7)
!43 = !DILocation(line: 51, column: 56, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 75, scope: !7)
!46 = !DILocation(line: 51, column: 67, scope: !7)
!47 = !DILocation(line: 58, column: 46, scope: !7)
!48 = !DILocation(line: 58, column: 56, scope: !7)
!49 = !DILocation(line: 58, column: 31, scope: !7)
!50 = !DILocation(line: 58, column: 67, scope: !7)
!51 = !DILocation(line: 61, column: 21, scope: !7)
!52 = !DILocation(line: 64, column: 20, scope: !7)
!53 = !DILocation(line: 65, column: 45, scope: !7)
!54 = !DILocation(line: 65, column: 55, scope: !7)
!55 = !DILocation(line: 65, column: 31, scope: !7)
!56 = !DILocation(line: 65, column: 74, scope: !7)
!57 = !DILocation(line: 65, column: 66, scope: !7)
!58 = !DILocation(line: 68, column: 46, scope: !7)
!59 = !DILocation(line: 68, column: 31, scope: !7)
!60 = !DILocation(line: 68, column: 65, scope: !7)
!61 = !DILocation(line: 68, column: 57, scope: !7)
!62 = !DILocation(line: 71, column: 42, scope: !7)
!63 = !DILocation(line: 71, column: 52, scope: !7)
!64 = !DILocation(line: 71, column: 31, scope: !7)
!65 = !DILocation(line: 71, column: 63, scope: !7)
!66 = !DILocation(line: 78, column: 43, scope: !7)
!67 = !DILocation(line: 78, column: 53, scope: !7)
!68 = !DILocation(line: 78, column: 31, scope: !7)
!69 = !DILocation(line: 78, column: 64, scope: !7)
!70 = !DILocation(line: 81, column: 43, scope: !7)
!71 = !DILocation(line: 81, column: 53, scope: !7)
!72 = !DILocation(line: 81, column: 31, scope: !7)
!73 = !DILocation(line: 81, column: 64, scope: !7)
!74 = !DILocation(line: 84, column: 43, scope: !7)
!75 = !DILocation(line: 84, column: 53, scope: !7)
!76 = !DILocation(line: 84, column: 31, scope: !7)
!77 = !DILocation(line: 84, column: 64, scope: !7)
!78 = !DILocation(line: 113, column: 20, scope: !7)
!79 = !DILocation(line: 114, column: 27, scope: !7)
!80 = !DILocation(line: 111, column: 20, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!84 = !DILocation(line: 52, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !89)
!89 = !DILocation(line: 59, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !82, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !94)
!94 = !DILocation(line: 66, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !82, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !99)
!99 = !DILocation(line: 69, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !82, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !104)
!104 = !DILocation(line: 72, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !82, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !109)
!109 = !DILocation(line: 79, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !82, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !114)
!114 = !DILocation(line: 82, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !82, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !114)
!118 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !119)
!119 = !DILocation(line: 85, column: 42, scope: !7)
!120 = !DILocation(line: 89, column: 35, scope: !7)
!121 = !DILocation(line: 92, column: 35, scope: !7)
!122 = !DILocation(line: 95, column: 35, scope: !7)
!123 = !DILocation(line: 98, column: 35, scope: !7)
!124 = !DILocation(line: 101, column: 35, scope: !7)
!125 = !DILocation(line: 104, column: 35, scope: !7)
!126 = !DILocation(line: 107, column: 35, scope: !7)
!127 = !DILocation(line: 110, column: 35, scope: !7)
!128 = !DILocation(line: 120, column: 21, scope: !82, inlinedAt: !119)
!129 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !119)
!130 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !119)
!131 = !DILocation(line: 116, column: 20, scope: !7)
!132 = !DILocation(line: 119, column: 20, scope: !7)
!133 = !DILocation(line: 120, column: 20, scope: !7)
!134 = !DILocation(line: 121, column: 20, scope: !7)
!135 = !DILocation(line: 122, column: 20, scope: !7)
!136 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !137)
!137 = !DILocation(line: 124, column: 42, scope: !7)
!138 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !137)
!139 = !DILocation(line: 125, column: 25, scope: !7)
!140 = !DILocation(line: 125, column: 37, scope: !7)
!141 = !DILocation(line: 126, column: 28, scope: !7)
!142 = !DILocation(line: 126, column: 40, scope: !7)
!143 = !DILocation(line: 127, column: 25, scope: !7)
!144 = !DILocation(line: 127, column: 37, scope: !7)
!145 = !DILocation(line: 127, column: 4, scope: !7)
