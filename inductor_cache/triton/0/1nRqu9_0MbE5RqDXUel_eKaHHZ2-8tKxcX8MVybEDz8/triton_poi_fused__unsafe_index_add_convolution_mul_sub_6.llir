; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 2, !dbg !13
  %20 = or disjoint i32 %18, 512, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %21 = sdiv i32 %.frozen, 64, !dbg !14
  %22 = sdiv i32 %20, 64, !dbg !14
  %23 = srem i32 %21, 64, !dbg !15
  %24 = srem i32 %22, 64, !dbg !15
  %25 = mul i32 %21, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %25, !dbg !16
  %26 = srem i32 %19, 64, !dbg !16
  %27 = sdiv i32 %18, 4096, !dbg !17
  %28 = sdiv i32 %20, 4096, !dbg !17
  %29 = srem i32 %27, 16, !dbg !18
  %30 = srem i32 %28, 16, !dbg !18
  %31 = sext i32 %23 to i64, !dbg !19
  %32 = getelementptr i64, ptr addrspace(1) %1, i64 %31, !dbg !19
  %33 = sext i32 %24 to i64, !dbg !19
  %34 = getelementptr i64, ptr addrspace(1) %1, i64 %33, !dbg !19
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !20
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !20
  %43 = sext i32 %.decomposed to i64, !dbg !21
  %44 = getelementptr i64, ptr addrspace(1) %2, i64 %43, !dbg !21
  %45 = sext i32 %26 to i64, !dbg !21
  %46 = getelementptr i64, ptr addrspace(1) %2, i64 %45, !dbg !21
  %47 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !22
  %48 = extractvalue { i64, i64 } %47, 0, !dbg !22
  %49 = extractvalue { i64, i64 } %47, 1, !dbg !22
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !22
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !22
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !22
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !22
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !22
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !22
  %57 = extractvalue { i64, i64 } %56, 0, !dbg !22
  %58 = extractvalue { i64, i64 } %56, 1, !dbg !22
  %59 = sext i32 %29 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !23
  %61 = sext i32 %30 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !24
  %71 = getelementptr i64, ptr addrspace(1) %5, i64 %43, !dbg !25
  %72 = getelementptr i64, ptr addrspace(1) %5, i64 %45, !dbg !25
  %73 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !26
  %74 = extractvalue { i64, i64 } %73, 0, !dbg !26
  %75 = extractvalue { i64, i64 } %73, 1, !dbg !26
  %76 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !26
  %77 = extractvalue { i64, i64 } %76, 0, !dbg !26
  %78 = extractvalue { i64, i64 } %76, 1, !dbg !26
  %79 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !26
  %80 = extractvalue { i64, i64 } %79, 0, !dbg !26
  %81 = extractvalue { i64, i64 } %79, 1, !dbg !26
  %82 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !26
  %83 = extractvalue { i64, i64 } %82, 0, !dbg !26
  %84 = extractvalue { i64, i64 } %82, 1, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !27
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !28
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !28
  %96 = getelementptr i64, ptr addrspace(1) %7, i64 %31, !dbg !29
  %97 = getelementptr i64, ptr addrspace(1) %7, i64 %33, !dbg !29
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !30
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !30
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !30
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !30
  %106 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !31
  %107 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !31
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %109 = bitcast i32 %108 to float, !dbg !32
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %111 = bitcast i32 %110 to float, !dbg !32
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %113 = bitcast i32 %112 to float, !dbg !32
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %115 = bitcast i32 %114 to float, !dbg !32
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !32
  %117 = bitcast i32 %116 to float, !dbg !32
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !32
  %119 = bitcast i32 %118 to float, !dbg !32
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !32
  %121 = bitcast i32 %120 to float, !dbg !32
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !32
  %123 = bitcast i32 %122 to float, !dbg !32
  %124 = sext i32 %18 to i64, !dbg !33
  %125 = getelementptr float, ptr addrspace(1) %9, i64 %124, !dbg !33
  %126 = sext i32 %20 to i64, !dbg !33
  %127 = getelementptr float, ptr addrspace(1) %9, i64 %126, !dbg !33
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !34
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !34
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !34
  %133 = bitcast i32 %129 to float, !dbg !34
  %134 = bitcast i32 %130 to float, !dbg !34
  %135 = bitcast i32 %131 to float, !dbg !34
  %136 = bitcast i32 %132 to float, !dbg !34
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !34
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !34
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !34
  %142 = bitcast i32 %138 to float, !dbg !34
  %143 = bitcast i32 %139 to float, !dbg !34
  %144 = bitcast i32 %140 to float, !dbg !34
  %145 = bitcast i32 %141 to float, !dbg !34
  %146 = getelementptr float, ptr addrspace(1) %10, i64 %59, !dbg !35
  %147 = getelementptr float, ptr addrspace(1) %10, i64 %61, !dbg !35
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !36
  %151 = bitcast i32 %150 to float, !dbg !36
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !36
  %153 = bitcast i32 %152 to float, !dbg !36
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !36
  %155 = bitcast i32 %154 to float, !dbg !36
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !36
  %157 = bitcast i32 %156 to float, !dbg !36
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !36
  %159 = bitcast i32 %158 to float, !dbg !36
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !36
  %161 = bitcast i32 %160 to float, !dbg !36
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !36
  %163 = bitcast i32 %162 to float, !dbg !36
  %164 = add i64 %35, 9, !dbg !37
  %165 = add i64 %39, 9, !dbg !37
  %166 = icmp slt i64 %35, 0, !dbg !38
  %167 = icmp slt i64 %39, 0, !dbg !38
  %168 = select i1 %166, i64 %164, i64 %35, !dbg !39
  %169 = select i1 %167, i64 %165, i64 %39, !dbg !39
  %170 = add i64 %48, 9, !dbg !40
  %171 = add i64 %49, 9, !dbg !40
  %172 = add i64 %51, 9, !dbg !40
  %173 = add i64 %52, 9, !dbg !40
  %174 = add i64 %54, 9, !dbg !40
  %175 = add i64 %55, 9, !dbg !40
  %176 = add i64 %57, 9, !dbg !40
  %177 = add i64 %58, 9, !dbg !40
  %178 = icmp slt i64 %48, 0, !dbg !41
  %179 = icmp slt i64 %49, 0, !dbg !41
  %180 = icmp slt i64 %51, 0, !dbg !41
  %181 = icmp slt i64 %52, 0, !dbg !41
  %182 = icmp slt i64 %54, 0, !dbg !41
  %183 = icmp slt i64 %55, 0, !dbg !41
  %184 = icmp slt i64 %57, 0, !dbg !41
  %185 = icmp slt i64 %58, 0, !dbg !41
  %186 = select i1 %178, i64 %170, i64 %48, !dbg !42
  %187 = select i1 %179, i64 %171, i64 %49, !dbg !42
  %188 = select i1 %180, i64 %172, i64 %51, !dbg !42
  %189 = select i1 %181, i64 %173, i64 %52, !dbg !42
  %190 = select i1 %182, i64 %174, i64 %54, !dbg !42
  %191 = select i1 %183, i64 %175, i64 %55, !dbg !42
  %192 = select i1 %184, i64 %176, i64 %57, !dbg !42
  %193 = select i1 %185, i64 %177, i64 %58, !dbg !42
  %194 = mul i64 %168, 9, !dbg !43
  %195 = mul i64 %169, 9, !dbg !43
  %196 = mul nsw i32 %27, 81, !dbg !44
  %197 = mul nsw i32 %28, 81, !dbg !44
  %198 = sext i32 %196 to i64, !dbg !45
  %199 = sext i32 %197 to i64, !dbg !45
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %186, !dbg !46
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %194, !dbg !46
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %198, !dbg !46
  %203 = getelementptr float, ptr addrspace(1) %3, i64 %187, !dbg !46
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %194, !dbg !46
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %198, !dbg !46
  %206 = getelementptr float, ptr addrspace(1) %3, i64 %188, !dbg !46
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %194, !dbg !46
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %198, !dbg !46
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %189, !dbg !46
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %194, !dbg !46
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %198, !dbg !46
  %212 = getelementptr float, ptr addrspace(1) %3, i64 %190, !dbg !46
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %195, !dbg !46
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %199, !dbg !46
  %215 = getelementptr float, ptr addrspace(1) %3, i64 %191, !dbg !46
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %195, !dbg !46
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %199, !dbg !46
  %218 = getelementptr float, ptr addrspace(1) %3, i64 %192, !dbg !46
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %195, !dbg !46
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %199, !dbg !46
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %193, !dbg !46
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %195, !dbg !46
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %199, !dbg !46
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #1, !dbg !47
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 true) #1, !dbg !47
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #1, !dbg !47
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 true) #1, !dbg !47
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #1, !dbg !47
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 true) #1, !dbg !47
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #1, !dbg !47
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 true) #1, !dbg !47
  %232 = add i64 %74, 9, !dbg !48
  %233 = add i64 %75, 9, !dbg !48
  %234 = add i64 %77, 9, !dbg !48
  %235 = add i64 %78, 9, !dbg !48
  %236 = add i64 %80, 9, !dbg !48
  %237 = add i64 %81, 9, !dbg !48
  %238 = add i64 %83, 9, !dbg !48
  %239 = add i64 %84, 9, !dbg !48
  %240 = icmp slt i64 %74, 0, !dbg !49
  %241 = icmp slt i64 %75, 0, !dbg !49
  %242 = icmp slt i64 %77, 0, !dbg !49
  %243 = icmp slt i64 %78, 0, !dbg !49
  %244 = icmp slt i64 %80, 0, !dbg !49
  %245 = icmp slt i64 %81, 0, !dbg !49
  %246 = icmp slt i64 %83, 0, !dbg !49
  %247 = icmp slt i64 %84, 0, !dbg !49
  %248 = select i1 %240, i64 %232, i64 %74, !dbg !50
  %249 = select i1 %241, i64 %233, i64 %75, !dbg !50
  %250 = select i1 %242, i64 %234, i64 %77, !dbg !50
  %251 = select i1 %243, i64 %235, i64 %78, !dbg !50
  %252 = select i1 %244, i64 %236, i64 %80, !dbg !50
  %253 = select i1 %245, i64 %237, i64 %81, !dbg !50
  %254 = select i1 %246, i64 %238, i64 %83, !dbg !50
  %255 = select i1 %247, i64 %239, i64 %84, !dbg !50
  %256 = getelementptr float, ptr addrspace(1) %3, i64 %248, !dbg !51
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %194, !dbg !51
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %198, !dbg !51
  %259 = getelementptr float, ptr addrspace(1) %3, i64 %249, !dbg !51
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %194, !dbg !51
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %198, !dbg !51
  %262 = getelementptr float, ptr addrspace(1) %3, i64 %250, !dbg !51
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %194, !dbg !51
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %198, !dbg !51
  %265 = getelementptr float, ptr addrspace(1) %3, i64 %251, !dbg !51
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %194, !dbg !51
  %267 = getelementptr float, ptr addrspace(1) %266, i64 %198, !dbg !51
  %268 = getelementptr float, ptr addrspace(1) %3, i64 %252, !dbg !51
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %195, !dbg !51
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %199, !dbg !51
  %271 = getelementptr float, ptr addrspace(1) %3, i64 %253, !dbg !51
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %195, !dbg !51
  %273 = getelementptr float, ptr addrspace(1) %272, i64 %199, !dbg !51
  %274 = getelementptr float, ptr addrspace(1) %3, i64 %254, !dbg !51
  %275 = getelementptr float, ptr addrspace(1) %274, i64 %195, !dbg !51
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %199, !dbg !51
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %255, !dbg !51
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %195, !dbg !51
  %279 = getelementptr float, ptr addrspace(1) %278, i64 %199, !dbg !51
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #1, !dbg !52
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 true) #1, !dbg !52
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 true) #1, !dbg !52
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 true) #1, !dbg !52
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !52
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 true) #1, !dbg !52
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #1, !dbg !52
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 true) #1, !dbg !52
  %288 = add i64 %98, 9, !dbg !53
  %289 = add i64 %102, 9, !dbg !53
  %290 = icmp slt i64 %98, 0, !dbg !54
  %291 = icmp slt i64 %102, 0, !dbg !54
  %292 = select i1 %290, i64 %288, i64 %98, !dbg !55
  %293 = select i1 %291, i64 %289, i64 %102, !dbg !55
  %294 = mul i64 %292, 9, !dbg !56
  %295 = mul i64 %293, 9, !dbg !56
  %296 = getelementptr float, ptr addrspace(1) %200, i64 %294, !dbg !57
  %297 = getelementptr float, ptr addrspace(1) %296, i64 %198, !dbg !57
  %298 = getelementptr float, ptr addrspace(1) %203, i64 %294, !dbg !57
  %299 = getelementptr float, ptr addrspace(1) %298, i64 %198, !dbg !57
  %300 = getelementptr float, ptr addrspace(1) %206, i64 %294, !dbg !57
  %301 = getelementptr float, ptr addrspace(1) %300, i64 %198, !dbg !57
  %302 = getelementptr float, ptr addrspace(1) %209, i64 %294, !dbg !57
  %303 = getelementptr float, ptr addrspace(1) %302, i64 %198, !dbg !57
  %304 = getelementptr float, ptr addrspace(1) %212, i64 %295, !dbg !57
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %199, !dbg !57
  %306 = getelementptr float, ptr addrspace(1) %215, i64 %295, !dbg !57
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %199, !dbg !57
  %308 = getelementptr float, ptr addrspace(1) %218, i64 %295, !dbg !57
  %309 = getelementptr float, ptr addrspace(1) %308, i64 %199, !dbg !57
  %310 = getelementptr float, ptr addrspace(1) %221, i64 %295, !dbg !57
  %311 = getelementptr float, ptr addrspace(1) %310, i64 %199, !dbg !57
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 true) #1, !dbg !58
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 true) #1, !dbg !58
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 true) #1, !dbg !58
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 true) #1, !dbg !58
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 true) #1, !dbg !58
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 true) #1, !dbg !58
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 true) #1, !dbg !58
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 true) #1, !dbg !58
  %320 = getelementptr float, ptr addrspace(1) %256, i64 %294, !dbg !59
  %321 = getelementptr float, ptr addrspace(1) %320, i64 %198, !dbg !59
  %322 = getelementptr float, ptr addrspace(1) %259, i64 %294, !dbg !59
  %323 = getelementptr float, ptr addrspace(1) %322, i64 %198, !dbg !59
  %324 = getelementptr float, ptr addrspace(1) %262, i64 %294, !dbg !59
  %325 = getelementptr float, ptr addrspace(1) %324, i64 %198, !dbg !59
  %326 = getelementptr float, ptr addrspace(1) %265, i64 %294, !dbg !59
  %327 = getelementptr float, ptr addrspace(1) %326, i64 %198, !dbg !59
  %328 = getelementptr float, ptr addrspace(1) %268, i64 %295, !dbg !59
  %329 = getelementptr float, ptr addrspace(1) %328, i64 %199, !dbg !59
  %330 = getelementptr float, ptr addrspace(1) %271, i64 %295, !dbg !59
  %331 = getelementptr float, ptr addrspace(1) %330, i64 %199, !dbg !59
  %332 = getelementptr float, ptr addrspace(1) %274, i64 %295, !dbg !59
  %333 = getelementptr float, ptr addrspace(1) %332, i64 %199, !dbg !59
  %334 = getelementptr float, ptr addrspace(1) %277, i64 %295, !dbg !59
  %335 = getelementptr float, ptr addrspace(1) %334, i64 %199, !dbg !59
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 true) #1, !dbg !60
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %323, i1 true) #1, !dbg !60
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 true) #1, !dbg !60
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 true) #1, !dbg !60
  %340 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 true) #1, !dbg !60
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 true) #1, !dbg !60
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 true) #1, !dbg !60
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 true) #1, !dbg !60
  %344 = insertelement <2 x i32> poison, i32 %312, i64 0, !dbg !58
  %345 = insertelement <2 x i32> %344, i32 %224, i64 1, !dbg !58
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !58
  %347 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !61
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !61
  %349 = shufflevector <2 x float> %348, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %350 = fadd <2 x float> %349, %346, !dbg !61
  %351 = insertelement <2 x i32> poison, i32 %336, i64 0, !dbg !60
  %352 = insertelement <2 x i32> %351, i32 %280, i64 1, !dbg !60
  %353 = bitcast <2 x i32> %352 to <2 x float>, !dbg !60
  %354 = fadd <2 x float> %349, %353, !dbg !62
  %355 = fsub <2 x float> %354, %350, !dbg !63
  %356 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !64
  %357 = bitcast <2 x i32> %356 to <2 x float>, !dbg !64
  %358 = shufflevector <2 x float> %357, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %359 = fmul <2 x float> %355, %358, !dbg !64
  %360 = fadd <2 x float> %350, %359, !dbg !65
  %361 = insertelement <2 x i32> poison, i32 %313, i64 0, !dbg !58
  %362 = insertelement <2 x i32> %361, i32 %225, i64 1, !dbg !58
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !58
  %364 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !61
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !61
  %366 = shufflevector <2 x float> %365, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %367 = fadd <2 x float> %366, %363, !dbg !61
  %368 = insertelement <2 x i32> poison, i32 %337, i64 0, !dbg !60
  %369 = insertelement <2 x i32> %368, i32 %281, i64 1, !dbg !60
  %370 = bitcast <2 x i32> %369 to <2 x float>, !dbg !60
  %371 = fadd <2 x float> %366, %370, !dbg !62
  %372 = fsub <2 x float> %371, %367, !dbg !63
  %373 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !64
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !64
  %375 = shufflevector <2 x float> %374, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %376 = fmul <2 x float> %372, %375, !dbg !64
  %377 = fadd <2 x float> %367, %376, !dbg !65
  %378 = insertelement <2 x i32> poison, i32 %314, i64 0, !dbg !58
  %379 = insertelement <2 x i32> %378, i32 %226, i64 1, !dbg !58
  %380 = bitcast <2 x i32> %379 to <2 x float>, !dbg !58
  %381 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !61
  %382 = bitcast <2 x i32> %381 to <2 x float>, !dbg !61
  %383 = shufflevector <2 x float> %382, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %384 = fadd <2 x float> %383, %380, !dbg !61
  %385 = insertelement <2 x i32> poison, i32 %338, i64 0, !dbg !60
  %386 = insertelement <2 x i32> %385, i32 %282, i64 1, !dbg !60
  %387 = bitcast <2 x i32> %386 to <2 x float>, !dbg !60
  %388 = fadd <2 x float> %383, %387, !dbg !62
  %389 = fsub <2 x float> %388, %384, !dbg !63
  %390 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !64
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !64
  %392 = shufflevector <2 x float> %391, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %393 = fmul <2 x float> %389, %392, !dbg !64
  %394 = fadd <2 x float> %384, %393, !dbg !65
  %395 = insertelement <2 x i32> poison, i32 %315, i64 0, !dbg !58
  %396 = insertelement <2 x i32> %395, i32 %227, i64 1, !dbg !58
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !58
  %398 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !61
  %399 = bitcast <2 x i32> %398 to <2 x float>, !dbg !61
  %400 = shufflevector <2 x float> %399, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %401 = fadd <2 x float> %400, %397, !dbg !61
  %402 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !60
  %403 = insertelement <2 x i32> %402, i32 %283, i64 1, !dbg !60
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !60
  %405 = fadd <2 x float> %400, %404, !dbg !62
  %406 = fsub <2 x float> %405, %401, !dbg !63
  %407 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !64
  %408 = bitcast <2 x i32> %407 to <2 x float>, !dbg !64
  %409 = shufflevector <2 x float> %408, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %410 = fmul <2 x float> %406, %409, !dbg !64
  %411 = fadd <2 x float> %401, %410, !dbg !65
  %412 = insertelement <2 x i32> poison, i32 %316, i64 0, !dbg !58
  %413 = insertelement <2 x i32> %412, i32 %228, i64 1, !dbg !58
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !58
  %415 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !61
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !61
  %417 = shufflevector <2 x float> %416, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %418 = fadd <2 x float> %417, %414, !dbg !61
  %419 = insertelement <2 x i32> poison, i32 %340, i64 0, !dbg !60
  %420 = insertelement <2 x i32> %419, i32 %284, i64 1, !dbg !60
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !60
  %422 = fadd <2 x float> %417, %421, !dbg !62
  %423 = fsub <2 x float> %422, %418, !dbg !63
  %424 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !64
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !64
  %426 = shufflevector <2 x float> %425, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %427 = fmul <2 x float> %423, %426, !dbg !64
  %428 = fadd <2 x float> %418, %427, !dbg !65
  %429 = insertelement <2 x i32> poison, i32 %317, i64 0, !dbg !58
  %430 = insertelement <2 x i32> %429, i32 %229, i64 1, !dbg !58
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !58
  %432 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !61
  %433 = bitcast <2 x i32> %432 to <2 x float>, !dbg !61
  %434 = shufflevector <2 x float> %433, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %435 = fadd <2 x float> %434, %431, !dbg !61
  %436 = insertelement <2 x i32> poison, i32 %341, i64 0, !dbg !60
  %437 = insertelement <2 x i32> %436, i32 %285, i64 1, !dbg !60
  %438 = bitcast <2 x i32> %437 to <2 x float>, !dbg !60
  %439 = fadd <2 x float> %434, %438, !dbg !62
  %440 = fsub <2 x float> %439, %435, !dbg !63
  %441 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !64
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !64
  %443 = shufflevector <2 x float> %442, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %444 = fmul <2 x float> %440, %443, !dbg !64
  %445 = fadd <2 x float> %435, %444, !dbg !65
  %446 = insertelement <2 x i32> poison, i32 %318, i64 0, !dbg !58
  %447 = insertelement <2 x i32> %446, i32 %230, i64 1, !dbg !58
  %448 = bitcast <2 x i32> %447 to <2 x float>, !dbg !58
  %449 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !61
  %450 = bitcast <2 x i32> %449 to <2 x float>, !dbg !61
  %451 = shufflevector <2 x float> %450, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %452 = fadd <2 x float> %451, %448, !dbg !61
  %453 = insertelement <2 x i32> poison, i32 %342, i64 0, !dbg !60
  %454 = insertelement <2 x i32> %453, i32 %286, i64 1, !dbg !60
  %455 = bitcast <2 x i32> %454 to <2 x float>, !dbg !60
  %456 = fadd <2 x float> %451, %455, !dbg !62
  %457 = fsub <2 x float> %456, %452, !dbg !63
  %458 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !64
  %459 = bitcast <2 x i32> %458 to <2 x float>, !dbg !64
  %460 = shufflevector <2 x float> %459, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %461 = fmul <2 x float> %457, %460, !dbg !64
  %462 = fadd <2 x float> %452, %461, !dbg !65
  %463 = insertelement <2 x i32> poison, i32 %319, i64 0, !dbg !58
  %464 = insertelement <2 x i32> %463, i32 %231, i64 1, !dbg !58
  %465 = bitcast <2 x i32> %464 to <2 x float>, !dbg !58
  %466 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !61
  %467 = bitcast <2 x i32> %466 to <2 x float>, !dbg !61
  %468 = shufflevector <2 x float> %467, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %469 = fadd <2 x float> %468, %465, !dbg !61
  %470 = insertelement <2 x i32> poison, i32 %343, i64 0, !dbg !60
  %471 = insertelement <2 x i32> %470, i32 %287, i64 1, !dbg !60
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !60
  %473 = fadd <2 x float> %468, %472, !dbg !62
  %474 = fsub <2 x float> %473, %469, !dbg !63
  %475 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !64
  %476 = bitcast <2 x i32> %475 to <2 x float>, !dbg !64
  %477 = shufflevector <2 x float> %476, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %478 = fmul <2 x float> %474, %477, !dbg !64
  %479 = fadd <2 x float> %469, %478, !dbg !65
  %480 = extractelement <2 x float> %360, i64 0, !dbg !66
  %481 = extractelement <2 x float> %360, i64 1, !dbg !67
  %482 = fsub float %480, %481, !dbg !66
  %483 = extractelement <2 x float> %377, i64 0, !dbg !66
  %484 = extractelement <2 x float> %377, i64 1, !dbg !67
  %485 = fsub float %483, %484, !dbg !66
  %486 = extractelement <2 x float> %394, i64 0, !dbg !66
  %487 = extractelement <2 x float> %394, i64 1, !dbg !67
  %488 = fsub float %486, %487, !dbg !66
  %489 = extractelement <2 x float> %411, i64 0, !dbg !66
  %490 = extractelement <2 x float> %411, i64 1, !dbg !67
  %491 = fsub float %489, %490, !dbg !66
  %492 = extractelement <2 x float> %428, i64 0, !dbg !66
  %493 = extractelement <2 x float> %428, i64 1, !dbg !67
  %494 = fsub float %492, %493, !dbg !66
  %495 = extractelement <2 x float> %445, i64 0, !dbg !66
  %496 = extractelement <2 x float> %445, i64 1, !dbg !67
  %497 = fsub float %495, %496, !dbg !66
  %498 = extractelement <2 x float> %462, i64 0, !dbg !66
  %499 = extractelement <2 x float> %462, i64 1, !dbg !67
  %500 = fsub float %498, %499, !dbg !66
  %501 = extractelement <2 x float> %479, i64 0, !dbg !66
  %502 = extractelement <2 x float> %479, i64 1, !dbg !67
  %503 = fsub float %501, %502, !dbg !66
  %504 = fmul float %482, %109, !dbg !68
  %505 = fmul float %485, %111, !dbg !68
  %506 = fmul float %488, %113, !dbg !68
  %507 = fmul float %491, %115, !dbg !68
  %508 = fmul float %494, %117, !dbg !68
  %509 = fmul float %497, %119, !dbg !68
  %510 = fmul float %500, %121, !dbg !68
  %511 = fmul float %503, %123, !dbg !68
  %512 = fadd float %481, %504, !dbg !67
  %513 = fadd float %484, %505, !dbg !67
  %514 = fadd float %487, %506, !dbg !67
  %515 = fadd float %490, %507, !dbg !67
  %516 = fadd float %493, %508, !dbg !67
  %517 = fadd float %496, %509, !dbg !67
  %518 = fadd float %499, %510, !dbg !67
  %519 = fadd float %502, %511, !dbg !67
  %520 = fadd float %133, %149, !dbg !69
  %521 = fadd float %134, %151, !dbg !69
  %522 = fadd float %135, %153, !dbg !69
  %523 = fadd float %136, %155, !dbg !69
  %524 = fadd float %142, %157, !dbg !69
  %525 = fadd float %143, %159, !dbg !69
  %526 = fadd float %144, %161, !dbg !69
  %527 = fadd float %145, %163, !dbg !69
  %528 = fadd float %520, %512, !dbg !70
  %529 = fadd float %521, %513, !dbg !70
  %530 = fadd float %522, %514, !dbg !70
  %531 = fadd float %523, %515, !dbg !70
  %532 = fadd float %524, %516, !dbg !70
  %533 = fadd float %525, %517, !dbg !70
  %534 = fadd float %526, %518, !dbg !70
  %535 = fadd float %527, %519, !dbg !70
  %536 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !71
  %537 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !71
  %538 = bitcast float %528 to i32, !dbg !72
  %539 = bitcast float %529 to i32, !dbg !72
  %540 = bitcast float %530 to i32, !dbg !72
  %541 = bitcast float %531 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %538, i32 %539, i32 %540, i32 %541, ptr addrspace(1) %536, i1 true) #1, !dbg !72
  %542 = bitcast float %532 to i32, !dbg !72
  %543 = bitcast float %533 to i32, !dbg !72
  %544 = bitcast float %534 to i32, !dbg !72
  %545 = bitcast float %535 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %542, i32 %543, i32 %544, i32 %545, ptr addrspace(1) %537, i1 true) #1, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnuqpty7tu7udp7m4teol5rcayv2n7y2dr2zqqgrrlx3vv3m4ilr.py", directory: "inductor_cache/nu")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_6", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 32, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 18, scope: !7)
!42 = !DILocation(line: 44, column: 32, scope: !7)
!43 = !DILocation(line: 45, column: 39, scope: !7)
!44 = !DILocation(line: 45, column: 49, scope: !7)
!45 = !DILocation(line: 45, column: 46, scope: !7)
!46 = !DILocation(line: 45, column: 30, scope: !7)
!47 = !DILocation(line: 45, column: 54, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 35, scope: !7)
!51 = !DILocation(line: 50, column: 31, scope: !7)
!52 = !DILocation(line: 50, column: 56, scope: !7)
!53 = !DILocation(line: 55, column: 20, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 35, scope: !7)
!56 = !DILocation(line: 58, column: 40, scope: !7)
!57 = !DILocation(line: 58, column: 31, scope: !7)
!58 = !DILocation(line: 58, column: 56, scope: !7)
!59 = !DILocation(line: 60, column: 31, scope: !7)
!60 = !DILocation(line: 60, column: 57, scope: !7)
!61 = !DILocation(line: 59, column: 20, scope: !7)
!62 = !DILocation(line: 61, column: 20, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 66, column: 20, scope: !7)
!69 = !DILocation(line: 68, column: 20, scope: !7)
!70 = !DILocation(line: 69, column: 20, scope: !7)
!71 = !DILocation(line: 70, column: 28, scope: !7)
!72 = !DILocation(line: 70, column: 40, scope: !7)
!73 = !DILocation(line: 70, column: 4, scope: !7)
