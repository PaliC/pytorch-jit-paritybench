; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 255, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 252, !dbg !12
  %12 = or disjoint i32 %7, %9, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %15 = shl i32 %14, 4, !dbg !15
  %.lobit1 = lshr i32 %8, 6, !dbg !16
  %16 = and i32 %.lobit1, 3, !dbg !16
  %17 = or disjoint i32 %15, %16, !dbg !17
  %18 = or disjoint i32 %17, 4, !dbg !17
  %19 = or disjoint i32 %17, 8, !dbg !17
  %20 = or disjoint i32 %17, 12, !dbg !17
  %21 = icmp slt i32 %15, 256, !dbg !18
  %22 = icmp slt i32 %17, 256, !dbg !18
  %23 = icmp slt i32 %18, 256, !dbg !18
  %24 = icmp slt i32 %19, 256, !dbg !18
  %25 = icmp slt i32 %20, 256, !dbg !18
  %26 = sdiv i32 %12, 16, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %27 = sdiv i32 %.frozen, 256, !dbg !20
  %28 = mul i32 %27, 256, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %29 = shl i32 %26, 14, !dbg !22
  %30 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !23
  %31 = insertelement <2 x i32> %30, i32 %26, i64 1, !dbg !23
  %32 = srem <2 x i32> %31, splat (i32 16), !dbg !23
  %33 = extractelement <2 x i32> %32, i64 1, !dbg !24
  %34 = icmp sgt i32 %33, 0, !dbg !25
  %35 = icmp sgt <2 x i32> %32, <i32 0, i32 -1>, !dbg !26
  %36 = extractelement <2 x i1> %35, i64 0, !dbg !27
  %37 = and i1 %36, %34, !dbg !27
  %38 = extractelement <2 x i32> %32, i64 0, !dbg !24
  %39 = shl nsw i32 %38, 9, !dbg !28
  %40 = add i32 %29, %39, !dbg !29
  %41 = add i32 %40, -8448, !dbg !30
  %42 = add i32 %41, %15, !dbg !31
  %43 = add i32 %40, -8444, !dbg !30
  %44 = add i32 %43, %15, !dbg !31
  %45 = add i32 %40, -8440, !dbg !30
  %46 = add i32 %45, %15, !dbg !31
  %47 = add i32 %40, -8436, !dbg !30
  %48 = add i32 %47, %15, !dbg !31
  %49 = sext i32 %42 to i64, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !32
  %51 = sext i32 %44 to i64, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !32
  %53 = sext i32 %46 to i64, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !32
  %55 = sext i32 %48 to i64, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !32
  %57 = and i1 %21, %37, !dbg !33
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57) #2, !dbg !34
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !34
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !34
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !34
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !34
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57) #2, !dbg !34
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !34
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !34
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !34
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !34
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57) #2, !dbg !34
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !34
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !34
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !34
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !34
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57) #2, !dbg !34
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !34
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !34
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !34
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !34
  %78 = icmp sgt i32 %38, -1, !dbg !35
  %79 = and i1 %78, %34, !dbg !36
  %80 = add i32 %40, -8192, !dbg !37
  %81 = add i32 %80, %15, !dbg !38
  %82 = add i32 %40, -8188, !dbg !37
  %83 = add i32 %82, %15, !dbg !38
  %84 = add i32 %40, -8184, !dbg !37
  %85 = add i32 %84, %15, !dbg !38
  %86 = add i32 %40, -8180, !dbg !37
  %87 = add i32 %86, %15, !dbg !38
  %88 = sext i32 %81 to i64, !dbg !39
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !39
  %90 = sext i32 %83 to i64, !dbg !39
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !39
  %92 = sext i32 %85 to i64, !dbg !39
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !39
  %94 = sext i32 %87 to i64, !dbg !39
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !39
  %96 = and i1 %21, %79, !dbg !40
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96) #2, !dbg !41
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !41
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !41
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !41
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !41
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96) #2, !dbg !41
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !41
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !41
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !41
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !41
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96) #2, !dbg !41
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !41
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !41
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !41
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !41
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96) #2, !dbg !41
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !41
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !41
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !41
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !41
  %117 = add i32 %40, -7936, !dbg !42
  %118 = add i32 %117, %15, !dbg !43
  %119 = add i32 %40, -7932, !dbg !42
  %120 = add i32 %119, %15, !dbg !43
  %121 = add i32 %40, -7928, !dbg !42
  %122 = add i32 %121, %15, !dbg !43
  %123 = add i32 %40, -7924, !dbg !42
  %124 = add i32 %123, %15, !dbg !43
  %125 = sext i32 %118 to i64, !dbg !44
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !44
  %127 = sext i32 %120 to i64, !dbg !44
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !44
  %129 = sext i32 %122 to i64, !dbg !44
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !44
  %131 = sext i32 %124 to i64, !dbg !44
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !44
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96) #2, !dbg !45
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !45
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !45
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !45
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !45
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96) #2, !dbg !45
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !45
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !45
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !45
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !45
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %130, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96) #2, !dbg !45
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !45
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !45
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !45
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !45
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %132, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96) #2, !dbg !45
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !45
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !45
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !45
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !45
  %153 = extractelement <2 x i1> %35, i64 1, !dbg !46
  %154 = and i1 %36, %153, !dbg !46
  %155 = add i32 %40, -256, !dbg !47
  %156 = add i32 %155, %15, !dbg !48
  %157 = add i32 %40, -252, !dbg !47
  %158 = add i32 %157, %15, !dbg !48
  %159 = add i32 %40, -248, !dbg !47
  %160 = add i32 %159, %15, !dbg !48
  %161 = add i32 %40, -244, !dbg !47
  %162 = add i32 %161, %15, !dbg !48
  %163 = sext i32 %156 to i64, !dbg !49
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !49
  %165 = sext i32 %158 to i64, !dbg !49
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !49
  %167 = sext i32 %160 to i64, !dbg !49
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !49
  %169 = sext i32 %162 to i64, !dbg !49
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !49
  %171 = and i1 %21, %154, !dbg !50
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %164, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171) #2, !dbg !51
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !51
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !51
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !51
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !51
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %166, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171) #2, !dbg !51
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !51
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !51
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !51
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !51
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %168, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171) #2, !dbg !51
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !51
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !51
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !51
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !51
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %170, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171) #2, !dbg !51
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !51
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !51
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !51
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !51
  %192 = or i32 %33, %38, !dbg !24
  %193 = icmp sgt i32 %192, -1, !dbg !24
  %194 = add i32 %40, %15, !dbg !52
  %195 = or disjoint i32 %40, 4, !dbg !53
  %196 = add i32 %195, %15, !dbg !52
  %197 = or disjoint i32 %40, 8, !dbg !53
  %198 = add i32 %197, %15, !dbg !52
  %199 = or disjoint i32 %40, 12, !dbg !53
  %200 = add i32 %199, %15, !dbg !52
  %201 = sext i32 %194 to i64, !dbg !54
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !54
  %203 = sext i32 %196 to i64, !dbg !54
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !54
  %205 = sext i32 %198 to i64, !dbg !54
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !54
  %207 = sext i32 %200 to i64, !dbg !54
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !54
  %209 = and i1 %21, %193, !dbg !55
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %202, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !56
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !56
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !56
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !56
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !56
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %204, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !56
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !56
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !56
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !56
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !56
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %206, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !56
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !56
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !56
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !56
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !56
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %208, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !56
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !56
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !56
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !56
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !56
  %230 = or disjoint i32 %40, 256, !dbg !57
  %231 = add i32 %230, %15, !dbg !58
  %232 = or disjoint i32 %40, 260, !dbg !57
  %233 = add i32 %232, %15, !dbg !58
  %234 = or disjoint i32 %40, 264, !dbg !57
  %235 = add i32 %234, %15, !dbg !58
  %236 = or disjoint i32 %40, 268, !dbg !57
  %237 = add i32 %236, %15, !dbg !58
  %238 = sext i32 %231 to i64, !dbg !59
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !59
  %240 = sext i32 %233 to i64, !dbg !59
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !59
  %242 = sext i32 %235 to i64, !dbg !59
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !59
  %244 = sext i32 %237 to i64, !dbg !59
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !59
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %239, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !60
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !60
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !60
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !60
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !60
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %241, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !60
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !60
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !60
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !60
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !60
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %243, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !60
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !60
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !60
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !60
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !60
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %245, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !60
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !60
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !60
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !60
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !60
  %266 = add i32 %40, 7936, !dbg !61
  %267 = add i32 %266, %15, !dbg !62
  %268 = add i32 %40, 7940, !dbg !61
  %269 = add i32 %268, %15, !dbg !62
  %270 = add i32 %40, 7944, !dbg !61
  %271 = add i32 %270, %15, !dbg !62
  %272 = add i32 %40, 7948, !dbg !61
  %273 = add i32 %272, %15, !dbg !62
  %274 = sext i32 %267 to i64, !dbg !63
  %275 = getelementptr float, ptr addrspace(1) %0, i64 %274, !dbg !63
  %276 = sext i32 %269 to i64, !dbg !63
  %277 = getelementptr float, ptr addrspace(1) %0, i64 %276, !dbg !63
  %278 = sext i32 %271 to i64, !dbg !63
  %279 = getelementptr float, ptr addrspace(1) %0, i64 %278, !dbg !63
  %280 = sext i32 %273 to i64, !dbg !63
  %281 = getelementptr float, ptr addrspace(1) %0, i64 %280, !dbg !63
  %282 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %275, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171) #2, !dbg !64
  %283 = extractvalue { i32, i32, i32, i32 } %282, 0, !dbg !64
  %284 = extractvalue { i32, i32, i32, i32 } %282, 1, !dbg !64
  %285 = extractvalue { i32, i32, i32, i32 } %282, 2, !dbg !64
  %286 = extractvalue { i32, i32, i32, i32 } %282, 3, !dbg !64
  %287 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %277, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171) #2, !dbg !64
  %288 = extractvalue { i32, i32, i32, i32 } %287, 0, !dbg !64
  %289 = extractvalue { i32, i32, i32, i32 } %287, 1, !dbg !64
  %290 = extractvalue { i32, i32, i32, i32 } %287, 2, !dbg !64
  %291 = extractvalue { i32, i32, i32, i32 } %287, 3, !dbg !64
  %292 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %279, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171) #2, !dbg !64
  %293 = extractvalue { i32, i32, i32, i32 } %292, 0, !dbg !64
  %294 = extractvalue { i32, i32, i32, i32 } %292, 1, !dbg !64
  %295 = extractvalue { i32, i32, i32, i32 } %292, 2, !dbg !64
  %296 = extractvalue { i32, i32, i32, i32 } %292, 3, !dbg !64
  %297 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %281, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171, i32 -8388608, i1 %171) #2, !dbg !64
  %298 = extractvalue { i32, i32, i32, i32 } %297, 0, !dbg !64
  %299 = extractvalue { i32, i32, i32, i32 } %297, 1, !dbg !64
  %300 = extractvalue { i32, i32, i32, i32 } %297, 2, !dbg !64
  %301 = extractvalue { i32, i32, i32, i32 } %297, 3, !dbg !64
  %302 = add i32 %40, 8192, !dbg !65
  %303 = add i32 %302, %15, !dbg !66
  %304 = add i32 %40, 8196, !dbg !65
  %305 = add i32 %304, %15, !dbg !66
  %306 = add i32 %40, 8200, !dbg !65
  %307 = add i32 %306, %15, !dbg !66
  %308 = add i32 %40, 8204, !dbg !65
  %309 = add i32 %308, %15, !dbg !66
  %310 = sext i32 %303 to i64, !dbg !67
  %311 = getelementptr float, ptr addrspace(1) %0, i64 %310, !dbg !67
  %312 = sext i32 %305 to i64, !dbg !67
  %313 = getelementptr float, ptr addrspace(1) %0, i64 %312, !dbg !67
  %314 = sext i32 %307 to i64, !dbg !67
  %315 = getelementptr float, ptr addrspace(1) %0, i64 %314, !dbg !67
  %316 = sext i32 %309 to i64, !dbg !67
  %317 = getelementptr float, ptr addrspace(1) %0, i64 %316, !dbg !67
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %311, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !68
  %319 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !68
  %320 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !68
  %321 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !68
  %322 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !68
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %313, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !68
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !68
  %325 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !68
  %326 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !68
  %327 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !68
  %328 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %315, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !68
  %329 = extractvalue { i32, i32, i32, i32 } %328, 0, !dbg !68
  %330 = extractvalue { i32, i32, i32, i32 } %328, 1, !dbg !68
  %331 = extractvalue { i32, i32, i32, i32 } %328, 2, !dbg !68
  %332 = extractvalue { i32, i32, i32, i32 } %328, 3, !dbg !68
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %317, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !68
  %334 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !68
  %335 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !68
  %336 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !68
  %337 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !68
  %338 = add i32 %40, 8448, !dbg !69
  %339 = add i32 %338, %15, !dbg !70
  %340 = add i32 %40, 8452, !dbg !69
  %341 = add i32 %340, %15, !dbg !70
  %342 = add i32 %40, 8456, !dbg !69
  %343 = add i32 %342, %15, !dbg !70
  %344 = add i32 %40, 8460, !dbg !69
  %345 = add i32 %344, %15, !dbg !70
  %346 = sext i32 %339 to i64, !dbg !71
  %347 = getelementptr float, ptr addrspace(1) %0, i64 %346, !dbg !71
  %348 = sext i32 %341 to i64, !dbg !71
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !71
  %350 = sext i32 %343 to i64, !dbg !71
  %351 = getelementptr float, ptr addrspace(1) %0, i64 %350, !dbg !71
  %352 = sext i32 %345 to i64, !dbg !71
  %353 = getelementptr float, ptr addrspace(1) %0, i64 %352, !dbg !71
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %347, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !72
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !72
  %356 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !72
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !72
  %358 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !72
  %359 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %349, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !72
  %360 = extractvalue { i32, i32, i32, i32 } %359, 0, !dbg !72
  %361 = extractvalue { i32, i32, i32, i32 } %359, 1, !dbg !72
  %362 = extractvalue { i32, i32, i32, i32 } %359, 2, !dbg !72
  %363 = extractvalue { i32, i32, i32, i32 } %359, 3, !dbg !72
  %364 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %351, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !72
  %365 = extractvalue { i32, i32, i32, i32 } %364, 0, !dbg !72
  %366 = extractvalue { i32, i32, i32, i32 } %364, 1, !dbg !72
  %367 = extractvalue { i32, i32, i32, i32 } %364, 2, !dbg !72
  %368 = extractvalue { i32, i32, i32, i32 } %364, 3, !dbg !72
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %353, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209, i32 -8388608, i1 %209) #2, !dbg !72
  %370 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !72
  %371 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !72
  %372 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !72
  %373 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !72
  %374 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !34
  %375 = insertelement <4 x i32> %374, i32 %60, i64 1, !dbg !34
  %376 = insertelement <4 x i32> %375, i32 %61, i64 2, !dbg !34
  %377 = insertelement <4 x i32> %376, i32 %62, i64 3, !dbg !34
  %378 = bitcast <4 x i32> %377 to <4 x float>, !dbg !34
  %379 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !41
  %380 = insertelement <4 x i32> %379, i32 %99, i64 1, !dbg !41
  %381 = insertelement <4 x i32> %380, i32 %100, i64 2, !dbg !41
  %382 = insertelement <4 x i32> %381, i32 %101, i64 3, !dbg !41
  %383 = bitcast <4 x i32> %382 to <4 x float>, !dbg !41
  %384 = fcmp ogt <4 x float> %383, %378, !dbg !73
  %385 = fcmp uno <4 x float> %383, zeroinitializer, !dbg !77
  %386 = or <4 x i1> %384, %385, !dbg !78
  %.v = select <4 x i1> %386, <4 x i32> %382, <4 x i32> %377, !dbg !79
  %387 = bitcast <4 x i32> %.v to <4 x float>, !dbg !79
  %388 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !45
  %389 = insertelement <4 x i32> %388, i32 %135, i64 1, !dbg !45
  %390 = insertelement <4 x i32> %389, i32 %136, i64 2, !dbg !45
  %391 = insertelement <4 x i32> %390, i32 %137, i64 3, !dbg !45
  %392 = bitcast <4 x i32> %391 to <4 x float>, !dbg !45
  %393 = fcmp olt <4 x float> %387, %392, !dbg !80
  %394 = fcmp uno <4 x float> %392, zeroinitializer, !dbg !82
  %395 = or <4 x i1> %393, %394, !dbg !83
  %.v32 = select <4 x i1> %395, <4 x i32> %391, <4 x i32> %.v, !dbg !84
  %396 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !84
  %397 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !51
  %398 = insertelement <4 x i32> %397, i32 %174, i64 1, !dbg !51
  %399 = insertelement <4 x i32> %398, i32 %175, i64 2, !dbg !51
  %400 = insertelement <4 x i32> %399, i32 %176, i64 3, !dbg !51
  %401 = bitcast <4 x i32> %400 to <4 x float>, !dbg !51
  %402 = fcmp olt <4 x float> %396, %401, !dbg !85
  %403 = fcmp uno <4 x float> %401, zeroinitializer, !dbg !87
  %404 = or <4 x i1> %402, %403, !dbg !88
  %.v33 = select <4 x i1> %404, <4 x i32> %400, <4 x i32> %.v32, !dbg !89
  %405 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !89
  %406 = insertelement <4 x i32> poison, i32 %211, i64 0, !dbg !56
  %407 = insertelement <4 x i32> %406, i32 %212, i64 1, !dbg !56
  %408 = insertelement <4 x i32> %407, i32 %213, i64 2, !dbg !56
  %409 = insertelement <4 x i32> %408, i32 %214, i64 3, !dbg !56
  %410 = bitcast <4 x i32> %409 to <4 x float>, !dbg !56
  %411 = fcmp olt <4 x float> %405, %410, !dbg !90
  %412 = fcmp uno <4 x float> %410, zeroinitializer, !dbg !92
  %413 = or <4 x i1> %411, %412, !dbg !93
  %.v34 = select <4 x i1> %413, <4 x i32> %409, <4 x i32> %.v33, !dbg !94
  %414 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !94
  %415 = insertelement <4 x i32> poison, i32 %247, i64 0, !dbg !60
  %416 = insertelement <4 x i32> %415, i32 %248, i64 1, !dbg !60
  %417 = insertelement <4 x i32> %416, i32 %249, i64 2, !dbg !60
  %418 = insertelement <4 x i32> %417, i32 %250, i64 3, !dbg !60
  %419 = bitcast <4 x i32> %418 to <4 x float>, !dbg !60
  %420 = fcmp olt <4 x float> %414, %419, !dbg !95
  %421 = fcmp uno <4 x float> %419, zeroinitializer, !dbg !97
  %422 = or <4 x i1> %420, %421, !dbg !98
  %.v35 = select <4 x i1> %422, <4 x i32> %418, <4 x i32> %.v34, !dbg !99
  %423 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !99
  %424 = insertelement <4 x i32> poison, i32 %283, i64 0, !dbg !64
  %425 = insertelement <4 x i32> %424, i32 %284, i64 1, !dbg !64
  %426 = insertelement <4 x i32> %425, i32 %285, i64 2, !dbg !64
  %427 = insertelement <4 x i32> %426, i32 %286, i64 3, !dbg !64
  %428 = bitcast <4 x i32> %427 to <4 x float>, !dbg !64
  %429 = fcmp olt <4 x float> %423, %428, !dbg !100
  %430 = fcmp uno <4 x float> %428, zeroinitializer, !dbg !102
  %431 = or <4 x i1> %429, %430, !dbg !103
  %.v36 = select <4 x i1> %431, <4 x i32> %427, <4 x i32> %.v35, !dbg !104
  %432 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !104
  %433 = insertelement <4 x i32> poison, i32 %319, i64 0, !dbg !68
  %434 = insertelement <4 x i32> %433, i32 %320, i64 1, !dbg !68
  %435 = insertelement <4 x i32> %434, i32 %321, i64 2, !dbg !68
  %436 = insertelement <4 x i32> %435, i32 %322, i64 3, !dbg !68
  %437 = bitcast <4 x i32> %436 to <4 x float>, !dbg !68
  %438 = fcmp olt <4 x float> %432, %437, !dbg !105
  %439 = fcmp uno <4 x float> %437, zeroinitializer, !dbg !107
  %440 = or <4 x i1> %438, %439, !dbg !108
  %.v37 = select <4 x i1> %440, <4 x i32> %436, <4 x i32> %.v36, !dbg !109
  %441 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !109
  %442 = insertelement <4 x i32> poison, i32 %355, i64 0, !dbg !72
  %443 = insertelement <4 x i32> %442, i32 %356, i64 1, !dbg !72
  %444 = insertelement <4 x i32> %443, i32 %357, i64 2, !dbg !72
  %445 = insertelement <4 x i32> %444, i32 %358, i64 3, !dbg !72
  %446 = bitcast <4 x i32> %445 to <4 x float>, !dbg !72
  %447 = fcmp olt <4 x float> %441, %446, !dbg !110
  %448 = bitcast i32 %355 to float, !dbg !112
  %449 = fcmp uno float %448, 0.000000e+00, !dbg !112
  %450 = bitcast i32 %356 to float, !dbg !112
  %451 = fcmp uno float %450, 0.000000e+00, !dbg !112
  %452 = bitcast i32 %357 to float, !dbg !112
  %453 = fcmp uno float %452, 0.000000e+00, !dbg !112
  %454 = bitcast i32 %358 to float, !dbg !112
  %455 = fcmp uno float %454, 0.000000e+00, !dbg !112
  %456 = extractelement <4 x i1> %447, i64 0, !dbg !113
  %457 = or i1 %456, %449, !dbg !113
  %458 = extractelement <4 x i1> %447, i64 1, !dbg !113
  %459 = or i1 %458, %451, !dbg !113
  %460 = extractelement <4 x i1> %447, i64 2, !dbg !113
  %461 = or i1 %460, %453, !dbg !113
  %462 = extractelement <4 x i1> %447, i64 3, !dbg !113
  %463 = or i1 %462, %455, !dbg !113
  %464 = zext <4 x i1> %384 to <4 x i8>, !dbg !114
  %465 = select <4 x i1> %393, <4 x i8> splat (i8 2), <4 x i8> %464, !dbg !115
  %466 = select <4 x i1> %402, <4 x i8> splat (i8 3), <4 x i8> %465, !dbg !116
  %467 = select <4 x i1> %411, <4 x i8> splat (i8 4), <4 x i8> %466, !dbg !117
  %468 = select <4 x i1> %420, <4 x i8> splat (i8 5), <4 x i8> %467, !dbg !118
  %469 = select <4 x i1> %429, <4 x i8> splat (i8 6), <4 x i8> %468, !dbg !119
  %470 = select <4 x i1> %438, <4 x i8> splat (i8 7), <4 x i8> %469, !dbg !120
  %471 = select <4 x i1> %447, <4 x i8> splat (i8 8), <4 x i8> %470, !dbg !121
  %472 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !34
  %473 = insertelement <4 x i32> %472, i32 %65, i64 1, !dbg !34
  %474 = insertelement <4 x i32> %473, i32 %66, i64 2, !dbg !34
  %475 = insertelement <4 x i32> %474, i32 %67, i64 3, !dbg !34
  %476 = bitcast <4 x i32> %475 to <4 x float>, !dbg !34
  %477 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !41
  %478 = insertelement <4 x i32> %477, i32 %104, i64 1, !dbg !41
  %479 = insertelement <4 x i32> %478, i32 %105, i64 2, !dbg !41
  %480 = insertelement <4 x i32> %479, i32 %106, i64 3, !dbg !41
  %481 = bitcast <4 x i32> %480 to <4 x float>, !dbg !41
  %482 = fcmp ogt <4 x float> %481, %476, !dbg !73
  %483 = fcmp uno <4 x float> %481, zeroinitializer, !dbg !77
  %484 = or <4 x i1> %482, %483, !dbg !78
  %.v38 = select <4 x i1> %484, <4 x i32> %480, <4 x i32> %475, !dbg !79
  %485 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !79
  %486 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !45
  %487 = insertelement <4 x i32> %486, i32 %140, i64 1, !dbg !45
  %488 = insertelement <4 x i32> %487, i32 %141, i64 2, !dbg !45
  %489 = insertelement <4 x i32> %488, i32 %142, i64 3, !dbg !45
  %490 = bitcast <4 x i32> %489 to <4 x float>, !dbg !45
  %491 = fcmp olt <4 x float> %485, %490, !dbg !80
  %492 = fcmp uno <4 x float> %490, zeroinitializer, !dbg !82
  %493 = or <4 x i1> %491, %492, !dbg !83
  %.v39 = select <4 x i1> %493, <4 x i32> %489, <4 x i32> %.v38, !dbg !84
  %494 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !84
  %495 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !51
  %496 = insertelement <4 x i32> %495, i32 %179, i64 1, !dbg !51
  %497 = insertelement <4 x i32> %496, i32 %180, i64 2, !dbg !51
  %498 = insertelement <4 x i32> %497, i32 %181, i64 3, !dbg !51
  %499 = bitcast <4 x i32> %498 to <4 x float>, !dbg !51
  %500 = fcmp olt <4 x float> %494, %499, !dbg !85
  %501 = fcmp uno <4 x float> %499, zeroinitializer, !dbg !87
  %502 = or <4 x i1> %500, %501, !dbg !88
  %.v40 = select <4 x i1> %502, <4 x i32> %498, <4 x i32> %.v39, !dbg !89
  %503 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !89
  %504 = insertelement <4 x i32> poison, i32 %216, i64 0, !dbg !56
  %505 = insertelement <4 x i32> %504, i32 %217, i64 1, !dbg !56
  %506 = insertelement <4 x i32> %505, i32 %218, i64 2, !dbg !56
  %507 = insertelement <4 x i32> %506, i32 %219, i64 3, !dbg !56
  %508 = bitcast <4 x i32> %507 to <4 x float>, !dbg !56
  %509 = fcmp olt <4 x float> %503, %508, !dbg !90
  %510 = fcmp uno <4 x float> %508, zeroinitializer, !dbg !92
  %511 = or <4 x i1> %509, %510, !dbg !93
  %.v41 = select <4 x i1> %511, <4 x i32> %507, <4 x i32> %.v40, !dbg !94
  %512 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !94
  %513 = insertelement <4 x i32> poison, i32 %252, i64 0, !dbg !60
  %514 = insertelement <4 x i32> %513, i32 %253, i64 1, !dbg !60
  %515 = insertelement <4 x i32> %514, i32 %254, i64 2, !dbg !60
  %516 = insertelement <4 x i32> %515, i32 %255, i64 3, !dbg !60
  %517 = bitcast <4 x i32> %516 to <4 x float>, !dbg !60
  %518 = fcmp olt <4 x float> %512, %517, !dbg !95
  %519 = fcmp uno <4 x float> %517, zeroinitializer, !dbg !97
  %520 = or <4 x i1> %518, %519, !dbg !98
  %.v42 = select <4 x i1> %520, <4 x i32> %516, <4 x i32> %.v41, !dbg !99
  %521 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !99
  %522 = insertelement <4 x i32> poison, i32 %288, i64 0, !dbg !64
  %523 = insertelement <4 x i32> %522, i32 %289, i64 1, !dbg !64
  %524 = insertelement <4 x i32> %523, i32 %290, i64 2, !dbg !64
  %525 = insertelement <4 x i32> %524, i32 %291, i64 3, !dbg !64
  %526 = bitcast <4 x i32> %525 to <4 x float>, !dbg !64
  %527 = fcmp olt <4 x float> %521, %526, !dbg !100
  %528 = fcmp uno <4 x float> %526, zeroinitializer, !dbg !102
  %529 = or <4 x i1> %527, %528, !dbg !103
  %.v43 = select <4 x i1> %529, <4 x i32> %525, <4 x i32> %.v42, !dbg !104
  %530 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !104
  %531 = insertelement <4 x i32> poison, i32 %324, i64 0, !dbg !68
  %532 = insertelement <4 x i32> %531, i32 %325, i64 1, !dbg !68
  %533 = insertelement <4 x i32> %532, i32 %326, i64 2, !dbg !68
  %534 = insertelement <4 x i32> %533, i32 %327, i64 3, !dbg !68
  %535 = bitcast <4 x i32> %534 to <4 x float>, !dbg !68
  %536 = fcmp olt <4 x float> %530, %535, !dbg !105
  %537 = fcmp uno <4 x float> %535, zeroinitializer, !dbg !107
  %538 = or <4 x i1> %536, %537, !dbg !108
  %.v44 = select <4 x i1> %538, <4 x i32> %534, <4 x i32> %.v43, !dbg !109
  %539 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !109
  %540 = insertelement <4 x i32> poison, i32 %360, i64 0, !dbg !72
  %541 = insertelement <4 x i32> %540, i32 %361, i64 1, !dbg !72
  %542 = insertelement <4 x i32> %541, i32 %362, i64 2, !dbg !72
  %543 = insertelement <4 x i32> %542, i32 %363, i64 3, !dbg !72
  %544 = bitcast <4 x i32> %543 to <4 x float>, !dbg !72
  %545 = fcmp olt <4 x float> %539, %544, !dbg !110
  %546 = bitcast i32 %360 to float, !dbg !112
  %547 = fcmp uno float %546, 0.000000e+00, !dbg !112
  %548 = bitcast i32 %361 to float, !dbg !112
  %549 = fcmp uno float %548, 0.000000e+00, !dbg !112
  %550 = bitcast i32 %362 to float, !dbg !112
  %551 = fcmp uno float %550, 0.000000e+00, !dbg !112
  %552 = bitcast i32 %363 to float, !dbg !112
  %553 = fcmp uno float %552, 0.000000e+00, !dbg !112
  %554 = extractelement <4 x i1> %545, i64 0, !dbg !113
  %555 = or i1 %554, %547, !dbg !113
  %556 = extractelement <4 x i1> %545, i64 1, !dbg !113
  %557 = or i1 %556, %549, !dbg !113
  %558 = extractelement <4 x i1> %545, i64 2, !dbg !113
  %559 = or i1 %558, %551, !dbg !113
  %560 = extractelement <4 x i1> %545, i64 3, !dbg !113
  %561 = or i1 %560, %553, !dbg !113
  %562 = zext <4 x i1> %482 to <4 x i8>, !dbg !114
  %563 = select <4 x i1> %491, <4 x i8> splat (i8 2), <4 x i8> %562, !dbg !115
  %564 = select <4 x i1> %500, <4 x i8> splat (i8 3), <4 x i8> %563, !dbg !116
  %565 = select <4 x i1> %509, <4 x i8> splat (i8 4), <4 x i8> %564, !dbg !117
  %566 = select <4 x i1> %518, <4 x i8> splat (i8 5), <4 x i8> %565, !dbg !118
  %567 = select <4 x i1> %527, <4 x i8> splat (i8 6), <4 x i8> %566, !dbg !119
  %568 = select <4 x i1> %536, <4 x i8> splat (i8 7), <4 x i8> %567, !dbg !120
  %569 = select <4 x i1> %545, <4 x i8> splat (i8 8), <4 x i8> %568, !dbg !121
  %570 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !34
  %571 = insertelement <4 x i32> %570, i32 %70, i64 1, !dbg !34
  %572 = insertelement <4 x i32> %571, i32 %71, i64 2, !dbg !34
  %573 = insertelement <4 x i32> %572, i32 %72, i64 3, !dbg !34
  %574 = bitcast <4 x i32> %573 to <4 x float>, !dbg !34
  %575 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !41
  %576 = insertelement <4 x i32> %575, i32 %109, i64 1, !dbg !41
  %577 = insertelement <4 x i32> %576, i32 %110, i64 2, !dbg !41
  %578 = insertelement <4 x i32> %577, i32 %111, i64 3, !dbg !41
  %579 = bitcast <4 x i32> %578 to <4 x float>, !dbg !41
  %580 = fcmp ogt <4 x float> %579, %574, !dbg !73
  %581 = fcmp uno <4 x float> %579, zeroinitializer, !dbg !77
  %582 = or <4 x i1> %580, %581, !dbg !78
  %.v45 = select <4 x i1> %582, <4 x i32> %578, <4 x i32> %573, !dbg !79
  %583 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !79
  %584 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !45
  %585 = insertelement <4 x i32> %584, i32 %145, i64 1, !dbg !45
  %586 = insertelement <4 x i32> %585, i32 %146, i64 2, !dbg !45
  %587 = insertelement <4 x i32> %586, i32 %147, i64 3, !dbg !45
  %588 = bitcast <4 x i32> %587 to <4 x float>, !dbg !45
  %589 = fcmp olt <4 x float> %583, %588, !dbg !80
  %590 = fcmp uno <4 x float> %588, zeroinitializer, !dbg !82
  %591 = or <4 x i1> %589, %590, !dbg !83
  %.v46 = select <4 x i1> %591, <4 x i32> %587, <4 x i32> %.v45, !dbg !84
  %592 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !84
  %593 = insertelement <4 x i32> poison, i32 %183, i64 0, !dbg !51
  %594 = insertelement <4 x i32> %593, i32 %184, i64 1, !dbg !51
  %595 = insertelement <4 x i32> %594, i32 %185, i64 2, !dbg !51
  %596 = insertelement <4 x i32> %595, i32 %186, i64 3, !dbg !51
  %597 = bitcast <4 x i32> %596 to <4 x float>, !dbg !51
  %598 = fcmp olt <4 x float> %592, %597, !dbg !85
  %599 = fcmp uno <4 x float> %597, zeroinitializer, !dbg !87
  %600 = or <4 x i1> %598, %599, !dbg !88
  %.v47 = select <4 x i1> %600, <4 x i32> %596, <4 x i32> %.v46, !dbg !89
  %601 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !89
  %602 = insertelement <4 x i32> poison, i32 %221, i64 0, !dbg !56
  %603 = insertelement <4 x i32> %602, i32 %222, i64 1, !dbg !56
  %604 = insertelement <4 x i32> %603, i32 %223, i64 2, !dbg !56
  %605 = insertelement <4 x i32> %604, i32 %224, i64 3, !dbg !56
  %606 = bitcast <4 x i32> %605 to <4 x float>, !dbg !56
  %607 = fcmp olt <4 x float> %601, %606, !dbg !90
  %608 = fcmp uno <4 x float> %606, zeroinitializer, !dbg !92
  %609 = or <4 x i1> %607, %608, !dbg !93
  %.v48 = select <4 x i1> %609, <4 x i32> %605, <4 x i32> %.v47, !dbg !94
  %610 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !94
  %611 = insertelement <4 x i32> poison, i32 %257, i64 0, !dbg !60
  %612 = insertelement <4 x i32> %611, i32 %258, i64 1, !dbg !60
  %613 = insertelement <4 x i32> %612, i32 %259, i64 2, !dbg !60
  %614 = insertelement <4 x i32> %613, i32 %260, i64 3, !dbg !60
  %615 = bitcast <4 x i32> %614 to <4 x float>, !dbg !60
  %616 = fcmp olt <4 x float> %610, %615, !dbg !95
  %617 = fcmp uno <4 x float> %615, zeroinitializer, !dbg !97
  %618 = or <4 x i1> %616, %617, !dbg !98
  %.v49 = select <4 x i1> %618, <4 x i32> %614, <4 x i32> %.v48, !dbg !99
  %619 = bitcast <4 x i32> %.v49 to <4 x float>, !dbg !99
  %620 = insertelement <4 x i32> poison, i32 %293, i64 0, !dbg !64
  %621 = insertelement <4 x i32> %620, i32 %294, i64 1, !dbg !64
  %622 = insertelement <4 x i32> %621, i32 %295, i64 2, !dbg !64
  %623 = insertelement <4 x i32> %622, i32 %296, i64 3, !dbg !64
  %624 = bitcast <4 x i32> %623 to <4 x float>, !dbg !64
  %625 = fcmp olt <4 x float> %619, %624, !dbg !100
  %626 = fcmp uno <4 x float> %624, zeroinitializer, !dbg !102
  %627 = or <4 x i1> %625, %626, !dbg !103
  %.v50 = select <4 x i1> %627, <4 x i32> %623, <4 x i32> %.v49, !dbg !104
  %628 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !104
  %629 = insertelement <4 x i32> poison, i32 %329, i64 0, !dbg !68
  %630 = insertelement <4 x i32> %629, i32 %330, i64 1, !dbg !68
  %631 = insertelement <4 x i32> %630, i32 %331, i64 2, !dbg !68
  %632 = insertelement <4 x i32> %631, i32 %332, i64 3, !dbg !68
  %633 = bitcast <4 x i32> %632 to <4 x float>, !dbg !68
  %634 = fcmp olt <4 x float> %628, %633, !dbg !105
  %635 = fcmp uno <4 x float> %633, zeroinitializer, !dbg !107
  %636 = or <4 x i1> %634, %635, !dbg !108
  %.v51 = select <4 x i1> %636, <4 x i32> %632, <4 x i32> %.v50, !dbg !109
  %637 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !109
  %638 = insertelement <4 x i32> poison, i32 %365, i64 0, !dbg !72
  %639 = insertelement <4 x i32> %638, i32 %366, i64 1, !dbg !72
  %640 = insertelement <4 x i32> %639, i32 %367, i64 2, !dbg !72
  %641 = insertelement <4 x i32> %640, i32 %368, i64 3, !dbg !72
  %642 = bitcast <4 x i32> %641 to <4 x float>, !dbg !72
  %643 = fcmp olt <4 x float> %637, %642, !dbg !110
  %644 = bitcast i32 %365 to float, !dbg !112
  %645 = fcmp uno float %644, 0.000000e+00, !dbg !112
  %646 = bitcast i32 %366 to float, !dbg !112
  %647 = fcmp uno float %646, 0.000000e+00, !dbg !112
  %648 = bitcast i32 %367 to float, !dbg !112
  %649 = fcmp uno float %648, 0.000000e+00, !dbg !112
  %650 = bitcast i32 %368 to float, !dbg !112
  %651 = fcmp uno float %650, 0.000000e+00, !dbg !112
  %652 = extractelement <4 x i1> %643, i64 0, !dbg !113
  %653 = or i1 %652, %645, !dbg !113
  %654 = extractelement <4 x i1> %643, i64 1, !dbg !113
  %655 = or i1 %654, %647, !dbg !113
  %656 = extractelement <4 x i1> %643, i64 2, !dbg !113
  %657 = or i1 %656, %649, !dbg !113
  %658 = extractelement <4 x i1> %643, i64 3, !dbg !113
  %659 = or i1 %658, %651, !dbg !113
  %660 = zext <4 x i1> %580 to <4 x i8>, !dbg !114
  %661 = select <4 x i1> %589, <4 x i8> splat (i8 2), <4 x i8> %660, !dbg !115
  %662 = select <4 x i1> %598, <4 x i8> splat (i8 3), <4 x i8> %661, !dbg !116
  %663 = select <4 x i1> %607, <4 x i8> splat (i8 4), <4 x i8> %662, !dbg !117
  %664 = select <4 x i1> %616, <4 x i8> splat (i8 5), <4 x i8> %663, !dbg !118
  %665 = select <4 x i1> %625, <4 x i8> splat (i8 6), <4 x i8> %664, !dbg !119
  %666 = select <4 x i1> %634, <4 x i8> splat (i8 7), <4 x i8> %665, !dbg !120
  %667 = select <4 x i1> %643, <4 x i8> splat (i8 8), <4 x i8> %666, !dbg !121
  %668 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !34
  %669 = insertelement <4 x i32> %668, i32 %75, i64 1, !dbg !34
  %670 = insertelement <4 x i32> %669, i32 %76, i64 2, !dbg !34
  %671 = insertelement <4 x i32> %670, i32 %77, i64 3, !dbg !34
  %672 = bitcast <4 x i32> %671 to <4 x float>, !dbg !34
  %673 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !41
  %674 = insertelement <4 x i32> %673, i32 %114, i64 1, !dbg !41
  %675 = insertelement <4 x i32> %674, i32 %115, i64 2, !dbg !41
  %676 = insertelement <4 x i32> %675, i32 %116, i64 3, !dbg !41
  %677 = bitcast <4 x i32> %676 to <4 x float>, !dbg !41
  %678 = fcmp ogt <4 x float> %677, %672, !dbg !73
  %679 = fcmp uno <4 x float> %677, zeroinitializer, !dbg !77
  %680 = or <4 x i1> %678, %679, !dbg !78
  %.v52 = select <4 x i1> %680, <4 x i32> %676, <4 x i32> %671, !dbg !79
  %681 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !79
  %682 = insertelement <4 x i32> poison, i32 %149, i64 0, !dbg !45
  %683 = insertelement <4 x i32> %682, i32 %150, i64 1, !dbg !45
  %684 = insertelement <4 x i32> %683, i32 %151, i64 2, !dbg !45
  %685 = insertelement <4 x i32> %684, i32 %152, i64 3, !dbg !45
  %686 = bitcast <4 x i32> %685 to <4 x float>, !dbg !45
  %687 = fcmp olt <4 x float> %681, %686, !dbg !80
  %688 = fcmp uno <4 x float> %686, zeroinitializer, !dbg !82
  %689 = or <4 x i1> %687, %688, !dbg !83
  %.v53 = select <4 x i1> %689, <4 x i32> %685, <4 x i32> %.v52, !dbg !84
  %690 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !84
  %691 = insertelement <4 x i32> poison, i32 %188, i64 0, !dbg !51
  %692 = insertelement <4 x i32> %691, i32 %189, i64 1, !dbg !51
  %693 = insertelement <4 x i32> %692, i32 %190, i64 2, !dbg !51
  %694 = insertelement <4 x i32> %693, i32 %191, i64 3, !dbg !51
  %695 = bitcast <4 x i32> %694 to <4 x float>, !dbg !51
  %696 = fcmp olt <4 x float> %690, %695, !dbg !85
  %697 = fcmp uno <4 x float> %695, zeroinitializer, !dbg !87
  %698 = or <4 x i1> %696, %697, !dbg !88
  %.v54 = select <4 x i1> %698, <4 x i32> %694, <4 x i32> %.v53, !dbg !89
  %699 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !89
  %700 = insertelement <4 x i32> poison, i32 %226, i64 0, !dbg !56
  %701 = insertelement <4 x i32> %700, i32 %227, i64 1, !dbg !56
  %702 = insertelement <4 x i32> %701, i32 %228, i64 2, !dbg !56
  %703 = insertelement <4 x i32> %702, i32 %229, i64 3, !dbg !56
  %704 = bitcast <4 x i32> %703 to <4 x float>, !dbg !56
  %705 = fcmp olt <4 x float> %699, %704, !dbg !90
  %706 = fcmp uno <4 x float> %704, zeroinitializer, !dbg !92
  %707 = or <4 x i1> %705, %706, !dbg !93
  %.v55 = select <4 x i1> %707, <4 x i32> %703, <4 x i32> %.v54, !dbg !94
  %708 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !94
  %709 = insertelement <4 x i32> poison, i32 %262, i64 0, !dbg !60
  %710 = insertelement <4 x i32> %709, i32 %263, i64 1, !dbg !60
  %711 = insertelement <4 x i32> %710, i32 %264, i64 2, !dbg !60
  %712 = insertelement <4 x i32> %711, i32 %265, i64 3, !dbg !60
  %713 = bitcast <4 x i32> %712 to <4 x float>, !dbg !60
  %714 = fcmp olt <4 x float> %708, %713, !dbg !95
  %715 = fcmp uno <4 x float> %713, zeroinitializer, !dbg !97
  %716 = or <4 x i1> %714, %715, !dbg !98
  %.v56 = select <4 x i1> %716, <4 x i32> %712, <4 x i32> %.v55, !dbg !99
  %717 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !99
  %718 = insertelement <4 x i32> poison, i32 %298, i64 0, !dbg !64
  %719 = insertelement <4 x i32> %718, i32 %299, i64 1, !dbg !64
  %720 = insertelement <4 x i32> %719, i32 %300, i64 2, !dbg !64
  %721 = insertelement <4 x i32> %720, i32 %301, i64 3, !dbg !64
  %722 = bitcast <4 x i32> %721 to <4 x float>, !dbg !64
  %723 = fcmp olt <4 x float> %717, %722, !dbg !100
  %724 = fcmp uno <4 x float> %722, zeroinitializer, !dbg !102
  %725 = or <4 x i1> %723, %724, !dbg !103
  %.v57 = select <4 x i1> %725, <4 x i32> %721, <4 x i32> %.v56, !dbg !104
  %726 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !104
  %727 = insertelement <4 x i32> poison, i32 %334, i64 0, !dbg !68
  %728 = insertelement <4 x i32> %727, i32 %335, i64 1, !dbg !68
  %729 = insertelement <4 x i32> %728, i32 %336, i64 2, !dbg !68
  %730 = insertelement <4 x i32> %729, i32 %337, i64 3, !dbg !68
  %731 = bitcast <4 x i32> %730 to <4 x float>, !dbg !68
  %732 = fcmp olt <4 x float> %726, %731, !dbg !105
  %733 = fcmp uno <4 x float> %731, zeroinitializer, !dbg !107
  %734 = or <4 x i1> %732, %733, !dbg !108
  %.v58 = select <4 x i1> %734, <4 x i32> %730, <4 x i32> %.v57, !dbg !109
  %735 = bitcast <4 x i32> %.v58 to <4 x float>, !dbg !109
  %736 = insertelement <4 x i32> poison, i32 %370, i64 0, !dbg !72
  %737 = insertelement <4 x i32> %736, i32 %371, i64 1, !dbg !72
  %738 = insertelement <4 x i32> %737, i32 %372, i64 2, !dbg !72
  %739 = insertelement <4 x i32> %738, i32 %373, i64 3, !dbg !72
  %740 = bitcast <4 x i32> %739 to <4 x float>, !dbg !72
  %741 = fcmp olt <4 x float> %735, %740, !dbg !110
  %742 = bitcast i32 %370 to float, !dbg !112
  %743 = fcmp uno float %742, 0.000000e+00, !dbg !112
  %744 = bitcast i32 %371 to float, !dbg !112
  %745 = fcmp uno float %744, 0.000000e+00, !dbg !112
  %746 = bitcast i32 %372 to float, !dbg !112
  %747 = fcmp uno float %746, 0.000000e+00, !dbg !112
  %748 = bitcast i32 %373 to float, !dbg !112
  %749 = fcmp uno float %748, 0.000000e+00, !dbg !112
  %750 = extractelement <4 x i1> %741, i64 0, !dbg !113
  %751 = or i1 %750, %743, !dbg !113
  %752 = extractelement <4 x i1> %741, i64 1, !dbg !113
  %753 = or i1 %752, %745, !dbg !113
  %754 = extractelement <4 x i1> %741, i64 2, !dbg !113
  %755 = or i1 %754, %747, !dbg !113
  %756 = extractelement <4 x i1> %741, i64 3, !dbg !113
  %757 = or i1 %756, %749, !dbg !113
  %758 = zext <4 x i1> %678 to <4 x i8>, !dbg !114
  %759 = select <4 x i1> %687, <4 x i8> splat (i8 2), <4 x i8> %758, !dbg !115
  %760 = select <4 x i1> %696, <4 x i8> splat (i8 3), <4 x i8> %759, !dbg !116
  %761 = select <4 x i1> %705, <4 x i8> splat (i8 4), <4 x i8> %760, !dbg !117
  %762 = select <4 x i1> %714, <4 x i8> splat (i8 5), <4 x i8> %761, !dbg !118
  %763 = select <4 x i1> %723, <4 x i8> splat (i8 6), <4 x i8> %762, !dbg !119
  %764 = select <4 x i1> %732, <4 x i8> splat (i8 7), <4 x i8> %763, !dbg !120
  %765 = select <4 x i1> %741, <4 x i8> splat (i8 8), <4 x i8> %764, !dbg !121
  %766 = shl i32 %17, 8, !dbg !122
  %767 = shl i32 %18, 8, !dbg !122
  %768 = shl i32 %19, 8, !dbg !122
  %769 = shl i32 %20, 8, !dbg !122
  %770 = shl i32 %27, 16, !dbg !123
  %771 = add i32 %770, %.decomposed, !dbg !124
  %772 = add i32 %771, %766, !dbg !125
  %773 = add i32 %771, %767, !dbg !125
  %774 = add i32 %771, %768, !dbg !125
  %775 = add i32 %771, %769, !dbg !125
  %776 = sext i32 %772 to i64, !dbg !126
  %777 = getelementptr float, ptr addrspace(1) %1, i64 %776, !dbg !126
  %778 = sext i32 %773 to i64, !dbg !126
  %779 = getelementptr float, ptr addrspace(1) %1, i64 %778, !dbg !126
  %780 = sext i32 %774 to i64, !dbg !126
  %781 = getelementptr float, ptr addrspace(1) %1, i64 %780, !dbg !126
  %782 = sext i32 %775 to i64, !dbg !126
  %783 = getelementptr float, ptr addrspace(1) %1, i64 %782, !dbg !126
  %784 = and i32 %10, 1020, !dbg !127
  %785 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !127
  %786 = extractelement <4 x i32> %.v37, i64 0, !dbg !127
  %787 = select i1 %457, i32 %355, i32 %786, !dbg !128
  %788 = insertelement <1 x i32> poison, i32 %787, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %785, <1 x i32> %788, i1 true) #2, !dbg !127
  %789 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 1040, !dbg !127
  %790 = extractelement <4 x i32> %.v37, i64 1, !dbg !127
  %791 = select i1 %459, i32 %356, i32 %790, !dbg !128
  %792 = insertelement <1 x i32> poison, i32 %791, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %789, <1 x i32> %792, i1 true) #2, !dbg !127
  %793 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 2080, !dbg !127
  %794 = extractelement <4 x i32> %.v37, i64 2, !dbg !127
  %795 = select i1 %461, i32 %357, i32 %794, !dbg !128
  %796 = insertelement <1 x i32> poison, i32 %795, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %793, <1 x i32> %796, i1 true) #2, !dbg !127
  %797 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 3120, !dbg !127
  %798 = extractelement <4 x i32> %.v37, i64 3, !dbg !127
  %799 = select i1 %463, i32 %358, i32 %798, !dbg !128
  %800 = insertelement <1 x i32> poison, i32 %799, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %797, <1 x i32> %800, i1 true) #2, !dbg !127
  %801 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 4160, !dbg !127
  %802 = extractelement <4 x i32> %.v44, i64 0, !dbg !127
  %803 = select i1 %555, i32 %360, i32 %802, !dbg !128
  %804 = insertelement <1 x i32> poison, i32 %803, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %801, <1 x i32> %804, i1 true) #2, !dbg !127
  %805 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 5200, !dbg !127
  %806 = extractelement <4 x i32> %.v44, i64 1, !dbg !127
  %807 = select i1 %557, i32 %361, i32 %806, !dbg !128
  %808 = insertelement <1 x i32> poison, i32 %807, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %805, <1 x i32> %808, i1 true) #2, !dbg !127
  %809 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 6240, !dbg !127
  %810 = extractelement <4 x i32> %.v44, i64 2, !dbg !127
  %811 = select i1 %559, i32 %362, i32 %810, !dbg !128
  %812 = insertelement <1 x i32> poison, i32 %811, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %809, <1 x i32> %812, i1 true) #2, !dbg !127
  %813 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 7280, !dbg !127
  %814 = extractelement <4 x i32> %.v44, i64 3, !dbg !127
  %815 = select i1 %561, i32 %363, i32 %814, !dbg !128
  %816 = insertelement <1 x i32> poison, i32 %815, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %813, <1 x i32> %816, i1 true) #2, !dbg !127
  %817 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 8320, !dbg !127
  %818 = extractelement <4 x i32> %.v51, i64 0, !dbg !127
  %819 = select i1 %653, i32 %365, i32 %818, !dbg !128
  %820 = insertelement <1 x i32> poison, i32 %819, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %817, <1 x i32> %820, i1 true) #2, !dbg !127
  %821 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 9360, !dbg !127
  %822 = extractelement <4 x i32> %.v51, i64 1, !dbg !127
  %823 = select i1 %655, i32 %366, i32 %822, !dbg !128
  %824 = insertelement <1 x i32> poison, i32 %823, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %821, <1 x i32> %824, i1 true) #2, !dbg !127
  %825 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 10400, !dbg !127
  %826 = extractelement <4 x i32> %.v51, i64 2, !dbg !127
  %827 = select i1 %657, i32 %367, i32 %826, !dbg !128
  %828 = insertelement <1 x i32> poison, i32 %827, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %825, <1 x i32> %828, i1 true) #2, !dbg !127
  %829 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 11440, !dbg !127
  %830 = extractelement <4 x i32> %.v51, i64 3, !dbg !127
  %831 = select i1 %659, i32 %368, i32 %830, !dbg !128
  %832 = insertelement <1 x i32> poison, i32 %831, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %829, <1 x i32> %832, i1 true) #2, !dbg !127
  %833 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 12480, !dbg !127
  %834 = extractelement <4 x i32> %.v58, i64 0, !dbg !127
  %835 = select i1 %751, i32 %370, i32 %834, !dbg !128
  %836 = insertelement <1 x i32> poison, i32 %835, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %833, <1 x i32> %836, i1 true) #2, !dbg !127
  %837 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 13520, !dbg !127
  %838 = extractelement <4 x i32> %.v58, i64 1, !dbg !127
  %839 = select i1 %753, i32 %371, i32 %838, !dbg !128
  %840 = insertelement <1 x i32> poison, i32 %839, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %837, <1 x i32> %840, i1 true) #2, !dbg !127
  %841 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 14560, !dbg !127
  %842 = extractelement <4 x i32> %.v58, i64 2, !dbg !127
  %843 = select i1 %755, i32 %372, i32 %842, !dbg !128
  %844 = insertelement <1 x i32> poison, i32 %843, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %841, <1 x i32> %844, i1 true) #2, !dbg !127
  %845 = getelementptr inbounds i8, ptr addrspace(3) %785, i32 15600, !dbg !127
  %846 = extractelement <4 x i32> %.v58, i64 3, !dbg !127
  %847 = select i1 %757, i32 %373, i32 %846, !dbg !128
  %848 = insertelement <1 x i32> poison, i32 %847, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %848, i1 true) #2, !dbg !127
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %849 = lshr i32 %10, 6, !dbg !127
  %850 = and i32 %849, 12, !dbg !127
  %851 = getelementptr float, ptr addrspace(3) @global_smem, i32 %850, !dbg !127
  %852 = getelementptr float, ptr addrspace(3) %851, i32 %784, !dbg !127
  %853 = or disjoint i32 %784, 1024, !dbg !127
  %854 = lshr i32 %853, 6, !dbg !127
  %855 = and i32 %854, 28, !dbg !127
  %856 = getelementptr float, ptr addrspace(3) @global_smem, i32 %855, !dbg !127
  %857 = getelementptr float, ptr addrspace(3) %856, i32 %853, !dbg !127
  %858 = load <4 x i32>, ptr addrspace(3) %857, align 16, !dbg !127
  %859 = or disjoint i32 %784, 2048, !dbg !127
  %860 = lshr i32 %859, 6, !dbg !127
  %861 = and i32 %860, 44, !dbg !127
  %862 = getelementptr float, ptr addrspace(3) @global_smem, i32 %861, !dbg !127
  %863 = getelementptr float, ptr addrspace(3) %862, i32 %859, !dbg !127
  %864 = load <4 x i32>, ptr addrspace(3) %863, align 16, !dbg !127
  %865 = or disjoint i32 %784, 3072, !dbg !127
  %866 = lshr i32 %865, 6, !dbg !127
  %867 = and i32 %866, 60, !dbg !127
  %868 = getelementptr float, ptr addrspace(3) @global_smem, i32 %867, !dbg !127
  %869 = getelementptr float, ptr addrspace(3) %868, i32 %865, !dbg !127
  %870 = load <4 x i32>, ptr addrspace(3) %869, align 16, !dbg !127
  %.extract = load i32, ptr addrspace(3) %852, align 16, !dbg !127
  %871 = getelementptr inbounds i8, ptr addrspace(3) %852, i32 4, !dbg !127
  %.extract17 = load i32, ptr addrspace(3) %871, align 4, !dbg !127
  %872 = getelementptr inbounds i8, ptr addrspace(3) %852, i32 8, !dbg !127
  %.extract18 = load i32, ptr addrspace(3) %872, align 8, !dbg !127
  %873 = getelementptr inbounds i8, ptr addrspace(3) %852, i32 12, !dbg !127
  %.extract19 = load i32, ptr addrspace(3) %873, align 4, !dbg !127
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %777, i1 %22) #2, !dbg !127
  %.extract20 = extractelement <4 x i32> %858, i64 0, !dbg !127
  %.extract21 = extractelement <4 x i32> %858, i64 1, !dbg !127
  %.extract22 = extractelement <4 x i32> %858, i64 2, !dbg !127
  %.extract23 = extractelement <4 x i32> %858, i64 3, !dbg !127
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract20, i32 %.extract21, i32 %.extract22, i32 %.extract23, ptr addrspace(1) %779, i1 %23) #2, !dbg !127
  %.extract24 = extractelement <4 x i32> %864, i64 0, !dbg !127
  %.extract25 = extractelement <4 x i32> %864, i64 1, !dbg !127
  %.extract26 = extractelement <4 x i32> %864, i64 2, !dbg !127
  %.extract27 = extractelement <4 x i32> %864, i64 3, !dbg !127
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract24, i32 %.extract25, i32 %.extract26, i32 %.extract27, ptr addrspace(1) %781, i1 %24) #2, !dbg !127
  %.extract28 = extractelement <4 x i32> %870, i64 0, !dbg !127
  %.extract29 = extractelement <4 x i32> %870, i64 1, !dbg !127
  %.extract30 = extractelement <4 x i32> %870, i64 2, !dbg !127
  %.extract31 = extractelement <4 x i32> %870, i64 3, !dbg !127
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract28, i32 %.extract29, i32 %.extract30, i32 %.extract31, ptr addrspace(1) %783, i1 %25) #2, !dbg !127
  %874 = shl i32 %12, 8, !dbg !129
  %875 = add i32 %874, %15, !dbg !130
  %876 = sext i32 %875 to i64, !dbg !131
  %877 = getelementptr i8, ptr addrspace(1) %2, i64 %876, !dbg !131
  %878 = bitcast <4 x i8> %471 to i32, !dbg !132
  %879 = bitcast <4 x i8> %569 to i32, !dbg !132
  %880 = bitcast <4 x i8> %667 to i32, !dbg !132
  %881 = bitcast <4 x i8> %765 to i32, !dbg !132
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %878, i32 %879, i32 %880, i32 %881, ptr addrspace(1) %877, i1 %21) #2, !dbg !132
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpsnyigawne76v35tq3wghwofeyslbf5kqpftb4qnxvmn2l3sn66.py", directory: "inductor_cache/ps")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_6", linkageName: "triton_poi_fused_max_pool2d_with_indices_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 46, column: 61, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 68, column: 20, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 42, column: 19, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 50, scope: !7)
!29 = !DILocation(line: 46, column: 41, scope: !7)
!30 = !DILocation(line: 46, column: 46, scope: !7)
!31 = !DILocation(line: 46, column: 55, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 74, scope: !7)
!34 = !DILocation(line: 46, column: 66, scope: !7)
!35 = !DILocation(line: 48, column: 21, scope: !7)
!36 = !DILocation(line: 51, column: 19, scope: !7)
!37 = !DILocation(line: 52, column: 46, scope: !7)
!38 = !DILocation(line: 52, column: 55, scope: !7)
!39 = !DILocation(line: 52, column: 31, scope: !7)
!40 = !DILocation(line: 52, column: 74, scope: !7)
!41 = !DILocation(line: 52, column: 66, scope: !7)
!42 = !DILocation(line: 59, column: 46, scope: !7)
!43 = !DILocation(line: 59, column: 55, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 66, scope: !7)
!46 = !DILocation(line: 65, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 45, scope: !7)
!48 = !DILocation(line: 66, column: 54, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 73, scope: !7)
!51 = !DILocation(line: 66, column: 65, scope: !7)
!52 = !DILocation(line: 69, column: 45, scope: !7)
!53 = !DILocation(line: 69, column: 36, scope: !7)
!54 = !DILocation(line: 69, column: 31, scope: !7)
!55 = !DILocation(line: 69, column: 64, scope: !7)
!56 = !DILocation(line: 69, column: 56, scope: !7)
!57 = !DILocation(line: 72, column: 42, scope: !7)
!58 = !DILocation(line: 72, column: 51, scope: !7)
!59 = !DILocation(line: 72, column: 31, scope: !7)
!60 = !DILocation(line: 72, column: 62, scope: !7)
!61 = !DILocation(line: 79, column: 43, scope: !7)
!62 = !DILocation(line: 79, column: 52, scope: !7)
!63 = !DILocation(line: 79, column: 31, scope: !7)
!64 = !DILocation(line: 79, column: 63, scope: !7)
!65 = !DILocation(line: 82, column: 43, scope: !7)
!66 = !DILocation(line: 82, column: 52, scope: !7)
!67 = !DILocation(line: 82, column: 31, scope: !7)
!68 = !DILocation(line: 82, column: 63, scope: !7)
!69 = !DILocation(line: 85, column: 43, scope: !7)
!70 = !DILocation(line: 85, column: 52, scope: !7)
!71 = !DILocation(line: 85, column: 31, scope: !7)
!72 = !DILocation(line: 85, column: 63, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 53, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !81)
!81 = !DILocation(line: 60, column: 42, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !86)
!86 = !DILocation(line: 67, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !91)
!91 = !DILocation(line: 70, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !96)
!96 = !DILocation(line: 73, column: 42, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !101)
!101 = !DILocation(line: 80, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !106)
!106 = !DILocation(line: 83, column: 42, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !106)
!110 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !111)
!111 = !DILocation(line: 86, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !111)
!114 = !DILocation(line: 90, column: 35, scope: !7)
!115 = !DILocation(line: 93, column: 35, scope: !7)
!116 = !DILocation(line: 96, column: 35, scope: !7)
!117 = !DILocation(line: 99, column: 35, scope: !7)
!118 = !DILocation(line: 102, column: 35, scope: !7)
!119 = !DILocation(line: 105, column: 35, scope: !7)
!120 = !DILocation(line: 108, column: 35, scope: !7)
!121 = !DILocation(line: 111, column: 35, scope: !7)
!122 = !DILocation(line: 112, column: 34, scope: !7)
!123 = !DILocation(line: 112, column: 45, scope: !7)
!124 = !DILocation(line: 112, column: 30, scope: !7)
!125 = !DILocation(line: 112, column: 39, scope: !7)
!126 = !DILocation(line: 112, column: 25, scope: !7)
!127 = !DILocation(line: 112, column: 57, scope: !7)
!128 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !111)
!129 = !DILocation(line: 113, column: 34, scope: !7)
!130 = !DILocation(line: 113, column: 30, scope: !7)
!131 = !DILocation(line: 113, column: 25, scope: !7)
!132 = !DILocation(line: 113, column: 46, scope: !7)
!133 = !DILocation(line: 113, column: 4, scope: !7)
