; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 510, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %.frozen1 = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen1, 256, !dbg !14
  %14 = srem i32 %13, 384, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %15 = sdiv i32 %.frozen, 16, !dbg !16
  %16 = srem i32 %15, 16, !dbg !17
  %17 = mul i32 %15, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %17, !dbg !18
  %18 = sdiv i32 %12, 98304, !dbg !19
  %19 = mul i32 %13, 256, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %19, !dbg !20
  %20 = icmp slt i32 %14, 256, !dbg !21
  %21 = sext i32 %16 to i64, !dbg !22
  %22 = getelementptr i64, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %22, i1 %20, i1 %20) #1, !dbg !23
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %22, i1 %20, i1 %20) #1, !dbg !23
  %25 = lshr i64 %23, 60, !dbg !24
  %26 = and i64 %25, 8, !dbg !24
  %27 = add i64 %26, %23, !dbg !24
  %28 = sext i32 %.decomposed to i64, !dbg !25
  %29 = getelementptr i64, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %29, i1 %20, i1 %20, i1 %20) #1, !dbg !26
  %31 = extractvalue { i64, i64 } %30, 0, !dbg !26
  %32 = extractvalue { i64, i64 } %30, 1, !dbg !26
  %33 = lshr i64 %31, 60, !dbg !27
  %34 = and i64 %33, 8, !dbg !27
  %35 = lshr i64 %32, 60, !dbg !27
  %36 = and i64 %35, 8, !dbg !27
  %37 = shl i64 %27, 3, !dbg !28
  %38 = shl nsw i32 %14, 6, !dbg !29
  %39 = sext i32 %38 to i64, !dbg !30
  %40 = shl nsw i32 %18, 14, !dbg !31
  %41 = sext i32 %40 to i64, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !33
  %43 = getelementptr float, ptr addrspace(1) %42, i64 %34, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %43, i64 %37, !dbg !33
  %45 = getelementptr float, ptr addrspace(1) %44, i64 %39, !dbg !33
  %46 = getelementptr float, ptr addrspace(1) %45, i64 %41, !dbg !33
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !33
  %48 = getelementptr float, ptr addrspace(1) %47, i64 %36, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %48, i64 %37, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %49, i64 %39, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %50, i64 %41, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %20, i32 0, i1 %20) #1, !dbg !34
  %53 = bitcast i32 %52 to float, !dbg !34
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %20, i32 0, i1 %20) #1, !dbg !34
  %55 = bitcast i32 %54 to float, !dbg !34
  %56 = sext i32 %14 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %20, i32 0, i1 %20) #1, !dbg !36
  %59 = bitcast i32 %58 to float, !dbg !36
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %20, i32 0, i1 %20) #1, !dbg !36
  %61 = bitcast i32 %60 to float, !dbg !36
  %62 = fadd float %53, %59, !dbg !37
  %63 = fadd float %55, %61, !dbg !37
  %64 = fcmp olt float %62, 0.000000e+00, !dbg !38
  %65 = fcmp olt float %63, 0.000000e+00, !dbg !38
  %66 = select i1 %64, float 0.000000e+00, float %62, !dbg !42
  %67 = select i1 %65, float 0.000000e+00, float %63, !dbg !42
  %68 = icmp sgt i32 %14, 255, !dbg !43
  %69 = shl nsw i32 %14, 8, !dbg !44
  %70 = shl nsw i32 %18, 15, !dbg !45
  %71 = add nsw i32 %.decomposed2, -65536, !dbg !44
  %72 = add nsw i32 %71, %70, !dbg !46
  %73 = add nsw i32 %72, %69, !dbg !47
  %74 = sext i32 %73 to i64, !dbg !48
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !48
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #1, !dbg !49
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !49
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !49
  %79 = sext i32 %12 to i64, !dbg !50
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %79, !dbg !50
  %81 = bitcast float %66 to i32, !dbg !51
  %82 = select i1 %20, i32 %81, i32 %77, !dbg !52
  %83 = bitcast float %67 to i32, !dbg !51
  %84 = select i1 %20, i32 %83, i32 %78, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %82, i32 %84, ptr addrspace(1) %80, i1 true) #1, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "catqwztodugljvupiukafi7qhi5agsrdehaue3xd7n7m6gkb7ui4.py", directory: "inductor_cache/at")
!4 = !{ptr @triton_poi_fused_cat_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_16", linkageName: "triton_poi_fused_cat_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 39, column: 32, scope: !7)
!25 = !DILocation(line: 40, column: 31, scope: !7)
!26 = !DILocation(line: 40, column: 36, scope: !7)
!27 = !DILocation(line: 43, column: 35, scope: !7)
!28 = !DILocation(line: 44, column: 41, scope: !7)
!29 = !DILocation(line: 44, column: 52, scope: !7)
!30 = !DILocation(line: 44, column: 48, scope: !7)
!31 = !DILocation(line: 44, column: 64, scope: !7)
!32 = !DILocation(line: 44, column: 58, scope: !7)
!33 = !DILocation(line: 44, column: 31, scope: !7)
!34 = !DILocation(line: 44, column: 69, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 36, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 48, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 41, scope: !7)
!45 = !DILocation(line: 54, column: 62, scope: !7)
!46 = !DILocation(line: 54, column: 36, scope: !7)
!47 = !DILocation(line: 54, column: 56, scope: !7)
!48 = !DILocation(line: 54, column: 31, scope: !7)
!49 = !DILocation(line: 54, column: 67, scope: !7)
!50 = !DILocation(line: 56, column: 25, scope: !7)
!51 = !DILocation(line: 56, column: 37, scope: !7)
!52 = !DILocation(line: 0, scope: !7)
!53 = !DILocation(line: 56, column: 4, scope: !7)
