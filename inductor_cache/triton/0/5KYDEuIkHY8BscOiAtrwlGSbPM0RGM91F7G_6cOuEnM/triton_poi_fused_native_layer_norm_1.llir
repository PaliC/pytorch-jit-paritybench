; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_native_layer_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 2, !dbg !12
  %14 = and i32 %12, 62, !dbg !12
  %15 = lshr i32 %11, 1, !dbg !12
  %16 = and i32 %15, 63, !dbg !12
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = or disjoint i32 %10, %16, !dbg !13
  %19 = icmp slt i32 %17, 64, !dbg !14
  %20 = icmp slt i32 %18, 64, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %22 = shl i32 %21, 2, !dbg !16
  %23 = lshr i32 %11, 5, !dbg !17
  %24 = and i32 %23, 3, !dbg !17
  %25 = or disjoint i32 %22, %24, !dbg !18
  %26 = or disjoint i32 %22, %13, !dbg !18
  %27 = icmp slt i32 %25, 4, !dbg !19
  %28 = icmp slt i32 %26, 4, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %29 = sdiv i32 %.frozen, 16, !dbg !20
  %30 = sdiv i32 %18, 16, !dbg !20
  %31 = mul i32 %29, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %.frozen3 = freeze i32 %18, !dbg !22
  %32 = sdiv i32 %.frozen3, 4, !dbg !22
  %33 = mul i32 %32, 4, !dbg !23
  %.decomposed4 = sub i32 %.frozen3, %33, !dbg !23
  %34 = srem i32 %32, 4, !dbg !24
  %35 = shl i32 %25, 4, !dbg !25
  %36 = add i32 %35, %.decomposed, !dbg !26
  %37 = shl i32 %29, 6, !dbg !27
  %38 = shl i32 %30, 6, !dbg !27
  %39 = add i32 %36, %37, !dbg !28
  %40 = sext i32 %39 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !29
  %42 = and i1 %19, %27, !dbg !30
  %43 = and i1 %20, %28, !dbg !30
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %42) #2, !dbg !31
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !31
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !31
  %47 = bitcast i32 %45 to float, !dbg !31
  %48 = bitcast i32 %46 to float, !dbg !31
  %49 = sext i32 %17 to i64, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !32
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %19) #2, !dbg !33
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !33
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !33
  %54 = bitcast i32 %52 to float, !dbg !33
  %55 = bitcast i32 %53 to float, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !34
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %19) #2, !dbg !35
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !35
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !35
  %60 = bitcast i32 %58 to float, !dbg !35
  %61 = bitcast i32 %59 to float, !dbg !35
  %62 = sext i32 %25 to i64, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %27) #2, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %27) #2, !dbg !37
  %66 = bitcast i32 %65 to float, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %27) #2, !dbg !39
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %27) #2, !dbg !39
  %70 = bitcast i32 %69 to float, !dbg !39
  %71 = fsub float %47, %54, !dbg !40
  %72 = fsub float %48, %55, !dbg !40
  %73 = fmul float %71, %60, !dbg !41
  %74 = fmul float %72, %61, !dbg !41
  %75 = fmul float %73, %66, !dbg !42
  %76 = fmul float %74, %66, !dbg !42
  %77 = fadd float %75, %70, !dbg !43
  %78 = fadd float %76, %70, !dbg !43
  %79 = shl nsw i32 %34, 2, !dbg !44
  %80 = shl nsw i32 %.decomposed4, 4, !dbg !45
  %81 = add i32 %80, %26, !dbg !46
  %82 = add i32 %81, %38, !dbg !47
  %83 = add i32 %82, %79, !dbg !48
  %84 = sext i32 %83 to i64, !dbg !49
  %85 = getelementptr float, ptr addrspace(1) %5, i64 %84, !dbg !49
  %86 = shl i32 %11, 3, !dbg !50
  %87 = and i32 %86, 248, !dbg !50
  %88 = or disjoint i32 %87, %24, !dbg !50
  %89 = and i32 %12, 254, !dbg !50
  %90 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %87, !dbg !50
  %91 = getelementptr inbounds float, ptr addrspace(3) %90, i32 %88, !dbg !50
  %92 = bitcast float %77 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !50
  %93 = or disjoint i32 %88, 4, !dbg !50
  %94 = lshr i32 %93, 2, !dbg !50
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !50
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %93, !dbg !50
  %97 = bitcast float %78 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %98 = lshr i32 %89, 2, !dbg !50
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !50
  %100 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %89, !dbg !50
  %101 = load i32, ptr addrspace(3) %100, align 4, !dbg !50
  %102 = or disjoint i32 %89, 1, !dbg !50
  %103 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %102, !dbg !50
  %104 = load i32, ptr addrspace(3) %103, align 4, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %104, ptr addrspace(1) %85, i1 %43) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5b3bm6eyqxppc7afs5qzkwnk3rjtxthp2zrevfm64a6mpbf7wpm.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_poi_fused_native_layer_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_layer_norm_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_layer_norm_1", linkageName: "triton_poi_fused_native_layer_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 21, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 33, column: 26, scope: !7)
!25 = !DILocation(line: 34, column: 38, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 46, scope: !7)
!28 = !DILocation(line: 34, column: 43, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 59, scope: !7)
!31 = !DILocation(line: 34, column: 51, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 35, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 35, scope: !7)
!38 = !DILocation(line: 38, column: 30, scope: !7)
!39 = !DILocation(line: 38, column: 35, scope: !7)
!40 = !DILocation(line: 39, column: 18, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 32, scope: !7)
!45 = !DILocation(line: 43, column: 40, scope: !7)
!46 = !DILocation(line: 43, column: 30, scope: !7)
!47 = !DILocation(line: 43, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 45, scope: !7)
!49 = !DILocation(line: 43, column: 25, scope: !7)
!50 = !DILocation(line: 43, column: 59, scope: !7)
!51 = !DILocation(line: 43, column: 4, scope: !7)
