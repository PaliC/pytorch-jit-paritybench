; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = shl i32 %12, 2, !dbg !12
  %17 = and i32 %16, 28, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = icmp slt i32 %18, 64, !dbg !14
  %21 = icmp slt i32 %19, 64, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 5, !dbg !16
  %24 = or disjoint i32 %23, %17, !dbg !17
  %25 = icmp slt i32 %24, 1024, !dbg !18
  %26 = sdiv i32 %18, 16, !dbg !19
  %27 = sdiv i32 %19, 16, !dbg !19
  %28 = shl i32 %18, 10, !dbg !20
  %29 = shl i32 %19, 10, !dbg !20
  %30 = add i32 %24, %28, !dbg !21
  %31 = add i32 %24, %29, !dbg !21
  %32 = sext i32 %30 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = and i1 %20, %25, !dbg !23
  %37 = and i1 %21, %25, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %36) #4, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %37) #4, !dbg !24
  %40 = shl i32 %26, 5, !dbg !25
  %41 = shl i32 %27, 5, !dbg !25
  %42 = sdiv i32 %24, 32, !dbg !26
  %43 = add i32 %40, %42, !dbg !27
  %44 = add i32 %41, %42, !dbg !27
  %45 = sext i32 %43 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !28
  %47 = sext i32 %44 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %36) #4, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %36) #4, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %36) #4, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %36) #4, !dbg !29
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %37) #4, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %37) #4, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %37) #4, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %37) #4, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %36) #4, !dbg !31
  %60 = bitcast i32 %59 to float, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %36) #4, !dbg !31
  %62 = bitcast i32 %61 to float, !dbg !31
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %36) #4, !dbg !31
  %64 = bitcast i32 %63 to float, !dbg !31
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %36) #4, !dbg !31
  %66 = bitcast i32 %65 to float, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %37) #4, !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %37) #4, !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %37) #4, !dbg !31
  %72 = bitcast i32 %71 to float, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %37) #4, !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = sext i32 %24 to i64, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !32
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %25) #4, !dbg !33
  %78 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !34
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %25) #4, !dbg !35
  %80 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !36
  %81 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !36
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %36) #4, !dbg !37
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %37) #4, !dbg !37
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 5.120000e+02) #4, !dbg !38
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 5.120000e+02) #4, !dbg !38
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 5.120000e+02) #4, !dbg !38
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 5.120000e+02) #4, !dbg !38
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 5.120000e+02) #4, !dbg !38
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 5.120000e+02) #4, !dbg !38
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float 5.120000e+02) #4, !dbg !38
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float 5.120000e+02) #4, !dbg !38
  %92 = fadd float %84, 0x3EE4F8B580000000, !dbg !39
  %93 = fadd float %85, 0x3EE4F8B580000000, !dbg !39
  %94 = fadd float %86, 0x3EE4F8B580000000, !dbg !39
  %95 = fadd float %87, 0x3EE4F8B580000000, !dbg !39
  %96 = fadd float %88, 0x3EE4F8B580000000, !dbg !39
  %97 = fadd float %89, 0x3EE4F8B580000000, !dbg !39
  %98 = fadd float %90, 0x3EE4F8B580000000, !dbg !39
  %99 = fadd float %91, 0x3EE4F8B580000000, !dbg !39
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i = icmp eq i32 %100, 0, !dbg !40
  br i1 %.not.i, label %103, label %101, !dbg !40

101:                                              ; preds = %9
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %92), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

103:                                              ; preds = %9
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %92), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %101, %103
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], !dbg !40
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i15 = icmp eq i32 %105, 0, !dbg !40
  br i1 %.not.i15, label %108, label %106, !dbg !40

106:                                              ; preds = %__nv_rsqrtf.exit
  %107 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !40
  br label %__nv_rsqrtf.exit17, !dbg !40

108:                                              ; preds = %__nv_rsqrtf.exit
  %109 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !40
  br label %__nv_rsqrtf.exit17, !dbg !40

__nv_rsqrtf.exit17:                               ; preds = %106, %108
  %.0.i16 = phi float [ %107, %106 ], [ %109, %108 ], !dbg !40
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i18 = icmp eq i32 %110, 0, !dbg !40
  br i1 %.not.i18, label %113, label %111, !dbg !40

111:                                              ; preds = %__nv_rsqrtf.exit17
  %112 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %94), !dbg !40
  br label %__nv_rsqrtf.exit20, !dbg !40

113:                                              ; preds = %__nv_rsqrtf.exit17
  %114 = tail call float @llvm.nvvm.rsqrt.approx.f(float %94), !dbg !40
  br label %__nv_rsqrtf.exit20, !dbg !40

__nv_rsqrtf.exit20:                               ; preds = %111, %113
  %.0.i19 = phi float [ %112, %111 ], [ %114, %113 ], !dbg !40
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i21 = icmp eq i32 %115, 0, !dbg !40
  br i1 %.not.i21, label %118, label %116, !dbg !40

116:                                              ; preds = %__nv_rsqrtf.exit20
  %117 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %95), !dbg !40
  br label %__nv_rsqrtf.exit23, !dbg !40

118:                                              ; preds = %__nv_rsqrtf.exit20
  %119 = tail call float @llvm.nvvm.rsqrt.approx.f(float %95), !dbg !40
  br label %__nv_rsqrtf.exit23, !dbg !40

__nv_rsqrtf.exit23:                               ; preds = %116, %118
  %.0.i22 = phi float [ %117, %116 ], [ %119, %118 ], !dbg !40
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i24 = icmp eq i32 %120, 0, !dbg !40
  br i1 %.not.i24, label %123, label %121, !dbg !40

121:                                              ; preds = %__nv_rsqrtf.exit23
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %96), !dbg !40
  br label %__nv_rsqrtf.exit26, !dbg !40

123:                                              ; preds = %__nv_rsqrtf.exit23
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %96), !dbg !40
  br label %__nv_rsqrtf.exit26, !dbg !40

__nv_rsqrtf.exit26:                               ; preds = %121, %123
  %.0.i25 = phi float [ %122, %121 ], [ %124, %123 ], !dbg !40
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i27 = icmp eq i32 %125, 0, !dbg !40
  br i1 %.not.i27, label %128, label %126, !dbg !40

126:                                              ; preds = %__nv_rsqrtf.exit26
  %127 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %97), !dbg !40
  br label %__nv_rsqrtf.exit29, !dbg !40

128:                                              ; preds = %__nv_rsqrtf.exit26
  %129 = tail call float @llvm.nvvm.rsqrt.approx.f(float %97), !dbg !40
  br label %__nv_rsqrtf.exit29, !dbg !40

__nv_rsqrtf.exit29:                               ; preds = %126, %128
  %.0.i28 = phi float [ %127, %126 ], [ %129, %128 ], !dbg !40
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i30 = icmp eq i32 %130, 0, !dbg !40
  br i1 %.not.i30, label %133, label %131, !dbg !40

131:                                              ; preds = %__nv_rsqrtf.exit29
  %132 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %98), !dbg !40
  br label %__nv_rsqrtf.exit32, !dbg !40

133:                                              ; preds = %__nv_rsqrtf.exit29
  %134 = tail call float @llvm.nvvm.rsqrt.approx.f(float %98), !dbg !40
  br label %__nv_rsqrtf.exit32, !dbg !40

__nv_rsqrtf.exit32:                               ; preds = %131, %133
  %.0.i31 = phi float [ %132, %131 ], [ %134, %133 ], !dbg !40
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i33 = icmp eq i32 %135, 0, !dbg !40
  br i1 %.not.i33, label %138, label %136, !dbg !40

136:                                              ; preds = %__nv_rsqrtf.exit32
  %137 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %99), !dbg !40
  br label %__nv_rsqrtf.exit35, !dbg !40

138:                                              ; preds = %__nv_rsqrtf.exit32
  %139 = tail call float @llvm.nvvm.rsqrt.approx.f(float %99), !dbg !40
  br label %__nv_rsqrtf.exit35, !dbg !40

__nv_rsqrtf.exit35:                               ; preds = %136, %138
  %.0.i34 = phi float [ %137, %136 ], [ %139, %138 ], !dbg !40
  %140 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %141 = insertelement <8 x i32> poison, i32 %56, i64 0, !dbg !29
  %142 = insertelement <8 x i32> %141, i32 %55, i64 1, !dbg !29
  %143 = insertelement <8 x i32> %142, i32 %54, i64 2, !dbg !29
  %144 = insertelement <8 x i32> %143, i32 %53, i64 3, !dbg !29
  %145 = insertelement <8 x i32> %144, i32 %52, i64 4, !dbg !29
  %146 = insertelement <8 x i32> %145, i32 %51, i64 5, !dbg !29
  %147 = insertelement <8 x i32> %146, i32 %50, i64 6, !dbg !29
  %148 = insertelement <8 x i32> %147, i32 %49, i64 7, !dbg !29
  %149 = bitcast <8 x i32> %148 to <8 x float>, !dbg !29
  %150 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %151 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %152 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %153 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !24
  %154 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !24
  %155 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !24
  %156 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !24
  %157 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !37
  %158 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !37
  %159 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !37
  %160 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !37
  %161 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !37
  %162 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !37
  %163 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !37
  %164 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !37
  %165 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !35
  %166 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !35
  %167 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !35
  %168 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !35
  %169 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !33
  %170 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !33
  %171 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !33
  %172 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !33
  %173 = or disjoint i32 %23, %15, !dbg !17
  %174 = icmp slt i32 %173, 1024, !dbg !18
  %175 = or disjoint i32 %11, %17, !dbg !13
  %176 = icmp slt i32 %175, 64, !dbg !14
  %177 = and i1 %176, %174, !dbg !23
  %178 = or disjoint i32 %23, %14, !dbg !17
  %179 = icmp slt i32 %178, 1024, !dbg !18
  %180 = and i1 %176, %179, !dbg !23
  %.frozen = freeze i32 %175, !dbg !19
  %181 = sdiv i32 %.frozen, 16, !dbg !19
  %182 = mul i32 %181, 16, !dbg !41
  %.decomposed = sub i32 %.frozen, %182, !dbg !41
  %183 = insertelement <8 x i32> poison, i32 %140, i64 0, !dbg !24
  %184 = insertelement <8 x i32> %183, i32 %150, i64 1, !dbg !24
  %185 = insertelement <8 x i32> %184, i32 %151, i64 2, !dbg !24
  %186 = insertelement <8 x i32> %185, i32 %152, i64 3, !dbg !24
  %187 = insertelement <8 x i32> %186, i32 %153, i64 4, !dbg !24
  %188 = insertelement <8 x i32> %187, i32 %154, i64 5, !dbg !24
  %189 = insertelement <8 x i32> %188, i32 %155, i64 6, !dbg !24
  %190 = insertelement <8 x i32> %189, i32 %156, i64 7, !dbg !24
  %191 = bitcast <8 x i32> %190 to <8 x float>, !dbg !24
  %192 = fsub <8 x float> %191, %149, !dbg !42
  %193 = insertelement <8 x i32> poison, i32 %157, i64 0, !dbg !37
  %194 = insertelement <8 x i32> %193, i32 %158, i64 1, !dbg !37
  %195 = insertelement <8 x i32> %194, i32 %159, i64 2, !dbg !37
  %196 = insertelement <8 x i32> %195, i32 %160, i64 3, !dbg !37
  %197 = insertelement <8 x i32> %196, i32 %161, i64 4, !dbg !37
  %198 = insertelement <8 x i32> %197, i32 %162, i64 5, !dbg !37
  %199 = insertelement <8 x i32> %198, i32 %163, i64 6, !dbg !37
  %200 = insertelement <8 x i32> %199, i32 %164, i64 7, !dbg !37
  %201 = bitcast <8 x i32> %200 to <8 x float>, !dbg !37
  %202 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !35
  %203 = insertelement <4 x i32> %202, i32 %166, i64 1, !dbg !35
  %204 = insertelement <4 x i32> %203, i32 %167, i64 2, !dbg !35
  %205 = insertelement <4 x i32> %204, i32 %168, i64 3, !dbg !35
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !35
  %207 = shufflevector <4 x float> %206, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %208 = insertelement <4 x i32> poison, i32 %169, i64 0, !dbg !33
  %209 = insertelement <4 x i32> %208, i32 %170, i64 1, !dbg !33
  %210 = insertelement <4 x i32> %209, i32 %171, i64 2, !dbg !33
  %211 = insertelement <4 x i32> %210, i32 %172, i64 3, !dbg !33
  %212 = bitcast <4 x i32> %211 to <4 x float>, !dbg !33
  %213 = shufflevector <4 x float> %212, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %214 = insertelement <8 x float> poison, float %.0.i34, i64 0, !dbg !43
  %215 = insertelement <8 x float> %214, float %.0.i31, i64 1, !dbg !43
  %216 = insertelement <8 x float> %215, float %.0.i28, i64 2, !dbg !43
  %217 = insertelement <8 x float> %216, float %.0.i25, i64 3, !dbg !43
  %218 = insertelement <8 x float> %217, float %.0.i22, i64 4, !dbg !43
  %219 = insertelement <8 x float> %218, float %.0.i19, i64 5, !dbg !43
  %220 = insertelement <8 x float> %219, float %.0.i16, i64 6, !dbg !43
  %221 = insertelement <8 x float> %220, float %.0.i, i64 7, !dbg !43
  %222 = fmul <8 x float> %192, %221, !dbg !43
  %223 = fmul <8 x float> %222, %213, !dbg !44
  %224 = fadd <8 x float> %223, %207, !dbg !45
  %225 = fadd <8 x float> %224, %201, !dbg !46
  %226 = fcmp olt <8 x float> %225, zeroinitializer, !dbg !47
  %227 = extractelement <8 x i1> %226, i64 7, !dbg !51
  %228 = extractelement <8 x float> %225, i64 7, !dbg !51
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !51
  %230 = extractelement <8 x i1> %226, i64 6, !dbg !51
  %231 = extractelement <8 x float> %225, i64 6, !dbg !51
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !51
  %233 = extractelement <8 x i1> %226, i64 5, !dbg !51
  %234 = extractelement <8 x float> %225, i64 5, !dbg !51
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !51
  %236 = extractelement <8 x i1> %226, i64 4, !dbg !51
  %237 = extractelement <8 x float> %225, i64 4, !dbg !51
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !51
  %239 = extractelement <8 x i1> %226, i64 3, !dbg !51
  %240 = extractelement <8 x float> %225, i64 3, !dbg !51
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !51
  %242 = extractelement <8 x i1> %226, i64 2, !dbg !51
  %243 = extractelement <8 x float> %225, i64 2, !dbg !51
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !51
  %245 = extractelement <8 x i1> %226, i64 1, !dbg !51
  %246 = extractelement <8 x float> %225, i64 1, !dbg !51
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !51
  %248 = extractelement <8 x i1> %226, i64 0, !dbg !51
  %249 = extractelement <8 x float> %225, i64 0, !dbg !51
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !51
  %251 = shl i32 %178, 4, !dbg !52
  %252 = shl i32 %173, 4, !dbg !52
  %253 = shl i32 %181, 14, !dbg !53
  %254 = add i32 %253, %.decomposed, !dbg !54
  %255 = add i32 %254, %251, !dbg !55
  %256 = add i32 %254, %252, !dbg !55
  %257 = sext i32 %255 to i64, !dbg !56
  %258 = getelementptr float, ptr addrspace(1) %6, i64 %257, !dbg !56
  %259 = sext i32 %256 to i64, !dbg !56
  %260 = getelementptr float, ptr addrspace(1) %6, i64 %259, !dbg !56
  %261 = shl i32 %12, 7, !dbg !57
  %262 = and i32 %261, 896, !dbg !57
  %263 = or disjoint i32 %262, %14, !dbg !57
  %264 = and i32 %16, 508, !dbg !57
  %265 = lshr exact i32 %262, 1, !dbg !57
  %266 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %265, !dbg !57
  %267 = getelementptr float, ptr addrspace(3) %266, i32 %263, !dbg !57
  %268 = bitcast float %229 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !57
  %269 = or disjoint i32 %263, 32, !dbg !57
  %270 = lshr i32 %269, 3, !dbg !57
  %271 = and i32 %270, 116, !dbg !57
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !57
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %269, !dbg !57
  %274 = bitcast float %232 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !57
  %275 = or disjoint i32 %263, 64, !dbg !57
  %276 = lshr i32 %275, 3, !dbg !57
  %277 = and i32 %276, 120, !dbg !57
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %277, !dbg !57
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %275, !dbg !57
  %280 = bitcast float %235 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !57
  %281 = or disjoint i32 %263, 96, !dbg !57
  %282 = lshr i32 %281, 3, !dbg !57
  %283 = and i32 %282, 124, !dbg !57
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %283, !dbg !57
  %285 = getelementptr float, ptr addrspace(3) %284, i32 %281, !dbg !57
  %286 = bitcast float %238 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !57
  %287 = or disjoint i32 %263, 16, !dbg !57
  %288 = getelementptr float, ptr addrspace(3) %266, i32 %287, !dbg !57
  %289 = bitcast float %241 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !57
  %290 = or disjoint i32 %263, 48, !dbg !57
  %291 = lshr i32 %290, 3, !dbg !57
  %292 = and i32 %291, 116, !dbg !57
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %292, !dbg !57
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %290, !dbg !57
  %295 = bitcast float %244 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !57
  %296 = or disjoint i32 %263, 80, !dbg !57
  %297 = lshr i32 %296, 3, !dbg !57
  %298 = and i32 %297, 120, !dbg !57
  %299 = getelementptr float, ptr addrspace(3) @global_smem, i32 %298, !dbg !57
  %300 = getelementptr float, ptr addrspace(3) %299, i32 %296, !dbg !57
  %301 = bitcast float %247 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !57
  %302 = or disjoint i32 %263, 112, !dbg !57
  %303 = lshr i32 %302, 3, !dbg !57
  %304 = and i32 %303, 124, !dbg !57
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i32 %304, !dbg !57
  %306 = getelementptr float, ptr addrspace(3) %305, i32 %302, !dbg !57
  %307 = bitcast float %250 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %308 = lshr i32 %16, 3, !dbg !57
  %309 = and i32 %308, 60, !dbg !57
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !57
  %311 = getelementptr inbounds float, ptr addrspace(3) %310, i32 %264, !dbg !57
  %312 = or disjoint i32 %264, 512, !dbg !57
  %313 = lshr i32 %312, 3, !dbg !57
  %314 = and i32 %313, 124, !dbg !57
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %314, !dbg !57
  %316 = getelementptr inbounds float, ptr addrspace(3) %315, i32 %312, !dbg !57
  %317 = load <4 x i32>, ptr addrspace(3) %316, align 16, !dbg !57
  %.extract = load i32, ptr addrspace(3) %311, align 16, !dbg !57
  %318 = getelementptr inbounds i8, ptr addrspace(3) %311, i32 4, !dbg !57
  %.extract8 = load i32, ptr addrspace(3) %318, align 4, !dbg !57
  %319 = getelementptr inbounds i8, ptr addrspace(3) %311, i32 8, !dbg !57
  %.extract9 = load i32, ptr addrspace(3) %319, align 8, !dbg !57
  %320 = getelementptr inbounds i8, ptr addrspace(3) %311, i32 12, !dbg !57
  %.extract10 = load i32, ptr addrspace(3) %320, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %258, i1 %180) #4, !dbg !57
  %.extract11 = extractelement <4 x i32> %317, i64 0, !dbg !57
  %.extract12 = extractelement <4 x i32> %317, i64 1, !dbg !57
  %.extract13 = extractelement <4 x i32> %317, i64 2, !dbg !57
  %.extract14 = extractelement <4 x i32> %317, i64 3, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %260, i1 %177) #4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx25tstxlj2znuw4byygoolyvmx6ozrajckclupupgaej7pyhj4q.py", directory: "inductor_cache/x2")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_32", linkageName: "triton_poi_fused_add_native_group_norm_relu_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 33, scope: !7)
!26 = !DILocation(line: 33, column: 45, scope: !7)
!27 = !DILocation(line: 33, column: 39, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 51, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 51, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 46, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 27, scope: !7)
!41 = !DILocation(line: 31, column: 19, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 50, column: 33, scope: !7)
!53 = !DILocation(line: 50, column: 44, scope: !7)
!54 = !DILocation(line: 50, column: 30, scope: !7)
!55 = !DILocation(line: 50, column: 38, scope: !7)
!56 = !DILocation(line: 50, column: 25, scope: !7)
!57 = !DILocation(line: 50, column: 56, scope: !7)
!58 = !DILocation(line: 50, column: 4, scope: !7)
