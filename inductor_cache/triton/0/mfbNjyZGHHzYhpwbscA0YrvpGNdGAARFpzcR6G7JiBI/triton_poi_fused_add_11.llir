; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = lshr i32 %8, 1, !dbg !12
  %12 = and i32 %11, 4, !dbg !12
  %13 = lshr i32 %8, 1, !dbg !12
  %14 = and i32 %13, 8, !dbg !12
  %15 = and i32 %8, 1, !dbg !12
  %16 = shl nuw nsw i32 %15, 1, !dbg !12
  %17 = shl i32 %8, 1, !dbg !12
  %18 = and i32 %17, 14, !dbg !12
  %19 = or disjoint i32 %12, %10, !dbg !12
  %20 = or disjoint i32 %19, %14, !dbg !12
  %21 = or disjoint i32 %20, %7, !dbg !13
  %22 = or disjoint i32 %7, %18, !dbg !13
  %23 = icmp slt i32 %21, 16, !dbg !14
  %24 = icmp slt i32 %22, 16, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 2, !dbg !16
  %.lobit14 = lshr i32 %8, 3, !dbg !17
  %27 = and i32 %.lobit14, 3, !dbg !17
  %28 = or disjoint i32 %26, %16, !dbg !18
  %29 = or disjoint i32 %27, %26, !dbg !18
  %30 = icmp slt i32 %28, 4, !dbg !19
  %31 = icmp slt i32 %29, 4, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %32 = sdiv i32 %.frozen, 4, !dbg !20
  %33 = mul i32 %32, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %33, !dbg !21
  %34 = srem i32 %21, 4, !dbg !21
  %35 = shl i32 %21, 2, !dbg !22
  %36 = add i32 %28, %35, !dbg !23
  %37 = sext i32 %36 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = and i1 %23, %30, !dbg !25
  %40 = and i1 %24, %31, !dbg !25
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %39) #2, !dbg !26
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !26
  %44 = bitcast i32 %42 to float, !dbg !26
  %45 = bitcast i32 %43 to float, !dbg !26
  %46 = sext i32 %34 to i64, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %23) #2, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %23) #2, !dbg !28
  %50 = bitcast i32 %49 to float, !dbg !28
  %51 = shl i32 %29, 2, !dbg !29
  %52 = add i32 %51, %.decomposed, !dbg !30
  %53 = shl i32 %32, 4, !dbg !31
  %54 = add i32 %52, %53, !dbg !32
  %55 = sext i32 %54 to i64, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !33
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %40) #2, !dbg !34
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !34
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !34
  %60 = bitcast i32 %58 to float, !dbg !34
  %61 = bitcast i32 %59 to float, !dbg !34
  %62 = fadd float %44, %50, !dbg !35
  %63 = fadd float %45, %50, !dbg !35
  %64 = shl nuw nsw i32 %15, 5, !dbg !35
  %65 = or disjoint i32 %64, %10, !dbg !35
  %66 = or disjoint i32 %65, %12, !dbg !35
  %67 = or disjoint i32 %66, %14, !dbg !35
  %68 = and i32 %17, 62, !dbg !35
  %.idx = shl nuw nsw i32 %15, 4, !dbg !35
  %69 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !35
  %70 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %67, !dbg !35
  %71 = bitcast float %62 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !35
  %72 = or disjoint i32 %67, 16, !dbg !35
  %73 = lshr i32 %72, 3, !dbg !35
  %74 = and i32 %73, 536870910, !dbg !35
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %74, !dbg !35
  %76 = getelementptr inbounds float, ptr addrspace(3) %75, i32 %72, !dbg !35
  %77 = bitcast float %63 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %78 = lshr i32 %17, 3, !dbg !35
  %79 = and i32 %78, 6, !dbg !35
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %79, !dbg !35
  %81 = getelementptr inbounds float, ptr addrspace(3) %80, i32 %68, !dbg !35
  %82 = load float, ptr addrspace(3) %81, align 8, !dbg !35
  %83 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 4, !dbg !35
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !35
  %85 = fadd float %82, %60, !dbg !36
  %86 = fadd float %84, %61, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %87 = shl i32 %8, 3, !dbg !38
  %88 = and i32 %87, 56, !dbg !38
  %89 = or disjoint i32 %27, %88, !dbg !38
  %90 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %88, !dbg !38
  %91 = getelementptr inbounds float, ptr addrspace(3) %90, i32 %89, !dbg !38
  %92 = bitcast float %85 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !38
  %93 = or disjoint i32 %89, 4, !dbg !38
  %94 = lshr i32 %93, 2, !dbg !38
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %94, !dbg !38
  %96 = getelementptr inbounds float, ptr addrspace(3) %95, i32 %93, !dbg !38
  %97 = bitcast float %86 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %98 = lshr i32 %68, 2, !dbg !38
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !38
  %100 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %68, !dbg !38
  %101 = load i32, ptr addrspace(3) %100, align 4, !dbg !38
  %102 = or disjoint i32 %68, 1, !dbg !38
  %103 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %102, !dbg !38
  %104 = load i32, ptr addrspace(3) %103, align 4, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %104, ptr addrspace(1) %38, i1 %39) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6uu4rfbgo3xsxmnmfrre5taemc3o75ovm367clfkokiuvfkdncj.py", directory: "inductor_cache/6u")
!4 = !{ptr @triton_poi_fused_add_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_11, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_11", linkageName: "triton_poi_fused_add_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 34, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 37, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 45, scope: !7)
!32 = !DILocation(line: 34, column: 42, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 50, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
!38 = !DILocation(line: 38, column: 46, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
