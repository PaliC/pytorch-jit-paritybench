; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_cat_elu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 7, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = icmp slt i32 %11, 512, !dbg !14
  %13 = sdiv i32 %11, 16, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %14 = sdiv i32 %.frozen, 128, !dbg !16
  %15 = mul i32 %14, 128, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %15, !dbg !17
  %16 = shl nsw i32 %14, 6, !dbg !18
  %17 = add nsw i32 %16, %srem.decomposed, !dbg !19
  %18 = sext i32 %17 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !21
  %21 = insertelement <2 x i32> %20, i32 %13, i64 1, !dbg !21
  %22 = srem <2 x i32> %21, <i32 16, i32 8>, !dbg !21
  %23 = extractelement <2 x i32> %22, i64 1, !dbg !22
  %24 = icmp slt i32 %23, 4, !dbg !23
  %25 = and i1 %12, %24, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %25, i32 0, i1 %25) #3, !dbg !25
  %27 = bitcast i32 %26 to float, !dbg !25
  %28 = sext i32 %23 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !26
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %25, i32 0, i1 %25) #3, !dbg !27
  %31 = bitcast i32 %30 to float, !dbg !27
  %32 = fadd float %27, %31, !dbg !28
  %33 = icmp sgt i32 %23, 3, !dbg !22
  %34 = insertelement <2 x i32> <i32 poison, i32 -4>, i32 %16, i64 0, !dbg !29
  %35 = add nsw <2 x i32> %34, %22, !dbg !29
  %36 = extractelement <2 x i32> %35, i64 1, !dbg !30
  %37 = shl nsw i32 %36, 4, !dbg !30
  %38 = extractelement <2 x i32> %35, i64 0, !dbg !31
  %39 = add nsw i32 %38, %37, !dbg !31
  %40 = sext i32 %39 to i64, !dbg !32
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !32
  %42 = and i1 %12, %33, !dbg !33
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %42, i32 0, i1 %42) #3, !dbg !34
  %44 = bitcast i32 %43 to float, !dbg !34
  %45 = sext i32 %36 to i64, !dbg !35
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !35
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %42, i32 0, i1 %42) #3, !dbg !36
  %48 = bitcast i32 %47 to float, !dbg !36
  %49 = fadd float %44, %48, !dbg !37
  %50 = select i1 %24, float %32, float %49, !dbg !38
  %51 = fmul float %50, 0x3FF7154760000000, !dbg !39
  %52 = tail call float @llvm.nvvm.round.f(float %51) #3, !dbg !39
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %53, 0, !dbg !39
  %54 = tail call float @llvm.nvvm.fabs.ftz.f(float %50) #3, !dbg !39
  %55 = tail call float @llvm.nvvm.fabs.f(float %50) #3, !dbg !39
  %.03.i = select i1 %.not.i, float %55, float %54, !dbg !39
  %56 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !39
  %t.0.i = select i1 %56, float 0.000000e+00, float %52, !dbg !39
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %59 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !39
  %j.0.i = select i1 %59, float 1.270000e+02, float %t.0.i, !dbg !39
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not8.i = icmp eq i32 %65, 0, !dbg !39
  br i1 %.not8.i, label %68, label %66, !dbg !39

66:                                               ; preds = %6
  %67 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #3, !dbg !39
  br label %__nv_expm1f.exit, !dbg !39

68:                                               ; preds = %6
  %69 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #3, !dbg !39
  br label %__nv_expm1f.exit, !dbg !39

__nv_expm1f.exit:                                 ; preds = %66, %68
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], !dbg !39
  %70 = fcmp ogt float %50, 0.000000e+00, !dbg !40
  %.not7.i = icmp eq i32 %64, 0, !dbg !39
  %.not6.i = icmp eq i32 %63, 0, !dbg !39
  %.not5.i = icmp eq i32 %62, 0, !dbg !39
  %.not4.i = icmp eq i32 %61, 0, !dbg !39
  %.not3.i = icmp eq i32 %60, 0, !dbg !39
  %.not2.i = icmp eq i32 %58, 0, !dbg !39
  %71 = fneg float %t.0.i, !dbg !39
  %.not1.i = icmp eq i32 %57, 0, !dbg !39
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %71, float 0x3FE62E4000000000, float %50) #3, !dbg !39
  %73 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %71, float 0x3FE62E4000000000, float %50) #3, !dbg !39
  %.04.i = select i1 %.not1.i, float %72, float %73, !dbg !39
  %74 = tail call float @llvm.nvvm.fma.rn.f(float %71, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !39
  %75 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %71, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !39
  %.05.i = select i1 %.not2.i, float %74, float %75, !dbg !39
  %76 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !39
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !39
  %.07.i = select i1 %.not3.i, float %76, float %77, !dbg !39
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !39
  %79 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !39
  %.08.i = select i1 %.not4.i, float %78, float %79, !dbg !39
  %80 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !39
  %81 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !39
  %.09.i = select i1 %.not5.i, float %80, float %81, !dbg !39
  %82 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !39
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !39
  %.06.i = select i1 %.not6.i, float %82, float %83, !dbg !39
  %84 = fmul float %.05.i, %.06.i, !dbg !39
  %85 = tail call float @llvm.nvvm.fma.rn.f(float %84, float %.05.i, float %.05.i) #3, !dbg !39
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %84, float %.05.i, float %.05.i) #3, !dbg !39
  %.01.i = select i1 %.not7.i, float %85, float %86, !dbg !39
  %87 = fadd float %.0.i, -1.000000e+00, !dbg !39
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not9.i = icmp eq i32 %88, 0, !dbg !39
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i, float %87) #3, !dbg !39
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i, float %87) #3, !dbg !39
  %.02.i = select i1 %.not9.i, float %90, float %89, !dbg !39
  %91 = fadd float %.02.i, %.02.i, !dbg !39
  %u.0.i = select i1 %59, float %91, float %.02.i, !dbg !39
  %92 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !39
  %u.1.i = select i1 %92, float 0x7FF0000000000000, float %u.0.i, !dbg !39
  %93 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !39
  %u.2.i = select i1 %93, float -1.000000e+00, float %u.1.i, !dbg !39
  %94 = fcmp oeq float %50, 0.000000e+00, !dbg !39
  %95 = fadd float %50, %50, !dbg !39
  %u.3.i = select i1 %94, float %95, float %u.2.i, !dbg !39
  %96 = select i1 %70, float %50, float %u.3.i, !dbg !41
  %97 = sext i32 %11 to i64, !dbg !42
  %98 = getelementptr float, ptr addrspace(1) %4, i64 %97, !dbg !42
  %99 = bitcast float %96 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %98, i1 %12) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs4vn3dlqyp2o4odhqqqim36gehzknxylf2k3a5heedej32awolc.py", directory: "inductor_cache/s4")
!4 = !{ptr @triton_poi_fused_cat_elu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_elu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_elu_1", linkageName: "triton_poi_fused_cat_elu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 48, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 38, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 36, scope: !7)
!30 = !DILocation(line: 41, column: 40, scope: !7)
!31 = !DILocation(line: 41, column: 53, scope: !7)
!32 = !DILocation(line: 41, column: 31, scope: !7)
!33 = !DILocation(line: 41, column: 69, scope: !7)
!34 = !DILocation(line: 41, column: 61, scope: !7)
!35 = !DILocation(line: 42, column: 31, scope: !7)
!36 = !DILocation(line: 42, column: 43, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 0, scope: !7)
!39 = !DILocation(line: 51, column: 28, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 35, scope: !7)
!42 = !DILocation(line: 54, column: 25, scope: !7)
!43 = !DILocation(line: 54, column: 37, scope: !7)
!44 = !DILocation(line: 54, column: 4, scope: !7)
