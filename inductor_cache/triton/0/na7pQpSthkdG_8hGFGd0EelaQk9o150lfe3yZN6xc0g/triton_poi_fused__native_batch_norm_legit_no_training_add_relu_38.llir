; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 7, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 124, !dbg !12
  %16 = and i32 %13, 127, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = or disjoint i32 %12, %16, !dbg !13
  %19 = icmp slt i32 %17, 512, !dbg !14
  %20 = icmp slt i32 %18, 512, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 2, !dbg !16
  %.lobit1 = lshr i32 %13, 5, !dbg !17
  %23 = and i32 %.lobit1, 3, !dbg !17
  %24 = or disjoint i32 %22, %23, !dbg !18
  %25 = icmp slt i32 %24, 4, !dbg !19
  %26 = icmp slt i32 %22, 4, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %27 = sdiv i32 %.frozen, 128, !dbg !20
  %28 = mul i32 %27, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %.frozen8 = freeze i32 %18, !dbg !20
  %29 = sdiv i32 %.frozen8, 128, !dbg !20
  %30 = mul i32 %29, 128, !dbg !21
  %.decomposed9 = sub i32 %.frozen8, %30, !dbg !21
  %31 = shl i32 %24, 7, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = shl i32 %27, 9, !dbg !24
  %34 = add i32 %32, %33, !dbg !25
  %35 = sext i32 %34 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = and i1 %19, %25, !dbg !27
  %38 = and i1 %26, %20, !dbg !27
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %37) #4, !dbg !28
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %44 = and i32 %14, 508, !dbg !28
  %45 = lshr i32 %14, 3, !dbg !28
  %46 = and i32 %45, 48, !dbg !28
  %47 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %46, !dbg !28
  %48 = getelementptr inbounds float, ptr addrspace(3) %47, i32 %44, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %48, i32 %40, i32 %41, i32 %42, i32 %43, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !28
  %50 = load float, ptr addrspace(3) %49, align 4, !dbg !28
  %51 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 528, !dbg !28
  %52 = load float, ptr addrspace(3) %51, align 4, !dbg !28
  %53 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 1056, !dbg !28
  %54 = load float, ptr addrspace(3) %53, align 4, !dbg !28
  %55 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 1584, !dbg !28
  %56 = load float, ptr addrspace(3) %55, align 4, !dbg !28
  %57 = sext i32 %.decomposed9 to i64, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %20) #4, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %20) #4, !dbg !32
  %62 = bitcast i32 %61 to float, !dbg !32
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !33
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %20) #4, !dbg !34
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !35
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %20) #4, !dbg !36
  %67 = shl i32 %29, 11, !dbg !37
  %68 = add i32 %.decomposed9, %21, !dbg !38
  %69 = shl i32 %68, 2, !dbg !38
  %70 = add i32 %69, 1536, !dbg !39
  %71 = add i32 %70, %67, !dbg !40
  %72 = sext i32 %71 to i64, !dbg !41
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %72, !dbg !41
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %38) #4, !dbg !42
  %75 = fadd float %62, 0x3EE4F8B580000000, !dbg !43
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %76, 0, !dbg !44
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i = icmp eq i32 %77, 0, !dbg !44
  br i1 %.not.i, label %83, label %78, !dbg !44

78:                                               ; preds = %10
  br i1 %.not1.i, label %81, label %79, !dbg !44

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

83:                                               ; preds = %10
  br i1 %.not1.i, label %86, label %84, !dbg !44

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !44
  %88 = bitcast i32 %59 to float, !dbg !30
  %89 = fsub float %56, %88, !dbg !45
  %90 = fsub float %54, %88, !dbg !45
  %91 = fsub float %52, %88, !dbg !45
  %92 = fsub float %50, %88, !dbg !45
  %93 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !42
  %94 = bitcast i32 %93 to float, !dbg !42
  %95 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !42
  %96 = bitcast i32 %95 to float, !dbg !42
  %97 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !42
  %98 = bitcast i32 %97 to float, !dbg !42
  %99 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !42
  %100 = bitcast i32 %99 to float, !dbg !42
  %101 = bitcast i32 %66 to float, !dbg !36
  %102 = bitcast i32 %64 to float, !dbg !34
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %104 = fmul float %92, %103, !dbg !47
  %105 = fmul float %91, %103, !dbg !47
  %106 = fmul float %90, %103, !dbg !47
  %107 = fmul float %89, %103, !dbg !47
  %108 = fmul float %104, %102, !dbg !48
  %109 = fmul float %105, %102, !dbg !48
  %110 = fmul float %106, %102, !dbg !48
  %111 = fmul float %107, %102, !dbg !48
  %112 = fadd float %108, %101, !dbg !49
  %113 = fadd float %109, %101, !dbg !49
  %114 = fadd float %110, %101, !dbg !49
  %115 = fadd float %111, %101, !dbg !49
  %116 = fcmp olt float %112, 0.000000e+00, !dbg !50
  %117 = fcmp olt float %113, 0.000000e+00, !dbg !50
  %118 = fcmp olt float %114, 0.000000e+00, !dbg !50
  %119 = fcmp olt float %115, 0.000000e+00, !dbg !50
  %120 = select i1 %116, float 0.000000e+00, float %112, !dbg !54
  %121 = select i1 %117, float 0.000000e+00, float %113, !dbg !54
  %122 = select i1 %118, float 0.000000e+00, float %114, !dbg !54
  %123 = select i1 %119, float 0.000000e+00, float %115, !dbg !54
  %124 = fadd float %120, %100, !dbg !55
  %125 = fadd float %121, %98, !dbg !55
  %126 = fadd float %122, %96, !dbg !55
  %127 = fadd float %123, %94, !dbg !55
  %128 = add i32 %69, %67, !dbg !56
  %129 = sext i32 %128 to i64, !dbg !57
  %130 = getelementptr float, ptr addrspace(1) %6, i64 %129, !dbg !57
  %131 = bitcast float %120 to i32, !dbg !58
  %132 = bitcast float %121 to i32, !dbg !58
  %133 = bitcast float %122 to i32, !dbg !58
  %134 = bitcast float %123 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %131, i32 %132, i32 %133, i32 %134, ptr addrspace(1) %130, i1 %38) #4, !dbg !58
  %135 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %136 = bitcast float %124 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %136, i1 true) #4, !dbg !60
  %137 = bitcast float %125 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %137, i1 true) #4, !dbg !60
  %138 = bitcast float %126 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %138, i1 true) #4, !dbg !60
  %139 = bitcast float %127 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %139, i1 true) #4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %.extract = load i32, ptr addrspace(3) %48, align 16, !dbg !60
  %140 = getelementptr inbounds i8, ptr addrspace(3) %48, i32 4, !dbg !60
  %.extract5 = load i32, ptr addrspace(3) %140, align 4, !dbg !60
  %141 = getelementptr inbounds i8, ptr addrspace(3) %48, i32 8, !dbg !60
  %.extract6 = load i32, ptr addrspace(3) %141, align 8, !dbg !60
  %142 = getelementptr inbounds i8, ptr addrspace(3) %48, i32 12, !dbg !60
  %.extract7 = load i32, ptr addrspace(3) %142, align 4, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract5, i32 %.extract6, i32 %.extract7, ptr addrspace(1) %135, i1 %37) #4, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckirpellgtbzgcn7cxgqupt2qlfhkyj5w26v4fjwa4jqe2i53hun.py", directory: "inductor_cache/ki")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_38", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 39, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 48, scope: !7)
!25 = !DILocation(line: 31, column: 44, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 61, scope: !7)
!28 = !DILocation(line: 31, column: 53, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 55, scope: !7)
!38 = !DILocation(line: 36, column: 38, scope: !7)
!39 = !DILocation(line: 36, column: 43, scope: !7)
!40 = !DILocation(line: 36, column: 50, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 60, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 26, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 45, column: 19, scope: !7)
!48 = !DILocation(line: 46, column: 20, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 49, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 51, column: 37, scope: !7)
!57 = !DILocation(line: 51, column: 25, scope: !7)
!58 = !DILocation(line: 51, column: 54, scope: !7)
!59 = !DILocation(line: 52, column: 25, scope: !7)
!60 = !DILocation(line: 52, column: 55, scope: !7)
!61 = !DILocation(line: 52, column: 4, scope: !7)
