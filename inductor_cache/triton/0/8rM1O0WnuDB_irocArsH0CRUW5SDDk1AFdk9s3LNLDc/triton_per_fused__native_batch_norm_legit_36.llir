; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = and i32 %7, 255, !dbg !11
  %11 = shl nuw nsw i32 %10, 5, !dbg !12
  %.frozen = freeze i32 %6, !dbg !13
  %12 = sdiv i32 %.frozen, 32, !dbg !13
  %13 = shl i32 %12, 15, !dbg !14
  %14 = or disjoint i32 %13, %11, !dbg !15
  %15 = mul i32 %12, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = add i32 %14, %.decomposed, !dbg !17
  %17 = add nsw i32 %.decomposed, 8192, !dbg !15
  %18 = add i32 %17, %14, !dbg !17
  %19 = add nsw i32 %.decomposed, 16384, !dbg !15
  %20 = add i32 %19, %14, !dbg !17
  %21 = add nsw i32 %.decomposed, 24576, !dbg !15
  %22 = add i32 %21, %14, !dbg !17
  %23 = sext i32 %16 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !18
  %25 = sext i32 %18 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = sext i32 %20 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !18
  %29 = sext i32 %22 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !19
  %32 = bitcast i32 %31 to float, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !19
  %34 = bitcast i32 %33 to float, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !19
  %36 = bitcast i32 %35 to float, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !19
  %38 = bitcast i32 %37 to float, !dbg !19
  %39 = fadd float %32, %34, !dbg !20
  %40 = fadd float %39, %36, !dbg !20
  %41 = fadd float %40, %38, !dbg !20
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !20
  %46 = bitcast float %45 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fadd float %45, %48, !dbg !20
  %50 = bitcast float %49 to i32, !dbg !25
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = fadd float %49, %52, !dbg !20
  %54 = bitcast float %53 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = fadd float %53, %56, !dbg !20
  %58 = bitcast float %57 to i32, !dbg !25
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = fadd float %57, %60, !dbg !20
  %62 = icmp eq i32 %8, 0, !dbg !25
  %63 = and i32 %9, 7, !dbg !25
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !25
  %65 = bitcast float %61 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 %62) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %66 = icmp slt i32 %7, 8, !dbg !25
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !25
  %68 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %67, i1 %66) #5, !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 4, i32 31), !dbg !25
  %71 = bitcast i32 %70 to float, !dbg !25
  %72 = fadd float %69, %71, !dbg !20
  %73 = bitcast float %72 to i32, !dbg !25
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !25
  %75 = bitcast i32 %74 to float, !dbg !25
  %76 = fadd float %72, %75, !dbg !20
  %77 = bitcast float %76 to i32, !dbg !25
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !25
  %79 = bitcast i32 %78 to float, !dbg !25
  %80 = fadd float %76, %79, !dbg !20
  %81 = and i32 %7, 7, !dbg !25
  %82 = icmp eq i32 %81, 0, !dbg !25
  %83 = and i1 %66, %82, !dbg !25
  %84 = bitcast float %80 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %84, i1 %83) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %85 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %86 = fadd float %85, 0.000000e+00, !dbg !26
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 1.024000e+03) #5, !dbg !30
  %88 = fsub float %32, %87, !dbg !31
  %89 = fsub float %34, %87, !dbg !31
  %90 = fsub float %36, %87, !dbg !31
  %91 = fsub float %38, %87, !dbg !31
  %92 = fmul float %88, %88, !dbg !32
  %93 = fmul float %89, %89, !dbg !32
  %94 = fmul float %90, %90, !dbg !32
  %95 = fmul float %91, %91, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %96 = fadd float %92, %93, !dbg !35
  %97 = fadd float %94, %96, !dbg !35
  %98 = fadd float %95, %97, !dbg !35
  %99 = bitcast float %98 to i32, !dbg !33
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !33
  %101 = bitcast i32 %100 to float, !dbg !33
  %102 = fadd float %98, %101, !dbg !35
  %103 = bitcast float %102 to i32, !dbg !33
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 8, i32 31), !dbg !33
  %105 = bitcast i32 %104 to float, !dbg !33
  %106 = fadd float %102, %105, !dbg !35
  %107 = bitcast float %106 to i32, !dbg !33
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = fadd float %106, %109, !dbg !35
  %111 = bitcast float %110 to i32, !dbg !33
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 2, i32 31), !dbg !33
  %113 = bitcast i32 %112 to float, !dbg !33
  %114 = fadd float %110, %113, !dbg !35
  %115 = bitcast float %114 to i32, !dbg !33
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !33
  %117 = bitcast i32 %116 to float, !dbg !33
  %118 = fadd float %114, %117, !dbg !35
  %119 = bitcast float %118 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %119, i1 %62) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %120 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %67, i1 %66) #5, !dbg !33
  %121 = bitcast i32 %120 to float, !dbg !33
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !33
  %123 = bitcast i32 %122 to float, !dbg !33
  %124 = fadd float %121, %123, !dbg !35
  %125 = bitcast float %124 to i32, !dbg !33
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !33
  %127 = bitcast i32 %126 to float, !dbg !33
  %128 = fadd float %124, %127, !dbg !35
  %129 = bitcast float %128 to i32, !dbg !33
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 1, i32 31), !dbg !33
  %131 = bitcast i32 %130 to float, !dbg !33
  %132 = fadd float %128, %131, !dbg !35
  %133 = bitcast float %132 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %133, i1 %83) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %134 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %135 = fadd float %134, 0.000000e+00, !dbg !36
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 1.024000e+03) #5, !dbg !38
  %137 = fadd float %136, 0x3EE4F8B580000000, !dbg !39
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %138, 0, !dbg !40
  br i1 %.not.i, label %141, label %139, !dbg !40

139:                                              ; preds = %5
  %140 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %137), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

141:                                              ; preds = %5
  %142 = tail call float @llvm.nvvm.rsqrt.approx.f(float %137), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %139, %141
  %.0.i = phi float [ %140, %139 ], [ %142, %141 ], !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %143 = sext i32 %6 to i64, !dbg !42
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !42
  %145 = icmp eq i32 %10, 0, !dbg !43
  %146 = bitcast float %.0.i to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %144, i1 %145) #5, !dbg !43
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !44
  %148 = bitcast float %87 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %147, i1 %145) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnczxh4kbceyrgmpaojjaxls54ekwoncdlgkhrmsfxf5a2t2prmd.py", directory: "inductor_cache/nc")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_36, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_36, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_36", linkageName: "triton_per_fused__native_batch_norm_legit_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 51, scope: !7)
!14 = !DILocation(line: 32, column: 45, scope: !7)
!15 = !DILocation(line: 32, column: 38, scope: !7)
!16 = !DILocation(line: 32, column: 64, scope: !7)
!17 = !DILocation(line: 32, column: 59, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 71, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 35, column: 57, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 35, column: 44, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !34)
!34 = !DILocation(line: 42, column: 59, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 42, column: 45, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 28, scope: !7)
!41 = !DILocation(line: 48, column: 4, scope: !7)
!42 = !DILocation(line: 49, column: 28, scope: !7)
!43 = !DILocation(line: 49, column: 40, scope: !7)
!44 = !DILocation(line: 50, column: 25, scope: !7)
!45 = !DILocation(line: 50, column: 36, scope: !7)
!46 = !DILocation(line: 50, column: 4, scope: !7)
