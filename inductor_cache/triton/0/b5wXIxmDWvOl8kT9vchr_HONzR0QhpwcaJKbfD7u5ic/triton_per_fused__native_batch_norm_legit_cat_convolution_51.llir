; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_cat_convolution_51(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = and i32 %10, 31, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %16 = shl i32 %10, 2, !dbg !15
  %17 = and i32 %16, 12, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %18 = sdiv i32 %.frozen, 64, !dbg !16
  %19 = mul i32 %18, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = shl i32 %14, 4, !dbg !18
  %21 = or disjoint i32 %20, %17, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !21
  %29 = bitcast i32 %25 to float, !dbg !21
  %30 = bitcast i32 %26 to float, !dbg !21
  %31 = bitcast i32 %27 to float, !dbg !21
  %32 = bitcast i32 %28 to float, !dbg !21
  %33 = sext i32 %.decomposed to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #5, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #5, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #5, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #5, !dbg !23
  %39 = bitcast i32 %38 to float, !dbg !23
  %40 = fadd float %29, %39, !dbg !24
  %41 = fadd float %30, %39, !dbg !24
  %42 = fadd float %31, %39, !dbg !24
  %43 = fadd float %32, %39, !dbg !24
  %44 = fadd float %40, %41, !dbg !25
  %45 = fadd float %42, %44, !dbg !25
  %46 = fadd float %43, %45, !dbg !25
  %47 = select i1 %15, float %46, float 0.000000e+00, !dbg !25
  %48 = bitcast float %47 to i32, !dbg !30
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = fadd float %47, %50, !dbg !25
  %52 = bitcast float %51 to i32, !dbg !30
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !30
  %54 = bitcast i32 %53 to float, !dbg !30
  %55 = fadd float %51, %54, !dbg !25
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %57 = bitcast float %55 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %59 = load float, ptr addrspace(3) %58, align 4, !dbg !31
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 1.600000e+01) #5, !dbg !31
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 1.600000e+01) #5, !dbg !31
  %62 = fsub float %40, %61, !dbg !32
  %63 = fsub float %41, %61, !dbg !32
  %64 = fsub float %42, %61, !dbg !32
  %65 = fsub float %43, %61, !dbg !32
  %66 = fmul float %62, %62, !dbg !33
  %67 = fmul float %63, %63, !dbg !33
  %68 = fmul float %64, %64, !dbg !33
  %69 = fmul float %65, %65, !dbg !33
  %70 = fadd float %66, %67, !dbg !34
  %71 = fadd float %68, %70, !dbg !34
  %72 = fadd float %69, %71, !dbg !34
  %73 = select i1 %15, float %72, float 0.000000e+00, !dbg !34
  %74 = bitcast float %73 to i32, !dbg !36
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !36
  %76 = bitcast i32 %75 to float, !dbg !36
  %77 = fadd float %73, %76, !dbg !34
  %78 = bitcast float %77 to i32, !dbg !36
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !36
  %80 = bitcast i32 %79 to float, !dbg !36
  %81 = fadd float %77, %80, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %82 = bitcast float %81 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %82, i1 true) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %83 = load float, ptr addrspace(3) %58, align 4, !dbg !37
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float 1.600000e+01) #5, !dbg !38
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 1.600000e+01) #5, !dbg !38
  %86 = fadd float %84, 0x3EE4F8B580000000, !dbg !39
  %87 = fadd float %85, 0x3EE4F8B580000000, !dbg !39
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %88, 0, !dbg !37
  br i1 %.not.i, label %91, label %89, !dbg !37

89:                                               ; preds = %7
  %90 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %86), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

91:                                               ; preds = %7
  %92 = tail call float @llvm.nvvm.rsqrt.approx.f(float %86), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %89, %91
  %.0.i = phi float [ %90, %89 ], [ %92, %91 ], !dbg !37
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i12 = icmp eq i32 %96, 0, !dbg !37
  br i1 %.not.i12, label %99, label %97, !dbg !37

97:                                               ; preds = %__nv_rsqrtf.exit
  %98 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %87), !dbg !37
  br label %__nv_rsqrtf.exit14, !dbg !37

99:                                               ; preds = %__nv_rsqrtf.exit
  %100 = tail call float @llvm.nvvm.rsqrt.approx.f(float %87), !dbg !37
  br label %__nv_rsqrtf.exit14, !dbg !37

__nv_rsqrtf.exit14:                               ; preds = %97, %99
  %.0.i13 = phi float [ %98, %97 ], [ %100, %99 ], !dbg !37
  %101 = or disjoint i32 %9, %13, !dbg !13
  %102 = icmp slt i32 %101, 256, !dbg !14
  %103 = fmul float %62, %.0.i13, !dbg !40
  %104 = fmul float %63, %.0.i13, !dbg !40
  %105 = fmul float %64, %.0.i13, !dbg !40
  %106 = fmul float %65, %.0.i13, !dbg !40
  %107 = fcmp olt float %103, 0.000000e+00, !dbg !41
  %108 = fcmp olt float %104, 0.000000e+00, !dbg !41
  %109 = fcmp olt float %105, 0.000000e+00, !dbg !41
  %110 = fcmp olt float %106, 0.000000e+00, !dbg !41
  %111 = select i1 %107, float 0.000000e+00, float %103, !dbg !45
  %112 = select i1 %108, float 0.000000e+00, float %104, !dbg !45
  %113 = select i1 %109, float 0.000000e+00, float %105, !dbg !45
  %114 = select i1 %110, float 0.000000e+00, float %106, !dbg !45
  %115 = bitcast float %40 to i32, !dbg !46
  %116 = bitcast float %41 to i32, !dbg !46
  %117 = bitcast float %42 to i32, !dbg !46
  %118 = bitcast float %43 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %116, i32 %117, i32 %118, ptr addrspace(1) %23, i1 %15) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %119 = sext i32 %101 to i64, !dbg !48
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !48
  %121 = and i32 %10, 96, !dbg !49
  %122 = icmp eq i32 %121, 0, !dbg !49
  %123 = bitcast float %.0.i to i32, !dbg !49
  %124 = and i1 %122, %102, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %120, i1 %124) #5, !dbg !49
  %125 = shl nsw i32 %.decomposed, 4, !dbg !50
  %126 = or disjoint i32 %125, %17, !dbg !51
  %127 = mul i32 %18, 17408, !dbg !52
  %128 = add i32 %126, %127, !dbg !53
  %129 = sext i32 %128 to i64, !dbg !54
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %129, !dbg !54
  %131 = bitcast float %111 to i32, !dbg !55
  %132 = bitcast float %112 to i32, !dbg !55
  %133 = bitcast float %113 to i32, !dbg !55
  %134 = bitcast float %114 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %131, i32 %132, i32 %133, i32 %134, ptr addrspace(1) %130, i1 %15) #5, !dbg !55
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !56
  %136 = bitcast float %60 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %135, i1 %124) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py", directory: "inductor_cache/ef")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_convolution_51, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_cat_convolution_51, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_cat_convolution_51", linkageName: "triton_per_fused__native_batch_norm_legit_cat_convolution_51", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 42, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 40, column: 24, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !35)
!35 = !DILocation(line: 48, column: 26, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !35)
!37 = !DILocation(line: 53, column: 28, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 57, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 58, column: 47, scope: !7)
!47 = !DILocation(line: 59, column: 4, scope: !7)
!48 = !DILocation(line: 60, column: 28, scope: !7)
!49 = !DILocation(line: 60, column: 40, scope: !7)
!50 = !DILocation(line: 61, column: 33, scope: !7)
!51 = !DILocation(line: 61, column: 30, scope: !7)
!52 = !DILocation(line: 61, column: 44, scope: !7)
!53 = !DILocation(line: 61, column: 38, scope: !7)
!54 = !DILocation(line: 61, column: 25, scope: !7)
!55 = !DILocation(line: 61, column: 56, scope: !7)
!56 = !DILocation(line: 62, column: 25, scope: !7)
!57 = !DILocation(line: 62, column: 37, scope: !7)
!58 = !DILocation(line: 62, column: 4, scope: !7)
