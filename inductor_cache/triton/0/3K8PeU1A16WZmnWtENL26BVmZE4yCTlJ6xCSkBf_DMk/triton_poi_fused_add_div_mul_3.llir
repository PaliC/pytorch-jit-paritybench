; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_div_mul_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 1024, !dbg !14
  %16 = srem i32 %14, 16, !dbg !15
  %17 = sdiv i32 %14, 256, !dbg !16
  %18 = sext i32 %16 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %15) #1, !dbg !18
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !18
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !18
  %23 = bitcast i32 %21 to float, !dbg !18
  %24 = bitcast i32 %22 to float, !dbg !18
  %25 = sext i32 %14 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %15) #1, !dbg !20
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %30 = bitcast i32 %28 to float, !dbg !20
  %31 = bitcast i32 %29 to float, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %15) #1, !dbg !22
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %36 = bitcast i32 %34 to float, !dbg !22
  %37 = bitcast i32 %35 to float, !dbg !22
  %38 = shl nsw i32 %17, 4, !dbg !23
  %39 = add nsw i32 %38, %16, !dbg !24
  %40 = sext i32 %39 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !25
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %15) #1, !dbg !26
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !26
  %45 = bitcast i32 %43 to float, !dbg !26
  %46 = bitcast i32 %44 to float, !dbg !26
  %47 = sext i32 %17 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %15) #1, !dbg !28
  %50 = bitcast i32 %49 to float, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %15) #1, !dbg !28
  %52 = bitcast i32 %51 to float, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !29
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %15) #1, !dbg !30
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !30
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !30
  %57 = bitcast i32 %55 to float, !dbg !30
  %58 = bitcast i32 %56 to float, !dbg !30
  %59 = fadd float %30, %36, !dbg !31
  %60 = fadd float %31, %37, !dbg !31
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float %50) #1, !dbg !32
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float %52) #1, !dbg !32
  %63 = fmul float %59, %61, !dbg !33
  %64 = fmul float %60, %62, !dbg !33
  %65 = fmul float %63, %23, !dbg !34
  %66 = fmul float %64, %24, !dbg !34
  %67 = fadd float %65, %57, !dbg !35
  %68 = fadd float %66, %58, !dbg !35
  %69 = fadd float %59, %67, !dbg !36
  %70 = fadd float %60, %68, !dbg !36
  %71 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !37
  %72 = bitcast float %69 to i32, !dbg !38
  %73 = bitcast float %70 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %72, i32 %73, ptr addrspace(1) %71, i1 %15) #1, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckbcsaey5dx6wkhtdvhwsytd3jpqy46qvfiakynig2pwygl7rhtw.py", directory: "inductor_cache/kb")
!4 = !{ptr @triton_poi_fused_add_div_mul_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_3", linkageName: "triton_poi_fused_add_div_mul_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 38, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 43, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 19, scope: !7)
!36 = !DILocation(line: 38, column: 20, scope: !7)
!37 = !DILocation(line: 39, column: 25, scope: !7)
!38 = !DILocation(line: 39, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 4, scope: !7)
