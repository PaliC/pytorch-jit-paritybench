#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":19:0)
#loc1 = loc(unknown)
#loc28 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":43:39)
#loc38 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":48:26)
#loc46 = loc(callsite(#loc1 at #loc28))
#loc52 = loc(callsite(#loc1 at #loc38))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__softmax_add_4(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<225> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0xFF800000> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c64_i32 : i32 loc(#loc5)
    %5 = arith.muli %0, %c64_i32 : i32 loc(#loc6)
    %6 = tt.splat %5 : i32 -> tensor<1x64xi32, #blocked> loc(#loc7)
    %7 = arith.addi %3, %6 : tensor<1x64xi32, #blocked> loc(#loc7)
    %8 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %8, %7 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc8)
    %10 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc9)
    %11 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked1> loc(#loc9)
    %12 = tt.load %9, %10, %cst : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %13 = triton_gpu.convert_layout %12 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc9)
    %14 = arith.muli %4, %c64_i32 : i32 loc(#loc10)
    %15 = tt.splat %14 : i32 -> tensor<1x64xi32, #blocked> loc(#loc11)
    %16 = arith.addi %3, %15 : tensor<1x64xi32, #blocked> loc(#loc11)
    %17 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc12)
    %18 = tt.addptr %17, %16 : tensor<1x64x!tt.ptr<i64>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc12)
    %19 = tt.load %18, %10, %cst_1 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc13)
    %20 = arith.addi %19, %cst_0 : tensor<1x64xi64, #blocked> loc(#loc14)
    %21 = arith.cmpi slt, %19, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc15)
    %22 = arith.select %21, %20, %19 : tensor<1x64xi1, #blocked>, tensor<1x64xi64, #blocked> loc(#loc16)
    %23 = arith.cmpi sge, %22, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc17)
    %24 = arith.cmpi slt, %22, %cst_0 : tensor<1x64xi64, #blocked> loc(#loc18)
    %25 = arith.andi %23, %24 : tensor<1x64xi1, #blocked> loc(#loc19)
    %26 = arith.cmpi sge, %0, %c256_i32 : i32 loc(#loc44)
    %27 = tt.splat %26 : i1 -> tensor<1x64xi1, #blocked> loc(#loc21)
    %28 = arith.ori %25, %27 : tensor<1x64xi1, #blocked> loc(#loc21)
    tt.assert %28, "index out of bounds: 0 <= tmp5 < 225" : tensor<1x64xi1, #blocked> loc(#loc22)
    %29 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc23)
    %30 = tt.addptr %29, %22 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi64, #blocked> loc(#loc23)
    %31 = triton_gpu.convert_layout %30 : tensor<1x64x!tt.ptr<f32>, #blocked> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %32 = tt.load %31, %11 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %33 = arith.addf %13, %32 : tensor<1x64xf32, #blocked1> loc(#loc25)
    %34 = arith.select %11, %33, %cst_2 : tensor<1x64xi1, #blocked1>, tensor<1x64xf32, #blocked1> loc(#loc26)
    %35 = "tt.reduce"(%34) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc28)), %arg6: f32 loc(callsite(#loc1 at #loc28))):
      %46 = arith.cmpf ogt, %arg5, %arg6 : f32 loc(#loc54)
      %47 = arith.cmpf une, %arg5, %arg5 : f32 loc(#loc55)
      %48 = arith.ori %46, %47 : i1 loc(#loc56)
      %49 = arith.select %48, %arg5, %arg6 : f32 loc(#loc57)
      tt.reduce.return %49 : f32 loc(#loc45)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc45)
    %36 = tt.expand_dims %35 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc33)
    %37 = tt.broadcast %36 : tensor<1x1xf32, #blocked1> -> tensor<1x64xf32, #blocked1> loc(#loc34)
    %38 = arith.subf %33, %37 : tensor<1x64xf32, #blocked1> loc(#loc34)
    %39 = math.exp %38 : tensor<1x64xf32, #blocked1> loc(#loc35)
    %40 = arith.select %11, %39, %cst_3 : tensor<1x64xi1, #blocked1>, tensor<1x64xf32, #blocked1> loc(#loc36)
    %41 = "tt.reduce"(%40) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc38)), %arg6: f32 loc(callsite(#loc1 at #loc38))):
      %46 = arith.addf %arg5, %arg6 : f32 loc(#loc58)
      tt.reduce.return %46 : f32 loc(#loc51)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc51)
    %42 = tt.expand_dims %41 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc40)
    %43 = tt.broadcast %42 : tensor<1x1xf32, #blocked1> -> tensor<1x64xf32, #blocked1> loc(#loc41)
    %44 = arith.divf %39, %43 : tensor<1x64xf32, #blocked1> loc(#loc41)
    %45 = triton_gpu.convert_layout %44 : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc42)
    tt.store %9, %45, %10 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":23:28)
#loc3 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":25:21)
#loc4 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":26:34)
#loc5 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":31:19)
#loc6 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":32:42)
#loc7 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":32:39)
#loc8 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":32:34)
#loc9 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":32:47)
#loc10 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":33:38)
#loc11 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":33:35)
#loc12 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":33:30)
#loc13 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":33:43)
#loc14 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":35:18)
#loc15 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":36:18)
#loc16 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":37:32)
#loc17 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":38:28)
#loc18 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":38:44)
#loc19 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":38:37)
#loc20 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":38:54)
#loc21 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":38:52)
#loc22 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":38:62)
#loc23 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":39:30)
#loc24 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":39:37)
#loc25 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":40:18)
#loc26 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":42:34)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc33 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":43:42)
#loc34 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":44:19)
#loc35 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":45:24)
#loc36 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":47:35)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc40 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":48:29)
#loc41 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":49:20)
#loc42 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":50:48)
#loc43 = loc("inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py":50:4)
#loc44 = loc(fused[#loc20, #loc3])
#loc45 = loc(callsite(#loc27 at #loc28))
#loc47 = loc(callsite(#loc29 at #loc27))
#loc48 = loc(callsite(#loc30 at #loc27))
#loc49 = loc(callsite(#loc31 at #loc27))
#loc50 = loc(callsite(#loc32 at #loc27))
#loc51 = loc(callsite(#loc37 at #loc38))
#loc53 = loc(callsite(#loc39 at #loc37))
#loc54 = loc(callsite(#loc47 at #loc28))
#loc55 = loc(callsite(#loc48 at #loc28))
#loc56 = loc(callsite(#loc49 at #loc28))
#loc57 = loc(callsite(#loc50 at #loc28))
#loc58 = loc(callsite(#loc53 at #loc38))
