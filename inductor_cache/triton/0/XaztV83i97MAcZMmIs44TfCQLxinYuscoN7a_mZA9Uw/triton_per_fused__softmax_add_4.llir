; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/h6/ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp5 < 225\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused__softmax_add_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = icmp slt i32 %6, 256, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = and i32 %8, 63, !dbg !14
  %10 = srem i32 %6, 64, !dbg !15
  %11 = shl i32 %6, 6, !dbg !16
  %12 = or disjoint i32 %11, %9, !dbg !17
  %13 = sext i32 %12 to i64, !dbg !18
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !18
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %14, i1 %7, i32 0, i1 %7) #4, !dbg !19
  %16 = shl nsw i32 %10, 6, !dbg !20
  %17 = or disjoint i32 %16, %9, !dbg !21
  %18 = sext i32 %17 to i64, !dbg !22
  %19 = getelementptr i64, ptr addrspace(1) %1, i64 %18, !dbg !22
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %19, i1 %7, i1 %7) #4, !dbg !23
  %21 = add i64 %20, 225, !dbg !24
  %22 = icmp slt i64 %20, 0, !dbg !25
  %23 = select i1 %22, i64 %21, i64 %20, !dbg !26
  %24 = icmp ugt i64 %23, 224, !dbg !27
  %.not2 = and i1 %7, %24, !dbg !28
  br i1 %.not2, label %25, label %26, !dbg !28

25:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 38, ptr nonnull @assertFunc_0, i64 1), !dbg !28
  unreachable, !dbg !28

26:                                               ; preds = %5
  %27 = bitcast i32 %15 to float, !dbg !19
  %28 = lshr i32 %8, 5, !dbg !14
  %29 = and i32 %8, 31, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !29
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %7) #4, !dbg !30
  %32 = bitcast i32 %31 to float, !dbg !30
  %33 = fadd float %27, %32, !dbg !31
  %34 = select i1 %7, float %33, float 0xFFF0000000000000, !dbg !32
  %35 = bitcast float %34 to i32, !dbg !33
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 16, i32 31), !dbg !33
  %37 = bitcast i32 %36 to float, !dbg !33
  %38 = fcmp ogt float %34, %37, !dbg !37
  %39 = fcmp uno float %34, 0.000000e+00, !dbg !39
  %40 = or i1 %38, %39, !dbg !40
  %41 = select i1 %40, float %34, float %37, !dbg !41
  %42 = bitcast float %41 to i32, !dbg !33
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 8, i32 31), !dbg !33
  %44 = bitcast i32 %43 to float, !dbg !33
  %45 = fcmp ogt float %41, %44, !dbg !37
  %46 = fcmp uno float %41, 0.000000e+00, !dbg !39
  %47 = or i1 %45, %46, !dbg !40
  %48 = select i1 %47, float %41, float %44, !dbg !41
  %49 = bitcast float %48 to i32, !dbg !33
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 4, i32 31), !dbg !33
  %51 = bitcast i32 %50 to float, !dbg !33
  %52 = fcmp ogt float %48, %51, !dbg !37
  %53 = fcmp uno float %48, 0.000000e+00, !dbg !39
  %54 = or i1 %52, %53, !dbg !40
  %55 = select i1 %54, float %48, float %51, !dbg !41
  %56 = bitcast float %55 to i32, !dbg !33
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !33
  %58 = bitcast i32 %57 to float, !dbg !33
  %59 = fcmp ogt float %55, %58, !dbg !37
  %60 = fcmp uno float %55, 0.000000e+00, !dbg !39
  %61 = or i1 %59, %60, !dbg !40
  %62 = select i1 %61, float %55, float %58, !dbg !41
  %63 = bitcast float %62 to i32, !dbg !33
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 1, i32 31), !dbg !33
  %65 = bitcast i32 %64 to float, !dbg !33
  %66 = fcmp ogt float %62, %65, !dbg !37
  %67 = fcmp uno float %62, 0.000000e+00, !dbg !39
  %68 = or i1 %66, %67, !dbg !40
  %69 = icmp eq i32 %29, 0, !dbg !33
  %70 = and i32 %28, 1, !dbg !33
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !33
  %72 = select i1 %68, i32 %63, i32 %64, !dbg !41
  %73 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %73, i1 %69) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %74 = icmp slt i32 %8, 2, !dbg !33
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !33
  %76 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %75, i1 %74) #4, !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !33
  %79 = bitcast i32 %78 to float, !dbg !33
  %80 = fcmp ogt float %77, %79, !dbg !37
  %81 = fcmp uno float %77, 0.000000e+00, !dbg !39
  %82 = or i1 %81, %80, !dbg !40
  %83 = and i32 %8, 1, !dbg !33
  %84 = icmp eq i32 %83, 0, !dbg !33
  %85 = and i1 %74, %84, !dbg !33
  %86 = select i1 %82, i32 %76, i32 %78, !dbg !41
  %87 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %87, i1 %85) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %88 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %89 = fsub float %33, %88, !dbg !42
  %90 = fmul float %89, 0x3FF7154760000000, !dbg !43
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #4, !dbg !43
  %92 = select i1 %7, float %91, float 0.000000e+00, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %93 = bitcast float %92 to i32, !dbg !45
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 16, i32 31), !dbg !45
  %95 = bitcast i32 %94 to float, !dbg !45
  %96 = fadd float %92, %95, !dbg !49
  %97 = bitcast float %96 to i32, !dbg !45
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !45
  %99 = bitcast i32 %98 to float, !dbg !45
  %100 = fadd float %96, %99, !dbg !49
  %101 = bitcast float %100 to i32, !dbg !45
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 4, i32 31), !dbg !45
  %103 = bitcast i32 %102 to float, !dbg !45
  %104 = fadd float %100, %103, !dbg !49
  %105 = bitcast float %104 to i32, !dbg !45
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 2, i32 31), !dbg !45
  %107 = bitcast i32 %106 to float, !dbg !45
  %108 = fadd float %104, %107, !dbg !49
  %109 = bitcast float %108 to i32, !dbg !45
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !45
  %111 = bitcast i32 %110 to float, !dbg !45
  %112 = fadd float %108, %111, !dbg !49
  %113 = bitcast float %112 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %113, i1 %69) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %114 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %75, i1 %74) #4, !dbg !45
  %115 = bitcast i32 %114 to float, !dbg !45
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !45
  %117 = bitcast i32 %116 to float, !dbg !45
  %118 = fadd float %115, %117, !dbg !49
  %119 = bitcast float %118 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %119, i1 %85) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %120 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !45
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %120) #4, !dbg !51
  %122 = bitcast float %121 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %14, i1 %7) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch6pjrqhgnjjtynpmzrcy6ogwoo4hi37puqcxy2asems7demyxlg.py", directory: "inductor_cache/h6")
!4 = !{ptr @triton_per_fused__softmax_add_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_add_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_4", linkageName: "triton_per_fused__softmax_add_4", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 25, column: 21, scope: !11)
!14 = !DILocation(line: 26, column: 34, scope: !11)
!15 = !DILocation(line: 31, column: 19, scope: !11)
!16 = !DILocation(line: 32, column: 42, scope: !11)
!17 = !DILocation(line: 32, column: 39, scope: !11)
!18 = !DILocation(line: 32, column: 34, scope: !11)
!19 = !DILocation(line: 32, column: 47, scope: !11)
!20 = !DILocation(line: 33, column: 38, scope: !11)
!21 = !DILocation(line: 33, column: 35, scope: !11)
!22 = !DILocation(line: 33, column: 30, scope: !11)
!23 = !DILocation(line: 33, column: 43, scope: !11)
!24 = !DILocation(line: 35, column: 18, scope: !11)
!25 = !DILocation(line: 36, column: 18, scope: !11)
!26 = !DILocation(line: 37, column: 32, scope: !11)
!27 = !DILocation(line: 38, column: 37, scope: !11)
!28 = !DILocation(line: 38, column: 62, scope: !11)
!29 = !DILocation(line: 39, column: 30, scope: !11)
!30 = !DILocation(line: 39, column: 37, scope: !11)
!31 = !DILocation(line: 40, column: 18, scope: !11)
!32 = !DILocation(line: 42, column: 34, scope: !11)
!33 = !DILocation(line: 131, column: 29, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !11, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 43, column: 39, scope: !11)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!39 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !36)
!40 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !36)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !36)
!42 = !DILocation(line: 44, column: 19, scope: !11)
!43 = !DILocation(line: 45, column: 24, scope: !11)
!44 = !DILocation(line: 47, column: 35, scope: !11)
!45 = !DILocation(line: 267, column: 36, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !11, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!48 = !DILocation(line: 48, column: 26, scope: !11)
!49 = !DILocation(line: 256, column: 15, scope: !50, inlinedAt: !48)
!50 = distinct !DILexicalBlockFile(scope: !46, file: !47, discriminator: 0)
!51 = !DILocation(line: 49, column: 20, scope: !11)
!52 = !DILocation(line: 50, column: 48, scope: !11)
!53 = !DILocation(line: 50, column: 4, scope: !11)
