; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_max_mean_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = and i32 %7, 7, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = icmp slt i32 %11, 16, !dbg !14
  %14 = icmp slt i32 %12, 16, !dbg !14
  %15 = shl i32 %7, 1, !dbg !15
  %16 = and i32 %15, 14, !dbg !15
  %17 = shl i32 %11, 4, !dbg !16
  %18 = shl i32 %12, 4, !dbg !16
  %19 = or disjoint i32 %17, %16, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !18
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !19
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !19
  %25 = bitcast i32 %23 to float, !dbg !19
  %26 = bitcast i32 %24 to float, !dbg !19
  %27 = sext i32 %18 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = or disjoint i32 %18, 1, !dbg !22
  %32 = sext i32 %31 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #3, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = or disjoint i32 %18, 2, !dbg !25
  %37 = sext i32 %36 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %14) #3, !dbg !27
  %40 = bitcast i32 %39 to float, !dbg !27
  %41 = or disjoint i32 %18, 3, !dbg !28
  %42 = sext i32 %41 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %14) #3, !dbg !30
  %45 = or disjoint i32 %18, 4, !dbg !31
  %46 = sext i32 %45 to i64, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !32
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %14) #3, !dbg !33
  %49 = bitcast i32 %48 to float, !dbg !33
  %50 = or disjoint i32 %18, 5, !dbg !34
  %51 = sext i32 %50 to i64, !dbg !35
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !35
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %14) #3, !dbg !36
  %54 = bitcast i32 %53 to float, !dbg !36
  %55 = or disjoint i32 %18, 6, !dbg !37
  %56 = sext i32 %55 to i64, !dbg !38
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !38
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %14) #3, !dbg !39
  %59 = bitcast i32 %58 to float, !dbg !39
  %60 = or disjoint i32 %18, 7, !dbg !40
  %61 = sext i32 %60 to i64, !dbg !41
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !41
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %14) #3, !dbg !42
  %64 = bitcast i32 %63 to float, !dbg !42
  %65 = or disjoint i32 %18, 8, !dbg !43
  %66 = sext i32 %65 to i64, !dbg !44
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !44
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %14) #3, !dbg !45
  %69 = bitcast i32 %68 to float, !dbg !45
  %70 = or disjoint i32 %18, 9, !dbg !46
  %71 = sext i32 %70 to i64, !dbg !47
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !47
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %14) #3, !dbg !48
  %74 = bitcast i32 %73 to float, !dbg !48
  %75 = or disjoint i32 %18, 10, !dbg !49
  %76 = sext i32 %75 to i64, !dbg !50
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !50
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %14) #3, !dbg !51
  %79 = bitcast i32 %78 to float, !dbg !51
  %80 = or disjoint i32 %18, 11, !dbg !52
  %81 = sext i32 %80 to i64, !dbg !53
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !53
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %14) #3, !dbg !54
  %84 = bitcast i32 %83 to float, !dbg !54
  %85 = or disjoint i32 %18, 12, !dbg !55
  %86 = sext i32 %85 to i64, !dbg !56
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !56
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %14) #3, !dbg !57
  %89 = bitcast i32 %88 to float, !dbg !57
  %90 = or disjoint i32 %18, 13, !dbg !58
  %91 = sext i32 %90 to i64, !dbg !59
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !59
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %14) #3, !dbg !60
  %94 = or disjoint i32 %18, 14, !dbg !61
  %95 = sext i32 %94 to i64, !dbg !62
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !62
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %14) #3, !dbg !63
  %98 = bitcast i32 %97 to float, !dbg !63
  %99 = or disjoint i32 %18, 15, !dbg !64
  %100 = sext i32 %99 to i64, !dbg !65
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !65
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %14) #3, !dbg !66
  %103 = bitcast i32 %102 to float, !dbg !66
  %104 = fadd float %25, %26, !dbg !67
  %105 = select i1 %13, float %104, float 0.000000e+00, !dbg !67
  %106 = bitcast float %105 to i32, !dbg !72
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !72
  %108 = bitcast i32 %107 to float, !dbg !72
  %109 = fadd float %105, %108, !dbg !67
  %110 = bitcast float %109 to i32, !dbg !72
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !72
  %112 = bitcast i32 %111 to float, !dbg !72
  %113 = fadd float %109, %112, !dbg !67
  %114 = bitcast float %113 to i32, !dbg !72
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !72
  %116 = bitcast i32 %115 to float, !dbg !72
  %117 = fadd float %113, %116, !dbg !67
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !73
  %119 = bitcast float %117 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #3, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !73
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !73
  %122 = fcmp ogt float %30, %35, !dbg !74
  %123 = fcmp uno float %30, 0.000000e+00, !dbg !78
  %124 = or i1 %123, %122, !dbg !79
  %125 = select i1 %124, float %30, float %35, !dbg !80
  %126 = fcmp ogt float %125, %40, !dbg !81
  %127 = fcmp uno float %125, 0.000000e+00, !dbg !83
  %128 = or i1 %126, %127, !dbg !84
  %129 = select i1 %128, float %125, float %40, !dbg !85
  %130 = fcmp uno float %129, 0.000000e+00, !dbg !86
  %131 = fcmp ogt float %49, %54, !dbg !88
  %132 = fcmp uno float %49, 0.000000e+00, !dbg !90
  %133 = or i1 %132, %131, !dbg !91
  %134 = select i1 %133, float %49, float %54, !dbg !92
  %135 = fcmp ogt float %134, %59, !dbg !93
  %136 = fcmp uno float %134, 0.000000e+00, !dbg !95
  %137 = or i1 %135, %136, !dbg !96
  %138 = select i1 %137, float %134, float %59, !dbg !97
  %139 = fcmp ogt float %138, %64, !dbg !98
  %140 = fcmp uno float %138, 0.000000e+00, !dbg !100
  %141 = or i1 %139, %140, !dbg !101
  %142 = select i1 %141, float %138, float %64, !dbg !102
  %143 = fcmp ogt float %69, %74, !dbg !103
  %144 = fcmp uno float %69, 0.000000e+00, !dbg !105
  %145 = or i1 %144, %143, !dbg !106
  %146 = select i1 %145, float %69, float %74, !dbg !107
  %147 = fcmp ogt float %146, %79, !dbg !108
  %148 = fcmp uno float %146, 0.000000e+00, !dbg !110
  %149 = or i1 %147, %148, !dbg !111
  %150 = select i1 %149, float %146, float %79, !dbg !112
  %151 = fcmp ogt float %150, %84, !dbg !113
  %152 = fcmp uno float %150, 0.000000e+00, !dbg !115
  %153 = or i1 %151, %152, !dbg !116
  %154 = select i1 %153, float %150, float %84, !dbg !117
  %155 = fcmp uno float %89, 0.000000e+00, !dbg !118
  %156 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !30
  %157 = insertelement <2 x i32> %156, i32 %93, i64 1, !dbg !30
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !30
  %159 = bitcast i32 %44 to float, !dbg !120
  %160 = fcmp ogt float %129, %159, !dbg !120
  %161 = bitcast i32 %93 to float, !dbg !121
  %162 = fcmp ogt float %89, %161, !dbg !121
  %163 = insertelement <2 x i1> poison, i1 %160, i64 0, !dbg !122
  %164 = insertelement <2 x i1> %163, i1 %155, i64 1, !dbg !122
  %165 = insertelement <2 x i1> poison, i1 %130, i64 0, !dbg !122
  %166 = insertelement <2 x i1> %165, i1 %162, i64 1, !dbg !122
  %167 = or <2 x i1> %164, %166, !dbg !122
  %168 = insertelement <2 x float> poison, float %129, i64 0, !dbg !123
  %169 = insertelement <2 x float> %168, float %89, i64 1, !dbg !123
  %170 = select <2 x i1> %167, <2 x float> %169, <2 x float> %158, !dbg !123
  %171 = insertelement <2 x float> poison, float %142, i64 0, !dbg !124
  %172 = insertelement <2 x float> %171, float %98, i64 1, !dbg !124
  %173 = fcmp ogt <2 x float> %170, %172, !dbg !124
  %174 = fcmp uno <2 x float> %170, zeroinitializer, !dbg !126
  %175 = or <2 x i1> %173, %174, !dbg !127
  %176 = select <2 x i1> %175, <2 x float> %170, <2 x float> %172, !dbg !128
  %177 = insertelement <2 x float> poison, float %154, i64 0, !dbg !129
  %178 = insertelement <2 x float> %177, float %103, i64 1, !dbg !129
  %179 = fcmp ogt <2 x float> %176, %178, !dbg !129
  %180 = fcmp uno <2 x float> %176, zeroinitializer, !dbg !131
  %181 = or <2 x i1> %179, %180, !dbg !132
  %182 = select <2 x i1> %181, <2 x float> %176, <2 x float> %178, !dbg !133
  %183 = shufflevector <2 x float> %182, <2 x float> <float 0.000000e+00, float poison>, <2 x i32> <i32 2, i32 0>, !dbg !134
  %184 = fcmp uno <2 x float> %183, %182, !dbg !134
  %185 = fcmp ogt <2 x float> %183, %182, !dbg !134
  %shift = shufflevector <2 x i1> %185, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !136
  %186 = or <2 x i1> %184, %shift, !dbg !136
  %187 = extractelement <2 x i1> %186, i64 0, !dbg !136
  %188 = extractelement <2 x float> %182, i64 0, !dbg !137
  %189 = extractelement <2 x float> %182, i64 1, !dbg !137
  %190 = select i1 %187, float %188, float %189, !dbg !137
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 1.600000e+01) #3, !dbg !138
  %192 = fadd float %191, %190, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !139
  %193 = sext i32 %12 to i64, !dbg !140
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !140
  %195 = and i32 %7, 56, !dbg !141
  %196 = icmp eq i32 %195, 0, !dbg !141
  %197 = bitcast float %192 to i32, !dbg !141
  %198 = and i1 %196, %14, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %194, i1 %198) #3, !dbg !141
  ret void, !dbg !142
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy5cvx3ueega6nhry5arrwfular6ediidwkvjrucahflz7bag6se.py", directory: "inductor_cache/y5")
!4 = !{ptr @triton_per_fused_add_max_mean_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_max_mean_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_max_mean_0", linkageName: "triton_per_fused_add_max_mean_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 34, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 42, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 42, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 43, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 43, scope: !7)
!34 = !DILocation(line: 37, column: 35, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 43, scope: !7)
!37 = !DILocation(line: 38, column: 35, scope: !7)
!38 = !DILocation(line: 38, column: 31, scope: !7)
!39 = !DILocation(line: 38, column: 43, scope: !7)
!40 = !DILocation(line: 39, column: 35, scope: !7)
!41 = !DILocation(line: 39, column: 31, scope: !7)
!42 = !DILocation(line: 39, column: 43, scope: !7)
!43 = !DILocation(line: 40, column: 35, scope: !7)
!44 = !DILocation(line: 40, column: 31, scope: !7)
!45 = !DILocation(line: 40, column: 43, scope: !7)
!46 = !DILocation(line: 41, column: 35, scope: !7)
!47 = !DILocation(line: 41, column: 31, scope: !7)
!48 = !DILocation(line: 41, column: 43, scope: !7)
!49 = !DILocation(line: 42, column: 36, scope: !7)
!50 = !DILocation(line: 42, column: 31, scope: !7)
!51 = !DILocation(line: 42, column: 44, scope: !7)
!52 = !DILocation(line: 43, column: 36, scope: !7)
!53 = !DILocation(line: 43, column: 31, scope: !7)
!54 = !DILocation(line: 43, column: 44, scope: !7)
!55 = !DILocation(line: 44, column: 36, scope: !7)
!56 = !DILocation(line: 44, column: 31, scope: !7)
!57 = !DILocation(line: 44, column: 44, scope: !7)
!58 = !DILocation(line: 45, column: 36, scope: !7)
!59 = !DILocation(line: 45, column: 31, scope: !7)
!60 = !DILocation(line: 45, column: 44, scope: !7)
!61 = !DILocation(line: 46, column: 36, scope: !7)
!62 = !DILocation(line: 46, column: 31, scope: !7)
!63 = !DILocation(line: 46, column: 44, scope: !7)
!64 = !DILocation(line: 47, column: 36, scope: !7)
!65 = !DILocation(line: 47, column: 31, scope: !7)
!66 = !DILocation(line: 47, column: 44, scope: !7)
!67 = !DILocation(line: 256, column: 15, scope: !68, inlinedAt: !71)
!68 = distinct !DILexicalBlockFile(scope: !70, file: !69, discriminator: 0)
!69 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!70 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!71 = !DILocation(line: 50, column: 24, scope: !7)
!72 = !DILocation(line: 267, column: 36, scope: !70, inlinedAt: !71)
!73 = !DILocation(line: 68, column: 20, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 51, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 52, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 53, column: 41, scope: !7)
!88 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !89)
!89 = !DILocation(line: 54, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !94)
!94 = !DILocation(line: 55, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !99)
!99 = !DILocation(line: 56, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !104)
!104 = !DILocation(line: 58, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !109)
!109 = !DILocation(line: 59, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !114)
!114 = !DILocation(line: 60, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !114)
!118 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !119)
!119 = !DILocation(line: 62, column: 42, scope: !7)
!120 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!121 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !119)
!122 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!123 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!124 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !125)
!125 = !DILocation(line: 57, column: 42, scope: !7)
!126 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !125)
!127 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !125)
!128 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !125)
!129 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !130)
!130 = !DILocation(line: 61, column: 42, scope: !7)
!131 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !130)
!132 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !130)
!133 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !130)
!134 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !135)
!135 = !DILocation(line: 65, column: 42, scope: !7)
!136 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !135)
!137 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !135)
!138 = !DILocation(line: 67, column: 19, scope: !7)
!139 = !DILocation(line: 69, column: 4, scope: !7)
!140 = !DILocation(line: 70, column: 28, scope: !7)
!141 = !DILocation(line: 70, column: 40, scope: !7)
!142 = !DILocation(line: 70, column: 4, scope: !7)
