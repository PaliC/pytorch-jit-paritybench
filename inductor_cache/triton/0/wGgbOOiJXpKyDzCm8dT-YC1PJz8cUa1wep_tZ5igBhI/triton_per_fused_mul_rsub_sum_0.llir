; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mul_rsub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = icmp slt i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %10, 15, !dbg !13
  %14 = shl i32 %8, 4, !dbg !14
  %15 = shl i32 %10, 2, !dbg !15
  %16 = and i32 %15, 192, !dbg !15
  %17 = or disjoint i32 %16, %13, !dbg !16
  %18 = add i32 %17, %14, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %9, i32 0, i1 %9) #3, !dbg !19
  %22 = bitcast i32 %21 to float, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %9, i32 0, i1 %9) #3, !dbg !21
  %25 = bitcast i32 %24 to float, !dbg !21
  %26 = fmul float %22, %25, !dbg !22
  %27 = select i1 %9, float %26, float 0.000000e+00, !dbg !23
  %28 = bitcast float %27 to i32, !dbg !24
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 16, i32 31), !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = fadd float %27, %30, !dbg !28
  %32 = bitcast float %31 to i32, !dbg !24
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 8, i32 31), !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = fadd float %31, %34, !dbg !28
  %36 = bitcast float %35 to i32, !dbg !24
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 4, i32 31), !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = fadd float %35, %38, !dbg !28
  %40 = bitcast float %39 to i32, !dbg !24
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 2, i32 31), !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = fadd float %39, %42, !dbg !28
  %44 = bitcast float %43 to i32, !dbg !24
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = fadd float %43, %46, !dbg !28
  %48 = icmp eq i32 %11, 0, !dbg !24
  %49 = and i32 %12, 1, !dbg !24
  %50 = zext nneg i32 %49 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i64 %50, !dbg !24
  %52 = bitcast float %47 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 %48) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %53 = icmp slt i32 %10, 2, !dbg !24
  %54 = sext i32 %10 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i64 %54, !dbg !24
  %56 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %53) #3, !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = fadd float %57, %59, !dbg !28
  %61 = and i32 %10, 1, !dbg !24
  %62 = icmp eq i32 %61, 0, !dbg !24
  %63 = and i1 %53, %62, !dbg !24
  %64 = bitcast float %60 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %64, i1 %63) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %65 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %66 = fsub float 1.000000e+00, %25, !dbg !30
  %67 = fmul float %66, %22, !dbg !31
  %68 = select i1 %9, float %67, float 0.000000e+00, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %69 = bitcast float %68 to i32, !dbg !33
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 16, i32 31), !dbg !33
  %71 = bitcast i32 %70 to float, !dbg !33
  %72 = fadd float %68, %71, !dbg !35
  %73 = bitcast float %72 to i32, !dbg !33
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 8, i32 31), !dbg !33
  %75 = bitcast i32 %74 to float, !dbg !33
  %76 = fadd float %72, %75, !dbg !35
  %77 = bitcast float %76 to i32, !dbg !33
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !33
  %79 = bitcast i32 %78 to float, !dbg !33
  %80 = fadd float %76, %79, !dbg !35
  %81 = bitcast float %80 to i32, !dbg !33
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !33
  %83 = bitcast i32 %82 to float, !dbg !33
  %84 = fadd float %80, %83, !dbg !35
  %85 = bitcast float %84 to i32, !dbg !33
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !33
  %87 = bitcast i32 %86 to float, !dbg !33
  %88 = fadd float %84, %87, !dbg !35
  %89 = bitcast float %88 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %89, i1 %48) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %53) #3, !dbg !33
  %91 = bitcast i32 %90 to float, !dbg !33
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !33
  %93 = bitcast i32 %92 to float, !dbg !33
  %94 = fadd float %91, %93, !dbg !35
  %95 = bitcast float %94 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %95, i1 %63) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %96 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %97 = fsub float 1.000000e+00, %22, !dbg !36
  %98 = fmul float %97, %25, !dbg !37
  %99 = select i1 %9, float %98, float 0.000000e+00, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %100 = bitcast float %99 to i32, !dbg !39
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !39
  %102 = bitcast i32 %101 to float, !dbg !39
  %103 = fadd float %99, %102, !dbg !41
  %104 = bitcast float %103 to i32, !dbg !39
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !39
  %106 = bitcast i32 %105 to float, !dbg !39
  %107 = fadd float %103, %106, !dbg !41
  %108 = bitcast float %107 to i32, !dbg !39
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !39
  %110 = bitcast i32 %109 to float, !dbg !39
  %111 = fadd float %107, %110, !dbg !41
  %112 = bitcast float %111 to i32, !dbg !39
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !39
  %114 = bitcast i32 %113 to float, !dbg !39
  %115 = fadd float %111, %114, !dbg !41
  %116 = bitcast float %115 to i32, !dbg !39
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !39
  %118 = bitcast i32 %117 to float, !dbg !39
  %119 = fadd float %115, %118, !dbg !41
  %120 = bitcast float %119 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %120, i1 %48) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %121 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %53) #3, !dbg !39
  %122 = bitcast i32 %121 to float, !dbg !39
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !39
  %124 = bitcast i32 %123 to float, !dbg !39
  %125 = fadd float %122, %124, !dbg !41
  %126 = bitcast float %125 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %126, i1 %63) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %127 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %128 = sext i32 %8 to i64, !dbg !42
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !42
  %urem = and i32 %10, 63, !dbg !43
  %130 = icmp eq i32 %urem, 0, !dbg !43
  %131 = and i1 %130, %9, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %65, ptr addrspace(1) %129, i1 %131) #3, !dbg !43
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %128, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %132, i1 %131) #3, !dbg !45
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %128, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %133, i1 %131) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci7vbgwqycerfwvegbqxudlcafl5a7r5aud4d752x4l6hap5v5ou.py", directory: "inductor_cache/i7")
!4 = !{ptr @triton_per_fused_mul_rsub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_rsub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_rsub_sum_0", linkageName: "triton_per_fused_mul_rsub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 29, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 46, scope: !7)
!16 = !DILocation(line: 32, column: 35, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 51, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 51, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 36, column: 33, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 37, column: 24, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 35, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 43, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !34)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 35, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !40)
!40 = !DILocation(line: 48, column: 26, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !40)
!42 = !DILocation(line: 49, column: 25, scope: !7)
!43 = !DILocation(line: 49, column: 36, scope: !7)
!44 = !DILocation(line: 50, column: 25, scope: !7)
!45 = !DILocation(line: 50, column: 37, scope: !7)
!46 = !DILocation(line: 51, column: 25, scope: !7)
!47 = !DILocation(line: 51, column: 37, scope: !7)
!48 = !DILocation(line: 51, column: 4, scope: !7)
