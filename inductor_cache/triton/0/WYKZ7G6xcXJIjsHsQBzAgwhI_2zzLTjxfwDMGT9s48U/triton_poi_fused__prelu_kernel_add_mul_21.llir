; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__prelu_kernel_add_mul_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = and i32 %9, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %12, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = srem i32 %14, 64, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %18 = sdiv i32 %.frozen, 64, !dbg !15
  %19 = mul i32 %18, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %19, !dbg !14
  %.frozen1 = freeze i32 %16, !dbg !15
  %20 = sdiv i32 %.frozen1, 64, !dbg !15
  %21 = mul i32 %20, 64, !dbg !14
  %.decomposed2 = sub i32 %.frozen1, %21, !dbg !14
  %22 = sdiv i32 %14, 16384, !dbg !16
  %23 = sext i32 %14 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #2, !dbg !18
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %28 = bitcast i32 %26 to float, !dbg !18
  %29 = bitcast i32 %27 to float, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !19
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !20
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !20
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !20
  %34 = bitcast i32 %32 to float, !dbg !20
  %35 = bitcast i32 %33 to float, !dbg !20
  %36 = sext i32 %17 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !21
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #2, !dbg !22
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !22
  %41 = bitcast i32 %39 to float, !dbg !22
  %42 = bitcast i32 %40 to float, !dbg !22
  %43 = shl nsw i32 %22, 6, !dbg !23
  %44 = add nsw i32 %43, %17, !dbg !24
  %45 = sext i32 %44 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !25
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #2, !dbg !26
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !26
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !26
  %50 = bitcast i32 %48 to float, !dbg !26
  %51 = bitcast i32 %49 to float, !dbg !26
  %52 = fcmp ogt float %34, 0.000000e+00, !dbg !27
  %53 = fcmp ogt float %35, 0.000000e+00, !dbg !27
  %54 = fmul float %34, %41, !dbg !28
  %55 = fmul float %35, %42, !dbg !28
  %56 = select i1 %52, float %34, float %54, !dbg !29
  %57 = select i1 %53, float %35, float %55, !dbg !29
  %58 = fsub float 0.000000e+00, %50, !dbg !30
  %59 = fsub float 0.000000e+00, %51, !dbg !30
  %60 = fmul float %58, 0x3FF7154760000000, !dbg !34
  %61 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %60) #2, !dbg !34
  %62 = fmul float %59, 0x3FF7154760000000, !dbg !34
  %63 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %62) #2, !dbg !34
  %64 = fadd float %61, 1.000000e+00, !dbg !35
  %65 = fadd float %63, 1.000000e+00, !dbg !35
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %64) #2, !dbg !36
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %65) #2, !dbg !36
  %68 = fmul float %56, %66, !dbg !37
  %69 = fmul float %57, %67, !dbg !37
  %70 = fadd float %68, %28, !dbg !38
  %71 = fadd float %69, %29, !dbg !38
  %72 = mul i32 %18, 131, !dbg !39
  %73 = mul i32 %20, 131, !dbg !39
  %74 = add i32 %72, %.decomposed, !dbg !40
  %75 = add i32 %73, %.decomposed2, !dbg !40
  %76 = sext i32 %74 to i64, !dbg !41
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %76, !dbg !41
  %78 = sext i32 %75 to i64, !dbg !41
  %79 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !41
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !42
  %81 = bitcast float %70 to i32, !dbg !42
  %82 = bitcast float %71 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %80, i32 %81, i32 %82, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !42
  %84 = load i32, ptr addrspace(3) %83, align 4, !dbg !42
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !42
  %86 = load i32, ptr addrspace(3) %85, align 4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %84, ptr addrspace(1) %77, i1 true) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %86, ptr addrspace(1) %79, i1 true) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgvw5mnc6bwg4wbpxumush2behhzslq3bbk2jr3yncccatikt42b.py", directory: "inductor_cache/gv")
!4 = !{ptr @triton_poi_fused__prelu_kernel_add_mul_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__prelu_kernel_add_mul_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__prelu_kernel_add_mul_21", linkageName: "triton_poi_fused__prelu_kernel_add_mul_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 38, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 18, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 32, scope: !7)
!30 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 36, column: 22, scope: !7)
!34 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 19, scope: !7)
!39 = !DILocation(line: 39, column: 34, scope: !7)
!40 = !DILocation(line: 39, column: 30, scope: !7)
!41 = !DILocation(line: 39, column: 25, scope: !7)
!42 = !DILocation(line: 39, column: 46, scope: !7)
!43 = !DILocation(line: 39, column: 4, scope: !7)
