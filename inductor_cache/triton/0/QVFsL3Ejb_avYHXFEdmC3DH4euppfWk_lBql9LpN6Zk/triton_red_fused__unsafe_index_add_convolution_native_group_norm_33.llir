; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_add_convolution_native_group_norm_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %.lobit122 = lshr i32 %13, 7, !dbg !12
  %15 = and i32 %.lobit122, 3, !dbg !12
  %16 = or disjoint i32 %12, %14, !dbg !13
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = or disjoint i32 %17, 4, !dbg !13
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = icmp slt i32 %17, 512, !dbg !14
  %21 = icmp slt i32 %18, 512, !dbg !14
  %22 = lshr i32 %13, 3, !dbg !15
  %23 = and i32 %22, 15, !dbg !15
  %24 = lshr i32 %13, 3, !dbg !15
  %25 = and i32 %24, 16, !dbg !15
  %26 = lshr i32 %13, 3, !dbg !15
  %27 = and i32 %26, 32, !dbg !15
  %28 = or disjoint i32 %25, %23, !dbg !15
  %29 = or disjoint i32 %28, %27, !dbg !15
  %30 = and i32 %13, 511, !dbg !15
  %31 = shl i32 %13, 2, !dbg !15
  %32 = and i32 %31, 508, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %33 = sdiv i32 %.frozen, 4, !dbg !16
  %34 = mul i32 %33, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %34, !dbg !17
  %35 = srem i32 %33, 32, !dbg !18
  %36 = sext i32 %35 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !20
  %39 = bitcast i32 %38 to float, !dbg !20
  %40 = shl nsw i32 %.decomposed, 4, !dbg !21
  %41 = shl i32 %17, 16, !dbg !22
  %42 = shl i32 %18, 16, !dbg !22
  %43 = shl i32 %33, 15, !dbg !23
  %44 = sext i32 %43 to i64, !dbg !24
  %45 = and i32 %13, 63
  %invariant.gep = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %30, !dbg !25
  %46 = zext nneg i32 %45 to i64
  %47 = getelementptr i64, ptr addrspace(1) %0, i64 %46
  %48 = shl i32 %13, 5
  %49 = and i32 %48, 4064
  %.reass = or disjoint i32 %49, %15
  %50 = lshr exact i32 %49, 1
  %51 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %50
  %52 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %.reass
  %53 = or disjoint i32 %.reass, 8
  %54 = lshr i32 %53, 3
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %53
  %57 = or disjoint i32 %.reass, 16
  %58 = lshr i32 %57, 3
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58
  %60 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %57
  %61 = or disjoint i32 %.reass, 24
  %62 = lshr i32 %61, 3
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62
  %64 = getelementptr inbounds float, ptr addrspace(3) %63, i32 %61
  %65 = or disjoint i32 %.reass, 4
  %66 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %65
  %67 = or disjoint i32 %.reass, 12
  %68 = lshr i32 %67, 3
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %68
  %70 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %67
  %71 = or disjoint i32 %.reass, 20
  %72 = lshr i32 %71, 3
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72
  %74 = getelementptr inbounds float, ptr addrspace(3) %73, i32 %71
  %75 = or disjoint i32 %.reass, 28
  %76 = lshr i32 %75, 3
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76
  %78 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %75
  %79 = lshr i32 %30, 3
  %gep = getelementptr inbounds float, ptr addrspace(3) %invariant.gep, i32 %79
  %80 = or disjoint i32 %30, 512
  %81 = lshr i32 %80, 3
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %81
  %83 = getelementptr inbounds float, ptr addrspace(3) %82, i32 %80
  %84 = or disjoint i32 %30, 1024
  %85 = lshr i32 %84, 3
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85
  %87 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %84
  %88 = or disjoint i32 %30, 1536
  %89 = lshr i32 %88, 3
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %89
  %91 = getelementptr inbounds float, ptr addrspace(3) %90, i32 %88
  %92 = or disjoint i32 %30, 2048
  %93 = lshr i32 %92, 3
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %93
  %95 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %92
  %96 = or disjoint i32 %30, 2560
  %97 = lshr i32 %96, 3
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %97
  %99 = getelementptr inbounds float, ptr addrspace(3) %98, i32 %96
  %100 = or disjoint i32 %30, 3072
  %101 = lshr i32 %100, 3
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101
  %103 = getelementptr inbounds float, ptr addrspace(3) %102, i32 %100
  %104 = or disjoint i32 %30, 3584
  %105 = lshr i32 %104, 3
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %105
  %107 = getelementptr inbounds float, ptr addrspace(3) %106, i32 %104
  %.idx = shl nuw nsw i32 %30, 4
  %108 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx
  %.idx4 = shl nuw nsw i32 %29, 4
  %109 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4
  %.idx5 = or disjoint i32 %.idx4, 1024
  %110 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5
  %.idx6 = or disjoint i32 %.idx4, 2048
  %111 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6
  %.idx7 = or disjoint i32 %.idx4, 3072
  %112 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7
  %.idx8 = or disjoint i32 %.idx4, 4096
  %113 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8
  %.idx9 = or disjoint i32 %.idx4, 5120
  %114 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9
  %.idx10 = or disjoint i32 %.idx4, 6144
  %115 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10
  %.idx11 = or disjoint i32 %.idx4, 7168
  %116 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11
  %117 = shl i32 %13, 9
  %118 = and i32 %117, 3584
  %119 = or disjoint i32 %27, %23
  %120 = or disjoint i32 %119, %25
  %.reass52 = or disjoint i32 %120, %118
  %121 = and i32 %31, 2044
  %122 = lshr exact i32 %118, 5
  %123 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %122
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %.reass52
  %125 = or disjoint i32 %.reass52, 64
  %126 = getelementptr float, ptr addrspace(3) %123, i32 %125
  %127 = or disjoint i32 %.reass52, 128
  %128 = getelementptr float, ptr addrspace(3) %123, i32 %127
  %129 = or disjoint i32 %.reass52, 192
  %130 = getelementptr float, ptr addrspace(3) %123, i32 %129
  %131 = or disjoint i32 %.reass52, 256
  %132 = getelementptr float, ptr addrspace(3) %123, i32 %131
  %133 = or disjoint i32 %.reass52, 320
  %134 = getelementptr float, ptr addrspace(3) %123, i32 %133
  %135 = or disjoint i32 %.reass52, 384
  %136 = getelementptr float, ptr addrspace(3) %123, i32 %135
  %137 = or disjoint i32 %.reass52, 448
  %138 = getelementptr float, ptr addrspace(3) %123, i32 %137
  %139 = lshr i32 %31, 7
  %140 = and i32 %139, 12
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %140
  %142 = getelementptr inbounds float, ptr addrspace(3) %141, i32 %121
  %143 = or disjoint i32 %121, 2048
  %144 = lshr i32 %143, 7
  %145 = and i32 %144, 28
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145
  %147 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %143
  %148 = zext nneg i32 %32 to i64, !dbg !25
  %149 = sext i32 %41 to i64, !dbg !25
  %150 = sext i32 %42 to i64, !dbg !25
  %151 = getelementptr inbounds i8, ptr addrspace(3) %142, i32 4
  %152 = getelementptr inbounds i8, ptr addrspace(3) %142, i32 8
  %153 = getelementptr inbounds i8, ptr addrspace(3) %142, i32 12
  br label %154, !dbg !25

154:                                              ; preds = %10, %._crit_edge
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %._crit_edge ]
  %155 = phi float [ 0.000000e+00, %10 ], [ %419, %._crit_edge ]
  %156 = phi float [ 0.000000e+00, %10 ], [ %420, %._crit_edge ]
  %157 = phi float [ 0.000000e+00, %10 ], [ %421, %._crit_edge ]
  %158 = phi float [ 0.000000e+00, %10 ], [ %422, %._crit_edge ]
  %159 = phi float [ 0.000000e+00, %10 ], [ %423, %._crit_edge ]
  %160 = phi float [ 0.000000e+00, %10 ], [ %424, %._crit_edge ]
  %161 = phi float [ 0.000000e+00, %10 ], [ %425, %._crit_edge ]
  %162 = phi float [ 0.000000e+00, %10 ], [ %426, %._crit_edge ]
  %163 = phi float [ 0.000000e+00, %10 ], [ %411, %._crit_edge ]
  %164 = phi float [ 0.000000e+00, %10 ], [ %412, %._crit_edge ]
  %165 = phi float [ 0.000000e+00, %10 ], [ %413, %._crit_edge ]
  %166 = phi float [ 0.000000e+00, %10 ], [ %414, %._crit_edge ]
  %167 = phi float [ 0.000000e+00, %10 ], [ %415, %._crit_edge ]
  %168 = phi float [ 0.000000e+00, %10 ], [ %416, %._crit_edge ]
  %169 = phi float [ 0.000000e+00, %10 ], [ %417, %._crit_edge ]
  %170 = phi float [ 0.000000e+00, %10 ], [ %418, %._crit_edge ]
  %171 = phi float [ 0.000000e+00, %10 ], [ %403, %._crit_edge ]
  %172 = phi float [ 0.000000e+00, %10 ], [ %404, %._crit_edge ]
  %173 = phi float [ 0.000000e+00, %10 ], [ %405, %._crit_edge ]
  %174 = phi float [ 0.000000e+00, %10 ], [ %406, %._crit_edge ]
  %175 = phi float [ 0.000000e+00, %10 ], [ %407, %._crit_edge ]
  %176 = phi float [ 0.000000e+00, %10 ], [ %408, %._crit_edge ]
  %177 = phi float [ 0.000000e+00, %10 ], [ %409, %._crit_edge ]
  %178 = phi float [ 0.000000e+00, %10 ], [ %410, %._crit_edge ]
  %179 = or disjoint i64 %indvars.iv, %148, !dbg !26
  %180 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !27
  %181 = lshr i32 %180, 12, !dbg !27
  %182 = trunc i64 %indvars.iv to i32, !dbg !28
  %183 = or disjoint i32 %30, %182, !dbg !28
  %184 = lshr i32 %183, 6, !dbg !28
  %185 = and i32 %184, 63, !dbg !28
  %186 = or disjoint i32 %181, %40, !dbg !29
  %187 = sext i32 %186 to i64, !dbg !30
  %188 = getelementptr i64, ptr addrspace(1) %0, i64 %187, !dbg !30
  %189 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %188, i1 %19, i1 %19) #3, !dbg !31
  %190 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %188, i1 %19, i1 %19) #3, !dbg !31
  %191 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %188, i1 %19, i1 %19) #3, !dbg !31
  %192 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %188, i1 %19, i1 %19) #3, !dbg !31
  %193 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %188, i1 %19, i1 %19) #3, !dbg !31
  %194 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %188, i1 %19, i1 %19) #3, !dbg !31
  %195 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %188, i1 %19, i1 %19) #3, !dbg !31
  %196 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %188, i1 %19, i1 %19) #3, !dbg !31
  %197 = zext nneg i32 %185 to i64, !dbg !32
  %198 = getelementptr i64, ptr addrspace(1) %0, i64 %197, !dbg !32
  %199 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %198, i1 true) #3, !dbg !33
  %200 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !34
  %201 = add nuw nsw i64 %179, %149, !dbg !35
  %202 = add nuw nsw i64 %179, %150, !dbg !35
  %203 = getelementptr float, ptr addrspace(1) %3, i64 %201, !dbg !36
  %204 = getelementptr float, ptr addrspace(1) %3, i64 %202, !dbg !36
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %203, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #3, !dbg !37
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !37
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !37
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !37
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !37
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %204, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !37
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !37
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !37
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !37
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %215 = insertelement <1 x i32> poison, i32 %206, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %215, i1 true) #3, !dbg !37
  %216 = insertelement <1 x i32> poison, i32 %207, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %216, i1 true) #3, !dbg !37
  %217 = insertelement <1 x i32> poison, i32 %208, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %217, i1 true) #3, !dbg !37
  %218 = insertelement <1 x i32> poison, i32 %209, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %218, i1 true) #3, !dbg !37
  %219 = insertelement <1 x i32> poison, i32 %211, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %219, i1 true) #3, !dbg !37
  %220 = insertelement <1 x i32> poison, i32 %212, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %220, i1 true) #3, !dbg !37
  %221 = insertelement <1 x i32> poison, i32 %213, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %221, i1 true) #3, !dbg !37
  %222 = insertelement <1 x i32> poison, i32 %214, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %222, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %223 = load float, ptr addrspace(3) %gep, align 4, !dbg !37
  %224 = load float, ptr addrspace(3) %83, align 4, !dbg !37
  %225 = load float, ptr addrspace(3) %87, align 4, !dbg !37
  %226 = load float, ptr addrspace(3) %91, align 4, !dbg !37
  %227 = load float, ptr addrspace(3) %95, align 4, !dbg !37
  %228 = load float, ptr addrspace(3) %99, align 4, !dbg !37
  %229 = load float, ptr addrspace(3) %103, align 4, !dbg !37
  %230 = load float, ptr addrspace(3) %107, align 4, !dbg !37
  %231 = lshr i64 %189, 58, !dbg !38
  %232 = and i64 %231, 32, !dbg !38
  %233 = add i64 %232, %189, !dbg !38
  %234 = lshr i64 %190, 58, !dbg !38
  %235 = and i64 %234, 32, !dbg !38
  %236 = add i64 %235, %190, !dbg !38
  %237 = lshr i64 %191, 58, !dbg !38
  %238 = and i64 %237, 32, !dbg !38
  %239 = add i64 %238, %191, !dbg !38
  %240 = lshr i64 %192, 58, !dbg !38
  %241 = and i64 %240, 32, !dbg !38
  %242 = add i64 %241, %192, !dbg !38
  %243 = lshr i64 %193, 58, !dbg !38
  %244 = and i64 %243, 32, !dbg !38
  %245 = add i64 %244, %193, !dbg !38
  %246 = lshr i64 %194, 58, !dbg !38
  %247 = and i64 %246, 32, !dbg !38
  %248 = add i64 %247, %194, !dbg !38
  %249 = lshr i64 %195, 58, !dbg !38
  %250 = and i64 %249, 32, !dbg !38
  %251 = add i64 %250, %195, !dbg !38
  %252 = lshr i64 %196, 58, !dbg !38
  %253 = and i64 %252, 32, !dbg !38
  %254 = add i64 %253, %196, !dbg !38
  %255 = insertelement <2 x i64> poison, i64 %200, i64 0, !dbg !39
  %256 = insertelement <2 x i64> %255, i64 %199, i64 1, !dbg !39
  %257 = lshr <2 x i64> %256, splat (i64 58), !dbg !39
  %258 = and <2 x i64> %257, splat (i64 32), !dbg !39
  %259 = add <2 x i64> %258, %256, !dbg !39
  %260 = extractelement <2 x i64> %259, i64 1, !dbg !40
  %261 = shl i64 %260, 5, !dbg !40
  %262 = extractelement <2 x i64> %259, i64 0, !dbg !41
  %263 = add i64 %262, %261, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %264 = insertelement <1 x i64> poison, i64 %263, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %108, <1 x i64> %264, i1 true) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %265 = load i64, ptr addrspace(3) %109, align 16, !dbg !42
  %266 = load i64, ptr addrspace(3) %110, align 16, !dbg !42
  %267 = load i64, ptr addrspace(3) %111, align 16, !dbg !42
  %268 = load i64, ptr addrspace(3) %112, align 16, !dbg !42
  %269 = load i64, ptr addrspace(3) %113, align 16, !dbg !42
  %270 = load i64, ptr addrspace(3) %114, align 16, !dbg !42
  %271 = load i64, ptr addrspace(3) %115, align 16, !dbg !42
  %272 = load i64, ptr addrspace(3) %116, align 16, !dbg !42
  %273 = getelementptr float, ptr addrspace(1) %1, i64 %265, !dbg !42
  %.idx12 = shl i64 %233, 12, !dbg !42
  %274 = getelementptr i8, ptr addrspace(1) %273, i64 %.idx12, !dbg !42
  %275 = getelementptr float, ptr addrspace(1) %274, i64 %44, !dbg !42
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %266, !dbg !42
  %.idx13 = shl i64 %236, 12, !dbg !42
  %277 = getelementptr i8, ptr addrspace(1) %276, i64 %.idx13, !dbg !42
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %44, !dbg !42
  %279 = getelementptr float, ptr addrspace(1) %1, i64 %267, !dbg !42
  %.idx14 = shl i64 %239, 12, !dbg !42
  %280 = getelementptr i8, ptr addrspace(1) %279, i64 %.idx14, !dbg !42
  %281 = getelementptr float, ptr addrspace(1) %280, i64 %44, !dbg !42
  %282 = getelementptr float, ptr addrspace(1) %1, i64 %268, !dbg !42
  %.idx15 = shl i64 %242, 12, !dbg !42
  %283 = getelementptr i8, ptr addrspace(1) %282, i64 %.idx15, !dbg !42
  %284 = getelementptr float, ptr addrspace(1) %283, i64 %44, !dbg !42
  %285 = getelementptr float, ptr addrspace(1) %1, i64 %269, !dbg !42
  %.idx16 = shl i64 %245, 12, !dbg !42
  %286 = getelementptr i8, ptr addrspace(1) %285, i64 %.idx16, !dbg !42
  %287 = getelementptr float, ptr addrspace(1) %286, i64 %44, !dbg !42
  %288 = getelementptr float, ptr addrspace(1) %1, i64 %270, !dbg !42
  %.idx17 = shl i64 %248, 12, !dbg !42
  %289 = getelementptr i8, ptr addrspace(1) %288, i64 %.idx17, !dbg !42
  %290 = getelementptr float, ptr addrspace(1) %289, i64 %44, !dbg !42
  %291 = getelementptr float, ptr addrspace(1) %1, i64 %271, !dbg !42
  %.idx18 = shl i64 %251, 12, !dbg !42
  %292 = getelementptr i8, ptr addrspace(1) %291, i64 %.idx18, !dbg !42
  %293 = getelementptr float, ptr addrspace(1) %292, i64 %44, !dbg !42
  %294 = getelementptr float, ptr addrspace(1) %1, i64 %272, !dbg !42
  %.idx19 = shl i64 %254, 12, !dbg !42
  %295 = getelementptr i8, ptr addrspace(1) %294, i64 %.idx19, !dbg !42
  %296 = getelementptr float, ptr addrspace(1) %295, i64 %44, !dbg !42
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %19) #3, !dbg !43
  %298 = bitcast i32 %297 to float, !dbg !43
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %19) #3, !dbg !43
  %300 = bitcast i32 %299 to float, !dbg !43
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 %19) #3, !dbg !43
  %302 = bitcast i32 %301 to float, !dbg !43
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 %19) #3, !dbg !43
  %304 = bitcast i32 %303 to float, !dbg !43
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 %19) #3, !dbg !43
  %306 = bitcast i32 %305 to float, !dbg !43
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 %19) #3, !dbg !43
  %308 = bitcast i32 %307 to float, !dbg !43
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 %19) #3, !dbg !43
  %310 = bitcast i32 %309 to float, !dbg !43
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 %19) #3, !dbg !43
  %312 = bitcast i32 %311 to float, !dbg !43
  %313 = fadd float %39, %298, !dbg !44
  %314 = fadd float %39, %300, !dbg !44
  %315 = fadd float %39, %302, !dbg !44
  %316 = fadd float %39, %304, !dbg !44
  %317 = fadd float %39, %306, !dbg !44
  %318 = fadd float %39, %308, !dbg !44
  %319 = fadd float %39, %310, !dbg !44
  %320 = fadd float %39, %312, !dbg !44
  %321 = fadd float %223, %313, !dbg !45
  %322 = fadd float %224, %314, !dbg !45
  %323 = fadd float %225, %315, !dbg !45
  %324 = fadd float %226, %316, !dbg !45
  %325 = fadd float %227, %317, !dbg !45
  %326 = fadd float %228, %318, !dbg !45
  %327 = fadd float %229, %319, !dbg !45
  %328 = fadd float %230, %320, !dbg !45
  %329 = icmp eq i64 %indvars.iv, 0, !dbg !46
  br i1 %329, label %._crit_edge, label %330, !dbg !47

330:                                              ; preds = %154
  %331 = fsub float %321, %171, !dbg !51
  %332 = fsub float %322, %172, !dbg !51
  %333 = fsub float %323, %173, !dbg !51
  %334 = fsub float %324, %174, !dbg !51
  %335 = fsub float %325, %175, !dbg !51
  %336 = fsub float %326, %176, !dbg !51
  %337 = fsub float %327, %177, !dbg !51
  %338 = fsub float %328, %178, !dbg !51
  %339 = fadd float %155, 1.000000e+00, !dbg !52
  %340 = fadd float %156, 1.000000e+00, !dbg !52
  %341 = fadd float %157, 1.000000e+00, !dbg !52
  %342 = fadd float %158, 1.000000e+00, !dbg !52
  %343 = fadd float %159, 1.000000e+00, !dbg !52
  %344 = fadd float %160, 1.000000e+00, !dbg !52
  %345 = fadd float %161, 1.000000e+00, !dbg !52
  %346 = fadd float %162, 1.000000e+00, !dbg !52
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %331, float %339) #3, !dbg !53
  %348 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float %340) #3, !dbg !53
  %349 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %333, float %341) #3, !dbg !53
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %334, float %342) #3, !dbg !53
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %335, float %343) #3, !dbg !53
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %336, float %344) #3, !dbg !53
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %337, float %345) #3, !dbg !53
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %338, float %346) #3, !dbg !53
  %355 = fadd float %171, %347, !dbg !54
  %356 = fadd float %172, %348, !dbg !54
  %357 = fadd float %173, %349, !dbg !54
  %358 = fadd float %174, %350, !dbg !54
  %359 = fadd float %175, %351, !dbg !54
  %360 = fadd float %176, %352, !dbg !54
  %361 = fadd float %177, %353, !dbg !54
  %362 = fadd float %178, %354, !dbg !54
  %363 = fsub float %321, %355, !dbg !55
  %364 = fsub float %322, %356, !dbg !55
  %365 = fsub float %323, %357, !dbg !55
  %366 = fsub float %324, %358, !dbg !55
  %367 = fsub float %325, %359, !dbg !55
  %368 = fsub float %326, %360, !dbg !55
  %369 = fsub float %327, %361, !dbg !55
  %370 = fsub float %328, %362, !dbg !55
  %371 = fmul float %331, %363, !dbg !56
  %372 = fmul float %332, %364, !dbg !56
  %373 = fmul float %333, %365, !dbg !56
  %374 = fmul float %334, %366, !dbg !56
  %375 = fmul float %335, %367, !dbg !56
  %376 = fmul float %336, %368, !dbg !56
  %377 = fmul float %337, %369, !dbg !56
  %378 = fmul float %338, %370, !dbg !56
  %379 = fadd float %163, %371, !dbg !57
  %380 = fadd float %164, %372, !dbg !57
  %381 = fadd float %165, %373, !dbg !57
  %382 = fadd float %166, %374, !dbg !57
  %383 = fadd float %167, %375, !dbg !57
  %384 = fadd float %168, %376, !dbg !57
  %385 = fadd float %169, %377, !dbg !57
  %386 = fadd float %170, %378, !dbg !57
  br label %._crit_edge, !dbg !47

._crit_edge:                                      ; preds = %154, %330
  %387 = phi float [ %379, %330 ], [ 0.000000e+00, %154 ], !dbg !50
  %388 = phi float [ %380, %330 ], [ 0.000000e+00, %154 ], !dbg !50
  %389 = phi float [ %381, %330 ], [ 0.000000e+00, %154 ], !dbg !50
  %390 = phi float [ %382, %330 ], [ 0.000000e+00, %154 ], !dbg !50
  %391 = phi float [ %383, %330 ], [ 0.000000e+00, %154 ], !dbg !50
  %392 = phi float [ %384, %330 ], [ 0.000000e+00, %154 ], !dbg !50
  %393 = phi float [ %385, %330 ], [ 0.000000e+00, %154 ], !dbg !50
  %394 = phi float [ %386, %330 ], [ 0.000000e+00, %154 ], !dbg !50
  %.pn34 = phi float [ %355, %330 ], [ %321, %154 ]
  %.pn32 = phi float [ %356, %330 ], [ %322, %154 ]
  %.pn30 = phi float [ %357, %330 ], [ %323, %154 ]
  %.pn28 = phi float [ %358, %330 ], [ %324, %154 ]
  %.pn26 = phi float [ %359, %330 ], [ %325, %154 ]
  %.pn24 = phi float [ %360, %330 ], [ %326, %154 ]
  %.pn22 = phi float [ %361, %330 ], [ %327, %154 ]
  %.pn20 = phi float [ %362, %330 ], [ %328, %154 ]
  %395 = phi float [ %339, %330 ], [ 1.000000e+00, %154 ], !dbg !50
  %396 = phi float [ %340, %330 ], [ 1.000000e+00, %154 ], !dbg !50
  %397 = phi float [ %341, %330 ], [ 1.000000e+00, %154 ], !dbg !50
  %398 = phi float [ %342, %330 ], [ 1.000000e+00, %154 ], !dbg !50
  %399 = phi float [ %343, %330 ], [ 1.000000e+00, %154 ], !dbg !50
  %400 = phi float [ %344, %330 ], [ 1.000000e+00, %154 ], !dbg !50
  %401 = phi float [ %345, %330 ], [ 1.000000e+00, %154 ], !dbg !50
  %402 = phi float [ %346, %330 ], [ 1.000000e+00, %154 ], !dbg !50
  %403 = select i1 %19, float %.pn34, float %171, !dbg !58
  %404 = select i1 %19, float %.pn32, float %172, !dbg !58
  %405 = select i1 %19, float %.pn30, float %173, !dbg !58
  %406 = select i1 %19, float %.pn28, float %174, !dbg !58
  %407 = select i1 %19, float %.pn26, float %175, !dbg !58
  %408 = select i1 %19, float %.pn24, float %176, !dbg !58
  %409 = select i1 %19, float %.pn22, float %177, !dbg !58
  %410 = select i1 %19, float %.pn20, float %178, !dbg !58
  %411 = select i1 %19, float %387, float %163, !dbg !59
  %412 = select i1 %19, float %388, float %164, !dbg !59
  %413 = select i1 %19, float %389, float %165, !dbg !59
  %414 = select i1 %19, float %390, float %166, !dbg !59
  %415 = select i1 %19, float %391, float %167, !dbg !59
  %416 = select i1 %19, float %392, float %168, !dbg !59
  %417 = select i1 %19, float %393, float %169, !dbg !59
  %418 = select i1 %19, float %394, float %170, !dbg !59
  %419 = select i1 %19, float %395, float %155, !dbg !60
  %420 = select i1 %19, float %396, float %156, !dbg !60
  %421 = select i1 %19, float %397, float %157, !dbg !60
  %422 = select i1 %19, float %398, float %158, !dbg !60
  %423 = select i1 %19, float %399, float %159, !dbg !60
  %424 = select i1 %19, float %400, float %160, !dbg !60
  %425 = select i1 %19, float %401, float %161, !dbg !60
  %426 = select i1 %19, float %402, float %162, !dbg !60
  %427 = getelementptr float, ptr addrspace(1) %4, i64 %201, !dbg !61
  %428 = getelementptr float, ptr addrspace(1) %4, i64 %202, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %429 = bitcast float %321 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %429, i1 true) #3, !dbg !62
  %430 = bitcast float %322 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %430, i1 true) #3, !dbg !62
  %431 = bitcast float %323 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %431, i1 true) #3, !dbg !62
  %432 = bitcast float %324 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %432, i1 true) #3, !dbg !62
  %433 = bitcast float %325 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %433, i1 true) #3, !dbg !62
  %434 = bitcast float %326 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %434, i1 true) #3, !dbg !62
  %435 = bitcast float %327 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %435, i1 true) #3, !dbg !62
  %436 = bitcast float %328 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %436, i1 true) #3, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %437 = load <4 x i32>, ptr addrspace(3) %147, align 16, !dbg !62
  %.extract = load i32, ptr addrspace(3) %142, align 16, !dbg !62
  %.extract42 = load i32, ptr addrspace(3) %151, align 4, !dbg !62
  %.extract43 = load i32, ptr addrspace(3) %152, align 8, !dbg !62
  %.extract44 = load i32, ptr addrspace(3) %153, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract42, i32 %.extract43, i32 %.extract44, ptr addrspace(1) %427, i1 %20) #3, !dbg !62
  %.extract45 = extractelement <4 x i32> %437, i64 0, !dbg !62
  %.extract46 = extractelement <4 x i32> %437, i64 1, !dbg !62
  %.extract47 = extractelement <4 x i32> %437, i64 2, !dbg !62
  %.extract48 = extractelement <4 x i32> %437, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract45, i32 %.extract46, i32 %.extract47, i32 %.extract48, ptr addrspace(1) %428, i1 %21) #3, !dbg !62
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !25
  %438 = icmp samesign ult i64 %indvars.iv, 65024, !dbg !25
  br i1 %438, label %154, label %439, !dbg !25

439:                                              ; preds = %._crit_edge
  %440 = lshr i32 %13, 5, !dbg !12
  %441 = and i32 %13, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %442 = fsub float %404, %403, !dbg !65
  %443 = fadd float %419, %420, !dbg !67
  %444 = fcmp oeq float %443, 0.000000e+00, !dbg !68
  %445 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %420, float %443) #3, !dbg !69
  %446 = select i1 %444, float 0.000000e+00, float %445, !dbg !70
  %447 = fmul float %442, %446, !dbg !71
  %448 = fadd float %403, %447, !dbg !72
  %449 = fadd float %411, %412, !dbg !73
  %450 = fmul float %442, %442, !dbg !74
  %451 = fmul float %450, %419, !dbg !75
  %452 = fmul float %451, %446, !dbg !76
  %453 = fadd float %449, %452, !dbg !77
  %454 = fsub float %405, %448, !dbg !65
  %455 = fadd float %421, %443, !dbg !67
  %456 = fcmp oeq float %455, 0.000000e+00, !dbg !68
  %457 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %421, float %455) #3, !dbg !69
  %458 = select i1 %456, float 0.000000e+00, float %457, !dbg !70
  %459 = fmul float %458, %454, !dbg !71
  %460 = fadd float %448, %459, !dbg !72
  %461 = fadd float %413, %453, !dbg !73
  %462 = fmul float %454, %454, !dbg !74
  %463 = fmul float %443, %462, !dbg !75
  %464 = fmul float %458, %463, !dbg !76
  %465 = fadd float %461, %464, !dbg !77
  %466 = fsub float %406, %460, !dbg !65
  %467 = fadd float %422, %455, !dbg !67
  %468 = fcmp oeq float %467, 0.000000e+00, !dbg !68
  %469 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %422, float %467) #3, !dbg !69
  %470 = select i1 %468, float 0.000000e+00, float %469, !dbg !70
  %471 = fmul float %470, %466, !dbg !71
  %472 = fadd float %460, %471, !dbg !72
  %473 = fadd float %414, %465, !dbg !73
  %474 = fmul float %466, %466, !dbg !74
  %475 = fmul float %455, %474, !dbg !75
  %476 = fmul float %470, %475, !dbg !76
  %477 = fadd float %473, %476, !dbg !77
  %478 = fsub float %407, %472, !dbg !65
  %479 = fadd float %423, %467, !dbg !67
  %480 = fcmp oeq float %479, 0.000000e+00, !dbg !68
  %481 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %423, float %479) #3, !dbg !69
  %482 = select i1 %480, float 0.000000e+00, float %481, !dbg !70
  %483 = fmul float %482, %478, !dbg !71
  %484 = fadd float %472, %483, !dbg !72
  %485 = fadd float %415, %477, !dbg !73
  %486 = fmul float %478, %478, !dbg !74
  %487 = fmul float %467, %486, !dbg !75
  %488 = fmul float %482, %487, !dbg !76
  %489 = fadd float %485, %488, !dbg !77
  %490 = fsub float %408, %484, !dbg !65
  %491 = fadd float %424, %479, !dbg !67
  %492 = fcmp oeq float %491, 0.000000e+00, !dbg !68
  %493 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %424, float %491) #3, !dbg !69
  %494 = select i1 %492, float 0.000000e+00, float %493, !dbg !70
  %495 = fmul float %494, %490, !dbg !71
  %496 = fadd float %484, %495, !dbg !72
  %497 = fadd float %416, %489, !dbg !73
  %498 = fmul float %490, %490, !dbg !74
  %499 = fmul float %479, %498, !dbg !75
  %500 = fmul float %494, %499, !dbg !76
  %501 = fadd float %497, %500, !dbg !77
  %502 = fsub float %409, %496, !dbg !65
  %503 = fadd float %425, %491, !dbg !67
  %504 = fcmp oeq float %503, 0.000000e+00, !dbg !68
  %505 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %425, float %503) #3, !dbg !69
  %506 = select i1 %504, float 0.000000e+00, float %505, !dbg !70
  %507 = fmul float %506, %502, !dbg !71
  %508 = fadd float %496, %507, !dbg !72
  %509 = fadd float %417, %501, !dbg !73
  %510 = fmul float %502, %502, !dbg !74
  %511 = fmul float %491, %510, !dbg !75
  %512 = fmul float %506, %511, !dbg !76
  %513 = fadd float %509, %512, !dbg !77
  %514 = fsub float %410, %508, !dbg !65
  %515 = fadd float %426, %503, !dbg !67
  %516 = fcmp oeq float %515, 0.000000e+00, !dbg !68
  %517 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %426, float %515) #3, !dbg !69
  %518 = select i1 %516, float 0.000000e+00, float %517, !dbg !70
  %519 = fmul float %518, %514, !dbg !71
  %520 = fadd float %508, %519, !dbg !72
  %521 = fadd float %418, %513, !dbg !73
  %522 = fmul float %514, %514, !dbg !74
  %523 = fmul float %503, %522, !dbg !75
  %524 = fmul float %518, %523, !dbg !76
  %525 = fadd float %521, %524, !dbg !77
  %526 = bitcast float %520 to i32, !dbg !63
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 16, i32 31), !dbg !63
  %528 = bitcast i32 %527 to float, !dbg !63
  %529 = bitcast float %525 to i32, !dbg !63
  %530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 16, i32 31), !dbg !63
  %531 = bitcast i32 %530 to float, !dbg !63
  %532 = bitcast float %515 to i32, !dbg !63
  %533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %532, i32 16, i32 31), !dbg !63
  %534 = bitcast i32 %533 to float, !dbg !63
  %535 = fsub float %528, %520, !dbg !65
  %536 = fadd float %515, %534, !dbg !67
  %537 = fcmp oeq float %536, 0.000000e+00, !dbg !68
  %538 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %534, float %536) #3, !dbg !69
  %539 = select i1 %537, float 0.000000e+00, float %538, !dbg !70
  %540 = fmul float %539, %535, !dbg !71
  %541 = fadd float %520, %540, !dbg !72
  %542 = fadd float %525, %531, !dbg !73
  %543 = fmul float %535, %535, !dbg !74
  %544 = fmul float %515, %543, !dbg !75
  %545 = fmul float %539, %544, !dbg !76
  %546 = fadd float %542, %545, !dbg !77
  %547 = bitcast float %541 to i32, !dbg !63
  %548 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %547, i32 8, i32 31), !dbg !63
  %549 = bitcast i32 %548 to float, !dbg !63
  %550 = bitcast float %546 to i32, !dbg !63
  %551 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %550, i32 8, i32 31), !dbg !63
  %552 = bitcast i32 %551 to float, !dbg !63
  %553 = bitcast float %536 to i32, !dbg !63
  %554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %553, i32 8, i32 31), !dbg !63
  %555 = bitcast i32 %554 to float, !dbg !63
  %556 = fsub float %549, %541, !dbg !65
  %557 = fadd float %536, %555, !dbg !67
  %558 = fcmp oeq float %557, 0.000000e+00, !dbg !68
  %559 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %555, float %557) #3, !dbg !69
  %560 = select i1 %558, float 0.000000e+00, float %559, !dbg !70
  %561 = fmul float %560, %556, !dbg !71
  %562 = fadd float %541, %561, !dbg !72
  %563 = fadd float %546, %552, !dbg !73
  %564 = fmul float %556, %556, !dbg !74
  %565 = fmul float %536, %564, !dbg !75
  %566 = fmul float %560, %565, !dbg !76
  %567 = fadd float %563, %566, !dbg !77
  %568 = lshr i32 %441, 3, !dbg !63
  %569 = icmp samesign ult i32 %441, 8, !dbg !63
  %570 = and i32 %440, 15, !dbg !63
  %571 = shl nuw nsw i32 %14, 4, !dbg !63
  %572 = or disjoint i32 %571, %570, !dbg !63
  %573 = getelementptr float, ptr addrspace(3) @global_smem, i32 %572, !dbg !63
  %574 = bitcast float %562 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %573, <1 x i32> %574, i1 %569) #3, !dbg !63
  %575 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %572, !dbg !63
  %576 = bitcast float %567 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %575, <1 x i32> %576, i1 %569) #3, !dbg !63
  %577 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %572, !dbg !63
  %578 = bitcast float %557 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %577, <1 x i32> %578, i1 %569) #3, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %579 = icmp slt i32 %13, 128, !dbg !63
  %580 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !63
  %581 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %580, i1 %579) #3, !dbg !63
  %582 = bitcast i32 %581 to float, !dbg !63
  %583 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %13, !dbg !63
  %584 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %583, i1 %579) #3, !dbg !63
  %585 = bitcast i32 %584 to float, !dbg !63
  %586 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %13, !dbg !63
  %587 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %586, i1 %579) #3, !dbg !63
  %588 = bitcast i32 %587 to float, !dbg !63
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %581, i32 8, i32 31), !dbg !63
  %590 = bitcast i32 %589 to float, !dbg !63
  %591 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 8, i32 31), !dbg !63
  %592 = bitcast i32 %591 to float, !dbg !63
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 8, i32 31), !dbg !63
  %594 = bitcast i32 %593 to float, !dbg !63
  %595 = fsub float %590, %582, !dbg !65
  %596 = fadd float %588, %594, !dbg !67
  %597 = fcmp oeq float %596, 0.000000e+00, !dbg !68
  %598 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %594, float %596) #3, !dbg !69
  %599 = select i1 %597, float 0.000000e+00, float %598, !dbg !70
  %600 = fmul float %595, %599, !dbg !71
  %601 = fadd float %600, %582, !dbg !72
  %602 = fadd float %585, %592, !dbg !73
  %603 = fmul float %595, %595, !dbg !74
  %604 = fmul float %603, %588, !dbg !75
  %605 = fmul float %604, %599, !dbg !76
  %606 = fadd float %602, %605, !dbg !77
  %607 = bitcast float %601 to i32, !dbg !63
  %608 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %607, i32 4, i32 31), !dbg !63
  %609 = bitcast i32 %608 to float, !dbg !63
  %610 = bitcast float %606 to i32, !dbg !63
  %611 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %610, i32 4, i32 31), !dbg !63
  %612 = bitcast i32 %611 to float, !dbg !63
  %613 = bitcast float %596 to i32, !dbg !63
  %614 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %613, i32 4, i32 31), !dbg !63
  %615 = bitcast i32 %614 to float, !dbg !63
  %616 = fsub float %609, %601, !dbg !65
  %617 = fadd float %596, %615, !dbg !67
  %618 = fcmp oeq float %617, 0.000000e+00, !dbg !68
  %619 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %615, float %617) #3, !dbg !69
  %620 = select i1 %618, float 0.000000e+00, float %619, !dbg !70
  %621 = fmul float %616, %620, !dbg !71
  %622 = fadd float %601, %621, !dbg !72
  %623 = fadd float %606, %612, !dbg !73
  %624 = fmul float %616, %616, !dbg !74
  %625 = fmul float %596, %624, !dbg !75
  %626 = fmul float %620, %625, !dbg !76
  %627 = fadd float %623, %626, !dbg !77
  %628 = bitcast float %622 to i32, !dbg !63
  %629 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %628, i32 2, i32 31), !dbg !63
  %630 = bitcast i32 %629 to float, !dbg !63
  %631 = bitcast float %627 to i32, !dbg !63
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 2, i32 31), !dbg !63
  %633 = bitcast i32 %632 to float, !dbg !63
  %634 = bitcast float %617 to i32, !dbg !63
  %635 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %634, i32 2, i32 31), !dbg !63
  %636 = bitcast i32 %635 to float, !dbg !63
  %637 = fsub float %630, %622, !dbg !65
  %638 = fadd float %617, %636, !dbg !67
  %639 = fcmp oeq float %638, 0.000000e+00, !dbg !68
  %640 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %636, float %638) #3, !dbg !69
  %641 = select i1 %639, float 0.000000e+00, float %640, !dbg !70
  %642 = fmul float %637, %641, !dbg !71
  %643 = fadd float %622, %642, !dbg !72
  %644 = fadd float %627, %633, !dbg !73
  %645 = fmul float %637, %637, !dbg !74
  %646 = fmul float %617, %645, !dbg !75
  %647 = fmul float %641, %646, !dbg !76
  %648 = fadd float %644, %647, !dbg !77
  %649 = bitcast float %643 to i32, !dbg !63
  %650 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %649, i32 1, i32 31), !dbg !63
  %651 = bitcast i32 %650 to float, !dbg !63
  %652 = bitcast float %648 to i32, !dbg !63
  %653 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 1, i32 31), !dbg !63
  %654 = bitcast i32 %653 to float, !dbg !63
  %655 = bitcast float %638 to i32, !dbg !63
  %656 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %655, i32 1, i32 31), !dbg !63
  %657 = bitcast i32 %656 to float, !dbg !63
  %658 = fsub float %651, %643, !dbg !65
  %659 = fadd float %638, %657, !dbg !67
  %660 = fcmp oeq float %659, 0.000000e+00, !dbg !68
  %661 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %657, float %659) #3, !dbg !69
  %662 = select i1 %660, float 0.000000e+00, float %661, !dbg !70
  %663 = fmul float %658, %662, !dbg !71
  %664 = fadd float %643, %663, !dbg !72
  %665 = fadd float %648, %654, !dbg !73
  %666 = fmul float %658, %658, !dbg !74
  %667 = fmul float %638, %666, !dbg !75
  %668 = fmul float %662, %667, !dbg !76
  %669 = fadd float %665, %668, !dbg !77
  %670 = and i32 %13, 15, !dbg !63
  %671 = icmp eq i32 %670, 0, !dbg !63
  %672 = and i1 %579, %671, !dbg !63
  %673 = bitcast float %664 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %580, <1 x i32> %673, i1 %672) #3, !dbg !63
  %674 = bitcast float %669 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %583, <1 x i32> %674, i1 %672) #3, !dbg !63
  %675 = bitcast float %659 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %586, <1 x i32> %675, i1 %672) #3, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %676 = getelementptr float, ptr addrspace(3) @global_smem, i32 %571, !dbg !63
  %677 = load i32, ptr addrspace(3) %676, align 16, !dbg !63
  %678 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %571, !dbg !63
  %679 = load i32, ptr addrspace(3) %678, align 16, !dbg !63
  %680 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %571, !dbg !63
  %681 = load i32, ptr addrspace(3) %680, align 16, !dbg !63
  %682 = sext i32 %16 to i64, !dbg !78
  %683 = getelementptr float, ptr addrspace(1) %5, i64 %682, !dbg !78
  %684 = shl nuw nsw i32 %570, 2, !dbg !79
  %685 = or disjoint i32 %684, %568, !dbg !79
  %686 = icmp eq i32 %685, 0, !dbg !79
  %687 = and i1 %686, %19, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %677, ptr addrspace(1) %683, i1 %687) #3, !dbg !79
  %688 = getelementptr float, ptr addrspace(1) %6, i64 %682, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %679, ptr addrspace(1) %688, i1 %687) #3, !dbg !81
  %689 = getelementptr float, ptr addrspace(1) %7, i64 %682, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %681, ptr addrspace(1) %689, i1 %687) #3, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvufye4t4qgcnv7awu2oaqubrgkts4trqohebzwjbrqt5mgtqpsa.py", directory: "inductor_cache/vu")
!4 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_33, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_33, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_33", linkageName: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 26, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 41, column: 42, scope: !7)
!22 = !DILocation(line: 44, column: 46, scope: !7)
!23 = !DILocation(line: 55, column: 71, scope: !7)
!24 = !DILocation(line: 55, column: 65, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 27, scope: !7)
!27 = !DILocation(line: 37, column: 23, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 41, column: 39, scope: !7)
!30 = !DILocation(line: 41, column: 34, scope: !7)
!31 = !DILocation(line: 41, column: 47, scope: !7)
!32 = !DILocation(line: 42, column: 34, scope: !7)
!33 = !DILocation(line: 42, column: 39, scope: !7)
!34 = !DILocation(line: 43, column: 39, scope: !7)
!35 = !DILocation(line: 44, column: 40, scope: !7)
!36 = !DILocation(line: 44, column: 35, scope: !7)
!37 = !DILocation(line: 44, column: 51, scope: !7)
!38 = !DILocation(line: 48, column: 36, scope: !7)
!39 = !DILocation(line: 54, column: 39, scope: !7)
!40 = !DILocation(line: 55, column: 46, scope: !7)
!41 = !DILocation(line: 55, column: 43, scope: !7)
!42 = !DILocation(line: 55, column: 35, scope: !7)
!43 = !DILocation(line: 55, column: 76, scope: !7)
!44 = !DILocation(line: 56, column: 24, scope: !7)
!45 = !DILocation(line: 57, column: 24, scope: !7)
!46 = !DILocation(line: 60, column: 66, scope: !7)
!47 = !DILocation(line: 178, column: 7, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 60, column: 55, scope: !7)
!51 = !DILocation(line: 183, column: 24, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 184, column: 30, scope: !48, inlinedAt: !50)
!53 = !DILocation(line: 185, column: 34, scope: !48, inlinedAt: !50)
!54 = !DILocation(line: 185, column: 26, scope: !48, inlinedAt: !50)
!55 = !DILocation(line: 186, column: 39, scope: !48, inlinedAt: !50)
!56 = !DILocation(line: 186, column: 31, scope: !48, inlinedAt: !50)
!57 = !DILocation(line: 186, column: 22, scope: !48, inlinedAt: !50)
!58 = !DILocation(line: 62, column: 54, scope: !7)
!59 = !DILocation(line: 63, column: 50, scope: !7)
!60 = !DILocation(line: 64, column: 58, scope: !7)
!61 = !DILocation(line: 65, column: 29, scope: !7)
!62 = !DILocation(line: 65, column: 52, scope: !7)
!63 = !DILocation(line: 204, column: 46, scope: !48, inlinedAt: !64)
!64 = !DILocation(line: 67, column: 44, scope: !7)
!65 = !DILocation(line: 192, column: 21, scope: !66, inlinedAt: !64)
!66 = distinct !DILexicalBlockFile(scope: !48, file: !49, discriminator: 0)
!67 = !DILocation(line: 193, column: 28, scope: !66, inlinedAt: !64)
!68 = !DILocation(line: 194, column: 39, scope: !66, inlinedAt: !64)
!69 = !DILocation(line: 194, column: 60, scope: !66, inlinedAt: !64)
!70 = !DILocation(line: 194, column: 49, scope: !66, inlinedAt: !64)
!71 = !DILocation(line: 196, column: 25, scope: !66, inlinedAt: !64)
!72 = !DILocation(line: 196, column: 17, scope: !66, inlinedAt: !64)
!73 = !DILocation(line: 197, column: 15, scope: !66, inlinedAt: !64)
!74 = !DILocation(line: 197, column: 30, scope: !66, inlinedAt: !64)
!75 = !DILocation(line: 197, column: 38, scope: !66, inlinedAt: !64)
!76 = !DILocation(line: 197, column: 49, scope: !66, inlinedAt: !64)
!77 = !DILocation(line: 197, column: 22, scope: !66, inlinedAt: !64)
!78 = !DILocation(line: 72, column: 25, scope: !7)
!79 = !DILocation(line: 72, column: 37, scope: !7)
!80 = !DILocation(line: 73, column: 25, scope: !7)
!81 = !DILocation(line: 73, column: 37, scope: !7)
!82 = !DILocation(line: 74, column: 25, scope: !7)
!83 = !DILocation(line: 74, column: 37, scope: !7)
!84 = !DILocation(line: 74, column: 4, scope: !7)
