; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_25(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 24, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = lshr i32 %7, 5, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %15 = sdiv i32 %.frozen, 1024, !dbg !15
  %16 = mul i32 %15, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %.frozen1 = freeze i32 %13, !dbg !15
  %17 = sdiv i32 %.frozen1, 1024, !dbg !15
  %18 = mul i32 %17, 1024, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %18, !dbg !16
  %19 = shl i32 %7, 7, !dbg !17
  %20 = and i32 %19, 15360, !dbg !17
  %21 = add nsw i32 %.decomposed, %20, !dbg !18
  %22 = shl i32 %15, 14, !dbg !19
  %23 = add i32 %21, %22, !dbg !20
  %24 = sext i32 %23 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !21
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !22
  %31 = bitcast i32 %27 to float, !dbg !22
  %32 = bitcast i32 %28 to float, !dbg !22
  %33 = bitcast i32 %29 to float, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 16, i32 31), !dbg !23
  %36 = bitcast i32 %35 to float, !dbg !23
  %37 = fadd float %31, %36, !dbg !27
  %38 = bitcast float %37 to i32, !dbg !23
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 8, i32 31), !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = fadd float %37, %40, !dbg !27
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 16, i32 31), !dbg !23
  %43 = bitcast i32 %42 to float, !dbg !23
  %44 = fadd float %32, %43, !dbg !27
  %45 = bitcast float %44 to i32, !dbg !23
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 8, i32 31), !dbg !23
  %47 = bitcast i32 %46 to float, !dbg !23
  %48 = fadd float %44, %47, !dbg !27
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 16, i32 31), !dbg !23
  %50 = bitcast i32 %49 to float, !dbg !23
  %51 = fadd float %33, %50, !dbg !27
  %52 = bitcast float %51 to i32, !dbg !23
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 8, i32 31), !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = fadd float %51, %54, !dbg !27
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 16, i32 31), !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = fadd float %34, %57, !dbg !27
  %59 = bitcast float %58 to i32, !dbg !23
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !23
  %61 = bitcast i32 %60 to float, !dbg !23
  %62 = fadd float %58, %61, !dbg !27
  %63 = icmp eq i32 %8, 0, !dbg !23
  %64 = and i32 %14, 3, !dbg !23
  %65 = shl nuw nsw i32 %10, 2, !dbg !23
  %66 = or disjoint i32 %65, %64, !dbg !23
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66, !dbg !23
  %68 = bitcast float %41 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 %63) #3, !dbg !23
  %69 = or disjoint i32 %65, 4, !dbg !23
  %70 = or disjoint i32 %69, %64, !dbg !23
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !23
  %72 = bitcast float %48 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 %63) #3, !dbg !23
  %73 = or disjoint i32 %65, 8, !dbg !23
  %74 = or disjoint i32 %73, %64, !dbg !23
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !23
  %76 = bitcast float %55 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 %63) #3, !dbg !23
  %77 = or disjoint i32 %65, 12, !dbg !23
  %78 = or disjoint i32 %77, %64, !dbg !23
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !23
  %80 = bitcast float %62 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 %63) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %81 = icmp slt i32 %7, 128, !dbg !23
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !23
  %83 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %82, i1 %81) #3, !dbg !23
  %84 = bitcast i32 %83 to float, !dbg !23
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !23
  %86 = bitcast i32 %85 to float, !dbg !23
  %87 = fadd float %84, %86, !dbg !27
  %88 = bitcast float %87 to i32, !dbg !23
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !23
  %90 = bitcast i32 %89 to float, !dbg !23
  %91 = fadd float %87, %90, !dbg !27
  %92 = and i32 %7, 3, !dbg !23
  %93 = icmp eq i32 %92, 0, !dbg !23
  %94 = and i1 %81, %93, !dbg !23
  %95 = bitcast float %91 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %95, i1 %94) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !23
  %97 = load i32, ptr addrspace(3) %96, align 16, !dbg !23
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !23
  %99 = load i32, ptr addrspace(3) %98, align 16, !dbg !23
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !23
  %101 = load i32, ptr addrspace(3) %100, align 16, !dbg !23
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !23
  %103 = load i32, ptr addrspace(3) %102, align 16, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %104, i32 %97, i32 %99, i32 %101, i32 %103, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !29
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 1.600000e+01) #3, !dbg !29
  %108 = mul i32 %17, 3072, !dbg !30
  %109 = add i32 %108, %.decomposed2, !dbg !31
  %110 = sext i32 %109 to i64, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !32
  %112 = icmp eq i32 %64, 0, !dbg !33
  %113 = bitcast float %107 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %111, i1 %112) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cukvssn4yeacim3vovvzarfu7doegcjo6v5t2kstkvqt7oisypzd.py", directory: "inductor_cache/uk")
!4 = !{ptr @triton_per_fused_mean_25, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_25", linkageName: "triton_per_fused_mean_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 40, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 51, scope: !7)
!20 = !DILocation(line: 33, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 56, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 35, column: 24, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 30, scope: !7)
!32 = !DILocation(line: 38, column: 25, scope: !7)
!33 = !DILocation(line: 38, column: 46, scope: !7)
!34 = !DILocation(line: 38, column: 4, scope: !7)
