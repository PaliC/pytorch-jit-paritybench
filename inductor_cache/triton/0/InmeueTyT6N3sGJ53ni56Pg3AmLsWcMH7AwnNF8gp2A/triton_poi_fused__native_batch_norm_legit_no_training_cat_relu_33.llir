; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = srem i32 %17, 1024, !dbg !14
  %20 = srem i32 %18, 1024, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %21 = sdiv i32 %.frozen, 147456, !dbg !15
  %.frozen67 = freeze i32 %18, !dbg !15
  %22 = sdiv i32 %.frozen67, 147456, !dbg !15
  %23 = mul i32 %21, 147456, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = mul i32 %22, 147456, !dbg !16
  %srem1.decomposed = sub i32 %.frozen67, %24, !dbg !16
  %25 = mul nsw i32 %21, 110592, !dbg !17
  %26 = mul nsw i32 %22, 110592, !dbg !17
  %27 = add nsw i32 %25, %srem.decomposed, !dbg !18
  %28 = add nsw i32 %26, %srem1.decomposed, !dbg !18
  %29 = sext i32 %27 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = sext i32 %28 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = mul nsw i32 %21, 12288, !dbg !20
  %34 = mul nsw i32 %22, 12288, !dbg !20
  %35 = add nsw i32 %33, %19, !dbg !21
  %36 = add nsw i32 %35, -110592, !dbg !22
  %37 = add nsw i32 %34, %20, !dbg !21
  %38 = add nsw i32 %37, -110592, !dbg !22
  %39 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !23
  %40 = insertelement <2 x i32> %39, i32 %17, i64 1, !dbg !23
  %41 = sdiv <2 x i32> %40, splat (i32 1024), !dbg !23
  %42 = srem <2 x i32> %41, splat (i32 144), !dbg !24
  %43 = extractelement <2 x i32> %42, i64 1, !dbg !25
  %44 = sext i32 %43 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !26
  %46 = extractelement <2 x i32> %42, i64 0, !dbg !25
  %47 = sext i32 %46 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !27
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !27
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !29
  %60 = bitcast i32 %59 to float, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !29
  %62 = bitcast i32 %61 to float, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !29
  %64 = bitcast i32 %63 to float, !dbg !29
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !29
  %68 = bitcast i32 %67 to float, !dbg !29
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !29
  %70 = bitcast i32 %69 to float, !dbg !29
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !29
  %72 = bitcast i32 %71 to float, !dbg !29
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !30
  %76 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !30
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !31
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !31
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !31
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !31
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !31
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !31
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !31
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %44, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %7, i64 %47, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !33
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !33
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !33
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !33
  %95 = icmp slt <2 x i32> %42, splat (i32 108), !dbg !34
  %96 = extractelement <2 x i1> %95, i64 1, !dbg !35
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %96, i32 0, i1 %96, i32 0, i1 %96, i32 0, i1 %96, i32 0, i1 %96) #3, !dbg !35
  %98 = extractelement <2 x i1> %95, i64 0, !dbg !35
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #3, !dbg !35
  %100 = add nsw <2 x i32> %42, splat (i32 -108), !dbg !36
  %101 = icmp ult <2 x i32> %100, splat (i32 12), !dbg !36
  %102 = shl nsw i32 %43, 10, !dbg !21
  %103 = shl nsw i32 %46, 10, !dbg !21
  %104 = add nsw i32 %36, %102, !dbg !37
  %105 = add nsw i32 %38, %103, !dbg !37
  %106 = sext i32 %104 to i64, !dbg !38
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !38
  %108 = sext i32 %105 to i64, !dbg !38
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !38
  %110 = extractelement <2 x i1> %101, i64 1, !dbg !39
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110) #3, !dbg !39
  %112 = extractelement <2 x i1> %101, i64 0, !dbg !39
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !39
  %114 = add nsw <2 x i32> %42, splat (i32 -120), !dbg !40
  %115 = icmp ult <2 x i32> %114, splat (i32 12), !dbg !40
  %116 = add nsw i32 %35, -122880, !dbg !41
  %117 = add nsw i32 %116, %102, !dbg !42
  %118 = add nsw i32 %37, -122880, !dbg !41
  %119 = add nsw i32 %118, %103, !dbg !42
  %120 = sext i32 %117 to i64, !dbg !43
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !43
  %122 = sext i32 %119 to i64, !dbg !43
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !43
  %124 = extractelement <2 x i1> %115, i64 1, !dbg !44
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124) #3, !dbg !44
  %126 = extractelement <2 x i1> %115, i64 0, !dbg !44
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %123, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #3, !dbg !44
  %128 = icmp sgt i32 %43, 131, !dbg !25
  %129 = icmp sgt i32 %46, 131, !dbg !25
  %130 = add nsw i32 %35, -135168, !dbg !45
  %131 = add nsw i32 %130, %102, !dbg !46
  %132 = add nsw i32 %37, -135168, !dbg !45
  %133 = add nsw i32 %132, %103, !dbg !46
  %134 = sext i32 %131 to i64, !dbg !47
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !47
  %136 = sext i32 %133 to i64, !dbg !47
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !47
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #3, !dbg !48
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #3, !dbg !48
  %140 = fadd float %60, 0x3EE4F8B580000000, !dbg !49
  %141 = fadd float %62, 0x3EE4F8B580000000, !dbg !49
  %142 = fadd float %64, 0x3EE4F8B580000000, !dbg !49
  %143 = fadd float %66, 0x3EE4F8B580000000, !dbg !49
  %144 = fadd float %68, 0x3EE4F8B580000000, !dbg !49
  %145 = fadd float %70, 0x3EE4F8B580000000, !dbg !49
  %146 = fadd float %72, 0x3EE4F8B580000000, !dbg !49
  %147 = fadd float %74, 0x3EE4F8B580000000, !dbg !49
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %148, 0, !dbg !50
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %149, 0, !dbg !50
  br i1 %.not.i, label %155, label %150, !dbg !50

150:                                              ; preds = %11
  br i1 %.not1.i, label %153, label %151, !dbg !50

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

155:                                              ; preds = %11
  br i1 %.not1.i, label %158, label %156, !dbg !50

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %151, %153, %156, %158
  %.0.i = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !50
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i25 = icmp eq i32 %160, 0, !dbg !50
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i28 = icmp eq i32 %161, 0, !dbg !50
  br i1 %.not.i25, label %167, label %162, !dbg !50

162:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i28, label %165, label %163, !dbg !50

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit29, !dbg !50

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit29, !dbg !50

167:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i28, label %170, label %168, !dbg !50

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit29, !dbg !50

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !50
  br label %__nv_sqrtf.exit29, !dbg !50

__nv_sqrtf.exit29:                                ; preds = %163, %165, %168, %170
  %.0.i27 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !50
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i30 = icmp eq i32 %172, 0, !dbg !50
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i33 = icmp eq i32 %173, 0, !dbg !50
  br i1 %.not.i30, label %179, label %174, !dbg !50

174:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %177, label %175, !dbg !50

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit34, !dbg !50

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit34, !dbg !50

179:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %182, label %180, !dbg !50

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit34, !dbg !50

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !50
  br label %__nv_sqrtf.exit34, !dbg !50

__nv_sqrtf.exit34:                                ; preds = %175, %177, %180, %182
  %.0.i32 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !50
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i35 = icmp eq i32 %184, 0, !dbg !50
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i38 = icmp eq i32 %185, 0, !dbg !50
  br i1 %.not.i35, label %191, label %186, !dbg !50

186:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %189, label %187, !dbg !50

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit39, !dbg !50

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit39, !dbg !50

191:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %194, label %192, !dbg !50

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit39, !dbg !50

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !50
  br label %__nv_sqrtf.exit39, !dbg !50

__nv_sqrtf.exit39:                                ; preds = %187, %189, %192, %194
  %.0.i37 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !50
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i40 = icmp eq i32 %196, 0, !dbg !50
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i43 = icmp eq i32 %197, 0, !dbg !50
  br i1 %.not.i40, label %203, label %198, !dbg !50

198:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %201, label %199, !dbg !50

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit44, !dbg !50

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit44, !dbg !50

203:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %206, label %204, !dbg !50

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit44, !dbg !50

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !50
  br label %__nv_sqrtf.exit44, !dbg !50

__nv_sqrtf.exit44:                                ; preds = %199, %201, %204, %206
  %.0.i42 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !50
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i45 = icmp eq i32 %208, 0, !dbg !50
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i48 = icmp eq i32 %209, 0, !dbg !50
  br i1 %.not.i45, label %215, label %210, !dbg !50

210:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %213, label %211, !dbg !50

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !50
  br label %__nv_sqrtf.exit49, !dbg !50

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !50
  br label %__nv_sqrtf.exit49, !dbg !50

215:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %218, label %216, !dbg !50

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !50
  br label %__nv_sqrtf.exit49, !dbg !50

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !50
  br label %__nv_sqrtf.exit49, !dbg !50

__nv_sqrtf.exit49:                                ; preds = %211, %213, %216, %218
  %.0.i47 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !50
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i50 = icmp eq i32 %220, 0, !dbg !50
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i53 = icmp eq i32 %221, 0, !dbg !50
  br i1 %.not.i50, label %227, label %222, !dbg !50

222:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %225, label %223, !dbg !50

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !50
  br label %__nv_sqrtf.exit54, !dbg !50

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !50
  br label %__nv_sqrtf.exit54, !dbg !50

227:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %230, label %228, !dbg !50

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !50
  br label %__nv_sqrtf.exit54, !dbg !50

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !50
  br label %__nv_sqrtf.exit54, !dbg !50

__nv_sqrtf.exit54:                                ; preds = %223, %225, %228, %230
  %.0.i52 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !50
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i55 = icmp eq i32 %232, 0, !dbg !50
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i58 = icmp eq i32 %233, 0, !dbg !50
  br i1 %.not.i55, label %239, label %234, !dbg !50

234:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %237, label %235, !dbg !50

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !50
  br label %__nv_sqrtf.exit59, !dbg !50

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !50
  br label %__nv_sqrtf.exit59, !dbg !50

239:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %242, label %240, !dbg !50

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !50
  br label %__nv_sqrtf.exit59, !dbg !50

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !50
  br label %__nv_sqrtf.exit59, !dbg !50

__nv_sqrtf.exit59:                                ; preds = %235, %237, %240, %242
  %.0.i57 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !50
  %244 = shufflevector <2 x i1> %115, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !40
  %245 = shufflevector <2 x i1> %101, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %246 = shufflevector <2 x i1> %95, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !34
  %247 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !35
  %248 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !39
  %249 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !44
  %250 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !48
  %251 = insertelement <8 x i32> poison, i32 %56, i64 0, !dbg !27
  %252 = insertelement <8 x i32> %251, i32 %55, i64 1, !dbg !27
  %253 = insertelement <8 x i32> %252, i32 %54, i64 2, !dbg !27
  %254 = insertelement <8 x i32> %253, i32 %53, i64 3, !dbg !27
  %255 = insertelement <8 x i32> %254, i32 %52, i64 4, !dbg !27
  %256 = insertelement <8 x i32> %255, i32 %51, i64 5, !dbg !27
  %257 = insertelement <8 x i32> %256, i32 %50, i64 6, !dbg !27
  %258 = insertelement <8 x i32> %257, i32 %49, i64 7, !dbg !27
  %259 = bitcast <8 x i32> %258 to <8 x float>, !dbg !27
  %260 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !35
  %261 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !39
  %262 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !44
  %263 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !48
  %264 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !35
  %265 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !39
  %266 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !44
  %267 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !48
  %268 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !35
  %269 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !39
  %270 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !44
  %271 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !48
  %272 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !35
  %273 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !39
  %274 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !44
  %275 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !48
  %276 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !35
  %277 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !39
  %278 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !44
  %279 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !48
  %280 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !35
  %281 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !39
  %282 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !44
  %283 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !48
  %284 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !35
  %285 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !39
  %286 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !44
  %287 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !48
  %288 = insertelement <8 x i32> poison, i32 %94, i64 0, !dbg !33
  %289 = insertelement <8 x i32> %288, i32 %93, i64 1, !dbg !33
  %290 = insertelement <8 x i32> %289, i32 %92, i64 2, !dbg !33
  %291 = insertelement <8 x i32> %290, i32 %91, i64 3, !dbg !33
  %292 = insertelement <8 x i32> %291, i32 %90, i64 4, !dbg !33
  %293 = insertelement <8 x i32> %292, i32 %89, i64 5, !dbg !33
  %294 = insertelement <8 x i32> %293, i32 %88, i64 6, !dbg !33
  %295 = insertelement <8 x i32> %294, i32 %87, i64 7, !dbg !33
  %296 = bitcast <8 x i32> %295 to <8 x float>, !dbg !33
  %297 = insertelement <8 x i32> poison, i32 %84, i64 0, !dbg !31
  %298 = insertelement <8 x i32> %297, i32 %83, i64 1, !dbg !31
  %299 = insertelement <8 x i32> %298, i32 %82, i64 2, !dbg !31
  %300 = insertelement <8 x i32> %299, i32 %81, i64 3, !dbg !31
  %301 = insertelement <8 x i32> %300, i32 %80, i64 4, !dbg !31
  %302 = insertelement <8 x i32> %301, i32 %79, i64 5, !dbg !31
  %303 = insertelement <8 x i32> %302, i32 %78, i64 6, !dbg !31
  %304 = insertelement <8 x i32> %303, i32 %77, i64 7, !dbg !31
  %305 = bitcast <8 x i32> %304 to <8 x float>, !dbg !31
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #3, !dbg !51
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #3, !dbg !51
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #3, !dbg !51
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #3, !dbg !51
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #3, !dbg !51
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #3, !dbg !51
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #3, !dbg !51
  %314 = insertelement <8 x i32> poison, i32 %249, i64 0, !dbg !52
  %315 = insertelement <8 x i32> %314, i32 %262, i64 1, !dbg !52
  %316 = insertelement <8 x i32> %315, i32 %266, i64 2, !dbg !52
  %317 = insertelement <8 x i32> %316, i32 %270, i64 3, !dbg !52
  %318 = insertelement <8 x i32> %317, i32 %274, i64 4, !dbg !52
  %319 = insertelement <8 x i32> %318, i32 %278, i64 5, !dbg !52
  %320 = insertelement <8 x i32> %319, i32 %282, i64 6, !dbg !52
  %321 = insertelement <8 x i32> %320, i32 %286, i64 7, !dbg !52
  %322 = insertelement <8 x i32> poison, i32 %250, i64 0, !dbg !52
  %323 = insertelement <8 x i32> %322, i32 %263, i64 1, !dbg !52
  %324 = insertelement <8 x i32> %323, i32 %267, i64 2, !dbg !52
  %325 = insertelement <8 x i32> %324, i32 %271, i64 3, !dbg !52
  %326 = insertelement <8 x i32> %325, i32 %275, i64 4, !dbg !52
  %327 = insertelement <8 x i32> %326, i32 %279, i64 5, !dbg !52
  %328 = insertelement <8 x i32> %327, i32 %283, i64 6, !dbg !52
  %329 = insertelement <8 x i32> %328, i32 %287, i64 7, !dbg !52
  %330 = select <8 x i1> %244, <8 x i32> %321, <8 x i32> %329, !dbg !52
  %331 = insertelement <8 x i32> poison, i32 %248, i64 0, !dbg !53
  %332 = insertelement <8 x i32> %331, i32 %261, i64 1, !dbg !53
  %333 = insertelement <8 x i32> %332, i32 %265, i64 2, !dbg !53
  %334 = insertelement <8 x i32> %333, i32 %269, i64 3, !dbg !53
  %335 = insertelement <8 x i32> %334, i32 %273, i64 4, !dbg !53
  %336 = insertelement <8 x i32> %335, i32 %277, i64 5, !dbg !53
  %337 = insertelement <8 x i32> %336, i32 %281, i64 6, !dbg !53
  %338 = insertelement <8 x i32> %337, i32 %285, i64 7, !dbg !53
  %339 = select <8 x i1> %245, <8 x i32> %338, <8 x i32> %330, !dbg !53
  %340 = insertelement <8 x i32> poison, i32 %247, i64 0, !dbg !54
  %341 = insertelement <8 x i32> %340, i32 %260, i64 1, !dbg !54
  %342 = insertelement <8 x i32> %341, i32 %264, i64 2, !dbg !54
  %343 = insertelement <8 x i32> %342, i32 %268, i64 3, !dbg !54
  %344 = insertelement <8 x i32> %343, i32 %272, i64 4, !dbg !54
  %345 = insertelement <8 x i32> %344, i32 %276, i64 5, !dbg !54
  %346 = insertelement <8 x i32> %345, i32 %280, i64 6, !dbg !54
  %347 = insertelement <8 x i32> %346, i32 %284, i64 7, !dbg !54
  %348 = select <8 x i1> %246, <8 x i32> %347, <8 x i32> %339, !dbg !54
  %349 = bitcast <8 x i32> %348 to <8 x float>, !dbg !54
  %350 = fsub <8 x float> %349, %259, !dbg !55
  %351 = insertelement <8 x float> poison, float %313, i64 0, !dbg !56
  %352 = insertelement <8 x float> %351, float %312, i64 1, !dbg !56
  %353 = insertelement <8 x float> %352, float %311, i64 2, !dbg !56
  %354 = insertelement <8 x float> %353, float %310, i64 3, !dbg !56
  %355 = insertelement <8 x float> %354, float %309, i64 4, !dbg !56
  %356 = insertelement <8 x float> %355, float %308, i64 5, !dbg !56
  %357 = insertelement <8 x float> %356, float %307, i64 6, !dbg !56
  %358 = insertelement <8 x float> %357, float %306, i64 7, !dbg !56
  %359 = fmul <8 x float> %350, %358, !dbg !56
  %360 = fmul <8 x float> %359, %305, !dbg !57
  %361 = fadd <8 x float> %360, %296, !dbg !58
  %362 = fcmp olt <8 x float> %361, zeroinitializer, !dbg !59
  %363 = extractelement <8 x i1> %362, i64 7, !dbg !63
  %364 = extractelement <8 x i1> %362, i64 6, !dbg !63
  %365 = extractelement <8 x i1> %362, i64 5, !dbg !63
  %366 = extractelement <8 x i1> %362, i64 4, !dbg !63
  %367 = extractelement <8 x i1> %362, i64 3, !dbg !63
  %368 = extractelement <8 x i1> %362, i64 2, !dbg !63
  %369 = extractelement <8 x i1> %362, i64 1, !dbg !63
  %370 = extractelement <8 x i1> %362, i64 0, !dbg !63
  %371 = sext i32 %17 to i64, !dbg !64
  %372 = getelementptr float, ptr addrspace(1) %8, i64 %371, !dbg !64
  %373 = sext i32 %18 to i64, !dbg !64
  %374 = getelementptr float, ptr addrspace(1) %8, i64 %373, !dbg !64
  %375 = extractelement <8 x i32> %348, i64 4, !dbg !65
  %376 = extractelement <8 x i32> %348, i64 5, !dbg !65
  %377 = extractelement <8 x i32> %348, i64 6, !dbg !65
  %378 = extractelement <8 x i32> %348, i64 7, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %378, i32 %377, i32 %376, i32 %375, ptr addrspace(1) %372, i1 true) #3, !dbg !65
  %379 = extractelement <8 x i32> %348, i64 0, !dbg !65
  %380 = extractelement <8 x i32> %348, i64 1, !dbg !65
  %381 = extractelement <8 x i32> %348, i64 2, !dbg !65
  %382 = extractelement <8 x i32> %348, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %382, i32 %381, i32 %380, i32 %379, ptr addrspace(1) %374, i1 true) #3, !dbg !65
  %383 = getelementptr float, ptr addrspace(1) %9, i64 %371, !dbg !66
  %384 = getelementptr float, ptr addrspace(1) %9, i64 %373, !dbg !66
  %bc = bitcast <8 x float> %361 to <8 x i32>, !dbg !67
  %385 = extractelement <8 x i32> %bc, i64 7, !dbg !67
  %386 = select i1 %363, i32 0, i32 %385, !dbg !63
  %bc60 = bitcast <8 x float> %361 to <8 x i32>, !dbg !67
  %387 = extractelement <8 x i32> %bc60, i64 6, !dbg !67
  %388 = select i1 %364, i32 0, i32 %387, !dbg !63
  %bc61 = bitcast <8 x float> %361 to <8 x i32>, !dbg !67
  %389 = extractelement <8 x i32> %bc61, i64 5, !dbg !67
  %390 = select i1 %365, i32 0, i32 %389, !dbg !63
  %bc62 = bitcast <8 x float> %361 to <8 x i32>, !dbg !67
  %391 = extractelement <8 x i32> %bc62, i64 4, !dbg !67
  %392 = select i1 %366, i32 0, i32 %391, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %386, i32 %388, i32 %390, i32 %392, ptr addrspace(1) %383, i1 true) #3, !dbg !67
  %bc63 = bitcast <8 x float> %361 to <8 x i32>, !dbg !67
  %393 = extractelement <8 x i32> %bc63, i64 3, !dbg !67
  %394 = select i1 %367, i32 0, i32 %393, !dbg !63
  %bc64 = bitcast <8 x float> %361 to <8 x i32>, !dbg !67
  %395 = extractelement <8 x i32> %bc64, i64 2, !dbg !67
  %396 = select i1 %368, i32 0, i32 %395, !dbg !63
  %bc65 = bitcast <8 x float> %361 to <8 x i32>, !dbg !67
  %397 = extractelement <8 x i32> %bc65, i64 1, !dbg !67
  %398 = select i1 %369, i32 0, i32 %397, !dbg !63
  %bc66 = bitcast <8 x float> %361 to <8 x i32>, !dbg !67
  %399 = extractelement <8 x i32> %bc66, i64 0, !dbg !67
  %400 = select i1 %370, i32 0, i32 %399, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %394, i32 %396, i32 %398, i32 %400, ptr addrspace(1) %384, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cflmqpfjhuwqwbkmxy347bn4oc7eatx72vil5cgvu2dbfokpw73c.py", directory: "inductor_cache/fl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_33", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 54, scope: !7)
!18 = !DILocation(line: 37, column: 47, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 42, column: 63, scope: !7)
!21 = !DILocation(line: 42, column: 42, scope: !7)
!22 = !DILocation(line: 42, column: 36, scope: !7)
!23 = !DILocation(line: 24, column: 21, scope: !7)
!24 = !DILocation(line: 24, column: 29, scope: !7)
!25 = !DILocation(line: 48, column: 20, scope: !7)
!26 = !DILocation(line: 28, column: 31, scope: !7)
!27 = !DILocation(line: 28, column: 36, scope: !7)
!28 = !DILocation(line: 29, column: 31, scope: !7)
!29 = !DILocation(line: 29, column: 36, scope: !7)
!30 = !DILocation(line: 30, column: 31, scope: !7)
!31 = !DILocation(line: 30, column: 36, scope: !7)
!32 = !DILocation(line: 31, column: 31, scope: !7)
!33 = !DILocation(line: 31, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 59, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 57, scope: !7)
!38 = !DILocation(line: 42, column: 31, scope: !7)
!39 = !DILocation(line: 42, column: 68, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 36, scope: !7)
!42 = !DILocation(line: 47, column: 57, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 68, scope: !7)
!45 = !DILocation(line: 51, column: 36, scope: !7)
!46 = !DILocation(line: 51, column: 57, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 68, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 27, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 35, scope: !7)
!53 = !DILocation(line: 53, column: 34, scope: !7)
!54 = !DILocation(line: 54, column: 33, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 67, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 68, column: 25, scope: !7)
!65 = !DILocation(line: 68, column: 37, scope: !7)
!66 = !DILocation(line: 69, column: 25, scope: !7)
!67 = !DILocation(line: 69, column: 37, scope: !7)
!68 = !DILocation(line: 69, column: 4, scope: !7)
