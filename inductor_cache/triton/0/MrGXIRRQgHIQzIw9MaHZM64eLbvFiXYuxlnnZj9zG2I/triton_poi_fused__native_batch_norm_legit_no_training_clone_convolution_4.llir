; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 8, !dbg !13
  %17 = or disjoint i32 %15, 16, !dbg !13
  %18 = or disjoint i32 %15, 24, !dbg !13
  %19 = icmp slt i32 %15, 40, !dbg !14
  %20 = icmp slt i32 %16, 40, !dbg !14
  %21 = icmp slt i32 %17, 40, !dbg !14
  %22 = icmp slt i32 %18, 40, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 7, !dbg !16
  %25 = shl i32 %12, 2, !dbg !17
  %26 = and i32 %25, 124, !dbg !17
  %27 = or disjoint i32 %24, %26, !dbg !18
  %28 = icmp slt i32 %27, 128, !dbg !19
  %29 = shl i32 %15, 7, !dbg !20
  %30 = shl i32 %16, 7, !dbg !20
  %31 = shl i32 %17, 7, !dbg !20
  %32 = shl i32 %18, 7, !dbg !20
  %33 = add i32 %27, %29, !dbg !21
  %34 = add i32 %27, %30, !dbg !21
  %35 = add i32 %27, %31, !dbg !21
  %36 = add i32 %27, %32, !dbg !21
  %37 = sext i32 %33 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = sext i32 %34 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %35 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %36 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = and i1 %19, %28, !dbg !23
  %46 = and i1 %20, %28, !dbg !23
  %47 = and i1 %21, %28, !dbg !23
  %48 = and i1 %22, %28, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %45) #4, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %46) #4, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %47) #4, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %48) #4, !dbg !24
  %53 = sext i32 %27 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !25
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %28) #4, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !27
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %28) #4, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !29
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %28) #4, !dbg !30
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !30
  %64 = bitcast i32 %60 to float, !dbg !30
  %65 = bitcast i32 %61 to float, !dbg !30
  %66 = bitcast i32 %62 to float, !dbg !30
  %67 = bitcast i32 %63 to float, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !31
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %28) #4, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %53, !dbg !33
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %28) #4, !dbg !34
  %72 = fadd float %64, 0x3EE4F8B580000000, !dbg !35
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !35
  %74 = fadd float %66, 0x3EE4F8B580000000, !dbg !35
  %75 = fadd float %67, 0x3EE4F8B580000000, !dbg !35
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %76, 0, !dbg !36
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %77, 0, !dbg !36
  br i1 %.not.i, label %83, label %78, !dbg !36

78:                                               ; preds = %9
  br i1 %.not1.i, label %81, label %79, !dbg !36

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

83:                                               ; preds = %9
  br i1 %.not1.i, label %86, label %84, !dbg !36

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !36
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i34 = icmp eq i32 %88, 0, !dbg !36
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i37 = icmp eq i32 %89, 0, !dbg !36
  br i1 %.not.i34, label %95, label %90, !dbg !36

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %93, label %91, !dbg !36

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i37, label %98, label %96, !dbg !36

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit38, !dbg !36

__nv_sqrtf.exit38:                                ; preds = %91, %93, %96, %98
  %.0.i36 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !36
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i39 = icmp eq i32 %100, 0, !dbg !36
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i42 = icmp eq i32 %101, 0, !dbg !36
  br i1 %.not.i39, label %107, label %102, !dbg !36

102:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %105, label %103, !dbg !36

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit43, !dbg !36

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit43, !dbg !36

107:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %110, label %108, !dbg !36

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit43, !dbg !36

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit43, !dbg !36

__nv_sqrtf.exit43:                                ; preds = %103, %105, %108, %110
  %.0.i41 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !36
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i44 = icmp eq i32 %112, 0, !dbg !36
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i47 = icmp eq i32 %113, 0, !dbg !36
  br i1 %.not.i44, label %119, label %114, !dbg !36

114:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %117, label %115, !dbg !36

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit48, !dbg !36

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit48, !dbg !36

119:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %122, label %120, !dbg !36

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit48, !dbg !36

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !36
  br label %__nv_sqrtf.exit48, !dbg !36

__nv_sqrtf.exit48:                                ; preds = %115, %117, %120, %122
  %.0.i46 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %125 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %126 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %128 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !28
  %130 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %131 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !28
  %133 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %134 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %135 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !28
  %136 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %137 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %138 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %139 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %140 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %141 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %142 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %143 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %144 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %145 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %146 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %147 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %148 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !34
  %149 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !34
  %152 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !32
  %153 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !32
  %154 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !32
  %155 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !32
  %156 = lshr i32 %12, 4, !dbg !17
  %157 = and i32 %156, 15, !dbg !17
  %158 = or disjoint i32 %157, %24, !dbg !18
  %159 = or disjoint i32 %158, 112, !dbg !18
  %160 = icmp slt i32 %159, 128, !dbg !19
  %161 = shl i32 %12, 1, !dbg !12
  %162 = and i32 %161, 30, !dbg !12
  %163 = or disjoint i32 %11, %162, !dbg !13
  %164 = icmp slt i32 %163, 40, !dbg !14
  %165 = and i1 %164, %160, !dbg !23
  %166 = or disjoint i32 %158, 96, !dbg !18
  %167 = icmp slt i32 %166, 128, !dbg !19
  %168 = and i1 %164, %167, !dbg !23
  %169 = or disjoint i32 %158, 80, !dbg !18
  %170 = icmp slt i32 %169, 128, !dbg !19
  %171 = and i1 %164, %170, !dbg !23
  %172 = or disjoint i32 %158, 64, !dbg !18
  %173 = icmp slt i32 %172, 128, !dbg !19
  %174 = and i1 %164, %173, !dbg !23
  %175 = or disjoint i32 %158, 48, !dbg !18
  %176 = icmp slt i32 %175, 128, !dbg !19
  %177 = and i1 %164, %176, !dbg !23
  %178 = or disjoint i32 %158, 32, !dbg !18
  %179 = icmp slt i32 %178, 128, !dbg !19
  %180 = and i1 %164, %179, !dbg !23
  %181 = or disjoint i32 %158, 16, !dbg !18
  %182 = icmp slt i32 %181, 128, !dbg !19
  %183 = and i1 %164, %182, !dbg !23
  %184 = icmp slt i32 %158, 128, !dbg !19
  %185 = and i1 %164, %184, !dbg !23
  %.frozen = freeze i32 %163, !dbg !37
  %186 = sdiv i32 %.frozen, 10, !dbg !37
  %187 = mul i32 %186, 10, !dbg !38
  %.decomposed = sub i32 %.frozen, %187, !dbg !38
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #4, !dbg !39
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #4, !dbg !39
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i46) #4, !dbg !39
  %192 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !26
  %193 = insertelement <4 x i32> %192, i32 %128, i64 1, !dbg !26
  %194 = insertelement <4 x i32> %193, i32 %131, i64 2, !dbg !26
  %195 = insertelement <4 x i32> %194, i32 %134, i64 3, !dbg !26
  %196 = bitcast <4 x i32> %195 to <4 x float>, !dbg !26
  %197 = shufflevector <4 x float> %196, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !26
  %198 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !28
  %199 = insertelement <4 x i32> %198, i32 %129, i64 1, !dbg !28
  %200 = insertelement <4 x i32> %199, i32 %132, i64 2, !dbg !28
  %201 = insertelement <4 x i32> %200, i32 %135, i64 3, !dbg !28
  %202 = bitcast <4 x i32> %201 to <4 x float>, !dbg !28
  %203 = shufflevector <4 x float> %202, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %204 = insertelement <16 x i32> poison, i32 %124, i64 0, !dbg !24
  %205 = insertelement <16 x i32> %204, i32 %127, i64 1, !dbg !24
  %206 = insertelement <16 x i32> %205, i32 %130, i64 2, !dbg !24
  %207 = insertelement <16 x i32> %206, i32 %133, i64 3, !dbg !24
  %208 = insertelement <16 x i32> %207, i32 %136, i64 4, !dbg !24
  %209 = insertelement <16 x i32> %208, i32 %137, i64 5, !dbg !24
  %210 = insertelement <16 x i32> %209, i32 %138, i64 6, !dbg !24
  %211 = insertelement <16 x i32> %210, i32 %139, i64 7, !dbg !24
  %212 = insertelement <16 x i32> %211, i32 %140, i64 8, !dbg !24
  %213 = insertelement <16 x i32> %212, i32 %141, i64 9, !dbg !24
  %214 = insertelement <16 x i32> %213, i32 %142, i64 10, !dbg !24
  %215 = insertelement <16 x i32> %214, i32 %143, i64 11, !dbg !24
  %216 = insertelement <16 x i32> %215, i32 %144, i64 12, !dbg !24
  %217 = insertelement <16 x i32> %216, i32 %145, i64 13, !dbg !24
  %218 = insertelement <16 x i32> %217, i32 %146, i64 14, !dbg !24
  %219 = insertelement <16 x i32> %218, i32 %147, i64 15, !dbg !24
  %220 = bitcast <16 x i32> %219 to <16 x float>, !dbg !24
  %221 = fadd <16 x float> %197, %220, !dbg !40
  %222 = fsub <16 x float> %221, %203, !dbg !41
  %223 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !34
  %224 = insertelement <4 x i32> %223, i32 %149, i64 1, !dbg !34
  %225 = insertelement <4 x i32> %224, i32 %150, i64 2, !dbg !34
  %226 = insertelement <4 x i32> %225, i32 %151, i64 3, !dbg !34
  %227 = bitcast <4 x i32> %226 to <4 x float>, !dbg !34
  %228 = shufflevector <4 x float> %227, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %229 = insertelement <4 x i32> poison, i32 %152, i64 0, !dbg !32
  %230 = insertelement <4 x i32> %229, i32 %153, i64 1, !dbg !32
  %231 = insertelement <4 x i32> %230, i32 %154, i64 2, !dbg !32
  %232 = insertelement <4 x i32> %231, i32 %155, i64 3, !dbg !32
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !32
  %234 = shufflevector <4 x float> %233, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %235 = insertelement <16 x float> poison, float %191, i64 0, !dbg !42
  %236 = insertelement <16 x float> %235, float %190, i64 1, !dbg !42
  %237 = insertelement <16 x float> %236, float %189, i64 2, !dbg !42
  %238 = insertelement <16 x float> %237, float %188, i64 3, !dbg !42
  %239 = shufflevector <16 x float> %238, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !42
  %240 = fmul <16 x float> %222, %239, !dbg !42
  %241 = fmul <16 x float> %240, %234, !dbg !43
  %242 = fadd <16 x float> %241, %228, !dbg !44
  %243 = fcmp ogt <16 x float> %242, zeroinitializer, !dbg !45
  %244 = extractelement <16 x float> %242, i64 15, !dbg !46
  %245 = fmul float %244, 0x3F847AE140000000, !dbg !47
  %246 = extractelement <16 x float> %242, i64 14, !dbg !46
  %247 = fmul float %246, 0x3F847AE140000000, !dbg !47
  %248 = extractelement <16 x float> %242, i64 13, !dbg !46
  %249 = fmul float %248, 0x3F847AE140000000, !dbg !47
  %250 = extractelement <16 x float> %242, i64 12, !dbg !46
  %251 = fmul float %250, 0x3F847AE140000000, !dbg !47
  %252 = extractelement <16 x float> %242, i64 11, !dbg !46
  %253 = fmul float %252, 0x3F847AE140000000, !dbg !47
  %254 = extractelement <16 x float> %242, i64 10, !dbg !46
  %255 = fmul float %254, 0x3F847AE140000000, !dbg !47
  %256 = extractelement <16 x float> %242, i64 9, !dbg !46
  %257 = fmul float %256, 0x3F847AE140000000, !dbg !47
  %258 = extractelement <16 x float> %242, i64 8, !dbg !46
  %259 = fmul float %258, 0x3F847AE140000000, !dbg !47
  %260 = extractelement <16 x float> %242, i64 7, !dbg !46
  %261 = fmul float %260, 0x3F847AE140000000, !dbg !47
  %262 = extractelement <16 x float> %242, i64 6, !dbg !46
  %263 = fmul float %262, 0x3F847AE140000000, !dbg !47
  %264 = extractelement <16 x float> %242, i64 5, !dbg !46
  %265 = fmul float %264, 0x3F847AE140000000, !dbg !47
  %266 = extractelement <16 x float> %242, i64 4, !dbg !46
  %267 = fmul float %266, 0x3F847AE140000000, !dbg !47
  %268 = extractelement <16 x float> %242, i64 3, !dbg !46
  %269 = fmul float %268, 0x3F847AE140000000, !dbg !47
  %270 = extractelement <16 x float> %242, i64 2, !dbg !46
  %271 = fmul float %270, 0x3F847AE140000000, !dbg !47
  %272 = extractelement <16 x float> %242, i64 1, !dbg !46
  %273 = fmul float %272, 0x3F847AE140000000, !dbg !47
  %274 = extractelement <16 x float> %242, i64 0, !dbg !46
  %275 = fmul float %274, 0x3F847AE140000000, !dbg !47
  %276 = extractelement <16 x i1> %243, i64 15, !dbg !46
  %277 = select i1 %276, float %244, float %245, !dbg !46
  %278 = extractelement <16 x i1> %243, i64 14, !dbg !46
  %279 = select i1 %278, float %246, float %247, !dbg !46
  %280 = extractelement <16 x i1> %243, i64 13, !dbg !46
  %281 = select i1 %280, float %248, float %249, !dbg !46
  %282 = extractelement <16 x i1> %243, i64 12, !dbg !46
  %283 = select i1 %282, float %250, float %251, !dbg !46
  %284 = extractelement <16 x i1> %243, i64 11, !dbg !46
  %285 = select i1 %284, float %252, float %253, !dbg !46
  %286 = extractelement <16 x i1> %243, i64 10, !dbg !46
  %287 = select i1 %286, float %254, float %255, !dbg !46
  %288 = extractelement <16 x i1> %243, i64 9, !dbg !46
  %289 = select i1 %288, float %256, float %257, !dbg !46
  %290 = extractelement <16 x i1> %243, i64 8, !dbg !46
  %291 = select i1 %290, float %258, float %259, !dbg !46
  %292 = extractelement <16 x i1> %243, i64 7, !dbg !46
  %293 = select i1 %292, float %260, float %261, !dbg !46
  %294 = extractelement <16 x i1> %243, i64 6, !dbg !46
  %295 = select i1 %294, float %262, float %263, !dbg !46
  %296 = extractelement <16 x i1> %243, i64 5, !dbg !46
  %297 = select i1 %296, float %264, float %265, !dbg !46
  %298 = extractelement <16 x i1> %243, i64 4, !dbg !46
  %299 = select i1 %298, float %266, float %267, !dbg !46
  %300 = extractelement <16 x i1> %243, i64 3, !dbg !46
  %301 = select i1 %300, float %268, float %269, !dbg !46
  %302 = extractelement <16 x i1> %243, i64 2, !dbg !46
  %303 = select i1 %302, float %270, float %271, !dbg !46
  %304 = extractelement <16 x i1> %243, i64 1, !dbg !46
  %305 = select i1 %304, float %272, float %273, !dbg !46
  %306 = extractelement <16 x i1> %243, i64 0, !dbg !46
  %307 = select i1 %306, float %274, float %275, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %bc = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %308 = extractelement <16 x i32> %bc, i64 15, !dbg !49
  %bc49 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %309 = extractelement <16 x i32> %bc49, i64 14, !dbg !49
  %bc50 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %310 = extractelement <16 x i32> %bc50, i64 13, !dbg !49
  %bc51 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %311 = extractelement <16 x i32> %bc51, i64 12, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %308, i32 %309, i32 %310, i32 %311, ptr addrspace(1) %38, i1 %45) #4, !dbg !49
  %bc52 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %312 = extractelement <16 x i32> %bc52, i64 11, !dbg !49
  %bc53 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %313 = extractelement <16 x i32> %bc53, i64 10, !dbg !49
  %bc54 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %314 = extractelement <16 x i32> %bc54, i64 9, !dbg !49
  %bc55 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %315 = extractelement <16 x i32> %bc55, i64 8, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %312, i32 %313, i32 %314, i32 %315, ptr addrspace(1) %40, i1 %46) #4, !dbg !49
  %bc56 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %316 = extractelement <16 x i32> %bc56, i64 7, !dbg !49
  %bc57 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %317 = extractelement <16 x i32> %bc57, i64 6, !dbg !49
  %bc58 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %318 = extractelement <16 x i32> %bc58, i64 5, !dbg !49
  %bc59 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %319 = extractelement <16 x i32> %bc59, i64 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %316, i32 %317, i32 %318, i32 %319, ptr addrspace(1) %42, i1 %47) #4, !dbg !49
  %bc60 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %320 = extractelement <16 x i32> %bc60, i64 3, !dbg !49
  %bc61 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %321 = extractelement <16 x i32> %bc61, i64 2, !dbg !49
  %bc62 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %322 = extractelement <16 x i32> %bc62, i64 1, !dbg !49
  %bc63 = bitcast <16 x float> %221 to <16 x i32>, !dbg !49
  %323 = extractelement <16 x i32> %bc63, i64 0, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %320, i32 %321, i32 %322, i32 %323, ptr addrspace(1) %44, i1 %48) #4, !dbg !49
  %324 = mul i32 %158, 10, !dbg !50
  %325 = mul i32 %181, 10, !dbg !50
  %326 = mul i32 %178, 10, !dbg !50
  %327 = mul i32 %175, 10, !dbg !50
  %328 = mul i32 %172, 10, !dbg !50
  %329 = mul i32 %169, 10, !dbg !50
  %330 = mul i32 %166, 10, !dbg !50
  %331 = mul i32 %159, 10, !dbg !50
  %332 = mul i32 %186, 1280, !dbg !51
  %333 = add i32 %332, %.decomposed, !dbg !52
  %334 = add i32 %333, %324, !dbg !53
  %335 = add i32 %333, %325, !dbg !53
  %336 = add i32 %333, %326, !dbg !53
  %337 = add i32 %333, %327, !dbg !53
  %338 = add i32 %333, %328, !dbg !53
  %339 = add i32 %333, %329, !dbg !53
  %340 = add i32 %333, %330, !dbg !53
  %341 = add i32 %333, %331, !dbg !53
  %342 = sext i32 %334 to i64, !dbg !54
  %343 = getelementptr float, ptr addrspace(1) %6, i64 %342, !dbg !54
  %344 = sext i32 %335 to i64, !dbg !54
  %345 = getelementptr float, ptr addrspace(1) %6, i64 %344, !dbg !54
  %346 = sext i32 %336 to i64, !dbg !54
  %347 = getelementptr float, ptr addrspace(1) %6, i64 %346, !dbg !54
  %348 = sext i32 %337 to i64, !dbg !54
  %349 = getelementptr float, ptr addrspace(1) %6, i64 %348, !dbg !54
  %350 = sext i32 %338 to i64, !dbg !54
  %351 = getelementptr float, ptr addrspace(1) %6, i64 %350, !dbg !54
  %352 = sext i32 %339 to i64, !dbg !54
  %353 = getelementptr float, ptr addrspace(1) %6, i64 %352, !dbg !54
  %354 = sext i32 %340 to i64, !dbg !54
  %355 = getelementptr float, ptr addrspace(1) %6, i64 %354, !dbg !54
  %356 = sext i32 %341 to i64, !dbg !54
  %357 = getelementptr float, ptr addrspace(1) %6, i64 %356, !dbg !54
  %358 = shl i32 %12, 7, !dbg !55
  %359 = and i32 %358, 3968, !dbg !55
  %360 = or disjoint i32 %359, %14, !dbg !55
  %361 = and i32 %161, 510, !dbg !55
  %362 = lshr exact i32 %359, 2, !dbg !55
  %363 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %362, !dbg !55
  %364 = getelementptr float, ptr addrspace(3) %363, i32 %360, !dbg !55
  %365 = bitcast float %277 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %364, <1 x i32> %365, i1 true) #4, !dbg !55
  %366 = or disjoint i32 %360, 32, !dbg !55
  %367 = lshr i32 %366, 4, !dbg !55
  %368 = getelementptr float, ptr addrspace(3) @global_smem, i32 %367, !dbg !55
  %369 = getelementptr float, ptr addrspace(3) %368, i32 %366, !dbg !55
  %370 = bitcast float %279 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 true) #4, !dbg !55
  %371 = or disjoint i32 %360, 64, !dbg !55
  %372 = lshr i32 %371, 4, !dbg !55
  %373 = getelementptr float, ptr addrspace(3) @global_smem, i32 %372, !dbg !55
  %374 = getelementptr float, ptr addrspace(3) %373, i32 %371, !dbg !55
  %375 = bitcast float %281 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #4, !dbg !55
  %376 = or disjoint i32 %360, 96, !dbg !55
  %377 = lshr i32 %376, 4, !dbg !55
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i32 %377, !dbg !55
  %379 = getelementptr float, ptr addrspace(3) %378, i32 %376, !dbg !55
  %380 = bitcast float %283 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 true) #4, !dbg !55
  %381 = or disjoint i32 %360, 8, !dbg !55
  %382 = getelementptr float, ptr addrspace(3) %363, i32 %381, !dbg !55
  %383 = bitcast float %285 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %382, <1 x i32> %383, i1 true) #4, !dbg !55
  %384 = or disjoint i32 %360, 40, !dbg !55
  %385 = lshr i32 %384, 4, !dbg !55
  %386 = getelementptr float, ptr addrspace(3) @global_smem, i32 %385, !dbg !55
  %387 = getelementptr float, ptr addrspace(3) %386, i32 %384, !dbg !55
  %388 = bitcast float %287 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 true) #4, !dbg !55
  %389 = or disjoint i32 %360, 72, !dbg !55
  %390 = lshr i32 %389, 4, !dbg !55
  %391 = getelementptr float, ptr addrspace(3) @global_smem, i32 %390, !dbg !55
  %392 = getelementptr float, ptr addrspace(3) %391, i32 %389, !dbg !55
  %393 = bitcast float %289 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #4, !dbg !55
  %394 = or disjoint i32 %360, 104, !dbg !55
  %395 = lshr i32 %394, 4, !dbg !55
  %396 = getelementptr float, ptr addrspace(3) @global_smem, i32 %395, !dbg !55
  %397 = getelementptr float, ptr addrspace(3) %396, i32 %394, !dbg !55
  %398 = bitcast float %291 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %397, <1 x i32> %398, i1 true) #4, !dbg !55
  %399 = or disjoint i32 %360, 16, !dbg !55
  %400 = getelementptr float, ptr addrspace(3) %363, i32 %399, !dbg !55
  %401 = bitcast float %293 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %401, i1 true) #4, !dbg !55
  %402 = or disjoint i32 %360, 48, !dbg !55
  %403 = lshr i32 %402, 4, !dbg !55
  %404 = and i32 %403, 250, !dbg !55
  %405 = getelementptr float, ptr addrspace(3) @global_smem, i32 %404, !dbg !55
  %406 = getelementptr float, ptr addrspace(3) %405, i32 %402, !dbg !55
  %407 = bitcast float %295 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %407, i1 true) #4, !dbg !55
  %408 = or disjoint i32 %360, 80, !dbg !55
  %409 = lshr i32 %408, 4, !dbg !55
  %410 = and i32 %409, 252, !dbg !55
  %411 = getelementptr float, ptr addrspace(3) @global_smem, i32 %410, !dbg !55
  %412 = getelementptr float, ptr addrspace(3) %411, i32 %408, !dbg !55
  %413 = bitcast float %297 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %413, i1 true) #4, !dbg !55
  %414 = or disjoint i32 %360, 112, !dbg !55
  %415 = lshr i32 %414, 4, !dbg !55
  %416 = and i32 %415, 254, !dbg !55
  %417 = getelementptr float, ptr addrspace(3) @global_smem, i32 %416, !dbg !55
  %418 = getelementptr float, ptr addrspace(3) %417, i32 %414, !dbg !55
  %419 = bitcast float %299 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 true) #4, !dbg !55
  %420 = or disjoint i32 %360, 24, !dbg !55
  %421 = getelementptr float, ptr addrspace(3) %363, i32 %420, !dbg !55
  %422 = bitcast float %301 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %421, <1 x i32> %422, i1 true) #4, !dbg !55
  %423 = or disjoint i32 %360, 56, !dbg !55
  %424 = lshr i32 %423, 4, !dbg !55
  %425 = and i32 %424, 250, !dbg !55
  %426 = getelementptr float, ptr addrspace(3) @global_smem, i32 %425, !dbg !55
  %427 = getelementptr float, ptr addrspace(3) %426, i32 %423, !dbg !55
  %428 = bitcast float %303 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %427, <1 x i32> %428, i1 true) #4, !dbg !55
  %429 = or disjoint i32 %360, 88, !dbg !55
  %430 = lshr i32 %429, 4, !dbg !55
  %431 = and i32 %430, 252, !dbg !55
  %432 = getelementptr float, ptr addrspace(3) @global_smem, i32 %431, !dbg !55
  %433 = getelementptr float, ptr addrspace(3) %432, i32 %429, !dbg !55
  %434 = bitcast float %305 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %434, i1 true) #4, !dbg !55
  %435 = or disjoint i32 %360, 120, !dbg !55
  %436 = lshr i32 %435, 4, !dbg !55
  %437 = and i32 %436, 254, !dbg !55
  %438 = getelementptr float, ptr addrspace(3) @global_smem, i32 %437, !dbg !55
  %439 = getelementptr float, ptr addrspace(3) %438, i32 %435, !dbg !55
  %440 = bitcast float %307 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %440, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %441 = lshr i32 %161, 4, !dbg !55
  %442 = and i32 %441, 30, !dbg !55
  %443 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %442, !dbg !55
  %444 = getelementptr inbounds float, ptr addrspace(3) %443, i32 %361, !dbg !55
  %445 = load <2 x i32>, ptr addrspace(3) %444, align 8, !dbg !55
  %446 = or disjoint i32 %361, 512, !dbg !55
  %447 = lshr i32 %446, 4, !dbg !55
  %448 = and i32 %447, 62, !dbg !55
  %449 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %448, !dbg !55
  %450 = getelementptr inbounds float, ptr addrspace(3) %449, i32 %446, !dbg !55
  %451 = load <2 x i32>, ptr addrspace(3) %450, align 8, !dbg !55
  %452 = or disjoint i32 %361, 1024, !dbg !55
  %453 = lshr i32 %452, 4, !dbg !55
  %454 = and i32 %453, 94, !dbg !55
  %455 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %454, !dbg !55
  %456 = getelementptr inbounds float, ptr addrspace(3) %455, i32 %452, !dbg !55
  %457 = load <2 x i32>, ptr addrspace(3) %456, align 8, !dbg !55
  %458 = or disjoint i32 %361, 1536, !dbg !55
  %459 = lshr i32 %458, 4, !dbg !55
  %460 = and i32 %459, 126, !dbg !55
  %461 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %460, !dbg !55
  %462 = getelementptr inbounds float, ptr addrspace(3) %461, i32 %458, !dbg !55
  %463 = load <2 x i32>, ptr addrspace(3) %462, align 8, !dbg !55
  %464 = or disjoint i32 %361, 2048, !dbg !55
  %465 = lshr i32 %464, 4, !dbg !55
  %466 = and i32 %465, 158, !dbg !55
  %467 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %466, !dbg !55
  %468 = getelementptr inbounds float, ptr addrspace(3) %467, i32 %464, !dbg !55
  %469 = load <2 x i32>, ptr addrspace(3) %468, align 8, !dbg !55
  %470 = or disjoint i32 %361, 2560, !dbg !55
  %471 = lshr i32 %470, 4, !dbg !55
  %472 = and i32 %471, 190, !dbg !55
  %473 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %472, !dbg !55
  %474 = getelementptr inbounds float, ptr addrspace(3) %473, i32 %470, !dbg !55
  %475 = load <2 x i32>, ptr addrspace(3) %474, align 8, !dbg !55
  %476 = or disjoint i32 %361, 3072, !dbg !55
  %477 = lshr i32 %476, 4, !dbg !55
  %478 = and i32 %477, 222, !dbg !55
  %479 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %478, !dbg !55
  %480 = getelementptr inbounds float, ptr addrspace(3) %479, i32 %476, !dbg !55
  %481 = load <2 x i32>, ptr addrspace(3) %480, align 8, !dbg !55
  %482 = or disjoint i32 %361, 3584, !dbg !55
  %483 = lshr i32 %482, 4, !dbg !55
  %484 = and i32 %483, 254, !dbg !55
  %485 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %484, !dbg !55
  %486 = getelementptr inbounds float, ptr addrspace(3) %485, i32 %482, !dbg !55
  %487 = load <2 x i32>, ptr addrspace(3) %486, align 8, !dbg !55
  %.extract = extractelement <2 x i32> %445, i64 0, !dbg !55
  %.extract19 = extractelement <2 x i32> %445, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract19, ptr addrspace(1) %343, i1 %185) #4, !dbg !55
  %.extract20 = extractelement <2 x i32> %451, i64 0, !dbg !55
  %.extract21 = extractelement <2 x i32> %451, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract20, i32 %.extract21, ptr addrspace(1) %345, i1 %183) #4, !dbg !55
  %.extract22 = extractelement <2 x i32> %457, i64 0, !dbg !55
  %.extract23 = extractelement <2 x i32> %457, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract22, i32 %.extract23, ptr addrspace(1) %347, i1 %180) #4, !dbg !55
  %.extract24 = extractelement <2 x i32> %463, i64 0, !dbg !55
  %.extract25 = extractelement <2 x i32> %463, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract24, i32 %.extract25, ptr addrspace(1) %349, i1 %177) #4, !dbg !55
  %.extract26 = extractelement <2 x i32> %469, i64 0, !dbg !55
  %.extract27 = extractelement <2 x i32> %469, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract26, i32 %.extract27, ptr addrspace(1) %351, i1 %174) #4, !dbg !55
  %.extract28 = extractelement <2 x i32> %475, i64 0, !dbg !55
  %.extract29 = extractelement <2 x i32> %475, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract28, i32 %.extract29, ptr addrspace(1) %353, i1 %171) #4, !dbg !55
  %.extract30 = extractelement <2 x i32> %481, i64 0, !dbg !55
  %.extract31 = extractelement <2 x i32> %481, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract30, i32 %.extract31, ptr addrspace(1) %355, i1 %168) #4, !dbg !55
  %.extract32 = extractelement <2 x i32> %487, i64 0, !dbg !55
  %.extract33 = extractelement <2 x i32> %487, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract32, i32 %.extract33, ptr addrspace(1) %357, i1 %165) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cexirvayyidh3f3ue7vbycwrx2zqfuk3afjxgkri6tkplldvblxy.py", directory: "inductor_cache/ex")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 34, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 36, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 26, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 47, column: 19, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 4, scope: !7)
!49 = !DILocation(line: 56, column: 48, scope: !7)
!50 = !DILocation(line: 57, column: 33, scope: !7)
!51 = !DILocation(line: 57, column: 43, scope: !7)
!52 = !DILocation(line: 57, column: 30, scope: !7)
!53 = !DILocation(line: 57, column: 38, scope: !7)
!54 = !DILocation(line: 57, column: 25, scope: !7)
!55 = !DILocation(line: 57, column: 55, scope: !7)
!56 = !DILocation(line: 57, column: 4, scope: !7)
