; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_relu_threshold_backward_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 16, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %10, 63, !dbg !12
  %14 = shl i32 %8, 6, !dbg !13
  %15 = or disjoint i32 %14, %13, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %9, i32 0, i1 %9) #5, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = select i1 %9, float %19, float 0.000000e+00, !dbg !17
  %21 = bitcast float %20 to i32, !dbg !18
  %22 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %21, i32 16, i32 31), !dbg !18
  %23 = bitcast i32 %22 to float, !dbg !18
  %24 = fadd float %20, %23, !dbg !22
  %25 = bitcast float %24 to i32, !dbg !18
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 8, i32 31), !dbg !18
  %27 = bitcast i32 %26 to float, !dbg !18
  %28 = fadd float %24, %27, !dbg !22
  %29 = bitcast float %28 to i32, !dbg !18
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 4, i32 31), !dbg !18
  %31 = bitcast i32 %30 to float, !dbg !18
  %32 = fadd float %28, %31, !dbg !22
  %33 = bitcast float %32 to i32, !dbg !18
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 2, i32 31), !dbg !18
  %35 = bitcast i32 %34 to float, !dbg !18
  %36 = fadd float %32, %35, !dbg !22
  %37 = bitcast float %36 to i32, !dbg !18
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 1, i32 31), !dbg !18
  %39 = bitcast i32 %38 to float, !dbg !18
  %40 = fadd float %36, %39, !dbg !22
  %41 = icmp eq i32 %11, 0, !dbg !18
  %42 = and i32 %12, 1, !dbg !18
  %43 = zext nneg i32 %42 to i64, !dbg !18
  %44 = getelementptr float, ptr addrspace(3) @global_smem, i64 %43, !dbg !18
  %45 = bitcast float %40 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %45, i1 %41) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %46 = icmp slt i32 %10, 2, !dbg !18
  %47 = sext i32 %10 to i64, !dbg !18
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i64 %47, !dbg !18
  %49 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %48, i1 %46) #5, !dbg !18
  %50 = bitcast i32 %49 to float, !dbg !18
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !18
  %52 = bitcast i32 %51 to float, !dbg !18
  %53 = fadd float %50, %52, !dbg !22
  %54 = and i32 %10, 1, !dbg !18
  %55 = icmp eq i32 %54, 0, !dbg !18
  %56 = and i1 %46, %55, !dbg !18
  %57 = bitcast float %53 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %57, i1 %56) #5, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %58 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 6.400000e+01) #5, !dbg !24
  %60 = fsub float %19, %59, !dbg !25
  %61 = fmul float %60, %60, !dbg !26
  %62 = select i1 %9, float %61, float 0.000000e+00, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %63 = bitcast float %62 to i32, !dbg !28
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 16, i32 31), !dbg !28
  %65 = bitcast i32 %64 to float, !dbg !28
  %66 = fadd float %62, %65, !dbg !30
  %67 = bitcast float %66 to i32, !dbg !28
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 8, i32 31), !dbg !28
  %69 = bitcast i32 %68 to float, !dbg !28
  %70 = fadd float %66, %69, !dbg !30
  %71 = bitcast float %70 to i32, !dbg !28
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 4, i32 31), !dbg !28
  %73 = bitcast i32 %72 to float, !dbg !28
  %74 = fadd float %70, %73, !dbg !30
  %75 = bitcast float %74 to i32, !dbg !28
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 2, i32 31), !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = fadd float %74, %77, !dbg !30
  %79 = bitcast float %78 to i32, !dbg !28
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = fadd float %78, %81, !dbg !30
  %83 = bitcast float %82 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %83, i1 %41) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %84 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %48, i1 %46) #5, !dbg !28
  %85 = bitcast i32 %84 to float, !dbg !28
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !28
  %87 = bitcast i32 %86 to float, !dbg !28
  %88 = fadd float %85, %87, !dbg !30
  %89 = bitcast float %88 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %89, i1 %56) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %90 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 6.400000e+01) #5, !dbg !31
  %92 = fadd float %91, 0x3EE4F8B580000000, !dbg !32
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i = icmp eq i32 %93, 0, !dbg !33
  br i1 %.not.i, label %96, label %94, !dbg !33

94:                                               ; preds = %7
  %95 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %92), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

96:                                               ; preds = %7
  %97 = tail call float @llvm.nvvm.rsqrt.approx.f(float %92), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %94, %96
  %.0.i = phi float [ %95, %94 ], [ %97, %96 ], !dbg !33
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i1 = icmp eq i32 %98, 0, !dbg !33
  br i1 %.not.i1, label %101, label %99, !dbg !33

99:                                               ; preds = %__nv_rsqrtf.exit
  %100 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %92), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

101:                                              ; preds = %__nv_rsqrtf.exit
  %102 = tail call float @llvm.nvvm.rsqrt.approx.f(float %92), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

__nv_rsqrtf.exit3:                                ; preds = %99, %101
  %.0.i2 = phi float [ %100, %99 ], [ %102, %101 ], !dbg !33
  %103 = fmul float %60, %.0.i2, !dbg !34
  %104 = fcmp olt float %103, 0.000000e+00, !dbg !35
  %105 = select i1 %104, float 0.000000e+00, float %103, !dbg !39
  %106 = fcmp ole float %105, 0.000000e+00, !dbg !40
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !41
  %108 = bitcast float %105 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %107, i1 %9) #5, !dbg !42
  %109 = getelementptr i1, ptr addrspace(1) %3, i64 %16, !dbg !43
  %110 = zext i1 %106 to i8, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %110, ptr addrspace(1) %109, i1 %9) #5, !dbg !44
  %111 = sext i32 %8 to i64, !dbg !45
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %111, !dbg !45
  %113 = icmp eq i32 %13, 0, !dbg !46
  %114 = bitcast float %.0.i to i32, !dbg !46
  %115 = and i1 %113, %9, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %112, i1 %115) #5, !dbg !46
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !47
  %117 = bitcast float %59 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %116, i1 %115) #5, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg6uksze3d5cfrn4ev2jo23phxmlxnrjoktppbi4myn5m2alrvbv.py", directory: "inductor_cache/g6")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_relu_threshold_backward_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_relu_threshold_backward_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_relu_threshold_backward_2", linkageName: "triton_per_fused__native_batch_norm_legit_relu_threshold_backward_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 35, column: 33, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 36, column: 24, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !21)
!23 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!24 = !DILocation(line: 39, column: 19, scope: !7)
!25 = !DILocation(line: 40, column: 19, scope: !7)
!26 = !DILocation(line: 41, column: 20, scope: !7)
!27 = !DILocation(line: 43, column: 35, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !29)
!29 = !DILocation(line: 44, column: 26, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !29)
!31 = !DILocation(line: 47, column: 20, scope: !7)
!32 = !DILocation(line: 49, column: 20, scope: !7)
!33 = !DILocation(line: 50, column: 28, scope: !7)
!34 = !DILocation(line: 51, column: 20, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 53, column: 42, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 55, column: 21, scope: !7)
!41 = !DILocation(line: 56, column: 25, scope: !7)
!42 = !DILocation(line: 56, column: 45, scope: !7)
!43 = !DILocation(line: 57, column: 25, scope: !7)
!44 = !DILocation(line: 57, column: 45, scope: !7)
!45 = !DILocation(line: 58, column: 25, scope: !7)
!46 = !DILocation(line: 58, column: 37, scope: !7)
!47 = !DILocation(line: 59, column: 25, scope: !7)
!48 = !DILocation(line: 59, column: 37, scope: !7)
!49 = !DILocation(line: 59, column: 4, scope: !7)
