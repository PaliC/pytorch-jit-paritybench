; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__unsafe_index_add_reflection_pad2d_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = or disjoint i32 %15, 2, !dbg !13
  %18 = or disjoint i32 %15, 3, !dbg !13
  %19 = or disjoint i32 %15, 512, !dbg !13
  %20 = or disjoint i32 %15, 513, !dbg !13
  %21 = or disjoint i32 %15, 514, !dbg !13
  %22 = or disjoint i32 %15, 515, !dbg !13
  %23 = icmp slt i32 %15, 591872, !dbg !14
  %24 = icmp slt i32 %19, 591872, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %25 = sdiv i32 %.frozen, 34, !dbg !15
  %.frozen22 = freeze i32 %17, !dbg !15
  %26 = sdiv i32 %.frozen22, 34, !dbg !15
  %.frozen24 = freeze i32 %19, !dbg !15
  %27 = sdiv i32 %.frozen24, 34, !dbg !15
  %.frozen26 = freeze i32 %21, !dbg !15
  %28 = sdiv i32 %.frozen26, 34, !dbg !15
  %29 = srem i32 %25, 34, !dbg !16
  %30 = srem i32 %26, 34, !dbg !16
  %31 = srem i32 %27, 34, !dbg !16
  %32 = srem i32 %28, 34, !dbg !16
  %33 = mul i32 %25, 34, !dbg !17
  %.decomposed = sub i32 %.frozen, %33, !dbg !17
  %34 = srem i32 %16, 34, !dbg !17
  %35 = mul i32 %26, 34, !dbg !17
  %.decomposed23 = sub i32 %.frozen22, %35, !dbg !17
  %36 = srem i32 %18, 34, !dbg !17
  %37 = mul i32 %27, 34, !dbg !17
  %.decomposed25 = sub i32 %.frozen24, %37, !dbg !17
  %38 = srem i32 %20, 34, !dbg !17
  %39 = mul i32 %28, 34, !dbg !17
  %.decomposed27 = sub i32 %.frozen26, %39, !dbg !17
  %40 = srem i32 %22, 34, !dbg !17
  %41 = sdiv i32 %15, 1156, !dbg !18
  %42 = sdiv i32 %19, 1156, !dbg !18
  %43 = srem i32 %41, 128, !dbg !19
  %44 = srem i32 %42, 128, !dbg !19
  %45 = add nsw i32 %29, -1, !dbg !20
  %46 = add nsw i32 %30, -1, !dbg !20
  %47 = add nsw i32 %31, -1, !dbg !20
  %48 = add nsw i32 %32, -1, !dbg !20
  %49 = tail call i32 @llvm.abs.i32(i32 %45, i1 true), !dbg !21
  %50 = tail call i32 @llvm.abs.i32(i32 %46, i1 true), !dbg !21
  %51 = tail call i32 @llvm.abs.i32(i32 %47, i1 true), !dbg !21
  %52 = tail call i32 @llvm.abs.i32(i32 %48, i1 true), !dbg !21
  %53 = add nsw i32 %49, -31, !dbg !22
  %54 = add nsw i32 %50, -31, !dbg !22
  %55 = add nsw i32 %51, -31, !dbg !22
  %56 = add nsw i32 %52, -31, !dbg !22
  %57 = tail call i32 @llvm.abs.i32(i32 %53, i1 true), !dbg !23
  %58 = tail call i32 @llvm.abs.i32(i32 %54, i1 true), !dbg !23
  %59 = tail call i32 @llvm.abs.i32(i32 %55, i1 true), !dbg !23
  %60 = tail call i32 @llvm.abs.i32(i32 %56, i1 true), !dbg !23
  %61 = sub nuw nsw i32 31, %57, !dbg !24
  %62 = sub nuw nsw i32 31, %58, !dbg !24
  %63 = sub nuw nsw i32 31, %59, !dbg !24
  %64 = sub nuw nsw i32 31, %60, !dbg !24
  %65 = zext nneg i32 %61 to i64, !dbg !25
  %66 = getelementptr i64, ptr addrspace(1) %0, i64 %65, !dbg !25
  %67 = zext nneg i32 %62 to i64, !dbg !25
  %68 = getelementptr i64, ptr addrspace(1) %0, i64 %67, !dbg !25
  %69 = zext nneg i32 %63 to i64, !dbg !25
  %70 = getelementptr i64, ptr addrspace(1) %0, i64 %69, !dbg !25
  %71 = zext nneg i32 %64 to i64, !dbg !25
  %72 = getelementptr i64, ptr addrspace(1) %0, i64 %71, !dbg !25
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 %23) #3, !dbg !26
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 %23) #3, !dbg !26
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %23) #3, !dbg !26
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %23) #3, !dbg !26
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %24) #3, !dbg !26
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %24) #3, !dbg !26
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %24) #3, !dbg !26
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %24) #3, !dbg !26
  %81 = add nsw i32 %.decomposed, -1, !dbg !27
  %82 = add nsw i32 %34, -1, !dbg !27
  %83 = add nsw i32 %.decomposed23, -1, !dbg !27
  %84 = add nsw i32 %36, -1, !dbg !27
  %85 = add nsw i32 %.decomposed25, -1, !dbg !27
  %86 = add nsw i32 %38, -1, !dbg !27
  %87 = add nsw i32 %.decomposed27, -1, !dbg !27
  %88 = add nsw i32 %40, -1, !dbg !27
  %89 = tail call i32 @llvm.abs.i32(i32 %81, i1 true), !dbg !28
  %90 = tail call i32 @llvm.abs.i32(i32 %82, i1 true), !dbg !28
  %91 = tail call i32 @llvm.abs.i32(i32 %83, i1 true), !dbg !28
  %92 = tail call i32 @llvm.abs.i32(i32 %84, i1 true), !dbg !28
  %93 = tail call i32 @llvm.abs.i32(i32 %85, i1 true), !dbg !28
  %94 = tail call i32 @llvm.abs.i32(i32 %86, i1 true), !dbg !28
  %95 = tail call i32 @llvm.abs.i32(i32 %87, i1 true), !dbg !28
  %96 = tail call i32 @llvm.abs.i32(i32 %88, i1 true), !dbg !28
  %97 = add nsw i32 %89, -31, !dbg !29
  %98 = add nsw i32 %90, -31, !dbg !29
  %99 = add nsw i32 %91, -31, !dbg !29
  %100 = add nsw i32 %92, -31, !dbg !29
  %101 = add nsw i32 %93, -31, !dbg !29
  %102 = add nsw i32 %94, -31, !dbg !29
  %103 = add nsw i32 %95, -31, !dbg !29
  %104 = add nsw i32 %96, -31, !dbg !29
  %105 = tail call i32 @llvm.abs.i32(i32 %97, i1 true), !dbg !30
  %106 = tail call i32 @llvm.abs.i32(i32 %98, i1 true), !dbg !30
  %107 = tail call i32 @llvm.abs.i32(i32 %99, i1 true), !dbg !30
  %108 = tail call i32 @llvm.abs.i32(i32 %100, i1 true), !dbg !30
  %109 = tail call i32 @llvm.abs.i32(i32 %101, i1 true), !dbg !30
  %110 = tail call i32 @llvm.abs.i32(i32 %102, i1 true), !dbg !30
  %111 = tail call i32 @llvm.abs.i32(i32 %103, i1 true), !dbg !30
  %112 = tail call i32 @llvm.abs.i32(i32 %104, i1 true), !dbg !30
  %113 = sub nuw nsw i32 31, %105, !dbg !31
  %114 = sub nuw nsw i32 31, %106, !dbg !31
  %115 = sub nuw nsw i32 31, %107, !dbg !31
  %116 = sub nuw nsw i32 31, %108, !dbg !31
  %117 = sub nuw nsw i32 31, %109, !dbg !31
  %118 = sub nuw nsw i32 31, %110, !dbg !31
  %119 = sub nuw nsw i32 31, %111, !dbg !31
  %120 = sub nuw nsw i32 31, %112, !dbg !31
  %121 = zext nneg i32 %113 to i64, !dbg !32
  %122 = getelementptr i64, ptr addrspace(1) %0, i64 %121, !dbg !32
  %123 = zext nneg i32 %114 to i64, !dbg !32
  %124 = getelementptr i64, ptr addrspace(1) %0, i64 %123, !dbg !32
  %125 = zext nneg i32 %115 to i64, !dbg !32
  %126 = getelementptr i64, ptr addrspace(1) %0, i64 %125, !dbg !32
  %127 = zext nneg i32 %116 to i64, !dbg !32
  %128 = getelementptr i64, ptr addrspace(1) %0, i64 %127, !dbg !32
  %129 = zext nneg i32 %117 to i64, !dbg !32
  %130 = getelementptr i64, ptr addrspace(1) %0, i64 %129, !dbg !32
  %131 = zext nneg i32 %118 to i64, !dbg !32
  %132 = getelementptr i64, ptr addrspace(1) %0, i64 %131, !dbg !32
  %133 = zext nneg i32 %119 to i64, !dbg !32
  %134 = getelementptr i64, ptr addrspace(1) %0, i64 %133, !dbg !32
  %135 = zext nneg i32 %120 to i64, !dbg !32
  %136 = getelementptr i64, ptr addrspace(1) %0, i64 %135, !dbg !32
  %137 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %122, i1 %23) #3, !dbg !33
  %138 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %124, i1 %23) #3, !dbg !33
  %139 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %126, i1 %23) #3, !dbg !33
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %128, i1 %23) #3, !dbg !33
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %130, i1 %24) #3, !dbg !33
  %142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %132, i1 %24) #3, !dbg !33
  %143 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %134, i1 %24) #3, !dbg !33
  %144 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %136, i1 %24) #3, !dbg !33
  %145 = sext i32 %41 to i64, !dbg !34
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !34
  %147 = sext i32 %42 to i64, !dbg !34
  %148 = getelementptr float, ptr addrspace(1) %2, i64 %147, !dbg !34
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %23) #3, !dbg !35
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %23) #3, !dbg !35
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %23) #3, !dbg !35
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %23) #3, !dbg !35
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %24) #3, !dbg !35
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %24) #3, !dbg !35
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %24) #3, !dbg !35
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %24) #3, !dbg !35
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !36
  %158 = getelementptr float, ptr addrspace(1) %3, i64 %147, !dbg !36
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %23) #3, !dbg !37
  %160 = bitcast i32 %159 to float, !dbg !37
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %23) #3, !dbg !37
  %162 = bitcast i32 %161 to float, !dbg !37
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %23) #3, !dbg !37
  %164 = bitcast i32 %163 to float, !dbg !37
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %23) #3, !dbg !37
  %166 = bitcast i32 %165 to float, !dbg !37
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %24) #3, !dbg !37
  %168 = bitcast i32 %167 to float, !dbg !37
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %24) #3, !dbg !37
  %170 = bitcast i32 %169 to float, !dbg !37
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %24) #3, !dbg !37
  %172 = bitcast i32 %171 to float, !dbg !37
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %24) #3, !dbg !37
  %174 = bitcast i32 %173 to float, !dbg !37
  %175 = getelementptr float, ptr addrspace(1) %4, i64 %145, !dbg !38
  %176 = getelementptr float, ptr addrspace(1) %4, i64 %147, !dbg !38
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %23) #3, !dbg !39
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %23) #3, !dbg !39
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %23) #3, !dbg !39
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %23) #3, !dbg !39
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %24) #3, !dbg !39
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %24) #3, !dbg !39
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %24) #3, !dbg !39
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %24) #3, !dbg !39
  %185 = sext i32 %43 to i64, !dbg !40
  %186 = getelementptr float, ptr addrspace(1) %5, i64 %185, !dbg !40
  %187 = sext i32 %44 to i64, !dbg !40
  %188 = getelementptr float, ptr addrspace(1) %5, i64 %187, !dbg !40
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %23) #3, !dbg !41
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %23) #3, !dbg !41
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %23) #3, !dbg !41
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %23) #3, !dbg !41
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %24) #3, !dbg !41
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %24) #3, !dbg !41
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %24) #3, !dbg !41
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %24) #3, !dbg !41
  %197 = lshr i64 %73, 59, !dbg !42
  %198 = and i64 %197, 16, !dbg !42
  %199 = add i64 %198, %73, !dbg !42
  %200 = lshr i64 %74, 59, !dbg !42
  %201 = and i64 %200, 16, !dbg !42
  %202 = add i64 %201, %74, !dbg !42
  %203 = lshr i64 %75, 59, !dbg !42
  %204 = and i64 %203, 16, !dbg !42
  %205 = add i64 %204, %75, !dbg !42
  %206 = lshr i64 %76, 59, !dbg !42
  %207 = and i64 %206, 16, !dbg !42
  %208 = add i64 %207, %76, !dbg !42
  %209 = lshr i64 %77, 59, !dbg !42
  %210 = and i64 %209, 16, !dbg !42
  %211 = add i64 %210, %77, !dbg !42
  %212 = lshr i64 %78, 59, !dbg !42
  %213 = and i64 %212, 16, !dbg !42
  %214 = add i64 %213, %78, !dbg !42
  %215 = lshr i64 %79, 59, !dbg !42
  %216 = and i64 %215, 16, !dbg !42
  %217 = add i64 %216, %79, !dbg !42
  %218 = lshr i64 %80, 59, !dbg !42
  %219 = and i64 %218, 16, !dbg !42
  %220 = add i64 %219, %80, !dbg !42
  %221 = lshr i64 %137, 59, !dbg !43
  %222 = and i64 %221, 16, !dbg !43
  %223 = lshr i64 %138, 59, !dbg !43
  %224 = and i64 %223, 16, !dbg !43
  %225 = lshr i64 %139, 59, !dbg !43
  %226 = and i64 %225, 16, !dbg !43
  %227 = lshr i64 %140, 59, !dbg !43
  %228 = and i64 %227, 16, !dbg !43
  %229 = lshr i64 %141, 59, !dbg !43
  %230 = and i64 %229, 16, !dbg !43
  %231 = lshr i64 %142, 59, !dbg !43
  %232 = and i64 %231, 16, !dbg !43
  %233 = lshr i64 %143, 59, !dbg !43
  %234 = and i64 %233, 16, !dbg !43
  %235 = lshr i64 %144, 59, !dbg !43
  %236 = and i64 %235, 16, !dbg !43
  %237 = shl i64 %199, 4, !dbg !44
  %238 = shl i64 %202, 4, !dbg !44
  %239 = shl i64 %205, 4, !dbg !44
  %240 = shl i64 %208, 4, !dbg !44
  %241 = shl i64 %211, 4, !dbg !44
  %242 = shl i64 %214, 4, !dbg !44
  %243 = shl i64 %217, 4, !dbg !44
  %244 = shl i64 %220, 4, !dbg !44
  %245 = shl nsw i32 %41, 8, !dbg !45
  %246 = shl nsw i32 %42, 8, !dbg !45
  %247 = sext i32 %245 to i64, !dbg !46
  %248 = sext i32 %246 to i64, !dbg !46
  %249 = add i64 %237, %247, !dbg !43
  %250 = add i64 %249, %137, !dbg !47
  %251 = add i64 %250, %222, !dbg !46
  %252 = add i64 %238, %247, !dbg !43
  %253 = add i64 %252, %138, !dbg !47
  %254 = add i64 %253, %224, !dbg !46
  %255 = add i64 %239, %247, !dbg !43
  %256 = add i64 %255, %139, !dbg !47
  %257 = add i64 %256, %226, !dbg !46
  %258 = add i64 %240, %247, !dbg !43
  %259 = add i64 %258, %140, !dbg !47
  %260 = add i64 %259, %228, !dbg !46
  %261 = add i64 %241, %248, !dbg !43
  %262 = add i64 %261, %141, !dbg !47
  %263 = add i64 %262, %230, !dbg !46
  %264 = add i64 %242, %248, !dbg !43
  %265 = add i64 %264, %142, !dbg !47
  %266 = add i64 %265, %232, !dbg !46
  %267 = add i64 %243, %248, !dbg !43
  %268 = add i64 %267, %143, !dbg !47
  %269 = add i64 %268, %234, !dbg !46
  %270 = add i64 %244, %248, !dbg !43
  %271 = add i64 %270, %144, !dbg !47
  %272 = add i64 %271, %236, !dbg !46
  %273 = getelementptr float, ptr addrspace(1) %1, i64 %251, !dbg !48
  %274 = getelementptr float, ptr addrspace(1) %1, i64 %254, !dbg !48
  %275 = getelementptr float, ptr addrspace(1) %1, i64 %257, !dbg !48
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %260, !dbg !48
  %277 = getelementptr float, ptr addrspace(1) %1, i64 %263, !dbg !48
  %278 = getelementptr float, ptr addrspace(1) %1, i64 %266, !dbg !48
  %279 = getelementptr float, ptr addrspace(1) %1, i64 %269, !dbg !48
  %280 = getelementptr float, ptr addrspace(1) %1, i64 %272, !dbg !48
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %23) #3, !dbg !49
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 %23) #3, !dbg !49
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %23) #3, !dbg !49
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 %23) #3, !dbg !49
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %24) #3, !dbg !49
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %24) #3, !dbg !49
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 %24) #3, !dbg !49
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 %24) #3, !dbg !49
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float 2.560000e+02) #3, !dbg !50
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 2.560000e+02) #3, !dbg !50
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 2.560000e+02) #3, !dbg !50
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float 2.560000e+02) #3, !dbg !50
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float 2.560000e+02) #3, !dbg !50
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float 2.560000e+02) #3, !dbg !50
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float 2.560000e+02) #3, !dbg !50
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float 2.560000e+02) #3, !dbg !50
  %297 = fadd float %289, 0x3EE4F8B580000000, !dbg !51
  %298 = fadd float %290, 0x3EE4F8B580000000, !dbg !51
  %299 = fadd float %291, 0x3EE4F8B580000000, !dbg !51
  %300 = fadd float %292, 0x3EE4F8B580000000, !dbg !51
  %301 = fadd float %293, 0x3EE4F8B580000000, !dbg !51
  %302 = fadd float %294, 0x3EE4F8B580000000, !dbg !51
  %303 = fadd float %295, 0x3EE4F8B580000000, !dbg !51
  %304 = fadd float %296, 0x3EE4F8B580000000, !dbg !51
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i = icmp eq i32 %305, 0, !dbg !52
  br i1 %.not.i, label %308, label %306, !dbg !52

306:                                              ; preds = %9
  %307 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %297), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

308:                                              ; preds = %9
  %309 = tail call float @llvm.nvvm.rsqrt.approx.f(float %297), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

__nv_rsqrtf.exit:                                 ; preds = %306, %308
  %.0.i = phi float [ %307, %306 ], [ %309, %308 ], !dbg !52
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i1 = icmp eq i32 %310, 0, !dbg !52
  br i1 %.not.i1, label %313, label %311, !dbg !52

311:                                              ; preds = %__nv_rsqrtf.exit
  %312 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %298), !dbg !52
  br label %__nv_rsqrtf.exit3, !dbg !52

313:                                              ; preds = %__nv_rsqrtf.exit
  %314 = tail call float @llvm.nvvm.rsqrt.approx.f(float %298), !dbg !52
  br label %__nv_rsqrtf.exit3, !dbg !52

__nv_rsqrtf.exit3:                                ; preds = %311, %313
  %.0.i2 = phi float [ %312, %311 ], [ %314, %313 ], !dbg !52
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i4 = icmp eq i32 %315, 0, !dbg !52
  br i1 %.not.i4, label %318, label %316, !dbg !52

316:                                              ; preds = %__nv_rsqrtf.exit3
  %317 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %299), !dbg !52
  br label %__nv_rsqrtf.exit6, !dbg !52

318:                                              ; preds = %__nv_rsqrtf.exit3
  %319 = tail call float @llvm.nvvm.rsqrt.approx.f(float %299), !dbg !52
  br label %__nv_rsqrtf.exit6, !dbg !52

__nv_rsqrtf.exit6:                                ; preds = %316, %318
  %.0.i5 = phi float [ %317, %316 ], [ %319, %318 ], !dbg !52
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i7 = icmp eq i32 %320, 0, !dbg !52
  br i1 %.not.i7, label %323, label %321, !dbg !52

321:                                              ; preds = %__nv_rsqrtf.exit6
  %322 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %300), !dbg !52
  br label %__nv_rsqrtf.exit9, !dbg !52

323:                                              ; preds = %__nv_rsqrtf.exit6
  %324 = tail call float @llvm.nvvm.rsqrt.approx.f(float %300), !dbg !52
  br label %__nv_rsqrtf.exit9, !dbg !52

__nv_rsqrtf.exit9:                                ; preds = %321, %323
  %.0.i8 = phi float [ %322, %321 ], [ %324, %323 ], !dbg !52
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i10 = icmp eq i32 %325, 0, !dbg !52
  br i1 %.not.i10, label %328, label %326, !dbg !52

326:                                              ; preds = %__nv_rsqrtf.exit9
  %327 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %301), !dbg !52
  br label %__nv_rsqrtf.exit12, !dbg !52

328:                                              ; preds = %__nv_rsqrtf.exit9
  %329 = tail call float @llvm.nvvm.rsqrt.approx.f(float %301), !dbg !52
  br label %__nv_rsqrtf.exit12, !dbg !52

__nv_rsqrtf.exit12:                               ; preds = %326, %328
  %.0.i11 = phi float [ %327, %326 ], [ %329, %328 ], !dbg !52
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i13 = icmp eq i32 %330, 0, !dbg !52
  br i1 %.not.i13, label %333, label %331, !dbg !52

331:                                              ; preds = %__nv_rsqrtf.exit12
  %332 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %302), !dbg !52
  br label %__nv_rsqrtf.exit15, !dbg !52

333:                                              ; preds = %__nv_rsqrtf.exit12
  %334 = tail call float @llvm.nvvm.rsqrt.approx.f(float %302), !dbg !52
  br label %__nv_rsqrtf.exit15, !dbg !52

__nv_rsqrtf.exit15:                               ; preds = %331, %333
  %.0.i14 = phi float [ %332, %331 ], [ %334, %333 ], !dbg !52
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i16 = icmp eq i32 %335, 0, !dbg !52
  br i1 %.not.i16, label %338, label %336, !dbg !52

336:                                              ; preds = %__nv_rsqrtf.exit15
  %337 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %303), !dbg !52
  br label %__nv_rsqrtf.exit18, !dbg !52

338:                                              ; preds = %__nv_rsqrtf.exit15
  %339 = tail call float @llvm.nvvm.rsqrt.approx.f(float %303), !dbg !52
  br label %__nv_rsqrtf.exit18, !dbg !52

__nv_rsqrtf.exit18:                               ; preds = %336, %338
  %.0.i17 = phi float [ %337, %336 ], [ %339, %338 ], !dbg !52
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i19 = icmp eq i32 %340, 0, !dbg !52
  br i1 %.not.i19, label %343, label %341, !dbg !52

341:                                              ; preds = %__nv_rsqrtf.exit18
  %342 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %304), !dbg !52
  br label %__nv_rsqrtf.exit21, !dbg !52

343:                                              ; preds = %__nv_rsqrtf.exit18
  %344 = tail call float @llvm.nvvm.rsqrt.approx.f(float %304), !dbg !52
  br label %__nv_rsqrtf.exit21, !dbg !52

__nv_rsqrtf.exit21:                               ; preds = %341, %343
  %.0.i20 = phi float [ %342, %341 ], [ %344, %343 ], !dbg !52
  %345 = bitcast i32 %288 to float, !dbg !49
  %346 = bitcast i32 %156 to float, !dbg !35
  %347 = fsub float %345, %346, !dbg !53
  %348 = bitcast i32 %287 to float, !dbg !49
  %349 = bitcast i32 %155 to float, !dbg !35
  %350 = fsub float %348, %349, !dbg !53
  %351 = bitcast i32 %286 to float, !dbg !49
  %352 = bitcast i32 %154 to float, !dbg !35
  %353 = fsub float %351, %352, !dbg !53
  %354 = bitcast i32 %285 to float, !dbg !49
  %355 = bitcast i32 %153 to float, !dbg !35
  %356 = fsub float %354, %355, !dbg !53
  %357 = bitcast i32 %284 to float, !dbg !49
  %358 = bitcast i32 %152 to float, !dbg !35
  %359 = fsub float %357, %358, !dbg !53
  %360 = bitcast i32 %283 to float, !dbg !49
  %361 = bitcast i32 %151 to float, !dbg !35
  %362 = fsub float %360, %361, !dbg !53
  %363 = bitcast i32 %282 to float, !dbg !49
  %364 = bitcast i32 %150 to float, !dbg !35
  %365 = fsub float %363, %364, !dbg !53
  %366 = bitcast i32 %281 to float, !dbg !49
  %367 = bitcast i32 %149 to float, !dbg !35
  %368 = fsub float %366, %367, !dbg !53
  %369 = bitcast i32 %196 to float, !dbg !41
  %370 = bitcast i32 %195 to float, !dbg !41
  %371 = bitcast i32 %194 to float, !dbg !41
  %372 = bitcast i32 %193 to float, !dbg !41
  %373 = bitcast i32 %192 to float, !dbg !41
  %374 = bitcast i32 %191 to float, !dbg !41
  %375 = bitcast i32 %190 to float, !dbg !41
  %376 = bitcast i32 %189 to float, !dbg !41
  %377 = bitcast i32 %184 to float, !dbg !39
  %378 = bitcast i32 %183 to float, !dbg !39
  %379 = bitcast i32 %182 to float, !dbg !39
  %380 = bitcast i32 %181 to float, !dbg !39
  %381 = bitcast i32 %180 to float, !dbg !39
  %382 = bitcast i32 %179 to float, !dbg !39
  %383 = bitcast i32 %178 to float, !dbg !39
  %384 = bitcast i32 %177 to float, !dbg !39
  %385 = fmul float %368, %.0.i, !dbg !54
  %386 = fmul float %365, %.0.i2, !dbg !54
  %387 = fmul float %362, %.0.i5, !dbg !54
  %388 = fmul float %359, %.0.i8, !dbg !54
  %389 = fmul float %356, %.0.i11, !dbg !54
  %390 = fmul float %353, %.0.i14, !dbg !54
  %391 = fmul float %350, %.0.i17, !dbg !54
  %392 = fmul float %347, %.0.i20, !dbg !54
  %393 = fmul float %385, %384, !dbg !55
  %394 = fmul float %386, %383, !dbg !55
  %395 = fmul float %387, %382, !dbg !55
  %396 = fmul float %388, %381, !dbg !55
  %397 = fmul float %389, %380, !dbg !55
  %398 = fmul float %390, %379, !dbg !55
  %399 = fmul float %391, %378, !dbg !55
  %400 = fmul float %392, %377, !dbg !55
  %401 = fadd float %393, %376, !dbg !56
  %402 = fadd float %394, %375, !dbg !56
  %403 = fadd float %395, %374, !dbg !56
  %404 = fadd float %396, %373, !dbg !56
  %405 = fadd float %397, %372, !dbg !56
  %406 = fadd float %398, %371, !dbg !56
  %407 = fadd float %399, %370, !dbg !56
  %408 = fadd float %400, %369, !dbg !56
  %409 = getelementptr float, ptr addrspace(1) %6, i64 %251, !dbg !57
  %410 = getelementptr float, ptr addrspace(1) %6, i64 %254, !dbg !57
  %411 = getelementptr float, ptr addrspace(1) %6, i64 %257, !dbg !57
  %412 = getelementptr float, ptr addrspace(1) %6, i64 %260, !dbg !57
  %413 = getelementptr float, ptr addrspace(1) %6, i64 %263, !dbg !57
  %414 = getelementptr float, ptr addrspace(1) %6, i64 %266, !dbg !57
  %415 = getelementptr float, ptr addrspace(1) %6, i64 %269, !dbg !57
  %416 = getelementptr float, ptr addrspace(1) %6, i64 %272, !dbg !57
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %409, i1 %23) #3, !dbg !58
  %418 = bitcast i32 %417 to float, !dbg !58
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %410, i1 %23) #3, !dbg !58
  %420 = bitcast i32 %419 to float, !dbg !58
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %411, i1 %23) #3, !dbg !58
  %422 = bitcast i32 %421 to float, !dbg !58
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %412, i1 %23) #3, !dbg !58
  %424 = bitcast i32 %423 to float, !dbg !58
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 %24) #3, !dbg !58
  %426 = bitcast i32 %425 to float, !dbg !58
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %414, i1 %24) #3, !dbg !58
  %428 = bitcast i32 %427 to float, !dbg !58
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %415, i1 %24) #3, !dbg !58
  %430 = bitcast i32 %429 to float, !dbg !58
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %416, i1 %24) #3, !dbg !58
  %432 = bitcast i32 %431 to float, !dbg !58
  %433 = fadd float %401, %418, !dbg !59
  %434 = fadd float %402, %420, !dbg !59
  %435 = fadd float %403, %422, !dbg !59
  %436 = fadd float %404, %424, !dbg !59
  %437 = fadd float %405, %426, !dbg !59
  %438 = fadd float %406, %428, !dbg !59
  %439 = fadd float %407, %430, !dbg !59
  %440 = fadd float %408, %432, !dbg !59
  %441 = sext i32 %15 to i64, !dbg !60
  %442 = getelementptr float, ptr addrspace(1) %7, i64 %441, !dbg !60
  %443 = sext i32 %19 to i64, !dbg !60
  %444 = getelementptr float, ptr addrspace(1) %7, i64 %443, !dbg !60
  %445 = bitcast float %433 to i32, !dbg !61
  %446 = bitcast float %434 to i32, !dbg !61
  %447 = bitcast float %435 to i32, !dbg !61
  %448 = bitcast float %436 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %445, i32 %446, i32 %447, i32 %448, ptr addrspace(1) %442, i1 %23) #3, !dbg !61
  %449 = bitcast float %437 to i32, !dbg !61
  %450 = bitcast float %438 to i32, !dbg !61
  %451 = bitcast float %439 to i32, !dbg !61
  %452 = bitcast float %440 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %449, i32 %450, i32 %451, i32 %452, ptr addrspace(1) %444, i1 %24) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpfjgn3jyxqshumf3pxqomp52ydcaa5fntse3igv6djthaoeiv47.py", directory: "inductor_cache/pf")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_reflection_pad2d_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_reflection_pad2d_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_reflection_pad2d_16", linkageName: "triton_poi_fused__unsafe_index_add_reflection_pad2d_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 29, scope: !7)
!20 = !DILocation(line: 29, column: 80, scope: !7)
!21 = !DILocation(line: 29, column: 73, scope: !7)
!22 = !DILocation(line: 29, column: 61, scope: !7)
!23 = !DILocation(line: 29, column: 53, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 88, scope: !7)
!27 = !DILocation(line: 30, column: 80, scope: !7)
!28 = !DILocation(line: 30, column: 73, scope: !7)
!29 = !DILocation(line: 30, column: 61, scope: !7)
!30 = !DILocation(line: 30, column: 53, scope: !7)
!31 = !DILocation(line: 30, column: 36, scope: !7)
!32 = !DILocation(line: 30, column: 30, scope: !7)
!33 = !DILocation(line: 30, column: 88, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 36, scope: !7)
!36 = !DILocation(line: 32, column: 31, scope: !7)
!37 = !DILocation(line: 32, column: 36, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 36, scope: !7)
!42 = !DILocation(line: 38, column: 32, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 42, column: 40, scope: !7)
!45 = !DILocation(line: 42, column: 51, scope: !7)
!46 = !DILocation(line: 42, column: 47, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 42, column: 30, scope: !7)
!49 = !DILocation(line: 42, column: 56, scope: !7)
!50 = !DILocation(line: 45, column: 20, scope: !7)
!51 = !DILocation(line: 47, column: 20, scope: !7)
!52 = !DILocation(line: 48, column: 28, scope: !7)
!53 = !DILocation(line: 43, column: 19, scope: !7)
!54 = !DILocation(line: 49, column: 20, scope: !7)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 52, column: 31, scope: !7)
!58 = !DILocation(line: 52, column: 57, scope: !7)
!59 = !DILocation(line: 53, column: 20, scope: !7)
!60 = !DILocation(line: 54, column: 25, scope: !7)
!61 = !DILocation(line: 54, column: 37, scope: !7)
!62 = !DILocation(line: 54, column: 4, scope: !7)
