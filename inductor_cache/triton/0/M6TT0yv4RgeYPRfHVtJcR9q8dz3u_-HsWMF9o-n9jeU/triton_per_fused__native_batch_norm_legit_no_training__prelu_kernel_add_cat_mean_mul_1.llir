; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_cat_mean_mul_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %16 = icmp slt i32 %15, 16, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = and i32 %17, 15, !dbg !12
  %.frozen = freeze i32 %15, !dbg !13
  %19 = sdiv i32 %.frozen, 4, !dbg !13
  %20 = mul i32 %19, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %20, !dbg !14
  %21 = sext i32 %.decomposed to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !15
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #5, !dbg !16
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %16) #5, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !17
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %16) #5, !dbg !18
  %27 = bitcast i32 %26 to float, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %16) #5, !dbg !18
  %29 = bitcast i32 %28 to float, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #5, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #5, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #5, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #5, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #5, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #5, !dbg !24
  %39 = sext i32 %15 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %8, i64 %39, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %16) #5, !dbg !26
  %42 = shl i32 %15, 4, !dbg !27
  %43 = or disjoint i32 %42, %18, !dbg !28
  %44 = sext i32 %43 to i64, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %9, i64 %44, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %16, i32 0, i1 %16) #5, !dbg !30
  %47 = icmp slt i32 %.decomposed, 2, !dbg !31
  %48 = shl nsw i32 %.decomposed, 4, !dbg !32
  %49 = or disjoint i32 %48, %18, !dbg !33
  %50 = shl i32 %19, 5, !dbg !34
  %51 = add i32 %49, %50, !dbg !35
  %52 = sext i32 %51 to i64, !dbg !36
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !36
  %54 = and i1 %16, %47, !dbg !37
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %54, i32 0, i1 %54) #5, !dbg !38
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %54, i32 0, i1 %54) #5, !dbg !38
  %57 = icmp sgt i32 %.decomposed, 1, !dbg !39
  %58 = or disjoint i32 %18, -32, !dbg !40
  %59 = add nsw i32 %58, %48, !dbg !41
  %60 = add i32 %59, %50, !dbg !42
  %61 = sext i32 %60 to i64, !dbg !43
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !43
  %63 = and i1 %16, %57, !dbg !44
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63) #5, !dbg !45
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63) #5, !dbg !45
  %66 = fadd float %27, 0x3EE4F8B580000000, !dbg !46
  %67 = fadd float %29, 0x3EE4F8B580000000, !dbg !46
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %68, 0, !dbg !47
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !47
  %.not1.i = icmp eq i32 %69, 0, !dbg !47
  br i1 %.not.i, label %75, label %70, !dbg !47

70:                                               ; preds = %14
  br i1 %.not1.i, label %73, label %71, !dbg !47

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

75:                                               ; preds = %14
  br i1 %.not1.i, label %78, label %76, !dbg !47

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #5, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !47
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i2 = icmp eq i32 %80, 0, !dbg !47
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !47
  %.not1.i5 = icmp eq i32 %81, 0, !dbg !47
  br i1 %.not.i2, label %87, label %82, !dbg !47

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %85, label %83, !dbg !47

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #5, !dbg !47
  br label %__nv_sqrtf.exit6, !dbg !47

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #5, !dbg !47
  br label %__nv_sqrtf.exit6, !dbg !47

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %90, label %88, !dbg !47

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #5, !dbg !47
  br label %__nv_sqrtf.exit6, !dbg !47

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #5, !dbg !47
  br label %__nv_sqrtf.exit6, !dbg !47

__nv_sqrtf.exit6:                                 ; preds = %83, %85, %88, %90
  %.0.i4 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !47
  %.v1 = select i1 %47, i32 %56, i32 %65, !dbg !48
  %92 = bitcast i32 %.v1 to float, !dbg !48
  %93 = bitcast i32 %24 to float, !dbg !16
  %94 = fsub float %92, %93, !dbg !49
  %.v = select i1 %47, i32 %55, i32 %64, !dbg !48
  %95 = bitcast i32 %.v to float, !dbg !48
  %96 = bitcast i32 %23 to float, !dbg !16
  %97 = fsub float %95, %96, !dbg !49
  %98 = bitcast i32 %46 to float, !dbg !30
  %99 = bitcast i32 %41 to float, !dbg !26
  %100 = bitcast i32 %38 to float, !dbg !24
  %101 = bitcast i32 %37 to float, !dbg !24
  %102 = bitcast i32 %35 to float, !dbg !22
  %103 = bitcast i32 %34 to float, !dbg !22
  %104 = bitcast i32 %32 to float, !dbg !20
  %105 = bitcast i32 %31 to float, !dbg !20
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !50
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #5, !dbg !50
  %108 = fmul float %97, %106, !dbg !51
  %109 = fmul float %94, %107, !dbg !51
  %110 = fmul float %108, %105, !dbg !52
  %111 = fmul float %109, %104, !dbg !52
  %112 = fadd float %110, %103, !dbg !53
  %113 = fadd float %111, %102, !dbg !53
  %114 = fcmp ogt float %112, 0.000000e+00, !dbg !54
  %115 = fcmp ogt float %113, 0.000000e+00, !dbg !54
  %116 = fmul float %112, %101, !dbg !55
  %117 = fmul float %113, %100, !dbg !55
  %118 = select i1 %114, float %112, float %116, !dbg !56
  %119 = select i1 %115, float %113, float %117, !dbg !56
  %120 = fsub float 0.000000e+00, %99, !dbg !57
  %121 = fmul float %120, 0x3FF7154760000000, !dbg !61
  %122 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %121) #5, !dbg !61
  %123 = fadd float %122, 1.000000e+00, !dbg !62
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %123) #5, !dbg !63
  %125 = fmul float %124, %119, !dbg !64
  %126 = fadd float %125, %98, !dbg !65
  %127 = select i1 %16, float %118, float 0.000000e+00, !dbg !66
  %128 = bitcast float %127 to i32, !dbg !67
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 8, i32 31), !dbg !67
  %130 = bitcast i32 %129 to float, !dbg !67
  %131 = fadd float %127, %130, !dbg !69
  %132 = bitcast float %131 to i32, !dbg !67
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !67
  %134 = bitcast i32 %133 to float, !dbg !67
  %135 = fadd float %131, %134, !dbg !69
  %136 = bitcast float %135 to i32, !dbg !67
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !67
  %138 = bitcast i32 %137 to float, !dbg !67
  %139 = fadd float %135, %138, !dbg !69
  %140 = bitcast float %139 to i32, !dbg !67
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !67
  %142 = bitcast i32 %141 to float, !dbg !67
  %143 = fadd float %139, %142, !dbg !69
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float 1.600000e+01) #5, !dbg !71
  %145 = getelementptr float, ptr addrspace(1) %10, i64 %44, !dbg !72
  %146 = and i32 %17, 48, !dbg !73
  %147 = icmp eq i32 %146, 0, !dbg !73
  %148 = and i1 %147, %16, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v1, ptr addrspace(1) %145, i1 %148) #5, !dbg !73
  %149 = getelementptr float, ptr addrspace(1) %11, i64 %44, !dbg !74
  %150 = bitcast float %126 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %149, i1 %148) #5, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !77
  %urem = and i32 %17, 63, !dbg !78
  %152 = icmp eq i32 %urem, 0, !dbg !78
  %153 = bitcast float %144 to i32, !dbg !78
  %154 = and i1 %152, %16, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %151, i1 %154) #5, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvjrq4j6zeua22obkmiuphzaro2zbs4artbxoqfb7q2r2bz4b3h4.py", directory: "inductor_cache/vj")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_cat_mean_mul_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_cat_mean_mul_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_cat_mean_mul_1", linkageName: "triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_cat_mean_mul_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 29, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 31, scope: !7)
!16 = !DILocation(line: 33, column: 36, scope: !7)
!17 = !DILocation(line: 34, column: 31, scope: !7)
!18 = !DILocation(line: 34, column: 36, scope: !7)
!19 = !DILocation(line: 35, column: 31, scope: !7)
!20 = !DILocation(line: 35, column: 36, scope: !7)
!21 = !DILocation(line: 36, column: 31, scope: !7)
!22 = !DILocation(line: 36, column: 36, scope: !7)
!23 = !DILocation(line: 37, column: 31, scope: !7)
!24 = !DILocation(line: 37, column: 36, scope: !7)
!25 = !DILocation(line: 38, column: 31, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 39, column: 39, scope: !7)
!28 = !DILocation(line: 39, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 31, scope: !7)
!30 = !DILocation(line: 39, column: 44, scope: !7)
!31 = !DILocation(line: 44, column: 18, scope: !7)
!32 = !DILocation(line: 45, column: 39, scope: !7)
!33 = !DILocation(line: 45, column: 35, scope: !7)
!34 = !DILocation(line: 45, column: 48, scope: !7)
!35 = !DILocation(line: 45, column: 45, scope: !7)
!36 = !DILocation(line: 45, column: 30, scope: !7)
!37 = !DILocation(line: 45, column: 60, scope: !7)
!38 = !DILocation(line: 45, column: 53, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 49, column: 35, scope: !7)
!41 = !DILocation(line: 49, column: 39, scope: !7)
!42 = !DILocation(line: 49, column: 52, scope: !7)
!43 = !DILocation(line: 49, column: 30, scope: !7)
!44 = !DILocation(line: 49, column: 67, scope: !7)
!45 = !DILocation(line: 49, column: 60, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 27, scope: !7)
!48 = !DILocation(line: 50, column: 33, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 65, column: 35, scope: !7)
!57 = !DILocation(line: 47, column: 30, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!60 = !DILocation(line: 66, column: 23, scope: !7)
!61 = !DILocation(line: 47, column: 29, scope: !58, inlinedAt: !60)
!62 = !DILocation(line: 47, column: 20, scope: !58, inlinedAt: !60)
!63 = !DILocation(line: 47, column: 16, scope: !58, inlinedAt: !60)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 70, column: 35, scope: !7)
!67 = !DILocation(line: 267, column: 36, scope: !58, inlinedAt: !68)
!68 = !DILocation(line: 71, column: 26, scope: !7)
!69 = !DILocation(line: 256, column: 15, scope: !70, inlinedAt: !68)
!70 = distinct !DILexicalBlockFile(scope: !58, file: !59, discriminator: 0)
!71 = !DILocation(line: 73, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 25, scope: !7)
!73 = !DILocation(line: 74, column: 45, scope: !7)
!74 = !DILocation(line: 75, column: 25, scope: !7)
!75 = !DILocation(line: 75, column: 45, scope: !7)
!76 = !DILocation(line: 76, column: 4, scope: !7)
!77 = !DILocation(line: 77, column: 28, scope: !7)
!78 = !DILocation(line: 77, column: 40, scope: !7)
!79 = !DILocation(line: 77, column: 4, scope: !7)
