; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %13 = insertelement <2 x i32> %12, i32 %6, i64 1, !dbg !15
  %14 = ashr exact <2 x i32> %13, splat (i32 1), !dbg !15
  %15 = or disjoint <2 x i32> %13, <i32 poison, i32 1>, !dbg !15
  %16 = shufflevector <2 x i32> %14, <2 x i32> %15, <2 x i32> <i32 0, i32 3>, !dbg !15
  %17 = srem <2 x i32> %16, splat (i32 2), !dbg !16
  %18 = sdiv i32 %10, 4, !dbg !17
  %19 = extractelement <2 x i32> %17, i64 0, !dbg !18
  %20 = shl nsw i32 %19, 2, !dbg !19
  %21 = icmp sgt i32 %19, -1, !dbg !20
  %22 = extractelement <2 x i32> %17, i64 1, !dbg !18
  %23 = shl nsw i32 %22, 2, !dbg !21
  %24 = icmp sgt i32 %22, -1, !dbg !22
  %25 = or i32 %19, %22, !dbg !18
  %26 = icmp sgt i32 %25, -1, !dbg !18
  %27 = mul nsw i32 %19, 20, !dbg !23
  %28 = mul i32 %18, 25, !dbg !24
  %29 = add i32 %27, %28, !dbg !25
  %30 = add i32 %29, %23, !dbg !25
  %31 = sext i32 %29 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !26
  %33 = sext i32 %30 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = and i1 %11, %21, !dbg !27
  %36 = and i1 %11, %26, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %35, i32 -8388608, i1 %35) #1, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %36, i32 -8388608, i1 %36) #1, !dbg !28
  %39 = or disjoint i32 %23, 1, !dbg !29
  %40 = icmp slt i32 %39, 5, !dbg !30
  %41 = and i1 %24, %40, !dbg !31
  %42 = and i1 %21, %41, !dbg !32
  %43 = add i32 %29, 1, !dbg !33
  %44 = add i32 %29, %39, !dbg !33
  %45 = sext i32 %43 to i64, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !34
  %47 = sext i32 %44 to i64, !dbg !34
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !34
  %49 = and i1 %11, %42, !dbg !35
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %35, i32 -8388608, i1 %35) #1, !dbg !36
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %49, i32 -8388608, i1 %49) #1, !dbg !36
  %52 = or disjoint i32 %23, 2, !dbg !37
  %53 = icmp slt i32 %52, 5, !dbg !38
  %54 = and i1 %24, %53, !dbg !39
  %55 = and i1 %21, %54, !dbg !40
  %56 = add i32 %29, 2, !dbg !41
  %57 = add i32 %29, %52, !dbg !41
  %58 = sext i32 %56 to i64, !dbg !42
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !42
  %60 = sext i32 %57 to i64, !dbg !42
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !42
  %62 = and i1 %11, %55, !dbg !43
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %35, i32 -8388608, i1 %35) #1, !dbg !44
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %62, i32 -8388608, i1 %62) #1, !dbg !44
  %65 = or disjoint i32 %23, 3, !dbg !45
  %66 = icmp slt i32 %65, 5, !dbg !46
  %67 = and i1 %24, %66, !dbg !47
  %68 = and i1 %21, %67, !dbg !48
  %69 = add i32 %29, 3, !dbg !49
  %70 = add i32 %29, %65, !dbg !49
  %71 = sext i32 %69 to i64, !dbg !50
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !50
  %73 = sext i32 %70 to i64, !dbg !50
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !50
  %75 = and i1 %11, %68, !dbg !51
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %35, i32 -8388608, i1 %35) #1, !dbg !52
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 -8388608, i1 %75) #1, !dbg !52
  %78 = or disjoint i32 %20, 1, !dbg !53
  %79 = icmp slt i32 %78, 5, !dbg !54
  %80 = and i1 %21, %79, !dbg !55
  %81 = and i1 %24, %80, !dbg !56
  %82 = add i32 %29, 5, !dbg !57
  %83 = add i32 %82, %23, !dbg !57
  %84 = sext i32 %82 to i64, !dbg !58
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !58
  %86 = sext i32 %83 to i64, !dbg !58
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !58
  %88 = and i1 %11, %80, !dbg !59
  %89 = and i1 %11, %81, !dbg !59
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %88, i32 -8388608, i1 %88) #1, !dbg !60
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %89, i32 -8388608, i1 %89) #1, !dbg !60
  %92 = and i1 %41, %80, !dbg !61
  %93 = add i32 %29, 6, !dbg !62
  %94 = add i32 %93, %23, !dbg !62
  %95 = sext i32 %93 to i64, !dbg !63
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !63
  %97 = sext i32 %94 to i64, !dbg !63
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !63
  %99 = and i1 %11, %92, !dbg !64
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %88, i32 -8388608, i1 %88) #1, !dbg !65
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %99, i32 -8388608, i1 %99) #1, !dbg !65
  %102 = and i1 %54, %80, !dbg !66
  %103 = add i32 %29, 7, !dbg !67
  %104 = add i32 %103, %23, !dbg !67
  %105 = sext i32 %103 to i64, !dbg !68
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !68
  %107 = sext i32 %104 to i64, !dbg !68
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !68
  %109 = and i1 %11, %102, !dbg !69
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %88, i32 -8388608, i1 %88) #1, !dbg !70
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %109, i32 -8388608, i1 %109) #1, !dbg !70
  %112 = and i1 %67, %80, !dbg !71
  %113 = add i32 %29, 8, !dbg !72
  %114 = add i32 %113, %23, !dbg !72
  %115 = sext i32 %113 to i64, !dbg !73
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !73
  %117 = sext i32 %114 to i64, !dbg !73
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !73
  %119 = and i1 %11, %112, !dbg !74
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %88, i32 -8388608, i1 %88) #1, !dbg !75
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %119, i32 -8388608, i1 %119) #1, !dbg !75
  %122 = or disjoint i32 %20, 2, !dbg !76
  %123 = icmp slt i32 %122, 5, !dbg !77
  %124 = and i1 %21, %123, !dbg !78
  %125 = and i1 %24, %124, !dbg !79
  %126 = add i32 %29, 10, !dbg !80
  %127 = add i32 %126, %23, !dbg !80
  %128 = sext i32 %126 to i64, !dbg !81
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !81
  %130 = sext i32 %127 to i64, !dbg !81
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !81
  %132 = and i1 %11, %124, !dbg !82
  %133 = and i1 %11, %125, !dbg !82
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %132, i32 -8388608, i1 %132) #1, !dbg !83
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %133, i32 -8388608, i1 %133) #1, !dbg !83
  %136 = and i1 %41, %124, !dbg !84
  %137 = add i32 %29, 11, !dbg !85
  %138 = add i32 %137, %23, !dbg !85
  %139 = sext i32 %137 to i64, !dbg !86
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !86
  %141 = sext i32 %138 to i64, !dbg !86
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !86
  %143 = and i1 %11, %136, !dbg !87
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %132, i32 -8388608, i1 %132) #1, !dbg !88
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %143, i32 -8388608, i1 %143) #1, !dbg !88
  %146 = and i1 %54, %124, !dbg !89
  %147 = add i32 %29, 12, !dbg !90
  %148 = add i32 %147, %23, !dbg !90
  %149 = sext i32 %147 to i64, !dbg !91
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !91
  %151 = sext i32 %148 to i64, !dbg !91
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !91
  %153 = and i1 %11, %146, !dbg !92
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %132, i32 -8388608, i1 %132) #1, !dbg !93
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %153, i32 -8388608, i1 %153) #1, !dbg !93
  %156 = and i1 %67, %124, !dbg !94
  %157 = add i32 %29, 13, !dbg !95
  %158 = add i32 %157, %23, !dbg !95
  %159 = sext i32 %157 to i64, !dbg !96
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !96
  %161 = sext i32 %158 to i64, !dbg !96
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !96
  %163 = and i1 %11, %156, !dbg !97
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %132, i32 -8388608, i1 %132) #1, !dbg !98
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %163, i32 -8388608, i1 %163) #1, !dbg !98
  %166 = or disjoint i32 %20, 3, !dbg !99
  %167 = icmp slt i32 %166, 5, !dbg !100
  %168 = and i1 %21, %167, !dbg !101
  %169 = and i1 %24, %168, !dbg !102
  %170 = add i32 %29, 15, !dbg !103
  %171 = add i32 %170, %23, !dbg !103
  %172 = sext i32 %170 to i64, !dbg !104
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !104
  %174 = sext i32 %171 to i64, !dbg !104
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !104
  %176 = and i1 %11, %168, !dbg !105
  %177 = and i1 %11, %169, !dbg !105
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %176, i32 -8388608, i1 %176) #1, !dbg !106
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %177, i32 -8388608, i1 %177) #1, !dbg !106
  %180 = and i1 %41, %168, !dbg !107
  %181 = add i32 %29, 16, !dbg !108
  %182 = add i32 %181, %23, !dbg !108
  %183 = sext i32 %181 to i64, !dbg !109
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !109
  %185 = sext i32 %182 to i64, !dbg !109
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !109
  %187 = and i1 %11, %180, !dbg !110
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %176, i32 -8388608, i1 %176) #1, !dbg !111
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %187, i32 -8388608, i1 %187) #1, !dbg !111
  %190 = and i1 %54, %168, !dbg !112
  %191 = add i32 %29, 17, !dbg !113
  %192 = add i32 %191, %23, !dbg !113
  %193 = sext i32 %191 to i64, !dbg !114
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !114
  %195 = sext i32 %192 to i64, !dbg !114
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !114
  %197 = and i1 %11, %190, !dbg !115
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %176, i32 -8388608, i1 %176) #1, !dbg !116
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %197, i32 -8388608, i1 %197) #1, !dbg !116
  %200 = and i1 %67, %168, !dbg !117
  %201 = add i32 %29, 18, !dbg !118
  %202 = add i32 %201, %23, !dbg !118
  %203 = sext i32 %201 to i64, !dbg !119
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !119
  %205 = sext i32 %202 to i64, !dbg !119
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !119
  %207 = and i1 %11, %200, !dbg !120
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %176, i32 -8388608, i1 %176) #1, !dbg !121
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %207, i32 -8388608, i1 %207) #1, !dbg !121
  %210 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !28
  %211 = insertelement <2 x i32> %210, i32 %38, i64 1, !dbg !28
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !28
  %213 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !36
  %214 = insertelement <2 x i32> %213, i32 %51, i64 1, !dbg !36
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !36
  %216 = fcmp ogt <2 x float> %215, %212, !dbg !122
  %217 = fcmp uno <2 x float> %215, zeroinitializer, !dbg !126
  %218 = or <2 x i1> %216, %217, !dbg !127
  %.v = select <2 x i1> %218, <2 x i32> %214, <2 x i32> %211, !dbg !128
  %219 = bitcast <2 x i32> %.v to <2 x float>, !dbg !128
  %220 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !44
  %221 = insertelement <2 x i32> %220, i32 %64, i64 1, !dbg !44
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !44
  %223 = fcmp olt <2 x float> %219, %222, !dbg !129
  %224 = fcmp uno <2 x float> %222, zeroinitializer, !dbg !131
  %225 = or <2 x i1> %224, %223, !dbg !132
  %.v1 = select <2 x i1> %225, <2 x i32> %221, <2 x i32> %.v, !dbg !133
  %226 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !133
  %227 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !52
  %228 = insertelement <2 x i32> %227, i32 %77, i64 1, !dbg !52
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !52
  %230 = fcmp olt <2 x float> %226, %229, !dbg !134
  %231 = fcmp uno <2 x float> %229, zeroinitializer, !dbg !136
  %232 = or <2 x i1> %231, %230, !dbg !137
  %.v2 = select <2 x i1> %232, <2 x i32> %228, <2 x i32> %.v1, !dbg !138
  %233 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !138
  %234 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !60
  %235 = insertelement <2 x i32> %234, i32 %91, i64 1, !dbg !60
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !60
  %237 = fcmp olt <2 x float> %233, %236, !dbg !139
  %238 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !65
  %239 = insertelement <2 x i32> %238, i32 %101, i64 1, !dbg !65
  %240 = bitcast <2 x i32> %239 to <2 x float>, !dbg !65
  %241 = fcmp uno <2 x float> %236, zeroinitializer, !dbg !141
  %242 = or <2 x i1> %241, %237, !dbg !142
  %.v3 = select <2 x i1> %242, <2 x i32> %235, <2 x i32> %.v2, !dbg !143
  %243 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !143
  %244 = fcmp olt <2 x float> %243, %240, !dbg !144
  %245 = fcmp uno <2 x float> %240, zeroinitializer, !dbg !146
  %246 = or <2 x i1> %245, %244, !dbg !147
  %.v4 = select <2 x i1> %246, <2 x i32> %239, <2 x i32> %.v3, !dbg !148
  %247 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !148
  %248 = zext <2 x i1> %216 to <2 x i8>, !dbg !149
  %249 = select <2 x i1> %223, <2 x i8> splat (i8 2), <2 x i8> %248, !dbg !150
  %250 = select <2 x i1> %230, <2 x i8> splat (i8 3), <2 x i8> %249, !dbg !151
  %251 = select <2 x i1> %237, <2 x i8> splat (i8 4), <2 x i8> %250, !dbg !152
  %252 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !70
  %253 = insertelement <2 x i32> %252, i32 %111, i64 1, !dbg !70
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !70
  %255 = fcmp uno <2 x float> %254, zeroinitializer, !dbg !153
  %256 = fcmp olt <2 x float> %247, %254, !dbg !155
  %257 = or <2 x i1> %255, %256, !dbg !156
  %.v5 = select <2 x i1> %257, <2 x i32> %253, <2 x i32> %.v4, !dbg !157
  %258 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !157
  %259 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !75
  %260 = insertelement <2 x i32> %259, i32 %121, i64 1, !dbg !75
  %261 = bitcast <2 x i32> %260 to <2 x float>, !dbg !75
  %262 = fcmp olt <2 x float> %258, %261, !dbg !158
  %263 = fcmp uno <2 x float> %261, zeroinitializer, !dbg !160
  %264 = or <2 x i1> %263, %262, !dbg !161
  %.v6 = select <2 x i1> %264, <2 x i32> %260, <2 x i32> %.v5, !dbg !162
  %265 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !162
  %266 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !83
  %267 = insertelement <2 x i32> %266, i32 %135, i64 1, !dbg !83
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !83
  %269 = fcmp olt <2 x float> %265, %268, !dbg !163
  %270 = fcmp uno <2 x float> %268, zeroinitializer, !dbg !165
  %271 = or <2 x i1> %270, %269, !dbg !166
  %.v7 = select <2 x i1> %271, <2 x i32> %267, <2 x i32> %.v6, !dbg !167
  %272 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !167
  %273 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !88
  %274 = insertelement <2 x i32> %273, i32 %145, i64 1, !dbg !88
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !88
  %276 = fcmp olt <2 x float> %272, %275, !dbg !168
  %277 = fcmp uno <2 x float> %275, zeroinitializer, !dbg !170
  %278 = or <2 x i1> %277, %276, !dbg !171
  %.v8 = select <2 x i1> %278, <2 x i32> %274, <2 x i32> %.v7, !dbg !172
  %279 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !172
  %280 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !93
  %281 = insertelement <2 x i32> %280, i32 %155, i64 1, !dbg !93
  %282 = bitcast <2 x i32> %281 to <2 x float>, !dbg !93
  %283 = fcmp olt <2 x float> %279, %282, !dbg !173
  %284 = fcmp uno <2 x float> %282, zeroinitializer, !dbg !175
  %285 = or <2 x i1> %284, %283, !dbg !176
  %.v9 = select <2 x i1> %285, <2 x i32> %281, <2 x i32> %.v8, !dbg !177
  %286 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !177
  %287 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !98
  %288 = insertelement <2 x i32> %287, i32 %165, i64 1, !dbg !98
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !98
  %290 = fcmp olt <2 x float> %286, %289, !dbg !178
  %291 = fcmp uno <2 x float> %289, zeroinitializer, !dbg !180
  %292 = or <2 x i1> %291, %290, !dbg !181
  %.v10 = select <2 x i1> %292, <2 x i32> %288, <2 x i32> %.v9, !dbg !182
  %293 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !182
  %294 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !106
  %295 = insertelement <2 x i32> %294, i32 %179, i64 1, !dbg !106
  %296 = bitcast <2 x i32> %295 to <2 x float>, !dbg !106
  %297 = fcmp olt <2 x float> %293, %296, !dbg !183
  %298 = fcmp uno <2 x float> %296, zeroinitializer, !dbg !185
  %299 = or <2 x i1> %298, %297, !dbg !186
  %.v11 = select <2 x i1> %299, <2 x i32> %295, <2 x i32> %.v10, !dbg !187
  %300 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !187
  %301 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !111
  %302 = insertelement <2 x i32> %301, i32 %189, i64 1, !dbg !111
  %303 = bitcast <2 x i32> %302 to <2 x float>, !dbg !111
  %304 = fcmp olt <2 x float> %300, %303, !dbg !188
  %305 = fcmp uno <2 x float> %303, zeroinitializer, !dbg !190
  %306 = or <2 x i1> %305, %304, !dbg !191
  %.v12 = select <2 x i1> %306, <2 x i32> %302, <2 x i32> %.v11, !dbg !192
  %307 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !192
  %308 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !116
  %309 = insertelement <2 x i32> %308, i32 %199, i64 1, !dbg !116
  %310 = bitcast <2 x i32> %309 to <2 x float>, !dbg !116
  %311 = fcmp olt <2 x float> %307, %310, !dbg !193
  %312 = fcmp uno <2 x float> %310, zeroinitializer, !dbg !195
  %313 = or <2 x i1> %312, %311, !dbg !196
  %.v13 = select <2 x i1> %313, <2 x i32> %309, <2 x i32> %.v12, !dbg !197
  %314 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !197
  %315 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !121
  %316 = insertelement <2 x i32> %315, i32 %209, i64 1, !dbg !121
  %317 = bitcast <2 x i32> %316 to <2 x float>, !dbg !121
  %318 = fcmp olt <2 x float> %314, %317, !dbg !198
  %319 = bitcast i32 %208 to float, !dbg !200
  %320 = fcmp uno float %319, 0.000000e+00, !dbg !200
  %321 = bitcast i32 %209 to float, !dbg !200
  %322 = fcmp uno float %321, 0.000000e+00, !dbg !200
  %323 = extractelement <2 x i1> %318, i64 0, !dbg !201
  %324 = or i1 %320, %323, !dbg !201
  %325 = extractelement <2 x i1> %318, i64 1, !dbg !201
  %326 = or i1 %322, %325, !dbg !201
  %327 = select <2 x i1> %244, <2 x i8> splat (i8 5), <2 x i8> %251, !dbg !202
  %328 = select <2 x i1> %256, <2 x i8> splat (i8 6), <2 x i8> %327, !dbg !203
  %329 = select <2 x i1> %262, <2 x i8> splat (i8 7), <2 x i8> %328, !dbg !204
  %330 = select <2 x i1> %269, <2 x i8> splat (i8 8), <2 x i8> %329, !dbg !205
  %331 = select <2 x i1> %276, <2 x i8> splat (i8 9), <2 x i8> %330, !dbg !206
  %332 = select <2 x i1> %283, <2 x i8> splat (i8 10), <2 x i8> %331, !dbg !207
  %333 = select <2 x i1> %290, <2 x i8> splat (i8 11), <2 x i8> %332, !dbg !208
  %334 = select <2 x i1> %297, <2 x i8> splat (i8 12), <2 x i8> %333, !dbg !209
  %335 = select <2 x i1> %304, <2 x i8> splat (i8 13), <2 x i8> %334, !dbg !210
  %336 = select <2 x i1> %311, <2 x i8> splat (i8 14), <2 x i8> %335, !dbg !211
  %337 = select <2 x i1> %318, <2 x i8> splat (i8 15), <2 x i8> %336, !dbg !212
  %338 = sext i32 %10 to i64, !dbg !213
  %339 = getelementptr float, ptr addrspace(1) %1, i64 %338, !dbg !213
  %340 = extractelement <2 x i32> %.v13, i64 0, !dbg !214
  %341 = select i1 %324, i32 %208, i32 %340, !dbg !215
  %342 = extractelement <2 x i32> %.v13, i64 1, !dbg !214
  %343 = select i1 %326, i32 %209, i32 %342, !dbg !215
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %341, i32 %343, ptr addrspace(1) %339, i1 %11) #1, !dbg !214
  %344 = getelementptr i8, ptr addrspace(1) %2, i64 %338, !dbg !216
  %345 = bitcast <2 x i8> %337 to i16, !dbg !217
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %345, ptr addrspace(1) %344, i1 %11) #1, !dbg !217
  ret void, !dbg !218
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csmuisf4rdaapaclfpksrvbkos7d5t6c2onduk6yi7avu2a5egzd.py", directory: "inductor_cache/sm")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_1", linkageName: "triton_poi_fused_max_pool2d_with_indices_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 38, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 13, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 13, scope: !7)
!22 = !DILocation(line: 35, column: 19, scope: !7)
!23 = !DILocation(line: 39, column: 41, scope: !7)
!24 = !DILocation(line: 39, column: 49, scope: !7)
!25 = !DILocation(line: 39, column: 46, scope: !7)
!26 = !DILocation(line: 39, column: 31, scope: !7)
!27 = !DILocation(line: 39, column: 62, scope: !7)
!28 = !DILocation(line: 39, column: 54, scope: !7)
!29 = !DILocation(line: 40, column: 16, scope: !7)
!30 = !DILocation(line: 42, column: 20, scope: !7)
!31 = !DILocation(line: 43, column: 20, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 50, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 66, scope: !7)
!36 = !DILocation(line: 45, column: 58, scope: !7)
!37 = !DILocation(line: 47, column: 16, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 19, scope: !7)
!41 = !DILocation(line: 52, column: 50, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 66, scope: !7)
!44 = !DILocation(line: 52, column: 58, scope: !7)
!45 = !DILocation(line: 54, column: 16, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 58, column: 19, scope: !7)
!49 = !DILocation(line: 59, column: 50, scope: !7)
!50 = !DILocation(line: 59, column: 31, scope: !7)
!51 = !DILocation(line: 59, column: 66, scope: !7)
!52 = !DILocation(line: 59, column: 58, scope: !7)
!53 = !DILocation(line: 61, column: 16, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 65, column: 20, scope: !7)
!57 = !DILocation(line: 66, column: 50, scope: !7)
!58 = !DILocation(line: 66, column: 31, scope: !7)
!59 = !DILocation(line: 66, column: 66, scope: !7)
!60 = !DILocation(line: 66, column: 58, scope: !7)
!61 = !DILocation(line: 68, column: 20, scope: !7)
!62 = !DILocation(line: 69, column: 50, scope: !7)
!63 = !DILocation(line: 69, column: 31, scope: !7)
!64 = !DILocation(line: 69, column: 66, scope: !7)
!65 = !DILocation(line: 69, column: 58, scope: !7)
!66 = !DILocation(line: 71, column: 20, scope: !7)
!67 = !DILocation(line: 72, column: 50, scope: !7)
!68 = !DILocation(line: 72, column: 31, scope: !7)
!69 = !DILocation(line: 72, column: 66, scope: !7)
!70 = !DILocation(line: 72, column: 58, scope: !7)
!71 = !DILocation(line: 74, column: 20, scope: !7)
!72 = !DILocation(line: 75, column: 50, scope: !7)
!73 = !DILocation(line: 75, column: 31, scope: !7)
!74 = !DILocation(line: 75, column: 66, scope: !7)
!75 = !DILocation(line: 75, column: 58, scope: !7)
!76 = !DILocation(line: 77, column: 16, scope: !7)
!77 = !DILocation(line: 79, column: 20, scope: !7)
!78 = !DILocation(line: 80, column: 20, scope: !7)
!79 = !DILocation(line: 81, column: 20, scope: !7)
!80 = !DILocation(line: 82, column: 51, scope: !7)
!81 = !DILocation(line: 82, column: 31, scope: !7)
!82 = !DILocation(line: 82, column: 67, scope: !7)
!83 = !DILocation(line: 82, column: 59, scope: !7)
!84 = !DILocation(line: 84, column: 20, scope: !7)
!85 = !DILocation(line: 85, column: 51, scope: !7)
!86 = !DILocation(line: 85, column: 31, scope: !7)
!87 = !DILocation(line: 85, column: 67, scope: !7)
!88 = !DILocation(line: 85, column: 59, scope: !7)
!89 = !DILocation(line: 87, column: 20, scope: !7)
!90 = !DILocation(line: 88, column: 51, scope: !7)
!91 = !DILocation(line: 88, column: 31, scope: !7)
!92 = !DILocation(line: 88, column: 67, scope: !7)
!93 = !DILocation(line: 88, column: 59, scope: !7)
!94 = !DILocation(line: 90, column: 20, scope: !7)
!95 = !DILocation(line: 91, column: 51, scope: !7)
!96 = !DILocation(line: 91, column: 31, scope: !7)
!97 = !DILocation(line: 91, column: 67, scope: !7)
!98 = !DILocation(line: 91, column: 59, scope: !7)
!99 = !DILocation(line: 93, column: 16, scope: !7)
!100 = !DILocation(line: 95, column: 20, scope: !7)
!101 = !DILocation(line: 96, column: 20, scope: !7)
!102 = !DILocation(line: 97, column: 20, scope: !7)
!103 = !DILocation(line: 98, column: 51, scope: !7)
!104 = !DILocation(line: 98, column: 31, scope: !7)
!105 = !DILocation(line: 98, column: 67, scope: !7)
!106 = !DILocation(line: 98, column: 59, scope: !7)
!107 = !DILocation(line: 100, column: 20, scope: !7)
!108 = !DILocation(line: 101, column: 51, scope: !7)
!109 = !DILocation(line: 101, column: 31, scope: !7)
!110 = !DILocation(line: 101, column: 67, scope: !7)
!111 = !DILocation(line: 101, column: 59, scope: !7)
!112 = !DILocation(line: 103, column: 20, scope: !7)
!113 = !DILocation(line: 104, column: 51, scope: !7)
!114 = !DILocation(line: 104, column: 31, scope: !7)
!115 = !DILocation(line: 104, column: 67, scope: !7)
!116 = !DILocation(line: 104, column: 59, scope: !7)
!117 = !DILocation(line: 106, column: 20, scope: !7)
!118 = !DILocation(line: 107, column: 51, scope: !7)
!119 = !DILocation(line: 107, column: 31, scope: !7)
!120 = !DILocation(line: 107, column: 67, scope: !7)
!121 = !DILocation(line: 107, column: 59, scope: !7)
!122 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !125)
!123 = distinct !DILexicalBlockFile(scope: !7, file: !124, discriminator: 0)
!124 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!125 = !DILocation(line: 46, column: 42, scope: !7)
!126 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !125)
!127 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !125)
!128 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !125)
!129 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !130)
!130 = !DILocation(line: 53, column: 42, scope: !7)
!131 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !130)
!132 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !130)
!133 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !130)
!134 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !135)
!135 = !DILocation(line: 60, column: 42, scope: !7)
!136 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !135)
!137 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !135)
!138 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !135)
!139 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !140)
!140 = !DILocation(line: 67, column: 42, scope: !7)
!141 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !140)
!142 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !140)
!143 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !140)
!144 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !145)
!145 = !DILocation(line: 70, column: 42, scope: !7)
!146 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !145)
!147 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !145)
!148 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !145)
!149 = !DILocation(line: 112, column: 35, scope: !7)
!150 = !DILocation(line: 115, column: 35, scope: !7)
!151 = !DILocation(line: 118, column: 35, scope: !7)
!152 = !DILocation(line: 121, column: 35, scope: !7)
!153 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !154)
!154 = !DILocation(line: 73, column: 42, scope: !7)
!155 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !154)
!156 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !154)
!157 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !154)
!158 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !159)
!159 = !DILocation(line: 76, column: 42, scope: !7)
!160 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !159)
!161 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !159)
!162 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !159)
!163 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !164)
!164 = !DILocation(line: 83, column: 42, scope: !7)
!165 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !164)
!166 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !164)
!167 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !164)
!168 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !169)
!169 = !DILocation(line: 86, column: 42, scope: !7)
!170 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !169)
!171 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !169)
!172 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !169)
!173 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !174)
!174 = !DILocation(line: 89, column: 42, scope: !7)
!175 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !174)
!176 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !174)
!177 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !174)
!178 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !179)
!179 = !DILocation(line: 92, column: 42, scope: !7)
!180 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !179)
!181 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !179)
!182 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !179)
!183 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !184)
!184 = !DILocation(line: 99, column: 42, scope: !7)
!185 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !184)
!186 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !184)
!187 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !184)
!188 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !189)
!189 = !DILocation(line: 102, column: 42, scope: !7)
!190 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !189)
!191 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !189)
!192 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !189)
!193 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !194)
!194 = !DILocation(line: 105, column: 42, scope: !7)
!195 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !194)
!196 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !194)
!197 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !194)
!198 = !DILocation(line: 118, column: 15, scope: !123, inlinedAt: !199)
!199 = !DILocation(line: 108, column: 42, scope: !7)
!200 = !DILocation(line: 120, column: 21, scope: !123, inlinedAt: !199)
!201 = !DILocation(line: 120, column: 16, scope: !123, inlinedAt: !199)
!202 = !DILocation(line: 124, column: 35, scope: !7)
!203 = !DILocation(line: 127, column: 35, scope: !7)
!204 = !DILocation(line: 130, column: 38, scope: !7)
!205 = !DILocation(line: 133, column: 38, scope: !7)
!206 = !DILocation(line: 136, column: 38, scope: !7)
!207 = !DILocation(line: 139, column: 38, scope: !7)
!208 = !DILocation(line: 142, column: 38, scope: !7)
!209 = !DILocation(line: 145, column: 38, scope: !7)
!210 = !DILocation(line: 148, column: 38, scope: !7)
!211 = !DILocation(line: 151, column: 38, scope: !7)
!212 = !DILocation(line: 154, column: 38, scope: !7)
!213 = !DILocation(line: 155, column: 25, scope: !7)
!214 = !DILocation(line: 155, column: 37, scope: !7)
!215 = !DILocation(line: 121, column: 29, scope: !123, inlinedAt: !199)
!216 = !DILocation(line: 156, column: 25, scope: !7)
!217 = !DILocation(line: 156, column: 38, scope: !7)
!218 = !DILocation(line: 156, column: 4, scope: !7)
