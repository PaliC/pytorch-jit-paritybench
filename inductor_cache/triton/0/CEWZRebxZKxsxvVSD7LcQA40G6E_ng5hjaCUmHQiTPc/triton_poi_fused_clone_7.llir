; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clone_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 513, !dbg !13
  %19 = or disjoint i32 %13, 514, !dbg !13
  %20 = or disjoint i32 %13, 515, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %21 = sdiv i32 %.frozen, 26, !dbg !14
  %22 = mul i32 %21, 26, !dbg !15
  %.decomposed = sub i32 %.frozen, %22, !dbg !15
  %23 = srem i32 %14, 26, !dbg !15
  %.frozen43 = freeze i32 %15, !dbg !14
  %24 = sdiv i32 %.frozen43, 26, !dbg !14
  %25 = mul i32 %24, 26, !dbg !15
  %.decomposed44 = sub i32 %.frozen43, %25, !dbg !15
  %26 = srem i32 %16, 26, !dbg !15
  %.frozen45 = freeze i32 %17, !dbg !14
  %27 = sdiv i32 %.frozen45, 26, !dbg !14
  %28 = mul i32 %27, 26, !dbg !15
  %.decomposed46 = sub i32 %.frozen45, %28, !dbg !15
  %29 = srem i32 %18, 26, !dbg !15
  %.frozen47 = freeze i32 %19, !dbg !14
  %30 = sdiv i32 %.frozen47, 26, !dbg !14
  %31 = mul i32 %30, 26, !dbg !15
  %.decomposed48 = sub i32 %.frozen47, %31, !dbg !15
  %32 = srem i32 %20, 26, !dbg !15
  %33 = srem i32 %21, 26, !dbg !16
  %34 = srem i32 %24, 26, !dbg !16
  %35 = srem i32 %27, 26, !dbg !16
  %36 = srem i32 %30, 26, !dbg !16
  %37 = sdiv i32 %13, 676, !dbg !17
  %38 = sdiv i32 %17, 676, !dbg !17
  %39 = srem i32 %37, 256, !dbg !18
  %40 = srem i32 %38, 256, !dbg !18
  %41 = mul nsw i32 %33, 28, !dbg !19
  %42 = mul nsw i32 %34, 28, !dbg !19
  %43 = mul nsw i32 %35, 28, !dbg !19
  %44 = mul nsw i32 %36, 28, !dbg !19
  %45 = mul i32 %37, 784, !dbg !20
  %46 = mul i32 %38, 784, !dbg !20
  %47 = add i32 %45, 29, !dbg !21
  %48 = add i32 %47, %.decomposed, !dbg !22
  %49 = add i32 %48, %41, !dbg !23
  %50 = add i32 %47, %23, !dbg !22
  %51 = add i32 %50, %41, !dbg !23
  %52 = add i32 %47, %.decomposed44, !dbg !22
  %53 = add i32 %52, %42, !dbg !23
  %54 = add i32 %47, %26, !dbg !22
  %55 = add i32 %54, %42, !dbg !23
  %56 = add i32 %46, 29, !dbg !21
  %57 = add i32 %56, %.decomposed46, !dbg !22
  %58 = add i32 %57, %43, !dbg !23
  %59 = add i32 %56, %29, !dbg !22
  %60 = add i32 %59, %43, !dbg !23
  %61 = add i32 %56, %.decomposed48, !dbg !22
  %62 = add i32 %61, %44, !dbg !23
  %63 = add i32 %56, %32, !dbg !22
  %64 = add i32 %63, %44, !dbg !23
  %65 = sext i32 %49 to i64, !dbg !24
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !24
  %67 = sext i32 %51 to i64, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !24
  %69 = sext i32 %53 to i64, !dbg !24
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !24
  %71 = sext i32 %55 to i64, !dbg !24
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !24
  %73 = sext i32 %58 to i64, !dbg !24
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !24
  %75 = sext i32 %60 to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !24
  %77 = sext i32 %62 to i64, !dbg !24
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !24
  %79 = sext i32 %64 to i64, !dbg !24
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !24
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !25
  %89 = sext i32 %39 to i64, !dbg !26
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !26
  %91 = sext i32 %40 to i64, !dbg !26
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !26
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !27
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !27
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !27
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !27
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !27
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !27
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !27
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !27
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !29
  %104 = bitcast i32 %103 to float, !dbg !29
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !29
  %106 = bitcast i32 %105 to float, !dbg !29
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !29
  %112 = bitcast i32 %111 to float, !dbg !29
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !29
  %114 = bitcast i32 %113 to float, !dbg !29
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !29
  %116 = bitcast i32 %115 to float, !dbg !29
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #3, !dbg !29
  %118 = bitcast i32 %117 to float, !dbg !29
  %119 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !30
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !30
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !31
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !31
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !31
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !31
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !31
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !31
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !31
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !31
  %129 = getelementptr float, ptr addrspace(1) %4, i64 %89, !dbg !32
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %91, !dbg !32
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !33
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !33
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !33
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !33
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !33
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !33
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !33
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !33
  %139 = fadd float %104, 0x3EE4F8B580000000, !dbg !34
  %140 = fadd float %106, 0x3EE4F8B580000000, !dbg !34
  %141 = fadd float %108, 0x3EE4F8B580000000, !dbg !34
  %142 = fadd float %110, 0x3EE4F8B580000000, !dbg !34
  %143 = fadd float %112, 0x3EE4F8B580000000, !dbg !34
  %144 = fadd float %114, 0x3EE4F8B580000000, !dbg !34
  %145 = fadd float %116, 0x3EE4F8B580000000, !dbg !34
  %146 = fadd float %118, 0x3EE4F8B580000000, !dbg !34
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %147, 0, !dbg !35
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %148, 0, !dbg !35
  br i1 %.not.i, label %154, label %149, !dbg !35

149:                                              ; preds = %7
  br i1 %.not1.i, label %152, label %150, !dbg !35

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

154:                                              ; preds = %7
  br i1 %.not1.i, label %157, label %155, !dbg !35

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %150, %152, %155, %157
  %.0.i = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !35
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %159, 0, !dbg !35
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %160, 0, !dbg !35
  br i1 %.not.i1, label %166, label %161, !dbg !35

161:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %164, label %162, !dbg !35

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

166:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %169, label %167, !dbg !35

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %162, %164, %167, %169
  %.0.i3 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !35
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i6 = icmp eq i32 %171, 0, !dbg !35
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i9 = icmp eq i32 %172, 0, !dbg !35
  br i1 %.not.i6, label %178, label %173, !dbg !35

173:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %176, label %174, !dbg !35

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

178:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %181, label %179, !dbg !35

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %174, %176, %179, %181
  %.0.i8 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !35
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %183, 0, !dbg !35
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %184, 0, !dbg !35
  br i1 %.not.i11, label %190, label %185, !dbg !35

185:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %188, label %186, !dbg !35

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

190:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %193, label %191, !dbg !35

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %186, %188, %191, %193
  %.0.i13 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !35
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i16 = icmp eq i32 %195, 0, !dbg !35
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i19 = icmp eq i32 %196, 0, !dbg !35
  br i1 %.not.i16, label %202, label %197, !dbg !35

197:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %200, label %198, !dbg !35

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

202:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %205, label %203, !dbg !35

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %198, %200, %203, %205
  %.0.i18 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !35
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i21 = icmp eq i32 %207, 0, !dbg !35
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i24 = icmp eq i32 %208, 0, !dbg !35
  br i1 %.not.i21, label %214, label %209, !dbg !35

209:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %212, label %210, !dbg !35

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

214:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %217, label %215, !dbg !35

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %210, %212, %215, %217
  %.0.i23 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !35
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i26 = icmp eq i32 %219, 0, !dbg !35
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i29 = icmp eq i32 %220, 0, !dbg !35
  br i1 %.not.i26, label %226, label %221, !dbg !35

221:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %224, label %222, !dbg !35

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

226:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %229, label %227, !dbg !35

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %222, %224, %227, %229
  %.0.i28 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !35
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i31 = icmp eq i32 %231, 0, !dbg !35
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i34 = icmp eq i32 %232, 0, !dbg !35
  br i1 %.not.i31, label %238, label %233, !dbg !35

233:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %236, label %234, !dbg !35

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

238:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %241, label %239, !dbg !35

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %234, %236, %239, %241
  %.0.i33 = phi float [ %235, %234 ], [ %237, %236 ], [ %240, %239 ], [ %242, %241 ], !dbg !35
  %243 = insertelement <8 x i32> poison, i32 %88, i64 0, !dbg !25
  %244 = insertelement <8 x i32> %243, i32 %87, i64 1, !dbg !25
  %245 = insertelement <8 x i32> %244, i32 %86, i64 2, !dbg !25
  %246 = insertelement <8 x i32> %245, i32 %85, i64 3, !dbg !25
  %247 = insertelement <8 x i32> %246, i32 %84, i64 4, !dbg !25
  %248 = insertelement <8 x i32> %247, i32 %83, i64 5, !dbg !25
  %249 = insertelement <8 x i32> %248, i32 %82, i64 6, !dbg !25
  %250 = insertelement <8 x i32> %249, i32 %81, i64 7, !dbg !25
  %251 = bitcast <8 x i32> %250 to <8 x float>, !dbg !25
  %252 = insertelement <8 x i32> poison, i32 %100, i64 0, !dbg !27
  %253 = insertelement <8 x i32> %252, i32 %99, i64 1, !dbg !27
  %254 = insertelement <8 x i32> %253, i32 %98, i64 2, !dbg !27
  %255 = insertelement <8 x i32> %254, i32 %97, i64 3, !dbg !27
  %256 = insertelement <8 x i32> %255, i32 %96, i64 4, !dbg !27
  %257 = insertelement <8 x i32> %256, i32 %95, i64 5, !dbg !27
  %258 = insertelement <8 x i32> %257, i32 %94, i64 6, !dbg !27
  %259 = insertelement <8 x i32> %258, i32 %93, i64 7, !dbg !27
  %260 = bitcast <8 x i32> %259 to <8 x float>, !dbg !27
  %261 = insertelement <8 x i32> poison, i32 %138, i64 0, !dbg !33
  %262 = insertelement <8 x i32> %261, i32 %137, i64 1, !dbg !33
  %263 = insertelement <8 x i32> %262, i32 %136, i64 2, !dbg !33
  %264 = insertelement <8 x i32> %263, i32 %135, i64 3, !dbg !33
  %265 = insertelement <8 x i32> %264, i32 %134, i64 4, !dbg !33
  %266 = insertelement <8 x i32> %265, i32 %133, i64 5, !dbg !33
  %267 = insertelement <8 x i32> %266, i32 %132, i64 6, !dbg !33
  %268 = insertelement <8 x i32> %267, i32 %131, i64 7, !dbg !33
  %269 = bitcast <8 x i32> %268 to <8 x float>, !dbg !33
  %270 = insertelement <8 x i32> poison, i32 %128, i64 0, !dbg !31
  %271 = insertelement <8 x i32> %270, i32 %127, i64 1, !dbg !31
  %272 = insertelement <8 x i32> %271, i32 %126, i64 2, !dbg !31
  %273 = insertelement <8 x i32> %272, i32 %125, i64 3, !dbg !31
  %274 = insertelement <8 x i32> %273, i32 %124, i64 4, !dbg !31
  %275 = insertelement <8 x i32> %274, i32 %123, i64 5, !dbg !31
  %276 = insertelement <8 x i32> %275, i32 %122, i64 6, !dbg !31
  %277 = insertelement <8 x i32> %276, i32 %121, i64 7, !dbg !31
  %278 = bitcast <8 x i32> %277 to <8 x float>, !dbg !31
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !36
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !36
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !36
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !36
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !36
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !36
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !36
  %287 = fsub <8 x float> %251, %260, !dbg !37
  %288 = insertelement <8 x float> poison, float %286, i64 0, !dbg !38
  %289 = insertelement <8 x float> %288, float %285, i64 1, !dbg !38
  %290 = insertelement <8 x float> %289, float %284, i64 2, !dbg !38
  %291 = insertelement <8 x float> %290, float %283, i64 3, !dbg !38
  %292 = insertelement <8 x float> %291, float %282, i64 4, !dbg !38
  %293 = insertelement <8 x float> %292, float %281, i64 5, !dbg !38
  %294 = insertelement <8 x float> %293, float %280, i64 6, !dbg !38
  %295 = insertelement <8 x float> %294, float %279, i64 7, !dbg !38
  %296 = fmul <8 x float> %287, %295, !dbg !38
  %297 = fmul <8 x float> %296, %278, !dbg !39
  %298 = fadd <8 x float> %297, %269, !dbg !40
  %299 = fcmp olt <8 x float> %298, zeroinitializer, !dbg !41
  %300 = extractelement <8 x i1> %299, i64 7, !dbg !45
  %301 = extractelement <8 x i1> %299, i64 6, !dbg !45
  %302 = extractelement <8 x i1> %299, i64 5, !dbg !45
  %303 = extractelement <8 x i1> %299, i64 4, !dbg !45
  %304 = extractelement <8 x i1> %299, i64 3, !dbg !45
  %305 = extractelement <8 x i1> %299, i64 2, !dbg !45
  %306 = extractelement <8 x i1> %299, i64 1, !dbg !45
  %307 = extractelement <8 x i1> %299, i64 0, !dbg !45
  %308 = sext i32 %13 to i64, !dbg !46
  %309 = getelementptr float, ptr addrspace(1) %5, i64 %308, !dbg !46
  %310 = sext i32 %17 to i64, !dbg !46
  %311 = getelementptr float, ptr addrspace(1) %5, i64 %310, !dbg !46
  %bc = bitcast <8 x float> %298 to <8 x i32>, !dbg !47
  %312 = extractelement <8 x i32> %bc, i64 7, !dbg !47
  %313 = select i1 %300, i32 0, i32 %312, !dbg !45
  %bc36 = bitcast <8 x float> %298 to <8 x i32>, !dbg !47
  %314 = extractelement <8 x i32> %bc36, i64 6, !dbg !47
  %315 = select i1 %301, i32 0, i32 %314, !dbg !45
  %bc37 = bitcast <8 x float> %298 to <8 x i32>, !dbg !47
  %316 = extractelement <8 x i32> %bc37, i64 5, !dbg !47
  %317 = select i1 %302, i32 0, i32 %316, !dbg !45
  %bc38 = bitcast <8 x float> %298 to <8 x i32>, !dbg !47
  %318 = extractelement <8 x i32> %bc38, i64 4, !dbg !47
  %319 = select i1 %303, i32 0, i32 %318, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %313, i32 %315, i32 %317, i32 %319, ptr addrspace(1) %309, i1 true) #3, !dbg !47
  %bc39 = bitcast <8 x float> %298 to <8 x i32>, !dbg !47
  %320 = extractelement <8 x i32> %bc39, i64 3, !dbg !47
  %321 = select i1 %304, i32 0, i32 %320, !dbg !45
  %bc40 = bitcast <8 x float> %298 to <8 x i32>, !dbg !47
  %322 = extractelement <8 x i32> %bc40, i64 2, !dbg !47
  %323 = select i1 %305, i32 0, i32 %322, !dbg !45
  %bc41 = bitcast <8 x float> %298 to <8 x i32>, !dbg !47
  %324 = extractelement <8 x i32> %bc41, i64 1, !dbg !47
  %325 = select i1 %306, i32 0, i32 %324, !dbg !45
  %bc42 = bitcast <8 x float> %298 to <8 x i32>, !dbg !47
  %326 = extractelement <8 x i32> %bc42, i64 0, !dbg !47
  %327 = select i1 %307, i32 0, i32 %326, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %321, i32 %323, i32 %325, i32 %327, ptr addrspace(1) %311, i1 true) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crtspugt7q3lc22fb6p5dh37jmcheeoum3tzwkwubinetxcahn5d.py", directory: "inductor_cache/rt")
!4 = !{ptr @triton_poi_fused_clone_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_7", linkageName: "triton_poi_fused_clone_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 43, scope: !7)
!20 = !DILocation(line: 29, column: 52, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 29, column: 48, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 57, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 35, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 35, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 36, scope: !7)
!32 = !DILocation(line: 33, column: 31, scope: !7)
!33 = !DILocation(line: 33, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 26, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 34, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 46, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 47, column: 25, scope: !7)
!47 = !DILocation(line: 47, column: 37, scope: !7)
!48 = !DILocation(line: 47, column: 4, scope: !7)
