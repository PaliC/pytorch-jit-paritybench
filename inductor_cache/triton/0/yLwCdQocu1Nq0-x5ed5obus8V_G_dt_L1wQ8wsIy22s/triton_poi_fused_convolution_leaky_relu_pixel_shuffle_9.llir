; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 255, !dbg !12
  %11 = shl i32 %9, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %8, %10, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %16 = shl i32 %15, 4, !dbg !15
  %17 = lshr i32 %9, 7, !dbg !16
  %.lobit = and i32 %17, 1, !dbg !16
  %18 = or disjoint i32 %16, 4, !dbg !17
  %19 = or disjoint i32 %16, 8, !dbg !17
  %20 = or disjoint i32 %16, 12, !dbg !17
  %21 = or disjoint i32 %16, %.lobit, !dbg !17
  %22 = or disjoint i32 %21, 2, !dbg !17
  %23 = or disjoint i32 %21, 4, !dbg !17
  %24 = or disjoint i32 %21, 6, !dbg !17
  %25 = or disjoint i32 %21, 8, !dbg !17
  %26 = or disjoint i32 %21, 10, !dbg !17
  %27 = or disjoint i32 %21, 12, !dbg !17
  %28 = or disjoint i32 %21, 14, !dbg !17
  %29 = icmp slt i32 %16, 16, !dbg !18
  %30 = icmp slt i32 %21, 16, !dbg !18
  %31 = icmp slt i32 %22, 16, !dbg !18
  %32 = icmp slt i32 %23, 16, !dbg !18
  %33 = icmp slt i32 %24, 16, !dbg !18
  %34 = icmp slt i32 %25, 16, !dbg !18
  %35 = icmp slt i32 %26, 16, !dbg !18
  %36 = icmp slt i32 %27, 16, !dbg !18
  %37 = icmp slt i32 %28, 16, !dbg !18
  %38 = srem i32 %13, 256, !dbg !19
  %.frozen = freeze i32 %21, !dbg !20
  %39 = sdiv i32 %.frozen, 4, !dbg !20
  %40 = mul i32 %39, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %40, !dbg !21
  %.frozen31 = freeze i32 %22, !dbg !20
  %41 = sdiv i32 %.frozen31, 4, !dbg !20
  %42 = mul i32 %41, 4, !dbg !21
  %.decomposed32 = sub i32 %.frozen31, %42, !dbg !21
  %.frozen33 = freeze i32 %24, !dbg !20
  %43 = sdiv i32 %.frozen33, 4, !dbg !20
  %44 = mul i32 %43, 4, !dbg !21
  %.decomposed34 = sub i32 %.frozen33, %44, !dbg !21
  %.frozen35 = freeze i32 %26, !dbg !20
  %45 = sdiv i32 %.frozen35, 4, !dbg !20
  %46 = mul i32 %45, 4, !dbg !21
  %.decomposed36 = sub i32 %.frozen35, %46, !dbg !21
  %.frozen37 = freeze i32 %28, !dbg !20
  %47 = sdiv i32 %.frozen37, 4, !dbg !20
  %48 = mul i32 %47, 4, !dbg !21
  %.decomposed38 = sub i32 %.frozen37, %48, !dbg !21
  %49 = sdiv i32 %23, 4, !dbg !20
  %50 = sdiv i32 %25, 4, !dbg !20
  %51 = sdiv i32 %27, 4, !dbg !20
  %52 = ashr exact i32 %14, 1, !dbg !22
  %53 = srem i32 %52, 2, !dbg !23
  %54 = sdiv i32 %14, 4, !dbg !24
  %55 = shl i32 %13, 4, !dbg !25
  %56 = add i32 %55, %16, !dbg !26
  %57 = add i32 %18, %55, !dbg !26
  %58 = add i32 %19, %55, !dbg !26
  %59 = add i32 %20, %55, !dbg !26
  %60 = sext i32 %56 to i64, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !27
  %62 = sext i32 %57 to i64, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !27
  %64 = sext i32 %58 to i64, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !27
  %66 = sext i32 %59 to i64, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !27
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %29) #2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !28
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %29) #2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !28
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %29) #2, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !28
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %29) #2, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !28
  %88 = sext i32 %38 to i64, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #2, !dbg !30
  %91 = getelementptr i1, ptr addrspace(1) %2, i64 %60, !dbg !31
  %92 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !28
  %93 = insertelement <4 x i32> %92, i32 %70, i64 1, !dbg !28
  %94 = insertelement <4 x i32> %93, i32 %71, i64 2, !dbg !28
  %95 = insertelement <4 x i32> %94, i32 %72, i64 3, !dbg !28
  %96 = bitcast <4 x i32> %95 to <4 x float>, !dbg !28
  %97 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !32
  %98 = bitcast <4 x i32> %97 to <4 x float>, !dbg !32
  %99 = shufflevector <4 x float> %98, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !32
  %100 = fadd <4 x float> %99, %96, !dbg !32
  %101 = fcmp ogt <4 x float> %100, zeroinitializer, !dbg !33
  %102 = extractelement <4 x float> %100, i64 0, !dbg !34
  %103 = fmul float %102, 0x3F847AE140000000, !dbg !35
  %104 = extractelement <4 x float> %100, i64 1, !dbg !34
  %105 = fmul float %104, 0x3F847AE140000000, !dbg !35
  %106 = extractelement <4 x float> %100, i64 2, !dbg !34
  %107 = fmul float %106, 0x3F847AE140000000, !dbg !35
  %108 = extractelement <4 x float> %100, i64 3, !dbg !34
  %109 = fmul float %108, 0x3F847AE140000000, !dbg !35
  %110 = extractelement <4 x i1> %101, i64 0, !dbg !34
  %111 = select i1 %110, float %102, float %103, !dbg !34
  %112 = extractelement <4 x i1> %101, i64 1, !dbg !34
  %113 = select i1 %112, float %104, float %105, !dbg !34
  %114 = extractelement <4 x i1> %101, i64 2, !dbg !34
  %115 = select i1 %114, float %106, float %107, !dbg !34
  %116 = extractelement <4 x i1> %101, i64 3, !dbg !34
  %117 = select i1 %116, float %108, float %109, !dbg !34
  %118 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !28
  %119 = insertelement <4 x i32> %118, i32 %75, i64 1, !dbg !28
  %120 = insertelement <4 x i32> %119, i32 %76, i64 2, !dbg !28
  %121 = insertelement <4 x i32> %120, i32 %77, i64 3, !dbg !28
  %122 = bitcast <4 x i32> %121 to <4 x float>, !dbg !28
  %123 = fadd <4 x float> %99, %122, !dbg !32
  %124 = fcmp ogt <4 x float> %123, zeroinitializer, !dbg !33
  %125 = extractelement <4 x float> %123, i64 0, !dbg !34
  %126 = fmul float %125, 0x3F847AE140000000, !dbg !35
  %127 = extractelement <4 x float> %123, i64 1, !dbg !34
  %128 = fmul float %127, 0x3F847AE140000000, !dbg !35
  %129 = extractelement <4 x float> %123, i64 2, !dbg !34
  %130 = fmul float %129, 0x3F847AE140000000, !dbg !35
  %131 = extractelement <4 x float> %123, i64 3, !dbg !34
  %132 = fmul float %131, 0x3F847AE140000000, !dbg !35
  %133 = extractelement <4 x i1> %124, i64 0, !dbg !34
  %134 = select i1 %133, float %125, float %126, !dbg !34
  %135 = extractelement <4 x i1> %124, i64 1, !dbg !34
  %136 = select i1 %135, float %127, float %128, !dbg !34
  %137 = extractelement <4 x i1> %124, i64 2, !dbg !34
  %138 = select i1 %137, float %129, float %130, !dbg !34
  %139 = extractelement <4 x i1> %124, i64 3, !dbg !34
  %140 = select i1 %139, float %131, float %132, !dbg !34
  %141 = insertelement <4 x i32> poison, i32 %79, i64 0, !dbg !28
  %142 = insertelement <4 x i32> %141, i32 %80, i64 1, !dbg !28
  %143 = insertelement <4 x i32> %142, i32 %81, i64 2, !dbg !28
  %144 = insertelement <4 x i32> %143, i32 %82, i64 3, !dbg !28
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !28
  %146 = fadd <4 x float> %99, %145, !dbg !32
  %147 = fcmp ogt <4 x float> %146, zeroinitializer, !dbg !33
  %148 = extractelement <4 x float> %146, i64 0, !dbg !34
  %149 = fmul float %148, 0x3F847AE140000000, !dbg !35
  %150 = extractelement <4 x float> %146, i64 1, !dbg !34
  %151 = fmul float %150, 0x3F847AE140000000, !dbg !35
  %152 = extractelement <4 x float> %146, i64 2, !dbg !34
  %153 = fmul float %152, 0x3F847AE140000000, !dbg !35
  %154 = extractelement <4 x float> %146, i64 3, !dbg !34
  %155 = fmul float %154, 0x3F847AE140000000, !dbg !35
  %156 = extractelement <4 x i1> %147, i64 0, !dbg !34
  %157 = select i1 %156, float %148, float %149, !dbg !34
  %158 = extractelement <4 x i1> %147, i64 1, !dbg !34
  %159 = select i1 %158, float %150, float %151, !dbg !34
  %160 = extractelement <4 x i1> %147, i64 2, !dbg !34
  %161 = select i1 %160, float %152, float %153, !dbg !34
  %162 = extractelement <4 x i1> %147, i64 3, !dbg !34
  %163 = select i1 %162, float %154, float %155, !dbg !34
  %164 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !28
  %165 = insertelement <4 x i32> %164, i32 %85, i64 1, !dbg !28
  %166 = insertelement <4 x i32> %165, i32 %86, i64 2, !dbg !28
  %167 = insertelement <4 x i32> %166, i32 %87, i64 3, !dbg !28
  %168 = bitcast <4 x i32> %167 to <4 x float>, !dbg !28
  %169 = fadd <4 x float> %99, %168, !dbg !32
  %170 = fcmp ogt <4 x float> %169, zeroinitializer, !dbg !33
  %171 = extractelement <4 x float> %169, i64 0, !dbg !34
  %172 = fmul float %171, 0x3F847AE140000000, !dbg !35
  %173 = extractelement <4 x float> %169, i64 1, !dbg !34
  %174 = fmul float %173, 0x3F847AE140000000, !dbg !35
  %175 = extractelement <4 x float> %169, i64 2, !dbg !34
  %176 = fmul float %175, 0x3F847AE140000000, !dbg !35
  %177 = extractelement <4 x float> %169, i64 3, !dbg !34
  %178 = fmul float %177, 0x3F847AE140000000, !dbg !35
  %179 = extractelement <4 x i1> %170, i64 0, !dbg !34
  %180 = select i1 %179, float %171, float %172, !dbg !34
  %181 = extractelement <4 x i1> %170, i64 1, !dbg !34
  %182 = select i1 %181, float %173, float %174, !dbg !34
  %183 = extractelement <4 x i1> %170, i64 2, !dbg !34
  %184 = select i1 %183, float %175, float %176, !dbg !34
  %185 = extractelement <4 x i1> %170, i64 3, !dbg !34
  %186 = select i1 %185, float %177, float %178, !dbg !34
  %187 = zext <4 x i1> %101 to <4 x i8>, !dbg !36
  %188 = bitcast <4 x i8> %187 to i32, !dbg !36
  %189 = zext <4 x i1> %124 to <4 x i8>, !dbg !36
  %190 = bitcast <4 x i8> %189 to i32, !dbg !36
  %191 = zext <4 x i1> %147 to <4 x i8>, !dbg !36
  %192 = bitcast <4 x i8> %191 to i32, !dbg !36
  %193 = zext <4 x i1> %170 to <4 x i8>, !dbg !36
  %194 = bitcast <4 x i8> %193 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %190, i32 %192, i32 %194, ptr addrspace(1) %91, i1 %29) #2, !dbg !36
  %195 = shl nsw i32 %.decomposed, 1, !dbg !37
  %196 = shl nsw i32 %.decomposed32, 1, !dbg !37
  %197 = shl nsw i32 %.decomposed34, 1, !dbg !37
  %198 = shl nsw i32 %.decomposed36, 1, !dbg !37
  %199 = shl nsw i32 %.decomposed38, 1, !dbg !37
  %200 = shl nsw i32 %53, 3, !dbg !38
  %201 = shl i32 %39, 4, !dbg !39
  %202 = shl i32 %41, 4, !dbg !39
  %203 = shl i32 %49, 4, !dbg !39
  %204 = shl i32 %43, 4, !dbg !39
  %205 = shl i32 %50, 4, !dbg !39
  %206 = shl i32 %45, 4, !dbg !39
  %207 = shl i32 %51, 4, !dbg !39
  %208 = shl i32 %47, 4, !dbg !39
  %209 = shl i32 %54, 6, !dbg !40
  %210 = add i32 %200, %209, !dbg !41
  %211 = add i32 %210, %195, !dbg !42
  %212 = add i32 %211, %201, !dbg !43
  %213 = add i32 %210, %196, !dbg !42
  %214 = add i32 %213, %202, !dbg !43
  %215 = add i32 %211, %203, !dbg !43
  %216 = add i32 %210, %197, !dbg !42
  %217 = add i32 %216, %204, !dbg !43
  %218 = add i32 %211, %205, !dbg !43
  %219 = add i32 %210, %198, !dbg !42
  %220 = add i32 %219, %206, !dbg !43
  %221 = add i32 %211, %207, !dbg !43
  %222 = add i32 %210, %199, !dbg !42
  %223 = add i32 %222, %208, !dbg !43
  %224 = sext i32 %212 to i64, !dbg !44
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %224, !dbg !44
  %226 = sext i32 %214 to i64, !dbg !44
  %227 = getelementptr float, ptr addrspace(1) %3, i64 %226, !dbg !44
  %228 = sext i32 %215 to i64, !dbg !44
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %228, !dbg !44
  %230 = sext i32 %217 to i64, !dbg !44
  %231 = getelementptr float, ptr addrspace(1) %3, i64 %230, !dbg !44
  %232 = sext i32 %218 to i64, !dbg !44
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %232, !dbg !44
  %234 = sext i32 %220 to i64, !dbg !44
  %235 = getelementptr float, ptr addrspace(1) %3, i64 %234, !dbg !44
  %236 = sext i32 %221 to i64, !dbg !44
  %237 = getelementptr float, ptr addrspace(1) %3, i64 %236, !dbg !44
  %238 = sext i32 %223 to i64, !dbg !44
  %239 = getelementptr float, ptr addrspace(1) %3, i64 %238, !dbg !44
  %240 = and i32 %11, 510, !dbg !45
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !45
  %242 = bitcast float %111 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #2, !dbg !45
  %243 = getelementptr inbounds i8, ptr addrspace(3) %241, i32 1032, !dbg !45
  %244 = bitcast float %113 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %245 = lshr i32 %11, 7, !dbg !45
  %246 = and i32 %245, 2, !dbg !45
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !45
  %248 = getelementptr float, ptr addrspace(3) %247, i32 %240, !dbg !45
  %249 = load <2 x i32>, ptr addrspace(3) %248, align 8, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %250 = bitcast float %115 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %250, i1 true) #2, !dbg !45
  %251 = bitcast float %117 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %251, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %252 = load <2 x i32>, ptr addrspace(3) %248, align 8, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %253 = bitcast float %134 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %253, i1 true) #2, !dbg !45
  %254 = bitcast float %136 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %254, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %255 = load <2 x i32>, ptr addrspace(3) %248, align 8, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %256 = bitcast float %138 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %256, i1 true) #2, !dbg !45
  %257 = bitcast float %140 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %257, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %258 = load <2 x i32>, ptr addrspace(3) %248, align 8, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %259 = bitcast float %157 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %259, i1 true) #2, !dbg !45
  %260 = bitcast float %159 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %260, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %261 = load <2 x i32>, ptr addrspace(3) %248, align 8, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %262 = bitcast float %161 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %262, i1 true) #2, !dbg !45
  %263 = bitcast float %163 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %263, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %264 = load <2 x i32>, ptr addrspace(3) %248, align 8, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %265 = bitcast float %180 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %265, i1 true) #2, !dbg !45
  %266 = bitcast float %182 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %266, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %267 = load <2 x i32>, ptr addrspace(3) %248, align 8, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %268 = bitcast float %184 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %268, i1 true) #2, !dbg !45
  %269 = bitcast float %186 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %269, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %270 = load <2 x i32>, ptr addrspace(3) %248, align 8, !dbg !45
  %.extract = extractelement <2 x i32> %249, i64 0, !dbg !45
  %.extract16 = extractelement <2 x i32> %249, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract16, ptr addrspace(1) %225, i1 %30) #2, !dbg !45
  %.extract17 = extractelement <2 x i32> %252, i64 0, !dbg !45
  %.extract18 = extractelement <2 x i32> %252, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract17, i32 %.extract18, ptr addrspace(1) %227, i1 %31) #2, !dbg !45
  %.extract19 = extractelement <2 x i32> %255, i64 0, !dbg !45
  %.extract20 = extractelement <2 x i32> %255, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract19, i32 %.extract20, ptr addrspace(1) %229, i1 %32) #2, !dbg !45
  %.extract21 = extractelement <2 x i32> %258, i64 0, !dbg !45
  %.extract22 = extractelement <2 x i32> %258, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract21, i32 %.extract22, ptr addrspace(1) %231, i1 %33) #2, !dbg !45
  %.extract23 = extractelement <2 x i32> %261, i64 0, !dbg !45
  %.extract24 = extractelement <2 x i32> %261, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract23, i32 %.extract24, ptr addrspace(1) %233, i1 %34) #2, !dbg !45
  %.extract25 = extractelement <2 x i32> %264, i64 0, !dbg !45
  %.extract26 = extractelement <2 x i32> %264, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract25, i32 %.extract26, ptr addrspace(1) %235, i1 %35) #2, !dbg !45
  %.extract27 = extractelement <2 x i32> %267, i64 0, !dbg !45
  %.extract28 = extractelement <2 x i32> %267, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract27, i32 %.extract28, ptr addrspace(1) %237, i1 %36) #2, !dbg !45
  %.extract29 = extractelement <2 x i32> %270, i64 0, !dbg !45
  %.extract30 = extractelement <2 x i32> %270, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract29, i32 %.extract30, ptr addrspace(1) %239, i1 %37) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgsps77nz3pu676ewfs77duz5y5cmdrpprxw2slizgpboezgm3v6.py", directory: "inductor_cache/gs")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_pixel_shuffle_9", linkageName: "triton_poi_fused_convolution_leaky_relu_pixel_shuffle_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 21, scope: !7)
!23 = !DILocation(line: 34, column: 26, scope: !7)
!24 = !DILocation(line: 35, column: 19, scope: !7)
!25 = !DILocation(line: 36, column: 38, scope: !7)
!26 = !DILocation(line: 36, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 43, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 35, scope: !7)
!31 = !DILocation(line: 44, column: 25, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 43, column: 32, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 44, column: 44, scope: !7)
!37 = !DILocation(line: 45, column: 32, scope: !7)
!38 = !DILocation(line: 45, column: 39, scope: !7)
!39 = !DILocation(line: 45, column: 47, scope: !7)
!40 = !DILocation(line: 45, column: 55, scope: !7)
!41 = !DILocation(line: 45, column: 37, scope: !7)
!42 = !DILocation(line: 45, column: 44, scope: !7)
!43 = !DILocation(line: 45, column: 52, scope: !7)
!44 = !DILocation(line: 45, column: 25, scope: !7)
!45 = !DILocation(line: 45, column: 66, scope: !7)
!46 = !DILocation(line: 45, column: 4, scope: !7)
