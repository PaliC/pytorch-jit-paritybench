; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_leaky_relu_max_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = and i32 %7, 63, !dbg !11
  %11 = sdiv i32 %6, 128, !dbg !12
  %12 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !13
  %13 = insertelement <2 x i32> %12, i32 %6, i64 1, !dbg !13
  %14 = srem <2 x i32> %13, <i32 64, i32 128>, !dbg !13
  %15 = sdiv i32 %6, 8192, !dbg !14
  %16 = shl nuw nsw i32 %10, 7, !dbg !15
  %17 = extractelement <2 x i32> %14, i64 1, !dbg !16
  %18 = add nsw i32 %17, %16, !dbg !17
  %19 = shl i32 %11, 13, !dbg !18
  %20 = add i32 %18, %19, !dbg !19
  %21 = sext i32 %20 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !21
  %24 = bitcast i32 %23 to float, !dbg !21
  %25 = fcmp ogt float %24, 0.000000e+00, !dbg !22
  %26 = fmul float %24, 0x3FC99999A0000000, !dbg !23
  %27 = select i1 %25, float %24, float %26, !dbg !24
  %28 = bitcast float %27 to i32, !dbg !25
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 16, i32 31), !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = fcmp ogt float %27, %30, !dbg !29
  %32 = fcmp uno float %27, 0.000000e+00, !dbg !31
  %33 = or i1 %31, %32, !dbg !32
  %34 = select i1 %33, float %27, float %30, !dbg !33
  %35 = bitcast float %34 to i32, !dbg !25
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 8, i32 31), !dbg !25
  %37 = bitcast i32 %36 to float, !dbg !25
  %38 = fcmp ogt float %34, %37, !dbg !29
  %39 = fcmp uno float %34, 0.000000e+00, !dbg !31
  %40 = or i1 %38, %39, !dbg !32
  %41 = select i1 %40, float %34, float %37, !dbg !33
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fcmp ogt float %41, %44, !dbg !29
  %46 = fcmp uno float %41, 0.000000e+00, !dbg !31
  %47 = or i1 %45, %46, !dbg !32
  %48 = select i1 %47, float %41, float %44, !dbg !33
  %49 = bitcast float %48 to i32, !dbg !25
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !25
  %51 = bitcast i32 %50 to float, !dbg !25
  %52 = fcmp ogt float %48, %51, !dbg !29
  %53 = fcmp uno float %48, 0.000000e+00, !dbg !31
  %54 = or i1 %52, %53, !dbg !32
  %55 = select i1 %54, float %48, float %51, !dbg !33
  %56 = bitcast float %55 to i32, !dbg !25
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !25
  %58 = bitcast i32 %57 to float, !dbg !25
  %59 = fcmp ogt float %55, %58, !dbg !29
  %60 = fcmp uno float %55, 0.000000e+00, !dbg !31
  %61 = or i1 %59, %60, !dbg !32
  %62 = icmp eq i32 %8, 0, !dbg !25
  %63 = and i32 %9, 1, !dbg !25
  %64 = zext nneg i32 %63 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i64 %64, !dbg !25
  %66 = select i1 %61, i32 %56, i32 %57, !dbg !33
  %67 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %67, i1 %62) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %68 = icmp slt i32 %7, 2, !dbg !25
  %69 = sext i32 %7 to i64, !dbg !25
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i64 %69, !dbg !25
  %71 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %68) #3, !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = fcmp ogt float %72, %74, !dbg !29
  %76 = fcmp uno float %72, 0.000000e+00, !dbg !31
  %77 = or i1 %76, %75, !dbg !32
  %78 = and i32 %7, 1, !dbg !25
  %79 = icmp eq i32 %78, 0, !dbg !25
  %80 = and i1 %68, %79, !dbg !25
  %81 = select i1 %77, i32 %71, i32 %73, !dbg !33
  %82 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %82, i1 %80) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %83 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 16, i32 31), !dbg !34
  %85 = bitcast i32 %84 to float, !dbg !34
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %10, i32 16, i32 31), !dbg !34
  %87 = fcmp ogt float %27, %85, !dbg !36
  %88 = fcmp oeq float %27, %85, !dbg !37
  %89 = fcmp uno float %85, 0.000000e+00, !dbg !38
  %90 = xor i1 %89, true, !dbg !39
  %91 = and i1 %32, %90, !dbg !40
  %92 = or i1 %87, %91, !dbg !41
  %93 = and i1 %32, %89, !dbg !42
  %94 = or i1 %88, %93, !dbg !43
  %95 = icmp slt i32 %10, %86, !dbg !44
  %96 = and i1 %95, %94, !dbg !45
  %97 = or i1 %92, %96, !dbg !46
  %98 = select i1 %97, float %27, float %85, !dbg !47
  %99 = select i1 %97, i32 %10, i32 %86, !dbg !48
  %100 = bitcast float %98 to i32, !dbg !34
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !34
  %102 = bitcast i32 %101 to float, !dbg !34
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 8, i32 31), !dbg !34
  %104 = fcmp ogt float %98, %102, !dbg !36
  %105 = fcmp oeq float %98, %102, !dbg !37
  %106 = fcmp uno float %98, 0.000000e+00, !dbg !49
  %107 = fcmp uno float %102, 0.000000e+00, !dbg !38
  %108 = xor i1 %107, true, !dbg !39
  %109 = and i1 %106, %108, !dbg !40
  %110 = or i1 %104, %109, !dbg !41
  %111 = and i1 %107, %106, !dbg !42
  %112 = or i1 %105, %111, !dbg !43
  %113 = icmp slt i32 %99, %103, !dbg !44
  %114 = and i1 %113, %112, !dbg !45
  %115 = or i1 %110, %114, !dbg !46
  %116 = select i1 %115, float %98, float %102, !dbg !47
  %117 = select i1 %115, i32 %99, i32 %103, !dbg !48
  %118 = bitcast float %116 to i32, !dbg !34
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !34
  %120 = bitcast i32 %119 to float, !dbg !34
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !34
  %122 = fcmp ogt float %116, %120, !dbg !36
  %123 = fcmp oeq float %116, %120, !dbg !37
  %124 = fcmp uno float %116, 0.000000e+00, !dbg !49
  %125 = fcmp uno float %120, 0.000000e+00, !dbg !38
  %126 = xor i1 %125, true, !dbg !39
  %127 = and i1 %124, %126, !dbg !40
  %128 = or i1 %122, %127, !dbg !41
  %129 = and i1 %125, %124, !dbg !42
  %130 = or i1 %123, %129, !dbg !43
  %131 = icmp slt i32 %117, %121, !dbg !44
  %132 = and i1 %131, %130, !dbg !45
  %133 = or i1 %128, %132, !dbg !46
  %134 = select i1 %133, float %116, float %120, !dbg !47
  %135 = select i1 %133, i32 %117, i32 %121, !dbg !48
  %136 = bitcast float %134 to i32, !dbg !34
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !34
  %138 = bitcast i32 %137 to float, !dbg !34
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !34
  %140 = fcmp ogt float %134, %138, !dbg !36
  %141 = fcmp oeq float %134, %138, !dbg !37
  %142 = fcmp uno float %134, 0.000000e+00, !dbg !49
  %143 = fcmp uno float %138, 0.000000e+00, !dbg !38
  %144 = xor i1 %143, true, !dbg !39
  %145 = and i1 %142, %144, !dbg !40
  %146 = or i1 %140, %145, !dbg !41
  %147 = and i1 %143, %142, !dbg !42
  %148 = or i1 %141, %147, !dbg !43
  %149 = icmp slt i32 %135, %139, !dbg !44
  %150 = and i1 %149, %148, !dbg !45
  %151 = or i1 %146, %150, !dbg !46
  %152 = select i1 %151, float %134, float %138, !dbg !47
  %153 = select i1 %151, i32 %135, i32 %139, !dbg !48
  %154 = bitcast float %152 to i32, !dbg !34
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 1, i32 31), !dbg !34
  %156 = bitcast i32 %155 to float, !dbg !34
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 1, i32 31), !dbg !34
  %158 = fcmp ogt float %152, %156, !dbg !36
  %159 = fcmp oeq float %152, %156, !dbg !37
  %160 = fcmp uno float %152, 0.000000e+00, !dbg !49
  %161 = fcmp uno float %156, 0.000000e+00, !dbg !38
  %162 = xor i1 %161, true, !dbg !39
  %163 = and i1 %160, %162, !dbg !40
  %164 = or i1 %158, %163, !dbg !41
  %165 = and i1 %161, %160, !dbg !42
  %166 = or i1 %159, %165, !dbg !43
  %167 = icmp slt i32 %153, %157, !dbg !44
  %168 = and i1 %167, %166, !dbg !45
  %169 = or i1 %164, %168, !dbg !46
  %170 = select i1 %169, i32 %153, i32 %157, !dbg !48
  %171 = select i1 %169, i32 %154, i32 %155, !dbg !47
  %172 = insertelement <1 x i32> poison, i32 %171, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %172, i1 %62) #3, !dbg !34
  %173 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), i64 %64, !dbg !34
  %174 = insertelement <1 x i32> poison, i32 %170, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 %62) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %175 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %68) #3, !dbg !34
  %176 = bitcast i32 %175 to float, !dbg !34
  %177 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), i64 %69, !dbg !34
  %178 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %177, i1 %68) #3, !dbg !34
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 1, i32 31), !dbg !34
  %180 = bitcast i32 %179 to float, !dbg !34
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !34
  %182 = fcmp ogt float %176, %180, !dbg !36
  %183 = fcmp oeq float %176, %180, !dbg !37
  %184 = fcmp uno float %176, 0.000000e+00, !dbg !49
  %185 = fcmp uno float %180, 0.000000e+00, !dbg !38
  %186 = xor i1 %185, true, !dbg !39
  %187 = and i1 %184, %186, !dbg !40
  %188 = or i1 %182, %187, !dbg !41
  %189 = and i1 %184, %185, !dbg !42
  %190 = or i1 %183, %189, !dbg !43
  %191 = icmp slt i32 %178, %181, !dbg !44
  %192 = and i1 %191, %190, !dbg !45
  %193 = or i1 %188, %192, !dbg !46
  %194 = select i1 %193, i32 %178, i32 %181, !dbg !48
  %195 = select i1 %193, i32 %175, i32 %179, !dbg !47
  %196 = insertelement <1 x i32> poison, i32 %195, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %196, i1 %80) #3, !dbg !34
  %197 = insertelement <1 x i32> poison, i32 %194, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %197, i1 %80) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %198 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), align 8, !dbg !34
  %199 = shl nsw i32 %17, 6, !dbg !16
  %200 = extractelement <2 x i32> %14, i64 0, !dbg !50
  %201 = add nsw i32 %200, %199, !dbg !50
  %202 = shl nsw i32 %15, 13, !dbg !51
  %203 = add i32 %201, %202, !dbg !52
  %204 = sext i32 %203 to i64, !dbg !53
  %205 = getelementptr float, ptr addrspace(1) %1, i64 %204, !dbg !53
  %206 = icmp eq i32 %10, 0, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %83, ptr addrspace(1) %205, i1 %206) #3, !dbg !54
  %207 = getelementptr i64, ptr addrspace(1) %2, i64 %204, !dbg !55
  %208 = sext i32 %198 to i64, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %208, ptr addrspace(1) %207, i1 %206) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py", directory: "inductor_cache/wz")
!4 = !{ptr @triton_per_fused_leaky_relu_max_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_leaky_relu_max_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_leaky_relu_max_3", linkageName: "triton_per_fused_leaky_relu_max_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 19, scope: !7)
!13 = !DILocation(line: 32, column: 28, scope: !7)
!14 = !DILocation(line: 33, column: 19, scope: !7)
!15 = !DILocation(line: 34, column: 39, scope: !7)
!16 = !DILocation(line: 45, column: 33, scope: !7)
!17 = !DILocation(line: 34, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 49, scope: !7)
!19 = !DILocation(line: 34, column: 44, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 54, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 38, column: 18, scope: !7)
!24 = !DILocation(line: 39, column: 32, scope: !7)
!25 = !DILocation(line: 131, column: 29, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 41, column: 37, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !28)
!32 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !28)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !28)
!34 = !DILocation(line: 173, column: 42, scope: !26, inlinedAt: !35)
!35 = !DILocation(line: 43, column: 68, scope: !7)
!36 = !DILocation(line: 152, column: 21, scope: !30, inlinedAt: !35)
!37 = !DILocation(line: 153, column: 23, scope: !30, inlinedAt: !35)
!38 = !DILocation(line: 156, column: 29, scope: !30, inlinedAt: !35)
!39 = !DILocation(line: 157, column: 32, scope: !30, inlinedAt: !35)
!40 = !DILocation(line: 157, column: 28, scope: !30, inlinedAt: !35)
!41 = !DILocation(line: 157, column: 16, scope: !30, inlinedAt: !35)
!42 = !DILocation(line: 159, column: 29, scope: !30, inlinedAt: !35)
!43 = !DILocation(line: 159, column: 17, scope: !30, inlinedAt: !35)
!44 = !DILocation(line: 162, column: 31, scope: !30, inlinedAt: !35)
!45 = !DILocation(line: 162, column: 21, scope: !30, inlinedAt: !35)
!46 = !DILocation(line: 162, column: 12, scope: !30, inlinedAt: !35)
!47 = !DILocation(line: 163, column: 35, scope: !30, inlinedAt: !35)
!48 = !DILocation(line: 163, column: 69, scope: !30, inlinedAt: !35)
!49 = !DILocation(line: 155, column: 29, scope: !30, inlinedAt: !35)
!50 = !DILocation(line: 45, column: 30, scope: !7)
!51 = !DILocation(line: 45, column: 43, scope: !7)
!52 = !DILocation(line: 45, column: 38, scope: !7)
!53 = !DILocation(line: 45, column: 25, scope: !7)
!54 = !DILocation(line: 45, column: 54, scope: !7)
!55 = !DILocation(line: 46, column: 25, scope: !7)
!56 = !DILocation(line: 46, column: 54, scope: !7)
!57 = !DILocation(line: 46, column: 4, scope: !7)
