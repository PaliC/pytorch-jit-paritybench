; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__softmax_max_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = or disjoint i32 %10, 32, !dbg !12
  %12 = or disjoint i32 %10, 64, !dbg !12
  %13 = or disjoint i32 %10, 96, !dbg !12
  %14 = and i32 %8, 127, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = icmp slt i32 %15, 128, !dbg !14
  %21 = icmp slt i32 %16, 128, !dbg !14
  %22 = icmp slt i32 %17, 128, !dbg !14
  %23 = icmp slt i32 %18, 128, !dbg !14
  %24 = icmp slt i32 %19, 128, !dbg !14
  %25 = shl i32 %8, 2, !dbg !15
  %26 = and i32 %25, 28, !dbg !15
  %27 = or disjoint i32 %26, 1, !dbg !15
  %28 = or disjoint i32 %26, 2, !dbg !15
  %29 = or disjoint i32 %26, 3, !dbg !15
  %30 = shl i32 %15, 5, !dbg !16
  %31 = shl i32 %16, 5, !dbg !16
  %32 = shl i32 %17, 5, !dbg !16
  %33 = shl i32 %18, 5, !dbg !16
  %34 = or disjoint i32 %30, %26, !dbg !17
  %35 = or disjoint i32 %31, %26, !dbg !17
  %36 = or disjoint i32 %32, %26, !dbg !17
  %37 = or disjoint i32 %33, %26, !dbg !17
  %38 = sext i32 %34 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !18
  %40 = sext i32 %35 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !18
  %42 = sext i32 %36 to i64, !dbg !18
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !18
  %44 = sext i32 %37 to i64, !dbg !18
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !18
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #3, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !19
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !19
  %51 = bitcast i32 %47 to float, !dbg !19
  %52 = bitcast i32 %48 to float, !dbg !19
  %53 = bitcast i32 %49 to float, !dbg !19
  %54 = bitcast i32 %50 to float, !dbg !19
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !19
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !19
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !19
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !19
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !19
  %60 = bitcast i32 %56 to float, !dbg !19
  %61 = bitcast i32 %57 to float, !dbg !19
  %62 = bitcast i32 %58 to float, !dbg !19
  %63 = bitcast i32 %59 to float, !dbg !19
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #3, !dbg !19
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !19
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !19
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !19
  %69 = bitcast i32 %65 to float, !dbg !19
  %70 = bitcast i32 %66 to float, !dbg !19
  %71 = bitcast i32 %67 to float, !dbg !19
  %72 = bitcast i32 %68 to float, !dbg !19
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !19
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !19
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !19
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !19
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !19
  %78 = bitcast i32 %74 to float, !dbg !19
  %79 = bitcast i32 %75 to float, !dbg !19
  %80 = bitcast i32 %76 to float, !dbg !19
  %81 = bitcast i32 %77 to float, !dbg !19
  %82 = select i1 %20, float %51, float 0xFFF0000000000000, !dbg !20
  %83 = select i1 %20, float %52, float 0xFFF0000000000000, !dbg !20
  %84 = select i1 %20, float %53, float 0xFFF0000000000000, !dbg !20
  %85 = select i1 %20, float %54, float 0xFFF0000000000000, !dbg !20
  %86 = select i1 %21, float %60, float 0xFFF0000000000000, !dbg !20
  %87 = select i1 %21, float %61, float 0xFFF0000000000000, !dbg !20
  %88 = select i1 %21, float %62, float 0xFFF0000000000000, !dbg !20
  %89 = select i1 %21, float %63, float 0xFFF0000000000000, !dbg !20
  %90 = select i1 %22, float %69, float 0xFFF0000000000000, !dbg !20
  %91 = select i1 %22, float %70, float 0xFFF0000000000000, !dbg !20
  %92 = select i1 %22, float %71, float 0xFFF0000000000000, !dbg !20
  %93 = select i1 %22, float %72, float 0xFFF0000000000000, !dbg !20
  %94 = select i1 %23, float %78, float 0xFFF0000000000000, !dbg !20
  %95 = select i1 %23, float %79, float 0xFFF0000000000000, !dbg !20
  %96 = select i1 %23, float %80, float 0xFFF0000000000000, !dbg !20
  %97 = select i1 %23, float %81, float 0xFFF0000000000000, !dbg !20
  %98 = fcmp ogt float %82, %83, !dbg !21
  %99 = fcmp uno float %82, 0.000000e+00, !dbg !26
  %100 = or i1 %98, %99, !dbg !27
  %101 = select i1 %100, float %82, float %83, !dbg !28
  %102 = fcmp ogt float %101, %84, !dbg !21
  %103 = fcmp uno float %101, 0.000000e+00, !dbg !26
  %104 = or i1 %102, %103, !dbg !27
  %105 = select i1 %104, float %101, float %84, !dbg !28
  %106 = fcmp ogt float %105, %85, !dbg !21
  %107 = fcmp uno float %105, 0.000000e+00, !dbg !26
  %108 = or i1 %106, %107, !dbg !27
  %109 = select i1 %108, float %105, float %85, !dbg !28
  %110 = fcmp ogt float %86, %87, !dbg !21
  %111 = fcmp uno float %86, 0.000000e+00, !dbg !26
  %112 = or i1 %110, %111, !dbg !27
  %113 = select i1 %112, float %86, float %87, !dbg !28
  %114 = fcmp ogt float %113, %88, !dbg !21
  %115 = fcmp uno float %113, 0.000000e+00, !dbg !26
  %116 = or i1 %114, %115, !dbg !27
  %117 = select i1 %116, float %113, float %88, !dbg !28
  %118 = fcmp ogt float %117, %89, !dbg !21
  %119 = fcmp uno float %117, 0.000000e+00, !dbg !26
  %120 = or i1 %118, %119, !dbg !27
  %121 = select i1 %120, float %117, float %89, !dbg !28
  %122 = fcmp ogt float %90, %91, !dbg !21
  %123 = fcmp uno float %90, 0.000000e+00, !dbg !26
  %124 = or i1 %122, %123, !dbg !27
  %125 = select i1 %124, float %90, float %91, !dbg !28
  %126 = fcmp ogt float %125, %92, !dbg !21
  %127 = fcmp uno float %125, 0.000000e+00, !dbg !26
  %128 = or i1 %126, %127, !dbg !27
  %129 = select i1 %128, float %125, float %92, !dbg !28
  %130 = fcmp ogt float %129, %93, !dbg !21
  %131 = fcmp uno float %129, 0.000000e+00, !dbg !26
  %132 = or i1 %130, %131, !dbg !27
  %133 = select i1 %132, float %129, float %93, !dbg !28
  %134 = fcmp ogt float %94, %95, !dbg !21
  %135 = fcmp uno float %94, 0.000000e+00, !dbg !26
  %136 = or i1 %134, %135, !dbg !27
  %137 = select i1 %136, float %94, float %95, !dbg !28
  %138 = fcmp ogt float %137, %96, !dbg !21
  %139 = fcmp uno float %137, 0.000000e+00, !dbg !26
  %140 = or i1 %138, %139, !dbg !27
  %141 = select i1 %140, float %137, float %96, !dbg !28
  %142 = fcmp ogt float %141, %97, !dbg !21
  %143 = fcmp uno float %141, 0.000000e+00, !dbg !26
  %144 = or i1 %142, %143, !dbg !27
  %145 = select i1 %144, float %141, float %97, !dbg !28
  %146 = bitcast float %109 to i32, !dbg !29
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 4, i32 31), !dbg !29
  %148 = bitcast i32 %147 to float, !dbg !29
  %149 = fcmp ogt float %109, %148, !dbg !21
  %150 = fcmp uno float %109, 0.000000e+00, !dbg !26
  %151 = or i1 %149, %150, !dbg !27
  %152 = select i1 %151, float %109, float %148, !dbg !28
  %153 = bitcast float %152 to i32, !dbg !29
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 2, i32 31), !dbg !29
  %155 = bitcast i32 %154 to float, !dbg !29
  %156 = fcmp ogt float %152, %155, !dbg !21
  %157 = fcmp uno float %152, 0.000000e+00, !dbg !26
  %158 = or i1 %156, %157, !dbg !27
  %159 = select i1 %158, float %152, float %155, !dbg !28
  %160 = bitcast float %159 to i32, !dbg !29
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 1, i32 31), !dbg !29
  %162 = bitcast i32 %161 to float, !dbg !29
  %163 = fcmp ogt float %159, %162, !dbg !21
  %164 = fcmp uno float %159, 0.000000e+00, !dbg !26
  %165 = or i1 %163, %164, !dbg !27
  %166 = select i1 %165, float %159, float %162, !dbg !28
  %167 = bitcast float %121 to i32, !dbg !29
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !29
  %169 = bitcast i32 %168 to float, !dbg !29
  %170 = fcmp ogt float %121, %169, !dbg !21
  %171 = fcmp uno float %121, 0.000000e+00, !dbg !26
  %172 = or i1 %170, %171, !dbg !27
  %173 = select i1 %172, float %121, float %169, !dbg !28
  %174 = bitcast float %173 to i32, !dbg !29
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 2, i32 31), !dbg !29
  %176 = bitcast i32 %175 to float, !dbg !29
  %177 = fcmp ogt float %173, %176, !dbg !21
  %178 = fcmp uno float %173, 0.000000e+00, !dbg !26
  %179 = or i1 %177, %178, !dbg !27
  %180 = select i1 %179, float %173, float %176, !dbg !28
  %181 = bitcast float %180 to i32, !dbg !29
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !29
  %183 = bitcast i32 %182 to float, !dbg !29
  %184 = fcmp ogt float %180, %183, !dbg !21
  %185 = fcmp uno float %180, 0.000000e+00, !dbg !26
  %186 = or i1 %184, %185, !dbg !27
  %187 = select i1 %186, float %180, float %183, !dbg !28
  %188 = bitcast float %133 to i32, !dbg !29
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 4, i32 31), !dbg !29
  %190 = bitcast i32 %189 to float, !dbg !29
  %191 = fcmp ogt float %133, %190, !dbg !21
  %192 = fcmp uno float %133, 0.000000e+00, !dbg !26
  %193 = or i1 %191, %192, !dbg !27
  %194 = select i1 %193, float %133, float %190, !dbg !28
  %195 = bitcast float %194 to i32, !dbg !29
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 2, i32 31), !dbg !29
  %197 = bitcast i32 %196 to float, !dbg !29
  %198 = fcmp ogt float %194, %197, !dbg !21
  %199 = fcmp uno float %194, 0.000000e+00, !dbg !26
  %200 = or i1 %198, %199, !dbg !27
  %201 = select i1 %200, float %194, float %197, !dbg !28
  %202 = bitcast float %201 to i32, !dbg !29
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !29
  %204 = bitcast i32 %203 to float, !dbg !29
  %205 = fcmp ogt float %201, %204, !dbg !21
  %206 = fcmp uno float %201, 0.000000e+00, !dbg !26
  %207 = or i1 %205, %206, !dbg !27
  %208 = select i1 %207, float %201, float %204, !dbg !28
  %209 = bitcast float %145 to i32, !dbg !29
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 4, i32 31), !dbg !29
  %211 = bitcast i32 %210 to float, !dbg !29
  %212 = fcmp ogt float %145, %211, !dbg !21
  %213 = fcmp uno float %145, 0.000000e+00, !dbg !26
  %214 = or i1 %212, %213, !dbg !27
  %215 = select i1 %214, float %145, float %211, !dbg !28
  %216 = bitcast float %215 to i32, !dbg !29
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 2, i32 31), !dbg !29
  %218 = bitcast i32 %217 to float, !dbg !29
  %219 = fcmp ogt float %215, %218, !dbg !21
  %220 = fcmp uno float %215, 0.000000e+00, !dbg !26
  %221 = or i1 %219, %220, !dbg !27
  %222 = select i1 %221, float %215, float %218, !dbg !28
  %223 = bitcast float %222 to i32, !dbg !29
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 1, i32 31), !dbg !29
  %225 = bitcast i32 %224 to float, !dbg !29
  %226 = fcmp ogt float %222, %225, !dbg !21
  %227 = fcmp uno float %222, 0.000000e+00, !dbg !26
  %228 = or i1 %226, %227, !dbg !27
  %229 = select i1 %228, float %222, float %225, !dbg !28
  %230 = fsub float %166, %51, !dbg !30
  %231 = fsub float %166, %52, !dbg !30
  %232 = fsub float %166, %53, !dbg !30
  %233 = fsub float %166, %54, !dbg !30
  %234 = fsub float %187, %60, !dbg !30
  %235 = fsub float %187, %61, !dbg !30
  %236 = fsub float %187, %62, !dbg !30
  %237 = fsub float %187, %63, !dbg !30
  %238 = fsub float %208, %69, !dbg !30
  %239 = fsub float %208, %70, !dbg !30
  %240 = fsub float %208, %71, !dbg !30
  %241 = fsub float %208, %72, !dbg !30
  %242 = fsub float %229, %78, !dbg !30
  %243 = fsub float %229, %79, !dbg !30
  %244 = fsub float %229, %80, !dbg !30
  %245 = fsub float %229, %81, !dbg !30
  %246 = select i1 %20, float %230, float 0xFFF0000000000000, !dbg !31
  %247 = select i1 %20, float %231, float 0xFFF0000000000000, !dbg !31
  %248 = select i1 %20, float %232, float 0xFFF0000000000000, !dbg !31
  %249 = select i1 %20, float %233, float 0xFFF0000000000000, !dbg !31
  %250 = select i1 %21, float %234, float 0xFFF0000000000000, !dbg !31
  %251 = select i1 %21, float %235, float 0xFFF0000000000000, !dbg !31
  %252 = select i1 %21, float %236, float 0xFFF0000000000000, !dbg !31
  %253 = select i1 %21, float %237, float 0xFFF0000000000000, !dbg !31
  %254 = select i1 %22, float %238, float 0xFFF0000000000000, !dbg !31
  %255 = select i1 %22, float %239, float 0xFFF0000000000000, !dbg !31
  %256 = select i1 %22, float %240, float 0xFFF0000000000000, !dbg !31
  %257 = select i1 %22, float %241, float 0xFFF0000000000000, !dbg !31
  %258 = select i1 %23, float %242, float 0xFFF0000000000000, !dbg !31
  %259 = select i1 %23, float %243, float 0xFFF0000000000000, !dbg !31
  %260 = select i1 %23, float %244, float 0xFFF0000000000000, !dbg !31
  %261 = select i1 %23, float %245, float 0xFFF0000000000000, !dbg !31
  %262 = fcmp ogt float %246, %247, !dbg !32
  %263 = fcmp uno float %246, 0.000000e+00, !dbg !34
  %264 = or i1 %262, %263, !dbg !35
  %265 = select i1 %264, float %246, float %247, !dbg !36
  %266 = fcmp ogt float %265, %248, !dbg !32
  %267 = fcmp uno float %265, 0.000000e+00, !dbg !34
  %268 = or i1 %266, %267, !dbg !35
  %269 = select i1 %268, float %265, float %248, !dbg !36
  %270 = fcmp ogt float %269, %249, !dbg !32
  %271 = fcmp uno float %269, 0.000000e+00, !dbg !34
  %272 = or i1 %270, %271, !dbg !35
  %273 = select i1 %272, float %269, float %249, !dbg !36
  %274 = fcmp ogt float %250, %251, !dbg !32
  %275 = fcmp uno float %250, 0.000000e+00, !dbg !34
  %276 = or i1 %274, %275, !dbg !35
  %277 = select i1 %276, float %250, float %251, !dbg !36
  %278 = fcmp ogt float %277, %252, !dbg !32
  %279 = fcmp uno float %277, 0.000000e+00, !dbg !34
  %280 = or i1 %278, %279, !dbg !35
  %281 = select i1 %280, float %277, float %252, !dbg !36
  %282 = fcmp ogt float %281, %253, !dbg !32
  %283 = fcmp uno float %281, 0.000000e+00, !dbg !34
  %284 = or i1 %282, %283, !dbg !35
  %285 = select i1 %284, float %281, float %253, !dbg !36
  %286 = fcmp ogt float %254, %255, !dbg !32
  %287 = fcmp uno float %254, 0.000000e+00, !dbg !34
  %288 = or i1 %286, %287, !dbg !35
  %289 = select i1 %288, float %254, float %255, !dbg !36
  %290 = fcmp ogt float %289, %256, !dbg !32
  %291 = fcmp uno float %289, 0.000000e+00, !dbg !34
  %292 = or i1 %290, %291, !dbg !35
  %293 = select i1 %292, float %289, float %256, !dbg !36
  %294 = fcmp ogt float %293, %257, !dbg !32
  %295 = fcmp uno float %293, 0.000000e+00, !dbg !34
  %296 = or i1 %294, %295, !dbg !35
  %297 = select i1 %296, float %293, float %257, !dbg !36
  %298 = fcmp ogt float %258, %259, !dbg !32
  %299 = fcmp uno float %258, 0.000000e+00, !dbg !34
  %300 = or i1 %298, %299, !dbg !35
  %301 = select i1 %300, float %258, float %259, !dbg !36
  %302 = fcmp ogt float %301, %260, !dbg !32
  %303 = fcmp uno float %301, 0.000000e+00, !dbg !34
  %304 = or i1 %302, %303, !dbg !35
  %305 = select i1 %304, float %301, float %260, !dbg !36
  %306 = fcmp ogt float %305, %261, !dbg !32
  %307 = fcmp uno float %305, 0.000000e+00, !dbg !34
  %308 = or i1 %306, %307, !dbg !35
  %309 = select i1 %308, float %305, float %261, !dbg !36
  %310 = bitcast float %273 to i32, !dbg !37
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 4, i32 31), !dbg !37
  %312 = bitcast i32 %311 to float, !dbg !37
  %313 = fcmp ogt float %273, %312, !dbg !32
  %314 = fcmp uno float %273, 0.000000e+00, !dbg !34
  %315 = or i1 %313, %314, !dbg !35
  %316 = select i1 %315, float %273, float %312, !dbg !36
  %317 = bitcast float %316 to i32, !dbg !37
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 2, i32 31), !dbg !37
  %319 = bitcast i32 %318 to float, !dbg !37
  %320 = fcmp ogt float %316, %319, !dbg !32
  %321 = fcmp uno float %316, 0.000000e+00, !dbg !34
  %322 = or i1 %320, %321, !dbg !35
  %323 = select i1 %322, float %316, float %319, !dbg !36
  %324 = bitcast float %323 to i32, !dbg !37
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 1, i32 31), !dbg !37
  %326 = bitcast i32 %325 to float, !dbg !37
  %327 = fcmp ogt float %323, %326, !dbg !32
  %328 = fcmp uno float %323, 0.000000e+00, !dbg !34
  %329 = or i1 %327, %328, !dbg !35
  %330 = select i1 %329, float %323, float %326, !dbg !36
  %331 = bitcast float %285 to i32, !dbg !37
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 4, i32 31), !dbg !37
  %333 = bitcast i32 %332 to float, !dbg !37
  %334 = fcmp ogt float %285, %333, !dbg !32
  %335 = fcmp uno float %285, 0.000000e+00, !dbg !34
  %336 = or i1 %334, %335, !dbg !35
  %337 = select i1 %336, float %285, float %333, !dbg !36
  %338 = bitcast float %337 to i32, !dbg !37
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !37
  %340 = bitcast i32 %339 to float, !dbg !37
  %341 = fcmp ogt float %337, %340, !dbg !32
  %342 = fcmp uno float %337, 0.000000e+00, !dbg !34
  %343 = or i1 %341, %342, !dbg !35
  %344 = select i1 %343, float %337, float %340, !dbg !36
  %345 = bitcast float %344 to i32, !dbg !37
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 1, i32 31), !dbg !37
  %347 = bitcast i32 %346 to float, !dbg !37
  %348 = fcmp ogt float %344, %347, !dbg !32
  %349 = fcmp uno float %344, 0.000000e+00, !dbg !34
  %350 = or i1 %348, %349, !dbg !35
  %351 = select i1 %350, float %344, float %347, !dbg !36
  %352 = bitcast float %297 to i32, !dbg !37
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 4, i32 31), !dbg !37
  %354 = bitcast i32 %353 to float, !dbg !37
  %355 = fcmp ogt float %297, %354, !dbg !32
  %356 = fcmp uno float %297, 0.000000e+00, !dbg !34
  %357 = or i1 %355, %356, !dbg !35
  %358 = select i1 %357, float %297, float %354, !dbg !36
  %359 = bitcast float %358 to i32, !dbg !37
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 2, i32 31), !dbg !37
  %361 = bitcast i32 %360 to float, !dbg !37
  %362 = fcmp ogt float %358, %361, !dbg !32
  %363 = fcmp uno float %358, 0.000000e+00, !dbg !34
  %364 = or i1 %362, %363, !dbg !35
  %365 = select i1 %364, float %358, float %361, !dbg !36
  %366 = bitcast float %365 to i32, !dbg !37
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 1, i32 31), !dbg !37
  %368 = bitcast i32 %367 to float, !dbg !37
  %369 = fcmp ogt float %365, %368, !dbg !32
  %370 = fcmp uno float %365, 0.000000e+00, !dbg !34
  %371 = or i1 %369, %370, !dbg !35
  %372 = select i1 %371, float %365, float %368, !dbg !36
  %373 = bitcast float %309 to i32, !dbg !37
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 4, i32 31), !dbg !37
  %375 = bitcast i32 %374 to float, !dbg !37
  %376 = fcmp ogt float %309, %375, !dbg !32
  %377 = fcmp uno float %309, 0.000000e+00, !dbg !34
  %378 = or i1 %376, %377, !dbg !35
  %379 = select i1 %378, float %309, float %375, !dbg !36
  %380 = bitcast float %379 to i32, !dbg !37
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 2, i32 31), !dbg !37
  %382 = bitcast i32 %381 to float, !dbg !37
  %383 = fcmp ogt float %379, %382, !dbg !32
  %384 = fcmp uno float %379, 0.000000e+00, !dbg !34
  %385 = or i1 %383, %384, !dbg !35
  %386 = select i1 %385, float %379, float %382, !dbg !36
  %387 = bitcast float %386 to i32, !dbg !37
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 1, i32 31), !dbg !37
  %389 = bitcast i32 %388 to float, !dbg !37
  %390 = fcmp ogt float %386, %389, !dbg !32
  %391 = fcmp uno float %386, 0.000000e+00, !dbg !34
  %392 = or i1 %390, %391, !dbg !35
  %393 = select i1 %392, float %386, float %389, !dbg !36
  %394 = fsub float %230, %330, !dbg !38
  %395 = fsub float %231, %330, !dbg !38
  %396 = fsub float %232, %330, !dbg !38
  %397 = fsub float %233, %330, !dbg !38
  %398 = fsub float %234, %351, !dbg !38
  %399 = fsub float %235, %351, !dbg !38
  %400 = fsub float %236, %351, !dbg !38
  %401 = fsub float %237, %351, !dbg !38
  %402 = fsub float %238, %372, !dbg !38
  %403 = fsub float %239, %372, !dbg !38
  %404 = fsub float %240, %372, !dbg !38
  %405 = fsub float %241, %372, !dbg !38
  %406 = fsub float %242, %393, !dbg !38
  %407 = fsub float %243, %393, !dbg !38
  %408 = fsub float %244, %393, !dbg !38
  %409 = fsub float %245, %393, !dbg !38
  %410 = fmul float %394, 0x3FF7154760000000, !dbg !39
  %411 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %410) #3, !dbg !39
  %412 = fmul float %395, 0x3FF7154760000000, !dbg !39
  %413 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %412) #3, !dbg !39
  %414 = fmul float %396, 0x3FF7154760000000, !dbg !39
  %415 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %414) #3, !dbg !39
  %416 = fmul float %397, 0x3FF7154760000000, !dbg !39
  %417 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %416) #3, !dbg !39
  %418 = fmul float %398, 0x3FF7154760000000, !dbg !39
  %419 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %418) #3, !dbg !39
  %420 = fmul float %399, 0x3FF7154760000000, !dbg !39
  %421 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %420) #3, !dbg !39
  %422 = fmul float %400, 0x3FF7154760000000, !dbg !39
  %423 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %422) #3, !dbg !39
  %424 = fmul float %401, 0x3FF7154760000000, !dbg !39
  %425 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %424) #3, !dbg !39
  %426 = fmul float %402, 0x3FF7154760000000, !dbg !39
  %427 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %426) #3, !dbg !39
  %428 = fmul float %403, 0x3FF7154760000000, !dbg !39
  %429 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %428) #3, !dbg !39
  %430 = fmul float %404, 0x3FF7154760000000, !dbg !39
  %431 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %430) #3, !dbg !39
  %432 = fmul float %405, 0x3FF7154760000000, !dbg !39
  %433 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %432) #3, !dbg !39
  %434 = fmul float %406, 0x3FF7154760000000, !dbg !39
  %435 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %434) #3, !dbg !39
  %436 = fmul float %407, 0x3FF7154760000000, !dbg !39
  %437 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %436) #3, !dbg !39
  %438 = fmul float %408, 0x3FF7154760000000, !dbg !39
  %439 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %438) #3, !dbg !39
  %440 = fmul float %409, 0x3FF7154760000000, !dbg !39
  %441 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %440) #3, !dbg !39
  %442 = fadd float %411, %413, !dbg !40
  %443 = fadd float %442, %415, !dbg !40
  %444 = fadd float %443, %417, !dbg !40
  %445 = select i1 %20, float %444, float 0.000000e+00, !dbg !40
  %446 = fadd float %419, %421, !dbg !40
  %447 = fadd float %446, %423, !dbg !40
  %448 = fadd float %447, %425, !dbg !40
  %449 = select i1 %21, float %448, float 0.000000e+00, !dbg !40
  %450 = fadd float %427, %429, !dbg !40
  %451 = fadd float %450, %431, !dbg !40
  %452 = fadd float %451, %433, !dbg !40
  %453 = select i1 %22, float %452, float 0.000000e+00, !dbg !40
  %454 = fadd float %435, %437, !dbg !40
  %455 = fadd float %454, %439, !dbg !40
  %456 = fadd float %455, %441, !dbg !40
  %457 = select i1 %23, float %456, float 0.000000e+00, !dbg !40
  %458 = bitcast float %445 to i32, !dbg !45
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 4, i32 31), !dbg !45
  %460 = bitcast i32 %459 to float, !dbg !45
  %461 = fadd float %445, %460, !dbg !40
  %462 = bitcast float %461 to i32, !dbg !45
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 2, i32 31), !dbg !45
  %464 = bitcast i32 %463 to float, !dbg !45
  %465 = fadd float %461, %464, !dbg !40
  %466 = bitcast float %465 to i32, !dbg !45
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 1, i32 31), !dbg !45
  %468 = bitcast i32 %467 to float, !dbg !45
  %469 = fadd float %465, %468, !dbg !40
  %470 = bitcast float %449 to i32, !dbg !45
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 4, i32 31), !dbg !45
  %472 = bitcast i32 %471 to float, !dbg !45
  %473 = fadd float %449, %472, !dbg !40
  %474 = bitcast float %473 to i32, !dbg !45
  %475 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %474, i32 2, i32 31), !dbg !45
  %476 = bitcast i32 %475 to float, !dbg !45
  %477 = fadd float %473, %476, !dbg !40
  %478 = bitcast float %477 to i32, !dbg !45
  %479 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %478, i32 1, i32 31), !dbg !45
  %480 = bitcast i32 %479 to float, !dbg !45
  %481 = fadd float %477, %480, !dbg !40
  %482 = bitcast float %453 to i32, !dbg !45
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 4, i32 31), !dbg !45
  %484 = bitcast i32 %483 to float, !dbg !45
  %485 = fadd float %453, %484, !dbg !40
  %486 = bitcast float %485 to i32, !dbg !45
  %487 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %486, i32 2, i32 31), !dbg !45
  %488 = bitcast i32 %487 to float, !dbg !45
  %489 = fadd float %485, %488, !dbg !40
  %490 = bitcast float %489 to i32, !dbg !45
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %490, i32 1, i32 31), !dbg !45
  %492 = bitcast i32 %491 to float, !dbg !45
  %493 = fadd float %489, %492, !dbg !40
  %494 = bitcast float %457 to i32, !dbg !45
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 4, i32 31), !dbg !45
  %496 = bitcast i32 %495 to float, !dbg !45
  %497 = fadd float %457, %496, !dbg !40
  %498 = bitcast float %497 to i32, !dbg !45
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 2, i32 31), !dbg !45
  %500 = bitcast i32 %499 to float, !dbg !45
  %501 = fadd float %497, %500, !dbg !40
  %502 = bitcast float %501 to i32, !dbg !45
  %503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 1, i32 31), !dbg !45
  %504 = bitcast i32 %503 to float, !dbg !45
  %505 = fadd float %501, %504, !dbg !40
  %506 = fcmp oeq float %82, %83, !dbg !46
  %507 = or i1 %506, %99, !dbg !48
  %508 = or i1 %98, %507, !dbg !48
  %509 = select i1 %508, float %82, float %83, !dbg !49
  %510 = select i1 %508, i32 %26, i32 %27, !dbg !50
  %511 = fcmp ogt float %509, %84, !dbg !51
  %512 = fcmp oeq float %509, %84, !dbg !46
  %513 = fcmp uno float %509, 0.000000e+00, !dbg !52
  %514 = fcmp uno float %84, 0.000000e+00, !dbg !53
  %515 = xor i1 %514, true, !dbg !54
  %516 = and i1 %513, %515, !dbg !55
  %517 = or i1 %511, %516, !dbg !56
  %518 = and i1 %514, %513, !dbg !57
  %519 = or i1 %512, %518, !dbg !58
  %520 = icmp samesign ult i32 %510, %28, !dbg !59
  %521 = and i1 %520, %519, !dbg !60
  %522 = or i1 %517, %521, !dbg !48
  %523 = select i1 %522, float %509, float %84, !dbg !49
  %524 = select i1 %522, i32 %510, i32 %28, !dbg !50
  %525 = fcmp ogt float %523, %85, !dbg !51
  %526 = fcmp oeq float %523, %85, !dbg !46
  %527 = fcmp uno float %523, 0.000000e+00, !dbg !52
  %528 = fcmp uno float %85, 0.000000e+00, !dbg !53
  %529 = xor i1 %528, true, !dbg !54
  %530 = and i1 %527, %529, !dbg !55
  %531 = or i1 %525, %530, !dbg !56
  %532 = and i1 %528, %527, !dbg !57
  %533 = or i1 %526, %532, !dbg !58
  %534 = icmp samesign ult i32 %524, %29, !dbg !59
  %535 = and i1 %534, %533, !dbg !60
  %536 = or i1 %531, %535, !dbg !48
  %537 = select i1 %536, float %523, float %85, !dbg !49
  %538 = select i1 %536, i32 %524, i32 %29, !dbg !50
  %539 = fcmp oeq float %86, %87, !dbg !46
  %540 = or i1 %539, %111, !dbg !48
  %541 = or i1 %110, %540, !dbg !48
  %542 = select i1 %541, float %86, float %87, !dbg !49
  %543 = select i1 %541, i32 %26, i32 %27, !dbg !50
  %544 = fcmp ogt float %542, %88, !dbg !51
  %545 = fcmp oeq float %542, %88, !dbg !46
  %546 = fcmp uno float %542, 0.000000e+00, !dbg !52
  %547 = fcmp uno float %88, 0.000000e+00, !dbg !53
  %548 = xor i1 %547, true, !dbg !54
  %549 = and i1 %546, %548, !dbg !55
  %550 = or i1 %544, %549, !dbg !56
  %551 = and i1 %547, %546, !dbg !57
  %552 = or i1 %545, %551, !dbg !58
  %553 = icmp samesign ult i32 %543, %28, !dbg !59
  %554 = and i1 %553, %552, !dbg !60
  %555 = or i1 %550, %554, !dbg !48
  %556 = select i1 %555, float %542, float %88, !dbg !49
  %557 = select i1 %555, i32 %543, i32 %28, !dbg !50
  %558 = fcmp ogt float %556, %89, !dbg !51
  %559 = fcmp oeq float %556, %89, !dbg !46
  %560 = fcmp uno float %556, 0.000000e+00, !dbg !52
  %561 = fcmp uno float %89, 0.000000e+00, !dbg !53
  %562 = xor i1 %561, true, !dbg !54
  %563 = and i1 %560, %562, !dbg !55
  %564 = or i1 %558, %563, !dbg !56
  %565 = and i1 %561, %560, !dbg !57
  %566 = or i1 %559, %565, !dbg !58
  %567 = icmp samesign ult i32 %557, %29, !dbg !59
  %568 = and i1 %567, %566, !dbg !60
  %569 = or i1 %564, %568, !dbg !48
  %570 = select i1 %569, float %556, float %89, !dbg !49
  %571 = select i1 %569, i32 %557, i32 %29, !dbg !50
  %572 = fcmp oeq float %90, %91, !dbg !46
  %573 = or i1 %572, %123, !dbg !48
  %574 = or i1 %122, %573, !dbg !48
  %575 = select i1 %574, float %90, float %91, !dbg !49
  %576 = select i1 %574, i32 %26, i32 %27, !dbg !50
  %577 = fcmp ogt float %575, %92, !dbg !51
  %578 = fcmp oeq float %575, %92, !dbg !46
  %579 = fcmp uno float %575, 0.000000e+00, !dbg !52
  %580 = fcmp uno float %92, 0.000000e+00, !dbg !53
  %581 = xor i1 %580, true, !dbg !54
  %582 = and i1 %579, %581, !dbg !55
  %583 = or i1 %577, %582, !dbg !56
  %584 = and i1 %580, %579, !dbg !57
  %585 = or i1 %578, %584, !dbg !58
  %586 = icmp samesign ult i32 %576, %28, !dbg !59
  %587 = and i1 %586, %585, !dbg !60
  %588 = or i1 %583, %587, !dbg !48
  %589 = select i1 %588, float %575, float %92, !dbg !49
  %590 = select i1 %588, i32 %576, i32 %28, !dbg !50
  %591 = fcmp ogt float %589, %93, !dbg !51
  %592 = fcmp oeq float %589, %93, !dbg !46
  %593 = fcmp uno float %589, 0.000000e+00, !dbg !52
  %594 = fcmp uno float %93, 0.000000e+00, !dbg !53
  %595 = xor i1 %594, true, !dbg !54
  %596 = and i1 %593, %595, !dbg !55
  %597 = or i1 %591, %596, !dbg !56
  %598 = and i1 %594, %593, !dbg !57
  %599 = or i1 %592, %598, !dbg !58
  %600 = icmp samesign ult i32 %590, %29, !dbg !59
  %601 = and i1 %600, %599, !dbg !60
  %602 = or i1 %597, %601, !dbg !48
  %603 = select i1 %602, float %589, float %93, !dbg !49
  %604 = select i1 %602, i32 %590, i32 %29, !dbg !50
  %605 = fcmp oeq float %94, %95, !dbg !46
  %606 = or i1 %605, %135, !dbg !48
  %607 = or i1 %134, %606, !dbg !48
  %608 = select i1 %607, float %94, float %95, !dbg !49
  %609 = select i1 %607, i32 %26, i32 %27, !dbg !50
  %610 = fcmp ogt float %608, %96, !dbg !51
  %611 = fcmp oeq float %608, %96, !dbg !46
  %612 = fcmp uno float %608, 0.000000e+00, !dbg !52
  %613 = fcmp uno float %96, 0.000000e+00, !dbg !53
  %614 = xor i1 %613, true, !dbg !54
  %615 = and i1 %612, %614, !dbg !55
  %616 = or i1 %610, %615, !dbg !56
  %617 = and i1 %613, %612, !dbg !57
  %618 = or i1 %611, %617, !dbg !58
  %619 = icmp samesign ult i32 %609, %28, !dbg !59
  %620 = and i1 %619, %618, !dbg !60
  %621 = or i1 %616, %620, !dbg !48
  %622 = select i1 %621, float %608, float %96, !dbg !49
  %623 = select i1 %621, i32 %609, i32 %28, !dbg !50
  %624 = fcmp ogt float %622, %97, !dbg !51
  %625 = fcmp oeq float %622, %97, !dbg !46
  %626 = fcmp uno float %622, 0.000000e+00, !dbg !52
  %627 = fcmp uno float %97, 0.000000e+00, !dbg !53
  %628 = xor i1 %627, true, !dbg !54
  %629 = and i1 %626, %628, !dbg !55
  %630 = or i1 %624, %629, !dbg !56
  %631 = and i1 %627, %626, !dbg !57
  %632 = or i1 %625, %631, !dbg !58
  %633 = icmp samesign ult i32 %623, %29, !dbg !59
  %634 = and i1 %633, %632, !dbg !60
  %635 = or i1 %630, %634, !dbg !48
  %636 = select i1 %635, float %622, float %97, !dbg !49
  %637 = select i1 %635, i32 %623, i32 %29, !dbg !50
  %638 = bitcast float %537 to i32, !dbg !61
  %639 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %638, i32 4, i32 31), !dbg !61
  %640 = bitcast i32 %639 to float, !dbg !61
  %641 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %538, i32 4, i32 31), !dbg !61
  %642 = fcmp ogt float %537, %640, !dbg !51
  %643 = fcmp oeq float %537, %640, !dbg !46
  %644 = fcmp uno float %537, 0.000000e+00, !dbg !52
  %645 = fcmp uno float %640, 0.000000e+00, !dbg !53
  %646 = xor i1 %645, true, !dbg !54
  %647 = and i1 %644, %646, !dbg !55
  %648 = or i1 %642, %647, !dbg !56
  %649 = and i1 %644, %645, !dbg !57
  %650 = or i1 %643, %649, !dbg !58
  %651 = icmp slt i32 %538, %641, !dbg !59
  %652 = and i1 %651, %650, !dbg !60
  %653 = or i1 %648, %652, !dbg !48
  %654 = select i1 %653, float %537, float %640, !dbg !49
  %655 = select i1 %653, i32 %538, i32 %641, !dbg !50
  %656 = bitcast float %654 to i32, !dbg !61
  %657 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %656, i32 2, i32 31), !dbg !61
  %658 = bitcast i32 %657 to float, !dbg !61
  %659 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %655, i32 2, i32 31), !dbg !61
  %660 = fcmp ogt float %654, %658, !dbg !51
  %661 = fcmp oeq float %654, %658, !dbg !46
  %662 = fcmp uno float %654, 0.000000e+00, !dbg !52
  %663 = fcmp uno float %658, 0.000000e+00, !dbg !53
  %664 = xor i1 %663, true, !dbg !54
  %665 = and i1 %662, %664, !dbg !55
  %666 = or i1 %660, %665, !dbg !56
  %667 = and i1 %663, %662, !dbg !57
  %668 = or i1 %661, %667, !dbg !58
  %669 = icmp slt i32 %655, %659, !dbg !59
  %670 = and i1 %669, %668, !dbg !60
  %671 = or i1 %666, %670, !dbg !48
  %672 = select i1 %671, float %654, float %658, !dbg !49
  %673 = select i1 %671, i32 %655, i32 %659, !dbg !50
  %674 = bitcast float %672 to i32, !dbg !61
  %675 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %674, i32 1, i32 31), !dbg !61
  %676 = bitcast i32 %675 to float, !dbg !61
  %677 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %673, i32 1, i32 31), !dbg !61
  %678 = fcmp ogt float %672, %676, !dbg !51
  %679 = fcmp oeq float %672, %676, !dbg !46
  %680 = fcmp uno float %672, 0.000000e+00, !dbg !52
  %681 = fcmp uno float %676, 0.000000e+00, !dbg !53
  %682 = xor i1 %681, true, !dbg !54
  %683 = and i1 %680, %682, !dbg !55
  %684 = or i1 %678, %683, !dbg !56
  %685 = and i1 %681, %680, !dbg !57
  %686 = or i1 %679, %685, !dbg !58
  %687 = icmp slt i32 %673, %677, !dbg !59
  %688 = and i1 %687, %686, !dbg !60
  %689 = or i1 %684, %688, !dbg !48
  %690 = select i1 %689, i32 %673, i32 %677, !dbg !50
  %691 = bitcast float %570 to i32, !dbg !61
  %692 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %691, i32 4, i32 31), !dbg !61
  %693 = bitcast i32 %692 to float, !dbg !61
  %694 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %571, i32 4, i32 31), !dbg !61
  %695 = fcmp ogt float %570, %693, !dbg !51
  %696 = fcmp oeq float %570, %693, !dbg !46
  %697 = fcmp uno float %570, 0.000000e+00, !dbg !52
  %698 = fcmp uno float %693, 0.000000e+00, !dbg !53
  %699 = xor i1 %698, true, !dbg !54
  %700 = and i1 %697, %699, !dbg !55
  %701 = or i1 %695, %700, !dbg !56
  %702 = and i1 %697, %698, !dbg !57
  %703 = or i1 %696, %702, !dbg !58
  %704 = icmp slt i32 %571, %694, !dbg !59
  %705 = and i1 %704, %703, !dbg !60
  %706 = or i1 %701, %705, !dbg !48
  %707 = select i1 %706, float %570, float %693, !dbg !49
  %708 = select i1 %706, i32 %571, i32 %694, !dbg !50
  %709 = bitcast float %707 to i32, !dbg !61
  %710 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %709, i32 2, i32 31), !dbg !61
  %711 = bitcast i32 %710 to float, !dbg !61
  %712 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %708, i32 2, i32 31), !dbg !61
  %713 = fcmp ogt float %707, %711, !dbg !51
  %714 = fcmp oeq float %707, %711, !dbg !46
  %715 = fcmp uno float %707, 0.000000e+00, !dbg !52
  %716 = fcmp uno float %711, 0.000000e+00, !dbg !53
  %717 = xor i1 %716, true, !dbg !54
  %718 = and i1 %715, %717, !dbg !55
  %719 = or i1 %713, %718, !dbg !56
  %720 = and i1 %716, %715, !dbg !57
  %721 = or i1 %714, %720, !dbg !58
  %722 = icmp slt i32 %708, %712, !dbg !59
  %723 = and i1 %722, %721, !dbg !60
  %724 = or i1 %719, %723, !dbg !48
  %725 = select i1 %724, float %707, float %711, !dbg !49
  %726 = select i1 %724, i32 %708, i32 %712, !dbg !50
  %727 = bitcast float %725 to i32, !dbg !61
  %728 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %727, i32 1, i32 31), !dbg !61
  %729 = bitcast i32 %728 to float, !dbg !61
  %730 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %726, i32 1, i32 31), !dbg !61
  %731 = fcmp ogt float %725, %729, !dbg !51
  %732 = fcmp oeq float %725, %729, !dbg !46
  %733 = fcmp uno float %725, 0.000000e+00, !dbg !52
  %734 = fcmp uno float %729, 0.000000e+00, !dbg !53
  %735 = xor i1 %734, true, !dbg !54
  %736 = and i1 %733, %735, !dbg !55
  %737 = or i1 %731, %736, !dbg !56
  %738 = and i1 %734, %733, !dbg !57
  %739 = or i1 %732, %738, !dbg !58
  %740 = icmp slt i32 %726, %730, !dbg !59
  %741 = and i1 %740, %739, !dbg !60
  %742 = or i1 %737, %741, !dbg !48
  %743 = select i1 %742, i32 %726, i32 %730, !dbg !50
  %744 = bitcast float %603 to i32, !dbg !61
  %745 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %744, i32 4, i32 31), !dbg !61
  %746 = bitcast i32 %745 to float, !dbg !61
  %747 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %604, i32 4, i32 31), !dbg !61
  %748 = fcmp ogt float %603, %746, !dbg !51
  %749 = fcmp oeq float %603, %746, !dbg !46
  %750 = fcmp uno float %603, 0.000000e+00, !dbg !52
  %751 = fcmp uno float %746, 0.000000e+00, !dbg !53
  %752 = xor i1 %751, true, !dbg !54
  %753 = and i1 %750, %752, !dbg !55
  %754 = or i1 %748, %753, !dbg !56
  %755 = and i1 %750, %751, !dbg !57
  %756 = or i1 %749, %755, !dbg !58
  %757 = icmp slt i32 %604, %747, !dbg !59
  %758 = and i1 %757, %756, !dbg !60
  %759 = or i1 %754, %758, !dbg !48
  %760 = select i1 %759, float %603, float %746, !dbg !49
  %761 = select i1 %759, i32 %604, i32 %747, !dbg !50
  %762 = bitcast float %760 to i32, !dbg !61
  %763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %762, i32 2, i32 31), !dbg !61
  %764 = bitcast i32 %763 to float, !dbg !61
  %765 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %761, i32 2, i32 31), !dbg !61
  %766 = fcmp ogt float %760, %764, !dbg !51
  %767 = fcmp oeq float %760, %764, !dbg !46
  %768 = fcmp uno float %760, 0.000000e+00, !dbg !52
  %769 = fcmp uno float %764, 0.000000e+00, !dbg !53
  %770 = xor i1 %769, true, !dbg !54
  %771 = and i1 %768, %770, !dbg !55
  %772 = or i1 %766, %771, !dbg !56
  %773 = and i1 %769, %768, !dbg !57
  %774 = or i1 %767, %773, !dbg !58
  %775 = icmp slt i32 %761, %765, !dbg !59
  %776 = and i1 %775, %774, !dbg !60
  %777 = or i1 %772, %776, !dbg !48
  %778 = select i1 %777, float %760, float %764, !dbg !49
  %779 = select i1 %777, i32 %761, i32 %765, !dbg !50
  %780 = bitcast float %778 to i32, !dbg !61
  %781 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %780, i32 1, i32 31), !dbg !61
  %782 = bitcast i32 %781 to float, !dbg !61
  %783 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %779, i32 1, i32 31), !dbg !61
  %784 = fcmp ogt float %778, %782, !dbg !51
  %785 = fcmp oeq float %778, %782, !dbg !46
  %786 = fcmp uno float %778, 0.000000e+00, !dbg !52
  %787 = fcmp uno float %782, 0.000000e+00, !dbg !53
  %788 = xor i1 %787, true, !dbg !54
  %789 = and i1 %786, %788, !dbg !55
  %790 = or i1 %784, %789, !dbg !56
  %791 = and i1 %787, %786, !dbg !57
  %792 = or i1 %785, %791, !dbg !58
  %793 = icmp slt i32 %779, %783, !dbg !59
  %794 = and i1 %793, %792, !dbg !60
  %795 = or i1 %790, %794, !dbg !48
  %796 = select i1 %795, i32 %779, i32 %783, !dbg !50
  %797 = bitcast float %636 to i32, !dbg !61
  %798 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %797, i32 4, i32 31), !dbg !61
  %799 = bitcast i32 %798 to float, !dbg !61
  %800 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %637, i32 4, i32 31), !dbg !61
  %801 = fcmp ogt float %636, %799, !dbg !51
  %802 = fcmp oeq float %636, %799, !dbg !46
  %803 = fcmp uno float %636, 0.000000e+00, !dbg !52
  %804 = fcmp uno float %799, 0.000000e+00, !dbg !53
  %805 = xor i1 %804, true, !dbg !54
  %806 = and i1 %803, %805, !dbg !55
  %807 = or i1 %801, %806, !dbg !56
  %808 = and i1 %803, %804, !dbg !57
  %809 = or i1 %802, %808, !dbg !58
  %810 = icmp slt i32 %637, %800, !dbg !59
  %811 = and i1 %810, %809, !dbg !60
  %812 = or i1 %807, %811, !dbg !48
  %813 = select i1 %812, float %636, float %799, !dbg !49
  %814 = select i1 %812, i32 %637, i32 %800, !dbg !50
  %815 = bitcast float %813 to i32, !dbg !61
  %816 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %815, i32 2, i32 31), !dbg !61
  %817 = bitcast i32 %816 to float, !dbg !61
  %818 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %814, i32 2, i32 31), !dbg !61
  %819 = fcmp ogt float %813, %817, !dbg !51
  %820 = fcmp oeq float %813, %817, !dbg !46
  %821 = fcmp uno float %813, 0.000000e+00, !dbg !52
  %822 = fcmp uno float %817, 0.000000e+00, !dbg !53
  %823 = xor i1 %822, true, !dbg !54
  %824 = and i1 %821, %823, !dbg !55
  %825 = or i1 %819, %824, !dbg !56
  %826 = and i1 %822, %821, !dbg !57
  %827 = or i1 %820, %826, !dbg !58
  %828 = icmp slt i32 %814, %818, !dbg !59
  %829 = and i1 %828, %827, !dbg !60
  %830 = or i1 %825, %829, !dbg !48
  %831 = select i1 %830, float %813, float %817, !dbg !49
  %832 = select i1 %830, i32 %814, i32 %818, !dbg !50
  %833 = bitcast float %831 to i32, !dbg !61
  %834 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %833, i32 1, i32 31), !dbg !61
  %835 = bitcast i32 %834 to float, !dbg !61
  %836 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %832, i32 1, i32 31), !dbg !61
  %837 = fcmp ogt float %831, %835, !dbg !51
  %838 = fcmp oeq float %831, %835, !dbg !46
  %839 = fcmp uno float %831, 0.000000e+00, !dbg !52
  %840 = fcmp uno float %835, 0.000000e+00, !dbg !53
  %841 = xor i1 %840, true, !dbg !54
  %842 = and i1 %839, %841, !dbg !55
  %843 = or i1 %837, %842, !dbg !56
  %844 = and i1 %840, %839, !dbg !57
  %845 = or i1 %838, %844, !dbg !58
  %846 = icmp slt i32 %832, %836, !dbg !59
  %847 = and i1 %846, %845, !dbg !60
  %848 = or i1 %843, %847, !dbg !48
  %849 = select i1 %848, i32 %832, i32 %836, !dbg !50
  %850 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %411, float %469) #3, !dbg !62
  %851 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %413, float %469) #3, !dbg !62
  %852 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %415, float %469) #3, !dbg !62
  %853 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %417, float %469) #3, !dbg !62
  %854 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %419, float %481) #3, !dbg !62
  %855 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %421, float %481) #3, !dbg !62
  %856 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %423, float %481) #3, !dbg !62
  %857 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %425, float %481) #3, !dbg !62
  %858 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %427, float %493) #3, !dbg !62
  %859 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %429, float %493) #3, !dbg !62
  %860 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %431, float %493) #3, !dbg !62
  %861 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %433, float %493) #3, !dbg !62
  %862 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %435, float %505) #3, !dbg !62
  %863 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %437, float %505) #3, !dbg !62
  %864 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %439, float %505) #3, !dbg !62
  %865 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %441, float %505) #3, !dbg !62
  %866 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !63
  %867 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !63
  %868 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !63
  %869 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !63
  %870 = bitcast float %850 to i32, !dbg !64
  %871 = bitcast float %851 to i32, !dbg !64
  %872 = bitcast float %852 to i32, !dbg !64
  %873 = bitcast float %853 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %870, i32 %871, i32 %872, i32 %873, ptr addrspace(1) %866, i1 %20) #3, !dbg !64
  %874 = bitcast float %854 to i32, !dbg !64
  %875 = bitcast float %855 to i32, !dbg !64
  %876 = bitcast float %856 to i32, !dbg !64
  %877 = bitcast float %857 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %874, i32 %875, i32 %876, i32 %877, ptr addrspace(1) %867, i1 %21) #3, !dbg !64
  %878 = bitcast float %858 to i32, !dbg !64
  %879 = bitcast float %859 to i32, !dbg !64
  %880 = bitcast float %860 to i32, !dbg !64
  %881 = bitcast float %861 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %878, i32 %879, i32 %880, i32 %881, ptr addrspace(1) %868, i1 %22) #3, !dbg !64
  %882 = bitcast float %862 to i32, !dbg !64
  %883 = bitcast float %863 to i32, !dbg !64
  %884 = bitcast float %864 to i32, !dbg !64
  %885 = bitcast float %865 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %882, i32 %883, i32 %884, i32 %885, ptr addrspace(1) %869, i1 %23) #3, !dbg !64
  %886 = sext i32 %19 to i64, !dbg !65
  %887 = getelementptr i64, ptr addrspace(1) %1, i64 %886, !dbg !65
  %888 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %10, !dbg !66
  %889 = insertelement <1 x i32> poison, i32 %690, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %888, <1 x i32> %889, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %888, <1 x i32> %889, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %888, <1 x i32> %889, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %888, <1 x i32> %889, i1 true) #3, !dbg !66
  %890 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %11, !dbg !66
  %891 = insertelement <1 x i32> poison, i32 %743, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %890, <1 x i32> %891, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %890, <1 x i32> %891, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %890, <1 x i32> %891, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %890, <1 x i32> %891, i1 true) #3, !dbg !66
  %892 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %12, !dbg !66
  %893 = insertelement <1 x i32> poison, i32 %796, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %892, <1 x i32> %893, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %892, <1 x i32> %893, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %892, <1 x i32> %893, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %892, <1 x i32> %893, i1 true) #3, !dbg !66
  %894 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %13, !dbg !66
  %895 = insertelement <1 x i32> poison, i32 %849, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %894, <1 x i32> %895, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %894, <1 x i32> %895, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %894, <1 x i32> %895, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %894, <1 x i32> %895, i1 true) #3, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %896 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %14, !dbg !66
  %897 = load i32, ptr addrspace(3) %896, align 4, !dbg !66
  %898 = sext i32 %897 to i64, !dbg !66
  %899 = and i32 %8, 128, !dbg !66
  %900 = icmp eq i32 %899, 0, !dbg !66
  %901 = and i1 %900, %24, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %898, ptr addrspace(1) %887, i1 %901) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfyu2k3ngx7ywnedt7sij4hzrnimnr2cdj5azo6a6upelbud6u2k.py", directory: "inductor_cache/fy")
!4 = !{ptr @triton_per_fused__softmax_max_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_max_sub_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_max_sub_1", linkageName: "triton_per_fused__softmax_max_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 131, column: 29, scope: !24, inlinedAt: !25)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 33, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !33)
!33 = !DILocation(line: 38, column: 37, scope: !7)
!34 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !33)
!35 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !33)
!36 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !33)
!37 = !DILocation(line: 131, column: 29, scope: !24, inlinedAt: !33)
!38 = !DILocation(line: 39, column: 19, scope: !7)
!39 = !DILocation(line: 40, column: 24, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !44)
!41 = distinct !DILexicalBlockFile(scope: !43, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!44 = !DILocation(line: 43, column: 26, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !43, inlinedAt: !44)
!46 = !DILocation(line: 153, column: 23, scope: !22, inlinedAt: !47)
!47 = !DILocation(line: 45, column: 70, scope: !7)
!48 = !DILocation(line: 162, column: 12, scope: !22, inlinedAt: !47)
!49 = !DILocation(line: 163, column: 35, scope: !22, inlinedAt: !47)
!50 = !DILocation(line: 163, column: 69, scope: !22, inlinedAt: !47)
!51 = !DILocation(line: 152, column: 21, scope: !22, inlinedAt: !47)
!52 = !DILocation(line: 155, column: 29, scope: !22, inlinedAt: !47)
!53 = !DILocation(line: 156, column: 29, scope: !22, inlinedAt: !47)
!54 = !DILocation(line: 157, column: 32, scope: !22, inlinedAt: !47)
!55 = !DILocation(line: 157, column: 28, scope: !22, inlinedAt: !47)
!56 = !DILocation(line: 157, column: 16, scope: !22, inlinedAt: !47)
!57 = !DILocation(line: 159, column: 29, scope: !22, inlinedAt: !47)
!58 = !DILocation(line: 159, column: 17, scope: !22, inlinedAt: !47)
!59 = !DILocation(line: 162, column: 31, scope: !22, inlinedAt: !47)
!60 = !DILocation(line: 162, column: 21, scope: !22, inlinedAt: !47)
!61 = !DILocation(line: 173, column: 42, scope: !24, inlinedAt: !47)
!62 = !DILocation(line: 47, column: 20, scope: !7)
!63 = !DILocation(line: 48, column: 25, scope: !7)
!64 = !DILocation(line: 48, column: 45, scope: !7)
!65 = !DILocation(line: 49, column: 25, scope: !7)
!66 = !DILocation(line: 49, column: 37, scope: !7)
!67 = !DILocation(line: 49, column: 4, scope: !7)
