; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_convolution_mean_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr3 = freeze i32 %6, !dbg !11
  %7 = icmp slt i32 %.fr3, 256, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = srem i32 %.fr3, 64, !dbg !13
  %12 = sext i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %7) #3, !dbg !15
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %7) #3, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %7) #3, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %7) #3, !dbg !15
  %18 = bitcast i32 %17 to float, !dbg !15
  %19 = shl i32 %.fr3, 12, !dbg !16
  %20 = or disjoint i32 %19, %10
  %21 = sext i32 %20 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  br i1 %7, label %.split.us.preheader, label %.split.preheader

.split.preheader:                                 ; preds = %5
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = fadd float %18, %28, !dbg !20
  %33 = fadd float %18, %29, !dbg !20
  %34 = fadd float %18, %30, !dbg !20
  %35 = fadd float %18, %31, !dbg !20
  %36 = bitcast float %32 to i32, !dbg !21
  %37 = bitcast float %33 to i32, !dbg !21
  %38 = bitcast float %34 to i32, !dbg !21
  %39 = bitcast float %35 to i32, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %36, i32 %37, i32 %38, i32 %39, ptr addrspace(1) %22, i1 false) #3, !dbg !21
  %40 = or disjoint i64 %21, 2048, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !18
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !19
  %47 = bitcast i32 %43 to float, !dbg !19
  %48 = bitcast i32 %44 to float, !dbg !19
  %49 = bitcast i32 %45 to float, !dbg !19
  %50 = bitcast i32 %46 to float, !dbg !19
  %51 = fadd float %18, %47, !dbg !20
  %52 = fadd float %18, %48, !dbg !20
  %53 = fadd float %18, %49, !dbg !20
  %54 = fadd float %18, %50, !dbg !20
  %55 = bitcast float %51 to i32, !dbg !21
  %56 = bitcast float %52 to i32, !dbg !21
  %57 = bitcast float %53 to i32, !dbg !21
  %58 = bitcast float %54 to i32, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %55, i32 %56, i32 %57, i32 %58, ptr addrspace(1) %41, i1 false) #3, !dbg !21
  br label %.split2.us, !dbg !12

.split.us.preheader:                              ; preds = %5
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !19
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !19
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !19
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !19
  %64 = bitcast i32 %60 to float, !dbg !19
  %65 = bitcast i32 %61 to float, !dbg !19
  %66 = bitcast i32 %62 to float, !dbg !19
  %67 = bitcast i32 %63 to float, !dbg !19
  %68 = fadd float %18, %64, !dbg !20
  %69 = fadd float %18, %65, !dbg !20
  %70 = fadd float %18, %66, !dbg !20
  %71 = fadd float %18, %67, !dbg !20
  %72 = fadd float %68, 0.000000e+00, !dbg !23
  %73 = fadd float %69, 0.000000e+00, !dbg !23
  %74 = fadd float %70, 0.000000e+00, !dbg !23
  %75 = fadd float %71, 0.000000e+00, !dbg !23
  %76 = bitcast float %68 to i32, !dbg !21
  %77 = bitcast float %69 to i32, !dbg !21
  %78 = bitcast float %70 to i32, !dbg !21
  %79 = bitcast float %71 to i32, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %76, i32 %77, i32 %78, i32 %79, ptr addrspace(1) %22, i1 true) #3, !dbg !21
  %80 = or disjoint i64 %21, 2048, !dbg !22
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !18
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !19
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !19
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !19
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !19
  %87 = bitcast i32 %83 to float, !dbg !19
  %88 = bitcast i32 %84 to float, !dbg !19
  %89 = bitcast i32 %85 to float, !dbg !19
  %90 = bitcast i32 %86 to float, !dbg !19
  %91 = fadd float %18, %87, !dbg !20
  %92 = fadd float %18, %88, !dbg !20
  %93 = fadd float %18, %89, !dbg !20
  %94 = fadd float %18, %90, !dbg !20
  %95 = fadd float %72, %91, !dbg !23
  %96 = fadd float %73, %92, !dbg !23
  %97 = fadd float %74, %93, !dbg !23
  %98 = fadd float %75, %94, !dbg !23
  %99 = bitcast float %91 to i32, !dbg !21
  %100 = bitcast float %92 to i32, !dbg !21
  %101 = bitcast float %93 to i32, !dbg !21
  %102 = bitcast float %94 to i32, !dbg !21
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %99, i32 %100, i32 %101, i32 %102, ptr addrspace(1) %81, i1 true) #3, !dbg !21
  %103 = fadd float %95, %96, !dbg !12
  %104 = fadd float %97, %103, !dbg !12
  %105 = fadd float %98, %104, !dbg !12
  br label %.split2.us, !dbg !12

.split2.us:                                       ; preds = %.split.preheader, %.split.us.preheader
  %106 = phi float [ %105, %.split.us.preheader ], [ 0.000000e+00, %.split.preheader ], !dbg !24
  %107 = lshr i32 %8, 5, !dbg !12
  %108 = and i32 %8, 31, !dbg !12
  %109 = bitcast float %106 to i32, !dbg !29
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 16, i32 31), !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = fadd float %106, %111, !dbg !24
  %113 = bitcast float %112 to i32, !dbg !29
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 8, i32 31), !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = fadd float %112, %115, !dbg !24
  %117 = bitcast float %116 to i32, !dbg !29
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = fadd float %116, %119, !dbg !24
  %121 = bitcast float %120 to i32, !dbg !29
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !29
  %123 = bitcast i32 %122 to float, !dbg !29
  %124 = fadd float %120, %123, !dbg !24
  %125 = bitcast float %124 to i32, !dbg !29
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !29
  %127 = bitcast i32 %126 to float, !dbg !29
  %128 = fadd float %124, %127, !dbg !24
  %129 = icmp eq i32 %108, 0, !dbg !29
  %130 = and i32 %107, 15, !dbg !29
  %131 = zext nneg i32 %130 to i64, !dbg !29
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i64 %131, !dbg !29
  %133 = bitcast float %128 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 %129) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %134 = icmp slt i32 %8, 16, !dbg !29
  %135 = sext i32 %8 to i64, !dbg !29
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i64 %135, !dbg !29
  %137 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %136, i1 %134) #3, !dbg !29
  %138 = bitcast i32 %137 to float, !dbg !29
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !29
  %140 = bitcast i32 %139 to float, !dbg !29
  %141 = fadd float %138, %140, !dbg !24
  %142 = bitcast float %141 to i32, !dbg !29
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 4, i32 31), !dbg !29
  %144 = bitcast i32 %143 to float, !dbg !29
  %145 = fadd float %141, %144, !dbg !24
  %146 = bitcast float %145 to i32, !dbg !29
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 2, i32 31), !dbg !29
  %148 = bitcast i32 %147 to float, !dbg !29
  %149 = fadd float %145, %148, !dbg !24
  %150 = bitcast float %149 to i32, !dbg !29
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !29
  %152 = bitcast i32 %151 to float, !dbg !29
  %153 = fadd float %149, %152, !dbg !24
  %154 = and i32 %8, 15, !dbg !29
  %155 = icmp eq i32 %154, 0, !dbg !29
  %156 = and i1 %134, %155, !dbg !29
  %157 = bitcast float %153 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %157, i1 %156) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %158 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 4.096000e+03) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %160 = sext i32 %.fr3 to i64, !dbg !32
  %161 = getelementptr float, ptr addrspace(1) %1, i64 %160, !dbg !32
  %urem = and i32 %8, 511, !dbg !33
  %162 = icmp eq i32 %urem, 0, !dbg !33
  %163 = bitcast float %159 to i32, !dbg !33
  %164 = and i1 %162, %7, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %161, i1 %164) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py", directory: "inductor_cache/3t")
!4 = !{ptr @triton_red_fused_convolution_mean_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_mean_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_mean_1", linkageName: "triton_red_fused_convolution_mean_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 28, column: 30, scope: !7)
!15 = !DILocation(line: 28, column: 35, scope: !7)
!16 = !DILocation(line: 34, column: 48, scope: !7)
!17 = !DILocation(line: 30, column: 36, scope: !7)
!18 = !DILocation(line: 34, column: 38, scope: !7)
!19 = !DILocation(line: 34, column: 53, scope: !7)
!20 = !DILocation(line: 35, column: 22, scope: !7)
!21 = !DILocation(line: 39, column: 53, scope: !7)
!22 = !DILocation(line: 34, column: 43, scope: !7)
!23 = !DILocation(line: 37, column: 23, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 40, column: 25, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 42, column: 18, scope: !7)
!31 = !DILocation(line: 43, column: 4, scope: !7)
!32 = !DILocation(line: 44, column: 28, scope: !7)
!33 = !DILocation(line: 44, column: 39, scope: !7)
!34 = !DILocation(line: 44, column: 4, scope: !7)
