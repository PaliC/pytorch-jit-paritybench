#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":19:0)
#loc1 = loc(unknown)
#loc22 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":40:25)
#loc31 = loc(callsite(#loc1 at #loc22))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_convolution_mean_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c64_i32 : i32 loc(#loc5)
    %5 = tt.addptr %arg2, %4 : !tt.ptr<f32>, i32 loc(#loc6)
    %6 = tt.splat %5 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc7)
    %8 = tt.load %6, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %9 = arith.muli %0, %c4096_i32 : i32 loc(#loc8)
    %10 = tt.splat %9 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc9)
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc10)
    %12 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc11)
    %13 = tt.broadcast %8 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc12)
    %14 = scf.for %arg5 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg6 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %22 = tt.splat %arg5 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc14)
      %23 = arith.addi %22, %3 : tensor<1x2048xi32, #blocked> loc(#loc14)
      %24 = arith.cmpi slt, %23, %cst_0 : tensor<1x2048xi32, #blocked> loc(#loc15)
      %25 = arith.addi %23, %10 : tensor<1x2048xi32, #blocked> loc(#loc9)
      %26 = tt.addptr %11, %25 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc10)
      %27 = arith.andi %24, %12 : tensor<1x2048xi1, #blocked> loc(#loc11)
      %28 = tt.load %26, %27, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc16)
      %29 = arith.addf %28, %13 : tensor<1x2048xf32, #blocked> loc(#loc12)
      %30 = arith.addf %arg6, %29 : tensor<1x2048xf32, #blocked> loc(#loc17)
      %31 = arith.select %27, %30, %arg6 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc18)
      tt.store %26, %29, %27 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc19)
      scf.yield %31 : tensor<1x2048xf32, #blocked> loc(#loc20)
    } loc(#loc13)
    %15 = "tt.reduce"(%14) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc22)), %arg6: f32 loc(callsite(#loc1 at #loc22))):
      %22 = arith.addf %arg5, %arg6 : f32 loc(#loc33)
      tt.reduce.return %22 : f32 loc(#loc30)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %16 = triton_gpu.convert_layout %15 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc24)
    %17 = tt.expand_dims %16 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc25)
    %18 = arith.divf %17, %cst_1 : tensor<1x1xf32, #blocked1> loc(#loc24)
    gpu.barrier loc(#loc26)
    %19 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc27)
    %20 = tt.splat %19 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc28)
    %21 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc28)
    tt.store %20, %18, %21 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc28)
    tt.return loc(#loc29)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":22:28)
#loc3 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":24:21)
#loc4 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":25:33)
#loc5 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":27:19)
#loc6 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":28:30)
#loc7 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":28:35)
#loc8 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":34:48)
#loc9 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":34:43)
#loc10 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":34:38)
#loc11 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":34:61)
#loc12 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":35:22)
#loc13 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":30:36)
#loc14 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":31:27)
#loc15 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":32:25)
#loc16 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":34:53)
#loc17 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":37:23)
#loc18 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":38:46)
#loc19 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":39:53)
#loc20 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":39:8)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc24 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":42:18)
#loc25 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":40:28)
#loc26 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":43:4)
#loc27 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":44:28)
#loc28 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":44:39)
#loc29 = loc("inductor_cache/3t/c3t7hqey5kjqpvj6kynz4bmaefpv3tlw6i65qxswbjaji3e7unjf.py":44:4)
#loc30 = loc(callsite(#loc21 at #loc22))
#loc32 = loc(callsite(#loc23 at #loc21))
#loc33 = loc(callsite(#loc32 at #loc22))
