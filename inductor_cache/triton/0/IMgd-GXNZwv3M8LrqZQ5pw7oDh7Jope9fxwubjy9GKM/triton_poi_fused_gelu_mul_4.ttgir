#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [1, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [2, 16], warpsPerCTA = [1, 1], order = [0, 1]}>
#loc = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_gelu_mul_4(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":19:0), %arg4: i32 loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5.000000e-01> : tensor<4x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.707106769> : tensor<4x16xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<4x16xf32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<4x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<4> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x16xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x16xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x16xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_2 : tensor<1x16xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_3 : tensor<1x16xi32, #blocked1> loc(#loc6)
    %12 = tt.get_program_id x : i32 loc(#loc7)
    %13 = arith.muli %12, %c4_i32 : i32 loc(#loc8)
    %14 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %15 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc9)
    %16 = tt.expand_dims %14 {axis = 1 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<4x1xi32, #blocked> loc(#loc9)
    %17 = tt.expand_dims %15 {axis = 1 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<4x1xi32, #blocked1> loc(#loc9)
    %18 = tt.splat %13 : i32 -> tensor<4x1xi32, #blocked> loc(#loc10)
    %19 = tt.splat %13 : i32 -> tensor<4x1xi32, #blocked1> loc(#loc10)
    %20 = arith.addi %18, %16 : tensor<4x1xi32, #blocked> loc(#loc10)
    %21 = arith.addi %19, %17 : tensor<4x1xi32, #blocked1> loc(#loc10)
    %22 = arith.cmpi slt, %20, %cst_4 : tensor<4x1xi32, #blocked> loc(#loc11)
    %23 = arith.cmpi slt, %21, %cst_5 : tensor<4x1xi32, #blocked1> loc(#loc11)
    %24 = arith.remsi %8, %cst_6 : tensor<1x16xi32, #blocked> loc(#loc12)
    %25 = arith.remsi %9, %cst_7 : tensor<1x16xi32, #blocked1> loc(#loc12)
    %26 = arith.divsi %8, %cst_6 : tensor<1x16xi32, #blocked> loc(#loc13)
    %27 = arith.muli %20, %cst_4 : tensor<4x1xi32, #blocked> loc(#loc14)
    %28 = tt.broadcast %24 : tensor<1x16xi32, #blocked> -> tensor<4x16xi32, #blocked> loc(#loc15)
    %29 = tt.broadcast %27 : tensor<4x1xi32, #blocked> -> tensor<4x16xi32, #blocked> loc(#loc15)
    %30 = arith.addi %28, %29 : tensor<4x16xi32, #blocked> loc(#loc15)
    %31 = arith.muli %26, %cst_2 : tensor<1x16xi32, #blocked> loc(#loc16)
    %32 = tt.broadcast %31 : tensor<1x16xi32, #blocked> -> tensor<4x16xi32, #blocked> loc(#loc17)
    %33 = arith.addi %30, %32 : tensor<4x16xi32, #blocked> loc(#loc17)
    %34 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<4x16x!tt.ptr<f32>, #blocked> loc(#loc18)
    %35 = tt.addptr %34, %33 : tensor<4x16x!tt.ptr<f32>, #blocked>, tensor<4x16xi32, #blocked> loc(#loc18)
    %36 = tt.broadcast %22 : tensor<4x1xi1, #blocked> -> tensor<4x16xi1, #blocked> loc(#loc19)
    %37 = tt.broadcast %23 : tensor<4x1xi1, #blocked1> -> tensor<4x16xi1, #blocked1> loc(#loc19)
    %38 = tt.broadcast %10 : tensor<1x16xi1, #blocked> -> tensor<4x16xi1, #blocked> loc(#loc19)
    %39 = tt.broadcast %11 : tensor<1x16xi1, #blocked1> -> tensor<4x16xi1, #blocked1> loc(#loc19)
    %40 = arith.andi %36, %38 : tensor<4x16xi1, #blocked> loc(#loc19)
    %41 = arith.andi %37, %39 : tensor<4x16xi1, #blocked1> loc(#loc19)
    %42 = tt.load %35, %40 evictionPolicy = evict_last : tensor<4x16x!tt.ptr<f32>, #blocked> loc(#loc20)
    %43 = arith.muli %25, %cst_7 : tensor<1x16xi32, #blocked1> loc(#loc21)
    %44 = tt.broadcast %21 : tensor<4x1xi32, #blocked1> -> tensor<4x16xi32, #blocked1> loc(#loc22)
    %45 = tt.broadcast %43 : tensor<1x16xi32, #blocked1> -> tensor<4x16xi32, #blocked1> loc(#loc22)
    %46 = arith.addi %44, %45 : tensor<4x16xi32, #blocked1> loc(#loc22)
    %47 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x16x!tt.ptr<f32>, #blocked1> loc(#loc23)
    %48 = tt.addptr %47, %46 : tensor<4x16x!tt.ptr<f32>, #blocked1>, tensor<4x16xi32, #blocked1> loc(#loc23)
    %49 = tt.load %48, %41 evictionPolicy = evict_last : tensor<4x16x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %50 = arith.mulf %42, %cst : tensor<4x16xf32, #blocked> loc(#loc25)
    %51 = arith.mulf %42, %cst_0 : tensor<4x16xf32, #blocked> loc(#loc26)
    %52 = tt.extern_elementwise %51 {libname = "", libpath = "", pure = true, symbol = "__nv_erff"} : (tensor<4x16xf32, #blocked>) -> tensor<4x16xf32, #blocked> loc(#loc27)
    %53 = arith.addf %52, %cst_1 : tensor<4x16xf32, #blocked> loc(#loc28)
    %54 = arith.mulf %50, %53 : tensor<4x16xf32, #blocked> loc(#loc29)
    %55 = triton_gpu.convert_layout %54 {fastmath = #arith.fastmath<none>} : tensor<4x16xf32, #blocked> -> tensor<4x16xf32, #blocked1> loc(#loc29)
    %56 = arith.mulf %55, %49 : tensor<4x16xf32, #blocked1> loc(#loc30)
    %57 = arith.muli %9, %cst_7 : tensor<1x16xi32, #blocked1> loc(#loc31)
    %58 = tt.broadcast %57 : tensor<1x16xi32, #blocked1> -> tensor<4x16xi32, #blocked1> loc(#loc32)
    %59 = arith.addi %44, %58 : tensor<4x16xi32, #blocked1> loc(#loc32)
    %60 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<4x16x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %61 = tt.addptr %60, %59 : tensor<4x16x!tt.ptr<f32>, #blocked1>, tensor<4x16xi32, #blocked1> loc(#loc33)
    tt.store %61, %56, %41 : tensor<4x16x!tt.ptr<f32>, #blocked1> loc(#loc34)
    tt.return loc(#loc35)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":22:28)
#loc3 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":22:33)
#loc4 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":23:44)
#loc5 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":23:23)
#loc6 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":24:21)
#loc7 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":25:28)
#loc8 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":25:33)
#loc9 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":26:44)
#loc10 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":26:23)
#loc11 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":27:21)
#loc12 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":29:19)
#loc13 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":30:19)
#loc14 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":32:37)
#loc15 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":32:35)
#loc16 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":32:45)
#loc17 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":32:42)
#loc18 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":32:30)
#loc19 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":32:58)
#loc20 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":32:50)
#loc21 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":33:37)
#loc22 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":33:35)
#loc23 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":33:30)
#loc24 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":33:42)
#loc25 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":35:18)
#loc26 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":37:18)
#loc27 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":38:25)
#loc28 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":40:18)
#loc29 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":41:18)
#loc30 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":42:19)
#loc31 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":43:32)
#loc32 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":43:30)
#loc33 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":43:25)
#loc34 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":43:44)
#loc35 = loc("inductor_cache/3f/c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py":43:4)
