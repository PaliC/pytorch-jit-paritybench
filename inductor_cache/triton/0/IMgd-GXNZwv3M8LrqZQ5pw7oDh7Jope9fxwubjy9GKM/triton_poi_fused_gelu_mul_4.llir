; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_gelu_mul_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 2, !dbg !12
  %11 = and i32 %9, 14, !dbg !12
  %12 = lshr i32 %8, 1, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %13, !dbg !13
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %20 = lshr i32 %8, 3, !dbg !17
  %21 = and i32 %20, 3, !dbg !17
  %22 = or disjoint i32 %19, %21, !dbg !18
  %23 = or disjoint i32 %19, %10, !dbg !18
  %24 = icmp slt i32 %22, 4, !dbg !19
  %25 = icmp slt i32 %23, 4, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %26 = sdiv i32 %.frozen, 4, !dbg !20
  %27 = mul i32 %26, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %28 = srem i32 %15, 4, !dbg !21
  %29 = shl i32 %22, 2, !dbg !22
  %30 = add i32 %29, %.decomposed, !dbg !23
  %31 = shl i32 %26, 4, !dbg !24
  %32 = add i32 %30, %31, !dbg !25
  %33 = sext i32 %32 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = and i1 %16, %24, !dbg !27
  %36 = and i1 %17, %25, !dbg !27
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %35) #4, !dbg !28
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !28
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !28
  %40 = bitcast i32 %38 to float, !dbg !28
  %41 = bitcast i32 %39 to float, !dbg !28
  %42 = shl nsw i32 %28, 2, !dbg !29
  %43 = add i32 %42, %23, !dbg !30
  %44 = sext i32 %43 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !31
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %36) #4, !dbg !32
  %47 = fmul float %40, 0x3FE6A09E60000000, !dbg !33
  %48 = fmul float %41, 0x3FE6A09E60000000, !dbg !33
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %49, 0, !dbg !34
  %50 = tail call float @llvm.nvvm.fabs.ftz.f(float %47) #4, !dbg !34
  %51 = tail call float @llvm.nvvm.fabs.f(float %47) #4, !dbg !34
  %.0.i = select i1 %.not.i, float %51, float %50, !dbg !34
  %52 = fcmp oge float %.0.i, 0x3FF00C1FC0000000, !dbg !34
  br i1 %52, label %__nv_fabsf.exit1.i, label %54, !dbg !34

__nv_fabsf.exit1.i:                               ; preds = %5
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not1.i = icmp eq i32 %53, 0, !dbg !34
  %.01.i = select i1 %.not1.i, float %51, float %50, !dbg !34
  br label %__internal_fmad.exit.i, !dbg !34

54:                                               ; preds = %5
  %55 = fmul float %47, %47, !dbg !34
  br label %__internal_fmad.exit.i, !dbg !34

__internal_fmad.exit.i:                           ; preds = %54, %__nv_fabsf.exit1.i
  %56 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %54 ], !dbg !34
  %57 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %54 ], !dbg !34
  %58 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %54 ], !dbg !34
  %59 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %54 ], !dbg !34
  %60 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %54 ], !dbg !34
  %61 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %54 ], !dbg !34
  %62 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %54 ], !dbg !34
  %63 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %55, %54 ], !dbg !34
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not2.i = icmp eq i32 %64, 0, !dbg !34
  %65 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %62, float %63, float %61) #4, !dbg !34
  %66 = tail call float @llvm.nvvm.fma.rn.f(float %62, float %63, float %61) #4, !dbg !34
  %.02.i = select i1 %.not2.i, float %66, float %65, !dbg !34
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not3.i = icmp eq i32 %67, 0, !dbg !34
  %68 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %63, float %60) #4, !dbg !34
  %69 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %63, float %60) #4, !dbg !34
  %.03.i = select i1 %.not3.i, float %69, float %68, !dbg !34
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not4.i = icmp eq i32 %70, 0, !dbg !34
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %63, float %59) #4, !dbg !34
  %72 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %63, float %59) #4, !dbg !34
  %.04.i = select i1 %.not4.i, float %72, float %71, !dbg !34
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not5.i = icmp eq i32 %73, 0, !dbg !34
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %63, float %58) #4, !dbg !34
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %63, float %58) #4, !dbg !34
  %.05.i = select i1 %.not5.i, float %75, float %74, !dbg !34
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not6.i = icmp eq i32 %76, 0, !dbg !34
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %63, float %57) #4, !dbg !34
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %63, float %57) #4, !dbg !34
  %.06.i = select i1 %.not6.i, float %78, float %77, !dbg !34
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not7.i = icmp eq i32 %79, 0, !dbg !34
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %63, float %56) #4, !dbg !34
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %63, float %56) #4, !dbg !34
  %.07.i = select i1 %.not7.i, float %81, float %80, !dbg !34
  %82 = fneg float %63, !dbg !34
  %83 = select i1 %52, float %82, float %47, !dbg !34
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not8.i = icmp eq i32 %84, 0, !dbg !34
  %85 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %83, float %83) #4, !dbg !34
  %86 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %83, float %83) #4, !dbg !34
  %.08.i = select i1 %.not8.i, float %86, float %85, !dbg !34
  br i1 %52, label %87, label %__nv_erff.exit, !dbg !34

87:                                               ; preds = %__internal_fmad.exit.i
  %88 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #4, !dbg !34
  %89 = fsub float 1.000000e+00, %88, !dbg !34
  %90 = bitcast float %89 to i32, !dbg !34
  %91 = bitcast float %47 to i32, !dbg !34
  %92 = and i32 %91, -2147483648, !dbg !34
  %93 = or i32 %92, %90, !dbg !34
  %94 = bitcast i32 %93 to float, !dbg !34
  br label %__nv_erff.exit, !dbg !34

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %87
  %r.0.i = phi float [ %94, %87 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !34
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i3 = icmp eq i32 %95, 0, !dbg !34
  %96 = tail call float @llvm.nvvm.fabs.ftz.f(float %48) #4, !dbg !34
  %97 = tail call float @llvm.nvvm.fabs.f(float %48) #4, !dbg !34
  %.0.i4 = select i1 %.not.i3, float %97, float %96, !dbg !34
  %98 = fcmp oge float %.0.i4, 0x3FF00C1FC0000000, !dbg !34
  br i1 %98, label %__nv_fabsf.exit1.i21, label %100, !dbg !34

__nv_fabsf.exit1.i21:                             ; preds = %__nv_erff.exit
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not1.i22 = icmp eq i32 %99, 0, !dbg !34
  %.01.i23 = select i1 %.not1.i22, float %97, float %96, !dbg !34
  br label %__internal_fmad.exit.i5, !dbg !34

100:                                              ; preds = %__nv_erff.exit
  %101 = fmul float %48, %48, !dbg !34
  br label %__internal_fmad.exit.i5, !dbg !34

__internal_fmad.exit.i5:                          ; preds = %100, %__nv_fabsf.exit1.i21
  %102 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i21 ], [ 0x3FC06EBA60000000, %100 ], !dbg !34
  %103 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i21 ], [ 0xBFD8127580000000, %100 ], !dbg !34
  %104 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i21 ], [ 0x3FBCE315E0000000, %100 ], !dbg !34
  %105 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i21 ], [ 0xBF9B837CE0000000, %100 ], !dbg !34
  %106 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i21 ], [ 0x3F755ABD40000000, %100 ], !dbg !34
  %107 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i21 ], [ 0xBF4AE9A400000000, %100 ], !dbg !34
  %108 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i21 ], [ 0x3F163D2D40000000, %100 ], !dbg !34
  %109 = phi float [ %.01.i23, %__nv_fabsf.exit1.i21 ], [ %101, %100 ], !dbg !34
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not2.i6 = icmp eq i32 %110, 0, !dbg !34
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %108, float %109, float %107) #4, !dbg !34
  %112 = tail call float @llvm.nvvm.fma.rn.f(float %108, float %109, float %107) #4, !dbg !34
  %.02.i7 = select i1 %.not2.i6, float %112, float %111, !dbg !34
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not3.i8 = icmp eq i32 %113, 0, !dbg !34
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i7, float %109, float %106) #4, !dbg !34
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i7, float %109, float %106) #4, !dbg !34
  %.03.i9 = select i1 %.not3.i8, float %115, float %114, !dbg !34
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not4.i10 = icmp eq i32 %116, 0, !dbg !34
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i9, float %109, float %105) #4, !dbg !34
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i9, float %109, float %105) #4, !dbg !34
  %.04.i11 = select i1 %.not4.i10, float %118, float %117, !dbg !34
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not5.i12 = icmp eq i32 %119, 0, !dbg !34
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i11, float %109, float %104) #4, !dbg !34
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i11, float %109, float %104) #4, !dbg !34
  %.05.i13 = select i1 %.not5.i12, float %121, float %120, !dbg !34
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not6.i14 = icmp eq i32 %122, 0, !dbg !34
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i13, float %109, float %103) #4, !dbg !34
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i13, float %109, float %103) #4, !dbg !34
  %.06.i15 = select i1 %.not6.i14, float %124, float %123, !dbg !34
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not7.i16 = icmp eq i32 %125, 0, !dbg !34
  %126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i15, float %109, float %102) #4, !dbg !34
  %127 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i15, float %109, float %102) #4, !dbg !34
  %.07.i17 = select i1 %.not7.i16, float %127, float %126, !dbg !34
  %128 = fneg float %109, !dbg !34
  %129 = select i1 %98, float %128, float %48, !dbg !34
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not8.i18 = icmp eq i32 %130, 0, !dbg !34
  %131 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i17, float %129, float %129) #4, !dbg !34
  %132 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i17, float %129, float %129) #4, !dbg !34
  %.08.i19 = select i1 %.not8.i18, float %132, float %131, !dbg !34
  br i1 %98, label %133, label %__nv_erff.exit24, !dbg !34

133:                                              ; preds = %__internal_fmad.exit.i5
  %134 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i19) #4, !dbg !34
  %135 = fsub float 1.000000e+00, %134, !dbg !34
  %136 = bitcast float %135 to i32, !dbg !34
  %137 = bitcast float %48 to i32, !dbg !34
  %138 = and i32 %137, -2147483648, !dbg !34
  %139 = or i32 %138, %136, !dbg !34
  %140 = bitcast i32 %139 to float, !dbg !34
  br label %__nv_erff.exit24, !dbg !34

__nv_erff.exit24:                                 ; preds = %__internal_fmad.exit.i5, %133
  %r.0.i20 = phi float [ %140, %133 ], [ %.08.i19, %__internal_fmad.exit.i5 ], !dbg !34
  %141 = fmul float %41, 5.000000e-01, !dbg !35
  %142 = fmul float %40, 5.000000e-01, !dbg !35
  %143 = extractvalue { i32, i32 } %46, 1, !dbg !32
  %144 = bitcast i32 %143 to float, !dbg !32
  %145 = extractvalue { i32, i32 } %46, 0, !dbg !32
  %146 = bitcast i32 %145 to float, !dbg !32
  %147 = fadd float %r.0.i, 1.000000e+00, !dbg !36
  %148 = fadd float %r.0.i20, 1.000000e+00, !dbg !36
  %149 = fmul float %142, %147, !dbg !37
  %150 = fmul float %141, %148, !dbg !37
  %151 = shl i32 %8, 3, !dbg !37
  %152 = and i32 %151, 56, !dbg !37
  %153 = or disjoint i32 %152, %21, !dbg !37
  %154 = and i32 %9, 62, !dbg !37
  %155 = lshr exact i32 %152, 2, !dbg !37
  %156 = add nuw nsw i32 %155, %153, !dbg !37
  %157 = zext nneg i32 %156 to i64, !dbg !37
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %157, !dbg !37
  %159 = bitcast float %149 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #4, !dbg !37
  %160 = or disjoint i32 %153, 4, !dbg !37
  %161 = lshr i32 %160, 2, !dbg !37
  %162 = add nuw nsw i32 %161, %160, !dbg !37
  %163 = zext nneg i32 %162 to i64, !dbg !37
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %163, !dbg !37
  %165 = bitcast float %150 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %166 = lshr i32 %154, 2, !dbg !37
  %167 = add nuw nsw i32 %166, %154, !dbg !37
  %168 = zext nneg i32 %167 to i64, !dbg !37
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %168, !dbg !37
  %170 = load float, ptr addrspace(3) %169, align 4, !dbg !37
  %171 = or disjoint i32 %154, 1, !dbg !37
  %172 = add nuw nsw i32 %171, %166, !dbg !37
  %173 = zext nneg i32 %172 to i64, !dbg !37
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %173, !dbg !37
  %175 = load float, ptr addrspace(3) %174, align 4, !dbg !37
  %176 = fmul float %170, %146, !dbg !38
  %177 = fmul float %175, %144, !dbg !38
  %178 = shl i32 %15, 2, !dbg !39
  %179 = add i32 %23, %178, !dbg !40
  %180 = sext i32 %179 to i64, !dbg !41
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !41
  %182 = bitcast float %176 to i32, !dbg !42
  %183 = bitcast float %177 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %182, i32 %183, ptr addrspace(1) %181, i1 %36) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ftgbwj6f22h46oclsxdqg7x3ts5qmdskcm4kh4t5ehx3q5em5h.py", directory: "inductor_cache/3f")
!4 = !{ptr @triton_poi_fused_gelu_mul_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_gelu_mul_4, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_gelu_mul_4", linkageName: "triton_poi_fused_gelu_mul_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 58, scope: !7)
!28 = !DILocation(line: 32, column: 50, scope: !7)
!29 = !DILocation(line: 33, column: 37, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 42, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 32, scope: !7)
!40 = !DILocation(line: 43, column: 30, scope: !7)
!41 = !DILocation(line: 43, column: 25, scope: !7)
!42 = !DILocation(line: 43, column: 44, scope: !7)
!43 = !DILocation(line: 43, column: 4, scope: !7)
