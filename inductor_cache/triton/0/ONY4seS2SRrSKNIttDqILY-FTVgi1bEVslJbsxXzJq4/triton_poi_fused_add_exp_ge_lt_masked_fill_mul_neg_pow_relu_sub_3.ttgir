#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [1], order = [0]}>
#loc = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 1 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_exp_ge_lt_masked_fill_mul_neg_pow_relu_sub_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":19:0), %arg5: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":19:0), %arg6: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<64xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<8.000000e-01> : tensor<64xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_3 = arith.constant 1.000000e+00 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<64xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<64xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<64xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_4 : tensor<64xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %4 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc7)
    %8 = tt.load %7, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc9)
    %10 = tt.load %9 : !tt.ptr<f32> loc(#loc10)
    %11 = tt.splat %10 : f32 -> tensor<64xf32, #blocked> loc(#loc11)
    %12 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc12)
    %13 = tt.load %12 : !tt.ptr<f32> loc(#loc13)
    %14 = tt.splat %13 : f32 -> tensor<64xf32, #blocked> loc(#loc14)
    %15 = tt.addptr %arg3, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc15)
    %16 = tt.load %15 : !tt.ptr<f32> loc(#loc16)
    %17 = tt.addptr %arg4, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc17)
    %18 = tt.load %17 : !tt.ptr<f32> loc(#loc18)
    %19 = arith.cmpf olt, %8, %11 : tensor<64xf32, #blocked> loc(#loc19)
    %20 = arith.cmpf oge, %8, %11 : tensor<64xf32, #blocked> loc(#loc20)
    %21 = arith.subf %cst_2, %16 : f32 loc(#loc21)
    %22 = tt.splat %21 : f32 -> tensor<64xf32, #blocked> loc(#loc21)
    %23 = arith.subf %8, %11 : tensor<64xf32, #blocked> loc(#loc22)
    %24 = arith.mulf %23, %23 : tensor<64xf32, #blocked> loc(#loc23)
    %25 = arith.mulf %22, %24 : tensor<64xf32, #blocked> loc(#loc24)
    %26 = math.exp %25 : tensor<64xf32, #blocked> loc(#loc25)
    %27 = arith.mulf %14, %26 : tensor<64xf32, #blocked> loc(#loc26)
    %28 = arith.select %20, %cst, %27 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc27)
    %29 = arith.subf %13, %cst_3 : f32 loc(#loc28)
    %30 = tt.splat %29 : f32 -> tensor<64xf32, #blocked> loc(#loc28)
    %31 = arith.subf %cst_2, %18 : f32 loc(#loc29)
    %32 = tt.splat %31 : f32 -> tensor<64xf32, #blocked> loc(#loc29)
    %33 = arith.mulf %32, %24 : tensor<64xf32, #blocked> loc(#loc30)
    %34 = math.exp %33 : tensor<64xf32, #blocked> loc(#loc31)
    %35 = arith.mulf %30, %34 : tensor<64xf32, #blocked> loc(#loc32)
    %36 = arith.addf %35, %cst_0 : tensor<64xf32, #blocked> loc(#loc33)
    %37 = arith.select %19, %cst, %36 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc34)
    %38 = arith.addf %28, %37 : tensor<64xf32, #blocked> loc(#loc35)
    %39 = arith.cmpf ogt, %cst, %8 : tensor<64xf32, #blocked> loc(#loc49)
    %40 = arith.select %39, %cst, %8 : tensor<64xi1, #blocked>, tensor<64xf32, #blocked> loc(#loc50)
    %41 = tt.extern_elementwise %40, %cst_1 {libname = "", libpath = "", pure = true, symbol = "__nv_powf"} : (tensor<64xf32, #blocked>, tensor<64xf32, #blocked>) -> tensor<64xf32, #blocked> loc(#loc39)
    %42 = tt.splat %arg5 : !tt.ptr<i1> -> tensor<64x!tt.ptr<i1>, #blocked> loc(#loc40)
    %43 = tt.addptr %42, %4 : tensor<64x!tt.ptr<i1>, #blocked>, tensor<64xi32, #blocked> loc(#loc40)
    %44 = tt.bitcast %43 : tensor<64x!tt.ptr<i1>, #blocked> -> tensor<64x!tt.ptr<i8>, #blocked> loc(#loc41)
    %45 = arith.extui %19 : tensor<64xi1, #blocked> to tensor<64xi8, #blocked> loc(#loc41)
    tt.store %44, %45, %5 : tensor<64x!tt.ptr<i8>, #blocked> loc(#loc41)
    %46 = tt.splat %arg6 : !tt.ptr<i1> -> tensor<64x!tt.ptr<i1>, #blocked> loc(#loc42)
    %47 = tt.addptr %46, %4 : tensor<64x!tt.ptr<i1>, #blocked>, tensor<64xi32, #blocked> loc(#loc42)
    %48 = tt.bitcast %47 : tensor<64x!tt.ptr<i1>, #blocked> -> tensor<64x!tt.ptr<i8>, #blocked> loc(#loc43)
    %49 = arith.extui %20 : tensor<64xi1, #blocked> to tensor<64xi8, #blocked> loc(#loc43)
    tt.store %48, %49, %5 : tensor<64x!tt.ptr<i8>, #blocked> loc(#loc43)
    %50 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc44)
    %51 = tt.addptr %50, %4 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc44)
    tt.store %51, %38, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc45)
    %52 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked> loc(#loc46)
    %53 = tt.addptr %52, %4 : tensor<64x!tt.ptr<f32>, #blocked>, tensor<64xi32, #blocked> loc(#loc46)
    tt.store %53, %41, %5 : tensor<64x!tt.ptr<f32>, #blocked> loc(#loc47)
    tt.return loc(#loc48)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":21:28)
#loc3 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":21:33)
#loc4 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":22:36)
#loc5 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":22:23)
#loc6 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":23:21)
#loc7 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":25:30)
#loc8 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":25:35)
#loc9 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":26:30)
#loc10 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":26:19)
#loc11 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":27:33)
#loc12 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":28:30)
#loc13 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":28:19)
#loc14 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":29:33)
#loc15 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":30:30)
#loc16 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":30:19)
#loc17 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":32:31)
#loc18 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":32:20)
#loc19 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":34:18)
#loc20 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":35:19)
#loc21 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":36:12)
#loc22 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":37:19)
#loc23 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":38:20)
#loc24 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":39:19)
#loc25 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":40:24)
#loc26 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":41:19)
#loc27 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":43:34)
#loc28 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":45:19)
#loc29 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":46:13)
#loc30 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":47:20)
#loc31 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":48:24)
#loc32 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":49:20)
#loc33 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":50:20)
#loc34 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":51:34)
#loc35 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":52:20)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc37 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":54:42)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc39 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":56:33)
#loc40 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":57:25)
#loc41 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":57:36)
#loc42 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":58:25)
#loc43 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":58:36)
#loc44 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":59:25)
#loc45 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":59:37)
#loc46 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":60:25)
#loc47 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":60:37)
#loc48 = loc("inductor_cache/og/cogra645a5pdtymj2o4cwhux4ludhg6njvs4z5kwedvluhvi2loc.py":60:4)
#loc49 = loc(callsite(#loc36 at #loc37))
#loc50 = loc(callsite(#loc38 at #loc37))
