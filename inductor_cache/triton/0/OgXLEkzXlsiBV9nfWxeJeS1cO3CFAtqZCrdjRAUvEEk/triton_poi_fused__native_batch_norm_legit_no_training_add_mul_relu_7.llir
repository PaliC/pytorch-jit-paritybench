; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %14 = shl i32 %13, 10, !dbg !12
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %16 = shl i32 %15, 2, !dbg !13
  %17 = and i32 %16, 508, !dbg !13
  %18 = or disjoint i32 %14, %17, !dbg !14
  %19 = or disjoint i32 %18, 512, !dbg !14
  %20 = icmp slt i32 %18, 1152, !dbg !15
  %21 = icmp slt i32 %19, 1152, !dbg !15
  %22 = mul i32 %12, 1152, !dbg !16
  %23 = add i32 %18, %22, !dbg !17
  %24 = add i32 %22, %19, !dbg !17
  %25 = sext i32 %23 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = sext i32 %24 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %20) #4, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %21) #4, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %20) #4, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %21) #4, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %20) #4, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %21) #4, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %20) #4, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %21) #4, !dbg !25
  %43 = sext i32 %18 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !26
  %45 = sext i32 %19 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %20) #4, !dbg !27
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %21) #4, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %5, i64 %45, !dbg !28
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %20) #4, !dbg !29
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !29
  %56 = bitcast i32 %52 to float, !dbg !29
  %57 = bitcast i32 %53 to float, !dbg !29
  %58 = bitcast i32 %54 to float, !dbg !29
  %59 = bitcast i32 %55 to float, !dbg !29
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %21) #4, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !29
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !29
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !29
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !29
  %65 = bitcast i32 %61 to float, !dbg !29
  %66 = bitcast i32 %62 to float, !dbg !29
  %67 = bitcast i32 %63 to float, !dbg !29
  %68 = bitcast i32 %64 to float, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !30
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %45, !dbg !30
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %20) #4, !dbg !31
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %21) #4, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %7, i64 %43, !dbg !32
  %74 = getelementptr float, ptr addrspace(1) %7, i64 %45, !dbg !32
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %20) #4, !dbg !33
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %21) #4, !dbg !33
  %77 = fadd float %56, 0x3EE4F8B580000000, !dbg !34
  %78 = fadd float %57, 0x3EE4F8B580000000, !dbg !34
  %79 = fadd float %58, 0x3EE4F8B580000000, !dbg !34
  %80 = fadd float %59, 0x3EE4F8B580000000, !dbg !34
  %81 = fadd float %65, 0x3EE4F8B580000000, !dbg !34
  %82 = fadd float %66, 0x3EE4F8B580000000, !dbg !34
  %83 = fadd float %67, 0x3EE4F8B580000000, !dbg !34
  %84 = fadd float %68, 0x3EE4F8B580000000, !dbg !34
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %85, 0, !dbg !35
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %86, 0, !dbg !35
  br i1 %.not.i, label %92, label %87, !dbg !35

87:                                               ; preds = %11
  br i1 %.not1.i, label %90, label %88, !dbg !35

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

92:                                               ; preds = %11
  br i1 %.not1.i, label %95, label %93, !dbg !35

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !35
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i1 = icmp eq i32 %97, 0, !dbg !35
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i4 = icmp eq i32 %98, 0, !dbg !35
  br i1 %.not.i1, label %104, label %99, !dbg !35

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %102, label %100, !dbg !35

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %107, label %105, !dbg !35

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %100, %102, %105, %107
  %.0.i3 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !35
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i6 = icmp eq i32 %109, 0, !dbg !35
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i9 = icmp eq i32 %110, 0, !dbg !35
  br i1 %.not.i6, label %116, label %111, !dbg !35

111:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %114, label %112, !dbg !35

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !35

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %112, %114, %117, %119
  %.0.i8 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !35
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i11 = icmp eq i32 %121, 0, !dbg !35
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i14 = icmp eq i32 %122, 0, !dbg !35
  br i1 %.not.i11, label %128, label %123, !dbg !35

123:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %126, label %124, !dbg !35

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !35

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %124, %126, %129, %131
  %.0.i13 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !35
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i16 = icmp eq i32 %133, 0, !dbg !35
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i19 = icmp eq i32 %134, 0, !dbg !35
  br i1 %.not.i16, label %140, label %135, !dbg !35

135:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %138, label %136, !dbg !35

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

140:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %143, label %141, !dbg !35

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %136, %138, %141, %143
  %.0.i18 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !35
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i21 = icmp eq i32 %145, 0, !dbg !35
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i24 = icmp eq i32 %146, 0, !dbg !35
  br i1 %.not.i21, label %152, label %147, !dbg !35

147:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %150, label %148, !dbg !35

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

152:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %155, label %153, !dbg !35

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %148, %150, %153, %155
  %.0.i23 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !35
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i26 = icmp eq i32 %157, 0, !dbg !35
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i29 = icmp eq i32 %158, 0, !dbg !35
  br i1 %.not.i26, label %164, label %159, !dbg !35

159:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %162, label %160, !dbg !35

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

164:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %167, label %165, !dbg !35

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %160, %162, %165, %167
  %.0.i28 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !35
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i31 = icmp eq i32 %169, 0, !dbg !35
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i34 = icmp eq i32 %170, 0, !dbg !35
  br i1 %.not.i31, label %176, label %171, !dbg !35

171:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %174, label %172, !dbg !35

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

176:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %179, label %177, !dbg !35

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %172, %174, %177, %179
  %.0.i33 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !35
  %181 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %182 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %183 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %184 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %185 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %186 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %187 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %188 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %189 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %190 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !27
  %191 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %192 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !27
  %193 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %194 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !27
  %195 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %196 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !27
  %197 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !19
  %198 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !21
  %199 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %200 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !19
  %201 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !21
  %202 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %203 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !19
  %204 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !21
  %205 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %206 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !19
  %207 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !21
  %208 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %209 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %210 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %211 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %212 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %213 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %214 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %215 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %216 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %217 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %218 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %219 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %220 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %221 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !33
  %222 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !33
  %223 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !33
  %224 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !33
  %225 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !33
  %226 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !33
  %227 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !33
  %228 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !33
  %229 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !31
  %230 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !31
  %231 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !31
  %232 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !31
  %233 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !31
  %234 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !31
  %235 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !31
  %236 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !31
  %.frozen = freeze i32 %12, !dbg !36
  %237 = sdiv i32 %.frozen, 4096, !dbg !36
  %238 = mul i32 %237, 4096, !dbg !37
  %.decomposed = sub i32 %.frozen, %238, !dbg !37
  %239 = and i32 %15, 127, !dbg !13
  %240 = or disjoint i32 %239, %14, !dbg !14
  %241 = or disjoint i32 %240, 896, !dbg !14
  %242 = icmp slt i32 %241, 1152, !dbg !15
  %243 = or disjoint i32 %240, 768, !dbg !14
  %244 = icmp slt i32 %243, 1152, !dbg !15
  %245 = or disjoint i32 %240, 640, !dbg !14
  %246 = icmp slt i32 %245, 1152, !dbg !15
  %247 = or disjoint i32 %240, 512, !dbg !14
  %248 = icmp slt i32 %247, 1152, !dbg !15
  %249 = or disjoint i32 %239, 384, !dbg !13
  %250 = or disjoint i32 %14, %249, !dbg !14
  %251 = icmp slt i32 %250, 1152, !dbg !15
  %252 = or disjoint i32 %239, 256, !dbg !13
  %253 = or disjoint i32 %14, %252, !dbg !14
  %254 = icmp slt i32 %253, 1152, !dbg !15
  %255 = or disjoint i32 %239, 128, !dbg !13
  %256 = or disjoint i32 %14, %255, !dbg !14
  %257 = icmp slt i32 %256, 1152, !dbg !15
  %258 = icmp slt i32 %240, 1152, !dbg !15
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !38
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !38
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !38
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !38
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !38
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #4, !dbg !38
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !38
  %267 = insertelement <8 x i32> poison, i32 %181, i64 0, !dbg !25
  %268 = insertelement <8 x i32> %267, i32 %183, i64 1, !dbg !25
  %269 = insertelement <8 x i32> %268, i32 %185, i64 2, !dbg !25
  %270 = insertelement <8 x i32> %269, i32 %187, i64 3, !dbg !25
  %271 = insertelement <8 x i32> %270, i32 %189, i64 4, !dbg !25
  %272 = insertelement <8 x i32> %271, i32 %191, i64 5, !dbg !25
  %273 = insertelement <8 x i32> %272, i32 %193, i64 6, !dbg !25
  %274 = insertelement <8 x i32> %273, i32 %195, i64 7, !dbg !25
  %275 = bitcast <8 x i32> %274 to <8 x float>, !dbg !25
  %276 = insertelement <8 x i32> poison, i32 %182, i64 0, !dbg !27
  %277 = insertelement <8 x i32> %276, i32 %184, i64 1, !dbg !27
  %278 = insertelement <8 x i32> %277, i32 %186, i64 2, !dbg !27
  %279 = insertelement <8 x i32> %278, i32 %188, i64 3, !dbg !27
  %280 = insertelement <8 x i32> %279, i32 %190, i64 4, !dbg !27
  %281 = insertelement <8 x i32> %280, i32 %192, i64 5, !dbg !27
  %282 = insertelement <8 x i32> %281, i32 %194, i64 6, !dbg !27
  %283 = insertelement <8 x i32> %282, i32 %196, i64 7, !dbg !27
  %284 = bitcast <8 x i32> %283 to <8 x float>, !dbg !27
  %285 = fsub <8 x float> %275, %284, !dbg !39
  %286 = insertelement <8 x i32> poison, i32 %197, i64 0, !dbg !19
  %287 = insertelement <8 x i32> %286, i32 %200, i64 1, !dbg !19
  %288 = insertelement <8 x i32> %287, i32 %203, i64 2, !dbg !19
  %289 = insertelement <8 x i32> %288, i32 %206, i64 3, !dbg !19
  %290 = insertelement <8 x i32> %289, i32 %209, i64 4, !dbg !19
  %291 = insertelement <8 x i32> %290, i32 %212, i64 5, !dbg !19
  %292 = insertelement <8 x i32> %291, i32 %215, i64 6, !dbg !19
  %293 = insertelement <8 x i32> %292, i32 %218, i64 7, !dbg !19
  %294 = bitcast <8 x i32> %293 to <8 x float>, !dbg !19
  %295 = insertelement <8 x i32> poison, i32 %198, i64 0, !dbg !21
  %296 = insertelement <8 x i32> %295, i32 %201, i64 1, !dbg !21
  %297 = insertelement <8 x i32> %296, i32 %204, i64 2, !dbg !21
  %298 = insertelement <8 x i32> %297, i32 %207, i64 3, !dbg !21
  %299 = insertelement <8 x i32> %298, i32 %210, i64 4, !dbg !21
  %300 = insertelement <8 x i32> %299, i32 %213, i64 5, !dbg !21
  %301 = insertelement <8 x i32> %300, i32 %216, i64 6, !dbg !21
  %302 = insertelement <8 x i32> %301, i32 %219, i64 7, !dbg !21
  %303 = bitcast <8 x i32> %302 to <8 x float>, !dbg !21
  %304 = fadd <8 x float> %294, %303, !dbg !40
  %305 = insertelement <8 x i32> poison, i32 %199, i64 0, !dbg !23
  %306 = insertelement <8 x i32> %305, i32 %202, i64 1, !dbg !23
  %307 = insertelement <8 x i32> %306, i32 %205, i64 2, !dbg !23
  %308 = insertelement <8 x i32> %307, i32 %208, i64 3, !dbg !23
  %309 = insertelement <8 x i32> %308, i32 %211, i64 4, !dbg !23
  %310 = insertelement <8 x i32> %309, i32 %214, i64 5, !dbg !23
  %311 = insertelement <8 x i32> %310, i32 %217, i64 6, !dbg !23
  %312 = insertelement <8 x i32> %311, i32 %220, i64 7, !dbg !23
  %313 = bitcast <8 x i32> %312 to <8 x float>, !dbg !23
  %314 = fadd <8 x float> %304, %313, !dbg !41
  %315 = insertelement <8 x i32> poison, i32 %221, i64 0, !dbg !33
  %316 = insertelement <8 x i32> %315, i32 %222, i64 1, !dbg !33
  %317 = insertelement <8 x i32> %316, i32 %223, i64 2, !dbg !33
  %318 = insertelement <8 x i32> %317, i32 %224, i64 3, !dbg !33
  %319 = insertelement <8 x i32> %318, i32 %225, i64 4, !dbg !33
  %320 = insertelement <8 x i32> %319, i32 %226, i64 5, !dbg !33
  %321 = insertelement <8 x i32> %320, i32 %227, i64 6, !dbg !33
  %322 = insertelement <8 x i32> %321, i32 %228, i64 7, !dbg !33
  %323 = bitcast <8 x i32> %322 to <8 x float>, !dbg !33
  %324 = insertelement <8 x i32> poison, i32 %229, i64 0, !dbg !31
  %325 = insertelement <8 x i32> %324, i32 %230, i64 1, !dbg !31
  %326 = insertelement <8 x i32> %325, i32 %231, i64 2, !dbg !31
  %327 = insertelement <8 x i32> %326, i32 %232, i64 3, !dbg !31
  %328 = insertelement <8 x i32> %327, i32 %233, i64 4, !dbg !31
  %329 = insertelement <8 x i32> %328, i32 %234, i64 5, !dbg !31
  %330 = insertelement <8 x i32> %329, i32 %235, i64 6, !dbg !31
  %331 = insertelement <8 x i32> %330, i32 %236, i64 7, !dbg !31
  %332 = bitcast <8 x i32> %331 to <8 x float>, !dbg !31
  %333 = insertelement <8 x float> poison, float %266, i64 0, !dbg !42
  %334 = insertelement <8 x float> %333, float %265, i64 1, !dbg !42
  %335 = insertelement <8 x float> %334, float %264, i64 2, !dbg !42
  %336 = insertelement <8 x float> %335, float %263, i64 3, !dbg !42
  %337 = insertelement <8 x float> %336, float %262, i64 4, !dbg !42
  %338 = insertelement <8 x float> %337, float %261, i64 5, !dbg !42
  %339 = insertelement <8 x float> %338, float %260, i64 6, !dbg !42
  %340 = insertelement <8 x float> %339, float %259, i64 7, !dbg !42
  %341 = fmul <8 x float> %285, %340, !dbg !42
  %342 = fmul <8 x float> %341, %332, !dbg !43
  %343 = fadd <8 x float> %342, %323, !dbg !44
  %344 = fadd <8 x float> %314, %343, !dbg !45
  %345 = fcmp olt <8 x float> %344, zeroinitializer, !dbg !46
  %346 = extractelement <8 x i1> %345, i64 7, !dbg !50
  %347 = extractelement <8 x float> %344, i64 7, !dbg !50
  %348 = select i1 %346, float 0.000000e+00, float %347, !dbg !50
  %349 = extractelement <8 x i1> %345, i64 6, !dbg !50
  %350 = extractelement <8 x float> %344, i64 6, !dbg !50
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !50
  %352 = extractelement <8 x i1> %345, i64 5, !dbg !50
  %353 = extractelement <8 x float> %344, i64 5, !dbg !50
  %354 = select i1 %352, float 0.000000e+00, float %353, !dbg !50
  %355 = extractelement <8 x i1> %345, i64 4, !dbg !50
  %356 = extractelement <8 x float> %344, i64 4, !dbg !50
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !50
  %358 = extractelement <8 x i1> %345, i64 3, !dbg !50
  %359 = extractelement <8 x float> %344, i64 3, !dbg !50
  %360 = select i1 %358, float 0.000000e+00, float %359, !dbg !50
  %361 = extractelement <8 x i1> %345, i64 2, !dbg !50
  %362 = extractelement <8 x float> %344, i64 2, !dbg !50
  %363 = select i1 %361, float 0.000000e+00, float %362, !dbg !50
  %364 = extractelement <8 x i1> %345, i64 1, !dbg !50
  %365 = extractelement <8 x float> %344, i64 1, !dbg !50
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !50
  %367 = extractelement <8 x i1> %345, i64 0, !dbg !50
  %368 = extractelement <8 x float> %344, i64 0, !dbg !50
  %369 = select i1 %367, float 0.000000e+00, float %368, !dbg !50
  %370 = shl i32 %240, 12, !dbg !51
  %371 = shl i32 %256, 12, !dbg !51
  %372 = shl i32 %253, 12, !dbg !51
  %373 = shl i32 %250, 12, !dbg !51
  %374 = shl i32 %247, 12, !dbg !51
  %375 = shl i32 %245, 12, !dbg !51
  %376 = shl i32 %243, 12, !dbg !51
  %377 = shl i32 %241, 12, !dbg !51
  %378 = mul i32 %237, 4718592, !dbg !52
  %379 = add i32 %378, %.decomposed, !dbg !53
  %380 = add i32 %379, %370, !dbg !54
  %381 = add i32 %379, %371, !dbg !54
  %382 = add i32 %379, %372, !dbg !54
  %383 = add i32 %379, %373, !dbg !54
  %384 = add i32 %379, %374, !dbg !54
  %385 = add i32 %379, %375, !dbg !54
  %386 = add i32 %379, %376, !dbg !54
  %387 = add i32 %379, %377, !dbg !54
  %388 = sext i32 %380 to i64, !dbg !55
  %389 = getelementptr float, ptr addrspace(1) %8, i64 %388, !dbg !55
  %390 = sext i32 %381 to i64, !dbg !55
  %391 = getelementptr float, ptr addrspace(1) %8, i64 %390, !dbg !55
  %392 = sext i32 %382 to i64, !dbg !55
  %393 = getelementptr float, ptr addrspace(1) %8, i64 %392, !dbg !55
  %394 = sext i32 %383 to i64, !dbg !55
  %395 = getelementptr float, ptr addrspace(1) %8, i64 %394, !dbg !55
  %396 = sext i32 %384 to i64, !dbg !55
  %397 = getelementptr float, ptr addrspace(1) %8, i64 %396, !dbg !55
  %398 = sext i32 %385 to i64, !dbg !55
  %399 = getelementptr float, ptr addrspace(1) %8, i64 %398, !dbg !55
  %400 = sext i32 %386 to i64, !dbg !55
  %401 = getelementptr float, ptr addrspace(1) %8, i64 %400, !dbg !55
  %402 = sext i32 %387 to i64, !dbg !55
  %403 = getelementptr float, ptr addrspace(1) %8, i64 %402, !dbg !55
  %404 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !56
  %405 = bitcast float %348 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #4, !dbg !56
  %406 = or disjoint i32 %17, 1, !dbg !56
  %407 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %406, !dbg !56
  %408 = bitcast float %351 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %408, i1 true) #4, !dbg !56
  %409 = or disjoint i32 %17, 2, !dbg !56
  %410 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %409, !dbg !56
  %411 = bitcast float %354 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #4, !dbg !56
  %412 = or disjoint i32 %17, 3, !dbg !56
  %413 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %412, !dbg !56
  %414 = bitcast float %357 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %414, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %415 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %239, !dbg !56
  %416 = load i32, ptr addrspace(3) %415, align 4, !dbg !56
  %417 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !56
  %418 = load i32, ptr addrspace(3) %417, align 4, !dbg !56
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %252, !dbg !56
  %420 = load i32, ptr addrspace(3) %419, align 4, !dbg !56
  %421 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !56
  %422 = load i32, ptr addrspace(3) %421, align 4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %423 = bitcast float %360 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %423, i1 true) #4, !dbg !56
  %424 = bitcast float %363 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %407, <1 x i32> %424, i1 true) #4, !dbg !56
  %425 = bitcast float %366 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %425, i1 true) #4, !dbg !56
  %426 = bitcast float %369 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %426, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %427 = load i32, ptr addrspace(3) %415, align 4, !dbg !56
  %428 = load i32, ptr addrspace(3) %417, align 4, !dbg !56
  %429 = load i32, ptr addrspace(3) %419, align 4, !dbg !56
  %430 = load i32, ptr addrspace(3) %421, align 4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %416, ptr addrspace(1) %389, i1 %258) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %418, ptr addrspace(1) %391, i1 %257) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %420, ptr addrspace(1) %393, i1 %254) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %422, ptr addrspace(1) %395, i1 %251) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %427, ptr addrspace(1) %397, i1 %248) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %428, ptr addrspace(1) %399, i1 %246) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %429, ptr addrspace(1) %401, i1 %244) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %430, ptr addrspace(1) %403, i1 %242) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckbxd4ntqvfoyfcpw4mokohoo6qzye4h2f2iov7llxpltfkfaa76.py", directory: "inductor_cache/kb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 32, column: 40, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 45, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 45, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 27, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 18, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 19, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 58, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 59, column: 35, scope: !7)
!52 = !DILocation(line: 59, column: 48, scope: !7)
!53 = !DILocation(line: 59, column: 30, scope: !7)
!54 = !DILocation(line: 59, column: 40, scope: !7)
!55 = !DILocation(line: 59, column: 25, scope: !7)
!56 = !DILocation(line: 59, column: 60, scope: !7)
!57 = !DILocation(line: 59, column: 4, scope: !7)
