; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 384, !dbg !14
  %14 = mul i32 %13, 384, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %.frozen4 = freeze i32 %12, !dbg !14
  %15 = sdiv i32 %.frozen4, 384, !dbg !14
  %16 = mul i32 %15, 384, !dbg !15
  %.decomposed5 = sub i32 %.frozen4, %16, !dbg !15
  %17 = sdiv i32 %11, 3072, !dbg !16
  %18 = sdiv i32 %12, 3072, !dbg !16
  %19 = srem i32 %17, 8, !dbg !17
  %20 = srem i32 %18, 8, !dbg !17
  %21 = srem i32 %13, 8, !dbg !18
  %22 = srem i32 %15, 8, !dbg !18
  %23 = sdiv i32 %11, 24576, !dbg !19
  %24 = sdiv i32 %12, 24576, !dbg !19
  %25 = sext i32 %.decomposed to i64, !dbg !20
  %26 = sext i32 %.decomposed5 to i64, !dbg !20
  %27 = icmp slt i32 %.decomposed, 128, !dbg !20
  %28 = icmp slt i32 %.decomposed5, 128, !dbg !20
  %29 = sext i32 %19 to i64, !dbg !21
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = sext i32 %20 to i64, !dbg !21
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %27, i1 %27) #1, !dbg !22
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %27, i1 %27) #1, !dbg !22
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %27, i1 %27) #1, !dbg !22
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %27, i1 %27) #1, !dbg !22
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %32, i1 %28, i1 %28) #1, !dbg !22
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %32, i1 %28, i1 %28) #1, !dbg !22
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %32, i1 %28, i1 %28) #1, !dbg !22
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %32, i1 %28, i1 %28) #1, !dbg !22
  %41 = lshr i64 %33, 61, !dbg !23
  %42 = and i64 %41, 4, !dbg !23
  %43 = add i64 %42, %33, !dbg !23
  %44 = lshr i64 %37, 61, !dbg !23
  %45 = and i64 %44, 4, !dbg !23
  %46 = add i64 %45, %37, !dbg !23
  %47 = sext i32 %21 to i64, !dbg !24
  %48 = getelementptr i64, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %22 to i64, !dbg !24
  %50 = getelementptr i64, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %48, i1 %27, i1 %27) #1, !dbg !25
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %48, i1 %27, i1 %27) #1, !dbg !25
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %48, i1 %27, i1 %27) #1, !dbg !25
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %48, i1 %27, i1 %27) #1, !dbg !25
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %50, i1 %28, i1 %28) #1, !dbg !25
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %50, i1 %28, i1 %28) #1, !dbg !25
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %50, i1 %28, i1 %28) #1, !dbg !25
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %50, i1 %28, i1 %28) #1, !dbg !25
  %59 = lshr i64 %51, 61, !dbg !26
  %60 = and i64 %59, 4, !dbg !26
  %61 = add i64 %60, %51, !dbg !26
  %62 = lshr i64 %55, 61, !dbg !26
  %63 = and i64 %62, 4, !dbg !26
  %64 = add i64 %63, %55, !dbg !26
  %65 = shl nsw i32 %23, 11, !dbg !27
  %66 = shl nsw i32 %24, 11, !dbg !27
  %67 = sext i32 %65 to i64, !dbg !28
  %68 = sext i32 %66 to i64, !dbg !28
  %.idx = shl i64 %61, 9, !dbg !29
  %69 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !29
  %.idx1 = shl i64 %43, 11, !dbg !29
  %70 = getelementptr i8, ptr addrspace(1) %69, i64 %.idx1, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %67, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %25, !dbg !29
  %.idx2 = shl i64 %64, 9, !dbg !29
  %73 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx2, !dbg !29
  %.idx3 = shl i64 %46, 11, !dbg !29
  %74 = getelementptr i8, ptr addrspace(1) %73, i64 %.idx3, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %68, !dbg !29
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %26, !dbg !29
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #1, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !30
  %82 = bitcast i32 %78 to float, !dbg !30
  %83 = bitcast i32 %79 to float, !dbg !30
  %84 = bitcast i32 %80 to float, !dbg !30
  %85 = bitcast i32 %81 to float, !dbg !30
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !30
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !30
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !30
  %91 = bitcast i32 %87 to float, !dbg !30
  %92 = bitcast i32 %88 to float, !dbg !30
  %93 = bitcast i32 %89 to float, !dbg !30
  %94 = bitcast i32 %90 to float, !dbg !30
  %95 = fcmp ogt float %82, 0.000000e+00, !dbg !31
  %96 = fcmp ogt float %83, 0.000000e+00, !dbg !31
  %97 = fcmp ogt float %84, 0.000000e+00, !dbg !31
  %98 = fcmp ogt float %85, 0.000000e+00, !dbg !31
  %99 = fcmp ogt float %91, 0.000000e+00, !dbg !31
  %100 = fcmp ogt float %92, 0.000000e+00, !dbg !31
  %101 = fcmp ogt float %93, 0.000000e+00, !dbg !31
  %102 = fcmp ogt float %94, 0.000000e+00, !dbg !31
  %103 = fmul float %82, 0x3FB99999A0000000, !dbg !32
  %104 = fmul float %83, 0x3FB99999A0000000, !dbg !32
  %105 = fmul float %84, 0x3FB99999A0000000, !dbg !32
  %106 = fmul float %85, 0x3FB99999A0000000, !dbg !32
  %107 = fmul float %91, 0x3FB99999A0000000, !dbg !32
  %108 = fmul float %92, 0x3FB99999A0000000, !dbg !32
  %109 = fmul float %93, 0x3FB99999A0000000, !dbg !32
  %110 = fmul float %94, 0x3FB99999A0000000, !dbg !32
  %111 = select i1 %95, float %82, float %103, !dbg !33
  %112 = select i1 %96, float %83, float %104, !dbg !33
  %113 = select i1 %97, float %84, float %105, !dbg !33
  %114 = select i1 %98, float %85, float %106, !dbg !33
  %115 = select i1 %99, float %91, float %107, !dbg !33
  %116 = select i1 %100, float %92, float %108, !dbg !33
  %117 = select i1 %101, float %93, float %109, !dbg !33
  %118 = select i1 %102, float %94, float %110, !dbg !33
  %119 = icmp sgt i32 %.decomposed, 127, !dbg !34
  %120 = icmp sgt i32 %.decomposed5, 127, !dbg !34
  %121 = shl nsw i32 %13, 8, !dbg !35
  %122 = shl nsw i32 %15, 8, !dbg !35
  %123 = add nsw i32 %.decomposed, -128, !dbg !36
  %124 = add nsw i32 %.decomposed5, -128, !dbg !36
  %125 = add nsw i32 %123, %121, !dbg !37
  %126 = add nsw i32 %124, %122, !dbg !37
  %127 = sext i32 %125 to i64, !dbg !38
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !38
  %129 = sext i32 %126 to i64, !dbg !38
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !38
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #1, !dbg !39
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !39
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !39
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !39
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %130, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #1, !dbg !39
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !39
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !39
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !39
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !39
  %141 = sext i32 %11 to i64, !dbg !40
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %141, !dbg !40
  %143 = sext i32 %12 to i64, !dbg !40
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %143, !dbg !40
  %145 = bitcast float %111 to i32, !dbg !41
  %146 = select i1 %27, i32 %145, i32 %132, !dbg !42
  %147 = bitcast float %112 to i32, !dbg !41
  %148 = select i1 %27, i32 %147, i32 %133, !dbg !42
  %149 = bitcast float %113 to i32, !dbg !41
  %150 = select i1 %27, i32 %149, i32 %134, !dbg !42
  %151 = bitcast float %114 to i32, !dbg !41
  %152 = select i1 %27, i32 %151, i32 %135, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %146, i32 %148, i32 %150, i32 %152, ptr addrspace(1) %142, i1 true) #1, !dbg !41
  %153 = bitcast float %115 to i32, !dbg !41
  %154 = select i1 %28, i32 %153, i32 %137, !dbg !42
  %155 = bitcast float %116 to i32, !dbg !41
  %156 = select i1 %28, i32 %155, i32 %138, !dbg !42
  %157 = bitcast float %117 to i32, !dbg !41
  %158 = select i1 %28, i32 %157, i32 %139, !dbg !42
  %159 = bitcast float %118 to i32, !dbg !41
  %160 = select i1 %28, i32 %159, i32 %140, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %154, i32 %156, i32 %158, i32 %160, ptr addrspace(1) %144, i1 true) #1, !dbg !41
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctctb6eefd346x4sqs2jhm7ptdohd4x4t6qfl6htur2ozcti3bjt.py", directory: "inductor_cache/tc")
!4 = !{ptr @triton_poi_fused_cat_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_34", linkageName: "triton_poi_fused_cat_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 29, scope: !7)
!18 = !DILocation(line: 26, column: 28, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 39, column: 32, scope: !7)
!24 = !DILocation(line: 40, column: 31, scope: !7)
!25 = !DILocation(line: 40, column: 36, scope: !7)
!26 = !DILocation(line: 43, column: 35, scope: !7)
!27 = !DILocation(line: 44, column: 59, scope: !7)
!28 = !DILocation(line: 44, column: 54, scope: !7)
!29 = !DILocation(line: 44, column: 31, scope: !7)
!30 = !DILocation(line: 44, column: 71, scope: !7)
!31 = !DILocation(line: 46, column: 20, scope: !7)
!32 = !DILocation(line: 48, column: 20, scope: !7)
!33 = !DILocation(line: 49, column: 35, scope: !7)
!34 = !DILocation(line: 52, column: 20, scope: !7)
!35 = !DILocation(line: 55, column: 35, scope: !7)
!36 = !DILocation(line: 55, column: 50, scope: !7)
!37 = !DILocation(line: 55, column: 41, scope: !7)
!38 = !DILocation(line: 55, column: 31, scope: !7)
!39 = !DILocation(line: 55, column: 56, scope: !7)
!40 = !DILocation(line: 57, column: 25, scope: !7)
!41 = !DILocation(line: 57, column: 37, scope: !7)
!42 = !DILocation(line: 0, scope: !7)
!43 = !DILocation(line: 57, column: 4, scope: !7)
