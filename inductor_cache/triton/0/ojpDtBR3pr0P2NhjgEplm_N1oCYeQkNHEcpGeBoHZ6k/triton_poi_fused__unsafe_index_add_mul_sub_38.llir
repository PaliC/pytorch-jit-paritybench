; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 512, !dbg !13
  %16 = or disjoint i32 %13, 514, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %17 = sdiv i32 %.frozen, 72, !dbg !14
  %.frozen1 = freeze i32 %15, !dbg !14
  %18 = sdiv i32 %.frozen1, 72, !dbg !14
  %19 = srem i32 %17, 72, !dbg !15
  %20 = srem i32 %18, 72, !dbg !15
  %21 = mul i32 %17, 72, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %14, 72, !dbg !16
  %23 = mul i32 %18, 72, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %23, !dbg !16
  %24 = srem i32 %16, 72, !dbg !16
  %25 = sdiv i32 %13, 5184, !dbg !17
  %26 = sdiv i32 %15, 5184, !dbg !17
  %27 = sext i32 %19 to i64, !dbg !18
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !18
  %29 = sext i32 %20 to i64, !dbg !18
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %39 = sext i32 %.decomposed to i64, !dbg !20
  %40 = getelementptr i64, ptr addrspace(1) %1, i64 %39, !dbg !20
  %41 = sext i32 %22 to i64, !dbg !20
  %42 = getelementptr i64, ptr addrspace(1) %1, i64 %41, !dbg !20
  %43 = sext i32 %.decomposed2 to i64, !dbg !20
  %44 = getelementptr i64, ptr addrspace(1) %1, i64 %43, !dbg !20
  %45 = sext i32 %24 to i64, !dbg !20
  %46 = getelementptr i64, ptr addrspace(1) %1, i64 %45, !dbg !20
  %47 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !21
  %48 = extractvalue { i64, i64 } %47, 0, !dbg !21
  %49 = extractvalue { i64, i64 } %47, 1, !dbg !21
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !21
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !21
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !21
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !21
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !21
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !21
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !21
  %57 = extractvalue { i64, i64 } %56, 0, !dbg !21
  %58 = extractvalue { i64, i64 } %56, 1, !dbg !21
  %59 = getelementptr i64, ptr addrspace(1) %3, i64 %39, !dbg !22
  %60 = getelementptr i64, ptr addrspace(1) %3, i64 %41, !dbg !22
  %61 = getelementptr i64, ptr addrspace(1) %3, i64 %43, !dbg !22
  %62 = getelementptr i64, ptr addrspace(1) %3, i64 %45, !dbg !22
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !23
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !23
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !23
  %66 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !23
  %67 = extractvalue { i64, i64 } %66, 0, !dbg !23
  %68 = extractvalue { i64, i64 } %66, 1, !dbg !23
  %69 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !23
  %70 = extractvalue { i64, i64 } %69, 0, !dbg !23
  %71 = extractvalue { i64, i64 } %69, 1, !dbg !23
  %72 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !23
  %73 = extractvalue { i64, i64 } %72, 0, !dbg !23
  %74 = extractvalue { i64, i64 } %72, 1, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !24
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !25
  %82 = bitcast i32 %78 to float, !dbg !25
  %83 = bitcast i32 %79 to float, !dbg !25
  %84 = bitcast i32 %80 to float, !dbg !25
  %85 = bitcast i32 %81 to float, !dbg !25
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !25
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !25
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !25
  %91 = bitcast i32 %87 to float, !dbg !25
  %92 = bitcast i32 %88 to float, !dbg !25
  %93 = bitcast i32 %89 to float, !dbg !25
  %94 = bitcast i32 %90 to float, !dbg !25
  %95 = add i64 %31, 252, !dbg !26
  %96 = add i64 %35, 252, !dbg !26
  %97 = icmp slt i64 %31, 0, !dbg !27
  %98 = icmp slt i64 %35, 0, !dbg !27
  %99 = select i1 %97, i64 %95, i64 %31, !dbg !28
  %100 = select i1 %98, i64 %96, i64 %35, !dbg !28
  %101 = add i64 %48, 252, !dbg !29
  %102 = add i64 %49, 252, !dbg !29
  %103 = add i64 %51, 252, !dbg !29
  %104 = add i64 %52, 252, !dbg !29
  %105 = add i64 %54, 252, !dbg !29
  %106 = add i64 %55, 252, !dbg !29
  %107 = add i64 %57, 252, !dbg !29
  %108 = add i64 %58, 252, !dbg !29
  %109 = icmp slt i64 %48, 0, !dbg !30
  %110 = icmp slt i64 %49, 0, !dbg !30
  %111 = icmp slt i64 %51, 0, !dbg !30
  %112 = icmp slt i64 %52, 0, !dbg !30
  %113 = icmp slt i64 %54, 0, !dbg !30
  %114 = icmp slt i64 %55, 0, !dbg !30
  %115 = icmp slt i64 %57, 0, !dbg !30
  %116 = icmp slt i64 %58, 0, !dbg !30
  %117 = select i1 %109, i64 %101, i64 %48, !dbg !31
  %118 = select i1 %110, i64 %102, i64 %49, !dbg !31
  %119 = select i1 %111, i64 %103, i64 %51, !dbg !31
  %120 = select i1 %112, i64 %104, i64 %52, !dbg !31
  %121 = select i1 %113, i64 %105, i64 %54, !dbg !31
  %122 = select i1 %114, i64 %106, i64 %55, !dbg !31
  %123 = select i1 %115, i64 %107, i64 %57, !dbg !31
  %124 = select i1 %116, i64 %108, i64 %58, !dbg !31
  %125 = mul i64 %99, 252, !dbg !32
  %126 = mul i64 %100, 252, !dbg !32
  %127 = mul i32 %25, 63504, !dbg !33
  %128 = mul i32 %26, 63504, !dbg !33
  %129 = sext i32 %127 to i64, !dbg !34
  %130 = sext i32 %128 to i64, !dbg !34
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !35
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %125, !dbg !35
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %129, !dbg !35
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !35
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %125, !dbg !35
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %129, !dbg !35
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !35
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %125, !dbg !35
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %129, !dbg !35
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !35
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %125, !dbg !35
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %129, !dbg !35
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !35
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %126, !dbg !35
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %130, !dbg !35
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !35
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %126, !dbg !35
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %130, !dbg !35
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !35
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %126, !dbg !35
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %130, !dbg !35
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !35
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %126, !dbg !35
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %130, !dbg !35
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !36
  %156 = bitcast i32 %155 to float, !dbg !36
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !36
  %158 = bitcast i32 %157 to float, !dbg !36
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #1, !dbg !36
  %160 = bitcast i32 %159 to float, !dbg !36
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #1, !dbg !36
  %162 = bitcast i32 %161 to float, !dbg !36
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !36
  %164 = bitcast i32 %163 to float, !dbg !36
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !36
  %166 = bitcast i32 %165 to float, !dbg !36
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #1, !dbg !36
  %168 = bitcast i32 %167 to float, !dbg !36
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !36
  %170 = bitcast i32 %169 to float, !dbg !36
  %171 = add i64 %64, 252, !dbg !37
  %172 = add i64 %65, 252, !dbg !37
  %173 = add i64 %67, 252, !dbg !37
  %174 = add i64 %68, 252, !dbg !37
  %175 = add i64 %70, 252, !dbg !37
  %176 = add i64 %71, 252, !dbg !37
  %177 = add i64 %73, 252, !dbg !37
  %178 = add i64 %74, 252, !dbg !37
  %179 = icmp slt i64 %64, 0, !dbg !38
  %180 = icmp slt i64 %65, 0, !dbg !38
  %181 = icmp slt i64 %67, 0, !dbg !38
  %182 = icmp slt i64 %68, 0, !dbg !38
  %183 = icmp slt i64 %70, 0, !dbg !38
  %184 = icmp slt i64 %71, 0, !dbg !38
  %185 = icmp slt i64 %73, 0, !dbg !38
  %186 = icmp slt i64 %74, 0, !dbg !38
  %187 = select i1 %179, i64 %171, i64 %64, !dbg !39
  %188 = select i1 %180, i64 %172, i64 %65, !dbg !39
  %189 = select i1 %181, i64 %173, i64 %67, !dbg !39
  %190 = select i1 %182, i64 %174, i64 %68, !dbg !39
  %191 = select i1 %183, i64 %175, i64 %70, !dbg !39
  %192 = select i1 %184, i64 %176, i64 %71, !dbg !39
  %193 = select i1 %185, i64 %177, i64 %73, !dbg !39
  %194 = select i1 %186, i64 %178, i64 %74, !dbg !39
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %187, !dbg !40
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %125, !dbg !40
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %129, !dbg !40
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !40
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %125, !dbg !40
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %129, !dbg !40
  %201 = getelementptr float, ptr addrspace(1) %2, i64 %189, !dbg !40
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %125, !dbg !40
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %129, !dbg !40
  %204 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !40
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %125, !dbg !40
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %129, !dbg !40
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %191, !dbg !40
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %126, !dbg !40
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %130, !dbg !40
  %210 = getelementptr float, ptr addrspace(1) %2, i64 %192, !dbg !40
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %126, !dbg !40
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %130, !dbg !40
  %213 = getelementptr float, ptr addrspace(1) %2, i64 %193, !dbg !40
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %126, !dbg !40
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %130, !dbg !40
  %216 = getelementptr float, ptr addrspace(1) %2, i64 %194, !dbg !40
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %126, !dbg !40
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %130, !dbg !40
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 true) #1, !dbg !41
  %220 = bitcast i32 %219 to float, !dbg !41
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #1, !dbg !41
  %222 = bitcast i32 %221 to float, !dbg !41
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 true) #1, !dbg !41
  %224 = bitcast i32 %223 to float, !dbg !41
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #1, !dbg !41
  %226 = bitcast i32 %225 to float, !dbg !41
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 true) #1, !dbg !41
  %228 = bitcast i32 %227 to float, !dbg !41
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #1, !dbg !41
  %230 = bitcast i32 %229 to float, !dbg !41
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 true) #1, !dbg !41
  %232 = bitcast i32 %231 to float, !dbg !41
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !41
  %234 = bitcast i32 %233 to float, !dbg !41
  %235 = fsub float %220, %156, !dbg !42
  %236 = fsub float %222, %158, !dbg !42
  %237 = fsub float %224, %160, !dbg !42
  %238 = fsub float %226, %162, !dbg !42
  %239 = fsub float %228, %164, !dbg !42
  %240 = fsub float %230, %166, !dbg !42
  %241 = fsub float %232, %168, !dbg !42
  %242 = fsub float %234, %170, !dbg !42
  %243 = fmul float %235, %82, !dbg !43
  %244 = fmul float %236, %83, !dbg !43
  %245 = fmul float %237, %84, !dbg !43
  %246 = fmul float %238, %85, !dbg !43
  %247 = fmul float %239, %91, !dbg !43
  %248 = fmul float %240, %92, !dbg !43
  %249 = fmul float %241, %93, !dbg !43
  %250 = fmul float %242, %94, !dbg !43
  %251 = fadd float %243, %156, !dbg !44
  %252 = fadd float %244, %158, !dbg !44
  %253 = fadd float %245, %160, !dbg !44
  %254 = fadd float %246, %162, !dbg !44
  %255 = fadd float %247, %164, !dbg !44
  %256 = fadd float %248, %166, !dbg !44
  %257 = fadd float %249, %168, !dbg !44
  %258 = fadd float %250, %170, !dbg !44
  %259 = sext i32 %13 to i64, !dbg !45
  %260 = getelementptr float, ptr addrspace(1) %5, i64 %259, !dbg !45
  %261 = sext i32 %15 to i64, !dbg !45
  %262 = getelementptr float, ptr addrspace(1) %5, i64 %261, !dbg !45
  %263 = bitcast float %251 to i32, !dbg !46
  %264 = bitcast float %252 to i32, !dbg !46
  %265 = bitcast float %253 to i32, !dbg !46
  %266 = bitcast float %254 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %263, i32 %264, i32 %265, i32 %266, ptr addrspace(1) %260, i1 true) #1, !dbg !46
  %267 = bitcast float %255 to i32, !dbg !46
  %268 = bitcast float %256 to i32, !dbg !46
  %269 = bitcast float %257 to i32, !dbg !46
  %270 = bitcast float %258 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %267, i32 %268, i32 %269, i32 %270, ptr addrspace(1) %262, i1 true) #1, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnrvrjs2vmjshy3nmx46vyayc4iyutpajavlwfe2gbomjmpa7ucz.py", directory: "inductor_cache/nr")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_38", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 32, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 32, scope: !7)
!32 = !DILocation(line: 39, column: 41, scope: !7)
!33 = !DILocation(line: 39, column: 54, scope: !7)
!34 = !DILocation(line: 39, column: 48, scope: !7)
!35 = !DILocation(line: 39, column: 30, scope: !7)
!36 = !DILocation(line: 39, column: 59, scope: !7)
!37 = !DILocation(line: 40, column: 20, scope: !7)
!38 = !DILocation(line: 41, column: 20, scope: !7)
!39 = !DILocation(line: 42, column: 35, scope: !7)
!40 = !DILocation(line: 43, column: 31, scope: !7)
!41 = !DILocation(line: 43, column: 61, scope: !7)
!42 = !DILocation(line: 44, column: 20, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 46, column: 19, scope: !7)
!45 = !DILocation(line: 47, column: 25, scope: !7)
!46 = !DILocation(line: 47, column: 37, scope: !7)
!47 = !DILocation(line: 47, column: 4, scope: !7)
