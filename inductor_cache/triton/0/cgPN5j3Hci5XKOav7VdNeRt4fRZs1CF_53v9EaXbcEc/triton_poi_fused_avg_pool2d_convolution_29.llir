; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_convolution_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 5, !dbg !12
  %12 = and i32 %11, 3, !dbg !12
  %13 = shl i32 %10, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = and i32 %10, 31, !dbg !16
  %20 = lshr i32 %10, 3, !dbg !16
  %21 = and i32 %20, 15, !dbg !16
  %22 = or disjoint i32 %18, %19, !dbg !17
  %23 = or disjoint i32 %18, %21, !dbg !17
  %24 = or disjoint i32 %23, 16, !dbg !17
  %25 = icmp slt i32 %22, 289, !dbg !18
  %26 = icmp slt i32 %23, 289, !dbg !18
  %27 = icmp slt i32 %24, 289, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %28 = sdiv i32 %.frozen, 768, !dbg !19
  %29 = mul i32 %28, 768, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %.frozen40 = freeze i32 %22, !dbg !21
  %30 = sdiv i32 %.frozen40, 17, !dbg !21
  %31 = mul i32 %30, 17, !dbg !22
  %.decomposed41 = sub i32 %.frozen40, %31, !dbg !22
  %32 = mul i32 %15, 289, !dbg !23
  %33 = add i32 %32, 1156, !dbg !23
  %34 = add i32 %32, 2312, !dbg !23
  %35 = add i32 %32, 3468, !dbg !23
  %36 = add i32 %32, 4624, !dbg !23
  %37 = add i32 %32, 5780, !dbg !23
  %38 = add i32 %32, 6936, !dbg !23
  %39 = add i32 %32, 8092, !dbg !23
  %40 = add i32 %22, %32, !dbg !24
  %41 = add i32 %22, %33, !dbg !24
  %42 = add i32 %22, %34, !dbg !24
  %43 = add i32 %22, %35, !dbg !24
  %44 = add i32 %22, %36, !dbg !24
  %45 = add i32 %22, %37, !dbg !24
  %46 = add i32 %22, %38, !dbg !24
  %47 = add i32 %22, %39, !dbg !24
  %48 = sext i32 %40 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = sext i32 %41 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = sext i32 %42 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = sext i32 %43 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !25
  %56 = sext i32 %44 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !25
  %58 = sext i32 %45 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !25
  %60 = sext i32 %46 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !25
  %62 = sext i32 %47 to i64, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %25) #2, !dbg !26
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %25) #2, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %25) #2, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %25) #2, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #2, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #2, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %25) #2, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %25) #2, !dbg !26
  %72 = icmp sgt i32 %.decomposed41, 0, !dbg !27
  %73 = add i32 %22, -18, !dbg !28
  %74 = add i32 %73, %32, !dbg !29
  %75 = add i32 %73, %33, !dbg !29
  %76 = add i32 %73, %34, !dbg !29
  %77 = add i32 %73, %35, !dbg !29
  %78 = add i32 %73, %36, !dbg !29
  %79 = add i32 %73, %37, !dbg !29
  %80 = add i32 %73, %38, !dbg !29
  %81 = add i32 %73, %39, !dbg !29
  %82 = sext i32 %74 to i64, !dbg !30
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !30
  %84 = sext i32 %75 to i64, !dbg !30
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !30
  %86 = sext i32 %76 to i64, !dbg !30
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !30
  %88 = sext i32 %77 to i64, !dbg !30
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !30
  %90 = sext i32 %78 to i64, !dbg !30
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !30
  %92 = sext i32 %79 to i64, !dbg !30
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !30
  %94 = sext i32 %80 to i64, !dbg !30
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !30
  %96 = sext i32 %81 to i64, !dbg !30
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !30
  %98 = add i32 %22, -17, !dbg !31
  %99 = icmp ult i32 %98, 272, !dbg !31
  %100 = and i1 %99, %72, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %100, i32 0, i1 %100) #2, !dbg !32
  %102 = bitcast i32 %101 to float, !dbg !32
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %100, i32 0, i1 %100) #2, !dbg !32
  %104 = bitcast i32 %103 to float, !dbg !32
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %100, i32 0, i1 %100) #2, !dbg !32
  %106 = bitcast i32 %105 to float, !dbg !32
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %100, i32 0, i1 %100) #2, !dbg !32
  %108 = bitcast i32 %107 to float, !dbg !32
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %100, i32 0, i1 %100) #2, !dbg !32
  %110 = bitcast i32 %109 to float, !dbg !32
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %100, i32 0, i1 %100) #2, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %100, i32 0, i1 %100) #2, !dbg !32
  %114 = bitcast i32 %113 to float, !dbg !32
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %100, i32 0, i1 %100) #2, !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = icmp sgt i32 %.decomposed41, -1, !dbg !33
  %118 = add i32 %98, %32, !dbg !34
  %119 = add i32 %98, %33, !dbg !34
  %120 = add i32 %98, %34, !dbg !34
  %121 = add i32 %98, %35, !dbg !34
  %122 = add i32 %98, %36, !dbg !34
  %123 = add i32 %98, %37, !dbg !34
  %124 = add i32 %98, %38, !dbg !34
  %125 = add i32 %98, %39, !dbg !34
  %126 = sext i32 %118 to i64, !dbg !35
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !35
  %128 = sext i32 %119 to i64, !dbg !35
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !35
  %130 = sext i32 %120 to i64, !dbg !35
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !35
  %132 = sext i32 %121 to i64, !dbg !35
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !35
  %134 = sext i32 %122 to i64, !dbg !35
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !35
  %136 = sext i32 %123 to i64, !dbg !35
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !35
  %138 = sext i32 %124 to i64, !dbg !35
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !35
  %140 = sext i32 %125 to i64, !dbg !35
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !35
  %142 = and i1 %99, %117, !dbg !36
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %142, i32 0, i1 %142) #2, !dbg !37
  %144 = bitcast i32 %143 to float, !dbg !37
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %142, i32 0, i1 %142) #2, !dbg !37
  %146 = bitcast i32 %145 to float, !dbg !37
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %142, i32 0, i1 %142) #2, !dbg !37
  %148 = bitcast i32 %147 to float, !dbg !37
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %142, i32 0, i1 %142) #2, !dbg !37
  %150 = bitcast i32 %149 to float, !dbg !37
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %142, i32 0, i1 %142) #2, !dbg !37
  %152 = bitcast i32 %151 to float, !dbg !37
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %142, i32 0, i1 %142) #2, !dbg !37
  %154 = bitcast i32 %153 to float, !dbg !37
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %142, i32 0, i1 %142) #2, !dbg !37
  %156 = bitcast i32 %155 to float, !dbg !37
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %142, i32 0, i1 %142) #2, !dbg !37
  %158 = bitcast i32 %157 to float, !dbg !37
  %159 = fadd float %102, %144, !dbg !38
  %160 = fadd float %104, %146, !dbg !38
  %161 = fadd float %106, %148, !dbg !38
  %162 = fadd float %108, %150, !dbg !38
  %163 = fadd float %110, %152, !dbg !38
  %164 = fadd float %112, %154, !dbg !38
  %165 = fadd float %114, %156, !dbg !38
  %166 = fadd float %116, %158, !dbg !38
  %167 = add nsw i32 %.decomposed41, 1, !dbg !39
  %168 = icmp ult i32 %167, 17, !dbg !39
  %169 = add i32 %22, -16, !dbg !40
  %170 = add i32 %169, %32, !dbg !41
  %171 = add i32 %169, %33, !dbg !41
  %172 = add i32 %169, %34, !dbg !41
  %173 = add i32 %169, %35, !dbg !41
  %174 = add i32 %169, %36, !dbg !41
  %175 = add i32 %169, %37, !dbg !41
  %176 = add i32 %169, %38, !dbg !41
  %177 = add i32 %169, %39, !dbg !41
  %178 = sext i32 %170 to i64, !dbg !42
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !42
  %180 = sext i32 %171 to i64, !dbg !42
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !42
  %182 = sext i32 %172 to i64, !dbg !42
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !42
  %184 = sext i32 %173 to i64, !dbg !42
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !42
  %186 = sext i32 %174 to i64, !dbg !42
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !42
  %188 = sext i32 %175 to i64, !dbg !42
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !42
  %190 = sext i32 %176 to i64, !dbg !42
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !42
  %192 = sext i32 %177 to i64, !dbg !42
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !42
  %194 = and i1 %99, %168, !dbg !43
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %194, i32 0, i1 %194) #2, !dbg !44
  %196 = bitcast i32 %195 to float, !dbg !44
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %194, i32 0, i1 %194) #2, !dbg !44
  %198 = bitcast i32 %197 to float, !dbg !44
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %194, i32 0, i1 %194) #2, !dbg !44
  %200 = bitcast i32 %199 to float, !dbg !44
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %194, i32 0, i1 %194) #2, !dbg !44
  %202 = bitcast i32 %201 to float, !dbg !44
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %194, i32 0, i1 %194) #2, !dbg !44
  %204 = bitcast i32 %203 to float, !dbg !44
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %194, i32 0, i1 %194) #2, !dbg !44
  %206 = bitcast i32 %205 to float, !dbg !44
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %194, i32 0, i1 %194) #2, !dbg !44
  %208 = bitcast i32 %207 to float, !dbg !44
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %194, i32 0, i1 %194) #2, !dbg !44
  %210 = bitcast i32 %209 to float, !dbg !44
  %211 = fadd float %159, %196, !dbg !45
  %212 = fadd float %160, %198, !dbg !45
  %213 = fadd float %161, %200, !dbg !45
  %214 = fadd float %162, %202, !dbg !45
  %215 = fadd float %163, %204, !dbg !45
  %216 = fadd float %164, %206, !dbg !45
  %217 = fadd float %165, %208, !dbg !45
  %218 = fadd float %166, %210, !dbg !45
  %219 = add i32 %22, -1, !dbg !46
  %220 = add i32 %219, %32, !dbg !47
  %221 = add i32 %219, %33, !dbg !47
  %222 = add i32 %219, %34, !dbg !47
  %223 = add i32 %219, %35, !dbg !47
  %224 = add i32 %219, %36, !dbg !47
  %225 = add i32 %219, %37, !dbg !47
  %226 = add i32 %219, %38, !dbg !47
  %227 = add i32 %219, %39, !dbg !47
  %228 = sext i32 %220 to i64, !dbg !48
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !48
  %230 = sext i32 %221 to i64, !dbg !48
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !48
  %232 = sext i32 %222 to i64, !dbg !48
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !48
  %234 = sext i32 %223 to i64, !dbg !48
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !48
  %236 = sext i32 %224 to i64, !dbg !48
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !48
  %238 = sext i32 %225 to i64, !dbg !48
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !48
  %240 = sext i32 %226 to i64, !dbg !48
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !48
  %242 = sext i32 %227 to i64, !dbg !48
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !48
  %244 = add i32 %22, 16, !dbg !49
  %245 = icmp ult i32 %244, 305, !dbg !49
  %246 = and i1 %245, %72, !dbg !49
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %246, i32 0, i1 %246) #2, !dbg !50
  %248 = bitcast i32 %247 to float, !dbg !50
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %246, i32 0, i1 %246) #2, !dbg !50
  %250 = bitcast i32 %249 to float, !dbg !50
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %246, i32 0, i1 %246) #2, !dbg !50
  %252 = bitcast i32 %251 to float, !dbg !50
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %246, i32 0, i1 %246) #2, !dbg !50
  %254 = bitcast i32 %253 to float, !dbg !50
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %246, i32 0, i1 %246) #2, !dbg !50
  %256 = bitcast i32 %255 to float, !dbg !50
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %246, i32 0, i1 %246) #2, !dbg !50
  %258 = bitcast i32 %257 to float, !dbg !50
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %246, i32 0, i1 %246) #2, !dbg !50
  %260 = bitcast i32 %259 to float, !dbg !50
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %246, i32 0, i1 %246) #2, !dbg !50
  %262 = bitcast i32 %261 to float, !dbg !50
  %263 = fadd float %211, %248, !dbg !51
  %264 = fadd float %212, %250, !dbg !51
  %265 = fadd float %213, %252, !dbg !51
  %266 = fadd float %214, %254, !dbg !51
  %267 = fadd float %215, %256, !dbg !51
  %268 = fadd float %216, %258, !dbg !51
  %269 = fadd float %217, %260, !dbg !51
  %270 = fadd float %218, %262, !dbg !51
  %271 = and i1 %245, %117, !dbg !52
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %271, i32 0, i1 %271) #2, !dbg !53
  %273 = bitcast i32 %272 to float, !dbg !53
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %271, i32 0, i1 %271) #2, !dbg !53
  %275 = bitcast i32 %274 to float, !dbg !53
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %271, i32 0, i1 %271) #2, !dbg !53
  %277 = bitcast i32 %276 to float, !dbg !53
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %271, i32 0, i1 %271) #2, !dbg !53
  %279 = bitcast i32 %278 to float, !dbg !53
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %271, i32 0, i1 %271) #2, !dbg !53
  %281 = bitcast i32 %280 to float, !dbg !53
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %271, i32 0, i1 %271) #2, !dbg !53
  %283 = bitcast i32 %282 to float, !dbg !53
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %271, i32 0, i1 %271) #2, !dbg !53
  %285 = bitcast i32 %284 to float, !dbg !53
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %271, i32 0, i1 %271) #2, !dbg !53
  %287 = bitcast i32 %286 to float, !dbg !53
  %288 = fadd float %263, %273, !dbg !54
  %289 = fadd float %264, %275, !dbg !54
  %290 = fadd float %265, %277, !dbg !54
  %291 = fadd float %266, %279, !dbg !54
  %292 = fadd float %267, %281, !dbg !54
  %293 = fadd float %268, %283, !dbg !54
  %294 = fadd float %269, %285, !dbg !54
  %295 = fadd float %270, %287, !dbg !54
  %296 = add i32 %22, 1, !dbg !55
  %297 = add i32 %296, %32, !dbg !56
  %298 = add i32 %296, %33, !dbg !56
  %299 = add i32 %296, %34, !dbg !56
  %300 = add i32 %296, %35, !dbg !56
  %301 = add i32 %296, %36, !dbg !56
  %302 = add i32 %296, %37, !dbg !56
  %303 = add i32 %296, %38, !dbg !56
  %304 = add i32 %296, %39, !dbg !56
  %305 = sext i32 %297 to i64, !dbg !57
  %306 = getelementptr float, ptr addrspace(1) %0, i64 %305, !dbg !57
  %307 = sext i32 %298 to i64, !dbg !57
  %308 = getelementptr float, ptr addrspace(1) %0, i64 %307, !dbg !57
  %309 = sext i32 %299 to i64, !dbg !57
  %310 = getelementptr float, ptr addrspace(1) %0, i64 %309, !dbg !57
  %311 = sext i32 %300 to i64, !dbg !57
  %312 = getelementptr float, ptr addrspace(1) %0, i64 %311, !dbg !57
  %313 = sext i32 %301 to i64, !dbg !57
  %314 = getelementptr float, ptr addrspace(1) %0, i64 %313, !dbg !57
  %315 = sext i32 %302 to i64, !dbg !57
  %316 = getelementptr float, ptr addrspace(1) %0, i64 %315, !dbg !57
  %317 = sext i32 %303 to i64, !dbg !57
  %318 = getelementptr float, ptr addrspace(1) %0, i64 %317, !dbg !57
  %319 = sext i32 %304 to i64, !dbg !57
  %320 = getelementptr float, ptr addrspace(1) %0, i64 %319, !dbg !57
  %321 = and i1 %245, %168, !dbg !58
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %306, i1 %321, i32 0, i1 %321) #2, !dbg !59
  %323 = bitcast i32 %322 to float, !dbg !59
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %308, i1 %321, i32 0, i1 %321) #2, !dbg !59
  %325 = bitcast i32 %324 to float, !dbg !59
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %310, i1 %321, i32 0, i1 %321) #2, !dbg !59
  %327 = bitcast i32 %326 to float, !dbg !59
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %312, i1 %321, i32 0, i1 %321) #2, !dbg !59
  %329 = bitcast i32 %328 to float, !dbg !59
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %314, i1 %321, i32 0, i1 %321) #2, !dbg !59
  %331 = bitcast i32 %330 to float, !dbg !59
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %316, i1 %321, i32 0, i1 %321) #2, !dbg !59
  %333 = bitcast i32 %332 to float, !dbg !59
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %318, i1 %321, i32 0, i1 %321) #2, !dbg !59
  %335 = bitcast i32 %334 to float, !dbg !59
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %320, i1 %321, i32 0, i1 %321) #2, !dbg !59
  %337 = bitcast i32 %336 to float, !dbg !59
  %338 = fadd float %288, %323, !dbg !60
  %339 = fadd float %289, %325, !dbg !60
  %340 = fadd float %290, %327, !dbg !60
  %341 = fadd float %291, %329, !dbg !60
  %342 = fadd float %292, %331, !dbg !60
  %343 = fadd float %293, %333, !dbg !60
  %344 = fadd float %294, %335, !dbg !60
  %345 = fadd float %295, %337, !dbg !60
  %346 = add i32 %244, %32, !dbg !61
  %347 = add i32 %244, %33, !dbg !61
  %348 = add i32 %244, %34, !dbg !61
  %349 = add i32 %244, %35, !dbg !61
  %350 = add i32 %244, %36, !dbg !61
  %351 = add i32 %244, %37, !dbg !61
  %352 = add i32 %244, %38, !dbg !61
  %353 = add i32 %244, %39, !dbg !61
  %354 = sext i32 %346 to i64, !dbg !62
  %355 = getelementptr float, ptr addrspace(1) %0, i64 %354, !dbg !62
  %356 = sext i32 %347 to i64, !dbg !62
  %357 = getelementptr float, ptr addrspace(1) %0, i64 %356, !dbg !62
  %358 = sext i32 %348 to i64, !dbg !62
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !62
  %360 = sext i32 %349 to i64, !dbg !62
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !62
  %362 = sext i32 %350 to i64, !dbg !62
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !62
  %364 = sext i32 %351 to i64, !dbg !62
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %364, !dbg !62
  %366 = sext i32 %352 to i64, !dbg !62
  %367 = getelementptr float, ptr addrspace(1) %0, i64 %366, !dbg !62
  %368 = sext i32 %353 to i64, !dbg !62
  %369 = getelementptr float, ptr addrspace(1) %0, i64 %368, !dbg !62
  %370 = add i32 %22, 33, !dbg !63
  %371 = icmp ult i32 %370, 305, !dbg !63
  %372 = and i1 %371, %72, !dbg !63
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %355, i1 %372, i32 0, i1 %372) #2, !dbg !64
  %374 = bitcast i32 %373 to float, !dbg !64
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %357, i1 %372, i32 0, i1 %372) #2, !dbg !64
  %376 = bitcast i32 %375 to float, !dbg !64
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %359, i1 %372, i32 0, i1 %372) #2, !dbg !64
  %378 = bitcast i32 %377 to float, !dbg !64
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %361, i1 %372, i32 0, i1 %372) #2, !dbg !64
  %380 = bitcast i32 %379 to float, !dbg !64
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %363, i1 %372, i32 0, i1 %372) #2, !dbg !64
  %382 = bitcast i32 %381 to float, !dbg !64
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %365, i1 %372, i32 0, i1 %372) #2, !dbg !64
  %384 = bitcast i32 %383 to float, !dbg !64
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %367, i1 %372, i32 0, i1 %372) #2, !dbg !64
  %386 = bitcast i32 %385 to float, !dbg !64
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %369, i1 %372, i32 0, i1 %372) #2, !dbg !64
  %388 = bitcast i32 %387 to float, !dbg !64
  %389 = fadd float %338, %374, !dbg !65
  %390 = fadd float %339, %376, !dbg !65
  %391 = fadd float %340, %378, !dbg !65
  %392 = fadd float %341, %380, !dbg !65
  %393 = fadd float %342, %382, !dbg !65
  %394 = fadd float %343, %384, !dbg !65
  %395 = fadd float %344, %386, !dbg !65
  %396 = fadd float %345, %388, !dbg !65
  %397 = add i32 %22, 17, !dbg !66
  %398 = add i32 %397, %32, !dbg !67
  %399 = add i32 %397, %33, !dbg !67
  %400 = add i32 %397, %34, !dbg !67
  %401 = add i32 %397, %35, !dbg !67
  %402 = add i32 %397, %36, !dbg !67
  %403 = add i32 %397, %37, !dbg !67
  %404 = add i32 %397, %38, !dbg !67
  %405 = add i32 %397, %39, !dbg !67
  %406 = sext i32 %398 to i64, !dbg !68
  %407 = getelementptr float, ptr addrspace(1) %0, i64 %406, !dbg !68
  %408 = sext i32 %399 to i64, !dbg !68
  %409 = getelementptr float, ptr addrspace(1) %0, i64 %408, !dbg !68
  %410 = sext i32 %400 to i64, !dbg !68
  %411 = getelementptr float, ptr addrspace(1) %0, i64 %410, !dbg !68
  %412 = sext i32 %401 to i64, !dbg !68
  %413 = getelementptr float, ptr addrspace(1) %0, i64 %412, !dbg !68
  %414 = sext i32 %402 to i64, !dbg !68
  %415 = getelementptr float, ptr addrspace(1) %0, i64 %414, !dbg !68
  %416 = sext i32 %403 to i64, !dbg !68
  %417 = getelementptr float, ptr addrspace(1) %0, i64 %416, !dbg !68
  %418 = sext i32 %404 to i64, !dbg !68
  %419 = getelementptr float, ptr addrspace(1) %0, i64 %418, !dbg !68
  %420 = sext i32 %405 to i64, !dbg !68
  %421 = getelementptr float, ptr addrspace(1) %0, i64 %420, !dbg !68
  %422 = and i1 %371, %117, !dbg !69
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %407, i1 %422, i32 0, i1 %422) #2, !dbg !70
  %424 = bitcast i32 %423 to float, !dbg !70
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %409, i1 %422, i32 0, i1 %422) #2, !dbg !70
  %426 = bitcast i32 %425 to float, !dbg !70
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %411, i1 %422, i32 0, i1 %422) #2, !dbg !70
  %428 = bitcast i32 %427 to float, !dbg !70
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %413, i1 %422, i32 0, i1 %422) #2, !dbg !70
  %430 = bitcast i32 %429 to float, !dbg !70
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %415, i1 %422, i32 0, i1 %422) #2, !dbg !70
  %432 = bitcast i32 %431 to float, !dbg !70
  %433 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %417, i1 %422, i32 0, i1 %422) #2, !dbg !70
  %434 = bitcast i32 %433 to float, !dbg !70
  %435 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %419, i1 %422, i32 0, i1 %422) #2, !dbg !70
  %436 = bitcast i32 %435 to float, !dbg !70
  %437 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %421, i1 %422, i32 0, i1 %422) #2, !dbg !70
  %438 = bitcast i32 %437 to float, !dbg !70
  %439 = fadd float %389, %424, !dbg !71
  %440 = fadd float %390, %426, !dbg !71
  %441 = fadd float %391, %428, !dbg !71
  %442 = fadd float %392, %430, !dbg !71
  %443 = fadd float %393, %432, !dbg !71
  %444 = fadd float %394, %434, !dbg !71
  %445 = fadd float %395, %436, !dbg !71
  %446 = fadd float %396, %438, !dbg !71
  %447 = add i32 %22, 18, !dbg !72
  %448 = add i32 %447, %32, !dbg !73
  %449 = add i32 %447, %33, !dbg !73
  %450 = add i32 %447, %34, !dbg !73
  %451 = add i32 %447, %35, !dbg !73
  %452 = add i32 %447, %36, !dbg !73
  %453 = add i32 %447, %37, !dbg !73
  %454 = add i32 %447, %38, !dbg !73
  %455 = add i32 %447, %39, !dbg !73
  %456 = sext i32 %448 to i64, !dbg !74
  %457 = getelementptr float, ptr addrspace(1) %0, i64 %456, !dbg !74
  %458 = sext i32 %449 to i64, !dbg !74
  %459 = getelementptr float, ptr addrspace(1) %0, i64 %458, !dbg !74
  %460 = sext i32 %450 to i64, !dbg !74
  %461 = getelementptr float, ptr addrspace(1) %0, i64 %460, !dbg !74
  %462 = sext i32 %451 to i64, !dbg !74
  %463 = getelementptr float, ptr addrspace(1) %0, i64 %462, !dbg !74
  %464 = sext i32 %452 to i64, !dbg !74
  %465 = getelementptr float, ptr addrspace(1) %0, i64 %464, !dbg !74
  %466 = sext i32 %453 to i64, !dbg !74
  %467 = getelementptr float, ptr addrspace(1) %0, i64 %466, !dbg !74
  %468 = sext i32 %454 to i64, !dbg !74
  %469 = getelementptr float, ptr addrspace(1) %0, i64 %468, !dbg !74
  %470 = sext i32 %455 to i64, !dbg !74
  %471 = getelementptr float, ptr addrspace(1) %0, i64 %470, !dbg !74
  %472 = and i1 %371, %168, !dbg !75
  %473 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %457, i1 %472, i32 0, i1 %472) #2, !dbg !76
  %474 = bitcast i32 %473 to float, !dbg !76
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %459, i1 %472, i32 0, i1 %472) #2, !dbg !76
  %476 = bitcast i32 %475 to float, !dbg !76
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %461, i1 %472, i32 0, i1 %472) #2, !dbg !76
  %478 = bitcast i32 %477 to float, !dbg !76
  %479 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %463, i1 %472, i32 0, i1 %472) #2, !dbg !76
  %480 = bitcast i32 %479 to float, !dbg !76
  %481 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %465, i1 %472, i32 0, i1 %472) #2, !dbg !76
  %482 = bitcast i32 %481 to float, !dbg !76
  %483 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 %472, i32 0, i1 %472) #2, !dbg !76
  %484 = bitcast i32 %483 to float, !dbg !76
  %485 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %469, i1 %472, i32 0, i1 %472) #2, !dbg !76
  %486 = bitcast i32 %485 to float, !dbg !76
  %487 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %471, i1 %472, i32 0, i1 %472) #2, !dbg !76
  %488 = bitcast i32 %487 to float, !dbg !76
  %489 = fadd float %439, %474, !dbg !77
  %490 = fadd float %440, %476, !dbg !77
  %491 = fadd float %441, %478, !dbg !77
  %492 = fadd float %442, %480, !dbg !77
  %493 = fadd float %443, %482, !dbg !77
  %494 = fadd float %444, %484, !dbg !77
  %495 = fadd float %445, %486, !dbg !77
  %496 = fadd float %446, %488, !dbg !77
  %497 = mul nsw i32 %.decomposed41, %30, !dbg !78
  %498 = add nsw i32 %.decomposed41, 2, !dbg !79
  %499 = add nsw i32 %30, 2, !dbg !80
  %500 = insertelement <2 x i32> <i32 poison, i32 271>, i32 %.decomposed41, i64 0, !dbg !81
  %501 = insertelement <2 x i32> <i32 16, i32 poison>, i32 %22, i64 1, !dbg !81
  %502 = icmp slt <2 x i32> %500, %501, !dbg !81
  %503 = insertelement <2 x i32> <i32 poison, i32 18>, i32 %498, i64 0, !dbg !82
  %504 = select <2 x i1> %502, <2 x i32> %503, <2 x i32> zeroinitializer, !dbg !82
  %505 = insertelement <2 x i32> %500, i32 272, i64 1, !dbg !83
  %506 = insertelement <2 x i32> %501, i32 15, i64 0, !dbg !83
  %507 = icmp sgt <2 x i32> %505, %506, !dbg !83
  %508 = insertelement <2 x i32> <i32 18, i32 poison>, i32 %499, i64 1, !dbg !84
  %509 = select <2 x i1> %507, <2 x i32> %508, <2 x i32> zeroinitializer, !dbg !84
  %510 = add nsw <2 x i32> %509, %504, !dbg !85
  %511 = extractelement <2 x i32> %510, i64 0, !dbg !86
  %512 = extractelement <2 x i32> %510, i64 1, !dbg !87
  %513 = mul i32 %511, %512, !dbg !88
  %.neg36 = mul nsw i32 %512, %.decomposed41, !dbg !87
  %.neg37 = mul i32 %511, %30, !dbg !87
  %reass.add = add i32 %.neg36, %.neg37
  %514 = add nsw i32 %30, %.decomposed41, !dbg !89
  %reass.sub39 = sub i32 %497, %514, !dbg !89
  %515 = add i32 %reass.sub39, 1, !dbg !89
  %516 = add i32 %515, %511, !dbg !86
  %517 = add i32 %516, %512, !dbg !87
  %518 = add i32 %517, %513, !dbg !90
  %519 = sub i32 %518, %reass.add, !dbg !91
  %520 = sitofp i32 %519 to float, !dbg !92
  %521 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %489, float %520) #2, !dbg !92
  %522 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %490, float %520) #2, !dbg !92
  %523 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %491, float %520) #2, !dbg !92
  %524 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %492, float %520) #2, !dbg !92
  %525 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %493, float %520) #2, !dbg !92
  %526 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %494, float %520) #2, !dbg !92
  %527 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %495, float %520) #2, !dbg !92
  %528 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %496, float %520) #2, !dbg !92
  %529 = mul i32 %23, 768, !dbg !93
  %530 = mul i32 %24, 768, !dbg !93
  %531 = mul i32 %28, 221952, !dbg !94
  %532 = add i32 %531, %.decomposed, !dbg !95
  %533 = add i32 %532, %529, !dbg !96
  %534 = add i32 %532, %530, !dbg !96
  %535 = sext i32 %533 to i64, !dbg !97
  %536 = getelementptr float, ptr addrspace(1) %1, i64 %535, !dbg !97
  %537 = sext i32 %534 to i64, !dbg !97
  %538 = getelementptr float, ptr addrspace(1) %1, i64 %537, !dbg !97
  %539 = shl i32 %10, 5, !dbg !98
  %540 = and i32 %539, 992, !dbg !98
  %541 = or disjoint i32 %540, %12, !dbg !98
  %542 = and i32 %13, 508, !dbg !98
  %543 = lshr exact i32 %540, 3, !dbg !98
  %544 = add nuw nsw i32 %543, %541, !dbg !98
  %545 = zext nneg i32 %544 to i64, !dbg !98
  %546 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %545, !dbg !98
  %547 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %546, <1 x i32> %547, i1 true) #2, !dbg !98
  %548 = or disjoint i32 %541, 4, !dbg !98
  %549 = add nuw nsw i32 %548, %543, !dbg !98
  %550 = zext nneg i32 %549 to i64, !dbg !98
  %551 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %550, !dbg !98
  %552 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %551, <1 x i32> %552, i1 true) #2, !dbg !98
  %553 = or disjoint i32 %541, 8, !dbg !98
  %554 = add nuw nsw i32 %553, %543, !dbg !98
  %555 = zext nneg i32 %554 to i64, !dbg !98
  %556 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %555, !dbg !98
  %557 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %556, <1 x i32> %557, i1 true) #2, !dbg !98
  %558 = or disjoint i32 %541, 12, !dbg !98
  %559 = add nuw nsw i32 %558, %543, !dbg !98
  %560 = zext nneg i32 %559 to i64, !dbg !98
  %561 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %560, !dbg !98
  %562 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %562, i1 true) #2, !dbg !98
  %563 = or disjoint i32 %541, 16, !dbg !98
  %564 = add nuw nsw i32 %563, %543, !dbg !98
  %565 = zext nneg i32 %564 to i64, !dbg !98
  %566 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %565, !dbg !98
  %567 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %566, <1 x i32> %567, i1 true) #2, !dbg !98
  %568 = or disjoint i32 %541, 20, !dbg !98
  %569 = add nuw nsw i32 %568, %543, !dbg !98
  %570 = zext nneg i32 %569 to i64, !dbg !98
  %571 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %570, !dbg !98
  %572 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %571, <1 x i32> %572, i1 true) #2, !dbg !98
  %573 = or disjoint i32 %541, 24, !dbg !98
  %574 = add nuw nsw i32 %573, %543, !dbg !98
  %575 = zext nneg i32 %574 to i64, !dbg !98
  %576 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %575, !dbg !98
  %577 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %576, <1 x i32> %577, i1 true) #2, !dbg !98
  %578 = or disjoint i32 %541, 28, !dbg !98
  %579 = add nuw nsw i32 %578, %543, !dbg !98
  %580 = zext nneg i32 %579 to i64, !dbg !98
  %581 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %580, !dbg !98
  %582 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %581, <1 x i32> %582, i1 true) #2, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %583 = lshr i32 %13, 3, !dbg !98
  %584 = and i32 %583, 60, !dbg !98
  %585 = add nuw nsw i32 %584, %542, !dbg !98
  %586 = zext nneg i32 %585 to i64, !dbg !98
  %587 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %586, !dbg !98
  %588 = or disjoint i32 %542, 512, !dbg !98
  %589 = lshr i32 %588, 3, !dbg !98
  %590 = and i32 %589, 124, !dbg !98
  %591 = add nuw nsw i32 %590, %588, !dbg !98
  %592 = zext nneg i32 %591 to i64, !dbg !98
  %593 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %592, !dbg !98
  %594 = load <4 x i32>, ptr addrspace(3) %593, align 16, !dbg !98
  %.extract = load i32, ptr addrspace(3) %587, align 16, !dbg !98
  %595 = getelementptr inbounds i8, ptr addrspace(3) %587, i64 4, !dbg !98
  %.extract12 = load i32, ptr addrspace(3) %595, align 4, !dbg !98
  %596 = getelementptr inbounds i8, ptr addrspace(3) %587, i64 8, !dbg !98
  %.extract13 = load i32, ptr addrspace(3) %596, align 8, !dbg !98
  %597 = getelementptr inbounds i8, ptr addrspace(3) %587, i64 12, !dbg !98
  %.extract14 = load i32, ptr addrspace(3) %597, align 4, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %536, i1 %26) #2, !dbg !98
  %.extract15 = extractelement <4 x i32> %594, i64 0, !dbg !98
  %.extract16 = extractelement <4 x i32> %594, i64 1, !dbg !98
  %.extract17 = extractelement <4 x i32> %594, i64 2, !dbg !98
  %.extract18 = extractelement <4 x i32> %594, i64 3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %538, i1 %27) #2, !dbg !98
  %598 = getelementptr float, ptr addrspace(1) %2, i64 %535, !dbg !99
  %599 = getelementptr float, ptr addrspace(1) %2, i64 %537, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %598, i1 %26) #2, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %599, i1 %27) #2, !dbg !100
  %600 = getelementptr float, ptr addrspace(1) %3, i64 %535, !dbg !101
  %601 = getelementptr float, ptr addrspace(1) %3, i64 %537, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %600, i1 %26) #2, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %601, i1 %27) #2, !dbg !102
  %602 = getelementptr float, ptr addrspace(1) %4, i64 %535, !dbg !103
  %603 = getelementptr float, ptr addrspace(1) %4, i64 %537, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %604 = bitcast float %521 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %546, <1 x i32> %604, i1 true) #2, !dbg !104
  %605 = bitcast float %522 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %551, <1 x i32> %605, i1 true) #2, !dbg !104
  %606 = bitcast float %523 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %556, <1 x i32> %606, i1 true) #2, !dbg !104
  %607 = bitcast float %524 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %607, i1 true) #2, !dbg !104
  %608 = bitcast float %525 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %566, <1 x i32> %608, i1 true) #2, !dbg !104
  %609 = bitcast float %526 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %571, <1 x i32> %609, i1 true) #2, !dbg !104
  %610 = bitcast float %527 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %576, <1 x i32> %610, i1 true) #2, !dbg !104
  %611 = bitcast float %528 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %581, <1 x i32> %611, i1 true) #2, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %612 = load <4 x i32>, ptr addrspace(3) %593, align 16, !dbg !104
  %.extract26 = load i32, ptr addrspace(3) %587, align 16, !dbg !104
  %.extract27 = load i32, ptr addrspace(3) %595, align 4, !dbg !104
  %.extract28 = load i32, ptr addrspace(3) %596, align 8, !dbg !104
  %.extract29 = load i32, ptr addrspace(3) %597, align 4, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %602, i1 %26) #2, !dbg !104
  %.extract30 = extractelement <4 x i32> %612, i64 0, !dbg !104
  %.extract31 = extractelement <4 x i32> %612, i64 1, !dbg !104
  %.extract32 = extractelement <4 x i32> %612, i64 2, !dbg !104
  %.extract33 = extractelement <4 x i32> %612, i64 3, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %603, i1 %27) #2, !dbg !104
  ret void, !dbg !105
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4rnneett6okjia5wtfz2xfhswrwg2hoxr24ssxgxzupp5utevyy.py", directory: "inductor_cache/4r")
!4 = !{ptr @triton_poi_fused_avg_pool2d_convolution_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_convolution_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_convolution_29", linkageName: "triton_poi_fused_avg_pool2d_convolution_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 42, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 39, scope: !7)
!29 = !DILocation(line: 46, column: 44, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 61, scope: !7)
!32 = !DILocation(line: 46, column: 53, scope: !7)
!33 = !DILocation(line: 48, column: 21, scope: !7)
!34 = !DILocation(line: 52, column: 44, scope: !7)
!35 = !DILocation(line: 52, column: 31, scope: !7)
!36 = !DILocation(line: 52, column: 61, scope: !7)
!37 = !DILocation(line: 52, column: 53, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 57, column: 20, scope: !7)
!40 = !DILocation(line: 59, column: 39, scope: !7)
!41 = !DILocation(line: 59, column: 44, scope: !7)
!42 = !DILocation(line: 59, column: 31, scope: !7)
!43 = !DILocation(line: 59, column: 61, scope: !7)
!44 = !DILocation(line: 59, column: 53, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 66, column: 38, scope: !7)
!47 = !DILocation(line: 66, column: 43, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 66, column: 60, scope: !7)
!50 = !DILocation(line: 66, column: 52, scope: !7)
!51 = !DILocation(line: 67, column: 20, scope: !7)
!52 = !DILocation(line: 69, column: 53, scope: !7)
!53 = !DILocation(line: 69, column: 45, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 72, column: 35, scope: !7)
!56 = !DILocation(line: 72, column: 40, scope: !7)
!57 = !DILocation(line: 72, column: 31, scope: !7)
!58 = !DILocation(line: 72, column: 57, scope: !7)
!59 = !DILocation(line: 72, column: 49, scope: !7)
!60 = !DILocation(line: 73, column: 20, scope: !7)
!61 = !DILocation(line: 79, column: 41, scope: !7)
!62 = !DILocation(line: 79, column: 31, scope: !7)
!63 = !DILocation(line: 79, column: 58, scope: !7)
!64 = !DILocation(line: 79, column: 50, scope: !7)
!65 = !DILocation(line: 80, column: 20, scope: !7)
!66 = !DILocation(line: 82, column: 36, scope: !7)
!67 = !DILocation(line: 82, column: 41, scope: !7)
!68 = !DILocation(line: 82, column: 31, scope: !7)
!69 = !DILocation(line: 82, column: 58, scope: !7)
!70 = !DILocation(line: 82, column: 50, scope: !7)
!71 = !DILocation(line: 83, column: 20, scope: !7)
!72 = !DILocation(line: 85, column: 36, scope: !7)
!73 = !DILocation(line: 85, column: 41, scope: !7)
!74 = !DILocation(line: 85, column: 31, scope: !7)
!75 = !DILocation(line: 85, column: 58, scope: !7)
!76 = !DILocation(line: 85, column: 50, scope: !7)
!77 = !DILocation(line: 86, column: 20, scope: !7)
!78 = !DILocation(line: 87, column: 43, scope: !7)
!79 = !DILocation(line: 87, column: 70, scope: !7)
!80 = !DILocation(line: 87, column: 129, scope: !7)
!81 = !DILocation(line: 87, column: 101, scope: !7)
!82 = !DILocation(line: 87, column: 89, scope: !7)
!83 = !DILocation(line: 87, column: 66, scope: !7)
!84 = !DILocation(line: 87, column: 57, scope: !7)
!85 = !DILocation(line: 87, column: 77, scope: !7)
!86 = !DILocation(line: 87, column: 48, scope: !7)
!87 = !DILocation(line: 87, column: 240, scope: !7)
!88 = !DILocation(line: 87, column: 108, scope: !7)
!89 = !DILocation(line: 87, column: 40, scope: !7)
!90 = !DILocation(line: 87, column: 311, scope: !7)
!91 = !DILocation(line: 87, column: 372, scope: !7)
!92 = !DILocation(line: 88, column: 20, scope: !7)
!93 = !DILocation(line: 89, column: 34, scope: !7)
!94 = !DILocation(line: 89, column: 46, scope: !7)
!95 = !DILocation(line: 89, column: 30, scope: !7)
!96 = !DILocation(line: 89, column: 39, scope: !7)
!97 = !DILocation(line: 89, column: 25, scope: !7)
!98 = !DILocation(line: 89, column: 57, scope: !7)
!99 = !DILocation(line: 90, column: 25, scope: !7)
!100 = !DILocation(line: 90, column: 57, scope: !7)
!101 = !DILocation(line: 91, column: 25, scope: !7)
!102 = !DILocation(line: 91, column: 57, scope: !7)
!103 = !DILocation(line: 92, column: 25, scope: !7)
!104 = !DILocation(line: 92, column: 58, scope: !7)
!105 = !DILocation(line: 92, column: 4, scope: !7)
