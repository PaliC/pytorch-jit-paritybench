; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_relu_sigmoid_46(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = sdiv i32 %15, 4, !dbg !14
  %17 = sext i32 %15 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !16
  %20 = extractvalue { i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32 } %19, 1, !dbg !16
  %22 = sext i32 %16 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !23
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !24
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !24
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !28
  %44 = fsub float 0.000000e+00, %31, !dbg !29
  %45 = fsub float 0.000000e+00, %33, !dbg !29
  %46 = fmul float %44, 0x3FF7154760000000, !dbg !33
  %47 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %46) #1, !dbg !33
  %48 = fmul float %45, 0x3FF7154760000000, !dbg !33
  %49 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %48) #1, !dbg !33
  %50 = fadd float %47, 1.000000e+00, !dbg !34
  %51 = fadd float %49, 1.000000e+00, !dbg !34
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %50) #1, !dbg !35
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %51) #1, !dbg !35
  %54 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !24
  %55 = insertelement <2 x i32> %54, i32 %20, i64 1, !dbg !24
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !24
  %57 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !26
  %58 = insertelement <2 x i32> %57, i32 %24, i64 1, !dbg !26
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !26
  %60 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !28
  %61 = insertelement <2 x i32> %60, i32 %27, i64 1, !dbg !28
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !28
  %63 = fsub <2 x float> %56, %59, !dbg !36
  %64 = fmul <2 x float> %63, %62, !dbg !37
  %65 = extractelement <2 x float> %64, i64 1, !dbg !38
  %66 = fmul float %65, %52, !dbg !38
  %67 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !24
  %68 = insertelement <2 x i32> %67, i32 %21, i64 1, !dbg !24
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !24
  %70 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !26
  %71 = insertelement <2 x i32> %70, i32 %25, i64 1, !dbg !26
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !26
  %73 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !28
  %74 = insertelement <2 x i32> %73, i32 %28, i64 1, !dbg !28
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !28
  %76 = fsub <2 x float> %69, %72, !dbg !36
  %77 = fmul <2 x float> %76, %75, !dbg !37
  %78 = extractelement <2 x float> %77, i64 1, !dbg !38
  %79 = fmul float %78, %53, !dbg !38
  %80 = extractelement <2 x float> %64, i64 0, !dbg !39
  %81 = fadd float %80, %66, !dbg !39
  %82 = extractelement <2 x float> %77, i64 0, !dbg !39
  %83 = fadd float %82, %79, !dbg !39
  %84 = fcmp olt float %81, 0.000000e+00, !dbg !40
  %85 = fcmp olt float %83, 0.000000e+00, !dbg !40
  %86 = select i1 %84, float 0.000000e+00, float %81, !dbg !44
  %87 = select i1 %85, float 0.000000e+00, float %83, !dbg !44
  %88 = getelementptr float, ptr addrspace(1) %7, i64 %17, !dbg !45
  %89 = bitcast float %86 to i32, !dbg !46
  %90 = bitcast float %87 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %89, i32 %90, ptr addrspace(1) %88, i1 true) #1, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxwtzo7vxgx6c6ubgqaobxfjuqftvsaavre6oxmkwksokf365pkk.py", directory: "inductor_cache/xw")
!4 = !{ptr @triton_poi_fused_add_mul_relu_sigmoid_46, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_relu_sigmoid_46, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_relu_sigmoid_46", linkageName: "triton_poi_fused_add_mul_relu_sigmoid_46", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 35, column: 22, scope: !7)
!33 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 37, column: 19, scope: !7)
!37 = !DILocation(line: 38, column: 20, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 19, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 41, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 42, column: 25, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 42, column: 4, scope: !7)
