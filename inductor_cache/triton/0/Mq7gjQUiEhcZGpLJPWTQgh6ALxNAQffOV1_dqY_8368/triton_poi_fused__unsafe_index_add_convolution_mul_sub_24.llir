; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 64, !dbg !14
  %18 = srem i32 %17, 64, !dbg !15
  %19 = mul i32 %17, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = sdiv i32 %16, 4096, !dbg !17
  %21 = srem i32 %20, 21, !dbg !18
  %22 = sdiv i32 %16, 86016, !dbg !19
  %23 = sext i32 %18 to i64, !dbg !20
  %24 = getelementptr i64, ptr addrspace(1) %1, i64 %23, !dbg !20
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !21
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !21
  %27 = sext i32 %.decomposed to i64, !dbg !22
  %28 = getelementptr i64, ptr addrspace(1) %2, i64 %27, !dbg !22
  %29 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !23
  %30 = extractvalue { i64, i64 } %29, 0, !dbg !23
  %31 = extractvalue { i64, i64 } %29, 1, !dbg !23
  %32 = sext i32 %21 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !25
  %36 = getelementptr i64, ptr addrspace(1) %5, i64 %27, !dbg !26
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !27
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !27
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !28
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !29
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !29
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !29
  %44 = getelementptr i64, ptr addrspace(1) %7, i64 %23, !dbg !30
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !31
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !32
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !33
  %49 = bitcast i32 %48 to float, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !33
  %51 = bitcast i32 %50 to float, !dbg !33
  %52 = add i64 %25, 3, !dbg !34
  %53 = icmp slt i64 %25, 0, !dbg !35
  %54 = select i1 %53, i64 %52, i64 %25, !dbg !36
  %55 = add i64 %30, 3, !dbg !37
  %56 = add i64 %31, 3, !dbg !37
  %57 = icmp slt i64 %30, 0, !dbg !38
  %58 = icmp slt i64 %31, 0, !dbg !38
  %59 = select i1 %57, i64 %55, i64 %30, !dbg !39
  %60 = select i1 %58, i64 %56, i64 %31, !dbg !39
  %61 = mul i64 %54, 63, !dbg !40
  %62 = mul nsw i32 %22, 189, !dbg !41
  %63 = sext i32 %62 to i64, !dbg !42
  %.idx = mul i64 %59, 84, !dbg !43
  %64 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !43
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %32, !dbg !43
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %61, !dbg !43
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %63, !dbg !43
  %.idx1 = mul i64 %60, 84, !dbg !43
  %68 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !43
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %32, !dbg !43
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %61, !dbg !43
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %63, !dbg !43
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !44
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !44
  %74 = add i64 %38, 3, !dbg !45
  %75 = add i64 %39, 3, !dbg !45
  %76 = icmp slt i64 %38, 0, !dbg !46
  %77 = icmp slt i64 %39, 0, !dbg !46
  %78 = select i1 %76, i64 %74, i64 %38, !dbg !47
  %79 = select i1 %77, i64 %75, i64 %39, !dbg !47
  %.idx2 = mul i64 %78, 84, !dbg !48
  %80 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx2, !dbg !48
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %32, !dbg !48
  %82 = getelementptr float, ptr addrspace(1) %81, i64 %61, !dbg !48
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %63, !dbg !48
  %.idx3 = mul i64 %79, 84, !dbg !48
  %84 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx3, !dbg !48
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %32, !dbg !48
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %61, !dbg !48
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %63, !dbg !48
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !49
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !49
  %90 = add i64 %45, 3, !dbg !50
  %91 = icmp slt i64 %45, 0, !dbg !51
  %92 = select i1 %91, i64 %90, i64 %45, !dbg !52
  %93 = mul i64 %92, 63, !dbg !53
  %94 = getelementptr float, ptr addrspace(1) %65, i64 %93, !dbg !54
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %63, !dbg !54
  %96 = getelementptr float, ptr addrspace(1) %69, i64 %93, !dbg !54
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %63, !dbg !54
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !55
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !55
  %100 = getelementptr float, ptr addrspace(1) %81, i64 %93, !dbg !56
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %63, !dbg !56
  %102 = getelementptr float, ptr addrspace(1) %85, i64 %93, !dbg !56
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %63, !dbg !56
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !57
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !57
  %106 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !55
  %107 = insertelement <2 x i32> %106, i32 %72, i64 1, !dbg !55
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !55
  %109 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !58
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !58
  %111 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %112 = fadd <2 x float> %111, %108, !dbg !58
  %113 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !57
  %114 = insertelement <2 x i32> %113, i32 %88, i64 1, !dbg !57
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !57
  %116 = fadd <2 x float> %111, %115, !dbg !59
  %117 = fsub <2 x float> %116, %112, !dbg !60
  %118 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !61
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !61
  %120 = shufflevector <2 x float> %119, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %121 = fmul <2 x float> %117, %120, !dbg !61
  %122 = fadd <2 x float> %112, %121, !dbg !62
  %123 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !55
  %124 = insertelement <2 x i32> %123, i32 %73, i64 1, !dbg !55
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !55
  %126 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !58
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !58
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !58
  %129 = fadd <2 x float> %128, %125, !dbg !58
  %130 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !57
  %131 = insertelement <2 x i32> %130, i32 %89, i64 1, !dbg !57
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !57
  %133 = fadd <2 x float> %128, %132, !dbg !59
  %134 = fsub <2 x float> %133, %129, !dbg !60
  %135 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !61
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !61
  %137 = shufflevector <2 x float> %136, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %138 = fmul <2 x float> %134, %137, !dbg !61
  %139 = fadd <2 x float> %129, %138, !dbg !62
  %140 = extractelement <2 x float> %122, i64 0, !dbg !63
  %141 = extractelement <2 x float> %122, i64 1, !dbg !64
  %142 = fsub float %140, %141, !dbg !63
  %143 = extractelement <2 x float> %139, i64 0, !dbg !63
  %144 = extractelement <2 x float> %139, i64 1, !dbg !64
  %145 = fsub float %143, %144, !dbg !63
  %146 = fmul float %142, %49, !dbg !65
  %147 = fmul float %145, %51, !dbg !65
  %148 = fadd float %141, %146, !dbg !64
  %149 = fadd float %144, %147, !dbg !64
  %150 = sext i32 %16 to i64, !dbg !66
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !66
  %152 = bitcast float %148 to i32, !dbg !67
  %153 = bitcast float %149 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %152, i32 %153, ptr addrspace(1) %151, i1 true) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6f4lr73iwms233w7q3zv6lan2jpasj4ky3dx6gv6zuoyxbreygj.py", directory: "inductor_cache/6f")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_24", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 32, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 32, scope: !7)
!40 = !DILocation(line: 43, column: 48, scope: !7)
!41 = !DILocation(line: 43, column: 59, scope: !7)
!42 = !DILocation(line: 43, column: 55, scope: !7)
!43 = !DILocation(line: 43, column: 30, scope: !7)
!44 = !DILocation(line: 43, column: 64, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 35, scope: !7)
!48 = !DILocation(line: 48, column: 31, scope: !7)
!49 = !DILocation(line: 48, column: 66, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 35, scope: !7)
!53 = !DILocation(line: 56, column: 49, scope: !7)
!54 = !DILocation(line: 56, column: 31, scope: !7)
!55 = !DILocation(line: 56, column: 66, scope: !7)
!56 = !DILocation(line: 58, column: 31, scope: !7)
!57 = !DILocation(line: 58, column: 67, scope: !7)
!58 = !DILocation(line: 57, column: 20, scope: !7)
!59 = !DILocation(line: 59, column: 20, scope: !7)
!60 = !DILocation(line: 60, column: 20, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 63, column: 20, scope: !7)
!64 = !DILocation(line: 65, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 66, column: 28, scope: !7)
!67 = !DILocation(line: 66, column: 40, scope: !7)
!68 = !DILocation(line: 66, column: 4, scope: !7)
