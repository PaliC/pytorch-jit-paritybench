; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_sqrt_sub_var_mean_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 512, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = mul i32 %6, 4608, !dbg !13
  %13 = add i32 %11, %12, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !15
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !16
  %20 = bitcast i32 %19 to float, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !16
  %22 = bitcast i32 %21 to float, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !16
  %24 = bitcast i32 %23 to float, !dbg !16
  %25 = select i1 %7, float %24, float 0.000000e+00, !dbg !17
  %26 = select i1 %7, float %22, float 0.000000e+00, !dbg !17
  %27 = select i1 %7, float %20, float 0.000000e+00, !dbg !17
  %28 = select i1 %7, float %18, float 0.000000e+00, !dbg !17
  %29 = or disjoint i32 %11, 2048, !dbg !18
  %30 = add i32 %29, %12, !dbg !14
  %31 = sext i32 %30 to i64, !dbg !15
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !15
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !16
  %35 = bitcast i32 %34 to float, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !16
  %37 = bitcast i32 %36 to float, !dbg !16
  %38 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !16
  %39 = bitcast i32 %38 to float, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !16
  %41 = bitcast i32 %40 to float, !dbg !16
  %42 = fsub float %41, %25, !dbg !19
  %43 = fsub float %39, %26, !dbg !19
  %44 = fsub float %37, %27, !dbg !19
  %45 = fsub float %35, %28, !dbg !19
  %46 = select i1 %7, float 2.000000e+00, float 1.000000e+00, !dbg !23
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %46) #5, !dbg !24
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %46) #5, !dbg !24
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %46) #5, !dbg !24
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float %46) #5, !dbg !24
  %51 = fadd float %25, %47, !dbg !25
  %52 = fsub float %41, %51, !dbg !26
  %53 = fmul float %42, %52, !dbg !27
  %54 = fadd float %53, 0.000000e+00, !dbg !28
  %55 = fadd float %26, %48, !dbg !25
  %56 = fsub float %39, %55, !dbg !26
  %57 = fmul float %43, %56, !dbg !27
  %58 = fadd float %57, 0.000000e+00, !dbg !28
  %59 = fadd float %27, %49, !dbg !25
  %60 = fsub float %37, %59, !dbg !26
  %61 = fmul float %44, %60, !dbg !27
  %62 = fadd float %61, 0.000000e+00, !dbg !28
  %63 = fadd float %28, %50, !dbg !25
  %64 = fsub float %35, %63, !dbg !26
  %65 = fmul float %45, %64, !dbg !27
  %66 = fadd float %65, 0.000000e+00, !dbg !28
  %67 = select i1 %7, float %51, float 0.000000e+00, !dbg !17
  %68 = select i1 %7, float %55, float 0.000000e+00, !dbg !17
  %69 = select i1 %7, float %59, float 0.000000e+00, !dbg !17
  %70 = select i1 %7, float %63, float 0.000000e+00, !dbg !17
  %71 = select i1 %7, float %54, float 0.000000e+00, !dbg !29
  %72 = select i1 %7, float %58, float 0.000000e+00, !dbg !29
  %73 = select i1 %7, float %62, float 0.000000e+00, !dbg !29
  %74 = select i1 %7, float %66, float 0.000000e+00, !dbg !29
  %75 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %76 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %77 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %78 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %79 = or disjoint i32 %11, 4096, !dbg !18
  %80 = icmp samesign ult i32 %79, 4608, !dbg !30
  %81 = add i32 %79, %12, !dbg !14
  %82 = sext i32 %81 to i64, !dbg !15
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !15
  %84 = and i1 %7, %80, !dbg !31
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #5, !dbg !16
  %86 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !16
  %87 = bitcast i32 %86 to float, !dbg !16
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !16
  %89 = bitcast i32 %88 to float, !dbg !16
  %90 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !16
  %91 = bitcast i32 %90 to float, !dbg !16
  %92 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !16
  %93 = bitcast i32 %92 to float, !dbg !16
  %94 = fsub float %93, %67, !dbg !19
  %95 = fsub float %91, %68, !dbg !19
  %96 = fsub float %89, %69, !dbg !19
  %97 = fsub float %87, %70, !dbg !19
  %98 = fadd float %75, 1.000000e+00, !dbg !32
  %99 = fadd float %76, 1.000000e+00, !dbg !32
  %100 = fadd float %77, 1.000000e+00, !dbg !32
  %101 = fadd float %78, 1.000000e+00, !dbg !32
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %98) #5, !dbg !24
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %99) #5, !dbg !24
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %100) #5, !dbg !24
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %101) #5, !dbg !24
  %106 = fadd float %67, %102, !dbg !25
  %107 = fsub float %93, %106, !dbg !26
  %108 = fmul float %94, %107, !dbg !27
  %109 = fadd float %71, %108, !dbg !28
  %110 = fadd float %68, %103, !dbg !25
  %111 = fsub float %91, %110, !dbg !26
  %112 = fmul float %95, %111, !dbg !27
  %113 = fadd float %72, %112, !dbg !28
  %114 = fadd float %69, %104, !dbg !25
  %115 = fsub float %89, %114, !dbg !26
  %116 = fmul float %96, %115, !dbg !27
  %117 = fadd float %73, %116, !dbg !28
  %118 = fadd float %70, %105, !dbg !25
  %119 = fsub float %87, %118, !dbg !26
  %120 = fmul float %97, %119, !dbg !27
  %121 = fadd float %74, %120, !dbg !28
  %122 = select i1 %84, float %106, float %67, !dbg !17
  %123 = select i1 %84, float %110, float %68, !dbg !17
  %124 = select i1 %84, float %114, float %69, !dbg !17
  %125 = select i1 %84, float %118, float %70, !dbg !17
  %126 = select i1 %84, float %109, float %71, !dbg !29
  %127 = select i1 %84, float %113, float %72, !dbg !29
  %128 = select i1 %84, float %117, float %73, !dbg !29
  %129 = select i1 %84, float %121, float %74, !dbg !29
  %130 = select i1 %84, float %98, float %75, !dbg !23
  %131 = select i1 %84, float %99, float %76, !dbg !23
  %132 = select i1 %84, float %100, float %77, !dbg !23
  %133 = select i1 %84, float %101, float %78, !dbg !23
  %134 = lshr i32 %8, 5, !dbg !12
  %135 = fsub float %123, %122, !dbg !33
  %136 = fadd float %130, %131, !dbg !36
  %137 = fcmp oeq float %136, 0.000000e+00, !dbg !37
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %136) #5, !dbg !38
  %139 = select i1 %137, float 0.000000e+00, float %138, !dbg !39
  %140 = fmul float %135, %139, !dbg !40
  %141 = fadd float %122, %140, !dbg !41
  %142 = fadd float %126, %127, !dbg !42
  %143 = fmul float %135, %135, !dbg !43
  %144 = fmul float %143, %130, !dbg !44
  %145 = fmul float %144, %139, !dbg !45
  %146 = fadd float %142, %145, !dbg !46
  %147 = fsub float %124, %141, !dbg !33
  %148 = fadd float %132, %136, !dbg !36
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !37
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %148) #5, !dbg !38
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !39
  %152 = fmul float %151, %147, !dbg !40
  %153 = fadd float %141, %152, !dbg !41
  %154 = fadd float %128, %146, !dbg !42
  %155 = fmul float %147, %147, !dbg !43
  %156 = fmul float %136, %155, !dbg !44
  %157 = fmul float %151, %156, !dbg !45
  %158 = fadd float %154, %157, !dbg !46
  %159 = fsub float %125, %153, !dbg !33
  %160 = fadd float %133, %148, !dbg !36
  %161 = fcmp oeq float %160, 0.000000e+00, !dbg !37
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %160) #5, !dbg !38
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !39
  %164 = fmul float %163, %159, !dbg !40
  %165 = fadd float %153, %164, !dbg !41
  %166 = fadd float %129, %158, !dbg !42
  %167 = fmul float %159, %159, !dbg !43
  %168 = fmul float %148, %167, !dbg !44
  %169 = fmul float %163, %168, !dbg !45
  %170 = fadd float %166, %169, !dbg !46
  %171 = bitcast float %165 to i32, !dbg !47
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 16, i32 31), !dbg !47
  %173 = bitcast i32 %172 to float, !dbg !47
  %174 = bitcast float %170 to i32, !dbg !47
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 16, i32 31), !dbg !47
  %176 = bitcast i32 %175 to float, !dbg !47
  %177 = bitcast float %160 to i32, !dbg !47
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 16, i32 31), !dbg !47
  %179 = bitcast i32 %178 to float, !dbg !47
  %180 = fsub float %173, %165, !dbg !33
  %181 = fadd float %160, %179, !dbg !36
  %182 = fcmp oeq float %181, 0.000000e+00, !dbg !37
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %181) #5, !dbg !38
  %184 = select i1 %182, float 0.000000e+00, float %183, !dbg !39
  %185 = fmul float %184, %180, !dbg !40
  %186 = fadd float %165, %185, !dbg !41
  %187 = fadd float %170, %176, !dbg !42
  %188 = fmul float %180, %180, !dbg !43
  %189 = fmul float %160, %188, !dbg !44
  %190 = fmul float %184, %189, !dbg !45
  %191 = fadd float %187, %190, !dbg !46
  %192 = bitcast float %186 to i32, !dbg !47
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 8, i32 31), !dbg !47
  %194 = bitcast i32 %193 to float, !dbg !47
  %195 = bitcast float %191 to i32, !dbg !47
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 8, i32 31), !dbg !47
  %197 = bitcast i32 %196 to float, !dbg !47
  %198 = bitcast float %181 to i32, !dbg !47
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 8, i32 31), !dbg !47
  %200 = bitcast i32 %199 to float, !dbg !47
  %201 = fsub float %194, %186, !dbg !33
  %202 = fadd float %181, %200, !dbg !36
  %203 = fcmp oeq float %202, 0.000000e+00, !dbg !37
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %202) #5, !dbg !38
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !39
  %206 = fmul float %201, %205, !dbg !40
  %207 = fadd float %186, %206, !dbg !41
  %208 = fadd float %191, %197, !dbg !42
  %209 = fmul float %201, %201, !dbg !43
  %210 = fmul float %181, %209, !dbg !44
  %211 = fmul float %205, %210, !dbg !45
  %212 = fadd float %208, %211, !dbg !46
  %213 = bitcast float %207 to i32, !dbg !47
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 4, i32 31), !dbg !47
  %215 = bitcast i32 %214 to float, !dbg !47
  %216 = bitcast float %212 to i32, !dbg !47
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !47
  %218 = bitcast i32 %217 to float, !dbg !47
  %219 = bitcast float %202 to i32, !dbg !47
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 4, i32 31), !dbg !47
  %221 = bitcast i32 %220 to float, !dbg !47
  %222 = fsub float %215, %207, !dbg !33
  %223 = fadd float %202, %221, !dbg !36
  %224 = fcmp oeq float %223, 0.000000e+00, !dbg !37
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %223) #5, !dbg !38
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !39
  %227 = fmul float %222, %226, !dbg !40
  %228 = fadd float %207, %227, !dbg !41
  %229 = fadd float %212, %218, !dbg !42
  %230 = fmul float %222, %222, !dbg !43
  %231 = fmul float %202, %230, !dbg !44
  %232 = fmul float %226, %231, !dbg !45
  %233 = fadd float %229, %232, !dbg !46
  %234 = bitcast float %228 to i32, !dbg !47
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 2, i32 31), !dbg !47
  %236 = bitcast i32 %235 to float, !dbg !47
  %237 = bitcast float %233 to i32, !dbg !47
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 2, i32 31), !dbg !47
  %239 = bitcast i32 %238 to float, !dbg !47
  %240 = bitcast float %223 to i32, !dbg !47
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !47
  %242 = bitcast i32 %241 to float, !dbg !47
  %243 = fsub float %236, %228, !dbg !33
  %244 = fadd float %223, %242, !dbg !36
  %245 = fcmp oeq float %244, 0.000000e+00, !dbg !37
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %244) #5, !dbg !38
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !39
  %248 = fmul float %243, %247, !dbg !40
  %249 = fadd float %228, %248, !dbg !41
  %250 = fadd float %233, %239, !dbg !42
  %251 = fmul float %243, %243, !dbg !43
  %252 = fmul float %223, %251, !dbg !44
  %253 = fmul float %247, %252, !dbg !45
  %254 = fadd float %250, %253, !dbg !46
  %255 = bitcast float %249 to i32, !dbg !47
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 1, i32 31), !dbg !47
  %257 = bitcast i32 %256 to float, !dbg !47
  %258 = bitcast float %254 to i32, !dbg !47
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !47
  %260 = bitcast i32 %259 to float, !dbg !47
  %261 = bitcast float %244 to i32, !dbg !47
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 1, i32 31), !dbg !47
  %263 = bitcast i32 %262 to float, !dbg !47
  %264 = fsub float %257, %249, !dbg !33
  %265 = fadd float %244, %263, !dbg !36
  %266 = fcmp oeq float %265, 0.000000e+00, !dbg !37
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float %265) #5, !dbg !38
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !39
  %269 = fmul float %264, %268, !dbg !40
  %270 = fadd float %249, %269, !dbg !41
  %271 = fadd float %254, %260, !dbg !42
  %272 = fmul float %264, %264, !dbg !43
  %273 = fmul float %244, %272, !dbg !44
  %274 = fmul float %268, %273, !dbg !45
  %275 = fadd float %271, %274, !dbg !46
  %276 = icmp eq i32 %9, 0, !dbg !47
  %277 = and i32 %134, 15, !dbg !47
  %278 = zext nneg i32 %277 to i64, !dbg !47
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i64 %278, !dbg !47
  %280 = bitcast float %270 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 %276) #5, !dbg !47
  %281 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %278, !dbg !47
  %282 = bitcast float %275 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 %276) #5, !dbg !47
  %283 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %278, !dbg !47
  %284 = bitcast float %265 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 %276) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %285 = icmp slt i32 %8, 16, !dbg !47
  %286 = sext i32 %8 to i64, !dbg !47
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i64 %286, !dbg !47
  %288 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %287, i1 %285) #5, !dbg !47
  %289 = bitcast i32 %288 to float, !dbg !47
  %290 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %286, !dbg !47
  %291 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %290, i1 %285) #5, !dbg !47
  %292 = bitcast i32 %291 to float, !dbg !47
  %293 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %286, !dbg !47
  %294 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %293, i1 %285) #5, !dbg !47
  %295 = bitcast i32 %294 to float, !dbg !47
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 8, i32 31), !dbg !47
  %297 = bitcast i32 %296 to float, !dbg !47
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 8, i32 31), !dbg !47
  %299 = bitcast i32 %298 to float, !dbg !47
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 8, i32 31), !dbg !47
  %301 = bitcast i32 %300 to float, !dbg !47
  %302 = fsub float %297, %289, !dbg !33
  %303 = fadd float %295, %301, !dbg !36
  %304 = fcmp oeq float %303, 0.000000e+00, !dbg !37
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %301, float %303) #5, !dbg !38
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !39
  %307 = fmul float %302, %306, !dbg !40
  %308 = fadd float %307, %289, !dbg !41
  %309 = fadd float %292, %299, !dbg !42
  %310 = fmul float %302, %302, !dbg !43
  %311 = fmul float %310, %295, !dbg !44
  %312 = fmul float %311, %306, !dbg !45
  %313 = fadd float %309, %312, !dbg !46
  %314 = bitcast float %308 to i32, !dbg !47
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 4, i32 31), !dbg !47
  %316 = bitcast i32 %315 to float, !dbg !47
  %317 = bitcast float %313 to i32, !dbg !47
  %318 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 4, i32 31), !dbg !47
  %319 = bitcast i32 %318 to float, !dbg !47
  %320 = bitcast float %303 to i32, !dbg !47
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 4, i32 31), !dbg !47
  %322 = bitcast i32 %321 to float, !dbg !47
  %323 = fsub float %316, %308, !dbg !33
  %324 = fadd float %303, %322, !dbg !36
  %325 = fcmp oeq float %324, 0.000000e+00, !dbg !37
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %322, float %324) #5, !dbg !38
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !39
  %328 = fmul float %323, %327, !dbg !40
  %329 = fadd float %308, %328, !dbg !41
  %330 = fadd float %313, %319, !dbg !42
  %331 = fmul float %323, %323, !dbg !43
  %332 = fmul float %303, %331, !dbg !44
  %333 = fmul float %327, %332, !dbg !45
  %334 = fadd float %330, %333, !dbg !46
  %335 = bitcast float %329 to i32, !dbg !47
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 2, i32 31), !dbg !47
  %337 = bitcast i32 %336 to float, !dbg !47
  %338 = bitcast float %334 to i32, !dbg !47
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !47
  %340 = bitcast i32 %339 to float, !dbg !47
  %341 = bitcast float %324 to i32, !dbg !47
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 2, i32 31), !dbg !47
  %343 = bitcast i32 %342 to float, !dbg !47
  %344 = fsub float %337, %329, !dbg !33
  %345 = fadd float %324, %343, !dbg !36
  %346 = fcmp oeq float %345, 0.000000e+00, !dbg !37
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %343, float %345) #5, !dbg !38
  %348 = select i1 %346, float 0.000000e+00, float %347, !dbg !39
  %349 = fmul float %344, %348, !dbg !40
  %350 = fadd float %329, %349, !dbg !41
  %351 = fadd float %334, %340, !dbg !42
  %352 = fmul float %344, %344, !dbg !43
  %353 = fmul float %324, %352, !dbg !44
  %354 = fmul float %348, %353, !dbg !45
  %355 = fadd float %351, %354, !dbg !46
  %356 = bitcast float %350 to i32, !dbg !47
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 1, i32 31), !dbg !47
  %358 = bitcast i32 %357 to float, !dbg !47
  %359 = bitcast float %355 to i32, !dbg !47
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 1, i32 31), !dbg !47
  %361 = bitcast i32 %360 to float, !dbg !47
  %362 = bitcast float %345 to i32, !dbg !47
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 1, i32 31), !dbg !47
  %364 = bitcast i32 %363 to float, !dbg !47
  %365 = fsub float %358, %350, !dbg !33
  %366 = fadd float %345, %364, !dbg !36
  %367 = fcmp oeq float %366, 0.000000e+00, !dbg !37
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %364, float %366) #5, !dbg !38
  %369 = select i1 %367, float 0.000000e+00, float %368, !dbg !39
  %370 = fmul float %365, %369, !dbg !40
  %371 = fadd float %350, %370, !dbg !41
  %372 = fadd float %355, %361, !dbg !42
  %373 = fmul float %365, %365, !dbg !43
  %374 = fmul float %345, %373, !dbg !44
  %375 = fmul float %369, %374, !dbg !45
  %376 = fadd float %372, %375, !dbg !46
  %377 = and i32 %8, 15, !dbg !47
  %378 = icmp eq i32 %377, 0, !dbg !47
  %379 = and i1 %285, %378, !dbg !47
  %380 = bitcast float %371 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %380, i1 %379) #5, !dbg !47
  %381 = bitcast float %376 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %381, i1 %379) #5, !dbg !47
  %382 = bitcast float %366 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %382, i1 %379) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %383 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %384 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !47
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %384, float 4.608000e+03) #5, !dbg !48
  %386 = fadd float %385, 0x3DDB7CDFE0000000, !dbg !49
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %387, 0, !dbg !50
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %.not1.i = icmp eq i32 %388, 0, !dbg !50
  br i1 %.not.i, label %394, label %389, !dbg !50

389:                                              ; preds = %5
  br i1 %.not1.i, label %392, label %390, !dbg !50

390:                                              ; preds = %389
  %391 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %386) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

392:                                              ; preds = %389
  %393 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %386) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

394:                                              ; preds = %5
  br i1 %.not1.i, label %397, label %395, !dbg !50

395:                                              ; preds = %394
  %396 = tail call float @llvm.nvvm.sqrt.rn.f(float %386) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

397:                                              ; preds = %394
  %398 = tail call float @llvm.nvvm.sqrt.approx.f(float %386) #5, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %390, %392, %395, %397
  %.0.i = phi float [ %391, %390 ], [ %393, %392 ], [ %396, %395 ], [ %398, %397 ], !dbg !50
  %399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %403 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i24 = icmp eq i32 %405, 0, !dbg !50
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !50
  %.not1.i27 = icmp eq i32 %406, 0, !dbg !50
  br i1 %.not.i24, label %412, label %407, !dbg !50

407:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %410, label %408, !dbg !50

408:                                              ; preds = %407
  %409 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %386) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

410:                                              ; preds = %407
  %411 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %386) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

412:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i27, label %415, label %413, !dbg !50

413:                                              ; preds = %412
  %414 = tail call float @llvm.nvvm.sqrt.rn.f(float %386) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

415:                                              ; preds = %412
  %416 = tail call float @llvm.nvvm.sqrt.approx.f(float %386) #5, !dbg !50
  br label %__nv_sqrtf.exit28, !dbg !50

__nv_sqrtf.exit28:                                ; preds = %408, %410, %413, %415
  %.0.i26 = phi float [ %409, %408 ], [ %411, %410 ], [ %414, %413 ], [ %416, %415 ], !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %417 = sext i32 %6 to i64, !dbg !52
  %418 = getelementptr float, ptr addrspace(1) %0, i64 %417, !dbg !52
  %urem = and i32 %8, 511, !dbg !53
  %419 = icmp eq i32 %urem, 0, !dbg !53
  %420 = bitcast float %.0.i to i32, !dbg !53
  %421 = and i1 %419, %7, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %420, ptr addrspace(1) %418, i1 %421) #5, !dbg !53
  %422 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !54
  %423 = extractvalue { i32, i32, i32, i32 } %422, 0, !dbg !54
  %424 = extractvalue { i32, i32, i32, i32 } %422, 1, !dbg !54
  %425 = extractvalue { i32, i32, i32, i32 } %422, 2, !dbg !54
  %426 = extractvalue { i32, i32, i32, i32 } %422, 3, !dbg !54
  %427 = bitcast i32 %423 to float, !dbg !54
  %428 = bitcast i32 %424 to float, !dbg !54
  %429 = bitcast i32 %425 to float, !dbg !54
  %430 = bitcast i32 %426 to float, !dbg !54
  %431 = fsub float %427, %383, !dbg !55
  %432 = fsub float %428, %383, !dbg !55
  %433 = fsub float %429, %383, !dbg !55
  %434 = fsub float %430, %383, !dbg !55
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %431, float %.0.i26) #5, !dbg !56
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %432, float %.0.i26) #5, !dbg !56
  %437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %433, float %.0.i26) #5, !dbg !56
  %438 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %434, float %.0.i26) #5, !dbg !56
  %439 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !57
  %440 = bitcast float %435 to i32, !dbg !58
  %441 = bitcast float %436 to i32, !dbg !58
  %442 = bitcast float %437 to i32, !dbg !58
  %443 = bitcast float %438 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %439, i1 %7) #5, !dbg !58
  %444 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !54
  %445 = extractvalue { i32, i32, i32, i32 } %444, 0, !dbg !54
  %446 = extractvalue { i32, i32, i32, i32 } %444, 1, !dbg !54
  %447 = extractvalue { i32, i32, i32, i32 } %444, 2, !dbg !54
  %448 = extractvalue { i32, i32, i32, i32 } %444, 3, !dbg !54
  %449 = bitcast i32 %445 to float, !dbg !54
  %450 = bitcast i32 %446 to float, !dbg !54
  %451 = bitcast i32 %447 to float, !dbg !54
  %452 = bitcast i32 %448 to float, !dbg !54
  %453 = fsub float %449, %383, !dbg !55
  %454 = fsub float %450, %383, !dbg !55
  %455 = fsub float %451, %383, !dbg !55
  %456 = fsub float %452, %383, !dbg !55
  %457 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %453, float %.0.i26) #5, !dbg !56
  %458 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %454, float %.0.i26) #5, !dbg !56
  %459 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %455, float %.0.i26) #5, !dbg !56
  %460 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %456, float %.0.i26) #5, !dbg !56
  %461 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !57
  %462 = bitcast float %457 to i32, !dbg !58
  %463 = bitcast float %458 to i32, !dbg !58
  %464 = bitcast float %459 to i32, !dbg !58
  %465 = bitcast float %460 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %462, i32 %463, i32 %464, i32 %465, ptr addrspace(1) %461, i1 %7) #5, !dbg !58
  %466 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #5, !dbg !54
  %467 = extractvalue { i32, i32, i32, i32 } %466, 0, !dbg !54
  %468 = extractvalue { i32, i32, i32, i32 } %466, 1, !dbg !54
  %469 = extractvalue { i32, i32, i32, i32 } %466, 2, !dbg !54
  %470 = extractvalue { i32, i32, i32, i32 } %466, 3, !dbg !54
  %471 = bitcast i32 %467 to float, !dbg !54
  %472 = bitcast i32 %468 to float, !dbg !54
  %473 = bitcast i32 %469 to float, !dbg !54
  %474 = bitcast i32 %470 to float, !dbg !54
  %475 = fsub float %471, %383, !dbg !55
  %476 = fsub float %472, %383, !dbg !55
  %477 = fsub float %473, %383, !dbg !55
  %478 = fsub float %474, %383, !dbg !55
  %479 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %475, float %.0.i26) #5, !dbg !56
  %480 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %476, float %.0.i26) #5, !dbg !56
  %481 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %477, float %.0.i26) #5, !dbg !56
  %482 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %478, float %.0.i26) #5, !dbg !56
  %483 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !57
  %484 = bitcast float %479 to i32, !dbg !58
  %485 = bitcast float %480 to i32, !dbg !58
  %486 = bitcast float %481 to i32, !dbg !58
  %487 = bitcast float %482 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %484, i32 %485, i32 %486, i32 %487, ptr addrspace(1) %483, i1 %84) #5, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdxngyaljmqanp3wpok7647nbeh7xolmtagngmsoslii3tyrqhy7.py", directory: "inductor_cache/dx")
!4 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_22, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_22, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_sqrt_sub_var_mean_22", linkageName: "triton_red_fused_add_div_sqrt_sub_var_mean_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 34, column: 39, scope: !7)
!15 = !DILocation(line: 34, column: 34, scope: !7)
!16 = !DILocation(line: 34, column: 49, scope: !7)
!17 = !DILocation(line: 39, column: 60, scope: !7)
!18 = !DILocation(line: 31, column: 27, scope: !7)
!19 = !DILocation(line: 183, column: 24, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 41, column: 64, scope: !7)
!24 = !DILocation(line: 185, column: 34, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 185, column: 26, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 186, column: 39, scope: !20, inlinedAt: !22)
!27 = !DILocation(line: 186, column: 31, scope: !20, inlinedAt: !22)
!28 = !DILocation(line: 186, column: 22, scope: !20, inlinedAt: !22)
!29 = !DILocation(line: 40, column: 56, scope: !7)
!30 = !DILocation(line: 32, column: 25, scope: !7)
!31 = !DILocation(line: 34, column: 57, scope: !7)
!32 = !DILocation(line: 184, column: 30, scope: !20, inlinedAt: !22)
!33 = !DILocation(line: 192, column: 21, scope: !34, inlinedAt: !35)
!34 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!35 = !DILocation(line: 43, column: 41, scope: !7)
!36 = !DILocation(line: 193, column: 28, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 194, column: 39, scope: !34, inlinedAt: !35)
!38 = !DILocation(line: 194, column: 60, scope: !34, inlinedAt: !35)
!39 = !DILocation(line: 194, column: 49, scope: !34, inlinedAt: !35)
!40 = !DILocation(line: 196, column: 25, scope: !34, inlinedAt: !35)
!41 = !DILocation(line: 196, column: 17, scope: !34, inlinedAt: !35)
!42 = !DILocation(line: 197, column: 15, scope: !34, inlinedAt: !35)
!43 = !DILocation(line: 197, column: 30, scope: !34, inlinedAt: !35)
!44 = !DILocation(line: 197, column: 38, scope: !34, inlinedAt: !35)
!45 = !DILocation(line: 197, column: 49, scope: !34, inlinedAt: !35)
!46 = !DILocation(line: 197, column: 22, scope: !34, inlinedAt: !35)
!47 = !DILocation(line: 204, column: 46, scope: !20, inlinedAt: !35)
!48 = !DILocation(line: 49, column: 18, scope: !7)
!49 = !DILocation(line: 51, column: 18, scope: !7)
!50 = !DILocation(line: 52, column: 26, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
!52 = !DILocation(line: 54, column: 28, scope: !7)
!53 = !DILocation(line: 54, column: 39, scope: !7)
!54 = !DILocation(line: 59, column: 50, scope: !7)
!55 = !DILocation(line: 60, column: 24, scope: !7)
!56 = !DILocation(line: 61, column: 24, scope: !7)
!57 = !DILocation(line: 62, column: 29, scope: !7)
!58 = !DILocation(line: 62, column: 51, scope: !7)
!59 = !DILocation(line: 55, column: 4, scope: !7)
