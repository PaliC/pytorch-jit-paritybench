; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 8, !dbg !14
  %19 = srem i32 %18, 8, !dbg !15
  %20 = mul i32 %18, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = sdiv i32 %17, 64, !dbg !17
  %22 = sext i32 %19 to i64, !dbg !18
  %23 = getelementptr i64, ptr addrspace(1) %2, i64 %22, !dbg !18
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %26 = sext i32 %.decomposed to i64, !dbg !20
  %27 = getelementptr i64, ptr addrspace(1) %3, i64 %26, !dbg !20
  %28 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !21
  %29 = extractvalue { i64, i64 } %28, 0, !dbg !21
  %30 = extractvalue { i64, i64 } %28, 1, !dbg !21
  %31 = getelementptr i64, ptr addrspace(1) %5, i64 %26, !dbg !22
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !23
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !23
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !25
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %39 = getelementptr i64, ptr addrspace(1) %7, i64 %22, !dbg !26
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !27
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !29
  %44 = bitcast i32 %43 to float, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = lshr i64 %24, 61, !dbg !30
  %48 = and i64 %47, 4, !dbg !30
  %49 = add i64 %48, %24, !dbg !30
  %50 = lshr i64 %29, 61, !dbg !31
  %51 = and i64 %50, 4, !dbg !31
  %52 = add i64 %51, %29, !dbg !31
  %53 = lshr i64 %30, 61, !dbg !31
  %54 = and i64 %53, 4, !dbg !31
  %55 = add i64 %54, %30, !dbg !31
  %56 = shl i64 %49, 2, !dbg !32
  %57 = shl nsw i32 %21, 4, !dbg !33
  %58 = sext i32 %57 to i64, !dbg !34
  %59 = add i64 %56, %58, !dbg !35
  %60 = add i64 %59, %52, !dbg !34
  %61 = add i64 %59, %55, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !37
  %66 = lshr i64 %33, 61, !dbg !38
  %67 = and i64 %66, 4, !dbg !38
  %68 = add i64 %67, %33, !dbg !38
  %69 = lshr i64 %34, 61, !dbg !38
  %70 = and i64 %69, 4, !dbg !38
  %71 = add i64 %70, %34, !dbg !38
  %72 = add i64 %59, %68, !dbg !39
  %73 = add i64 %59, %71, !dbg !39
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !40
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !40
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !41
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !41
  %78 = lshr i64 %40, 61, !dbg !42
  %79 = and i64 %78, 4, !dbg !42
  %80 = add i64 %79, %40, !dbg !42
  %81 = shl i64 %80, 2, !dbg !43
  %82 = add i64 %81, %58, !dbg !44
  %83 = add i64 %82, %52, !dbg !45
  %84 = add i64 %82, %55, !dbg !45
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !46
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %84, !dbg !46
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !47
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !47
  %89 = add i64 %82, %68, !dbg !48
  %90 = add i64 %82, %71, !dbg !48
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %89, !dbg !49
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !49
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !50
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !50
  %95 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !47
  %96 = insertelement <2 x i32> %95, i32 %64, i64 1, !dbg !47
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !47
  %98 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !50
  %99 = insertelement <2 x i32> %98, i32 %76, i64 1, !dbg !50
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !50
  %101 = fsub <2 x float> %100, %97, !dbg !51
  %102 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !52
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !52
  %104 = shufflevector <2 x float> %103, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %105 = fmul <2 x float> %101, %104, !dbg !52
  %106 = fadd <2 x float> %105, %97, !dbg !53
  %107 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !47
  %108 = insertelement <2 x i32> %107, i32 %65, i64 1, !dbg !47
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !47
  %110 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !50
  %111 = insertelement <2 x i32> %110, i32 %77, i64 1, !dbg !50
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !50
  %113 = fsub <2 x float> %112, %109, !dbg !51
  %114 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !52
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !52
  %116 = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %117 = fmul <2 x float> %113, %116, !dbg !52
  %118 = fadd <2 x float> %117, %109, !dbg !53
  %119 = extractelement <2 x float> %106, i64 0, !dbg !54
  %120 = extractelement <2 x float> %106, i64 1, !dbg !55
  %121 = fsub float %119, %120, !dbg !54
  %122 = extractelement <2 x float> %118, i64 0, !dbg !54
  %123 = extractelement <2 x float> %118, i64 1, !dbg !55
  %124 = fsub float %122, %123, !dbg !54
  %125 = fmul float %121, %44, !dbg !56
  %126 = fmul float %124, %46, !dbg !56
  %127 = fadd float %120, %125, !dbg !55
  %128 = fadd float %123, %126, !dbg !55
  %129 = getelementptr float, ptr addrspace(1) %9, i64 %60, !dbg !57
  %130 = getelementptr float, ptr addrspace(1) %9, i64 %61, !dbg !57
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !58
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #1, !dbg !58
  %133 = getelementptr float, ptr addrspace(1) %9, i64 %72, !dbg !59
  %134 = getelementptr float, ptr addrspace(1) %9, i64 %73, !dbg !59
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !60
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !60
  %137 = getelementptr float, ptr addrspace(1) %9, i64 %83, !dbg !61
  %138 = getelementptr float, ptr addrspace(1) %9, i64 %84, !dbg !61
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 true) #1, !dbg !62
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #1, !dbg !62
  %141 = getelementptr float, ptr addrspace(1) %9, i64 %89, !dbg !63
  %142 = getelementptr float, ptr addrspace(1) %9, i64 %90, !dbg !63
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #1, !dbg !64
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #1, !dbg !64
  %145 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !62
  %146 = insertelement <2 x i32> %145, i32 %131, i64 1, !dbg !62
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !62
  %148 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !64
  %149 = insertelement <2 x i32> %148, i32 %135, i64 1, !dbg !64
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !64
  %151 = fsub <2 x float> %150, %147, !dbg !65
  %152 = fmul <2 x float> %151, %104, !dbg !66
  %153 = fadd <2 x float> %152, %147, !dbg !67
  %154 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !62
  %155 = insertelement <2 x i32> %154, i32 %132, i64 1, !dbg !62
  %156 = bitcast <2 x i32> %155 to <2 x float>, !dbg !62
  %157 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !64
  %158 = insertelement <2 x i32> %157, i32 %136, i64 1, !dbg !64
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !64
  %160 = fsub <2 x float> %159, %156, !dbg !65
  %161 = fmul <2 x float> %160, %116, !dbg !66
  %162 = fadd <2 x float> %161, %156, !dbg !67
  %163 = extractelement <2 x float> %153, i64 0, !dbg !68
  %164 = extractelement <2 x float> %153, i64 1, !dbg !69
  %165 = fsub float %163, %164, !dbg !68
  %166 = extractelement <2 x float> %162, i64 0, !dbg !68
  %167 = extractelement <2 x float> %162, i64 1, !dbg !69
  %168 = fsub float %166, %167, !dbg !68
  %169 = fmul float %165, %44, !dbg !70
  %170 = fmul float %168, %46, !dbg !70
  %171 = fadd float %164, %169, !dbg !69
  %172 = fadd float %167, %170, !dbg !69
  %173 = sext i32 %17 to i64, !dbg !71
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !71
  %175 = bitcast float %127 to i32, !dbg !72
  %176 = bitcast float %128 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %174, i1 true) #1, !dbg !72
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !73
  %178 = bitcast float %171 to i32, !dbg !74
  %179 = bitcast float %172 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %178, i32 %179, ptr addrspace(1) %177, i1 true) #1, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs5ivywsopr5d6zdhqpdtysgl45ik6clb7aj6icv24vo726ks7pk.py", directory: "inductor_cache/s5")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_31", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 32, scope: !7)
!31 = !DILocation(line: 40, column: 32, scope: !7)
!32 = !DILocation(line: 41, column: 39, scope: !7)
!33 = !DILocation(line: 41, column: 49, scope: !7)
!34 = !DILocation(line: 41, column: 46, scope: !7)
!35 = !DILocation(line: 41, column: 37, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 54, scope: !7)
!38 = !DILocation(line: 44, column: 35, scope: !7)
!39 = !DILocation(line: 45, column: 48, scope: !7)
!40 = !DILocation(line: 45, column: 31, scope: !7)
!41 = !DILocation(line: 45, column: 56, scope: !7)
!42 = !DILocation(line: 51, column: 35, scope: !7)
!43 = !DILocation(line: 52, column: 40, scope: !7)
!44 = !DILocation(line: 52, column: 38, scope: !7)
!45 = !DILocation(line: 52, column: 48, scope: !7)
!46 = !DILocation(line: 52, column: 31, scope: !7)
!47 = !DILocation(line: 52, column: 56, scope: !7)
!48 = !DILocation(line: 53, column: 49, scope: !7)
!49 = !DILocation(line: 53, column: 31, scope: !7)
!50 = !DILocation(line: 53, column: 57, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 20, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 31, scope: !7)
!58 = !DILocation(line: 60, column: 55, scope: !7)
!59 = !DILocation(line: 61, column: 31, scope: !7)
!60 = !DILocation(line: 61, column: 56, scope: !7)
!61 = !DILocation(line: 65, column: 31, scope: !7)
!62 = !DILocation(line: 65, column: 56, scope: !7)
!63 = !DILocation(line: 66, column: 31, scope: !7)
!64 = !DILocation(line: 66, column: 57, scope: !7)
!65 = !DILocation(line: 67, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 72, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 20, scope: !7)
!71 = !DILocation(line: 73, column: 28, scope: !7)
!72 = !DILocation(line: 73, column: 40, scope: !7)
!73 = !DILocation(line: 74, column: 28, scope: !7)
!74 = !DILocation(line: 74, column: 40, scope: !7)
!75 = !DILocation(line: 74, column: 4, scope: !7)
