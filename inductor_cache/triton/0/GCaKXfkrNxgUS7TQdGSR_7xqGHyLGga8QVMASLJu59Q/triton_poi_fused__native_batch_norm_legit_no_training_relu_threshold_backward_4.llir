; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 3, !dbg !12
  %13 = and i32 %12, 1016, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = sdiv i32 %14, 16384, !dbg !14
  %17 = srem i32 %16, 4, !dbg !15
  %18 = sext i32 %14 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = sext i32 %15 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #4, !dbg !17
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !17
  %24 = sext i32 %17 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !21
  %38 = bitcast i32 %37 to float, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !21
  %40 = bitcast i32 %39 to float, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !21
  %44 = bitcast i32 %43 to float, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !21
  %46 = bitcast i32 %45 to float, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !21
  %48 = bitcast i32 %47 to float, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !21
  %50 = bitcast i32 %49 to float, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !25
  %69 = fadd float %36, 0x3EE4F8B580000000, !dbg !26
  %70 = fadd float %38, 0x3EE4F8B580000000, !dbg !26
  %71 = fadd float %40, 0x3EE4F8B580000000, !dbg !26
  %72 = fadd float %42, 0x3EE4F8B580000000, !dbg !26
  %73 = fadd float %44, 0x3EE4F8B580000000, !dbg !26
  %74 = fadd float %46, 0x3EE4F8B580000000, !dbg !26
  %75 = fadd float %48, 0x3EE4F8B580000000, !dbg !26
  %76 = fadd float %50, 0x3EE4F8B580000000, !dbg !26
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i = icmp eq i32 %77, 0, !dbg !27
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i = icmp eq i32 %78, 0, !dbg !27
  br i1 %.not.i, label %84, label %79, !dbg !27

79:                                               ; preds = %8
  br i1 %.not1.i, label %82, label %80, !dbg !27

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

84:                                               ; preds = %8
  br i1 %.not1.i, label %87, label %85, !dbg !27

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !27
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i15 = icmp eq i32 %89, 0, !dbg !27
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i18 = icmp eq i32 %90, 0, !dbg !27
  br i1 %.not.i15, label %96, label %91, !dbg !27

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %94, label %92, !dbg !27

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !27
  br label %__nv_sqrtf.exit19, !dbg !27

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !27
  br label %__nv_sqrtf.exit19, !dbg !27

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %99, label %97, !dbg !27

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !27
  br label %__nv_sqrtf.exit19, !dbg !27

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !27
  br label %__nv_sqrtf.exit19, !dbg !27

__nv_sqrtf.exit19:                                ; preds = %92, %94, %97, %99
  %.0.i17 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !27
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i20 = icmp eq i32 %101, 0, !dbg !27
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i23 = icmp eq i32 %102, 0, !dbg !27
  br i1 %.not.i20, label %108, label %103, !dbg !27

103:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %106, label %104, !dbg !27

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !27
  br label %__nv_sqrtf.exit24, !dbg !27

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !27
  br label %__nv_sqrtf.exit24, !dbg !27

108:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %111, label %109, !dbg !27

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !27
  br label %__nv_sqrtf.exit24, !dbg !27

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !27
  br label %__nv_sqrtf.exit24, !dbg !27

__nv_sqrtf.exit24:                                ; preds = %104, %106, %109, %111
  %.0.i22 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !27
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i25 = icmp eq i32 %113, 0, !dbg !27
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i28 = icmp eq i32 %114, 0, !dbg !27
  br i1 %.not.i25, label %120, label %115, !dbg !27

115:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %118, label %116, !dbg !27

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !27
  br label %__nv_sqrtf.exit29, !dbg !27

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !27
  br label %__nv_sqrtf.exit29, !dbg !27

120:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %123, label %121, !dbg !27

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !27
  br label %__nv_sqrtf.exit29, !dbg !27

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !27
  br label %__nv_sqrtf.exit29, !dbg !27

__nv_sqrtf.exit29:                                ; preds = %116, %118, %121, %123
  %.0.i27 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !27
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i30 = icmp eq i32 %125, 0, !dbg !27
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i33 = icmp eq i32 %126, 0, !dbg !27
  br i1 %.not.i30, label %132, label %127, !dbg !27

127:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %130, label %128, !dbg !27

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !27
  br label %__nv_sqrtf.exit34, !dbg !27

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !27
  br label %__nv_sqrtf.exit34, !dbg !27

132:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %135, label %133, !dbg !27

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !27
  br label %__nv_sqrtf.exit34, !dbg !27

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !27
  br label %__nv_sqrtf.exit34, !dbg !27

__nv_sqrtf.exit34:                                ; preds = %128, %130, %133, %135
  %.0.i32 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !27
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i35 = icmp eq i32 %137, 0, !dbg !27
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i38 = icmp eq i32 %138, 0, !dbg !27
  br i1 %.not.i35, label %144, label %139, !dbg !27

139:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %142, label %140, !dbg !27

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !27
  br label %__nv_sqrtf.exit39, !dbg !27

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !27
  br label %__nv_sqrtf.exit39, !dbg !27

144:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %147, label %145, !dbg !27

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !27
  br label %__nv_sqrtf.exit39, !dbg !27

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !27
  br label %__nv_sqrtf.exit39, !dbg !27

__nv_sqrtf.exit39:                                ; preds = %140, %142, %145, %147
  %.0.i37 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !27
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i40 = icmp eq i32 %149, 0, !dbg !27
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i43 = icmp eq i32 %150, 0, !dbg !27
  br i1 %.not.i40, label %156, label %151, !dbg !27

151:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %154, label %152, !dbg !27

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !27
  br label %__nv_sqrtf.exit44, !dbg !27

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !27
  br label %__nv_sqrtf.exit44, !dbg !27

156:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %159, label %157, !dbg !27

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !27
  br label %__nv_sqrtf.exit44, !dbg !27

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !27
  br label %__nv_sqrtf.exit44, !dbg !27

__nv_sqrtf.exit44:                                ; preds = %152, %154, %157, %159
  %.0.i42 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !27
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !27
  %.not.i45 = icmp eq i32 %161, 0, !dbg !27
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !27
  %.not1.i48 = icmp eq i32 %162, 0, !dbg !27
  br i1 %.not.i45, label %168, label %163, !dbg !27

163:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %166, label %164, !dbg !27

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !27
  br label %__nv_sqrtf.exit49, !dbg !27

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !27
  br label %__nv_sqrtf.exit49, !dbg !27

168:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %171, label %169, !dbg !27

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !27
  br label %__nv_sqrtf.exit49, !dbg !27

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !27
  br label %__nv_sqrtf.exit49, !dbg !27

__nv_sqrtf.exit49:                                ; preds = %164, %166, %169, %171
  %.0.i47 = phi float [ %165, %164 ], [ %167, %166 ], [ %170, %169 ], [ %172, %171 ], !dbg !27
  %173 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %174 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !19
  %175 = insertelement <4 x i32> %174, i32 %31, i64 1, !dbg !19
  %176 = insertelement <4 x i32> %175, i32 %32, i64 2, !dbg !19
  %177 = insertelement <4 x i32> %176, i32 %33, i64 3, !dbg !19
  %178 = bitcast <4 x i32> %177 to <4 x float>, !dbg !19
  %179 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %180 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %181 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %182 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !17
  %183 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !19
  %184 = insertelement <4 x i32> %183, i32 %27, i64 1, !dbg !19
  %185 = insertelement <4 x i32> %184, i32 %28, i64 2, !dbg !19
  %186 = insertelement <4 x i32> %185, i32 %29, i64 3, !dbg !19
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !19
  %188 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !17
  %189 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !17
  %190 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !17
  %191 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !25
  %192 = insertelement <4 x i32> %191, i32 %66, i64 1, !dbg !25
  %193 = insertelement <4 x i32> %192, i32 %67, i64 2, !dbg !25
  %194 = insertelement <4 x i32> %193, i32 %68, i64 3, !dbg !25
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !25
  %196 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !25
  %197 = insertelement <4 x i32> %196, i32 %62, i64 1, !dbg !25
  %198 = insertelement <4 x i32> %197, i32 %63, i64 2, !dbg !25
  %199 = insertelement <4 x i32> %198, i32 %64, i64 3, !dbg !25
  %200 = bitcast <4 x i32> %199 to <4 x float>, !dbg !25
  %201 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !23
  %202 = insertelement <4 x i32> %201, i32 %57, i64 1, !dbg !23
  %203 = insertelement <4 x i32> %202, i32 %58, i64 2, !dbg !23
  %204 = insertelement <4 x i32> %203, i32 %59, i64 3, !dbg !23
  %205 = bitcast <4 x i32> %204 to <4 x float>, !dbg !23
  %206 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !23
  %207 = insertelement <4 x i32> %206, i32 %53, i64 1, !dbg !23
  %208 = insertelement <4 x i32> %207, i32 %54, i64 2, !dbg !23
  %209 = insertelement <4 x i32> %208, i32 %55, i64 3, !dbg !23
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !23
  %211 = shl i32 %11, 2, !dbg !12
  %212 = and i32 %211, 508, !dbg !12
  %213 = or disjoint i32 %212, 512, !dbg !12
  %214 = or disjoint i32 %10, %213, !dbg !13
  %215 = or disjoint i32 %10, %212, !dbg !13
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !28
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !28
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !28
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !28
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !28
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !28
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !28
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !28
  %224 = sext i32 %215 to i64, !dbg !29
  %225 = getelementptr float, ptr addrspace(1) %5, i64 %224, !dbg !29
  %226 = sext i32 %214 to i64, !dbg !29
  %227 = getelementptr float, ptr addrspace(1) %5, i64 %226, !dbg !29
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !30
  %229 = getelementptr inbounds i8, ptr addrspace(3) %228, i32 16, !dbg !30
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %212, !dbg !30
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !30
  %232 = getelementptr inbounds i8, ptr addrspace(3) %230, i32 4, !dbg !30
  %233 = getelementptr inbounds i8, ptr addrspace(3) %230, i32 8, !dbg !30
  %234 = getelementptr inbounds i8, ptr addrspace(3) %230, i32 12, !dbg !30
  %235 = getelementptr i1, ptr addrspace(1) %6, i64 %18, !dbg !31
  %236 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !17
  %237 = insertelement <4 x i32> %236, i32 %189, i64 1, !dbg !17
  %238 = insertelement <4 x i32> %237, i32 %188, i64 2, !dbg !17
  %239 = insertelement <4 x i32> %238, i32 %182, i64 3, !dbg !17
  %240 = bitcast <4 x i32> %239 to <4 x float>, !dbg !17
  %241 = fsub <4 x float> %240, %187, !dbg !32
  %242 = insertelement <4 x float> poison, float %216, i64 0, !dbg !33
  %243 = insertelement <4 x float> %242, float %217, i64 1, !dbg !33
  %244 = insertelement <4 x float> %243, float %218, i64 2, !dbg !33
  %245 = insertelement <4 x float> %244, float %219, i64 3, !dbg !33
  %246 = fmul <4 x float> %241, %245, !dbg !33
  %247 = fmul <4 x float> %246, %210, !dbg !34
  %248 = fadd <4 x float> %247, %200, !dbg !35
  %249 = fcmp olt <4 x float> %248, zeroinitializer, !dbg !36
  %250 = select <4 x i1> %249, <4 x float> zeroinitializer, <4 x float> %248, !dbg !40
  %251 = fcmp ole <4 x float> %250, zeroinitializer, !dbg !41
  %bc = bitcast <4 x float> %250 to <4 x i32>, !dbg !30
  %252 = extractelement <4 x i32> %bc, i64 0, !dbg !30
  %bc50 = bitcast <4 x float> %250 to <4 x i32>, !dbg !30
  %253 = extractelement <4 x i32> %bc50, i64 1, !dbg !30
  %bc51 = bitcast <4 x float> %250 to <4 x i32>, !dbg !30
  %254 = extractelement <4 x i32> %bc51, i64 2, !dbg !30
  %bc52 = bitcast <4 x float> %250 to <4 x i32>, !dbg !30
  %255 = extractelement <4 x i32> %bc52, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %228, i32 %252, i32 %253, i32 %254, i32 %255, i1 true) #4, !dbg !30
  %256 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !17
  %257 = insertelement <4 x i32> %256, i32 %180, i64 1, !dbg !17
  %258 = insertelement <4 x i32> %257, i32 %179, i64 2, !dbg !17
  %259 = insertelement <4 x i32> %258, i32 %173, i64 3, !dbg !17
  %260 = bitcast <4 x i32> %259 to <4 x float>, !dbg !17
  %261 = fsub <4 x float> %260, %178, !dbg !32
  %262 = insertelement <4 x float> poison, float %220, i64 0, !dbg !33
  %263 = insertelement <4 x float> %262, float %221, i64 1, !dbg !33
  %264 = insertelement <4 x float> %263, float %222, i64 2, !dbg !33
  %265 = insertelement <4 x float> %264, float %223, i64 3, !dbg !33
  %266 = fmul <4 x float> %261, %265, !dbg !33
  %267 = fmul <4 x float> %266, %205, !dbg !34
  %268 = fadd <4 x float> %267, %195, !dbg !35
  %269 = fcmp olt <4 x float> %268, zeroinitializer, !dbg !36
  %270 = select <4 x i1> %269, <4 x float> zeroinitializer, <4 x float> %268, !dbg !40
  %271 = fcmp ole <4 x float> %270, zeroinitializer, !dbg !41
  %bc53 = bitcast <4 x float> %270 to <4 x i32>, !dbg !30
  %272 = extractelement <4 x i32> %bc53, i64 0, !dbg !30
  %bc54 = bitcast <4 x float> %270 to <4 x i32>, !dbg !30
  %273 = extractelement <4 x i32> %bc54, i64 1, !dbg !30
  %bc55 = bitcast <4 x float> %270 to <4 x i32>, !dbg !30
  %274 = extractelement <4 x i32> %bc55, i64 2, !dbg !30
  %bc56 = bitcast <4 x float> %270 to <4 x i32>, !dbg !30
  %275 = extractelement <4 x i32> %bc56, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %229, i32 %272, i32 %273, i32 %274, i32 %275, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %276 = load <4 x i32>, ptr addrspace(3) %231, align 16, !dbg !30
  %.extract = load i32, ptr addrspace(3) %230, align 16, !dbg !30
  %.extract8 = load i32, ptr addrspace(3) %232, align 4, !dbg !30
  %.extract9 = load i32, ptr addrspace(3) %233, align 8, !dbg !30
  %.extract10 = load i32, ptr addrspace(3) %234, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %225, i1 true) #4, !dbg !30
  %.extract11 = extractelement <4 x i32> %276, i64 0, !dbg !30
  %.extract12 = extractelement <4 x i32> %276, i64 1, !dbg !30
  %.extract13 = extractelement <4 x i32> %276, i64 2, !dbg !30
  %.extract14 = extractelement <4 x i32> %276, i64 3, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %227, i1 true) #4, !dbg !30
  %277 = zext <4 x i1> %251 to <4 x i8>, !dbg !42
  %278 = bitcast <4 x i8> %277 to i32, !dbg !42
  %279 = zext <4 x i1> %271 to <4 x i8>, !dbg !42
  %280 = bitcast <4 x i8> %279 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %278, i32 %280, ptr addrspace(1) %235, i1 true) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbu5mma7c3q262qsc3j7iaqpyveltbl3qduquan43eleudjlrx7u.py", directory: "inductor_cache/bu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 26, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 46, column: 25, scope: !7)
!30 = !DILocation(line: 46, column: 37, scope: !7)
!31 = !DILocation(line: 47, column: 25, scope: !7)
!32 = !DILocation(line: 31, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 19, scope: !7)
!34 = !DILocation(line: 40, column: 20, scope: !7)
!35 = !DILocation(line: 41, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 43, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 45, column: 21, scope: !7)
!42 = !DILocation(line: 47, column: 37, scope: !7)
!43 = !DILocation(line: 47, column: 4, scope: !7)
