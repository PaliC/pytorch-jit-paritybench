; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %12, 8, !dbg !12
  %14 = or disjoint i32 %12, 16, !dbg !12
  %15 = or disjoint i32 %12, 24, !dbg !12
  %16 = and i32 %8, 15, !dbg !12
  %17 = and i32 %8, 31, !dbg !12
  %18 = or disjoint i32 %7, %10, !dbg !13
  %19 = or disjoint i32 %7, %12, !dbg !13
  %20 = or disjoint i32 %7, %13, !dbg !13
  %21 = or disjoint i32 %7, %14, !dbg !13
  %22 = or disjoint i32 %7, %15, !dbg !13
  %23 = or disjoint i32 %7, %17, !dbg !13
  %24 = lshr i32 %8, 3, !dbg !14
  %25 = and i32 %24, 15, !dbg !14
  %26 = icmp samesign ult i32 %25, 9, !dbg !15
  %27 = icmp samesign ult i32 %16, 9, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %28 = sdiv i32 %.frozen, 4096, !dbg !16
  %29 = mul i32 %28, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %29, !dbg !17
  %30 = sdiv i32 %19, 4096, !dbg !16
  %31 = sdiv i32 %20, 4096, !dbg !16
  %32 = sdiv i32 %21, 4096, !dbg !16
  %33 = sdiv i32 %22, 4096, !dbg !16
  %34 = srem i32 %30, 512, !dbg !18
  %35 = srem i32 %31, 512, !dbg !18
  %36 = srem i32 %32, 512, !dbg !18
  %37 = srem i32 %33, 512, !dbg !18
  %38 = shl nuw nsw i32 %25, 12, !dbg !19
  %39 = add nsw i32 %.decomposed, %38, !dbg !20
  %40 = mul i32 %28, 36864, !dbg !21
  %41 = add i32 %39, %40, !dbg !22
  %42 = sext i32 %41 to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %49 = shl i32 %8, 6, !dbg !24
  %50 = and i32 %49, 448, !dbg !24
  %51 = or disjoint i32 %50, %25, !dbg !24
  %52 = and i32 %8, 127, !dbg !24
  %53 = lshr exact i32 %50, 2, !dbg !24
  %54 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %53, !dbg !24
  %55 = getelementptr float, ptr addrspace(3) %54, i32 %51, !dbg !24
  %56 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #3, !dbg !24
  %57 = or disjoint i32 %51, 16, !dbg !24
  %58 = lshr i32 %57, 4, !dbg !24
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !24
  %60 = getelementptr float, ptr addrspace(3) %59, i32 %57, !dbg !24
  %61 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #3, !dbg !24
  %62 = or disjoint i32 %51, 32, !dbg !24
  %63 = lshr i32 %62, 4, !dbg !24
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !24
  %65 = getelementptr float, ptr addrspace(3) %64, i32 %62, !dbg !24
  %66 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #3, !dbg !24
  %67 = or disjoint i32 %51, 48, !dbg !24
  %68 = lshr i32 %67, 4, !dbg !24
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !24
  %70 = getelementptr float, ptr addrspace(3) %69, i32 %67, !dbg !24
  %71 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %72 = lshr i32 %52, 4, !dbg !24
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !24
  %74 = getelementptr inbounds float, ptr addrspace(3) %73, i32 %52, !dbg !24
  %75 = load float, ptr addrspace(3) %74, align 4, !dbg !24
  %76 = or disjoint i32 %52, 128, !dbg !24
  %77 = lshr i32 %76, 4, !dbg !24
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !24
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %76, !dbg !24
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !24
  %81 = or disjoint i32 %52, 256, !dbg !24
  %82 = lshr i32 %81, 4, !dbg !24
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %82, !dbg !24
  %84 = getelementptr inbounds float, ptr addrspace(3) %83, i32 %81, !dbg !24
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !24
  %86 = or disjoint i32 %52, 384, !dbg !24
  %87 = lshr i32 %86, 4, !dbg !24
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87, !dbg !24
  %89 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %86, !dbg !24
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !24
  %91 = mul nsw i32 %34, 9, !dbg !25
  %92 = mul nsw i32 %35, 9, !dbg !25
  %93 = mul nsw i32 %36, 9, !dbg !25
  %94 = mul nsw i32 %37, 9, !dbg !25
  %95 = add nsw i32 %91, %16, !dbg !26
  %96 = add nsw i32 %92, %16, !dbg !26
  %97 = add nsw i32 %93, %16, !dbg !26
  %98 = add nsw i32 %94, %16, !dbg !26
  %99 = sext i32 %95 to i64, !dbg !27
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !27
  %101 = sext i32 %96 to i64, !dbg !27
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !27
  %103 = sext i32 %97 to i64, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !27
  %105 = sext i32 %98 to i64, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !27
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %27, i32 0, i1 %27) #3, !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %27, i32 0, i1 %27) #3, !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %27, i32 0, i1 %27) #3, !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %27, i32 0, i1 %27) #3, !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = fadd float %75, %108, !dbg !29
  %116 = fadd float %80, %110, !dbg !29
  %117 = fadd float %85, %112, !dbg !29
  %118 = fadd float %90, %114, !dbg !29
  %119 = select i1 %27, float %115, float 0.000000e+00, !dbg !30
  %120 = select i1 %27, float %116, float 0.000000e+00, !dbg !30
  %121 = select i1 %27, float %117, float 0.000000e+00, !dbg !30
  %122 = select i1 %27, float %118, float 0.000000e+00, !dbg !30
  %123 = bitcast float %119 to i32, !dbg !31
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !31
  %125 = bitcast i32 %124 to float, !dbg !31
  %126 = fadd float %119, %125, !dbg !35
  %127 = bitcast float %126 to i32, !dbg !31
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !31
  %129 = bitcast i32 %128 to float, !dbg !31
  %130 = fadd float %126, %129, !dbg !35
  %131 = bitcast float %130 to i32, !dbg !31
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !31
  %133 = bitcast i32 %132 to float, !dbg !31
  %134 = fadd float %130, %133, !dbg !35
  %135 = bitcast float %134 to i32, !dbg !31
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !31
  %137 = bitcast i32 %136 to float, !dbg !31
  %138 = fadd float %134, %137, !dbg !35
  %139 = bitcast float %120 to i32, !dbg !31
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !31
  %141 = bitcast i32 %140 to float, !dbg !31
  %142 = fadd float %120, %141, !dbg !35
  %143 = bitcast float %142 to i32, !dbg !31
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !31
  %145 = bitcast i32 %144 to float, !dbg !31
  %146 = fadd float %142, %145, !dbg !35
  %147 = bitcast float %146 to i32, !dbg !31
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !31
  %149 = bitcast i32 %148 to float, !dbg !31
  %150 = fadd float %146, %149, !dbg !35
  %151 = bitcast float %150 to i32, !dbg !31
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !31
  %153 = bitcast i32 %152 to float, !dbg !31
  %154 = fadd float %150, %153, !dbg !35
  %155 = bitcast float %121 to i32, !dbg !31
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 8, i32 31), !dbg !31
  %157 = bitcast i32 %156 to float, !dbg !31
  %158 = fadd float %121, %157, !dbg !35
  %159 = bitcast float %158 to i32, !dbg !31
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 4, i32 31), !dbg !31
  %161 = bitcast i32 %160 to float, !dbg !31
  %162 = fadd float %158, %161, !dbg !35
  %163 = bitcast float %162 to i32, !dbg !31
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !31
  %165 = bitcast i32 %164 to float, !dbg !31
  %166 = fadd float %162, %165, !dbg !35
  %167 = bitcast float %166 to i32, !dbg !31
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !31
  %169 = bitcast i32 %168 to float, !dbg !31
  %170 = fadd float %166, %169, !dbg !35
  %171 = bitcast float %122 to i32, !dbg !31
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !31
  %173 = bitcast i32 %172 to float, !dbg !31
  %174 = fadd float %122, %173, !dbg !35
  %175 = bitcast float %174 to i32, !dbg !31
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 4, i32 31), !dbg !31
  %177 = bitcast i32 %176 to float, !dbg !31
  %178 = fadd float %174, %177, !dbg !35
  %179 = bitcast float %178 to i32, !dbg !31
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 2, i32 31), !dbg !31
  %181 = bitcast i32 %180 to float, !dbg !31
  %182 = fadd float %178, %181, !dbg !35
  %183 = bitcast float %182 to i32, !dbg !31
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !31
  %185 = bitcast i32 %184 to float, !dbg !31
  %186 = fadd float %182, %185, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %188 = bitcast float %138 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #3, !dbg !37
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !37
  %190 = bitcast float %154 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #3, !dbg !37
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !37
  %192 = bitcast float %170 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #3, !dbg !37
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !37
  %194 = bitcast float %186 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !37
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !37
  %197 = sext i32 %23 to i64, !dbg !38
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %197, !dbg !38
  %199 = and i32 %8, 96, !dbg !39
  %200 = icmp eq i32 %199, 0, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %198, i1 %200) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py", directory: "inductor_cache/hk")
!4 = !{ptr @triton_per_fused_mean_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_3", linkageName: "triton_per_fused_mean_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 29, scope: !7)
!19 = !DILocation(line: 34, column: 40, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 34, column: 51, scope: !7)
!22 = !DILocation(line: 34, column: 45, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 56, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 42, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 33, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 39, column: 24, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 39, column: 27, scope: !7)
!38 = !DILocation(line: 40, column: 25, scope: !7)
!39 = !DILocation(line: 40, column: 36, scope: !7)
!40 = !DILocation(line: 40, column: 4, scope: !7)
