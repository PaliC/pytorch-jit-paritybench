; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !14
  %17 = insertelement <2 x i32> %16, i32 %14, i64 1, !dbg !14
  %18 = sdiv <2 x i32> %17, splat (i32 4096), !dbg !14
  %19 = srem <2 x i32> %18, splat (i32 384), !dbg !15
  %20 = srem i32 %14, 4096, !dbg !16
  %21 = srem i32 %15, 4096, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %22 = sdiv i32 %.frozen, 1572864, !dbg !17
  %.frozen2 = freeze i32 %15, !dbg !17
  %23 = sdiv i32 %.frozen2, 1572864, !dbg !17
  %24 = extractelement <2 x i32> %19, i64 1, !dbg !18
  %25 = icmp slt i32 %24, 64, !dbg !19
  %26 = extractelement <2 x i32> %19, i64 0, !dbg !18
  %27 = icmp slt i32 %26, 64, !dbg !19
  %28 = mul i32 %22, 1572864, !dbg !20
  %srem.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = mul i32 %23, 1572864, !dbg !20
  %srem1.decomposed = sub i32 %.frozen2, %29, !dbg !20
  %30 = shl nsw i32 %22, 18, !dbg !21
  %31 = shl nsw i32 %23, 18, !dbg !21
  %32 = add nsw i32 %30, %srem.decomposed, !dbg !22
  %33 = add nsw i32 %31, %srem1.decomposed, !dbg !22
  %34 = sext i32 %32 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = sext i32 %33 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !24
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #1, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %48 = and <2 x i32> %19, splat (i32 -64), !dbg !25
  %49 = shufflevector <2 x i32> %48, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !25
  %50 = shl nsw i32 %24, 12, !dbg !26
  %51 = shl nsw i32 %26, 12, !dbg !26
  %52 = add nsw i32 %30, %20, !dbg !26
  %53 = add nsw i32 %52, -262144, !dbg !27
  %54 = add nsw i32 %53, %50, !dbg !28
  %55 = add nsw i32 %31, %21, !dbg !26
  %56 = add nsw i32 %55, -262144, !dbg !27
  %57 = add nsw i32 %56, %51, !dbg !28
  %58 = sext i32 %54 to i64, !dbg !29
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !29
  %60 = sext i32 %57 to i64, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !29
  %62 = icmp eq <8 x i32> %49, <i32 256, i32 256, i32 192, i32 192, i32 128, i32 128, i32 64, i32 64>, !dbg !30
  %63 = extractelement <8 x i1> %62, i64 7, !dbg !31
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #1, !dbg !32
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !32
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !32
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !32
  %69 = extractelement <8 x i1> %62, i64 6, !dbg !31
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %69, i32 0, i1 %69, i32 0, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #1, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !32
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !32
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !32
  %75 = add nsw i32 %52, -524288, !dbg !33
  %76 = add nsw i32 %75, %50, !dbg !34
  %77 = add nsw i32 %55, -524288, !dbg !33
  %78 = add nsw i32 %77, %51, !dbg !34
  %79 = sext i32 %76 to i64, !dbg !35
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !35
  %81 = sext i32 %78 to i64, !dbg !35
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !35
  %83 = extractelement <8 x i1> %62, i64 5, !dbg !36
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #1, !dbg !37
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !37
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !37
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !37
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !37
  %89 = extractelement <8 x i1> %62, i64 4, !dbg !36
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #1, !dbg !37
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !37
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !37
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !37
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !37
  %95 = add nsw i32 %52, -786432, !dbg !38
  %96 = add nsw i32 %95, %50, !dbg !39
  %97 = add nsw i32 %55, -786432, !dbg !38
  %98 = add nsw i32 %97, %51, !dbg !39
  %99 = sext i32 %96 to i64, !dbg !40
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !40
  %101 = sext i32 %98 to i64, !dbg !40
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !40
  %103 = extractelement <8 x i1> %62, i64 3, !dbg !41
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #1, !dbg !42
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !42
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !42
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !42
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !42
  %109 = extractelement <8 x i1> %62, i64 2, !dbg !41
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #1, !dbg !42
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !42
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !42
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !42
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !42
  %115 = add nsw i32 %52, -1048576, !dbg !43
  %116 = add nsw i32 %115, %50, !dbg !44
  %117 = add nsw i32 %55, -1048576, !dbg !43
  %118 = add nsw i32 %117, %51, !dbg !44
  %119 = sext i32 %116 to i64, !dbg !45
  %120 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !45
  %121 = sext i32 %118 to i64, !dbg !45
  %122 = getelementptr float, ptr addrspace(1) %4, i64 %121, !dbg !45
  %123 = extractelement <8 x i1> %62, i64 1, !dbg !46
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123) #1, !dbg !47
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !47
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !47
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !47
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !47
  %129 = bitcast i32 %125 to float, !dbg !47
  %130 = bitcast i32 %126 to float, !dbg !47
  %131 = bitcast i32 %127 to float, !dbg !47
  %132 = bitcast i32 %128 to float, !dbg !47
  %133 = extractelement <8 x i1> %62, i64 0, !dbg !46
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #1, !dbg !47
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !47
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !47
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !47
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !47
  %139 = bitcast i32 %135 to float, !dbg !47
  %140 = bitcast i32 %136 to float, !dbg !47
  %141 = bitcast i32 %137 to float, !dbg !47
  %142 = bitcast i32 %138 to float, !dbg !47
  %143 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !48
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !48
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123) #1, !dbg !49
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !49
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !49
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !49
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !49
  %150 = bitcast i32 %146 to float, !dbg !49
  %151 = bitcast i32 %147 to float, !dbg !49
  %152 = bitcast i32 %148 to float, !dbg !49
  %153 = bitcast i32 %149 to float, !dbg !49
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #1, !dbg !49
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !49
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !49
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !49
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !49
  %159 = bitcast i32 %155 to float, !dbg !49
  %160 = bitcast i32 %156 to float, !dbg !49
  %161 = bitcast i32 %157 to float, !dbg !49
  %162 = bitcast i32 %158 to float, !dbg !49
  %163 = fadd float %129, %150, !dbg !50
  %164 = fadd float %130, %151, !dbg !50
  %165 = fadd float %131, %152, !dbg !50
  %166 = fadd float %132, %153, !dbg !50
  %167 = fadd float %139, %159, !dbg !50
  %168 = fadd float %140, %160, !dbg !50
  %169 = fadd float %141, %161, !dbg !50
  %170 = fadd float %142, %162, !dbg !50
  %171 = icmp sgt i32 %24, 319, !dbg !18
  %172 = icmp sgt i32 %26, 319, !dbg !18
  %173 = add nsw i32 %52, -1310720, !dbg !51
  %174 = add nsw i32 %173, %50, !dbg !52
  %175 = add nsw i32 %55, -1310720, !dbg !51
  %176 = add nsw i32 %175, %51, !dbg !52
  %177 = sext i32 %174 to i64, !dbg !53
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %177, !dbg !53
  %179 = sext i32 %176 to i64, !dbg !53
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %179, !dbg !53
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %171, i32 0, i1 %171, i32 0, i1 %171, i32 0, i1 %171, i32 0, i1 %171) #1, !dbg !54
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !54
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !54
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !54
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !54
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %180, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172, i32 0, i1 %172) #1, !dbg !54
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !54
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !54
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !54
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !54
  %191 = sext i32 %14 to i64, !dbg !55
  %192 = getelementptr float, ptr addrspace(1) %6, i64 %191, !dbg !55
  %193 = sext i32 %15 to i64, !dbg !55
  %194 = getelementptr float, ptr addrspace(1) %6, i64 %193, !dbg !55
  %195 = bitcast float %163 to i32, !dbg !56
  %196 = select i1 %123, i32 %195, i32 %182, !dbg !46
  %197 = select i1 %103, i32 %105, i32 %196, !dbg !41
  %198 = select i1 %83, i32 %85, i32 %197, !dbg !36
  %199 = select i1 %63, i32 %65, i32 %198, !dbg !31
  %200 = select i1 %25, i32 %39, i32 %199, !dbg !57
  %201 = bitcast float %164 to i32, !dbg !56
  %202 = select i1 %123, i32 %201, i32 %183, !dbg !46
  %203 = select i1 %103, i32 %106, i32 %202, !dbg !41
  %204 = select i1 %83, i32 %86, i32 %203, !dbg !36
  %205 = select i1 %63, i32 %66, i32 %204, !dbg !31
  %206 = select i1 %25, i32 %40, i32 %205, !dbg !57
  %207 = bitcast float %165 to i32, !dbg !56
  %208 = select i1 %123, i32 %207, i32 %184, !dbg !46
  %209 = select i1 %103, i32 %107, i32 %208, !dbg !41
  %210 = select i1 %83, i32 %87, i32 %209, !dbg !36
  %211 = select i1 %63, i32 %67, i32 %210, !dbg !31
  %212 = select i1 %25, i32 %41, i32 %211, !dbg !57
  %213 = bitcast float %166 to i32, !dbg !56
  %214 = select i1 %123, i32 %213, i32 %185, !dbg !46
  %215 = select i1 %103, i32 %108, i32 %214, !dbg !41
  %216 = select i1 %83, i32 %88, i32 %215, !dbg !36
  %217 = select i1 %63, i32 %68, i32 %216, !dbg !31
  %218 = select i1 %25, i32 %42, i32 %217, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %206, i32 %212, i32 %218, ptr addrspace(1) %192, i1 true) #1, !dbg !56
  %219 = bitcast float %167 to i32, !dbg !56
  %220 = select i1 %133, i32 %219, i32 %187, !dbg !46
  %221 = select i1 %109, i32 %111, i32 %220, !dbg !41
  %222 = select i1 %89, i32 %91, i32 %221, !dbg !36
  %223 = select i1 %69, i32 %71, i32 %222, !dbg !31
  %224 = select i1 %27, i32 %44, i32 %223, !dbg !57
  %225 = bitcast float %168 to i32, !dbg !56
  %226 = select i1 %133, i32 %225, i32 %188, !dbg !46
  %227 = select i1 %109, i32 %112, i32 %226, !dbg !41
  %228 = select i1 %89, i32 %92, i32 %227, !dbg !36
  %229 = select i1 %69, i32 %72, i32 %228, !dbg !31
  %230 = select i1 %27, i32 %45, i32 %229, !dbg !57
  %231 = bitcast float %169 to i32, !dbg !56
  %232 = select i1 %133, i32 %231, i32 %189, !dbg !46
  %233 = select i1 %109, i32 %113, i32 %232, !dbg !41
  %234 = select i1 %89, i32 %93, i32 %233, !dbg !36
  %235 = select i1 %69, i32 %73, i32 %234, !dbg !31
  %236 = select i1 %27, i32 %46, i32 %235, !dbg !57
  %237 = bitcast float %170 to i32, !dbg !56
  %238 = select i1 %133, i32 %237, i32 %190, !dbg !46
  %239 = select i1 %109, i32 %114, i32 %238, !dbg !41
  %240 = select i1 %89, i32 %94, i32 %239, !dbg !36
  %241 = select i1 %69, i32 %74, i32 %240, !dbg !31
  %242 = select i1 %27, i32 %47, i32 %241, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %224, i32 %230, i32 %236, i32 %242, ptr addrspace(1) %194, i1 true) #1, !dbg !56
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3e4oxktlelbb62cze2nntth7xro7se3cjpffh5wmpzaklxeffuc.py", directory: "inductor_cache/3e")
!4 = !{ptr @triton_poi_fused_cat_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_7", linkageName: "triton_poi_fused_cat_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 58, column: 20, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 54, scope: !7)
!22 = !DILocation(line: 33, column: 47, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 42, scope: !7)
!27 = !DILocation(line: 38, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 56, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 52, column: 20, scope: !7)
!31 = !DILocation(line: 65, column: 34, scope: !7)
!32 = !DILocation(line: 38, column: 68, scope: !7)
!33 = !DILocation(line: 43, column: 36, scope: !7)
!34 = !DILocation(line: 43, column: 57, scope: !7)
!35 = !DILocation(line: 43, column: 31, scope: !7)
!36 = !DILocation(line: 64, column: 35, scope: !7)
!37 = !DILocation(line: 43, column: 69, scope: !7)
!38 = !DILocation(line: 48, column: 36, scope: !7)
!39 = !DILocation(line: 48, column: 57, scope: !7)
!40 = !DILocation(line: 48, column: 31, scope: !7)
!41 = !DILocation(line: 63, column: 35, scope: !7)
!42 = !DILocation(line: 48, column: 69, scope: !7)
!43 = !DILocation(line: 53, column: 36, scope: !7)
!44 = !DILocation(line: 53, column: 57, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 0, scope: !7)
!47 = !DILocation(line: 53, column: 69, scope: !7)
!48 = !DILocation(line: 54, column: 31, scope: !7)
!49 = !DILocation(line: 54, column: 69, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 61, column: 36, scope: !7)
!52 = !DILocation(line: 61, column: 57, scope: !7)
!53 = !DILocation(line: 61, column: 31, scope: !7)
!54 = !DILocation(line: 61, column: 69, scope: !7)
!55 = !DILocation(line: 67, column: 25, scope: !7)
!56 = !DILocation(line: 67, column: 37, scope: !7)
!57 = !DILocation(line: 66, column: 33, scope: !7)
!58 = !DILocation(line: 67, column: 4, scope: !7)
