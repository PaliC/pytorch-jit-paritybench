; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = icmp slt i32 %10, 55296, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %15 = sdiv i32 %.frozen, 6, !dbg !15
  %16 = mul i32 %15, 6, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = srem i32 %11, 6, !dbg !16
  %.frozen7 = freeze i32 %12, !dbg !15
  %18 = sdiv i32 %.frozen7, 6, !dbg !15
  %19 = mul i32 %18, 6, !dbg !16
  %.decomposed8 = sub i32 %.frozen7, %19, !dbg !16
  %20 = srem i32 %13, 6, !dbg !16
  %21 = srem i32 %15, 6, !dbg !17
  %22 = srem i32 %18, 6, !dbg !17
  %23 = sdiv i32 %10, 36, !dbg !18
  %.frozen9 = freeze i32 %10, !dbg !19
  %24 = sdiv i32 %.frozen9, 13824, !dbg !19
  %25 = mul i32 %24, 13824, !dbg !20
  %.decomposed10 = sub i32 %.frozen9, %25, !dbg !20
  %26 = shl nsw i32 %.decomposed, 1, !dbg !21
  %27 = shl nsw i32 %17, 1, !dbg !21
  %28 = shl nsw i32 %.decomposed8, 1, !dbg !21
  %29 = shl nsw i32 %20, 1, !dbg !21
  %30 = mul nsw i32 %21, 26, !dbg !22
  %31 = mul nsw i32 %22, 26, !dbg !22
  %32 = mul i32 %23, 169, !dbg !23
  %33 = add i32 %30, %32, !dbg !24
  %34 = add i32 %33, %26, !dbg !25
  %35 = add i32 %33, %27, !dbg !25
  %36 = add i32 %32, %31, !dbg !24
  %37 = add i32 %36, %28, !dbg !25
  %38 = add i32 %36, %29, !dbg !25
  %39 = sext i32 %34 to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !26
  %41 = sext i32 %35 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !26
  %43 = sext i32 %37 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %38 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %14) #1, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %14) #1, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %14) #1, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %14) #1, !dbg !27
  %51 = add i32 %33, 1, !dbg !28
  %52 = add i32 %51, %26, !dbg !29
  %53 = add i32 %51, %27, !dbg !29
  %54 = add i32 %36, 1, !dbg !28
  %55 = add i32 %54, %28, !dbg !29
  %56 = add i32 %54, %29, !dbg !29
  %57 = sext i32 %52 to i64, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !30
  %59 = sext i32 %53 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !30
  %61 = sext i32 %55 to i64, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !30
  %63 = sext i32 %56 to i64, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %14) #1, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %14) #1, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %14) #1, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %14) #1, !dbg !31
  %69 = add i32 %33, 2, !dbg !32
  %70 = add i32 %69, %26, !dbg !33
  %71 = add i32 %69, %27, !dbg !33
  %72 = add i32 %36, 2, !dbg !32
  %73 = add i32 %72, %28, !dbg !33
  %74 = add i32 %72, %29, !dbg !33
  %75 = sext i32 %70 to i64, !dbg !34
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !34
  %77 = sext i32 %71 to i64, !dbg !34
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !34
  %79 = sext i32 %73 to i64, !dbg !34
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !34
  %81 = sext i32 %74 to i64, !dbg !34
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !34
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %14) #1, !dbg !35
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %14) #1, !dbg !35
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %14) #1, !dbg !35
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %14) #1, !dbg !35
  %87 = add i32 %33, 13, !dbg !36
  %88 = add i32 %87, %26, !dbg !37
  %89 = add i32 %87, %27, !dbg !37
  %90 = add i32 %36, 13, !dbg !36
  %91 = add i32 %90, %28, !dbg !37
  %92 = add i32 %90, %29, !dbg !37
  %93 = sext i32 %88 to i64, !dbg !38
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !38
  %95 = sext i32 %89 to i64, !dbg !38
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !38
  %97 = sext i32 %91 to i64, !dbg !38
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !38
  %99 = sext i32 %92 to i64, !dbg !38
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !38
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %14) #1, !dbg !39
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %14) #1, !dbg !39
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %14) #1, !dbg !39
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %14) #1, !dbg !39
  %105 = add i32 %33, 14, !dbg !40
  %106 = add i32 %105, %26, !dbg !41
  %107 = add i32 %105, %27, !dbg !41
  %108 = add i32 %36, 14, !dbg !40
  %109 = add i32 %108, %28, !dbg !41
  %110 = add i32 %108, %29, !dbg !41
  %111 = sext i32 %106 to i64, !dbg !42
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !42
  %113 = sext i32 %107 to i64, !dbg !42
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !42
  %115 = sext i32 %109 to i64, !dbg !42
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !42
  %117 = sext i32 %110 to i64, !dbg !42
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !42
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %14) #1, !dbg !43
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %14) #1, !dbg !43
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %14) #1, !dbg !43
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %14) #1, !dbg !43
  %123 = add i32 %33, 15, !dbg !44
  %124 = add i32 %123, %26, !dbg !45
  %125 = add i32 %123, %27, !dbg !45
  %126 = add i32 %36, 15, !dbg !44
  %127 = add i32 %126, %28, !dbg !45
  %128 = add i32 %126, %29, !dbg !45
  %129 = sext i32 %124 to i64, !dbg !46
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !46
  %131 = sext i32 %125 to i64, !dbg !46
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !46
  %133 = sext i32 %127 to i64, !dbg !46
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !46
  %135 = sext i32 %128 to i64, !dbg !46
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !46
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %14) #1, !dbg !47
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %14) #1, !dbg !47
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %14) #1, !dbg !47
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %14) #1, !dbg !47
  %141 = add i32 %33, 26, !dbg !48
  %142 = add i32 %141, %26, !dbg !49
  %143 = add i32 %141, %27, !dbg !49
  %144 = add i32 %36, 26, !dbg !48
  %145 = add i32 %144, %28, !dbg !49
  %146 = add i32 %144, %29, !dbg !49
  %147 = sext i32 %142 to i64, !dbg !50
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !50
  %149 = sext i32 %143 to i64, !dbg !50
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !50
  %151 = sext i32 %145 to i64, !dbg !50
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !50
  %153 = sext i32 %146 to i64, !dbg !50
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !50
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %14) #1, !dbg !51
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %14) #1, !dbg !51
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %14) #1, !dbg !51
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %14) #1, !dbg !51
  %159 = add i32 %33, 27, !dbg !52
  %160 = add i32 %159, %26, !dbg !53
  %161 = add i32 %159, %27, !dbg !53
  %162 = add i32 %36, 27, !dbg !52
  %163 = add i32 %162, %28, !dbg !53
  %164 = add i32 %162, %29, !dbg !53
  %165 = sext i32 %160 to i64, !dbg !54
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !54
  %167 = sext i32 %161 to i64, !dbg !54
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !54
  %169 = sext i32 %163 to i64, !dbg !54
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !54
  %171 = sext i32 %164 to i64, !dbg !54
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !54
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %14) #1, !dbg !55
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %14) #1, !dbg !55
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %14) #1, !dbg !55
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %14) #1, !dbg !55
  %177 = add i32 %33, 28, !dbg !56
  %178 = add i32 %177, %26, !dbg !57
  %179 = add i32 %177, %27, !dbg !57
  %180 = add i32 %36, 28, !dbg !56
  %181 = add i32 %180, %28, !dbg !57
  %182 = add i32 %180, %29, !dbg !57
  %183 = sext i32 %178 to i64, !dbg !58
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !58
  %185 = sext i32 %179 to i64, !dbg !58
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !58
  %187 = sext i32 %181 to i64, !dbg !58
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !58
  %189 = sext i32 %182 to i64, !dbg !58
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !58
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %14) #1, !dbg !59
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %14) #1, !dbg !59
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %14) #1, !dbg !59
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %14) #1, !dbg !59
  %195 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !27
  %196 = insertelement <4 x i32> %195, i32 %48, i64 1, !dbg !27
  %197 = insertelement <4 x i32> %196, i32 %49, i64 2, !dbg !27
  %198 = insertelement <4 x i32> %197, i32 %50, i64 3, !dbg !27
  %199 = bitcast <4 x i32> %198 to <4 x float>, !dbg !27
  %200 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !31
  %201 = insertelement <4 x i32> %200, i32 %66, i64 1, !dbg !31
  %202 = insertelement <4 x i32> %201, i32 %67, i64 2, !dbg !31
  %203 = insertelement <4 x i32> %202, i32 %68, i64 3, !dbg !31
  %204 = bitcast <4 x i32> %203 to <4 x float>, !dbg !31
  %205 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !35
  %206 = insertelement <4 x i32> %205, i32 %84, i64 1, !dbg !35
  %207 = insertelement <4 x i32> %206, i32 %85, i64 2, !dbg !35
  %208 = insertelement <4 x i32> %207, i32 %86, i64 3, !dbg !35
  %209 = bitcast <4 x i32> %208 to <4 x float>, !dbg !35
  %210 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !39
  %211 = insertelement <4 x i32> %210, i32 %102, i64 1, !dbg !39
  %212 = insertelement <4 x i32> %211, i32 %103, i64 2, !dbg !39
  %213 = insertelement <4 x i32> %212, i32 %104, i64 3, !dbg !39
  %214 = bitcast <4 x i32> %213 to <4 x float>, !dbg !39
  %215 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !43
  %216 = insertelement <4 x i32> %215, i32 %120, i64 1, !dbg !43
  %217 = insertelement <4 x i32> %216, i32 %121, i64 2, !dbg !43
  %218 = insertelement <4 x i32> %217, i32 %122, i64 3, !dbg !43
  %219 = bitcast <4 x i32> %218 to <4 x float>, !dbg !43
  %220 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !47
  %221 = insertelement <4 x i32> %220, i32 %138, i64 1, !dbg !47
  %222 = insertelement <4 x i32> %221, i32 %139, i64 2, !dbg !47
  %223 = insertelement <4 x i32> %222, i32 %140, i64 3, !dbg !47
  %224 = bitcast <4 x i32> %223 to <4 x float>, !dbg !47
  %225 = insertelement <4 x i32> poison, i32 %155, i64 0, !dbg !51
  %226 = insertelement <4 x i32> %225, i32 %156, i64 1, !dbg !51
  %227 = insertelement <4 x i32> %226, i32 %157, i64 2, !dbg !51
  %228 = insertelement <4 x i32> %227, i32 %158, i64 3, !dbg !51
  %229 = bitcast <4 x i32> %228 to <4 x float>, !dbg !51
  %230 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !55
  %231 = insertelement <4 x i32> %230, i32 %174, i64 1, !dbg !55
  %232 = insertelement <4 x i32> %231, i32 %175, i64 2, !dbg !55
  %233 = insertelement <4 x i32> %232, i32 %176, i64 3, !dbg !55
  %234 = bitcast <4 x i32> %233 to <4 x float>, !dbg !55
  %235 = insertelement <4 x i32> poison, i32 %191, i64 0, !dbg !59
  %236 = insertelement <4 x i32> %235, i32 %192, i64 1, !dbg !59
  %237 = insertelement <4 x i32> %236, i32 %193, i64 2, !dbg !59
  %238 = insertelement <4 x i32> %237, i32 %194, i64 3, !dbg !59
  %239 = bitcast <4 x i32> %238 to <4 x float>, !dbg !59
  %240 = fcmp ogt <4 x float> %204, %199, !dbg !60
  %241 = fcmp uno <4 x float> %204, zeroinitializer, !dbg !64
  %242 = or <4 x i1> %240, %241, !dbg !65
  %.v = select <4 x i1> %242, <4 x i32> %203, <4 x i32> %198, !dbg !66
  %243 = bitcast <4 x i32> %.v to <4 x float>, !dbg !66
  %244 = fcmp olt <4 x float> %243, %209, !dbg !67
  %245 = fcmp uno <4 x float> %209, zeroinitializer, !dbg !69
  %246 = or <4 x i1> %244, %245, !dbg !70
  %.v1 = select <4 x i1> %246, <4 x i32> %208, <4 x i32> %.v, !dbg !71
  %247 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !71
  %248 = fcmp olt <4 x float> %247, %214, !dbg !72
  %249 = fcmp uno <4 x float> %214, zeroinitializer, !dbg !74
  %250 = or <4 x i1> %248, %249, !dbg !75
  %.v2 = select <4 x i1> %250, <4 x i32> %213, <4 x i32> %.v1, !dbg !76
  %251 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !76
  %252 = fcmp olt <4 x float> %251, %219, !dbg !77
  %253 = fcmp uno <4 x float> %219, zeroinitializer, !dbg !79
  %254 = or <4 x i1> %252, %253, !dbg !80
  %.v3 = select <4 x i1> %254, <4 x i32> %218, <4 x i32> %.v2, !dbg !81
  %255 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !81
  %256 = fcmp olt <4 x float> %255, %224, !dbg !82
  %257 = fcmp uno <4 x float> %224, zeroinitializer, !dbg !84
  %258 = or <4 x i1> %256, %257, !dbg !85
  %.v4 = select <4 x i1> %258, <4 x i32> %223, <4 x i32> %.v3, !dbg !86
  %259 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !86
  %260 = fcmp olt <4 x float> %259, %229, !dbg !87
  %261 = fcmp uno <4 x float> %229, zeroinitializer, !dbg !89
  %262 = or <4 x i1> %260, %261, !dbg !90
  %.v5 = select <4 x i1> %262, <4 x i32> %228, <4 x i32> %.v4, !dbg !91
  %263 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !91
  %264 = fcmp olt <4 x float> %263, %234, !dbg !92
  %265 = fcmp uno <4 x float> %234, zeroinitializer, !dbg !94
  %266 = or <4 x i1> %264, %265, !dbg !95
  %.v6 = select <4 x i1> %266, <4 x i32> %233, <4 x i32> %.v5, !dbg !96
  %267 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !96
  %268 = fcmp olt <4 x float> %267, %239, !dbg !97
  %269 = fcmp uno <4 x float> %239, zeroinitializer, !dbg !99
  %270 = or <4 x i1> %268, %269, !dbg !100
  %271 = extractelement <4 x i1> %270, i64 0, !dbg !100
  %272 = or <4 x i1> %268, %269, !dbg !100
  %273 = extractelement <4 x i1> %272, i64 1, !dbg !100
  %274 = or <4 x i1> %268, %269, !dbg !100
  %275 = extractelement <4 x i1> %274, i64 2, !dbg !100
  %276 = or <4 x i1> %268, %269, !dbg !100
  %277 = extractelement <4 x i1> %276, i64 3, !dbg !100
  %278 = zext <4 x i1> %240 to <4 x i8>, !dbg !101
  %279 = select <4 x i1> %244, <4 x i8> splat (i8 2), <4 x i8> %278, !dbg !102
  %280 = select <4 x i1> %248, <4 x i8> splat (i8 3), <4 x i8> %279, !dbg !103
  %281 = select <4 x i1> %252, <4 x i8> splat (i8 4), <4 x i8> %280, !dbg !104
  %282 = select <4 x i1> %256, <4 x i8> splat (i8 5), <4 x i8> %281, !dbg !105
  %283 = select <4 x i1> %260, <4 x i8> splat (i8 6), <4 x i8> %282, !dbg !106
  %284 = select <4 x i1> %264, <4 x i8> splat (i8 7), <4 x i8> %283, !dbg !107
  %285 = select <4 x i1> %268, <4 x i8> splat (i8 8), <4 x i8> %284, !dbg !108
  %286 = mul i32 %24, 36864, !dbg !109
  %287 = add i32 %286, %.decomposed10, !dbg !110
  %288 = sext i32 %287 to i64, !dbg !111
  %289 = getelementptr float, ptr addrspace(1) %1, i64 %288, !dbg !111
  %290 = extractelement <4 x i32> %.v6, i64 0, !dbg !112
  %291 = select i1 %271, i32 %191, i32 %290, !dbg !113
  %292 = extractelement <4 x i32> %.v6, i64 1, !dbg !112
  %293 = select i1 %273, i32 %192, i32 %292, !dbg !113
  %294 = extractelement <4 x i32> %.v6, i64 2, !dbg !112
  %295 = select i1 %275, i32 %193, i32 %294, !dbg !113
  %296 = extractelement <4 x i32> %.v6, i64 3, !dbg !112
  %297 = select i1 %277, i32 %194, i32 %296, !dbg !113
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %293, i32 %295, i32 %297, ptr addrspace(1) %289, i1 %14) #1, !dbg !112
  %298 = sext i32 %10 to i64, !dbg !114
  %299 = getelementptr i8, ptr addrspace(1) %2, i64 %298, !dbg !114
  %300 = bitcast <4 x i8> %285 to i32, !dbg !115
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %300, ptr addrspace(1) %299, i1 %14) #1, !dbg !115
  ret void, !dbg !116
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx2pnomwh7hc4r4jay4metyfza2rwsw62m7krp66lpdwp5p4d5x5.py", directory: "inductor_cache/x2")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_15", linkageName: "triton_poi_fused_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 32, scope: !7)
!22 = !DILocation(line: 30, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 49, scope: !7)
!24 = !DILocation(line: 30, column: 37, scope: !7)
!25 = !DILocation(line: 30, column: 45, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 54, scope: !7)
!28 = !DILocation(line: 31, column: 41, scope: !7)
!29 = !DILocation(line: 31, column: 49, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 58, scope: !7)
!32 = !DILocation(line: 32, column: 41, scope: !7)
!33 = !DILocation(line: 32, column: 49, scope: !7)
!34 = !DILocation(line: 32, column: 30, scope: !7)
!35 = !DILocation(line: 32, column: 58, scope: !7)
!36 = !DILocation(line: 33, column: 42, scope: !7)
!37 = !DILocation(line: 33, column: 50, scope: !7)
!38 = !DILocation(line: 33, column: 30, scope: !7)
!39 = !DILocation(line: 33, column: 59, scope: !7)
!40 = !DILocation(line: 34, column: 42, scope: !7)
!41 = !DILocation(line: 34, column: 50, scope: !7)
!42 = !DILocation(line: 34, column: 30, scope: !7)
!43 = !DILocation(line: 34, column: 59, scope: !7)
!44 = !DILocation(line: 35, column: 42, scope: !7)
!45 = !DILocation(line: 35, column: 50, scope: !7)
!46 = !DILocation(line: 35, column: 30, scope: !7)
!47 = !DILocation(line: 35, column: 59, scope: !7)
!48 = !DILocation(line: 36, column: 43, scope: !7)
!49 = !DILocation(line: 36, column: 51, scope: !7)
!50 = !DILocation(line: 36, column: 31, scope: !7)
!51 = !DILocation(line: 36, column: 60, scope: !7)
!52 = !DILocation(line: 37, column: 43, scope: !7)
!53 = !DILocation(line: 37, column: 51, scope: !7)
!54 = !DILocation(line: 37, column: 31, scope: !7)
!55 = !DILocation(line: 37, column: 60, scope: !7)
!56 = !DILocation(line: 38, column: 43, scope: !7)
!57 = !DILocation(line: 38, column: 51, scope: !7)
!58 = !DILocation(line: 38, column: 31, scope: !7)
!59 = !DILocation(line: 38, column: 60, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!63 = !DILocation(line: 39, column: 40, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !63)
!67 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !68)
!68 = !DILocation(line: 40, column: 40, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !68)
!72 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !73)
!73 = !DILocation(line: 41, column: 40, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !78)
!78 = !DILocation(line: 42, column: 40, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !83)
!83 = !DILocation(line: 43, column: 41, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !88)
!88 = !DILocation(line: 44, column: 42, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !93)
!93 = !DILocation(line: 45, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !98)
!98 = !DILocation(line: 46, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !98)
!101 = !DILocation(line: 50, column: 35, scope: !7)
!102 = !DILocation(line: 53, column: 35, scope: !7)
!103 = !DILocation(line: 56, column: 35, scope: !7)
!104 = !DILocation(line: 59, column: 35, scope: !7)
!105 = !DILocation(line: 62, column: 35, scope: !7)
!106 = !DILocation(line: 65, column: 35, scope: !7)
!107 = !DILocation(line: 68, column: 35, scope: !7)
!108 = !DILocation(line: 71, column: 35, scope: !7)
!109 = !DILocation(line: 72, column: 36, scope: !7)
!110 = !DILocation(line: 72, column: 30, scope: !7)
!111 = !DILocation(line: 72, column: 25, scope: !7)
!112 = !DILocation(line: 72, column: 48, scope: !7)
!113 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !98)
!114 = !DILocation(line: 73, column: 25, scope: !7)
!115 = !DILocation(line: 73, column: 37, scope: !7)
!116 = !DILocation(line: 73, column: 4, scope: !7)
