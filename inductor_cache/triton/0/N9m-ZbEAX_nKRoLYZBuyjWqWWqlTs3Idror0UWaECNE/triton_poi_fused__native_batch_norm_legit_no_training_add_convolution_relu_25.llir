; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 7, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = and i32 %18, 127, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !13
  %21 = icmp slt i32 %20, 2048, !dbg !14
  %22 = srem i32 %20, 512, !dbg !15
  %23 = sext i32 %20 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %21) #3, !dbg !17
  %26 = sext i32 %22 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %21) #3, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %21) #3, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %21) #3, !dbg !23
  %33 = bitcast i32 %32 to float, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %21) #3, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %21) #3, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %21) #3, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !30
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #3, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !32
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #3, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !34
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %21) #3, !dbg !35
  %46 = bitcast i32 %45 to float, !dbg !35
  %47 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !36
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %21) #3, !dbg !37
  %49 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !38
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %21) #3, !dbg !39
  %51 = fadd float %33, 0x3EE4F8B580000000, !dbg !40
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %52, 0, !dbg !41
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %53, 0, !dbg !41
  br i1 %.not.i, label %59, label %54, !dbg !41

54:                                               ; preds = %15
  br i1 %.not1.i, label %57, label %55, !dbg !41

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

59:                                               ; preds = %15
  br i1 %.not1.i, label %62, label %60, !dbg !41

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %55, %57, %60, %62
  %.0.i = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !41
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %65 = fadd float %46, 0x3EE4F8B580000000, !dbg !43
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %66, 0, !dbg !44
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %67, 0, !dbg !44
  br i1 %.not.i1, label %73, label %68, !dbg !44

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !44

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !44

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %69, %71, %74, %76
  %.0.i3 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !44
  %78 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !17
  %79 = insertelement <2 x i32> %78, i32 %39, i64 1, !dbg !17
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !17
  %81 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !19
  %82 = insertelement <2 x i32> %81, i32 %41, i64 1, !dbg !19
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !19
  %84 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %85 = insertelement <2 x i32> %84, i32 %43, i64 1, !dbg !21
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !21
  %87 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !25
  %88 = insertelement <2 x i32> %87, i32 %48, i64 1, !dbg !25
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !25
  %90 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !27
  %91 = insertelement <2 x i32> %90, i32 %50, i64 1, !dbg !27
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !27
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !45
  %94 = fadd <2 x float> %80, %83, !dbg !46
  %95 = fsub <2 x float> %94, %86, !dbg !47
  %96 = insertelement <2 x float> poison, float %64, i64 0, !dbg !48
  %97 = insertelement <2 x float> %96, float %93, i64 1, !dbg !48
  %98 = fmul <2 x float> %95, %97, !dbg !48
  %99 = fmul <2 x float> %98, %89, !dbg !49
  %100 = fadd <2 x float> %99, %92, !dbg !50
  %101 = fcmp olt <2 x float> %100, zeroinitializer, !dbg !51
  %102 = select <2 x i1> %101, <2 x float> zeroinitializer, <2 x float> %100, !dbg !55
  %103 = extractelement <2 x float> %102, i64 0, !dbg !56
  %104 = extractelement <2 x float> %102, i64 1, !dbg !57
  %105 = fadd float %103, %104, !dbg !57
  %bc = bitcast <2 x float> %94 to <2 x i32>, !dbg !58
  %106 = extractelement <2 x i32> %bc, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %24, i1 %21) #3, !dbg !58
  %107 = getelementptr float, ptr addrspace(1) %12, i64 %23, !dbg !59
  %108 = bitcast float %103 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %107, i1 %21) #3, !dbg !56
  %bc6 = bitcast <2 x float> %94 to <2 x i32>, !dbg !60
  %109 = extractelement <2 x i32> %bc6, i64 1, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %38, i1 %21) #3, !dbg !60
  %110 = getelementptr float, ptr addrspace(1) %13, i64 %23, !dbg !61
  %111 = bitcast float %105 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %110, i1 %21) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cigf6px4d6z4jixg52wwh2qbo4ayhvikoug2es47357yagf3t27i.py", directory: "inductor_cache/ig")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 40, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 26, scope: !7)
!42 = !DILocation(line: 44, column: 19, scope: !7)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 27, scope: !7)
!45 = !DILocation(line: 56, column: 19, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 39, column: 18, scope: !7)
!48 = !DILocation(line: 47, column: 19, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 51, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 64, column: 37, scope: !7)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 39, scope: !7)
!59 = !DILocation(line: 64, column: 25, scope: !7)
!60 = !DILocation(line: 65, column: 40, scope: !7)
!61 = !DILocation(line: 66, column: 25, scope: !7)
!62 = !DILocation(line: 66, column: 37, scope: !7)
!63 = !DILocation(line: 66, column: 4, scope: !7)
