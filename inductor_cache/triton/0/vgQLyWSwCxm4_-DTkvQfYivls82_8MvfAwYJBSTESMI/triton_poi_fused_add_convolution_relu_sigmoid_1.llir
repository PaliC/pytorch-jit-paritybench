; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_relu_sigmoid_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = or disjoint i32 %18, %13, !dbg !16
  %20 = or disjoint i32 %18, %10, !dbg !16
  %21 = or disjoint i32 %18, %11, !dbg !16
  %22 = icmp slt i32 %19, 256, !dbg !17
  %23 = icmp slt i32 %20, 256, !dbg !17
  %24 = icmp slt i32 %21, 256, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %25 = sdiv i32 %.frozen, 4096, !dbg !18
  %26 = mul i32 %25, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = shl i32 %14, 8, !dbg !20
  %28 = shl i32 %15, 8, !dbg !20
  %29 = add i32 %19, %27, !dbg !21
  %30 = add i32 %19, %28, !dbg !21
  %31 = sext i32 %29 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = sext i32 %30 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %22) #2, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = sext i32 %19 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !24
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %22) #2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = bitcast i32 %58 to float, !dbg !25
  %63 = bitcast i32 %59 to float, !dbg !25
  %64 = shl i32 %20, 12, !dbg !26
  %65 = shl i32 %21, 12, !dbg !26
  %66 = shl i32 %25, 20, !dbg !27
  %67 = add i32 %66, %.decomposed, !dbg !28
  %68 = add i32 %67, %64, !dbg !29
  %69 = add i32 %67, %65, !dbg !29
  %70 = sext i32 %68 to i64, !dbg !30
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !30
  %72 = sext i32 %69 to i64, !dbg !30
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !30
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %23) #2, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !31
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !31
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !31
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !31
  %79 = bitcast i32 %75 to float, !dbg !31
  %80 = bitcast i32 %76 to float, !dbg !31
  %81 = bitcast i32 %77 to float, !dbg !31
  %82 = bitcast i32 %78 to float, !dbg !31
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %24) #2, !dbg !31
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !31
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !31
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !31
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !31
  %88 = bitcast i32 %84 to float, !dbg !31
  %89 = bitcast i32 %85 to float, !dbg !31
  %90 = bitcast i32 %86 to float, !dbg !31
  %91 = bitcast i32 %87 to float, !dbg !31
  %92 = fadd float %40, %60, !dbg !32
  %93 = fadd float %41, %61, !dbg !32
  %94 = fadd float %42, %62, !dbg !32
  %95 = fadd float %43, %63, !dbg !32
  %96 = fadd float %49, %60, !dbg !32
  %97 = fadd float %50, %61, !dbg !32
  %98 = fadd float %51, %62, !dbg !32
  %99 = fadd float %52, %63, !dbg !32
  %100 = shl i32 %8, 7, !dbg !32
  %101 = and i32 %100, 896, !dbg !32
  %102 = or disjoint i32 %101, %10, !dbg !32
  %103 = and i32 %12, 508, !dbg !32
  %104 = lshr exact i32 %101, 1, !dbg !32
  %105 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %104, !dbg !32
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %102, !dbg !32
  %107 = bitcast float %92 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #2, !dbg !32
  %108 = or disjoint i32 %102, 32, !dbg !32
  %109 = lshr i32 %108, 5, !dbg !32
  %.idx = shl nuw nsw i32 %109, 4, !dbg !32
  %110 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !32
  %111 = getelementptr float, ptr addrspace(3) %110, i32 %108, !dbg !32
  %112 = bitcast float %93 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !32
  %113 = or disjoint i32 %102, 64, !dbg !32
  %114 = lshr i32 %113, 5, !dbg !32
  %.idx1 = shl nuw nsw i32 %114, 4, !dbg !32
  %115 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !32
  %116 = getelementptr float, ptr addrspace(3) %115, i32 %113, !dbg !32
  %117 = bitcast float %94 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !32
  %118 = or disjoint i32 %102, 96, !dbg !32
  %119 = lshr i32 %118, 5, !dbg !32
  %.idx2 = shl nuw nsw i32 %119, 4, !dbg !32
  %120 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !32
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %118, !dbg !32
  %122 = bitcast float %95 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !32
  %123 = or disjoint i32 %102, 16, !dbg !32
  %124 = getelementptr float, ptr addrspace(3) %105, i32 %123, !dbg !32
  %125 = bitcast float %96 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !32
  %126 = or disjoint i32 %102, 48, !dbg !32
  %127 = lshr i32 %126, 5, !dbg !32
  %.idx3 = shl nuw nsw i32 %127, 4, !dbg !32
  %128 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !32
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %126, !dbg !32
  %130 = bitcast float %97 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !32
  %131 = or disjoint i32 %102, 80, !dbg !32
  %132 = lshr i32 %131, 5, !dbg !32
  %.idx4 = shl nuw nsw i32 %132, 4, !dbg !32
  %133 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !32
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %131, !dbg !32
  %135 = bitcast float %98 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !32
  %136 = or disjoint i32 %102, 112, !dbg !32
  %137 = lshr i32 %136, 5, !dbg !32
  %.idx5 = shl nuw nsw i32 %137, 4, !dbg !32
  %138 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !32
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !32
  %140 = bitcast float %99 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %141 = lshr i32 %103, 5, !dbg !32
  %142 = and i32 %8, 127, !dbg !32
  %143 = add nuw nsw i32 %141, %142, !dbg !32
  %.idx6 = shl nuw nsw i32 %143, 4, !dbg !32
  %144 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !32
  %145 = or disjoint i32 %103, 512, !dbg !32
  %146 = lshr i32 %145, 5, !dbg !32
  %.idx10 = shl nuw nsw i32 %146, 4, !dbg !32
  %147 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !32
  %148 = getelementptr inbounds float, ptr addrspace(3) %147, i32 %145, !dbg !32
  %149 = fsub float 0.000000e+00, %79, !dbg !33
  %150 = fsub float 0.000000e+00, %80, !dbg !33
  %151 = fsub float 0.000000e+00, %81, !dbg !33
  %152 = fsub float 0.000000e+00, %82, !dbg !33
  %153 = fsub float 0.000000e+00, %88, !dbg !33
  %154 = fsub float 0.000000e+00, %89, !dbg !33
  %155 = fsub float 0.000000e+00, %90, !dbg !33
  %156 = fsub float 0.000000e+00, %91, !dbg !33
  %157 = fmul float %149, 0x3FF7154760000000, !dbg !37
  %158 = fmul float %150, 0x3FF7154760000000, !dbg !37
  %159 = fmul float %151, 0x3FF7154760000000, !dbg !37
  %160 = fmul float %152, 0x3FF7154760000000, !dbg !37
  %161 = fmul float %153, 0x3FF7154760000000, !dbg !37
  %162 = fmul float %154, 0x3FF7154760000000, !dbg !37
  %163 = fmul float %155, 0x3FF7154760000000, !dbg !37
  %164 = fmul float %156, 0x3FF7154760000000, !dbg !37
  %165 = load <4 x float>, ptr addrspace(3) %144, align 16, !dbg !32
  %166 = load <4 x float>, ptr addrspace(3) %148, align 16, !dbg !32
  %167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %157) #2, !dbg !37
  %168 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %158) #2, !dbg !37
  %169 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %159) #2, !dbg !37
  %170 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %160) #2, !dbg !37
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %161) #2, !dbg !37
  %172 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %162) #2, !dbg !37
  %173 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %163) #2, !dbg !37
  %174 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #2, !dbg !37
  %175 = fadd float %167, 1.000000e+00, !dbg !38
  %176 = fadd float %168, 1.000000e+00, !dbg !38
  %177 = fadd float %169, 1.000000e+00, !dbg !38
  %178 = fadd float %170, 1.000000e+00, !dbg !38
  %179 = fadd float %171, 1.000000e+00, !dbg !38
  %180 = fadd float %172, 1.000000e+00, !dbg !38
  %181 = fadd float %173, 1.000000e+00, !dbg !38
  %182 = fadd float %174, 1.000000e+00, !dbg !38
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %175) #2, !dbg !39
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %176) #2, !dbg !39
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %177) #2, !dbg !39
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %178) #2, !dbg !39
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %179) #2, !dbg !39
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %180) #2, !dbg !39
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %181) #2, !dbg !39
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %182) #2, !dbg !39
  %191 = insertelement <8 x float> poison, float %183, i64 0, !dbg !40
  %192 = insertelement <8 x float> %191, float %184, i64 1, !dbg !40
  %193 = insertelement <8 x float> %192, float %185, i64 2, !dbg !40
  %194 = insertelement <8 x float> %193, float %186, i64 3, !dbg !40
  %195 = insertelement <8 x float> %194, float %187, i64 4, !dbg !40
  %196 = insertelement <8 x float> %195, float %188, i64 5, !dbg !40
  %197 = insertelement <8 x float> %196, float %189, i64 6, !dbg !40
  %198 = insertelement <8 x float> %197, float %190, i64 7, !dbg !40
  %199 = fcmp olt <8 x float> %198, zeroinitializer, !dbg !40
  %200 = select <8 x i1> %199, <8 x float> zeroinitializer, <8 x float> %198, !dbg !44
  %201 = shufflevector <4 x float> %165, <4 x float> %166, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !45
  %202 = fadd <8 x float> %201, %200, !dbg !45
  %203 = fcmp olt <8 x float> %202, zeroinitializer, !dbg !46
  %204 = extractelement <8 x i1> %203, i64 0, !dbg !48
  %205 = extractelement <8 x float> %202, i64 0, !dbg !48
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !48
  %207 = extractelement <8 x i1> %203, i64 1, !dbg !48
  %208 = extractelement <8 x float> %202, i64 1, !dbg !48
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !48
  %210 = extractelement <8 x i1> %203, i64 2, !dbg !48
  %211 = extractelement <8 x float> %202, i64 2, !dbg !48
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !48
  %213 = extractelement <8 x i1> %203, i64 3, !dbg !48
  %214 = extractelement <8 x float> %202, i64 3, !dbg !48
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !48
  %216 = extractelement <8 x i1> %203, i64 4, !dbg !48
  %217 = extractelement <8 x float> %202, i64 4, !dbg !48
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !48
  %219 = extractelement <8 x i1> %203, i64 5, !dbg !48
  %220 = extractelement <8 x float> %202, i64 5, !dbg !48
  %221 = select i1 %219, float 0.000000e+00, float %220, !dbg !48
  %222 = extractelement <8 x i1> %203, i64 6, !dbg !48
  %223 = extractelement <8 x float> %202, i64 6, !dbg !48
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !48
  %225 = extractelement <8 x i1> %203, i64 7, !dbg !48
  %226 = extractelement <8 x float> %202, i64 7, !dbg !48
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %228 = lshr exact i32 %101, 3, !dbg !50
  %229 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %228, !dbg !50
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %102, !dbg !50
  %231 = bitcast float %206 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !50
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !50
  %233 = getelementptr float, ptr addrspace(3) %232, i32 %108, !dbg !50
  %234 = bitcast float %209 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !50
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !50
  %236 = getelementptr float, ptr addrspace(3) %235, i32 %113, !dbg !50
  %237 = bitcast float %212 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #2, !dbg !50
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !50
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %118, !dbg !50
  %240 = bitcast float %215 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #2, !dbg !50
  %241 = getelementptr float, ptr addrspace(3) %229, i32 %123, !dbg !50
  %242 = bitcast float %218 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #2, !dbg !50
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !50
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %126, !dbg !50
  %245 = bitcast float %221 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !50
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !50
  %247 = getelementptr float, ptr addrspace(3) %246, i32 %131, !dbg !50
  %248 = bitcast float %224 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #2, !dbg !50
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !50
  %250 = getelementptr float, ptr addrspace(3) %249, i32 %136, !dbg !50
  %251 = bitcast float %227 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %141, !dbg !50
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %103, !dbg !50
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !50
  %255 = or disjoint i32 %103, 1, !dbg !50
  %256 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %255, !dbg !50
  %257 = load i32, ptr addrspace(3) %256, align 4, !dbg !50
  %258 = or disjoint i32 %103, 2, !dbg !50
  %259 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %258, !dbg !50
  %260 = load i32, ptr addrspace(3) %259, align 4, !dbg !50
  %261 = or disjoint i32 %103, 3, !dbg !50
  %262 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %261, !dbg !50
  %263 = load i32, ptr addrspace(3) %262, align 4, !dbg !50
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %146, !dbg !50
  %265 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %145, !dbg !50
  %266 = load i32, ptr addrspace(3) %265, align 4, !dbg !50
  %267 = or disjoint i32 %103, 513, !dbg !50
  %268 = lshr i32 %267, 5, !dbg !50
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !50
  %270 = getelementptr inbounds float, ptr addrspace(3) %269, i32 %267, !dbg !50
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !50
  %272 = or disjoint i32 %103, 514, !dbg !50
  %273 = lshr i32 %272, 5, !dbg !50
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %273, !dbg !50
  %275 = getelementptr inbounds float, ptr addrspace(3) %274, i32 %272, !dbg !50
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !50
  %277 = or disjoint i32 %103, 515, !dbg !50
  %278 = lshr i32 %277, 5, !dbg !50
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !50
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %277, !dbg !50
  %281 = load i32, ptr addrspace(3) %280, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %254, i32 %257, i32 %260, i32 %263, ptr addrspace(1) %32, i1 %22) #2, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %266, i32 %271, i32 %276, i32 %281, ptr addrspace(1) %34, i1 %22) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crzkju7pxyalzapwjamrwxfxoddye4j5mhcsmqoji2u3nzuyt5t2.py", directory: "inductor_cache/rz")
!4 = !{ptr @triton_poi_fused_add_convolution_relu_sigmoid_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_relu_sigmoid_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_relu_sigmoid_1", linkageName: "triton_poi_fused_add_convolution_relu_sigmoid_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 34, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 40, scope: !7)
!27 = !DILocation(line: 34, column: 53, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 45, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 58, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 47, column: 30, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = !DILocation(line: 36, column: 22, scope: !7)
!37 = !DILocation(line: 47, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 47, column: 20, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 47, column: 16, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 38, column: 40, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !47)
!47 = !DILocation(line: 40, column: 40, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !47)
!49 = !DILocation(line: 41, column: 4, scope: !7)
!50 = !DILocation(line: 42, column: 48, scope: !7)
!51 = !DILocation(line: 42, column: 4, scope: !7)
