; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 4, !dbg !14
  %19 = srem i32 %18, 4, !dbg !15
  %20 = mul i32 %18, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = sdiv i32 %17, 16, !dbg !17
  %22 = srem i32 %21, 256, !dbg !18
  %23 = sext i32 %19 to i64, !dbg !19
  %24 = getelementptr i64, ptr addrspace(1) %1, i64 %23, !dbg !19
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !20
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !20
  %27 = sext i32 %.decomposed to i64, !dbg !21
  %28 = getelementptr i64, ptr addrspace(1) %2, i64 %27, !dbg !21
  %29 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !22
  %30 = extractvalue { i64, i64 } %29, 0, !dbg !22
  %31 = extractvalue { i64, i64 } %29, 1, !dbg !22
  %32 = getelementptr i64, ptr addrspace(1) %4, i64 %27, !dbg !23
  %33 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !24
  %34 = extractvalue { i64, i64 } %33, 0, !dbg !24
  %35 = extractvalue { i64, i64 } %33, 1, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !25
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !26
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !26
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !26
  %40 = getelementptr i64, ptr addrspace(1) %6, i64 %23, !dbg !27
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !28
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !30
  %45 = bitcast i32 %44 to float, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = sext i32 %17 to i64, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %8, i64 %48, !dbg !31
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !32
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !32
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !32
  %53 = bitcast i32 %51 to float, !dbg !32
  %54 = bitcast i32 %52 to float, !dbg !32
  %55 = sext i32 %22 to i64, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %9, i64 %55, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !34
  %60 = bitcast i32 %59 to float, !dbg !34
  %61 = lshr i64 %25, 62, !dbg !35
  %62 = and i64 %61, 2, !dbg !35
  %63 = add i64 %62, %25, !dbg !35
  %64 = lshr i64 %30, 62, !dbg !36
  %65 = and i64 %64, 2, !dbg !36
  %66 = lshr i64 %31, 62, !dbg !36
  %67 = and i64 %66, 2, !dbg !36
  %68 = shl i64 %63, 1, !dbg !37
  %69 = shl nsw i32 %21, 2, !dbg !38
  %70 = sext i32 %69 to i64, !dbg !39
  %71 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !40
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %65, !dbg !40
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %68, !dbg !40
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %70, !dbg !40
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !40
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %67, !dbg !40
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %68, !dbg !40
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %70, !dbg !40
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !41
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !41
  %81 = lshr i64 %34, 62, !dbg !42
  %82 = and i64 %81, 2, !dbg !42
  %83 = lshr i64 %35, 62, !dbg !42
  %84 = and i64 %83, 2, !dbg !42
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !43
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %82, !dbg !43
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %68, !dbg !43
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %70, !dbg !43
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !43
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %84, !dbg !43
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %68, !dbg !43
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %70, !dbg !43
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !44
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !44
  %95 = lshr i64 %41, 62, !dbg !45
  %96 = and i64 %95, 2, !dbg !45
  %97 = add i64 %96, %41, !dbg !45
  %98 = shl i64 %97, 1, !dbg !46
  %99 = getelementptr float, ptr addrspace(1) %72, i64 %98, !dbg !47
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %70, !dbg !47
  %101 = getelementptr float, ptr addrspace(1) %76, i64 %98, !dbg !47
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %70, !dbg !47
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #1, !dbg !48
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !48
  %105 = getelementptr float, ptr addrspace(1) %86, i64 %98, !dbg !49
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %70, !dbg !49
  %107 = getelementptr float, ptr addrspace(1) %90, i64 %98, !dbg !49
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %70, !dbg !49
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !50
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !50
  %111 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !48
  %112 = insertelement <2 x i32> %111, i32 %79, i64 1, !dbg !48
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !48
  %114 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !50
  %115 = insertelement <2 x i32> %114, i32 %93, i64 1, !dbg !50
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !50
  %117 = fsub <2 x float> %116, %113, !dbg !51
  %118 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !52
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !52
  %120 = shufflevector <2 x float> %119, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %121 = fmul <2 x float> %117, %120, !dbg !52
  %122 = fadd <2 x float> %121, %113, !dbg !53
  %123 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !48
  %124 = insertelement <2 x i32> %123, i32 %80, i64 1, !dbg !48
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !48
  %126 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !50
  %127 = insertelement <2 x i32> %126, i32 %94, i64 1, !dbg !50
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !50
  %129 = fsub <2 x float> %128, %125, !dbg !51
  %130 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !52
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !52
  %132 = shufflevector <2 x float> %131, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %133 = fmul <2 x float> %129, %132, !dbg !52
  %134 = fadd <2 x float> %133, %125, !dbg !53
  %135 = extractelement <2 x float> %122, i64 0, !dbg !54
  %136 = extractelement <2 x float> %122, i64 1, !dbg !55
  %137 = fsub float %135, %136, !dbg !54
  %138 = extractelement <2 x float> %134, i64 0, !dbg !54
  %139 = extractelement <2 x float> %134, i64 1, !dbg !55
  %140 = fsub float %138, %139, !dbg !54
  %141 = fmul float %137, %45, !dbg !56
  %142 = fmul float %140, %47, !dbg !56
  %143 = fadd float %136, %141, !dbg !55
  %144 = fadd float %139, %142, !dbg !55
  %145 = fadd float %53, %58, !dbg !57
  %146 = fadd float %54, %60, !dbg !57
  %147 = fadd float %145, %143, !dbg !58
  %148 = fadd float %146, %144, !dbg !58
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !59
  %150 = bitcast float %147 to i32, !dbg !60
  %151 = bitcast float %148 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %150, i32 %151, ptr addrspace(1) %149, i1 true) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdxhsoqwoxx3tb23ytzkevoxwsdth3csgtcgfx226eesrlph7tqo.py", directory: "inductor_cache/dx")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_21", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 32, scope: !7)
!36 = !DILocation(line: 43, column: 32, scope: !7)
!37 = !DILocation(line: 44, column: 39, scope: !7)
!38 = !DILocation(line: 44, column: 48, scope: !7)
!39 = !DILocation(line: 44, column: 46, scope: !7)
!40 = !DILocation(line: 44, column: 30, scope: !7)
!41 = !DILocation(line: 44, column: 53, scope: !7)
!42 = !DILocation(line: 47, column: 35, scope: !7)
!43 = !DILocation(line: 48, column: 31, scope: !7)
!44 = !DILocation(line: 48, column: 55, scope: !7)
!45 = !DILocation(line: 54, column: 35, scope: !7)
!46 = !DILocation(line: 55, column: 40, scope: !7)
!47 = !DILocation(line: 55, column: 31, scope: !7)
!48 = !DILocation(line: 55, column: 55, scope: !7)
!49 = !DILocation(line: 56, column: 31, scope: !7)
!50 = !DILocation(line: 56, column: 56, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 28, scope: !7)
!60 = !DILocation(line: 65, column: 40, scope: !7)
!61 = !DILocation(line: 65, column: 4, scope: !7)
