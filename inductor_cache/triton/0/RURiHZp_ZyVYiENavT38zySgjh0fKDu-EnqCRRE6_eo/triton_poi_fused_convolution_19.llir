; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_19(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %9, 16, !dbg !12
  %11 = shl i32 %7, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %12, !dbg !17
  %22 = or disjoint i32 %20, %9, !dbg !17
  %23 = or disjoint i32 %20, %10, !dbg !17
  %24 = icmp slt i32 %21, 64, !dbg !18
  %25 = icmp slt i32 %22, 64, !dbg !18
  %26 = icmp slt i32 %23, 64, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %27 = sdiv i32 %.frozen, 64, !dbg !19
  %28 = mul i32 %27, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %.frozen15 = freeze i32 %14, !dbg !19
  %29 = sdiv i32 %.frozen15, 64, !dbg !19
  %30 = mul i32 %29, 64, !dbg !20
  %.decomposed16 = sub i32 %.frozen15, %30, !dbg !20
  %.frozen17 = freeze i32 %15, !dbg !19
  %31 = sdiv i32 %.frozen17, 64, !dbg !19
  %32 = mul i32 %31, 64, !dbg !20
  %.decomposed18 = sub i32 %.frozen17, %32, !dbg !20
  %33 = add i32 %21, 4096, !dbg !21
  %34 = shl nsw i32 %.decomposed, 6, !dbg !22
  %35 = shl nsw i32 %.decomposed16, 6, !dbg !22
  %36 = add i32 %33, %34, !dbg !23
  %37 = add i32 %33, %35, !dbg !23
  %38 = shl i32 %27, 13, !dbg !24
  %39 = shl i32 %29, 13, !dbg !24
  %40 = add i32 %36, %38, !dbg !25
  %41 = add i32 %37, %39, !dbg !25
  %42 = sext i32 %40 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = sext i32 %41 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = and i1 %16, %24, !dbg !27
  %47 = and i1 %17, %24, !dbg !27
  %48 = and i1 %18, %25, !dbg !27
  %49 = and i1 %18, %26, !dbg !27
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %46) #2, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %47) #2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = shl i32 %22, 6, !dbg !29
  %61 = shl i32 %23, 6, !dbg !29
  %62 = shl i32 %31, 12, !dbg !30
  %63 = add i32 %62, %.decomposed18, !dbg !31
  %64 = add i32 %63, %60, !dbg !32
  %65 = add i32 %63, %61, !dbg !32
  %66 = sext i32 %64 to i64, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !33
  %68 = sext i32 %65 to i64, !dbg !33
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !33
  %70 = shl i32 %7, 7, !dbg !34
  %71 = and i32 %70, 896, !dbg !34
  %72 = or disjoint i32 %71, %9, !dbg !34
  %73 = and i32 %11, 508, !dbg !34
  %74 = lshr exact i32 %71, 3, !dbg !34
  %75 = or disjoint i32 %74, %72, !dbg !34
  %76 = zext nneg i32 %75 to i64, !dbg !34
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %76, !dbg !34
  %78 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !34
  %79 = or disjoint i32 %72, 32, !dbg !34
  %80 = lshr i32 %79, 3, !dbg !34
  %81 = and i32 %80, 116, !dbg !34
  %82 = add nuw nsw i32 %81, %79, !dbg !34
  %83 = zext nneg i32 %82 to i64, !dbg !34
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %83, !dbg !34
  %85 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #2, !dbg !34
  %86 = or disjoint i32 %72, 64, !dbg !34
  %87 = lshr i32 %86, 3, !dbg !34
  %88 = and i32 %87, 120, !dbg !34
  %89 = add nuw nsw i32 %88, %86, !dbg !34
  %90 = zext nneg i32 %89 to i64, !dbg !34
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %90, !dbg !34
  %92 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !34
  %93 = or disjoint i32 %72, 96, !dbg !34
  %94 = lshr i32 %93, 3, !dbg !34
  %95 = and i32 %94, 124, !dbg !34
  %96 = add nuw nsw i32 %95, %93, !dbg !34
  %97 = zext nneg i32 %96 to i64, !dbg !34
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !34
  %99 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !34
  %100 = or disjoint i32 %72, 16, !dbg !34
  %101 = add nuw nsw i32 %100, %74, !dbg !34
  %102 = zext nneg i32 %101 to i64, !dbg !34
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %102, !dbg !34
  %104 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !34
  %105 = or disjoint i32 %72, 48, !dbg !34
  %106 = lshr i32 %105, 3, !dbg !34
  %107 = and i32 %106, 116, !dbg !34
  %108 = add nuw nsw i32 %107, %105, !dbg !34
  %109 = zext nneg i32 %108 to i64, !dbg !34
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !34
  %111 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !34
  %112 = or disjoint i32 %72, 80, !dbg !34
  %113 = lshr i32 %112, 3, !dbg !34
  %114 = and i32 %113, 120, !dbg !34
  %115 = add nuw nsw i32 %114, %112, !dbg !34
  %116 = zext nneg i32 %115 to i64, !dbg !34
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %116, !dbg !34
  %118 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !34
  %119 = or disjoint i32 %72, 112, !dbg !34
  %120 = lshr i32 %119, 3, !dbg !34
  %121 = and i32 %120, 124, !dbg !34
  %122 = add nuw nsw i32 %121, %119, !dbg !34
  %123 = zext nneg i32 %122 to i64, !dbg !34
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !34
  %125 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %126 = lshr i32 %11, 3, !dbg !34
  %127 = and i32 %126, 60, !dbg !34
  %128 = add nuw nsw i32 %127, %73, !dbg !34
  %129 = zext nneg i32 %128 to i64, !dbg !34
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !34
  %131 = or disjoint i32 %73, 512, !dbg !34
  %132 = lshr i32 %131, 3, !dbg !34
  %133 = and i32 %132, 124, !dbg !34
  %134 = add nuw nsw i32 %133, %131, !dbg !34
  %135 = zext nneg i32 %134 to i64, !dbg !34
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !34
  %137 = load <4 x i32>, ptr addrspace(3) %136, align 16, !dbg !34
  %.extract = load i32, ptr addrspace(3) %130, align 16, !dbg !34
  %138 = getelementptr inbounds i8, ptr addrspace(3) %130, i64 4, !dbg !34
  %.extract8 = load i32, ptr addrspace(3) %138, align 4, !dbg !34
  %139 = getelementptr inbounds i8, ptr addrspace(3) %130, i64 8, !dbg !34
  %.extract9 = load i32, ptr addrspace(3) %139, align 8, !dbg !34
  %140 = getelementptr inbounds i8, ptr addrspace(3) %130, i64 12, !dbg !34
  %.extract10 = load i32, ptr addrspace(3) %140, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %67, i1 %48) #2, !dbg !34
  %.extract11 = extractelement <4 x i32> %137, i64 0, !dbg !34
  %.extract12 = extractelement <4 x i32> %137, i64 1, !dbg !34
  %.extract13 = extractelement <4 x i32> %137, i64 2, !dbg !34
  %.extract14 = extractelement <4 x i32> %137, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %69, i1 %49) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5fwhgwqfsatvs636nhcm34tlrls24vculv6zsrkba53yd7cd4ej.py", directory: "inductor_cache/5f")
!4 = !{ptr @triton_poi_fused_convolution_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_19", linkageName: "triton_poi_fused_convolution_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 37, scope: !7)
!22 = !DILocation(line: 31, column: 45, scope: !7)
!23 = !DILocation(line: 31, column: 42, scope: !7)
!24 = !DILocation(line: 31, column: 55, scope: !7)
!25 = !DILocation(line: 31, column: 50, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 68, scope: !7)
!28 = !DILocation(line: 31, column: 60, scope: !7)
!29 = !DILocation(line: 32, column: 33, scope: !7)
!30 = !DILocation(line: 32, column: 43, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 38, scope: !7)
!33 = !DILocation(line: 32, column: 25, scope: !7)
!34 = !DILocation(line: 32, column: 54, scope: !7)
!35 = !DILocation(line: 32, column: 4, scope: !7)
