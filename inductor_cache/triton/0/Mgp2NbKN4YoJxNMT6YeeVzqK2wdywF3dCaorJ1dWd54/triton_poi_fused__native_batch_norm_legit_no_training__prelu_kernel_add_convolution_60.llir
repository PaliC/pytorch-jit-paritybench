; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_60(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 254, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = sdiv i32 %21, 1024, !dbg !14
  %23 = srem i32 %22, 8, !dbg !15
  %24 = sext i32 %21 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !18
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !20
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %31 = sext i32 %23 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !27
  %40 = bitcast i32 %39 to float, !dbg !27
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %10, i64 %31, !dbg !34
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !35
  %54 = bitcast i32 %53 to float, !dbg !35
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !35
  %56 = bitcast i32 %55 to float, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %11, i64 %31, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !37
  %60 = getelementptr float, ptr addrspace(1) %12, i64 %31, !dbg !38
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !39
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !39
  %63 = getelementptr float, ptr addrspace(1) %13, i64 %31, !dbg !40
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !41
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !41
  %66 = fadd float %40, 0x3EE4F8B580000000, !dbg !42
  %67 = fadd float %42, 0x3EE4F8B580000000, !dbg !42
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %68, 0, !dbg !43
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %69, 0, !dbg !43
  br i1 %.not.i, label %75, label %70, !dbg !43

70:                                               ; preds = %15
  br i1 %.not1.i, label %73, label %71, !dbg !43

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

75:                                               ; preds = %15
  br i1 %.not1.i, label %78, label %76, !dbg !43

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !43
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i1 = icmp eq i32 %80, 0, !dbg !43
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i4 = icmp eq i32 %81, 0, !dbg !43
  br i1 %.not.i1, label %87, label %82, !dbg !43

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !43

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !43

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

__nv_sqrtf.exit5:                                 ; preds = %83, %85, %88, %90
  %.0.i3 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !43
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !44
  %94 = fadd float %54, 0x3EE4F8B580000000, !dbg !45
  %95 = fadd float %56, 0x3EE4F8B580000000, !dbg !45
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i6 = icmp eq i32 %96, 0, !dbg !46
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i9 = icmp eq i32 %97, 0, !dbg !46
  br i1 %.not.i6, label %103, label %98, !dbg !46

98:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %101, label %99, !dbg !46

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

103:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %106, label %104, !dbg !46

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

__nv_sqrtf.exit10:                                ; preds = %99, %101, %104, %106
  %.0.i8 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !46
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i11 = icmp eq i32 %108, 0, !dbg !46
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i14 = icmp eq i32 %109, 0, !dbg !46
  br i1 %.not.i11, label %115, label %110, !dbg !46

110:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %113, label %111, !dbg !46

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

115:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %118, label %116, !dbg !46

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

__nv_sqrtf.exit15:                                ; preds = %111, %113, %116, %118
  %.0.i13 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !46
  %120 = extractvalue { i32, i32 } %30, 1, !dbg !21
  %121 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !25
  %122 = insertelement <2 x i32> %121, i32 %51, i64 1, !dbg !25
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !25
  %124 = extractvalue { i32, i32 } %30, 0, !dbg !21
  %125 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !25
  %126 = insertelement <2 x i32> %125, i32 %50, i64 1, !dbg !25
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !25
  %128 = extractvalue { i32, i32 } %26, 1, !dbg !17
  %129 = extractvalue { i32, i32 } %28, 1, !dbg !19
  %130 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !29
  %131 = insertelement <2 x i32> %130, i32 %59, i64 1, !dbg !29
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !29
  %133 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !31
  %134 = insertelement <2 x i32> %133, i32 %62, i64 1, !dbg !31
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !31
  %136 = extractvalue { i32, i32 } %26, 0, !dbg !17
  %137 = extractvalue { i32, i32 } %28, 0, !dbg !19
  %138 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !29
  %139 = insertelement <2 x i32> %138, i32 %58, i64 1, !dbg !29
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !29
  %141 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !31
  %142 = insertelement <2 x i32> %141, i32 %61, i64 1, !dbg !31
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !31
  %144 = bitcast i32 %65 to float, !dbg !41
  %145 = bitcast i32 %64 to float, !dbg !41
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !47
  %148 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !17
  %149 = insertelement <2 x i32> %148, i32 %124, i64 1, !dbg !17
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !17
  %151 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !19
  %152 = insertelement <2 x i32> %151, i32 %33, i64 1, !dbg !19
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !19
  %154 = fadd <2 x float> %150, %153, !dbg !48
  %155 = fsub <2 x float> %154, %127, !dbg !49
  %156 = insertelement <2 x float> poison, float %92, i64 0, !dbg !50
  %157 = insertelement <2 x float> %156, float %146, i64 1, !dbg !50
  %158 = fmul <2 x float> %155, %157, !dbg !50
  %159 = fmul <2 x float> %158, %140, !dbg !51
  %160 = fadd <2 x float> %159, %143, !dbg !52
  %161 = insertelement <2 x i32> poison, i32 %128, i64 0, !dbg !17
  %162 = insertelement <2 x i32> %161, i32 %120, i64 1, !dbg !17
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !17
  %164 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !19
  %165 = insertelement <2 x i32> %164, i32 %34, i64 1, !dbg !19
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !19
  %167 = fadd <2 x float> %163, %166, !dbg !48
  %168 = fsub <2 x float> %167, %123, !dbg !49
  %169 = insertelement <2 x float> poison, float %93, i64 0, !dbg !50
  %170 = insertelement <2 x float> %169, float %147, i64 1, !dbg !50
  %171 = fmul <2 x float> %168, %170, !dbg !50
  %172 = fmul <2 x float> %171, %132, !dbg !51
  %173 = fadd <2 x float> %172, %135, !dbg !52
  %shift = shufflevector <2 x float> %160, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %174 = fadd <2 x float> %160, %shift, !dbg !53
  %175 = extractelement <2 x float> %174, i64 0, !dbg !53
  %shift16 = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %176 = fadd <2 x float> %173, %shift16, !dbg !53
  %177 = extractelement <2 x float> %176, i64 0, !dbg !53
  %178 = fcmp ogt float %175, 0.000000e+00, !dbg !54
  %179 = fcmp ogt float %177, 0.000000e+00, !dbg !54
  %180 = fmul float %175, %145, !dbg !55
  %181 = fmul float %177, %144, !dbg !55
  %182 = select i1 %178, float %175, float %180, !dbg !56
  %183 = select i1 %179, float %177, float %181, !dbg !56
  %bc = bitcast <2 x float> %154 to <2 x i32>, !dbg !57
  %184 = extractelement <2 x i32> %bc, i64 0, !dbg !57
  %bc17 = bitcast <2 x float> %167 to <2 x i32>, !dbg !57
  %185 = extractelement <2 x i32> %bc17, i64 0, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %184, i32 %185, ptr addrspace(1) %25, i1 true) #3, !dbg !57
  %bc18 = bitcast <2 x float> %154 to <2 x i32>, !dbg !58
  %186 = extractelement <2 x i32> %bc18, i64 1, !dbg !58
  %bc19 = bitcast <2 x float> %167 to <2 x i32>, !dbg !58
  %187 = extractelement <2 x i32> %bc19, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %186, i32 %187, ptr addrspace(1) %29, i1 true) #3, !dbg !58
  %188 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !59
  %189 = bitcast float %182 to i32, !dbg !60
  %190 = bitcast float %183 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %189, i32 %190, ptr addrspace(1) %188, i1 true) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crnd6r6hwhhtdelu5dqbpvxlguyuwv4w7og3hql4xjpboccw46bp.py", directory: "inductor_cache/rn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_60, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_60, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_60", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_60", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 43, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 27, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 27, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 39, column: 18, scope: !7)
!49 = !DILocation(line: 41, column: 18, scope: !7)
!50 = !DILocation(line: 49, column: 19, scope: !7)
!51 = !DILocation(line: 50, column: 20, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 20, scope: !7)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 35, scope: !7)
!57 = !DILocation(line: 65, column: 39, scope: !7)
!58 = !DILocation(line: 66, column: 39, scope: !7)
!59 = !DILocation(line: 67, column: 28, scope: !7)
!60 = !DILocation(line: 67, column: 40, scope: !7)
!61 = !DILocation(line: 67, column: 4, scope: !7)
