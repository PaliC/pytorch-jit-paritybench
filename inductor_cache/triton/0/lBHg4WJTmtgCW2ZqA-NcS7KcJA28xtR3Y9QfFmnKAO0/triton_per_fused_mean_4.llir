; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %9, 1, !dbg !12
  %12 = and i32 %11, 6, !dbg !12
  %13 = or disjoint i32 %12, 1, !dbg !12
  %14 = lshr i32 %9, 5, !dbg !12
  %.lobit5 = lshr i32 %9, 3, !dbg !12
  %15 = and i32 %.lobit5, 3, !dbg !12
  %16 = and i32 %9, 32, !dbg !12
  %17 = lshr exact i32 %16, 3, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !12
  %19 = and i32 %9, 7, !dbg !12
  %20 = or disjoint i32 %8, %12, !dbg !13
  %21 = or disjoint i32 %8, %13, !dbg !13
  %22 = or disjoint i32 %18, %8, !dbg !13
  %23 = or disjoint i32 %8, %19, !dbg !13
  %24 = icmp slt i32 %20, 16, !dbg !14
  %25 = icmp slt i32 %22, 16, !dbg !14
  %26 = icmp slt i32 %23, 16, !dbg !14
  %27 = lshr i32 %9, 2, !dbg !15
  %.lobit2 = and i32 %27, 1, !dbg !15
  %28 = lshr i32 %9, 2, !dbg !15
  %29 = and i32 %28, 2, !dbg !15
  %30 = or disjoint i32 %.lobit2, %29, !dbg !15
  %31 = lshr i32 %9, 2, !dbg !15
  %32 = and i32 %31, 4, !dbg !15
  %33 = lshr exact i32 %16, 2, !dbg !15
  %34 = or disjoint i32 %33, %32, !dbg !15
  %35 = or disjoint i32 %34, %30, !dbg !15
  %.frozen = freeze i32 %22, !dbg !16
  %36 = sdiv i32 %.frozen, 4, !dbg !16
  %37 = mul i32 %36, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %37, !dbg !17
  %.frozen6 = freeze i32 %20, !dbg !16
  %38 = sdiv i32 %.frozen6, 4, !dbg !16
  %39 = mul i32 %38, 4, !dbg !17
  %.decomposed7 = sub i32 %.frozen6, %39, !dbg !17
  %40 = and i32 %11, 2, !dbg !18
  %41 = shl nuw nsw i32 %30, 2, !dbg !19
  %42 = shl i32 %20, 4, !dbg !20
  %43 = shl i32 %21, 4, !dbg !20
  %44 = or disjoint i32 %42, %41, !dbg !21
  %45 = or disjoint i32 %43, %41, !dbg !21
  %46 = lshr exact i32 %34, 2, !dbg !22
  %47 = or disjoint i32 %44, %46, !dbg !23
  %48 = or disjoint i32 %45, %46, !dbg !23
  %49 = sext i32 %47 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !24
  %51 = sext i32 %48 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %24, i32 0, i1 %24) #3, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %24, i32 0, i1 %24) #3, !dbg !25
  %55 = shl i32 %9, 5, !dbg !25
  %56 = and i32 %55, 96, !dbg !25
  %57 = or disjoint i32 %30, %56, !dbg !25
  %58 = or disjoint i32 %57, %32, !dbg !25
  %59 = or disjoint i32 %58, %33, !dbg !25
  %60 = and i32 %11, 126, !dbg !25
  %61 = lshr exact i32 %56, 1, !dbg !25
  %62 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %61, !dbg !25
  %63 = getelementptr inbounds float, ptr addrspace(3) %62, i32 %59, !dbg !25
  %64 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #3, !dbg !25
  %65 = or disjoint i32 %59, 16, !dbg !25
  %66 = lshr i32 %65, 3, !dbg !25
  %67 = and i32 %66, 536870910, !dbg !25
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %67, !dbg !25
  %69 = getelementptr inbounds float, ptr addrspace(3) %68, i32 %65, !dbg !25
  %70 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %71 = and i32 %9, 56, !dbg !25
  %72 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %71, !dbg !25
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %60, !dbg !25
  %74 = load float, ptr addrspace(3) %73, align 8, !dbg !25
  %75 = getelementptr inbounds i8, ptr addrspace(3) %73, i32 4, !dbg !25
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !25
  %77 = and i32 %11, 12, !dbg !26
  %78 = add nsw i32 %.decomposed, %77, !dbg !26
  %79 = shl nsw i32 %78, 2, !dbg !26
  %80 = shl i32 %36, 6, !dbg !27
  %81 = shl i32 %38, 6, !dbg !27
  %82 = add i32 %79, %80, !dbg !28
  %83 = or disjoint i32 %82, %40, !dbg !29
  %84 = sext i32 %83 to i64, !dbg !30
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !30
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %85, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !31
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !31
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !31
  %89 = bitcast i32 %87 to float, !dbg !31
  %90 = bitcast i32 %88 to float, !dbg !31
  %91 = shl nuw nsw i32 %35, 2, !dbg !32
  %92 = add nsw i32 %.decomposed7, %91, !dbg !33
  %93 = add i32 %92, %81, !dbg !34
  %94 = sext i32 %93 to i64, !dbg !35
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !35
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %95, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #3, !dbg !36
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !36
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !36
  %99 = bitcast i32 %97 to float, !dbg !36
  %100 = bitcast i32 %98 to float, !dbg !36
  %101 = fadd float %74, %89, !dbg !37
  %102 = fadd float %76, %90, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %103 = shl i32 %9, 4, !dbg !37
  %104 = and i32 %103, 112, !dbg !37
  %105 = or disjoint i32 %15, %104, !dbg !37
  %106 = or disjoint i32 %105, %17, !dbg !37
  %107 = lshr exact i32 %104, 1, !dbg !37
  %108 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %107, !dbg !37
  %109 = getelementptr inbounds float, ptr addrspace(3) %108, i32 %106, !dbg !37
  %110 = bitcast float %101 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #3, !dbg !37
  %111 = or disjoint i32 %106, 8, !dbg !37
  %112 = lshr i32 %111, 3, !dbg !37
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !37
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !37
  %115 = bitcast float %102 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %116 = lshr i32 %60, 3, !dbg !37
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !37
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %60, !dbg !37
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !37
  %120 = or disjoint i32 %60, 1, !dbg !37
  %121 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %120, !dbg !37
  %122 = load float, ptr addrspace(3) %121, align 4, !dbg !37
  %123 = fadd float %119, %99, !dbg !38
  %124 = fadd float %122, %100, !dbg !38
  %125 = select i1 %24, float %123, float 0.000000e+00, !dbg !39
  %126 = select i1 %24, float %124, float 0.000000e+00, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %127 = bitcast float %125 to i32, !dbg !40
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !40
  %129 = bitcast i32 %128 to float, !dbg !40
  %130 = fadd float %125, %129, !dbg !44
  %131 = bitcast float %130 to i32, !dbg !40
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !40
  %133 = bitcast i32 %132 to float, !dbg !40
  %134 = fadd float %130, %133, !dbg !44
  %135 = bitcast float %134 to i32, !dbg !40
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !40
  %137 = bitcast i32 %136 to float, !dbg !40
  %138 = fadd float %134, %137, !dbg !44
  %139 = bitcast float %126 to i32, !dbg !40
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 16, i32 31), !dbg !40
  %141 = bitcast i32 %140 to float, !dbg !40
  %142 = fadd float %126, %141, !dbg !44
  %143 = bitcast float %142 to i32, !dbg !40
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !40
  %145 = bitcast i32 %144 to float, !dbg !40
  %146 = fadd float %142, %145, !dbg !44
  %147 = bitcast float %146 to i32, !dbg !40
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !40
  %149 = bitcast i32 %148 to float, !dbg !40
  %150 = fadd float %146, %149, !dbg !44
  %151 = icmp samesign ult i32 %10, 4, !dbg !40
  %152 = and i32 %14, 1, !dbg !40
  %153 = shl nuw nsw i32 %12, 1, !dbg !40
  %154 = or disjoint i32 %153, %152, !dbg !40
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !40
  %156 = bitcast float %138 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 %151) #3, !dbg !40
  %157 = shl nuw nsw i32 %13, 1, !dbg !40
  %158 = or disjoint i32 %157, %152, !dbg !40
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !40
  %160 = bitcast float %150 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 %151) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %161 = icmp slt i32 %9, 16, !dbg !40
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !40
  %163 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %162, i1 %161) #3, !dbg !40
  %164 = bitcast i32 %163 to float, !dbg !40
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !40
  %166 = bitcast i32 %165 to float, !dbg !40
  %167 = fadd float %164, %166, !dbg !44
  %168 = and i32 %9, 1, !dbg !40
  %169 = icmp eq i32 %168, 0, !dbg !40
  %170 = and i1 %161, %169, !dbg !40
  %171 = bitcast float %167 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %171, i1 %170) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !40
  %173 = load i32, ptr addrspace(3) %172, align 16, !dbg !40
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !40
  %175 = load i32, ptr addrspace(3) %174, align 8, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !46
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %176, i32 %173, i32 %175, i1 true) #3, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !46
  %178 = load float, ptr addrspace(3) %177, align 4, !dbg !46
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float 1.600000e+01) #3, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %180 = sext i32 %23 to i64, !dbg !48
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !48
  %182 = lshr i32 %10, 3, !dbg !49
  %183 = shl nuw nsw i32 %152, 2, !dbg !49
  %184 = or disjoint i32 %183, %182, !dbg !49
  %185 = icmp eq i32 %184, 0, !dbg !49
  %186 = bitcast float %179 to i32, !dbg !49
  %187 = and i1 %185, %26, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %186, ptr addrspace(1) %181, i1 %187) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwuzqyplk47mbgm3mcu4pzax7ph6hkn5kezzcp5mmzuw4q3lutsc.py", directory: "inductor_cache/wu")
!4 = !{ptr @triton_per_fused_mean_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_4", linkageName: "triton_per_fused_mean_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 60, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 65, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 55, scope: !7)
!28 = !DILocation(line: 34, column: 52, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 73, scope: !7)
!32 = !DILocation(line: 35, column: 37, scope: !7)
!33 = !DILocation(line: 35, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 42, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 50, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 33, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = !DILocation(line: 40, column: 24, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !43)
!45 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!46 = !DILocation(line: 42, column: 19, scope: !7)
!47 = !DILocation(line: 43, column: 4, scope: !7)
!48 = !DILocation(line: 44, column: 28, scope: !7)
!49 = !DILocation(line: 44, column: 40, scope: !7)
!50 = !DILocation(line: 44, column: 4, scope: !7)
