; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %8, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = lshr i32 %8, 5, !dbg !14
  %13 = lshr i32 %8, 3, !dbg !14
  %14 = and i32 %13, 31, !dbg !14
  %15 = or disjoint i32 %14, 32, !dbg !14
  %16 = or disjoint i32 %14, 96, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %17 = sdiv i32 %.frozen, 64, !dbg !15
  %18 = mul i32 %17, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = shl nuw nsw i32 %14, 6, !dbg !17
  %20 = shl nuw nsw i32 %15, 6, !dbg !17
  %21 = shl nuw nsw i32 %16, 6, !dbg !17
  %22 = and i32 %21, 4032, !dbg !17
  %23 = shl i32 %17, 7, !dbg !18
  %24 = or disjoint i32 %23, %14, !dbg !19
  %25 = or disjoint i32 %23, %15, !dbg !19
  %26 = or disjoint i32 %24, 64, !dbg !19
  %27 = or disjoint i32 %23, %16, !dbg !19
  %28 = sdiv i32 %24, 64, !dbg !20
  %29 = sdiv i32 %25, 64, !dbg !20
  %30 = sdiv i32 %26, 64, !dbg !20
  %31 = sdiv i32 %27, 64, !dbg !20
  %32 = srem i32 %28, 64, !dbg !21
  %33 = srem i32 %29, 64, !dbg !21
  %34 = srem i32 %30, 64, !dbg !21
  %35 = srem i32 %31, 64, !dbg !21
  %36 = shl nsw i32 %32, 12, !dbg !22
  %37 = shl nsw i32 %33, 12, !dbg !22
  %38 = shl nsw i32 %34, 12, !dbg !22
  %39 = shl nsw i32 %35, 12, !dbg !22
  %40 = shl nsw i32 %.decomposed, 13, !dbg !23
  %41 = add i32 %24, %40, !dbg !24
  %42 = add i32 %25, %40, !dbg !24
  %43 = add i32 %26, %40, !dbg !24
  %44 = add i32 %27, %40, !dbg !24
  %45 = sdiv i32 %41, 262144, !dbg !25
  %46 = sdiv i32 %42, 262144, !dbg !25
  %47 = sdiv i32 %43, 262144, !dbg !25
  %48 = sdiv i32 %44, 262144, !dbg !25
  %49 = shl nsw i32 %45, 18, !dbg !26
  %50 = shl nsw i32 %46, 18, !dbg !26
  %51 = shl nsw i32 %47, 18, !dbg !26
  %52 = shl nsw i32 %48, 18, !dbg !26
  %53 = sdiv i32 %41, 4096, !dbg !27
  %54 = sdiv i32 %42, 4096, !dbg !27
  %55 = sdiv i32 %43, 4096, !dbg !27
  %56 = sdiv i32 %44, 4096, !dbg !27
  %57 = srem i32 %53, 64, !dbg !28
  %58 = srem i32 %54, 64, !dbg !28
  %59 = srem i32 %55, 64, !dbg !28
  %60 = srem i32 %56, 64, !dbg !28
  %61 = add i32 %57, %49, !dbg !29
  %62 = add i32 %61, %19, !dbg !30
  %63 = add i32 %62, %36, !dbg !31
  %64 = add i32 %58, %50, !dbg !29
  %65 = add i32 %64, %20, !dbg !30
  %66 = add i32 %65, %37, !dbg !31
  %67 = add i32 %59, %51, !dbg !29
  %68 = add i32 %67, %19, !dbg !30
  %69 = add i32 %68, %38, !dbg !31
  %70 = add i32 %60, %52, !dbg !29
  %71 = add i32 %70, %22, !dbg !30
  %72 = add i32 %71, %39, !dbg !31
  %73 = sext i32 %63 to i64, !dbg !32
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !32
  %75 = sext i32 %66 to i64, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !32
  %77 = sext i32 %69 to i64, !dbg !32
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !32
  %79 = sext i32 %72 to i64, !dbg !32
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !32
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !33
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !33
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !33
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !33
  %85 = sext i32 %57 to i64, !dbg !34
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !34
  %87 = sext i32 %58 to i64, !dbg !34
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !34
  %89 = sext i32 %59 to i64, !dbg !34
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !34
  %91 = sext i32 %60 to i64, !dbg !34
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !34
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !35
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !35
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !35
  %97 = or disjoint i32 %19, 524288, !dbg !36
  %98 = add i32 %61, %97, !dbg !37
  %99 = add i32 %98, %36, !dbg !38
  %100 = add i32 %64, 524288, !dbg !39
  %101 = add i32 %100, %20, !dbg !37
  %102 = add i32 %101, %37, !dbg !38
  %103 = add i32 %67, %97, !dbg !37
  %104 = add i32 %103, %38, !dbg !38
  %105 = add i32 %70, 524288, !dbg !39
  %106 = add i32 %105, %22, !dbg !37
  %107 = add i32 %106, %39, !dbg !38
  %108 = sext i32 %99 to i64, !dbg !40
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !40
  %110 = sext i32 %102 to i64, !dbg !40
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !40
  %112 = sext i32 %104 to i64, !dbg !40
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !40
  %114 = sext i32 %107 to i64, !dbg !40
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !40
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #3, !dbg !41
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !41
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !41
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #3, !dbg !41
  %120 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !33
  %121 = insertelement <2 x i32> %120, i32 %82, i64 1, !dbg !33
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !33
  %123 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !35
  %124 = insertelement <2 x i32> %123, i32 %94, i64 1, !dbg !35
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !35
  %126 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !41
  %127 = insertelement <2 x i32> %126, i32 %117, i64 1, !dbg !41
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !41
  %129 = fadd <2 x float> %122, %125, !dbg !42
  %130 = fadd <2 x float> %125, %128, !dbg !43
  %131 = fsub <2 x float> %129, %130, !dbg !44
  %132 = fmul <2 x float> %131, %131, !dbg !45
  %133 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !33
  %134 = insertelement <2 x i32> %133, i32 %84, i64 1, !dbg !33
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !33
  %136 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !35
  %137 = insertelement <2 x i32> %136, i32 %96, i64 1, !dbg !35
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !35
  %139 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !41
  %140 = insertelement <2 x i32> %139, i32 %119, i64 1, !dbg !41
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !41
  %142 = fadd <2 x float> %135, %138, !dbg !42
  %143 = fadd <2 x float> %138, %141, !dbg !43
  %144 = fsub <2 x float> %142, %143, !dbg !44
  %145 = fmul <2 x float> %144, %144, !dbg !45
  %shift = shufflevector <2 x float> %132, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %146 = fadd <2 x float> %132, %shift, !dbg !46
  %147 = fadd <2 x float> %146, %145, !dbg !46
  %shift1 = shufflevector <2 x float> %145, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %148 = fadd <2 x float> %147, %shift1, !dbg !46
  %149 = extractelement <2 x float> %148, i64 0, !dbg !46
  %150 = bitcast float %149 to i32, !dbg !51
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 16, i32 31), !dbg !51
  %152 = bitcast i32 %151 to float, !dbg !51
  %153 = fadd float %149, %152, !dbg !46
  %154 = bitcast float %153 to i32, !dbg !51
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 8, i32 31), !dbg !51
  %156 = bitcast i32 %155 to float, !dbg !51
  %157 = fadd float %153, %156, !dbg !46
  %158 = lshr i32 %9, 3, !dbg !51
  %159 = icmp samesign ult i32 %9, 8, !dbg !51
  %160 = and i32 %12, 7, !dbg !51
  %161 = shl nuw nsw i32 %10, 3, !dbg !51
  %162 = or disjoint i32 %161, %160, !dbg !51
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !51
  %164 = bitcast float %157 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 %159) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %165 = icmp slt i32 %8, 64, !dbg !51
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !51
  %167 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %166, i1 %165) #3, !dbg !51
  %168 = bitcast i32 %167 to float, !dbg !51
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !51
  %170 = bitcast i32 %169 to float, !dbg !51
  %171 = fadd float %168, %170, !dbg !46
  %172 = bitcast float %171 to i32, !dbg !51
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 2, i32 31), !dbg !51
  %174 = bitcast i32 %173 to float, !dbg !51
  %175 = fadd float %171, %174, !dbg !46
  %176 = bitcast float %175 to i32, !dbg !51
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !51
  %178 = bitcast i32 %177 to float, !dbg !51
  %179 = fadd float %175, %178, !dbg !46
  %180 = icmp eq i32 %10, 0, !dbg !51
  %181 = and i1 %165, %180, !dbg !51
  %182 = bitcast float %179 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %182, i1 %181) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !51
  %184 = load i32, ptr addrspace(3) %183, align 16, !dbg !51
  %185 = sext i32 %11 to i64, !dbg !52
  %186 = getelementptr float, ptr addrspace(1) %2, i64 %185, !dbg !52
  %187 = shl nuw nsw i32 %160, 2, !dbg !53
  %188 = or disjoint i32 %187, %158, !dbg !53
  %189 = icmp eq i32 %188, 0, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %186, i1 %189) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py", directory: "inductor_cache/xx")
!4 = !{ptr @triton_per_fused_mean_pow_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_7", linkageName: "triton_per_fused_mean_pow_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 65, scope: !7)
!19 = !DILocation(line: 33, column: 61, scope: !7)
!20 = !DILocation(line: 33, column: 72, scope: !7)
!21 = !DILocation(line: 33, column: 78, scope: !7)
!22 = !DILocation(line: 33, column: 54, scope: !7)
!23 = !DILocation(line: 33, column: 113, scope: !7)
!24 = !DILocation(line: 33, column: 108, scope: !7)
!25 = !DILocation(line: 33, column: 120, scope: !7)
!26 = !DILocation(line: 33, column: 93, scope: !7)
!27 = !DILocation(line: 33, column: 160, scope: !7)
!28 = !DILocation(line: 33, column: 168, scope: !7)
!29 = !DILocation(line: 33, column: 47, scope: !7)
!30 = !DILocation(line: 33, column: 85, scope: !7)
!31 = !DILocation(line: 33, column: 132, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 175, scope: !7)
!34 = !DILocation(line: 34, column: 31, scope: !7)
!35 = !DILocation(line: 34, column: 73, scope: !7)
!36 = !DILocation(line: 35, column: 39, scope: !7)
!37 = !DILocation(line: 35, column: 94, scope: !7)
!38 = !DILocation(line: 35, column: 141, scope: !7)
!39 = !DILocation(line: 35, column: 56, scope: !7)
!40 = !DILocation(line: 35, column: 30, scope: !7)
!41 = !DILocation(line: 35, column: 184, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !50)
!47 = distinct !DILexicalBlockFile(scope: !49, file: !48, discriminator: 0)
!48 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!49 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!50 = !DILocation(line: 41, column: 24, scope: !7)
!51 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !50)
!52 = !DILocation(line: 42, column: 25, scope: !7)
!53 = !DILocation(line: 42, column: 36, scope: !7)
!54 = !DILocation(line: 42, column: 4, scope: !7)
