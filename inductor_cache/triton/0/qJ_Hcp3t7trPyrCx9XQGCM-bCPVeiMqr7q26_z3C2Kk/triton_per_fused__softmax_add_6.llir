; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/72/c72chmggusoc4qy6ckmcnhptbblv3cv2mmq4rfyynhqjen62f2wl.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp5 < 225\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused__softmax_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = icmp slt i32 %6, 1024, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = and i32 %8, 63, !dbg !14
  %.frozen = freeze i32 %6, !dbg !15
  %10 = sdiv i32 %.frozen, 64, !dbg !15
  %11 = mul i32 %10, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %11, !dbg !16
  %12 = shl i32 %6, 6, !dbg !17
  %13 = or disjoint i32 %12, %9, !dbg !18
  %14 = sext i32 %13 to i64, !dbg !19
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !19
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7) #4, !dbg !20
  %17 = shl nsw i32 %.decomposed, 6, !dbg !21
  %18 = or disjoint i32 %17, %9, !dbg !22
  %19 = sext i32 %18 to i64, !dbg !23
  %20 = getelementptr i64, ptr addrspace(1) %1, i64 %19, !dbg !23
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %20, i1 %7, i1 %7) #4, !dbg !24
  %22 = add i64 %21, 225, !dbg !25
  %23 = icmp slt i64 %21, 0, !dbg !26
  %24 = select i1 %23, i64 %22, i64 %21, !dbg !27
  %25 = icmp ugt i64 %24, 224, !dbg !28
  %.not2 = and i1 %7, %25, !dbg !29
  br i1 %.not2, label %26, label %27, !dbg !29

26:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !29
  unreachable, !dbg !29

27:                                               ; preds = %5
  %28 = bitcast i32 %16 to float, !dbg !20
  %29 = srem i32 %10, 4, !dbg !30
  %30 = lshr i32 %8, 5, !dbg !14
  %31 = and i32 %8, 31, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %32 = sext i32 %29 to i64, !dbg !31
  %.idx = shl i64 %24, 4, !dbg !32
  %33 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !32
  %34 = getelementptr float, ptr addrspace(1) %33, i64 %32, !dbg !32
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %7) #4, !dbg !33
  %36 = bitcast i32 %35 to float, !dbg !33
  %37 = fadd float %28, %36, !dbg !34
  %38 = select i1 %7, float %37, float 0xFFF0000000000000, !dbg !35
  %39 = bitcast float %38 to i32, !dbg !36
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 16, i32 31), !dbg !36
  %41 = bitcast i32 %40 to float, !dbg !36
  %42 = fcmp ogt float %38, %41, !dbg !40
  %43 = fcmp uno float %38, 0.000000e+00, !dbg !42
  %44 = or i1 %42, %43, !dbg !43
  %45 = select i1 %44, float %38, float %41, !dbg !44
  %46 = bitcast float %45 to i32, !dbg !36
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !36
  %48 = bitcast i32 %47 to float, !dbg !36
  %49 = fcmp ogt float %45, %48, !dbg !40
  %50 = fcmp uno float %45, 0.000000e+00, !dbg !42
  %51 = or i1 %49, %50, !dbg !43
  %52 = select i1 %51, float %45, float %48, !dbg !44
  %53 = bitcast float %52 to i32, !dbg !36
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 4, i32 31), !dbg !36
  %55 = bitcast i32 %54 to float, !dbg !36
  %56 = fcmp ogt float %52, %55, !dbg !40
  %57 = fcmp uno float %52, 0.000000e+00, !dbg !42
  %58 = or i1 %56, %57, !dbg !43
  %59 = select i1 %58, float %52, float %55, !dbg !44
  %60 = bitcast float %59 to i32, !dbg !36
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 2, i32 31), !dbg !36
  %62 = bitcast i32 %61 to float, !dbg !36
  %63 = fcmp ogt float %59, %62, !dbg !40
  %64 = fcmp uno float %59, 0.000000e+00, !dbg !42
  %65 = or i1 %63, %64, !dbg !43
  %66 = select i1 %65, float %59, float %62, !dbg !44
  %67 = bitcast float %66 to i32, !dbg !36
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !36
  %69 = bitcast i32 %68 to float, !dbg !36
  %70 = fcmp ogt float %66, %69, !dbg !40
  %71 = fcmp uno float %66, 0.000000e+00, !dbg !42
  %72 = or i1 %70, %71, !dbg !43
  %73 = icmp eq i32 %31, 0, !dbg !36
  %74 = and i32 %30, 1, !dbg !36
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !36
  %76 = select i1 %72, i32 %67, i32 %68, !dbg !44
  %77 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %77, i1 %73) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %78 = icmp slt i32 %8, 2, !dbg !36
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !36
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %78) #4, !dbg !36
  %81 = bitcast i32 %80 to float, !dbg !36
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !36
  %83 = bitcast i32 %82 to float, !dbg !36
  %84 = fcmp ogt float %81, %83, !dbg !40
  %85 = fcmp uno float %81, 0.000000e+00, !dbg !42
  %86 = or i1 %85, %84, !dbg !43
  %87 = and i32 %8, 1, !dbg !36
  %88 = icmp eq i32 %87, 0, !dbg !36
  %89 = and i1 %78, %88, !dbg !36
  %90 = select i1 %86, i32 %80, i32 %82, !dbg !44
  %91 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %91, i1 %89) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %92 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %93 = fsub float %37, %92, !dbg !45
  %94 = fmul float %93, 0x3FF7154760000000, !dbg !46
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #4, !dbg !46
  %96 = select i1 %7, float %95, float 0.000000e+00, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %97 = bitcast float %96 to i32, !dbg !48
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 16, i32 31), !dbg !48
  %99 = bitcast i32 %98 to float, !dbg !48
  %100 = fadd float %96, %99, !dbg !52
  %101 = bitcast float %100 to i32, !dbg !48
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 8, i32 31), !dbg !48
  %103 = bitcast i32 %102 to float, !dbg !48
  %104 = fadd float %100, %103, !dbg !52
  %105 = bitcast float %104 to i32, !dbg !48
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 4, i32 31), !dbg !48
  %107 = bitcast i32 %106 to float, !dbg !48
  %108 = fadd float %104, %107, !dbg !52
  %109 = bitcast float %108 to i32, !dbg !48
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !48
  %111 = bitcast i32 %110 to float, !dbg !48
  %112 = fadd float %108, %111, !dbg !52
  %113 = bitcast float %112 to i32, !dbg !48
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !48
  %115 = bitcast i32 %114 to float, !dbg !48
  %116 = fadd float %112, %115, !dbg !52
  %117 = bitcast float %116 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %117, i1 %73) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %118 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %78) #4, !dbg !48
  %119 = bitcast i32 %118 to float, !dbg !48
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !48
  %121 = bitcast i32 %120 to float, !dbg !48
  %122 = fadd float %119, %121, !dbg !52
  %123 = bitcast float %122 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %123, i1 %89) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %124 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %124) #4, !dbg !54
  %126 = bitcast float %125 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %15, i1 %7) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c72chmggusoc4qy6ckmcnhptbblv3cv2mmq4rfyynhqjen62f2wl.py", directory: "inductor_cache/72")
!4 = !{ptr @triton_per_fused__softmax_add_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_add_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_6", linkageName: "triton_per_fused__softmax_add_6", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 25, column: 21, scope: !11)
!14 = !DILocation(line: 26, column: 34, scope: !11)
!15 = !DILocation(line: 32, column: 21, scope: !11)
!16 = !DILocation(line: 31, column: 19, scope: !11)
!17 = !DILocation(line: 33, column: 42, scope: !11)
!18 = !DILocation(line: 33, column: 39, scope: !11)
!19 = !DILocation(line: 33, column: 34, scope: !11)
!20 = !DILocation(line: 33, column: 47, scope: !11)
!21 = !DILocation(line: 34, column: 38, scope: !11)
!22 = !DILocation(line: 34, column: 35, scope: !11)
!23 = !DILocation(line: 34, column: 30, scope: !11)
!24 = !DILocation(line: 34, column: 43, scope: !11)
!25 = !DILocation(line: 36, column: 18, scope: !11)
!26 = !DILocation(line: 37, column: 18, scope: !11)
!27 = !DILocation(line: 38, column: 32, scope: !11)
!28 = !DILocation(line: 39, column: 37, scope: !11)
!29 = !DILocation(line: 39, column: 62, scope: !11)
!30 = !DILocation(line: 32, column: 27, scope: !11)
!31 = !DILocation(line: 40, column: 35, scope: !11)
!32 = !DILocation(line: 40, column: 30, scope: !11)
!33 = !DILocation(line: 40, column: 44, scope: !11)
!34 = !DILocation(line: 41, column: 18, scope: !11)
!35 = !DILocation(line: 43, column: 34, scope: !11)
!36 = !DILocation(line: 131, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !11, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 44, column: 39, scope: !11)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !39)
!43 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !39)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !39)
!45 = !DILocation(line: 45, column: 19, scope: !11)
!46 = !DILocation(line: 46, column: 24, scope: !11)
!47 = !DILocation(line: 48, column: 35, scope: !11)
!48 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !11, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!51 = !DILocation(line: 49, column: 26, scope: !11)
!52 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !51)
!53 = distinct !DILexicalBlockFile(scope: !49, file: !50, discriminator: 0)
!54 = !DILocation(line: 50, column: 20, scope: !11)
!55 = !DILocation(line: 51, column: 48, scope: !11)
!56 = !DILocation(line: 51, column: 4, scope: !11)
