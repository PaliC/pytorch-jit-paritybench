; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = and i32 %11, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = icmp slt i32 %16, 1536, !dbg !14
  %20 = icmp slt i32 %17, 1536, !dbg !14
  %21 = icmp slt i32 %18, 1536, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = icmp slt i32 %22, 9, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %24 = sdiv i32 %.frozen, 384, !dbg !17
  %25 = mul i32 %24, 384, !dbg !18
  %.decomposed = sub i32 %.frozen, %25, !dbg !18
  %26 = icmp slt i32 %.decomposed, 192, !dbg !19
  %27 = mul i32 %22, 192, !dbg !20
  %28 = mul i32 %24, 1728, !dbg !21
  %29 = add i32 %28, %27, !dbg !22
  %30 = add i32 %29, %.decomposed, !dbg !23
  %31 = sext i32 %30 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = and i1 %23, %26, !dbg !25
  %34 = and i1 %19, %33, !dbg !26
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #2, !dbg !27
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !27
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !27
  %38 = sext i32 %.decomposed to i64, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !28
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #2, !dbg !29
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !29
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !29
  %43 = icmp sgt i32 %.decomposed, 191, !dbg !30
  %44 = add nsw i32 %.decomposed, -192, !dbg !31
  %45 = add i32 %29, %44, !dbg !32
  %46 = sext i32 %45 to i64, !dbg !33
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !33
  %48 = and i1 %23, %43, !dbg !34
  %49 = and i1 %19, %48, !dbg !35
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #2, !dbg !36
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !36
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !36
  %53 = sext i32 %44 to i64, !dbg !37
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !37
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #2, !dbg !38
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !38
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !38
  %58 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !36
  %59 = insertelement <4 x i32> %58, i32 %51, i64 1, !dbg !36
  %60 = insertelement <4 x i32> %59, i32 %37, i64 2, !dbg !36
  %61 = insertelement <4 x i32> %60, i32 %36, i64 3, !dbg !36
  %62 = bitcast <4 x i32> %61 to <4 x float>, !dbg !36
  %63 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !38
  %64 = insertelement <4 x i32> %63, i32 %56, i64 1, !dbg !38
  %65 = insertelement <4 x i32> %64, i32 %42, i64 2, !dbg !38
  %66 = insertelement <4 x i32> %65, i32 %41, i64 3, !dbg !38
  %67 = bitcast <4 x i32> %66 to <4 x float>, !dbg !38
  %68 = fadd <4 x float> %62, %67, !dbg !39
  %69 = fcmp olt <4 x float> %68, zeroinitializer, !dbg !40
  %70 = extractelement <4 x i1> %69, i64 3, !dbg !44
  %71 = extractelement <4 x float> %68, i64 3, !dbg !44
  %72 = select i1 %70, float 0.000000e+00, float %71, !dbg !44
  %73 = extractelement <4 x i1> %69, i64 2, !dbg !44
  %74 = extractelement <4 x float> %68, i64 2, !dbg !44
  %75 = select i1 %73, float 0.000000e+00, float %74, !dbg !44
  %76 = extractelement <4 x i1> %69, i64 1, !dbg !46
  %77 = extractelement <4 x float> %68, i64 1, !dbg !46
  %78 = select i1 %76, float 0.000000e+00, float %77, !dbg !46
  %79 = extractelement <4 x i1> %69, i64 0, !dbg !46
  %80 = extractelement <4 x float> %68, i64 0, !dbg !46
  %81 = select i1 %79, float 0.000000e+00, float %80, !dbg !46
  %82 = select i1 %26, float %72, float %78, !dbg !47
  %83 = select i1 %26, float %75, float %81, !dbg !47
  %84 = mul i32 %17, 9, !dbg !48
  %85 = mul i32 %18, 9, !dbg !48
  %86 = add i32 %84, %22, !dbg !49
  %87 = add i32 %85, %22, !dbg !49
  %88 = sext i32 %86 to i64, !dbg !50
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %88, !dbg !50
  %90 = sext i32 %87 to i64, !dbg !50
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !50
  %92 = and i1 %23, %20, !dbg !51
  %93 = and i1 %23, %21, !dbg !51
  %94 = and i1 %23, %19, !dbg !51
  %.idx = shl nuw nsw i32 %13, 3, !dbg !52
  %95 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !52
  %96 = bitcast float %82 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !52
  %97 = shl nuw nsw i32 %13, 1, !dbg !52
  %98 = or disjoint i32 %97, 2, !dbg !52
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !52
  %100 = bitcast float %83 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %.idx1 = shl nuw nsw i32 %14, 3, !dbg !52
  %101 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !52
  %102 = load i32, ptr addrspace(3) %101, align 8, !dbg !52
  %.idx2 = shl nuw nsw i32 %15, 3, !dbg !52
  %103 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !52
  %104 = load i32, ptr addrspace(3) %103, align 8, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %89, i1 %92) #2, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %91, i1 %93) #2, !dbg !52
  %105 = mul i32 %22, 384, !dbg !53
  %106 = add i32 %.decomposed, %105, !dbg !54
  %107 = mul i32 %24, 3456, !dbg !55
  %108 = add i32 %106, %107, !dbg !56
  %109 = sext i32 %108 to i64, !dbg !57
  %110 = getelementptr float, ptr addrspace(1) %5, i64 %109, !dbg !57
  %111 = bitcast float %82 to i32, !dbg !58
  %112 = bitcast float %83 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %111, i32 %112, ptr addrspace(1) %110, i1 %94) #2, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2vfc3kljk3736c5u5dlx76vyjbluulqir4zqfkphhe5euaeofej.py", directory: "inductor_cache/2v")
!4 = !{ptr @triton_poi_fused_cat_convolution_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_16", linkageName: "triton_poi_fused_cat_convolution_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 36, column: 18, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 37, column: 44, scope: !7)
!22 = !DILocation(line: 37, column: 39, scope: !7)
!23 = !DILocation(line: 37, column: 50, scope: !7)
!24 = !DILocation(line: 37, column: 30, scope: !7)
!25 = !DILocation(line: 37, column: 63, scope: !7)
!26 = !DILocation(line: 37, column: 71, scope: !7)
!27 = !DILocation(line: 37, column: 56, scope: !7)
!28 = !DILocation(line: 38, column: 30, scope: !7)
!29 = !DILocation(line: 38, column: 70, scope: !7)
!30 = !DILocation(line: 44, column: 20, scope: !7)
!31 = !DILocation(line: 47, column: 60, scope: !7)
!32 = !DILocation(line: 47, column: 51, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 74, scope: !7)
!35 = !DILocation(line: 47, column: 82, scope: !7)
!36 = !DILocation(line: 47, column: 66, scope: !7)
!37 = !DILocation(line: 48, column: 31, scope: !7)
!38 = !DILocation(line: 48, column: 80, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 51, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !45)
!45 = !DILocation(line: 41, column: 40, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 55, column: 32, scope: !7)
!49 = !DILocation(line: 55, column: 30, scope: !7)
!50 = !DILocation(line: 55, column: 25, scope: !7)
!51 = !DILocation(line: 55, column: 52, scope: !7)
!52 = !DILocation(line: 55, column: 44, scope: !7)
!53 = !DILocation(line: 56, column: 34, scope: !7)
!54 = !DILocation(line: 56, column: 30, scope: !7)
!55 = !DILocation(line: 56, column: 44, scope: !7)
!56 = !DILocation(line: 56, column: 39, scope: !7)
!57 = !DILocation(line: 56, column: 25, scope: !7)
!58 = !DILocation(line: 56, column: 56, scope: !7)
!59 = !DILocation(line: 56, column: 4, scope: !7)
