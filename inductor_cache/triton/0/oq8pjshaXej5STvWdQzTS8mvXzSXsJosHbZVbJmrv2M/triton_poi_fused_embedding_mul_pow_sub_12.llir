; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp4 < 1024\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_embedding_mul_pow_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 3, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = and i32 %10, 1, !dbg !14
  %12 = shl nuw nsw i32 %11, 2, !dbg !14
  %13 = lshr i32 %10, 4, !dbg !14
  %14 = and i32 %13, 7, !dbg !14
  %15 = and i32 %10, 7, !dbg !14
  %16 = or disjoint i32 %9, %12, !dbg !15
  %17 = or disjoint i32 %9, %14, !dbg !15
  %18 = or disjoint i32 %9, %15, !dbg !15
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !16
  %20 = shl i32 %19, 6, !dbg !17
  %21 = lshr i32 %10, 1, !dbg !18
  %22 = and i32 %21, 63, !dbg !18
  %23 = or disjoint i32 %20, %22, !dbg !19
  %24 = icmp slt i32 %23, 64, !dbg !20
  %.frozen = freeze i32 %16, !dbg !21
  %25 = sdiv i32 %.frozen, 256, !dbg !21
  %26 = mul i32 %25, 256, !dbg !22
  %.decomposed = sub i32 %.frozen, %26, !dbg !22
  %27 = sext i32 %17 to i64, !dbg !23
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = sext i32 %18 to i64, !dbg !23
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !24
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !24
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !24
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !24
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %36 = shl i32 %23, 8, !dbg !25
  %37 = add i32 %36, %.decomposed, !dbg !26
  %38 = shl i32 %25, 14, !dbg !27
  %39 = add i32 %37, %38, !dbg !28
  %40 = sext i32 %39 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !29
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %24) #3, !dbg !30
  %43 = sext i32 %23 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !31
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #3, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #3, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #3, !dbg !32
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #3, !dbg !32
  %49 = lshr i64 %35, 53, !dbg !33
  %50 = and i64 %49, 1024, !dbg !33
  %51 = add i64 %50, %35, !dbg !33
  %52 = icmp ugt i64 %51, 1023, !dbg !34
  br i1 %52, label %53, label %54, !dbg !35

53:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !35
  unreachable, !dbg !35

54:                                               ; preds = %7
  %55 = lshr i64 %34, 53, !dbg !33
  %56 = and i64 %55, 1024, !dbg !33
  %57 = bitcast i32 %48 to float, !dbg !32
  %58 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !30
  %59 = bitcast i32 %58 to float, !dbg !30
  %60 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !30
  %61 = bitcast i32 %60 to float, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !30
  %63 = bitcast i32 %62 to float, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !30
  %65 = bitcast i32 %64 to float, !dbg !30
  %66 = shl i32 %10, 2, !dbg !18
  %67 = and i32 %66, 60, !dbg !18
  %68 = or disjoint i32 %20, %67, !dbg !19
  %69 = icmp slt i32 %68, 64, !dbg !20
  %70 = or disjoint i32 %67, 3, !dbg !18
  %71 = or disjoint i32 %20, %70, !dbg !19
  %72 = or disjoint i32 %67, 2, !dbg !18
  %73 = or disjoint i32 %20, %72, !dbg !19
  %74 = or disjoint i32 %67, 1, !dbg !18
  %75 = or disjoint i32 %20, %74, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %76 = shl i32 %68, 10, !dbg !36
  %77 = shl i32 %75, 10, !dbg !36
  %78 = shl i32 %73, 10, !dbg !36
  %79 = shl i32 %71, 10, !dbg !36
  %80 = sext i32 %76 to i64, !dbg !37
  %81 = sext i32 %77 to i64, !dbg !37
  %82 = sext i32 %78 to i64, !dbg !37
  %83 = sext i32 %79 to i64, !dbg !37
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !38
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %56, !dbg !38
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %80, !dbg !38
  %87 = getelementptr float, ptr addrspace(1) %85, i64 %81, !dbg !38
  %88 = getelementptr float, ptr addrspace(1) %85, i64 %82, !dbg !38
  %89 = getelementptr float, ptr addrspace(1) %85, i64 %83, !dbg !38
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %69) #3, !dbg !39
  %91 = bitcast i32 %90 to float, !dbg !39
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %69) #3, !dbg !39
  %93 = bitcast i32 %92 to float, !dbg !39
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %69) #3, !dbg !39
  %95 = bitcast i32 %94 to float, !dbg !39
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %69) #3, !dbg !39
  %97 = bitcast i32 %96 to float, !dbg !39
  %98 = fadd float %65, %57, !dbg !40
  %99 = fadd float %63, %57, !dbg !40
  %100 = fadd float %61, %57, !dbg !40
  %101 = fadd float %59, %57, !dbg !40
  %102 = shl nuw nsw i32 %11, 8, !dbg !40
  %103 = or disjoint i32 %102, %22, !dbg !40
  %104 = and i32 %66, 508, !dbg !40
  %.idx = shl nuw nsw i32 %11, 4, !dbg !40
  %105 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !40
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %103, !dbg !40
  %107 = bitcast float %98 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #3, !dbg !40
  %108 = or disjoint i32 %103, 64, !dbg !40
  %109 = lshr i32 %108, 6, !dbg !40
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !40
  %111 = getelementptr float, ptr addrspace(3) %110, i32 %108, !dbg !40
  %112 = bitcast float %99 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #3, !dbg !40
  %113 = or disjoint i32 %103, 128, !dbg !40
  %114 = lshr i32 %113, 6, !dbg !40
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !40
  %116 = getelementptr float, ptr addrspace(3) %115, i32 %113, !dbg !40
  %117 = bitcast float %100 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #3, !dbg !40
  %118 = or disjoint i32 %103, 192, !dbg !40
  %119 = lshr i32 %118, 6, !dbg !40
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !40
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %118, !dbg !40
  %122 = bitcast float %101 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %123 = lshr i32 %104, 6, !dbg !40
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %123, !dbg !40
  %125 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %104, !dbg !40
  %126 = load float, ptr addrspace(3) %125, align 4, !dbg !40
  %127 = or disjoint i32 %104, 1, !dbg !40
  %128 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %127, !dbg !40
  %129 = load float, ptr addrspace(3) %128, align 4, !dbg !40
  %130 = or disjoint i32 %104, 2, !dbg !40
  %131 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %130, !dbg !40
  %132 = load float, ptr addrspace(3) %131, align 4, !dbg !40
  %133 = or disjoint i32 %104, 3, !dbg !40
  %134 = getelementptr inbounds float, ptr addrspace(3) %124, i32 %133, !dbg !40
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !40
  %136 = fsub float %91, %126, !dbg !41
  %137 = fsub float %93, %129, !dbg !41
  %138 = fsub float %95, %132, !dbg !41
  %139 = fsub float %97, %135, !dbg !41
  %140 = fmul float %136, 2.000000e+00, !dbg !42
  %141 = fmul float %137, 2.000000e+00, !dbg !42
  %142 = fmul float %138, 2.000000e+00, !dbg !42
  %143 = fmul float %139, 2.000000e+00, !dbg !42
  %144 = shl i32 %17, 6, !dbg !43
  %145 = add i32 %68, %144, !dbg !44
  %146 = sext i32 %145 to i64, !dbg !45
  %147 = getelementptr float, ptr addrspace(1) %4, i64 %146, !dbg !45
  %148 = bitcast float %140 to i32, !dbg !46
  %149 = bitcast float %141 to i32, !dbg !46
  %150 = bitcast float %142 to i32, !dbg !46
  %151 = bitcast float %143 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %148, i32 %149, i32 %150, i32 %151, ptr addrspace(1) %147, i1 %69) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py", directory: "inductor_cache/bh")
!4 = !{ptr @triton_poi_fused_embedding_mul_pow_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_embedding_mul_pow_sub_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_embedding_mul_pow_sub_12", linkageName: "triton_poi_fused_embedding_mul_pow_sub_12", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 28, scope: !11)
!17 = !DILocation(line: 25, column: 33, scope: !11)
!18 = !DILocation(line: 26, column: 44, scope: !11)
!19 = !DILocation(line: 26, column: 23, scope: !11)
!20 = !DILocation(line: 27, column: 21, scope: !11)
!21 = !DILocation(line: 31, column: 19, scope: !11)
!22 = !DILocation(line: 30, column: 19, scope: !11)
!23 = !DILocation(line: 32, column: 30, scope: !11)
!24 = !DILocation(line: 32, column: 35, scope: !11)
!25 = !DILocation(line: 33, column: 39, scope: !11)
!26 = !DILocation(line: 33, column: 35, scope: !11)
!27 = !DILocation(line: 33, column: 50, scope: !11)
!28 = !DILocation(line: 33, column: 44, scope: !11)
!29 = !DILocation(line: 33, column: 30, scope: !11)
!30 = !DILocation(line: 33, column: 55, scope: !11)
!31 = !DILocation(line: 34, column: 30, scope: !11)
!32 = !DILocation(line: 34, column: 35, scope: !11)
!33 = !DILocation(line: 38, column: 32, scope: !11)
!34 = !DILocation(line: 39, column: 36, scope: !11)
!35 = !DILocation(line: 39, column: 50, scope: !11)
!36 = !DILocation(line: 40, column: 42, scope: !11)
!37 = !DILocation(line: 40, column: 37, scope: !11)
!38 = !DILocation(line: 40, column: 30, scope: !11)
!39 = !DILocation(line: 40, column: 47, scope: !11)
!40 = !DILocation(line: 41, column: 18, scope: !11)
!41 = !DILocation(line: 42, column: 19, scope: !11)
!42 = !DILocation(line: 44, column: 20, scope: !11)
!43 = !DILocation(line: 45, column: 33, scope: !11)
!44 = !DILocation(line: 45, column: 30, scope: !11)
!45 = !DILocation(line: 45, column: 25, scope: !11)
!46 = !DILocation(line: 45, column: 45, scope: !11)
!47 = !DILocation(line: 45, column: 4, scope: !11)
