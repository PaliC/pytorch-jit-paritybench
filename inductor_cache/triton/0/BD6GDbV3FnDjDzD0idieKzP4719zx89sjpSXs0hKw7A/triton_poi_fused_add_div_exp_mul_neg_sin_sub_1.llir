; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@__cudart_i2opi_f = internal unnamed_addr addrspace(1) constant [6 x i32] [i32 1011060801, i32 -614296167, i32 -181084736, i32 -64530479, i32 1313084713, i32 -1560706194], align 4

define void @triton_poi_fused_add_div_exp_mul_neg_sin_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %result.i.i.i.i = alloca [7 x i32], align 4
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 4, !dbg !15
  %15 = srem i32 %14, 16, !dbg !16
  %16 = sdiv i32 %12, 64, !dbg !17
  %17 = mul i32 %14, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %17, !dbg !18
  %18 = shl nsw i32 %16, 6, !dbg !19
  %19 = add i32 %15, %18, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %13) #4, !dbg !22
  %23 = bitcast i32 %22 to float, !dbg !22
  %24 = add i32 %19, 16, !dbg !23
  %25 = sext i32 %24 to i64, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !24
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %13) #4, !dbg !25
  %28 = bitcast i32 %27 to float, !dbg !25
  %29 = add i32 %19, 32, !dbg !26
  %30 = sext i32 %29 to i64, !dbg !27
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !27
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #4, !dbg !28
  %33 = bitcast i32 %32 to float, !dbg !28
  %34 = add i32 %19, 48, !dbg !29
  %35 = sext i32 %34 to i64, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !30
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %13) #4, !dbg !31
  %38 = bitcast i32 %37 to float, !dbg !31
  %39 = shl nsw i32 %.decomposed, 2, !dbg !32
  %40 = sext i32 %39 to i64, !dbg !33
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !33
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %13) #4, !dbg !34
  %43 = bitcast i32 %42 to float, !dbg !34
  %44 = or disjoint i32 %39, 1, !dbg !35
  %45 = sext i32 %44 to i64, !dbg !36
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !36
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %13) #4, !dbg !37
  %48 = bitcast i32 %47 to float, !dbg !37
  %49 = or disjoint i32 %39, 2, !dbg !38
  %50 = sext i32 %49 to i64, !dbg !39
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !39
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %13) #4, !dbg !40
  %53 = bitcast i32 %52 to float, !dbg !40
  %54 = or disjoint i32 %39, 3, !dbg !41
  %55 = sext i32 %54 to i64, !dbg !42
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !42
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %13) #4, !dbg !43
  %58 = bitcast i32 %57 to float, !dbg !43
  %59 = sext i32 %12 to i64, !dbg !44
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !44
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %13) #4, !dbg !45
  %62 = bitcast i32 %61 to float, !dbg !45
  %63 = sext i32 %.decomposed to i64, !dbg !46
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !46
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %13) #4, !dbg !47
  %66 = bitcast i32 %65 to float, !dbg !47
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !48
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %13) #4, !dbg !49
  %69 = bitcast i32 %68 to float, !dbg !49
  %70 = fmul float %23, %23, !dbg !50
  %71 = fmul float %28, %28, !dbg !51
  %72 = fadd float %70, %71, !dbg !52
  %73 = fmul float %33, %33, !dbg !53
  %74 = fadd float %72, %73, !dbg !54
  %75 = fmul float %38, %38, !dbg !55
  %76 = fadd float %74, %75, !dbg !56
  %77 = fmul float %43, %43, !dbg !57
  %78 = fmul float %48, %48, !dbg !58
  %79 = fadd float %77, %78, !dbg !59
  %80 = fmul float %53, %53, !dbg !60
  %81 = fadd float %79, %80, !dbg !61
  %82 = fmul float %58, %58, !dbg !62
  %83 = fadd float %81, %82, !dbg !63
  %84 = fadd float %76, %83, !dbg !64
  %85 = fsub float %84, %62, !dbg !65
  %86 = fsub float 0.000000e+00, %66, !dbg !66
  %87 = fmul float %86, 5.000000e-01, !dbg !67
  %88 = fmul float %87, %85, !dbg !68
  %89 = fmul float %88, 0x3FF7154760000000, !dbg !69
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #4, !dbg !69
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !70
  %91 = fmul float %69, 0x3FE45F3060000000, !dbg !70
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not.i = icmp eq i32 %92, 0, !dbg !70
  %93 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %91) #4, !dbg !70
  %94 = tail call i32 @llvm.nvvm.f2i.rn(float %91) #4, !dbg !70
  %.01.i = select i1 %.not.i, i32 %94, i32 %93, !dbg !70
  %95 = sitofp i32 %.01.i to float, !dbg !70
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not15.i = icmp eq i32 %96, 0, !dbg !70
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %95, float 0xBFF921FB40000000, float %69) #4, !dbg !70
  %98 = tail call float @llvm.nvvm.fma.rn.f(float %95, float 0xBFF921FB40000000, float %69) #4, !dbg !70
  %.02.i = select i1 %.not15.i, float %98, float %97, !dbg !70
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not16.i = icmp eq i32 %99, 0, !dbg !70
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %95, float 0xBE74442D00000000, float %.02.i) #4, !dbg !70
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %95, float 0xBE74442D00000000, float %.02.i) #4, !dbg !70
  %.03.i = select i1 %.not16.i, float %101, float %100, !dbg !70
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not17.i = icmp eq i32 %102, 0, !dbg !70
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %95, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !70
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %95, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !70
  %.04.i = select i1 %.not17.i, float %104, float %103, !dbg !70
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not18.i = icmp eq i32 %105, 0, !dbg !70
  %106 = tail call float @llvm.nvvm.fabs.ftz.f(float %69) #4, !dbg !70
  %107 = tail call float @llvm.nvvm.fabs.f(float %69) #4, !dbg !70
  %.06.i = select i1 %.not18.i, float %107, float %106, !dbg !70
  %108 = fcmp ult float %.06.i, 1.056150e+05, !dbg !70
  br i1 %108, label %__internal_trig_reduction_kernel.exit.i.i, label %__nv_isinff.exit.i.i.i, !dbg !70

__nv_isinff.exit.i.i.i:                           ; preds = %7
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not19.i = icmp eq i32 %109, 0, !dbg !70
  %.07.i = select i1 %.not19.i, float %107, float %106, !dbg !70
  %110 = fcmp oeq float %.07.i, 0x7FF0000000000000, !dbg !70
  br i1 %110, label %__nv_fmul_rn.exit.i.i.i, label %114, !dbg !70

__nv_fmul_rn.exit.i.i.i:                          ; preds = %__nv_isinff.exit.i.i.i
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not27.i = icmp eq i32 %111, 0, !dbg !70
  %112 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %69, float 0.000000e+00) #4, !dbg !70
  %113 = tail call float @llvm.nvvm.mul.rn.f(float %69, float 0.000000e+00) #4, !dbg !70
  %.08.i = select i1 %.not27.i, float %113, float %112, !dbg !70
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !70

114:                                              ; preds = %__nv_isinff.exit.i.i.i
  %115 = lshr i32 %68, 23, !dbg !70
  %116 = and i32 %115, 224, !dbg !70
  %117 = add nsw i32 %116, -128, !dbg !70
  %118 = shl i32 %68, 8, !dbg !70
  %119 = or i32 %118, -2147483648, !dbg !70
  %120 = lshr exact i32 %117, 5, !dbg !70
  br label %121, !dbg !70

121:                                              ; preds = %114, %121
  %indvars.iv = phi i64 [ 0, %114 ], [ %indvars.iv.next, %121 ]
  %hi.i.i.i.0.i1 = phi i32 [ 0, %114 ], [ %126, %121 ]
  %122 = getelementptr inbounds [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv, !dbg !70
  %123 = load i32, ptr addrspace(1) %122, align 4, !dbg !70
  %124 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %123, i32 %119, i32 %hi.i.i.i.0.i1) #5, !dbg !70, !srcloc !71
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !70
  %126 = extractvalue { i32, i32 } %124, 1, !dbg !70
  %127 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %indvars.iv, !dbg !70
  store i32 %125, ptr %127, align 4, !dbg !70
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !70
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !70
  br i1 %exitcond.not, label %128, label %121, !dbg !70, !llvm.loop !72

128:                                              ; preds = %121
  %129 = getelementptr inbounds i8, ptr %result.i.i.i.i, i64 24, !dbg !70
  store i32 %126, ptr %129, align 4, !dbg !70
  %130 = and i32 %115, 31, !dbg !70
  %131 = sub nsw i32 6, %120, !dbg !70
  %132 = sext i32 %131 to i64, !dbg !70
  %133 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %132, !dbg !70
  %134 = load i32, ptr %133, align 4, !dbg !70
  %135 = sub nsw i32 5, %120, !dbg !70
  %136 = sext i32 %135 to i64, !dbg !70
  %137 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %136, !dbg !70
  %138 = load i32, ptr %137, align 4, !dbg !70
  %.not20.i = icmp eq i32 %130, 0, !dbg !70
  br i1 %.not20.i, label %__internal_trig_reduction_slowpath.exit.i.i.i, label %139, !dbg !70

139:                                              ; preds = %128
  %140 = sub nsw i32 4, %120, !dbg !70
  %141 = sub nuw nsw i32 32, %130, !dbg !70
  %142 = shl i32 %134, %130, !dbg !70
  %143 = lshr i32 %138, %141, !dbg !70
  %144 = add i32 %143, %142, !dbg !70
  %145 = shl i32 %138, %130, !dbg !70
  %146 = sext i32 %140 to i64, !dbg !70
  %147 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %146, !dbg !70
  %148 = load i32, ptr %147, align 4, !dbg !70
  %149 = lshr i32 %148, %141, !dbg !70
  %150 = add i32 %149, %145, !dbg !70
  br label %__internal_trig_reduction_slowpath.exit.i.i.i, !dbg !70

__internal_trig_reduction_slowpath.exit.i.i.i:    ; preds = %139, %128
  %hi.i.i.i.1.i = phi i32 [ %144, %139 ], [ %134, %128 ], !dbg !70
  %lo.i.i.i.0.i = phi i32 [ %150, %139 ], [ %138, %128 ], !dbg !70
  %151 = lshr i32 %hi.i.i.i.1.i, 30, !dbg !70
  %152 = tail call i32 @llvm.fshl.i32(i32 %hi.i.i.i.1.i, i32 %lo.i.i.i.0.i, i32 2), !dbg !70
  %153 = shl i32 %lo.i.i.i.0.i, 2, !dbg !70
  %154 = lshr i32 %152, 31, !dbg !70
  %155 = add nuw nsw i32 %154, %151, !dbg !70
  %156 = sub nsw i32 0, %155, !dbg !70
  %.not2123.i = icmp slt i32 %68, 0, !dbg !70
  %spec.select.i = select i1 %.not2123.i, i32 %156, i32 %155, !dbg !70
  %157 = xor i32 %152, %68, !dbg !70
  %.lobit.i = ashr i32 %152, 31, !dbg !70
  %hi.i.i.i.2.i = xor i32 %.lobit.i, %152, !dbg !70
  %lo.i.i.i.1.i = xor i32 %.lobit.i, %153, !dbg !70
  %158 = zext i32 %hi.i.i.i.2.i to i64, !dbg !70
  %159 = shl nuw i64 %158, 32, !dbg !70
  %160 = zext i32 %lo.i.i.i.1.i to i64, !dbg !70
  %161 = or disjoint i64 %159, %160, !dbg !70
  %162 = sitofp i64 %161 to double, !dbg !70
  %163 = fmul double %162, 0x3BF921FB54442D19, !dbg !70
  %164 = fptrunc double %163 to float, !dbg !70
  %165 = fneg float %164, !dbg !70
  %.not2526.i = icmp slt i32 %157, 0, !dbg !70
  %r.i.i.i.0.i = select i1 %.not2526.i, float %165, float %164, !dbg !70
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !70

__internal_trig_reduction_kernel.exit.i.i:        ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i, %__nv_fmul_rn.exit.i.i.i, %7
  %i.i.1.i = phi i32 [ %.01.i, %7 ], [ 0, %__nv_fmul_rn.exit.i.i.i ], [ %spec.select.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !70
  %t.i.i.1.i = phi float [ %.04.i, %7 ], [ %.08.i, %__nv_fmul_rn.exit.i.i.i ], [ %r.i.i.i.0.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !70
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not28.i = icmp eq i32 %166, 0, !dbg !70
  %167 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !70
  %168 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !70
  %.011.i = select i1 %.not28.i, float %168, float %167, !dbg !70
  %169 = and i32 %i.i.1.i, 1, !dbg !70
  %.not29.i = icmp eq i32 %169, 0, !dbg !70
  %170 = select i1 %.not29.i, float %t.i.i.1.i, float 1.000000e+00, !dbg !70
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not30.i = icmp eq i32 %171, 0, !dbg !70
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %170, float 0.000000e+00) #4, !dbg !70
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %170, float 0.000000e+00) #4, !dbg !70
  %.012.i = select i1 %.not30.i, float %173, float %172, !dbg !70
  br i1 %.not29.i, label %__internal_fmad.exit2.i.i.i, label %__internal_fmad.exit1.i.i.i, !dbg !70

__internal_fmad.exit1.i.i.i:                      ; preds = %__internal_trig_reduction_kernel.exit.i.i
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not31.i = icmp eq i32 %174, 0, !dbg !70
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !70
  %176 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !70
  %.013.i = select i1 %.not31.i, float %176, float %175, !dbg !70
  br label %__internal_fmad.exit2.i.i.i, !dbg !70

__internal_fmad.exit2.i.i.i:                      ; preds = %__internal_fmad.exit1.i.i.i, %__internal_trig_reduction_kernel.exit.i.i
  %177 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !70
  %178 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !70
  %179 = phi float [ %.013.i, %__internal_fmad.exit1.i.i.i ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !70
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not32.i = icmp eq i32 %180, 0, !dbg !70
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %179, float %.011.i, float %178) #4, !dbg !70
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %179, float %.011.i, float %178) #4, !dbg !70
  %.010.i = select i1 %.not32.i, float %182, float %181, !dbg !70
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not33.i = icmp eq i32 %183, 0, !dbg !70
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %.011.i, float %177) #4, !dbg !70
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %.011.i, float %177) #4, !dbg !70
  %.09.i = select i1 %.not33.i, float %185, float %184, !dbg !70
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not34.i = icmp eq i32 %186, 0, !dbg !70
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.012.i, float %170) #4, !dbg !70
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.012.i, float %170) #4, !dbg !70
  %.05.i = select i1 %.not34.i, float %188, float %187, !dbg !70
  %189 = and i32 %i.i.1.i, 2, !dbg !70
  %.not35.i = icmp eq i32 %189, 0, !dbg !70
  br i1 %.not35.i, label %__nv_sinf.exit, label %__internal_fmad.exit5.i.i.i, !dbg !70

__internal_fmad.exit5.i.i.i:                      ; preds = %__internal_fmad.exit2.i.i.i
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not36.i = icmp eq i32 %190, 0, !dbg !70
  %191 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !70
  %192 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !70
  %.0.i = select i1 %.not36.i, float %192, float %191, !dbg !70
  br label %__nv_sinf.exit, !dbg !70

__nv_sinf.exit:                                   ; preds = %__internal_fmad.exit2.i.i.i, %__internal_fmad.exit5.i.i.i
  %z.i.i.0.i = phi float [ %.0.i, %__internal_fmad.exit5.i.i.i ], [ %.05.i, %__internal_fmad.exit2.i.i.i ], !dbg !70
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !70
  %193 = fmul float %90, %z.i.i.0.i, !dbg !74
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !75
  %195 = bitcast float %193 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %194, i1 %13) #4, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn.ftz(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqdycgsihir5b3ccjij2lb32ynlvcjsd54unnzpygdkt4qoxlwam.py", directory: "inductor_cache/qd")
!4 = !{ptr @triton_poi_fused_add_div_exp_mul_neg_sin_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_exp_mul_neg_sin_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_exp_mul_neg_sin_sub_1", linkageName: "triton_poi_fused_add_div_exp_mul_neg_sin_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 40, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 30, column: 40, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 48, scope: !7)
!29 = !DILocation(line: 31, column: 40, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 48, scope: !7)
!32 = !DILocation(line: 32, column: 33, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 38, scope: !7)
!35 = !DILocation(line: 33, column: 35, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 42, scope: !7)
!38 = !DILocation(line: 34, column: 35, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 42, scope: !7)
!41 = !DILocation(line: 35, column: 35, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 42, scope: !7)
!44 = !DILocation(line: 36, column: 31, scope: !7)
!45 = !DILocation(line: 36, column: 36, scope: !7)
!46 = !DILocation(line: 37, column: 31, scope: !7)
!47 = !DILocation(line: 37, column: 36, scope: !7)
!48 = !DILocation(line: 38, column: 31, scope: !7)
!49 = !DILocation(line: 38, column: 36, scope: !7)
!50 = !DILocation(line: 39, column: 18, scope: !7)
!51 = !DILocation(line: 40, column: 18, scope: !7)
!52 = !DILocation(line: 41, column: 18, scope: !7)
!53 = !DILocation(line: 42, column: 18, scope: !7)
!54 = !DILocation(line: 43, column: 18, scope: !7)
!55 = !DILocation(line: 44, column: 18, scope: !7)
!56 = !DILocation(line: 45, column: 19, scope: !7)
!57 = !DILocation(line: 46, column: 20, scope: !7)
!58 = !DILocation(line: 47, column: 20, scope: !7)
!59 = !DILocation(line: 48, column: 20, scope: !7)
!60 = !DILocation(line: 49, column: 20, scope: !7)
!61 = !DILocation(line: 50, column: 20, scope: !7)
!62 = !DILocation(line: 51, column: 20, scope: !7)
!63 = !DILocation(line: 52, column: 20, scope: !7)
!64 = !DILocation(line: 53, column: 20, scope: !7)
!65 = !DILocation(line: 54, column: 20, scope: !7)
!66 = !DILocation(line: 55, column: 13, scope: !7)
!67 = !DILocation(line: 57, column: 20, scope: !7)
!68 = !DILocation(line: 58, column: 20, scope: !7)
!69 = !DILocation(line: 59, column: 24, scope: !7)
!70 = !DILocation(line: 60, column: 24, scope: !7)
!71 = !{i32 30999, i32 31003, i32 31048, i32 31093}
!72 = distinct !{!72, !73}
!73 = !{!"llvm.loop.unroll.count", i32 1}
!74 = !DILocation(line: 61, column: 20, scope: !7)
!75 = !DILocation(line: 62, column: 28, scope: !7)
!76 = !DILocation(line: 62, column: 40, scope: !7)
!77 = !DILocation(line: 62, column: 4, scope: !7)
