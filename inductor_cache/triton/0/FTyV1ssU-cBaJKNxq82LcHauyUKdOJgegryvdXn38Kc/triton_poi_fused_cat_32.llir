; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 510, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 256, !dbg !14
  %14 = srem i32 %13, 304, !dbg !15
  %15 = mul i32 %13, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %.frozen1 = freeze i32 %12, !dbg !17
  %16 = sdiv i32 %.frozen1, 77824, !dbg !17
  %17 = icmp slt i32 %14, 48, !dbg !18
  %18 = mul i32 %16, 77824, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %18, !dbg !19
  %19 = mul nsw i32 %16, 12288, !dbg !20
  %20 = add nsw i32 %19, %srem.decomposed, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #1, !dbg !23
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !23
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !23
  %26 = bitcast i32 %24 to float, !dbg !23
  %27 = bitcast i32 %25 to float, !dbg !23
  %28 = sext i32 %14 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %17, i32 0, i1 %17) #1, !dbg !25
  %31 = bitcast i32 %30 to float, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %17, i32 0, i1 %17) #1, !dbg !25
  %33 = bitcast i32 %32 to float, !dbg !25
  %34 = fadd float %26, %31, !dbg !26
  %35 = fadd float %27, %33, !dbg !26
  %36 = fcmp olt float %34, 0.000000e+00, !dbg !27
  %37 = fcmp olt float %35, 0.000000e+00, !dbg !27
  %38 = select i1 %36, float 0.000000e+00, float %34, !dbg !31
  %39 = select i1 %37, float 0.000000e+00, float %35, !dbg !31
  %40 = icmp sgt i32 %14, 47, !dbg !32
  %41 = shl nsw i32 %14, 8, !dbg !33
  %42 = shl nsw i32 %16, 16, !dbg !34
  %43 = add nsw i32 %.decomposed, -12288, !dbg !33
  %44 = add nsw i32 %43, %42, !dbg !35
  %45 = add nsw i32 %44, %41, !dbg !36
  %46 = sext i32 %45 to i64, !dbg !37
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !37
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #1, !dbg !38
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !38
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !38
  %51 = bitcast i32 %49 to float, !dbg !38
  %52 = bitcast i32 %50 to float, !dbg !38
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !39
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #1, !dbg !40
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !40
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !40
  %57 = bitcast i32 %55 to float, !dbg !40
  %58 = bitcast i32 %56 to float, !dbg !40
  %59 = fadd float %51, %57, !dbg !41
  %60 = fadd float %52, %58, !dbg !41
  %61 = select i1 %17, float %38, float %59, !dbg !42
  %62 = select i1 %17, float %39, float %60, !dbg !42
  %63 = sext i32 %12 to i64, !dbg !43
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !43
  %65 = bitcast float %61 to i32, !dbg !44
  %66 = bitcast float %62 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %65, i32 %66, ptr addrspace(1) %64, i1 true) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmcfhgsrcl4xiyfdtulonhyol4dob7sdbc6h6uxi6uvnqo2yuc7y.py", directory: "inductor_cache/mc")
!4 = !{ptr @triton_poi_fused_cat_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_32", linkageName: "triton_poi_fused_cat_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 57, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 37, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 43, column: 41, scope: !7)
!34 = !DILocation(line: 43, column: 61, scope: !7)
!35 = !DILocation(line: 43, column: 36, scope: !7)
!36 = !DILocation(line: 43, column: 55, scope: !7)
!37 = !DILocation(line: 43, column: 31, scope: !7)
!38 = !DILocation(line: 43, column: 66, scope: !7)
!39 = !DILocation(line: 44, column: 31, scope: !7)
!40 = !DILocation(line: 44, column: 66, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 0, scope: !7)
!43 = !DILocation(line: 49, column: 25, scope: !7)
!44 = !DILocation(line: 49, column: 37, scope: !7)
!45 = !DILocation(line: 49, column: 4, scope: !7)
