; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = icmp slt i32 %14, 61504, !dbg !14
  %19 = sdiv i32 %14, 961, !dbg !15
  %20 = sdiv i32 %15, 961, !dbg !15
  %21 = sdiv i32 %16, 961, !dbg !15
  %22 = sdiv i32 %17, 961, !dbg !15
  %23 = srem i32 %19, 16, !dbg !16
  %24 = srem i32 %20, 16, !dbg !16
  %25 = srem i32 %21, 16, !dbg !16
  %26 = srem i32 %22, 16, !dbg !16
  %27 = sext i32 %14 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %18) #3, !dbg !18
  %30 = sext i32 %23 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !19
  %32 = sext i32 %24 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !19
  %34 = sext i32 %25 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !19
  %36 = sext i32 %26 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %18) #3, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %18) #3, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #3, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %18) #3, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !22
  %47 = bitcast i32 %46 to float, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %18) #3, !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %18) #3, !dbg !22
  %51 = bitcast i32 %50 to float, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %18) #3, !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %18) #3, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %18) #3, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %18) #3, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #3, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #3, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %18) #3, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %18) #3, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %18) #3, !dbg !26
  %70 = fadd float %47, 0x3EE4F8B580000000, !dbg !27
  %71 = fadd float %49, 0x3EE4F8B580000000, !dbg !27
  %72 = fadd float %51, 0x3EE4F8B580000000, !dbg !27
  %73 = fadd float %53, 0x3EE4F8B580000000, !dbg !27
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %74, 0, !dbg !28
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %75, 0, !dbg !28
  br i1 %.not.i, label %81, label %76, !dbg !28

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !28

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

81:                                               ; preds = %8
  br i1 %.not1.i, label %84, label %82, !dbg !28

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !28
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %86, 0, !dbg !28
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !28
  br i1 %.not.i1, label %93, label %88, !dbg !28

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !28

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !28

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !28
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %98, 0, !dbg !28
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %99, 0, !dbg !28
  br i1 %.not.i6, label %105, label %100, !dbg !28

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !28

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !28

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %101, %103, %106, %108
  %.0.i8 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !28
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %110, 0, !dbg !28
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %111, 0, !dbg !28
  br i1 %.not.i11, label %117, label %112, !dbg !28

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !28

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !28

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %113, %115, %118, %120
  %.0.i13 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !28
  %122 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %123 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !20
  %124 = insertelement <4 x i32> %123, i32 %39, i64 1, !dbg !20
  %125 = insertelement <4 x i32> %124, i32 %40, i64 2, !dbg !20
  %126 = insertelement <4 x i32> %125, i32 %41, i64 3, !dbg !20
  %127 = bitcast <4 x i32> %126 to <4 x float>, !dbg !20
  %128 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %129 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %130 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %131 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !26
  %132 = insertelement <4 x i32> %131, i32 %67, i64 1, !dbg !26
  %133 = insertelement <4 x i32> %132, i32 %68, i64 2, !dbg !26
  %134 = insertelement <4 x i32> %133, i32 %69, i64 3, !dbg !26
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !26
  %136 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !24
  %137 = insertelement <4 x i32> %136, i32 %59, i64 1, !dbg !24
  %138 = insertelement <4 x i32> %137, i32 %60, i64 2, !dbg !24
  %139 = insertelement <4 x i32> %138, i32 %61, i64 3, !dbg !24
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !24
  %.frozen = freeze i32 %14, !dbg !29
  %141 = sdiv i32 %.frozen, 15376, !dbg !29
  %142 = mul i32 %141, 15376, !dbg !30
  %.decomposed = sub i32 %.frozen, %142, !dbg !30
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %147 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !32
  %148 = mul i32 %141, 15488, !dbg !33
  %149 = add i32 %148, %.decomposed, !dbg !34
  %150 = sext i32 %149 to i64, !dbg !35
  %151 = getelementptr i1, ptr addrspace(1) %6, i64 %150, !dbg !35
  %152 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !18
  %153 = insertelement <4 x i32> %152, i32 %129, i64 1, !dbg !18
  %154 = insertelement <4 x i32> %153, i32 %128, i64 2, !dbg !18
  %155 = insertelement <4 x i32> %154, i32 %122, i64 3, !dbg !18
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !18
  %157 = fsub <4 x float> %156, %127, !dbg !36
  %158 = insertelement <4 x float> poison, float %143, i64 0, !dbg !37
  %159 = insertelement <4 x float> %158, float %144, i64 1, !dbg !37
  %160 = insertelement <4 x float> %159, float %145, i64 2, !dbg !37
  %161 = insertelement <4 x float> %160, float %146, i64 3, !dbg !37
  %162 = fmul <4 x float> %157, %161, !dbg !37
  %163 = fmul <4 x float> %162, %140, !dbg !38
  %164 = fadd <4 x float> %163, %135, !dbg !39
  %165 = fcmp olt <4 x float> %164, zeroinitializer, !dbg !40
  %166 = select <4 x i1> %165, <4 x float> zeroinitializer, <4 x float> %164, !dbg !44
  %167 = fcmp ole <4 x float> %166, zeroinitializer, !dbg !45
  %bc = bitcast <4 x float> %166 to <4 x i32>, !dbg !46
  %168 = extractelement <4 x i32> %bc, i64 0, !dbg !46
  %bc16 = bitcast <4 x float> %166 to <4 x i32>, !dbg !46
  %169 = extractelement <4 x i32> %bc16, i64 1, !dbg !46
  %bc17 = bitcast <4 x float> %166 to <4 x i32>, !dbg !46
  %170 = extractelement <4 x i32> %bc17, i64 2, !dbg !46
  %bc18 = bitcast <4 x float> %166 to <4 x i32>, !dbg !46
  %171 = extractelement <4 x i32> %bc18, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %168, i32 %169, i32 %170, i32 %171, ptr addrspace(1) %147, i1 %18) #3, !dbg !46
  %172 = zext <4 x i1> %167 to <4 x i8>, !dbg !47
  %173 = bitcast <4 x i8> %172 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %151, i1 %18) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdjm55ymeq7kln7amlsiytpjqzegpo5lkywymrwceixivq5sf32n.py", directory: "inductor_cache/dj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 26, scope: !7)
!29 = !DILocation(line: 26, column: 19, scope: !7)
!30 = !DILocation(line: 27, column: 19, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 48, column: 25, scope: !7)
!33 = !DILocation(line: 49, column: 36, scope: !7)
!34 = !DILocation(line: 49, column: 30, scope: !7)
!35 = !DILocation(line: 49, column: 25, scope: !7)
!36 = !DILocation(line: 33, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 19, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 45, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 47, column: 21, scope: !7)
!46 = !DILocation(line: 48, column: 37, scope: !7)
!47 = !DILocation(line: 49, column: 48, scope: !7)
!48 = !DILocation(line: 49, column: 4, scope: !7)
