; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_add_mean_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 60, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = lshr i32 %9, 4, !dbg !14
  %14 = and i32 %13, 7, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %15 = sdiv i32 %.frozen, 128, !dbg !15
  %16 = mul i32 %15, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = shl i32 %15, 14, !dbg !17
  %18 = add i32 %17, %.decomposed
  br label %19, !dbg !18

19:                                               ; preds = %6, %19
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %19 ]
  %20 = phi <4 x float> [ zeroinitializer, %6 ], [ %60, %19 ]
  %21 = trunc i64 %indvars.iv to i32, !dbg !19
  %.tr = or disjoint i32 %14, %21, !dbg !19
  %22 = shl i32 %.tr, 7, !dbg !19
  %23 = add i32 %18, %22, !dbg !19
  %24 = sext i32 %23 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %43 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !21
  %44 = insertelement <4 x i32> %43, i32 %28, i64 1, !dbg !21
  %45 = insertelement <4 x i32> %44, i32 %29, i64 2, !dbg !21
  %46 = insertelement <4 x i32> %45, i32 %30, i64 3, !dbg !21
  %47 = bitcast <4 x i32> %46 to <4 x float>, !dbg !21
  %48 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !23
  %49 = insertelement <4 x i32> %48, i32 %34, i64 1, !dbg !23
  %50 = insertelement <4 x i32> %49, i32 %35, i64 2, !dbg !23
  %51 = insertelement <4 x i32> %50, i32 %36, i64 3, !dbg !23
  %52 = bitcast <4 x i32> %51 to <4 x float>, !dbg !23
  %53 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !25
  %54 = insertelement <4 x i32> %53, i32 %40, i64 1, !dbg !25
  %55 = insertelement <4 x i32> %54, i32 %41, i64 2, !dbg !25
  %56 = insertelement <4 x i32> %55, i32 %42, i64 3, !dbg !25
  %57 = bitcast <4 x i32> %56 to <4 x float>, !dbg !25
  %58 = fadd <4 x float> %47, %52, !dbg !26
  %59 = fadd <4 x float> %58, %57, !dbg !27
  %60 = fadd <4 x float> %20, %59, !dbg !28
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !18
  %61 = icmp samesign ult i64 %indvars.iv, 120, !dbg !18
  br i1 %61, label %19, label %62, !dbg !18

62:                                               ; preds = %19
  %63 = lshr i32 %9, 5, !dbg !12
  %64 = and i32 %9, 63, !dbg !12
  %65 = or disjoint i32 %8, %64, !dbg !13
  %66 = and i32 %9, 16, !dbg !12
  %67 = extractelement <4 x float> %60, i64 0, !dbg !29
  %68 = bitcast float %67 to i32, !dbg !29
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 16, i32 31), !dbg !29
  %70 = bitcast i32 %69 to float, !dbg !29
  %71 = fadd float %67, %70, !dbg !33
  %72 = extractelement <4 x float> %60, i64 1, !dbg !29
  %73 = bitcast float %72 to i32, !dbg !29
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fadd float %72, %75, !dbg !33
  %77 = extractelement <4 x float> %60, i64 2, !dbg !29
  %78 = bitcast float %77 to i32, !dbg !29
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = fadd float %77, %80, !dbg !33
  %82 = extractelement <4 x float> %60, i64 3, !dbg !29
  %83 = bitcast float %82 to i32, !dbg !29
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !29
  %85 = bitcast i32 %84 to float, !dbg !29
  %86 = fadd float %82, %85, !dbg !33
  %87 = icmp eq i32 %66, 0, !dbg !29
  %88 = and i32 %63, 3, !dbg !29
  %89 = shl nuw nsw i32 %11, 2, !dbg !29
  %90 = or disjoint i32 %89, %88, !dbg !29
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !29
  %92 = bitcast float %71 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 %87) #3, !dbg !29
  %93 = or disjoint i32 %89, 4, !dbg !29
  %94 = or disjoint i32 %93, %88, !dbg !29
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !29
  %96 = bitcast float %76 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 %87) #3, !dbg !29
  %97 = or disjoint i32 %89, 8, !dbg !29
  %98 = or disjoint i32 %97, %88, !dbg !29
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !29
  %100 = bitcast float %81 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 %87) #3, !dbg !29
  %101 = or disjoint i32 %89, 12, !dbg !29
  %102 = or disjoint i32 %101, %88, !dbg !29
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !29
  %104 = bitcast float %86 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 %87) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %105 = icmp slt i32 %9, 256, !dbg !29
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !29
  %107 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %106, i1 %105) #3, !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 2, i32 31), !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = fadd float %108, %110, !dbg !33
  %112 = bitcast float %111 to i32, !dbg !29
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !29
  %114 = bitcast i32 %113 to float, !dbg !29
  %115 = fadd float %111, %114, !dbg !33
  %116 = and i32 %9, 3, !dbg !29
  %117 = icmp eq i32 %116, 0, !dbg !29
  %118 = and i1 %105, %117, !dbg !29
  %119 = bitcast float %115 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %119, i1 %118) #3, !dbg !29
  %120 = getelementptr i8, ptr addrspace(3) %106, i32 512, !dbg !29
  %121 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %120, i1 %105) #3, !dbg !29
  %122 = bitcast i32 %121 to float, !dbg !29
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !29
  %124 = bitcast i32 %123 to float, !dbg !29
  %125 = fadd float %122, %124, !dbg !33
  %126 = bitcast float %125 to i32, !dbg !29
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = fadd float %125, %128, !dbg !33
  %130 = bitcast float %129 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %130, i1 %118) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !29
  %132 = load i32, ptr addrspace(3) %131, align 16, !dbg !29
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !29
  %134 = load i32, ptr addrspace(3) %133, align 16, !dbg !29
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !29
  %136 = load i32, ptr addrspace(3) %135, align 16, !dbg !29
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !29
  %138 = load i32, ptr addrspace(3) %137, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !35
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %139, i32 %132, i32 %134, i32 %136, i32 %138, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !35
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !35
  %142 = sext i32 %65 to i64, !dbg !36
  %143 = getelementptr float, ptr addrspace(1) %3, i64 %142, !dbg !36
  %144 = and i32 %9, 64, !dbg !37
  %145 = icmp eq i32 %144, 0, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %143, i1 %145) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb7jma3alaeotyt3a3g66btyqt356jeoe2t7oqgyven4dqjex3mp.py", directory: "inductor_cache/b7")
!4 = !{ptr @triton_red_fused_add_mean_10, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_mean_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_mean_10", linkageName: "triton_red_fused_add_mean_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 54, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 34, column: 48, scope: !7)
!20 = !DILocation(line: 34, column: 34, scope: !7)
!21 = !DILocation(line: 34, column: 59, scope: !7)
!22 = !DILocation(line: 35, column: 34, scope: !7)
!23 = !DILocation(line: 35, column: 59, scope: !7)
!24 = !DILocation(line: 36, column: 34, scope: !7)
!25 = !DILocation(line: 36, column: 59, scope: !7)
!26 = !DILocation(line: 37, column: 22, scope: !7)
!27 = !DILocation(line: 38, column: 22, scope: !7)
!28 = !DILocation(line: 40, column: 23, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 42, column: 25, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !32)
!34 = distinct !DILexicalBlockFile(scope: !30, file: !31, discriminator: 0)
!35 = !DILocation(line: 42, column: 28, scope: !7)
!36 = !DILocation(line: 43, column: 25, scope: !7)
!37 = !DILocation(line: 43, column: 36, scope: !7)
!38 = !DILocation(line: 43, column: 4, scope: !7)
