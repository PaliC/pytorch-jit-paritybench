; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_cat_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 512, !dbg !14
  %19 = mul i32 %18, 512, !dbg !15
  %.decomposed = sub i32 %.frozen, %19, !dbg !15
  %20 = srem i32 %17, 512, !dbg !15
  %21 = sdiv i32 %16, 32768, !dbg !16
  %22 = srem i32 %18, 64, !dbg !17
  %23 = sdiv i32 %16, 4096, !dbg !18
  %24 = srem i32 %23, 8, !dbg !19
  %25 = srem i32 %18, 8, !dbg !20
  %26 = sext i32 %.decomposed to i64, !dbg !21
  %27 = icmp slt i32 %.decomposed, 256, !dbg !21
  %28 = shl nsw i32 %.decomposed, 6, !dbg !22
  %29 = shl nsw i32 %20, 6, !dbg !22
  %30 = shl nsw i32 %21, 14, !dbg !23
  %31 = add nsw i32 %30, %22, !dbg !24
  %32 = add nsw i32 %31, %28, !dbg !25
  %33 = add nsw i32 %31, %29, !dbg !25
  %34 = sext i32 %32 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = sext i32 %33 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %27, i32 0, i1 %27) #3, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %27, i32 0, i1 %27) #3, !dbg !27
  %40 = sext i32 %24 to i64, !dbg !28
  %41 = getelementptr i64, ptr addrspace(1) %1, i64 %40, !dbg !28
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %41, i1 %27, i1 %27) #3, !dbg !29
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %41, i1 %27, i1 %27) #3, !dbg !29
  %44 = lshr i64 %42, 60, !dbg !30
  %45 = and i64 %44, 8, !dbg !30
  %46 = add i64 %45, %42, !dbg !30
  %47 = sext i32 %25 to i64, !dbg !31
  %48 = getelementptr i64, ptr addrspace(1) %2, i64 %47, !dbg !31
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %48, i1 %27, i1 %27) #3, !dbg !32
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %48, i1 %27, i1 %27) #3, !dbg !32
  %51 = lshr i64 %49, 60, !dbg !33
  %52 = and i64 %51, 8, !dbg !33
  %53 = add i64 %52, %49, !dbg !33
  %54 = shl i64 %46, 11, !dbg !34
  %55 = sext i32 %30 to i64, !dbg !35
  %.idx = shl i64 %53, 10, !dbg !36
  %56 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %56, i64 %54, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %55, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %26, !dbg !36
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !37
  %61 = getelementptr i64, ptr addrspace(1) %4, i64 %47, !dbg !38
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %61, i1 %27, i1 %27) #3, !dbg !39
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %61, i1 %27, i1 %27) #3, !dbg !39
  %64 = lshr i64 %62, 60, !dbg !40
  %65 = and i64 %64, 8, !dbg !40
  %66 = add i64 %65, %62, !dbg !40
  %.idx1 = shl i64 %66, 10, !dbg !41
  %67 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !41
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %54, !dbg !41
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %55, !dbg !41
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %26, !dbg !41
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #3, !dbg !42
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !43
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %27, i32 0, i1 %27) #3, !dbg !44
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %27, i32 0, i1 %27) #3, !dbg !44
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !45
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %27, i32 0, i1 %27) #3, !dbg !46
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %27, i32 0, i1 %27) #3, !dbg !46
  %78 = icmp sgt i32 %.decomposed, 255, !dbg !47
  %79 = shl nsw i32 %18, 8, !dbg !48
  %80 = add nsw i32 %.decomposed, -256, !dbg !49
  %81 = add nsw i32 %80, %79, !dbg !50
  %82 = sext i32 %81 to i64, !dbg !51
  %83 = getelementptr float, ptr addrspace(1) %7, i64 %82, !dbg !51
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %83, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #3, !dbg !52
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !52
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !52
  %87 = bitcast i32 %85 to float, !dbg !52
  %88 = bitcast i32 %86 to float, !dbg !52
  %89 = fmul float %87, 0x3FF7154760000000, !dbg !53
  %90 = tail call float @llvm.nvvm.round.f(float %89) #3, !dbg !53
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %91, 0, !dbg !53
  %92 = tail call float @llvm.nvvm.fabs.ftz.f(float %87) #3, !dbg !53
  %93 = tail call float @llvm.nvvm.fabs.f(float %87) #3, !dbg !53
  %.03.i = select i1 %.not.i, float %93, float %92, !dbg !53
  %94 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !53
  %t.0.i = select i1 %94, float 0.000000e+00, float %90, !dbg !53
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %97 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !53
  %j.0.i = select i1 %97, float 1.270000e+02, float %t.0.i, !dbg !53
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not8.i = icmp eq i32 %103, 0, !dbg !53
  br i1 %.not8.i, label %106, label %104, !dbg !53

104:                                              ; preds = %10
  %105 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #3, !dbg !53
  br label %__nv_expm1f.exit, !dbg !53

106:                                              ; preds = %10
  %107 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #3, !dbg !53
  br label %__nv_expm1f.exit, !dbg !53

__nv_expm1f.exit:                                 ; preds = %104, %106
  %.0.i = phi float [ %105, %104 ], [ %107, %106 ], !dbg !53
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %109 = fmul float %88, 0x3FF7154760000000, !dbg !53
  %110 = tail call float @llvm.nvvm.round.f(float %109) #3, !dbg !53
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i2 = icmp eq i32 %111, 0, !dbg !53
  %112 = tail call float @llvm.nvvm.fabs.ftz.f(float %88) #3, !dbg !53
  %113 = tail call float @llvm.nvvm.fabs.f(float %88) #3, !dbg !53
  %.03.i3 = select i1 %.not.i2, float %113, float %112, !dbg !53
  %114 = fcmp olt float %.03.i3, 0x3FDA3D70A0000000, !dbg !53
  %t.0.i4 = select i1 %114, float 0.000000e+00, float %110, !dbg !53
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %117 = fcmp oeq float %t.0.i4, 1.280000e+02, !dbg !53
  %j.0.i5 = select i1 %117, float 1.270000e+02, float %t.0.i4, !dbg !53
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not8.i6 = icmp eq i32 %123, 0, !dbg !53
  br i1 %.not8.i6, label %126, label %124, !dbg !53

124:                                              ; preds = %__nv_expm1f.exit
  %125 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i5) #3, !dbg !53
  br label %__nv_expm1f.exit28, !dbg !53

126:                                              ; preds = %__nv_expm1f.exit
  %127 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i5) #3, !dbg !53
  br label %__nv_expm1f.exit28, !dbg !53

__nv_expm1f.exit28:                               ; preds = %124, %126
  %.0.i7 = phi float [ %125, %124 ], [ %127, %126 ], !dbg !53
  %128 = fcmp oeq float %87, 0.000000e+00, !dbg !53
  %129 = fadd float %87, %87, !dbg !53
  %130 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !53
  %131 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !53
  %.not9.i = icmp eq i32 %108, 0, !dbg !53
  %.not7.i = icmp eq i32 %102, 0, !dbg !53
  %.not6.i = icmp eq i32 %101, 0, !dbg !53
  %.not5.i = icmp eq i32 %100, 0, !dbg !53
  %.not4.i = icmp eq i32 %99, 0, !dbg !53
  %.not3.i = icmp eq i32 %98, 0, !dbg !53
  %.not2.i = icmp eq i32 %96, 0, !dbg !53
  %132 = fneg float %t.0.i, !dbg !53
  %.not1.i = icmp eq i32 %95, 0, !dbg !53
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %132, float 0x3FE62E4000000000, float %87) #3, !dbg !53
  %134 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %132, float 0x3FE62E4000000000, float %87) #3, !dbg !53
  %.04.i = select i1 %.not1.i, float %133, float %134, !dbg !53
  %135 = tail call float @llvm.nvvm.fma.rn.f(float %132, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !53
  %136 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %132, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !53
  %.05.i = select i1 %.not2.i, float %135, float %136, !dbg !53
  %137 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !53
  %138 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !53
  %.07.i = select i1 %.not3.i, float %137, float %138, !dbg !53
  %139 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !53
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !53
  %.08.i = select i1 %.not4.i, float %139, float %140, !dbg !53
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !53
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !53
  %.09.i = select i1 %.not5.i, float %141, float %142, !dbg !53
  %143 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !53
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !53
  %.06.i = select i1 %.not6.i, float %143, float %144, !dbg !53
  %145 = fmul float %.05.i, %.06.i, !dbg !53
  %146 = tail call float @llvm.nvvm.fma.rn.f(float %145, float %.05.i, float %.05.i) #3, !dbg !53
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %145, float %.05.i, float %.05.i) #3, !dbg !53
  %.01.i = select i1 %.not7.i, float %146, float %147, !dbg !53
  %148 = fadd float %.0.i, -1.000000e+00, !dbg !53
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i, float %148) #3, !dbg !53
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i, float %148) #3, !dbg !53
  %.02.i = select i1 %.not9.i, float %149, float %150, !dbg !53
  %151 = fadd float %.02.i, %.02.i, !dbg !53
  %u.0.i = select i1 %97, float %151, float %.02.i, !dbg !53
  %u.1.i = select i1 %131, float 0x7FF0000000000000, float %u.0.i, !dbg !53
  %u.2.i = select i1 %130, float -1.000000e+00, float %u.1.i, !dbg !53
  %u.3.i = select i1 %128, float %129, float %u.2.i, !dbg !53
  %152 = fcmp ogt float %88, 0.000000e+00, !dbg !54
  %153 = fcmp ogt float %87, 0.000000e+00, !dbg !54
  %154 = extractvalue { i32, i32 } %71, 1, !dbg !42
  %155 = bitcast i32 %154 to float, !dbg !42
  %156 = extractvalue { i32, i32 } %60, 1, !dbg !37
  %157 = bitcast i32 %156 to float, !dbg !37
  %158 = fsub float %155, %157, !dbg !55
  %159 = bitcast i32 %74 to float, !dbg !44
  %160 = fmul float %158, %159, !dbg !56
  %161 = fadd float %160, %157, !dbg !57
  %162 = bitcast i32 %39 to float, !dbg !27
  %163 = fsub float %161, %162, !dbg !58
  %164 = bitcast i32 %77 to float, !dbg !46
  %165 = fmul float %163, %164, !dbg !59
  %166 = fadd float %165, %162, !dbg !60
  %167 = extractvalue { i32, i32 } %71, 0, !dbg !42
  %168 = bitcast i32 %167 to float, !dbg !42
  %169 = extractvalue { i32, i32 } %60, 0, !dbg !37
  %170 = bitcast i32 %169 to float, !dbg !37
  %171 = fsub float %168, %170, !dbg !55
  %172 = bitcast i32 %73 to float, !dbg !44
  %173 = fmul float %171, %172, !dbg !56
  %174 = fadd float %173, %170, !dbg !57
  %175 = bitcast i32 %38 to float, !dbg !27
  %176 = fsub float %174, %175, !dbg !58
  %177 = bitcast i32 %76 to float, !dbg !46
  %178 = fmul float %176, %177, !dbg !59
  %179 = fadd float %178, %175, !dbg !60
  %.not7.i8 = icmp eq i32 %122, 0, !dbg !53
  %.not6.i9 = icmp eq i32 %121, 0, !dbg !53
  %.not5.i10 = icmp eq i32 %120, 0, !dbg !53
  %.not4.i11 = icmp eq i32 %119, 0, !dbg !53
  %.not3.i12 = icmp eq i32 %118, 0, !dbg !53
  %.not2.i13 = icmp eq i32 %116, 0, !dbg !53
  %180 = fneg float %t.0.i4, !dbg !53
  %.not1.i14 = icmp eq i32 %115, 0, !dbg !53
  %181 = tail call float @llvm.nvvm.fma.rn.f(float %180, float 0x3FE62E4000000000, float %88) #3, !dbg !53
  %182 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %180, float 0x3FE62E4000000000, float %88) #3, !dbg !53
  %.04.i15 = select i1 %.not1.i14, float %181, float %182, !dbg !53
  %183 = tail call float @llvm.nvvm.fma.rn.f(float %180, float 0x3EB7F7D1C0000000, float %.04.i15) #3, !dbg !53
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %180, float 0x3EB7F7D1C0000000, float %.04.i15) #3, !dbg !53
  %.05.i16 = select i1 %.not2.i13, float %183, float %184, !dbg !53
  %185 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i16, float 0x3F812ACC60000000) #3, !dbg !53
  %186 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i16, float 0x3F812ACC60000000) #3, !dbg !53
  %.07.i17 = select i1 %.not3.i12, float %185, float %186, !dbg !53
  %187 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i17, float %.05.i16, float 0x3FA5557C60000000) #3, !dbg !53
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i17, float %.05.i16, float 0x3FA5557C60000000) #3, !dbg !53
  %.08.i18 = select i1 %.not4.i11, float %187, float %188, !dbg !53
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i18, float %.05.i16, float 0x3FC5553EC0000000) #3, !dbg !53
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i18, float %.05.i16, float 0x3FC5553EC0000000) #3, !dbg !53
  %.09.i19 = select i1 %.not5.i10, float %189, float %190, !dbg !53
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i19, float %.05.i16, float 0x3FDFFFFFC0000000) #3, !dbg !53
  %192 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i19, float %.05.i16, float 0x3FDFFFFFC0000000) #3, !dbg !53
  %.06.i20 = select i1 %.not6.i9, float %191, float %192, !dbg !53
  %193 = fmul float %.05.i16, %.06.i20, !dbg !53
  %194 = tail call float @llvm.nvvm.fma.rn.f(float %193, float %.05.i16, float %.05.i16) #3, !dbg !53
  %195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %193, float %.05.i16, float %.05.i16) #3, !dbg !53
  %.01.i21 = select i1 %.not7.i8, float %194, float %195, !dbg !53
  %196 = fadd float %.0.i7, -1.000000e+00, !dbg !53
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not9.i22 = icmp eq i32 %197, 0, !dbg !53
  %198 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i21, float %.0.i7, float %196) #3, !dbg !53
  %199 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i21, float %.0.i7, float %196) #3, !dbg !53
  %.02.i23 = select i1 %.not9.i22, float %199, float %198, !dbg !53
  %200 = fadd float %.02.i23, %.02.i23, !dbg !53
  %u.0.i24 = select i1 %117, float %200, float %.02.i23, !dbg !53
  %201 = fcmp ogt float %j.0.i5, 1.280000e+02, !dbg !53
  %u.1.i25 = select i1 %201, float 0x7FF0000000000000, float %u.0.i24, !dbg !53
  %202 = fcmp olt float %j.0.i5, -2.500000e+01, !dbg !53
  %u.2.i26 = select i1 %202, float -1.000000e+00, float %u.1.i25, !dbg !53
  %203 = fcmp oeq float %88, 0.000000e+00, !dbg !53
  %204 = fadd float %88, %88, !dbg !53
  %u.3.i27 = select i1 %203, float %204, float %u.2.i26, !dbg !53
  %205 = select i1 %153, float %87, float %u.3.i, !dbg !61
  %206 = select i1 %152, float %88, float %u.3.i27, !dbg !61
  %207 = select i1 %27, float %179, float %205, !dbg !62
  %208 = select i1 %27, float %166, float %206, !dbg !62
  %209 = sext i32 %16 to i64, !dbg !63
  %210 = getelementptr float, ptr addrspace(1) %8, i64 %209, !dbg !63
  %211 = bitcast float %207 to i32, !dbg !64
  %212 = bitcast float %208 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %211, i32 %212, ptr addrspace(1) %210, i1 true) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6nqvo73xspqlsalbop6turzfmo7pq73fuxrfopniktf5sxnqtbe.py", directory: "inductor_cache/6n")
!4 = !{ptr @triton_poi_fused_cat_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_31, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_31", linkageName: "triton_poi_fused_cat_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 28, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 27, column: 29, scope: !7)
!20 = !DILocation(line: 28, column: 28, scope: !7)
!21 = !DILocation(line: 35, column: 18, scope: !7)
!22 = !DILocation(line: 36, column: 39, scope: !7)
!23 = !DILocation(line: 36, column: 51, scope: !7)
!24 = !DILocation(line: 36, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 45, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 56, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 35, scope: !7)
!30 = !DILocation(line: 41, column: 33, scope: !7)
!31 = !DILocation(line: 42, column: 31, scope: !7)
!32 = !DILocation(line: 42, column: 36, scope: !7)
!33 = !DILocation(line: 45, column: 35, scope: !7)
!34 = !DILocation(line: 46, column: 48, scope: !7)
!35 = !DILocation(line: 46, column: 56, scope: !7)
!36 = !DILocation(line: 46, column: 31, scope: !7)
!37 = !DILocation(line: 46, column: 74, scope: !7)
!38 = !DILocation(line: 47, column: 31, scope: !7)
!39 = !DILocation(line: 47, column: 36, scope: !7)
!40 = !DILocation(line: 50, column: 35, scope: !7)
!41 = !DILocation(line: 51, column: 31, scope: !7)
!42 = !DILocation(line: 51, column: 74, scope: !7)
!43 = !DILocation(line: 53, column: 31, scope: !7)
!44 = !DILocation(line: 53, column: 36, scope: !7)
!45 = !DILocation(line: 57, column: 31, scope: !7)
!46 = !DILocation(line: 57, column: 36, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 65, column: 35, scope: !7)
!49 = !DILocation(line: 65, column: 50, scope: !7)
!50 = !DILocation(line: 65, column: 41, scope: !7)
!51 = !DILocation(line: 65, column: 31, scope: !7)
!52 = !DILocation(line: 65, column: 56, scope: !7)
!53 = !DILocation(line: 70, column: 28, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 55, column: 20, scope: !7)
!58 = !DILocation(line: 56, column: 20, scope: !7)
!59 = !DILocation(line: 58, column: 20, scope: !7)
!60 = !DILocation(line: 59, column: 19, scope: !7)
!61 = !DILocation(line: 72, column: 35, scope: !7)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 76, column: 25, scope: !7)
!64 = !DILocation(line: 76, column: 37, scope: !7)
!65 = !DILocation(line: 76, column: 4, scope: !7)
