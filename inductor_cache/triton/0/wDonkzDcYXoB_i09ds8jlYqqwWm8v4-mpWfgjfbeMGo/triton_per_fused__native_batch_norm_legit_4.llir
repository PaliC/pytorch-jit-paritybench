; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 24, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %13, 1024, !dbg !14
  %15 = lshr i32 %8, 5, !dbg !15
  %16 = shl i32 %8, 5, !dbg !16
  %17 = and i32 %16, 3840, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %18 = sdiv i32 %.frozen, 256, !dbg !17
  %19 = shl i32 %18, 12, !dbg !18
  %20 = mul i32 %18, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %20, !dbg !19
  %21 = add nsw i32 %.decomposed, %17, !dbg !20
  %22 = add i32 %21, %19, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !22
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !23
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !23
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !23
  %30 = bitcast i32 %26 to float, !dbg !23
  %31 = bitcast i32 %27 to float, !dbg !23
  %32 = bitcast i32 %28 to float, !dbg !23
  %33 = bitcast i32 %29 to float, !dbg !23
  %34 = select i1 %14, float %30, float 0.000000e+00, !dbg !24
  %35 = select i1 %14, float %31, float 0.000000e+00, !dbg !24
  %36 = select i1 %14, float %32, float 0.000000e+00, !dbg !24
  %37 = select i1 %14, float %33, float 0.000000e+00, !dbg !24
  %38 = bitcast float %34 to i32, !dbg !25
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 16, i32 31), !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = fadd float %34, %40, !dbg !29
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 8, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !29
  %46 = bitcast float %35 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 16, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fadd float %35, %48, !dbg !29
  %50 = bitcast float %49 to i32, !dbg !25
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 8, i32 31), !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = fadd float %49, %52, !dbg !29
  %54 = bitcast float %36 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 16, i32 31), !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = fadd float %36, %56, !dbg !29
  %58 = bitcast float %57 to i32, !dbg !25
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 8, i32 31), !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = fadd float %57, %60, !dbg !29
  %62 = bitcast float %37 to i32, !dbg !25
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 16, i32 31), !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = fadd float %37, %64, !dbg !29
  %66 = bitcast float %65 to i32, !dbg !25
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 8, i32 31), !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = fadd float %65, %68, !dbg !29
  %70 = icmp eq i32 %9, 0, !dbg !25
  %71 = and i32 %15, 3, !dbg !25
  %72 = shl nuw nsw i32 %11, 2, !dbg !25
  %73 = or disjoint i32 %72, %71, !dbg !25
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !25
  %75 = bitcast float %45 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 %70) #5, !dbg !25
  %76 = or disjoint i32 %72, 4, !dbg !25
  %77 = or disjoint i32 %76, %71, !dbg !25
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !25
  %79 = bitcast float %53 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 %70) #5, !dbg !25
  %80 = or disjoint i32 %72, 8, !dbg !25
  %81 = or disjoint i32 %80, %71, !dbg !25
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !25
  %83 = bitcast float %61 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 %70) #5, !dbg !25
  %84 = or disjoint i32 %72, 12, !dbg !25
  %85 = or disjoint i32 %84, %71, !dbg !25
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !25
  %87 = bitcast float %69 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 %70) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %88 = icmp slt i32 %8, 128, !dbg !25
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !25
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %88) #5, !dbg !25
  %91 = bitcast i32 %90 to float, !dbg !25
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !25
  %93 = bitcast i32 %92 to float, !dbg !25
  %94 = fadd float %91, %93, !dbg !29
  %95 = bitcast float %94 to i32, !dbg !25
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !25
  %97 = bitcast i32 %96 to float, !dbg !25
  %98 = fadd float %94, %97, !dbg !29
  %99 = and i32 %8, 3, !dbg !25
  %100 = icmp eq i32 %99, 0, !dbg !25
  %101 = and i1 %88, %100, !dbg !25
  %102 = bitcast float %98 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %102, i1 %101) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !25
  %104 = load float, ptr addrspace(3) %103, align 16, !dbg !25
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !25
  %106 = load float, ptr addrspace(3) %105, align 16, !dbg !25
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !25
  %108 = load float, ptr addrspace(3) %107, align 16, !dbg !25
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !25
  %110 = load float, ptr addrspace(3) %109, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %112 = bitcast float %104 to i32, !dbg !31
  %113 = bitcast float %106 to i32, !dbg !31
  %114 = bitcast float %108 to i32, !dbg !31
  %115 = bitcast float %110 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %111, i32 %112, i32 %113, i32 %114, i32 %115, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %117 = load float, ptr addrspace(3) %116, align 4, !dbg !31
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float 1.600000e+01) #5, !dbg !31
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 1.600000e+01) #5, !dbg !31
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 1.600000e+01) #5, !dbg !31
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float 1.600000e+01) #5, !dbg !31
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 1.600000e+01) #5, !dbg !31
  %123 = fsub float %30, %119, !dbg !32
  %124 = fsub float %31, %120, !dbg !32
  %125 = fsub float %32, %121, !dbg !32
  %126 = fsub float %33, %122, !dbg !32
  %127 = fmul float %123, %123, !dbg !33
  %128 = fmul float %124, %124, !dbg !33
  %129 = fmul float %125, %125, !dbg !33
  %130 = fmul float %126, %126, !dbg !33
  %131 = select i1 %14, float %127, float 0.000000e+00, !dbg !34
  %132 = select i1 %14, float %128, float 0.000000e+00, !dbg !34
  %133 = select i1 %14, float %129, float 0.000000e+00, !dbg !34
  %134 = select i1 %14, float %130, float 0.000000e+00, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %135 = bitcast float %131 to i32, !dbg !35
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !35
  %137 = bitcast i32 %136 to float, !dbg !35
  %138 = fadd float %131, %137, !dbg !37
  %139 = bitcast float %138 to i32, !dbg !35
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !35
  %141 = bitcast i32 %140 to float, !dbg !35
  %142 = fadd float %138, %141, !dbg !37
  %143 = bitcast float %132 to i32, !dbg !35
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 16, i32 31), !dbg !35
  %145 = bitcast i32 %144 to float, !dbg !35
  %146 = fadd float %132, %145, !dbg !37
  %147 = bitcast float %146 to i32, !dbg !35
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 8, i32 31), !dbg !35
  %149 = bitcast i32 %148 to float, !dbg !35
  %150 = fadd float %146, %149, !dbg !37
  %151 = bitcast float %133 to i32, !dbg !35
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 16, i32 31), !dbg !35
  %153 = bitcast i32 %152 to float, !dbg !35
  %154 = fadd float %133, %153, !dbg !37
  %155 = bitcast float %154 to i32, !dbg !35
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 8, i32 31), !dbg !35
  %157 = bitcast i32 %156 to float, !dbg !35
  %158 = fadd float %154, %157, !dbg !37
  %159 = bitcast float %134 to i32, !dbg !35
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 16, i32 31), !dbg !35
  %161 = bitcast i32 %160 to float, !dbg !35
  %162 = fadd float %134, %161, !dbg !37
  %163 = bitcast float %162 to i32, !dbg !35
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 8, i32 31), !dbg !35
  %165 = bitcast i32 %164 to float, !dbg !35
  %166 = fadd float %162, %165, !dbg !37
  %167 = bitcast float %142 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %167, i1 %70) #5, !dbg !35
  %168 = bitcast float %150 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %168, i1 %70) #5, !dbg !35
  %169 = bitcast float %158 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %169, i1 %70) #5, !dbg !35
  %170 = bitcast float %166 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %170, i1 %70) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %171 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %88) #5, !dbg !35
  %172 = bitcast i32 %171 to float, !dbg !35
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 2, i32 31), !dbg !35
  %174 = bitcast i32 %173 to float, !dbg !35
  %175 = fadd float %172, %174, !dbg !37
  %176 = bitcast float %175 to i32, !dbg !35
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 1, i32 31), !dbg !35
  %178 = bitcast i32 %177 to float, !dbg !35
  %179 = fadd float %175, %178, !dbg !37
  %180 = bitcast float %179 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %180, i1 %101) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %181 = load i32, ptr addrspace(3) %103, align 16, !dbg !35
  %182 = load i32, ptr addrspace(3) %105, align 16, !dbg !35
  %183 = load i32, ptr addrspace(3) %107, align 16, !dbg !35
  %184 = load i32, ptr addrspace(3) %109, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %111, i32 %181, i32 %182, i32 %183, i32 %184, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %185 = load float, ptr addrspace(3) %116, align 4, !dbg !38
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float 1.600000e+01) #5, !dbg !39
  %187 = fadd float %186, 0x3EE4F8B580000000, !dbg !40
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %188, 0, !dbg !38
  br i1 %.not.i, label %191, label %189, !dbg !38

189:                                              ; preds = %5
  %190 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %187), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

191:                                              ; preds = %5
  %192 = tail call float @llvm.nvvm.rsqrt.approx.f(float %187), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %189, %191
  %.0.i = phi float [ %190, %189 ], [ %192, %191 ], !dbg !38
  %193 = or disjoint i32 %7, %12, !dbg !13
  %194 = icmp slt i32 %193, 1024, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %195 = sext i32 %193 to i64, !dbg !42
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !42
  %197 = icmp eq i32 %71, 0, !dbg !43
  %198 = bitcast float %.0.i to i32, !dbg !43
  %199 = and i1 %197, %194, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %196, i1 %199) #5, !dbg !43
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %195, !dbg !44
  %201 = bitcast float %118 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %201, ptr addrspace(1) %200, i1 %199) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c35kv2sk2oppy7p5hwwypouuztvuwladtncutc4yf6mianxyzgyl.py", directory: "inductor_cache/35")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_4", linkageName: "triton_per_fused__native_batch_norm_legit_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 45, scope: !7)
!19 = !DILocation(line: 31, column: 65, scope: !7)
!20 = !DILocation(line: 31, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 60, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 73, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !36)
!36 = !DILocation(line: 44, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !36)
!38 = !DILocation(line: 49, column: 28, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 4, scope: !7)
!42 = !DILocation(line: 51, column: 28, scope: !7)
!43 = !DILocation(line: 51, column: 40, scope: !7)
!44 = !DILocation(line: 52, column: 25, scope: !7)
!45 = !DILocation(line: 52, column: 37, scope: !7)
!46 = !DILocation(line: 52, column: 4, scope: !7)
