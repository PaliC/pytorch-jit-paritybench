; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__safe_softmax_3(ptr addrspace(1) %0, i32 %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 5, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = lshr i32 %6, 2, !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 256, !dbg !14
  %11 = shl i32 %6, 2, !dbg !15
  %12 = and i32 %11, 12, !dbg !15
  %13 = shl i32 %9, 4, !dbg !16
  %14 = or disjoint i32 %13, %12, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #2, !dbg !19
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !19
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !19
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !19
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !19
  %22 = insertelement <4 x i32> poison, i32 %18, i64 0, !dbg !19
  %23 = insertelement <4 x i32> %22, i32 %19, i64 1, !dbg !19
  %24 = insertelement <4 x i32> %23, i32 %20, i64 2, !dbg !19
  %25 = insertelement <4 x i32> %24, i32 %21, i64 3, !dbg !19
  %26 = bitcast <4 x i32> %25 to <4 x float>, !dbg !19
  %27 = bitcast i32 %18 to float, !dbg !20
  %28 = select i1 %10, float %27, float 0xFFF0000000000000, !dbg !20
  %29 = bitcast i32 %19 to float, !dbg !20
  %30 = select i1 %10, float %29, float 0xFFF0000000000000, !dbg !20
  %31 = bitcast i32 %20 to float, !dbg !20
  %32 = select i1 %10, float %31, float 0xFFF0000000000000, !dbg !20
  %33 = bitcast i32 %21 to float, !dbg !20
  %34 = select i1 %10, float %33, float 0xFFF0000000000000, !dbg !20
  %35 = fcmp ogt float %28, %30, !dbg !21
  %36 = fcmp uno float %28, 0.000000e+00, !dbg !26
  %37 = or i1 %35, %36, !dbg !27
  %38 = select i1 %37, float %28, float %30, !dbg !28
  %39 = fcmp ogt float %38, %32, !dbg !21
  %40 = fcmp uno float %38, 0.000000e+00, !dbg !26
  %41 = or i1 %39, %40, !dbg !27
  %42 = select i1 %41, float %38, float %32, !dbg !28
  %43 = fcmp ogt float %42, %34, !dbg !21
  %44 = fcmp uno float %42, 0.000000e+00, !dbg !26
  %45 = or i1 %43, %44, !dbg !27
  %46 = select i1 %45, float %42, float %34, !dbg !28
  %47 = bitcast float %46 to i32, !dbg !29
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 2, i32 31), !dbg !29
  %49 = bitcast i32 %48 to float, !dbg !29
  %50 = fcmp ogt float %46, %49, !dbg !21
  %51 = fcmp uno float %46, 0.000000e+00, !dbg !26
  %52 = or i1 %50, %51, !dbg !27
  %53 = select i1 %52, float %46, float %49, !dbg !28
  %54 = bitcast float %53 to i32, !dbg !29
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !29
  %56 = bitcast i32 %55 to float, !dbg !29
  %57 = fcmp ogt float %53, %56, !dbg !21
  %58 = fcmp uno float %53, 0.000000e+00, !dbg !26
  %59 = or i1 %57, %58, !dbg !27
  %60 = select i1 %59, float %53, float %56, !dbg !28
  %61 = fsub float %27, %60, !dbg !30
  %62 = fsub float %29, %60, !dbg !30
  %63 = fsub float %31, %60, !dbg !30
  %64 = fsub float %33, %60, !dbg !30
  %65 = fmul float %61, 0x3FF7154760000000, !dbg !31
  %66 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %65) #2, !dbg !31
  %67 = fmul float %62, 0x3FF7154760000000, !dbg !31
  %68 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %67) #2, !dbg !31
  %69 = fmul float %63, 0x3FF7154760000000, !dbg !31
  %70 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #2, !dbg !31
  %71 = fmul float %64, 0x3FF7154760000000, !dbg !31
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #2, !dbg !31
  %73 = fadd float %66, %68, !dbg !32
  %74 = fadd float %73, %70, !dbg !32
  %75 = fadd float %74, %72, !dbg !32
  %76 = select i1 %10, float %75, float 0.000000e+00, !dbg !32
  %77 = bitcast float %76 to i32, !dbg !37
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !37
  %79 = bitcast i32 %78 to float, !dbg !37
  %80 = fadd float %76, %79, !dbg !32
  %81 = bitcast float %80 to i32, !dbg !37
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !37
  %83 = bitcast i32 %82 to float, !dbg !37
  %84 = fadd float %80, %83, !dbg !32
  %85 = fcmp une <4 x float> %26, splat (float 0xFFF0000000000000), !dbg !38
  %86 = bitcast <4 x i1> %85 to i4, !dbg !39
  %87 = icmp ne i4 %86, 0, !dbg !39
  %88 = select i1 %10, i1 %87, i1 false, !dbg !39
  %89 = zext i1 %88 to i32, !dbg !39
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !41
  %91 = or i32 %90, %89, !dbg !39
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 1, i32 31), !dbg !41
  %93 = or i32 %91, %92, !dbg !39
  %94 = icmp eq i32 %93, 0, !dbg !42
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %84) #2, !dbg !43
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %84) #2, !dbg !43
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float %84) #2, !dbg !43
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %84) #2, !dbg !43
  %99 = bitcast float %95 to i32, !dbg !44
  %100 = select i1 %94, i32 0, i32 %99, !dbg !45
  %101 = bitcast float %96 to i32, !dbg !44
  %102 = select i1 %94, i32 0, i32 %101, !dbg !45
  %103 = bitcast float %97 to i32, !dbg !44
  %104 = select i1 %94, i32 0, i32 %103, !dbg !45
  %105 = bitcast float %98 to i32, !dbg !44
  %106 = select i1 %94, i32 0, i32 %105, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %100, i32 %102, i32 %104, i32 %106, ptr addrspace(1) %16, i1 %10) #2, !dbg !44
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4vuc7wa46amuu4dvt45eeos44z7bc6b6n7apnghpv5hcgse7utj.py", directory: "inductor_cache/4v")
!4 = !{ptr @triton_per_fused__safe_softmax_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__safe_softmax_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__safe_softmax_3", linkageName: "triton_per_fused__safe_softmax_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 34, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 131, column: 29, scope: !24, inlinedAt: !25)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 23, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 39, column: 25, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 41, column: 20, scope: !7)
!39 = !DILocation(line: 227, column: 15, scope: !22, inlinedAt: !40)
!40 = !DILocation(line: 47, column: 38, scope: !7)
!41 = !DILocation(line: 232, column: 29, scope: !24, inlinedAt: !40)
!42 = !DILocation(line: 48, column: 21, scope: !7)
!43 = !DILocation(line: 49, column: 19, scope: !7)
!44 = !DILocation(line: 52, column: 48, scope: !7)
!45 = !DILocation(line: 51, column: 35, scope: !7)
!46 = !DILocation(line: 52, column: 4, scope: !7)
