; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 4, !dbg !15
  %.lobit4 = lshr i32 %11, 6, !dbg !16
  %19 = and i32 %.lobit4, 3, !dbg !16
  %20 = or disjoint i32 %18, %19, !dbg !17
  %21 = or disjoint i32 %20, 4, !dbg !17
  %22 = or disjoint i32 %20, 8, !dbg !17
  %23 = or disjoint i32 %20, 12, !dbg !17
  %24 = icmp slt i32 %20, 961, !dbg !18
  %25 = icmp slt i32 %21, 961, !dbg !18
  %26 = icmp slt i32 %22, 961, !dbg !18
  %27 = icmp slt i32 %23, 961, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %28 = sdiv i32 %.frozen, 256, !dbg !19
  %29 = mul i32 %28, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = srem i32 %16, 256, !dbg !20
  %31 = shl i32 %20, 8, !dbg !21
  %32 = shl i32 %21, 8, !dbg !21
  %33 = shl i32 %22, 8, !dbg !21
  %34 = shl i32 %23, 8, !dbg !21
  %35 = mul i32 %28, 246016, !dbg !22
  %36 = add i32 %35, %.decomposed, !dbg !23
  %37 = add i32 %36, %31, !dbg !24
  %38 = add i32 %36, %32, !dbg !24
  %39 = add i32 %36, %33, !dbg !24
  %40 = add i32 %36, %34, !dbg !24
  %41 = sext i32 %37 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %38 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %39 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = sext i32 %40 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %25) #4, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %26) #4, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %27) #4, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = and i32 %12, 1020, !dbg !26
  %70 = lshr i32 %12, 6, !dbg !26
  %71 = and i32 %70, 12, !dbg !26
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !26
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %69, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %50, i32 %51, i32 %52, i32 %53, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !26
  %75 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %76 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 1040, !dbg !26
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %78 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 2080, !dbg !26
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %80 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 3120, !dbg !26
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %55, i32 %56, i32 %57, i32 %58, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %82 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %83 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %84 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %85 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %60, i32 %61, i32 %62, i32 %63, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %86 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %87 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %88 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %89 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %65, i32 %66, i32 %67, i32 %68, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %90 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %91 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %92 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %93 = load float, ptr addrspace(3) %80, align 4, !dbg !26
  %94 = sext i32 %30 to i64, !dbg !27
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !27
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #4, !dbg !28
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !29
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #4, !dbg !30
  %99 = bitcast i32 %98 to float, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #4, !dbg !32
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !33
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #4, !dbg !34
  %104 = fadd float %99, 0x3EE4F8B580000000, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %105, 0, !dbg !36
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %106, 0, !dbg !36
  br i1 %.not.i, label %112, label %107, !dbg !36

107:                                              ; preds = %8
  br i1 %.not1.i, label %110, label %108, !dbg !36

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

112:                                              ; preds = %8
  br i1 %.not1.i, label %115, label %113, !dbg !36

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %108, %110, %113, %115
  %.0.i = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !36
  %117 = or disjoint i32 %14, 768, !dbg !26
  %118 = or disjoint i32 %14, 512, !dbg !26
  %119 = or disjoint i32 %14, 256, !dbg !26
  %120 = lshr i32 %11, 4, !dbg !12
  %121 = and i32 %120, 15, !dbg !12
  %122 = or disjoint i32 %121, %10, !dbg !13
  %123 = or disjoint i32 %122, 240, !dbg !13
  %.frozen5 = freeze i32 %123, !dbg !19
  %124 = sdiv i32 %.frozen5, 256, !dbg !19
  %125 = or disjoint i32 %122, 224, !dbg !13
  %.frozen7 = freeze i32 %125, !dbg !19
  %126 = sdiv i32 %.frozen7, 256, !dbg !19
  %127 = or disjoint i32 %122, 208, !dbg !13
  %.frozen9 = freeze i32 %127, !dbg !19
  %128 = sdiv i32 %.frozen9, 256, !dbg !19
  %129 = or disjoint i32 %122, 192, !dbg !13
  %.frozen11 = freeze i32 %129, !dbg !19
  %130 = sdiv i32 %.frozen11, 256, !dbg !19
  %131 = or disjoint i32 %122, 176, !dbg !13
  %.frozen13 = freeze i32 %131, !dbg !19
  %132 = sdiv i32 %.frozen13, 256, !dbg !19
  %133 = or disjoint i32 %122, 160, !dbg !13
  %.frozen15 = freeze i32 %133, !dbg !19
  %134 = sdiv i32 %.frozen15, 256, !dbg !19
  %135 = or disjoint i32 %122, 144, !dbg !13
  %.frozen17 = freeze i32 %135, !dbg !19
  %136 = sdiv i32 %.frozen17, 256, !dbg !19
  %137 = or disjoint i32 %122, 128, !dbg !13
  %.frozen19 = freeze i32 %137, !dbg !19
  %138 = sdiv i32 %.frozen19, 256, !dbg !19
  %139 = or disjoint i32 %122, 112, !dbg !13
  %.frozen21 = freeze i32 %139, !dbg !19
  %140 = sdiv i32 %.frozen21, 256, !dbg !19
  %141 = or disjoint i32 %122, 96, !dbg !13
  %.frozen23 = freeze i32 %141, !dbg !19
  %142 = sdiv i32 %.frozen23, 256, !dbg !19
  %143 = or disjoint i32 %122, 80, !dbg !13
  %.frozen25 = freeze i32 %143, !dbg !19
  %144 = sdiv i32 %.frozen25, 256, !dbg !19
  %145 = or disjoint i32 %122, 64, !dbg !13
  %.frozen27 = freeze i32 %145, !dbg !19
  %146 = sdiv i32 %.frozen27, 256, !dbg !19
  %147 = or disjoint i32 %122, 48, !dbg !13
  %.frozen29 = freeze i32 %147, !dbg !19
  %148 = sdiv i32 %.frozen29, 256, !dbg !19
  %149 = or disjoint i32 %122, 32, !dbg !13
  %.frozen31 = freeze i32 %149, !dbg !19
  %150 = sdiv i32 %.frozen31, 256, !dbg !19
  %151 = or disjoint i32 %122, 16, !dbg !13
  %.frozen33 = freeze i32 %151, !dbg !19
  %152 = sdiv i32 %.frozen33, 256, !dbg !19
  %.frozen35 = freeze i32 %122, !dbg !19
  %153 = sdiv i32 %.frozen35, 256, !dbg !19
  %154 = mul i32 %124, 256, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %154, !dbg !20
  %155 = mul i32 %126, 256, !dbg !20
  %.decomposed8 = sub i32 %.frozen7, %155, !dbg !20
  %156 = mul i32 %128, 256, !dbg !20
  %.decomposed10 = sub i32 %.frozen9, %156, !dbg !20
  %157 = mul i32 %130, 256, !dbg !20
  %.decomposed12 = sub i32 %.frozen11, %157, !dbg !20
  %158 = mul i32 %132, 256, !dbg !20
  %.decomposed14 = sub i32 %.frozen13, %158, !dbg !20
  %159 = mul i32 %134, 256, !dbg !20
  %.decomposed16 = sub i32 %.frozen15, %159, !dbg !20
  %160 = mul i32 %136, 256, !dbg !20
  %.decomposed18 = sub i32 %.frozen17, %160, !dbg !20
  %161 = mul i32 %138, 256, !dbg !20
  %.decomposed20 = sub i32 %.frozen19, %161, !dbg !20
  %162 = mul i32 %140, 256, !dbg !20
  %.decomposed22 = sub i32 %.frozen21, %162, !dbg !20
  %163 = mul i32 %142, 256, !dbg !20
  %.decomposed24 = sub i32 %.frozen23, %163, !dbg !20
  %164 = mul i32 %144, 256, !dbg !20
  %.decomposed26 = sub i32 %.frozen25, %164, !dbg !20
  %165 = mul i32 %146, 256, !dbg !20
  %.decomposed28 = sub i32 %.frozen27, %165, !dbg !20
  %166 = mul i32 %148, 256, !dbg !20
  %.decomposed30 = sub i32 %.frozen29, %166, !dbg !20
  %167 = mul i32 %150, 256, !dbg !20
  %.decomposed32 = sub i32 %.frozen31, %167, !dbg !20
  %168 = mul i32 %152, 256, !dbg !20
  %.decomposed34 = sub i32 %.frozen33, %168, !dbg !20
  %169 = mul i32 %153, 256, !dbg !20
  %.decomposed36 = sub i32 %.frozen35, %169, !dbg !20
  %170 = and i32 %11, 15, !dbg !12
  %171 = or disjoint i32 %18, %170, !dbg !17
  %172 = icmp slt i32 %171, 961, !dbg !18
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %174 = insertelement <16 x float> poison, float %93, i64 0, !dbg !38
  %175 = insertelement <16 x float> %174, float %92, i64 1, !dbg !38
  %176 = insertelement <16 x float> %175, float %91, i64 2, !dbg !38
  %177 = insertelement <16 x float> %176, float %90, i64 3, !dbg !38
  %178 = insertelement <16 x float> %177, float %89, i64 4, !dbg !38
  %179 = insertelement <16 x float> %178, float %88, i64 5, !dbg !38
  %180 = insertelement <16 x float> %179, float %87, i64 6, !dbg !38
  %181 = insertelement <16 x float> %180, float %86, i64 7, !dbg !38
  %182 = insertelement <16 x float> %181, float %85, i64 8, !dbg !38
  %183 = insertelement <16 x float> %182, float %84, i64 9, !dbg !38
  %184 = insertelement <16 x float> %183, float %83, i64 10, !dbg !38
  %185 = insertelement <16 x float> %184, float %82, i64 11, !dbg !38
  %186 = insertelement <16 x float> %185, float %81, i64 12, !dbg !38
  %187 = insertelement <16 x float> %186, float %79, i64 13, !dbg !38
  %188 = insertelement <16 x float> %187, float %77, i64 14, !dbg !38
  %189 = insertelement <16 x float> %188, float %75, i64 15, !dbg !38
  %190 = insertelement <16 x i32> poison, i32 %96, i64 0, !dbg !38
  %191 = bitcast <16 x i32> %190 to <16 x float>, !dbg !38
  %192 = shufflevector <16 x float> %191, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %193 = fsub <16 x float> %189, %192, !dbg !38
  %194 = insertelement <16 x float> poison, float %173, i64 0, !dbg !39
  %195 = shufflevector <16 x float> %194, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %196 = fmul <16 x float> %193, %195, !dbg !39
  %197 = insertelement <16 x i32> poison, i32 %101, i64 0, !dbg !40
  %198 = bitcast <16 x i32> %197 to <16 x float>, !dbg !40
  %199 = shufflevector <16 x float> %198, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %200 = fmul <16 x float> %196, %199, !dbg !40
  %201 = insertelement <16 x i32> poison, i32 %103, i64 0, !dbg !41
  %202 = bitcast <16 x i32> %201 to <16 x float>, !dbg !41
  %203 = shufflevector <16 x float> %202, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %204 = fadd <16 x float> %200, %203, !dbg !41
  %205 = fcmp olt <16 x float> %204, zeroinitializer, !dbg !42
  %206 = extractelement <16 x i1> %205, i64 15, !dbg !46
  %207 = extractelement <16 x float> %204, i64 15, !dbg !46
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !46
  %209 = extractelement <16 x i1> %205, i64 14, !dbg !46
  %210 = extractelement <16 x float> %204, i64 14, !dbg !46
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !46
  %212 = extractelement <16 x i1> %205, i64 13, !dbg !46
  %213 = extractelement <16 x float> %204, i64 13, !dbg !46
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !46
  %215 = extractelement <16 x i1> %205, i64 12, !dbg !46
  %216 = extractelement <16 x float> %204, i64 12, !dbg !46
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !46
  %218 = extractelement <16 x i1> %205, i64 11, !dbg !46
  %219 = extractelement <16 x float> %204, i64 11, !dbg !46
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !46
  %221 = extractelement <16 x i1> %205, i64 10, !dbg !46
  %222 = extractelement <16 x float> %204, i64 10, !dbg !46
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !46
  %224 = extractelement <16 x i1> %205, i64 9, !dbg !46
  %225 = extractelement <16 x float> %204, i64 9, !dbg !46
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !46
  %227 = extractelement <16 x i1> %205, i64 8, !dbg !46
  %228 = extractelement <16 x float> %204, i64 8, !dbg !46
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !46
  %230 = extractelement <16 x i1> %205, i64 7, !dbg !46
  %231 = extractelement <16 x float> %204, i64 7, !dbg !46
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !46
  %233 = extractelement <16 x i1> %205, i64 6, !dbg !46
  %234 = extractelement <16 x float> %204, i64 6, !dbg !46
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !46
  %236 = extractelement <16 x i1> %205, i64 5, !dbg !46
  %237 = extractelement <16 x float> %204, i64 5, !dbg !46
  %238 = select i1 %236, float 0.000000e+00, float %237, !dbg !46
  %239 = extractelement <16 x i1> %205, i64 4, !dbg !46
  %240 = extractelement <16 x float> %204, i64 4, !dbg !46
  %241 = select i1 %239, float 0.000000e+00, float %240, !dbg !46
  %242 = extractelement <16 x i1> %205, i64 3, !dbg !46
  %243 = extractelement <16 x float> %204, i64 3, !dbg !46
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !46
  %245 = extractelement <16 x i1> %205, i64 2, !dbg !46
  %246 = extractelement <16 x float> %204, i64 2, !dbg !46
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !46
  %248 = extractelement <16 x i1> %205, i64 1, !dbg !46
  %249 = extractelement <16 x float> %204, i64 1, !dbg !46
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !46
  %251 = extractelement <16 x i1> %205, i64 0, !dbg !46
  %252 = extractelement <16 x float> %204, i64 0, !dbg !46
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !46
  %254 = mul nsw i32 %.decomposed36, 961, !dbg !47
  %255 = mul nsw i32 %.decomposed34, 961, !dbg !47
  %256 = mul nsw i32 %.decomposed32, 961, !dbg !47
  %257 = mul nsw i32 %.decomposed30, 961, !dbg !47
  %258 = mul nsw i32 %.decomposed28, 961, !dbg !47
  %259 = mul nsw i32 %.decomposed26, 961, !dbg !47
  %260 = mul nsw i32 %.decomposed24, 961, !dbg !47
  %261 = mul nsw i32 %.decomposed22, 961, !dbg !47
  %262 = mul nsw i32 %.decomposed20, 961, !dbg !47
  %263 = mul nsw i32 %.decomposed18, 961, !dbg !47
  %264 = mul nsw i32 %.decomposed16, 961, !dbg !47
  %265 = mul nsw i32 %.decomposed14, 961, !dbg !47
  %266 = mul nsw i32 %.decomposed12, 961, !dbg !47
  %267 = mul nsw i32 %.decomposed10, 961, !dbg !47
  %268 = mul nsw i32 %.decomposed8, 961, !dbg !47
  %269 = mul nsw i32 %.decomposed6, 961, !dbg !47
  %270 = add i32 %254, %171, !dbg !48
  %271 = add i32 %255, %171, !dbg !48
  %272 = add i32 %256, %171, !dbg !48
  %273 = add i32 %257, %171, !dbg !48
  %274 = add i32 %258, %171, !dbg !48
  %275 = add i32 %259, %171, !dbg !48
  %276 = add i32 %260, %171, !dbg !48
  %277 = add i32 %261, %171, !dbg !48
  %278 = add i32 %262, %171, !dbg !48
  %279 = add i32 %263, %171, !dbg !48
  %280 = add i32 %264, %171, !dbg !48
  %281 = add i32 %265, %171, !dbg !48
  %282 = add i32 %266, %171, !dbg !48
  %283 = add i32 %267, %171, !dbg !48
  %284 = add i32 %268, %171, !dbg !48
  %285 = add i32 %269, %171, !dbg !48
  %286 = mul i32 %153, 1968128, !dbg !49
  %287 = mul i32 %152, 1968128, !dbg !49
  %288 = mul i32 %150, 1968128, !dbg !49
  %289 = mul i32 %148, 1968128, !dbg !49
  %290 = mul i32 %146, 1968128, !dbg !49
  %291 = mul i32 %144, 1968128, !dbg !49
  %292 = mul i32 %142, 1968128, !dbg !49
  %293 = mul i32 %140, 1968128, !dbg !49
  %294 = mul i32 %138, 1968128, !dbg !49
  %295 = mul i32 %136, 1968128, !dbg !49
  %296 = mul i32 %134, 1968128, !dbg !49
  %297 = mul i32 %132, 1968128, !dbg !49
  %298 = mul i32 %130, 1968128, !dbg !49
  %299 = mul i32 %128, 1968128, !dbg !49
  %300 = mul i32 %126, 1968128, !dbg !49
  %301 = mul i32 %124, 1968128, !dbg !49
  %302 = add i32 %270, %286, !dbg !50
  %303 = add i32 %271, %287, !dbg !50
  %304 = add i32 %272, %288, !dbg !50
  %305 = add i32 %273, %289, !dbg !50
  %306 = add i32 %274, %290, !dbg !50
  %307 = add i32 %275, %291, !dbg !50
  %308 = add i32 %276, %292, !dbg !50
  %309 = add i32 %277, %293, !dbg !50
  %310 = add i32 %278, %294, !dbg !50
  %311 = add i32 %279, %295, !dbg !50
  %312 = add i32 %280, %296, !dbg !50
  %313 = add i32 %281, %297, !dbg !50
  %314 = add i32 %282, %298, !dbg !50
  %315 = add i32 %283, %299, !dbg !50
  %316 = add i32 %284, %300, !dbg !50
  %317 = add i32 %285, %301, !dbg !50
  %318 = sext i32 %302 to i64, !dbg !51
  %319 = getelementptr float, ptr addrspace(1) %5, i64 %318, !dbg !51
  %320 = sext i32 %303 to i64, !dbg !51
  %321 = getelementptr float, ptr addrspace(1) %5, i64 %320, !dbg !51
  %322 = sext i32 %304 to i64, !dbg !51
  %323 = getelementptr float, ptr addrspace(1) %5, i64 %322, !dbg !51
  %324 = sext i32 %305 to i64, !dbg !51
  %325 = getelementptr float, ptr addrspace(1) %5, i64 %324, !dbg !51
  %326 = sext i32 %306 to i64, !dbg !51
  %327 = getelementptr float, ptr addrspace(1) %5, i64 %326, !dbg !51
  %328 = sext i32 %307 to i64, !dbg !51
  %329 = getelementptr float, ptr addrspace(1) %5, i64 %328, !dbg !51
  %330 = sext i32 %308 to i64, !dbg !51
  %331 = getelementptr float, ptr addrspace(1) %5, i64 %330, !dbg !51
  %332 = sext i32 %309 to i64, !dbg !51
  %333 = getelementptr float, ptr addrspace(1) %5, i64 %332, !dbg !51
  %334 = sext i32 %310 to i64, !dbg !51
  %335 = getelementptr float, ptr addrspace(1) %5, i64 %334, !dbg !51
  %336 = sext i32 %311 to i64, !dbg !51
  %337 = getelementptr float, ptr addrspace(1) %5, i64 %336, !dbg !51
  %338 = sext i32 %312 to i64, !dbg !51
  %339 = getelementptr float, ptr addrspace(1) %5, i64 %338, !dbg !51
  %340 = sext i32 %313 to i64, !dbg !51
  %341 = getelementptr float, ptr addrspace(1) %5, i64 %340, !dbg !51
  %342 = sext i32 %314 to i64, !dbg !51
  %343 = getelementptr float, ptr addrspace(1) %5, i64 %342, !dbg !51
  %344 = sext i32 %315 to i64, !dbg !51
  %345 = getelementptr float, ptr addrspace(1) %5, i64 %344, !dbg !51
  %346 = sext i32 %316 to i64, !dbg !51
  %347 = getelementptr float, ptr addrspace(1) %5, i64 %346, !dbg !51
  %348 = sext i32 %317 to i64, !dbg !51
  %349 = getelementptr float, ptr addrspace(1) %5, i64 %348, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %350 = shl i32 %11, 4, !dbg !52
  %351 = and i32 %350, 4080, !dbg !52
  %352 = lshr exact i32 %351, 2, !dbg !52
  %353 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %352, !dbg !52
  %354 = getelementptr float, ptr addrspace(3) %353, i32 %351, !dbg !52
  %355 = bitcast float %208 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, <1 x i32> %355, i1 true) #4, !dbg !52
  %356 = or disjoint i32 %351, 1, !dbg !52
  %357 = getelementptr float, ptr addrspace(3) %353, i32 %356, !dbg !52
  %358 = bitcast float %211 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %358, i1 true) #4, !dbg !52
  %359 = or disjoint i32 %351, 2, !dbg !52
  %360 = getelementptr float, ptr addrspace(3) %353, i32 %359, !dbg !52
  %361 = bitcast float %214 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #4, !dbg !52
  %362 = or disjoint i32 %351, 3, !dbg !52
  %363 = getelementptr float, ptr addrspace(3) %353, i32 %362, !dbg !52
  %364 = bitcast float %217 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %364, i1 true) #4, !dbg !52
  %365 = or disjoint i32 %351, 4, !dbg !52
  %366 = getelementptr float, ptr addrspace(3) %353, i32 %365, !dbg !52
  %367 = bitcast float %220 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 true) #4, !dbg !52
  %368 = or disjoint i32 %351, 5, !dbg !52
  %369 = getelementptr float, ptr addrspace(3) %353, i32 %368, !dbg !52
  %370 = bitcast float %223 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 true) #4, !dbg !52
  %371 = or disjoint i32 %351, 6, !dbg !52
  %372 = getelementptr float, ptr addrspace(3) %353, i32 %371, !dbg !52
  %373 = bitcast float %226 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 true) #4, !dbg !52
  %374 = or disjoint i32 %351, 7, !dbg !52
  %375 = getelementptr float, ptr addrspace(3) %353, i32 %374, !dbg !52
  %376 = bitcast float %229 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %376, i1 true) #4, !dbg !52
  %377 = or disjoint i32 %351, 8, !dbg !52
  %378 = getelementptr float, ptr addrspace(3) %353, i32 %377, !dbg !52
  %379 = bitcast float %232 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #4, !dbg !52
  %380 = or disjoint i32 %351, 9, !dbg !52
  %381 = getelementptr float, ptr addrspace(3) %353, i32 %380, !dbg !52
  %382 = bitcast float %235 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #4, !dbg !52
  %383 = or disjoint i32 %351, 10, !dbg !52
  %384 = getelementptr float, ptr addrspace(3) %353, i32 %383, !dbg !52
  %385 = bitcast float %238 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #4, !dbg !52
  %386 = or disjoint i32 %351, 11, !dbg !52
  %387 = getelementptr float, ptr addrspace(3) %353, i32 %386, !dbg !52
  %388 = bitcast float %241 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 true) #4, !dbg !52
  %389 = or disjoint i32 %351, 12, !dbg !52
  %390 = getelementptr float, ptr addrspace(3) %353, i32 %389, !dbg !52
  %391 = bitcast float %244 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %391, i1 true) #4, !dbg !52
  %392 = or disjoint i32 %351, 13, !dbg !52
  %393 = getelementptr float, ptr addrspace(3) %353, i32 %392, !dbg !52
  %394 = bitcast float %247 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 true) #4, !dbg !52
  %395 = or disjoint i32 %351, 14, !dbg !52
  %396 = getelementptr float, ptr addrspace(3) %353, i32 %395, !dbg !52
  %397 = bitcast float %250 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %397, i1 true) #4, !dbg !52
  %398 = or disjoint i32 %351, 15, !dbg !52
  %399 = getelementptr float, ptr addrspace(3) %353, i32 %398, !dbg !52
  %400 = bitcast float %253 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %400, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %401 = lshr i32 %14, 4, !dbg !52
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %401, !dbg !52
  %403 = getelementptr inbounds float, ptr addrspace(3) %402, i32 %14, !dbg !52
  %404 = load i32, ptr addrspace(3) %403, align 4, !dbg !52
  %405 = lshr i32 %119, 4, !dbg !52
  %406 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %405, !dbg !52
  %407 = getelementptr inbounds float, ptr addrspace(3) %406, i32 %119, !dbg !52
  %408 = load i32, ptr addrspace(3) %407, align 4, !dbg !52
  %409 = lshr i32 %118, 4, !dbg !52
  %410 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %409, !dbg !52
  %411 = getelementptr inbounds float, ptr addrspace(3) %410, i32 %118, !dbg !52
  %412 = load i32, ptr addrspace(3) %411, align 4, !dbg !52
  %413 = lshr i32 %117, 4, !dbg !52
  %414 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %413, !dbg !52
  %415 = getelementptr inbounds float, ptr addrspace(3) %414, i32 %117, !dbg !52
  %416 = load i32, ptr addrspace(3) %415, align 4, !dbg !52
  %417 = or disjoint i32 %14, 1024, !dbg !52
  %418 = lshr i32 %417, 4, !dbg !52
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %418, !dbg !52
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %417, !dbg !52
  %421 = load i32, ptr addrspace(3) %420, align 4, !dbg !52
  %422 = or disjoint i32 %14, 1280, !dbg !52
  %423 = lshr i32 %422, 4, !dbg !52
  %424 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %423, !dbg !52
  %425 = getelementptr inbounds float, ptr addrspace(3) %424, i32 %422, !dbg !52
  %426 = load i32, ptr addrspace(3) %425, align 4, !dbg !52
  %427 = or disjoint i32 %14, 1536, !dbg !52
  %428 = lshr i32 %427, 4, !dbg !52
  %429 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %428, !dbg !52
  %430 = getelementptr inbounds float, ptr addrspace(3) %429, i32 %427, !dbg !52
  %431 = load i32, ptr addrspace(3) %430, align 4, !dbg !52
  %432 = or disjoint i32 %14, 1792, !dbg !52
  %433 = lshr i32 %432, 4, !dbg !52
  %434 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %433, !dbg !52
  %435 = getelementptr inbounds float, ptr addrspace(3) %434, i32 %432, !dbg !52
  %436 = load i32, ptr addrspace(3) %435, align 4, !dbg !52
  %437 = or disjoint i32 %14, 2048, !dbg !52
  %438 = lshr i32 %437, 4, !dbg !52
  %439 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %438, !dbg !52
  %440 = getelementptr inbounds float, ptr addrspace(3) %439, i32 %437, !dbg !52
  %441 = load i32, ptr addrspace(3) %440, align 4, !dbg !52
  %442 = or disjoint i32 %14, 2304, !dbg !52
  %443 = lshr i32 %442, 4, !dbg !52
  %444 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %443, !dbg !52
  %445 = getelementptr inbounds float, ptr addrspace(3) %444, i32 %442, !dbg !52
  %446 = load i32, ptr addrspace(3) %445, align 4, !dbg !52
  %447 = or disjoint i32 %14, 2560, !dbg !52
  %448 = lshr i32 %447, 4, !dbg !52
  %449 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %448, !dbg !52
  %450 = getelementptr inbounds float, ptr addrspace(3) %449, i32 %447, !dbg !52
  %451 = load i32, ptr addrspace(3) %450, align 4, !dbg !52
  %452 = or disjoint i32 %14, 2816, !dbg !52
  %453 = lshr i32 %452, 4, !dbg !52
  %454 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %453, !dbg !52
  %455 = getelementptr inbounds float, ptr addrspace(3) %454, i32 %452, !dbg !52
  %456 = load i32, ptr addrspace(3) %455, align 4, !dbg !52
  %457 = or disjoint i32 %14, 3072, !dbg !52
  %458 = lshr i32 %457, 4, !dbg !52
  %459 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %458, !dbg !52
  %460 = getelementptr inbounds float, ptr addrspace(3) %459, i32 %457, !dbg !52
  %461 = load i32, ptr addrspace(3) %460, align 4, !dbg !52
  %462 = or disjoint i32 %14, 3328, !dbg !52
  %463 = lshr i32 %462, 4, !dbg !52
  %464 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %463, !dbg !52
  %465 = getelementptr inbounds float, ptr addrspace(3) %464, i32 %462, !dbg !52
  %466 = load i32, ptr addrspace(3) %465, align 4, !dbg !52
  %467 = or disjoint i32 %14, 3584, !dbg !52
  %468 = lshr i32 %467, 4, !dbg !52
  %469 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %468, !dbg !52
  %470 = getelementptr inbounds float, ptr addrspace(3) %469, i32 %467, !dbg !52
  %471 = load i32, ptr addrspace(3) %470, align 4, !dbg !52
  %472 = or disjoint i32 %14, 3840, !dbg !52
  %473 = lshr i32 %472, 4, !dbg !52
  %474 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %473, !dbg !52
  %475 = getelementptr inbounds float, ptr addrspace(3) %474, i32 %472, !dbg !52
  %476 = load i32, ptr addrspace(3) %475, align 4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %404, ptr addrspace(1) %319, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %408, ptr addrspace(1) %321, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %412, ptr addrspace(1) %323, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %416, ptr addrspace(1) %325, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %421, ptr addrspace(1) %327, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %426, ptr addrspace(1) %329, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %431, ptr addrspace(1) %331, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %436, ptr addrspace(1) %333, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %441, ptr addrspace(1) %335, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %446, ptr addrspace(1) %337, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %451, ptr addrspace(1) %339, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %456, ptr addrspace(1) %341, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %461, ptr addrspace(1) %343, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %466, ptr addrspace(1) %345, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %471, ptr addrspace(1) %347, i1 %172) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %476, ptr addrspace(1) %349, i1 %172) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxfguahipa6vc3fzklyi72y3yd2erpeci3c5l7jv3a56pbj3ipoq.py", directory: "inductor_cache/xf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 51, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 56, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 48, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 49, column: 34, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 47, scope: !7)
!50 = !DILocation(line: 49, column: 39, scope: !7)
!51 = !DILocation(line: 49, column: 25, scope: !7)
!52 = !DILocation(line: 49, column: 59, scope: !7)
!53 = !DILocation(line: 49, column: 4, scope: !7)
