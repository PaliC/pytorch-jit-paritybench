; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = and i32 %10, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %13, 256, !dbg !12
  %16 = or disjoint i32 %13, 384, !dbg !12
  %17 = or disjoint i32 %9, %12, !dbg !13
  %18 = or disjoint i32 %9, %13, !dbg !13
  %19 = or disjoint i32 %9, %14, !dbg !13
  %20 = or disjoint i32 %9, %15, !dbg !13
  %21 = or disjoint i32 %9, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = icmp slt i32 %22, 25, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %24 = sdiv i32 %.frozen, 32, !dbg !16
  %25 = mul i32 %24, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %25, !dbg !17
  %26 = sdiv i32 %18, 32, !dbg !16
  %27 = sdiv i32 %19, 32, !dbg !16
  %28 = sdiv i32 %20, 32, !dbg !16
  %29 = sdiv i32 %21, 32, !dbg !16
  %30 = shl i32 %22, 5, !dbg !18
  %31 = add i32 %.decomposed, %30, !dbg !19
  %32 = mul i32 %24, 800, !dbg !20
  %33 = add i32 %31, %32, !dbg !21
  %34 = sext i32 %33 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %.idx = shl nuw nsw i32 %12, 3, !dbg !23
  %41 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !23
  %42 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %42, i1 true) #2, !dbg !23
  %43 = shl nuw nsw i32 %12, 1, !dbg !23
  %44 = or disjoint i32 %43, 2, !dbg !23
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %44, !dbg !23
  %46 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %46, i1 true) #2, !dbg !23
  %47 = or disjoint i32 %43, 4, !dbg !23
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47, !dbg !23
  %49 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #2, !dbg !23
  %50 = or disjoint i32 %43, 6, !dbg !23
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !23
  %52 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.idx1 = shl nuw nsw i32 %13, 3, !dbg !23
  %53 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !23
  %54 = load float, ptr addrspace(3) %53, align 8, !dbg !23
  %.idx2 = shl nuw nsw i32 %14, 3, !dbg !23
  %55 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !23
  %56 = load float, ptr addrspace(3) %55, align 8, !dbg !23
  %.idx3 = shl nuw nsw i32 %15, 3, !dbg !23
  %57 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !23
  %58 = load float, ptr addrspace(3) %57, align 8, !dbg !23
  %.idx4 = shl nuw nsw i32 %16, 3, !dbg !23
  %59 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !23
  %60 = load float, ptr addrspace(3) %59, align 8, !dbg !23
  %61 = sext i32 %26 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !24
  %63 = sext i32 %27 to i64, !dbg !24
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !24
  %65 = sext i32 %28 to i64, !dbg !24
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !24
  %67 = sext i32 %29 to i64, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #2, !dbg !25
  %76 = bitcast i32 %75 to float, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !26
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #2, !dbg !27
  %82 = bitcast i32 %81 to float, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #2, !dbg !27
  %84 = bitcast i32 %83 to float, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #2, !dbg !27
  %86 = bitcast i32 %85 to float, !dbg !27
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #2, !dbg !27
  %88 = bitcast i32 %87 to float, !dbg !27
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float %82) #2, !dbg !28
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %84) #2, !dbg !28
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %86) #2, !dbg !28
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %88) #2, !dbg !28
  %93 = fmul float %54, %89, !dbg !29
  %94 = fmul float %56, %90, !dbg !29
  %95 = fmul float %58, %91, !dbg !29
  %96 = fmul float %60, %92, !dbg !29
  %97 = mul i32 %18, 25, !dbg !30
  %98 = mul i32 %19, 25, !dbg !30
  %99 = mul i32 %20, 25, !dbg !30
  %100 = mul i32 %21, 25, !dbg !30
  %101 = add i32 %97, %22, !dbg !31
  %102 = add i32 %98, %22, !dbg !31
  %103 = add i32 %99, %22, !dbg !31
  %104 = add i32 %100, %22, !dbg !31
  %105 = sext i32 %101 to i64, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !32
  %107 = sext i32 %102 to i64, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !32
  %109 = sext i32 %103 to i64, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !32
  %111 = sext i32 %104 to i64, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !32
  %113 = bitcast float %93 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %106, i1 %23) #2, !dbg !33
  %114 = bitcast float %94 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %108, i1 %23) #2, !dbg !33
  %115 = bitcast float %95 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %110, i1 %23) #2, !dbg !33
  %116 = bitcast float %96 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %112, i1 %23) #2, !dbg !33
  %117 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !35
  %119 = bitcast float %93 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !35
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !35
  %121 = bitcast float %94 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !35
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !35
  %123 = bitcast float %95 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !35
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !35
  %125 = bitcast float %96 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %.extract = load i32, ptr addrspace(3) %126, align 16, !dbg !35
  %127 = getelementptr inbounds i8, ptr addrspace(3) %126, i32 4, !dbg !35
  %.extract8 = load i32, ptr addrspace(3) %127, align 4, !dbg !35
  %128 = getelementptr inbounds i8, ptr addrspace(3) %126, i32 8, !dbg !35
  %.extract9 = load i32, ptr addrspace(3) %128, align 8, !dbg !35
  %129 = getelementptr inbounds i8, ptr addrspace(3) %126, i32 12, !dbg !35
  %.extract10 = load i32, ptr addrspace(3) %129, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %117, i1 %23) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvabjcmx2fnyssnrkwoxdno5qyrldudxdrc2j65lfoqt7yxr6vyy.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_12", linkageName: "triton_poi_fused__weight_norm_interface_convolution_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 38, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 33, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 25, scope: !7)
!33 = !DILocation(line: 37, column: 44, scope: !7)
!34 = !DILocation(line: 38, column: 25, scope: !7)
!35 = !DILocation(line: 38, column: 53, scope: !7)
!36 = !DILocation(line: 38, column: 4, scope: !7)
