; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_constant_pad_nd_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 64, !dbg !12
  %9 = lshr i32 %7, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %.lobit = lshr exact i32 %8, 6, !dbg !12
  %11 = or disjoint i32 %6, %10, !dbg !13
  %12 = or disjoint i32 %11, 8, !dbg !13
  %13 = or disjoint i32 %6, %.lobit, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 4, !dbg !13
  %16 = or disjoint i32 %13, 6, !dbg !13
  %17 = or disjoint i32 %13, 8, !dbg !13
  %18 = or disjoint i32 %13, 10, !dbg !13
  %19 = or disjoint i32 %13, 12, !dbg !13
  %20 = or disjoint i32 %13, 14, !dbg !13
  %21 = icmp slt i32 %11, 12, !dbg !14
  %22 = icmp slt i32 %12, 12, !dbg !14
  %23 = icmp slt i32 %13, 12, !dbg !14
  %24 = icmp slt i32 %14, 12, !dbg !14
  %25 = icmp slt i32 %15, 12, !dbg !14
  %26 = icmp slt i32 %16, 12, !dbg !14
  %27 = icmp slt i32 %17, 12, !dbg !14
  %28 = icmp slt i32 %18, 12, !dbg !14
  %29 = icmp slt i32 %6, 0, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 6, !dbg !16
  %32 = shl i32 %7, 2, !dbg !17
  %33 = and i32 %32, 60, !dbg !17
  %34 = and i32 %7, 63, !dbg !17
  %35 = or disjoint i32 %31, %33, !dbg !18
  %36 = or disjoint i32 %31, %34, !dbg !18
  %37 = icmp slt i32 %36, 69696, !dbg !19
  %.frozen = freeze i32 %35, !dbg !20
  %38 = sdiv i32 %.frozen, 264, !dbg !20
  %39 = mul i32 %38, 264, !dbg !21
  %.decomposed = sub i32 %.frozen, %39, !dbg !21
  %.frozen3 = freeze i32 %13, !dbg !22
  %40 = sdiv i32 %.frozen3, 3, !dbg !22
  %41 = mul i32 %40, 3, !dbg !23
  %.decomposed4 = sub i32 %.frozen3, %41, !dbg !23
  %.frozen5 = freeze i32 %14, !dbg !22
  %42 = sdiv i32 %.frozen5, 3, !dbg !22
  %43 = mul i32 %42, 3, !dbg !23
  %.decomposed6 = sub i32 %.frozen5, %43, !dbg !23
  %.frozen7 = freeze i32 %15, !dbg !22
  %44 = sdiv i32 %.frozen7, 3, !dbg !22
  %45 = mul i32 %44, 3, !dbg !23
  %.decomposed8 = sub i32 %.frozen7, %45, !dbg !23
  %.frozen9 = freeze i32 %16, !dbg !22
  %46 = sdiv i32 %.frozen9, 3, !dbg !22
  %47 = mul i32 %46, 3, !dbg !23
  %.decomposed10 = sub i32 %.frozen9, %47, !dbg !23
  %.frozen11 = freeze i32 %17, !dbg !22
  %48 = sdiv i32 %.frozen11, 3, !dbg !22
  %49 = mul i32 %48, 3, !dbg !23
  %.decomposed12 = sub i32 %.frozen11, %49, !dbg !23
  %.frozen13 = freeze i32 %18, !dbg !22
  %50 = sdiv i32 %.frozen13, 3, !dbg !22
  %51 = mul i32 %50, 3, !dbg !23
  %.decomposed14 = sub i32 %.frozen13, %51, !dbg !23
  %.frozen15 = freeze i32 %19, !dbg !22
  %52 = sdiv i32 %.frozen15, 3, !dbg !22
  %53 = mul i32 %52, 3, !dbg !23
  %.decomposed16 = sub i32 %.frozen15, %53, !dbg !23
  %.frozen17 = freeze i32 %20, !dbg !22
  %54 = sdiv i32 %.frozen17, 3, !dbg !22
  %55 = mul i32 %54, 3, !dbg !23
  %.decomposed18 = sub i32 %.frozen17, %55, !dbg !23
  %56 = add nsw i32 %.decomposed, -100, !dbg !24
  %57 = icmp ult i32 %56, 64, !dbg !24
  %58 = add nsw i32 %.decomposed, -6500, !dbg !25
  %59 = shl nsw i32 %38, 6, !dbg !26
  %60 = add nsw i32 %58, %59, !dbg !27
  %61 = shl i32 %11, 12, !dbg !28
  %62 = shl i32 %12, 12, !dbg !28
  %63 = add i32 %60, %61, !dbg !29
  %64 = add i32 %60, %62, !dbg !29
  %65 = sext i32 %63 to i64, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !30
  %67 = sext i32 %64 to i64, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !30
  %69 = add i32 %35, -26400, !dbg !31
  %70 = icmp ult i32 %69, 16896, !dbg !31
  %71 = and i1 %70, %57, !dbg !31
  %72 = and i1 %21, %71, !dbg !32
  %73 = and i1 %22, %71, !dbg !32
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #2, !dbg !33
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !33
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !33
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !33
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !33
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #2, !dbg !33
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !33
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !33
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !33
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !33
  %84 = mul i32 %36, 3, !dbg !34
  %85 = add i32 %84, %.decomposed4, !dbg !35
  %86 = mul i32 %40, 209088, !dbg !36
  %87 = mul i32 %42, 209088, !dbg !36
  %88 = mul i32 %44, 209088, !dbg !36
  %89 = mul i32 %46, 209088, !dbg !36
  %90 = mul i32 %48, 209088, !dbg !36
  %91 = mul i32 %50, 209088, !dbg !36
  %92 = mul i32 %52, 209088, !dbg !36
  %93 = mul i32 %54, 209088, !dbg !36
  %94 = add i32 %85, %86, !dbg !37
  %95 = add i32 %87, %.decomposed6, !dbg !35
  %96 = add i32 %95, %84, !dbg !37
  %97 = add i32 %88, %.decomposed8, !dbg !35
  %98 = add i32 %97, %84, !dbg !37
  %99 = add i32 %89, %.decomposed10, !dbg !35
  %100 = add i32 %99, %84, !dbg !37
  %101 = add i32 %90, %.decomposed12, !dbg !35
  %102 = add i32 %101, %84, !dbg !37
  %103 = add i32 %91, %.decomposed14, !dbg !35
  %104 = add i32 %103, %84, !dbg !37
  %105 = add i32 %92, %.decomposed16, !dbg !35
  %106 = add i32 %105, %84, !dbg !37
  %107 = add i32 %93, %.decomposed18, !dbg !35
  %108 = add i32 %107, %84, !dbg !37
  %109 = sext i32 %94 to i64, !dbg !38
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !38
  %111 = sext i32 %96 to i64, !dbg !38
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !38
  %113 = sext i32 %98 to i64, !dbg !38
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !38
  %115 = sext i32 %100 to i64, !dbg !38
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !38
  %117 = sext i32 %102 to i64, !dbg !38
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !38
  %119 = sext i32 %104 to i64, !dbg !38
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !38
  %121 = sext i32 %106 to i64, !dbg !38
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !38
  %123 = sext i32 %108 to i64, !dbg !38
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !38
  %125 = and i1 %23, %37, !dbg !39
  %126 = and i1 %24, %37, !dbg !39
  %127 = and i1 %25, %37, !dbg !39
  %128 = and i1 %26, %37, !dbg !39
  %129 = and i1 %27, %37, !dbg !39
  %130 = and i1 %28, %37, !dbg !39
  %131 = and i1 %29, %37, !dbg !39
  %132 = and i32 %32, 192, !dbg !40
  %133 = shl nuw nsw i32 %8, 2, !dbg !40
  %134 = or disjoint i32 %132, %133, !dbg !40
  %135 = or disjoint i32 %134, %33, !dbg !40
  %136 = and i32 %7, 127, !dbg !40
  %137 = lshr exact i32 %134, 4, !dbg !40
  %138 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %137, !dbg !40
  %139 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %135, !dbg !40
  %140 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !40
  %141 = or disjoint i32 %135, 1, !dbg !40
  %142 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %141, !dbg !40
  %143 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !40
  %144 = or disjoint i32 %135, 2, !dbg !40
  %145 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %144, !dbg !40
  %146 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !40
  %147 = or disjoint i32 %135, 3, !dbg !40
  %148 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %147, !dbg !40
  %149 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %150 = lshr i32 %136, 6, !dbg !40
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !40
  %152 = getelementptr inbounds float, ptr addrspace(3) %151, i32 %136, !dbg !40
  %153 = load i32, ptr addrspace(3) %152, align 4, !dbg !40
  %154 = or disjoint i32 %136, 128, !dbg !40
  %155 = lshr i32 %154, 6, !dbg !40
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %155, !dbg !40
  %157 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %154, !dbg !40
  %158 = load i32, ptr addrspace(3) %157, align 4, !dbg !40
  %159 = or disjoint i32 %136, 256, !dbg !40
  %160 = lshr i32 %159, 6, !dbg !40
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %160, !dbg !40
  %162 = getelementptr inbounds float, ptr addrspace(3) %161, i32 %159, !dbg !40
  %163 = load i32, ptr addrspace(3) %162, align 4, !dbg !40
  %164 = or disjoint i32 %136, 384, !dbg !40
  %165 = lshr i32 %164, 6, !dbg !40
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %165, !dbg !40
  %167 = getelementptr inbounds float, ptr addrspace(3) %166, i32 %164, !dbg !40
  %168 = load i32, ptr addrspace(3) %167, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %169 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %169, i1 true) #2, !dbg !40
  %170 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %170, i1 true) #2, !dbg !40
  %171 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %171, i1 true) #2, !dbg !40
  %172 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %172, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %173 = load i32, ptr addrspace(3) %152, align 4, !dbg !40
  %174 = load i32, ptr addrspace(3) %157, align 4, !dbg !40
  %175 = load i32, ptr addrspace(3) %162, align 4, !dbg !40
  %176 = load i32, ptr addrspace(3) %167, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %110, i1 %125) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %112, i1 %126) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %114, i1 %127) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %116, i1 %128) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %118, i1 %129) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %120, i1 %130) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %122, i1 %131) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %124, i1 %131) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cerhbn46b2jmzgb7xqjchqudiypkjznkakvwl5gsz5fawowjapv5.py", directory: "inductor_cache/er")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_11", linkageName: "triton_poi_fused_constant_pad_nd_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 44, column: 19, scope: !7)
!25 = !DILocation(line: 45, column: 41, scope: !7)
!26 = !DILocation(line: 45, column: 49, scope: !7)
!27 = !DILocation(line: 45, column: 46, scope: !7)
!28 = !DILocation(line: 45, column: 59, scope: !7)
!29 = !DILocation(line: 45, column: 54, scope: !7)
!30 = !DILocation(line: 45, column: 31, scope: !7)
!31 = !DILocation(line: 45, column: 72, scope: !7)
!32 = !DILocation(line: 45, column: 80, scope: !7)
!33 = !DILocation(line: 45, column: 64, scope: !7)
!34 = !DILocation(line: 46, column: 32, scope: !7)
!35 = !DILocation(line: 46, column: 30, scope: !7)
!36 = !DILocation(line: 46, column: 44, scope: !7)
!37 = !DILocation(line: 46, column: 37, scope: !7)
!38 = !DILocation(line: 46, column: 25, scope: !7)
!39 = !DILocation(line: 46, column: 64, scope: !7)
!40 = !DILocation(line: 46, column: 56, scope: !7)
!41 = !DILocation(line: 46, column: 4, scope: !7)
