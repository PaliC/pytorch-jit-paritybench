; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %12 = shl i32 %11, 8, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = and i32 %13, 127, !dbg !13
  %15 = or disjoint i32 %14, 128, !dbg !13
  %16 = shl i32 %13, 1, !dbg !13
  %17 = and i32 %16, 254, !dbg !13
  %18 = or disjoint i32 %17, 1, !dbg !13
  %19 = or disjoint i32 %12, %14, !dbg !14
  %20 = or disjoint i32 %12, %15, !dbg !14
  %21 = or disjoint i32 %12, %17, !dbg !14
  %22 = or disjoint i32 %12, %18, !dbg !14
  %23 = icmp slt i32 %19, 131, !dbg !15
  %24 = icmp slt i32 %20, 131, !dbg !15
  %25 = icmp slt i32 %21, 131, !dbg !15
  %26 = icmp slt i32 %22, 131, !dbg !15
  %27 = mul i32 %10, 524, !dbg !16
  %28 = add i32 %27, 131, !dbg !16
  %29 = add i32 %27, 262, !dbg !16
  %30 = add i32 %27, 393, !dbg !16
  %31 = add i32 %19, %27, !dbg !17
  %32 = add i32 %20, %27, !dbg !17
  %33 = add i32 %19, %28, !dbg !17
  %34 = add i32 %20, %28, !dbg !17
  %35 = add i32 %19, %29, !dbg !17
  %36 = add i32 %20, %29, !dbg !17
  %37 = add i32 %19, %30, !dbg !17
  %38 = add i32 %20, %30, !dbg !17
  %39 = sext i32 %31 to i64, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !18
  %41 = sext i32 %32 to i64, !dbg !18
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !18
  %43 = sext i32 %33 to i64, !dbg !18
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !18
  %45 = sext i32 %34 to i64, !dbg !18
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !18
  %47 = sext i32 %35 to i64, !dbg !18
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !18
  %49 = sext i32 %36 to i64, !dbg !18
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !18
  %51 = sext i32 %37 to i64, !dbg !18
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !18
  %53 = sext i32 %38 to i64, !dbg !18
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !18
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %23) #4, !dbg !19
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !19
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %23) #4, !dbg !19
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %24) #4, !dbg !19
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %23) #4, !dbg !19
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %24) #4, !dbg !19
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %23) #4, !dbg !19
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %24) #4, !dbg !19
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !19
  %64 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #4, !dbg !19
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !19
  %66 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !19
  %68 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !19
  %69 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !19
  %70 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !19
  %71 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !19
  %72 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !19
  %73 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !19
  %74 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %68, i1 true) #4, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %69, i1 true) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %75 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %70, i1 true) #4, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %71, i1 true) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %76 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %72, i1 true) #4, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %73, i1 true) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %77 = load <2 x float>, ptr addrspace(3) %67, align 8, !dbg !19
  %78 = sext i32 %21 to i64, !dbg !20
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !20
  %80 = sext i32 %22 to i64, !dbg !20
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !20
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %25) #4, !dbg !21
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %26) #4, !dbg !21
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !22
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !22
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %25) #4, !dbg !23
  %87 = bitcast i32 %86 to float, !dbg !23
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %26) #4, !dbg !23
  %89 = bitcast i32 %88 to float, !dbg !23
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !24
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !24
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %25) #4, !dbg !25
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %26) #4, !dbg !25
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !26
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %25) #4, !dbg !27
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %26) #4, !dbg !27
  %98 = getelementptr float, ptr addrspace(1) %5, i64 %78, !dbg !28
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %80, !dbg !28
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %25) #4, !dbg !29
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %26) #4, !dbg !29
  %102 = fadd float %87, 0x3EE4F8B580000000, !dbg !30
  %103 = fadd float %89, 0x3EE4F8B580000000, !dbg !30
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %104, 0, !dbg !31
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %105, 0, !dbg !31
  br i1 %.not.i, label %111, label %106, !dbg !31

106:                                              ; preds = %9
  br i1 %.not1.i, label %109, label %107, !dbg !31

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

111:                                              ; preds = %9
  br i1 %.not1.i, label %114, label %112, !dbg !31

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %107, %109, %112, %114
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !31
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i15 = icmp eq i32 %116, 0, !dbg !31
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i18 = icmp eq i32 %117, 0, !dbg !31
  br i1 %.not.i15, label %123, label %118, !dbg !31

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %121, label %119, !dbg !31

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %126, label %124, !dbg !31

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

__nv_sqrtf.exit19:                                ; preds = %119, %121, %124, %126
  %.0.i17 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !31
  %128 = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !19
  %129 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !19
  %130 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !19
  %131 = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !19
  %132 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !21
  %133 = insertelement <2 x i32> %132, i32 %82, i64 1, !dbg !21
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !21
  %135 = shufflevector <2 x float> %134, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !21
  %136 = bitcast i32 %101 to float, !dbg !29
  %137 = bitcast i32 %100 to float, !dbg !29
  %138 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !27
  %139 = insertelement <2 x i32> %138, i32 %96, i64 1, !dbg !27
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !27
  %141 = shufflevector <2 x float> %140, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !27
  %142 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !25
  %143 = insertelement <2 x i32> %142, i32 %92, i64 1, !dbg !25
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !25
  %145 = shufflevector <2 x float> %144, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !25
  %146 = shl i32 %10, 2, !dbg !32
  %.frozen = freeze i32 %146, !dbg !33
  %147 = sdiv i32 %.frozen, 256, !dbg !33
  %148 = mul i32 %147, 256, !dbg !34
  %.decomposed = sub i32 %.frozen, %148, !dbg !34
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !35
  %151 = shufflevector <2 x float> %128, <2 x float> %129, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %152 = shufflevector <2 x float> %130, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %153 = shufflevector <8 x float> %151, <8 x float> %152, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 poison, i32 poison>, !dbg !36
  %154 = shufflevector <2 x float> %131, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !36
  %155 = shufflevector <8 x float> %153, <8 x float> %154, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>, !dbg !36
  %156 = fsub <8 x float> %155, %135, !dbg !36
  %157 = insertelement <8 x float> poison, float %150, i64 0, !dbg !37
  %158 = insertelement <8 x float> %157, float %149, i64 1, !dbg !37
  %159 = shufflevector <8 x float> %158, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !37
  %160 = fmul <8 x float> %156, %159, !dbg !37
  %161 = fmul <8 x float> %160, %145, !dbg !38
  %162 = fadd <8 x float> %161, %141, !dbg !39
  %163 = fcmp ogt <8 x float> %162, zeroinitializer, !dbg !40
  %164 = extractelement <8 x float> %162, i64 7, !dbg !41
  %165 = fmul float %164, %137, !dbg !42
  %166 = extractelement <8 x float> %162, i64 6, !dbg !41
  %167 = fmul float %166, %136, !dbg !42
  %168 = extractelement <8 x float> %162, i64 5, !dbg !41
  %169 = fmul float %168, %137, !dbg !42
  %170 = extractelement <8 x float> %162, i64 4, !dbg !41
  %171 = fmul float %170, %136, !dbg !42
  %172 = extractelement <8 x float> %162, i64 3, !dbg !41
  %173 = fmul float %172, %137, !dbg !42
  %174 = extractelement <8 x float> %162, i64 2, !dbg !41
  %175 = fmul float %174, %136, !dbg !42
  %176 = extractelement <8 x float> %162, i64 1, !dbg !41
  %177 = fmul float %176, %137, !dbg !42
  %178 = extractelement <8 x float> %162, i64 0, !dbg !41
  %179 = fmul float %178, %136, !dbg !42
  %180 = extractelement <8 x i1> %163, i64 7, !dbg !41
  %181 = select i1 %180, float %164, float %165, !dbg !41
  %182 = extractelement <8 x i1> %163, i64 6, !dbg !41
  %183 = select i1 %182, float %166, float %167, !dbg !41
  %184 = extractelement <8 x i1> %163, i64 5, !dbg !41
  %185 = select i1 %184, float %168, float %169, !dbg !41
  %186 = extractelement <8 x i1> %163, i64 4, !dbg !41
  %187 = select i1 %186, float %170, float %171, !dbg !41
  %188 = extractelement <8 x i1> %163, i64 3, !dbg !41
  %189 = select i1 %188, float %172, float %173, !dbg !41
  %190 = extractelement <8 x i1> %163, i64 2, !dbg !41
  %191 = select i1 %190, float %174, float %175, !dbg !41
  %192 = extractelement <8 x i1> %163, i64 1, !dbg !41
  %193 = select i1 %192, float %176, float %177, !dbg !41
  %194 = extractelement <8 x i1> %163, i64 0, !dbg !41
  %195 = select i1 %194, float %178, float %179, !dbg !41
  %196 = shl i32 %19, 8, !dbg !43
  %197 = shl i32 %20, 8, !dbg !43
  %198 = mul i32 %147, 33536, !dbg !44
  %199 = add i32 %198, %.decomposed, !dbg !45
  %200 = add i32 %199, %196, !dbg !46
  %201 = add i32 %199, %197, !dbg !46
  %202 = sext i32 %200 to i64, !dbg !47
  %203 = getelementptr float, ptr addrspace(1) %6, i64 %202, !dbg !47
  %204 = sext i32 %201 to i64, !dbg !47
  %205 = getelementptr float, ptr addrspace(1) %6, i64 %204, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %206 = shl i32 %13, 3, !dbg !48
  %207 = and i32 %206, 1016, !dbg !48
  %208 = shl i32 %13, 2, !dbg !48
  %209 = and i32 %208, 508, !dbg !48
  %.idx = shl nuw nsw i32 %207, 3, !dbg !48
  %210 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !48
  %211 = bitcast float %181 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #4, !dbg !48
  %212 = shl nuw nsw i32 %207, 1, !dbg !48
  %213 = or disjoint i32 %212, 8, !dbg !48
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !48
  %215 = bitcast float %183 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #4, !dbg !48
  %216 = or disjoint i32 %207, 1, !dbg !48
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %207, !dbg !48
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %216, !dbg !48
  %219 = bitcast float %185 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #4, !dbg !48
  %220 = or disjoint i32 %207, 5, !dbg !48
  %221 = or disjoint i32 %207, 4, !dbg !48
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !48
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !48
  %224 = bitcast float %187 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #4, !dbg !48
  %225 = or disjoint i32 %207, 2, !dbg !48
  %226 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %225, !dbg !48
  %227 = bitcast float %189 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !48
  %228 = or disjoint i32 %207, 6, !dbg !48
  %229 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %228, !dbg !48
  %230 = bitcast float %191 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #4, !dbg !48
  %231 = or disjoint i32 %207, 3, !dbg !48
  %232 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %231, !dbg !48
  %233 = bitcast float %193 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !48
  %234 = or disjoint i32 %207, 7, !dbg !48
  %235 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %234, !dbg !48
  %236 = bitcast float %195 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %209, !dbg !48
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %209, !dbg !48
  %239 = or disjoint i32 %209, 512, !dbg !48
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !48
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %239, !dbg !48
  %242 = load <4 x i32>, ptr addrspace(3) %241, align 16, !dbg !48
  %.extract = load i32, ptr addrspace(3) %238, align 16, !dbg !48
  %243 = getelementptr inbounds i8, ptr addrspace(3) %238, i32 4, !dbg !48
  %.extract8 = load i32, ptr addrspace(3) %243, align 4, !dbg !48
  %244 = getelementptr inbounds i8, ptr addrspace(3) %238, i32 8, !dbg !48
  %.extract9 = load i32, ptr addrspace(3) %244, align 8, !dbg !48
  %245 = getelementptr inbounds i8, ptr addrspace(3) %238, i32 12, !dbg !48
  %.extract10 = load i32, ptr addrspace(3) %245, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %203, i1 %23) #4, !dbg !48
  %.extract11 = extractelement <4 x i32> %242, i64 0, !dbg !48
  %.extract12 = extractelement <4 x i32> %242, i64 1, !dbg !48
  %.extract13 = extractelement <4 x i32> %242, i64 2, !dbg !48
  %.extract14 = extractelement <4 x i32> %242, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %205, i1 %24) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caprzmeyxnstor3taxev322jmu34u442jkilf3zykmu7pd2zt7yj.py", directory: "inductor_cache/ap")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 32, column: 39, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 44, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 26, scope: !7)
!32 = !DILocation(line: 22, column: 33, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 46, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 35, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 34, scope: !7)
!44 = !DILocation(line: 53, column: 45, scope: !7)
!45 = !DILocation(line: 53, column: 30, scope: !7)
!46 = !DILocation(line: 53, column: 39, scope: !7)
!47 = !DILocation(line: 53, column: 25, scope: !7)
!48 = !DILocation(line: 53, column: 57, scope: !7)
!49 = !DILocation(line: 53, column: 4, scope: !7)
