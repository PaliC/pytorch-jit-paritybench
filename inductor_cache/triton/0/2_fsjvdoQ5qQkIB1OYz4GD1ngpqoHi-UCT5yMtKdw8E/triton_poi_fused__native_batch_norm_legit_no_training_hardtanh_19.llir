; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 512, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 5, !dbg !16
  %18 = lshr i32 %11, 3, !dbg !17
  %19 = and i32 %18, 15, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = or disjoint i32 %20, 16, !dbg !18
  %22 = icmp slt i32 %20, 49, !dbg !19
  %23 = icmp slt i32 %21, 49, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %24 = sdiv i32 %.frozen, 128, !dbg !20
  %25 = mul i32 %24, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %25, !dbg !21
  %26 = shl i32 %20, 7, !dbg !22
  %27 = shl i32 %21, 7, !dbg !22
  %28 = mul i32 %24, 6272, !dbg !23
  %29 = add i32 %28, %.decomposed, !dbg !24
  %30 = add i32 %29, %26, !dbg !25
  %31 = add i32 %29, %27, !dbg !25
  %32 = sext i32 %30 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = sext i32 %31 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = and i1 %15, %22, !dbg !27
  %37 = and i1 %23, %15, !dbg !27
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %36) #4, !dbg !28
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %37) #4, !dbg !28
  %40 = sext i32 %.decomposed to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !29
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %15) #4, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !31
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %15) #4, !dbg !32
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !32
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !32
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !32
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !32
  %49 = bitcast i32 %45 to float, !dbg !32
  %50 = bitcast i32 %46 to float, !dbg !32
  %51 = bitcast i32 %47 to float, !dbg !32
  %52 = bitcast i32 %48 to float, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !33
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %15) #4, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !35
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %15) #4, !dbg !36
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !37
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !37
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !37
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !37
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %61, 0, !dbg !38
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %62, 0, !dbg !38
  br i1 %.not.i, label %68, label %63, !dbg !38

63:                                               ; preds = %8
  br i1 %.not1.i, label %66, label %64, !dbg !38

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

68:                                               ; preds = %8
  br i1 %.not1.i, label %71, label %69, !dbg !38

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !38
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i11 = icmp eq i32 %73, 0, !dbg !38
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i14 = icmp eq i32 %74, 0, !dbg !38
  br i1 %.not.i11, label %80, label %75, !dbg !38

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %78, label %76, !dbg !38

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %83, label %81, !dbg !38

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

__nv_sqrtf.exit15:                                ; preds = %76, %78, %81, %83
  %.0.i13 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !38
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i16 = icmp eq i32 %85, 0, !dbg !38
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i19 = icmp eq i32 %86, 0, !dbg !38
  br i1 %.not.i16, label %92, label %87, !dbg !38

87:                                               ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %90, label %88, !dbg !38

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

92:                                               ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %95, label %93, !dbg !38

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

__nv_sqrtf.exit20:                                ; preds = %88, %90, %93, %95
  %.0.i18 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !38
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i21 = icmp eq i32 %97, 0, !dbg !38
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i24 = icmp eq i32 %98, 0, !dbg !38
  br i1 %.not.i21, label %104, label %99, !dbg !38

99:                                               ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %102, label %100, !dbg !38

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

104:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %107, label %105, !dbg !38

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

__nv_sqrtf.exit25:                                ; preds = %100, %102, %105, %107
  %.0.i23 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !38
  %109 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %112 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !36
  %122 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !36
  %123 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !34
  %126 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !34
  %129 = and i32 %11, 31, !dbg !17
  %130 = or disjoint i32 %17, %129, !dbg !18
  %131 = icmp slt i32 %130, 49, !dbg !19
  %.lobit1 = lshr i32 %11, 5, !dbg !12
  %132 = and i32 %.lobit1, 3, !dbg !12
  %133 = or disjoint i32 %132, %10, !dbg !13
  %134 = or disjoint i32 %133, 28, !dbg !13
  %135 = icmp slt i32 %134, 512, !dbg !14
  %136 = and i1 %135, %131, !dbg !27
  %137 = or disjoint i32 %133, 24, !dbg !13
  %138 = icmp slt i32 %137, 512, !dbg !14
  %139 = and i1 %138, %131, !dbg !27
  %140 = or disjoint i32 %133, 20, !dbg !13
  %141 = icmp slt i32 %140, 512, !dbg !14
  %142 = and i1 %141, %131, !dbg !27
  %143 = or disjoint i32 %133, 16, !dbg !13
  %144 = icmp slt i32 %143, 512, !dbg !14
  %145 = and i1 %144, %131, !dbg !27
  %146 = or disjoint i32 %133, 12, !dbg !13
  %147 = icmp slt i32 %146, 512, !dbg !14
  %148 = and i1 %147, %131, !dbg !27
  %149 = or disjoint i32 %133, 8, !dbg !13
  %150 = icmp slt i32 %149, 512, !dbg !14
  %151 = and i1 %150, %131, !dbg !27
  %152 = or disjoint i32 %133, 4, !dbg !13
  %153 = icmp slt i32 %152, 512, !dbg !14
  %154 = and i1 %153, %131, !dbg !27
  %155 = icmp slt i32 %133, 512, !dbg !14
  %156 = and i1 %155, %131, !dbg !27
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !39
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !39
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !39
  %161 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !30
  %162 = insertelement <4 x i32> %161, i32 %112, i64 1, !dbg !30
  %163 = insertelement <4 x i32> %162, i32 %114, i64 2, !dbg !30
  %164 = insertelement <4 x i32> %163, i32 %116, i64 3, !dbg !30
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !30
  %166 = shufflevector <4 x float> %165, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %167 = insertelement <8 x i32> poison, i32 %109, i64 0, !dbg !28
  %168 = insertelement <8 x i32> %167, i32 %111, i64 1, !dbg !28
  %169 = insertelement <8 x i32> %168, i32 %113, i64 2, !dbg !28
  %170 = insertelement <8 x i32> %169, i32 %115, i64 3, !dbg !28
  %171 = insertelement <8 x i32> %170, i32 %117, i64 4, !dbg !28
  %172 = insertelement <8 x i32> %171, i32 %118, i64 5, !dbg !28
  %173 = insertelement <8 x i32> %172, i32 %119, i64 6, !dbg !28
  %174 = insertelement <8 x i32> %173, i32 %120, i64 7, !dbg !28
  %175 = bitcast <8 x i32> %174 to <8 x float>, !dbg !28
  %176 = fsub <8 x float> %175, %166, !dbg !40
  %177 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !36
  %178 = insertelement <4 x i32> %177, i32 %122, i64 1, !dbg !36
  %179 = insertelement <4 x i32> %178, i32 %123, i64 2, !dbg !36
  %180 = insertelement <4 x i32> %179, i32 %124, i64 3, !dbg !36
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !36
  %182 = shufflevector <4 x float> %181, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %183 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !34
  %184 = insertelement <4 x i32> %183, i32 %126, i64 1, !dbg !34
  %185 = insertelement <4 x i32> %184, i32 %127, i64 2, !dbg !34
  %186 = insertelement <4 x i32> %185, i32 %128, i64 3, !dbg !34
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !34
  %188 = shufflevector <4 x float> %187, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %189 = insertelement <8 x float> poison, float %160, i64 0, !dbg !41
  %190 = insertelement <8 x float> %189, float %159, i64 1, !dbg !41
  %191 = insertelement <8 x float> %190, float %158, i64 2, !dbg !41
  %192 = insertelement <8 x float> %191, float %157, i64 3, !dbg !41
  %193 = shufflevector <8 x float> %192, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %194 = fmul <8 x float> %176, %193, !dbg !41
  %195 = fmul <8 x float> %194, %188, !dbg !42
  %196 = fadd <8 x float> %195, %182, !dbg !43
  %197 = fcmp ole <8 x float> %196, zeroinitializer, !dbg !44
  %198 = select <8 x i1> %197, <8 x float> zeroinitializer, <8 x float> %196, !dbg !44
  %199 = fcmp olt <8 x float> %198, splat (float 6.000000e+00), !dbg !48
  %200 = extractelement <8 x float> %198, i64 7, !dbg !50
  %201 = fcmp uno float %200, 0.000000e+00, !dbg !51
  %202 = extractelement <8 x float> %198, i64 6, !dbg !50
  %203 = fcmp uno float %202, 0.000000e+00, !dbg !51
  %204 = extractelement <8 x float> %198, i64 5, !dbg !50
  %205 = fcmp uno float %204, 0.000000e+00, !dbg !51
  %206 = extractelement <8 x float> %198, i64 4, !dbg !50
  %207 = fcmp uno float %206, 0.000000e+00, !dbg !51
  %208 = extractelement <8 x float> %198, i64 3, !dbg !50
  %209 = fcmp uno float %208, 0.000000e+00, !dbg !51
  %210 = extractelement <8 x float> %198, i64 2, !dbg !50
  %211 = fcmp uno float %210, 0.000000e+00, !dbg !51
  %212 = extractelement <8 x float> %198, i64 1, !dbg !50
  %213 = fcmp uno float %212, 0.000000e+00, !dbg !51
  %214 = extractelement <8 x float> %198, i64 0, !dbg !50
  %215 = fcmp uno float %214, 0.000000e+00, !dbg !51
  %216 = extractelement <8 x i1> %199, i64 7, !dbg !52
  %217 = or i1 %216, %201, !dbg !52
  %218 = extractelement <8 x i1> %199, i64 6, !dbg !52
  %219 = or i1 %218, %203, !dbg !52
  %220 = extractelement <8 x i1> %199, i64 5, !dbg !52
  %221 = or i1 %220, %205, !dbg !52
  %222 = extractelement <8 x i1> %199, i64 4, !dbg !52
  %223 = or i1 %222, %207, !dbg !52
  %224 = extractelement <8 x i1> %199, i64 3, !dbg !52
  %225 = or i1 %224, %209, !dbg !52
  %226 = extractelement <8 x i1> %199, i64 2, !dbg !52
  %227 = or i1 %226, %211, !dbg !52
  %228 = extractelement <8 x i1> %199, i64 1, !dbg !52
  %229 = or i1 %228, %213, !dbg !52
  %230 = extractelement <8 x i1> %199, i64 0, !dbg !52
  %231 = or i1 %230, %215, !dbg !52
  %232 = mul i32 %133, 49, !dbg !53
  %233 = mul i32 %152, 49, !dbg !53
  %234 = mul i32 %149, 49, !dbg !53
  %235 = mul i32 %146, 49, !dbg !53
  %236 = mul i32 %143, 49, !dbg !53
  %237 = mul i32 %140, 49, !dbg !53
  %238 = mul i32 %137, 49, !dbg !53
  %239 = mul i32 %134, 49, !dbg !53
  %240 = add i32 %130, %232, !dbg !54
  %241 = add i32 %130, %233, !dbg !54
  %242 = add i32 %130, %234, !dbg !54
  %243 = add i32 %130, %235, !dbg !54
  %244 = add i32 %130, %236, !dbg !54
  %245 = add i32 %130, %237, !dbg !54
  %246 = add i32 %130, %238, !dbg !54
  %247 = add i32 %130, %239, !dbg !54
  %248 = sext i32 %240 to i64, !dbg !55
  %249 = getelementptr float, ptr addrspace(1) %5, i64 %248, !dbg !55
  %250 = sext i32 %241 to i64, !dbg !55
  %251 = getelementptr float, ptr addrspace(1) %5, i64 %250, !dbg !55
  %252 = sext i32 %242 to i64, !dbg !55
  %253 = getelementptr float, ptr addrspace(1) %5, i64 %252, !dbg !55
  %254 = sext i32 %243 to i64, !dbg !55
  %255 = getelementptr float, ptr addrspace(1) %5, i64 %254, !dbg !55
  %256 = sext i32 %244 to i64, !dbg !55
  %257 = getelementptr float, ptr addrspace(1) %5, i64 %256, !dbg !55
  %258 = sext i32 %245 to i64, !dbg !55
  %259 = getelementptr float, ptr addrspace(1) %5, i64 %258, !dbg !55
  %260 = sext i32 %246 to i64, !dbg !55
  %261 = getelementptr float, ptr addrspace(1) %5, i64 %260, !dbg !55
  %262 = sext i32 %247 to i64, !dbg !55
  %263 = getelementptr float, ptr addrspace(1) %5, i64 %262, !dbg !55
  %264 = shl i32 %11, 7, !dbg !50
  %265 = and i32 %264, 896, !dbg !50
  %266 = or disjoint i32 %265, %19, !dbg !50
  %267 = and i32 %11, 127, !dbg !50
  %268 = lshr exact i32 %265, 3, !dbg !50
  %269 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %268, !dbg !50
  %270 = getelementptr float, ptr addrspace(3) %269, i32 %266, !dbg !50
  %271 = bitcast float %200 to i32, !dbg !50
  %272 = select i1 %217, i32 %271, i32 1086324736, !dbg !56
  %273 = insertelement <1 x i32> poison, i32 %272, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %273, i1 true) #4, !dbg !50
  %274 = or disjoint i32 %266, 32, !dbg !50
  %275 = lshr i32 %274, 5, !dbg !50
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !50
  %277 = getelementptr float, ptr addrspace(3) %276, i32 %274, !dbg !50
  %278 = bitcast float %202 to i32, !dbg !50
  %279 = select i1 %219, i32 %278, i32 1086324736, !dbg !56
  %280 = insertelement <1 x i32> poison, i32 %279, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %280, i1 true) #4, !dbg !50
  %281 = or disjoint i32 %266, 64, !dbg !50
  %282 = lshr i32 %281, 5, !dbg !50
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %282, !dbg !50
  %284 = getelementptr float, ptr addrspace(3) %283, i32 %281, !dbg !50
  %285 = bitcast float %204 to i32, !dbg !50
  %286 = select i1 %221, i32 %285, i32 1086324736, !dbg !56
  %287 = insertelement <1 x i32> poison, i32 %286, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %287, i1 true) #4, !dbg !50
  %288 = or disjoint i32 %266, 96, !dbg !50
  %289 = lshr i32 %288, 5, !dbg !50
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !50
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %288, !dbg !50
  %292 = bitcast float %206 to i32, !dbg !50
  %293 = select i1 %223, i32 %292, i32 1086324736, !dbg !56
  %294 = insertelement <1 x i32> poison, i32 %293, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %294, i1 true) #4, !dbg !50
  %295 = or disjoint i32 %266, 16, !dbg !50
  %296 = getelementptr float, ptr addrspace(3) %269, i32 %295, !dbg !50
  %297 = bitcast float %208 to i32, !dbg !50
  %298 = select i1 %225, i32 %297, i32 1086324736, !dbg !56
  %299 = insertelement <1 x i32> poison, i32 %298, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %299, i1 true) #4, !dbg !50
  %300 = or disjoint i32 %266, 48, !dbg !50
  %301 = lshr i32 %300, 5, !dbg !50
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i32 %301, !dbg !50
  %303 = getelementptr float, ptr addrspace(3) %302, i32 %300, !dbg !50
  %304 = bitcast float %210 to i32, !dbg !50
  %305 = select i1 %227, i32 %304, i32 1086324736, !dbg !56
  %306 = insertelement <1 x i32> poison, i32 %305, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %306, i1 true) #4, !dbg !50
  %307 = or disjoint i32 %266, 80, !dbg !50
  %308 = lshr i32 %307, 5, !dbg !50
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i32 %308, !dbg !50
  %310 = getelementptr float, ptr addrspace(3) %309, i32 %307, !dbg !50
  %311 = bitcast float %212 to i32, !dbg !50
  %312 = select i1 %229, i32 %311, i32 1086324736, !dbg !56
  %313 = insertelement <1 x i32> poison, i32 %312, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %313, i1 true) #4, !dbg !50
  %314 = or disjoint i32 %266, 112, !dbg !50
  %315 = lshr i32 %314, 5, !dbg !50
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i32 %315, !dbg !50
  %317 = getelementptr float, ptr addrspace(3) %316, i32 %314, !dbg !50
  %318 = bitcast float %214 to i32, !dbg !50
  %319 = select i1 %231, i32 %318, i32 1086324736, !dbg !56
  %320 = insertelement <1 x i32> poison, i32 %319, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %320, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %321 = lshr i32 %267, 5, !dbg !50
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !50
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %267, !dbg !50
  %324 = load i32, ptr addrspace(3) %323, align 4, !dbg !50
  %325 = or disjoint i32 %267, 128, !dbg !50
  %326 = lshr i32 %325, 5, !dbg !50
  %327 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %326, !dbg !50
  %328 = getelementptr inbounds float, ptr addrspace(3) %327, i32 %325, !dbg !50
  %329 = load i32, ptr addrspace(3) %328, align 4, !dbg !50
  %330 = or disjoint i32 %267, 256, !dbg !50
  %331 = lshr i32 %330, 5, !dbg !50
  %332 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %331, !dbg !50
  %333 = getelementptr inbounds float, ptr addrspace(3) %332, i32 %330, !dbg !50
  %334 = load i32, ptr addrspace(3) %333, align 4, !dbg !50
  %335 = or disjoint i32 %267, 384, !dbg !50
  %336 = lshr i32 %335, 5, !dbg !50
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %336, !dbg !50
  %338 = getelementptr inbounds float, ptr addrspace(3) %337, i32 %335, !dbg !50
  %339 = load i32, ptr addrspace(3) %338, align 4, !dbg !50
  %340 = or disjoint i32 %267, 512, !dbg !50
  %341 = lshr i32 %340, 5, !dbg !50
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !50
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %340, !dbg !50
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !50
  %345 = or disjoint i32 %267, 640, !dbg !50
  %346 = lshr i32 %345, 5, !dbg !50
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346, !dbg !50
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %345, !dbg !50
  %349 = load i32, ptr addrspace(3) %348, align 4, !dbg !50
  %350 = or disjoint i32 %267, 768, !dbg !50
  %351 = lshr i32 %350, 5, !dbg !50
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %351, !dbg !50
  %353 = getelementptr inbounds float, ptr addrspace(3) %352, i32 %350, !dbg !50
  %354 = load i32, ptr addrspace(3) %353, align 4, !dbg !50
  %355 = or disjoint i32 %267, 896, !dbg !50
  %356 = lshr i32 %355, 5, !dbg !50
  %357 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %356, !dbg !50
  %358 = getelementptr inbounds float, ptr addrspace(3) %357, i32 %355, !dbg !50
  %359 = load i32, ptr addrspace(3) %358, align 4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %324, ptr addrspace(1) %249, i1 %156) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %329, ptr addrspace(1) %251, i1 %154) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %334, ptr addrspace(1) %253, i1 %151) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %339, ptr addrspace(1) %255, i1 %148) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %344, ptr addrspace(1) %257, i1 %145) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %259, i1 %142) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %261, i1 %139) #4, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %263, i1 %136) #4, !dbg !50
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfuhactnulw7lin2apvv3zcxfs5mboutnywdc65qd3hewboijk6a.py", directory: "inductor_cache/fu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 51, column: 42, scope: !7)
!50 = !DILocation(line: 52, column: 45, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !49)
!52 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !49)
!53 = !DILocation(line: 52, column: 33, scope: !7)
!54 = !DILocation(line: 52, column: 30, scope: !7)
!55 = !DILocation(line: 52, column: 25, scope: !7)
!56 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !49)
!57 = !DILocation(line: 52, column: 4, scope: !7)
