; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bg/cbgwn6c4thbkbme2uo2t2m4s2rpcaqeupbfwgcgqorit6gogaz2y.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp18 < 64\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 5, !dbg !12
  %10 = and i32 %8, 1, !dbg !12
  %11 = and i32 %8, 63, !dbg !12
  %12 = shl nuw nsw i32 %11, 2, !dbg !13
  %13 = and i32 %12, 192, !dbg !13
  %14 = and i32 %8, 15, !dbg !14
  %15 = or disjoint i32 %14, %13, !dbg !15
  %16 = or disjoint i32 %15, 48, !dbg !15
  %17 = zext nneg i32 %16 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #4, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !19
  %23 = bitcast i32 %22 to float, !dbg !19
  %24 = fmul float %23, 2.000000e+00, !dbg !20
  %25 = fadd float %24, -1.000000e+00, !dbg !21
  %26 = fmul float %25, %20, !dbg !22
  %27 = fsub float 1.000000e+00, %26, !dbg !23
  %28 = trunc nuw nsw i32 %11 to i16, !dbg !24
  %29 = lshr i32 %8, 1, !dbg !25
  %.lobit = and i32 %29, 1, !dbg !25
  %30 = lshr i32 %8, 2, !dbg !25
  %.lobit1 = and i32 %30, 1, !dbg !25
  %31 = lshr i32 %8, 3, !dbg !25
  %.lobit2 = and i32 %31, 1, !dbg !25
  %32 = lshr i32 %8, 4, !dbg !25
  %.lobit3 = and i32 %32, 1, !dbg !25
  %.lobit4 = and i32 %9, 1, !dbg !25
  %33 = bitcast float %27 to i32, !dbg !30
  %34 = xor i32 %.lobit, 1, !dbg !32
  %35 = xor i32 %.lobit1, 1, !dbg !32
  %36 = xor i32 %.lobit2, 1, !dbg !32
  %37 = xor i32 %.lobit3, 1, !dbg !32
  %38 = xor i32 %.lobit4, 1, !dbg !32
  %39 = xor i32 %10, 1, !dbg !32
  %40 = mul nuw nsw i32 %39, %33, !dbg !33
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 1, i32 31), !dbg !34
  %42 = add i32 %40, %41, !dbg !37
  %43 = mul nuw nsw i32 %10, %33, !dbg !39
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 1, i32 31), !dbg !34
  %45 = add i32 %43, %44, !dbg !37
  %46 = bitcast i32 %42 to float, !dbg !40
  %47 = bitcast i32 %45 to float, !dbg !41
  %48 = trunc nuw nsw i32 %34 to i16, !dbg !42
  %49 = trunc nuw nsw i32 %35 to i16, !dbg !42
  %50 = trunc nuw nsw i32 %36 to i16, !dbg !42
  %51 = trunc nuw nsw i32 %37 to i16, !dbg !42
  %52 = trunc nuw nsw i32 %38 to i16, !dbg !42
  %53 = trunc nuw nsw i32 %39 to i16, !dbg !42
  %54 = mul nuw nsw i16 %53, %28, !dbg !43
  %55 = zext nneg i16 %54 to i32, !dbg !34
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 1, i32 31), !dbg !34
  %57 = trunc i32 %56 to i16, !dbg !34
  %58 = add i16 %54, %57, !dbg !37
  %59 = trunc nuw nsw i32 %.lobit to i16, !dbg !44
  %60 = trunc nuw nsw i32 %.lobit1 to i16, !dbg !44
  %61 = trunc nuw nsw i32 %.lobit2 to i16, !dbg !44
  %62 = trunc nuw nsw i32 %.lobit3 to i16, !dbg !44
  %63 = trunc nuw nsw i32 %.lobit4 to i16, !dbg !44
  %64 = trunc nuw nsw i32 %10 to i16, !dbg !44
  %65 = mul nuw nsw i16 %28, %64, !dbg !45
  %66 = zext nneg i16 %65 to i32, !dbg !34
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !34
  %68 = trunc i32 %67 to i16, !dbg !34
  %69 = add i16 %65, %68, !dbg !37
  %70 = trunc i32 %29 to i1, !dbg !46
  %71 = fcmp uge float %46, %47, !dbg !46
  %.not = xor i1 %71, %70, !dbg !46
  %72 = xor i32 %42, %45, !dbg !47
  %73 = select i1 %.not, i32 0, i32 %72, !dbg !48
  %74 = xor i32 %73, %33, !dbg !49
  %75 = xor i16 %69, %58, !dbg !50
  %76 = select i1 %.not, i16 0, i16 %75, !dbg !51
  %77 = xor i16 %76, %28, !dbg !52
  %78 = mul nuw nsw i32 %74, %34, !dbg !33
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 2, i32 31), !dbg !34
  %80 = add i32 %78, %79, !dbg !37
  %81 = mul nuw nsw i32 %74, %.lobit, !dbg !39
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !34
  %83 = add i32 %81, %82, !dbg !37
  %84 = bitcast i32 %80 to float, !dbg !40
  %85 = bitcast i32 %83 to float, !dbg !41
  %86 = mul nuw nsw i16 %77, %48, !dbg !43
  %87 = zext i16 %86 to i32, !dbg !34
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 2, i32 31), !dbg !34
  %89 = trunc i32 %88 to i16, !dbg !34
  %90 = add i16 %86, %89, !dbg !37
  %91 = mul nuw nsw i16 %77, %59, !dbg !45
  %92 = zext i16 %91 to i32, !dbg !34
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !34
  %94 = trunc i32 %93 to i16, !dbg !34
  %95 = add i16 %91, %94, !dbg !37
  %96 = trunc i32 %30 to i1, !dbg !46
  %97 = fcmp uge float %84, %85, !dbg !46
  %.not5 = xor i1 %97, %96, !dbg !46
  %98 = xor i32 %80, %83, !dbg !47
  %99 = select i1 %.not5, i32 0, i32 %98, !dbg !48
  %100 = xor i32 %99, %74, !dbg !49
  %101 = xor i16 %90, %95, !dbg !50
  %102 = select i1 %.not5, i16 0, i16 %101, !dbg !51
  %103 = xor i16 %102, %77, !dbg !52
  %104 = mul nuw nsw i32 %100, %39, !dbg !33
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !34
  %106 = add i32 %104, %105, !dbg !37
  %107 = mul nuw nsw i32 %100, %10, !dbg !39
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !34
  %109 = add i32 %107, %108, !dbg !37
  %110 = bitcast i32 %106 to float, !dbg !40
  %111 = bitcast i32 %109 to float, !dbg !41
  %112 = mul nuw nsw i16 %103, %53, !dbg !43
  %113 = zext i16 %112 to i32, !dbg !34
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !34
  %115 = trunc i32 %114 to i16, !dbg !34
  %116 = add i16 %112, %115, !dbg !37
  %117 = mul nuw nsw i16 %103, %64, !dbg !45
  %118 = zext i16 %117 to i32, !dbg !34
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !34
  %120 = trunc i32 %119 to i16, !dbg !34
  %121 = add i16 %117, %120, !dbg !37
  %122 = fcmp uge float %110, %111, !dbg !46
  %.not6 = xor i1 %122, %96, !dbg !46
  %123 = xor i32 %106, %109, !dbg !47
  %124 = select i1 %.not6, i32 0, i32 %123, !dbg !48
  %125 = xor i32 %124, %100, !dbg !49
  %126 = xor i16 %116, %121, !dbg !50
  %127 = select i1 %.not6, i16 0, i16 %126, !dbg !51
  %128 = xor i16 %127, %103, !dbg !52
  %129 = mul nuw nsw i32 %125, %35, !dbg !33
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !34
  %131 = add i32 %129, %130, !dbg !37
  %132 = mul nuw nsw i32 %125, %.lobit1, !dbg !39
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !34
  %134 = add i32 %132, %133, !dbg !37
  %135 = bitcast i32 %131 to float, !dbg !40
  %136 = bitcast i32 %134 to float, !dbg !41
  %137 = mul nuw nsw i16 %128, %49, !dbg !43
  %138 = zext i16 %137 to i32, !dbg !34
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !34
  %140 = trunc i32 %139 to i16, !dbg !34
  %141 = add i16 %137, %140, !dbg !37
  %142 = mul nuw nsw i16 %128, %60, !dbg !45
  %143 = zext i16 %142 to i32, !dbg !34
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !34
  %145 = trunc i32 %144 to i16, !dbg !34
  %146 = add i16 %142, %145, !dbg !37
  %147 = trunc i32 %31 to i1, !dbg !46
  %148 = fcmp uge float %135, %136, !dbg !46
  %.not7 = xor i1 %148, %147, !dbg !46
  %149 = xor i32 %131, %134, !dbg !47
  %150 = select i1 %.not7, i32 0, i32 %149, !dbg !48
  %151 = xor i32 %150, %125, !dbg !49
  %152 = xor i16 %141, %146, !dbg !50
  %153 = select i1 %.not7, i16 0, i16 %152, !dbg !51
  %154 = xor i16 %153, %128, !dbg !52
  %155 = mul nuw nsw i32 %151, %34, !dbg !33
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !34
  %157 = add i32 %155, %156, !dbg !37
  %158 = mul nuw nsw i32 %151, %.lobit, !dbg !39
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 2, i32 31), !dbg !34
  %160 = add i32 %158, %159, !dbg !37
  %161 = bitcast i32 %157 to float, !dbg !40
  %162 = bitcast i32 %160 to float, !dbg !41
  %163 = mul nuw nsw i16 %154, %48, !dbg !43
  %164 = zext i16 %163 to i32, !dbg !34
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 2, i32 31), !dbg !34
  %166 = trunc i32 %165 to i16, !dbg !34
  %167 = add i16 %163, %166, !dbg !37
  %168 = mul nuw nsw i16 %154, %59, !dbg !45
  %169 = zext i16 %168 to i32, !dbg !34
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 2, i32 31), !dbg !34
  %171 = trunc i32 %170 to i16, !dbg !34
  %172 = add i16 %168, %171, !dbg !37
  %173 = fcmp uge float %161, %162, !dbg !46
  %.not8 = xor i1 %173, %147, !dbg !46
  %174 = xor i32 %157, %160, !dbg !47
  %175 = select i1 %.not8, i32 0, i32 %174, !dbg !48
  %176 = xor i32 %175, %151, !dbg !49
  %177 = xor i16 %167, %172, !dbg !50
  %178 = select i1 %.not8, i16 0, i16 %177, !dbg !51
  %179 = xor i16 %178, %154, !dbg !52
  %180 = mul nuw nsw i32 %176, %39, !dbg !33
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 1, i32 31), !dbg !34
  %182 = add i32 %180, %181, !dbg !37
  %183 = mul nuw nsw i32 %176, %10, !dbg !39
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 1, i32 31), !dbg !34
  %185 = add i32 %183, %184, !dbg !37
  %186 = bitcast i32 %182 to float, !dbg !40
  %187 = bitcast i32 %185 to float, !dbg !41
  %188 = mul nuw nsw i16 %179, %53, !dbg !43
  %189 = zext i16 %188 to i32, !dbg !34
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 1, i32 31), !dbg !34
  %191 = trunc i32 %190 to i16, !dbg !34
  %192 = add i16 %188, %191, !dbg !37
  %193 = mul nuw nsw i16 %179, %64, !dbg !45
  %194 = zext i16 %193 to i32, !dbg !34
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 1, i32 31), !dbg !34
  %196 = trunc i32 %195 to i16, !dbg !34
  %197 = add i16 %193, %196, !dbg !37
  %198 = fcmp uge float %186, %187, !dbg !46
  %.not9 = xor i1 %198, %147, !dbg !46
  %199 = xor i32 %182, %185, !dbg !47
  %200 = select i1 %.not9, i32 0, i32 %199, !dbg !48
  %201 = xor i32 %200, %176, !dbg !49
  %202 = xor i16 %192, %197, !dbg !50
  %203 = select i1 %.not9, i16 0, i16 %202, !dbg !51
  %204 = xor i16 %203, %179, !dbg !52
  %205 = mul nuw nsw i32 %201, %36, !dbg !33
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 8, i32 31), !dbg !34
  %207 = add i32 %205, %206, !dbg !37
  %208 = mul nuw nsw i32 %201, %.lobit2, !dbg !39
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 8, i32 31), !dbg !34
  %210 = add i32 %208, %209, !dbg !37
  %211 = bitcast i32 %207 to float, !dbg !40
  %212 = bitcast i32 %210 to float, !dbg !41
  %213 = mul nuw nsw i16 %204, %50, !dbg !43
  %214 = zext i16 %213 to i32, !dbg !34
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 8, i32 31), !dbg !34
  %216 = trunc i32 %215 to i16, !dbg !34
  %217 = add i16 %213, %216, !dbg !37
  %218 = mul nuw nsw i16 %204, %61, !dbg !45
  %219 = zext i16 %218 to i32, !dbg !34
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 8, i32 31), !dbg !34
  %221 = trunc i32 %220 to i16, !dbg !34
  %222 = add i16 %218, %221, !dbg !37
  %223 = trunc i32 %32 to i1, !dbg !46
  %224 = fcmp uge float %211, %212, !dbg !46
  %.not10 = xor i1 %224, %223, !dbg !46
  %225 = xor i32 %207, %210, !dbg !47
  %226 = select i1 %.not10, i32 0, i32 %225, !dbg !48
  %227 = xor i32 %226, %201, !dbg !49
  %228 = xor i16 %217, %222, !dbg !50
  %229 = select i1 %.not10, i16 0, i16 %228, !dbg !51
  %230 = xor i16 %229, %204, !dbg !52
  %231 = mul nuw nsw i32 %227, %35, !dbg !33
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !34
  %233 = add i32 %231, %232, !dbg !37
  %234 = mul nuw nsw i32 %227, %.lobit1, !dbg !39
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !34
  %236 = add i32 %234, %235, !dbg !37
  %237 = bitcast i32 %233 to float, !dbg !40
  %238 = bitcast i32 %236 to float, !dbg !41
  %239 = mul nuw nsw i16 %230, %49, !dbg !43
  %240 = zext i16 %239 to i32, !dbg !34
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 4, i32 31), !dbg !34
  %242 = trunc i32 %241 to i16, !dbg !34
  %243 = add i16 %239, %242, !dbg !37
  %244 = mul nuw nsw i16 %230, %60, !dbg !45
  %245 = zext i16 %244 to i32, !dbg !34
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !34
  %247 = trunc i32 %246 to i16, !dbg !34
  %248 = add i16 %244, %247, !dbg !37
  %249 = fcmp uge float %237, %238, !dbg !46
  %.not11 = xor i1 %249, %223, !dbg !46
  %250 = xor i32 %233, %236, !dbg !47
  %251 = select i1 %.not11, i32 0, i32 %250, !dbg !48
  %252 = xor i32 %251, %227, !dbg !49
  %253 = xor i16 %243, %248, !dbg !50
  %254 = select i1 %.not11, i16 0, i16 %253, !dbg !51
  %255 = xor i16 %254, %230, !dbg !52
  %256 = mul nuw nsw i32 %252, %34, !dbg !33
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 2, i32 31), !dbg !34
  %258 = add i32 %256, %257, !dbg !37
  %259 = mul nuw nsw i32 %252, %.lobit, !dbg !39
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 2, i32 31), !dbg !34
  %261 = add i32 %259, %260, !dbg !37
  %262 = bitcast i32 %258 to float, !dbg !40
  %263 = bitcast i32 %261 to float, !dbg !41
  %264 = mul nuw nsw i16 %255, %48, !dbg !43
  %265 = zext i16 %264 to i32, !dbg !34
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 2, i32 31), !dbg !34
  %267 = trunc i32 %266 to i16, !dbg !34
  %268 = add i16 %264, %267, !dbg !37
  %269 = mul nuw nsw i16 %255, %59, !dbg !45
  %270 = zext i16 %269 to i32, !dbg !34
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 2, i32 31), !dbg !34
  %272 = trunc i32 %271 to i16, !dbg !34
  %273 = add i16 %269, %272, !dbg !37
  %274 = fcmp uge float %262, %263, !dbg !46
  %.not12 = xor i1 %274, %223, !dbg !46
  %275 = xor i32 %258, %261, !dbg !47
  %276 = select i1 %.not12, i32 0, i32 %275, !dbg !48
  %277 = xor i32 %276, %252, !dbg !49
  %278 = xor i16 %268, %273, !dbg !50
  %279 = select i1 %.not12, i16 0, i16 %278, !dbg !51
  %280 = xor i16 %279, %255, !dbg !52
  %281 = mul nuw nsw i32 %277, %39, !dbg !33
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 1, i32 31), !dbg !34
  %283 = add i32 %281, %282, !dbg !37
  %284 = mul nuw nsw i32 %277, %10, !dbg !39
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 1, i32 31), !dbg !34
  %286 = add i32 %284, %285, !dbg !37
  %287 = bitcast i32 %283 to float, !dbg !40
  %288 = bitcast i32 %286 to float, !dbg !41
  %289 = mul nuw nsw i16 %280, %53, !dbg !43
  %290 = zext i16 %289 to i32, !dbg !34
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 1, i32 31), !dbg !34
  %292 = trunc i32 %291 to i16, !dbg !34
  %293 = add i16 %289, %292, !dbg !37
  %294 = mul nuw nsw i16 %280, %64, !dbg !45
  %295 = zext i16 %294 to i32, !dbg !34
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !34
  %297 = trunc i32 %296 to i16, !dbg !34
  %298 = add i16 %294, %297, !dbg !37
  %299 = fcmp uge float %287, %288, !dbg !46
  %.not13 = xor i1 %299, %223, !dbg !46
  %300 = xor i32 %283, %286, !dbg !47
  %301 = select i1 %.not13, i32 0, i32 %300, !dbg !48
  %302 = xor i32 %301, %277, !dbg !49
  %303 = xor i16 %293, %298, !dbg !50
  %304 = select i1 %.not13, i16 0, i16 %303, !dbg !51
  %305 = xor i16 %304, %280, !dbg !52
  %306 = mul nuw nsw i32 %302, %37, !dbg !33
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 16, i32 31), !dbg !34
  %308 = add i32 %306, %307, !dbg !37
  %309 = mul nuw nsw i32 %302, %.lobit3, !dbg !39
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 16, i32 31), !dbg !34
  %311 = add i32 %309, %310, !dbg !37
  %312 = bitcast i32 %308 to float, !dbg !40
  %313 = bitcast i32 %311 to float, !dbg !41
  %314 = mul nuw nsw i16 %305, %51, !dbg !43
  %315 = zext i16 %314 to i32, !dbg !34
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 16, i32 31), !dbg !34
  %317 = trunc i32 %316 to i16, !dbg !34
  %318 = add i16 %314, %317, !dbg !37
  %319 = mul nuw nsw i16 %305, %62, !dbg !45
  %320 = zext i16 %319 to i32, !dbg !34
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 16, i32 31), !dbg !34
  %322 = trunc i32 %321 to i16, !dbg !34
  %323 = add i16 %319, %322, !dbg !37
  %324 = trunc i32 %9 to i1, !dbg !46
  %325 = fcmp uge float %312, %313, !dbg !46
  %.not14 = xor i1 %325, %324, !dbg !46
  %326 = xor i32 %308, %311, !dbg !47
  %327 = select i1 %.not14, i32 0, i32 %326, !dbg !48
  %328 = xor i32 %327, %302, !dbg !49
  %329 = xor i16 %318, %323, !dbg !50
  %330 = select i1 %.not14, i16 0, i16 %329, !dbg !51
  %331 = xor i16 %330, %305, !dbg !52
  %332 = mul nuw nsw i32 %328, %36, !dbg !33
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 8, i32 31), !dbg !34
  %334 = add i32 %332, %333, !dbg !37
  %335 = mul nuw nsw i32 %328, %.lobit2, !dbg !39
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 8, i32 31), !dbg !34
  %337 = add i32 %335, %336, !dbg !37
  %338 = bitcast i32 %334 to float, !dbg !40
  %339 = bitcast i32 %337 to float, !dbg !41
  %340 = mul nuw nsw i16 %331, %50, !dbg !43
  %341 = zext i16 %340 to i32, !dbg !34
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 8, i32 31), !dbg !34
  %343 = trunc i32 %342 to i16, !dbg !34
  %344 = add i16 %340, %343, !dbg !37
  %345 = mul nuw nsw i16 %331, %61, !dbg !45
  %346 = zext i16 %345 to i32, !dbg !34
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 8, i32 31), !dbg !34
  %348 = trunc i32 %347 to i16, !dbg !34
  %349 = add i16 %345, %348, !dbg !37
  %350 = fcmp uge float %338, %339, !dbg !46
  %.not15 = xor i1 %350, %324, !dbg !46
  %351 = xor i32 %334, %337, !dbg !47
  %352 = select i1 %.not15, i32 0, i32 %351, !dbg !48
  %353 = xor i32 %352, %328, !dbg !49
  %354 = xor i16 %344, %349, !dbg !50
  %355 = select i1 %.not15, i16 0, i16 %354, !dbg !51
  %356 = xor i16 %355, %331, !dbg !52
  %357 = mul nuw nsw i32 %353, %35, !dbg !33
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 4, i32 31), !dbg !34
  %359 = add i32 %357, %358, !dbg !37
  %360 = mul nuw nsw i32 %353, %.lobit1, !dbg !39
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !34
  %362 = add i32 %360, %361, !dbg !37
  %363 = bitcast i32 %359 to float, !dbg !40
  %364 = bitcast i32 %362 to float, !dbg !41
  %365 = mul nuw nsw i16 %356, %49, !dbg !43
  %366 = zext i16 %365 to i32, !dbg !34
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 4, i32 31), !dbg !34
  %368 = trunc i32 %367 to i16, !dbg !34
  %369 = add i16 %365, %368, !dbg !37
  %370 = mul nuw nsw i16 %356, %60, !dbg !45
  %371 = zext i16 %370 to i32, !dbg !34
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 4, i32 31), !dbg !34
  %373 = trunc i32 %372 to i16, !dbg !34
  %374 = add i16 %370, %373, !dbg !37
  %375 = fcmp uge float %363, %364, !dbg !46
  %.not16 = xor i1 %375, %324, !dbg !46
  %376 = xor i32 %359, %362, !dbg !47
  %377 = select i1 %.not16, i32 0, i32 %376, !dbg !48
  %378 = xor i32 %377, %353, !dbg !49
  %379 = xor i16 %369, %374, !dbg !50
  %380 = select i1 %.not16, i16 0, i16 %379, !dbg !51
  %381 = xor i16 %380, %356, !dbg !52
  %382 = mul nuw nsw i32 %378, %34, !dbg !33
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 2, i32 31), !dbg !34
  %384 = add i32 %382, %383, !dbg !37
  %385 = mul nuw nsw i32 %378, %.lobit, !dbg !39
  %386 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %385, i32 2, i32 31), !dbg !34
  %387 = add i32 %385, %386, !dbg !37
  %388 = bitcast i32 %384 to float, !dbg !40
  %389 = bitcast i32 %387 to float, !dbg !41
  %390 = mul nuw nsw i16 %381, %48, !dbg !43
  %391 = zext i16 %390 to i32, !dbg !34
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 2, i32 31), !dbg !34
  %393 = trunc i32 %392 to i16, !dbg !34
  %394 = add i16 %390, %393, !dbg !37
  %395 = mul nuw nsw i16 %381, %59, !dbg !45
  %396 = zext i16 %395 to i32, !dbg !34
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 2, i32 31), !dbg !34
  %398 = trunc i32 %397 to i16, !dbg !34
  %399 = add i16 %395, %398, !dbg !37
  %400 = fcmp uge float %388, %389, !dbg !46
  %.not17 = xor i1 %400, %324, !dbg !46
  %401 = xor i32 %384, %387, !dbg !47
  %402 = select i1 %.not17, i32 0, i32 %401, !dbg !48
  %403 = xor i32 %402, %378, !dbg !49
  %404 = xor i16 %394, %399, !dbg !50
  %405 = select i1 %.not17, i16 0, i16 %404, !dbg !51
  %406 = xor i16 %405, %381, !dbg !52
  %407 = mul nuw nsw i32 %403, %39, !dbg !33
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 1, i32 31), !dbg !34
  %409 = add i32 %407, %408, !dbg !37
  %410 = mul nuw nsw i32 %403, %10, !dbg !39
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 1, i32 31), !dbg !34
  %412 = add i32 %410, %411, !dbg !37
  %413 = bitcast i32 %409 to float, !dbg !40
  %414 = bitcast i32 %412 to float, !dbg !41
  %415 = mul nuw nsw i16 %406, %53, !dbg !43
  %416 = zext i16 %415 to i32, !dbg !34
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 1, i32 31), !dbg !34
  %418 = trunc i32 %417 to i16, !dbg !34
  %419 = add i16 %415, %418, !dbg !37
  %420 = mul nuw nsw i16 %406, %64, !dbg !45
  %421 = zext i16 %420 to i32, !dbg !34
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 1, i32 31), !dbg !34
  %423 = trunc i32 %422 to i16, !dbg !34
  %424 = add i16 %420, %423, !dbg !37
  %425 = fcmp uge float %413, %414, !dbg !46
  %.not18 = xor i1 %425, %324, !dbg !46
  %426 = xor i32 %409, %412, !dbg !47
  %427 = select i1 %.not18, i32 0, i32 %426, !dbg !48
  %428 = xor i32 %427, %403, !dbg !49
  %429 = xor i16 %419, %424, !dbg !50
  %430 = select i1 %.not18, i16 0, i16 %429, !dbg !51
  %431 = xor i16 %430, %406, !dbg !52
  %432 = mul nuw nsw i32 %428, %38, !dbg !33
  %433 = shl i32 %8, 1, !dbg !34
  %434 = and i32 %433, 62, !dbg !34
  %435 = or disjoint i32 %434, %.lobit4, !dbg !34
  %436 = zext nneg i32 %435 to i64, !dbg !34
  %437 = getelementptr i32, ptr addrspace(3) @global_smem, i64 %436, !dbg !34
  %438 = insertelement <1 x i32> poison, i32 %432, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %439 = icmp slt i32 %8, 64, !dbg !34
  %440 = sext i32 %8 to i64, !dbg !34
  %441 = getelementptr i32, ptr addrspace(3) @global_smem, i64 %440, !dbg !34
  %442 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %441, i1 %439) #4, !dbg !34
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 1, i32 31), !dbg !34
  %444 = add i32 %443, %442, !dbg !37
  %445 = icmp eq i32 %10, 0, !dbg !34
  %446 = and i1 %439, %445, !dbg !34
  %447 = insertelement <1 x i32> poison, i32 %444, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %447, i1 %446) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %448 = zext nneg i32 %434 to i64, !dbg !34
  %449 = getelementptr i32, ptr addrspace(3) @global_smem, i64 %448, !dbg !34
  %450 = load i32, ptr addrspace(3) %449, align 8, !dbg !34
  %451 = mul nuw nsw i32 %428, %.lobit4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %452 = insertelement <1 x i32> poison, i32 %451, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %452, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %453 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %441, i1 %439) #4, !dbg !34
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 1, i32 31), !dbg !34
  %455 = add i32 %454, %453, !dbg !37
  %456 = insertelement <1 x i32> poison, i32 %455, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %456, i1 %446) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %457 = load i32, ptr addrspace(3) %449, align 8, !dbg !34
  %458 = bitcast i32 %450 to float, !dbg !40
  %459 = bitcast i32 %457 to float, !dbg !41
  %460 = mul nuw nsw i16 %431, %52, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %461 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %436, !dbg !34
  %462 = insertelement <1 x i16> poison, i16 %460, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %461, <1 x i16> %462, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %463 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %440, !dbg !34
  %464 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %463, i1 %439) #4, !dbg !34
  %465 = zext i16 %464 to i32, !dbg !34
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 1, i32 31), !dbg !34
  %467 = trunc i32 %466 to i16, !dbg !34
  %468 = add i16 %464, %467, !dbg !37
  %469 = insertelement <1 x i16> poison, i16 %468, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %463, <1 x i16> %469, i1 %446) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %470 = getelementptr i16, ptr addrspace(3) @global_smem, i64 %448, !dbg !34
  %471 = load i16, ptr addrspace(3) %470, align 4, !dbg !34
  %472 = mul nuw nsw i16 %431, %63, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %473 = insertelement <1 x i16> poison, i16 %472, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %461, <1 x i16> %473, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %474 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %463, i1 %439) #4, !dbg !34
  %475 = zext i16 %474 to i32, !dbg !34
  %476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 1, i32 31), !dbg !34
  %477 = trunc i32 %476 to i16, !dbg !34
  %478 = add i16 %474, %477, !dbg !37
  %479 = insertelement <1 x i16> poison, i16 %478, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %463, <1 x i16> %479, i1 %446) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %480 = load i16, ptr addrspace(3) %470, align 4, !dbg !34
  %481 = fcmp olt float %458, %459, !dbg !53
  %482 = xor i32 %457, %450, !dbg !47
  %483 = select i1 %481, i32 %482, i32 0, !dbg !48
  %484 = xor i32 %428, %483, !dbg !49
  %485 = xor i16 %480, %471, !dbg !50
  %486 = select i1 %481, i16 %485, i16 0, !dbg !51
  %487 = xor i16 %431, %486, !dbg !52
  %488 = mul nuw nsw i32 %484, %37, !dbg !33
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %488, i32 16, i32 31), !dbg !34
  %490 = add i32 %488, %489, !dbg !37
  %491 = mul nuw nsw i32 %484, %.lobit3, !dbg !39
  %492 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %491, i32 16, i32 31), !dbg !34
  %493 = add i32 %491, %492, !dbg !37
  %494 = bitcast i32 %490 to float, !dbg !40
  %495 = bitcast i32 %493 to float, !dbg !41
  %496 = mul nuw nsw i16 %487, %51, !dbg !43
  %497 = zext i16 %496 to i32, !dbg !34
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 16, i32 31), !dbg !34
  %499 = trunc i32 %498 to i16, !dbg !34
  %500 = add i16 %496, %499, !dbg !37
  %501 = mul nuw nsw i16 %487, %62, !dbg !45
  %502 = zext i16 %501 to i32, !dbg !34
  %503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 16, i32 31), !dbg !34
  %504 = trunc i32 %503 to i16, !dbg !34
  %505 = add i16 %501, %504, !dbg !37
  %506 = fcmp olt float %494, %495, !dbg !53
  %507 = xor i32 %490, %493, !dbg !47
  %508 = select i1 %506, i32 %507, i32 0, !dbg !48
  %509 = xor i32 %508, %484, !dbg !49
  %510 = xor i16 %500, %505, !dbg !50
  %511 = select i1 %506, i16 %510, i16 0, !dbg !51
  %512 = xor i16 %511, %487, !dbg !52
  %513 = mul nuw nsw i32 %509, %36, !dbg !33
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 8, i32 31), !dbg !34
  %515 = add i32 %513, %514, !dbg !37
  %516 = mul nuw nsw i32 %509, %.lobit2, !dbg !39
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 8, i32 31), !dbg !34
  %518 = add i32 %516, %517, !dbg !37
  %519 = bitcast i32 %515 to float, !dbg !40
  %520 = bitcast i32 %518 to float, !dbg !41
  %521 = mul nuw nsw i16 %512, %50, !dbg !43
  %522 = zext i16 %521 to i32, !dbg !34
  %523 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 8, i32 31), !dbg !34
  %524 = trunc i32 %523 to i16, !dbg !34
  %525 = add i16 %521, %524, !dbg !37
  %526 = mul nuw nsw i16 %512, %61, !dbg !45
  %527 = zext i16 %526 to i32, !dbg !34
  %528 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %527, i32 8, i32 31), !dbg !34
  %529 = trunc i32 %528 to i16, !dbg !34
  %530 = add i16 %526, %529, !dbg !37
  %531 = fcmp olt float %519, %520, !dbg !53
  %532 = xor i32 %515, %518, !dbg !47
  %533 = select i1 %531, i32 %532, i32 0, !dbg !48
  %534 = xor i32 %533, %509, !dbg !49
  %535 = xor i16 %525, %530, !dbg !50
  %536 = select i1 %531, i16 %535, i16 0, !dbg !51
  %537 = xor i16 %536, %512, !dbg !52
  %538 = mul nuw nsw i32 %534, %35, !dbg !33
  %539 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %538, i32 4, i32 31), !dbg !34
  %540 = add i32 %538, %539, !dbg !37
  %541 = mul nuw nsw i32 %534, %.lobit1, !dbg !39
  %542 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %541, i32 4, i32 31), !dbg !34
  %543 = add i32 %541, %542, !dbg !37
  %544 = bitcast i32 %540 to float, !dbg !40
  %545 = bitcast i32 %543 to float, !dbg !41
  %546 = mul nuw nsw i16 %537, %49, !dbg !43
  %547 = zext i16 %546 to i32, !dbg !34
  %548 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %547, i32 4, i32 31), !dbg !34
  %549 = trunc i32 %548 to i16, !dbg !34
  %550 = add i16 %546, %549, !dbg !37
  %551 = mul nuw nsw i16 %537, %60, !dbg !45
  %552 = zext i16 %551 to i32, !dbg !34
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 4, i32 31), !dbg !34
  %554 = trunc i32 %553 to i16, !dbg !34
  %555 = add i16 %551, %554, !dbg !37
  %556 = fcmp olt float %544, %545, !dbg !53
  %557 = xor i32 %540, %543, !dbg !47
  %558 = select i1 %556, i32 %557, i32 0, !dbg !48
  %559 = xor i32 %558, %534, !dbg !49
  %560 = xor i16 %550, %555, !dbg !50
  %561 = select i1 %556, i16 %560, i16 0, !dbg !51
  %562 = xor i16 %561, %537, !dbg !52
  %563 = mul nuw nsw i32 %559, %34, !dbg !33
  %564 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %563, i32 2, i32 31), !dbg !34
  %565 = add i32 %563, %564, !dbg !37
  %566 = mul nuw nsw i32 %559, %.lobit, !dbg !39
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 2, i32 31), !dbg !34
  %568 = add i32 %566, %567, !dbg !37
  %569 = bitcast i32 %565 to float, !dbg !40
  %570 = bitcast i32 %568 to float, !dbg !41
  %571 = mul nuw nsw i16 %562, %48, !dbg !43
  %572 = zext i16 %571 to i32, !dbg !34
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 2, i32 31), !dbg !34
  %574 = trunc i32 %573 to i16, !dbg !34
  %575 = add i16 %571, %574, !dbg !37
  %576 = mul nuw nsw i16 %562, %59, !dbg !45
  %577 = zext i16 %576 to i32, !dbg !34
  %578 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %577, i32 2, i32 31), !dbg !34
  %579 = trunc i32 %578 to i16, !dbg !34
  %580 = add i16 %576, %579, !dbg !37
  %581 = fcmp olt float %569, %570, !dbg !53
  %582 = xor i32 %565, %568, !dbg !47
  %583 = select i1 %581, i32 %582, i32 0, !dbg !48
  %584 = xor i32 %583, %559, !dbg !49
  %585 = xor i16 %575, %580, !dbg !50
  %586 = select i1 %581, i16 %585, i16 0, !dbg !51
  %587 = xor i16 %586, %562, !dbg !52
  %588 = mul nuw nsw i32 %584, %39, !dbg !33
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 1, i32 31), !dbg !34
  %590 = add i32 %588, %589, !dbg !37
  %591 = mul nuw nsw i32 %584, %10, !dbg !39
  %592 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %591, i32 1, i32 31), !dbg !34
  %593 = add i32 %591, %592, !dbg !37
  %594 = bitcast i32 %590 to float, !dbg !40
  %595 = bitcast i32 %593 to float, !dbg !41
  %596 = mul nuw nsw i16 %587, %53, !dbg !43
  %597 = zext i16 %596 to i32, !dbg !34
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %597, i32 1, i32 31), !dbg !34
  %599 = trunc i32 %598 to i16, !dbg !34
  %600 = add i16 %596, %599, !dbg !37
  %601 = mul nuw nsw i16 %587, %64, !dbg !45
  %602 = zext i16 %601 to i32, !dbg !34
  %603 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %602, i32 1, i32 31), !dbg !34
  %604 = trunc i32 %603 to i16, !dbg !34
  %605 = add i16 %601, %604, !dbg !37
  %606 = fcmp olt float %594, %595, !dbg !53
  %607 = xor i16 %600, %605, !dbg !50
  %608 = select i1 %606, i16 %607, i16 0, !dbg !51
  %609 = xor i16 %608, %587, !dbg !52
  %610 = sext i16 %609 to i64, !dbg !54
  %611 = add nsw i64 %610, 64, !dbg !55
  %612 = icmp slt i16 %609, 0, !dbg !56
  %613 = select i1 %612, i64 %611, i64 %610, !dbg !57
  %614 = icmp ugt i64 %613, 63, !dbg !58
  br i1 %614, label %615, label %616, !dbg !59

615:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 53, ptr nonnull @assertFunc_0, i64 1), !dbg !59
  unreachable, !dbg !59

616:                                              ; preds = %7
  %617 = xor i32 %590, %593, !dbg !47
  %618 = select i1 %606, i32 %617, i32 0, !dbg !48
  %619 = xor i32 %618, %584, !dbg !49
  %620 = and i32 %8, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %621 = shl nuw nsw i64 %613, 2, !dbg !60
  %622 = and i64 %621, 192, !dbg !60
  %623 = or disjoint i64 %613, %622, !dbg !61
  %624 = or i64 %623, 48, !dbg !61
  %625 = getelementptr float, ptr addrspace(1) %1, i64 %624, !dbg !62
  %626 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %625, i1 true) #4, !dbg !63
  %627 = bitcast i32 %626 to float, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %626, i32 16, i32 31), !dbg !64
  %629 = bitcast i32 %628 to float, !dbg !64
  %630 = fadd float %627, %629, !dbg !67
  %631 = bitcast float %630 to i32, !dbg !64
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 8, i32 31), !dbg !64
  %633 = bitcast i32 %632 to float, !dbg !64
  %634 = fadd float %630, %633, !dbg !67
  %635 = bitcast float %634 to i32, !dbg !64
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 4, i32 31), !dbg !64
  %637 = bitcast i32 %636 to float, !dbg !64
  %638 = fadd float %634, %637, !dbg !67
  %639 = bitcast float %638 to i32, !dbg !64
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 2, i32 31), !dbg !64
  %641 = bitcast i32 %640 to float, !dbg !64
  %642 = fadd float %638, %641, !dbg !67
  %643 = bitcast float %642 to i32, !dbg !64
  %644 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %643, i32 1, i32 31), !dbg !64
  %645 = bitcast i32 %644 to float, !dbg !64
  %646 = fadd float %642, %645, !dbg !67
  %647 = icmp eq i32 %620, 0, !dbg !64
  %648 = zext nneg i32 %.lobit4 to i64, !dbg !64
  %649 = getelementptr float, ptr addrspace(3) @global_smem, i64 %648, !dbg !64
  %650 = bitcast float %646 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %649, <1 x i32> %650, i1 %647) #4, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %651 = icmp slt i32 %8, 2, !dbg !64
  %652 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %441, i1 %651) #4, !dbg !64
  %653 = bitcast i32 %652 to float, !dbg !64
  %654 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %652, i32 1, i32 31), !dbg !64
  %655 = bitcast i32 %654 to float, !dbg !64
  %656 = fadd float %653, %655, !dbg !67
  %657 = and i1 %651, %445, !dbg !64
  %658 = bitcast float %656 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %658, i1 %657) #4, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %659 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %660 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %626, i32 1, i32 0), !dbg !69
  %661 = bitcast i32 %660 to float, !dbg !69
  %662 = fadd float %627, %661, !dbg !70
  %663 = select i1 %647, float %627, float %662, !dbg !69
  %664 = bitcast float %663 to i32, !dbg !69
  %665 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %664, i32 2, i32 0), !dbg !69
  %666 = bitcast i32 %665 to float, !dbg !69
  %667 = icmp samesign ugt i32 %620, 1, !dbg !69
  %668 = fadd float %663, %666, !dbg !70
  %669 = select i1 %667, float %668, float %663, !dbg !69
  %670 = bitcast float %669 to i32, !dbg !69
  %671 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %670, i32 4, i32 0), !dbg !69
  %672 = bitcast i32 %671 to float, !dbg !69
  %673 = icmp samesign ugt i32 %620, 3, !dbg !69
  %674 = fadd float %669, %672, !dbg !70
  %675 = select i1 %673, float %674, float %669, !dbg !69
  %676 = bitcast float %675 to i32, !dbg !69
  %677 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %676, i32 8, i32 0), !dbg !69
  %678 = bitcast i32 %677 to float, !dbg !69
  %679 = icmp samesign ugt i32 %620, 7, !dbg !69
  %680 = fadd float %675, %678, !dbg !70
  %681 = select i1 %679, float %680, float %675, !dbg !69
  %682 = bitcast float %681 to i32, !dbg !69
  %683 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %682, i32 16, i32 0), !dbg !69
  %684 = bitcast i32 %683 to float, !dbg !69
  %685 = icmp samesign ugt i32 %620, 15, !dbg !69
  %686 = fadd float %681, %684, !dbg !70
  %687 = select i1 %685, float %686, float %681, !dbg !69
  %688 = icmp eq i32 %620, 31, !dbg !69
  %689 = bitcast float %687 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %649, <1 x i32> %689, i1 %688) #4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %.not20 = icmp eq i32 %.lobit4, 0, !dbg !69
  %690 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !69
  %691 = fadd float %690, %687, !dbg !70
  %692 = select i1 %.not20, float %687, float %691, !dbg !69
  %693 = bitcast float %692 to i32, !dbg !69
  %694 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %693, i32 1, i32 0), !dbg !69
  %695 = fsub float 1.000000e+00, %627, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %696 = bitcast float %695 to i32, !dbg !73
  %697 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %696, i32 1, i32 0), !dbg !73
  %698 = bitcast i32 %697 to float, !dbg !73
  %699 = fadd float %695, %698, !dbg !74
  %700 = select i1 %647, float %695, float %699, !dbg !73
  %701 = bitcast float %700 to i32, !dbg !73
  %702 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %701, i32 2, i32 0), !dbg !73
  %703 = bitcast i32 %702 to float, !dbg !73
  %704 = fadd float %700, %703, !dbg !74
  %705 = select i1 %667, float %704, float %700, !dbg !73
  %706 = bitcast float %705 to i32, !dbg !73
  %707 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %706, i32 4, i32 0), !dbg !73
  %708 = bitcast i32 %707 to float, !dbg !73
  %709 = fadd float %705, %708, !dbg !74
  %710 = select i1 %673, float %709, float %705, !dbg !73
  %711 = bitcast float %710 to i32, !dbg !73
  %712 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %711, i32 8, i32 0), !dbg !73
  %713 = bitcast i32 %712 to float, !dbg !73
  %714 = fadd float %710, %713, !dbg !74
  %715 = select i1 %679, float %714, float %710, !dbg !73
  %716 = bitcast float %715 to i32, !dbg !73
  %717 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %716, i32 16, i32 0), !dbg !73
  %718 = bitcast i32 %717 to float, !dbg !73
  %719 = fadd float %715, %718, !dbg !74
  %720 = select i1 %685, float %719, float %715, !dbg !73
  %721 = bitcast float %720 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %649, <1 x i32> %721, i1 %688) #4, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %722 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !73
  %723 = fadd float %722, %720, !dbg !74
  %724 = select i1 %.not20, float %720, float %723, !dbg !73
  %725 = bitcast float %724 to i32, !dbg !73
  %726 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %725, i32 1, i32 0), !dbg !73
  %727 = zext nneg i32 %11 to i64, !dbg !75
  %728 = getelementptr float, ptr addrspace(1) %2, i64 %727, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %619, ptr addrspace(1) %728, i1 true) #4, !dbg !76
  %729 = getelementptr float, ptr addrspace(1) %4, i64 %727, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %693, ptr addrspace(1) %729, i1 true) #4, !dbg !78
  %730 = getelementptr float, ptr addrspace(1) %5, i64 %727, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %725, ptr addrspace(1) %730, i1 true) #4, !dbg !80
  %731 = icmp eq i32 %11, 0, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %659, ptr addrspace(1) %3, i1 %731) #4, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.up.i32(i32, i32, i32, i32) #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbgwn6c4thbkbme2uo2t2m4s2rpcaqeupbfwgcgqorit6gogaz2y.py", directory: "inductor_cache/bg")
!4 = !{ptr @triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_5", linkageName: "triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_5", scope: !3, file: !3, line: 24, type: !9, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 31, column: 34, scope: !11)
!13 = !DILocation(line: 35, column: 39, scope: !11)
!14 = !DILocation(line: 35, column: 58, scope: !11)
!15 = !DILocation(line: 35, column: 53, scope: !11)
!16 = !DILocation(line: 35, column: 30, scope: !11)
!17 = !DILocation(line: 35, column: 65, scope: !11)
!18 = !DILocation(line: 36, column: 30, scope: !11)
!19 = !DILocation(line: 36, column: 65, scope: !11)
!20 = !DILocation(line: 38, column: 18, scope: !11)
!21 = !DILocation(line: 40, column: 18, scope: !11)
!22 = !DILocation(line: 41, column: 18, scope: !11)
!23 = !DILocation(line: 42, column: 18, scope: !11)
!24 = !DILocation(line: 44, column: 19, scope: !11)
!25 = !DILocation(line: 575, column: 44, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = distinct !DILexicalBlockFile(scope: !11, file: !27, discriminator: 0)
!29 = !DILocation(line: 47, column: 71, scope: !11)
!30 = !DILocation(line: 502, column: 14, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!32 = !DILocation(line: 505, column: 21, scope: !31, inlinedAt: !29)
!33 = !DILocation(line: 506, column: 40, scope: !31, inlinedAt: !29)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !29)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !29)
!38 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!39 = !DILocation(line: 507, column: 41, scope: !31, inlinedAt: !29)
!40 = !DILocation(line: 510, column: 20, scope: !31, inlinedAt: !29)
!41 = !DILocation(line: 511, column: 22, scope: !31, inlinedAt: !29)
!42 = !DILocation(line: 516, column: 36, scope: !31, inlinedAt: !29)
!43 = !DILocation(line: 516, column: 23, scope: !31, inlinedAt: !29)
!44 = !DILocation(line: 519, column: 37, scope: !31, inlinedAt: !29)
!45 = !DILocation(line: 519, column: 23, scope: !31, inlinedAt: !29)
!46 = !DILocation(line: 547, column: 28, scope: !31, inlinedAt: !29)
!47 = !DILocation(line: 548, column: 38, scope: !31, inlinedAt: !29)
!48 = !DILocation(line: 548, column: 46, scope: !31, inlinedAt: !29)
!49 = !DILocation(line: 548, column: 15, scope: !31, inlinedAt: !29)
!50 = !DILocation(line: 549, column: 48, scope: !31, inlinedAt: !29)
!51 = !DILocation(line: 549, column: 59, scope: !31, inlinedAt: !29)
!52 = !DILocation(line: 549, column: 22, scope: !31, inlinedAt: !29)
!53 = !DILocation(line: 536, column: 22, scope: !31, inlinedAt: !29)
!54 = !DILocation(line: 48, column: 21, scope: !11)
!55 = !DILocation(line: 50, column: 20, scope: !11)
!56 = !DILocation(line: 51, column: 20, scope: !11)
!57 = !DILocation(line: 52, column: 35, scope: !11)
!58 = !DILocation(line: 53, column: 37, scope: !11)
!59 = !DILocation(line: 53, column: 50, scope: !11)
!60 = !DILocation(line: 54, column: 41, scope: !11)
!61 = !DILocation(line: 54, column: 65, scope: !11)
!62 = !DILocation(line: 54, column: 31, scope: !11)
!63 = !DILocation(line: 54, column: 80, scope: !11)
!64 = !DILocation(line: 267, column: 36, scope: !65, inlinedAt: !66)
!65 = distinct !DILexicalBlockFile(scope: !11, file: !36, discriminator: 0)
!66 = !DILocation(line: 56, column: 26, scope: !11)
!67 = !DILocation(line: 256, column: 15, scope: !68, inlinedAt: !66)
!68 = distinct !DILexicalBlockFile(scope: !65, file: !36, discriminator: 0)
!69 = !DILocation(line: 59, column: 46, scope: !11)
!70 = !DILocation(line: 13, column: 20, scope: !71, inlinedAt: !69)
!71 = distinct !DILexicalBlockFile(scope: !11, file: !3, discriminator: 0)
!72 = !DILocation(line: 60, column: 19, scope: !11)
!73 = !DILocation(line: 63, column: 46, scope: !11)
!74 = !DILocation(line: 13, column: 20, scope: !71, inlinedAt: !73)
!75 = !DILocation(line: 64, column: 25, scope: !11)
!76 = !DILocation(line: 64, column: 72, scope: !11)
!77 = !DILocation(line: 65, column: 25, scope: !11)
!78 = !DILocation(line: 65, column: 72, scope: !11)
!79 = !DILocation(line: 66, column: 25, scope: !11)
!80 = !DILocation(line: 66, column: 72, scope: !11)
!81 = !DILocation(line: 67, column: 68, scope: !11)
!82 = !DILocation(line: 67, column: 4, scope: !11)
