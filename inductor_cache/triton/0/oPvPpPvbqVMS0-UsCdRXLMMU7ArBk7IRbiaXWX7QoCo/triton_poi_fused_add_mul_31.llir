; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %12, 64, !dbg !12
  %14 = or disjoint i32 %12, 128, !dbg !12
  %15 = or disjoint i32 %12, 192, !dbg !12
  %16 = shl i32 %10, 2, !dbg !12
  %17 = and i32 %16, 12, !dbg !12
  %18 = and i32 %16, 252, !dbg !12
  %19 = and i32 %10, 255, !dbg !12
  %20 = or disjoint i32 %9, %12, !dbg !13
  %21 = or disjoint i32 %9, %13, !dbg !13
  %22 = or disjoint i32 %9, %14, !dbg !13
  %23 = or disjoint i32 %9, %15, !dbg !13
  %24 = or disjoint i32 %9, %18, !dbg !13
  %25 = or disjoint i32 %9, %19, !dbg !13
  %26 = icmp slt i32 %20, 512, !dbg !14
  %27 = icmp slt i32 %21, 512, !dbg !14
  %28 = icmp slt i32 %22, 512, !dbg !14
  %29 = icmp slt i32 %23, 512, !dbg !14
  %30 = icmp slt i32 %24, 512, !dbg !14
  %31 = icmp slt i32 %25, 512, !dbg !14
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %33 = shl i32 %32, 4, !dbg !16
  %34 = lshr i32 %10, 6, !dbg !17
  %35 = and i32 %34, 3, !dbg !17
  %36 = or disjoint i32 %33, %17, !dbg !18
  %37 = or disjoint i32 %33, %35, !dbg !18
  %38 = or disjoint i32 %37, 4, !dbg !18
  %39 = or disjoint i32 %37, 8, !dbg !18
  %40 = or disjoint i32 %37, 12, !dbg !18
  %41 = icmp slt i32 %36, 64, !dbg !19
  %42 = icmp slt i32 %37, 64, !dbg !19
  %43 = icmp slt i32 %38, 64, !dbg !19
  %44 = icmp slt i32 %39, 64, !dbg !19
  %45 = icmp slt i32 %40, 64, !dbg !19
  %.frozen = freeze i32 %24, !dbg !20
  %46 = sdiv i32 %.frozen, 128, !dbg !20
  %47 = mul i32 %46, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %47, !dbg !21
  %48 = srem i32 %25, 128, !dbg !21
  %49 = shl i32 %20, 6, !dbg !22
  %50 = shl i32 %21, 6, !dbg !22
  %51 = shl i32 %22, 6, !dbg !22
  %52 = shl i32 %23, 6, !dbg !22
  %53 = add i32 %36, %49, !dbg !23
  %54 = add i32 %36, %50, !dbg !23
  %55 = add i32 %36, %51, !dbg !23
  %56 = add i32 %36, %52, !dbg !23
  %57 = sext i32 %53 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = sext i32 %54 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = sext i32 %55 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !24
  %63 = sext i32 %56 to i64, !dbg !24
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !24
  %65 = and i1 %26, %41, !dbg !25
  %66 = and i1 %27, %41, !dbg !25
  %67 = and i1 %28, %41, !dbg !25
  %68 = and i1 %29, %41, !dbg !25
  %69 = and i1 %30, %42, !dbg !25
  %70 = and i1 %43, %30, !dbg !25
  %71 = and i1 %44, %30, !dbg !25
  %72 = and i1 %45, %30, !dbg !25
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %65) #2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = bitcast i32 %74 to float, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = bitcast i32 %76 to float, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %66) #2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !26
  %87 = bitcast i32 %83 to float, !dbg !26
  %88 = bitcast i32 %84 to float, !dbg !26
  %89 = bitcast i32 %85 to float, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %67) #2, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !26
  %96 = bitcast i32 %92 to float, !dbg !26
  %97 = bitcast i32 %93 to float, !dbg !26
  %98 = bitcast i32 %94 to float, !dbg !26
  %99 = bitcast i32 %95 to float, !dbg !26
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %68) #2, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !26
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !26
  %105 = bitcast i32 %101 to float, !dbg !26
  %106 = bitcast i32 %102 to float, !dbg !26
  %107 = bitcast i32 %103 to float, !dbg !26
  %108 = bitcast i32 %104 to float, !dbg !26
  %109 = sext i32 %48 to i64, !dbg !27
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !27
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %31) #2, !dbg !28
  %112 = shl i32 %37, 7, !dbg !29
  %113 = shl i32 %38, 7, !dbg !29
  %114 = shl i32 %39, 7, !dbg !29
  %115 = shl i32 %40, 7, !dbg !29
  %116 = shl i32 %46, 13, !dbg !30
  %117 = add i32 %116, %.decomposed, !dbg !31
  %118 = add i32 %117, %112, !dbg !32
  %119 = add i32 %117, %113, !dbg !32
  %120 = add i32 %117, %114, !dbg !32
  %121 = add i32 %117, %115, !dbg !32
  %122 = sext i32 %118 to i64, !dbg !33
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !33
  %124 = sext i32 %119 to i64, !dbg !33
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !33
  %126 = sext i32 %120 to i64, !dbg !33
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !33
  %128 = sext i32 %121 to i64, !dbg !33
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !33
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %69) #2, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !34
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !34
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !34
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !34
  %135 = bitcast i32 %131 to float, !dbg !34
  %136 = bitcast i32 %132 to float, !dbg !34
  %137 = bitcast i32 %133 to float, !dbg !34
  %138 = bitcast i32 %134 to float, !dbg !34
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %70) #2, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !34
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !34
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !34
  %144 = bitcast i32 %140 to float, !dbg !34
  %145 = bitcast i32 %141 to float, !dbg !34
  %146 = bitcast i32 %142 to float, !dbg !34
  %147 = bitcast i32 %143 to float, !dbg !34
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %71) #2, !dbg !34
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !34
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !34
  %153 = bitcast i32 %149 to float, !dbg !34
  %154 = bitcast i32 %150 to float, !dbg !34
  %155 = bitcast i32 %151 to float, !dbg !34
  %156 = bitcast i32 %152 to float, !dbg !34
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %72) #2, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !34
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !34
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !34
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !34
  %162 = bitcast i32 %158 to float, !dbg !34
  %163 = bitcast i32 %159 to float, !dbg !34
  %164 = bitcast i32 %160 to float, !dbg !34
  %165 = bitcast i32 %161 to float, !dbg !34
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !35
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %31) #2, !dbg !36
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !37
  %169 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !37
  %171 = load float, ptr addrspace(3) %170, align 16, !dbg !37
  %172 = getelementptr inbounds i8, ptr addrspace(3) %170, i32 4, !dbg !37
  %173 = load float, ptr addrspace(3) %172, align 4, !dbg !37
  %174 = getelementptr inbounds i8, ptr addrspace(3) %170, i32 8, !dbg !37
  %175 = load float, ptr addrspace(3) %174, align 8, !dbg !37
  %176 = getelementptr inbounds i8, ptr addrspace(3) %170, i32 12, !dbg !37
  %177 = load float, ptr addrspace(3) %176, align 4, !dbg !37
  %178 = fmul float %171, %135, !dbg !37
  %179 = fmul float %173, %136, !dbg !37
  %180 = fmul float %175, %137, !dbg !37
  %181 = fmul float %177, %138, !dbg !37
  %182 = fmul float %171, %144, !dbg !37
  %183 = fmul float %173, %145, !dbg !37
  %184 = fmul float %175, %146, !dbg !37
  %185 = fmul float %177, %147, !dbg !37
  %186 = fmul float %171, %153, !dbg !37
  %187 = fmul float %173, %154, !dbg !37
  %188 = fmul float %175, %155, !dbg !37
  %189 = fmul float %177, %156, !dbg !37
  %190 = fmul float %171, %162, !dbg !37
  %191 = fmul float %173, %163, !dbg !37
  %192 = fmul float %175, %164, !dbg !37
  %193 = fmul float %177, %165, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %194 = shl i32 %10, 6, !dbg !37
  %195 = and i32 %194, 4032, !dbg !37
  %196 = or disjoint i32 %195, %35, !dbg !37
  %197 = and i32 %16, 1020, !dbg !37
  %198 = lshr exact i32 %195, 2, !dbg !37
  %199 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %198, !dbg !37
  %200 = getelementptr float, ptr addrspace(3) %199, i32 %196, !dbg !37
  %201 = bitcast float %178 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #2, !dbg !37
  %202 = or disjoint i32 %196, 16, !dbg !37
  %203 = lshr i32 %202, 4, !dbg !37
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !37
  %205 = getelementptr float, ptr addrspace(3) %204, i32 %202, !dbg !37
  %206 = bitcast float %179 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !37
  %207 = or disjoint i32 %196, 32, !dbg !37
  %208 = lshr i32 %207, 4, !dbg !37
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !37
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %207, !dbg !37
  %211 = bitcast float %180 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !37
  %212 = or disjoint i32 %196, 48, !dbg !37
  %213 = lshr i32 %212, 4, !dbg !37
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !37
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %212, !dbg !37
  %216 = bitcast float %181 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !37
  %217 = or disjoint i32 %196, 4, !dbg !37
  %218 = getelementptr float, ptr addrspace(3) %199, i32 %217, !dbg !37
  %219 = bitcast float %182 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !37
  %220 = or disjoint i32 %196, 20, !dbg !37
  %221 = lshr i32 %220, 4, !dbg !37
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !37
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %220, !dbg !37
  %224 = bitcast float %183 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #2, !dbg !37
  %225 = or disjoint i32 %196, 36, !dbg !37
  %226 = lshr i32 %225, 4, !dbg !37
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !37
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %225, !dbg !37
  %229 = bitcast float %184 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !37
  %230 = or disjoint i32 %196, 52, !dbg !37
  %231 = lshr i32 %230, 4, !dbg !37
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %231, !dbg !37
  %233 = getelementptr float, ptr addrspace(3) %232, i32 %230, !dbg !37
  %234 = bitcast float %185 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !37
  %235 = or disjoint i32 %196, 8, !dbg !37
  %236 = getelementptr float, ptr addrspace(3) %199, i32 %235, !dbg !37
  %237 = bitcast float %186 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #2, !dbg !37
  %238 = or disjoint i32 %196, 24, !dbg !37
  %239 = lshr i32 %238, 4, !dbg !37
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !37
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %238, !dbg !37
  %242 = bitcast float %187 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #2, !dbg !37
  %243 = or disjoint i32 %196, 40, !dbg !37
  %244 = lshr i32 %243, 4, !dbg !37
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i32 %244, !dbg !37
  %246 = getelementptr float, ptr addrspace(3) %245, i32 %243, !dbg !37
  %247 = bitcast float %188 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #2, !dbg !37
  %248 = or disjoint i32 %196, 56, !dbg !37
  %249 = lshr i32 %248, 4, !dbg !37
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i32 %249, !dbg !37
  %251 = getelementptr float, ptr addrspace(3) %250, i32 %248, !dbg !37
  %252 = bitcast float %189 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #2, !dbg !37
  %253 = or disjoint i32 %196, 12, !dbg !37
  %254 = getelementptr float, ptr addrspace(3) %199, i32 %253, !dbg !37
  %255 = bitcast float %190 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #2, !dbg !37
  %256 = or disjoint i32 %196, 28, !dbg !37
  %257 = lshr i32 %256, 4, !dbg !37
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !37
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %256, !dbg !37
  %260 = bitcast float %191 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #2, !dbg !37
  %261 = or disjoint i32 %196, 44, !dbg !37
  %262 = lshr i32 %261, 4, !dbg !37
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !37
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %261, !dbg !37
  %265 = bitcast float %192 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #2, !dbg !37
  %266 = or disjoint i32 %196, 60, !dbg !37
  %267 = lshr i32 %266, 4, !dbg !37
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !37
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %266, !dbg !37
  %270 = bitcast float %193 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %271 = lshr i32 %197, 4, !dbg !37
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !37
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %197, !dbg !37
  %274 = load float, ptr addrspace(3) %273, align 4, !dbg !37
  %275 = or disjoint i32 %197, 1, !dbg !37
  %276 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %275, !dbg !37
  %277 = load float, ptr addrspace(3) %276, align 4, !dbg !37
  %278 = or disjoint i32 %197, 2, !dbg !37
  %279 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %278, !dbg !37
  %280 = load float, ptr addrspace(3) %279, align 4, !dbg !37
  %281 = or disjoint i32 %197, 3, !dbg !37
  %282 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %281, !dbg !37
  %283 = load float, ptr addrspace(3) %282, align 4, !dbg !37
  %284 = or disjoint i32 %197, 1024, !dbg !37
  %285 = lshr i32 %284, 4, !dbg !37
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !37
  %287 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %284, !dbg !37
  %288 = load float, ptr addrspace(3) %287, align 4, !dbg !37
  %289 = or disjoint i32 %197, 1025, !dbg !37
  %290 = lshr i32 %289, 4, !dbg !37
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !37
  %292 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %289, !dbg !37
  %293 = load float, ptr addrspace(3) %292, align 4, !dbg !37
  %294 = or disjoint i32 %197, 1026, !dbg !37
  %295 = lshr i32 %294, 4, !dbg !37
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !37
  %297 = getelementptr inbounds float, ptr addrspace(3) %296, i32 %294, !dbg !37
  %298 = load float, ptr addrspace(3) %297, align 4, !dbg !37
  %299 = or disjoint i32 %197, 1027, !dbg !37
  %300 = lshr i32 %299, 4, !dbg !37
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %300, !dbg !37
  %302 = getelementptr inbounds float, ptr addrspace(3) %301, i32 %299, !dbg !37
  %303 = load float, ptr addrspace(3) %302, align 4, !dbg !37
  %304 = or disjoint i32 %197, 2048, !dbg !37
  %305 = lshr i32 %304, 4, !dbg !37
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %305, !dbg !37
  %307 = getelementptr inbounds float, ptr addrspace(3) %306, i32 %304, !dbg !37
  %308 = load float, ptr addrspace(3) %307, align 4, !dbg !37
  %309 = or disjoint i32 %197, 2049, !dbg !37
  %310 = lshr i32 %309, 4, !dbg !37
  %311 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %310, !dbg !37
  %312 = getelementptr inbounds float, ptr addrspace(3) %311, i32 %309, !dbg !37
  %313 = load float, ptr addrspace(3) %312, align 4, !dbg !37
  %314 = or disjoint i32 %197, 2050, !dbg !37
  %315 = lshr i32 %314, 4, !dbg !37
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %315, !dbg !37
  %317 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %314, !dbg !37
  %318 = load float, ptr addrspace(3) %317, align 4, !dbg !37
  %319 = or disjoint i32 %197, 2051, !dbg !37
  %320 = lshr i32 %319, 4, !dbg !37
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320, !dbg !37
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %319, !dbg !37
  %323 = load float, ptr addrspace(3) %322, align 4, !dbg !37
  %324 = or disjoint i32 %197, 3072, !dbg !37
  %325 = lshr i32 %324, 4, !dbg !37
  %326 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %325, !dbg !37
  %327 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %324, !dbg !37
  %328 = load float, ptr addrspace(3) %327, align 4, !dbg !37
  %329 = or disjoint i32 %197, 3073, !dbg !37
  %330 = lshr i32 %329, 4, !dbg !37
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %330, !dbg !37
  %332 = getelementptr inbounds float, ptr addrspace(3) %331, i32 %329, !dbg !37
  %333 = load float, ptr addrspace(3) %332, align 4, !dbg !37
  %334 = or disjoint i32 %197, 3074, !dbg !37
  %335 = lshr i32 %334, 4, !dbg !37
  %336 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %335, !dbg !37
  %337 = getelementptr inbounds float, ptr addrspace(3) %336, i32 %334, !dbg !37
  %338 = load float, ptr addrspace(3) %337, align 4, !dbg !37
  %339 = or disjoint i32 %197, 3075, !dbg !37
  %340 = lshr i32 %339, 4, !dbg !37
  %341 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %340, !dbg !37
  %342 = getelementptr inbounds float, ptr addrspace(3) %341, i32 %339, !dbg !37
  %343 = load float, ptr addrspace(3) %342, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %.idx = shl nuw nsw i32 %19, 3, !dbg !38
  %344 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !38
  %345 = insertelement <1 x i32> poison, i32 %167, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %.idx7 = shl nuw nsw i32 %12, 3, !dbg !38
  %346 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !38
  %347 = load float, ptr addrspace(3) %346, align 8, !dbg !38
  %.idx8 = shl nuw nsw i32 %13, 3, !dbg !38
  %348 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !38
  %349 = load float, ptr addrspace(3) %348, align 8, !dbg !38
  %.idx9 = shl nuw nsw i32 %14, 3, !dbg !38
  %350 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !38
  %351 = load float, ptr addrspace(3) %350, align 8, !dbg !38
  %.idx10 = shl nuw nsw i32 %15, 3, !dbg !38
  %352 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !38
  %353 = load float, ptr addrspace(3) %352, align 8, !dbg !38
  %354 = fadd float %274, %347, !dbg !39
  %355 = fadd float %277, %347, !dbg !39
  %356 = fadd float %280, %347, !dbg !39
  %357 = fadd float %283, %347, !dbg !39
  %358 = fadd float %288, %349, !dbg !39
  %359 = fadd float %293, %349, !dbg !39
  %360 = fadd float %298, %349, !dbg !39
  %361 = fadd float %303, %349, !dbg !39
  %362 = fadd float %308, %351, !dbg !39
  %363 = fadd float %313, %351, !dbg !39
  %364 = fadd float %318, %351, !dbg !39
  %365 = fadd float %323, %351, !dbg !39
  %366 = fadd float %328, %353, !dbg !39
  %367 = fadd float %333, %353, !dbg !39
  %368 = fadd float %338, %353, !dbg !39
  %369 = fadd float %343, %353, !dbg !39
  %370 = fadd float %354, %78, !dbg !38
  %371 = fadd float %355, %79, !dbg !38
  %372 = fadd float %356, %80, !dbg !38
  %373 = fadd float %357, %81, !dbg !38
  %374 = fadd float %358, %87, !dbg !38
  %375 = fadd float %359, %88, !dbg !38
  %376 = fadd float %360, %89, !dbg !38
  %377 = fadd float %361, %90, !dbg !38
  %378 = fadd float %362, %96, !dbg !38
  %379 = fadd float %363, %97, !dbg !38
  %380 = fadd float %364, %98, !dbg !38
  %381 = fadd float %365, %99, !dbg !38
  %382 = fadd float %366, %105, !dbg !38
  %383 = fadd float %367, %106, !dbg !38
  %384 = fadd float %368, %107, !dbg !38
  %385 = fadd float %369, %108, !dbg !38
  %386 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !40
  %387 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !40
  %388 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !40
  %389 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !40
  %390 = bitcast float %370 to i32, !dbg !41
  %391 = bitcast float %371 to i32, !dbg !41
  %392 = bitcast float %372 to i32, !dbg !41
  %393 = bitcast float %373 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %390, i32 %391, i32 %392, i32 %393, ptr addrspace(1) %386, i1 %65) #2, !dbg !41
  %394 = bitcast float %374 to i32, !dbg !41
  %395 = bitcast float %375 to i32, !dbg !41
  %396 = bitcast float %376 to i32, !dbg !41
  %397 = bitcast float %377 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %394, i32 %395, i32 %396, i32 %397, ptr addrspace(1) %387, i1 %66) #2, !dbg !41
  %398 = bitcast float %378 to i32, !dbg !41
  %399 = bitcast float %379 to i32, !dbg !41
  %400 = bitcast float %380 to i32, !dbg !41
  %401 = bitcast float %381 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %398, i32 %399, i32 %400, i32 %401, ptr addrspace(1) %388, i1 %67) #2, !dbg !41
  %402 = bitcast float %382 to i32, !dbg !41
  %403 = bitcast float %383 to i32, !dbg !41
  %404 = bitcast float %384 to i32, !dbg !41
  %405 = bitcast float %385 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %402, i32 %403, i32 %404, i32 %405, ptr addrspace(1) %389, i1 %68) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuaiqbjq5ev7eoohu2twzfo5zxgsr4qztxl4pucbdobc6xugcgaw.py", directory: "inductor_cache/ua")
!4 = !{ptr @triton_poi_fused_add_mul_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_31, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_31", linkageName: "triton_poi_fused_add_mul_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 39, scope: !7)
!30 = !DILocation(line: 34, column: 49, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 34, column: 44, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 54, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 25, scope: !7)
!41 = !DILocation(line: 39, column: 44, scope: !7)
!42 = !DILocation(line: 39, column: 4, scope: !7)
