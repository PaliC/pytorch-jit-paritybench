; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 1024, !dbg !14
  %12 = sdiv i32 %10, 2, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %13 = sdiv i32 %.frozen, 256, !dbg !16
  %14 = mul i32 %13, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %14, !dbg !17
  %15 = shl i32 %12, 3, !dbg !18
  %16 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !19
  %17 = insertelement <2 x i32> %16, i32 %12, i64 1, !dbg !19
  %18 = srem <2 x i32> %17, splat (i32 2), !dbg !19
  %19 = extractelement <2 x i32> %18, i64 1, !dbg !20
  %20 = shl nsw i32 %19, 1, !dbg !21
  %21 = icmp sgt i32 %19, 0, !dbg !22
  %22 = extractelement <2 x i32> %18, i64 0, !dbg !23
  %23 = shl nsw i32 %22, 1, !dbg !24
  %24 = icmp sgt <2 x i32> %18, <i32 0, i32 -1>, !dbg !25
  %25 = extractelement <2 x i1> %24, i64 0, !dbg !26
  %26 = and i1 %25, %21, !dbg !26
  %27 = add i32 %15, %23, !dbg !27
  %28 = add i32 %27, -5, !dbg !28
  %29 = sext i32 %28 to i64, !dbg !29
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !29
  %31 = and i1 %11, %26, !dbg !30
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 -8388608, i1 %31) #1, !dbg !31
  %33 = bitcast i32 %32 to float, !dbg !31
  %34 = icmp sgt i32 %22, -1, !dbg !32
  %35 = and i1 %34, %21, !dbg !33
  %36 = add i32 %27, -4, !dbg !34
  %37 = sext i32 %36 to i64, !dbg !35
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !35
  %39 = and i1 %11, %35, !dbg !36
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %39, i32 -8388608, i1 %39) #1, !dbg !37
  %41 = bitcast i32 %40 to float, !dbg !37
  %42 = fcmp ogt float %41, %33, !dbg !38
  %43 = fcmp uno float %41, 0.000000e+00, !dbg !42
  %44 = or i1 %42, %43, !dbg !43
  %45 = select i1 %44, float %41, float %33, !dbg !44
  %46 = add i32 %27, -3, !dbg !45
  %47 = sext i32 %46 to i64, !dbg !46
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !46
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %39, i32 -8388608, i1 %39) #1, !dbg !47
  %50 = bitcast i32 %49 to float, !dbg !47
  %51 = fcmp olt float %45, %50, !dbg !48
  %52 = fcmp uno float %50, 0.000000e+00, !dbg !50
  %53 = or i1 %52, %51, !dbg !51
  %54 = select i1 %53, float %50, float %45, !dbg !52
  %55 = extractelement <2 x i1> %24, i64 1, !dbg !53
  %56 = and i1 %25, %55, !dbg !53
  %57 = add i32 %27, -1, !dbg !54
  %58 = sext i32 %57 to i64, !dbg !55
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !55
  %60 = and i1 %11, %56, !dbg !56
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %60, i32 -8388608, i1 %60) #1, !dbg !57
  %62 = bitcast i32 %61 to float, !dbg !57
  %63 = fcmp olt float %54, %62, !dbg !58
  %64 = fcmp uno float %62, 0.000000e+00, !dbg !60
  %65 = or i1 %64, %63, !dbg !61
  %66 = select i1 %65, float %62, float %54, !dbg !62
  %67 = or i32 %19, %22, !dbg !20
  %68 = icmp sgt i32 %67, -1, !dbg !20
  %69 = sext i32 %27 to i64, !dbg !63
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !63
  %71 = and i1 %11, %68, !dbg !64
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %71, i32 -8388608, i1 %71) #1, !dbg !65
  %73 = bitcast i32 %72 to float, !dbg !65
  %74 = fcmp olt float %66, %73, !dbg !66
  %75 = fcmp uno float %73, 0.000000e+00, !dbg !68
  %76 = or i1 %75, %74, !dbg !69
  %77 = select i1 %76, float %73, float %66, !dbg !70
  %78 = or disjoint i32 %27, 1, !dbg !71
  %79 = sext i32 %78 to i64, !dbg !72
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !72
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %71, i32 -8388608, i1 %71) #1, !dbg !73
  %82 = bitcast i32 %81 to float, !dbg !73
  %83 = fcmp olt float %77, %82, !dbg !74
  %84 = fcmp uno float %82, 0.000000e+00, !dbg !76
  %85 = or i1 %84, %83, !dbg !77
  %86 = select i1 %85, float %82, float %77, !dbg !78
  %87 = add i32 %27, 3, !dbg !79
  %88 = sext i32 %87 to i64, !dbg !80
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !80
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %60, i32 -8388608, i1 %60) #1, !dbg !81
  %91 = bitcast i32 %90 to float, !dbg !81
  %92 = fcmp olt float %86, %91, !dbg !82
  %93 = fcmp uno float %91, 0.000000e+00, !dbg !84
  %94 = or i1 %93, %92, !dbg !85
  %95 = select i1 %94, float %91, float %86, !dbg !86
  %96 = add i32 %27, 4, !dbg !87
  %97 = sext i32 %96 to i64, !dbg !88
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !88
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %71, i32 -8388608, i1 %71) #1, !dbg !89
  %100 = bitcast i32 %99 to float, !dbg !89
  %101 = fcmp olt float %95, %100, !dbg !90
  %102 = fcmp uno float %100, 0.000000e+00, !dbg !92
  %103 = or i1 %102, %101, !dbg !93
  %104 = select i1 %103, float %100, float %95, !dbg !94
  %105 = add i32 %27, 5, !dbg !95
  %106 = sext i32 %105 to i64, !dbg !96
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !96
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %71, i32 -8388608, i1 %71) #1, !dbg !97
  %109 = bitcast i32 %108 to float, !dbg !97
  %110 = fcmp olt float %104, %109, !dbg !98
  %111 = fcmp uno float %109, 0.000000e+00, !dbg !100
  %112 = or i1 %111, %110, !dbg !101
  %113 = zext i1 %42 to i8, !dbg !102
  %114 = select i1 %51, i8 2, i8 %113, !dbg !103
  %115 = select i1 %63, i8 3, i8 %114, !dbg !104
  %116 = select i1 %74, i8 4, i8 %115, !dbg !105
  %117 = select i1 %83, i8 5, i8 %116, !dbg !106
  %118 = select i1 %92, i8 6, i8 %117, !dbg !107
  %119 = select i1 %101, i8 7, i8 %118, !dbg !108
  %120 = select i1 %110, i8 8, i8 %119, !dbg !109
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 0, i1 %31) #1, !dbg !110
  %122 = bitcast i32 %121 to float, !dbg !110
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %39, i32 0, i1 %39) #1, !dbg !111
  %124 = bitcast i32 %123 to float, !dbg !111
  %125 = fadd float %122, %124, !dbg !112
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %39, i32 0, i1 %39) #1, !dbg !113
  %127 = bitcast i32 %126 to float, !dbg !113
  %128 = fadd float %125, %127, !dbg !114
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %60, i32 0, i1 %60) #1, !dbg !115
  %130 = bitcast i32 %129 to float, !dbg !115
  %131 = fadd float %128, %130, !dbg !116
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %71, i32 0, i1 %71) #1, !dbg !117
  %133 = bitcast i32 %132 to float, !dbg !117
  %134 = fadd float %131, %133, !dbg !118
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %71, i32 0, i1 %71) #1, !dbg !119
  %136 = bitcast i32 %135 to float, !dbg !119
  %137 = fadd float %134, %136, !dbg !120
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %60, i32 0, i1 %60) #1, !dbg !121
  %139 = bitcast i32 %138 to float, !dbg !121
  %140 = fadd float %137, %139, !dbg !122
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %71, i32 0, i1 %71) #1, !dbg !123
  %142 = bitcast i32 %141 to float, !dbg !123
  %143 = fadd float %140, %142, !dbg !124
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %71, i32 0, i1 %71) #1, !dbg !125
  %145 = bitcast i32 %144 to float, !dbg !125
  %146 = fadd float %143, %145, !dbg !126
  %147 = mul nsw i32 %22, -2, !dbg !127
  %148 = mul nsw i32 %19, -2, !dbg !128
  %149 = add nsw i32 %23, 2, !dbg !129
  %150 = add nsw i32 %20, 2, !dbg !130
  %151 = mul nsw i32 %148, %149, !dbg !131
  %152 = shl nsw i32 %22, 2, !dbg !23
  %153 = mul nsw i32 %152, %19, !dbg !132
  %reass.add = add nsw i32 %149, %147
  %reass.mul = mul nsw i32 %reass.add, %150
  %154 = or disjoint i32 %147, 1, !dbg !133
  %155 = add nsw i32 %154, %148, !dbg !134
  %156 = add nsw i32 %155, %153, !dbg !135
  %157 = add nsw i32 %156, %149, !dbg !136
  %158 = add nsw i32 %157, %151, !dbg !137
  %159 = add i32 %158, %150, !dbg !138
  %160 = add i32 %159, %reass.mul, !dbg !139
  %161 = sitofp i32 %160 to float, !dbg !140
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %161) #1, !dbg !140
  %163 = shl i32 %13, 9, !dbg !141
  %164 = add i32 %163, %.decomposed, !dbg !142
  %165 = sext i32 %164 to i64, !dbg !143
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !143
  %167 = bitcast float %104 to i32, !dbg !144
  %168 = select i1 %112, i32 %108, i32 %167, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %166, i1 %11) #1, !dbg !144
  %169 = sext i32 %10 to i64, !dbg !146
  %170 = getelementptr i8, ptr addrspace(1) %2, i64 %169, !dbg !146
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %120, ptr addrspace(1) %170, i1 %11) #1, !dbg !147
  %171 = getelementptr float, ptr addrspace(1) %3, i64 %165, !dbg !148
  %172 = bitcast float %162 to i32, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %172, ptr addrspace(1) %171, i1 %11) #1, !dbg !149
  ret void, !dbg !150
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgbbkkab7sejqu67qn7ieuoegpwwf3j6k3azxf364lluyvehunla.py", directory: "inductor_cache/gb")
!4 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 41, column: 47, scope: !7)
!19 = !DILocation(line: 25, column: 19, scope: !7)
!20 = !DILocation(line: 63, column: 20, scope: !7)
!21 = !DILocation(line: 30, column: 20, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 124, column: 316, scope: !7)
!24 = !DILocation(line: 36, column: 20, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 40, column: 19, scope: !7)
!27 = !DILocation(line: 41, column: 38, scope: !7)
!28 = !DILocation(line: 41, column: 45, scope: !7)
!29 = !DILocation(line: 41, column: 31, scope: !7)
!30 = !DILocation(line: 41, column: 60, scope: !7)
!31 = !DILocation(line: 41, column: 52, scope: !7)
!32 = !DILocation(line: 43, column: 21, scope: !7)
!33 = !DILocation(line: 46, column: 19, scope: !7)
!34 = !DILocation(line: 47, column: 45, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 60, scope: !7)
!37 = !DILocation(line: 47, column: 52, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 48, column: 42, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 54, column: 45, scope: !7)
!46 = !DILocation(line: 54, column: 31, scope: !7)
!47 = !DILocation(line: 54, column: 52, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !49)
!49 = !DILocation(line: 55, column: 42, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !49)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 45, scope: !7)
!55 = !DILocation(line: 61, column: 31, scope: !7)
!56 = !DILocation(line: 61, column: 60, scope: !7)
!57 = !DILocation(line: 61, column: 52, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !59)
!59 = !DILocation(line: 62, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !59)
!63 = !DILocation(line: 64, column: 31, scope: !7)
!64 = !DILocation(line: 64, column: 53, scope: !7)
!65 = !DILocation(line: 64, column: 45, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !67)
!67 = !DILocation(line: 65, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !67)
!71 = !DILocation(line: 67, column: 42, scope: !7)
!72 = !DILocation(line: 67, column: 31, scope: !7)
!73 = !DILocation(line: 67, column: 49, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !75)
!75 = !DILocation(line: 68, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !75)
!79 = !DILocation(line: 74, column: 42, scope: !7)
!80 = !DILocation(line: 74, column: 31, scope: !7)
!81 = !DILocation(line: 74, column: 49, scope: !7)
!82 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !83)
!83 = !DILocation(line: 75, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !83)
!87 = !DILocation(line: 77, column: 42, scope: !7)
!88 = !DILocation(line: 77, column: 31, scope: !7)
!89 = !DILocation(line: 77, column: 49, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !91)
!91 = !DILocation(line: 78, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !91)
!95 = !DILocation(line: 80, column: 42, scope: !7)
!96 = !DILocation(line: 80, column: 31, scope: !7)
!97 = !DILocation(line: 80, column: 49, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !99)
!99 = !DILocation(line: 81, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !99)
!102 = !DILocation(line: 85, column: 35, scope: !7)
!103 = !DILocation(line: 88, column: 35, scope: !7)
!104 = !DILocation(line: 91, column: 35, scope: !7)
!105 = !DILocation(line: 94, column: 35, scope: !7)
!106 = !DILocation(line: 97, column: 35, scope: !7)
!107 = !DILocation(line: 100, column: 35, scope: !7)
!108 = !DILocation(line: 103, column: 35, scope: !7)
!109 = !DILocation(line: 106, column: 35, scope: !7)
!110 = !DILocation(line: 107, column: 52, scope: !7)
!111 = !DILocation(line: 108, column: 52, scope: !7)
!112 = !DILocation(line: 109, column: 20, scope: !7)
!113 = !DILocation(line: 110, column: 52, scope: !7)
!114 = !DILocation(line: 111, column: 20, scope: !7)
!115 = !DILocation(line: 112, column: 52, scope: !7)
!116 = !DILocation(line: 113, column: 20, scope: !7)
!117 = !DILocation(line: 114, column: 45, scope: !7)
!118 = !DILocation(line: 115, column: 20, scope: !7)
!119 = !DILocation(line: 116, column: 49, scope: !7)
!120 = !DILocation(line: 117, column: 20, scope: !7)
!121 = !DILocation(line: 118, column: 49, scope: !7)
!122 = !DILocation(line: 119, column: 20, scope: !7)
!123 = !DILocation(line: 120, column: 49, scope: !7)
!124 = !DILocation(line: 121, column: 20, scope: !7)
!125 = !DILocation(line: 122, column: 49, scope: !7)
!126 = !DILocation(line: 123, column: 20, scope: !7)
!127 = !DILocation(line: 124, column: 22, scope: !7)
!128 = !DILocation(line: 124, column: 34, scope: !7)
!129 = !DILocation(line: 124, column: 60, scope: !7)
!130 = !DILocation(line: 124, column: 122, scope: !7)
!131 = !DILocation(line: 124, column: 250, scope: !7)
!132 = !DILocation(line: 124, column: 319, scope: !7)
!133 = !DILocation(line: 124, column: 29, scope: !7)
!134 = !DILocation(line: 124, column: 40, scope: !7)
!135 = !DILocation(line: 124, column: 167, scope: !7)
!136 = !DILocation(line: 124, column: 241, scope: !7)
!137 = !DILocation(line: 124, column: 314, scope: !7)
!138 = !DILocation(line: 124, column: 325, scope: !7)
!139 = !DILocation(line: 124, column: 389, scope: !7)
!140 = !DILocation(line: 125, column: 20, scope: !7)
!141 = !DILocation(line: 126, column: 34, scope: !7)
!142 = !DILocation(line: 126, column: 30, scope: !7)
!143 = !DILocation(line: 126, column: 25, scope: !7)
!144 = !DILocation(line: 126, column: 46, scope: !7)
!145 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !99)
!146 = !DILocation(line: 127, column: 25, scope: !7)
!147 = !DILocation(line: 127, column: 37, scope: !7)
!148 = !DILocation(line: 128, column: 25, scope: !7)
!149 = !DILocation(line: 128, column: 46, scope: !7)
!150 = !DILocation(line: 128, column: 4, scope: !7)
