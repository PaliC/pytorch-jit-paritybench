; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_mul_sigmoid_tanh_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 64, !dbg !15
  %17 = mul i32 %16, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = sdiv i32 %14, 16, !dbg !17
  %19 = srem i32 %18, 4, !dbg !18
  %20 = shl i32 %16, 7, !dbg !19
  %21 = add i32 %20, %.decomposed, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %15) #3, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = sext i32 %19 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #3, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #3, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !25
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %15) #3, !dbg !26
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !26
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !26
  %39 = bitcast i32 %37 to float, !dbg !26
  %40 = bitcast i32 %38 to float, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #3, !dbg !28
  %43 = bitcast i32 %42 to float, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #3, !dbg !28
  %45 = bitcast i32 %44 to float, !dbg !28
  %46 = add i32 %21, 64, !dbg !29
  %47 = sext i32 %46 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !30
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %15) #3, !dbg !31
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !31
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !31
  %52 = bitcast i32 %51 to float, !dbg !31
  %53 = add nsw i32 %19, 4, !dbg !32
  %54 = zext nneg i32 %53 to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %15) #3, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %15) #3, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !35
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %15) #3, !dbg !36
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !36
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !36
  %63 = bitcast i32 %62 to float, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %15) #3, !dbg !38
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %15) #3, !dbg !38
  %67 = bitcast i32 %66 to float, !dbg !38
  %68 = fadd float %27, %32, !dbg !39
  %69 = fadd float %28, %34, !dbg !39
  %70 = fadd float %39, %43, !dbg !40
  %71 = fadd float %40, %45, !dbg !40
  %72 = fadd float %68, %70, !dbg !41
  %73 = fadd float %69, %71, !dbg !41
  %74 = fsub float 0.000000e+00, %72, !dbg !42
  %75 = fsub float 0.000000e+00, %73, !dbg !42
  %76 = fmul float %74, 0x3FF7154760000000, !dbg !46
  %77 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %76) #3, !dbg !46
  %78 = fmul float %75, 0x3FF7154760000000, !dbg !46
  %79 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #3, !dbg !46
  %80 = fadd float %77, 1.000000e+00, !dbg !47
  %81 = fadd float %79, 1.000000e+00, !dbg !47
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %80) #3, !dbg !48
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %81) #3, !dbg !48
  %84 = fadd float %52, %58, !dbg !49
  %85 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !31
  %86 = insertelement <2 x i32> %85, i32 %61, i64 1, !dbg !31
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !31
  %88 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !34
  %89 = insertelement <2 x i32> %88, i32 %65, i64 1, !dbg !34
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !34
  %91 = fadd <2 x float> %87, %90, !dbg !49
  %92 = fadd float %63, %67, !dbg !50
  %shift = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %93 = fadd <2 x float> %91, %shift, !dbg !51
  %94 = extractelement <2 x float> %93, i64 0, !dbg !51
  %95 = fadd float %84, %92, !dbg !51
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i = icmp eq i32 %96, 0, !dbg !52
  %97 = tail call float @llvm.nvvm.fabs.ftz.f(float %94) #3, !dbg !52
  %98 = tail call float @llvm.nvvm.fabs.f(float %94) #3, !dbg !52
  %.01.i = select i1 %.not.i, float %98, float %97, !dbg !52
  %99 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !52
  br i1 %99, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !52

__internal_fmad.exit1.i:                          ; preds = %8
  %100 = fmul float %.01.i, 0x4007154760000000, !dbg !52
  %101 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %100) #3, !dbg !52
  %102 = fadd float %101, 1.000000e+00, !dbg !52
  %103 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %102) #4, !dbg !52, !srcloc !53
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not6.i = icmp eq i32 %104, 0, !dbg !52
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %103, float -2.000000e+00, float 1.000000e+00) #3, !dbg !52
  %106 = tail call float @llvm.nvvm.fma.rn.f(float %103, float -2.000000e+00, float 1.000000e+00) #3, !dbg !52
  %.03.i = select i1 %.not6.i, float %106, float %105, !dbg !52
  %107 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !52
  %s.0.i = select i1 %107, float 1.000000e+00, float %.03.i, !dbg !52
  %108 = bitcast float %s.0.i to i32, !dbg !52
  %109 = bitcast float %94 to i32, !dbg !52
  %110 = and i32 %109, -2147483648, !dbg !52
  %111 = or i32 %110, %108, !dbg !52
  %112 = bitcast i32 %111 to float, !dbg !52
  br label %__nv_tanhf.exit, !dbg !52

__internal_fmad.exit3.i:                          ; preds = %8
  %113 = fmul float %94, %94, !dbg !52
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not1.i = icmp eq i32 %114, 0, !dbg !52
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %113, float 0xBFAAC795C0000000) #3, !dbg !52
  %116 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %113, float 0xBFAAC795C0000000) #3, !dbg !52
  %.06.i = select i1 %.not1.i, float %116, float %115, !dbg !52
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not2.i = icmp eq i32 %117, 0, !dbg !52
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %113, float 0x3FC10B2820000000) #3, !dbg !52
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %113, float 0x3FC10B2820000000) #3, !dbg !52
  %.05.i = select i1 %.not2.i, float %119, float %118, !dbg !52
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not3.i = icmp eq i32 %120, 0, !dbg !52
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %113, float 0xBFD5553DA0000000) #3, !dbg !52
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %113, float 0xBFD5553DA0000000) #3, !dbg !52
  %.0.i = select i1 %.not3.i, float %122, float %121, !dbg !52
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not4.i = icmp eq i32 %123, 0, !dbg !52
  %124 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %113, float 0.000000e+00) #3, !dbg !52
  %125 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %113, float 0.000000e+00) #3, !dbg !52
  %.04.i = select i1 %.not4.i, float %125, float %124, !dbg !52
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not5.i = icmp eq i32 %126, 0, !dbg !52
  %127 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %94, float %94) #3, !dbg !52
  %128 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %94, float %94) #3, !dbg !52
  %.02.i = select i1 %.not5.i, float %128, float %127, !dbg !52
  br label %__nv_tanhf.exit, !dbg !52

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %112, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !52
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i1 = icmp eq i32 %129, 0, !dbg !52
  %130 = tail call float @llvm.nvvm.fabs.ftz.f(float %95) #3, !dbg !52
  %131 = tail call float @llvm.nvvm.fabs.f(float %95) #3, !dbg !52
  %.01.i2 = select i1 %.not.i1, float %131, float %130, !dbg !52
  %132 = fcmp ult float %.01.i2, 0x3FE3333340000000, !dbg !52
  br i1 %132, label %__internal_fmad.exit3.i8, label %__internal_fmad.exit1.i3, !dbg !52

__internal_fmad.exit1.i3:                         ; preds = %__nv_tanhf.exit
  %133 = fmul float %.01.i2, 0x4007154760000000, !dbg !52
  %134 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %133) #3, !dbg !52
  %135 = fadd float %134, 1.000000e+00, !dbg !52
  %136 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %135) #4, !dbg !52, !srcloc !53
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not6.i4 = icmp eq i32 %137, 0, !dbg !52
  %138 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %136, float -2.000000e+00, float 1.000000e+00) #3, !dbg !52
  %139 = tail call float @llvm.nvvm.fma.rn.f(float %136, float -2.000000e+00, float 1.000000e+00) #3, !dbg !52
  %.03.i5 = select i1 %.not6.i4, float %139, float %138, !dbg !52
  %140 = fcmp oge float %.01.i2, 0x4022059680000000, !dbg !52
  %s.0.i6 = select i1 %140, float 1.000000e+00, float %.03.i5, !dbg !52
  %141 = bitcast float %s.0.i6 to i32, !dbg !52
  %142 = bitcast float %95 to i32, !dbg !52
  %143 = and i32 %142, -2147483648, !dbg !52
  %144 = or i32 %143, %141, !dbg !52
  %145 = bitcast i32 %144 to float, !dbg !52
  br label %__nv_tanhf.exit19, !dbg !52

__internal_fmad.exit3.i8:                         ; preds = %__nv_tanhf.exit
  %146 = fmul float %95, %95, !dbg !52
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not1.i9 = icmp eq i32 %147, 0, !dbg !52
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %146, float 0xBFAAC795C0000000) #3, !dbg !52
  %149 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %146, float 0xBFAAC795C0000000) #3, !dbg !52
  %.06.i10 = select i1 %.not1.i9, float %149, float %148, !dbg !52
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not2.i11 = icmp eq i32 %150, 0, !dbg !52
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %146, float 0x3FC10B2820000000) #3, !dbg !52
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %146, float 0x3FC10B2820000000) #3, !dbg !52
  %.05.i12 = select i1 %.not2.i11, float %152, float %151, !dbg !52
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not3.i13 = icmp eq i32 %153, 0, !dbg !52
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i12, float %146, float 0xBFD5553DA0000000) #3, !dbg !52
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i12, float %146, float 0xBFD5553DA0000000) #3, !dbg !52
  %.0.i14 = select i1 %.not3.i13, float %155, float %154, !dbg !52
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not4.i15 = icmp eq i32 %156, 0, !dbg !52
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %146, float 0.000000e+00) #3, !dbg !52
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %146, float 0.000000e+00) #3, !dbg !52
  %.04.i16 = select i1 %.not4.i15, float %158, float %157, !dbg !52
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not5.i17 = icmp eq i32 %159, 0, !dbg !52
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i16, float %95, float %95) #3, !dbg !52
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i16, float %95, float %95) #3, !dbg !52
  %.02.i18 = select i1 %.not5.i17, float %161, float %160, !dbg !52
  br label %__nv_tanhf.exit19, !dbg !52

__nv_tanhf.exit19:                                ; preds = %__internal_fmad.exit1.i3, %__internal_fmad.exit3.i8
  %s.1.i7 = phi float [ %145, %__internal_fmad.exit1.i3 ], [ %.02.i18, %__internal_fmad.exit3.i8 ], !dbg !52
  %162 = fmul float %82, %s.1.i, !dbg !54
  %163 = fmul float %83, %s.1.i7, !dbg !54
  %164 = sext i32 %14 to i64, !dbg !55
  %165 = getelementptr float, ptr addrspace(1) %4, i64 %164, !dbg !55
  %166 = bitcast float %82 to i32, !dbg !56
  %167 = bitcast float %83 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %167, ptr addrspace(1) %165, i1 %15) #3, !dbg !56
  %168 = getelementptr float, ptr addrspace(1) %5, i64 %164, !dbg !57
  %169 = bitcast float %s.1.i to i32, !dbg !58
  %170 = bitcast float %s.1.i7 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %169, i32 %170, ptr addrspace(1) %168, i1 %15) #3, !dbg !58
  %171 = getelementptr float, ptr addrspace(1) %6, i64 %164, !dbg !59
  %172 = bitcast float %162 to i32, !dbg !60
  %173 = bitcast float %163 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %173, ptr addrspace(1) %171, i1 %15) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }
attributes #4 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crucptr3mgm6hwwp4jeoplmm2gso5j2kea4b6hiptuv3armcq7dk.py", directory: "inductor_cache/ru")
!4 = !{ptr @triton_poi_fused_mul_sigmoid_tanh_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sigmoid_tanh_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sigmoid_tanh_19", linkageName: "triton_poi_fused_mul_sigmoid_tanh_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 44, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 40, scope: !7)
!30 = !DILocation(line: 32, column: 30, scope: !7)
!31 = !DILocation(line: 32, column: 49, scope: !7)
!32 = !DILocation(line: 33, column: 34, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 39, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 50, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 40, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 47, column: 30, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 39, column: 22, scope: !7)
!46 = !DILocation(line: 47, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 20, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 47, column: 16, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 40, column: 19, scope: !7)
!50 = !DILocation(line: 41, column: 20, scope: !7)
!51 = !DILocation(line: 42, column: 20, scope: !7)
!52 = !DILocation(line: 43, column: 27, scope: !7)
!53 = !{i32 21046}
!54 = !DILocation(line: 44, column: 19, scope: !7)
!55 = !DILocation(line: 45, column: 25, scope: !7)
!56 = !DILocation(line: 45, column: 36, scope: !7)
!57 = !DILocation(line: 46, column: 25, scope: !7)
!58 = !DILocation(line: 46, column: 37, scope: !7)
!59 = !DILocation(line: 47, column: 25, scope: !7)
!60 = !DILocation(line: 47, column: 37, scope: !7)
!61 = !DILocation(line: 47, column: 4, scope: !7)
