; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_eye_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = lshr i32 %8, 1, !dbg !12
  %12 = and i32 %11, 4, !dbg !12
  %13 = lshr i32 %8, 1, !dbg !12
  %14 = and i32 %13, 8, !dbg !12
  %15 = and i32 %8, 1, !dbg !12
  %16 = shl nuw nsw i32 %15, 1, !dbg !12
  %17 = shl i32 %8, 1, !dbg !12
  %18 = and i32 %17, 14, !dbg !12
  %19 = or disjoint i32 %12, %10, !dbg !12
  %20 = or disjoint i32 %19, %14, !dbg !12
  %21 = or disjoint i32 %20, %7, !dbg !13
  %22 = or disjoint i32 %7, %18, !dbg !13
  %23 = or disjoint i32 %22, 1, !dbg !13
  %24 = icmp slt i32 %21, 16, !dbg !14
  %25 = icmp slt i32 %22, 16, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %27 = shl i32 %26, 2, !dbg !16
  %.lobit14 = lshr i32 %8, 3, !dbg !17
  %28 = and i32 %.lobit14, 3, !dbg !17
  %29 = or disjoint i32 %27, %16, !dbg !18
  %30 = or disjoint i32 %28, %27, !dbg !18
  %31 = icmp slt i32 %29, 4, !dbg !19
  %32 = icmp slt i32 %30, 4, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %33 = sdiv i32 %.frozen, 4, !dbg !20
  %34 = mul i32 %33, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %34, !dbg !21
  %35 = srem i32 %23, 4, !dbg !21
  %36 = shl i32 %21, 2, !dbg !22
  %37 = add i32 %29, %36, !dbg !23
  %38 = sext i32 %37 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = and i1 %24, %31, !dbg !25
  %41 = and i1 %25, %32, !dbg !25
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %40) #2, !dbg !26
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !26
  %45 = shl nuw nsw i32 %15, 5, !dbg !26
  %46 = or disjoint i32 %45, %10, !dbg !26
  %47 = or disjoint i32 %46, %12, !dbg !26
  %48 = or disjoint i32 %47, %14, !dbg !26
  %49 = and i32 %17, 62, !dbg !26
  %50 = shl nuw nsw i32 %15, 2, !dbg !26
  %51 = add nuw nsw i32 %48, %50, !dbg !26
  %52 = zext nneg i32 %51 to i64, !dbg !26
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %52, !dbg !26
  %54 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #2, !dbg !26
  %55 = or disjoint i32 %48, 16, !dbg !26
  %56 = lshr i32 %55, 3, !dbg !26
  %57 = and i32 %56, 536870910, !dbg !26
  %58 = add nuw nsw i32 %57, %55, !dbg !26
  %59 = zext nneg i32 %58 to i64, !dbg !26
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %59, !dbg !26
  %61 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %62 = lshr i32 %17, 3, !dbg !26
  %63 = and i32 %62, 6, !dbg !26
  %64 = add nuw nsw i32 %63, %49, !dbg !26
  %65 = zext nneg i32 %64 to i64, !dbg !26
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %65, !dbg !26
  %67 = load float, ptr addrspace(3) %66, align 8, !dbg !26
  %68 = getelementptr inbounds i8, ptr addrspace(3) %66, i64 4, !dbg !26
  %69 = load float, ptr addrspace(3) %68, align 4, !dbg !26
  %70 = shl i32 %30, 2, !dbg !27
  %71 = add i32 %70, %.decomposed, !dbg !28
  %72 = shl i32 %33, 4, !dbg !29
  %73 = add i32 %71, %72, !dbg !30
  %74 = sext i32 %73 to i64, !dbg !31
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !31
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %41) #2, !dbg !32
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !32
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !32
  %79 = bitcast i32 %77 to float, !dbg !32
  %80 = bitcast i32 %78 to float, !dbg !32
  %81 = icmp eq i32 %.decomposed, %30, !dbg !33
  %82 = icmp eq i32 %35, %30, !dbg !33
  %83 = select i1 %81, float 1.000000e+00, float 0.000000e+00, !dbg !34
  %84 = select i1 %82, float 1.000000e+00, float 0.000000e+00, !dbg !34
  %85 = fsub float %67, %79, !dbg !35
  %86 = fsub float %69, %80, !dbg !35
  %87 = fadd float %83, %85, !dbg !36
  %88 = fadd float %84, %86, !dbg !36
  %89 = fsub float %83, %85, !dbg !37
  %90 = fsub float %84, %86, !dbg !37
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %92 = shl i32 %8, 3, !dbg !39
  %93 = and i32 %92, 56, !dbg !39
  %94 = or disjoint i32 %28, %93, !dbg !39
  %95 = lshr exact i32 %93, 2, !dbg !39
  %96 = add nuw nsw i32 %94, %95, !dbg !39
  %97 = zext nneg i32 %96 to i64, !dbg !39
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !39
  %99 = bitcast float %87 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !39
  %100 = or disjoint i32 %94, 4, !dbg !39
  %101 = lshr i32 %100, 2, !dbg !39
  %102 = add nuw nsw i32 %101, %100, !dbg !39
  %103 = zext nneg i32 %102 to i64, !dbg !39
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %103, !dbg !39
  %105 = bitcast float %88 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %106 = lshr i32 %49, 2, !dbg !39
  %107 = add nuw nsw i32 %106, %49, !dbg !39
  %108 = zext nneg i32 %107 to i64, !dbg !39
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %108, !dbg !39
  %110 = load i32, ptr addrspace(3) %109, align 4, !dbg !39
  %111 = or disjoint i32 %49, 1, !dbg !39
  %112 = add nuw nsw i32 %111, %106, !dbg !39
  %113 = zext nneg i32 %112 to i64, !dbg !39
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %113, !dbg !39
  %115 = load i32, ptr addrspace(3) %114, align 4, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %110, i32 %115, ptr addrspace(1) %91, i1 %40) #2, !dbg !39
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %117 = bitcast float %89 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %117, i1 true) #2, !dbg !41
  %118 = bitcast float %90 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %118, i1 true) #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %119 = load i32, ptr addrspace(3) %109, align 4, !dbg !41
  %120 = load i32, ptr addrspace(3) %114, align 4, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %119, i32 %120, ptr addrspace(1) %116, i1 %40) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cteppa2i7pkxjz75bunbllkkn3yh4uer2bbfayoykcyad6r3r73l.py", directory: "inductor_cache/te")
!4 = !{ptr @triton_poi_fused_add_eye_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_eye_sub_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_eye_sub_0", linkageName: "triton_poi_fused_add_eye_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 45, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 50, scope: !7)
!33 = !DILocation(line: 36, column: 19, scope: !7)
!34 = !DILocation(line: 39, column: 32, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 19, scope: !7)
!38 = !DILocation(line: 43, column: 25, scope: !7)
!39 = !DILocation(line: 43, column: 43, scope: !7)
!40 = !DILocation(line: 44, column: 25, scope: !7)
!41 = !DILocation(line: 44, column: 44, scope: !7)
!42 = !DILocation(line: 44, column: 4, scope: !7)
