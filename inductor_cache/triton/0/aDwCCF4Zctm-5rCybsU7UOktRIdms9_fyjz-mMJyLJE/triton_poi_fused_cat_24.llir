; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !14
  %19 = insertelement <2 x i32> %18, i32 %16, i64 1, !dbg !14
  %20 = sdiv <2 x i32> %19, splat (i32 4096), !dbg !14
  %21 = srem <2 x i32> %20, splat (i32 64), !dbg !15
  %22 = srem i32 %16, 4096, !dbg !16
  %23 = srem i32 %17, 4096, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %24 = sdiv i32 %.frozen, 262144, !dbg !17
  %.frozen2 = freeze i32 %17, !dbg !17
  %25 = sdiv i32 %.frozen2, 262144, !dbg !17
  %26 = mul i32 %24, 262144, !dbg !18
  %.decomposed = sub i32 %.frozen, %26, !dbg !18
  %27 = mul i32 %25, 262144, !dbg !18
  %.decomposed3 = sub i32 %.frozen2, %27, !dbg !18
  %28 = extractelement <2 x i32> %21, i64 1, !dbg !19
  %29 = icmp slt i32 %28, 48, !dbg !20
  %30 = extractelement <2 x i32> %21, i64 0, !dbg !19
  %31 = icmp slt i32 %30, 48, !dbg !20
  %32 = icmp slt i32 %28, 32, !dbg !21
  %33 = icmp slt i32 %30, 32, !dbg !21
  %34 = icmp slt i32 %28, 16, !dbg !22
  %35 = icmp slt i32 %30, 16, !dbg !22
  %36 = shl nsw i32 %24, 16, !dbg !23
  %37 = shl nsw i32 %25, 16, !dbg !23
  %38 = add nsw i32 %36, %.decomposed, !dbg !24
  %39 = add nsw i32 %37, %.decomposed3, !dbg !24
  %40 = sext i32 %38 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = sext i32 %39 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #1, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = bitcast i32 %46 to float, !dbg !26
  %51 = bitcast i32 %47 to float, !dbg !26
  %52 = bitcast i32 %48 to float, !dbg !26
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = bitcast i32 %56 to float, !dbg !26
  %61 = bitcast i32 %57 to float, !dbg !26
  %62 = sext i32 %28 to i64, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !27
  %64 = sext i32 %30 to i64, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !27
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %34, i32 0, i1 %34) #1, !dbg !28
  %67 = bitcast i32 %66 to float, !dbg !28
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %34, i32 0, i1 %34) #1, !dbg !28
  %69 = bitcast i32 %68 to float, !dbg !28
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %34, i32 0, i1 %34) #1, !dbg !28
  %71 = bitcast i32 %70 to float, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %34, i32 0, i1 %34) #1, !dbg !28
  %73 = bitcast i32 %72 to float, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %35, i32 0, i1 %35) #1, !dbg !28
  %75 = bitcast i32 %74 to float, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %35, i32 0, i1 %35) #1, !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %35, i32 0, i1 %35) #1, !dbg !28
  %79 = bitcast i32 %78 to float, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %35, i32 0, i1 %35) #1, !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = fadd float %49, %67, !dbg !29
  %83 = fadd float %50, %69, !dbg !29
  %84 = fadd float %51, %71, !dbg !29
  %85 = fadd float %52, %73, !dbg !29
  %86 = fadd float %58, %75, !dbg !29
  %87 = fadd float %59, %77, !dbg !29
  %88 = fadd float %60, %79, !dbg !29
  %89 = fadd float %61, %81, !dbg !29
  %90 = and <2 x i32> %21, splat (i32 -16), !dbg !30
  %91 = shufflevector <2 x i32> %90, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !30
  %92 = shl nsw i32 %28, 12, !dbg !31
  %93 = shl nsw i32 %30, 12, !dbg !31
  %94 = add nsw i32 %36, %22, !dbg !31
  %95 = add nsw i32 %94, -65536, !dbg !32
  %96 = add nsw i32 %95, %92, !dbg !33
  %97 = add nsw i32 %37, %23, !dbg !31
  %98 = add nsw i32 %97, -65536, !dbg !32
  %99 = add nsw i32 %98, %93, !dbg !33
  %100 = sext i32 %96 to i64, !dbg !34
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !34
  %102 = sext i32 %99 to i64, !dbg !34
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !34
  %104 = icmp eq <4 x i32> %91, <i32 32, i32 32, i32 16, i32 16>, !dbg !35
  %105 = extractelement <4 x i1> %104, i64 3, !dbg !36
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #1, !dbg !36
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !36
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !36
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !36
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !36
  %111 = extractelement <4 x i1> %104, i64 2, !dbg !36
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #1, !dbg !36
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !36
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !36
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !36
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !36
  %117 = add nsw i32 %94, -131072, !dbg !37
  %118 = add nsw i32 %117, %92, !dbg !38
  %119 = add nsw i32 %97, -131072, !dbg !37
  %120 = add nsw i32 %119, %93, !dbg !38
  %121 = sext i32 %118 to i64, !dbg !39
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !39
  %123 = sext i32 %120 to i64, !dbg !39
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !39
  %125 = extractelement <4 x i1> %104, i64 1, !dbg !40
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125) #1, !dbg !40
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !40
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !40
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !40
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !40
  %131 = extractelement <4 x i1> %104, i64 0, !dbg !40
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #1, !dbg !40
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !40
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !40
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !40
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !40
  %137 = icmp sgt i32 %28, 47, !dbg !19
  %138 = icmp sgt i32 %30, 47, !dbg !19
  %139 = add nsw i32 %94, -196608, !dbg !41
  %140 = add nsw i32 %139, %92, !dbg !42
  %141 = add nsw i32 %97, -196608, !dbg !41
  %142 = add nsw i32 %141, %93, !dbg !42
  %143 = sext i32 %140 to i64, !dbg !43
  %144 = getelementptr float, ptr addrspace(1) %4, i64 %143, !dbg !43
  %145 = sext i32 %142 to i64, !dbg !43
  %146 = getelementptr float, ptr addrspace(1) %4, i64 %145, !dbg !43
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137) #1, !dbg !44
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !44
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !44
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !44
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !44
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138) #1, !dbg !44
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !44
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !44
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !44
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !44
  %157 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !45
  %158 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !45
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %157, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #1, !dbg !46
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !46
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !46
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !46
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !46
  %164 = bitcast i32 %160 to float, !dbg !46
  %165 = bitcast i32 %161 to float, !dbg !46
  %166 = bitcast i32 %162 to float, !dbg !46
  %167 = bitcast i32 %163 to float, !dbg !46
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !46
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !46
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !46
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !46
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !46
  %173 = bitcast i32 %169 to float, !dbg !46
  %174 = bitcast i32 %170 to float, !dbg !46
  %175 = bitcast i32 %171 to float, !dbg !46
  %176 = bitcast i32 %172 to float, !dbg !46
  %177 = getelementptr float, ptr addrspace(1) %6, i64 %62, !dbg !47
  %178 = getelementptr float, ptr addrspace(1) %6, i64 %64, !dbg !47
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %34, i32 0, i1 %34) #1, !dbg !48
  %180 = bitcast i32 %179 to float, !dbg !48
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %34, i32 0, i1 %34) #1, !dbg !48
  %182 = bitcast i32 %181 to float, !dbg !48
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %34, i32 0, i1 %34) #1, !dbg !48
  %184 = bitcast i32 %183 to float, !dbg !48
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %34, i32 0, i1 %34) #1, !dbg !48
  %186 = bitcast i32 %185 to float, !dbg !48
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %35, i32 0, i1 %35) #1, !dbg !48
  %188 = bitcast i32 %187 to float, !dbg !48
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %35, i32 0, i1 %35) #1, !dbg !48
  %190 = bitcast i32 %189 to float, !dbg !48
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %35, i32 0, i1 %35) #1, !dbg !48
  %192 = bitcast i32 %191 to float, !dbg !48
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %35, i32 0, i1 %35) #1, !dbg !48
  %194 = bitcast i32 %193 to float, !dbg !48
  %195 = fadd float %164, %180, !dbg !49
  %196 = fadd float %165, %182, !dbg !49
  %197 = fadd float %166, %184, !dbg !49
  %198 = fadd float %167, %186, !dbg !49
  %199 = fadd float %173, %188, !dbg !49
  %200 = fadd float %174, %190, !dbg !49
  %201 = fadd float %175, %192, !dbg !49
  %202 = fadd float %176, %194, !dbg !49
  %203 = sext i32 %16 to i64, !dbg !50
  %204 = getelementptr float, ptr addrspace(1) %7, i64 %203, !dbg !50
  %205 = sext i32 %17 to i64, !dbg !50
  %206 = getelementptr float, ptr addrspace(1) %7, i64 %205, !dbg !50
  %207 = bitcast float %82 to i32, !dbg !51
  %208 = select i1 %34, i32 %207, i32 %107, !dbg !52
  %209 = select i1 %32, i32 %208, i32 %127, !dbg !53
  %210 = select i1 %29, i32 %209, i32 %148, !dbg !54
  %211 = bitcast float %83 to i32, !dbg !51
  %212 = select i1 %34, i32 %211, i32 %108, !dbg !52
  %213 = select i1 %32, i32 %212, i32 %128, !dbg !53
  %214 = select i1 %29, i32 %213, i32 %149, !dbg !54
  %215 = bitcast float %84 to i32, !dbg !51
  %216 = select i1 %34, i32 %215, i32 %109, !dbg !52
  %217 = select i1 %32, i32 %216, i32 %129, !dbg !53
  %218 = select i1 %29, i32 %217, i32 %150, !dbg !54
  %219 = bitcast float %85 to i32, !dbg !51
  %220 = select i1 %34, i32 %219, i32 %110, !dbg !52
  %221 = select i1 %32, i32 %220, i32 %130, !dbg !53
  %222 = select i1 %29, i32 %221, i32 %151, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %214, i32 %218, i32 %222, ptr addrspace(1) %204, i1 true) #1, !dbg !51
  %223 = bitcast float %86 to i32, !dbg !51
  %224 = select i1 %35, i32 %223, i32 %113, !dbg !52
  %225 = select i1 %33, i32 %224, i32 %133, !dbg !53
  %226 = select i1 %31, i32 %225, i32 %153, !dbg !54
  %227 = bitcast float %87 to i32, !dbg !51
  %228 = select i1 %35, i32 %227, i32 %114, !dbg !52
  %229 = select i1 %33, i32 %228, i32 %134, !dbg !53
  %230 = select i1 %31, i32 %229, i32 %154, !dbg !54
  %231 = bitcast float %88 to i32, !dbg !51
  %232 = select i1 %35, i32 %231, i32 %115, !dbg !52
  %233 = select i1 %33, i32 %232, i32 %135, !dbg !53
  %234 = select i1 %31, i32 %233, i32 %155, !dbg !54
  %235 = bitcast float %89 to i32, !dbg !51
  %236 = select i1 %35, i32 %235, i32 %116, !dbg !52
  %237 = select i1 %33, i32 %236, i32 %136, !dbg !53
  %238 = select i1 %31, i32 %237, i32 %156, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %230, i32 %234, i32 %238, ptr addrspace(1) %206, i1 true) #1, !dbg !51
  %239 = mul i32 %24, 327680, !dbg !55
  %240 = mul i32 %25, 327680, !dbg !55
  %241 = add i32 %239, %.decomposed, !dbg !56
  %242 = add i32 %240, %.decomposed3, !dbg !56
  %243 = sext i32 %241 to i64, !dbg !57
  %244 = getelementptr float, ptr addrspace(1) %8, i64 %243, !dbg !57
  %245 = sext i32 %242 to i64, !dbg !57
  %246 = getelementptr float, ptr addrspace(1) %8, i64 %245, !dbg !57
  %247 = bitcast float %195 to i32, !dbg !58
  %248 = select i1 %34, i32 %247, i32 %107, !dbg !59
  %249 = select i1 %32, i32 %248, i32 %127, !dbg !60
  %250 = select i1 %29, i32 %249, i32 %148, !dbg !54
  %251 = bitcast float %196 to i32, !dbg !58
  %252 = select i1 %34, i32 %251, i32 %108, !dbg !59
  %253 = select i1 %32, i32 %252, i32 %128, !dbg !60
  %254 = select i1 %29, i32 %253, i32 %149, !dbg !54
  %255 = bitcast float %197 to i32, !dbg !58
  %256 = select i1 %34, i32 %255, i32 %109, !dbg !59
  %257 = select i1 %32, i32 %256, i32 %129, !dbg !60
  %258 = select i1 %29, i32 %257, i32 %150, !dbg !54
  %259 = bitcast float %198 to i32, !dbg !58
  %260 = select i1 %34, i32 %259, i32 %110, !dbg !59
  %261 = select i1 %32, i32 %260, i32 %130, !dbg !60
  %262 = select i1 %29, i32 %261, i32 %151, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %250, i32 %254, i32 %258, i32 %262, ptr addrspace(1) %244, i1 true) #1, !dbg !58
  %263 = bitcast float %199 to i32, !dbg !58
  %264 = select i1 %35, i32 %263, i32 %113, !dbg !59
  %265 = select i1 %33, i32 %264, i32 %133, !dbg !60
  %266 = select i1 %31, i32 %265, i32 %153, !dbg !54
  %267 = bitcast float %200 to i32, !dbg !58
  %268 = select i1 %35, i32 %267, i32 %114, !dbg !59
  %269 = select i1 %33, i32 %268, i32 %134, !dbg !60
  %270 = select i1 %31, i32 %269, i32 %154, !dbg !54
  %271 = bitcast float %201 to i32, !dbg !58
  %272 = select i1 %35, i32 %271, i32 %115, !dbg !59
  %273 = select i1 %33, i32 %272, i32 %135, !dbg !60
  %274 = select i1 %31, i32 %273, i32 %155, !dbg !54
  %275 = bitcast float %202 to i32, !dbg !58
  %276 = select i1 %35, i32 %275, i32 %116, !dbg !59
  %277 = select i1 %33, i32 %276, i32 %136, !dbg !60
  %278 = select i1 %31, i32 %277, i32 %156, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %266, i32 %270, i32 %274, i32 %278, ptr addrspace(1) %246, i1 true) #1, !dbg !58
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chle2qrhstj6mxtvenb6a7dakh3frsapgpfwebavf2rr7dz4dwkl.py", directory: "inductor_cache/hl")
!4 = !{ptr @triton_poi_fused_cat_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_24", linkageName: "triton_poi_fused_cat_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 67, column: 20, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 38, column: 18, scope: !7)
!22 = !DILocation(line: 44, column: 20, scope: !7)
!23 = !DILocation(line: 46, column: 54, scope: !7)
!24 = !DILocation(line: 46, column: 48, scope: !7)
!25 = !DILocation(line: 46, column: 31, scope: !7)
!26 = !DILocation(line: 46, column: 59, scope: !7)
!27 = !DILocation(line: 47, column: 31, scope: !7)
!28 = !DILocation(line: 47, column: 36, scope: !7)
!29 = !DILocation(line: 48, column: 20, scope: !7)
!30 = !DILocation(line: 54, column: 20, scope: !7)
!31 = !DILocation(line: 55, column: 42, scope: !7)
!32 = !DILocation(line: 55, column: 36, scope: !7)
!33 = !DILocation(line: 55, column: 58, scope: !7)
!34 = !DILocation(line: 55, column: 31, scope: !7)
!35 = !DILocation(line: 62, column: 20, scope: !7)
!36 = !DILocation(line: 55, column: 69, scope: !7)
!37 = !DILocation(line: 63, column: 36, scope: !7)
!38 = !DILocation(line: 63, column: 58, scope: !7)
!39 = !DILocation(line: 63, column: 31, scope: !7)
!40 = !DILocation(line: 63, column: 69, scope: !7)
!41 = !DILocation(line: 70, column: 36, scope: !7)
!42 = !DILocation(line: 70, column: 56, scope: !7)
!43 = !DILocation(line: 70, column: 31, scope: !7)
!44 = !DILocation(line: 70, column: 67, scope: !7)
!45 = !DILocation(line: 72, column: 31, scope: !7)
!46 = !DILocation(line: 72, column: 59, scope: !7)
!47 = !DILocation(line: 73, column: 31, scope: !7)
!48 = !DILocation(line: 73, column: 36, scope: !7)
!49 = !DILocation(line: 74, column: 20, scope: !7)
!50 = !DILocation(line: 84, column: 25, scope: !7)
!51 = !DILocation(line: 84, column: 37, scope: !7)
!52 = !DILocation(line: 56, column: 35, scope: !7)
!53 = !DILocation(line: 64, column: 34, scope: !7)
!54 = !DILocation(line: 0, scope: !7)
!55 = !DILocation(line: 85, column: 37, scope: !7)
!56 = !DILocation(line: 85, column: 30, scope: !7)
!57 = !DILocation(line: 85, column: 25, scope: !7)
!58 = !DILocation(line: 85, column: 49, scope: !7)
!59 = !DILocation(line: 77, column: 35, scope: !7)
!60 = !DILocation(line: 80, column: 34, scope: !7)
!61 = !DILocation(line: 85, column: 4, scope: !7)
