#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":19:0)
#loc1 = loc(unknown)
#loc41 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":63:26)
#loc44 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":65:26)
#loc59 = loc(callsite(#loc1 at #loc41))
#loc62 = loc(callsite(#loc1 at #loc44))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__to_copy_add_bitwise_and_bitwise_not_clamp_min_div_eq_mul_relu_sub_sum_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<-1.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<2.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<2.000000e-01> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<-1.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<9.99999993E-9> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_10 = arith.constant dense<0> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc2)
    %4 = arith.divsi %2, %cst : tensor<1x64xi32, #blocked> loc(#loc3)
    %5 = arith.remsi %3, %cst_1 : tensor<1x64xi32, #blocked1> loc(#loc4)
    %6 = arith.remsi %3, %cst_0 : tensor<1x64xi32, #blocked1> loc(#loc5)
    %7 = arith.divsi %3, %cst_1 : tensor<1x64xi32, #blocked1> loc(#loc6)
    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc7)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %10 = tt.addptr %8, %4 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc7)
    %11 = tt.load %10 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %12 = tt.addptr %9, %5 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc9)
    %13 = tt.load %12 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %14 = arith.muli %7, %cst_0 : tensor<1x64xi32, #blocked1> loc(#loc11)
    %15 = arith.addi %6, %14 : tensor<1x64xi32, #blocked1> loc(#loc12)
    %16 = tt.addptr %9, %15 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc13)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %18 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %19 = tt.addptr %18, %5 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc15)
    %20 = tt.load %19 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %21 = arith.cmpf oeq, %11, %cst_8 : tensor<1x64xf32, #blocked> loc(#loc17)
    %22 = triton_gpu.convert_layout %21 {predicate = 1 : i64} : tensor<1x64xi1, #blocked> -> tensor<1x64xi1, #blocked1> loc(#loc18)
    %23 = arith.extui %22 : tensor<1x64xi1, #blocked1> to tensor<1x64xi64, #blocked1> loc(#loc19)
    %24 = arith.cmpi ne, %23, %cst_10 : tensor<1x64xi64, #blocked1> loc(#loc18)
    %25 = arith.cmpf oeq, %13, %cst_2 : tensor<1x64xf32, #blocked1> loc(#loc20)
    %26 = arith.extui %25 : tensor<1x64xi1, #blocked1> to tensor<1x64xi64, #blocked1> loc(#loc21)
    %27 = arith.cmpi ne, %26, %cst_10 : tensor<1x64xi64, #blocked1> loc(#loc22)
    %28 = arith.andi %24, %27 : tensor<1x64xi1, #blocked1> loc(#loc23)
    %29 = arith.extui %28 : tensor<1x64xi1, #blocked1> to tensor<1x64xi32, #blocked1> loc(#loc24)
    %30 = arith.cmpi eq, %29, %cst_3 : tensor<1x64xi32, #blocked1> loc(#loc24)
    %31 = arith.uitofp %30 : tensor<1x64xi1, #blocked1> to tensor<1x64xf32, #blocked1> loc(#loc25)
    %32 = arith.cmpf oeq, %13, %17 : tensor<1x64xf32, #blocked1> loc(#loc26)
    %33 = arith.uitofp %32 : tensor<1x64xi1, #blocked1> to tensor<1x64xf32, #blocked1> loc(#loc27)
    %34 = arith.mulf %33, %cst_4 : tensor<1x64xf32, #blocked1> loc(#loc28)
    %35 = arith.subf %34, %cst_5 : tensor<1x64xf32, #blocked1> loc(#loc29)
    %36 = arith.cmpf ogt, %20, %cst_7 : tensor<1x64xf32, #blocked1> loc(#loc52)
    %37 = arith.cmpf une, %20, %20 : tensor<1x64xf32, #blocked1> loc(#loc53)
    %38 = arith.ori %36, %37 : tensor<1x64xi1, #blocked1> loc(#loc54)
    %39 = arith.select %38, %20, %cst_7 : tensor<1x64xi1, #blocked1>, tensor<1x64xf32, #blocked1> loc(#loc55)
    %40 = arith.subf %39, %cst_5 : tensor<1x64xf32, #blocked1> loc(#loc35)
    %41 = arith.mulf %35, %40 : tensor<1x64xf32, #blocked1> loc(#loc36)
    %42 = arith.addf %41, %cst_6 : tensor<1x64xf32, #blocked1> loc(#loc37)
    %43 = arith.cmpf ogt, %cst_7, %42 : tensor<1x64xf32, #blocked1> loc(#loc56)
    %44 = arith.select %43, %cst_7, %42 : tensor<1x64xi1, #blocked1>, tensor<1x64xf32, #blocked1> loc(#loc57)
    %45 = arith.mulf %31, %44 : tensor<1x64xf32, #blocked1> loc(#loc39)
    %46 = "tt.reduce"(%45) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc41)), %arg5: f32 loc(callsite(#loc1 at #loc41))):
      %55 = arith.addf %arg4, %arg5 : f32 loc(#loc63)
      tt.reduce.return %55 : f32 loc(#loc58)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc58)
    %47 = tt.expand_dims %46 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc43)
    %48 = "tt.reduce"(%31) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc44)), %arg5: f32 loc(callsite(#loc1 at #loc44))):
      %55 = arith.addf %arg4, %arg5 : f32 loc(#loc64)
      tt.reduce.return %55 : f32 loc(#loc61)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc61)
    %49 = tt.expand_dims %48 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc45)
    %50 = arith.addf %49, %cst_9 : tensor<1x1xf32, #blocked1> loc(#loc46)
    %51 = arith.divf %47, %50 : tensor<1x1xf32, #blocked1> loc(#loc47)
    gpu.barrier loc(#loc48)
    %52 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc49)
    %53 = tt.splat %52 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc50)
    %54 = triton_gpu.convert_layout %51 : tensor<1x1xf32, #blocked1> -> tensor<1x1xf32, #blocked> loc(#loc50)
    tt.store %53, %54 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc50)
    tt.return loc(#loc51)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":26:34)
#loc3 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":29:19)
#loc4 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":30:19)
#loc5 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":31:19)
#loc6 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":32:19)
#loc7 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":33:30)
#loc8 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":33:35)
#loc9 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":34:30)
#loc10 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":34:35)
#loc11 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":35:38)
#loc12 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":35:36)
#loc13 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":35:31)
#loc14 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":35:43)
#loc15 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":36:31)
#loc16 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":36:36)
#loc17 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":38:19)
#loc18 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":40:20)
#loc19 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":39:19)
#loc20 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":41:19)
#loc21 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":42:19)
#loc22 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":43:20)
#loc23 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":44:18)
#loc24 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":45:20)
#loc25 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":46:21)
#loc26 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":47:20)
#loc27 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":48:21)
#loc28 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":50:20)
#loc29 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":52:20)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc31 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":54:42)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc35 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":55:20)
#loc36 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":56:20)
#loc37 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":58:20)
#loc38 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":60:42)
#loc39 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":61:20)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc43 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":63:29)
#loc45 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":65:29)
#loc46 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":67:20)
#loc47 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":68:20)
#loc48 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":69:4)
#loc49 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":70:28)
#loc50 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":70:71)
#loc51 = loc("inductor_cache/fd/cfdnj5pcrquxho4e2sntiyle4cmmflsxbnht7zzcptfa5z5yy2hi.py":70:4)
#loc52 = loc(callsite(#loc30 at #loc31))
#loc53 = loc(callsite(#loc32 at #loc31))
#loc54 = loc(callsite(#loc33 at #loc31))
#loc55 = loc(callsite(#loc34 at #loc31))
#loc56 = loc(callsite(#loc30 at #loc38))
#loc57 = loc(callsite(#loc34 at #loc38))
#loc58 = loc(callsite(#loc40 at #loc41))
#loc60 = loc(callsite(#loc42 at #loc40))
#loc61 = loc(callsite(#loc40 at #loc44))
#loc63 = loc(callsite(#loc60 at #loc41))
#loc64 = loc(callsite(#loc60 at #loc44))
