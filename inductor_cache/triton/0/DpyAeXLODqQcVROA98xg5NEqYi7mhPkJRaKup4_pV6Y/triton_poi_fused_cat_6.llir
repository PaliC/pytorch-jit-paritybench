; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 7, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !13
  %16 = icmp slt i32 %15, 512, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen, 16, !dbg !15
  %18 = srem i32 %17, 8, !dbg !16
  %19 = mul i32 %17, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %.frozen1 = freeze i32 %15, !dbg !18
  %20 = sdiv i32 %.frozen1, 128, !dbg !18
  %21 = icmp slt i32 %18, 2, !dbg !19
  %22 = mul i32 %20, 128, !dbg !20
  %srem.decomposed = sub i32 %.frozen1, %22, !dbg !20
  %23 = shl nsw i32 %20, 5, !dbg !21
  %24 = add nsw i32 %23, %srem.decomposed, !dbg !22
  %25 = sext i32 %24 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !23
  %27 = and i1 %16, %21, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %27, i32 0, i1 %27) #3, !dbg !25
  %29 = and i32 %18, -2, !dbg !26
  %30 = icmp eq i32 %29, 2, !dbg !26
  %31 = add nsw i32 %18, -2, !dbg !27
  %32 = shl nsw i32 %31, 4, !dbg !28
  %33 = add nsw i32 %23, %.decomposed, !dbg !29
  %34 = add nsw i32 %33, %32, !dbg !30
  %35 = sext i32 %34 to i64, !dbg !31
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !31
  %37 = and i1 %16, %30, !dbg !32
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %37, i32 0, i1 %37) #3, !dbg !33
  %39 = sext i32 %31 to i64, !dbg !34
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !34
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %37, i32 0, i1 %37) #3, !dbg !35
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !36
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %37, i32 0, i1 %37) #3, !dbg !37
  %44 = bitcast i32 %43 to float, !dbg !37
  %45 = fadd float %44, 0x3EE4F8B580000000, !dbg !38
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %46, 0, !dbg !39
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %47, 0, !dbg !39
  br i1 %.not.i, label %53, label %48, !dbg !39

48:                                               ; preds = %10
  br i1 %.not1.i, label %51, label %49, !dbg !39

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

53:                                               ; preds = %10
  br i1 %.not1.i, label %56, label %54, !dbg !39

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !39
  %58 = bitcast i32 %38 to float, !dbg !33
  %59 = bitcast i32 %41 to float, !dbg !35
  %60 = fsub float %58, %59, !dbg !40
  %61 = bitcast i32 %28 to float, !dbg !25
  %62 = icmp slt i32 %18, 4, !dbg !41
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %64 = fmul float %60, %63, !dbg !43
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !44
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %37, i32 0, i1 %37) #3, !dbg !45
  %67 = bitcast i32 %66 to float, !dbg !45
  %68 = fmul float %64, %67, !dbg !46
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !47
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %37, i32 0, i1 %37) #3, !dbg !48
  %71 = bitcast i32 %70 to float, !dbg !48
  %72 = fadd float %68, %71, !dbg !49
  %73 = select i1 %30, float %72, float 0.000000e+00, !dbg !50
  %74 = select i1 %21, float %61, float %73, !dbg !51
  %75 = shl nsw i32 %20, 6, !dbg !52
  %76 = add nsw i32 %75, %srem.decomposed, !dbg !53
  %77 = sext i32 %76 to i64, !dbg !54
  %78 = getelementptr float, ptr addrspace(1) %6, i64 %77, !dbg !54
  %79 = and i1 %16, %62, !dbg !55
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 0, i1 %79) #3, !dbg !56
  %81 = bitcast i32 %80 to float, !dbg !56
  %82 = fadd float %74, %81, !dbg !57
  %83 = icmp sgt i32 %18, 3, !dbg !58
  %84 = shl nsw i32 %18, 4, !dbg !59
  %85 = add nsw i32 %.decomposed, -64, !dbg !59
  %86 = add nsw i32 %85, %75, !dbg !60
  %87 = add nsw i32 %86, %84, !dbg !61
  %88 = sext i32 %87 to i64, !dbg !62
  %89 = getelementptr float, ptr addrspace(1) %7, i64 %88, !dbg !62
  %90 = and i1 %16, %83, !dbg !63
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %90, i32 0, i1 %90) #3, !dbg !64
  %92 = bitcast i32 %91 to float, !dbg !64
  %93 = fsub float 0.000000e+00, %92, !dbg !65
  %94 = fmul float %93, 0x3FF7154760000000, !dbg !69
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #3, !dbg !69
  %96 = fadd float %95, 1.000000e+00, !dbg !70
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %96) #3, !dbg !71
  %98 = fmul float %97, %92, !dbg !72
  %99 = select i1 %62, float %82, float %98, !dbg !73
  %100 = sext i32 %15 to i64, !dbg !74
  %101 = getelementptr float, ptr addrspace(1) %8, i64 %100, !dbg !74
  %102 = bitcast float %99 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %101, i1 %16) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4eub3ibqj6mhuj5fh6624tm5ecrtmrbdeis7lhkx4uohko6ijjt.py", directory: "inductor_cache/4e")
!4 = !{ptr @triton_poi_fused_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_6", linkageName: "triton_poi_fused_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 37, column: 18, scope: !7)
!20 = !DILocation(line: 39, column: 36, scope: !7)
!21 = !DILocation(line: 39, column: 49, scope: !7)
!22 = !DILocation(line: 39, column: 46, scope: !7)
!23 = !DILocation(line: 39, column: 31, scope: !7)
!24 = !DILocation(line: 39, column: 62, scope: !7)
!25 = !DILocation(line: 39, column: 54, scope: !7)
!26 = !DILocation(line: 43, column: 20, scope: !7)
!27 = !DILocation(line: 44, column: 48, scope: !7)
!28 = !DILocation(line: 44, column: 40, scope: !7)
!29 = !DILocation(line: 44, column: 36, scope: !7)
!30 = !DILocation(line: 44, column: 55, scope: !7)
!31 = !DILocation(line: 44, column: 31, scope: !7)
!32 = !DILocation(line: 44, column: 71, scope: !7)
!33 = !DILocation(line: 44, column: 63, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 45, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 45, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 27, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 32, column: 18, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 31, scope: !7)
!45 = !DILocation(line: 56, column: 45, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 31, scope: !7)
!48 = !DILocation(line: 58, column: 45, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 61, column: 35, scope: !7)
!51 = !DILocation(line: 62, column: 34, scope: !7)
!52 = !DILocation(line: 63, column: 49, scope: !7)
!53 = !DILocation(line: 63, column: 46, scope: !7)
!54 = !DILocation(line: 63, column: 31, scope: !7)
!55 = !DILocation(line: 63, column: 61, scope: !7)
!56 = !DILocation(line: 63, column: 54, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 20, scope: !7)
!59 = !DILocation(line: 70, column: 40, scope: !7)
!60 = !DILocation(line: 70, column: 36, scope: !7)
!61 = !DILocation(line: 70, column: 53, scope: !7)
!62 = !DILocation(line: 70, column: 31, scope: !7)
!63 = !DILocation(line: 70, column: 69, scope: !7)
!64 = !DILocation(line: 70, column: 61, scope: !7)
!65 = !DILocation(line: 47, column: 30, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!68 = !DILocation(line: 71, column: 23, scope: !7)
!69 = !DILocation(line: 47, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 47, column: 20, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 47, column: 16, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 0, scope: !7)
!74 = !DILocation(line: 76, column: 25, scope: !7)
!75 = !DILocation(line: 76, column: 37, scope: !7)
!76 = !DILocation(line: 76, column: 4, scope: !7)
