#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [0, 1]}>
#loc = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0)
#loc1 = loc(unknown)
#loc54 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":56:44)
#loc105 = loc(callsite(#loc1 at #loc54))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__native_batch_norm_legit_functional_add_clone_convolution_53(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x1024xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x1024xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x1024xi32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c11776_i32 = arith.constant 11776 : i32 loc(#loc1)
    %c18432_i32 = arith.constant 18432 : i32 loc(#loc1)
    %c11264_i32 = arith.constant 11264 : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %cst_3 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c2048_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<1024xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x1024xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c512_i32 : i32 loc(#loc5)
    %5 = arith.divsi %0, %c512_i32 : i32 loc(#loc6)
    %6 = arith.addi %4, %c11264_i32 : i32 loc(#loc7)
    %7 = arith.muli %5, %c18432_i32 : i32 loc(#loc8)
    %8 = arith.addi %6, %7 : i32 loc(#loc9)
    %9 = tt.addptr %arg2, %8 : !tt.ptr<f32>, i32 loc(#loc10)
    %10 = tt.splat %9 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %11 = tt.splat %9 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc11)
    %13 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc11)
    %14 = tt.load %10, %12 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %15 = tt.load %11, %13 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %16 = tt.addptr %arg3, %6 : !tt.ptr<f32>, i32 loc(#loc12)
    %17 = tt.splat %16 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %18 = tt.splat %16 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %19 = tt.load %17, %12 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %20 = tt.load %18, %13 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %21 = arith.addi %4, %c11776_i32 : i32 loc(#loc14)
    %22 = arith.addi %21, %7 : i32 loc(#loc15)
    %23 = tt.addptr %arg2, %22 : !tt.ptr<f32>, i32 loc(#loc16)
    %24 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc17)
    %25 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %26 = tt.load %24, %12 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc17)
    %27 = tt.load %25, %13 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %28 = tt.addptr %arg3, %21 : !tt.ptr<f32>, i32 loc(#loc18)
    %29 = tt.splat %28 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc19)
    %30 = tt.splat %28 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %31 = tt.load %29, %12 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc19)
    %32 = tt.load %30, %13 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %33 = arith.addf %14, %19 : tensor<1x1xf32, #blocked1> loc(#loc20)
    %34 = arith.addf %15, %20 : tensor<1x1xf32, #blocked> loc(#loc20)
    %35 = arith.addf %26, %31 : tensor<1x1xf32, #blocked1> loc(#loc21)
    %36 = arith.addf %27, %32 : tensor<1x1xf32, #blocked> loc(#loc21)
    %37 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc22)
    %38 = tt.splat %37 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc23)
    tt.store %38, %33, %12 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc23)
    %39 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc24)
    %40 = tt.splat %39 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc25)
    tt.store %40, %35, %12 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc25)
    %41 = tt.addptr %arg4, %4 : !tt.ptr<f32>, i32 loc(#loc26)
    %42 = tt.splat %41 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc27)
    %43 = tt.load %42, %13 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc27)
    %44 = arith.muli %0, %c4096_i32 : i32 loc(#loc28)
    %45 = tt.splat %44 : i32 -> tensor<1x1024xi32, #blocked> loc(#loc29)
    %46 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x1024x!tt.ptr<f32>, #blocked> loc(#loc30)
    %47 = tt.splat %1 : i1 -> tensor<1x1024xi1, #blocked> loc(#loc31)
    %48 = tt.broadcast %43 : tensor<1x1xf32, #blocked> -> tensor<1x1024xf32, #blocked> loc(#loc32)
    %49:3 = scf.for %arg11 = %c0_i32 to %c4096_i32 step %c1024_i32 iter_args(%arg12 = %cst_0, %arg13 = %cst_0, %arg14 = %cst_0) -> (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>)  : i32 {
      %72 = tt.splat %arg11 : i32 -> tensor<1x1024xi32, #blocked> loc(#loc34)
      %73 = arith.addi %72, %3 : tensor<1x1024xi32, #blocked> loc(#loc34)
      %74 = arith.cmpi slt, %73, %cst_2 : tensor<1x1024xi32, #blocked> loc(#loc35)
      %75 = arith.addi %73, %45 : tensor<1x1024xi32, #blocked> loc(#loc29)
      %76 = tt.addptr %46, %75 : tensor<1x1024x!tt.ptr<f32>, #blocked>, tensor<1x1024xi32, #blocked> loc(#loc30)
      %77 = arith.andi %74, %47 : tensor<1x1024xi1, #blocked> loc(#loc31)
      %78 = tt.load %76, %77, %cst_0 evictionPolicy = evict_first : tensor<1x1024x!tt.ptr<f32>, #blocked> loc(#loc36)
      %79 = arith.addf %78, %48 : tensor<1x1024xf32, #blocked> loc(#loc32)
      %80 = arith.cmpi eq, %arg11, %c0_i32 : i32 loc(#loc37)
      %81:3 = scf.if %80 -> (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) {
        scf.yield %cst_0, %79, %cst_1 : tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked> loc(#loc96)
      } else {
        %85 = arith.subf %79, %arg12 : tensor<1x1024xf32, #blocked> loc(#loc97)
        %86 = arith.addf %arg14, %cst_1 : tensor<1x1024xf32, #blocked> loc(#loc98)
        %87 = arith.divf %85, %86 : tensor<1x1024xf32, #blocked> loc(#loc99)
        %88 = arith.addf %arg12, %87 : tensor<1x1024xf32, #blocked> loc(#loc100)
        %89 = arith.subf %79, %88 : tensor<1x1024xf32, #blocked> loc(#loc101)
        %90 = arith.mulf %85, %89 : tensor<1x1024xf32, #blocked> loc(#loc102)
        %91 = arith.addf %arg13, %90 : tensor<1x1024xf32, #blocked> loc(#loc103)
        scf.yield %91, %88, %86 : tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked> loc(#loc103)
      } loc(#loc95)
      %82 = arith.select %77, %81#1, %arg12 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked> loc(#loc48)
      %83 = arith.select %77, %81#0, %arg13 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked> loc(#loc49)
      %84 = arith.select %77, %81#2, %arg14 : tensor<1x1024xi1, #blocked>, tensor<1x1024xf32, #blocked> loc(#loc50)
      tt.store %76, %79, %77 : tensor<1x1024x!tt.ptr<f32>, #blocked> loc(#loc51)
      scf.yield %82, %83, %84 : tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked> loc(#loc52)
    } loc(#loc33)
    %50:3 = "tt.reduce"(%49#0, %49#1, %49#2) <{axis = 1 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc54)), %arg12: f32 loc(callsite(#loc1 at #loc54)), %arg13: f32 loc(callsite(#loc1 at #loc54)), %arg14: f32 loc(callsite(#loc1 at #loc54)), %arg15: f32 loc(callsite(#loc1 at #loc54)), %arg16: f32 loc(callsite(#loc1 at #loc54))):
      %72 = arith.subf %arg14, %arg11 : f32 loc(#loc118)
      %73 = arith.addf %arg13, %arg16 : f32 loc(#loc119)
      %74 = arith.cmpf oeq, %73, %cst_3 : f32 loc(#loc120)
      %75 = arith.divf %arg16, %73 : f32 loc(#loc121)
      %76 = arith.select %74, %cst_3, %75 : f32 loc(#loc122)
      %77 = arith.mulf %72, %76 : f32 loc(#loc123)
      %78 = arith.addf %arg11, %77 : f32 loc(#loc124)
      %79 = arith.addf %arg12, %arg15 : f32 loc(#loc125)
      %80 = arith.mulf %72, %72 : f32 loc(#loc126)
      %81 = arith.mulf %80, %arg13 : f32 loc(#loc127)
      %82 = arith.mulf %81, %76 : f32 loc(#loc128)
      %83 = arith.addf %79, %82 : f32 loc(#loc129)
      tt.reduce.return %78, %83, %73 : f32, f32, f32 loc(#loc104)
    }) : (tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>, tensor<1x1024xf32, #blocked>) -> (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc104)
    %51 = triton_gpu.convert_layout %50#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc67)
    %52 = tt.expand_dims %51 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc67)
    %53 = tt.expand_dims %50#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc67)
    %54 = triton_gpu.convert_layout %50#1 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc68)
    %55 = tt.expand_dims %54 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc69)
    %56 = tt.expand_dims %50#1 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc69)
    %57 = tt.addptr %arg7, %0 : !tt.ptr<f32>, i32 loc(#loc70)
    %58 = tt.splat %57 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc71)
    tt.store %58, %52, %12 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc71)
    %59 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x1024x!tt.ptr<f32>, #blocked> loc(#loc72)
    %60 = tt.broadcast %53 : tensor<1x1xf32, #blocked> -> tensor<1x1024xf32, #blocked> loc(#loc73)
    %61 = arith.divf %56, %cst : tensor<1x1xf32, #blocked> loc(#loc74)
    %62 = arith.addf %61, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc75)
    %63 = tt.extern_elementwise %62 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc76)
    %64 = tt.broadcast %63 : tensor<1x1xf32, #blocked> -> tensor<1x1024xf32, #blocked> loc(#loc77)
    %65 = tt.broadcast %36 : tensor<1x1xf32, #blocked> -> tensor<1x1024xf32, #blocked> loc(#loc78)
    %66 = tt.broadcast %34 : tensor<1x1xf32, #blocked> -> tensor<1x1024xf32, #blocked> loc(#loc79)
    scf.for %arg11 = %c0_i32 to %c4096_i32 step %c1024_i32  : i32 {
      %72 = tt.splat %arg11 : i32 -> tensor<1x1024xi32, #blocked> loc(#loc81)
      %73 = arith.addi %72, %3 : tensor<1x1024xi32, #blocked> loc(#loc81)
      %74 = arith.cmpi slt, %73, %cst_2 : tensor<1x1024xi32, #blocked> loc(#loc82)
      %75 = arith.addi %73, %45 : tensor<1x1024xi32, #blocked> loc(#loc83)
      %76 = tt.addptr %59, %75 : tensor<1x1024x!tt.ptr<f32>, #blocked>, tensor<1x1024xi32, #blocked> loc(#loc72)
      %77 = arith.andi %74, %47 : tensor<1x1024xi1, #blocked> loc(#loc84)
      %78 = tt.load %76, %77, %cst_0 evictionPolicy = evict_first : tensor<1x1024x!tt.ptr<f32>, #blocked> loc(#loc85)
      %79 = tt.addptr %46, %75 : tensor<1x1024x!tt.ptr<f32>, #blocked>, tensor<1x1024xi32, #blocked> loc(#loc86)
      %80 = tt.load %79, %77, %cst_0 evictionPolicy = evict_first : tensor<1x1024x!tt.ptr<f32>, #blocked> loc(#loc87)
      %81 = arith.subf %80, %60 : tensor<1x1024xf32, #blocked> loc(#loc73)
      %82 = arith.mulf %81, %64 : tensor<1x1024xf32, #blocked> loc(#loc77)
      %83 = arith.mulf %82, %65 : tensor<1x1024xf32, #blocked> loc(#loc78)
      %84 = arith.addf %83, %66 : tensor<1x1024xf32, #blocked> loc(#loc79)
      %85 = arith.addf %78, %84 : tensor<1x1024xf32, #blocked> loc(#loc88)
      tt.store %76, %85, %77 : tensor<1x1024x!tt.ptr<f32>, #blocked> loc(#loc89)
    } loc(#loc80)
    %67 = arith.divf %55, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc90)
    %68 = arith.addf %67, %cst_5 : tensor<1x1xf32, #blocked1> loc(#loc91)
    %69 = tt.extern_elementwise %68 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc68)
    %70 = tt.addptr %arg8, %0 : !tt.ptr<f32>, i32 loc(#loc92)
    %71 = tt.splat %70 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc93)
    tt.store %71, %69, %12 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc93)
    tt.return loc(#loc94)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":22:28)
#loc3 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":24:21)
#loc4 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":25:33)
#loc5 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":26:19)
#loc6 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":27:19)
#loc7 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":29:38)
#loc8 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":29:49)
#loc9 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":29:43)
#loc10 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":29:30)
#loc11 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":29:54)
#loc12 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":30:30)
#loc13 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":30:43)
#loc14 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":31:38)
#loc15 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":31:43)
#loc16 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":31:30)
#loc17 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":31:54)
#loc18 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":32:30)
#loc19 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":32:43)
#loc20 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":33:18)
#loc21 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":34:18)
#loc22 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":35:25)
#loc23 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":35:36)
#loc24 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":36:25)
#loc25 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":36:36)
#loc26 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":37:30)
#loc27 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":37:35)
#loc28 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":45:48)
#loc29 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":45:43)
#loc30 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":45:38)
#loc31 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":45:61)
#loc32 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":46:22)
#loc33 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":41:36)
#loc34 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":42:27)
#loc35 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":43:25)
#loc36 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":45:53)
#loc37 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":49:65)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc39 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":49:54)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc48 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":51:62)
#loc49 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":52:58)
#loc50 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":53:66)
#loc51 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":54:53)
#loc52 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":54:8)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc61 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc62 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc63 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc64 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc65 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc66 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc67 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":58:22)
#loc68 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":83:28)
#loc69 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":59:22)
#loc70 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":61:25)
#loc71 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":61:37)
#loc72 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":66:39)
#loc73 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":68:24)
#loc74 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":70:24)
#loc75 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":72:24)
#loc76 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":73:32)
#loc77 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":74:24)
#loc78 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":75:24)
#loc79 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":76:24)
#loc80 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":62:36)
#loc81 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":63:27)
#loc82 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":64:25)
#loc83 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":66:44)
#loc84 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":66:62)
#loc85 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":66:54)
#loc86 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":67:39)
#loc87 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":67:54)
#loc88 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":77:24)
#loc89 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":78:54)
#loc90 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":80:20)
#loc91 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":82:20)
#loc92 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":84:25)
#loc93 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":84:37)
#loc94 = loc("inductor_cache/mx/cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py":84:4)
#loc95 = loc(callsite(#loc38 at #loc39))
#loc96 = loc(callsite(#loc40 at #loc39))
#loc97 = loc(callsite(#loc41 at #loc39))
#loc98 = loc(callsite(#loc42 at #loc39))
#loc99 = loc(callsite(#loc43 at #loc39))
#loc100 = loc(callsite(#loc44 at #loc39))
#loc101 = loc(callsite(#loc45 at #loc39))
#loc102 = loc(callsite(#loc46 at #loc39))
#loc103 = loc(callsite(#loc47 at #loc39))
#loc104 = loc(callsite(#loc53 at #loc54))
#loc106 = loc(callsite(#loc55 at #loc53))
#loc107 = loc(callsite(#loc56 at #loc53))
#loc108 = loc(callsite(#loc57 at #loc53))
#loc109 = loc(callsite(#loc58 at #loc53))
#loc110 = loc(callsite(#loc59 at #loc53))
#loc111 = loc(callsite(#loc60 at #loc53))
#loc112 = loc(callsite(#loc61 at #loc53))
#loc113 = loc(callsite(#loc62 at #loc53))
#loc114 = loc(callsite(#loc63 at #loc53))
#loc115 = loc(callsite(#loc64 at #loc53))
#loc116 = loc(callsite(#loc65 at #loc53))
#loc117 = loc(callsite(#loc66 at #loc53))
#loc118 = loc(callsite(#loc106 at #loc54))
#loc119 = loc(callsite(#loc107 at #loc54))
#loc120 = loc(callsite(#loc108 at #loc54))
#loc121 = loc(callsite(#loc109 at #loc54))
#loc122 = loc(callsite(#loc110 at #loc54))
#loc123 = loc(callsite(#loc111 at #loc54))
#loc124 = loc(callsite(#loc112 at #loc54))
#loc125 = loc(callsite(#loc113 at #loc54))
#loc126 = loc(callsite(#loc114 at #loc54))
#loc127 = loc(callsite(#loc115 at #loc54))
#loc128 = loc(callsite(#loc116 at #loc54))
#loc129 = loc(callsite(#loc117 at #loc54))
