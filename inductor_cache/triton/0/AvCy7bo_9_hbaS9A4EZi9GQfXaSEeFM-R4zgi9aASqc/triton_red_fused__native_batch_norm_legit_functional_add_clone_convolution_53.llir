; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_functional_add_clone_convolution_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
.peel.next:
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 2048, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 1020, !dbg !12
  %.frozen = freeze i32 %11, !dbg !13
  %16 = sdiv i32 %.frozen, 512, !dbg !13
  %17 = mul i32 %16, 512, !dbg !14
  %.decomposed = sub i32 %.frozen, %17, !dbg !14
  %18 = add nsw i32 %.decomposed, 11264, !dbg !15
  %19 = mul i32 %16, 18432, !dbg !16
  %20 = add i32 %18, %19, !dbg !17
  %21 = sext i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #5, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #5, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #5, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #5, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #5, !dbg !19
  %29 = zext nneg i32 %18 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #5, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #5, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #5, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #5, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #5, !dbg !21
  %37 = add nsw i32 %.decomposed, 11776, !dbg !22
  %38 = add i32 %37, %19, !dbg !23
  %39 = sext i32 %38 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #5, !dbg !25
  %42 = bitcast i32 %41 to float, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #5, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #5, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #5, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #5, !dbg !25
  %47 = zext nneg i32 %37 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %12) #5, !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %12) #5, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %12) #5, !dbg !27
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %12) #5, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %12) #5, !dbg !27
  %55 = fadd float %24, %32, !dbg !28
  %56 = fadd float %42, %50, !dbg !29
  %57 = sext i32 %11 to i64, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !30
  %urem = and i32 %13, 255, !dbg !31
  %59 = icmp eq i32 %urem, 0, !dbg !31
  %60 = bitcast float %55 to i32, !dbg !31
  %61 = and i1 %59, %12, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %60, ptr addrspace(1) %58, i1 %61) #5, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %6, i64 %57, !dbg !32
  %63 = bitcast float %56 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %63, ptr addrspace(1) %62, i1 %61) #5, !dbg !33
  %64 = sext i32 %.decomposed to i64, !dbg !34
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !34
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %12) #5, !dbg !35
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %12) #5, !dbg !35
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %12) #5, !dbg !35
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %12) #5, !dbg !35
  %70 = shl i32 %11, 12, !dbg !36
  %71 = or disjoint i32 %70, %15
  %72 = sext i32 %71 to i64, !dbg !37
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !37
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !38
  %75 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !38
  %76 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !38
  %77 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !38
  %78 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !38
  %79 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !38
  %80 = insertelement <4 x i32> %79, i32 %77, i64 1, !dbg !38
  %81 = insertelement <4 x i32> %80, i32 %76, i64 2, !dbg !38
  %82 = insertelement <4 x i32> %81, i32 %75, i64 3, !dbg !38
  %83 = bitcast <4 x i32> %82 to <4 x float>, !dbg !38
  %84 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !39
  %85 = bitcast <4 x i32> %84 to <4 x float>, !dbg !39
  %86 = shufflevector <4 x float> %85, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !39
  %87 = fadd <4 x float> %86, %83, !dbg !39
  %bc = bitcast <4 x float> %87 to <4 x i32>, !dbg !40
  %88 = extractelement <4 x i32> %bc, i64 0, !dbg !40
  %bc94 = bitcast <4 x float> %87 to <4 x i32>, !dbg !40
  %89 = extractelement <4 x i32> %bc94, i64 1, !dbg !40
  %bc95 = bitcast <4 x float> %87 to <4 x i32>, !dbg !40
  %90 = extractelement <4 x i32> %bc95, i64 2, !dbg !40
  %bc96 = bitcast <4 x float> %87 to <4 x i32>, !dbg !40
  %91 = extractelement <4 x i32> %bc96, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %88, i32 %89, i32 %90, i32 %91, ptr addrspace(1) %73, i1 %12) #5, !dbg !40
  %92 = insertelement <4 x i1> poison, i1 %12, i64 0, !dbg !41
  %93 = shufflevector <4 x i1> %92, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !41
  %94 = select <4 x i1> %93, <4 x float> %87, <4 x float> zeroinitializer, !dbg !41
  %95 = select i1 %12, float 1.000000e+00, float 0.000000e+00, !dbg !42
  %96 = and i32 %13, 31, !dbg !12
  %97 = or disjoint i32 %71, 1024, !dbg !43
  %98 = sext i32 %97 to i64, !dbg !37
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !37
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !38
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !38
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !38
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !38
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !38
  %105 = fadd float %95, 1.000000e+00, !dbg !44
  %106 = fadd float %95, 1.000000e+00, !dbg !44
  %107 = fadd float %95, 1.000000e+00, !dbg !44
  %108 = fadd float %95, 1.000000e+00, !dbg !44
  %109 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !38
  %110 = insertelement <4 x i32> %109, i32 %102, i64 1, !dbg !38
  %111 = insertelement <4 x i32> %110, i32 %103, i64 2, !dbg !38
  %112 = insertelement <4 x i32> %111, i32 %104, i64 3, !dbg !38
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !38
  %114 = fadd <4 x float> %86, %113, !dbg !39
  %115 = fsub <4 x float> %114, %94, !dbg !48
  %116 = extractelement <4 x float> %115, i64 0, !dbg !49
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %105) #5, !dbg !49
  %118 = extractelement <4 x float> %115, i64 1, !dbg !49
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %106) #5, !dbg !49
  %120 = extractelement <4 x float> %115, i64 2, !dbg !49
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %107) #5, !dbg !49
  %122 = extractelement <4 x float> %115, i64 3, !dbg !49
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %108) #5, !dbg !49
  %124 = insertelement <4 x float> poison, float %117, i64 0, !dbg !50
  %125 = insertelement <4 x float> %124, float %119, i64 1, !dbg !50
  %126 = insertelement <4 x float> %125, float %121, i64 2, !dbg !50
  %127 = insertelement <4 x float> %126, float %123, i64 3, !dbg !50
  %128 = fadd <4 x float> %94, %127, !dbg !50
  %129 = fsub <4 x float> %114, %128, !dbg !51
  %130 = fmul <4 x float> %115, %129, !dbg !52
  %131 = fadd <4 x float> %130, zeroinitializer, !dbg !53
  %132 = select <4 x i1> %93, <4 x float> %128, <4 x float> zeroinitializer, !dbg !41
  %bc97 = bitcast <4 x float> %114 to <4 x i32>, !dbg !40
  %133 = extractelement <4 x i32> %bc97, i64 0, !dbg !40
  %bc98 = bitcast <4 x float> %114 to <4 x i32>, !dbg !40
  %134 = extractelement <4 x i32> %bc98, i64 1, !dbg !40
  %bc99 = bitcast <4 x float> %114 to <4 x i32>, !dbg !40
  %135 = extractelement <4 x i32> %bc99, i64 2, !dbg !40
  %bc100 = bitcast <4 x float> %114 to <4 x i32>, !dbg !40
  %136 = extractelement <4 x i32> %bc100, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %133, i32 %134, i32 %135, i32 %136, ptr addrspace(1) %99, i1 %12) #5, !dbg !40
  %137 = or disjoint i32 %71, 2048, !dbg !43
  %138 = sext i32 %137 to i64, !dbg !37
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !37
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !38
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !38
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !38
  %145 = fadd float %105, 1.000000e+00, !dbg !44
  %146 = select i1 %12, float %145, float 1.000000e+00, !dbg !42
  %147 = fadd float %106, 1.000000e+00, !dbg !44
  %148 = select i1 %12, float %147, float 1.000000e+00, !dbg !42
  %149 = fadd float %107, 1.000000e+00, !dbg !44
  %150 = select i1 %12, float %149, float 1.000000e+00, !dbg !42
  %151 = fadd float %108, 1.000000e+00, !dbg !44
  %152 = select i1 %12, float %151, float 1.000000e+00, !dbg !42
  %153 = insertelement <4 x i32> poison, i32 %141, i64 0, !dbg !38
  %154 = insertelement <4 x i32> %153, i32 %142, i64 1, !dbg !38
  %155 = insertelement <4 x i32> %154, i32 %143, i64 2, !dbg !38
  %156 = insertelement <4 x i32> %155, i32 %144, i64 3, !dbg !38
  %157 = bitcast <4 x i32> %156 to <4 x float>, !dbg !38
  %158 = fadd <4 x float> %86, %157, !dbg !39
  %159 = fsub <4 x float> %158, %132, !dbg !48
  %160 = extractelement <4 x float> %159, i64 0, !dbg !49
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %146) #5, !dbg !49
  %162 = extractelement <4 x float> %159, i64 1, !dbg !49
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %148) #5, !dbg !49
  %164 = extractelement <4 x float> %159, i64 2, !dbg !49
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %150) #5, !dbg !49
  %166 = extractelement <4 x float> %159, i64 3, !dbg !49
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %152) #5, !dbg !49
  %168 = insertelement <4 x float> poison, float %161, i64 0, !dbg !50
  %169 = insertelement <4 x float> %168, float %163, i64 1, !dbg !50
  %170 = insertelement <4 x float> %169, float %165, i64 2, !dbg !50
  %171 = insertelement <4 x float> %170, float %167, i64 3, !dbg !50
  %172 = fadd <4 x float> %132, %171, !dbg !50
  %173 = fsub <4 x float> %158, %172, !dbg !51
  %174 = fmul <4 x float> %159, %173, !dbg !52
  %175 = fadd <4 x float> %131, %174, !dbg !53
  %176 = select <4 x i1> %93, <4 x float> %172, <4 x float> zeroinitializer, !dbg !41
  %bc97.1 = bitcast <4 x float> %158 to <4 x i32>, !dbg !40
  %177 = extractelement <4 x i32> %bc97.1, i64 0, !dbg !40
  %bc98.1 = bitcast <4 x float> %158 to <4 x i32>, !dbg !40
  %178 = extractelement <4 x i32> %bc98.1, i64 1, !dbg !40
  %bc99.1 = bitcast <4 x float> %158 to <4 x i32>, !dbg !40
  %179 = extractelement <4 x i32> %bc99.1, i64 2, !dbg !40
  %bc100.1 = bitcast <4 x float> %158 to <4 x i32>, !dbg !40
  %180 = extractelement <4 x i32> %bc100.1, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %177, i32 %178, i32 %179, i32 %180, ptr addrspace(1) %139, i1 %12) #5, !dbg !40
  %181 = or disjoint i32 %71, 3072, !dbg !43
  %182 = sext i32 %181 to i64, !dbg !37
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !37
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %183, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !38
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !38
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !38
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !38
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !38
  %189 = fadd float %145, 1.000000e+00, !dbg !44
  %190 = select i1 %12, float %189, float 1.000000e+00, !dbg !42
  %191 = fadd float %147, 1.000000e+00, !dbg !44
  %192 = select i1 %12, float %191, float 1.000000e+00, !dbg !42
  %193 = fadd float %149, 1.000000e+00, !dbg !44
  %194 = select i1 %12, float %193, float 1.000000e+00, !dbg !42
  %195 = fadd float %151, 1.000000e+00, !dbg !44
  %196 = select i1 %12, float %195, float 1.000000e+00, !dbg !42
  %197 = insertelement <4 x i32> poison, i32 %185, i64 0, !dbg !38
  %198 = insertelement <4 x i32> %197, i32 %186, i64 1, !dbg !38
  %199 = insertelement <4 x i32> %198, i32 %187, i64 2, !dbg !38
  %200 = insertelement <4 x i32> %199, i32 %188, i64 3, !dbg !38
  %201 = bitcast <4 x i32> %200 to <4 x float>, !dbg !38
  %202 = fadd <4 x float> %86, %201, !dbg !39
  %203 = fsub <4 x float> %202, %176, !dbg !48
  %204 = extractelement <4 x float> %203, i64 0, !dbg !49
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %190) #5, !dbg !49
  %206 = extractelement <4 x float> %203, i64 1, !dbg !49
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %192) #5, !dbg !49
  %208 = extractelement <4 x float> %203, i64 2, !dbg !49
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %194) #5, !dbg !49
  %210 = extractelement <4 x float> %203, i64 3, !dbg !49
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %196) #5, !dbg !49
  %212 = insertelement <4 x float> poison, float %205, i64 0, !dbg !50
  %213 = insertelement <4 x float> %212, float %207, i64 1, !dbg !50
  %214 = insertelement <4 x float> %213, float %209, i64 2, !dbg !50
  %215 = insertelement <4 x float> %214, float %211, i64 3, !dbg !50
  %216 = fadd <4 x float> %176, %215, !dbg !50
  %217 = fsub <4 x float> %202, %216, !dbg !51
  %218 = fmul <4 x float> %203, %217, !dbg !52
  %219 = fadd <4 x float> %175, %218, !dbg !53
  %220 = select <4 x i1> %93, <4 x float> %216, <4 x float> zeroinitializer, !dbg !41
  %221 = select <4 x i1> %93, <4 x float> %219, <4 x float> zeroinitializer, !dbg !54
  %222 = select i1 %12, float %189, float 0.000000e+00, !dbg !42
  %223 = select i1 %12, float %191, float 0.000000e+00, !dbg !42
  %224 = select i1 %12, float %193, float 0.000000e+00, !dbg !42
  %225 = select i1 %12, float %195, float 0.000000e+00, !dbg !42
  %bc97.2 = bitcast <4 x float> %202 to <4 x i32>, !dbg !40
  %226 = extractelement <4 x i32> %bc97.2, i64 0, !dbg !40
  %bc98.2 = bitcast <4 x float> %202 to <4 x i32>, !dbg !40
  %227 = extractelement <4 x i32> %bc98.2, i64 1, !dbg !40
  %bc99.2 = bitcast <4 x float> %202 to <4 x i32>, !dbg !40
  %228 = extractelement <4 x i32> %bc99.2, i64 2, !dbg !40
  %bc100.2 = bitcast <4 x float> %202 to <4 x i32>, !dbg !40
  %229 = extractelement <4 x i32> %bc100.2, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %227, i32 %228, i32 %229, ptr addrspace(1) %183, i1 %12) #5, !dbg !40
  %230 = lshr i32 %13, 5, !dbg !12
  %231 = bitcast i32 %28 to float, !dbg !19
  %232 = bitcast i32 %36 to float, !dbg !21
  %233 = bitcast i32 %46 to float, !dbg !25
  %234 = bitcast i32 %54 to float, !dbg !27
  %235 = fadd float %231, %232, !dbg !28
  %236 = fadd float %233, %234, !dbg !29
  %237 = and i32 %230, 7, !dbg !31
  %238 = extractelement <4 x float> %220, i64 0, !dbg !55
  %239 = extractelement <4 x float> %220, i64 1, !dbg !55
  %240 = fsub float %239, %238, !dbg !55
  %241 = fadd float %222, %223, !dbg !58
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !59
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %241) #5, !dbg !60
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !61
  %245 = fmul float %240, %244, !dbg !62
  %246 = fadd float %238, %245, !dbg !63
  %shift = shufflevector <4 x float> %221, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !64
  %247 = fadd <4 x float> %221, %shift, !dbg !64
  %248 = extractelement <4 x float> %247, i64 0, !dbg !64
  %249 = fmul float %240, %240, !dbg !65
  %250 = fmul float %249, %222, !dbg !66
  %251 = fmul float %250, %244, !dbg !67
  %252 = fadd float %248, %251, !dbg !68
  %253 = extractelement <4 x float> %220, i64 2, !dbg !55
  %254 = fsub float %253, %246, !dbg !55
  %255 = fadd float %224, %241, !dbg !58
  %256 = fcmp oeq float %255, 0.000000e+00, !dbg !59
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %255) #5, !dbg !60
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !61
  %259 = fmul float %258, %254, !dbg !62
  %260 = fadd float %246, %259, !dbg !63
  %261 = extractelement <4 x float> %221, i64 2, !dbg !64
  %262 = fadd float %261, %252, !dbg !64
  %263 = fmul float %254, %254, !dbg !65
  %264 = fmul float %241, %263, !dbg !66
  %265 = fmul float %258, %264, !dbg !67
  %266 = fadd float %262, %265, !dbg !68
  %267 = extractelement <4 x float> %220, i64 3, !dbg !55
  %268 = fsub float %267, %260, !dbg !55
  %269 = fadd float %225, %255, !dbg !58
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !59
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %269) #5, !dbg !60
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !61
  %273 = fmul float %272, %268, !dbg !62
  %274 = fadd float %260, %273, !dbg !63
  %275 = extractelement <4 x float> %221, i64 3, !dbg !64
  %276 = fadd float %275, %266, !dbg !64
  %277 = fmul float %268, %268, !dbg !65
  %278 = fmul float %255, %277, !dbg !66
  %279 = fmul float %272, %278, !dbg !67
  %280 = fadd float %276, %279, !dbg !68
  %281 = bitcast float %274 to i32, !dbg !69
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 16, i32 31), !dbg !69
  %283 = bitcast i32 %282 to float, !dbg !69
  %284 = bitcast float %280 to i32, !dbg !69
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 16, i32 31), !dbg !69
  %286 = bitcast i32 %285 to float, !dbg !69
  %287 = bitcast float %269 to i32, !dbg !69
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 16, i32 31), !dbg !69
  %289 = bitcast i32 %288 to float, !dbg !69
  %290 = fsub float %283, %274, !dbg !55
  %291 = fadd float %269, %289, !dbg !58
  %292 = fcmp oeq float %291, 0.000000e+00, !dbg !59
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float %291) #5, !dbg !60
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !61
  %295 = fmul float %294, %290, !dbg !62
  %296 = fadd float %274, %295, !dbg !63
  %297 = fadd float %280, %286, !dbg !64
  %298 = fmul float %290, %290, !dbg !65
  %299 = fmul float %269, %298, !dbg !66
  %300 = fmul float %294, %299, !dbg !67
  %301 = fadd float %297, %300, !dbg !68
  %302 = bitcast float %296 to i32, !dbg !69
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 8, i32 31), !dbg !69
  %304 = bitcast i32 %303 to float, !dbg !69
  %305 = bitcast float %301 to i32, !dbg !69
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 8, i32 31), !dbg !69
  %307 = bitcast i32 %306 to float, !dbg !69
  %308 = bitcast float %291 to i32, !dbg !69
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 8, i32 31), !dbg !69
  %310 = bitcast i32 %309 to float, !dbg !69
  %311 = fsub float %304, %296, !dbg !55
  %312 = fadd float %291, %310, !dbg !58
  %313 = fcmp oeq float %312, 0.000000e+00, !dbg !59
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %312) #5, !dbg !60
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !61
  %316 = fmul float %311, %315, !dbg !62
  %317 = fadd float %296, %316, !dbg !63
  %318 = fadd float %301, %307, !dbg !64
  %319 = fmul float %311, %311, !dbg !65
  %320 = fmul float %291, %319, !dbg !66
  %321 = fmul float %315, %320, !dbg !67
  %322 = fadd float %318, %321, !dbg !68
  %323 = bitcast float %317 to i32, !dbg !69
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 4, i32 31), !dbg !69
  %325 = bitcast i32 %324 to float, !dbg !69
  %326 = bitcast float %322 to i32, !dbg !69
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 4, i32 31), !dbg !69
  %328 = bitcast i32 %327 to float, !dbg !69
  %329 = bitcast float %312 to i32, !dbg !69
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 4, i32 31), !dbg !69
  %331 = bitcast i32 %330 to float, !dbg !69
  %332 = fsub float %325, %317, !dbg !55
  %333 = fadd float %312, %331, !dbg !58
  %334 = fcmp oeq float %333, 0.000000e+00, !dbg !59
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %331, float %333) #5, !dbg !60
  %336 = select i1 %334, float 0.000000e+00, float %335, !dbg !61
  %337 = fmul float %332, %336, !dbg !62
  %338 = fadd float %317, %337, !dbg !63
  %339 = fadd float %322, %328, !dbg !64
  %340 = fmul float %332, %332, !dbg !65
  %341 = fmul float %312, %340, !dbg !66
  %342 = fmul float %336, %341, !dbg !67
  %343 = fadd float %339, %342, !dbg !68
  %344 = bitcast float %338 to i32, !dbg !69
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 2, i32 31), !dbg !69
  %346 = bitcast i32 %345 to float, !dbg !69
  %347 = bitcast float %343 to i32, !dbg !69
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 2, i32 31), !dbg !69
  %349 = bitcast i32 %348 to float, !dbg !69
  %350 = bitcast float %333 to i32, !dbg !69
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 2, i32 31), !dbg !69
  %352 = bitcast i32 %351 to float, !dbg !69
  %353 = fsub float %346, %338, !dbg !55
  %354 = fadd float %333, %352, !dbg !58
  %355 = fcmp oeq float %354, 0.000000e+00, !dbg !59
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %354) #5, !dbg !60
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !61
  %358 = fmul float %353, %357, !dbg !62
  %359 = fadd float %338, %358, !dbg !63
  %360 = fadd float %343, %349, !dbg !64
  %361 = fmul float %353, %353, !dbg !65
  %362 = fmul float %333, %361, !dbg !66
  %363 = fmul float %357, %362, !dbg !67
  %364 = fadd float %360, %363, !dbg !68
  %365 = bitcast float %359 to i32, !dbg !69
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 1, i32 31), !dbg !69
  %367 = bitcast i32 %366 to float, !dbg !69
  %368 = bitcast float %364 to i32, !dbg !69
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 1, i32 31), !dbg !69
  %370 = bitcast i32 %369 to float, !dbg !69
  %371 = bitcast float %354 to i32, !dbg !69
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 1, i32 31), !dbg !69
  %373 = bitcast i32 %372 to float, !dbg !69
  %374 = fsub float %367, %359, !dbg !55
  %375 = fadd float %354, %373, !dbg !58
  %376 = fcmp oeq float %375, 0.000000e+00, !dbg !59
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float %375) #5, !dbg !60
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !61
  %379 = fmul float %374, %378, !dbg !62
  %380 = fadd float %359, %379, !dbg !63
  %381 = fadd float %364, %370, !dbg !64
  %382 = fmul float %374, %374, !dbg !65
  %383 = fmul float %354, %382, !dbg !66
  %384 = fmul float %378, %383, !dbg !67
  %385 = fadd float %381, %384, !dbg !68
  %386 = icmp eq i32 %96, 0, !dbg !69
  %387 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !69
  %388 = bitcast float %380 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %387, <1 x i32> %388, i1 %386) #5, !dbg !69
  %389 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %237, !dbg !69
  %390 = bitcast float %385 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 %386) #5, !dbg !69
  %391 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %237, !dbg !69
  %392 = bitcast float %375 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %392, i1 %386) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %393 = icmp slt i32 %13, 8, !dbg !69
  %394 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !69
  %395 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %394, i1 %393) #5, !dbg !69
  %396 = bitcast i32 %395 to float, !dbg !69
  %397 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %13, !dbg !69
  %398 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %397, i1 %393) #5, !dbg !69
  %399 = bitcast i32 %398 to float, !dbg !69
  %400 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %13, !dbg !69
  %401 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %400, i1 %393) #5, !dbg !69
  %402 = bitcast i32 %401 to float, !dbg !69
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 4, i32 31), !dbg !69
  %404 = bitcast i32 %403 to float, !dbg !69
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 4, i32 31), !dbg !69
  %406 = bitcast i32 %405 to float, !dbg !69
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 4, i32 31), !dbg !69
  %408 = bitcast i32 %407 to float, !dbg !69
  %409 = fsub float %404, %396, !dbg !55
  %410 = fadd float %402, %408, !dbg !58
  %411 = fcmp oeq float %410, 0.000000e+00, !dbg !59
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %408, float %410) #5, !dbg !60
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !61
  %414 = fmul float %409, %413, !dbg !62
  %415 = fadd float %414, %396, !dbg !63
  %416 = fadd float %399, %406, !dbg !64
  %417 = fmul float %409, %409, !dbg !65
  %418 = fmul float %417, %402, !dbg !66
  %419 = fmul float %418, %413, !dbg !67
  %420 = fadd float %416, %419, !dbg !68
  %421 = bitcast float %415 to i32, !dbg !69
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 2, i32 31), !dbg !69
  %423 = bitcast i32 %422 to float, !dbg !69
  %424 = bitcast float %420 to i32, !dbg !69
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 2, i32 31), !dbg !69
  %426 = bitcast i32 %425 to float, !dbg !69
  %427 = bitcast float %410 to i32, !dbg !69
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %427, i32 2, i32 31), !dbg !69
  %429 = bitcast i32 %428 to float, !dbg !69
  %430 = fsub float %423, %415, !dbg !55
  %431 = fadd float %410, %429, !dbg !58
  %432 = fcmp oeq float %431, 0.000000e+00, !dbg !59
  %433 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %429, float %431) #5, !dbg !60
  %434 = select i1 %432, float 0.000000e+00, float %433, !dbg !61
  %435 = fmul float %430, %434, !dbg !62
  %436 = fadd float %415, %435, !dbg !63
  %437 = fadd float %420, %426, !dbg !64
  %438 = fmul float %430, %430, !dbg !65
  %439 = fmul float %410, %438, !dbg !66
  %440 = fmul float %434, %439, !dbg !67
  %441 = fadd float %437, %440, !dbg !68
  %442 = bitcast float %436 to i32, !dbg !69
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 1, i32 31), !dbg !69
  %444 = bitcast i32 %443 to float, !dbg !69
  %445 = bitcast float %441 to i32, !dbg !69
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 1, i32 31), !dbg !69
  %447 = bitcast i32 %446 to float, !dbg !69
  %448 = bitcast float %431 to i32, !dbg !69
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 1, i32 31), !dbg !69
  %450 = bitcast i32 %449 to float, !dbg !69
  %451 = fsub float %444, %436, !dbg !55
  %452 = fadd float %431, %450, !dbg !58
  %453 = fcmp oeq float %452, 0.000000e+00, !dbg !59
  %454 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %450, float %452) #5, !dbg !60
  %455 = select i1 %453, float 0.000000e+00, float %454, !dbg !61
  %456 = fmul float %451, %455, !dbg !62
  %457 = fadd float %436, %456, !dbg !63
  %458 = fadd float %441, %447, !dbg !64
  %459 = fmul float %451, %451, !dbg !65
  %460 = fmul float %431, %459, !dbg !66
  %461 = fmul float %455, %460, !dbg !67
  %462 = fadd float %458, %461, !dbg !68
  %463 = and i32 %13, 7, !dbg !69
  %464 = icmp eq i32 %463, 0, !dbg !69
  %465 = and i1 %393, %464, !dbg !69
  %466 = bitcast float %457 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %394, <1 x i32> %466, i1 %465) #5, !dbg !69
  %467 = bitcast float %462 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %397, <1 x i32> %467, i1 %465) #5, !dbg !69
  %468 = bitcast float %452 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %468, i1 %465) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %469 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !69
  %470 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !69
  %471 = getelementptr float, ptr addrspace(1) %7, i64 %57, !dbg !70
  %472 = bitcast float %469 to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %472, ptr addrspace(1) %471, i1 %61) #5, !dbg !71
  %473 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %470, float 4.096000e+03) #5, !dbg !72
  %474 = fadd float %473, 0x3EE4F8B580000000, !dbg !73
  %475 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %.not.i15 = icmp eq i32 %478, 0, !dbg !74
  br i1 %.not.i15, label %481, label %479, !dbg !74

479:                                              ; preds = %.peel.next
  %480 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %474), !dbg !74
  br label %__nv_rsqrtf.exit17, !dbg !74

481:                                              ; preds = %.peel.next
  %482 = tail call float @llvm.nvvm.rsqrt.approx.f(float %474), !dbg !74
  br label %__nv_rsqrtf.exit17, !dbg !74

__nv_rsqrtf.exit17:                               ; preds = %479, %481
  %.0.i16 = phi float [ %480, %479 ], [ %482, %481 ], !dbg !74
  %483 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !75
  %484 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %483, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !76
  %485 = extractvalue { i32, i32, i32, i32 } %484, 0, !dbg !76
  %486 = extractvalue { i32, i32, i32, i32 } %484, 1, !dbg !76
  %487 = extractvalue { i32, i32, i32, i32 } %484, 2, !dbg !76
  %488 = extractvalue { i32, i32, i32, i32 } %484, 3, !dbg !76
  %489 = bitcast i32 %485 to float, !dbg !76
  %490 = bitcast i32 %486 to float, !dbg !76
  %491 = bitcast i32 %487 to float, !dbg !76
  %492 = bitcast i32 %488 to float, !dbg !76
  %493 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !77
  %494 = extractvalue { i32, i32, i32, i32 } %493, 0, !dbg !77
  %495 = extractvalue { i32, i32, i32, i32 } %493, 1, !dbg !77
  %496 = extractvalue { i32, i32, i32, i32 } %493, 2, !dbg !77
  %497 = extractvalue { i32, i32, i32, i32 } %493, 3, !dbg !77
  %498 = bitcast i32 %494 to float, !dbg !77
  %499 = bitcast i32 %495 to float, !dbg !77
  %500 = bitcast i32 %496 to float, !dbg !77
  %501 = bitcast i32 %497 to float, !dbg !77
  %502 = fsub float %498, %469, !dbg !78
  %503 = fsub float %499, %469, !dbg !78
  %504 = fsub float %500, %469, !dbg !78
  %505 = fsub float %501, %469, !dbg !78
  %506 = fmul float %.0.i16, %502, !dbg !79
  %507 = fmul float %.0.i16, %503, !dbg !79
  %508 = fmul float %.0.i16, %504, !dbg !79
  %509 = fmul float %.0.i16, %505, !dbg !79
  %510 = fmul float %236, %506, !dbg !80
  %511 = fmul float %236, %507, !dbg !80
  %512 = fmul float %236, %508, !dbg !80
  %513 = fmul float %236, %509, !dbg !80
  %514 = fadd float %235, %510, !dbg !81
  %515 = fadd float %235, %511, !dbg !81
  %516 = fadd float %235, %512, !dbg !81
  %517 = fadd float %235, %513, !dbg !81
  %518 = fadd float %514, %489, !dbg !82
  %519 = fadd float %515, %490, !dbg !82
  %520 = fadd float %516, %491, !dbg !82
  %521 = fadd float %517, %492, !dbg !82
  %522 = bitcast float %518 to i32, !dbg !83
  %523 = bitcast float %519 to i32, !dbg !83
  %524 = bitcast float %520 to i32, !dbg !83
  %525 = bitcast float %521 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %522, i32 %523, i32 %524, i32 %525, ptr addrspace(1) %483, i1 %12) #5, !dbg !83
  %526 = or disjoint i32 %71, 1024, !dbg !84
  %527 = sext i32 %526 to i64, !dbg !75
  %528 = getelementptr float, ptr addrspace(1) %1, i64 %527, !dbg !75
  %529 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %528, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !76
  %530 = extractvalue { i32, i32, i32, i32 } %529, 0, !dbg !76
  %531 = extractvalue { i32, i32, i32, i32 } %529, 1, !dbg !76
  %532 = extractvalue { i32, i32, i32, i32 } %529, 2, !dbg !76
  %533 = extractvalue { i32, i32, i32, i32 } %529, 3, !dbg !76
  %534 = bitcast i32 %530 to float, !dbg !76
  %535 = bitcast i32 %531 to float, !dbg !76
  %536 = bitcast i32 %532 to float, !dbg !76
  %537 = bitcast i32 %533 to float, !dbg !76
  %538 = getelementptr float, ptr addrspace(1) %0, i64 %527, !dbg !85
  %539 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %538, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !77
  %540 = extractvalue { i32, i32, i32, i32 } %539, 0, !dbg !77
  %541 = extractvalue { i32, i32, i32, i32 } %539, 1, !dbg !77
  %542 = extractvalue { i32, i32, i32, i32 } %539, 2, !dbg !77
  %543 = extractvalue { i32, i32, i32, i32 } %539, 3, !dbg !77
  %544 = bitcast i32 %540 to float, !dbg !77
  %545 = bitcast i32 %541 to float, !dbg !77
  %546 = bitcast i32 %542 to float, !dbg !77
  %547 = bitcast i32 %543 to float, !dbg !77
  %548 = fsub float %544, %469, !dbg !78
  %549 = fsub float %545, %469, !dbg !78
  %550 = fsub float %546, %469, !dbg !78
  %551 = fsub float %547, %469, !dbg !78
  %552 = fmul float %.0.i16, %548, !dbg !79
  %553 = fmul float %.0.i16, %549, !dbg !79
  %554 = fmul float %.0.i16, %550, !dbg !79
  %555 = fmul float %.0.i16, %551, !dbg !79
  %556 = fmul float %236, %552, !dbg !80
  %557 = fmul float %236, %553, !dbg !80
  %558 = fmul float %236, %554, !dbg !80
  %559 = fmul float %236, %555, !dbg !80
  %560 = fadd float %235, %556, !dbg !81
  %561 = fadd float %235, %557, !dbg !81
  %562 = fadd float %235, %558, !dbg !81
  %563 = fadd float %235, %559, !dbg !81
  %564 = fadd float %560, %534, !dbg !82
  %565 = fadd float %561, %535, !dbg !82
  %566 = fadd float %562, %536, !dbg !82
  %567 = fadd float %563, %537, !dbg !82
  %568 = bitcast float %564 to i32, !dbg !83
  %569 = bitcast float %565 to i32, !dbg !83
  %570 = bitcast float %566 to i32, !dbg !83
  %571 = bitcast float %567 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %568, i32 %569, i32 %570, i32 %571, ptr addrspace(1) %528, i1 %12) #5, !dbg !83
  %572 = or disjoint i32 %71, 2048, !dbg !84
  %573 = sext i32 %572 to i64, !dbg !75
  %574 = getelementptr float, ptr addrspace(1) %1, i64 %573, !dbg !75
  %575 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %574, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !76
  %576 = extractvalue { i32, i32, i32, i32 } %575, 0, !dbg !76
  %577 = extractvalue { i32, i32, i32, i32 } %575, 1, !dbg !76
  %578 = extractvalue { i32, i32, i32, i32 } %575, 2, !dbg !76
  %579 = extractvalue { i32, i32, i32, i32 } %575, 3, !dbg !76
  %580 = bitcast i32 %576 to float, !dbg !76
  %581 = bitcast i32 %577 to float, !dbg !76
  %582 = bitcast i32 %578 to float, !dbg !76
  %583 = bitcast i32 %579 to float, !dbg !76
  %584 = getelementptr float, ptr addrspace(1) %0, i64 %573, !dbg !85
  %585 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %584, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !77
  %586 = extractvalue { i32, i32, i32, i32 } %585, 0, !dbg !77
  %587 = extractvalue { i32, i32, i32, i32 } %585, 1, !dbg !77
  %588 = extractvalue { i32, i32, i32, i32 } %585, 2, !dbg !77
  %589 = extractvalue { i32, i32, i32, i32 } %585, 3, !dbg !77
  %590 = bitcast i32 %586 to float, !dbg !77
  %591 = bitcast i32 %587 to float, !dbg !77
  %592 = bitcast i32 %588 to float, !dbg !77
  %593 = bitcast i32 %589 to float, !dbg !77
  %594 = fsub float %590, %469, !dbg !78
  %595 = fsub float %591, %469, !dbg !78
  %596 = fsub float %592, %469, !dbg !78
  %597 = fsub float %593, %469, !dbg !78
  %598 = fmul float %.0.i16, %594, !dbg !79
  %599 = fmul float %.0.i16, %595, !dbg !79
  %600 = fmul float %.0.i16, %596, !dbg !79
  %601 = fmul float %.0.i16, %597, !dbg !79
  %602 = fmul float %236, %598, !dbg !80
  %603 = fmul float %236, %599, !dbg !80
  %604 = fmul float %236, %600, !dbg !80
  %605 = fmul float %236, %601, !dbg !80
  %606 = fadd float %235, %602, !dbg !81
  %607 = fadd float %235, %603, !dbg !81
  %608 = fadd float %235, %604, !dbg !81
  %609 = fadd float %235, %605, !dbg !81
  %610 = fadd float %606, %580, !dbg !82
  %611 = fadd float %607, %581, !dbg !82
  %612 = fadd float %608, %582, !dbg !82
  %613 = fadd float %609, %583, !dbg !82
  %614 = bitcast float %610 to i32, !dbg !83
  %615 = bitcast float %611 to i32, !dbg !83
  %616 = bitcast float %612 to i32, !dbg !83
  %617 = bitcast float %613 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %614, i32 %615, i32 %616, i32 %617, ptr addrspace(1) %574, i1 %12) #5, !dbg !83
  %618 = or disjoint i32 %71, 3072, !dbg !84
  %619 = sext i32 %618 to i64, !dbg !75
  %620 = getelementptr float, ptr addrspace(1) %1, i64 %619, !dbg !75
  %621 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %620, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !76
  %622 = extractvalue { i32, i32, i32, i32 } %621, 0, !dbg !76
  %623 = extractvalue { i32, i32, i32, i32 } %621, 1, !dbg !76
  %624 = extractvalue { i32, i32, i32, i32 } %621, 2, !dbg !76
  %625 = extractvalue { i32, i32, i32, i32 } %621, 3, !dbg !76
  %626 = bitcast i32 %622 to float, !dbg !76
  %627 = bitcast i32 %623 to float, !dbg !76
  %628 = bitcast i32 %624 to float, !dbg !76
  %629 = bitcast i32 %625 to float, !dbg !76
  %630 = getelementptr float, ptr addrspace(1) %0, i64 %619, !dbg !85
  %631 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %630, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #5, !dbg !77
  %632 = extractvalue { i32, i32, i32, i32 } %631, 0, !dbg !77
  %633 = extractvalue { i32, i32, i32, i32 } %631, 1, !dbg !77
  %634 = extractvalue { i32, i32, i32, i32 } %631, 2, !dbg !77
  %635 = extractvalue { i32, i32, i32, i32 } %631, 3, !dbg !77
  %636 = bitcast i32 %632 to float, !dbg !77
  %637 = bitcast i32 %633 to float, !dbg !77
  %638 = bitcast i32 %634 to float, !dbg !77
  %639 = bitcast i32 %635 to float, !dbg !77
  %640 = fsub float %636, %469, !dbg !78
  %641 = fsub float %637, %469, !dbg !78
  %642 = fsub float %638, %469, !dbg !78
  %643 = fsub float %639, %469, !dbg !78
  %644 = fmul float %.0.i16, %640, !dbg !79
  %645 = fmul float %.0.i16, %641, !dbg !79
  %646 = fmul float %.0.i16, %642, !dbg !79
  %647 = fmul float %.0.i16, %643, !dbg !79
  %648 = fmul float %236, %644, !dbg !80
  %649 = fmul float %236, %645, !dbg !80
  %650 = fmul float %236, %646, !dbg !80
  %651 = fmul float %236, %647, !dbg !80
  %652 = fadd float %235, %648, !dbg !81
  %653 = fadd float %235, %649, !dbg !81
  %654 = fadd float %235, %650, !dbg !81
  %655 = fadd float %235, %651, !dbg !81
  %656 = fadd float %652, %626, !dbg !82
  %657 = fadd float %653, %627, !dbg !82
  %658 = fadd float %654, %628, !dbg !82
  %659 = fadd float %655, %629, !dbg !82
  %660 = bitcast float %656 to i32, !dbg !83
  %661 = bitcast float %657 to i32, !dbg !83
  %662 = bitcast float %658 to i32, !dbg !83
  %663 = bitcast float %659 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %660, i32 %661, i32 %662, i32 %663, ptr addrspace(1) %620, i1 %12) #5, !dbg !83
  %664 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !86
  %.not.i18 = icmp eq i32 %664, 0, !dbg !86
  br i1 %.not.i18, label %667, label %665, !dbg !86

665:                                              ; preds = %__nv_rsqrtf.exit17
  %666 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %474), !dbg !86
  br label %__nv_rsqrtf.exit20, !dbg !86

667:                                              ; preds = %__nv_rsqrtf.exit17
  %668 = tail call float @llvm.nvvm.rsqrt.approx.f(float %474), !dbg !86
  br label %__nv_rsqrtf.exit20, !dbg !86

__nv_rsqrtf.exit20:                               ; preds = %665, %667
  %.0.i19 = phi float [ %666, %665 ], [ %668, %667 ], !dbg !86
  %669 = getelementptr float, ptr addrspace(1) %8, i64 %57, !dbg !87
  %670 = bitcast float %.0.i19 to i32, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %670, ptr addrspace(1) %669, i1 %61) #5, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmxsfmbjnj2bvucbj42u5yvgabviphhtfabremlzfjyxnckmyhhn.py", directory: "inductor_cache/mx")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_functional_add_clone_convolution_53, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_functional_add_clone_convolution_53, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_functional_add_clone_convolution_53", linkageName: "triton_red_fused__native_batch_norm_legit_functional_add_clone_convolution_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 29, column: 38, scope: !7)
!16 = !DILocation(line: 29, column: 49, scope: !7)
!17 = !DILocation(line: 29, column: 43, scope: !7)
!18 = !DILocation(line: 29, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 54, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 43, scope: !7)
!22 = !DILocation(line: 31, column: 38, scope: !7)
!23 = !DILocation(line: 31, column: 43, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 43, scope: !7)
!28 = !DILocation(line: 33, column: 18, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 25, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 35, scope: !7)
!36 = !DILocation(line: 45, column: 48, scope: !7)
!37 = !DILocation(line: 45, column: 38, scope: !7)
!38 = !DILocation(line: 45, column: 53, scope: !7)
!39 = !DILocation(line: 46, column: 22, scope: !7)
!40 = !DILocation(line: 54, column: 53, scope: !7)
!41 = !DILocation(line: 51, column: 62, scope: !7)
!42 = !DILocation(line: 53, column: 66, scope: !7)
!43 = !DILocation(line: 45, column: 43, scope: !7)
!44 = !DILocation(line: 184, column: 30, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 54, scope: !7)
!48 = !DILocation(line: 183, column: 24, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 185, column: 34, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 185, column: 26, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 186, column: 39, scope: !45, inlinedAt: !47)
!52 = !DILocation(line: 186, column: 31, scope: !45, inlinedAt: !47)
!53 = !DILocation(line: 186, column: 22, scope: !45, inlinedAt: !47)
!54 = !DILocation(line: 52, column: 58, scope: !7)
!55 = !DILocation(line: 192, column: 21, scope: !56, inlinedAt: !57)
!56 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!57 = !DILocation(line: 56, column: 44, scope: !7)
!58 = !DILocation(line: 193, column: 28, scope: !56, inlinedAt: !57)
!59 = !DILocation(line: 194, column: 39, scope: !56, inlinedAt: !57)
!60 = !DILocation(line: 194, column: 60, scope: !56, inlinedAt: !57)
!61 = !DILocation(line: 194, column: 49, scope: !56, inlinedAt: !57)
!62 = !DILocation(line: 196, column: 25, scope: !56, inlinedAt: !57)
!63 = !DILocation(line: 196, column: 17, scope: !56, inlinedAt: !57)
!64 = !DILocation(line: 197, column: 15, scope: !56, inlinedAt: !57)
!65 = !DILocation(line: 197, column: 30, scope: !56, inlinedAt: !57)
!66 = !DILocation(line: 197, column: 38, scope: !56, inlinedAt: !57)
!67 = !DILocation(line: 197, column: 49, scope: !56, inlinedAt: !57)
!68 = !DILocation(line: 197, column: 22, scope: !56, inlinedAt: !57)
!69 = !DILocation(line: 204, column: 46, scope: !45, inlinedAt: !57)
!70 = !DILocation(line: 61, column: 25, scope: !7)
!71 = !DILocation(line: 61, column: 37, scope: !7)
!72 = !DILocation(line: 70, column: 24, scope: !7)
!73 = !DILocation(line: 72, column: 24, scope: !7)
!74 = !DILocation(line: 73, column: 32, scope: !7)
!75 = !DILocation(line: 66, column: 39, scope: !7)
!76 = !DILocation(line: 66, column: 54, scope: !7)
!77 = !DILocation(line: 67, column: 54, scope: !7)
!78 = !DILocation(line: 68, column: 24, scope: !7)
!79 = !DILocation(line: 74, column: 24, scope: !7)
!80 = !DILocation(line: 75, column: 24, scope: !7)
!81 = !DILocation(line: 76, column: 24, scope: !7)
!82 = !DILocation(line: 77, column: 24, scope: !7)
!83 = !DILocation(line: 78, column: 54, scope: !7)
!84 = !DILocation(line: 66, column: 44, scope: !7)
!85 = !DILocation(line: 67, column: 39, scope: !7)
!86 = !DILocation(line: 83, column: 28, scope: !7)
!87 = !DILocation(line: 84, column: 25, scope: !7)
!88 = !DILocation(line: 84, column: 37, scope: !7)
!89 = !DILocation(line: 84, column: 4, scope: !7)
