; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = sdiv i32 %14, 64, !dbg !14
  %17 = sdiv i32 %15, 64, !dbg !14
  %18 = srem i32 %16, 512, !dbg !15
  %19 = srem i32 %17, 512, !dbg !15
  %20 = sext i32 %14 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = sext i32 %15 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %26 = sext i32 %18 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = sext i32 %19 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %51 = bitcast i32 %50 to float, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %53 = bitcast i32 %52 to float, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %59 = bitcast i32 %58 to float, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %61 = bitcast i32 %60 to float, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %63 = bitcast i32 %62 to float, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %65 = bitcast i32 %64 to float, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %86 = fadd float %51, 0x3EE4F8B580000000, !dbg !28
  %87 = fadd float %53, 0x3EE4F8B580000000, !dbg !28
  %88 = fadd float %55, 0x3EE4F8B580000000, !dbg !28
  %89 = fadd float %57, 0x3EE4F8B580000000, !dbg !28
  %90 = fadd float %59, 0x3EE4F8B580000000, !dbg !28
  %91 = fadd float %61, 0x3EE4F8B580000000, !dbg !28
  %92 = fadd float %63, 0x3EE4F8B580000000, !dbg !28
  %93 = fadd float %65, 0x3EE4F8B580000000, !dbg !28
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %94, 0, !dbg !29
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %95, 0, !dbg !29
  br i1 %.not.i, label %101, label %96, !dbg !29

96:                                               ; preds = %8
  br i1 %.not1.i, label %99, label %97, !dbg !29

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

101:                                              ; preds = %8
  br i1 %.not1.i, label %104, label %102, !dbg !29

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %97, %99, %102, %104
  %.0.i = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !29
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i8 = icmp eq i32 %106, 0, !dbg !29
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i11 = icmp eq i32 %107, 0, !dbg !29
  br i1 %.not.i8, label %113, label %108, !dbg !29

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %111, label %109, !dbg !29

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

113:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %116, label %114, !dbg !29

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

__nv_sqrtf.exit12:                                ; preds = %109, %111, %114, %116
  %.0.i10 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !29
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i13 = icmp eq i32 %118, 0, !dbg !29
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i16 = icmp eq i32 %119, 0, !dbg !29
  br i1 %.not.i13, label %125, label %120, !dbg !29

120:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %123, label %121, !dbg !29

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

125:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %128, label %126, !dbg !29

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

__nv_sqrtf.exit17:                                ; preds = %121, %123, %126, %128
  %.0.i15 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !29
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i18 = icmp eq i32 %130, 0, !dbg !29
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i21 = icmp eq i32 %131, 0, !dbg !29
  br i1 %.not.i18, label %137, label %132, !dbg !29

132:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %135, label %133, !dbg !29

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

137:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %140, label %138, !dbg !29

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

__nv_sqrtf.exit22:                                ; preds = %133, %135, %138, %140
  %.0.i20 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !29
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i23 = icmp eq i32 %142, 0, !dbg !29
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i26 = icmp eq i32 %143, 0, !dbg !29
  br i1 %.not.i23, label %149, label %144, !dbg !29

144:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %147, label %145, !dbg !29

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

149:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %152, label %150, !dbg !29

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

__nv_sqrtf.exit27:                                ; preds = %145, %147, %150, %152
  %.0.i25 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !29
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i28 = icmp eq i32 %154, 0, !dbg !29
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i31 = icmp eq i32 %155, 0, !dbg !29
  br i1 %.not.i28, label %161, label %156, !dbg !29

156:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %159, label %157, !dbg !29

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

161:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %164, label %162, !dbg !29

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

__nv_sqrtf.exit32:                                ; preds = %157, %159, %162, %164
  %.0.i30 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !29
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i33 = icmp eq i32 %166, 0, !dbg !29
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i36 = icmp eq i32 %167, 0, !dbg !29
  br i1 %.not.i33, label %173, label %168, !dbg !29

168:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %171, label %169, !dbg !29

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

173:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %176, label %174, !dbg !29

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

__nv_sqrtf.exit37:                                ; preds = %169, %171, %174, %176
  %.0.i35 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !29
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i38 = icmp eq i32 %178, 0, !dbg !29
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i41 = icmp eq i32 %179, 0, !dbg !29
  br i1 %.not.i38, label %185, label %180, !dbg !29

180:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %183, label %181, !dbg !29

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

185:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %188, label %186, !dbg !29

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

__nv_sqrtf.exit42:                                ; preds = %181, %183, %186, %188
  %.0.i40 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !29
  %190 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %191 = insertelement <8 x i32> poison, i32 %37, i64 0, !dbg !19
  %192 = insertelement <8 x i32> %191, i32 %36, i64 1, !dbg !19
  %193 = insertelement <8 x i32> %192, i32 %35, i64 2, !dbg !19
  %194 = insertelement <8 x i32> %193, i32 %34, i64 3, !dbg !19
  %195 = insertelement <8 x i32> %194, i32 %33, i64 4, !dbg !19
  %196 = insertelement <8 x i32> %195, i32 %32, i64 5, !dbg !19
  %197 = insertelement <8 x i32> %196, i32 %31, i64 6, !dbg !19
  %198 = insertelement <8 x i32> %197, i32 %30, i64 7, !dbg !19
  %199 = bitcast <8 x i32> %198 to <8 x float>, !dbg !19
  %200 = insertelement <8 x i32> poison, i32 %47, i64 0, !dbg !21
  %201 = insertelement <8 x i32> %200, i32 %46, i64 1, !dbg !21
  %202 = insertelement <8 x i32> %201, i32 %45, i64 2, !dbg !21
  %203 = insertelement <8 x i32> %202, i32 %44, i64 3, !dbg !21
  %204 = insertelement <8 x i32> %203, i32 %43, i64 4, !dbg !21
  %205 = insertelement <8 x i32> %204, i32 %42, i64 5, !dbg !21
  %206 = insertelement <8 x i32> %205, i32 %41, i64 6, !dbg !21
  %207 = insertelement <8 x i32> %206, i32 %40, i64 7, !dbg !21
  %208 = bitcast <8 x i32> %207 to <8 x float>, !dbg !21
  %209 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %210 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %211 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %212 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %213 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %214 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %215 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %216 = insertelement <8 x i32> poison, i32 %85, i64 0, !dbg !27
  %217 = insertelement <8 x i32> %216, i32 %84, i64 1, !dbg !27
  %218 = insertelement <8 x i32> %217, i32 %83, i64 2, !dbg !27
  %219 = insertelement <8 x i32> %218, i32 %82, i64 3, !dbg !27
  %220 = insertelement <8 x i32> %219, i32 %81, i64 4, !dbg !27
  %221 = insertelement <8 x i32> %220, i32 %80, i64 5, !dbg !27
  %222 = insertelement <8 x i32> %221, i32 %79, i64 6, !dbg !27
  %223 = insertelement <8 x i32> %222, i32 %78, i64 7, !dbg !27
  %224 = bitcast <8 x i32> %223 to <8 x float>, !dbg !27
  %225 = insertelement <8 x i32> poison, i32 %75, i64 0, !dbg !25
  %226 = insertelement <8 x i32> %225, i32 %74, i64 1, !dbg !25
  %227 = insertelement <8 x i32> %226, i32 %73, i64 2, !dbg !25
  %228 = insertelement <8 x i32> %227, i32 %72, i64 3, !dbg !25
  %229 = insertelement <8 x i32> %228, i32 %71, i64 4, !dbg !25
  %230 = insertelement <8 x i32> %229, i32 %70, i64 5, !dbg !25
  %231 = insertelement <8 x i32> %230, i32 %69, i64 6, !dbg !25
  %232 = insertelement <8 x i32> %231, i32 %68, i64 7, !dbg !25
  %233 = bitcast <8 x i32> %232 to <8 x float>, !dbg !25
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !30
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !30
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !30
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !30
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !30
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !30
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !30
  %242 = insertelement <8 x i32> poison, i32 %190, i64 0, !dbg !17
  %243 = insertelement <8 x i32> %242, i32 %209, i64 1, !dbg !17
  %244 = insertelement <8 x i32> %243, i32 %210, i64 2, !dbg !17
  %245 = insertelement <8 x i32> %244, i32 %211, i64 3, !dbg !17
  %246 = insertelement <8 x i32> %245, i32 %212, i64 4, !dbg !17
  %247 = insertelement <8 x i32> %246, i32 %213, i64 5, !dbg !17
  %248 = insertelement <8 x i32> %247, i32 %214, i64 6, !dbg !17
  %249 = insertelement <8 x i32> %248, i32 %215, i64 7, !dbg !17
  %250 = bitcast <8 x i32> %249 to <8 x float>, !dbg !17
  %251 = fadd <8 x float> %250, %199, !dbg !31
  %252 = fsub <8 x float> %251, %208, !dbg !32
  %253 = insertelement <8 x float> poison, float %241, i64 0, !dbg !33
  %254 = insertelement <8 x float> %253, float %240, i64 1, !dbg !33
  %255 = insertelement <8 x float> %254, float %239, i64 2, !dbg !33
  %256 = insertelement <8 x float> %255, float %238, i64 3, !dbg !33
  %257 = insertelement <8 x float> %256, float %237, i64 4, !dbg !33
  %258 = insertelement <8 x float> %257, float %236, i64 5, !dbg !33
  %259 = insertelement <8 x float> %258, float %235, i64 6, !dbg !33
  %260 = insertelement <8 x float> %259, float %234, i64 7, !dbg !33
  %261 = fmul <8 x float> %252, %260, !dbg !33
  %262 = fmul <8 x float> %261, %233, !dbg !34
  %263 = fadd <8 x float> %262, %224, !dbg !35
  %264 = fcmp ole <8 x float> %263, zeroinitializer, !dbg !36
  %265 = select <8 x i1> %264, <8 x float> zeroinitializer, <8 x float> %263, !dbg !36
  %266 = fcmp olt <8 x float> %265, splat (float 6.000000e+00), !dbg !40
  %267 = extractelement <8 x float> %265, i64 7, !dbg !42
  %268 = fcmp uno float %267, 0.000000e+00, !dbg !43
  %269 = extractelement <8 x float> %265, i64 6, !dbg !42
  %270 = fcmp uno float %269, 0.000000e+00, !dbg !43
  %271 = extractelement <8 x float> %265, i64 5, !dbg !42
  %272 = fcmp uno float %271, 0.000000e+00, !dbg !43
  %273 = extractelement <8 x float> %265, i64 4, !dbg !42
  %274 = fcmp uno float %273, 0.000000e+00, !dbg !43
  %275 = extractelement <8 x float> %265, i64 3, !dbg !42
  %276 = fcmp uno float %275, 0.000000e+00, !dbg !43
  %277 = extractelement <8 x float> %265, i64 2, !dbg !42
  %278 = fcmp uno float %277, 0.000000e+00, !dbg !43
  %279 = extractelement <8 x float> %265, i64 1, !dbg !42
  %280 = fcmp uno float %279, 0.000000e+00, !dbg !43
  %281 = extractelement <8 x float> %265, i64 0, !dbg !42
  %282 = fcmp uno float %281, 0.000000e+00, !dbg !43
  %283 = extractelement <8 x i1> %266, i64 7, !dbg !44
  %284 = or i1 %283, %268, !dbg !44
  %285 = extractelement <8 x i1> %266, i64 6, !dbg !44
  %286 = or i1 %285, %270, !dbg !44
  %287 = extractelement <8 x i1> %266, i64 5, !dbg !44
  %288 = or i1 %287, %272, !dbg !44
  %289 = extractelement <8 x i1> %266, i64 4, !dbg !44
  %290 = or i1 %289, %274, !dbg !44
  %291 = extractelement <8 x i1> %266, i64 3, !dbg !44
  %292 = or i1 %291, %276, !dbg !44
  %293 = extractelement <8 x i1> %266, i64 2, !dbg !44
  %294 = or i1 %293, %278, !dbg !44
  %295 = extractelement <8 x i1> %266, i64 1, !dbg !44
  %296 = or i1 %295, %280, !dbg !44
  %297 = extractelement <8 x i1> %266, i64 0, !dbg !44
  %298 = or i1 %297, %282, !dbg !44
  %bc = bitcast <8 x float> %251 to <8 x i32>, !dbg !45
  %299 = extractelement <8 x i32> %bc, i64 7, !dbg !45
  %bc43 = bitcast <8 x float> %251 to <8 x i32>, !dbg !45
  %300 = extractelement <8 x i32> %bc43, i64 6, !dbg !45
  %bc44 = bitcast <8 x float> %251 to <8 x i32>, !dbg !45
  %301 = extractelement <8 x i32> %bc44, i64 5, !dbg !45
  %bc45 = bitcast <8 x float> %251 to <8 x i32>, !dbg !45
  %302 = extractelement <8 x i32> %bc45, i64 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %299, i32 %300, i32 %301, i32 %302, ptr addrspace(1) %21, i1 true) #3, !dbg !45
  %bc46 = bitcast <8 x float> %251 to <8 x i32>, !dbg !45
  %303 = extractelement <8 x i32> %bc46, i64 3, !dbg !45
  %bc47 = bitcast <8 x float> %251 to <8 x i32>, !dbg !45
  %304 = extractelement <8 x i32> %bc47, i64 2, !dbg !45
  %bc48 = bitcast <8 x float> %251 to <8 x i32>, !dbg !45
  %305 = extractelement <8 x i32> %bc48, i64 1, !dbg !45
  %bc49 = bitcast <8 x float> %251 to <8 x i32>, !dbg !45
  %306 = extractelement <8 x i32> %bc49, i64 0, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %303, i32 %304, i32 %305, i32 %306, ptr addrspace(1) %23, i1 true) #3, !dbg !45
  %307 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !46
  %308 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !46
  %309 = bitcast float %267 to i32, !dbg !42
  %310 = select i1 %284, i32 %309, i32 1086324736, !dbg !47
  %311 = bitcast float %269 to i32, !dbg !42
  %312 = select i1 %286, i32 %311, i32 1086324736, !dbg !47
  %313 = bitcast float %271 to i32, !dbg !42
  %314 = select i1 %288, i32 %313, i32 1086324736, !dbg !47
  %315 = bitcast float %273 to i32, !dbg !42
  %316 = select i1 %290, i32 %315, i32 1086324736, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %310, i32 %312, i32 %314, i32 %316, ptr addrspace(1) %307, i1 true) #3, !dbg !42
  %317 = bitcast float %275 to i32, !dbg !42
  %318 = select i1 %292, i32 %317, i32 1086324736, !dbg !47
  %319 = bitcast float %277 to i32, !dbg !42
  %320 = select i1 %294, i32 %319, i32 1086324736, !dbg !47
  %321 = bitcast float %279 to i32, !dbg !42
  %322 = select i1 %296, i32 %321, i32 1086324736, !dbg !47
  %323 = bitcast float %281 to i32, !dbg !42
  %324 = select i1 %298, i32 %323, i32 1086324736, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %318, i32 %320, i32 %322, i32 %324, ptr addrspace(1) %308, i1 true) #3, !dbg !42
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr4nczmpa7lqvzcwobjgz7u3zauvnuuffnus7ji44rigeo62k3q6.py", directory: "inductor_cache/r4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 45, column: 42, scope: !7)
!40 = !DILocation(line: 110, column: 15, scope: !37, inlinedAt: !41)
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 49, column: 37, scope: !7)
!43 = !DILocation(line: 112, column: 21, scope: !37, inlinedAt: !41)
!44 = !DILocation(line: 112, column: 16, scope: !37, inlinedAt: !41)
!45 = !DILocation(line: 48, column: 39, scope: !7)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 113, column: 29, scope: !37, inlinedAt: !41)
!48 = !DILocation(line: 49, column: 4, scope: !7)
