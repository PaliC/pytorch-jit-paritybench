; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 1016, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = sdiv i32 %15, 4096, !dbg !14
  %18 = srem i32 %17, 64, !dbg !15
  %19 = sext i32 %15 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = sext i32 %16 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #4, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #4, !dbg !17
  %25 = sext i32 %18 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %37 = bitcast i32 %36 to float, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %39 = bitcast i32 %38 to float, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %41 = bitcast i32 %40 to float, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %43 = bitcast i32 %42 to float, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %45 = bitcast i32 %44 to float, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %47 = bitcast i32 %46 to float, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %49 = bitcast i32 %48 to float, !dbg !21
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %51 = bitcast i32 %50 to float, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !26
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !27
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #4, !dbg !27
  %74 = fadd float %37, 0x3EE4F8B580000000, !dbg !28
  %75 = fadd float %39, 0x3EE4F8B580000000, !dbg !28
  %76 = fadd float %41, 0x3EE4F8B580000000, !dbg !28
  %77 = fadd float %43, 0x3EE4F8B580000000, !dbg !28
  %78 = fadd float %45, 0x3EE4F8B580000000, !dbg !28
  %79 = fadd float %47, 0x3EE4F8B580000000, !dbg !28
  %80 = fadd float %49, 0x3EE4F8B580000000, !dbg !28
  %81 = fadd float %51, 0x3EE4F8B580000000, !dbg !28
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %82, 0, !dbg !29
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i = icmp eq i32 %83, 0, !dbg !29
  br i1 %.not.i, label %89, label %84, !dbg !29

84:                                               ; preds = %9
  br i1 %.not1.i, label %87, label %85, !dbg !29

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

89:                                               ; preds = %9
  br i1 %.not1.i, label %92, label %90, !dbg !29

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !29
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i15 = icmp eq i32 %94, 0, !dbg !29
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i18 = icmp eq i32 %95, 0, !dbg !29
  br i1 %.not.i15, label %101, label %96, !dbg !29

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %99, label %97, !dbg !29

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !29
  br label %__nv_sqrtf.exit19, !dbg !29

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !29
  br label %__nv_sqrtf.exit19, !dbg !29

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %104, label %102, !dbg !29

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !29
  br label %__nv_sqrtf.exit19, !dbg !29

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !29
  br label %__nv_sqrtf.exit19, !dbg !29

__nv_sqrtf.exit19:                                ; preds = %97, %99, %102, %104
  %.0.i17 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !29
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i20 = icmp eq i32 %106, 0, !dbg !29
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i23 = icmp eq i32 %107, 0, !dbg !29
  br i1 %.not.i20, label %113, label %108, !dbg !29

108:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %111, label %109, !dbg !29

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !29
  br label %__nv_sqrtf.exit24, !dbg !29

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !29
  br label %__nv_sqrtf.exit24, !dbg !29

113:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %116, label %114, !dbg !29

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !29
  br label %__nv_sqrtf.exit24, !dbg !29

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !29
  br label %__nv_sqrtf.exit24, !dbg !29

__nv_sqrtf.exit24:                                ; preds = %109, %111, %114, %116
  %.0.i22 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !29
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i25 = icmp eq i32 %118, 0, !dbg !29
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i28 = icmp eq i32 %119, 0, !dbg !29
  br i1 %.not.i25, label %125, label %120, !dbg !29

120:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %123, label %121, !dbg !29

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !29
  br label %__nv_sqrtf.exit29, !dbg !29

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !29
  br label %__nv_sqrtf.exit29, !dbg !29

125:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %128, label %126, !dbg !29

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !29
  br label %__nv_sqrtf.exit29, !dbg !29

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !29
  br label %__nv_sqrtf.exit29, !dbg !29

__nv_sqrtf.exit29:                                ; preds = %121, %123, %126, %128
  %.0.i27 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !29
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i30 = icmp eq i32 %130, 0, !dbg !29
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i33 = icmp eq i32 %131, 0, !dbg !29
  br i1 %.not.i30, label %137, label %132, !dbg !29

132:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %135, label %133, !dbg !29

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

137:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %140, label %138, !dbg !29

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

__nv_sqrtf.exit34:                                ; preds = %133, %135, %138, %140
  %.0.i32 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !29
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i35 = icmp eq i32 %142, 0, !dbg !29
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i38 = icmp eq i32 %143, 0, !dbg !29
  br i1 %.not.i35, label %149, label %144, !dbg !29

144:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %147, label %145, !dbg !29

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

149:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %152, label %150, !dbg !29

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

__nv_sqrtf.exit39:                                ; preds = %145, %147, %150, %152
  %.0.i37 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !29
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i40 = icmp eq i32 %154, 0, !dbg !29
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i43 = icmp eq i32 %155, 0, !dbg !29
  br i1 %.not.i40, label %161, label %156, !dbg !29

156:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %159, label %157, !dbg !29

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit44, !dbg !29

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit44, !dbg !29

161:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %164, label %162, !dbg !29

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit44, !dbg !29

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit44, !dbg !29

__nv_sqrtf.exit44:                                ; preds = %157, %159, %162, %164
  %.0.i42 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !29
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i45 = icmp eq i32 %166, 0, !dbg !29
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i48 = icmp eq i32 %167, 0, !dbg !29
  br i1 %.not.i45, label %173, label %168, !dbg !29

168:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %171, label %169, !dbg !29

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !29
  br label %__nv_sqrtf.exit49, !dbg !29

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !29
  br label %__nv_sqrtf.exit49, !dbg !29

173:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %176, label %174, !dbg !29

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !29
  br label %__nv_sqrtf.exit49, !dbg !29

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !29
  br label %__nv_sqrtf.exit49, !dbg !29

__nv_sqrtf.exit49:                                ; preds = %169, %171, %174, %176
  %.0.i47 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !29
  %178 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %179 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !19
  %180 = insertelement <4 x i32> %179, i32 %32, i64 1, !dbg !19
  %181 = insertelement <4 x i32> %180, i32 %33, i64 2, !dbg !19
  %182 = insertelement <4 x i32> %181, i32 %34, i64 3, !dbg !19
  %183 = bitcast <4 x i32> %182 to <4 x float>, !dbg !19
  %184 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %185 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %186 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %187 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %188 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !19
  %189 = insertelement <4 x i32> %188, i32 %28, i64 1, !dbg !19
  %190 = insertelement <4 x i32> %189, i32 %29, i64 2, !dbg !19
  %191 = insertelement <4 x i32> %190, i32 %30, i64 3, !dbg !19
  %192 = bitcast <4 x i32> %191 to <4 x float>, !dbg !19
  %193 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %194 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %195 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %196 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !27
  %197 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !27
  %198 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !27
  %199 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !27
  %200 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !27
  %201 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !27
  %202 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !27
  %203 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !27
  %204 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !25
  %205 = insertelement <4 x i32> %204, i32 %67, i64 1, !dbg !25
  %206 = insertelement <4 x i32> %205, i32 %68, i64 2, !dbg !25
  %207 = insertelement <4 x i32> %206, i32 %69, i64 3, !dbg !25
  %208 = bitcast <4 x i32> %207 to <4 x float>, !dbg !25
  %209 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !25
  %210 = insertelement <4 x i32> %209, i32 %63, i64 1, !dbg !25
  %211 = insertelement <4 x i32> %210, i32 %64, i64 2, !dbg !25
  %212 = insertelement <4 x i32> %211, i32 %65, i64 3, !dbg !25
  %213 = bitcast <4 x i32> %212 to <4 x float>, !dbg !25
  %214 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !23
  %215 = insertelement <4 x i32> %214, i32 %58, i64 1, !dbg !23
  %216 = insertelement <4 x i32> %215, i32 %59, i64 2, !dbg !23
  %217 = insertelement <4 x i32> %216, i32 %60, i64 3, !dbg !23
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !23
  %219 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !23
  %220 = insertelement <4 x i32> %219, i32 %54, i64 1, !dbg !23
  %221 = insertelement <4 x i32> %220, i32 %55, i64 2, !dbg !23
  %222 = insertelement <4 x i32> %221, i32 %56, i64 3, !dbg !23
  %223 = bitcast <4 x i32> %222 to <4 x float>, !dbg !23
  %224 = shl i32 %12, 2, !dbg !12
  %225 = and i32 %224, 508, !dbg !12
  %226 = or disjoint i32 %225, 512, !dbg !12
  %227 = or disjoint i32 %11, %226, !dbg !13
  %228 = or disjoint i32 %11, %225, !dbg !13
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !30
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !30
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !30
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !30
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !30
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !30
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !30
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !30
  %237 = sext i32 %228 to i64, !dbg !31
  %238 = getelementptr float, ptr addrspace(1) %6, i64 %237, !dbg !31
  %239 = sext i32 %227 to i64, !dbg !31
  %240 = getelementptr float, ptr addrspace(1) %6, i64 %239, !dbg !31
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !32
  %242 = getelementptr inbounds i8, ptr addrspace(3) %241, i32 16, !dbg !32
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %225, !dbg !32
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !32
  %245 = getelementptr inbounds i8, ptr addrspace(3) %243, i32 4, !dbg !32
  %246 = getelementptr inbounds i8, ptr addrspace(3) %243, i32 8, !dbg !32
  %247 = getelementptr inbounds i8, ptr addrspace(3) %243, i32 12, !dbg !32
  %248 = getelementptr i1, ptr addrspace(1) %7, i64 %19, !dbg !33
  %249 = insertelement <4 x i32> poison, i32 %195, i64 0, !dbg !17
  %250 = insertelement <4 x i32> %249, i32 %194, i64 1, !dbg !17
  %251 = insertelement <4 x i32> %250, i32 %193, i64 2, !dbg !17
  %252 = insertelement <4 x i32> %251, i32 %187, i64 3, !dbg !17
  %253 = bitcast <4 x i32> %252 to <4 x float>, !dbg !17
  %254 = fsub <4 x float> %253, %192, !dbg !34
  %255 = insertelement <4 x i32> poison, i32 %203, i64 0, !dbg !27
  %256 = insertelement <4 x i32> %255, i32 %202, i64 1, !dbg !27
  %257 = insertelement <4 x i32> %256, i32 %201, i64 2, !dbg !27
  %258 = insertelement <4 x i32> %257, i32 %200, i64 3, !dbg !27
  %259 = bitcast <4 x i32> %258 to <4 x float>, !dbg !27
  %260 = insertelement <4 x float> poison, float %229, i64 0, !dbg !35
  %261 = insertelement <4 x float> %260, float %230, i64 1, !dbg !35
  %262 = insertelement <4 x float> %261, float %231, i64 2, !dbg !35
  %263 = insertelement <4 x float> %262, float %232, i64 3, !dbg !35
  %264 = fmul <4 x float> %254, %263, !dbg !35
  %265 = fmul <4 x float> %264, %223, !dbg !36
  %266 = fadd <4 x float> %265, %213, !dbg !37
  %267 = fadd <4 x float> %266, %259, !dbg !38
  %268 = fcmp olt <4 x float> %267, zeroinitializer, !dbg !39
  %269 = select <4 x i1> %268, <4 x float> zeroinitializer, <4 x float> %267, !dbg !43
  %270 = fcmp ole <4 x float> %269, zeroinitializer, !dbg !44
  %bc = bitcast <4 x float> %269 to <4 x i32>, !dbg !32
  %271 = extractelement <4 x i32> %bc, i64 0, !dbg !32
  %bc50 = bitcast <4 x float> %269 to <4 x i32>, !dbg !32
  %272 = extractelement <4 x i32> %bc50, i64 1, !dbg !32
  %bc51 = bitcast <4 x float> %269 to <4 x i32>, !dbg !32
  %273 = extractelement <4 x i32> %bc51, i64 2, !dbg !32
  %bc52 = bitcast <4 x float> %269 to <4 x i32>, !dbg !32
  %274 = extractelement <4 x i32> %bc52, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %241, i32 %271, i32 %272, i32 %273, i32 %274, i1 true) #4, !dbg !32
  %275 = insertelement <4 x i32> poison, i32 %186, i64 0, !dbg !17
  %276 = insertelement <4 x i32> %275, i32 %185, i64 1, !dbg !17
  %277 = insertelement <4 x i32> %276, i32 %184, i64 2, !dbg !17
  %278 = insertelement <4 x i32> %277, i32 %178, i64 3, !dbg !17
  %279 = bitcast <4 x i32> %278 to <4 x float>, !dbg !17
  %280 = fsub <4 x float> %279, %183, !dbg !34
  %281 = insertelement <4 x i32> poison, i32 %199, i64 0, !dbg !27
  %282 = insertelement <4 x i32> %281, i32 %198, i64 1, !dbg !27
  %283 = insertelement <4 x i32> %282, i32 %197, i64 2, !dbg !27
  %284 = insertelement <4 x i32> %283, i32 %196, i64 3, !dbg !27
  %285 = bitcast <4 x i32> %284 to <4 x float>, !dbg !27
  %286 = insertelement <4 x float> poison, float %233, i64 0, !dbg !35
  %287 = insertelement <4 x float> %286, float %234, i64 1, !dbg !35
  %288 = insertelement <4 x float> %287, float %235, i64 2, !dbg !35
  %289 = insertelement <4 x float> %288, float %236, i64 3, !dbg !35
  %290 = fmul <4 x float> %280, %289, !dbg !35
  %291 = fmul <4 x float> %290, %218, !dbg !36
  %292 = fadd <4 x float> %291, %208, !dbg !37
  %293 = fadd <4 x float> %292, %285, !dbg !38
  %294 = fcmp olt <4 x float> %293, zeroinitializer, !dbg !39
  %295 = select <4 x i1> %294, <4 x float> zeroinitializer, <4 x float> %293, !dbg !43
  %296 = fcmp ole <4 x float> %295, zeroinitializer, !dbg !44
  %bc53 = bitcast <4 x float> %295 to <4 x i32>, !dbg !32
  %297 = extractelement <4 x i32> %bc53, i64 0, !dbg !32
  %bc54 = bitcast <4 x float> %295 to <4 x i32>, !dbg !32
  %298 = extractelement <4 x i32> %bc54, i64 1, !dbg !32
  %bc55 = bitcast <4 x float> %295 to <4 x i32>, !dbg !32
  %299 = extractelement <4 x i32> %bc55, i64 2, !dbg !32
  %bc56 = bitcast <4 x float> %295 to <4 x i32>, !dbg !32
  %300 = extractelement <4 x i32> %bc56, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %242, i32 %297, i32 %298, i32 %299, i32 %300, i1 true) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %301 = load <4 x i32>, ptr addrspace(3) %244, align 16, !dbg !32
  %.extract = load i32, ptr addrspace(3) %243, align 16, !dbg !32
  %.extract8 = load i32, ptr addrspace(3) %245, align 4, !dbg !32
  %.extract9 = load i32, ptr addrspace(3) %246, align 8, !dbg !32
  %.extract10 = load i32, ptr addrspace(3) %247, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %238, i1 true) #4, !dbg !32
  %.extract11 = extractelement <4 x i32> %301, i64 0, !dbg !32
  %.extract12 = extractelement <4 x i32> %301, i64 1, !dbg !32
  %.extract13 = extractelement <4 x i32> %301, i64 2, !dbg !32
  %.extract14 = extractelement <4 x i32> %301, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %240, i1 true) #4, !dbg !32
  %302 = zext <4 x i1> %270 to <4 x i8>, !dbg !45
  %303 = bitcast <4 x i8> %302 to i32, !dbg !45
  %304 = zext <4 x i1> %296 to <4 x i8>, !dbg !45
  %305 = bitcast <4 x i8> %304 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %303, i32 %305, ptr addrspace(1) %248, i1 true) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuy2tixxpeklq6sdk5c3jg47kvszpaqm5ztp3fkbvxeevx6tmh3x.py", directory: "inductor_cache/uy")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 26, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 48, column: 25, scope: !7)
!32 = !DILocation(line: 48, column: 37, scope: !7)
!33 = !DILocation(line: 49, column: 25, scope: !7)
!34 = !DILocation(line: 32, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 19, scope: !7)
!36 = !DILocation(line: 41, column: 20, scope: !7)
!37 = !DILocation(line: 42, column: 20, scope: !7)
!38 = !DILocation(line: 43, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 45, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 21, scope: !7)
!45 = !DILocation(line: 49, column: 37, scope: !7)
!46 = !DILocation(line: 49, column: 4, scope: !7)
