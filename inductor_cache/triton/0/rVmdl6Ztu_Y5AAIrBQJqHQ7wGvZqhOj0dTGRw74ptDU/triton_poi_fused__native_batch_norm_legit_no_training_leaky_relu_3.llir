; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 100, !dbg !14
  %16 = sdiv i32 %14, 100, !dbg !14
  %17 = srem i32 %15, 512, !dbg !15
  %18 = srem i32 %16, 512, !dbg !15
  %19 = sext i32 %13 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !16
  %21 = sext i32 %14 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %25 = sext i32 %17 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !18
  %27 = sext i32 %18 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !21
  %40 = bitcast i32 %39 to float, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !21
  %44 = bitcast i32 %43 to float, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !21
  %46 = bitcast i32 %45 to float, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %48 = bitcast i32 %47 to float, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %50 = bitcast i32 %49 to float, !dbg !21
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %52 = bitcast i32 %51 to float, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %54 = bitcast i32 %53 to float, !dbg !21
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !22
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !23
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %65 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !24
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %75 = fadd float %40, 0x3EE4F8B580000000, !dbg !26
  %76 = fadd float %42, 0x3EE4F8B580000000, !dbg !26
  %77 = fadd float %44, 0x3EE4F8B580000000, !dbg !26
  %78 = fadd float %46, 0x3EE4F8B580000000, !dbg !26
  %79 = fadd float %48, 0x3EE4F8B580000000, !dbg !26
  %80 = fadd float %50, 0x3EE4F8B580000000, !dbg !26
  %81 = fadd float %52, 0x3EE4F8B580000000, !dbg !26
  %82 = fadd float %54, 0x3EE4F8B580000000, !dbg !26
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %83, 0, !dbg !27
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i = icmp eq i32 %84, 0, !dbg !27
  br i1 %.not.i, label %90, label %85, !dbg !27

85:                                               ; preds = %7
  br i1 %.not1.i, label %88, label %86, !dbg !27

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

90:                                               ; preds = %7
  br i1 %.not1.i, label %93, label %91, !dbg !27

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %86, %88, %91, %93
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !27
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i1 = icmp eq i32 %95, 0, !dbg !27
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i4 = icmp eq i32 %96, 0, !dbg !27
  br i1 %.not.i1, label %102, label %97, !dbg !27

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !27

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %105, label %103, !dbg !27

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %98, %100, %103, %105
  %.0.i3 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !27
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i6 = icmp eq i32 %107, 0, !dbg !27
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i9 = icmp eq i32 %108, 0, !dbg !27
  br i1 %.not.i6, label %114, label %109, !dbg !27

109:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %112, label %110, !dbg !27

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

114:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %117, label %115, !dbg !27

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %110, %112, %115, %117
  %.0.i8 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !27
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i11 = icmp eq i32 %119, 0, !dbg !27
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i14 = icmp eq i32 %120, 0, !dbg !27
  br i1 %.not.i11, label %126, label %121, !dbg !27

121:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %124, label %122, !dbg !27

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

126:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %129, label %127, !dbg !27

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %122, %124, %127, %129
  %.0.i13 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !27
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i16 = icmp eq i32 %131, 0, !dbg !27
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i19 = icmp eq i32 %132, 0, !dbg !27
  br i1 %.not.i16, label %138, label %133, !dbg !27

133:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %136, label %134, !dbg !27

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

138:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %141, label %139, !dbg !27

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

__nv_sqrtf.exit20:                                ; preds = %134, %136, %139, %141
  %.0.i18 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !27
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i21 = icmp eq i32 %143, 0, !dbg !27
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i24 = icmp eq i32 %144, 0, !dbg !27
  br i1 %.not.i21, label %150, label %145, !dbg !27

145:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %148, label %146, !dbg !27

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

150:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %153, label %151, !dbg !27

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

__nv_sqrtf.exit25:                                ; preds = %146, %148, %151, %153
  %.0.i23 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !27
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i26 = icmp eq i32 %155, 0, !dbg !27
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i29 = icmp eq i32 %156, 0, !dbg !27
  br i1 %.not.i26, label %162, label %157, !dbg !27

157:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %160, label %158, !dbg !27

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

162:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %165, label %163, !dbg !27

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

__nv_sqrtf.exit30:                                ; preds = %158, %160, %163, %165
  %.0.i28 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !27
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i31 = icmp eq i32 %167, 0, !dbg !27
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i34 = icmp eq i32 %168, 0, !dbg !27
  br i1 %.not.i31, label %174, label %169, !dbg !27

169:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %172, label %170, !dbg !27

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

174:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %177, label %175, !dbg !27

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

__nv_sqrtf.exit35:                                ; preds = %170, %172, %175, %177
  %.0.i33 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !27
  %179 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %180 = insertelement <8 x i32> poison, i32 %36, i64 0, !dbg !19
  %181 = insertelement <8 x i32> %180, i32 %35, i64 1, !dbg !19
  %182 = insertelement <8 x i32> %181, i32 %34, i64 2, !dbg !19
  %183 = insertelement <8 x i32> %182, i32 %33, i64 3, !dbg !19
  %184 = insertelement <8 x i32> %183, i32 %32, i64 4, !dbg !19
  %185 = insertelement <8 x i32> %184, i32 %31, i64 5, !dbg !19
  %186 = insertelement <8 x i32> %185, i32 %30, i64 6, !dbg !19
  %187 = insertelement <8 x i32> %186, i32 %29, i64 7, !dbg !19
  %188 = bitcast <8 x i32> %187 to <8 x float>, !dbg !19
  %189 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %190 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %191 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %192 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %193 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %194 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %195 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %196 = insertelement <8 x i32> poison, i32 %74, i64 0, !dbg !25
  %197 = insertelement <8 x i32> %196, i32 %73, i64 1, !dbg !25
  %198 = insertelement <8 x i32> %197, i32 %72, i64 2, !dbg !25
  %199 = insertelement <8 x i32> %198, i32 %71, i64 3, !dbg !25
  %200 = insertelement <8 x i32> %199, i32 %70, i64 4, !dbg !25
  %201 = insertelement <8 x i32> %200, i32 %69, i64 5, !dbg !25
  %202 = insertelement <8 x i32> %201, i32 %68, i64 6, !dbg !25
  %203 = insertelement <8 x i32> %202, i32 %67, i64 7, !dbg !25
  %204 = bitcast <8 x i32> %203 to <8 x float>, !dbg !25
  %205 = insertelement <8 x i32> poison, i32 %64, i64 0, !dbg !23
  %206 = insertelement <8 x i32> %205, i32 %63, i64 1, !dbg !23
  %207 = insertelement <8 x i32> %206, i32 %62, i64 2, !dbg !23
  %208 = insertelement <8 x i32> %207, i32 %61, i64 3, !dbg !23
  %209 = insertelement <8 x i32> %208, i32 %60, i64 4, !dbg !23
  %210 = insertelement <8 x i32> %209, i32 %59, i64 5, !dbg !23
  %211 = insertelement <8 x i32> %210, i32 %58, i64 6, !dbg !23
  %212 = insertelement <8 x i32> %211, i32 %57, i64 7, !dbg !23
  %213 = bitcast <8 x i32> %212 to <8 x float>, !dbg !23
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !28
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !28
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !28
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !28
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !28
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !28
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !28
  %222 = insertelement <8 x i32> poison, i32 %179, i64 0, !dbg !17
  %223 = insertelement <8 x i32> %222, i32 %189, i64 1, !dbg !17
  %224 = insertelement <8 x i32> %223, i32 %190, i64 2, !dbg !17
  %225 = insertelement <8 x i32> %224, i32 %191, i64 3, !dbg !17
  %226 = insertelement <8 x i32> %225, i32 %192, i64 4, !dbg !17
  %227 = insertelement <8 x i32> %226, i32 %193, i64 5, !dbg !17
  %228 = insertelement <8 x i32> %227, i32 %194, i64 6, !dbg !17
  %229 = insertelement <8 x i32> %228, i32 %195, i64 7, !dbg !17
  %230 = bitcast <8 x i32> %229 to <8 x float>, !dbg !17
  %231 = fsub <8 x float> %230, %188, !dbg !29
  %232 = insertelement <8 x float> poison, float %221, i64 0, !dbg !30
  %233 = insertelement <8 x float> %232, float %220, i64 1, !dbg !30
  %234 = insertelement <8 x float> %233, float %219, i64 2, !dbg !30
  %235 = insertelement <8 x float> %234, float %218, i64 3, !dbg !30
  %236 = insertelement <8 x float> %235, float %217, i64 4, !dbg !30
  %237 = insertelement <8 x float> %236, float %216, i64 5, !dbg !30
  %238 = insertelement <8 x float> %237, float %215, i64 6, !dbg !30
  %239 = insertelement <8 x float> %238, float %214, i64 7, !dbg !30
  %240 = fmul <8 x float> %231, %239, !dbg !30
  %241 = fmul <8 x float> %240, %213, !dbg !31
  %242 = fadd <8 x float> %241, %204, !dbg !32
  %243 = fcmp ogt <8 x float> %242, zeroinitializer, !dbg !33
  %244 = extractelement <8 x float> %242, i64 7, !dbg !34
  %245 = fmul float %244, 0x3FC99999A0000000, !dbg !35
  %246 = extractelement <8 x float> %242, i64 6, !dbg !34
  %247 = fmul float %246, 0x3FC99999A0000000, !dbg !35
  %248 = extractelement <8 x float> %242, i64 5, !dbg !34
  %249 = fmul float %248, 0x3FC99999A0000000, !dbg !35
  %250 = extractelement <8 x float> %242, i64 4, !dbg !34
  %251 = fmul float %250, 0x3FC99999A0000000, !dbg !35
  %252 = extractelement <8 x float> %242, i64 3, !dbg !34
  %253 = fmul float %252, 0x3FC99999A0000000, !dbg !35
  %254 = extractelement <8 x float> %242, i64 2, !dbg !34
  %255 = fmul float %254, 0x3FC99999A0000000, !dbg !35
  %256 = extractelement <8 x float> %242, i64 1, !dbg !34
  %257 = fmul float %256, 0x3FC99999A0000000, !dbg !35
  %258 = extractelement <8 x float> %242, i64 0, !dbg !34
  %259 = fmul float %258, 0x3FC99999A0000000, !dbg !35
  %260 = extractelement <8 x i1> %243, i64 7, !dbg !34
  %261 = select i1 %260, float %244, float %245, !dbg !34
  %262 = extractelement <8 x i1> %243, i64 6, !dbg !34
  %263 = select i1 %262, float %246, float %247, !dbg !34
  %264 = extractelement <8 x i1> %243, i64 5, !dbg !34
  %265 = select i1 %264, float %248, float %249, !dbg !34
  %266 = extractelement <8 x i1> %243, i64 4, !dbg !34
  %267 = select i1 %266, float %250, float %251, !dbg !34
  %268 = extractelement <8 x i1> %243, i64 3, !dbg !34
  %269 = select i1 %268, float %252, float %253, !dbg !34
  %270 = extractelement <8 x i1> %243, i64 2, !dbg !34
  %271 = select i1 %270, float %254, float %255, !dbg !34
  %272 = extractelement <8 x i1> %243, i64 1, !dbg !34
  %273 = select i1 %272, float %256, float %257, !dbg !34
  %274 = extractelement <8 x i1> %243, i64 0, !dbg !34
  %275 = select i1 %274, float %258, float %259, !dbg !34
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !36
  %277 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !36
  %278 = bitcast float %261 to i32, !dbg !37
  %279 = bitcast float %263 to i32, !dbg !37
  %280 = bitcast float %265 to i32, !dbg !37
  %281 = bitcast float %267 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %278, i32 %279, i32 %280, i32 %281, ptr addrspace(1) %276, i1 true) #3, !dbg !37
  %282 = bitcast float %269 to i32, !dbg !37
  %283 = bitcast float %271 to i32, !dbg !37
  %284 = bitcast float %273 to i32, !dbg !37
  %285 = bitcast float %275 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %282, i32 %283, i32 %284, i32 %285, ptr addrspace(1) %277, i1 true) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx6wxhliacmjhcfyplhax2frcdv35nkk3v4eprlaqxpwbuzjtjvp.py", directory: "inductor_cache/x6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 26, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 35, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 28, scope: !7)
!37 = !DILocation(line: 47, column: 40, scope: !7)
!38 = !DILocation(line: 47, column: 4, scope: !7)
