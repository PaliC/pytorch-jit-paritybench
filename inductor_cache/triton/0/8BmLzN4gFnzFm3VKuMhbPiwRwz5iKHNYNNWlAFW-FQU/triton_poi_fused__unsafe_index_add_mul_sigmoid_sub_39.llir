; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %20 = sdiv i32 %.frozen, 8, !dbg !14
  %21 = srem i32 %20, 8, !dbg !15
  %22 = mul i32 %20, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = sdiv i32 %19, 64, !dbg !17
  %24 = sext i32 %21 to i64, !dbg !18
  %25 = getelementptr i64, ptr addrspace(1) %2, i64 %24, !dbg !18
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %28 = sext i32 %.decomposed to i64, !dbg !20
  %29 = getelementptr i64, ptr addrspace(1) %3, i64 %28, !dbg !20
  %30 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !21
  %31 = extractvalue { i64, i64 } %30, 0, !dbg !21
  %32 = extractvalue { i64, i64 } %30, 1, !dbg !21
  %33 = getelementptr i64, ptr addrspace(1) %5, i64 %28, !dbg !22
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !23
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !23
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !24
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !25
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !25
  %41 = bitcast i32 %39 to float, !dbg !25
  %42 = bitcast i32 %40 to float, !dbg !25
  %43 = getelementptr i64, ptr addrspace(1) %7, i64 %24, !dbg !26
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !27
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !29
  %48 = bitcast i32 %47 to float, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !29
  %50 = bitcast i32 %49 to float, !dbg !29
  %51 = sext i32 %19 to i64, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %11, i64 %51, !dbg !30
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !31
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !31
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !31
  %56 = bitcast i32 %54 to float, !dbg !31
  %57 = bitcast i32 %55 to float, !dbg !31
  %58 = lshr i64 %26, 62, !dbg !32
  %59 = and i64 %58, 2, !dbg !32
  %60 = add i64 %59, %26, !dbg !32
  %61 = lshr i64 %31, 62, !dbg !33
  %62 = and i64 %61, 2, !dbg !33
  %63 = add i64 %62, %31, !dbg !33
  %64 = lshr i64 %32, 62, !dbg !33
  %65 = and i64 %64, 2, !dbg !33
  %66 = add i64 %65, %32, !dbg !33
  %67 = shl i64 %60, 1, !dbg !34
  %68 = shl nsw i32 %23, 2, !dbg !35
  %69 = sext i32 %68 to i64, !dbg !36
  %70 = add i64 %67, %69, !dbg !37
  %71 = add i64 %70, %63, !dbg !36
  %72 = add i64 %70, %66, !dbg !36
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !38
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !38
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !39
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !39
  %77 = lshr i64 %35, 62, !dbg !40
  %78 = and i64 %77, 2, !dbg !40
  %79 = add i64 %78, %35, !dbg !40
  %80 = lshr i64 %36, 62, !dbg !40
  %81 = and i64 %80, 2, !dbg !40
  %82 = add i64 %81, %36, !dbg !40
  %83 = add i64 %70, %79, !dbg !41
  %84 = add i64 %70, %82, !dbg !41
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !42
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %84, !dbg !42
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !43
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !43
  %89 = lshr i64 %44, 62, !dbg !44
  %90 = and i64 %89, 2, !dbg !44
  %91 = add i64 %90, %44, !dbg !44
  %92 = shl i64 %91, 1, !dbg !45
  %93 = add i64 %92, %69, !dbg !46
  %94 = add i64 %93, %63, !dbg !47
  %95 = add i64 %93, %66, !dbg !47
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !48
  %97 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !48
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !49
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !49
  %100 = add i64 %93, %79, !dbg !50
  %101 = add i64 %93, %82, !dbg !50
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !51
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !51
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !52
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !52
  %106 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !49
  %107 = insertelement <2 x i32> %106, i32 %75, i64 1, !dbg !49
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !49
  %109 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !52
  %110 = insertelement <2 x i32> %109, i32 %87, i64 1, !dbg !52
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !52
  %112 = fsub <2 x float> %111, %108, !dbg !53
  %113 = insertelement <2 x float> poison, float %41, i64 0, !dbg !54
  %114 = shufflevector <2 x float> %113, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %115 = fmul <2 x float> %112, %114, !dbg !54
  %116 = fadd <2 x float> %115, %108, !dbg !55
  %117 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !49
  %118 = insertelement <2 x i32> %117, i32 %76, i64 1, !dbg !49
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !49
  %120 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !52
  %121 = insertelement <2 x i32> %120, i32 %88, i64 1, !dbg !52
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !52
  %123 = fsub <2 x float> %122, %119, !dbg !53
  %124 = insertelement <2 x float> poison, float %42, i64 0, !dbg !54
  %125 = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %126 = fmul <2 x float> %123, %125, !dbg !54
  %127 = fadd <2 x float> %126, %119, !dbg !55
  %128 = extractelement <2 x float> %116, i64 0, !dbg !56
  %129 = extractelement <2 x float> %116, i64 1, !dbg !57
  %130 = fsub float %128, %129, !dbg !56
  %131 = extractelement <2 x float> %127, i64 0, !dbg !56
  %132 = extractelement <2 x float> %127, i64 1, !dbg !57
  %133 = fsub float %131, %132, !dbg !56
  %134 = fmul float %130, %48, !dbg !58
  %135 = fmul float %133, %50, !dbg !58
  %136 = fadd float %129, %134, !dbg !57
  %137 = fadd float %132, %135, !dbg !57
  %138 = fsub float 0.000000e+00, %136, !dbg !59
  %139 = fsub float 0.000000e+00, %137, !dbg !59
  %140 = fmul float %138, 0x3FF7154760000000, !dbg !63
  %141 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %140) #1, !dbg !63
  %142 = fmul float %139, 0x3FF7154760000000, !dbg !63
  %143 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %142) #1, !dbg !63
  %144 = fadd float %141, 1.000000e+00, !dbg !64
  %145 = fadd float %143, 1.000000e+00, !dbg !64
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %144) #1, !dbg !65
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %145) #1, !dbg !65
  %148 = getelementptr float, ptr addrspace(1) %9, i64 %71, !dbg !66
  %149 = getelementptr float, ptr addrspace(1) %9, i64 %72, !dbg !66
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !67
  %151 = bitcast i32 %150 to float, !dbg !67
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #1, !dbg !67
  %153 = bitcast i32 %152 to float, !dbg !67
  %154 = getelementptr float, ptr addrspace(1) %10, i64 %71, !dbg !68
  %155 = getelementptr float, ptr addrspace(1) %10, i64 %72, !dbg !68
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !69
  %157 = bitcast i32 %156 to float, !dbg !69
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #1, !dbg !69
  %159 = bitcast i32 %158 to float, !dbg !69
  %160 = fsub float 0.000000e+00, %157, !dbg !70
  %161 = fsub float 0.000000e+00, %159, !dbg !70
  %162 = fmul float %160, 0x3FF7154760000000, !dbg !72
  %163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %162) #1, !dbg !72
  %164 = fmul float %161, 0x3FF7154760000000, !dbg !72
  %165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #1, !dbg !72
  %166 = fadd float %163, 1.000000e+00, !dbg !73
  %167 = fadd float %165, 1.000000e+00, !dbg !73
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %166) #1, !dbg !74
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %167) #1, !dbg !74
  %170 = fmul float %168, %151, !dbg !75
  %171 = fmul float %169, %153, !dbg !75
  %172 = getelementptr float, ptr addrspace(1) %9, i64 %83, !dbg !76
  %173 = getelementptr float, ptr addrspace(1) %9, i64 %84, !dbg !76
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 true) #1, !dbg !77
  %175 = bitcast i32 %174 to float, !dbg !77
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #1, !dbg !77
  %177 = bitcast i32 %176 to float, !dbg !77
  %178 = getelementptr float, ptr addrspace(1) %10, i64 %83, !dbg !78
  %179 = getelementptr float, ptr addrspace(1) %10, i64 %84, !dbg !78
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #1, !dbg !79
  %181 = bitcast i32 %180 to float, !dbg !79
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #1, !dbg !79
  %183 = bitcast i32 %182 to float, !dbg !79
  %184 = fsub float 0.000000e+00, %181, !dbg !80
  %185 = fsub float 0.000000e+00, %183, !dbg !80
  %186 = fmul float %184, 0x3FF7154760000000, !dbg !82
  %187 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %186) #1, !dbg !82
  %188 = fmul float %185, 0x3FF7154760000000, !dbg !82
  %189 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %188) #1, !dbg !82
  %190 = fadd float %187, 1.000000e+00, !dbg !83
  %191 = fadd float %189, 1.000000e+00, !dbg !83
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %190) #1, !dbg !84
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %191) #1, !dbg !84
  %194 = fmul float %192, %175, !dbg !85
  %195 = fmul float %193, %177, !dbg !85
  %196 = fsub float %194, %170, !dbg !86
  %197 = fsub float %195, %171, !dbg !86
  %198 = fmul float %196, %41, !dbg !87
  %199 = fmul float %197, %42, !dbg !87
  %200 = fadd float %170, %198, !dbg !88
  %201 = fadd float %171, %199, !dbg !88
  %202 = getelementptr float, ptr addrspace(1) %9, i64 %94, !dbg !89
  %203 = getelementptr float, ptr addrspace(1) %9, i64 %95, !dbg !89
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #1, !dbg !90
  %205 = bitcast i32 %204 to float, !dbg !90
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 true) #1, !dbg !90
  %207 = bitcast i32 %206 to float, !dbg !90
  %208 = getelementptr float, ptr addrspace(1) %10, i64 %94, !dbg !91
  %209 = getelementptr float, ptr addrspace(1) %10, i64 %95, !dbg !91
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #1, !dbg !92
  %211 = bitcast i32 %210 to float, !dbg !92
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 true) #1, !dbg !92
  %213 = bitcast i32 %212 to float, !dbg !92
  %214 = fsub float 0.000000e+00, %211, !dbg !93
  %215 = fsub float 0.000000e+00, %213, !dbg !93
  %216 = fmul float %214, 0x3FF7154760000000, !dbg !95
  %217 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %216) #1, !dbg !95
  %218 = fmul float %215, 0x3FF7154760000000, !dbg !95
  %219 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %218) #1, !dbg !95
  %220 = fadd float %217, 1.000000e+00, !dbg !96
  %221 = fadd float %219, 1.000000e+00, !dbg !96
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %220) #1, !dbg !97
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %221) #1, !dbg !97
  %224 = fmul float %222, %205, !dbg !98
  %225 = fmul float %223, %207, !dbg !98
  %226 = getelementptr float, ptr addrspace(1) %9, i64 %100, !dbg !99
  %227 = getelementptr float, ptr addrspace(1) %9, i64 %101, !dbg !99
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !100
  %229 = bitcast i32 %228 to float, !dbg !100
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #1, !dbg !100
  %231 = bitcast i32 %230 to float, !dbg !100
  %232 = getelementptr float, ptr addrspace(1) %10, i64 %100, !dbg !101
  %233 = getelementptr float, ptr addrspace(1) %10, i64 %101, !dbg !101
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #1, !dbg !102
  %235 = bitcast i32 %234 to float, !dbg !102
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 true) #1, !dbg !102
  %237 = bitcast i32 %236 to float, !dbg !102
  %238 = fsub float 0.000000e+00, %235, !dbg !103
  %239 = fsub float 0.000000e+00, %237, !dbg !103
  %240 = fmul float %238, 0x3FF7154760000000, !dbg !105
  %241 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %240) #1, !dbg !105
  %242 = fmul float %239, 0x3FF7154760000000, !dbg !105
  %243 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %242) #1, !dbg !105
  %244 = fadd float %241, 1.000000e+00, !dbg !106
  %245 = fadd float %243, 1.000000e+00, !dbg !106
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %244) #1, !dbg !107
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %245) #1, !dbg !107
  %248 = fmul float %246, %229, !dbg !108
  %249 = fmul float %247, %231, !dbg !108
  %250 = fsub float %248, %224, !dbg !109
  %251 = fsub float %249, %225, !dbg !109
  %252 = fmul float %250, %41, !dbg !110
  %253 = fmul float %251, %42, !dbg !110
  %254 = fadd float %224, %252, !dbg !111
  %255 = fadd float %225, %253, !dbg !111
  %256 = fsub float %254, %200, !dbg !112
  %257 = fsub float %255, %201, !dbg !112
  %258 = fmul float %146, %56, !dbg !113
  %259 = fmul float %147, %57, !dbg !113
  %260 = fmul float %256, %48, !dbg !114
  %261 = fmul float %257, %50, !dbg !114
  %262 = fadd float %200, %260, !dbg !115
  %263 = fadd float %201, %261, !dbg !115
  %264 = fadd float %258, %262, !dbg !116
  %265 = fadd float %259, %263, !dbg !116
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !117
  %267 = bitcast float %146 to i32, !dbg !118
  %268 = bitcast float %147 to i32, !dbg !118
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %267, i32 %268, ptr addrspace(1) %266, i1 true) #1, !dbg !118
  %269 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !119
  %270 = bitcast float %264 to i32, !dbg !120
  %271 = bitcast float %265 to i32, !dbg !120
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %270, i32 %271, ptr addrspace(1) %269, i1 true) #1, !dbg !120
  ret void, !dbg !121
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqawj7l3pryh73ddt7s3cakowzkwcfcosj5andszz2sl6r7oadcq.py", directory: "inductor_cache/qa")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_39, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_39, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_39", linkageName: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 32, scope: !7)
!33 = !DILocation(line: 41, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 39, scope: !7)
!35 = !DILocation(line: 42, column: 48, scope: !7)
!36 = !DILocation(line: 42, column: 46, scope: !7)
!37 = !DILocation(line: 42, column: 37, scope: !7)
!38 = !DILocation(line: 42, column: 30, scope: !7)
!39 = !DILocation(line: 42, column: 53, scope: !7)
!40 = !DILocation(line: 45, column: 35, scope: !7)
!41 = !DILocation(line: 46, column: 48, scope: !7)
!42 = !DILocation(line: 46, column: 31, scope: !7)
!43 = !DILocation(line: 46, column: 55, scope: !7)
!44 = !DILocation(line: 52, column: 35, scope: !7)
!45 = !DILocation(line: 53, column: 40, scope: !7)
!46 = !DILocation(line: 53, column: 38, scope: !7)
!47 = !DILocation(line: 53, column: 48, scope: !7)
!48 = !DILocation(line: 53, column: 31, scope: !7)
!49 = !DILocation(line: 53, column: 55, scope: !7)
!50 = !DILocation(line: 54, column: 49, scope: !7)
!51 = !DILocation(line: 54, column: 31, scope: !7)
!52 = !DILocation(line: 54, column: 56, scope: !7)
!53 = !DILocation(line: 55, column: 20, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 47, column: 30, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!62 = !DILocation(line: 61, column: 23, scope: !7)
!63 = !DILocation(line: 47, column: 29, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 47, column: 20, scope: !60, inlinedAt: !62)
!65 = !DILocation(line: 47, column: 16, scope: !60, inlinedAt: !62)
!66 = !DILocation(line: 62, column: 31, scope: !7)
!67 = !DILocation(line: 62, column: 54, scope: !7)
!68 = !DILocation(line: 63, column: 31, scope: !7)
!69 = !DILocation(line: 63, column: 54, scope: !7)
!70 = !DILocation(line: 47, column: 30, scope: !60, inlinedAt: !71)
!71 = !DILocation(line: 64, column: 23, scope: !7)
!72 = !DILocation(line: 47, column: 29, scope: !60, inlinedAt: !71)
!73 = !DILocation(line: 47, column: 20, scope: !60, inlinedAt: !71)
!74 = !DILocation(line: 47, column: 16, scope: !60, inlinedAt: !71)
!75 = !DILocation(line: 65, column: 20, scope: !7)
!76 = !DILocation(line: 66, column: 31, scope: !7)
!77 = !DILocation(line: 66, column: 55, scope: !7)
!78 = !DILocation(line: 67, column: 31, scope: !7)
!79 = !DILocation(line: 67, column: 55, scope: !7)
!80 = !DILocation(line: 47, column: 30, scope: !60, inlinedAt: !81)
!81 = !DILocation(line: 68, column: 23, scope: !7)
!82 = !DILocation(line: 47, column: 29, scope: !60, inlinedAt: !81)
!83 = !DILocation(line: 47, column: 20, scope: !60, inlinedAt: !81)
!84 = !DILocation(line: 47, column: 16, scope: !60, inlinedAt: !81)
!85 = !DILocation(line: 69, column: 20, scope: !7)
!86 = !DILocation(line: 70, column: 20, scope: !7)
!87 = !DILocation(line: 71, column: 20, scope: !7)
!88 = !DILocation(line: 72, column: 20, scope: !7)
!89 = !DILocation(line: 73, column: 31, scope: !7)
!90 = !DILocation(line: 73, column: 55, scope: !7)
!91 = !DILocation(line: 74, column: 31, scope: !7)
!92 = !DILocation(line: 74, column: 55, scope: !7)
!93 = !DILocation(line: 47, column: 30, scope: !60, inlinedAt: !94)
!94 = !DILocation(line: 75, column: 23, scope: !7)
!95 = !DILocation(line: 47, column: 29, scope: !60, inlinedAt: !94)
!96 = !DILocation(line: 47, column: 20, scope: !60, inlinedAt: !94)
!97 = !DILocation(line: 47, column: 16, scope: !60, inlinedAt: !94)
!98 = !DILocation(line: 76, column: 20, scope: !7)
!99 = !DILocation(line: 77, column: 31, scope: !7)
!100 = !DILocation(line: 77, column: 56, scope: !7)
!101 = !DILocation(line: 78, column: 31, scope: !7)
!102 = !DILocation(line: 78, column: 56, scope: !7)
!103 = !DILocation(line: 47, column: 30, scope: !60, inlinedAt: !104)
!104 = !DILocation(line: 79, column: 23, scope: !7)
!105 = !DILocation(line: 47, column: 29, scope: !60, inlinedAt: !104)
!106 = !DILocation(line: 47, column: 20, scope: !60, inlinedAt: !104)
!107 = !DILocation(line: 47, column: 16, scope: !60, inlinedAt: !104)
!108 = !DILocation(line: 80, column: 20, scope: !7)
!109 = !DILocation(line: 81, column: 20, scope: !7)
!110 = !DILocation(line: 82, column: 20, scope: !7)
!111 = !DILocation(line: 83, column: 20, scope: !7)
!112 = !DILocation(line: 84, column: 20, scope: !7)
!113 = !DILocation(line: 85, column: 20, scope: !7)
!114 = !DILocation(line: 86, column: 20, scope: !7)
!115 = !DILocation(line: 87, column: 20, scope: !7)
!116 = !DILocation(line: 88, column: 20, scope: !7)
!117 = !DILocation(line: 89, column: 28, scope: !7)
!118 = !DILocation(line: 89, column: 40, scope: !7)
!119 = !DILocation(line: 90, column: 28, scope: !7)
!120 = !DILocation(line: 90, column: 40, scope: !7)
!121 = !DILocation(line: 90, column: 4, scope: !7)
