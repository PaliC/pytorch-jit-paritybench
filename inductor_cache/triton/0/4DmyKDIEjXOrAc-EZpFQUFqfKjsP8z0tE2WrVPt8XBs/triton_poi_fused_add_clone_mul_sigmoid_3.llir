; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_clone_mul_sigmoid_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 14, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 64, !dbg !14
  %17 = icmp slt i32 %15, 64, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 4, !dbg !16
  %20 = or disjoint i32 %19, %13, !dbg !17
  %21 = or disjoint i32 %19, %11, !dbg !17
  %22 = icmp slt i32 %20, 16, !dbg !18
  %23 = icmp slt i32 %21, 16, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %24 = sdiv i32 %.frozen, 4, !dbg !19
  %25 = mul i32 %24, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %26 = shl i32 %14, 4, !dbg !21
  %27 = add i32 %20, %26, !dbg !22
  %28 = sext i32 %27 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = and i1 %16, %22, !dbg !24
  %31 = and i1 %17, %23, !dbg !24
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %30) #2, !dbg !25
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !25
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = bitcast i32 %34 to float, !dbg !25
  %37 = sext i32 %14 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %16) #2, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %16) #2, !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = shl i32 %21, 2, !dbg !28
  %43 = add i32 %42, %.decomposed, !dbg !29
  %44 = shl i32 %24, 6, !dbg !30
  %45 = add i32 %43, %44, !dbg !31
  %46 = sext i32 %45 to i64, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !32
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %31) #2, !dbg !33
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !33
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !33
  %51 = bitcast i32 %49 to float, !dbg !33
  %52 = bitcast i32 %50 to float, !dbg !33
  %53 = fsub float 0.000000e+00, %41, !dbg !34
  %54 = fmul float %53, 0x3FF7154760000000, !dbg !38
  %55 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %54) #2, !dbg !38
  %56 = fadd float %55, 1.000000e+00, !dbg !39
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %56) #2, !dbg !40
  %58 = fmul float %57, %35, !dbg !41
  %59 = fmul float %57, %36, !dbg !41
  %60 = shl i32 %9, 5, !dbg !41
  %61 = and i32 %60, 224, !dbg !41
  %62 = or disjoint i32 %61, %11, !dbg !41
  %63 = and i32 %12, 254, !dbg !41
  %64 = lshr exact i32 %61, 1, !dbg !41
  %65 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %64, !dbg !41
  %66 = getelementptr float, ptr addrspace(3) %65, i32 %62, !dbg !41
  %67 = bitcast float %58 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #2, !dbg !41
  %68 = or disjoint i32 %62, 16, !dbg !41
  %69 = lshr i32 %68, 4, !dbg !41
  %.idx = shl nuw nsw i32 %69, 3, !dbg !41
  %70 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !41
  %71 = getelementptr float, ptr addrspace(3) %70, i32 %68, !dbg !41
  %72 = bitcast float %59 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %73 = lshr i32 %63, 4, !dbg !41
  %74 = and i32 %9, 127, !dbg !41
  %75 = add nuw nsw i32 %73, %74, !dbg !41
  %.idx1 = shl nuw nsw i32 %75, 3, !dbg !41
  %76 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !41
  %77 = load float, ptr addrspace(3) %76, align 8, !dbg !41
  %78 = getelementptr inbounds i8, ptr addrspace(3) %76, i32 4, !dbg !41
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !41
  %80 = fadd float %77, %51, !dbg !42
  %81 = fadd float %79, %52, !dbg !42
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %83 = lshr exact i32 %61, 2, !dbg !44
  %84 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %83, !dbg !44
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %62, !dbg !44
  %86 = bitcast float %80 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !44
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !44
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %68, !dbg !44
  %89 = bitcast float %81 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !44
  %91 = getelementptr inbounds float, ptr addrspace(3) %90, i32 %63, !dbg !44
  %92 = load i32, ptr addrspace(3) %91, align 4, !dbg !44
  %93 = or disjoint i32 %63, 1, !dbg !44
  %94 = getelementptr inbounds float, ptr addrspace(3) %90, i32 %93, !dbg !44
  %95 = load i32, ptr addrspace(3) %94, align 4, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %92, i32 %95, ptr addrspace(1) %82, i1 %30) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cokhrb4iiusee4t7f3h5clt6t2leh4nkqmxfjazrsdrirel6rtrc.py", directory: "inductor_cache/ok")
!4 = !{ptr @triton_poi_fused_add_clone_mul_sigmoid_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clone_mul_sigmoid_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clone_mul_sigmoid_3", linkageName: "triton_poi_fused_add_clone_mul_sigmoid_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 37, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 45, scope: !7)
!31 = !DILocation(line: 34, column: 42, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 50, scope: !7)
!34 = !DILocation(line: 47, column: 30, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 35, column: 22, scope: !7)
!38 = !DILocation(line: 47, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 47, column: 20, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 47, column: 16, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 25, scope: !7)
!44 = !DILocation(line: 38, column: 44, scope: !7)
!45 = !DILocation(line: 38, column: 4, scope: !7)
