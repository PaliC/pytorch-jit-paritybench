; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %16 = sdiv i32 %.frozen, 256, !dbg !14
  %17 = srem i32 %16, 64, !dbg !15
  %18 = mul i32 %16, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %.frozen1 = freeze i32 %15, !dbg !17
  %19 = sdiv i32 %.frozen1, 16384, !dbg !17
  %20 = mul i32 %19, 16384, !dbg !18
  %.decomposed2 = sub i32 %.frozen1, %20, !dbg !18
  %21 = sext i32 %15 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !19
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !20
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !20
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !20
  %26 = bitcast i32 %24 to float, !dbg !20
  %27 = bitcast i32 %25 to float, !dbg !20
  %28 = icmp slt i32 %17, 16, !dbg !21
  %29 = shl nsw i32 %19, 12, !dbg !22
  %30 = add nsw i32 %29, %.decomposed2, !dbg !23
  %31 = sext i32 %30 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !24
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !25
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !25
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !25
  %36 = bitcast i32 %34 to float, !dbg !25
  %37 = bitcast i32 %35 to float, !dbg !25
  %38 = add nsw i32 %17, -16, !dbg !26
  %39 = icmp ult i32 %38, 12, !dbg !26
  %40 = shl nsw i32 %17, 8, !dbg !27
  %41 = mul nsw i32 %19, 3072, !dbg !28
  %42 = add nsw i32 %41, %.decomposed, !dbg !27
  %43 = add nsw i32 %42, -4096, !dbg !29
  %44 = add nsw i32 %43, %40, !dbg !30
  %45 = sext i32 %44 to i64, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !31
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !32
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !32
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !32
  %50 = bitcast i32 %48 to float, !dbg !32
  %51 = bitcast i32 %49 to float, !dbg !32
  %52 = add nsw i32 %17, -28, !dbg !33
  %53 = icmp ult i32 %52, 12, !dbg !33
  %54 = add nsw i32 %42, -7168, !dbg !34
  %55 = add nsw i32 %54, %40, !dbg !35
  %56 = sext i32 %55 to i64, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !36
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !37
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !37
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !37
  %61 = bitcast i32 %59 to float, !dbg !37
  %62 = bitcast i32 %60 to float, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !38
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !39
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !39
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !39
  %67 = bitcast i32 %65 to float, !dbg !39
  %68 = bitcast i32 %66 to float, !dbg !39
  %69 = fadd float %61, %67, !dbg !40
  %70 = fadd float %62, %68, !dbg !40
  %71 = add nsw i32 %17, -40, !dbg !41
  %72 = icmp ult i32 %71, 12, !dbg !41
  %73 = add nsw i32 %42, -10240, !dbg !42
  %74 = add nsw i32 %73, %40, !dbg !43
  %75 = sext i32 %74 to i64, !dbg !44
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !44
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !45
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !45
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !45
  %80 = bitcast i32 %78 to float, !dbg !45
  %81 = bitcast i32 %79 to float, !dbg !45
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !46
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %82, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !47
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !47
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !47
  %86 = bitcast i32 %84 to float, !dbg !47
  %87 = bitcast i32 %85 to float, !dbg !47
  %88 = fadd float %80, %86, !dbg !48
  %89 = fadd float %81, %87, !dbg !48
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !49
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %90, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !50
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !50
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !50
  %94 = bitcast i32 %92 to float, !dbg !50
  %95 = bitcast i32 %93 to float, !dbg !50
  %96 = fadd float %88, %94, !dbg !51
  %97 = fadd float %89, %95, !dbg !51
  %98 = icmp sgt i32 %17, 51, !dbg !52
  %99 = add nsw i32 %42, -13312, !dbg !53
  %100 = add nsw i32 %99, %40, !dbg !54
  %101 = sext i32 %100 to i64, !dbg !55
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !55
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %102, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !56
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !56
  %105 = extractvalue { i32, i32 } %103, 1, !dbg !56
  %106 = bitcast i32 %104 to float, !dbg !56
  %107 = bitcast i32 %105 to float, !dbg !56
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !57
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %108, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !58
  %110 = extractvalue { i32, i32 } %109, 0, !dbg !58
  %111 = extractvalue { i32, i32 } %109, 1, !dbg !58
  %112 = bitcast i32 %110 to float, !dbg !58
  %113 = bitcast i32 %111 to float, !dbg !58
  %114 = fadd float %106, %112, !dbg !59
  %115 = fadd float %107, %113, !dbg !59
  %116 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !60
  %117 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %116, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !61
  %118 = extractvalue { i32, i32 } %117, 0, !dbg !61
  %119 = extractvalue { i32, i32 } %117, 1, !dbg !61
  %120 = bitcast i32 %118 to float, !dbg !61
  %121 = bitcast i32 %119 to float, !dbg !61
  %122 = fadd float %114, %120, !dbg !62
  %123 = fadd float %115, %121, !dbg !62
  %124 = getelementptr float, ptr addrspace(1) %5, i64 %101, !dbg !63
  %125 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %124, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !64
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !64
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !64
  %128 = bitcast i32 %126 to float, !dbg !64
  %129 = bitcast i32 %127 to float, !dbg !64
  %130 = fadd float %122, %128, !dbg !65
  %131 = fadd float %123, %129, !dbg !65
  %132 = select i1 %98, float %130, float 0.000000e+00, !dbg !66
  %133 = select i1 %98, float %131, float 0.000000e+00, !dbg !66
  %134 = select i1 %72, float %96, float %132, !dbg !67
  %135 = select i1 %72, float %97, float %133, !dbg !67
  %136 = select i1 %53, float %69, float %134, !dbg !67
  %137 = select i1 %53, float %70, float %135, !dbg !67
  %138 = select i1 %39, float %50, float %136, !dbg !68
  %139 = select i1 %39, float %51, float %137, !dbg !68
  %140 = select i1 %28, float %36, float %138, !dbg !69
  %141 = select i1 %28, float %37, float %139, !dbg !69
  %142 = fadd float %140, %26, !dbg !70
  %143 = fadd float %141, %27, !dbg !70
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !71
  %145 = bitcast float %142 to i32, !dbg !72
  %146 = bitcast float %143 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %145, i32 %146, ptr addrspace(1) %144, i1 true) #1, !dbg !72
  %147 = mul i32 %19, 33536, !dbg !73
  %148 = add i32 %147, %.decomposed2, !dbg !74
  %149 = sext i32 %148 to i64, !dbg !75
  %150 = getelementptr float, ptr addrspace(1) %7, i64 %149, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %24, i32 %25, ptr addrspace(1) %150, i1 true) #1, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbvizc6ualxp7uotvl7lehgtulxalltsoynx67jqgpcav7qikdtk.py", directory: "inductor_cache/bv")
!4 = !{ptr @triton_poi_fused_add_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_6", linkageName: "triton_poi_fused_add_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 51, scope: !7)
!23 = !DILocation(line: 35, column: 46, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 56, scope: !7)
!26 = !DILocation(line: 39, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 41, scope: !7)
!28 = !DILocation(line: 40, column: 60, scope: !7)
!29 = !DILocation(line: 40, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 55, scope: !7)
!31 = !DILocation(line: 40, column: 31, scope: !7)
!32 = !DILocation(line: 40, column: 65, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 45, column: 55, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 65, scope: !7)
!38 = !DILocation(line: 46, column: 31, scope: !7)
!39 = !DILocation(line: 46, column: 65, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 36, scope: !7)
!43 = !DILocation(line: 54, column: 55, scope: !7)
!44 = !DILocation(line: 54, column: 31, scope: !7)
!45 = !DILocation(line: 54, column: 65, scope: !7)
!46 = !DILocation(line: 55, column: 31, scope: !7)
!47 = !DILocation(line: 55, column: 65, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 31, scope: !7)
!50 = !DILocation(line: 57, column: 65, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 64, column: 36, scope: !7)
!54 = !DILocation(line: 64, column: 55, scope: !7)
!55 = !DILocation(line: 64, column: 31, scope: !7)
!56 = !DILocation(line: 64, column: 65, scope: !7)
!57 = !DILocation(line: 65, column: 31, scope: !7)
!58 = !DILocation(line: 65, column: 65, scope: !7)
!59 = !DILocation(line: 66, column: 20, scope: !7)
!60 = !DILocation(line: 67, column: 31, scope: !7)
!61 = !DILocation(line: 67, column: 65, scope: !7)
!62 = !DILocation(line: 68, column: 20, scope: !7)
!63 = !DILocation(line: 69, column: 31, scope: !7)
!64 = !DILocation(line: 69, column: 65, scope: !7)
!65 = !DILocation(line: 70, column: 20, scope: !7)
!66 = !DILocation(line: 72, column: 35, scope: !7)
!67 = !DILocation(line: 0, scope: !7)
!68 = !DILocation(line: 75, column: 34, scope: !7)
!69 = !DILocation(line: 76, column: 33, scope: !7)
!70 = !DILocation(line: 77, column: 20, scope: !7)
!71 = !DILocation(line: 78, column: 28, scope: !7)
!72 = !DILocation(line: 78, column: 40, scope: !7)
!73 = !DILocation(line: 79, column: 36, scope: !7)
!74 = !DILocation(line: 79, column: 30, scope: !7)
!75 = !DILocation(line: 79, column: 25, scope: !7)
!76 = !DILocation(line: 79, column: 48, scope: !7)
!77 = !DILocation(line: 79, column: 4, scope: !7)
