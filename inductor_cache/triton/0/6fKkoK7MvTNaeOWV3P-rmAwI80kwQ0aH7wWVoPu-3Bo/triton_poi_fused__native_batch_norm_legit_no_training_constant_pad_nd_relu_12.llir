; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = icmp slt i32 %13, 2787840, !dbg !14
  %16 = icmp slt i32 %14, 2787840, !dbg !14
  %17 = sdiv i32 %13, 696960, !dbg !15
  %18 = sdiv i32 %14, 696960, !dbg !15
  %19 = srem i32 %13, 10560, !dbg !16
  %20 = srem i32 %14, 10560, !dbg !16
  %21 = srem i32 %13, 160, !dbg !17
  %22 = srem i32 %14, 160, !dbg !17
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !18
  %24 = shufflevector <2 x i32> %23, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %25 = sdiv <2 x i32> %24, <i32 10560, i32 160>, !dbg !18
  %26 = srem <2 x i32> %25, splat (i32 66), !dbg !19
  %27 = add nsw <2 x i32> %26, splat (i32 -1), !dbg !20
  %shift = shufflevector <2 x i32> %27, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %28 = or <2 x i32> %27, %shift, !dbg !21
  %29 = extractelement <2 x i32> %28, i64 0, !dbg !21
  %30 = icmp ult i32 %29, 64, !dbg !21
  %31 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !18
  %32 = shufflevector <2 x i32> %31, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %33 = sdiv <2 x i32> %32, <i32 10560, i32 160>, !dbg !18
  %34 = srem <2 x i32> %33, splat (i32 66), !dbg !19
  %35 = add nsw <2 x i32> %34, splat (i32 -1), !dbg !20
  %shift36 = shufflevector <2 x i32> %35, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %36 = or <2 x i32> %35, %shift36, !dbg !21
  %37 = extractelement <2 x i32> %36, i64 0, !dbg !21
  %38 = icmp ult i32 %37, 64, !dbg !21
  %39 = add nsw i32 %19, -10400, !dbg !22
  %40 = add nsw i32 %20, -10400, !dbg !22
  %41 = extractelement <2 x i32> %26, i64 0, !dbg !23
  %42 = mul nsw i32 %41, 10240, !dbg !23
  %43 = extractelement <2 x i32> %34, i64 0, !dbg !23
  %44 = mul nsw i32 %43, 10240, !dbg !23
  %45 = mul nsw i32 %17, 655360, !dbg !24
  %46 = mul nsw i32 %18, 655360, !dbg !24
  %47 = add nsw i32 %39, %45, !dbg !25
  %48 = add nsw i32 %47, %42, !dbg !26
  %49 = add nsw i32 %40, %46, !dbg !25
  %50 = add nsw i32 %49, %44, !dbg !26
  %51 = sext i32 %48 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !27
  %53 = sext i32 %50 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !27
  %55 = and i1 %15, %30, !dbg !28
  %56 = and i1 %16, %38, !dbg !28
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !29
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #3, !dbg !29
  %59 = sext i32 %21 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !30
  %61 = sext i32 %22 to i64, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !30
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !31
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #3, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !32
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !32
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !33
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !33
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !33
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !33
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !33
  %72 = bitcast i32 %68 to float, !dbg !33
  %73 = bitcast i32 %69 to float, !dbg !33
  %74 = bitcast i32 %70 to float, !dbg !33
  %75 = bitcast i32 %71 to float, !dbg !33
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #3, !dbg !33
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !33
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !33
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !33
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !33
  %81 = bitcast i32 %77 to float, !dbg !33
  %82 = bitcast i32 %78 to float, !dbg !33
  %83 = bitcast i32 %79 to float, !dbg !33
  %84 = bitcast i32 %80 to float, !dbg !33
  %85 = fadd float %72, 0x3EE4F8B580000000, !dbg !34
  %86 = fadd float %73, 0x3EE4F8B580000000, !dbg !34
  %87 = fadd float %74, 0x3EE4F8B580000000, !dbg !34
  %88 = fadd float %75, 0x3EE4F8B580000000, !dbg !34
  %89 = fadd float %81, 0x3EE4F8B580000000, !dbg !34
  %90 = fadd float %82, 0x3EE4F8B580000000, !dbg !34
  %91 = fadd float %83, 0x3EE4F8B580000000, !dbg !34
  %92 = fadd float %84, 0x3EE4F8B580000000, !dbg !34
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %93, 0, !dbg !35
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %94, 0, !dbg !35
  br i1 %.not.i, label %100, label %95, !dbg !35

95:                                               ; preds = %7
  br i1 %.not1.i, label %98, label %96, !dbg !35

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

100:                                              ; preds = %7
  br i1 %.not1.i, label %103, label %101, !dbg !35

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %96, %98, %101, %103
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %105, 0, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %106, 0, !dbg !35
  br i1 %.not.i1, label %112, label %107, !dbg !35

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %110, label %108, !dbg !35

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %115, label %113, !dbg !35

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %108, %110, %113, %115
  %.0.i3 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !35
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i6 = icmp eq i32 %117, 0, !dbg !35
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i9 = icmp eq i32 %118, 0, !dbg !35
  br i1 %.not.i6, label %124, label %119, !dbg !35

119:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %122, label %120, !dbg !35

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

124:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %127, label %125, !dbg !35

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %120, %122, %125, %127
  %.0.i8 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !35
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %129, 0, !dbg !35
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %130, 0, !dbg !35
  br i1 %.not.i11, label %136, label %131, !dbg !35

131:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %134, label %132, !dbg !35

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

136:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %139, label %137, !dbg !35

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %132, %134, %137, %139
  %.0.i13 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !35
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i16 = icmp eq i32 %141, 0, !dbg !35
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i19 = icmp eq i32 %142, 0, !dbg !35
  br i1 %.not.i16, label %148, label %143, !dbg !35

143:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %146, label %144, !dbg !35

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

148:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %151, label %149, !dbg !35

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %144, %146, %149, %151
  %.0.i18 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i21 = icmp eq i32 %153, 0, !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i24 = icmp eq i32 %154, 0, !dbg !35
  br i1 %.not.i21, label %160, label %155, !dbg !35

155:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %158, label %156, !dbg !35

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

160:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %163, label %161, !dbg !35

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %156, %158, %161, %163
  %.0.i23 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !35
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i26 = icmp eq i32 %165, 0, !dbg !35
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i29 = icmp eq i32 %166, 0, !dbg !35
  br i1 %.not.i26, label %172, label %167, !dbg !35

167:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %170, label %168, !dbg !35

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

172:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %175, label %173, !dbg !35

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %168, %170, %173, %175
  %.0.i28 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !35
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i31 = icmp eq i32 %177, 0, !dbg !35
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i34 = icmp eq i32 %178, 0, !dbg !35
  br i1 %.not.i31, label %184, label %179, !dbg !35

179:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %182, label %180, !dbg !35

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

184:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %187, label %185, !dbg !35

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %180, %182, %185, %187
  %.0.i33 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !35
  %189 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !29
  %190 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !29
  %192 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !31
  %193 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !29
  %194 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !31
  %195 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !29
  %196 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !31
  %197 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !29
  %198 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !31
  %199 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !29
  %200 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !31
  %201 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !29
  %202 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !31
  %203 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !29
  %204 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !31
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !36
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !36
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !36
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !36
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !36
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !36
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !36
  %213 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !37
  %214 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !37
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %213, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !38
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !38
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !38
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !38
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !38
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %214, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #3, !dbg !38
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !38
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !38
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !38
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !38
  %225 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !39
  %226 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !39
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %225, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !40
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !40
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !40
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !40
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !40
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %226, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56, i32 0, i1 %56) #3, !dbg !40
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !40
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !40
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !40
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !40
  %237 = insertelement <8 x i32> poison, i32 %189, i64 0, !dbg !29
  %238 = insertelement <8 x i32> %237, i32 %191, i64 1, !dbg !29
  %239 = insertelement <8 x i32> %238, i32 %193, i64 2, !dbg !29
  %240 = insertelement <8 x i32> %239, i32 %195, i64 3, !dbg !29
  %241 = insertelement <8 x i32> %240, i32 %197, i64 4, !dbg !29
  %242 = insertelement <8 x i32> %241, i32 %199, i64 5, !dbg !29
  %243 = insertelement <8 x i32> %242, i32 %201, i64 6, !dbg !29
  %244 = insertelement <8 x i32> %243, i32 %203, i64 7, !dbg !29
  %245 = bitcast <8 x i32> %244 to <8 x float>, !dbg !29
  %246 = insertelement <8 x i32> poison, i32 %190, i64 0, !dbg !31
  %247 = insertelement <8 x i32> %246, i32 %192, i64 1, !dbg !31
  %248 = insertelement <8 x i32> %247, i32 %194, i64 2, !dbg !31
  %249 = insertelement <8 x i32> %248, i32 %196, i64 3, !dbg !31
  %250 = insertelement <8 x i32> %249, i32 %198, i64 4, !dbg !31
  %251 = insertelement <8 x i32> %250, i32 %200, i64 5, !dbg !31
  %252 = insertelement <8 x i32> %251, i32 %202, i64 6, !dbg !31
  %253 = insertelement <8 x i32> %252, i32 %204, i64 7, !dbg !31
  %254 = bitcast <8 x i32> %253 to <8 x float>, !dbg !31
  %255 = fsub <8 x float> %245, %254, !dbg !41
  %256 = insertelement <8 x float> poison, float %212, i64 0, !dbg !42
  %257 = insertelement <8 x float> %256, float %211, i64 1, !dbg !42
  %258 = insertelement <8 x float> %257, float %210, i64 2, !dbg !42
  %259 = insertelement <8 x float> %258, float %209, i64 3, !dbg !42
  %260 = insertelement <8 x float> %259, float %208, i64 4, !dbg !42
  %261 = insertelement <8 x float> %260, float %207, i64 5, !dbg !42
  %262 = insertelement <8 x float> %261, float %206, i64 6, !dbg !42
  %263 = insertelement <8 x float> %262, float %205, i64 7, !dbg !42
  %264 = fmul <8 x float> %255, %263, !dbg !42
  %265 = insertelement <8 x i32> poison, i32 %224, i64 0, !dbg !38
  %266 = insertelement <8 x i32> %265, i32 %223, i64 1, !dbg !38
  %267 = insertelement <8 x i32> %266, i32 %222, i64 2, !dbg !38
  %268 = insertelement <8 x i32> %267, i32 %221, i64 3, !dbg !38
  %269 = insertelement <8 x i32> %268, i32 %219, i64 4, !dbg !38
  %270 = insertelement <8 x i32> %269, i32 %218, i64 5, !dbg !38
  %271 = insertelement <8 x i32> %270, i32 %217, i64 6, !dbg !38
  %272 = insertelement <8 x i32> %271, i32 %216, i64 7, !dbg !38
  %273 = bitcast <8 x i32> %272 to <8 x float>, !dbg !38
  %274 = fmul <8 x float> %264, %273, !dbg !43
  %275 = insertelement <8 x i32> poison, i32 %236, i64 0, !dbg !40
  %276 = insertelement <8 x i32> %275, i32 %235, i64 1, !dbg !40
  %277 = insertelement <8 x i32> %276, i32 %234, i64 2, !dbg !40
  %278 = insertelement <8 x i32> %277, i32 %233, i64 3, !dbg !40
  %279 = insertelement <8 x i32> %278, i32 %231, i64 4, !dbg !40
  %280 = insertelement <8 x i32> %279, i32 %230, i64 5, !dbg !40
  %281 = insertelement <8 x i32> %280, i32 %229, i64 6, !dbg !40
  %282 = insertelement <8 x i32> %281, i32 %228, i64 7, !dbg !40
  %283 = bitcast <8 x i32> %282 to <8 x float>, !dbg !40
  %284 = fadd <8 x float> %274, %283, !dbg !44
  %285 = fcmp olt <8 x float> %284, zeroinitializer, !dbg !45
  %286 = extractelement <8 x i1> %285, i64 7, !dbg !49
  %287 = extractelement <8 x i1> %285, i64 6, !dbg !49
  %288 = extractelement <8 x i1> %285, i64 5, !dbg !49
  %289 = extractelement <8 x i1> %285, i64 4, !dbg !49
  %290 = extractelement <8 x i1> %285, i64 3, !dbg !49
  %291 = extractelement <8 x i1> %285, i64 2, !dbg !49
  %292 = extractelement <8 x i1> %285, i64 1, !dbg !49
  %293 = extractelement <8 x i1> %285, i64 0, !dbg !49
  %294 = sext i32 %13 to i64, !dbg !50
  %295 = getelementptr float, ptr addrspace(1) %5, i64 %294, !dbg !50
  %296 = sext i32 %14 to i64, !dbg !50
  %297 = getelementptr float, ptr addrspace(1) %5, i64 %296, !dbg !50
  %bc = bitcast <8 x float> %284 to <8 x i32>, !dbg !51
  %298 = extractelement <8 x i32> %bc, i64 7, !dbg !51
  %299 = select i1 %286, i32 0, i32 %298, !dbg !49
  %300 = select i1 %30, i32 %299, i32 0, !dbg !52
  %bc37 = bitcast <8 x float> %284 to <8 x i32>, !dbg !51
  %301 = extractelement <8 x i32> %bc37, i64 6, !dbg !51
  %302 = select i1 %287, i32 0, i32 %301, !dbg !49
  %303 = select i1 %30, i32 %302, i32 0, !dbg !52
  %bc38 = bitcast <8 x float> %284 to <8 x i32>, !dbg !51
  %304 = extractelement <8 x i32> %bc38, i64 5, !dbg !51
  %305 = select i1 %288, i32 0, i32 %304, !dbg !49
  %306 = select i1 %30, i32 %305, i32 0, !dbg !52
  %bc39 = bitcast <8 x float> %284 to <8 x i32>, !dbg !51
  %307 = extractelement <8 x i32> %bc39, i64 4, !dbg !51
  %308 = select i1 %289, i32 0, i32 %307, !dbg !49
  %309 = select i1 %30, i32 %308, i32 0, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %303, i32 %306, i32 %309, ptr addrspace(1) %295, i1 %15) #3, !dbg !51
  %bc40 = bitcast <8 x float> %284 to <8 x i32>, !dbg !51
  %310 = extractelement <8 x i32> %bc40, i64 3, !dbg !51
  %311 = select i1 %290, i32 0, i32 %310, !dbg !49
  %312 = select i1 %38, i32 %311, i32 0, !dbg !52
  %bc41 = bitcast <8 x float> %284 to <8 x i32>, !dbg !51
  %313 = extractelement <8 x i32> %bc41, i64 2, !dbg !51
  %314 = select i1 %291, i32 0, i32 %313, !dbg !49
  %315 = select i1 %38, i32 %314, i32 0, !dbg !52
  %bc42 = bitcast <8 x float> %284 to <8 x i32>, !dbg !51
  %316 = extractelement <8 x i32> %bc42, i64 1, !dbg !51
  %317 = select i1 %292, i32 0, i32 %316, !dbg !49
  %318 = select i1 %38, i32 %317, i32 0, !dbg !52
  %bc43 = bitcast <8 x float> %284 to <8 x i32>, !dbg !51
  %319 = extractelement <8 x i32> %bc43, i64 0, !dbg !51
  %320 = select i1 %293, i32 0, i32 %319, !dbg !49
  %321 = select i1 %38, i32 %320, i32 0, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %312, i32 %315, i32 %318, i32 %321, ptr addrspace(1) %297, i1 %16) #3, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuvxaevpqjgaw4je626zo5mdcth53u52hhwrmx262jn6ks5inwmb.py", directory: "inductor_cache/uv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 24, column: 30, scope: !7)
!20 = !DILocation(line: 38, column: 18, scope: !7)
!21 = !DILocation(line: 40, column: 19, scope: !7)
!22 = !DILocation(line: 41, column: 42, scope: !7)
!23 = !DILocation(line: 41, column: 53, scope: !7)
!24 = !DILocation(line: 41, column: 65, scope: !7)
!25 = !DILocation(line: 41, column: 47, scope: !7)
!26 = !DILocation(line: 41, column: 58, scope: !7)
!27 = !DILocation(line: 41, column: 31, scope: !7)
!28 = !DILocation(line: 41, column: 78, scope: !7)
!29 = !DILocation(line: 41, column: 70, scope: !7)
!30 = !DILocation(line: 42, column: 31, scope: !7)
!31 = !DILocation(line: 42, column: 36, scope: !7)
!32 = !DILocation(line: 44, column: 31, scope: !7)
!33 = !DILocation(line: 44, column: 36, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 27, scope: !7)
!36 = !DILocation(line: 49, column: 20, scope: !7)
!37 = !DILocation(line: 53, column: 31, scope: !7)
!38 = !DILocation(line: 53, column: 36, scope: !7)
!39 = !DILocation(line: 55, column: 31, scope: !7)
!40 = !DILocation(line: 55, column: 36, scope: !7)
!41 = !DILocation(line: 43, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 58, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 61, column: 25, scope: !7)
!51 = !DILocation(line: 61, column: 37, scope: !7)
!52 = !DILocation(line: 60, column: 35, scope: !7)
!53 = !DILocation(line: 61, column: 4, scope: !7)
