; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_clamp_exp_mul_sqrt_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = sext i32 %10 to i64, !dbg !14
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !14
  %13 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !15
  %14 = extractvalue { i32, i32, i32, i32 } %13, 0, !dbg !15
  %15 = extractvalue { i32, i32, i32, i32 } %13, 1, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %13, 2, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %13, 3, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %30 = insertelement <4 x i32> poison, i32 %17, i64 0, !dbg !15
  %31 = insertelement <4 x i32> %30, i32 %16, i64 1, !dbg !15
  %32 = insertelement <4 x i32> %31, i32 %15, i64 2, !dbg !15
  %33 = insertelement <4 x i32> %32, i32 %14, i64 3, !dbg !15
  %34 = bitcast <4 x i32> %33 to <4 x float>, !dbg !15
  %35 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !17
  %36 = insertelement <4 x i32> %35, i32 %22, i64 1, !dbg !17
  %37 = insertelement <4 x i32> %36, i32 %21, i64 2, !dbg !17
  %38 = insertelement <4 x i32> %37, i32 %20, i64 3, !dbg !17
  %39 = bitcast <4 x i32> %38 to <4 x float>, !dbg !17
  %40 = insertelement <4 x i32> poison, i32 %29, i64 0, !dbg !19
  %41 = insertelement <4 x i32> %40, i32 %28, i64 1, !dbg !19
  %42 = insertelement <4 x i32> %41, i32 %27, i64 2, !dbg !19
  %43 = insertelement <4 x i32> %42, i32 %26, i64 3, !dbg !19
  %44 = bitcast <4 x i32> %43 to <4 x float>, !dbg !19
  %45 = fadd <4 x float> %34, %39, !dbg !20
  %46 = fmul <4 x float> %44, splat (float 2.000000e+00), !dbg !21
  %47 = fsub <4 x float> %45, %46, !dbg !22
  %48 = fcmp ole <4 x float> %47, zeroinitializer, !dbg !23
  %49 = extractelement <4 x i1> %48, i64 3, !dbg !23
  %50 = extractelement <4 x float> %47, i64 3, !dbg !23
  %51 = extractelement <4 x i1> %48, i64 2, !dbg !23
  %52 = extractelement <4 x float> %47, i64 2, !dbg !23
  %53 = extractelement <4 x i1> %48, i64 1, !dbg !23
  %54 = extractelement <4 x float> %47, i64 1, !dbg !23
  %55 = extractelement <4 x i1> %48, i64 0, !dbg !23
  %56 = extractelement <4 x float> %47, i64 0, !dbg !23
  %57 = fmul float %50, 0x3F10000000000000, !dbg !27
  %58 = fmul float %52, 0x3F10000000000000, !dbg !27
  %59 = fmul float %54, 0x3F10000000000000, !dbg !27
  %60 = fmul float %56, 0x3F10000000000000, !dbg !27
  %61 = fadd float %57, 0x3EE4F8B580000000, !dbg !28
  %62 = select i1 %49, float 0x3EE4F8B580000000, float %61, !dbg !23
  %63 = fadd float %58, 0x3EE4F8B580000000, !dbg !28
  %64 = select i1 %51, float 0x3EE4F8B580000000, float %63, !dbg !23
  %65 = fadd float %59, 0x3EE4F8B580000000, !dbg !28
  %66 = select i1 %53, float 0x3EE4F8B580000000, float %65, !dbg !23
  %67 = fadd float %60, 0x3EE4F8B580000000, !dbg !28
  %68 = select i1 %55, float 0x3EE4F8B580000000, float %67, !dbg !23
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %69, 0, !dbg !29
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %70, 0, !dbg !29
  br i1 %.not.i, label %76, label %71, !dbg !29

71:                                               ; preds = %4
  br i1 %.not1.i, label %74, label %72, !dbg !29

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

76:                                               ; preds = %4
  br i1 %.not1.i, label %79, label %77, !dbg !29

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !29
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i4 = icmp eq i32 %81, 0, !dbg !29
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i7 = icmp eq i32 %82, 0, !dbg !29
  br i1 %.not.i4, label %88, label %83, !dbg !29

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %86, label %84, !dbg !29

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit8, !dbg !29

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit8, !dbg !29

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %91, label %89, !dbg !29

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit8, !dbg !29

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit8, !dbg !29

__nv_sqrtf.exit8:                                 ; preds = %84, %86, %89, %91
  %.0.i6 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !29
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i9 = icmp eq i32 %93, 0, !dbg !29
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i12 = icmp eq i32 %94, 0, !dbg !29
  br i1 %.not.i9, label %100, label %95, !dbg !29

95:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %98, label %96, !dbg !29

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !29
  br label %__nv_sqrtf.exit13, !dbg !29

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !29
  br label %__nv_sqrtf.exit13, !dbg !29

100:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %103, label %101, !dbg !29

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !29
  br label %__nv_sqrtf.exit13, !dbg !29

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !29
  br label %__nv_sqrtf.exit13, !dbg !29

__nv_sqrtf.exit13:                                ; preds = %96, %98, %101, %103
  %.0.i11 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !29
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i14 = icmp eq i32 %105, 0, !dbg !29
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i17 = icmp eq i32 %106, 0, !dbg !29
  br i1 %.not.i14, label %112, label %107, !dbg !29

107:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %110, label %108, !dbg !29

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !29
  br label %__nv_sqrtf.exit18, !dbg !29

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !29
  br label %__nv_sqrtf.exit18, !dbg !29

112:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %115, label %113, !dbg !29

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !29
  br label %__nv_sqrtf.exit18, !dbg !29

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !29
  br label %__nv_sqrtf.exit18, !dbg !29

__nv_sqrtf.exit18:                                ; preds = %108, %110, %113, %115
  %.0.i16 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !29
  %117 = bitcast float %.0.i to i32, !dbg !30
  %118 = bitcast float %.0.i6 to i32, !dbg !30
  %119 = bitcast float %.0.i11 to i32, !dbg !30
  %120 = bitcast float %.0.i16 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %117, i32 %118, i32 %119, i32 %120, ptr addrspace(1) %12, i1 true) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyavguuiwrhd25nm3uvga4imk3csx5sr4eadqg6xvitmio4xy6ew.py", directory: "inductor_cache/ya")
!4 = !{ptr @triton_poi_fused_add_clamp_exp_mul_sqrt_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clamp_exp_mul_sqrt_sub_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clamp_exp_mul_sqrt_sub_12", linkageName: "triton_poi_fused_add_clamp_exp_mul_sqrt_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 34, scope: !7)
!15 = !DILocation(line: 25, column: 39, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 18, scope: !7)
!21 = !DILocation(line: 30, column: 18, scope: !7)
!22 = !DILocation(line: 31, column: 18, scope: !7)
!23 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 33, column: 40, scope: !7)
!27 = !DILocation(line: 35, column: 19, scope: !7)
!28 = !DILocation(line: 37, column: 20, scope: !7)
!29 = !DILocation(line: 38, column: 27, scope: !7)
!30 = !DILocation(line: 39, column: 40, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
