; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = lshr i32 %12, 5, !dbg !12
  %15 = and i32 %12, 63, !dbg !12
  %16 = lshr i32 %15, 4, !dbg !13
  %17 = shl i32 %10, 6, !dbg !14
  %18 = or disjoint i32 %17, %15, !dbg !15
  %19 = sext i32 %18 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %11, i32 0, i1 %11) #5, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = zext nneg i32 %16 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !23
  %31 = fadd float %22, %26, !dbg !24
  %32 = select i1 %11, float %31, float 0.000000e+00, !dbg !25
  %33 = bitcast float %32 to i32, !dbg !26
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 16, i32 31), !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = fadd float %32, %35, !dbg !30
  %37 = bitcast float %36 to i32, !dbg !26
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 8, i32 31), !dbg !26
  %39 = bitcast i32 %38 to float, !dbg !26
  %40 = fadd float %36, %39, !dbg !30
  %41 = bitcast float %40 to i32, !dbg !26
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 4, i32 31), !dbg !26
  %43 = bitcast i32 %42 to float, !dbg !26
  %44 = fadd float %40, %43, !dbg !30
  %45 = bitcast float %44 to i32, !dbg !26
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !26
  %47 = bitcast i32 %46 to float, !dbg !26
  %48 = fadd float %44, %47, !dbg !30
  %49 = bitcast float %48 to i32, !dbg !26
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !26
  %51 = bitcast i32 %50 to float, !dbg !26
  %52 = fadd float %48, %51, !dbg !30
  %53 = icmp eq i32 %13, 0, !dbg !26
  %54 = and i32 %14, 1, !dbg !26
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i32 %54, !dbg !26
  %56 = bitcast float %52 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 %53) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %57 = icmp slt i32 %12, 2, !dbg !26
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !26
  %59 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %58, i1 %57) #5, !dbg !26
  %60 = bitcast i32 %59 to float, !dbg !26
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !26
  %62 = bitcast i32 %61 to float, !dbg !26
  %63 = fadd float %60, %62, !dbg !30
  %64 = and i32 %12, 1, !dbg !26
  %65 = icmp eq i32 %64, 0, !dbg !26
  %66 = and i1 %57, %65, !dbg !26
  %67 = bitcast float %63 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %67, i1 %66) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %68 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 6.400000e+01) #5, !dbg !32
  %70 = fsub float %31, %69, !dbg !33
  %71 = fmul float %70, %70, !dbg !34
  %72 = select i1 %11, float %71, float 0.000000e+00, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %73 = bitcast float %72 to i32, !dbg !36
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !36
  %75 = bitcast i32 %74 to float, !dbg !36
  %76 = fadd float %72, %75, !dbg !38
  %77 = bitcast float %76 to i32, !dbg !36
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !36
  %79 = bitcast i32 %78 to float, !dbg !36
  %80 = fadd float %76, %79, !dbg !38
  %81 = bitcast float %80 to i32, !dbg !36
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !36
  %83 = bitcast i32 %82 to float, !dbg !36
  %84 = fadd float %80, %83, !dbg !38
  %85 = bitcast float %84 to i32, !dbg !36
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !36
  %87 = bitcast i32 %86 to float, !dbg !36
  %88 = fadd float %84, %87, !dbg !38
  %89 = bitcast float %88 to i32, !dbg !36
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !36
  %91 = bitcast i32 %90 to float, !dbg !36
  %92 = fadd float %88, %91, !dbg !38
  %93 = bitcast float %92 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %93, i1 %53) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %94 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %58, i1 %57) #5, !dbg !36
  %95 = bitcast i32 %94 to float, !dbg !36
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !36
  %97 = bitcast i32 %96 to float, !dbg !36
  %98 = fadd float %95, %97, !dbg !38
  %99 = bitcast float %98 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %99, i1 %66) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %100 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 6.400000e+01) #5, !dbg !39
  %102 = fadd float %101, 0x3EE4F8B580000000, !dbg !40
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %103, 0, !dbg !41
  br i1 %.not.i, label %106, label %104, !dbg !41

104:                                              ; preds = %9
  %105 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %102), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

106:                                              ; preds = %9
  %107 = tail call float @llvm.nvvm.rsqrt.approx.f(float %102), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %104, %106
  %.0.i = phi float [ %105, %104 ], [ %107, %106 ], !dbg !41
  %108 = bitcast i32 %30 to float, !dbg !23
  %109 = bitcast i32 %28 to float, !dbg !21
  %110 = fmul float %70, %.0.i, !dbg !42
  %111 = fmul float %110, %109, !dbg !43
  %112 = fadd float %111, %108, !dbg !44
  %113 = bitcast float %31 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %20, i1 %11) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %114 = sext i32 %10 to i64, !dbg !47
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !47
  %116 = icmp eq i32 %15, 0, !dbg !48
  %117 = bitcast float %.0.i to i32, !dbg !48
  %118 = and i1 %116, %11, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %115, i1 %118) #5, !dbg !48
  %119 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !49
  %120 = bitcast float %112 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %119, i1 %11) #5, !dbg !50
  %121 = getelementptr float, ptr addrspace(1) %5, i64 %114, !dbg !51
  %122 = bitcast float %69 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %121, i1 %118) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdxu4pfcv4yn6gvzws3ssh6rdyqjgqqadoynvdfgnpsf4vw55u2m.py", directory: "inductor_cache/dx")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_2", linkageName: "triton_per_fused_convolution_native_group_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 40, column: 33, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 41, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 35, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 49, column: 26, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !37)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 28, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 58, column: 20, scope: !7)
!45 = !DILocation(line: 59, column: 47, scope: !7)
!46 = !DILocation(line: 60, column: 4, scope: !7)
!47 = !DILocation(line: 61, column: 28, scope: !7)
!48 = !DILocation(line: 61, column: 40, scope: !7)
!49 = !DILocation(line: 62, column: 25, scope: !7)
!50 = !DILocation(line: 62, column: 45, scope: !7)
!51 = !DILocation(line: 63, column: 25, scope: !7)
!52 = !DILocation(line: 63, column: 37, scope: !7)
!53 = !DILocation(line: 63, column: 4, scope: !7)
