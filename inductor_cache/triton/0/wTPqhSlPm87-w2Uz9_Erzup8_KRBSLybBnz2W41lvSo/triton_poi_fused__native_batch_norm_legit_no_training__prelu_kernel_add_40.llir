; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, i32 %23) local_unnamed_addr !dbg !7 {
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %26 = shl i32 %25, 7, !dbg !11
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %28 = and i32 %27, 127, !dbg !12
  %29 = or disjoint i32 %26, %28, !dbg !13
  %30 = sdiv i32 %29, 16, !dbg !14
  %31 = srem i32 %30, 64, !dbg !15
  %32 = sext i32 %29 to i64, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !16
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !17
  %35 = sext i32 %31 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !18
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %40 = bitcast i32 %39 to float, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %10, i64 %32, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %11, i64 %35, !dbg !34
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !35
  %55 = getelementptr float, ptr addrspace(1) %12, i64 %32, !dbg !36
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !37
  %57 = getelementptr float, ptr addrspace(1) %13, i64 %35, !dbg !38
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !39
  %59 = getelementptr float, ptr addrspace(1) %14, i64 %35, !dbg !40
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !41
  %61 = bitcast i32 %60 to float, !dbg !41
  %62 = getelementptr float, ptr addrspace(1) %15, i64 %35, !dbg !42
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !43
  %64 = getelementptr float, ptr addrspace(1) %16, i64 %35, !dbg !44
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !45
  %66 = getelementptr float, ptr addrspace(1) %17, i64 %35, !dbg !46
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !47
  %68 = getelementptr float, ptr addrspace(1) %18, i64 %32, !dbg !48
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !49
  %70 = getelementptr float, ptr addrspace(1) %19, i64 %35, !dbg !50
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !51
  %72 = getelementptr float, ptr addrspace(1) %20, i64 %32, !dbg !52
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !53
  %74 = getelementptr float, ptr addrspace(1) %21, i64 %35, !dbg !54
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !55
  %76 = fadd float %40, 0x3EE4F8B580000000, !dbg !56
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i = icmp eq i32 %77, 0, !dbg !57
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i = icmp eq i32 %78, 0, !dbg !57
  br i1 %.not.i, label %84, label %79, !dbg !57

79:                                               ; preds = %24
  br i1 %.not1.i, label %82, label %80, !dbg !57

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

84:                                               ; preds = %24
  br i1 %.not1.i, label %87, label %85, !dbg !57

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !57
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !58
  %90 = fadd float %61, 0x3EE4F8B580000000, !dbg !59
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i1 = icmp eq i32 %91, 0, !dbg !60
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i4 = icmp eq i32 %92, 0, !dbg !60
  br i1 %.not.i1, label %98, label %93, !dbg !60

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !60

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !60
  br label %__nv_sqrtf.exit5, !dbg !60

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !60
  br label %__nv_sqrtf.exit5, !dbg !60

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !60

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !60
  br label %__nv_sqrtf.exit5, !dbg !60

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !60
  br label %__nv_sqrtf.exit5, !dbg !60

__nv_sqrtf.exit5:                                 ; preds = %94, %96, %99, %101
  %.0.i3 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !60
  %103 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !17
  %104 = insertelement <2 x i32> %103, i32 %56, i64 1, !dbg !17
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !17
  %106 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !19
  %107 = insertelement <2 x i32> %106, i32 %58, i64 1, !dbg !19
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !19
  %109 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !23
  %110 = insertelement <2 x i32> %109, i32 %63, i64 1, !dbg !23
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !23
  %112 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !25
  %113 = insertelement <2 x i32> %112, i32 %65, i64 1, !dbg !25
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !25
  %115 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !27
  %116 = insertelement <2 x i32> %115, i32 %67, i64 1, !dbg !27
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !27
  %118 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !29
  %119 = insertelement <2 x i32> %118, i32 %52, i64 1, !dbg !29
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !29
  %121 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !31
  %122 = insertelement <2 x i32> %121, i32 %54, i64 1, !dbg !31
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !31
  %124 = fcmp ogt <2 x float> %120, zeroinitializer, !dbg !61
  %125 = fmul <2 x float> %120, %123, !dbg !62
  %126 = select <2 x i1> %124, <2 x float> %120, <2 x float> %125, !dbg !63
  %127 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !51
  %128 = insertelement <2 x i32> %127, i32 %75, i64 1, !dbg !51
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !51
  %130 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !49
  %131 = insertelement <2 x i32> %130, i32 %73, i64 1, !dbg !49
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !49
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !64
  %134 = fcmp ogt <2 x float> %132, zeroinitializer, !dbg !65
  %135 = fmul <2 x float> %132, %129, !dbg !66
  %136 = select <2 x i1> %134, <2 x float> %132, <2 x float> %135, !dbg !67
  %137 = fsub <2 x float> %105, %108, !dbg !68
  %138 = insertelement <2 x float> poison, float %89, i64 0, !dbg !69
  %139 = insertelement <2 x float> %138, float %133, i64 1, !dbg !69
  %140 = fmul <2 x float> %137, %139, !dbg !69
  %141 = fmul <2 x float> %140, %111, !dbg !70
  %142 = fadd <2 x float> %141, %114, !dbg !71
  %143 = fcmp ogt <2 x float> %142, zeroinitializer, !dbg !72
  %144 = fmul <2 x float> %142, %117, !dbg !73
  %145 = select <2 x i1> %143, <2 x float> %142, <2 x float> %144, !dbg !74
  %146 = shufflevector <2 x float> %126, <2 x float> %136, <2 x i32> <i32 0, i32 2>, !dbg !75
  %147 = shufflevector <2 x float> %126, <2 x float> %136, <2 x i32> <i32 1, i32 3>, !dbg !75
  %148 = fadd <2 x float> %146, %147, !dbg !75
  %149 = fadd <2 x float> %148, %145, !dbg !76
  %150 = extractelement <2 x float> %149, i64 0, !dbg !77
  %151 = extractelement <2 x float> %149, i64 1, !dbg !78
  %152 = fadd float %150, %151, !dbg !79
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !80
  %154 = bitcast float %150 to i32, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %153, i1 true) #3, !dbg !77
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !81
  %156 = bitcast float %151 to i32, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %156, ptr addrspace(1) %155, i1 true) #3, !dbg !78
  %157 = getelementptr float, ptr addrspace(1) %22, i64 %32, !dbg !82
  %158 = bitcast float %152 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %157, i1 true) #3, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjg2ytl2edxdb3ynfniagqj6vnues4hcquws6fkdyuawudotbjba.py", directory: "inductor_cache/jg")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_40", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 41, column: 32, scope: !7)
!47 = !DILocation(line: 41, column: 37, scope: !7)
!48 = !DILocation(line: 42, column: 32, scope: !7)
!49 = !DILocation(line: 42, column: 37, scope: !7)
!50 = !DILocation(line: 43, column: 32, scope: !7)
!51 = !DILocation(line: 43, column: 37, scope: !7)
!52 = !DILocation(line: 44, column: 32, scope: !7)
!53 = !DILocation(line: 44, column: 37, scope: !7)
!54 = !DILocation(line: 45, column: 32, scope: !7)
!55 = !DILocation(line: 45, column: 37, scope: !7)
!56 = !DILocation(line: 48, column: 18, scope: !7)
!57 = !DILocation(line: 49, column: 26, scope: !7)
!58 = !DILocation(line: 51, column: 18, scope: !7)
!59 = !DILocation(line: 70, column: 20, scope: !7)
!60 = !DILocation(line: 71, column: 27, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 63, column: 35, scope: !7)
!64 = !DILocation(line: 72, column: 19, scope: !7)
!65 = !DILocation(line: 80, column: 20, scope: !7)
!66 = !DILocation(line: 81, column: 20, scope: !7)
!67 = !DILocation(line: 82, column: 35, scope: !7)
!68 = !DILocation(line: 46, column: 18, scope: !7)
!69 = !DILocation(line: 54, column: 19, scope: !7)
!70 = !DILocation(line: 55, column: 20, scope: !7)
!71 = !DILocation(line: 56, column: 20, scope: !7)
!72 = !DILocation(line: 58, column: 20, scope: !7)
!73 = !DILocation(line: 59, column: 20, scope: !7)
!74 = !DILocation(line: 60, column: 35, scope: !7)
!75 = !DILocation(line: 67, column: 20, scope: !7)
!76 = !DILocation(line: 68, column: 20, scope: !7)
!77 = !DILocation(line: 89, column: 40, scope: !7)
!78 = !DILocation(line: 90, column: 40, scope: !7)
!79 = !DILocation(line: 88, column: 20, scope: !7)
!80 = !DILocation(line: 89, column: 28, scope: !7)
!81 = !DILocation(line: 90, column: 28, scope: !7)
!82 = !DILocation(line: 91, column: 25, scope: !7)
!83 = !DILocation(line: 91, column: 37, scope: !7)
!84 = !DILocation(line: 91, column: 4, scope: !7)
