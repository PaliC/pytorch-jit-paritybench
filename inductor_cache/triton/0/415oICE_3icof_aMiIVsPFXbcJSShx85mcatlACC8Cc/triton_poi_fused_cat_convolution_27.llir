; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %9, 252, !dbg !12
  %12 = lshr i32 %8, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %13, 64, !dbg !12
  %15 = or disjoint i32 %13, 128, !dbg !12
  %16 = or disjoint i32 %13, 192, !dbg !12
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = or disjoint i32 %7, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = shl i32 %22, 4, !dbg !15
  %24 = lshr i32 %8, 6, !dbg !16
  %25 = and i32 %24, 3, !dbg !16
  %26 = or disjoint i32 %23, %25, !dbg !17
  %27 = or disjoint i32 %26, 4, !dbg !17
  %28 = or disjoint i32 %26, 8, !dbg !17
  %29 = or disjoint i32 %26, 12, !dbg !17
  %30 = or disjoint i32 %23, %10, !dbg !17
  %31 = icmp slt i32 %26, 16, !dbg !18
  %32 = icmp slt i32 %27, 16, !dbg !18
  %33 = icmp slt i32 %28, 16, !dbg !18
  %34 = icmp slt i32 %29, 16, !dbg !18
  %35 = icmp slt i32 %30, 16, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %36 = sdiv i32 %.frozen, 512, !dbg !19
  %37 = mul i32 %36, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %37, !dbg !20
  %38 = shl i32 %26, 9, !dbg !21
  %39 = shl i32 %27, 9, !dbg !21
  %40 = shl i32 %28, 9, !dbg !21
  %41 = shl i32 %29, 9, !dbg !21
  %42 = shl i32 %36, 13, !dbg !22
  %43 = add i32 %42, %.decomposed, !dbg !23
  %44 = add i32 %43, %38, !dbg !24
  %45 = add i32 %43, %39, !dbg !24
  %46 = add i32 %43, %40, !dbg !24
  %47 = add i32 %43, %41, !dbg !24
  %48 = sext i32 %44 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = sext i32 %45 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = sext i32 %46 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = sext i32 %47 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !25
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %31) #2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !26
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %32) #2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %33) #2, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !26
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %34) #2, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !26
  %76 = shl i32 %18, 4, !dbg !27
  %77 = shl i32 %19, 4, !dbg !27
  %78 = shl i32 %20, 4, !dbg !27
  %79 = shl i32 %21, 4, !dbg !27
  %80 = add i32 %30, %76, !dbg !28
  %81 = add i32 %30, %77, !dbg !28
  %82 = add i32 %30, %78, !dbg !28
  %83 = add i32 %30, %79, !dbg !28
  %84 = sext i32 %80 to i64, !dbg !29
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !29
  %86 = sext i32 %81 to i64, !dbg !29
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !29
  %88 = sext i32 %82 to i64, !dbg !29
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !29
  %90 = sext i32 %83 to i64, !dbg !29
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !29
  %92 = shl i32 %8, 6, !dbg !30
  %93 = and i32 %92, 4032, !dbg !30
  %94 = or disjoint i32 %93, %25, !dbg !30
  %95 = and i32 %9, 1020, !dbg !30
  %96 = lshr exact i32 %93, 2, !dbg !30
  %97 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %96, !dbg !30
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %94, !dbg !30
  %99 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !30
  %100 = or disjoint i32 %94, 16, !dbg !30
  %101 = lshr i32 %100, 4, !dbg !30
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !30
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !30
  %104 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !30
  %105 = or disjoint i32 %94, 32, !dbg !30
  %106 = lshr i32 %105, 4, !dbg !30
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !30
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !30
  %109 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !30
  %110 = or disjoint i32 %94, 48, !dbg !30
  %111 = lshr i32 %110, 4, !dbg !30
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !30
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !30
  %114 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !30
  %115 = or disjoint i32 %94, 4, !dbg !30
  %116 = getelementptr float, ptr addrspace(3) %97, i32 %115, !dbg !30
  %117 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !30
  %118 = or disjoint i32 %94, 20, !dbg !30
  %119 = lshr i32 %118, 4, !dbg !30
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !30
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %118, !dbg !30
  %122 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !30
  %123 = or disjoint i32 %94, 36, !dbg !30
  %124 = lshr i32 %123, 4, !dbg !30
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !30
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !30
  %127 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !30
  %128 = or disjoint i32 %94, 52, !dbg !30
  %129 = lshr i32 %128, 4, !dbg !30
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !30
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %128, !dbg !30
  %132 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !30
  %133 = or disjoint i32 %94, 8, !dbg !30
  %134 = getelementptr float, ptr addrspace(3) %97, i32 %133, !dbg !30
  %135 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !30
  %136 = or disjoint i32 %94, 24, !dbg !30
  %137 = lshr i32 %136, 4, !dbg !30
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !30
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !30
  %140 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !30
  %141 = or disjoint i32 %94, 40, !dbg !30
  %142 = lshr i32 %141, 4, !dbg !30
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !30
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !30
  %145 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !30
  %146 = or disjoint i32 %94, 56, !dbg !30
  %147 = lshr i32 %146, 4, !dbg !30
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !30
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !30
  %150 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !30
  %151 = or disjoint i32 %94, 12, !dbg !30
  %152 = getelementptr float, ptr addrspace(3) %97, i32 %151, !dbg !30
  %153 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !30
  %154 = or disjoint i32 %94, 28, !dbg !30
  %155 = lshr i32 %154, 4, !dbg !30
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !30
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %154, !dbg !30
  %158 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !30
  %159 = or disjoint i32 %94, 44, !dbg !30
  %160 = lshr i32 %159, 4, !dbg !30
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !30
  %162 = getelementptr float, ptr addrspace(3) %161, i32 %159, !dbg !30
  %163 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !30
  %164 = or disjoint i32 %94, 60, !dbg !30
  %165 = lshr i32 %164, 4, !dbg !30
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !30
  %167 = getelementptr float, ptr addrspace(3) %166, i32 %164, !dbg !30
  %168 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %169 = lshr i32 %95, 4, !dbg !30
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !30
  %171 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %95, !dbg !30
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !30
  %173 = or disjoint i32 %95, 1, !dbg !30
  %174 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %173, !dbg !30
  %175 = load i32, ptr addrspace(3) %174, align 4, !dbg !30
  %176 = or disjoint i32 %95, 2, !dbg !30
  %177 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %176, !dbg !30
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !30
  %179 = or disjoint i32 %95, 3, !dbg !30
  %180 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %179, !dbg !30
  %181 = load i32, ptr addrspace(3) %180, align 4, !dbg !30
  %182 = or disjoint i32 %95, 1024, !dbg !30
  %183 = lshr i32 %182, 4, !dbg !30
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !30
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %182, !dbg !30
  %186 = load i32, ptr addrspace(3) %185, align 4, !dbg !30
  %187 = or disjoint i32 %95, 1025, !dbg !30
  %188 = lshr i32 %187, 4, !dbg !30
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %188, !dbg !30
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %187, !dbg !30
  %191 = load i32, ptr addrspace(3) %190, align 4, !dbg !30
  %192 = or disjoint i32 %95, 1026, !dbg !30
  %193 = lshr i32 %192, 4, !dbg !30
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !30
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %192, !dbg !30
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !30
  %197 = or disjoint i32 %95, 1027, !dbg !30
  %198 = lshr i32 %197, 4, !dbg !30
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %198, !dbg !30
  %200 = getelementptr inbounds float, ptr addrspace(3) %199, i32 %197, !dbg !30
  %201 = load i32, ptr addrspace(3) %200, align 4, !dbg !30
  %202 = or disjoint i32 %95, 2048, !dbg !30
  %203 = lshr i32 %202, 4, !dbg !30
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !30
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %202, !dbg !30
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !30
  %207 = or disjoint i32 %95, 2049, !dbg !30
  %208 = lshr i32 %207, 4, !dbg !30
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !30
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %207, !dbg !30
  %211 = load i32, ptr addrspace(3) %210, align 4, !dbg !30
  %212 = or disjoint i32 %95, 2050, !dbg !30
  %213 = lshr i32 %212, 4, !dbg !30
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !30
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %212, !dbg !30
  %216 = load i32, ptr addrspace(3) %215, align 4, !dbg !30
  %217 = or disjoint i32 %95, 2051, !dbg !30
  %218 = lshr i32 %217, 4, !dbg !30
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !30
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %217, !dbg !30
  %221 = load i32, ptr addrspace(3) %220, align 4, !dbg !30
  %222 = or disjoint i32 %95, 3072, !dbg !30
  %223 = lshr i32 %222, 4, !dbg !30
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %223, !dbg !30
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %222, !dbg !30
  %226 = load i32, ptr addrspace(3) %225, align 4, !dbg !30
  %227 = or disjoint i32 %95, 3073, !dbg !30
  %228 = lshr i32 %227, 4, !dbg !30
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !30
  %230 = getelementptr inbounds float, ptr addrspace(3) %229, i32 %227, !dbg !30
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !30
  %232 = or disjoint i32 %95, 3074, !dbg !30
  %233 = lshr i32 %232, 4, !dbg !30
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %233, !dbg !30
  %235 = getelementptr inbounds float, ptr addrspace(3) %234, i32 %232, !dbg !30
  %236 = load i32, ptr addrspace(3) %235, align 4, !dbg !30
  %237 = or disjoint i32 %95, 3075, !dbg !30
  %238 = lshr i32 %237, 4, !dbg !30
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %238, !dbg !30
  %240 = getelementptr inbounds float, ptr addrspace(3) %239, i32 %237, !dbg !30
  %241 = load i32, ptr addrspace(3) %240, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %172, i32 %175, i32 %178, i32 %181, ptr addrspace(1) %85, i1 %35) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %186, i32 %191, i32 %196, i32 %201, ptr addrspace(1) %87, i1 %35) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %211, i32 %216, i32 %221, ptr addrspace(1) %89, i1 %35) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %231, i32 %236, i32 %241, ptr addrspace(1) %91, i1 %35) #2, !dbg !30
  %242 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !31
  %243 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !31
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !31
  %245 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %57, i32 %58, i32 %59, i32 %60, ptr addrspace(1) %242, i1 %31) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %62, i32 %63, i32 %64, i32 %65, ptr addrspace(1) %243, i1 %32) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %67, i32 %68, i32 %69, i32 %70, ptr addrspace(1) %244, i1 %33) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %72, i32 %73, i32 %74, i32 %75, ptr addrspace(1) %245, i1 %34) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmhg4lvetjd5gd225itiwp5gvjjc33752y7u6puctvza2up4jvp5.py", directory: "inductor_cache/mh")
!4 = !{ptr @triton_poi_fused_cat_convolution_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_27", linkageName: "triton_poi_fused_cat_convolution_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 33, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 44, scope: !7)
!31 = !DILocation(line: 34, column: 25, scope: !7)
!32 = !DILocation(line: 34, column: 55, scope: !7)
!33 = !DILocation(line: 34, column: 4, scope: !7)
