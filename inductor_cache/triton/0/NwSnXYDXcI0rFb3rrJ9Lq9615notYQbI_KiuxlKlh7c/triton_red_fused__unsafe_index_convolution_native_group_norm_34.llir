; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_convolution_native_group_norm_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
.peel.next:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 3, !dbg !12
  %13 = and i32 %11, 63, !dbg !12
  %14 = lshr i32 %11, 2, !dbg !12
  %15 = and i32 %14, 63, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 1024, !dbg !14
  %19 = icmp slt i32 %17, 1024, !dbg !14
  %20 = lshr i32 %11, 6, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %21 = sdiv i32 %.frozen, 4, !dbg !16
  %22 = mul i32 %21, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = srem i32 %21, 64, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %18) #3, !dbg !20
  %27 = bitcast i32 %26 to float, !dbg !20
  %28 = shl nsw i32 %.decomposed, 3, !dbg !21
  %29 = shl i32 %21, 12, !dbg !22
  %30 = sext i32 %29 to i64, !dbg !23
  %31 = shl i32 %17, 13, !dbg !24
  %32 = and i32 %20, 3
  %33 = or disjoint i32 %31, %12
  %34 = shl i32 %11, 2
  %35 = and i32 %34, 252
  %.reass = or disjoint i32 %35, %32
  %36 = and i32 %11, 255
  %37 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %35
  %38 = getelementptr float, ptr addrspace(3) %37, i32 %.reass
  %39 = lshr i32 %36, 2
  %40 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %39
  %41 = getelementptr inbounds float, ptr addrspace(3) %40, i32 %36
  %42 = sext i32 %33 to i64, !dbg !25
  %43 = sext i32 %28 to i64, !dbg !26
  %44 = getelementptr i64, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %44, i1 %18, i1 %18) #3, !dbg !27
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %0, i1 true, i1 true) #3, !dbg !28
  %47 = zext nneg i32 %32 to i64, !dbg !29
  %48 = getelementptr i64, ptr addrspace(1) %0, i64 %47, !dbg !29
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %48, i1 true, i1 true) #3, !dbg !30
  %50 = lshr i64 %45, 59, !dbg !31
  %51 = and i64 %50, 16, !dbg !31
  %52 = add i64 %51, %45, !dbg !31
  %53 = lshr i64 %46, 59, !dbg !32
  %54 = and i64 %53, 16, !dbg !32
  %55 = add i64 %54, %46, !dbg !32
  %56 = lshr i64 %49, 59, !dbg !33
  %57 = and i64 %56, 16, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %57, !dbg !34
  %.idx.peel = shl i64 %55, 6, !dbg !34
  %60 = getelementptr i8, ptr addrspace(1) %59, i64 %.idx.peel, !dbg !34
  %.idx4.peel = shl i64 %52, 10, !dbg !34
  %61 = getelementptr i8, ptr addrspace(1) %60, i64 %.idx4.peel, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %30, !dbg !34
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #3, !dbg !35
  %64 = bitcast i32 %63 to float, !dbg !35
  %65 = fadd float %27, %64, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %67 = bitcast float %65 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %67, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %68 = load i32, ptr addrspace(3) %41, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %68, ptr addrspace(1) %66, i1 %19) #3, !dbg !38
  %69 = select i1 %18, float 1.000000e+00, float 0.000000e+00, !dbg !39
  %70 = select i1 %18, float %65, float 0.000000e+00, !dbg !40
  %invariant.gep = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !25
  br label %71, !dbg !25

71:                                               ; preds = %.peel.next, %71
  %indvars.iv = phi i64 [ 4, %.peel.next ], [ %indvars.iv.next, %71 ]
  %72 = phi float [ %69, %.peel.next ], [ %114, %71 ]
  %73 = phi float [ 0.000000e+00, %.peel.next ], [ %113, %71 ]
  %74 = phi float [ %70, %.peel.next ], [ %112, %71 ]
  %75 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !41
  %76 = lshr i32 %75, 10, !dbg !41
  %77 = lshr i64 %indvars.iv, 5, !dbg !42
  %78 = and i64 %77, 31, !dbg !43
  %.masked = and i32 %75, 28, !dbg !44
  %79 = or disjoint i32 %32, %.masked, !dbg !44
  %80 = add nuw nsw i32 %76, %28, !dbg !45
  %81 = sext i32 %80 to i64, !dbg !26
  %82 = getelementptr i64, ptr addrspace(1) %0, i64 %81, !dbg !26
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %82, i1 %18, i1 %18) #3, !dbg !27
  %84 = getelementptr i64, ptr addrspace(1) %0, i64 %78, !dbg !46
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %84, i1 true, i1 true) #3, !dbg !28
  %86 = zext nneg i32 %79 to i64, !dbg !29
  %87 = getelementptr i64, ptr addrspace(1) %0, i64 %86, !dbg !29
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %87, i1 true, i1 true) #3, !dbg !30
  %89 = lshr i64 %83, 59, !dbg !31
  %90 = and i64 %89, 16, !dbg !31
  %91 = add i64 %90, %83, !dbg !31
  %92 = lshr i64 %85, 59, !dbg !32
  %93 = and i64 %92, 16, !dbg !32
  %94 = add i64 %93, %85, !dbg !32
  %95 = lshr i64 %88, 59, !dbg !33
  %96 = and i64 %95, 16, !dbg !33
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !34
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %96, !dbg !34
  %.idx = shl i64 %94, 6, !dbg !34
  %99 = getelementptr i8, ptr addrspace(1) %98, i64 %.idx, !dbg !34
  %.idx4 = shl i64 %91, 10, !dbg !34
  %100 = getelementptr i8, ptr addrspace(1) %99, i64 %.idx4, !dbg !34
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %30, !dbg !34
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %18) #3, !dbg !35
  %103 = bitcast i32 %102 to float, !dbg !35
  %104 = fadd float %27, %103, !dbg !36
  %105 = fsub float %104, %74, !dbg !47
  %106 = fadd float %72, 1.000000e+00, !dbg !51
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %106) #3, !dbg !52
  %108 = fadd float %74, %107, !dbg !53
  %109 = fsub float %104, %108, !dbg !54
  %110 = fmul float %105, %109, !dbg !55
  %111 = fadd float %73, %110, !dbg !56
  %112 = select i1 %18, float %108, float %74, !dbg !40
  %113 = select i1 %18, float %111, float %73, !dbg !57
  %114 = select i1 %18, float %106, float %72, !dbg !39
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %115 = bitcast float %104 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %115, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %116 = load i32, ptr addrspace(3) %41, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %gep, i1 %19) #3, !dbg !38
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 4, !dbg !25
  %117 = icmp samesign ult i64 %indvars.iv, 8188, !dbg !25
  br i1 %117, label %71, label %.loopexit, !dbg !25, !llvm.loop !58

.loopexit:                                        ; preds = %71
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %118 = shl nuw nsw i32 %13, 2, !dbg !60
  %119 = or disjoint i32 %118, %32, !dbg !60
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !60
  %121 = bitcast float %112 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #3, !dbg !60
  %122 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %119, !dbg !60
  %123 = bitcast float %113 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #3, !dbg !60
  %124 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %119, !dbg !60
  %125 = bitcast float %114 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %126 = icmp slt i32 %11, 256, !dbg !60
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !60
  %128 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %127, i1 %126) #3, !dbg !60
  %129 = bitcast i32 %128 to float, !dbg !60
  %130 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %11, !dbg !60
  %131 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %130, i1 %126) #3, !dbg !60
  %132 = bitcast i32 %131 to float, !dbg !60
  %133 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %11, !dbg !60
  %134 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %133, i1 %126) #3, !dbg !60
  %135 = bitcast i32 %134 to float, !dbg !60
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !60
  %137 = bitcast i32 %136 to float, !dbg !60
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !60
  %139 = bitcast i32 %138 to float, !dbg !60
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !60
  %141 = bitcast i32 %140 to float, !dbg !60
  %142 = fsub float %137, %129, !dbg !62
  %143 = fadd float %135, %141, !dbg !64
  %144 = fcmp oeq float %143, 0.000000e+00, !dbg !65
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %143) #3, !dbg !66
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !67
  %147 = fmul float %142, %146, !dbg !68
  %148 = fadd float %147, %129, !dbg !69
  %149 = fadd float %132, %139, !dbg !70
  %150 = fmul float %142, %142, !dbg !71
  %151 = fmul float %150, %135, !dbg !72
  %152 = fmul float %151, %146, !dbg !73
  %153 = fadd float %149, %152, !dbg !74
  %154 = bitcast float %148 to i32, !dbg !60
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 1, i32 31), !dbg !60
  %156 = bitcast i32 %155 to float, !dbg !60
  %157 = bitcast float %153 to i32, !dbg !60
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 1, i32 31), !dbg !60
  %159 = bitcast i32 %158 to float, !dbg !60
  %160 = bitcast float %143 to i32, !dbg !60
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 1, i32 31), !dbg !60
  %162 = bitcast i32 %161 to float, !dbg !60
  %163 = fsub float %156, %148, !dbg !62
  %164 = fadd float %143, %162, !dbg !64
  %165 = fcmp oeq float %164, 0.000000e+00, !dbg !65
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %164) #3, !dbg !66
  %167 = select i1 %165, float 0.000000e+00, float %166, !dbg !67
  %168 = fmul float %163, %167, !dbg !68
  %169 = fadd float %148, %168, !dbg !69
  %170 = fadd float %153, %159, !dbg !70
  %171 = fmul float %163, %163, !dbg !71
  %172 = fmul float %143, %171, !dbg !72
  %173 = fmul float %167, %172, !dbg !73
  %174 = fadd float %170, %173, !dbg !74
  %175 = icmp eq i32 %12, 0, !dbg !60
  %176 = and i1 %126, %175, !dbg !60
  %177 = bitcast float %169 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %177, i1 %176) #3, !dbg !60
  %178 = bitcast float %174 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %178, i1 %176) #3, !dbg !60
  %179 = bitcast float %164 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %179, i1 %176) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !60
  %181 = load i32, ptr addrspace(3) %180, align 16, !dbg !60
  %182 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %118, !dbg !60
  %183 = load i32, ptr addrspace(3) %182, align 16, !dbg !60
  %184 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %118, !dbg !60
  %185 = load i32, ptr addrspace(3) %184, align 16, !dbg !60
  %186 = sext i32 %16 to i64, !dbg !75
  %187 = getelementptr float, ptr addrspace(1) %4, i64 %186, !dbg !75
  %188 = icmp eq i32 %32, 0, !dbg !76
  %189 = and i1 %188, %18, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %181, ptr addrspace(1) %187, i1 %189) #3, !dbg !76
  %190 = getelementptr float, ptr addrspace(1) %5, i64 %186, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %190, i1 %189) #3, !dbg !78
  %191 = getelementptr float, ptr addrspace(1) %6, i64 %186, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %191, i1 %189) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmcwq5454sc4cy26h22jxv63jeve26ii2nsznlktuvwx74oxdjtk.py", directory: "inductor_cache/mc")
!4 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_34, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_34, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_convolution_native_group_norm_34", linkageName: "triton_red_fused__unsafe_index_convolution_native_group_norm_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 26, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 41, column: 41, scope: !7)
!22 = !DILocation(line: 54, column: 69, scope: !7)
!23 = !DILocation(line: 54, column: 64, scope: !7)
!24 = !DILocation(line: 63, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 41, column: 34, scope: !7)
!27 = !DILocation(line: 41, column: 46, scope: !7)
!28 = !DILocation(line: 42, column: 39, scope: !7)
!29 = !DILocation(line: 43, column: 34, scope: !7)
!30 = !DILocation(line: 43, column: 39, scope: !7)
!31 = !DILocation(line: 47, column: 36, scope: !7)
!32 = !DILocation(line: 50, column: 36, scope: !7)
!33 = !DILocation(line: 53, column: 39, scope: !7)
!34 = !DILocation(line: 54, column: 35, scope: !7)
!35 = !DILocation(line: 54, column: 74, scope: !7)
!36 = !DILocation(line: 55, column: 24, scope: !7)
!37 = !DILocation(line: 63, column: 29, scope: !7)
!38 = !DILocation(line: 63, column: 51, scope: !7)
!39 = !DILocation(line: 62, column: 66, scope: !7)
!40 = !DILocation(line: 60, column: 62, scope: !7)
!41 = !DILocation(line: 37, column: 23, scope: !7)
!42 = !DILocation(line: 38, column: 25, scope: !7)
!43 = !DILocation(line: 38, column: 31, scope: !7)
!44 = !DILocation(line: 39, column: 23, scope: !7)
!45 = !DILocation(line: 41, column: 39, scope: !7)
!46 = !DILocation(line: 42, column: 34, scope: !7)
!47 = !DILocation(line: 183, column: 24, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 58, column: 55, scope: !7)
!51 = !DILocation(line: 184, column: 30, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 185, column: 34, scope: !48, inlinedAt: !50)
!53 = !DILocation(line: 185, column: 26, scope: !48, inlinedAt: !50)
!54 = !DILocation(line: 186, column: 39, scope: !48, inlinedAt: !50)
!55 = !DILocation(line: 186, column: 31, scope: !48, inlinedAt: !50)
!56 = !DILocation(line: 186, column: 22, scope: !48, inlinedAt: !50)
!57 = !DILocation(line: 61, column: 58, scope: !7)
!58 = distinct !{!58, !59}
!59 = !{!"llvm.loop.peeled.count", i32 1}
!60 = !DILocation(line: 204, column: 46, scope: !48, inlinedAt: !61)
!61 = !DILocation(line: 65, column: 44, scope: !7)
!62 = !DILocation(line: 192, column: 21, scope: !63, inlinedAt: !61)
!63 = distinct !DILexicalBlockFile(scope: !48, file: !49, discriminator: 0)
!64 = !DILocation(line: 193, column: 28, scope: !63, inlinedAt: !61)
!65 = !DILocation(line: 194, column: 39, scope: !63, inlinedAt: !61)
!66 = !DILocation(line: 194, column: 60, scope: !63, inlinedAt: !61)
!67 = !DILocation(line: 194, column: 49, scope: !63, inlinedAt: !61)
!68 = !DILocation(line: 196, column: 25, scope: !63, inlinedAt: !61)
!69 = !DILocation(line: 196, column: 17, scope: !63, inlinedAt: !61)
!70 = !DILocation(line: 197, column: 15, scope: !63, inlinedAt: !61)
!71 = !DILocation(line: 197, column: 30, scope: !63, inlinedAt: !61)
!72 = !DILocation(line: 197, column: 38, scope: !63, inlinedAt: !61)
!73 = !DILocation(line: 197, column: 49, scope: !63, inlinedAt: !61)
!74 = !DILocation(line: 197, column: 22, scope: !63, inlinedAt: !61)
!75 = !DILocation(line: 70, column: 25, scope: !7)
!76 = !DILocation(line: 70, column: 37, scope: !7)
!77 = !DILocation(line: 71, column: 25, scope: !7)
!78 = !DILocation(line: 71, column: 37, scope: !7)
!79 = !DILocation(line: 72, column: 25, scope: !7)
!80 = !DILocation(line: 72, column: 37, scope: !7)
!81 = !DILocation(line: 72, column: 4, scope: !7)
