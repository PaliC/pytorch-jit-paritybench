; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 1, !dbg !14
  %14 = or disjoint i32 %12, 2, !dbg !14
  %15 = or disjoint i32 %12, 3, !dbg !14
  %16 = or disjoint i32 %12, 513, !dbg !14
  %17 = or disjoint i32 %12, 514, !dbg !14
  %18 = or disjoint i32 %12, 515, !dbg !14
  %19 = and i32 %10, 127, !dbg !14
  %20 = or disjoint i32 %19, 128, !dbg !14
  %21 = or disjoint i32 %19, 256, !dbg !14
  %22 = or disjoint i32 %19, 384, !dbg !14
  %23 = or disjoint i32 %9, %12, !dbg !15
  %24 = or disjoint i32 %9, %13, !dbg !15
  %25 = or disjoint i32 %9, %14, !dbg !15
  %26 = or disjoint i32 %9, %15, !dbg !15
  %27 = or disjoint i32 %23, 512, !dbg !15
  %28 = or disjoint i32 %9, %16, !dbg !15
  %29 = or disjoint i32 %9, %17, !dbg !15
  %30 = or disjoint i32 %9, %18, !dbg !15
  %31 = or disjoint i32 %9, %19, !dbg !15
  %32 = or disjoint i32 %9, %20, !dbg !15
  %33 = or disjoint i32 %9, %21, !dbg !15
  %34 = or disjoint i32 %9, %22, !dbg !15
  %35 = or disjoint i32 %31, 512, !dbg !15
  %36 = or disjoint i32 %31, 640, !dbg !15
  %37 = or disjoint i32 %31, 768, !dbg !15
  %38 = or disjoint i32 %31, 896, !dbg !15
  %39 = icmp slt i32 %23, 1024, !dbg !16
  %40 = icmp slt i32 %27, 1024, !dbg !16
  %41 = icmp slt i32 %31, 1024, !dbg !16
  %42 = icmp slt i32 %32, 1024, !dbg !16
  %43 = icmp slt i32 %33, 1024, !dbg !16
  %44 = icmp slt i32 %34, 1024, !dbg !16
  %45 = icmp slt i32 %35, 1024, !dbg !16
  %46 = icmp slt i32 %36, 1024, !dbg !16
  %47 = icmp slt i32 %37, 1024, !dbg !16
  %48 = icmp slt i32 %38, 1024, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %49 = sdiv i32 %.frozen, 64, !dbg !17
  %50 = mul i32 %49, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %50, !dbg !18
  %51 = shl i32 %23, 6, !dbg !19
  %52 = shl i32 %24, 6, !dbg !19
  %53 = shl i32 %25, 6, !dbg !19
  %54 = shl i32 %26, 6, !dbg !19
  %55 = shl i32 %27, 6, !dbg !19
  %56 = shl i32 %28, 6, !dbg !19
  %57 = shl i32 %29, 6, !dbg !19
  %58 = shl i32 %30, 6, !dbg !19
  %59 = shl i32 %31, 6, !dbg !19
  %60 = shl i32 %32, 6, !dbg !19
  %61 = shl i32 %33, 6, !dbg !19
  %62 = shl i32 %34, 6, !dbg !19
  %63 = shl i32 %35, 6, !dbg !19
  %64 = shl i32 %36, 6, !dbg !19
  %65 = shl i32 %37, 6, !dbg !19
  %66 = shl i32 %38, 6, !dbg !19
  %67 = shl i32 %49, 16, !dbg !20
  %68 = add i32 %67, %.decomposed, !dbg !21
  %69 = add i32 %68, %51, !dbg !22
  %70 = add i32 %68, %52, !dbg !22
  %71 = add i32 %68, %53, !dbg !22
  %72 = add i32 %68, %54, !dbg !22
  %73 = add i32 %68, %55, !dbg !22
  %74 = add i32 %68, %56, !dbg !22
  %75 = add i32 %68, %57, !dbg !22
  %76 = add i32 %68, %58, !dbg !22
  %77 = add i32 %68, %59, !dbg !22
  %78 = add i32 %68, %60, !dbg !22
  %79 = add i32 %68, %61, !dbg !22
  %80 = add i32 %68, %62, !dbg !22
  %81 = add i32 %68, %63, !dbg !22
  %82 = add i32 %68, %64, !dbg !22
  %83 = add i32 %68, %65, !dbg !22
  %84 = add i32 %68, %66, !dbg !22
  %85 = sext i32 %69 to i64, !dbg !23
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !23
  %87 = sext i32 %70 to i64, !dbg !23
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !23
  %89 = sext i32 %71 to i64, !dbg !23
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !23
  %91 = sext i32 %72 to i64, !dbg !23
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !23
  %93 = sext i32 %73 to i64, !dbg !23
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !23
  %95 = sext i32 %74 to i64, !dbg !23
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !23
  %97 = sext i32 %75 to i64, !dbg !23
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !23
  %99 = sext i32 %76 to i64, !dbg !23
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !23
  %101 = and i1 %7, %39, !dbg !24
  %102 = and i1 %40, %7, !dbg !24
  %103 = and i1 %7, %41, !dbg !24
  %104 = and i1 %7, %42, !dbg !24
  %105 = and i1 %7, %43, !dbg !24
  %106 = and i1 %7, %44, !dbg !24
  %107 = and i1 %45, %7, !dbg !24
  %108 = and i1 %46, %7, !dbg !24
  %109 = and i1 %47, %7, !dbg !24
  %110 = and i1 %48, %7, !dbg !24
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %101) #2, !dbg !25
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %101) #2, !dbg !25
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %101) #2, !dbg !25
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %101) #2, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %102) #2, !dbg !25
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %102) #2, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %102) #2, !dbg !25
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %102) #2, !dbg !25
  %119 = shl i32 %6, 10, !dbg !26
  %120 = add i32 %23, %119, !dbg !27
  %121 = add i32 %119, %27, !dbg !27
  %122 = sext i32 %120 to i64, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !28
  %124 = sext i32 %121 to i64, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %111, i32 %112, i32 %113, i32 %114, ptr addrspace(1) %123, i1 %101) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %116, i32 %117, i32 %118, ptr addrspace(1) %125, i1 %102) #2, !dbg !29
  %126 = sext i32 %77 to i64, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !30
  %128 = sext i32 %78 to i64, !dbg !30
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !30
  %130 = sext i32 %79 to i64, !dbg !30
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !30
  %132 = sext i32 %80 to i64, !dbg !30
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !30
  %134 = sext i32 %81 to i64, !dbg !30
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !30
  %136 = sext i32 %82 to i64, !dbg !30
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !30
  %138 = sext i32 %83 to i64, !dbg !30
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !30
  %140 = sext i32 %84 to i64, !dbg !30
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !30
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %143 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !31
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %145 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !31
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %147 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !31
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !31
  %149 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !31
  %151 = load i32, ptr addrspace(3) %150, align 4, !dbg !31
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !31
  %153 = load i32, ptr addrspace(3) %152, align 4, !dbg !31
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !31
  %155 = load i32, ptr addrspace(3) %154, align 4, !dbg !31
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !31
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %158 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %158, i1 true) #2, !dbg !31
  %159 = insertelement <1 x i32> poison, i32 %116, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %159, i1 true) #2, !dbg !31
  %160 = insertelement <1 x i32> poison, i32 %117, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %160, i1 true) #2, !dbg !31
  %161 = insertelement <1 x i32> poison, i32 %118, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %161, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %162 = load i32, ptr addrspace(3) %150, align 4, !dbg !31
  %163 = load i32, ptr addrspace(3) %152, align 4, !dbg !31
  %164 = load i32, ptr addrspace(3) %154, align 4, !dbg !31
  %165 = load i32, ptr addrspace(3) %156, align 4, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %127, i1 %103) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %129, i1 %104) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %131, i1 %105) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %133, i1 %106) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %135, i1 %107) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %137, i1 %108) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %139, i1 %109) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %141, i1 %110) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4oxjzt2n42b3yg3cp62fn4iy7hak35qabmjqmelsal32eb35am6.py", directory: "inductor_cache/4o")
!4 = !{ptr @triton_poi_fused_convolution_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_7", linkageName: "triton_poi_fused_convolution_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 49, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 62, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 25, scope: !7)
!29 = !DILocation(line: 33, column: 46, scope: !7)
!30 = !DILocation(line: 34, column: 25, scope: !7)
!31 = !DILocation(line: 34, column: 55, scope: !7)
!32 = !DILocation(line: 34, column: 4, scope: !7)
