; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %14 = shl i32 %13, 2, !dbg !11
  %15 = and i32 %14, 1020, !dbg !11
  %16 = srem i32 %12, 64, !dbg !12
  %17 = shl i32 %12, 10, !dbg !13
  %18 = or disjoint i32 %17, %15, !dbg !14
  %19 = sext i32 %18 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %22 = sext i32 %16 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #5, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #5, !dbg !30
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #5, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #5, !dbg !30
  %56 = fadd float %45, 0x3EE4F8B580000000, !dbg !31
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i11 = icmp eq i32 %63, 0, !dbg !32
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i14 = icmp eq i32 %64, 0, !dbg !32
  br i1 %.not.i11, label %70, label %65, !dbg !32

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %68, label %66, !dbg !32

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %73, label %71, !dbg !32

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %66, %68, %71, %73
  %.0.i13 = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %76 = bitcast i32 %75 to float, !dbg !20
  %77 = bitcast i32 %34 to float, !dbg !22
  %78 = fadd float %76, %77, !dbg !33
  %79 = bitcast i32 %39 to float, !dbg !24
  %80 = fsub float %78, %79, !dbg !34
  %81 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %82 = bitcast i32 %81 to float, !dbg !20
  %83 = fadd float %82, %77, !dbg !33
  %84 = fsub float %83, %79, !dbg !34
  %85 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %86 = bitcast i32 %85 to float, !dbg !20
  %87 = fadd float %86, %77, !dbg !33
  %88 = fsub float %87, %79, !dbg !34
  %89 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %90 = bitcast i32 %89 to float, !dbg !20
  %91 = fadd float %90, %77, !dbg !33
  %92 = fsub float %91, %79, !dbg !34
  %93 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %94 = bitcast i32 %93 to float, !dbg !16
  %95 = bitcast i32 %27 to float, !dbg !18
  %96 = fadd float %94, %95, !dbg !35
  %97 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %98 = bitcast i32 %97 to float, !dbg !16
  %99 = fadd float %98, %95, !dbg !35
  %100 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %101 = bitcast i32 %100 to float, !dbg !16
  %102 = fadd float %101, %95, !dbg !35
  %103 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %104 = bitcast i32 %103 to float, !dbg !16
  %105 = fadd float %104, %95, !dbg !35
  %106 = bitcast i32 %55 to float, !dbg !30
  %107 = bitcast i32 %50 to float, !dbg !28
  %108 = lshr i32 %13, 5, !dbg !11
  %109 = and i32 %13, 31, !dbg !11
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !36
  %111 = fmul float %92, %110, !dbg !37
  %112 = fmul float %88, %110, !dbg !37
  %113 = fmul float %84, %110, !dbg !37
  %114 = fmul float %80, %110, !dbg !37
  %115 = fmul float %111, %107, !dbg !38
  %116 = fmul float %112, %107, !dbg !38
  %117 = fmul float %113, %107, !dbg !38
  %118 = fmul float %114, %107, !dbg !38
  %119 = fadd float %115, %106, !dbg !39
  %120 = fadd float %116, %106, !dbg !39
  %121 = fadd float %117, %106, !dbg !39
  %122 = fadd float %118, %106, !dbg !39
  %123 = fadd float %105, %119, !dbg !40
  %124 = fadd float %102, %120, !dbg !40
  %125 = fadd float %99, %121, !dbg !40
  %126 = fadd float %96, %122, !dbg !40
  %127 = fadd float %123, %124, !dbg !41
  %128 = fadd float %125, %127, !dbg !41
  %129 = fadd float %126, %128, !dbg !41
  %130 = bitcast float %129 to i32, !dbg !46
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 16, i32 31), !dbg !46
  %132 = bitcast i32 %131 to float, !dbg !46
  %133 = fadd float %129, %132, !dbg !41
  %134 = bitcast float %133 to i32, !dbg !46
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !46
  %136 = bitcast i32 %135 to float, !dbg !46
  %137 = fadd float %133, %136, !dbg !41
  %138 = bitcast float %137 to i32, !dbg !46
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !46
  %140 = bitcast i32 %139 to float, !dbg !46
  %141 = fadd float %137, %140, !dbg !41
  %142 = bitcast float %141 to i32, !dbg !46
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !46
  %144 = bitcast i32 %143 to float, !dbg !46
  %145 = fadd float %141, %144, !dbg !41
  %146 = bitcast float %145 to i32, !dbg !46
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !46
  %148 = bitcast i32 %147 to float, !dbg !46
  %149 = fadd float %145, %148, !dbg !41
  %150 = icmp eq i32 %109, 0, !dbg !46
  %151 = and i32 %108, 7, !dbg !46
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !46
  %153 = bitcast float %149 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 %150) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %154 = icmp slt i32 %13, 8, !dbg !46
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !46
  %156 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %155, i1 %154) #5, !dbg !46
  %157 = bitcast i32 %156 to float, !dbg !46
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 4, i32 31), !dbg !46
  %159 = bitcast i32 %158 to float, !dbg !46
  %160 = fadd float %157, %159, !dbg !41
  %161 = bitcast float %160 to i32, !dbg !46
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !46
  %163 = bitcast i32 %162 to float, !dbg !46
  %164 = fadd float %160, %163, !dbg !41
  %165 = bitcast float %164 to i32, !dbg !46
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 1, i32 31), !dbg !46
  %167 = bitcast i32 %166 to float, !dbg !46
  %168 = fadd float %164, %167, !dbg !41
  %169 = and i32 %13, 7, !dbg !46
  %170 = icmp eq i32 %169, 0, !dbg !46
  %171 = and i1 %154, %170, !dbg !46
  %172 = bitcast float %168 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %172, i1 %171) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %173 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !46
  %174 = fadd float %173, 0.000000e+00, !dbg !47
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float 1.024000e+03) #5, !dbg !51
  %176 = bitcast float %105 to i32, !dbg !52
  %177 = bitcast float %102 to i32, !dbg !52
  %178 = bitcast float %99 to i32, !dbg !52
  %179 = bitcast float %96 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %176, i32 %177, i32 %178, i32 %179, ptr addrspace(1) %20, i1 true) #5, !dbg !52
  %180 = bitcast float %91 to i32, !dbg !53
  %181 = bitcast float %87 to i32, !dbg !53
  %182 = bitcast float %83 to i32, !dbg !53
  %183 = bitcast float %78 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %180, i32 %181, i32 %182, i32 %183, ptr addrspace(1) %28, i1 true) #5, !dbg !53
  %184 = getelementptr float, ptr addrspace(1) %9, i64 %19, !dbg !54
  %185 = bitcast float %123 to i32, !dbg !55
  %186 = bitcast float %124 to i32, !dbg !55
  %187 = bitcast float %125 to i32, !dbg !55
  %188 = bitcast float %126 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %185, i32 %186, i32 %187, i32 %188, ptr addrspace(1) %184, i1 true) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %189 = sext i32 %12 to i64, !dbg !57
  %190 = getelementptr float, ptr addrspace(1) %2, i64 %189, !dbg !57
  %urem = and i32 %13, 255, !dbg !58
  %191 = icmp eq i32 %urem, 0, !dbg !58
  %192 = bitcast float %175 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %192, ptr addrspace(1) %190, i1 %191) #5, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5akbau6lrkgsrplrqnaobjdqoisytdur4fxq44ywcbxm7r3kdzo.py", directory: "inductor_cache/5a")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_32, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_32", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 44, scope: !7)
!14 = !DILocation(line: 33, column: 39, scope: !7)
!15 = !DILocation(line: 33, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 49, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 34, scope: !7)
!20 = !DILocation(line: 35, column: 49, scope: !7)
!21 = !DILocation(line: 36, column: 30, scope: !7)
!22 = !DILocation(line: 36, column: 35, scope: !7)
!23 = !DILocation(line: 37, column: 30, scope: !7)
!24 = !DILocation(line: 37, column: 35, scope: !7)
!25 = !DILocation(line: 38, column: 30, scope: !7)
!26 = !DILocation(line: 38, column: 35, scope: !7)
!27 = !DILocation(line: 39, column: 31, scope: !7)
!28 = !DILocation(line: 39, column: 36, scope: !7)
!29 = !DILocation(line: 40, column: 31, scope: !7)
!30 = !DILocation(line: 40, column: 36, scope: !7)
!31 = !DILocation(line: 45, column: 19, scope: !7)
!32 = !DILocation(line: 46, column: 27, scope: !7)
!33 = !DILocation(line: 42, column: 18, scope: !7)
!34 = !DILocation(line: 43, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 51, column: 19, scope: !7)
!38 = !DILocation(line: 52, column: 20, scope: !7)
!39 = !DILocation(line: 53, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 19, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !45)
!42 = distinct !DILexicalBlockFile(scope: !44, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!45 = !DILocation(line: 56, column: 59, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !44, inlinedAt: !45)
!47 = !DILocation(line: 73, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 56, column: 45, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 49, scope: !7)
!53 = !DILocation(line: 60, column: 49, scope: !7)
!54 = !DILocation(line: 61, column: 25, scope: !7)
!55 = !DILocation(line: 61, column: 47, scope: !7)
!56 = !DILocation(line: 62, column: 4, scope: !7)
!57 = !DILocation(line: 63, column: 28, scope: !7)
!58 = !DILocation(line: 63, column: 40, scope: !7)
!59 = !DILocation(line: 63, column: 4, scope: !7)
