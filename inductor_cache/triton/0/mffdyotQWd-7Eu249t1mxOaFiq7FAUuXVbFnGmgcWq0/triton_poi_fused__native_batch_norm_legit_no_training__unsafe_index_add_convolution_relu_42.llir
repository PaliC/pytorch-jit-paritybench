; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) nocapture readnone %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 6, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 62, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = icmp slt i32 %21, 64, !dbg !14
  %23 = srem i32 %21, 4, !dbg !15
  %24 = sdiv i32 %21, 16, !dbg !16
  %25 = sext i32 %21 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !17
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %22) #3, !dbg !18
  %28 = sext i32 %23 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %22) #3, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %22) #3, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !23
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %22) #3, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !25
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %22) #3, !dbg !26
  %37 = shl nsw i32 %24, 2, !dbg !27
  %38 = add nsw i32 %37, %23, !dbg !28
  %39 = sext i32 %38 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !29
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %22) #3, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !31
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %22) #3, !dbg !32
  %44 = getelementptr float, ptr addrspace(1) %8, i64 %39, !dbg !33
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %22) #3, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !35
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %22) #3, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !37
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %22) #3, !dbg !38
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !38
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !38
  %52 = bitcast i32 %50 to float, !dbg !38
  %53 = bitcast i32 %51 to float, !dbg !38
  %54 = getelementptr float, ptr addrspace(1) %11, i64 %28, !dbg !39
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %22) #3, !dbg !40
  %56 = getelementptr float, ptr addrspace(1) %12, i64 %28, !dbg !41
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %22) #3, !dbg !42
  %58 = fadd float %52, 0x3EE4F8B580000000, !dbg !43
  %59 = fadd float %53, 0x3EE4F8B580000000, !dbg !43
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %60, 0, !dbg !44
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %61, 0, !dbg !44
  br i1 %.not.i, label %67, label %62, !dbg !44

62:                                               ; preds = %15
  br i1 %.not1.i, label %65, label %63, !dbg !44

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

67:                                               ; preds = %15
  br i1 %.not1.i, label %70, label %68, !dbg !44

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !44
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %72, 0, !dbg !44
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %73, 0, !dbg !44
  br i1 %.not.i1, label %79, label %74, !dbg !44

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !44

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !44

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %75, %77, %80, %82
  %.0.i3 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !44
  %84 = extractvalue { i32, i32 } %27, 1, !dbg !18
  %85 = bitcast i32 %84 to float, !dbg !18
  %86 = extractvalue { i32, i32 } %30, 1, !dbg !20
  %87 = bitcast i32 %86 to float, !dbg !20
  %88 = fadd float %85, %87, !dbg !45
  %89 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %90 = extractvalue { i32, i32 } %34, 1, !dbg !24
  %91 = extractvalue { i32, i32 } %36, 1, !dbg !26
  %92 = extractvalue { i32, i32 } %41, 1, !dbg !30
  %93 = extractvalue { i32, i32 } %43, 1, !dbg !32
  %94 = extractvalue { i32, i32 } %45, 1, !dbg !34
  %95 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !22
  %96 = insertelement <2 x i32> %95, i32 %92, i64 1, !dbg !22
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !22
  %98 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !24
  %99 = insertelement <2 x i32> %98, i32 %93, i64 1, !dbg !24
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !24
  %101 = fadd <2 x float> %97, %100, !dbg !46
  %102 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !26
  %103 = insertelement <2 x i32> %102, i32 %94, i64 1, !dbg !26
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !26
  %105 = fadd <2 x float> %101, %104, !dbg !47
  %106 = extractelement <2 x float> %105, i64 0, !dbg !48
  %107 = fadd float %88, %106, !dbg !48
  %108 = extractelement <2 x float> %105, i64 1, !dbg !49
  %109 = fadd float %107, %108, !dbg !49
  %110 = extractvalue { i32, i32 } %47, 1, !dbg !36
  %111 = bitcast i32 %110 to float, !dbg !36
  %112 = fsub float %109, %111, !dbg !50
  %113 = extractvalue { i32, i32 } %27, 0, !dbg !18
  %114 = bitcast i32 %113 to float, !dbg !18
  %115 = extractvalue { i32, i32 } %30, 0, !dbg !20
  %116 = bitcast i32 %115 to float, !dbg !20
  %117 = fadd float %114, %116, !dbg !45
  %118 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %119 = extractvalue { i32, i32 } %34, 0, !dbg !24
  %120 = extractvalue { i32, i32 } %36, 0, !dbg !26
  %121 = extractvalue { i32, i32 } %41, 0, !dbg !30
  %122 = extractvalue { i32, i32 } %43, 0, !dbg !32
  %123 = extractvalue { i32, i32 } %45, 0, !dbg !34
  %124 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !22
  %125 = insertelement <2 x i32> %124, i32 %121, i64 1, !dbg !22
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !22
  %127 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !24
  %128 = insertelement <2 x i32> %127, i32 %122, i64 1, !dbg !24
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !24
  %130 = fadd <2 x float> %126, %129, !dbg !46
  %131 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !26
  %132 = insertelement <2 x i32> %131, i32 %123, i64 1, !dbg !26
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !26
  %134 = fadd <2 x float> %130, %133, !dbg !47
  %135 = extractelement <2 x float> %134, i64 0, !dbg !48
  %136 = fadd float %117, %135, !dbg !48
  %137 = extractelement <2 x float> %134, i64 1, !dbg !49
  %138 = fadd float %136, %137, !dbg !49
  %139 = extractvalue { i32, i32 } %47, 0, !dbg !36
  %140 = bitcast i32 %139 to float, !dbg !36
  %141 = fsub float %138, %140, !dbg !50
  %142 = extractvalue { i32, i32 } %57, 1, !dbg !42
  %143 = bitcast i32 %142 to float, !dbg !42
  %144 = extractvalue { i32, i32 } %57, 0, !dbg !42
  %145 = bitcast i32 %144 to float, !dbg !42
  %146 = extractvalue { i32, i32 } %55, 1, !dbg !40
  %147 = bitcast i32 %146 to float, !dbg !40
  %148 = extractvalue { i32, i32 } %55, 0, !dbg !40
  %149 = bitcast i32 %148 to float, !dbg !40
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !51
  %152 = fmul float %141, %150, !dbg !52
  %153 = fmul float %112, %151, !dbg !52
  %154 = fmul float %152, %149, !dbg !53
  %155 = fmul float %153, %147, !dbg !53
  %156 = fadd float %154, %145, !dbg !54
  %157 = fadd float %155, %143, !dbg !54
  %158 = fcmp olt float %156, 0.000000e+00, !dbg !55
  %159 = fcmp olt float %157, 0.000000e+00, !dbg !55
  %160 = select i1 %158, float 0.000000e+00, float %156, !dbg !59
  %161 = select i1 %159, float 0.000000e+00, float %157, !dbg !59
  %162 = bitcast float %138 to i32, !dbg !60
  %163 = bitcast float %109 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %26, i1 %22) #3, !dbg !60
  %164 = getelementptr float, ptr addrspace(1) %13, i64 %25, !dbg !61
  %165 = bitcast float %160 to i32, !dbg !62
  %166 = bitcast float %161 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %165, i32 %166, ptr addrspace(1) %164, i1 %22) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cobti3ixqaw2t2u5k32aqvwd66hc267qica2hczntadja5bintro.py", directory: "inductor_cache/ob")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_42, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_42", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 34, scope: !7)
!18 = !DILocation(line: 29, column: 39, scope: !7)
!19 = !DILocation(line: 30, column: 30, scope: !7)
!20 = !DILocation(line: 30, column: 35, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 38, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 43, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 31, scope: !7)
!34 = !DILocation(line: 38, column: 43, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 36, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 36, scope: !7)
!39 = !DILocation(line: 41, column: 32, scope: !7)
!40 = !DILocation(line: 41, column: 37, scope: !7)
!41 = !DILocation(line: 42, column: 32, scope: !7)
!42 = !DILocation(line: 42, column: 37, scope: !7)
!43 = !DILocation(line: 59, column: 20, scope: !7)
!44 = !DILocation(line: 60, column: 27, scope: !7)
!45 = !DILocation(line: 43, column: 18, scope: !7)
!46 = !DILocation(line: 44, column: 18, scope: !7)
!47 = !DILocation(line: 45, column: 18, scope: !7)
!48 = !DILocation(line: 46, column: 18, scope: !7)
!49 = !DILocation(line: 56, column: 19, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 62, column: 20, scope: !7)
!52 = !DILocation(line: 65, column: 20, scope: !7)
!53 = !DILocation(line: 66, column: 20, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 69, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 70, column: 40, scope: !7)
!61 = !DILocation(line: 71, column: 25, scope: !7)
!62 = !DILocation(line: 71, column: 37, scope: !7)
!63 = !DILocation(line: 71, column: 4, scope: !7)
