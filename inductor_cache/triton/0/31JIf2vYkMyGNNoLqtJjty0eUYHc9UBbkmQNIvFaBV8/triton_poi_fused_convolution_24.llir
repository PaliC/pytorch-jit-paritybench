; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = icmp slt i32 %12, 16, !dbg !14
  %18 = icmp slt i32 %13, 16, !dbg !14
  %19 = icmp slt i32 %14, 16, !dbg !14
  %20 = icmp slt i32 %15, 16, !dbg !14
  %21 = icmp slt i32 %16, 16, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 8, !dbg !16
  %24 = lshr i32 %8, 2, !dbg !17
  %25 = and i32 %24, 63, !dbg !17
  %26 = or disjoint i32 %25, 64, !dbg !17
  %27 = or disjoint i32 %25, 128, !dbg !17
  %28 = or disjoint i32 %25, 192, !dbg !17
  %29 = and i32 %9, 252, !dbg !17
  %30 = or disjoint i32 %23, %25, !dbg !18
  %31 = or disjoint i32 %23, %26, !dbg !18
  %32 = or disjoint i32 %23, %27, !dbg !18
  %33 = or disjoint i32 %23, %28, !dbg !18
  %34 = or disjoint i32 %23, %29, !dbg !18
  %35 = shl i32 %30, 2, !dbg !19
  %36 = shl i32 %31, 2, !dbg !19
  %37 = shl i32 %32, 2, !dbg !19
  %38 = shl i32 %33, 2, !dbg !19
  %39 = shl i32 %12, 12, !dbg !20
  %40 = add i32 %35, %39, !dbg !21
  %41 = add i32 %36, %39, !dbg !21
  %42 = add i32 %37, %39, !dbg !21
  %43 = add i32 %38, %39, !dbg !21
  %44 = sext i32 %40 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = sext i32 %41 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = sext i32 %42 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = sext i32 %43 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %17) #2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = bitcast i32 %54 to float, !dbg !23
  %59 = bitcast i32 %55 to float, !dbg !23
  %60 = bitcast i32 %56 to float, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %17) #2, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = bitcast i32 %65 to float, !dbg !23
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %17) #2, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !23
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !23
  %75 = bitcast i32 %71 to float, !dbg !23
  %76 = bitcast i32 %72 to float, !dbg !23
  %77 = bitcast i32 %73 to float, !dbg !23
  %78 = bitcast i32 %74 to float, !dbg !23
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %17) #2, !dbg !23
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !23
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !23
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !23
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !23
  %84 = bitcast i32 %80 to float, !dbg !23
  %85 = bitcast i32 %81 to float, !dbg !23
  %86 = bitcast i32 %82 to float, !dbg !23
  %87 = bitcast i32 %83 to float, !dbg !23
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 %17) #2, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !24
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !24
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !24
  %93 = bitcast i32 %89 to float, !dbg !24
  %94 = bitcast i32 %90 to float, !dbg !24
  %95 = bitcast i32 %91 to float, !dbg !24
  %96 = bitcast i32 %92 to float, !dbg !24
  %97 = fadd float %57, %93, !dbg !25
  %98 = fadd float %58, %94, !dbg !25
  %99 = fadd float %59, %95, !dbg !25
  %100 = fadd float %60, %96, !dbg !25
  %101 = fadd float %66, %93, !dbg !25
  %102 = fadd float %67, %94, !dbg !25
  %103 = fadd float %68, %95, !dbg !25
  %104 = fadd float %69, %96, !dbg !25
  %105 = fadd float %75, %93, !dbg !25
  %106 = fadd float %76, %94, !dbg !25
  %107 = fadd float %77, %95, !dbg !25
  %108 = fadd float %78, %96, !dbg !25
  %109 = fadd float %84, %93, !dbg !25
  %110 = fadd float %85, %94, !dbg !25
  %111 = fadd float %86, %95, !dbg !25
  %112 = fadd float %87, %96, !dbg !25
  %113 = shl i32 %13, 12, !dbg !26
  %114 = shl i32 %14, 12, !dbg !26
  %115 = shl i32 %15, 12, !dbg !26
  %116 = shl i32 %16, 12, !dbg !26
  %117 = add i32 %34, %113, !dbg !27
  %118 = add i32 %34, %114, !dbg !27
  %119 = add i32 %34, %115, !dbg !27
  %120 = add i32 %34, %116, !dbg !27
  %121 = sext i32 %117 to i64, !dbg !28
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !28
  %123 = sext i32 %118 to i64, !dbg !28
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !28
  %125 = sext i32 %119 to i64, !dbg !28
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !28
  %127 = sext i32 %120 to i64, !dbg !28
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !28
  %129 = shl i32 %8, 10, !dbg !29
  %130 = and i32 %129, 3072, !dbg !29
  %131 = or disjoint i32 %130, %25, !dbg !29
  %132 = and i32 %9, 1020, !dbg !29
  %133 = lshr exact i32 %130, 6, !dbg !29
  %134 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %133, !dbg !29
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %131, !dbg !29
  %136 = bitcast float %97 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !29
  %137 = or disjoint i32 %131, 256, !dbg !29
  %138 = lshr i32 %137, 8, !dbg !29
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !29
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %137, !dbg !29
  %141 = bitcast float %98 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !29
  %142 = or disjoint i32 %131, 512, !dbg !29
  %143 = lshr i32 %142, 8, !dbg !29
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !29
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !29
  %146 = bitcast float %99 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !29
  %147 = or disjoint i32 %131, 768, !dbg !29
  %148 = lshr i32 %147, 8, !dbg !29
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !29
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !29
  %151 = bitcast float %100 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !29
  %152 = or disjoint i32 %131, 64, !dbg !29
  %153 = getelementptr float, ptr addrspace(3) %134, i32 %152, !dbg !29
  %154 = bitcast float %101 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !29
  %155 = or disjoint i32 %131, 320, !dbg !29
  %156 = lshr i32 %155, 8, !dbg !29
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !29
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %155, !dbg !29
  %159 = bitcast float %102 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !29
  %160 = or disjoint i32 %131, 576, !dbg !29
  %161 = lshr i32 %160, 8, !dbg !29
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !29
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %160, !dbg !29
  %164 = bitcast float %103 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !29
  %165 = or disjoint i32 %131, 832, !dbg !29
  %166 = lshr i32 %165, 8, !dbg !29
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !29
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %165, !dbg !29
  %169 = bitcast float %104 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !29
  %170 = or disjoint i32 %131, 128, !dbg !29
  %171 = getelementptr float, ptr addrspace(3) %134, i32 %170, !dbg !29
  %172 = bitcast float %105 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !29
  %173 = or disjoint i32 %131, 384, !dbg !29
  %174 = lshr i32 %173, 8, !dbg !29
  %175 = getelementptr float, ptr addrspace(3) @global_smem, i32 %174, !dbg !29
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %173, !dbg !29
  %177 = bitcast float %106 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !29
  %178 = or disjoint i32 %131, 640, !dbg !29
  %179 = lshr i32 %178, 8, !dbg !29
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !29
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %178, !dbg !29
  %182 = bitcast float %107 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !29
  %183 = or disjoint i32 %131, 896, !dbg !29
  %184 = lshr i32 %183, 8, !dbg !29
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !29
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !29
  %187 = bitcast float %108 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !29
  %188 = or disjoint i32 %131, 192, !dbg !29
  %189 = getelementptr float, ptr addrspace(3) %134, i32 %188, !dbg !29
  %190 = bitcast float %109 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !29
  %191 = or disjoint i32 %131, 448, !dbg !29
  %192 = lshr i32 %191, 8, !dbg !29
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !29
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %191, !dbg !29
  %195 = bitcast float %110 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !29
  %196 = or disjoint i32 %131, 704, !dbg !29
  %197 = lshr i32 %196, 8, !dbg !29
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !29
  %199 = getelementptr float, ptr addrspace(3) %198, i32 %196, !dbg !29
  %200 = bitcast float %111 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !29
  %201 = or disjoint i32 %131, 960, !dbg !29
  %202 = lshr i32 %201, 8, !dbg !29
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %202, !dbg !29
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %201, !dbg !29
  %205 = bitcast float %112 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %206 = lshr i32 %132, 8, !dbg !29
  %207 = or disjoint i32 %206, %132, !dbg !29
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %207, !dbg !29
  %209 = load i32, ptr addrspace(3) %208, align 4, !dbg !29
  %210 = or disjoint i32 %132, 1, !dbg !29
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !29
  %212 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %210, !dbg !29
  %213 = load i32, ptr addrspace(3) %212, align 4, !dbg !29
  %214 = or disjoint i32 %132, 2, !dbg !29
  %215 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %214, !dbg !29
  %216 = load i32, ptr addrspace(3) %215, align 4, !dbg !29
  %217 = or disjoint i32 %132, 3, !dbg !29
  %218 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %217, !dbg !29
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !29
  %220 = or disjoint i32 %132, 1024, !dbg !29
  %221 = lshr i32 %220, 8, !dbg !29
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !29
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !29
  %224 = load i32, ptr addrspace(3) %223, align 4, !dbg !29
  %225 = or disjoint i32 %132, 1025, !dbg !29
  %226 = lshr i32 %225, 8, !dbg !29
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !29
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !29
  %229 = load i32, ptr addrspace(3) %228, align 4, !dbg !29
  %230 = or disjoint i32 %132, 1026, !dbg !29
  %231 = lshr i32 %230, 8, !dbg !29
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !29
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !29
  %234 = load i32, ptr addrspace(3) %233, align 4, !dbg !29
  %235 = or disjoint i32 %132, 1027, !dbg !29
  %236 = lshr i32 %235, 8, !dbg !29
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !29
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !29
  %239 = load i32, ptr addrspace(3) %238, align 4, !dbg !29
  %240 = or disjoint i32 %132, 2048, !dbg !29
  %241 = lshr i32 %240, 8, !dbg !29
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !29
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %240, !dbg !29
  %244 = load i32, ptr addrspace(3) %243, align 4, !dbg !29
  %245 = or disjoint i32 %132, 2049, !dbg !29
  %246 = lshr i32 %245, 8, !dbg !29
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !29
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %245, !dbg !29
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !29
  %250 = or disjoint i32 %132, 2050, !dbg !29
  %251 = lshr i32 %250, 8, !dbg !29
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %251, !dbg !29
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %250, !dbg !29
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !29
  %255 = or disjoint i32 %132, 2051, !dbg !29
  %256 = lshr i32 %255, 8, !dbg !29
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !29
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %255, !dbg !29
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !29
  %260 = or disjoint i32 %132, 3072, !dbg !29
  %261 = lshr i32 %260, 8, !dbg !29
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !29
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %260, !dbg !29
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !29
  %265 = or disjoint i32 %132, 3073, !dbg !29
  %266 = lshr i32 %265, 8, !dbg !29
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !29
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !29
  %269 = load i32, ptr addrspace(3) %268, align 4, !dbg !29
  %270 = or disjoint i32 %132, 3074, !dbg !29
  %271 = lshr i32 %270, 8, !dbg !29
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !29
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !29
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !29
  %275 = or disjoint i32 %132, 3075, !dbg !29
  %276 = lshr i32 %275, 8, !dbg !29
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !29
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !29
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %209, i32 %213, i32 %216, i32 %219, ptr addrspace(1) %122, i1 %18) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %224, i32 %229, i32 %234, i32 %239, ptr addrspace(1) %124, i1 %19) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %249, i32 %254, i32 %259, ptr addrspace(1) %126, i1 %20) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %264, i32 %269, i32 %274, i32 %279, ptr addrspace(1) %128, i1 %21) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7frsypkryrn53bst2igjbqx6ua735hdc6dt7nosllhzt3tpcu4m.py", directory: "inductor_cache/7f")
!4 = !{ptr @triton_poi_fused_convolution_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_24, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_24", linkageName: "triton_poi_fused_convolution_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 48, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 25, scope: !7)
!29 = !DILocation(line: 35, column: 46, scope: !7)
!30 = !DILocation(line: 35, column: 4, scope: !7)
