; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_div_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = icmp slt i32 %9, 12, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %12 = shl i32 %11, 10, !dbg !13
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %14 = shl i32 %13, 2, !dbg !14
  %15 = and i32 %14, 508, !dbg !14
  %16 = or disjoint i32 %15, 512, !dbg !14
  %17 = and i32 %13, 127, !dbg !14
  %18 = or disjoint i32 %17, 128, !dbg !14
  %19 = or disjoint i32 %17, 256, !dbg !14
  %20 = or disjoint i32 %17, 384, !dbg !14
  %21 = or disjoint i32 %17, 512, !dbg !14
  %22 = or disjoint i32 %17, 640, !dbg !14
  %23 = or disjoint i32 %17, 768, !dbg !14
  %24 = or disjoint i32 %17, 896, !dbg !14
  %25 = or disjoint i32 %12, %17, !dbg !15
  %26 = or disjoint i32 %12, %18, !dbg !15
  %27 = or disjoint i32 %12, %19, !dbg !15
  %28 = or disjoint i32 %12, %20, !dbg !15
  %29 = or disjoint i32 %12, %21, !dbg !15
  %30 = or disjoint i32 %12, %22, !dbg !15
  %31 = or disjoint i32 %12, %23, !dbg !15
  %32 = or disjoint i32 %12, %24, !dbg !15
  %.frozen = freeze i32 %9, !dbg !16
  %33 = sdiv i32 %.frozen, 3, !dbg !16
  %34 = mul i32 %33, 3, !dbg !17
  %.decomposed = sub i32 %.frozen, %34, !dbg !17
  %35 = shl i32 %9, 18, !dbg !18
  %36 = or disjoint i32 %35, %15, !dbg !15
  %37 = add i32 %36, %12, !dbg !19
  %38 = or disjoint i32 %35, %16, !dbg !15
  %39 = add i32 %38, %12, !dbg !19
  %40 = sext i32 %37 to i64, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !20
  %42 = sext i32 %39 to i64, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !20
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %10) #2, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !21
  %49 = bitcast i32 %45 to float, !dbg !21
  %50 = bitcast i32 %46 to float, !dbg !21
  %51 = bitcast i32 %47 to float, !dbg !21
  %52 = bitcast i32 %48 to float, !dbg !21
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %10) #2, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !21
  %58 = bitcast i32 %54 to float, !dbg !21
  %59 = bitcast i32 %55 to float, !dbg !21
  %60 = bitcast i32 %56 to float, !dbg !21
  %61 = bitcast i32 %57 to float, !dbg !21
  %62 = sext i32 %.decomposed to i64, !dbg !22
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !22
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %10) #2, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %10) #2, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %10) #2, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %10) #2, !dbg !23
  %68 = bitcast i32 %67 to float, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %10) #2, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %10) #2, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %10) #2, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %10) #2, !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !26
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %10) #2, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !27
  %82 = bitcast i32 %78 to float, !dbg !27
  %83 = bitcast i32 %79 to float, !dbg !27
  %84 = bitcast i32 %80 to float, !dbg !27
  %85 = bitcast i32 %81 to float, !dbg !27
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %10) #2, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !27
  %91 = bitcast i32 %87 to float, !dbg !27
  %92 = bitcast i32 %88 to float, !dbg !27
  %93 = bitcast i32 %89 to float, !dbg !27
  %94 = bitcast i32 %90 to float, !dbg !27
  %95 = fsub float %49, %68, !dbg !28
  %96 = fsub float %50, %68, !dbg !28
  %97 = fsub float %51, %68, !dbg !28
  %98 = fsub float %52, %68, !dbg !28
  %99 = fsub float %58, %68, !dbg !28
  %100 = fsub float %59, %68, !dbg !28
  %101 = fsub float %60, %68, !dbg !28
  %102 = fsub float %61, %68, !dbg !28
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %74) #2, !dbg !29
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %74) #2, !dbg !29
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %74) #2, !dbg !29
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %74) #2, !dbg !29
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %74) #2, !dbg !29
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %74) #2, !dbg !29
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %74) #2, !dbg !29
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %74) #2, !dbg !29
  %111 = fsub float %82, %68, !dbg !30
  %112 = fsub float %83, %68, !dbg !30
  %113 = fsub float %84, %68, !dbg !30
  %114 = fsub float %85, %68, !dbg !30
  %115 = fsub float %91, %68, !dbg !30
  %116 = fsub float %92, %68, !dbg !30
  %117 = fsub float %93, %68, !dbg !30
  %118 = fsub float %94, %68, !dbg !30
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %74) #2, !dbg !31
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %74) #2, !dbg !31
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %74) #2, !dbg !31
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %74) #2, !dbg !31
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %74) #2, !dbg !31
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %74) #2, !dbg !31
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %74) #2, !dbg !31
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %74) #2, !dbg !31
  %127 = mul i32 %25, 3, !dbg !32
  %128 = mul i32 %26, 3, !dbg !32
  %129 = mul i32 %27, 3, !dbg !32
  %130 = mul i32 %28, 3, !dbg !32
  %131 = mul i32 %29, 3, !dbg !32
  %132 = mul i32 %30, 3, !dbg !32
  %133 = mul i32 %31, 3, !dbg !32
  %134 = mul i32 %32, 3, !dbg !32
  %135 = mul i32 %33, 786432, !dbg !33
  %136 = add i32 %135, %.decomposed, !dbg !34
  %137 = add i32 %136, %127, !dbg !35
  %138 = add i32 %136, %128, !dbg !35
  %139 = add i32 %136, %129, !dbg !35
  %140 = add i32 %136, %130, !dbg !35
  %141 = add i32 %136, %131, !dbg !35
  %142 = add i32 %136, %132, !dbg !35
  %143 = add i32 %136, %133, !dbg !35
  %144 = add i32 %136, %134, !dbg !35
  %145 = sext i32 %137 to i64, !dbg !36
  %146 = getelementptr float, ptr addrspace(1) %4, i64 %145, !dbg !36
  %147 = sext i32 %138 to i64, !dbg !36
  %148 = getelementptr float, ptr addrspace(1) %4, i64 %147, !dbg !36
  %149 = sext i32 %139 to i64, !dbg !36
  %150 = getelementptr float, ptr addrspace(1) %4, i64 %149, !dbg !36
  %151 = sext i32 %140 to i64, !dbg !36
  %152 = getelementptr float, ptr addrspace(1) %4, i64 %151, !dbg !36
  %153 = sext i32 %141 to i64, !dbg !36
  %154 = getelementptr float, ptr addrspace(1) %4, i64 %153, !dbg !36
  %155 = sext i32 %142 to i64, !dbg !36
  %156 = getelementptr float, ptr addrspace(1) %4, i64 %155, !dbg !36
  %157 = sext i32 %143 to i64, !dbg !36
  %158 = getelementptr float, ptr addrspace(1) %4, i64 %157, !dbg !36
  %159 = sext i32 %144 to i64, !dbg !36
  %160 = getelementptr float, ptr addrspace(1) %4, i64 %159, !dbg !36
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !37
  %162 = bitcast float %103 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !37
  %163 = or disjoint i32 %15, 1, !dbg !37
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163, !dbg !37
  %165 = bitcast float %104 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !37
  %166 = or disjoint i32 %15, 2, !dbg !37
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !37
  %168 = bitcast float %105 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !37
  %169 = or disjoint i32 %15, 3, !dbg !37
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !37
  %171 = bitcast float %106 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !37
  %173 = load i32, ptr addrspace(3) %172, align 4, !dbg !37
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !37
  %175 = load i32, ptr addrspace(3) %174, align 4, !dbg !37
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !37
  %177 = load i32, ptr addrspace(3) %176, align 4, !dbg !37
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !37
  %179 = load i32, ptr addrspace(3) %178, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %180 = bitcast float %107 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %180, i1 true) #2, !dbg !37
  %181 = bitcast float %108 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %181, i1 true) #2, !dbg !37
  %182 = bitcast float %109 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %182, i1 true) #2, !dbg !37
  %183 = bitcast float %110 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %183, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %184 = load i32, ptr addrspace(3) %172, align 4, !dbg !37
  %185 = load i32, ptr addrspace(3) %174, align 4, !dbg !37
  %186 = load i32, ptr addrspace(3) %176, align 4, !dbg !37
  %187 = load i32, ptr addrspace(3) %178, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %146, i1 %10) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %148, i1 %10) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %177, ptr addrspace(1) %150, i1 %10) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %179, ptr addrspace(1) %152, i1 %10) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %154, i1 %10) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %156, i1 %10) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %186, ptr addrspace(1) %158, i1 %10) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %187, ptr addrspace(1) %160, i1 %10) #2, !dbg !37
  %188 = getelementptr float, ptr addrspace(1) %5, i64 %145, !dbg !38
  %189 = getelementptr float, ptr addrspace(1) %5, i64 %147, !dbg !38
  %190 = getelementptr float, ptr addrspace(1) %5, i64 %149, !dbg !38
  %191 = getelementptr float, ptr addrspace(1) %5, i64 %151, !dbg !38
  %192 = getelementptr float, ptr addrspace(1) %5, i64 %153, !dbg !38
  %193 = getelementptr float, ptr addrspace(1) %5, i64 %155, !dbg !38
  %194 = getelementptr float, ptr addrspace(1) %5, i64 %157, !dbg !38
  %195 = getelementptr float, ptr addrspace(1) %5, i64 %159, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %196 = bitcast float %119 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %196, i1 true) #2, !dbg !39
  %197 = bitcast float %120 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %197, i1 true) #2, !dbg !39
  %198 = bitcast float %121 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %198, i1 true) #2, !dbg !39
  %199 = bitcast float %122 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %199, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %200 = load i32, ptr addrspace(3) %172, align 4, !dbg !39
  %201 = load i32, ptr addrspace(3) %174, align 4, !dbg !39
  %202 = load i32, ptr addrspace(3) %176, align 4, !dbg !39
  %203 = load i32, ptr addrspace(3) %178, align 4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %204 = bitcast float %123 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %204, i1 true) #2, !dbg !39
  %205 = bitcast float %124 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %205, i1 true) #2, !dbg !39
  %206 = bitcast float %125 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %206, i1 true) #2, !dbg !39
  %207 = bitcast float %126 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %207, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %208 = load i32, ptr addrspace(3) %172, align 4, !dbg !39
  %209 = load i32, ptr addrspace(3) %174, align 4, !dbg !39
  %210 = load i32, ptr addrspace(3) %176, align 4, !dbg !39
  %211 = load i32, ptr addrspace(3) %178, align 4, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %188, i1 %10) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %201, ptr addrspace(1) %189, i1 %10) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %202, ptr addrspace(1) %190, i1 %10) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %203, ptr addrspace(1) %191, i1 %10) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %192, i1 %10) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %193, i1 %10) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %194, i1 %10) #2, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %195, i1 %10) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyri5puopb75qgsijlw6g7o2ivyk66amgsv7mjoi5oswinzn3ooj.py", directory: "inductor_cache/yr")
!4 = !{ptr @triton_poi_fused_div_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_sub_0", linkageName: "triton_poi_fused_div_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 42, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 47, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 32, scope: !7)
!33 = !DILocation(line: 40, column: 44, scope: !7)
!34 = !DILocation(line: 40, column: 30, scope: !7)
!35 = !DILocation(line: 40, column: 37, scope: !7)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 55, scope: !7)
!38 = !DILocation(line: 41, column: 25, scope: !7)
!39 = !DILocation(line: 41, column: 55, scope: !7)
!40 = !DILocation(line: 41, column: 4, scope: !7)
