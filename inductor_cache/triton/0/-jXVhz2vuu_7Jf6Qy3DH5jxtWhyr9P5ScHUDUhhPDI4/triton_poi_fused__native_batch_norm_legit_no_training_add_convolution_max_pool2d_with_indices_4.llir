; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = srem i32 %16, 1024, !dbg !14
  %18 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %19 = shufflevector <2 x i32> %18, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %20 = sdiv <2 x i32> %19, <i32 32768, i32 1024>, !dbg !15
  %21 = srem <2 x i32> %20, splat (i32 32), !dbg !16
  %22 = sext i32 %16 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !18
  %25 = sext i32 %17 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !21
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !23
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !24
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !24
  %34 = bitcast i32 %32 to float, !dbg !24
  %35 = bitcast i32 %33 to float, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !25
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !27
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !28
  %40 = extractelement <2 x i32> %21, i64 0, !dbg !29
  %41 = icmp sgt i32 %40, 0, !dbg !30
  %42 = extractelement <2 x i32> %21, i64 1, !dbg !29
  %43 = icmp sgt i32 %42, 0, !dbg !31
  %44 = and i1 %41, %43, !dbg !32
  %45 = shl nsw i32 %42, 11, !dbg !33
  %46 = extractelement <2 x i32> %20, i64 0, !dbg !34
  %47 = shl i32 %46, 17, !dbg !34
  %48 = add i32 %47, %17, !dbg !35
  %49 = add i32 %48, -66560, !dbg !36
  %50 = add i32 %49, %45, !dbg !37
  %51 = sext i32 %50 to i64, !dbg !38
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !38
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %44, i32 -8388608, i1 %44, i32 -8388608, i1 %44) #3, !dbg !39
  %54 = icmp sgt i32 %42, -1, !dbg !40
  %55 = and i1 %41, %54, !dbg !41
  %56 = add i32 %48, -65536, !dbg !42
  %57 = add i32 %56, %45, !dbg !43
  %58 = sext i32 %57 to i64, !dbg !44
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !44
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %55, i32 -8388608, i1 %55, i32 -8388608, i1 %55) #3, !dbg !45
  %61 = add i32 %48, -64512, !dbg !46
  %62 = add i32 %61, %45, !dbg !47
  %63 = sext i32 %62 to i64, !dbg !48
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !48
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %55, i32 -8388608, i1 %55, i32 -8388608, i1 %55) #3, !dbg !49
  %66 = icmp sgt i32 %40, -1, !dbg !50
  %67 = and i1 %66, %43, !dbg !51
  %68 = add i32 %48, -1024, !dbg !52
  %69 = add i32 %68, %45, !dbg !53
  %70 = sext i32 %69 to i64, !dbg !54
  %71 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !54
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %71, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #3, !dbg !55
  %73 = or i32 %40, %42, !dbg !29
  %74 = icmp sgt i32 %73, -1, !dbg !29
  %75 = add i32 %48, %45, !dbg !56
  %76 = sext i32 %75 to i64, !dbg !57
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !57
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 %74, i32 -8388608, i1 %74, i32 -8388608, i1 %74) #3, !dbg !58
  %79 = add i32 %48, 1024, !dbg !59
  %80 = add i32 %79, %45, !dbg !60
  %81 = sext i32 %80 to i64, !dbg !61
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !61
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %82, i1 %74, i32 -8388608, i1 %74, i32 -8388608, i1 %74) #3, !dbg !62
  %84 = add i32 %48, 64512, !dbg !63
  %85 = add i32 %84, %45, !dbg !64
  %86 = sext i32 %85 to i64, !dbg !65
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !65
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #3, !dbg !66
  %89 = add i32 %48, 65536, !dbg !67
  %90 = add i32 %89, %45, !dbg !68
  %91 = sext i32 %90 to i64, !dbg !69
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !69
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %92, i1 %74, i32 -8388608, i1 %74, i32 -8388608, i1 %74) #3, !dbg !70
  %94 = add i32 %48, 66560, !dbg !71
  %95 = add i32 %94, %45, !dbg !72
  %96 = sext i32 %95 to i64, !dbg !73
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %96, !dbg !73
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %97, i1 %74, i32 -8388608, i1 %74, i32 -8388608, i1 %74) #3, !dbg !74
  %99 = fadd float %34, 0x3EE4F8B580000000, !dbg !75
  %100 = fadd float %35, 0x3EE4F8B580000000, !dbg !75
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i = icmp eq i32 %101, 0, !dbg !76
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i = icmp eq i32 %102, 0, !dbg !76
  br i1 %.not.i, label %108, label %103, !dbg !76

103:                                              ; preds = %10
  br i1 %.not1.i, label %106, label %104, !dbg !76

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

108:                                              ; preds = %10
  br i1 %.not1.i, label %111, label %109, !dbg !76

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

__nv_sqrtf.exit:                                  ; preds = %104, %106, %109, %111
  %.0.i = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !76
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i1 = icmp eq i32 %113, 0, !dbg !76
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i4 = icmp eq i32 %114, 0, !dbg !76
  br i1 %.not.i1, label %120, label %115, !dbg !76

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %118, label %116, !dbg !76

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !76
  br label %__nv_sqrtf.exit5, !dbg !76

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !76
  br label %__nv_sqrtf.exit5, !dbg !76

120:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %123, label %121, !dbg !76

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !76
  br label %__nv_sqrtf.exit5, !dbg !76

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !76
  br label %__nv_sqrtf.exit5, !dbg !76

__nv_sqrtf.exit5:                                 ; preds = %116, %118, %121, %123
  %.0.i3 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !76
  %125 = extractvalue { i32, i32 } %24, 1, !dbg !18
  %126 = bitcast i32 %125 to float, !dbg !18
  %127 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %128 = bitcast i32 %127 to float, !dbg !20
  %129 = fadd float %126, %128, !dbg !77
  %130 = extractvalue { i32, i32 } %29, 1, !dbg !22
  %131 = bitcast i32 %130 to float, !dbg !22
  %132 = fsub float %129, %131, !dbg !78
  %133 = extractvalue { i32, i32 } %24, 0, !dbg !18
  %134 = bitcast i32 %133 to float, !dbg !18
  %135 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %136 = bitcast i32 %135 to float, !dbg !20
  %137 = fadd float %134, %136, !dbg !77
  %138 = extractvalue { i32, i32 } %29, 0, !dbg !22
  %139 = bitcast i32 %138 to float, !dbg !22
  %140 = fsub float %137, %139, !dbg !78
  %141 = extractvalue { i32, i32 } %60, 1, !dbg !45
  %142 = extractvalue { i32, i32 } %53, 1, !dbg !39
  %143 = extractvalue { i32, i32 } %65, 1, !dbg !49
  %144 = extractvalue { i32, i32 } %72, 1, !dbg !55
  %145 = extractvalue { i32, i32 } %78, 1, !dbg !58
  %146 = extractvalue { i32, i32 } %83, 1, !dbg !62
  %147 = extractvalue { i32, i32 } %88, 1, !dbg !66
  %148 = extractvalue { i32, i32 } %93, 1, !dbg !70
  %149 = extractvalue { i32, i32 } %98, 1, !dbg !74
  %150 = extractvalue { i32, i32 } %60, 0, !dbg !45
  %151 = extractvalue { i32, i32 } %53, 0, !dbg !39
  %152 = extractvalue { i32, i32 } %65, 0, !dbg !49
  %153 = extractvalue { i32, i32 } %72, 0, !dbg !55
  %154 = extractvalue { i32, i32 } %78, 0, !dbg !58
  %155 = extractvalue { i32, i32 } %83, 0, !dbg !62
  %156 = extractvalue { i32, i32 } %88, 0, !dbg !66
  %157 = extractvalue { i32, i32 } %93, 0, !dbg !70
  %158 = extractvalue { i32, i32 } %98, 0, !dbg !74
  %159 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !45
  %160 = insertelement <2 x i32> %159, i32 %141, i64 1, !dbg !45
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !45
  %162 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !39
  %163 = insertelement <2 x i32> %162, i32 %142, i64 1, !dbg !39
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !39
  %165 = fcmp ogt <2 x float> %161, %164, !dbg !79
  %166 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !55
  %167 = insertelement <2 x i32> %166, i32 %144, i64 1, !dbg !55
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !55
  %169 = fcmp uno <2 x float> %161, zeroinitializer, !dbg !83
  %170 = or <2 x i1> %165, %169, !dbg !84
  %.v = select <2 x i1> %170, <2 x i32> %160, <2 x i32> %163, !dbg !85
  %171 = bitcast <2 x i32> %.v to <2 x float>, !dbg !85
  %172 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !49
  %173 = insertelement <2 x i32> %172, i32 %143, i64 1, !dbg !49
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !49
  %175 = fcmp olt <2 x float> %171, %174, !dbg !86
  %176 = fcmp uno <2 x float> %174, zeroinitializer, !dbg !88
  %177 = or <2 x i1> %176, %175, !dbg !89
  %.v6 = select <2 x i1> %177, <2 x i32> %173, <2 x i32> %.v, !dbg !90
  %178 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !90
  %179 = fcmp olt <2 x float> %178, %168, !dbg !91
  %180 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !58
  %181 = insertelement <2 x i32> %180, i32 %145, i64 1, !dbg !58
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !58
  %183 = fcmp uno <2 x float> %168, zeroinitializer, !dbg !93
  %184 = or <2 x i1> %183, %179, !dbg !94
  %.v7 = select <2 x i1> %184, <2 x i32> %167, <2 x i32> %.v6, !dbg !95
  %185 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !95
  %186 = fcmp olt <2 x float> %185, %182, !dbg !96
  %187 = fcmp uno <2 x float> %182, zeroinitializer, !dbg !98
  %188 = or <2 x i1> %187, %186, !dbg !99
  %.v8 = select <2 x i1> %188, <2 x i32> %181, <2 x i32> %.v7, !dbg !100
  %189 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !100
  %190 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !62
  %191 = insertelement <2 x i32> %190, i32 %146, i64 1, !dbg !62
  %192 = bitcast <2 x i32> %191 to <2 x float>, !dbg !62
  %193 = fcmp olt <2 x float> %189, %192, !dbg !101
  %194 = fcmp uno <2 x float> %192, zeroinitializer, !dbg !103
  %195 = or <2 x i1> %194, %193, !dbg !104
  %.v9 = select <2 x i1> %195, <2 x i32> %191, <2 x i32> %.v8, !dbg !105
  %196 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !105
  %197 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !66
  %198 = insertelement <2 x i32> %197, i32 %147, i64 1, !dbg !66
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !66
  %200 = fcmp olt <2 x float> %196, %199, !dbg !106
  %201 = fcmp uno <2 x float> %199, zeroinitializer, !dbg !108
  %202 = or <2 x i1> %201, %200, !dbg !109
  %.v10 = select <2 x i1> %202, <2 x i32> %198, <2 x i32> %.v9, !dbg !110
  %203 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !110
  %204 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !70
  %205 = insertelement <2 x i32> %204, i32 %148, i64 1, !dbg !70
  %206 = bitcast <2 x i32> %205 to <2 x float>, !dbg !70
  %207 = fcmp olt <2 x float> %203, %206, !dbg !111
  %208 = fcmp uno <2 x float> %206, zeroinitializer, !dbg !113
  %209 = or <2 x i1> %208, %207, !dbg !114
  %.v11 = select <2 x i1> %209, <2 x i32> %205, <2 x i32> %.v10, !dbg !115
  %210 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !115
  %211 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !74
  %212 = insertelement <2 x i32> %211, i32 %149, i64 1, !dbg !74
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !74
  %214 = fcmp olt <2 x float> %210, %213, !dbg !116
  %215 = zext <2 x i1> %165 to <2 x i8>, !dbg !118
  %216 = select <2 x i1> %175, <2 x i8> splat (i8 2), <2 x i8> %215, !dbg !119
  %217 = select <2 x i1> %179, <2 x i8> splat (i8 3), <2 x i8> %216, !dbg !120
  %218 = select <2 x i1> %186, <2 x i8> splat (i8 4), <2 x i8> %217, !dbg !121
  %219 = select <2 x i1> %193, <2 x i8> splat (i8 5), <2 x i8> %218, !dbg !122
  %220 = select <2 x i1> %200, <2 x i8> splat (i8 6), <2 x i8> %219, !dbg !123
  %221 = select <2 x i1> %207, <2 x i8> splat (i8 7), <2 x i8> %220, !dbg !124
  %222 = select <2 x i1> %214, <2 x i8> splat (i8 8), <2 x i8> %221, !dbg !125
  %223 = bitcast i32 %149 to float, !dbg !126
  %224 = fcmp uno float %223, 0.000000e+00, !dbg !126
  %225 = extractelement <2 x i1> %214, i64 1, !dbg !127
  %226 = or i1 %224, %225, !dbg !127
  %227 = extractelement <2 x float> %210, i64 1, !dbg !128
  %228 = select i1 %226, float %223, float %227, !dbg !128
  %229 = bitcast i32 %158 to float, !dbg !126
  %230 = fcmp uno float %229, 0.000000e+00, !dbg !126
  %231 = extractelement <2 x i1> %214, i64 0, !dbg !127
  %232 = or i1 %230, %231, !dbg !127
  %233 = extractelement <2 x float> %210, i64 0, !dbg !128
  %234 = select i1 %232, float %229, float %233, !dbg !128
  %235 = extractvalue { i32, i32 } %39, 1, !dbg !28
  %236 = bitcast i32 %235 to float, !dbg !28
  %237 = extractvalue { i32, i32 } %39, 0, !dbg !28
  %238 = bitcast i32 %237 to float, !dbg !28
  %239 = extractvalue { i32, i32 } %37, 1, !dbg !26
  %240 = bitcast i32 %239 to float, !dbg !26
  %241 = extractvalue { i32, i32 } %37, 0, !dbg !26
  %242 = bitcast i32 %241 to float, !dbg !26
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !129
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !129
  %245 = fmul float %140, %243, !dbg !130
  %246 = fmul float %132, %244, !dbg !130
  %247 = fmul float %245, %242, !dbg !131
  %248 = fmul float %246, %240, !dbg !131
  %249 = fadd float %247, %238, !dbg !132
  %250 = fadd float %248, %236, !dbg !132
  %251 = fadd float %234, %249, !dbg !133
  %252 = fadd float %228, %250, !dbg !133
  %253 = bitcast float %137 to i32, !dbg !134
  %254 = bitcast float %129 to i32, !dbg !134
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %253, i32 %254, ptr addrspace(1) %23, i1 true) #3, !dbg !134
  %255 = getelementptr i8, ptr addrspace(1) %8, i64 %22, !dbg !135
  %256 = bitcast <2 x i8> %222 to i16, !dbg !136
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %256, ptr addrspace(1) %255, i1 true) #3, !dbg !136
  %257 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !137
  %258 = bitcast float %251 to i32, !dbg !138
  %259 = bitcast float %252 to i32, !dbg !138
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %258, i32 %259, ptr addrspace(1) %257, i1 true) #3, !dbg !138
  ret void, !dbg !139
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci5znm3thq7it25nb45i2vrovttzatjzt2qjjeipukat7qycc72d.py", directory: "inductor_cache/i5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 29, column: 34, scope: !7)
!18 = !DILocation(line: 29, column: 39, scope: !7)
!19 = !DILocation(line: 30, column: 30, scope: !7)
!20 = !DILocation(line: 30, column: 35, scope: !7)
!21 = !DILocation(line: 31, column: 31, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 69, column: 20, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 43, column: 20, scope: !7)
!32 = !DILocation(line: 46, column: 19, scope: !7)
!33 = !DILocation(line: 47, column: 52, scope: !7)
!34 = !DILocation(line: 47, column: 64, scope: !7)
!35 = !DILocation(line: 47, column: 42, scope: !7)
!36 = !DILocation(line: 47, column: 47, scope: !7)
!37 = !DILocation(line: 47, column: 57, scope: !7)
!38 = !DILocation(line: 47, column: 31, scope: !7)
!39 = !DILocation(line: 47, column: 69, scope: !7)
!40 = !DILocation(line: 49, column: 21, scope: !7)
!41 = !DILocation(line: 52, column: 19, scope: !7)
!42 = !DILocation(line: 53, column: 47, scope: !7)
!43 = !DILocation(line: 53, column: 57, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 69, scope: !7)
!46 = !DILocation(line: 60, column: 47, scope: !7)
!47 = !DILocation(line: 60, column: 57, scope: !7)
!48 = !DILocation(line: 60, column: 31, scope: !7)
!49 = !DILocation(line: 60, column: 69, scope: !7)
!50 = !DILocation(line: 63, column: 21, scope: !7)
!51 = !DILocation(line: 66, column: 20, scope: !7)
!52 = !DILocation(line: 67, column: 46, scope: !7)
!53 = !DILocation(line: 67, column: 56, scope: !7)
!54 = !DILocation(line: 67, column: 31, scope: !7)
!55 = !DILocation(line: 67, column: 68, scope: !7)
!56 = !DILocation(line: 70, column: 46, scope: !7)
!57 = !DILocation(line: 70, column: 31, scope: !7)
!58 = !DILocation(line: 70, column: 58, scope: !7)
!59 = !DILocation(line: 73, column: 43, scope: !7)
!60 = !DILocation(line: 73, column: 53, scope: !7)
!61 = !DILocation(line: 73, column: 31, scope: !7)
!62 = !DILocation(line: 73, column: 65, scope: !7)
!63 = !DILocation(line: 80, column: 44, scope: !7)
!64 = !DILocation(line: 80, column: 54, scope: !7)
!65 = !DILocation(line: 80, column: 31, scope: !7)
!66 = !DILocation(line: 80, column: 66, scope: !7)
!67 = !DILocation(line: 83, column: 44, scope: !7)
!68 = !DILocation(line: 83, column: 54, scope: !7)
!69 = !DILocation(line: 83, column: 31, scope: !7)
!70 = !DILocation(line: 83, column: 66, scope: !7)
!71 = !DILocation(line: 86, column: 44, scope: !7)
!72 = !DILocation(line: 86, column: 54, scope: !7)
!73 = !DILocation(line: 86, column: 31, scope: !7)
!74 = !DILocation(line: 86, column: 66, scope: !7)
!75 = !DILocation(line: 115, column: 20, scope: !7)
!76 = !DILocation(line: 116, column: 27, scope: !7)
!77 = !DILocation(line: 35, column: 18, scope: !7)
!78 = !DILocation(line: 113, column: 19, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !82)
!80 = distinct !DILexicalBlockFile(scope: !7, file: !81, discriminator: 0)
!81 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!82 = !DILocation(line: 54, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !87)
!87 = !DILocation(line: 61, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !92)
!92 = !DILocation(line: 68, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !97)
!97 = !DILocation(line: 71, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !102)
!102 = !DILocation(line: 74, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !107)
!107 = !DILocation(line: 81, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !112)
!112 = !DILocation(line: 84, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !112)
!116 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !117)
!117 = !DILocation(line: 87, column: 42, scope: !7)
!118 = !DILocation(line: 91, column: 35, scope: !7)
!119 = !DILocation(line: 94, column: 35, scope: !7)
!120 = !DILocation(line: 97, column: 35, scope: !7)
!121 = !DILocation(line: 100, column: 35, scope: !7)
!122 = !DILocation(line: 103, column: 35, scope: !7)
!123 = !DILocation(line: 106, column: 35, scope: !7)
!124 = !DILocation(line: 109, column: 35, scope: !7)
!125 = !DILocation(line: 112, column: 35, scope: !7)
!126 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !117)
!127 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !117)
!128 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !117)
!129 = !DILocation(line: 118, column: 20, scope: !7)
!130 = !DILocation(line: 121, column: 20, scope: !7)
!131 = !DILocation(line: 122, column: 20, scope: !7)
!132 = !DILocation(line: 123, column: 20, scope: !7)
!133 = !DILocation(line: 124, column: 20, scope: !7)
!134 = !DILocation(line: 125, column: 39, scope: !7)
!135 = !DILocation(line: 126, column: 25, scope: !7)
!136 = !DILocation(line: 126, column: 37, scope: !7)
!137 = !DILocation(line: 127, column: 28, scope: !7)
!138 = !DILocation(line: 127, column: 40, scope: !7)
!139 = !DILocation(line: 127, column: 4, scope: !7)
