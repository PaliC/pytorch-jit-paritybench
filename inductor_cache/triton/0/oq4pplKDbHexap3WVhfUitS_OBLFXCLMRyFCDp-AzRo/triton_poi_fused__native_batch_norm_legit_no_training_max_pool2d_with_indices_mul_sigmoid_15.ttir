#loc = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":19:0)
module {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_mul_sigmoid_15(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":19:0), %arg6: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<128xf32> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<128xf32> loc(#loc1)
    %cst_1 = arith.constant dense<24> : tensor<128xi8> loc(#loc1)
    %cst_2 = arith.constant dense<23> : tensor<128xi8> loc(#loc1)
    %cst_3 = arith.constant dense<22> : tensor<128xi8> loc(#loc1)
    %cst_4 = arith.constant dense<21> : tensor<128xi8> loc(#loc1)
    %cst_5 = arith.constant dense<20> : tensor<128xi8> loc(#loc1)
    %cst_6 = arith.constant dense<19> : tensor<128xi8> loc(#loc1)
    %cst_7 = arith.constant dense<18> : tensor<128xi8> loc(#loc1)
    %cst_8 = arith.constant dense<17> : tensor<128xi8> loc(#loc1)
    %cst_9 = arith.constant dense<16> : tensor<128xi8> loc(#loc1)
    %cst_10 = arith.constant dense<15> : tensor<128xi8> loc(#loc1)
    %cst_11 = arith.constant dense<14> : tensor<128xi8> loc(#loc1)
    %cst_12 = arith.constant dense<13> : tensor<128xi8> loc(#loc1)
    %cst_13 = arith.constant dense<12> : tensor<128xi8> loc(#loc1)
    %cst_14 = arith.constant dense<11> : tensor<128xi8> loc(#loc1)
    %cst_15 = arith.constant dense<10> : tensor<128xi8> loc(#loc1)
    %cst_16 = arith.constant dense<9> : tensor<128xi8> loc(#loc1)
    %cst_17 = arith.constant dense<8> : tensor<128xi8> loc(#loc1)
    %cst_18 = arith.constant dense<7> : tensor<128xi8> loc(#loc1)
    %cst_19 = arith.constant dense<6> : tensor<128xi8> loc(#loc1)
    %cst_20 = arith.constant dense<5> : tensor<128xi8> loc(#loc1)
    %cst_21 = arith.constant dense<4> : tensor<128xi8> loc(#loc1)
    %cst_22 = arith.constant dense<3> : tensor<128xi8> loc(#loc1)
    %cst_23 = arith.constant dense<2> : tensor<128xi8> loc(#loc1)
    %cst_24 = arith.constant dense<0> : tensor<128xi8> loc(#loc1)
    %cst_25 = arith.constant dense<1> : tensor<128xi8> loc(#loc1)
    %cst_26 = arith.constant dense<1.000000e-03> : tensor<128xf32> loc(#loc1)
    %cst_27 = arith.constant dense<32> : tensor<128xi32> loc(#loc1)
    %cst_28 = arith.constant dense<128> : tensor<128xi32> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_28 : tensor<128xi32> loc(#loc6)
    %6 = arith.remsi %4, %cst_27 : tensor<128xi32> loc(#loc7)
    %7 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc8)
    %8 = tt.addptr %7, %4 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc8)
    %9 = tt.load %8, %5 : tensor<128x!tt.ptr<f32>> loc(#loc9)
    %10 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc10)
    %11 = tt.addptr %10, %6 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc10)
    %12 = tt.load %11, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc11)
    %13 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc12)
    %14 = tt.addptr %13, %6 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc12)
    %15 = tt.load %14, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc13)
    %16 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc14)
    %17 = tt.addptr %16, %6 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc14)
    %18 = tt.load %17, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc15)
    %19 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc16)
    %20 = tt.addptr %19, %6 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc16)
    %21 = tt.load %20, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>> loc(#loc17)
    %22 = arith.subf %9, %12 : tensor<128xf32> loc(#loc18)
    %23 = arith.addf %15, %cst_26 : tensor<128xf32> loc(#loc19)
    %24 = tt.extern_elementwise %23 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<128xf32>) -> tensor<128xf32> loc(#loc20)
    %25 = arith.divf %cst_0, %24 : tensor<128xf32> loc(#loc21)
    %26 = arith.mulf %22, %25 : tensor<128xf32> loc(#loc22)
    %27 = arith.mulf %26, %18 : tensor<128xf32> loc(#loc23)
    %28 = arith.addf %27, %21 : tensor<128xf32> loc(#loc24)
    %29 = arith.subf %cst, %28 : tensor<128xf32> loc(#loc61)
    %30 = math.exp %29 : tensor<128xf32> loc(#loc62)
    %31 = arith.addf %30, %cst_0 : tensor<128xf32> loc(#loc63)
    %32 = arith.divf %cst_0, %31 : tensor<128xf32> loc(#loc64)
    %33 = arith.mulf %28, %32 : tensor<128xf32> loc(#loc30)
    %34 = arith.cmpf ogt, %33, %33 : tensor<128xf32> loc(#loc31)
    %35 = arith.select %34, %cst_25, %cst_24 : tensor<128xi1>, tensor<128xi8> loc(#loc32)
    %36 = arith.select %34, %cst_23, %35 : tensor<128xi1>, tensor<128xi8> loc(#loc33)
    %37 = arith.select %34, %cst_22, %36 : tensor<128xi1>, tensor<128xi8> loc(#loc34)
    %38 = arith.select %34, %cst_21, %37 : tensor<128xi1>, tensor<128xi8> loc(#loc35)
    %39 = arith.select %34, %cst_20, %38 : tensor<128xi1>, tensor<128xi8> loc(#loc36)
    %40 = arith.select %34, %cst_19, %39 : tensor<128xi1>, tensor<128xi8> loc(#loc37)
    %41 = arith.select %34, %cst_18, %40 : tensor<128xi1>, tensor<128xi8> loc(#loc38)
    %42 = arith.select %34, %cst_17, %41 : tensor<128xi1>, tensor<128xi8> loc(#loc39)
    %43 = arith.select %34, %cst_16, %42 : tensor<128xi1>, tensor<128xi8> loc(#loc40)
    %44 = arith.select %34, %cst_15, %43 : tensor<128xi1>, tensor<128xi8> loc(#loc41)
    %45 = arith.select %34, %cst_14, %44 : tensor<128xi1>, tensor<128xi8> loc(#loc42)
    %46 = arith.select %34, %cst_13, %45 : tensor<128xi1>, tensor<128xi8> loc(#loc43)
    %47 = arith.select %34, %cst_12, %46 : tensor<128xi1>, tensor<128xi8> loc(#loc44)
    %48 = arith.select %34, %cst_11, %47 : tensor<128xi1>, tensor<128xi8> loc(#loc45)
    %49 = arith.select %34, %cst_10, %48 : tensor<128xi1>, tensor<128xi8> loc(#loc46)
    %50 = arith.select %34, %cst_9, %49 : tensor<128xi1>, tensor<128xi8> loc(#loc47)
    %51 = arith.select %34, %cst_8, %50 : tensor<128xi1>, tensor<128xi8> loc(#loc48)
    %52 = arith.select %34, %cst_7, %51 : tensor<128xi1>, tensor<128xi8> loc(#loc49)
    %53 = arith.select %34, %cst_6, %52 : tensor<128xi1>, tensor<128xi8> loc(#loc50)
    %54 = arith.select %34, %cst_5, %53 : tensor<128xi1>, tensor<128xi8> loc(#loc51)
    %55 = arith.select %34, %cst_4, %54 : tensor<128xi1>, tensor<128xi8> loc(#loc52)
    %56 = arith.select %34, %cst_3, %55 : tensor<128xi1>, tensor<128xi8> loc(#loc53)
    %57 = arith.select %34, %cst_2, %56 : tensor<128xi1>, tensor<128xi8> loc(#loc54)
    %58 = arith.select %34, %cst_1, %57 : tensor<128xi1>, tensor<128xi8> loc(#loc55)
    %59 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>> loc(#loc56)
    %60 = tt.addptr %59, %4 : tensor<128x!tt.ptr<f32>>, tensor<128xi32> loc(#loc56)
    tt.store %60, %33, %5 : tensor<128x!tt.ptr<f32>> loc(#loc57)
    %61 = tt.splat %arg6 : !tt.ptr<i8> -> tensor<128x!tt.ptr<i8>> loc(#loc58)
    %62 = tt.addptr %61, %4 : tensor<128x!tt.ptr<i8>>, tensor<128xi32> loc(#loc58)
    tt.store %62, %58, %5 : tensor<128x!tt.ptr<i8>> loc(#loc59)
    tt.return loc(#loc60)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":21:28)
#loc3 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":21:33)
#loc4 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":22:36)
#loc5 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":22:23)
#loc6 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":23:21)
#loc7 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":25:19)
#loc8 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":26:30)
#loc9 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":26:35)
#loc10 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":27:30)
#loc11 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":27:35)
#loc12 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":28:30)
#loc13 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":28:35)
#loc14 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":29:31)
#loc15 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":29:36)
#loc16 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":30:31)
#loc17 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":30:36)
#loc18 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":31:18)
#loc19 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":33:18)
#loc20 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":34:26)
#loc21 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":36:18)
#loc22 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":39:19)
#loc23 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":40:20)
#loc24 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":41:20)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc26 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":42:23)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc30 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":43:20)
#loc31 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":56:20)
#loc32 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":59:35)
#loc33 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":67:35)
#loc34 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":75:35)
#loc35 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":84:35)
#loc36 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":89:35)
#loc37 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":94:35)
#loc38 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":99:35)
#loc39 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":104:35)
#loc40 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":109:35)
#loc41 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":114:35)
#loc42 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":119:35)
#loc43 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":124:35)
#loc44 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":129:38)
#loc45 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":134:38)
#loc46 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":139:38)
#loc47 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":144:38)
#loc48 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":149:38)
#loc49 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":154:38)
#loc50 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":159:38)
#loc51 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":164:38)
#loc52 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":169:38)
#loc53 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":174:38)
#loc54 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":179:38)
#loc55 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":184:38)
#loc56 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":186:28)
#loc57 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":186:40)
#loc58 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":187:25)
#loc59 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":187:38)
#loc60 = loc("inductor_cache/d2/cd27ih6dcelhi4vhwezzf2gkey4fg5vjphhs77dy2b2z7ufbpuqw.py":187:4)
#loc61 = loc(callsite(#loc25 at #loc26))
#loc62 = loc(callsite(#loc27 at #loc26))
#loc63 = loc(callsite(#loc28 at #loc26))
#loc64 = loc(callsite(#loc29 at #loc26))
