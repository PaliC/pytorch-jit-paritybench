; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_78(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 10752, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %21 = sdiv i32 %.frozen, 4, !dbg !15
  %22 = srem i32 %21, 672, !dbg !16
  %23 = mul i32 %21, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %.frozen15 = freeze i32 %19, !dbg !18
  %24 = sdiv i32 %.frozen15, 2688, !dbg !18
  %25 = sext i32 %22 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %20) #3, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %20) #3, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %20) #3, !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %20) #3, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %20) #3, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %20) #3, !dbg !26
  %40 = icmp slt i32 %22, 512, !dbg !27
  %41 = mul i32 %24, 2688, !dbg !28
  %srem.decomposed = sub i32 %.frozen15, %41, !dbg !28
  %42 = shl nsw i32 %24, 11, !dbg !29
  %43 = add nsw i32 %42, %srem.decomposed, !dbg !30
  %44 = sext i32 %43 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !31
  %46 = and i1 %20, %40, !dbg !32
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !33
  %48 = and i32 %22, -32, !dbg !34
  %49 = icmp eq i32 %48, 512, !dbg !34
  %50 = shl nsw i32 %22, 2, !dbg !35
  %51 = shl nsw i32 %24, 7, !dbg !36
  %52 = add nsw i32 %51, %.decomposed, !dbg !35
  %53 = add nsw i32 %52, -2048, !dbg !37
  %54 = add nsw i32 %53, %50, !dbg !38
  %55 = sext i32 %54 to i64, !dbg !39
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !39
  %57 = and i1 %20, %49, !dbg !40
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #3, !dbg !41
  %59 = icmp eq i32 %48, 544, !dbg !42
  %60 = add nsw i32 %52, -2176, !dbg !43
  %61 = add nsw i32 %60, %50, !dbg !44
  %62 = sext i32 %61 to i64, !dbg !45
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !45
  %64 = and i1 %20, %59, !dbg !46
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #3, !dbg !47
  %66 = icmp eq i32 %48, 576, !dbg !48
  %67 = add nsw i32 %52, -2304, !dbg !49
  %68 = add nsw i32 %67, %50, !dbg !50
  %69 = sext i32 %68 to i64, !dbg !51
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !51
  %71 = and i1 %20, %66, !dbg !52
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #3, !dbg !53
  %73 = icmp eq i32 %48, 608, !dbg !54
  %74 = add nsw i32 %52, -2432, !dbg !55
  %75 = add nsw i32 %74, %50, !dbg !56
  %76 = sext i32 %75 to i64, !dbg !57
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %76, !dbg !57
  %78 = and i1 %20, %73, !dbg !58
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #3, !dbg !59
  %80 = icmp sgt i32 %22, 639, !dbg !60
  %81 = add nsw i32 %52, -2560, !dbg !61
  %82 = add nsw i32 %81, %50, !dbg !62
  %83 = sext i32 %82 to i64, !dbg !63
  %84 = getelementptr float, ptr addrspace(1) %5, i64 %83, !dbg !63
  %85 = and i1 %20, %80, !dbg !64
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %84, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #3, !dbg !65
  %87 = fadd float %31, 0x3EE4F8B580000000, !dbg !66
  %88 = fadd float %33, 0x3EE4F8B580000000, !dbg !66
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i = icmp eq i32 %89, 0, !dbg !67
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i = icmp eq i32 %90, 0, !dbg !67
  br i1 %.not.i, label %96, label %91, !dbg !67

91:                                               ; preds = %13
  br i1 %.not1.i, label %94, label %92, !dbg !67

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

96:                                               ; preds = %13
  br i1 %.not1.i, label %99, label %97, !dbg !67

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

__nv_sqrtf.exit:                                  ; preds = %92, %94, %97, %99
  %.0.i = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !67
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i10 = icmp eq i32 %101, 0, !dbg !67
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i13 = icmp eq i32 %102, 0, !dbg !67
  br i1 %.not.i10, label %108, label %103, !dbg !67

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %106, label %104, !dbg !67

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !67
  br label %__nv_sqrtf.exit14, !dbg !67

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !67
  br label %__nv_sqrtf.exit14, !dbg !67

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %111, label %109, !dbg !67

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !67
  br label %__nv_sqrtf.exit14, !dbg !67

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !67
  br label %__nv_sqrtf.exit14, !dbg !67

__nv_sqrtf.exit14:                                ; preds = %104, %106, %109, %111
  %.0.i12 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !67
  %113 = extractvalue { i32, i32 } %47, 1, !dbg !33
  %114 = extractvalue { i32, i32 } %58, 1, !dbg !41
  %115 = extractvalue { i32, i32 } %65, 1, !dbg !47
  %116 = extractvalue { i32, i32 } %72, 1, !dbg !53
  %117 = extractvalue { i32, i32 } %79, 1, !dbg !59
  %118 = extractvalue { i32, i32 } %86, 1, !dbg !65
  %.v1 = select i1 %73, i32 %117, i32 %118, !dbg !68
  %.v3 = select i1 %66, i32 %116, i32 %.v1, !dbg !69
  %.v5 = select i1 %59, i32 %115, i32 %.v3, !dbg !70
  %.v7 = select i1 %49, i32 %114, i32 %.v5, !dbg !71
  %.v9 = select i1 %40, i32 %113, i32 %.v7, !dbg !72
  %119 = bitcast i32 %.v9 to float, !dbg !72
  %120 = bitcast i32 %28 to float, !dbg !20
  %121 = fsub float %119, %120, !dbg !73
  %122 = extractvalue { i32, i32 } %47, 0, !dbg !33
  %123 = extractvalue { i32, i32 } %58, 0, !dbg !41
  %124 = extractvalue { i32, i32 } %65, 0, !dbg !47
  %125 = extractvalue { i32, i32 } %72, 0, !dbg !53
  %126 = extractvalue { i32, i32 } %79, 0, !dbg !59
  %127 = extractvalue { i32, i32 } %86, 0, !dbg !65
  %.v = select i1 %73, i32 %126, i32 %127, !dbg !68
  %.v2 = select i1 %66, i32 %125, i32 %.v, !dbg !69
  %.v4 = select i1 %59, i32 %124, i32 %.v2, !dbg !70
  %.v6 = select i1 %49, i32 %123, i32 %.v4, !dbg !71
  %.v8 = select i1 %40, i32 %122, i32 %.v6, !dbg !72
  %128 = bitcast i32 %.v8 to float, !dbg !72
  %129 = bitcast i32 %27 to float, !dbg !20
  %130 = fsub float %128, %129, !dbg !73
  %131 = bitcast i32 %39 to float, !dbg !26
  %132 = bitcast i32 %38 to float, !dbg !26
  %133 = bitcast i32 %36 to float, !dbg !24
  %134 = bitcast i32 %35 to float, !dbg !24
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !74
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #3, !dbg !74
  %137 = fmul float %130, %135, !dbg !75
  %138 = fmul float %121, %136, !dbg !75
  %139 = fmul float %137, %134, !dbg !76
  %140 = fmul float %138, %133, !dbg !76
  %141 = fadd float %139, %132, !dbg !77
  %142 = fadd float %140, %131, !dbg !77
  %143 = fcmp olt float %141, 0.000000e+00, !dbg !78
  %144 = fcmp olt float %142, 0.000000e+00, !dbg !78
  %145 = select i1 %143, float 0.000000e+00, float %141, !dbg !82
  %146 = select i1 %144, float 0.000000e+00, float %142, !dbg !82
  %147 = sext i32 %19 to i64, !dbg !83
  %148 = getelementptr float, ptr addrspace(1) %10, i64 %147, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v8, i32 %.v9, ptr addrspace(1) %148, i1 %20) #3, !dbg !84
  %149 = getelementptr float, ptr addrspace(1) %11, i64 %147, !dbg !85
  %150 = bitcast float %145 to i32, !dbg !86
  %151 = bitcast float %146 to i32, !dbg !86
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %150, i32 %151, ptr addrspace(1) %149, i1 %20) #3, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7wquddpscxbsfwio6uzasfqiumo2nuymop4wivmfmoyg4erwnik.py", directory: "inductor_cache/7w")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_78, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_78, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_78", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_78", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 49, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 61, scope: !7)
!33 = !DILocation(line: 37, column: 54, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 39, scope: !7)
!36 = !DILocation(line: 42, column: 58, scope: !7)
!37 = !DILocation(line: 42, column: 36, scope: !7)
!38 = !DILocation(line: 42, column: 54, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 70, scope: !7)
!41 = !DILocation(line: 42, column: 63, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 36, scope: !7)
!44 = !DILocation(line: 47, column: 54, scope: !7)
!45 = !DILocation(line: 47, column: 31, scope: !7)
!46 = !DILocation(line: 47, column: 71, scope: !7)
!47 = !DILocation(line: 47, column: 63, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 36, scope: !7)
!50 = !DILocation(line: 52, column: 54, scope: !7)
!51 = !DILocation(line: 52, column: 31, scope: !7)
!52 = !DILocation(line: 52, column: 71, scope: !7)
!53 = !DILocation(line: 52, column: 63, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 36, scope: !7)
!56 = !DILocation(line: 57, column: 54, scope: !7)
!57 = !DILocation(line: 57, column: 31, scope: !7)
!58 = !DILocation(line: 57, column: 71, scope: !7)
!59 = !DILocation(line: 57, column: 63, scope: !7)
!60 = !DILocation(line: 58, column: 20, scope: !7)
!61 = !DILocation(line: 61, column: 36, scope: !7)
!62 = !DILocation(line: 61, column: 54, scope: !7)
!63 = !DILocation(line: 61, column: 31, scope: !7)
!64 = !DILocation(line: 61, column: 71, scope: !7)
!65 = !DILocation(line: 61, column: 63, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 27, scope: !7)
!68 = !DILocation(line: 62, column: 35, scope: !7)
!69 = !DILocation(line: 63, column: 35, scope: !7)
!70 = !DILocation(line: 64, column: 35, scope: !7)
!71 = !DILocation(line: 65, column: 34, scope: !7)
!72 = !DILocation(line: 66, column: 33, scope: !7)
!73 = !DILocation(line: 67, column: 20, scope: !7)
!74 = !DILocation(line: 72, column: 20, scope: !7)
!75 = !DILocation(line: 75, column: 20, scope: !7)
!76 = !DILocation(line: 76, column: 20, scope: !7)
!77 = !DILocation(line: 77, column: 20, scope: !7)
!78 = !DILocation(line: 118, column: 15, scope: !79, inlinedAt: !81)
!79 = distinct !DILexicalBlockFile(scope: !7, file: !80, discriminator: 0)
!80 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!81 = !DILocation(line: 79, column: 42, scope: !7)
!82 = !DILocation(line: 121, column: 29, scope: !79, inlinedAt: !81)
!83 = !DILocation(line: 80, column: 25, scope: !7)
!84 = !DILocation(line: 80, column: 37, scope: !7)
!85 = !DILocation(line: 81, column: 25, scope: !7)
!86 = !DILocation(line: 81, column: 37, scope: !7)
!87 = !DILocation(line: 81, column: 4, scope: !7)
