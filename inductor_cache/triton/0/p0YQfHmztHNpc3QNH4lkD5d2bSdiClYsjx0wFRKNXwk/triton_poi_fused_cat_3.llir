; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 510, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = sdiv i32 %15, 4096, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen, 655360, !dbg !15
  %18 = mul i32 %17, 655360, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = shl nsw i32 %17, 18, !dbg !17
  %20 = add nsw i32 %19, %srem.decomposed, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = shl nsw i32 %17, 17, !dbg !20
  %24 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !21
  %25 = insertelement <2 x i32> %24, i32 %16, i64 1, !dbg !21
  %26 = srem <2 x i32> %25, <i32 4096, i32 160>, !dbg !21
  %27 = extractelement <2 x i32> %26, i64 1, !dbg !22
  %28 = icmp slt i32 %27, 64, !dbg !23
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !24
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !24
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !24
  %32 = and i32 %27, -32, !dbg !25
  %33 = icmp eq i32 %32, 64, !dbg !25
  %34 = insertelement <2 x i32> <i32 poison, i32 -64>, i32 %23, i64 0, !dbg !26
  %35 = add nsw <2 x i32> %34, %26, !dbg !26
  %36 = extractelement <2 x i32> %35, i64 1, !dbg !27
  %37 = shl nsw i32 %36, 12, !dbg !27
  %38 = extractelement <2 x i32> %35, i64 0, !dbg !28
  %39 = add nsw i32 %38, %37, !dbg !29
  %40 = sext i32 %39 to i64, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !30
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #1, !dbg !31
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !31
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !31
  %45 = bitcast i32 %43 to float, !dbg !31
  %46 = bitcast i32 %44 to float, !dbg !31
  %47 = sext i32 %36 to i64, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %33, i32 0, i1 %33) #1, !dbg !33
  %50 = bitcast i32 %49 to float, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %33, i32 0, i1 %33) #1, !dbg !33
  %52 = bitcast i32 %51 to float, !dbg !33
  %53 = fadd float %45, %50, !dbg !34
  %54 = fadd float %46, %52, !dbg !34
  %55 = fcmp ogt float %53, 0.000000e+00, !dbg !35
  %56 = fcmp ogt float %54, 0.000000e+00, !dbg !35
  %57 = fmul float %53, 0x3FC99999A0000000, !dbg !36
  %58 = fmul float %54, 0x3FC99999A0000000, !dbg !36
  %59 = select i1 %55, float %53, float %57, !dbg !37
  %60 = select i1 %56, float %54, float %58, !dbg !37
  %61 = icmp eq i32 %32, 96, !dbg !38
  %62 = add nsw i32 %27, -96, !dbg !39
  %63 = shl nsw i32 %62, 12, !dbg !40
  %64 = add nsw i32 %38, %63, !dbg !41
  %65 = sext i32 %64 to i64, !dbg !42
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !42
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #1, !dbg !43
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !43
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !43
  %70 = sext i32 %62 to i64, !dbg !44
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %70, !dbg !44
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %61, i32 0, i1 %61) #1, !dbg !45
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %61, i32 0, i1 %61) #1, !dbg !45
  %74 = icmp sgt i32 %27, 127, !dbg !22
  %75 = add nsw i32 %27, -128, !dbg !46
  %76 = shl nsw i32 %75, 12, !dbg !47
  %77 = add nsw i32 %38, %76, !dbg !28
  %78 = sext i32 %77 to i64, !dbg !48
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %78, !dbg !48
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #1, !dbg !49
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !49
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !49
  %83 = sext i32 %75 to i64, !dbg !50
  %84 = getelementptr float, ptr addrspace(1) %6, i64 %83, !dbg !50
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %74, i32 0, i1 %74) #1, !dbg !51
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %74, i32 0, i1 %74) #1, !dbg !51
  %87 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !49
  %88 = insertelement <4 x i32> %87, i32 %81, i64 1, !dbg !49
  %89 = insertelement <4 x i32> %88, i32 %69, i64 2, !dbg !49
  %90 = insertelement <4 x i32> %89, i32 %68, i64 3, !dbg !49
  %91 = bitcast <4 x i32> %90 to <4 x float>, !dbg !49
  %92 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !51
  %93 = insertelement <4 x i32> %92, i32 %85, i64 1, !dbg !51
  %94 = insertelement <4 x i32> %93, i32 %73, i64 2, !dbg !51
  %95 = insertelement <4 x i32> %94, i32 %72, i64 3, !dbg !51
  %96 = bitcast <4 x i32> %95 to <4 x float>, !dbg !51
  %97 = fadd <4 x float> %91, %96, !dbg !52
  %98 = extractelement <4 x float> %97, i64 3, !dbg !53
  %99 = fmul float %98, 0x3FC99999A0000000, !dbg !54
  %100 = extractelement <4 x float> %97, i64 2, !dbg !53
  %101 = fmul float %100, 0x3FC99999A0000000, !dbg !54
  %102 = fcmp ogt <4 x float> %97, zeroinitializer, !dbg !55
  %103 = extractelement <4 x i1> %102, i64 3, !dbg !53
  %104 = select i1 %103, float %98, float %99, !dbg !53
  %105 = extractelement <4 x i1> %102, i64 2, !dbg !53
  %106 = select i1 %105, float %100, float %101, !dbg !53
  %107 = extractelement <4 x float> %97, i64 1, !dbg !56
  %108 = fmul float %107, 0x3FC99999A0000000, !dbg !57
  %109 = extractelement <4 x float> %97, i64 0, !dbg !56
  %110 = fmul float %109, 0x3FC99999A0000000, !dbg !57
  %111 = extractelement <4 x i1> %102, i64 1, !dbg !56
  %112 = select i1 %111, float %107, float %108, !dbg !56
  %113 = extractelement <4 x i1> %102, i64 0, !dbg !56
  %114 = select i1 %113, float %109, float %110, !dbg !56
  %115 = select i1 %74, float %112, float 0.000000e+00, !dbg !58
  %116 = select i1 %74, float %114, float 0.000000e+00, !dbg !58
  %117 = select i1 %61, float %104, float %115, !dbg !59
  %118 = select i1 %61, float %106, float %116, !dbg !59
  %119 = select i1 %33, float %59, float %117, !dbg !59
  %120 = select i1 %33, float %60, float %118, !dbg !59
  %121 = sext i32 %15 to i64, !dbg !60
  %122 = getelementptr float, ptr addrspace(1) %7, i64 %121, !dbg !60
  %123 = bitcast float %119 to i32, !dbg !61
  %124 = select i1 %28, i32 %30, i32 %123, !dbg !62
  %125 = bitcast float %120 to i32, !dbg !61
  %126 = select i1 %28, i32 %31, i32 %125, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %126, ptr addrspace(1) %122, i1 true) #1, !dbg !61
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckkiqn7lw3ekwoc7adgq4f7kh662l3uir4azp63ajh36b3mseqa4.py", directory: "inductor_cache/kk")
!4 = !{ptr @triton_poi_fused_cat_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_3", linkageName: "triton_poi_fused_cat_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 38, column: 63, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 62, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 42, scope: !7)
!28 = !DILocation(line: 65, column: 57, scope: !7)
!29 = !DILocation(line: 38, column: 56, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 68, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 44, scope: !7)
!34 = !DILocation(line: 40, column: 20, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 35, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 50, scope: !7)
!40 = !DILocation(line: 52, column: 42, scope: !7)
!41 = !DILocation(line: 52, column: 56, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 68, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 44, scope: !7)
!46 = !DILocation(line: 65, column: 51, scope: !7)
!47 = !DILocation(line: 65, column: 42, scope: !7)
!48 = !DILocation(line: 65, column: 31, scope: !7)
!49 = !DILocation(line: 65, column: 69, scope: !7)
!50 = !DILocation(line: 66, column: 31, scope: !7)
!51 = !DILocation(line: 66, column: 45, scope: !7)
!52 = !DILocation(line: 67, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 35, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 69, column: 20, scope: !7)
!56 = !DILocation(line: 72, column: 35, scope: !7)
!57 = !DILocation(line: 71, column: 20, scope: !7)
!58 = !DILocation(line: 74, column: 35, scope: !7)
!59 = !DILocation(line: 0, scope: !7)
!60 = !DILocation(line: 78, column: 25, scope: !7)
!61 = !DILocation(line: 78, column: 37, scope: !7)
!62 = !DILocation(line: 77, column: 33, scope: !7)
!63 = !DILocation(line: 78, column: 4, scope: !7)
