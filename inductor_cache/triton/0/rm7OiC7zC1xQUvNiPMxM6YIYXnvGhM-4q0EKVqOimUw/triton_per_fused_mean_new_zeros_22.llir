; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_new_zeros_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %8, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = lshr i32 %8, 5, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 256, !dbg !15
  %14 = mul i32 %13, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = shl i32 %8, 5, !dbg !17
  %16 = and i32 %15, 1792, !dbg !17
  %17 = add nsw i32 %.decomposed, %16, !dbg !18
  %18 = shl i32 %13, 11, !dbg !19
  %19 = add i32 %17, %18, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !22
  %23 = bitcast i32 %22 to float, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !24
  %26 = bitcast i32 %25 to float, !dbg !24
  %27 = fmul float %23, %26, !dbg !25
  %28 = bitcast float %27 to i32, !dbg !26
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 16, i32 31), !dbg !26
  %30 = bitcast i32 %29 to float, !dbg !26
  %31 = fadd float %27, %30, !dbg !30
  %32 = bitcast float %31 to i32, !dbg !26
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 8, i32 31), !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = fadd float %31, %34, !dbg !30
  %36 = lshr i32 %9, 3, !dbg !26
  %37 = icmp samesign ult i32 %9, 8, !dbg !26
  %38 = and i32 %12, 1, !dbg !26
  %39 = shl nuw nsw i32 %10, 1, !dbg !26
  %40 = or disjoint i32 %39, %38, !dbg !26
  %41 = getelementptr float, ptr addrspace(3) @global_smem, i32 %40, !dbg !26
  %42 = bitcast float %35 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %42, i1 %37) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %43 = icmp slt i32 %8, 16, !dbg !26
  %44 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !26
  %45 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %44, i1 %43) #3, !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 1, i32 31), !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = fadd float %46, %48, !dbg !30
  %50 = and i32 %8, 1, !dbg !26
  %51 = icmp eq i32 %50, 0, !dbg !26
  %52 = and i1 %43, %51, !dbg !26
  %53 = bitcast float %49 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %53, i1 %52) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %39, !dbg !26
  %55 = load float, ptr addrspace(3) %54, align 8, !dbg !26
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 8.000000e+00) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %57 = sext i32 %11 to i64, !dbg !34
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !34
  %59 = shl nuw nsw i32 %38, 2, !dbg !35
  %60 = or disjoint i32 %59, %36, !dbg !35
  %61 = icmp eq i32 %60, 0, !dbg !35
  %62 = bitcast float %56 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %62, ptr addrspace(1) %58, i1 %61) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdabaftt3e4bnd3ey2w7mnpdav55qsh3zlxjjolpwrebvvuyhkgx.py", directory: "inductor_cache/da")
!4 = !{ptr @triton_per_fused_mean_new_zeros_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_new_zeros_22, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_new_zeros_22", linkageName: "triton_per_fused_mean_new_zeros_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 49, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 54, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 54, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 37, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 44, column: 4, scope: !7)
!34 = !DILocation(line: 45, column: 28, scope: !7)
!35 = !DILocation(line: 45, column: 40, scope: !7)
!36 = !DILocation(line: 45, column: 4, scope: !7)
