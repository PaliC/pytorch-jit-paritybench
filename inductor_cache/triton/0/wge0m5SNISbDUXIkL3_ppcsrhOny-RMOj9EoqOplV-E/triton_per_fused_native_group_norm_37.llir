; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = shl i32 %7, 2, !dbg !11
  %11 = and i32 %10, 1020, !dbg !11
  %12 = shl i32 %6, 10, !dbg !12
  %13 = or disjoint i32 %12, %11, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #5, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %21 = bitcast i32 %17 to float, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = bitcast i32 %20 to float, !dbg !15
  %25 = fadd float %21, %22, !dbg !16
  %26 = fadd float %25, %23, !dbg !16
  %27 = fadd float %26, %24, !dbg !16
  %28 = bitcast float %27 to i32, !dbg !21
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 16, i32 31), !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = fadd float %27, %30, !dbg !16
  %32 = bitcast float %31 to i32, !dbg !21
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 8, i32 31), !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = fadd float %31, %34, !dbg !16
  %36 = bitcast float %35 to i32, !dbg !21
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 4, i32 31), !dbg !21
  %38 = bitcast i32 %37 to float, !dbg !21
  %39 = fadd float %35, %38, !dbg !16
  %40 = bitcast float %39 to i32, !dbg !21
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 2, i32 31), !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = fadd float %39, %42, !dbg !16
  %44 = bitcast float %43 to i32, !dbg !21
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !21
  %46 = bitcast i32 %45 to float, !dbg !21
  %47 = fadd float %43, %46, !dbg !16
  %48 = icmp eq i32 %8, 0, !dbg !21
  %49 = and i32 %9, 7, !dbg !21
  %50 = zext nneg i32 %49 to i64, !dbg !21
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i64 %50, !dbg !21
  %52 = bitcast float %47 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 %48) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %53 = icmp slt i32 %7, 8, !dbg !21
  %54 = sext i32 %7 to i64, !dbg !21
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i64 %54, !dbg !21
  %56 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %53) #5, !dbg !21
  %57 = bitcast i32 %56 to float, !dbg !21
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 4, i32 31), !dbg !21
  %59 = bitcast i32 %58 to float, !dbg !21
  %60 = fadd float %57, %59, !dbg !16
  %61 = bitcast float %60 to i32, !dbg !21
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 2, i32 31), !dbg !21
  %63 = bitcast i32 %62 to float, !dbg !21
  %64 = fadd float %60, %63, !dbg !16
  %65 = bitcast float %64 to i32, !dbg !21
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !21
  %67 = bitcast i32 %66 to float, !dbg !21
  %68 = fadd float %64, %67, !dbg !16
  %69 = and i32 %7, 7, !dbg !21
  %70 = icmp eq i32 %69, 0, !dbg !21
  %71 = and i1 %53, %70, !dbg !21
  %72 = bitcast float %68 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %72, i1 %71) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %73 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !21
  %74 = fadd float %73, 0.000000e+00, !dbg !22
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float 1.024000e+03) #5, !dbg !26
  %76 = fsub float %21, %75, !dbg !27
  %77 = fsub float %22, %75, !dbg !27
  %78 = fsub float %23, %75, !dbg !27
  %79 = fsub float %24, %75, !dbg !27
  %80 = fmul float %76, %76, !dbg !28
  %81 = fmul float %77, %77, !dbg !28
  %82 = fmul float %78, %78, !dbg !28
  %83 = fmul float %79, %79, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %84 = fadd float %80, %81, !dbg !31
  %85 = fadd float %82, %84, !dbg !31
  %86 = fadd float %83, %85, !dbg !31
  %87 = bitcast float %86 to i32, !dbg !29
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 16, i32 31), !dbg !29
  %89 = bitcast i32 %88 to float, !dbg !29
  %90 = fadd float %86, %89, !dbg !31
  %91 = bitcast float %90 to i32, !dbg !29
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !29
  %93 = bitcast i32 %92 to float, !dbg !29
  %94 = fadd float %90, %93, !dbg !31
  %95 = bitcast float %94 to i32, !dbg !29
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !29
  %97 = bitcast i32 %96 to float, !dbg !29
  %98 = fadd float %94, %97, !dbg !31
  %99 = bitcast float %98 to i32, !dbg !29
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !29
  %101 = bitcast i32 %100 to float, !dbg !29
  %102 = fadd float %98, %101, !dbg !31
  %103 = bitcast float %102 to i32, !dbg !29
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !29
  %105 = bitcast i32 %104 to float, !dbg !29
  %106 = fadd float %102, %105, !dbg !31
  %107 = bitcast float %106 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %107, i1 %48) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %108 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %53) #5, !dbg !29
  %109 = bitcast i32 %108 to float, !dbg !29
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = fadd float %109, %111, !dbg !31
  %113 = bitcast float %112 to i32, !dbg !29
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 2, i32 31), !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = fadd float %112, %115, !dbg !31
  %117 = bitcast float %116 to i32, !dbg !29
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = fadd float %116, %119, !dbg !31
  %121 = bitcast float %120 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %121, i1 %71) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %122 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %123 = fadd float %122, 0.000000e+00, !dbg !32
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float 1.024000e+03) #5, !dbg !34
  %125 = fadd float %124, 0x3EE4F8B580000000, !dbg !35
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %126, 0, !dbg !36
  br i1 %.not.i, label %129, label %127, !dbg !36

127:                                              ; preds = %5
  %128 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %125), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

129:                                              ; preds = %5
  %130 = tail call float @llvm.nvvm.rsqrt.approx.f(float %125), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %127, %129
  %.0.i = phi float [ %128, %127 ], [ %130, %129 ], !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %131 = sext i32 %6 to i64, !dbg !38
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !38
  %urem = and i32 %7, 255, !dbg !39
  %133 = icmp eq i32 %urem, 0, !dbg !39
  %134 = bitcast float %.0.i to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %132, i1 %133) #5, !dbg !39
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !40
  %136 = bitcast float %75 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %135, i1 %133) #5, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czoffioixybpzo2vcer63it63eshlqvzjnwivyksit3twcl6fvun.py", directory: "inductor_cache/zo")
!4 = !{ptr @triton_per_fused_native_group_norm_37, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_37, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_37", linkageName: "triton_per_fused_native_group_norm_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 40, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 45, scope: !7)
!16 = !DILocation(line: 256, column: 15, scope: !17, inlinedAt: !20)
!17 = distinct !DILexicalBlockFile(scope: !19, file: !18, discriminator: 0)
!18 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!19 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!20 = !DILocation(line: 35, column: 57, scope: !7)
!21 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !20)
!22 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 35, column: 44, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 19, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !30)
!30 = !DILocation(line: 42, column: 59, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !17, inlinedAt: !30)
!32 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 42, column: 45, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 28, scope: !7)
!37 = !DILocation(line: 48, column: 4, scope: !7)
!38 = !DILocation(line: 49, column: 28, scope: !7)
!39 = !DILocation(line: 49, column: 40, scope: !7)
!40 = !DILocation(line: 50, column: 25, scope: !7)
!41 = !DILocation(line: 50, column: 36, scope: !7)
!42 = !DILocation(line: 50, column: 4, scope: !7)
