; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = and i32 %9, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %14 = lshr i32 %9, 5, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %15 = sdiv i32 %.frozen, 64, !dbg !16
  %16 = mul i32 %15, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = shl nsw i32 %.decomposed, 3, !dbg !18
  %18 = shl i32 %9, 6, !dbg !19
  %19 = and i32 %18, 7680, !dbg !19
  %20 = add nsw i32 %17, %19, !dbg !20
  %21 = shl i32 %15, 13, !dbg !21
  %22 = add i32 %20, %21, !dbg !22
  %23 = lshr i32 %9, 7, !dbg !23
  %24 = and i32 %23, 1, !dbg !23
  %25 = or disjoint i32 %24, 2, !dbg !23
  %26 = or disjoint i32 %24, 4, !dbg !23
  %27 = or disjoint i32 %24, 6, !dbg !23
  %28 = or disjoint i32 %22, %24, !dbg !24
  %29 = or disjoint i32 %22, %25, !dbg !24
  %30 = or disjoint i32 %22, %26, !dbg !24
  %31 = or disjoint i32 %22, %27, !dbg !24
  %32 = sext i32 %28 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = sext i32 %29 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %30 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = sext i32 %31 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %13, i32 0, i1 %13) #4, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %13, i32 0, i1 %13) #4, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %13, i32 0, i1 %13) #4, !dbg !26
  %43 = bitcast i32 %42 to float, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %13, i32 0, i1 %13) #4, !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = or disjoint i32 %17, %24, !dbg !27
  %47 = or disjoint i32 %17, %25, !dbg !27
  %48 = or disjoint i32 %17, %26, !dbg !27
  %49 = or disjoint i32 %17, %27, !dbg !27
  %50 = sext i32 %46 to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !28
  %52 = sext i32 %47 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !28
  %54 = sext i32 %48 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !28
  %56 = sext i32 %49 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %13, i32 0, i1 %13) #4, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %13, i32 0, i1 %13) #4, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %13, i32 0, i1 %13) #4, !dbg !29
  %61 = bitcast i32 %60 to float, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %13, i32 0, i1 %13) #4, !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %13, i32 0, i1 %13) #4, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %13, i32 0, i1 %13) #4, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %13, i32 0, i1 %13) #4, !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %13, i32 0, i1 %13) #4, !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = fadd float %43, %61, !dbg !32
  %75 = fadd float %45, %63, !dbg !32
  %76 = fcmp olt float %74, 0.000000e+00, !dbg !33
  %77 = fcmp olt float %75, 0.000000e+00, !dbg !33
  %78 = select i1 %76, float 0.000000e+00, float %74, !dbg !37
  %79 = select i1 %77, float 0.000000e+00, float %75, !dbg !37
  %80 = fadd float %61, %71, !dbg !38
  %81 = fadd float %63, %73, !dbg !38
  %82 = fcmp olt float %80, 0.000000e+00, !dbg !39
  %83 = fcmp olt float %81, 0.000000e+00, !dbg !39
  %84 = select i1 %82, float 0.000000e+00, float %80, !dbg !41
  %85 = select i1 %83, float 0.000000e+00, float %81, !dbg !41
  %86 = fsub float %78, %84, !dbg !42
  %87 = fsub float %79, %85, !dbg !42
  %88 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !26
  %89 = insertelement <2 x i32> %88, i32 %41, i64 1, !dbg !26
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !26
  %91 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !29
  %92 = insertelement <2 x i32> %91, i32 %59, i64 1, !dbg !29
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !29
  %94 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !31
  %95 = insertelement <2 x i32> %94, i32 %69, i64 1, !dbg !31
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !31
  %97 = fadd <2 x float> %90, %93, !dbg !32
  %98 = fcmp olt <2 x float> %97, zeroinitializer, !dbg !33
  %99 = select <2 x i1> %98, <2 x float> zeroinitializer, <2 x float> %97, !dbg !37
  %100 = fadd <2 x float> %93, %96, !dbg !38
  %101 = fcmp olt <2 x float> %100, zeroinitializer, !dbg !39
  %102 = select <2 x i1> %101, <2 x float> zeroinitializer, <2 x float> %100, !dbg !41
  %103 = fsub <2 x float> %99, %102, !dbg !42
  %104 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %103), !dbg !43
  %105 = tail call float @llvm.fabs.f32(float %86), !dbg !43
  %106 = tail call float @llvm.fabs.f32(float %87), !dbg !43
  %shift = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %107 = fadd <2 x float> %104, %shift, !dbg !44
  %108 = extractelement <2 x float> %107, i64 0, !dbg !44
  %109 = fadd float %108, %105, !dbg !44
  %110 = fadd float %109, %106, !dbg !44
  %111 = select i1 %13, float %110, float 0.000000e+00, !dbg !44
  %112 = bitcast float %111 to i32, !dbg !49
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 16, i32 31), !dbg !49
  %114 = bitcast i32 %113 to float, !dbg !49
  %115 = fadd float %111, %114, !dbg !44
  %116 = bitcast float %115 to i32, !dbg !49
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 8, i32 31), !dbg !49
  %118 = bitcast i32 %117 to float, !dbg !49
  %119 = fadd float %115, %118, !dbg !44
  %120 = lshr i32 %10, 3, !dbg !49
  %121 = icmp samesign ult i32 %10, 8, !dbg !49
  %122 = and i32 %14, 7, !dbg !49
  %123 = shl nuw nsw i32 %11, 3, !dbg !49
  %124 = or disjoint i32 %123, %122, !dbg !49
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !49
  %126 = bitcast float %119 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 %121) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %127 = icmp slt i32 %9, 64, !dbg !49
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !49
  %129 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %128, i1 %127) #4, !dbg !49
  %130 = bitcast i32 %129 to float, !dbg !49
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !49
  %132 = bitcast i32 %131 to float, !dbg !49
  %133 = fadd float %130, %132, !dbg !44
  %134 = bitcast float %133 to i32, !dbg !49
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !49
  %136 = bitcast i32 %135 to float, !dbg !49
  %137 = fadd float %133, %136, !dbg !44
  %138 = bitcast float %137 to i32, !dbg !49
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 1, i32 31), !dbg !49
  %140 = bitcast i32 %139 to float, !dbg !49
  %141 = fadd float %137, %140, !dbg !44
  %142 = icmp eq i32 %11, 0, !dbg !49
  %143 = and i1 %127, %142, !dbg !49
  %144 = bitcast float %141 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %144, i1 %143) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !49
  %146 = load i32, ptr addrspace(3) %145, align 16, !dbg !49
  %147 = sext i32 %12 to i64, !dbg !50
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %147, !dbg !50
  %149 = shl nuw nsw i32 %122, 2, !dbg !51
  %150 = or disjoint i32 %149, %120, !dbg !51
  %151 = icmp eq i32 %150, 0, !dbg !51
  %152 = and i1 %151, %13, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %148, i1 %152) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca4hx7seppzsan2hh336ykjwelv7efejchxbi5vyjfkxvqyz76kw.py", directory: "inductor_cache/a4")
!4 = !{ptr @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_29, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_29", linkageName: "triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 32, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 37, scope: !7)
!21 = !DILocation(line: 33, column: 60, scope: !7)
!22 = !DILocation(line: 33, column: 55, scope: !7)
!23 = !DILocation(line: 33, column: 103, scope: !7)
!24 = !DILocation(line: 33, column: 97, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 109, scope: !7)
!27 = !DILocation(line: 34, column: 38, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 50, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 109, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 38, column: 40, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !40)
!40 = !DILocation(line: 40, column: 40, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !40)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 42, column: 23, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !48)
!45 = distinct !DILexicalBlockFile(scope: !47, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!48 = !DILocation(line: 45, column: 26, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !48)
!50 = !DILocation(line: 46, column: 25, scope: !7)
!51 = !DILocation(line: 46, column: 37, scope: !7)
!52 = !DILocation(line: 46, column: 4, scope: !7)
