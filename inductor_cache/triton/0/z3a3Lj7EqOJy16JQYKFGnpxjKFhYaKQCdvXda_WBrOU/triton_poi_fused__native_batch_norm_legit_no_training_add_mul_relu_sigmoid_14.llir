; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, i32 %25) local_unnamed_addr !dbg !7 {
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %28 = shl i32 %27, 9, !dbg !11
  %29 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %30 = shl i32 %29, 1, !dbg !12
  %31 = and i32 %30, 510, !dbg !12
  %32 = or disjoint i32 %28, %31, !dbg !13
  %33 = srem i32 %32, 128, !dbg !14
  %34 = sext i32 %32 to i64, !dbg !15
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !15
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !16
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !16
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !16
  %39 = bitcast i32 %37 to float, !dbg !16
  %40 = bitcast i32 %38 to float, !dbg !16
  %41 = sext i32 %33 to i64, !dbg !17
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !17
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !18
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !18
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !18
  %46 = bitcast i32 %44 to float, !dbg !18
  %47 = bitcast i32 %45 to float, !dbg !18
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !19
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !20
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !20
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !20
  %52 = bitcast i32 %50 to float, !dbg !20
  %53 = bitcast i32 %51 to float, !dbg !20
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !21
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !22
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !22
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !22
  %58 = bitcast i32 %56 to float, !dbg !22
  %59 = bitcast i32 %57 to float, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !23
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !24
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !24
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !24
  %64 = bitcast i32 %62 to float, !dbg !24
  %65 = bitcast i32 %63 to float, !dbg !24
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !25
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !26
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !26
  %70 = bitcast i32 %68 to float, !dbg !26
  %71 = bitcast i32 %69 to float, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %7, i64 %41, !dbg !27
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !28
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !28
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !28
  %76 = bitcast i32 %74 to float, !dbg !28
  %77 = bitcast i32 %75 to float, !dbg !28
  %78 = getelementptr float, ptr addrspace(1) %8, i64 %41, !dbg !29
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !30
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !30
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !30
  %82 = bitcast i32 %80 to float, !dbg !30
  %83 = bitcast i32 %81 to float, !dbg !30
  %84 = getelementptr float, ptr addrspace(1) %9, i64 %41, !dbg !31
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !32
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !32
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !32
  %88 = bitcast i32 %86 to float, !dbg !32
  %89 = bitcast i32 %87 to float, !dbg !32
  %90 = getelementptr float, ptr addrspace(1) %10, i64 %41, !dbg !33
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !34
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !34
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !34
  %94 = bitcast i32 %92 to float, !dbg !34
  %95 = bitcast i32 %93 to float, !dbg !34
  %96 = getelementptr float, ptr addrspace(1) %11, i64 %34, !dbg !35
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !36
  %98 = getelementptr float, ptr addrspace(1) %12, i64 %41, !dbg !37
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !38
  %100 = getelementptr float, ptr addrspace(1) %13, i64 %41, !dbg !39
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !40
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !40
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !40
  %104 = bitcast i32 %102 to float, !dbg !40
  %105 = bitcast i32 %103 to float, !dbg !40
  %106 = getelementptr float, ptr addrspace(1) %14, i64 %41, !dbg !41
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !42
  %108 = getelementptr float, ptr addrspace(1) %15, i64 %41, !dbg !43
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !44
  %110 = getelementptr float, ptr addrspace(1) %16, i64 %41, !dbg !45
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !46
  %112 = getelementptr float, ptr addrspace(1) %17, i64 %41, !dbg !47
  %113 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !48
  %114 = extractvalue { i32, i32 } %113, 0, !dbg !48
  %115 = extractvalue { i32, i32 } %113, 1, !dbg !48
  %116 = bitcast i32 %114 to float, !dbg !48
  %117 = bitcast i32 %115 to float, !dbg !48
  %118 = getelementptr float, ptr addrspace(1) %18, i64 %41, !dbg !49
  %119 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !50
  %120 = getelementptr float, ptr addrspace(1) %19, i64 %34, !dbg !51
  %121 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %120, i1 true) #3, !dbg !52
  %122 = getelementptr float, ptr addrspace(1) %20, i64 %41, !dbg !53
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !54
  %124 = getelementptr float, ptr addrspace(1) %21, i64 %41, !dbg !55
  %125 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !56
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !56
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !56
  %128 = bitcast i32 %126 to float, !dbg !56
  %129 = bitcast i32 %127 to float, !dbg !56
  %130 = getelementptr float, ptr addrspace(1) %22, i64 %41, !dbg !57
  %131 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !58
  %132 = getelementptr float, ptr addrspace(1) %23, i64 %41, !dbg !59
  %133 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %132, i1 true) #3, !dbg !60
  %134 = getelementptr float, ptr addrspace(1) %24, i64 %41, !dbg !61
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !62
  %136 = fsub float %39, %46, !dbg !63
  %137 = fsub float %40, %47, !dbg !63
  %138 = fadd float %52, 0x3EE4F8B580000000, !dbg !64
  %139 = fadd float %53, 0x3EE4F8B580000000, !dbg !64
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %140, 0, !dbg !65
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %141, 0, !dbg !65
  br i1 %.not.i, label %147, label %142, !dbg !65

142:                                              ; preds = %26
  br i1 %.not1.i, label %145, label %143, !dbg !65

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

147:                                              ; preds = %26
  br i1 %.not1.i, label %150, label %148, !dbg !65

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %143, %145, %148, %150
  %.0.i = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !65
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i1 = icmp eq i32 %152, 0, !dbg !65
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i4 = icmp eq i32 %153, 0, !dbg !65
  br i1 %.not.i1, label %159, label %154, !dbg !65

154:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %157, label %155, !dbg !65

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

159:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %162, label %160, !dbg !65

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

__nv_sqrtf.exit5:                                 ; preds = %155, %157, %160, %162
  %.0.i3 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !65
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !66
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !66
  %166 = fmul float %136, %164, !dbg !67
  %167 = fmul float %137, %165, !dbg !67
  %168 = fmul float %166, %58, !dbg !68
  %169 = fmul float %167, %59, !dbg !68
  %170 = fadd float %168, %64, !dbg !69
  %171 = fadd float %169, %65, !dbg !69
  %172 = fsub float %70, %76, !dbg !70
  %173 = fsub float %71, %77, !dbg !70
  %174 = fadd float %82, 0x3EE4F8B580000000, !dbg !71
  %175 = fadd float %83, 0x3EE4F8B580000000, !dbg !71
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i6 = icmp eq i32 %176, 0, !dbg !72
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i9 = icmp eq i32 %177, 0, !dbg !72
  br i1 %.not.i6, label %183, label %178, !dbg !72

178:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %181, label %179, !dbg !72

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #3, !dbg !72
  br label %__nv_sqrtf.exit10, !dbg !72

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #3, !dbg !72
  br label %__nv_sqrtf.exit10, !dbg !72

183:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %186, label %184, !dbg !72

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #3, !dbg !72
  br label %__nv_sqrtf.exit10, !dbg !72

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #3, !dbg !72
  br label %__nv_sqrtf.exit10, !dbg !72

__nv_sqrtf.exit10:                                ; preds = %179, %181, %184, %186
  %.0.i8 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !72
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i11 = icmp eq i32 %188, 0, !dbg !72
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i14 = icmp eq i32 %189, 0, !dbg !72
  br i1 %.not.i11, label %195, label %190, !dbg !72

190:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %193, label %191, !dbg !72

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #3, !dbg !72
  br label %__nv_sqrtf.exit15, !dbg !72

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #3, !dbg !72
  br label %__nv_sqrtf.exit15, !dbg !72

195:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %198, label %196, !dbg !72

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #3, !dbg !72
  br label %__nv_sqrtf.exit15, !dbg !72

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #3, !dbg !72
  br label %__nv_sqrtf.exit15, !dbg !72

__nv_sqrtf.exit15:                                ; preds = %191, %193, %196, %198
  %.0.i13 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !72
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !73
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !73
  %202 = fmul float %172, %200, !dbg !74
  %203 = fmul float %173, %201, !dbg !74
  %204 = fmul float %202, %88, !dbg !75
  %205 = fmul float %203, %89, !dbg !75
  %206 = fadd float %204, %94, !dbg !76
  %207 = fadd float %205, %95, !dbg !76
  %208 = fadd float %170, %206, !dbg !77
  %209 = fadd float %171, %207, !dbg !77
  %210 = fadd float %104, 0x3EE4F8B580000000, !dbg !78
  %211 = fadd float %105, 0x3EE4F8B580000000, !dbg !78
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i16 = icmp eq i32 %212, 0, !dbg !79
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i19 = icmp eq i32 %213, 0, !dbg !79
  br i1 %.not.i16, label %219, label %214, !dbg !79

214:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %217, label %215, !dbg !79

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %210) #3, !dbg !79
  br label %__nv_sqrtf.exit20, !dbg !79

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %210) #3, !dbg !79
  br label %__nv_sqrtf.exit20, !dbg !79

219:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %222, label %220, !dbg !79

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %210) #3, !dbg !79
  br label %__nv_sqrtf.exit20, !dbg !79

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %210) #3, !dbg !79
  br label %__nv_sqrtf.exit20, !dbg !79

__nv_sqrtf.exit20:                                ; preds = %215, %217, %220, %222
  %.0.i18 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !79
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i21 = icmp eq i32 %224, 0, !dbg !79
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i24 = icmp eq i32 %225, 0, !dbg !79
  br i1 %.not.i21, label %231, label %226, !dbg !79

226:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %229, label %227, !dbg !79

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %211) #3, !dbg !79
  br label %__nv_sqrtf.exit25, !dbg !79

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %211) #3, !dbg !79
  br label %__nv_sqrtf.exit25, !dbg !79

231:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %234, label %232, !dbg !79

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.f(float %211) #3, !dbg !79
  br label %__nv_sqrtf.exit25, !dbg !79

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.f(float %211) #3, !dbg !79
  br label %__nv_sqrtf.exit25, !dbg !79

__nv_sqrtf.exit25:                                ; preds = %227, %229, %232, %234
  %.0.i23 = phi float [ %228, %227 ], [ %230, %229 ], [ %233, %232 ], [ %235, %234 ], !dbg !79
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !80
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !80
  %238 = fsub float 0.000000e+00, %208, !dbg !81
  %239 = fsub float 0.000000e+00, %209, !dbg !81
  %240 = fmul float %238, 0x3FF7154760000000, !dbg !85
  %241 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %240) #3, !dbg !85
  %242 = fmul float %239, 0x3FF7154760000000, !dbg !85
  %243 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %242) #3, !dbg !85
  %244 = fadd float %241, 1.000000e+00, !dbg !86
  %245 = fadd float %243, 1.000000e+00, !dbg !86
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %244) #3, !dbg !87
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %245) #3, !dbg !87
  %248 = fadd float %116, 0x3EE4F8B580000000, !dbg !88
  %249 = fadd float %117, 0x3EE4F8B580000000, !dbg !88
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i26 = icmp eq i32 %250, 0, !dbg !89
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i29 = icmp eq i32 %251, 0, !dbg !89
  br i1 %.not.i26, label %257, label %252, !dbg !89

252:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %255, label %253, !dbg !89

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %248) #3, !dbg !89
  br label %__nv_sqrtf.exit30, !dbg !89

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %248) #3, !dbg !89
  br label %__nv_sqrtf.exit30, !dbg !89

257:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %260, label %258, !dbg !89

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.f(float %248) #3, !dbg !89
  br label %__nv_sqrtf.exit30, !dbg !89

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.f(float %248) #3, !dbg !89
  br label %__nv_sqrtf.exit30, !dbg !89

__nv_sqrtf.exit30:                                ; preds = %253, %255, %258, %260
  %.0.i28 = phi float [ %254, %253 ], [ %256, %255 ], [ %259, %258 ], [ %261, %260 ], !dbg !89
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i31 = icmp eq i32 %262, 0, !dbg !89
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i34 = icmp eq i32 %263, 0, !dbg !89
  br i1 %.not.i31, label %269, label %264, !dbg !89

264:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %267, label %265, !dbg !89

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %249) #3, !dbg !89
  br label %__nv_sqrtf.exit35, !dbg !89

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %249) #3, !dbg !89
  br label %__nv_sqrtf.exit35, !dbg !89

269:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %272, label %270, !dbg !89

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.f(float %249) #3, !dbg !89
  br label %__nv_sqrtf.exit35, !dbg !89

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.f(float %249) #3, !dbg !89
  br label %__nv_sqrtf.exit35, !dbg !89

__nv_sqrtf.exit35:                                ; preds = %265, %267, %270, %272
  %.0.i33 = phi float [ %266, %265 ], [ %268, %267 ], [ %271, %270 ], [ %273, %272 ], !dbg !89
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !90
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !90
  %276 = fadd float %128, 0x3EE4F8B580000000, !dbg !91
  %277 = fadd float %129, 0x3EE4F8B580000000, !dbg !91
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i36 = icmp eq i32 %278, 0, !dbg !92
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i39 = icmp eq i32 %279, 0, !dbg !92
  br i1 %.not.i36, label %285, label %280, !dbg !92

280:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %283, label %281, !dbg !92

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %276) #3, !dbg !92
  br label %__nv_sqrtf.exit40, !dbg !92

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %276) #3, !dbg !92
  br label %__nv_sqrtf.exit40, !dbg !92

285:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %288, label %286, !dbg !92

286:                                              ; preds = %285
  %287 = tail call float @llvm.nvvm.sqrt.rn.f(float %276) #3, !dbg !92
  br label %__nv_sqrtf.exit40, !dbg !92

288:                                              ; preds = %285
  %289 = tail call float @llvm.nvvm.sqrt.approx.f(float %276) #3, !dbg !92
  br label %__nv_sqrtf.exit40, !dbg !92

__nv_sqrtf.exit40:                                ; preds = %281, %283, %286, %288
  %.0.i38 = phi float [ %282, %281 ], [ %284, %283 ], [ %287, %286 ], [ %289, %288 ], !dbg !92
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i41 = icmp eq i32 %290, 0, !dbg !92
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i44 = icmp eq i32 %291, 0, !dbg !92
  br i1 %.not.i41, label %297, label %292, !dbg !92

292:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %295, label %293, !dbg !92

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %277) #3, !dbg !92
  br label %__nv_sqrtf.exit45, !dbg !92

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %277) #3, !dbg !92
  br label %__nv_sqrtf.exit45, !dbg !92

297:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %300, label %298, !dbg !92

298:                                              ; preds = %297
  %299 = tail call float @llvm.nvvm.sqrt.rn.f(float %277) #3, !dbg !92
  br label %__nv_sqrtf.exit45, !dbg !92

300:                                              ; preds = %297
  %301 = tail call float @llvm.nvvm.sqrt.approx.f(float %277) #3, !dbg !92
  br label %__nv_sqrtf.exit45, !dbg !92

__nv_sqrtf.exit45:                                ; preds = %293, %295, %298, %300
  %.0.i43 = phi float [ %294, %293 ], [ %296, %295 ], [ %299, %298 ], [ %301, %300 ], !dbg !92
  %302 = extractvalue { i32, i32 } %121, 1, !dbg !52
  %303 = bitcast i32 %302 to float, !dbg !52
  %304 = extractvalue { i32, i32 } %123, 1, !dbg !54
  %305 = extractvalue { i32, i32 } %121, 0, !dbg !52
  %306 = bitcast i32 %305 to float, !dbg !52
  %307 = extractvalue { i32, i32 } %123, 0, !dbg !54
  %308 = extractvalue { i32, i32 } %97, 1, !dbg !36
  %309 = bitcast i32 %308 to float, !dbg !36
  %310 = extractvalue { i32, i32 } %99, 1, !dbg !38
  %311 = bitcast i32 %310 to float, !dbg !38
  %312 = fsub float %309, %311, !dbg !93
  %313 = fmul float %312, %237, !dbg !94
  %314 = extractvalue { i32, i32 } %107, 1, !dbg !42
  %315 = bitcast i32 %314 to float, !dbg !42
  %316 = fmul float %313, %315, !dbg !95
  %317 = extractvalue { i32, i32 } %109, 1, !dbg !44
  %318 = bitcast i32 %317 to float, !dbg !44
  %319 = fadd float %316, %318, !dbg !96
  %320 = fmul float %319, %247, !dbg !97
  %321 = extractvalue { i32, i32 } %111, 1, !dbg !46
  %322 = extractvalue { i32, i32 } %119, 1, !dbg !50
  %323 = extractvalue { i32, i32 } %97, 0, !dbg !36
  %324 = bitcast i32 %323 to float, !dbg !36
  %325 = extractvalue { i32, i32 } %99, 0, !dbg !38
  %326 = bitcast i32 %325 to float, !dbg !38
  %327 = fsub float %324, %326, !dbg !93
  %328 = fmul float %327, %236, !dbg !94
  %329 = extractvalue { i32, i32 } %107, 0, !dbg !42
  %330 = bitcast i32 %329 to float, !dbg !42
  %331 = fmul float %328, %330, !dbg !95
  %332 = extractvalue { i32, i32 } %109, 0, !dbg !44
  %333 = bitcast i32 %332 to float, !dbg !44
  %334 = fadd float %331, %333, !dbg !96
  %335 = fmul float %334, %246, !dbg !97
  %336 = extractvalue { i32, i32 } %111, 0, !dbg !46
  %337 = extractvalue { i32, i32 } %119, 0, !dbg !50
  %338 = extractvalue { i32, i32 } %135, 1, !dbg !62
  %339 = extractvalue { i32, i32 } %135, 0, !dbg !62
  %340 = extractvalue { i32, i32 } %133, 1, !dbg !60
  %341 = extractvalue { i32, i32 } %133, 0, !dbg !60
  %342 = extractvalue { i32, i32 } %131, 1, !dbg !58
  %343 = extractvalue { i32, i32 } %131, 0, !dbg !58
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !98
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !98
  %346 = insertelement <2 x i32> poison, i32 %336, i64 0, !dbg !46
  %347 = insertelement <2 x i32> %346, i32 %307, i64 1, !dbg !46
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !46
  %349 = insertelement <2 x float> poison, float %335, i64 0, !dbg !99
  %350 = insertelement <2 x float> %349, float %306, i64 1, !dbg !99
  %351 = fsub <2 x float> %350, %348, !dbg !99
  %352 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !62
  %353 = insertelement <2 x i32> %352, i32 %341, i64 1, !dbg !62
  %354 = bitcast <2 x i32> %353 to <2 x float>, !dbg !62
  %355 = insertelement <2 x i32> poison, i32 %337, i64 0, !dbg !50
  %356 = insertelement <2 x i32> %355, i32 %343, i64 1, !dbg !50
  %357 = bitcast <2 x i32> %356 to <2 x float>, !dbg !50
  %358 = insertelement <2 x float> poison, float %274, i64 0, !dbg !100
  %359 = insertelement <2 x float> %358, float %344, i64 1, !dbg !100
  %360 = fmul <2 x float> %351, %359, !dbg !100
  %361 = fmul <2 x float> %360, %357, !dbg !101
  %362 = fadd <2 x float> %361, %354, !dbg !102
  %363 = insertelement <2 x i32> poison, i32 %321, i64 0, !dbg !46
  %364 = insertelement <2 x i32> %363, i32 %304, i64 1, !dbg !46
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !46
  %366 = insertelement <2 x float> poison, float %320, i64 0, !dbg !99
  %367 = insertelement <2 x float> %366, float %303, i64 1, !dbg !99
  %368 = fsub <2 x float> %367, %365, !dbg !99
  %369 = insertelement <2 x i32> poison, i32 %338, i64 0, !dbg !62
  %370 = insertelement <2 x i32> %369, i32 %340, i64 1, !dbg !62
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !62
  %372 = insertelement <2 x i32> poison, i32 %322, i64 0, !dbg !50
  %373 = insertelement <2 x i32> %372, i32 %342, i64 1, !dbg !50
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !50
  %375 = insertelement <2 x float> poison, float %275, i64 0, !dbg !100
  %376 = insertelement <2 x float> %375, float %345, i64 1, !dbg !100
  %377 = fmul <2 x float> %368, %376, !dbg !100
  %378 = fmul <2 x float> %377, %374, !dbg !101
  %379 = fadd <2 x float> %378, %371, !dbg !102
  %shift = shufflevector <2 x float> %362, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !103
  %380 = fadd <2 x float> %362, %shift, !dbg !103
  %381 = extractelement <2 x float> %380, i64 0, !dbg !103
  %shift46 = shufflevector <2 x float> %379, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !103
  %382 = fadd <2 x float> %379, %shift46, !dbg !103
  %383 = extractelement <2 x float> %382, i64 0, !dbg !103
  %384 = fcmp olt float %381, 0.000000e+00, !dbg !104
  %385 = fcmp olt float %383, 0.000000e+00, !dbg !104
  %386 = select i1 %384, float 0.000000e+00, float %381, !dbg !108
  %387 = select i1 %385, float 0.000000e+00, float %383, !dbg !108
  %388 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !109
  %389 = bitcast float %386 to i32, !dbg !110
  %390 = bitcast float %387 to i32, !dbg !110
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %389, i32 %390, ptr addrspace(1) %388, i1 true) #3, !dbg !110
  ret void, !dbg !111
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdzlhuogtjm7xtcayvzjfcm6pfagp4pnfcebvvszs7mb7h2fyuni.py", directory: "inductor_cache/dz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 38, column: 32, scope: !7)
!40 = !DILocation(line: 38, column: 37, scope: !7)
!41 = !DILocation(line: 39, column: 32, scope: !7)
!42 = !DILocation(line: 39, column: 37, scope: !7)
!43 = !DILocation(line: 40, column: 32, scope: !7)
!44 = !DILocation(line: 40, column: 37, scope: !7)
!45 = !DILocation(line: 41, column: 32, scope: !7)
!46 = !DILocation(line: 41, column: 37, scope: !7)
!47 = !DILocation(line: 42, column: 32, scope: !7)
!48 = !DILocation(line: 42, column: 37, scope: !7)
!49 = !DILocation(line: 43, column: 32, scope: !7)
!50 = !DILocation(line: 43, column: 37, scope: !7)
!51 = !DILocation(line: 44, column: 32, scope: !7)
!52 = !DILocation(line: 44, column: 37, scope: !7)
!53 = !DILocation(line: 45, column: 32, scope: !7)
!54 = !DILocation(line: 45, column: 37, scope: !7)
!55 = !DILocation(line: 46, column: 32, scope: !7)
!56 = !DILocation(line: 46, column: 37, scope: !7)
!57 = !DILocation(line: 47, column: 32, scope: !7)
!58 = !DILocation(line: 47, column: 37, scope: !7)
!59 = !DILocation(line: 48, column: 32, scope: !7)
!60 = !DILocation(line: 48, column: 37, scope: !7)
!61 = !DILocation(line: 49, column: 32, scope: !7)
!62 = !DILocation(line: 49, column: 37, scope: !7)
!63 = !DILocation(line: 50, column: 18, scope: !7)
!64 = !DILocation(line: 52, column: 18, scope: !7)
!65 = !DILocation(line: 53, column: 26, scope: !7)
!66 = !DILocation(line: 55, column: 18, scope: !7)
!67 = !DILocation(line: 58, column: 19, scope: !7)
!68 = !DILocation(line: 59, column: 20, scope: !7)
!69 = !DILocation(line: 60, column: 20, scope: !7)
!70 = !DILocation(line: 61, column: 20, scope: !7)
!71 = !DILocation(line: 62, column: 20, scope: !7)
!72 = !DILocation(line: 63, column: 27, scope: !7)
!73 = !DILocation(line: 64, column: 19, scope: !7)
!74 = !DILocation(line: 66, column: 20, scope: !7)
!75 = !DILocation(line: 67, column: 20, scope: !7)
!76 = !DILocation(line: 68, column: 20, scope: !7)
!77 = !DILocation(line: 69, column: 20, scope: !7)
!78 = !DILocation(line: 71, column: 20, scope: !7)
!79 = !DILocation(line: 72, column: 27, scope: !7)
!80 = !DILocation(line: 73, column: 19, scope: !7)
!81 = !DILocation(line: 47, column: 30, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!84 = !DILocation(line: 78, column: 23, scope: !7)
!85 = !DILocation(line: 47, column: 29, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 47, column: 20, scope: !82, inlinedAt: !84)
!87 = !DILocation(line: 47, column: 16, scope: !82, inlinedAt: !84)
!88 = !DILocation(line: 81, column: 20, scope: !7)
!89 = !DILocation(line: 82, column: 27, scope: !7)
!90 = !DILocation(line: 83, column: 19, scope: !7)
!91 = !DILocation(line: 88, column: 20, scope: !7)
!92 = !DILocation(line: 89, column: 27, scope: !7)
!93 = !DILocation(line: 70, column: 20, scope: !7)
!94 = !DILocation(line: 75, column: 20, scope: !7)
!95 = !DILocation(line: 76, column: 20, scope: !7)
!96 = !DILocation(line: 77, column: 20, scope: !7)
!97 = !DILocation(line: 79, column: 20, scope: !7)
!98 = !DILocation(line: 90, column: 19, scope: !7)
!99 = !DILocation(line: 80, column: 20, scope: !7)
!100 = !DILocation(line: 85, column: 20, scope: !7)
!101 = !DILocation(line: 86, column: 20, scope: !7)
!102 = !DILocation(line: 95, column: 20, scope: !7)
!103 = !DILocation(line: 96, column: 20, scope: !7)
!104 = !DILocation(line: 118, column: 15, scope: !105, inlinedAt: !107)
!105 = distinct !DILexicalBlockFile(scope: !7, file: !106, discriminator: 0)
!106 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!107 = !DILocation(line: 98, column: 42, scope: !7)
!108 = !DILocation(line: 121, column: 29, scope: !105, inlinedAt: !107)
!109 = !DILocation(line: 99, column: 28, scope: !7)
!110 = !DILocation(line: 99, column: 40, scope: !7)
!111 = !DILocation(line: 99, column: 4, scope: !7)
