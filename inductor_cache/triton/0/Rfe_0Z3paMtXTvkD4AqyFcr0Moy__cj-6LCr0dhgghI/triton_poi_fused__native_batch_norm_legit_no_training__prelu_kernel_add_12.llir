; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, i32 %19) local_unnamed_addr !dbg !7 {
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %22 = shl i32 %21, 8, !dbg !11
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %24 = shl i32 %23, 1, !dbg !12
  %25 = and i32 %24, 254, !dbg !12
  %26 = or disjoint i32 %22, %25, !dbg !13
  %27 = sdiv i32 %26, 256, !dbg !14
  %28 = srem i32 %27, 24, !dbg !15
  %29 = sext i32 %26 to i64, !dbg !16
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !16
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !17
  %32 = sext i32 %28 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !18
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %38 = bitcast i32 %37 to float, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !21
  %40 = bitcast i32 %39 to float, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !26
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !30
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !31
  %54 = bitcast i32 %53 to float, !dbg !31
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !31
  %56 = bitcast i32 %55 to float, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !32
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !35
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !35
  %63 = getelementptr float, ptr addrspace(1) %10, i64 %32, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !37
  %66 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !38
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !39
  %68 = getelementptr float, ptr addrspace(1) %12, i64 %32, !dbg !40
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !41
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !41
  %71 = getelementptr float, ptr addrspace(1) %13, i64 %32, !dbg !42
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !43
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !43
  %74 = getelementptr float, ptr addrspace(1) %14, i64 %29, !dbg !44
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !45
  %76 = getelementptr float, ptr addrspace(1) %15, i64 %32, !dbg !46
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !47
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !47
  %79 = fadd float %38, 0x3EE4F8B580000000, !dbg !48
  %80 = fadd float %40, 0x3EE4F8B580000000, !dbg !48
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %81, 0, !dbg !49
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %82, 0, !dbg !49
  br i1 %.not.i, label %88, label %83, !dbg !49

83:                                               ; preds = %20
  br i1 %.not1.i, label %86, label %84, !dbg !49

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

88:                                               ; preds = %20
  br i1 %.not1.i, label %91, label %89, !dbg !49

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !49
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i1 = icmp eq i32 %93, 0, !dbg !49
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i4 = icmp eq i32 %94, 0, !dbg !49
  br i1 %.not.i1, label %100, label %95, !dbg !49

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !49

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !49

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

__nv_sqrtf.exit5:                                 ; preds = %96, %98, %101, %103
  %.0.i3 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !49
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !50
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !50
  %107 = fadd float %54, 0x3EE4F8B580000000, !dbg !51
  %108 = fadd float %56, 0x3EE4F8B580000000, !dbg !51
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i6 = icmp eq i32 %109, 0, !dbg !52
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i9 = icmp eq i32 %110, 0, !dbg !52
  br i1 %.not.i6, label %116, label %111, !dbg !52

111:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %114, label %112, !dbg !52

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !52

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

__nv_sqrtf.exit10:                                ; preds = %112, %114, %117, %119
  %.0.i8 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !52
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i11 = icmp eq i32 %121, 0, !dbg !52
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i14 = icmp eq i32 %122, 0, !dbg !52
  br i1 %.not.i11, label %128, label %123, !dbg !52

123:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %126, label %124, !dbg !52

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !52

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

__nv_sqrtf.exit15:                                ; preds = %124, %126, %129, %131
  %.0.i13 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !52
  %133 = extractvalue { i32, i32 } %48, 1, !dbg !27
  %134 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !19
  %135 = insertelement <2 x i32> %134, i32 %51, i64 1, !dbg !19
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !19
  %137 = extractvalue { i32, i32 } %48, 0, !dbg !27
  %138 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !19
  %139 = insertelement <2 x i32> %138, i32 %50, i64 1, !dbg !19
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !19
  %141 = extractvalue { i32, i32 } %31, 1, !dbg !17
  %142 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !23
  %143 = insertelement <2 x i32> %142, i32 %59, i64 1, !dbg !23
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !23
  %145 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !25
  %146 = insertelement <2 x i32> %145, i32 %62, i64 1, !dbg !25
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !25
  %148 = extractvalue { i32, i32 } %31, 0, !dbg !17
  %149 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !23
  %150 = insertelement <2 x i32> %149, i32 %58, i64 1, !dbg !23
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !23
  %152 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !25
  %153 = insertelement <2 x i32> %152, i32 %61, i64 1, !dbg !25
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !25
  %155 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !41
  %156 = insertelement <2 x i32> %155, i32 %78, i64 1, !dbg !41
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !41
  %158 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !41
  %159 = insertelement <2 x i32> %158, i32 %77, i64 1, !dbg !41
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !41
  %161 = extractvalue { i32, i32 } %75, 1, !dbg !45
  %162 = extractvalue { i32, i32 } %75, 0, !dbg !45
  %163 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !37
  %164 = insertelement <2 x i32> %163, i32 %73, i64 1, !dbg !37
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !37
  %166 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !37
  %167 = insertelement <2 x i32> %166, i32 %72, i64 1, !dbg !37
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !37
  %169 = extractvalue { i32, i32 } %67, 1, !dbg !39
  %170 = extractvalue { i32, i32 } %67, 0, !dbg !39
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !53
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !53
  %173 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !17
  %174 = insertelement <2 x i32> %173, i32 %137, i64 1, !dbg !17
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !17
  %176 = fsub <2 x float> %175, %140, !dbg !54
  %177 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !39
  %178 = insertelement <2 x i32> %177, i32 %162, i64 1, !dbg !39
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !39
  %180 = insertelement <2 x float> poison, float %105, i64 0, !dbg !55
  %181 = insertelement <2 x float> %180, float %171, i64 1, !dbg !55
  %182 = fmul <2 x float> %176, %181, !dbg !55
  %183 = fmul <2 x float> %182, %151, !dbg !56
  %184 = fadd <2 x float> %183, %154, !dbg !57
  %185 = fcmp ogt <2 x float> %184, zeroinitializer, !dbg !58
  %186 = fmul <2 x float> %184, %168, !dbg !59
  %187 = select <2 x i1> %185, <2 x float> %184, <2 x float> %186, !dbg !60
  %188 = fcmp ogt <2 x float> %179, zeroinitializer, !dbg !61
  %189 = fmul <2 x float> %160, %179, !dbg !62
  %190 = select <2 x i1> %188, <2 x float> %179, <2 x float> %189, !dbg !63
  %191 = fadd <2 x float> %190, %187, !dbg !64
  %192 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !17
  %193 = insertelement <2 x i32> %192, i32 %133, i64 1, !dbg !17
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !17
  %195 = fsub <2 x float> %194, %136, !dbg !54
  %196 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !39
  %197 = insertelement <2 x i32> %196, i32 %161, i64 1, !dbg !39
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !39
  %199 = insertelement <2 x float> poison, float %106, i64 0, !dbg !55
  %200 = insertelement <2 x float> %199, float %172, i64 1, !dbg !55
  %201 = fmul <2 x float> %195, %200, !dbg !55
  %202 = fmul <2 x float> %201, %144, !dbg !56
  %203 = fadd <2 x float> %202, %147, !dbg !57
  %204 = fcmp ogt <2 x float> %203, zeroinitializer, !dbg !58
  %205 = fmul <2 x float> %203, %165, !dbg !59
  %206 = select <2 x i1> %204, <2 x float> %203, <2 x float> %205, !dbg !60
  %207 = fcmp ogt <2 x float> %198, zeroinitializer, !dbg !61
  %208 = fmul <2 x float> %198, %157, !dbg !62
  %209 = select <2 x i1> %207, <2 x float> %198, <2 x float> %208, !dbg !63
  %210 = fadd <2 x float> %209, %206, !dbg !64
  %shift = shufflevector <2 x float> %191, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !65
  %211 = fadd <2 x float> %191, %shift, !dbg !65
  %shift16 = shufflevector <2 x float> %210, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !65
  %212 = fadd <2 x float> %210, %shift16, !dbg !65
  %213 = getelementptr float, ptr addrspace(1) %16, i64 %29, !dbg !66
  %bc = bitcast <2 x float> %184 to <2 x i32>, !dbg !67
  %214 = extractelement <2 x i32> %bc, i64 0, !dbg !67
  %bc17 = bitcast <2 x float> %203 to <2 x i32>, !dbg !67
  %215 = extractelement <2 x i32> %bc17, i64 0, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %214, i32 %215, ptr addrspace(1) %213, i1 true) #3, !dbg !67
  %216 = getelementptr float, ptr addrspace(1) %17, i64 %29, !dbg !68
  %bc18 = bitcast <2 x float> %184 to <2 x i32>, !dbg !69
  %217 = extractelement <2 x i32> %bc18, i64 1, !dbg !69
  %bc19 = bitcast <2 x float> %203 to <2 x i32>, !dbg !69
  %218 = extractelement <2 x i32> %bc19, i64 1, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %217, i32 %218, ptr addrspace(1) %216, i1 true) #3, !dbg !69
  %219 = getelementptr float, ptr addrspace(1) %18, i64 %29, !dbg !70
  %bc20 = bitcast <2 x float> %211 to <2 x i32>, !dbg !71
  %220 = extractelement <2 x i32> %bc20, i64 0, !dbg !71
  %bc21 = bitcast <2 x float> %212 to <2 x i32>, !dbg !71
  %221 = extractelement <2 x i32> %bc21, i64 0, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %220, i32 %221, ptr addrspace(1) %219, i1 true) #3, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp3spnsmaj6bkqqney66tgnodouwwrdmtvr6ak7hvjivwznojy7w.py", directory: "inductor_cache/p3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 41, column: 32, scope: !7)
!47 = !DILocation(line: 41, column: 37, scope: !7)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 45, column: 26, scope: !7)
!50 = !DILocation(line: 47, column: 18, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 27, scope: !7)
!53 = !DILocation(line: 56, column: 19, scope: !7)
!54 = !DILocation(line: 42, column: 18, scope: !7)
!55 = !DILocation(line: 50, column: 19, scope: !7)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 52, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 35, scope: !7)
!61 = !DILocation(line: 65, column: 20, scope: !7)
!62 = !DILocation(line: 66, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 35, scope: !7)
!64 = !DILocation(line: 68, column: 20, scope: !7)
!65 = !DILocation(line: 76, column: 20, scope: !7)
!66 = !DILocation(line: 77, column: 25, scope: !7)
!67 = !DILocation(line: 77, column: 37, scope: !7)
!68 = !DILocation(line: 78, column: 25, scope: !7)
!69 = !DILocation(line: 78, column: 37, scope: !7)
!70 = !DILocation(line: 79, column: 25, scope: !7)
!71 = !DILocation(line: 79, column: 37, scope: !7)
!72 = !DILocation(line: 79, column: 4, scope: !7)
