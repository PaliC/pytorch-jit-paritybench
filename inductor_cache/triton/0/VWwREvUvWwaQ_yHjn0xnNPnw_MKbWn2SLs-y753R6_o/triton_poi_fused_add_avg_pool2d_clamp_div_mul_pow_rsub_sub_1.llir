; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_rsub_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = or disjoint i32 %11, 2, !dbg !13
  %14 = or disjoint i32 %11, 3, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %15 = sdiv i32 %.frozen, 56, !dbg !14
  %16 = mul i32 %15, 56, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = srem i32 %12, 56, !dbg !15
  %18 = srem i32 %13, 56, !dbg !15
  %19 = srem i32 %14, 56, !dbg !15
  %20 = shl i32 %15, 6, !dbg !16
  %21 = add i32 %20, %.decomposed, !dbg !17
  %22 = sext i32 %21 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = or disjoint i32 %21, 1, !dbg !20
  %34 = add i32 %20, %17, !dbg !21
  %35 = add nuw nsw i32 %34, 1, !dbg !20
  %36 = add i32 %20, %18, !dbg !21
  %37 = or disjoint i32 %36, 1, !dbg !20
  %38 = add i32 %20, %19, !dbg !21
  %39 = add i32 %38, 1, !dbg !20
  %40 = sext i32 %33 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !22
  %42 = sext i32 %35 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !22
  %44 = sext i32 %37 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !22
  %46 = sext i32 %39 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !23
  %49 = bitcast i32 %48 to float, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !23
  %51 = bitcast i32 %50 to float, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !23
  %53 = bitcast i32 %52 to float, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = or disjoint i32 %21, 2, !dbg !24
  %57 = add i32 %36, 2, !dbg !24
  %58 = sext i32 %56 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !25
  %60 = sext i32 %57 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !25
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !26
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !26
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !26
  %65 = bitcast i32 %63 to float, !dbg !26
  %66 = bitcast i32 %64 to float, !dbg !26
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !26
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !26
  %70 = bitcast i32 %68 to float, !dbg !26
  %71 = bitcast i32 %69 to float, !dbg !26
  %72 = or disjoint i32 %21, 3, !dbg !27
  %73 = add i32 %34, 3, !dbg !27
  %74 = add i32 %36, 3, !dbg !27
  %75 = add i32 %38, 3, !dbg !27
  %76 = sext i32 %72 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !28
  %78 = sext i32 %73 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !28
  %80 = sext i32 %74 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !28
  %82 = sext i32 %75 to i64, !dbg !28
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !28
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !29
  %85 = bitcast i32 %84 to float, !dbg !29
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !29
  %89 = bitcast i32 %88 to float, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = add i32 %21, 4, !dbg !30
  %93 = sext i32 %92 to i64, !dbg !31
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !31
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !32
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !32
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !32
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !32
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !32
  %100 = bitcast i32 %96 to float, !dbg !32
  %101 = bitcast i32 %97 to float, !dbg !32
  %102 = bitcast i32 %98 to float, !dbg !32
  %103 = bitcast i32 %99 to float, !dbg !32
  %104 = add i32 %21, 5, !dbg !33
  %105 = or disjoint i32 %20, 5, !dbg !34
  %106 = add i32 %105, %17, !dbg !33
  %107 = add i32 %36, 5, !dbg !33
  %108 = add i32 %105, %19, !dbg !33
  %109 = sext i32 %104 to i64, !dbg !35
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !35
  %111 = sext i32 %106 to i64, !dbg !35
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !35
  %113 = sext i32 %107 to i64, !dbg !35
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !35
  %115 = sext i32 %108 to i64, !dbg !35
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !35
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #1, !dbg !36
  %118 = bitcast i32 %117 to float, !dbg !36
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #1, !dbg !36
  %120 = bitcast i32 %119 to float, !dbg !36
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #1, !dbg !36
  %122 = bitcast i32 %121 to float, !dbg !36
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #1, !dbg !36
  %124 = bitcast i32 %123 to float, !dbg !36
  %125 = add i32 %21, 6, !dbg !37
  %126 = add i32 %36, 6, !dbg !37
  %127 = sext i32 %125 to i64, !dbg !38
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !38
  %129 = sext i32 %126 to i64, !dbg !38
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !38
  %131 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !39
  %132 = extractvalue { i32, i32 } %131, 0, !dbg !39
  %133 = extractvalue { i32, i32 } %131, 1, !dbg !39
  %134 = bitcast i32 %132 to float, !dbg !39
  %135 = bitcast i32 %133 to float, !dbg !39
  %136 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %130, i1 true) #1, !dbg !39
  %137 = extractvalue { i32, i32 } %136, 0, !dbg !39
  %138 = extractvalue { i32, i32 } %136, 1, !dbg !39
  %139 = bitcast i32 %137 to float, !dbg !39
  %140 = bitcast i32 %138 to float, !dbg !39
  %141 = add i32 %21, 7, !dbg !40
  %142 = or disjoint i32 %20, 7, !dbg !41
  %143 = add i32 %142, %17, !dbg !40
  %144 = add i32 %36, 7, !dbg !40
  %145 = add i32 %142, %19, !dbg !40
  %146 = sext i32 %141 to i64, !dbg !42
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !42
  %148 = sext i32 %143 to i64, !dbg !42
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !42
  %150 = sext i32 %144 to i64, !dbg !42
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !42
  %152 = sext i32 %145 to i64, !dbg !42
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !42
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !43
  %155 = bitcast i32 %154 to float, !dbg !43
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #1, !dbg !43
  %157 = bitcast i32 %156 to float, !dbg !43
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #1, !dbg !43
  %159 = bitcast i32 %158 to float, !dbg !43
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 true) #1, !dbg !43
  %161 = bitcast i32 %160 to float, !dbg !43
  %162 = add i32 %21, 8, !dbg !44
  %163 = sext i32 %162 to i64, !dbg !45
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !45
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %164, i1 true) #1, !dbg !46
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !46
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !46
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !46
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !46
  %170 = bitcast i32 %166 to float, !dbg !46
  %171 = bitcast i32 %167 to float, !dbg !46
  %172 = bitcast i32 %168 to float, !dbg !46
  %173 = bitcast i32 %169 to float, !dbg !46
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !47
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %174, i1 true) #1, !dbg !48
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !48
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !48
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !48
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !48
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !49
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !49
  %182 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !49
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !49
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #1, !dbg !50
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #1, !dbg !50
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #1, !dbg !50
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 true) #1, !dbg !50
  %188 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !51
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !51
  %190 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %188, i1 true) #1, !dbg !52
  %191 = extractvalue { i32, i32 } %190, 0, !dbg !52
  %192 = extractvalue { i32, i32 } %190, 1, !dbg !52
  %193 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %189, i1 true) #1, !dbg !52
  %194 = extractvalue { i32, i32 } %193, 0, !dbg !52
  %195 = extractvalue { i32, i32 } %193, 1, !dbg !52
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %76, !dbg !53
  %197 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !53
  %198 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !53
  %199 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !53
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #1, !dbg !54
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 true) #1, !dbg !54
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 true) #1, !dbg !54
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 true) #1, !dbg !54
  %204 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !55
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %204, i1 true) #1, !dbg !56
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !56
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !56
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !56
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !56
  %210 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !57
  %211 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !57
  %212 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !57
  %213 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !57
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 true) #1, !dbg !58
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 true) #1, !dbg !58
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #1, !dbg !58
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 true) #1, !dbg !58
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !59
  %219 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !59
  %220 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !60
  %221 = extractvalue { i32, i32 } %220, 0, !dbg !60
  %222 = extractvalue { i32, i32 } %220, 1, !dbg !60
  %223 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %219, i1 true) #1, !dbg !60
  %224 = extractvalue { i32, i32 } %223, 0, !dbg !60
  %225 = extractvalue { i32, i32 } %223, 1, !dbg !60
  %226 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !61
  %227 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !61
  %228 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !61
  %229 = getelementptr float, ptr addrspace(1) %2, i64 %152, !dbg !61
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !62
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #1, !dbg !62
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #1, !dbg !62
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 true) #1, !dbg !62
  %234 = getelementptr float, ptr addrspace(1) %2, i64 %163, !dbg !63
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %234, i1 true) #1, !dbg !64
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !64
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !64
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !64
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !64
  %240 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !65
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %240, i1 true) #1, !dbg !66
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !66
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !66
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !66
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !66
  %246 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !67
  %247 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !67
  %248 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !67
  %249 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !67
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #1, !dbg !68
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 true) #1, !dbg !68
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #1, !dbg !68
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 true) #1, !dbg !68
  %254 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !69
  %255 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !69
  %256 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %254, i1 true) #1, !dbg !70
  %257 = extractvalue { i32, i32 } %256, 0, !dbg !70
  %258 = extractvalue { i32, i32 } %256, 1, !dbg !70
  %259 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %255, i1 true) #1, !dbg !70
  %260 = extractvalue { i32, i32 } %259, 0, !dbg !70
  %261 = extractvalue { i32, i32 } %259, 1, !dbg !70
  %262 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !71
  %263 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !71
  %264 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !71
  %265 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !71
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 true) #1, !dbg !72
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 true) #1, !dbg !72
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 true) #1, !dbg !72
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 true) #1, !dbg !72
  %270 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !73
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !74
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !74
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !74
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !74
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !74
  %276 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !75
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !75
  %278 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !75
  %279 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !75
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #1, !dbg !76
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 true) #1, !dbg !76
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #1, !dbg !76
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 true) #1, !dbg !76
  %284 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !77
  %285 = getelementptr float, ptr addrspace(1) %3, i64 %129, !dbg !77
  %286 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %284, i1 true) #1, !dbg !78
  %287 = extractvalue { i32, i32 } %286, 0, !dbg !78
  %288 = extractvalue { i32, i32 } %286, 1, !dbg !78
  %289 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %285, i1 true) #1, !dbg !78
  %290 = extractvalue { i32, i32 } %289, 0, !dbg !78
  %291 = extractvalue { i32, i32 } %289, 1, !dbg !78
  %292 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !79
  %293 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !79
  %294 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !79
  %295 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !79
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #1, !dbg !80
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %293, i1 true) #1, !dbg !80
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #1, !dbg !80
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 true) #1, !dbg !80
  %300 = getelementptr float, ptr addrspace(1) %3, i64 %163, !dbg !81
  %301 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %300, i1 true) #1, !dbg !82
  %302 = extractvalue { i32, i32, i32, i32 } %301, 0, !dbg !82
  %303 = extractvalue { i32, i32, i32, i32 } %301, 1, !dbg !82
  %304 = extractvalue { i32, i32, i32, i32 } %301, 2, !dbg !82
  %305 = extractvalue { i32, i32, i32, i32 } %301, 3, !dbg !82
  %306 = fadd float %49, %29, !dbg !83
  %307 = fadd float %30, %51, !dbg !83
  %308 = fadd float %31, %53, !dbg !83
  %309 = fadd float %32, %55, !dbg !83
  %310 = fadd float %306, %65, !dbg !84
  %311 = fadd float %307, %66, !dbg !84
  %312 = fadd float %308, %70, !dbg !84
  %313 = fadd float %309, %71, !dbg !84
  %314 = fadd float %310, %85, !dbg !85
  %315 = fadd float %311, %87, !dbg !85
  %316 = fadd float %312, %89, !dbg !85
  %317 = fadd float %313, %91, !dbg !85
  %318 = fadd float %314, %100, !dbg !86
  %319 = fadd float %315, %101, !dbg !86
  %320 = fadd float %316, %102, !dbg !86
  %321 = fadd float %317, %103, !dbg !86
  %322 = fadd float %318, %118, !dbg !87
  %323 = fadd float %319, %120, !dbg !87
  %324 = fadd float %320, %122, !dbg !87
  %325 = fadd float %321, %124, !dbg !87
  %326 = fadd float %322, %134, !dbg !88
  %327 = fadd float %323, %135, !dbg !88
  %328 = fadd float %324, %139, !dbg !88
  %329 = fadd float %325, %140, !dbg !88
  %330 = fadd float %326, %155, !dbg !89
  %331 = fadd float %327, %157, !dbg !89
  %332 = fadd float %328, %159, !dbg !89
  %333 = fadd float %329, %161, !dbg !89
  %334 = fadd float %330, %170, !dbg !90
  %335 = fadd float %331, %171, !dbg !90
  %336 = fadd float %332, %172, !dbg !90
  %337 = fadd float %333, %173, !dbg !90
  %338 = fmul float %334, 0x3FBC71C720000000, !dbg !91
  %339 = fmul float %335, 0x3FBC71C720000000, !dbg !91
  %340 = fmul float %336, 0x3FBC71C720000000, !dbg !91
  %341 = fmul float %337, 0x3FBC71C720000000, !dbg !91
  %342 = insertelement <2 x i32> poison, i32 %176, i64 0, !dbg !48
  %343 = insertelement <2 x i32> %342, i32 %242, i64 1, !dbg !48
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !48
  %345 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !50
  %346 = insertelement <2 x i32> %345, i32 %250, i64 1, !dbg !50
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !50
  %348 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !52
  %349 = insertelement <2 x i32> %348, i32 %257, i64 1, !dbg !52
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !52
  %351 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !54
  %352 = insertelement <2 x i32> %351, i32 %266, i64 1, !dbg !54
  %353 = bitcast <2 x i32> %352 to <2 x float>, !dbg !54
  %354 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !56
  %355 = insertelement <2 x i32> %354, i32 %272, i64 1, !dbg !56
  %356 = bitcast <2 x i32> %355 to <2 x float>, !dbg !56
  %357 = insertelement <2 x i32> poison, i32 %214, i64 0, !dbg !58
  %358 = insertelement <2 x i32> %357, i32 %280, i64 1, !dbg !58
  %359 = bitcast <2 x i32> %358 to <2 x float>, !dbg !58
  %360 = insertelement <2 x i32> poison, i32 %221, i64 0, !dbg !60
  %361 = insertelement <2 x i32> %360, i32 %287, i64 1, !dbg !60
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !60
  %363 = insertelement <2 x i32> poison, i32 %230, i64 0, !dbg !62
  %364 = insertelement <2 x i32> %363, i32 %296, i64 1, !dbg !62
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !62
  %366 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !64
  %367 = insertelement <2 x i32> %366, i32 %302, i64 1, !dbg !64
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !64
  %369 = fadd <2 x float> %347, %344, !dbg !92
  %370 = fadd <2 x float> %369, %350, !dbg !93
  %371 = fadd <2 x float> %370, %353, !dbg !94
  %372 = fadd <2 x float> %371, %356, !dbg !95
  %373 = fadd <2 x float> %372, %359, !dbg !96
  %374 = fadd <2 x float> %373, %362, !dbg !97
  %375 = fadd <2 x float> %374, %365, !dbg !98
  %376 = fadd <2 x float> %375, %368, !dbg !99
  %377 = fmul <2 x float> %376, splat (float 0x3FBC71C720000000), !dbg !100
  %378 = fmul <2 x float> %344, %344, !dbg !101
  %379 = fmul <2 x float> %347, %347, !dbg !102
  %380 = fadd <2 x float> %379, %378, !dbg !103
  %381 = fmul <2 x float> %350, %350, !dbg !104
  %382 = fadd <2 x float> %380, %381, !dbg !105
  %383 = fmul <2 x float> %353, %353, !dbg !106
  %384 = fadd <2 x float> %383, %382, !dbg !107
  %385 = fmul <2 x float> %356, %356, !dbg !108
  %386 = fadd <2 x float> %384, %385, !dbg !109
  %387 = fmul <2 x float> %359, %359, !dbg !110
  %388 = fadd <2 x float> %387, %386, !dbg !111
  %389 = fmul <2 x float> %362, %362, !dbg !112
  %390 = fadd <2 x float> %388, %389, !dbg !113
  %391 = fmul <2 x float> %365, %365, !dbg !114
  %392 = fadd <2 x float> %391, %390, !dbg !115
  %393 = fmul <2 x float> %368, %368, !dbg !116
  %394 = fadd <2 x float> %392, %393, !dbg !117
  %395 = fmul <2 x float> %394, splat (float 0x3FBC71C720000000), !dbg !118
  %396 = extractelement <2 x float> %377, i64 0, !dbg !119
  %397 = fmul float %396, 2.000000e+00, !dbg !120
  %398 = extractelement <2 x float> %377, i64 1, !dbg !119
  %399 = fmul float %397, %398, !dbg !121
  %400 = fadd float %399, 0x3F1A36E2E0000000, !dbg !122
  %401 = fmul float %396, %398, !dbg !119
  %402 = fsub float %338, %401, !dbg !123
  %403 = fmul float %402, 2.000000e+00, !dbg !124
  %404 = fadd float %403, 0x3F4D7DBF40000000, !dbg !125
  %405 = fmul float %400, %404, !dbg !126
  %406 = fmul <2 x float> %377, %377, !dbg !127
  %407 = fsub <2 x float> %395, %406, !dbg !128
  %408 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !48
  %409 = insertelement <2 x i32> %408, i32 %243, i64 1, !dbg !48
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !48
  %411 = insertelement <2 x i32> poison, i32 %185, i64 0, !dbg !50
  %412 = insertelement <2 x i32> %411, i32 %251, i64 1, !dbg !50
  %413 = bitcast <2 x i32> %412 to <2 x float>, !dbg !50
  %414 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !52
  %415 = insertelement <2 x i32> %414, i32 %258, i64 1, !dbg !52
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !52
  %417 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !54
  %418 = insertelement <2 x i32> %417, i32 %267, i64 1, !dbg !54
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !54
  %420 = insertelement <2 x i32> poison, i32 %207, i64 0, !dbg !56
  %421 = insertelement <2 x i32> %420, i32 %273, i64 1, !dbg !56
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !56
  %423 = insertelement <2 x i32> poison, i32 %215, i64 0, !dbg !58
  %424 = insertelement <2 x i32> %423, i32 %281, i64 1, !dbg !58
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !58
  %426 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !60
  %427 = insertelement <2 x i32> %426, i32 %288, i64 1, !dbg !60
  %428 = bitcast <2 x i32> %427 to <2 x float>, !dbg !60
  %429 = insertelement <2 x i32> poison, i32 %231, i64 0, !dbg !62
  %430 = insertelement <2 x i32> %429, i32 %297, i64 1, !dbg !62
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !62
  %432 = insertelement <2 x i32> poison, i32 %237, i64 0, !dbg !64
  %433 = insertelement <2 x i32> %432, i32 %303, i64 1, !dbg !64
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !64
  %435 = fadd <2 x float> %410, %413, !dbg !92
  %436 = fadd <2 x float> %435, %416, !dbg !93
  %437 = fadd <2 x float> %436, %419, !dbg !94
  %438 = fadd <2 x float> %437, %422, !dbg !95
  %439 = fadd <2 x float> %438, %425, !dbg !96
  %440 = fadd <2 x float> %439, %428, !dbg !97
  %441 = fadd <2 x float> %440, %431, !dbg !98
  %442 = fadd <2 x float> %441, %434, !dbg !99
  %443 = fmul <2 x float> %442, splat (float 0x3FBC71C720000000), !dbg !100
  %444 = fmul <2 x float> %410, %410, !dbg !101
  %445 = fmul <2 x float> %413, %413, !dbg !102
  %446 = fadd <2 x float> %444, %445, !dbg !103
  %447 = fmul <2 x float> %416, %416, !dbg !104
  %448 = fadd <2 x float> %446, %447, !dbg !105
  %449 = fmul <2 x float> %419, %419, !dbg !106
  %450 = fadd <2 x float> %448, %449, !dbg !107
  %451 = fmul <2 x float> %422, %422, !dbg !108
  %452 = fadd <2 x float> %450, %451, !dbg !109
  %453 = fmul <2 x float> %425, %425, !dbg !110
  %454 = fadd <2 x float> %453, %452, !dbg !111
  %455 = fmul <2 x float> %428, %428, !dbg !112
  %456 = fadd <2 x float> %454, %455, !dbg !113
  %457 = fmul <2 x float> %431, %431, !dbg !114
  %458 = fadd <2 x float> %456, %457, !dbg !115
  %459 = fmul <2 x float> %434, %434, !dbg !116
  %460 = fadd <2 x float> %458, %459, !dbg !117
  %461 = fmul <2 x float> %460, splat (float 0x3FBC71C720000000), !dbg !118
  %462 = extractelement <2 x float> %443, i64 0, !dbg !119
  %463 = fmul float %462, 2.000000e+00, !dbg !120
  %464 = extractelement <2 x float> %443, i64 1, !dbg !119
  %465 = fmul float %463, %464, !dbg !121
  %466 = fadd float %465, 0x3F1A36E2E0000000, !dbg !122
  %467 = fmul float %462, %464, !dbg !119
  %468 = fsub float %339, %467, !dbg !123
  %469 = fmul float %468, 2.000000e+00, !dbg !124
  %470 = fadd float %469, 0x3F4D7DBF40000000, !dbg !125
  %471 = fmul float %466, %470, !dbg !126
  %472 = fmul <2 x float> %443, %443, !dbg !127
  %473 = fsub <2 x float> %461, %472, !dbg !128
  %474 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !48
  %475 = insertelement <2 x i32> %474, i32 %244, i64 1, !dbg !48
  %476 = bitcast <2 x i32> %475 to <2 x float>, !dbg !48
  %477 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !50
  %478 = insertelement <2 x i32> %477, i32 %252, i64 1, !dbg !50
  %479 = bitcast <2 x i32> %478 to <2 x float>, !dbg !50
  %480 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !52
  %481 = insertelement <2 x i32> %480, i32 %260, i64 1, !dbg !52
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !52
  %483 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !54
  %484 = insertelement <2 x i32> %483, i32 %268, i64 1, !dbg !54
  %485 = bitcast <2 x i32> %484 to <2 x float>, !dbg !54
  %486 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !56
  %487 = insertelement <2 x i32> %486, i32 %274, i64 1, !dbg !56
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !56
  %489 = insertelement <2 x i32> poison, i32 %216, i64 0, !dbg !58
  %490 = insertelement <2 x i32> %489, i32 %282, i64 1, !dbg !58
  %491 = bitcast <2 x i32> %490 to <2 x float>, !dbg !58
  %492 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !60
  %493 = insertelement <2 x i32> %492, i32 %290, i64 1, !dbg !60
  %494 = bitcast <2 x i32> %493 to <2 x float>, !dbg !60
  %495 = insertelement <2 x i32> poison, i32 %232, i64 0, !dbg !62
  %496 = insertelement <2 x i32> %495, i32 %298, i64 1, !dbg !62
  %497 = bitcast <2 x i32> %496 to <2 x float>, !dbg !62
  %498 = insertelement <2 x i32> poison, i32 %238, i64 0, !dbg !64
  %499 = insertelement <2 x i32> %498, i32 %304, i64 1, !dbg !64
  %500 = bitcast <2 x i32> %499 to <2 x float>, !dbg !64
  %501 = fadd <2 x float> %476, %479, !dbg !92
  %502 = fadd <2 x float> %501, %482, !dbg !93
  %503 = fadd <2 x float> %502, %485, !dbg !94
  %504 = fadd <2 x float> %503, %488, !dbg !95
  %505 = fadd <2 x float> %504, %491, !dbg !96
  %506 = fadd <2 x float> %505, %494, !dbg !97
  %507 = fadd <2 x float> %506, %497, !dbg !98
  %508 = fadd <2 x float> %507, %500, !dbg !99
  %509 = fmul <2 x float> %508, splat (float 0x3FBC71C720000000), !dbg !100
  %510 = fmul <2 x float> %476, %476, !dbg !101
  %511 = fmul <2 x float> %479, %479, !dbg !102
  %512 = fadd <2 x float> %510, %511, !dbg !103
  %513 = fmul <2 x float> %482, %482, !dbg !104
  %514 = fadd <2 x float> %512, %513, !dbg !105
  %515 = fmul <2 x float> %485, %485, !dbg !106
  %516 = fadd <2 x float> %514, %515, !dbg !107
  %517 = fmul <2 x float> %488, %488, !dbg !108
  %518 = fadd <2 x float> %516, %517, !dbg !109
  %519 = fmul <2 x float> %491, %491, !dbg !110
  %520 = fadd <2 x float> %518, %519, !dbg !111
  %521 = fmul <2 x float> %494, %494, !dbg !112
  %522 = fadd <2 x float> %520, %521, !dbg !113
  %523 = fmul <2 x float> %497, %497, !dbg !114
  %524 = fadd <2 x float> %522, %523, !dbg !115
  %525 = fmul <2 x float> %500, %500, !dbg !116
  %526 = fadd <2 x float> %524, %525, !dbg !117
  %527 = fmul <2 x float> %526, splat (float 0x3FBC71C720000000), !dbg !118
  %528 = extractelement <2 x float> %509, i64 0, !dbg !119
  %529 = fmul float %528, 2.000000e+00, !dbg !120
  %530 = extractelement <2 x float> %509, i64 1, !dbg !119
  %531 = fmul float %529, %530, !dbg !121
  %532 = fadd float %531, 0x3F1A36E2E0000000, !dbg !122
  %533 = fmul float %528, %530, !dbg !119
  %534 = fsub float %340, %533, !dbg !123
  %535 = fmul float %534, 2.000000e+00, !dbg !124
  %536 = fadd float %535, 0x3F4D7DBF40000000, !dbg !125
  %537 = fmul float %532, %536, !dbg !126
  %538 = fmul <2 x float> %509, %509, !dbg !127
  %539 = fsub <2 x float> %527, %538, !dbg !128
  %540 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !48
  %541 = insertelement <2 x i32> %540, i32 %245, i64 1, !dbg !48
  %542 = bitcast <2 x i32> %541 to <2 x float>, !dbg !48
  %543 = insertelement <2 x i32> poison, i32 %187, i64 0, !dbg !50
  %544 = insertelement <2 x i32> %543, i32 %253, i64 1, !dbg !50
  %545 = bitcast <2 x i32> %544 to <2 x float>, !dbg !50
  %546 = insertelement <2 x i32> poison, i32 %195, i64 0, !dbg !52
  %547 = insertelement <2 x i32> %546, i32 %261, i64 1, !dbg !52
  %548 = bitcast <2 x i32> %547 to <2 x float>, !dbg !52
  %549 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !54
  %550 = insertelement <2 x i32> %549, i32 %269, i64 1, !dbg !54
  %551 = bitcast <2 x i32> %550 to <2 x float>, !dbg !54
  %552 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !56
  %553 = insertelement <2 x i32> %552, i32 %275, i64 1, !dbg !56
  %554 = bitcast <2 x i32> %553 to <2 x float>, !dbg !56
  %555 = insertelement <2 x i32> poison, i32 %217, i64 0, !dbg !58
  %556 = insertelement <2 x i32> %555, i32 %283, i64 1, !dbg !58
  %557 = bitcast <2 x i32> %556 to <2 x float>, !dbg !58
  %558 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !60
  %559 = insertelement <2 x i32> %558, i32 %291, i64 1, !dbg !60
  %560 = bitcast <2 x i32> %559 to <2 x float>, !dbg !60
  %561 = insertelement <2 x i32> poison, i32 %233, i64 0, !dbg !62
  %562 = insertelement <2 x i32> %561, i32 %299, i64 1, !dbg !62
  %563 = bitcast <2 x i32> %562 to <2 x float>, !dbg !62
  %564 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !64
  %565 = insertelement <2 x i32> %564, i32 %305, i64 1, !dbg !64
  %566 = bitcast <2 x i32> %565 to <2 x float>, !dbg !64
  %567 = fadd <2 x float> %542, %545, !dbg !92
  %568 = fadd <2 x float> %567, %548, !dbg !93
  %569 = fadd <2 x float> %568, %551, !dbg !94
  %570 = fadd <2 x float> %569, %554, !dbg !95
  %571 = fadd <2 x float> %570, %557, !dbg !96
  %572 = fadd <2 x float> %571, %560, !dbg !97
  %573 = fadd <2 x float> %572, %563, !dbg !98
  %574 = fadd <2 x float> %573, %566, !dbg !99
  %575 = fmul <2 x float> %574, splat (float 0x3FBC71C720000000), !dbg !100
  %576 = fmul <2 x float> %542, %542, !dbg !101
  %577 = fmul <2 x float> %545, %545, !dbg !102
  %578 = fadd <2 x float> %576, %577, !dbg !103
  %579 = fmul <2 x float> %548, %548, !dbg !104
  %580 = fadd <2 x float> %578, %579, !dbg !105
  %581 = fmul <2 x float> %551, %551, !dbg !106
  %582 = fadd <2 x float> %580, %581, !dbg !107
  %583 = fmul <2 x float> %554, %554, !dbg !108
  %584 = fadd <2 x float> %582, %583, !dbg !109
  %585 = fmul <2 x float> %557, %557, !dbg !110
  %586 = fadd <2 x float> %584, %585, !dbg !111
  %587 = fmul <2 x float> %560, %560, !dbg !112
  %588 = fadd <2 x float> %586, %587, !dbg !113
  %589 = fmul <2 x float> %563, %563, !dbg !114
  %590 = fadd <2 x float> %588, %589, !dbg !115
  %591 = fmul <2 x float> %566, %566, !dbg !116
  %592 = fadd <2 x float> %590, %591, !dbg !117
  %593 = fmul <2 x float> %592, splat (float 0x3FBC71C720000000), !dbg !118
  %594 = extractelement <2 x float> %575, i64 0, !dbg !119
  %595 = fmul float %594, 2.000000e+00, !dbg !120
  %596 = extractelement <2 x float> %575, i64 1, !dbg !119
  %597 = fmul float %595, %596, !dbg !121
  %598 = fadd float %597, 0x3F1A36E2E0000000, !dbg !122
  %599 = fmul float %594, %596, !dbg !119
  %600 = fsub float %341, %599, !dbg !123
  %601 = fmul float %600, 2.000000e+00, !dbg !124
  %602 = fadd float %601, 0x3F4D7DBF40000000, !dbg !125
  %603 = fmul float %598, %602, !dbg !126
  %604 = fmul <2 x float> %575, %575, !dbg !127
  %605 = fsub <2 x float> %593, %604, !dbg !128
  %606 = shufflevector <2 x float> %406, <2 x float> %407, <2 x i32> <i32 0, i32 2>, !dbg !129
  %607 = shufflevector <2 x float> %406, <2 x float> %407, <2 x i32> <i32 1, i32 3>, !dbg !129
  %608 = fadd <2 x float> %606, %607, !dbg !129
  %609 = fadd <2 x float> %608, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !130
  %610 = shufflevector <2 x float> %472, <2 x float> %473, <2 x i32> <i32 0, i32 2>, !dbg !129
  %611 = shufflevector <2 x float> %472, <2 x float> %473, <2 x i32> <i32 1, i32 3>, !dbg !129
  %612 = fadd <2 x float> %610, %611, !dbg !129
  %613 = fadd <2 x float> %612, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !130
  %614 = shufflevector <2 x float> %538, <2 x float> %539, <2 x i32> <i32 0, i32 2>, !dbg !129
  %615 = shufflevector <2 x float> %538, <2 x float> %539, <2 x i32> <i32 1, i32 3>, !dbg !129
  %616 = fadd <2 x float> %614, %615, !dbg !129
  %617 = fadd <2 x float> %616, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !130
  %618 = shufflevector <2 x float> %604, <2 x float> %605, <2 x i32> <i32 0, i32 2>, !dbg !129
  %619 = shufflevector <2 x float> %604, <2 x float> %605, <2 x i32> <i32 1, i32 3>, !dbg !129
  %620 = fadd <2 x float> %618, %619, !dbg !129
  %621 = fadd <2 x float> %620, <float 0x3F1A36E2E0000000, float 0x3F4D7DBF40000000>, !dbg !130
  %shift = shufflevector <2 x float> %609, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !131
  %622 = fmul <2 x float> %609, %shift, !dbg !131
  %623 = extractelement <2 x float> %622, i64 0, !dbg !131
  %shift4 = shufflevector <2 x float> %613, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !131
  %624 = fmul <2 x float> %613, %shift4, !dbg !131
  %625 = extractelement <2 x float> %624, i64 0, !dbg !131
  %shift5 = shufflevector <2 x float> %617, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !131
  %626 = fmul <2 x float> %617, %shift5, !dbg !131
  %627 = extractelement <2 x float> %626, i64 0, !dbg !131
  %shift6 = shufflevector <2 x float> %621, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !131
  %628 = fmul <2 x float> %621, %shift6, !dbg !131
  %629 = extractelement <2 x float> %628, i64 0, !dbg !131
  %630 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %405, float %623) #1, !dbg !132
  %631 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %471, float %625) #1, !dbg !132
  %632 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %537, float %627) #1, !dbg !132
  %633 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %603, float %629) #1, !dbg !132
  %634 = insertelement <4 x float> poison, float %633, i64 0, !dbg !133
  %635 = insertelement <4 x float> %634, float %632, i64 1, !dbg !133
  %636 = insertelement <4 x float> %635, float %631, i64 2, !dbg !133
  %637 = insertelement <4 x float> %636, float %630, i64 3, !dbg !133
  %638 = fsub <4 x float> splat (float 1.000000e+00), %637, !dbg !133
  %639 = fmul <4 x float> %638, splat (float 5.000000e-01), !dbg !134
  %640 = fcmp ole <4 x float> %639, zeroinitializer, !dbg !135
  %641 = select <4 x i1> %640, <4 x float> zeroinitializer, <4 x float> %639, !dbg !135
  %642 = fcmp olt <4 x float> %641, splat (float 1.000000e+00), !dbg !139
  %643 = extractelement <4 x float> %641, i64 3, !dbg !141
  %644 = fcmp uno float %643, 0.000000e+00, !dbg !142
  %645 = extractelement <4 x float> %641, i64 2, !dbg !141
  %646 = fcmp uno float %645, 0.000000e+00, !dbg !142
  %647 = extractelement <4 x float> %641, i64 1, !dbg !141
  %648 = fcmp uno float %647, 0.000000e+00, !dbg !142
  %649 = extractelement <4 x float> %641, i64 0, !dbg !141
  %650 = fcmp uno float %649, 0.000000e+00, !dbg !142
  %651 = extractelement <4 x i1> %642, i64 3, !dbg !143
  %652 = or i1 %651, %644, !dbg !143
  %653 = extractelement <4 x i1> %642, i64 2, !dbg !143
  %654 = or i1 %653, %646, !dbg !143
  %655 = extractelement <4 x i1> %642, i64 1, !dbg !143
  %656 = or i1 %655, %648, !dbg !143
  %657 = extractelement <4 x i1> %642, i64 0, !dbg !143
  %658 = or i1 %657, %650, !dbg !143
  %659 = sext i32 %11 to i64, !dbg !144
  %660 = getelementptr float, ptr addrspace(1) %0, i64 %659, !dbg !144
  %661 = bitcast float %643 to i32, !dbg !141
  %662 = select i1 %652, i32 %661, i32 1065353216, !dbg !145
  %663 = bitcast float %645 to i32, !dbg !141
  %664 = select i1 %654, i32 %663, i32 1065353216, !dbg !145
  %665 = bitcast float %647 to i32, !dbg !141
  %666 = select i1 %656, i32 %665, i32 1065353216, !dbg !145
  %667 = bitcast float %649 to i32, !dbg !141
  %668 = select i1 %658, i32 %667, i32 1065353216, !dbg !145
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %662, i32 %664, i32 %666, i32 %668, ptr addrspace(1) %660, i1 true) #1, !dbg !141
  ret void, !dbg !146
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvcerakyysng7n3pg6qonj5kxgpcyv2ku6rxlwpm5dwi3usfkbhk.py", directory: "inductor_cache/vc")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_rsub_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_rsub_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_rsub_sub_1", linkageName: "triton_poi_fused_add_avg_pool2d_clamp_div_mul_pow_rsub_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 38, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 43, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 47, scope: !7)
!24 = !DILocation(line: 29, column: 39, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 47, scope: !7)
!27 = !DILocation(line: 30, column: 39, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 47, scope: !7)
!30 = !DILocation(line: 31, column: 39, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 47, scope: !7)
!33 = !DILocation(line: 32, column: 39, scope: !7)
!34 = !DILocation(line: 32, column: 34, scope: !7)
!35 = !DILocation(line: 32, column: 30, scope: !7)
!36 = !DILocation(line: 32, column: 47, scope: !7)
!37 = !DILocation(line: 33, column: 40, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 48, scope: !7)
!40 = !DILocation(line: 34, column: 40, scope: !7)
!41 = !DILocation(line: 34, column: 35, scope: !7)
!42 = !DILocation(line: 34, column: 31, scope: !7)
!43 = !DILocation(line: 34, column: 48, scope: !7)
!44 = !DILocation(line: 35, column: 40, scope: !7)
!45 = !DILocation(line: 35, column: 31, scope: !7)
!46 = !DILocation(line: 35, column: 48, scope: !7)
!47 = !DILocation(line: 36, column: 31, scope: !7)
!48 = !DILocation(line: 36, column: 44, scope: !7)
!49 = !DILocation(line: 37, column: 31, scope: !7)
!50 = !DILocation(line: 37, column: 48, scope: !7)
!51 = !DILocation(line: 38, column: 31, scope: !7)
!52 = !DILocation(line: 38, column: 48, scope: !7)
!53 = !DILocation(line: 39, column: 31, scope: !7)
!54 = !DILocation(line: 39, column: 48, scope: !7)
!55 = !DILocation(line: 40, column: 31, scope: !7)
!56 = !DILocation(line: 40, column: 48, scope: !7)
!57 = !DILocation(line: 41, column: 31, scope: !7)
!58 = !DILocation(line: 41, column: 48, scope: !7)
!59 = !DILocation(line: 42, column: 31, scope: !7)
!60 = !DILocation(line: 42, column: 48, scope: !7)
!61 = !DILocation(line: 43, column: 31, scope: !7)
!62 = !DILocation(line: 43, column: 48, scope: !7)
!63 = !DILocation(line: 44, column: 31, scope: !7)
!64 = !DILocation(line: 44, column: 48, scope: !7)
!65 = !DILocation(line: 45, column: 31, scope: !7)
!66 = !DILocation(line: 45, column: 44, scope: !7)
!67 = !DILocation(line: 46, column: 31, scope: !7)
!68 = !DILocation(line: 46, column: 48, scope: !7)
!69 = !DILocation(line: 47, column: 31, scope: !7)
!70 = !DILocation(line: 47, column: 48, scope: !7)
!71 = !DILocation(line: 48, column: 31, scope: !7)
!72 = !DILocation(line: 48, column: 48, scope: !7)
!73 = !DILocation(line: 49, column: 31, scope: !7)
!74 = !DILocation(line: 49, column: 48, scope: !7)
!75 = !DILocation(line: 50, column: 31, scope: !7)
!76 = !DILocation(line: 50, column: 48, scope: !7)
!77 = !DILocation(line: 51, column: 31, scope: !7)
!78 = !DILocation(line: 51, column: 48, scope: !7)
!79 = !DILocation(line: 52, column: 31, scope: !7)
!80 = !DILocation(line: 52, column: 48, scope: !7)
!81 = !DILocation(line: 53, column: 31, scope: !7)
!82 = !DILocation(line: 53, column: 48, scope: !7)
!83 = !DILocation(line: 54, column: 18, scope: !7)
!84 = !DILocation(line: 55, column: 18, scope: !7)
!85 = !DILocation(line: 56, column: 18, scope: !7)
!86 = !DILocation(line: 57, column: 18, scope: !7)
!87 = !DILocation(line: 58, column: 19, scope: !7)
!88 = !DILocation(line: 59, column: 20, scope: !7)
!89 = !DILocation(line: 60, column: 20, scope: !7)
!90 = !DILocation(line: 61, column: 20, scope: !7)
!91 = !DILocation(line: 63, column: 20, scope: !7)
!92 = !DILocation(line: 64, column: 20, scope: !7)
!93 = !DILocation(line: 65, column: 20, scope: !7)
!94 = !DILocation(line: 66, column: 20, scope: !7)
!95 = !DILocation(line: 67, column: 20, scope: !7)
!96 = !DILocation(line: 68, column: 20, scope: !7)
!97 = !DILocation(line: 69, column: 20, scope: !7)
!98 = !DILocation(line: 70, column: 20, scope: !7)
!99 = !DILocation(line: 71, column: 20, scope: !7)
!100 = !DILocation(line: 72, column: 20, scope: !7)
!101 = !DILocation(line: 73, column: 20, scope: !7)
!102 = !DILocation(line: 74, column: 20, scope: !7)
!103 = !DILocation(line: 75, column: 20, scope: !7)
!104 = !DILocation(line: 76, column: 20, scope: !7)
!105 = !DILocation(line: 77, column: 20, scope: !7)
!106 = !DILocation(line: 78, column: 20, scope: !7)
!107 = !DILocation(line: 79, column: 20, scope: !7)
!108 = !DILocation(line: 80, column: 20, scope: !7)
!109 = !DILocation(line: 81, column: 20, scope: !7)
!110 = !DILocation(line: 82, column: 20, scope: !7)
!111 = !DILocation(line: 83, column: 20, scope: !7)
!112 = !DILocation(line: 84, column: 20, scope: !7)
!113 = !DILocation(line: 85, column: 20, scope: !7)
!114 = !DILocation(line: 86, column: 20, scope: !7)
!115 = !DILocation(line: 87, column: 20, scope: !7)
!116 = !DILocation(line: 88, column: 20, scope: !7)
!117 = !DILocation(line: 89, column: 20, scope: !7)
!118 = !DILocation(line: 90, column: 20, scope: !7)
!119 = !DILocation(line: 123, column: 20, scope: !7)
!120 = !DILocation(line: 119, column: 20, scope: !7)
!121 = !DILocation(line: 120, column: 20, scope: !7)
!122 = !DILocation(line: 122, column: 20, scope: !7)
!123 = !DILocation(line: 124, column: 20, scope: !7)
!124 = !DILocation(line: 125, column: 20, scope: !7)
!125 = !DILocation(line: 127, column: 21, scope: !7)
!126 = !DILocation(line: 128, column: 21, scope: !7)
!127 = !DILocation(line: 129, column: 21, scope: !7)
!128 = !DILocation(line: 133, column: 21, scope: !7)
!129 = !DILocation(line: 131, column: 22, scope: !7)
!130 = !DILocation(line: 132, column: 22, scope: !7)
!131 = !DILocation(line: 137, column: 22, scope: !7)
!132 = !DILocation(line: 138, column: 22, scope: !7)
!133 = !DILocation(line: 140, column: 22, scope: !7)
!134 = !DILocation(line: 142, column: 22, scope: !7)
!135 = !DILocation(line: 121, column: 29, scope: !136, inlinedAt: !138)
!136 = distinct !DILexicalBlockFile(scope: !7, file: !137, discriminator: 0)
!137 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!138 = !DILocation(line: 144, column: 44, scope: !7)
!139 = !DILocation(line: 110, column: 15, scope: !136, inlinedAt: !140)
!140 = !DILocation(line: 145, column: 44, scope: !7)
!141 = !DILocation(line: 146, column: 41, scope: !7)
!142 = !DILocation(line: 112, column: 21, scope: !136, inlinedAt: !140)
!143 = !DILocation(line: 112, column: 16, scope: !136, inlinedAt: !140)
!144 = !DILocation(line: 146, column: 28, scope: !7)
!145 = !DILocation(line: 113, column: 29, scope: !136, inlinedAt: !140)
!146 = !DILocation(line: 146, column: 4, scope: !7)
