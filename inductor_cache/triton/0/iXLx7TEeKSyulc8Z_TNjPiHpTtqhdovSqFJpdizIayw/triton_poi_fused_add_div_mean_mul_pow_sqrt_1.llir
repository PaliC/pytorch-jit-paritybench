; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_mean_mul_pow_sqrt_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 4, !dbg !15
  %14 = mul i32 %13, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = sext i32 %.decomposed to i64, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !17
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 %12) #3, !dbg !18
  %18 = sext i32 %11 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %12) #3, !dbg !20
  %21 = shl nsw i32 %13, 2, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !22
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #3, !dbg !23
  %25 = bitcast i32 %24 to float, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #3, !dbg !23
  %27 = bitcast i32 %26 to float, !dbg !23
  %28 = or disjoint i32 %21, 1, !dbg !24
  %29 = sext i32 %28 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #3, !dbg !26
  %32 = bitcast i32 %31 to float, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #3, !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = or disjoint i32 %21, 2, !dbg !27
  %36 = sext i32 %35 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %12) #3, !dbg !29
  %39 = bitcast i32 %38 to float, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %12) #3, !dbg !29
  %41 = bitcast i32 %40 to float, !dbg !29
  %42 = or disjoint i32 %21, 3, !dbg !30
  %43 = sext i32 %42 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !31
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %12) #3, !dbg !32
  %46 = bitcast i32 %45 to float, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %12) #3, !dbg !32
  %48 = bitcast i32 %47 to float, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !33
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %12) #3, !dbg !34
  %51 = fmul float %25, %25, !dbg !35
  %52 = fmul float %27, %27, !dbg !35
  %53 = fmul float %32, %32, !dbg !36
  %54 = fmul float %34, %34, !dbg !36
  %55 = fadd float %51, %53, !dbg !37
  %56 = fadd float %52, %54, !dbg !37
  %57 = fmul float %39, %39, !dbg !38
  %58 = fmul float %41, %41, !dbg !38
  %59 = fadd float %55, %57, !dbg !39
  %60 = fadd float %56, %58, !dbg !39
  %61 = fmul float %46, %46, !dbg !40
  %62 = fmul float %48, %48, !dbg !40
  %63 = fadd float %59, %61, !dbg !41
  %64 = fadd float %60, %62, !dbg !41
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 4.000000e+00) #3, !dbg !42
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 4.000000e+00) #3, !dbg !42
  %67 = fadd float %65, 0x3D71979980000000, !dbg !43
  %68 = fadd float %66, 0x3D71979980000000, !dbg !43
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %69, 0, !dbg !44
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %70, 0, !dbg !44
  br i1 %.not.i, label %76, label %71, !dbg !44

71:                                               ; preds = %5
  br i1 %.not1.i, label %74, label %72, !dbg !44

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

76:                                               ; preds = %5
  br i1 %.not1.i, label %79, label %77, !dbg !44

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !44
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %81, 0, !dbg !44
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !44
  br i1 %.not.i1, label %88, label %83, !dbg !44

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !44

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !44

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !44
  %93 = extractvalue { i32, i32 } %50, 1, !dbg !34
  %94 = bitcast i32 %93 to float, !dbg !34
  %95 = extractvalue { i32, i32 } %50, 0, !dbg !34
  %96 = bitcast i32 %95 to float, !dbg !34
  %97 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %98 = bitcast i32 %97 to float, !dbg !20
  %99 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %100 = bitcast i32 %99 to float, !dbg !20
  %101 = extractvalue { i32, i32 } %17, 1, !dbg !18
  %102 = bitcast i32 %101 to float, !dbg !18
  %103 = extractvalue { i32, i32 } %17, 0, !dbg !18
  %104 = bitcast i32 %103 to float, !dbg !18
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %.0.i) #3, !dbg !45
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %.0.i3) #3, !dbg !45
  %107 = fmul float %105, %104, !dbg !46
  %108 = fmul float %106, %102, !dbg !46
  %109 = fadd float %107, %96, !dbg !47
  %110 = fadd float %108, %94, !dbg !47
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !48
  %112 = bitcast float %109 to i32, !dbg !49
  %113 = bitcast float %110 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %112, i32 %113, ptr addrspace(1) %111, i1 %12) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "canods6ceuzaeknf6p4nyyj5kkvelu54pwuciycmigenzjp2hjgs.py", directory: "inductor_cache/an")
!4 = !{ptr @triton_poi_fused_add_div_mean_mul_pow_sqrt_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mean_mul_pow_sqrt_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mean_mul_pow_sqrt_1", linkageName: "triton_poi_fused_add_div_mean_mul_pow_sqrt_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 32, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 37, scope: !7)
!24 = !DILocation(line: 30, column: 34, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 31, column: 34, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 32, column: 31, scope: !7)
!32 = !DILocation(line: 32, column: 42, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 36, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 20, scope: !7)
!41 = !DILocation(line: 40, column: 19, scope: !7)
!42 = !DILocation(line: 42, column: 20, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 45, column: 27, scope: !7)
!45 = !DILocation(line: 46, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 19, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 37, scope: !7)
!50 = !DILocation(line: 49, column: 4, scope: !7)
