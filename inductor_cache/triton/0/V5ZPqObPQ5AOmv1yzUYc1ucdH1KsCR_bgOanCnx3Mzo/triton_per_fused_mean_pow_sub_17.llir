; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %8, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 1024, !dbg !14
  %13 = lshr i32 %8, 5, !dbg !15
  %14 = lshr i32 %8, 3, !dbg !15
  %15 = and i32 %14, 31, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %16 = sdiv i32 %.frozen, 16, !dbg !16
  %17 = mul i32 %16, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = shl i32 %14, 8, !dbg !18
  %19 = and i32 %18, 3840, !dbg !18
  %20 = shl i32 %16, 7, !dbg !19
  %21 = or disjoint i32 %20, %15, !dbg !20
  %22 = or disjoint i32 %21, 32, !dbg !20
  %23 = or disjoint i32 %21, 64, !dbg !20
  %24 = or disjoint i32 %21, 96, !dbg !20
  %25 = sdiv i32 %21, 16, !dbg !21
  %26 = sdiv i32 %22, 16, !dbg !21
  %27 = sdiv i32 %23, 16, !dbg !21
  %28 = sdiv i32 %24, 16, !dbg !21
  %29 = srem i32 %25, 16, !dbg !22
  %30 = srem i32 %26, 16, !dbg !22
  %31 = srem i32 %27, 16, !dbg !22
  %32 = srem i32 %28, 16, !dbg !22
  %33 = shl nsw i32 %29, 12, !dbg !23
  %34 = shl nsw i32 %30, 12, !dbg !23
  %35 = shl nsw i32 %31, 12, !dbg !23
  %36 = shl nsw i32 %32, 12, !dbg !23
  %37 = shl nsw i32 %.decomposed, 13, !dbg !24
  %38 = add i32 %21, %37, !dbg !25
  %39 = add i32 %22, %37, !dbg !25
  %40 = add i32 %23, %37, !dbg !25
  %41 = add i32 %24, %37, !dbg !25
  %42 = sdiv i32 %38, 65536, !dbg !26
  %43 = sdiv i32 %39, 65536, !dbg !26
  %44 = sdiv i32 %40, 65536, !dbg !26
  %45 = sdiv i32 %41, 65536, !dbg !26
  %46 = shl nsw i32 %42, 16, !dbg !27
  %47 = shl nsw i32 %43, 16, !dbg !27
  %48 = shl nsw i32 %44, 16, !dbg !27
  %49 = shl nsw i32 %45, 16, !dbg !27
  %50 = sdiv i32 %38, 256, !dbg !28
  %51 = sdiv i32 %39, 256, !dbg !28
  %52 = sdiv i32 %40, 256, !dbg !28
  %53 = sdiv i32 %41, 256, !dbg !28
  %54 = srem i32 %50, 256, !dbg !29
  %55 = srem i32 %51, 256, !dbg !29
  %56 = srem i32 %52, 256, !dbg !29
  %57 = srem i32 %53, 256, !dbg !29
  %58 = add i32 %54, %46, !dbg !30
  %59 = add i32 %58, %19, !dbg !31
  %60 = add i32 %59, %33, !dbg !32
  %61 = add i32 %55, %47, !dbg !30
  %62 = add i32 %61, %19, !dbg !31
  %63 = add i32 %62, %34, !dbg !32
  %64 = add i32 %56, %48, !dbg !30
  %65 = add i32 %64, %19, !dbg !31
  %66 = add i32 %65, %35, !dbg !32
  %67 = add i32 %57, %49, !dbg !30
  %68 = add i32 %67, %19, !dbg !31
  %69 = add i32 %68, %36, !dbg !32
  %70 = sext i32 %60 to i64, !dbg !33
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !33
  %72 = sext i32 %63 to i64, !dbg !33
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !33
  %74 = sext i32 %66 to i64, !dbg !33
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !33
  %76 = sext i32 %69 to i64, !dbg !33
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %12, i32 0, i1 %12) #3, !dbg !34
  %82 = sext i32 %54 to i64, !dbg !35
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !35
  %84 = sext i32 %55 to i64, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !35
  %86 = sext i32 %56 to i64, !dbg !35
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !35
  %88 = sext i32 %57 to i64, !dbg !35
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !35
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %12, i32 0, i1 %12) #3, !dbg !36
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %12, i32 0, i1 %12) #3, !dbg !36
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %12, i32 0, i1 %12) #3, !dbg !36
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %12, i32 0, i1 %12) #3, !dbg !36
  %94 = or disjoint i32 %19, 131072, !dbg !37
  %95 = add i32 %58, %94, !dbg !38
  %96 = add i32 %95, %33, !dbg !39
  %97 = add i32 %61, %94, !dbg !38
  %98 = add i32 %97, %34, !dbg !39
  %99 = add i32 %64, %94, !dbg !38
  %100 = add i32 %99, %35, !dbg !39
  %101 = add i32 %67, %94, !dbg !38
  %102 = add i32 %101, %36, !dbg !39
  %103 = sext i32 %96 to i64, !dbg !40
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !40
  %105 = sext i32 %98 to i64, !dbg !40
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !40
  %107 = sext i32 %100 to i64, !dbg !40
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !40
  %109 = sext i32 %102 to i64, !dbg !40
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !40
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %12, i32 0, i1 %12) #3, !dbg !41
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %12, i32 0, i1 %12) #3, !dbg !41
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %12, i32 0, i1 %12) #3, !dbg !41
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %12, i32 0, i1 %12) #3, !dbg !41
  %115 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !34
  %116 = insertelement <2 x i32> %115, i32 %79, i64 1, !dbg !34
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !34
  %118 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !36
  %119 = insertelement <2 x i32> %118, i32 %91, i64 1, !dbg !36
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !36
  %121 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !41
  %122 = insertelement <2 x i32> %121, i32 %112, i64 1, !dbg !41
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !41
  %124 = fadd <2 x float> %117, %120, !dbg !42
  %125 = fadd <2 x float> %120, %123, !dbg !43
  %126 = fsub <2 x float> %124, %125, !dbg !44
  %127 = fmul <2 x float> %126, %126, !dbg !45
  %128 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !34
  %129 = insertelement <2 x i32> %128, i32 %81, i64 1, !dbg !34
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !34
  %131 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !36
  %132 = insertelement <2 x i32> %131, i32 %93, i64 1, !dbg !36
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !36
  %134 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !41
  %135 = insertelement <2 x i32> %134, i32 %114, i64 1, !dbg !41
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !41
  %137 = fadd <2 x float> %130, %133, !dbg !42
  %138 = fadd <2 x float> %133, %136, !dbg !43
  %139 = fsub <2 x float> %137, %138, !dbg !44
  %140 = fmul <2 x float> %139, %139, !dbg !45
  %shift = shufflevector <2 x float> %127, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %141 = fadd <2 x float> %127, %shift, !dbg !46
  %142 = fadd <2 x float> %141, %140, !dbg !46
  %shift1 = shufflevector <2 x float> %140, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %143 = fadd <2 x float> %142, %shift1, !dbg !46
  %144 = extractelement <2 x float> %143, i64 0, !dbg !46
  %145 = select i1 %12, float %144, float 0.000000e+00, !dbg !46
  %146 = bitcast float %145 to i32, !dbg !51
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 16, i32 31), !dbg !51
  %148 = bitcast i32 %147 to float, !dbg !51
  %149 = fadd float %145, %148, !dbg !46
  %150 = bitcast float %149 to i32, !dbg !51
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 8, i32 31), !dbg !51
  %152 = bitcast i32 %151 to float, !dbg !51
  %153 = fadd float %149, %152, !dbg !46
  %154 = lshr i32 %9, 3, !dbg !51
  %155 = icmp samesign ult i32 %9, 8, !dbg !51
  %156 = and i32 %13, 7, !dbg !51
  %157 = shl nuw nsw i32 %10, 3, !dbg !51
  %158 = or disjoint i32 %157, %156, !dbg !51
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !51
  %160 = bitcast float %153 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 %155) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %161 = icmp slt i32 %8, 64, !dbg !51
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !51
  %163 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %162, i1 %161) #3, !dbg !51
  %164 = bitcast i32 %163 to float, !dbg !51
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !51
  %166 = bitcast i32 %165 to float, !dbg !51
  %167 = fadd float %164, %166, !dbg !46
  %168 = bitcast float %167 to i32, !dbg !51
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !51
  %170 = bitcast i32 %169 to float, !dbg !51
  %171 = fadd float %167, %170, !dbg !46
  %172 = bitcast float %171 to i32, !dbg !51
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 1, i32 31), !dbg !51
  %174 = bitcast i32 %173 to float, !dbg !51
  %175 = fadd float %171, %174, !dbg !46
  %176 = icmp eq i32 %10, 0, !dbg !51
  %177 = and i1 %161, %176, !dbg !51
  %178 = bitcast float %175 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %178, i1 %177) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !51
  %180 = load i32, ptr addrspace(3) %179, align 16, !dbg !51
  %181 = sext i32 %11 to i64, !dbg !52
  %182 = getelementptr float, ptr addrspace(1) %2, i64 %181, !dbg !52
  %183 = shl nuw nsw i32 %156, 2, !dbg !53
  %184 = or disjoint i32 %183, %154, !dbg !53
  %185 = icmp eq i32 %184, 0, !dbg !53
  %186 = and i1 %185, %12, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %182, i1 %186) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb7zp2htq3yapr37cpdirczttpokve7uwyjrfgggem5trs3gbhiu.py", directory: "inductor_cache/b7")
!4 = !{ptr @triton_per_fused_mean_pow_sub_17, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_17", linkageName: "triton_per_fused_mean_pow_sub_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 66, scope: !7)
!20 = !DILocation(line: 33, column: 62, scope: !7)
!21 = !DILocation(line: 33, column: 73, scope: !7)
!22 = !DILocation(line: 33, column: 79, scope: !7)
!23 = !DILocation(line: 33, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 113, scope: !7)
!25 = !DILocation(line: 33, column: 108, scope: !7)
!26 = !DILocation(line: 33, column: 120, scope: !7)
!27 = !DILocation(line: 33, column: 93, scope: !7)
!28 = !DILocation(line: 33, column: 159, scope: !7)
!29 = !DILocation(line: 33, column: 166, scope: !7)
!30 = !DILocation(line: 33, column: 48, scope: !7)
!31 = !DILocation(line: 33, column: 86, scope: !7)
!32 = !DILocation(line: 33, column: 131, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 174, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 73, scope: !7)
!37 = !DILocation(line: 35, column: 39, scope: !7)
!38 = !DILocation(line: 35, column: 95, scope: !7)
!39 = !DILocation(line: 35, column: 140, scope: !7)
!40 = !DILocation(line: 35, column: 30, scope: !7)
!41 = !DILocation(line: 35, column: 183, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !50)
!47 = distinct !DILexicalBlockFile(scope: !49, file: !48, discriminator: 0)
!48 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!49 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!50 = !DILocation(line: 42, column: 25, scope: !7)
!51 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !50)
!52 = !DILocation(line: 43, column: 25, scope: !7)
!53 = !DILocation(line: 43, column: 37, scope: !7)
!54 = !DILocation(line: 43, column: 4, scope: !7)
