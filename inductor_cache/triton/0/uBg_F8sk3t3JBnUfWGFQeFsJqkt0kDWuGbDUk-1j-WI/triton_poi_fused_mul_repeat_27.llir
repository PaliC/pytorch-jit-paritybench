; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_repeat_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %15 = sdiv i32 %.frozen, 256, !dbg !14
  %16 = sdiv i32 %14, 256, !dbg !14
  %17 = mul i32 %15, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %17, !dbg !15
  %18 = srem i32 %11, 256, !dbg !15
  %19 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !16
  %20 = insertelement <2 x i32> %19, i32 %12, i64 1, !dbg !16
  %21 = srem <2 x i32> %20, splat (i32 256), !dbg !16
  %22 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !16
  %23 = insertelement <2 x i32> %22, i32 %13, i64 1, !dbg !16
  %24 = srem <2 x i32> %23, splat (i32 256), !dbg !16
  %25 = sext i32 %10 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !17
  %27 = sext i32 %14 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %34 = bitcast i32 %30 to float, !dbg !18
  %35 = bitcast i32 %31 to float, !dbg !18
  %36 = bitcast i32 %32 to float, !dbg !18
  %37 = bitcast i32 %33 to float, !dbg !18
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !18
  %43 = bitcast i32 %39 to float, !dbg !18
  %44 = bitcast i32 %40 to float, !dbg !18
  %45 = bitcast i32 %41 to float, !dbg !18
  %46 = bitcast i32 %42 to float, !dbg !18
  %47 = extractelement <2 x i32> %21, i64 0, !dbg !19
  %48 = icmp eq i32 %47, %.decomposed, !dbg !19
  %49 = icmp eq i32 %47, %18, !dbg !19
  %50 = extractelement <2 x i32> %21, i64 1, !dbg !19
  %51 = icmp eq i32 %47, %50, !dbg !19
  %52 = extractelement <2 x i32> %24, i64 1, !dbg !19
  %53 = icmp eq i32 %47, %52, !dbg !19
  %54 = extractelement <2 x i32> %24, i64 0, !dbg !19
  %55 = icmp eq i32 %54, %.decomposed, !dbg !19
  %56 = icmp eq i32 %54, %18, !dbg !19
  %57 = icmp eq i32 %54, %50, !dbg !19
  %58 = icmp eq i32 %54, %52, !dbg !19
  %59 = select i1 %48, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %60 = select i1 %49, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %61 = select i1 %51, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %62 = select i1 %53, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %63 = select i1 %55, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %64 = select i1 %56, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %65 = select i1 %57, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %66 = select i1 %58, float 1.000000e+00, float 0.000000e+00, !dbg !20
  %67 = fmul float %59, %34, !dbg !21
  %68 = fmul float %60, %35, !dbg !21
  %69 = fmul float %61, %36, !dbg !21
  %70 = fmul float %62, %37, !dbg !21
  %71 = fmul float %63, %43, !dbg !21
  %72 = fmul float %64, %44, !dbg !21
  %73 = fmul float %65, %45, !dbg !21
  %74 = fmul float %66, %46, !dbg !21
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %77 = bitcast float %67 to i32, !dbg !23
  %78 = bitcast float %68 to i32, !dbg !23
  %79 = bitcast float %69 to i32, !dbg !23
  %80 = bitcast float %70 to i32, !dbg !23
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %77, i32 %78, i32 %79, i32 %80, ptr addrspace(1) %75, i1 true) #1, !dbg !23
  %81 = bitcast float %71 to i32, !dbg !23
  %82 = bitcast float %72 to i32, !dbg !23
  %83 = bitcast float %73 to i32, !dbg !23
  %84 = bitcast float %74 to i32, !dbg !23
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %81, i32 %82, i32 %83, i32 %84, ptr addrspace(1) %76, i1 true) #1, !dbg !23
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !24
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %77, i32 %78, i32 %79, i32 %80, ptr addrspace(1) %85, i1 true) #1, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %81, i32 %82, i32 %83, i32 %84, ptr addrspace(1) %86, i1 true) #1, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cderbz5kj3xmpm4orwj22mb6gtcjwcyoq52wsa3jbwxk4cmmjp3d.py", directory: "inductor_cache/de")
!4 = !{ptr @triton_poi_fused_mul_repeat_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_repeat_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_repeat_27", linkageName: "triton_poi_fused_mul_repeat_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 32, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 25, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 25, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 4, scope: !7)
