; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 1280, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 5, !dbg !16
  %18 = lshr i32 %11, 3, !dbg !17
  %19 = and i32 %18, 15, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = or disjoint i32 %20, 16, !dbg !18
  %22 = icmp slt i32 %20, 49, !dbg !19
  %23 = icmp slt i32 %21, 49, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %24 = sdiv i32 %.frozen, 320, !dbg !20
  %25 = mul i32 %24, 320, !dbg !21
  %.decomposed = sub i32 %.frozen, %25, !dbg !21
  %26 = mul i32 %20, 320, !dbg !22
  %27 = mul i32 %21, 320, !dbg !22
  %28 = mul i32 %24, 15680, !dbg !23
  %29 = add i32 %28, %.decomposed, !dbg !24
  %30 = add i32 %29, %26, !dbg !25
  %31 = add i32 %29, %27, !dbg !25
  %32 = sext i32 %30 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = sext i32 %31 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = and i1 %15, %22, !dbg !27
  %37 = and i1 %23, %15, !dbg !27
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %36) #4, !dbg !28
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %37) #4, !dbg !28
  %40 = sext i32 %.decomposed to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !29
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %15) #4, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !31
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %15) #4, !dbg !32
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !32
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !32
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !32
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !32
  %49 = bitcast i32 %45 to float, !dbg !32
  %50 = bitcast i32 %46 to float, !dbg !32
  %51 = bitcast i32 %47 to float, !dbg !32
  %52 = bitcast i32 %48 to float, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !33
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %15) #4, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !35
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %15) #4, !dbg !36
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !37
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !37
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !37
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !37
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %61, 0, !dbg !38
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %62, 0, !dbg !38
  br i1 %.not.i, label %68, label %63, !dbg !38

63:                                               ; preds = %8
  br i1 %.not1.i, label %66, label %64, !dbg !38

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

68:                                               ; preds = %8
  br i1 %.not1.i, label %71, label %69, !dbg !38

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !38
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i4 = icmp eq i32 %73, 0, !dbg !38
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i7 = icmp eq i32 %74, 0, !dbg !38
  br i1 %.not.i4, label %80, label %75, !dbg !38

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %78, label %76, !dbg !38

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %83, label %81, !dbg !38

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

__nv_sqrtf.exit8:                                 ; preds = %76, %78, %81, %83
  %.0.i6 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !38
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i9 = icmp eq i32 %85, 0, !dbg !38
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i12 = icmp eq i32 %86, 0, !dbg !38
  br i1 %.not.i9, label %92, label %87, !dbg !38

87:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %90, label %88, !dbg !38

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

92:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %95, label %93, !dbg !38

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

__nv_sqrtf.exit13:                                ; preds = %88, %90, %93, %95
  %.0.i11 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !38
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i14 = icmp eq i32 %97, 0, !dbg !38
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i17 = icmp eq i32 %98, 0, !dbg !38
  br i1 %.not.i14, label %104, label %99, !dbg !38

99:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %102, label %100, !dbg !38

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

104:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %107, label %105, !dbg !38

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

__nv_sqrtf.exit18:                                ; preds = %100, %102, %105, %107
  %.0.i16 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !38
  %109 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !30
  %112 = bitcast i32 %111 to float, !dbg !30
  %113 = fsub float %110, %112, !dbg !39
  %114 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %115 = bitcast i32 %114 to float, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !30
  %117 = bitcast i32 %116 to float, !dbg !30
  %118 = fsub float %115, %117, !dbg !39
  %119 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %120 = bitcast i32 %119 to float, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !30
  %122 = bitcast i32 %121 to float, !dbg !30
  %123 = fsub float %120, %122, !dbg !39
  %124 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %125 = bitcast i32 %124 to float, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !30
  %127 = bitcast i32 %126 to float, !dbg !30
  %128 = fsub float %125, %127, !dbg !39
  %129 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !28
  %130 = bitcast i32 %129 to float, !dbg !28
  %131 = fsub float %130, %112, !dbg !39
  %132 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !28
  %133 = bitcast i32 %132 to float, !dbg !28
  %134 = fsub float %133, %117, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = fsub float %136, %122, !dbg !39
  %138 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !28
  %139 = bitcast i32 %138 to float, !dbg !28
  %140 = fsub float %139, %127, !dbg !39
  %141 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !36
  %142 = bitcast i32 %141 to float, !dbg !36
  %143 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !36
  %144 = bitcast i32 %143 to float, !dbg !36
  %145 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !36
  %146 = bitcast i32 %145 to float, !dbg !36
  %147 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !36
  %148 = bitcast i32 %147 to float, !dbg !36
  %149 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !34
  %150 = bitcast i32 %149 to float, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !34
  %152 = bitcast i32 %151 to float, !dbg !34
  %153 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !34
  %154 = bitcast i32 %153 to float, !dbg !34
  %155 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !34
  %156 = bitcast i32 %155 to float, !dbg !34
  %157 = and i32 %11, 31, !dbg !17
  %158 = or disjoint i32 %17, %157, !dbg !18
  %159 = icmp slt i32 %158, 49, !dbg !19
  %.lobit1 = lshr i32 %11, 5, !dbg !12
  %160 = and i32 %.lobit1, 3, !dbg !12
  %161 = or disjoint i32 %160, %10, !dbg !13
  %162 = or disjoint i32 %161, 28, !dbg !13
  %163 = icmp slt i32 %162, 1280, !dbg !14
  %164 = and i1 %163, %159, !dbg !27
  %165 = or disjoint i32 %161, 24, !dbg !13
  %166 = icmp slt i32 %165, 1280, !dbg !14
  %167 = and i1 %166, %159, !dbg !27
  %168 = or disjoint i32 %161, 20, !dbg !13
  %169 = icmp slt i32 %168, 1280, !dbg !14
  %170 = and i1 %169, %159, !dbg !27
  %171 = or disjoint i32 %161, 16, !dbg !13
  %172 = icmp slt i32 %171, 1280, !dbg !14
  %173 = and i1 %172, %159, !dbg !27
  %174 = or disjoint i32 %161, 12, !dbg !13
  %175 = icmp slt i32 %174, 1280, !dbg !14
  %176 = and i1 %175, %159, !dbg !27
  %177 = or disjoint i32 %161, 8, !dbg !13
  %178 = icmp slt i32 %177, 1280, !dbg !14
  %179 = and i1 %178, %159, !dbg !27
  %180 = or disjoint i32 %161, 4, !dbg !13
  %181 = icmp slt i32 %180, 1280, !dbg !14
  %182 = and i1 %181, %159, !dbg !27
  %183 = icmp slt i32 %161, 1280, !dbg !14
  %184 = and i1 %183, %159, !dbg !27
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !40
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !40
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !40
  %189 = fmul float %140, %185, !dbg !41
  %190 = fmul float %137, %186, !dbg !41
  %191 = fmul float %134, %187, !dbg !41
  %192 = fmul float %131, %188, !dbg !41
  %193 = fmul float %128, %185, !dbg !41
  %194 = fmul float %123, %186, !dbg !41
  %195 = fmul float %118, %187, !dbg !41
  %196 = fmul float %113, %188, !dbg !41
  %197 = fmul float %189, %156, !dbg !42
  %198 = fmul float %190, %154, !dbg !42
  %199 = fmul float %191, %152, !dbg !42
  %200 = fmul float %192, %150, !dbg !42
  %201 = fmul float %193, %156, !dbg !42
  %202 = fmul float %194, %154, !dbg !42
  %203 = fmul float %195, %152, !dbg !42
  %204 = fmul float %196, %150, !dbg !42
  %205 = fadd float %197, %148, !dbg !43
  %206 = fadd float %198, %146, !dbg !43
  %207 = fadd float %199, %144, !dbg !43
  %208 = fadd float %200, %142, !dbg !43
  %209 = fadd float %201, %148, !dbg !43
  %210 = fadd float %202, %146, !dbg !43
  %211 = fadd float %203, %144, !dbg !43
  %212 = fadd float %204, %142, !dbg !43
  %213 = mul i32 %161, 49, !dbg !44
  %214 = mul i32 %180, 49, !dbg !44
  %215 = mul i32 %177, 49, !dbg !44
  %216 = mul i32 %174, 49, !dbg !44
  %217 = mul i32 %171, 49, !dbg !44
  %218 = mul i32 %168, 49, !dbg !44
  %219 = mul i32 %165, 49, !dbg !44
  %220 = mul i32 %162, 49, !dbg !44
  %221 = add i32 %158, %213, !dbg !45
  %222 = add i32 %158, %214, !dbg !45
  %223 = add i32 %158, %215, !dbg !45
  %224 = add i32 %158, %216, !dbg !45
  %225 = add i32 %158, %217, !dbg !45
  %226 = add i32 %158, %218, !dbg !45
  %227 = add i32 %158, %219, !dbg !45
  %228 = add i32 %158, %220, !dbg !45
  %229 = sext i32 %221 to i64, !dbg !46
  %230 = getelementptr float, ptr addrspace(1) %5, i64 %229, !dbg !46
  %231 = sext i32 %222 to i64, !dbg !46
  %232 = getelementptr float, ptr addrspace(1) %5, i64 %231, !dbg !46
  %233 = sext i32 %223 to i64, !dbg !46
  %234 = getelementptr float, ptr addrspace(1) %5, i64 %233, !dbg !46
  %235 = sext i32 %224 to i64, !dbg !46
  %236 = getelementptr float, ptr addrspace(1) %5, i64 %235, !dbg !46
  %237 = sext i32 %225 to i64, !dbg !46
  %238 = getelementptr float, ptr addrspace(1) %5, i64 %237, !dbg !46
  %239 = sext i32 %226 to i64, !dbg !46
  %240 = getelementptr float, ptr addrspace(1) %5, i64 %239, !dbg !46
  %241 = sext i32 %227 to i64, !dbg !46
  %242 = getelementptr float, ptr addrspace(1) %5, i64 %241, !dbg !46
  %243 = sext i32 %228 to i64, !dbg !46
  %244 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !46
  %245 = shl i32 %11, 7, !dbg !47
  %246 = and i32 %245, 896, !dbg !47
  %247 = or disjoint i32 %246, %19, !dbg !47
  %248 = and i32 %11, 127, !dbg !47
  %249 = lshr exact i32 %246, 3, !dbg !47
  %250 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %249, !dbg !47
  %251 = getelementptr float, ptr addrspace(3) %250, i32 %247, !dbg !47
  %252 = bitcast float %205 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #4, !dbg !47
  %253 = or disjoint i32 %247, 32, !dbg !47
  %254 = lshr i32 %253, 5, !dbg !47
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !47
  %256 = getelementptr float, ptr addrspace(3) %255, i32 %253, !dbg !47
  %257 = bitcast float %206 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #4, !dbg !47
  %258 = or disjoint i32 %247, 64, !dbg !47
  %259 = lshr i32 %258, 5, !dbg !47
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i32 %259, !dbg !47
  %261 = getelementptr float, ptr addrspace(3) %260, i32 %258, !dbg !47
  %262 = bitcast float %207 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !47
  %263 = or disjoint i32 %247, 96, !dbg !47
  %264 = lshr i32 %263, 5, !dbg !47
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %264, !dbg !47
  %266 = getelementptr float, ptr addrspace(3) %265, i32 %263, !dbg !47
  %267 = bitcast float %208 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !47
  %268 = or disjoint i32 %247, 16, !dbg !47
  %269 = getelementptr float, ptr addrspace(3) %250, i32 %268, !dbg !47
  %270 = bitcast float %209 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #4, !dbg !47
  %271 = or disjoint i32 %247, 48, !dbg !47
  %272 = lshr i32 %271, 5, !dbg !47
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !47
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %271, !dbg !47
  %275 = bitcast float %210 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !47
  %276 = or disjoint i32 %247, 80, !dbg !47
  %277 = lshr i32 %276, 5, !dbg !47
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %277, !dbg !47
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %276, !dbg !47
  %280 = bitcast float %211 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !47
  %281 = or disjoint i32 %247, 112, !dbg !47
  %282 = lshr i32 %281, 5, !dbg !47
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %282, !dbg !47
  %284 = getelementptr float, ptr addrspace(3) %283, i32 %281, !dbg !47
  %285 = bitcast float %212 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %286 = lshr i32 %248, 5, !dbg !47
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !47
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %248, !dbg !47
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !47
  %290 = or disjoint i32 %248, 128, !dbg !47
  %291 = lshr i32 %290, 5, !dbg !47
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !47
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !47
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !47
  %295 = or disjoint i32 %248, 256, !dbg !47
  %296 = lshr i32 %295, 5, !dbg !47
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !47
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %295, !dbg !47
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !47
  %300 = or disjoint i32 %248, 384, !dbg !47
  %301 = lshr i32 %300, 5, !dbg !47
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !47
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %300, !dbg !47
  %304 = load i32, ptr addrspace(3) %303, align 4, !dbg !47
  %305 = or disjoint i32 %248, 512, !dbg !47
  %306 = lshr i32 %305, 5, !dbg !47
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !47
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %305, !dbg !47
  %309 = load i32, ptr addrspace(3) %308, align 4, !dbg !47
  %310 = or disjoint i32 %248, 640, !dbg !47
  %311 = lshr i32 %310, 5, !dbg !47
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !47
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %310, !dbg !47
  %314 = load i32, ptr addrspace(3) %313, align 4, !dbg !47
  %315 = or disjoint i32 %248, 768, !dbg !47
  %316 = lshr i32 %315, 5, !dbg !47
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !47
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %315, !dbg !47
  %319 = load i32, ptr addrspace(3) %318, align 4, !dbg !47
  %320 = or disjoint i32 %248, 896, !dbg !47
  %321 = lshr i32 %320, 5, !dbg !47
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !47
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %320, !dbg !47
  %324 = load i32, ptr addrspace(3) %323, align 4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %230, i1 %184) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %294, ptr addrspace(1) %232, i1 %182) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %234, i1 %179) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %304, ptr addrspace(1) %236, i1 %176) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %309, ptr addrspace(1) %238, i1 %173) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %314, ptr addrspace(1) %240, i1 %170) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %319, ptr addrspace(1) %242, i1 %167) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %324, ptr addrspace(1) %244, i1 %164) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpjyb7tnoj7pg3sq776mg5am7rq7xibfy6wyeesdstdpkssclhev.py", directory: "inductor_cache/pj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 63, scope: !7)
!28 = !DILocation(line: 32, column: 55, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 33, scope: !7)
!45 = !DILocation(line: 48, column: 30, scope: !7)
!46 = !DILocation(line: 48, column: 25, scope: !7)
!47 = !DILocation(line: 48, column: 45, scope: !7)
!48 = !DILocation(line: 48, column: 4, scope: !7)
