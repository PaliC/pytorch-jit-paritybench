; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mse_loss_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = icmp samesign ult i32 %9, 192, !dbg !11
  %.lhs.trunc = trunc i32 %8 to i8, !dbg !12
  %11 = udiv i8 %.lhs.trunc, 48, !dbg !13
  %12 = mul i8 %11, 48, !dbg !12
  %.decomposed = sub i8 %.lhs.trunc, %12, !dbg !12
  %.zext = zext nneg i8 %.decomposed to i64, !dbg !12
  %.zext2 = zext nneg i8 %11 to i64, !dbg !13
  %13 = zext nneg i32 %9 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !14
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !15
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !15
  %20 = shl nuw nsw i64 %.zext2, 6, !dbg !16
  %21 = or disjoint i64 %20, %.zext, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #3, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %28 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %29 = insertelement <2 x i32> %28, i32 %17, i64 1, !dbg !15
  %30 = bitcast <2 x i32> %29 to <2 x float>, !dbg !15
  %31 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %32 = insertelement <2 x i32> %31, i32 %25, i64 1, !dbg !19
  %33 = bitcast <2 x i32> %32 to <2 x float>, !dbg !19
  %34 = fsub <2 x float> %30, %33, !dbg !20
  %35 = fmul <2 x float> %34, %34, !dbg !21
  %36 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !15
  %37 = insertelement <2 x i32> %36, i32 %18, i64 1, !dbg !15
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !15
  %39 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %40 = insertelement <2 x i32> %39, i32 %26, i64 1, !dbg !19
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !19
  %42 = fsub <2 x float> %38, %41, !dbg !20
  %43 = fmul <2 x float> %42, %42, !dbg !21
  %shift = shufflevector <2 x float> %35, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %44 = fadd <2 x float> %35, %shift, !dbg !22
  %shift3 = shufflevector <2 x float> %43, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %45 = fadd <2 x float> %shift3, %44, !dbg !22
  %46 = fadd <2 x float> %43, %45, !dbg !22
  %47 = extractelement <2 x float> %46, i64 0, !dbg !22
  %48 = select i1 %10, float %47, float 0.000000e+00, !dbg !22
  %49 = bitcast float %48 to i32, !dbg !27
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 16, i32 31), !dbg !27
  %51 = bitcast i32 %50 to float, !dbg !27
  %52 = fadd float %48, %51, !dbg !22
  %53 = bitcast float %52 to i32, !dbg !27
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !27
  %55 = bitcast i32 %54 to float, !dbg !27
  %56 = fadd float %52, %55, !dbg !22
  %57 = bitcast float %56 to i32, !dbg !27
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !27
  %59 = bitcast i32 %58 to float, !dbg !27
  %60 = fadd float %56, %59, !dbg !22
  %61 = bitcast float %60 to i32, !dbg !27
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 2, i32 31), !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = fadd float %60, %63, !dbg !22
  %65 = bitcast float %64 to i32, !dbg !27
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = fadd float %64, %67, !dbg !22
  %69 = icmp eq i32 %6, 0, !dbg !27
  %70 = and i32 %7, 1, !dbg !27
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !27
  %72 = bitcast float %68 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 %69) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %73 = icmp slt i32 %5, 2, !dbg !27
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !27
  %75 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %74, i1 %73) #3, !dbg !27
  %76 = bitcast i32 %75 to float, !dbg !27
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !27
  %78 = bitcast i32 %77 to float, !dbg !27
  %79 = fadd float %76, %78, !dbg !22
  %80 = and i32 %5, 1, !dbg !27
  %81 = icmp eq i32 %80, 0, !dbg !27
  %82 = and i1 %73, %81, !dbg !27
  %83 = bitcast float %79 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %83, i1 %82) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %84 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 1.920000e+02) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %urem = and i32 %5, 63, !dbg !30
  %86 = icmp eq i32 %urem, 0, !dbg !30
  %87 = bitcast float %85 to i32, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %87, ptr addrspace(1) %0, i1 %86) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb5pphh7oyqdoogtqshvvs4xncwmgcjogfl5eltk67ldt3lmoauc.py", directory: "inductor_cache/b5")
!4 = !{ptr @triton_per_fused_mse_loss_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mse_loss_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mse_loss_0", linkageName: "triton_per_fused_mse_loss_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 30, column: 19, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 33, column: 38, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 18, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 38, column: 24, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 40, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 4, scope: !7)
!30 = !DILocation(line: 42, column: 70, scope: !7)
!31 = !DILocation(line: 42, column: 4, scope: !7)
