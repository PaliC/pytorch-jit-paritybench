; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 4, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %15, 8, !dbg !12
  %17 = shl i32 %13, 2, !dbg !12
  %18 = and i32 %17, 12, !dbg !12
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %16, !dbg !13
  %21 = or disjoint i32 %12, %18, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = shl i32 %22, 6, !dbg !15
  %24 = and i32 %17, 60, !dbg !16
  %25 = lshr i32 %13, 2, !dbg !16
  %26 = and i32 %25, 31, !dbg !16
  %27 = or disjoint i32 %23, %24, !dbg !17
  %28 = or disjoint i32 %23, %26, !dbg !17
  %29 = or disjoint i32 %28, 32, !dbg !17
  %30 = icmp slt i32 %27, 64, !dbg !18
  %31 = icmp slt i32 %28, 64, !dbg !18
  %32 = icmp slt i32 %29, 64, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %33 = sdiv i32 %.frozen, 4096, !dbg !19
  %34 = mul i32 %33, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %34, !dbg !20
  %35 = shl i32 %19, 6, !dbg !21
  %36 = shl i32 %20, 6, !dbg !21
  %37 = add i32 %27, %35, !dbg !22
  %38 = add i32 %27, %36, !dbg !22
  %39 = sext i32 %37 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = sext i32 %38 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %30) #2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %30) #2, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = sext i32 %27 to i64, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %30) #2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %68 = bitcast i32 %64 to float, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = bitcast i32 %67 to float, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !27
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %30) #2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !28
  %78 = bitcast i32 %74 to float, !dbg !28
  %79 = bitcast i32 %75 to float, !dbg !28
  %80 = bitcast i32 %76 to float, !dbg !28
  %81 = bitcast i32 %77 to float, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !29
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %30) #2, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !30
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !30
  %89 = bitcast i32 %85 to float, !dbg !30
  %90 = bitcast i32 %86 to float, !dbg !30
  %91 = bitcast i32 %87 to float, !dbg !30
  %92 = bitcast i32 %88 to float, !dbg !30
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %30) #2, !dbg !30
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !30
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !30
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !30
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !30
  %98 = bitcast i32 %94 to float, !dbg !30
  %99 = bitcast i32 %95 to float, !dbg !30
  %100 = bitcast i32 %96 to float, !dbg !30
  %101 = bitcast i32 %97 to float, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !31
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %30) #2, !dbg !32
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !32
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !32
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !32
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !32
  %108 = bitcast i32 %104 to float, !dbg !32
  %109 = bitcast i32 %105 to float, !dbg !32
  %110 = bitcast i32 %106 to float, !dbg !32
  %111 = bitcast i32 %107 to float, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !33
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %30) #2, !dbg !34
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !34
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !34
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !34
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !34
  %118 = bitcast i32 %114 to float, !dbg !34
  %119 = bitcast i32 %115 to float, !dbg !34
  %120 = bitcast i32 %116 to float, !dbg !34
  %121 = bitcast i32 %117 to float, !dbg !34
  %122 = getelementptr float, ptr addrspace(1) %6, i64 %61, !dbg !35
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 %30) #2, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !36
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !36
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !36
  %128 = bitcast i32 %124 to float, !dbg !36
  %129 = bitcast i32 %125 to float, !dbg !36
  %130 = bitcast i32 %126 to float, !dbg !36
  %131 = bitcast i32 %127 to float, !dbg !36
  %132 = fadd float %48, %68, !dbg !37
  %133 = fadd float %49, %69, !dbg !37
  %134 = fadd float %50, %70, !dbg !37
  %135 = fadd float %51, %71, !dbg !37
  %136 = fadd float %57, %68, !dbg !37
  %137 = fadd float %58, %69, !dbg !37
  %138 = fadd float %59, %70, !dbg !37
  %139 = fadd float %60, %71, !dbg !37
  %140 = fmul float %78, %89, !dbg !38
  %141 = fmul float %79, %90, !dbg !38
  %142 = fmul float %80, %91, !dbg !38
  %143 = fmul float %81, %92, !dbg !38
  %144 = fmul float %78, %98, !dbg !38
  %145 = fmul float %79, %99, !dbg !38
  %146 = fmul float %80, %100, !dbg !38
  %147 = fmul float %81, %101, !dbg !38
  %148 = fadd float %140, %108, !dbg !39
  %149 = fadd float %141, %109, !dbg !39
  %150 = fadd float %142, %110, !dbg !39
  %151 = fadd float %143, %111, !dbg !39
  %152 = fadd float %144, %108, !dbg !39
  %153 = fadd float %145, %109, !dbg !39
  %154 = fadd float %146, %110, !dbg !39
  %155 = fadd float %147, %111, !dbg !39
  %156 = fmul float %132, %118, !dbg !40
  %157 = fmul float %133, %119, !dbg !40
  %158 = fmul float %134, %120, !dbg !40
  %159 = fmul float %135, %121, !dbg !40
  %160 = fmul float %136, %118, !dbg !40
  %161 = fmul float %137, %119, !dbg !40
  %162 = fmul float %138, %120, !dbg !40
  %163 = fmul float %139, %121, !dbg !40
  %164 = fadd float %156, %128, !dbg !41
  %165 = fadd float %157, %129, !dbg !41
  %166 = fadd float %158, %130, !dbg !41
  %167 = fadd float %159, %131, !dbg !41
  %168 = fadd float %160, %128, !dbg !41
  %169 = fadd float %161, %129, !dbg !41
  %170 = fadd float %162, %130, !dbg !41
  %171 = fadd float %163, %131, !dbg !41
  %172 = fadd float %148, %164, !dbg !42
  %173 = fadd float %149, %165, !dbg !42
  %174 = fadd float %150, %166, !dbg !42
  %175 = fadd float %151, %167, !dbg !42
  %176 = fadd float %152, %168, !dbg !42
  %177 = fadd float %153, %169, !dbg !42
  %178 = fadd float %154, %170, !dbg !42
  %179 = fadd float %155, %171, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %180 = bitcast float %132 to i32, !dbg !44
  %181 = bitcast float %133 to i32, !dbg !44
  %182 = bitcast float %134 to i32, !dbg !44
  %183 = bitcast float %135 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %180, i32 %181, i32 %182, i32 %183, ptr addrspace(1) %40, i1 %30) #2, !dbg !44
  %184 = bitcast float %136 to i32, !dbg !44
  %185 = bitcast float %137 to i32, !dbg !44
  %186 = bitcast float %138 to i32, !dbg !44
  %187 = bitcast float %139 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %184, i32 %185, i32 %186, i32 %187, ptr addrspace(1) %42, i1 %30) #2, !dbg !44
  %188 = shl i32 %28, 12, !dbg !45
  %189 = shl i32 %29, 12, !dbg !45
  %190 = shl i32 %33, 18, !dbg !46
  %191 = add i32 %190, %.decomposed, !dbg !47
  %192 = add i32 %191, %188, !dbg !48
  %193 = add i32 %191, %189, !dbg !48
  %194 = sext i32 %192 to i64, !dbg !49
  %195 = getelementptr float, ptr addrspace(1) %7, i64 %194, !dbg !49
  %196 = sext i32 %193 to i64, !dbg !49
  %197 = getelementptr float, ptr addrspace(1) %7, i64 %196, !dbg !49
  %198 = shl i32 %13, 6, !dbg !50
  %199 = and i32 %198, 960, !dbg !50
  %200 = or disjoint i32 %199, %15, !dbg !50
  %201 = and i32 %17, 508, !dbg !50
  %202 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %199, !dbg !50
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %200, !dbg !50
  %204 = bitcast float %172 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !50
  %205 = or disjoint i32 %200, 16, !dbg !50
  %206 = lshr i32 %205, 2, !dbg !50
  %207 = and i32 %206, 244, !dbg !50
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !50
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %205, !dbg !50
  %210 = bitcast float %173 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !50
  %211 = or disjoint i32 %200, 32, !dbg !50
  %212 = lshr i32 %211, 2, !dbg !50
  %213 = and i32 %212, 248, !dbg !50
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !50
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %211, !dbg !50
  %216 = bitcast float %174 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !50
  %217 = or disjoint i32 %200, 48, !dbg !50
  %218 = lshr i32 %217, 2, !dbg !50
  %219 = and i32 %218, 252, !dbg !50
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !50
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %217, !dbg !50
  %222 = bitcast float %175 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #2, !dbg !50
  %223 = or disjoint i32 %200, 8, !dbg !50
  %224 = getelementptr float, ptr addrspace(3) %202, i32 %223, !dbg !50
  %225 = bitcast float %176 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #2, !dbg !50
  %226 = or disjoint i32 %200, 24, !dbg !50
  %227 = lshr i32 %226, 2, !dbg !50
  %228 = and i32 %227, 244, !dbg !50
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !50
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %226, !dbg !50
  %231 = bitcast float %177 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !50
  %232 = or disjoint i32 %200, 40, !dbg !50
  %233 = lshr i32 %232, 2, !dbg !50
  %234 = and i32 %233, 248, !dbg !50
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !50
  %236 = getelementptr float, ptr addrspace(3) %235, i32 %232, !dbg !50
  %237 = bitcast float %178 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #2, !dbg !50
  %238 = or disjoint i32 %200, 56, !dbg !50
  %239 = lshr i32 %238, 2, !dbg !50
  %240 = and i32 %239, 252, !dbg !50
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %240, !dbg !50
  %242 = getelementptr float, ptr addrspace(3) %241, i32 %238, !dbg !50
  %243 = bitcast float %179 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %244 = and i32 %13, 124, !dbg !50
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !50
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %201, !dbg !50
  %247 = or disjoint i32 %201, 512, !dbg !50
  %248 = lshr exact i32 %247, 2, !dbg !50
  %249 = and i32 %248, 252, !dbg !50
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !50
  %251 = getelementptr inbounds float, ptr addrspace(3) %250, i32 %247, !dbg !50
  %252 = load <4 x i32>, ptr addrspace(3) %251, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %246, align 16, !dbg !50
  %253 = getelementptr inbounds i8, ptr addrspace(3) %246, i32 4, !dbg !50
  %.extract11 = load i32, ptr addrspace(3) %253, align 4, !dbg !50
  %254 = getelementptr inbounds i8, ptr addrspace(3) %246, i32 8, !dbg !50
  %.extract12 = load i32, ptr addrspace(3) %254, align 8, !dbg !50
  %255 = getelementptr inbounds i8, ptr addrspace(3) %246, i32 12, !dbg !50
  %.extract13 = load i32, ptr addrspace(3) %255, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %195, i1 %31) #2, !dbg !50
  %.extract14 = extractelement <4 x i32> %252, i64 0, !dbg !50
  %.extract15 = extractelement <4 x i32> %252, i64 1, !dbg !50
  %.extract16 = extractelement <4 x i32> %252, i64 2, !dbg !50
  %.extract17 = extractelement <4 x i32> %252, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %197, i1 %32) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpltt4rn3up6yvrugm7zodnd37w7xpia2dx26rgmbffnlun32zu2.py", directory: "inductor_cache/pl")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_9", linkageName: "triton_poi_fused_add_convolution_mul_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 34, scope: !7)
!24 = !DILocation(line: 32, column: 47, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 43, scope: !7)
!31 = !DILocation(line: 36, column: 30, scope: !7)
!32 = !DILocation(line: 36, column: 35, scope: !7)
!33 = !DILocation(line: 37, column: 30, scope: !7)
!34 = !DILocation(line: 37, column: 35, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 19, scope: !7)
!43 = !DILocation(line: 45, column: 4, scope: !7)
!44 = !DILocation(line: 46, column: 47, scope: !7)
!45 = !DILocation(line: 47, column: 35, scope: !7)
!46 = !DILocation(line: 47, column: 47, scope: !7)
!47 = !DILocation(line: 47, column: 30, scope: !7)
!48 = !DILocation(line: 47, column: 40, scope: !7)
!49 = !DILocation(line: 47, column: 25, scope: !7)
!50 = !DILocation(line: 47, column: 59, scope: !7)
!51 = !DILocation(line: 47, column: 4, scope: !7)
