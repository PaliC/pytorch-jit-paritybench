; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = and i32 %9, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 1024, !dbg !14
  %14 = lshr i32 %9, 5, !dbg !15
  %15 = lshr i32 %9, 3, !dbg !15
  %16 = and i32 %15, 31, !dbg !15
  %17 = or disjoint i32 %16, 32, !dbg !15
  %18 = or disjoint i32 %16, 96, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %19 = sdiv i32 %.frozen, 64, !dbg !16
  %20 = mul i32 %19, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = shl nuw nsw i32 %16, 9, !dbg !18
  %22 = shl nuw nsw i32 %17, 9, !dbg !18
  %23 = shl nuw nsw i32 %18, 9, !dbg !18
  %24 = and i32 %23, 32256, !dbg !18
  %25 = shl nsw i32 %.decomposed, 7, !dbg !19
  %26 = or disjoint i32 %25, %16, !dbg !20
  %27 = or disjoint i32 %25, %17, !dbg !20
  %28 = or disjoint i32 %26, 64, !dbg !20
  %29 = or disjoint i32 %25, %18, !dbg !20
  %30 = shl i32 %19, 13, !dbg !21
  %31 = add i32 %26, %30, !dbg !22
  %32 = add i32 %27, %30, !dbg !22
  %33 = add i32 %28, %30, !dbg !22
  %34 = add i32 %29, %30, !dbg !22
  %35 = sdiv i32 %31, 32768, !dbg !23
  %36 = sdiv i32 %32, 32768, !dbg !23
  %37 = sdiv i32 %33, 32768, !dbg !23
  %38 = sdiv i32 %34, 32768, !dbg !23
  %39 = shl nsw i32 %35, 15, !dbg !24
  %40 = shl nsw i32 %36, 15, !dbg !24
  %41 = shl nsw i32 %37, 15, !dbg !24
  %42 = shl nsw i32 %38, 15, !dbg !24
  %43 = or disjoint i32 %39, %21, !dbg !25
  %44 = or disjoint i32 %40, %22, !dbg !25
  %45 = or disjoint i32 %41, %21, !dbg !25
  %46 = or disjoint i32 %42, %24, !dbg !25
  %47 = sdiv i32 %31, 64, !dbg !26
  %48 = sdiv i32 %32, 64, !dbg !26
  %49 = sdiv i32 %33, 64, !dbg !26
  %50 = sdiv i32 %34, 64, !dbg !26
  %51 = srem i32 %47, 512, !dbg !27
  %52 = srem i32 %48, 512, !dbg !27
  %53 = srem i32 %49, 512, !dbg !27
  %54 = srem i32 %50, 512, !dbg !27
  %55 = add i32 %43, %51, !dbg !28
  %56 = add nsw i32 %44, %52, !dbg !28
  %57 = add i32 %45, %53, !dbg !28
  %58 = add nsw i32 %46, %54, !dbg !28
  %59 = sext i32 %55 to i64, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !29
  %61 = sext i32 %56 to i64, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !29
  %63 = sext i32 %57 to i64, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !29
  %65 = sext i32 %58 to i64, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !29
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %13, i32 0, i1 %13) #4, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %13, i32 0, i1 %13) #4, !dbg !30
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %13, i32 0, i1 %13) #4, !dbg !30
  %70 = bitcast i32 %69 to float, !dbg !30
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %13, i32 0, i1 %13) #4, !dbg !30
  %72 = bitcast i32 %71 to float, !dbg !30
  %73 = sext i32 %51 to i64, !dbg !31
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !31
  %75 = sext i32 %52 to i64, !dbg !31
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !31
  %77 = sext i32 %53 to i64, !dbg !31
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !31
  %79 = sext i32 %54 to i64, !dbg !31
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !31
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %13, i32 0, i1 %13) #4, !dbg !32
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %13, i32 0, i1 %13) #4, !dbg !32
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %13, i32 0, i1 %13) #4, !dbg !32
  %84 = bitcast i32 %83 to float, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %13, i32 0, i1 %13) #4, !dbg !32
  %86 = bitcast i32 %85 to float, !dbg !32
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !33
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !33
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !33
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %13, i32 0, i1 %13) #4, !dbg !34
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %13, i32 0, i1 %13) #4, !dbg !34
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %13, i32 0, i1 %13) #4, !dbg !34
  %94 = bitcast i32 %93 to float, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %13, i32 0, i1 %13) #4, !dbg !34
  %96 = bitcast i32 %95 to float, !dbg !34
  %97 = fadd float %70, %84, !dbg !35
  %98 = fadd float %72, %86, !dbg !35
  %99 = fcmp olt float %97, 0.000000e+00, !dbg !36
  %100 = fcmp olt float %98, 0.000000e+00, !dbg !36
  %101 = select i1 %99, float 0.000000e+00, float %97, !dbg !40
  %102 = select i1 %100, float 0.000000e+00, float %98, !dbg !40
  %103 = fadd float %84, %94, !dbg !41
  %104 = fadd float %86, %96, !dbg !41
  %105 = fcmp olt float %103, 0.000000e+00, !dbg !42
  %106 = fcmp olt float %104, 0.000000e+00, !dbg !42
  %107 = select i1 %105, float 0.000000e+00, float %103, !dbg !44
  %108 = select i1 %106, float 0.000000e+00, float %104, !dbg !44
  %109 = fsub float %101, %107, !dbg !45
  %110 = fsub float %102, %108, !dbg !45
  %111 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !30
  %112 = insertelement <2 x i32> %111, i32 %68, i64 1, !dbg !30
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !30
  %114 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !32
  %115 = insertelement <2 x i32> %114, i32 %82, i64 1, !dbg !32
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !32
  %117 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !34
  %118 = insertelement <2 x i32> %117, i32 %92, i64 1, !dbg !34
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !34
  %120 = fadd <2 x float> %113, %116, !dbg !35
  %121 = fcmp olt <2 x float> %120, zeroinitializer, !dbg !36
  %122 = select <2 x i1> %121, <2 x float> zeroinitializer, <2 x float> %120, !dbg !40
  %123 = fadd <2 x float> %116, %119, !dbg !41
  %124 = fcmp olt <2 x float> %123, zeroinitializer, !dbg !42
  %125 = select <2 x i1> %124, <2 x float> zeroinitializer, <2 x float> %123, !dbg !44
  %126 = fsub <2 x float> %122, %125, !dbg !45
  %127 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %126), !dbg !46
  %128 = tail call float @llvm.fabs.f32(float %109), !dbg !46
  %129 = tail call float @llvm.fabs.f32(float %110), !dbg !46
  %shift = shufflevector <2 x float> %127, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !47
  %130 = fadd <2 x float> %127, %shift, !dbg !47
  %131 = extractelement <2 x float> %130, i64 0, !dbg !47
  %132 = fadd float %131, %128, !dbg !47
  %133 = fadd float %132, %129, !dbg !47
  %134 = select i1 %13, float %133, float 0.000000e+00, !dbg !47
  %135 = bitcast float %134 to i32, !dbg !52
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !52
  %137 = bitcast i32 %136 to float, !dbg !52
  %138 = fadd float %134, %137, !dbg !47
  %139 = bitcast float %138 to i32, !dbg !52
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !52
  %141 = bitcast i32 %140 to float, !dbg !52
  %142 = fadd float %138, %141, !dbg !47
  %143 = lshr i32 %10, 3, !dbg !52
  %144 = icmp samesign ult i32 %10, 8, !dbg !52
  %145 = and i32 %14, 7, !dbg !52
  %146 = shl nuw nsw i32 %11, 3, !dbg !52
  %147 = or disjoint i32 %146, %145, !dbg !52
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !52
  %149 = bitcast float %142 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 %144) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %150 = icmp slt i32 %9, 64, !dbg !52
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !52
  %152 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %151, i1 %150) #4, !dbg !52
  %153 = bitcast i32 %152 to float, !dbg !52
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 4, i32 31), !dbg !52
  %155 = bitcast i32 %154 to float, !dbg !52
  %156 = fadd float %153, %155, !dbg !47
  %157 = bitcast float %156 to i32, !dbg !52
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 2, i32 31), !dbg !52
  %159 = bitcast i32 %158 to float, !dbg !52
  %160 = fadd float %156, %159, !dbg !47
  %161 = bitcast float %160 to i32, !dbg !52
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !52
  %163 = bitcast i32 %162 to float, !dbg !52
  %164 = fadd float %160, %163, !dbg !47
  %165 = icmp eq i32 %11, 0, !dbg !52
  %166 = and i1 %150, %165, !dbg !52
  %167 = bitcast float %164 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %167, i1 %166) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !52
  %169 = load i32, ptr addrspace(3) %168, align 16, !dbg !52
  %170 = sext i32 %12 to i64, !dbg !53
  %171 = getelementptr float, ptr addrspace(1) %3, i64 %170, !dbg !53
  %172 = shl nuw nsw i32 %145, 2, !dbg !54
  %173 = or disjoint i32 %172, %143, !dbg !54
  %174 = icmp eq i32 %173, 0, !dbg !54
  %175 = and i1 %174, %13, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %171, i1 %175) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cneu5soynpjk6yfdqityslk3vvqs7wrydajkf7757ee3o3fgh4wj.py", directory: "inductor_cache/ne")
!4 = !{ptr @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16", linkageName: "triton_per_fused_abs_convolution_max_pool2d_with_indices_mean_relu_sub_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 65, scope: !7)
!20 = !DILocation(line: 33, column: 61, scope: !7)
!21 = !DILocation(line: 33, column: 75, scope: !7)
!22 = !DILocation(line: 33, column: 70, scope: !7)
!23 = !DILocation(line: 33, column: 82, scope: !7)
!24 = !DILocation(line: 33, column: 55, scope: !7)
!25 = !DILocation(line: 33, column: 48, scope: !7)
!26 = !DILocation(line: 33, column: 121, scope: !7)
!27 = !DILocation(line: 33, column: 127, scope: !7)
!28 = !DILocation(line: 33, column: 93, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 135, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 72, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 135, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 38, column: 40, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !43)
!43 = !DILocation(line: 40, column: 40, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !43)
!45 = !DILocation(line: 41, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 23, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !51)
!48 = distinct !DILexicalBlockFile(scope: !50, file: !49, discriminator: 0)
!49 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!50 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!51 = !DILocation(line: 45, column: 26, scope: !7)
!52 = !DILocation(line: 267, column: 36, scope: !50, inlinedAt: !51)
!53 = !DILocation(line: 46, column: 25, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 46, column: 4, scope: !7)
