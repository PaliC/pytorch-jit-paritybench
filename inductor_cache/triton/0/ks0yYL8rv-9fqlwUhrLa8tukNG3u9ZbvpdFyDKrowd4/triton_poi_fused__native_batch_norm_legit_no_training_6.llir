; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = lshr i32 %11, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = icmp slt i32 %17, 512, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %15, !dbg !17
  %22 = or disjoint i32 %20, %16, !dbg !17
  %23 = icmp slt i32 %21, 64, !dbg !18
  %24 = icmp slt i32 %22, 64, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %25 = sdiv i32 %.frozen, 128, !dbg !19
  %26 = mul i32 %25, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = shl i32 %21, 7, !dbg !21
  %28 = shl i32 %22, 7, !dbg !21
  %29 = shl i32 %25, 13, !dbg !22
  %30 = add i32 %29, %.decomposed, !dbg !23
  %31 = add i32 %30, %27, !dbg !24
  %32 = add i32 %30, %28, !dbg !24
  %33 = sext i32 %31 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = sext i32 %32 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = and i1 %18, %23, !dbg !26
  %38 = and i1 %18, %24, !dbg !26
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %37) #4, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %38) #4, !dbg !27
  %41 = sext i32 %.decomposed to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !28
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %18) #4, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !30
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %18) #4, !dbg !31
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !31
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !31
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !31
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !31
  %50 = bitcast i32 %46 to float, !dbg !31
  %51 = bitcast i32 %47 to float, !dbg !31
  %52 = bitcast i32 %48 to float, !dbg !31
  %53 = bitcast i32 %49 to float, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !32
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %18) #4, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !34
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %18) #4, !dbg !35
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !36
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !36
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !36
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !36
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %62, 0, !dbg !37
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %63, 0, !dbg !37
  br i1 %.not.i, label %69, label %64, !dbg !37

64:                                               ; preds = %8
  br i1 %.not1.i, label %67, label %65, !dbg !37

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

69:                                               ; preds = %8
  br i1 %.not1.i, label %72, label %70, !dbg !37

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !37
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i1 = icmp eq i32 %74, 0, !dbg !37
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !37
  br i1 %.not.i1, label %81, label %76, !dbg !37

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !37

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !37

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !37
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i6 = icmp eq i32 %86, 0, !dbg !37
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i9 = icmp eq i32 %87, 0, !dbg !37
  br i1 %.not.i6, label %93, label %88, !dbg !37

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !37

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

93:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %96, label %94, !dbg !37

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %89, %91, %94, %96
  %.0.i8 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !37
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i11 = icmp eq i32 %98, 0, !dbg !37
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i14 = icmp eq i32 %99, 0, !dbg !37
  br i1 %.not.i11, label %105, label %100, !dbg !37

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !37

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

105:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %108, label %106, !dbg !37

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %101, %103, %106, %108
  %.0.i13 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !37
  %110 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !29
  %113 = bitcast i32 %112 to float, !dbg !29
  %114 = fsub float %111, %113, !dbg !38
  %115 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %116 = bitcast i32 %115 to float, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !29
  %118 = bitcast i32 %117 to float, !dbg !29
  %119 = fsub float %116, %118, !dbg !38
  %120 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %121 = bitcast i32 %120 to float, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !29
  %123 = bitcast i32 %122 to float, !dbg !29
  %124 = fsub float %121, %123, !dbg !38
  %125 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %126 = bitcast i32 %125 to float, !dbg !27
  %127 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = fsub float %126, %128, !dbg !38
  %130 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !27
  %131 = bitcast i32 %130 to float, !dbg !27
  %132 = fsub float %131, %113, !dbg !38
  %133 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !27
  %134 = bitcast i32 %133 to float, !dbg !27
  %135 = fsub float %134, %118, !dbg !38
  %136 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !27
  %137 = bitcast i32 %136 to float, !dbg !27
  %138 = fsub float %137, %123, !dbg !38
  %139 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !27
  %140 = bitcast i32 %139 to float, !dbg !27
  %141 = fsub float %140, %128, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !35
  %143 = bitcast i32 %142 to float, !dbg !35
  %144 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !35
  %145 = bitcast i32 %144 to float, !dbg !35
  %146 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !35
  %147 = bitcast i32 %146 to float, !dbg !35
  %148 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !35
  %149 = bitcast i32 %148 to float, !dbg !35
  %150 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !33
  %151 = bitcast i32 %150 to float, !dbg !33
  %152 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !33
  %153 = bitcast i32 %152 to float, !dbg !33
  %154 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !33
  %155 = bitcast i32 %154 to float, !dbg !33
  %156 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !33
  %157 = bitcast i32 %156 to float, !dbg !33
  %158 = or disjoint i32 %20, %13, !dbg !17
  %159 = icmp slt i32 %158, 64, !dbg !18
  %160 = or disjoint i32 %10, %16, !dbg !13
  %161 = icmp slt i32 %160, 512, !dbg !14
  %162 = and i1 %161, %159, !dbg !26
  %163 = or disjoint i32 %10, %15, !dbg !13
  %164 = icmp slt i32 %163, 512, !dbg !14
  %165 = and i1 %164, %159, !dbg !26
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !39
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !39
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !39
  %170 = fmul float %141, %166, !dbg !40
  %171 = fmul float %138, %167, !dbg !40
  %172 = fmul float %135, %168, !dbg !40
  %173 = fmul float %132, %169, !dbg !40
  %174 = fmul float %129, %166, !dbg !40
  %175 = fmul float %124, %167, !dbg !40
  %176 = fmul float %119, %168, !dbg !40
  %177 = fmul float %114, %169, !dbg !40
  %178 = fmul float %170, %157, !dbg !41
  %179 = fmul float %171, %155, !dbg !41
  %180 = fmul float %172, %153, !dbg !41
  %181 = fmul float %173, %151, !dbg !41
  %182 = fmul float %174, %157, !dbg !41
  %183 = fmul float %175, %155, !dbg !41
  %184 = fmul float %176, %153, !dbg !41
  %185 = fmul float %177, %151, !dbg !41
  %186 = fadd float %178, %149, !dbg !42
  %187 = fadd float %179, %147, !dbg !42
  %188 = fadd float %180, %145, !dbg !42
  %189 = fadd float %181, %143, !dbg !42
  %190 = fadd float %182, %149, !dbg !42
  %191 = fadd float %183, %147, !dbg !42
  %192 = fadd float %184, %145, !dbg !42
  %193 = fadd float %185, %143, !dbg !42
  %194 = shl i32 %163, 6, !dbg !43
  %195 = shl i32 %160, 6, !dbg !43
  %196 = add i32 %158, %194, !dbg !44
  %197 = add i32 %158, %195, !dbg !44
  %198 = sext i32 %196 to i64, !dbg !45
  %199 = getelementptr float, ptr addrspace(1) %5, i64 %198, !dbg !45
  %200 = sext i32 %197 to i64, !dbg !45
  %201 = getelementptr float, ptr addrspace(1) %5, i64 %200, !dbg !45
  %202 = shl i32 %11, 7, !dbg !46
  %203 = and i32 %202, 896, !dbg !46
  %204 = or disjoint i32 %203, %15, !dbg !46
  %205 = and i32 %12, 508, !dbg !46
  %206 = lshr exact i32 %203, 3, !dbg !46
  %207 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %206, !dbg !46
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %204, !dbg !46
  %209 = bitcast float %186 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #4, !dbg !46
  %210 = or disjoint i32 %204, 32, !dbg !46
  %211 = lshr i32 %210, 5, !dbg !46
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i32 %211, !dbg !46
  %213 = getelementptr float, ptr addrspace(3) %212, i32 %210, !dbg !46
  %214 = bitcast float %187 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 true) #4, !dbg !46
  %215 = or disjoint i32 %204, 64, !dbg !46
  %216 = lshr i32 %215, 5, !dbg !46
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !46
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %215, !dbg !46
  %219 = bitcast float %188 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #4, !dbg !46
  %220 = or disjoint i32 %204, 96, !dbg !46
  %221 = lshr i32 %220, 5, !dbg !46
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !46
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %220, !dbg !46
  %224 = bitcast float %189 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #4, !dbg !46
  %225 = or disjoint i32 %204, 16, !dbg !46
  %226 = getelementptr float, ptr addrspace(3) %207, i32 %225, !dbg !46
  %227 = bitcast float %190 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !46
  %228 = or disjoint i32 %204, 48, !dbg !46
  %229 = lshr i32 %228, 5, !dbg !46
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %229, !dbg !46
  %231 = getelementptr float, ptr addrspace(3) %230, i32 %228, !dbg !46
  %232 = bitcast float %191 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !46
  %233 = or disjoint i32 %204, 80, !dbg !46
  %234 = lshr i32 %233, 5, !dbg !46
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !46
  %236 = getelementptr float, ptr addrspace(3) %235, i32 %233, !dbg !46
  %237 = bitcast float %192 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #4, !dbg !46
  %238 = or disjoint i32 %204, 112, !dbg !46
  %239 = lshr i32 %238, 5, !dbg !46
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !46
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %238, !dbg !46
  %242 = bitcast float %193 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %243 = lshr i32 %205, 5, !dbg !46
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !46
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %205, !dbg !46
  %246 = load i32, ptr addrspace(3) %245, align 4, !dbg !46
  %247 = or disjoint i32 %205, 1, !dbg !46
  %248 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %247, !dbg !46
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !46
  %250 = or disjoint i32 %205, 2, !dbg !46
  %251 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %250, !dbg !46
  %252 = load i32, ptr addrspace(3) %251, align 4, !dbg !46
  %253 = or disjoint i32 %205, 3, !dbg !46
  %254 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %253, !dbg !46
  %255 = load i32, ptr addrspace(3) %254, align 4, !dbg !46
  %256 = or disjoint i32 %205, 512, !dbg !46
  %257 = lshr i32 %256, 5, !dbg !46
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %257, !dbg !46
  %259 = getelementptr inbounds float, ptr addrspace(3) %258, i32 %256, !dbg !46
  %260 = load i32, ptr addrspace(3) %259, align 4, !dbg !46
  %261 = or disjoint i32 %205, 513, !dbg !46
  %262 = lshr i32 %261, 5, !dbg !46
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !46
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %261, !dbg !46
  %265 = load i32, ptr addrspace(3) %264, align 4, !dbg !46
  %266 = or disjoint i32 %205, 514, !dbg !46
  %267 = lshr i32 %266, 5, !dbg !46
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !46
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %266, !dbg !46
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !46
  %271 = or disjoint i32 %205, 515, !dbg !46
  %272 = lshr i32 %271, 5, !dbg !46
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !46
  %274 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %271, !dbg !46
  %275 = load i32, ptr addrspace(3) %274, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %249, i32 %252, i32 %255, ptr addrspace(1) %199, i1 %165) #4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %260, i32 %265, i32 %270, i32 %275, ptr addrspace(1) %201, i1 %162) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7zcplnosgklv7l4atxuvtmkulzfmhez6l2eal73fgbi5limio5r.py", directory: "inductor_cache/7z")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 62, scope: !7)
!27 = !DILocation(line: 32, column: 54, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 33, scope: !7)
!44 = !DILocation(line: 48, column: 30, scope: !7)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 45, scope: !7)
!47 = !DILocation(line: 48, column: 4, scope: !7)
