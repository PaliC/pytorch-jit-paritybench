; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_72(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %11 = sdiv i32 %.frozen, 128, !dbg !14
  %12 = mul i32 %11, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = srem i32 %11, 16, !dbg !16
  %14 = sdiv i32 %10, 2048, !dbg !17
  %15 = shl nsw i32 %13, 8, !dbg !18
  %16 = shl i32 %14, 13, !dbg !19
  %17 = add i32 %16, %.decomposed, !dbg !20
  %18 = add i32 %17, %15, !dbg !21
  %19 = sext i32 %18 to i64, !dbg !22
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !22
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !23
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !23
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !23
  %24 = bitcast i32 %22 to float, !dbg !23
  %25 = bitcast i32 %23 to float, !dbg !23
  %26 = add i32 %17, 128, !dbg !24
  %27 = add i32 %26, %15, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !27
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !27
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !27
  %33 = bitcast i32 %31 to float, !dbg !27
  %34 = bitcast i32 %32 to float, !dbg !27
  %35 = add i32 %17, 4096, !dbg !28
  %36 = add i32 %35, %15, !dbg !29
  %37 = sext i32 %36 to i64, !dbg !30
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !30
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !31
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !31
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !31
  %42 = bitcast i32 %40 to float, !dbg !31
  %43 = bitcast i32 %41 to float, !dbg !31
  %44 = add i32 %17, 4224, !dbg !32
  %45 = add i32 %44, %15, !dbg !33
  %46 = sext i32 %45 to i64, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !34
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !35
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !35
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !35
  %51 = bitcast i32 %49 to float, !dbg !35
  %52 = bitcast i32 %50 to float, !dbg !35
  %53 = sext i32 %.decomposed to i64, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !36
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !37
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !37
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !37
  %58 = bitcast i32 %56 to float, !dbg !37
  %59 = bitcast i32 %57 to float, !dbg !37
  %60 = fcmp ogt float %33, %24, !dbg !38
  %61 = fcmp ogt float %34, %25, !dbg !38
  %62 = fcmp uno float %33, 0.000000e+00, !dbg !42
  %63 = fcmp uno float %34, 0.000000e+00, !dbg !42
  %64 = or i1 %60, %62, !dbg !43
  %65 = or i1 %61, %63, !dbg !43
  %66 = select i1 %64, float %33, float %24, !dbg !44
  %67 = select i1 %65, float %34, float %25, !dbg !44
  %68 = fcmp olt float %66, %42, !dbg !45
  %69 = fcmp olt float %67, %43, !dbg !45
  %70 = fcmp uno float %42, 0.000000e+00, !dbg !47
  %71 = fcmp uno float %43, 0.000000e+00, !dbg !47
  %72 = or i1 %70, %68, !dbg !48
  %73 = or i1 %71, %69, !dbg !48
  %74 = select i1 %72, float %42, float %66, !dbg !49
  %75 = select i1 %73, float %43, float %67, !dbg !49
  %76 = fcmp olt float %74, %51, !dbg !50
  %77 = fcmp olt float %75, %52, !dbg !50
  %78 = fcmp uno float %51, 0.000000e+00, !dbg !52
  %79 = fcmp uno float %52, 0.000000e+00, !dbg !52
  %80 = or i1 %78, %76, !dbg !53
  %81 = or i1 %79, %77, !dbg !53
  %82 = select i1 %80, float %51, float %74, !dbg !54
  %83 = select i1 %81, float %52, float %75, !dbg !54
  %84 = fsub float %82, %58, !dbg !55
  %85 = fsub float %83, %59, !dbg !55
  %86 = sext i32 %10 to i64, !dbg !56
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !56
  %88 = bitcast float %84 to i32, !dbg !57
  %89 = bitcast float %85 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %88, i32 %89, ptr addrspace(1) %87, i1 true) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceowri3gs64wynxoug6lr7s6fqzjnqxtyfbgeyk7lxhrs5dra66r.py", directory: "inductor_cache/eo")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_72, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_72, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_72", linkageName: "triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_72", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 49, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 54, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 60, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 61, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 61, scope: !7)
!36 = !DILocation(line: 32, column: 30, scope: !7)
!37 = !DILocation(line: 32, column: 35, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 33, column: 40, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !46)
!46 = !DILocation(line: 34, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !51)
!51 = !DILocation(line: 35, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !51)
!55 = !DILocation(line: 36, column: 18, scope: !7)
!56 = !DILocation(line: 37, column: 25, scope: !7)
!57 = !DILocation(line: 37, column: 36, scope: !7)
!58 = !DILocation(line: 37, column: 4, scope: !7)
