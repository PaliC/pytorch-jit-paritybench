; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 4608, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 16, !dbg !15
  %19 = srem i32 %18, 72, !dbg !16
  %20 = mul i32 %18, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %.frozen6 = freeze i32 %16, !dbg !18
  %21 = sdiv i32 %.frozen6, 1152, !dbg !18
  %22 = sext i32 %19 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %17) #3, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %17) #3, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %17) #3, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %17) #3, !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #3, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #3, !dbg !26
  %37 = icmp slt i32 %19, 68, !dbg !27
  %38 = mul i32 %21, 1152, !dbg !28
  %srem.decomposed = sub i32 %.frozen6, %38, !dbg !28
  %39 = mul nsw i32 %21, 1088, !dbg !29
  %40 = add nsw i32 %39, %srem.decomposed, !dbg !30
  %41 = sext i32 %40 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = and i1 %17, %37, !dbg !32
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #3, !dbg !33
  %45 = icmp sgt i32 %19, 67, !dbg !34
  %46 = add nsw i32 %19, -68, !dbg !35
  %47 = shl nsw i32 %46, 4, !dbg !36
  %48 = shl nsw i32 %21, 6, !dbg !37
  %49 = add nsw i32 %48, %.decomposed, !dbg !38
  %50 = add nsw i32 %49, %47, !dbg !39
  %51 = sext i32 %50 to i64, !dbg !40
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !40
  %53 = and i1 %17, %45, !dbg !41
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !42
  %55 = sext i32 %46 to i64, !dbg !43
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !43
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %53, i32 0, i1 %53) #3, !dbg !44
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %53, i32 0, i1 %53) #3, !dbg !44
  %59 = fadd float %28, 0x3EE4F8B580000000, !dbg !45
  %60 = fadd float %30, 0x3EE4F8B580000000, !dbg !45
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %61, 0, !dbg !46
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %62, 0, !dbg !46
  br i1 %.not.i, label %68, label %63, !dbg !46

63:                                               ; preds = %10
  br i1 %.not1.i, label %66, label %64, !dbg !46

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

68:                                               ; preds = %10
  br i1 %.not1.i, label %71, label %69, !dbg !46

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !46
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %73, 0, !dbg !46
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %74, 0, !dbg !46
  br i1 %.not.i1, label %80, label %75, !dbg !46

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %78, label %76, !dbg !46

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %83, label %81, !dbg !46

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %76, %78, %81, %83
  %.0.i3 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !46
  %85 = extractvalue { i32, i32 } %44, 1, !dbg !33
  %86 = bitcast i32 %85 to float, !dbg !33
  %87 = extractvalue { i32, i32 } %54, 1, !dbg !42
  %88 = bitcast i32 %87 to float, !dbg !42
  %89 = bitcast i32 %58 to float, !dbg !44
  %90 = fadd float %88, %89, !dbg !47
  %91 = select i1 %37, float %86, float %90, !dbg !48
  %92 = bitcast i32 %25 to float, !dbg !20
  %93 = fsub float %91, %92, !dbg !49
  %94 = extractvalue { i32, i32 } %44, 0, !dbg !33
  %95 = bitcast i32 %94 to float, !dbg !33
  %96 = extractvalue { i32, i32 } %54, 0, !dbg !42
  %97 = bitcast i32 %96 to float, !dbg !42
  %98 = bitcast i32 %57 to float, !dbg !44
  %99 = fadd float %97, %98, !dbg !47
  %100 = select i1 %37, float %95, float %99, !dbg !48
  %101 = bitcast i32 %24 to float, !dbg !20
  %102 = fsub float %100, %101, !dbg !49
  %103 = bitcast i32 %36 to float, !dbg !26
  %104 = bitcast i32 %35 to float, !dbg !26
  %105 = bitcast i32 %33 to float, !dbg !24
  %106 = bitcast i32 %32 to float, !dbg !24
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !50
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !50
  %109 = fmul float %102, %107, !dbg !51
  %110 = fmul float %93, %108, !dbg !51
  %111 = fmul float %109, %106, !dbg !52
  %112 = fmul float %110, %105, !dbg !52
  %113 = fadd float %111, %104, !dbg !53
  %114 = fadd float %112, %103, !dbg !53
  %115 = fcmp olt float %113, 0.000000e+00, !dbg !54
  %116 = fcmp olt float %114, 0.000000e+00, !dbg !54
  %117 = select i1 %115, float 0.000000e+00, float %113, !dbg !58
  %118 = select i1 %116, float 0.000000e+00, float %114, !dbg !58
  %119 = sext i32 %16 to i64, !dbg !59
  %120 = getelementptr float, ptr addrspace(1) %7, i64 %119, !dbg !59
  %121 = bitcast float %100 to i32, !dbg !60
  %122 = bitcast float %91 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %120, i1 %17) #3, !dbg !60
  %123 = getelementptr float, ptr addrspace(1) %8, i64 %119, !dbg !61
  %124 = bitcast float %117 to i32, !dbg !62
  %125 = bitcast float %118 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %125, ptr addrspace(1) %123, i1 %17) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccrhmtzubvygeyed6drfurh4bnqol4ynlhlz3fn5xwyn26majgmy.py", directory: "inductor_cache/cr")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 50, scope: !7)
!30 = !DILocation(line: 37, column: 45, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 62, scope: !7)
!33 = !DILocation(line: 37, column: 55, scope: !7)
!34 = !DILocation(line: 38, column: 19, scope: !7)
!35 = !DILocation(line: 41, column: 47, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 41, column: 56, scope: !7)
!38 = !DILocation(line: 41, column: 35, scope: !7)
!39 = !DILocation(line: 41, column: 53, scope: !7)
!40 = !DILocation(line: 41, column: 30, scope: !7)
!41 = !DILocation(line: 41, column: 68, scope: !7)
!42 = !DILocation(line: 41, column: 61, scope: !7)
!43 = !DILocation(line: 42, column: 31, scope: !7)
!44 = !DILocation(line: 42, column: 44, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 27, scope: !7)
!47 = !DILocation(line: 43, column: 19, scope: !7)
!48 = !DILocation(line: 46, column: 33, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 55, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 59, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 60, column: 25, scope: !7)
!60 = !DILocation(line: 60, column: 37, scope: !7)
!61 = !DILocation(line: 61, column: 25, scope: !7)
!62 = !DILocation(line: 61, column: 37, scope: !7)
!63 = !DILocation(line: 61, column: 4, scope: !7)
