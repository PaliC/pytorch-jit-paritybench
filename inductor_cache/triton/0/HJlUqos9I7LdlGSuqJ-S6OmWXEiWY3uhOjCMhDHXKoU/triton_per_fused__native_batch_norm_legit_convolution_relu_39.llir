; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_relu_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %12, 64, !dbg !12
  %14 = and i32 %10, 127, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %13, !dbg !13
  %17 = shl i32 %10, 2, !dbg !14
  %18 = and i32 %17, 12, !dbg !14
  %19 = srem i32 %15, 1024, !dbg !15
  %20 = srem i32 %16, 1024, !dbg !15
  %21 = shl i32 %15, 4, !dbg !16
  %22 = shl i32 %16, 4, !dbg !16
  %23 = or disjoint i32 %21, %18, !dbg !17
  %24 = or disjoint i32 %22, %18, !dbg !17
  %25 = sext i32 %23 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = sext i32 %24 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %39 = sext i32 %19 to i64, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !20
  %41 = sext i32 %20 to i64, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !20
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !21
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !21
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !22
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !22
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !22
  %54 = insertelement <8 x i32> poison, i32 %38, i64 0, !dbg !19
  %55 = insertelement <8 x i32> %54, i32 %37, i64 1, !dbg !19
  %56 = insertelement <8 x i32> %55, i32 %36, i64 2, !dbg !19
  %57 = insertelement <8 x i32> %56, i32 %35, i64 3, !dbg !19
  %58 = insertelement <8 x i32> %57, i32 %33, i64 4, !dbg !19
  %59 = insertelement <8 x i32> %58, i32 %32, i64 5, !dbg !19
  %60 = insertelement <8 x i32> %59, i32 %31, i64 6, !dbg !19
  %61 = insertelement <8 x i32> %60, i32 %30, i64 7, !dbg !19
  %62 = bitcast <8 x i32> %61 to <8 x float>, !dbg !19
  %63 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !21
  %64 = insertelement <2 x i32> %63, i32 %46, i64 1, !dbg !21
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !21
  %66 = shufflevector <2 x float> %65, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !21
  %67 = fadd <8 x float> %66, %62, !dbg !23
  %68 = extractelement <8 x float> %67, i64 6, !dbg !24
  %69 = extractelement <8 x float> %67, i64 7, !dbg !24
  %70 = fadd float %69, %68, !dbg !24
  %71 = extractelement <8 x float> %67, i64 5, !dbg !24
  %72 = fadd float %71, %70, !dbg !24
  %73 = extractelement <8 x float> %67, i64 4, !dbg !24
  %74 = fadd float %73, %72, !dbg !24
  %75 = extractelement <8 x float> %67, i64 2, !dbg !24
  %76 = extractelement <8 x float> %67, i64 3, !dbg !24
  %77 = fadd float %76, %75, !dbg !24
  %78 = extractelement <8 x float> %67, i64 1, !dbg !24
  %79 = fadd float %78, %77, !dbg !24
  %80 = extractelement <8 x float> %67, i64 0, !dbg !24
  %81 = fadd float %80, %79, !dbg !24
  %82 = bitcast float %74 to i32, !dbg !29
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !29
  %84 = bitcast i32 %83 to float, !dbg !29
  %85 = fadd float %74, %84, !dbg !24
  %86 = bitcast float %85 to i32, !dbg !29
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = fadd float %85, %88, !dbg !24
  %90 = bitcast float %81 to i32, !dbg !29
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !29
  %92 = bitcast i32 %91 to float, !dbg !29
  %93 = fadd float %81, %92, !dbg !24
  %94 = bitcast float %93 to i32, !dbg !29
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !29
  %96 = bitcast i32 %95 to float, !dbg !29
  %97 = fadd float %93, %96, !dbg !24
  %98 = bitcast float %89 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %98, i1 true) #5, !dbg !22
  %99 = bitcast float %97 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %99, i1 true) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %100 = load float, ptr addrspace(3) %53, align 4, !dbg !22
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 1.600000e+01) #5, !dbg !22
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 1.600000e+01) #5, !dbg !22
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 1.600000e+01) #5, !dbg !22
  %104 = insertelement <8 x float> poison, float %103, i64 0, !dbg !30
  %105 = insertelement <8 x float> %104, float %102, i64 1, !dbg !30
  %106 = shufflevector <8 x float> %105, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !30
  %107 = fsub <8 x float> %67, %106, !dbg !30
  %108 = fmul <8 x float> %107, %107, !dbg !31
  %109 = fmul <8 x float> %107, %107, !dbg !31
  %110 = fmul <8 x float> %107, %107, !dbg !31
  %111 = fmul <8 x float> %107, %107, !dbg !31
  %112 = fmul <8 x float> %107, %107, !dbg !31
  %113 = fmul <8 x float> %107, %107, !dbg !31
  %114 = fmul <8 x float> %107, %107, !dbg !31
  %115 = fmul <8 x float> %107, %107, !dbg !31
  %shift = shufflevector <8 x float> %108, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison>, !dbg !32
  %116 = fadd <8 x float> %shift, %109, !dbg !32
  %shift27 = shufflevector <8 x float> %116, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison>, !dbg !32
  %117 = fadd <8 x float> %110, %shift27, !dbg !32
  %shift28 = shufflevector <8 x float> %117, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !32
  %118 = fadd <8 x float> %111, %shift28, !dbg !32
  %119 = extractelement <8 x float> %118, i64 4, !dbg !32
  %shift29 = shufflevector <8 x float> %112, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %120 = fadd <8 x float> %shift29, %113, !dbg !32
  %shift30 = shufflevector <8 x float> %120, <8 x float> poison, <8 x i32> <i32 poison, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %121 = fadd <8 x float> %114, %shift30, !dbg !32
  %shift31 = shufflevector <8 x float> %121, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !32
  %122 = fadd <8 x float> %115, %shift31, !dbg !32
  %123 = extractelement <8 x float> %122, i64 0, !dbg !32
  %124 = bitcast float %119 to i32, !dbg !34
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 2, i32 31), !dbg !34
  %126 = bitcast i32 %125 to float, !dbg !34
  %127 = fadd float %119, %126, !dbg !32
  %128 = bitcast float %127 to i32, !dbg !34
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !34
  %130 = bitcast i32 %129 to float, !dbg !34
  %131 = fadd float %127, %130, !dbg !32
  %132 = bitcast float %123 to i32, !dbg !34
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 2, i32 31), !dbg !34
  %134 = bitcast i32 %133 to float, !dbg !34
  %135 = fadd float %123, %134, !dbg !32
  %136 = bitcast float %135 to i32, !dbg !34
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !34
  %138 = bitcast i32 %137 to float, !dbg !34
  %139 = fadd float %135, %138, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %140 = bitcast float %131 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %140, i1 true) #5, !dbg !35
  %141 = bitcast float %139 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %141, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %142 = load float, ptr addrspace(3) %53, align 4, !dbg !35
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 1.600000e+01) #5, !dbg !36
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 1.600000e+01) #5, !dbg !36
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 1.600000e+01) #5, !dbg !36
  %146 = fadd float %143, 0x3EE4F8B580000000, !dbg !37
  %147 = fadd float %144, 0x3EE4F8B580000000, !dbg !37
  %148 = fadd float %145, 0x3EE4F8B580000000, !dbg !37
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %149, 0, !dbg !35
  br i1 %.not.i, label %152, label %150, !dbg !35

150:                                              ; preds = %7
  %151 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %146), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

152:                                              ; preds = %7
  %153 = tail call float @llvm.nvvm.rsqrt.approx.f(float %146), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %150, %152
  %.0.i = phi float [ %151, %150 ], [ %153, %152 ], !dbg !35
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i12 = icmp eq i32 %157, 0, !dbg !35
  br i1 %.not.i12, label %160, label %158, !dbg !35

158:                                              ; preds = %__nv_rsqrtf.exit
  %159 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !35
  br label %__nv_rsqrtf.exit14, !dbg !35

160:                                              ; preds = %__nv_rsqrtf.exit
  %161 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !35
  br label %__nv_rsqrtf.exit14, !dbg !35

__nv_rsqrtf.exit14:                               ; preds = %158, %160
  %.0.i13 = phi float [ %159, %158 ], [ %161, %160 ], !dbg !35
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i24 = icmp eq i32 %165, 0, !dbg !35
  br i1 %.not.i24, label %168, label %166, !dbg !35

166:                                              ; preds = %__nv_rsqrtf.exit14
  %167 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %148), !dbg !35
  br label %__nv_rsqrtf.exit26, !dbg !35

168:                                              ; preds = %__nv_rsqrtf.exit14
  %169 = tail call float @llvm.nvvm.rsqrt.approx.f(float %148), !dbg !35
  br label %__nv_rsqrtf.exit26, !dbg !35

__nv_rsqrtf.exit26:                               ; preds = %166, %168
  %.0.i25 = phi float [ %167, %166 ], [ %169, %168 ], !dbg !35
  %170 = or disjoint i32 %9, %14, !dbg !13
  %171 = insertelement <8 x float> poison, float %.0.i25, i64 0, !dbg !38
  %172 = insertelement <8 x float> %171, float %.0.i13, i64 1, !dbg !38
  %173 = shufflevector <8 x float> %172, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !38
  %174 = fmul <8 x float> %107, %173, !dbg !38
  %175 = fcmp olt <8 x float> %174, zeroinitializer, !dbg !39
  %176 = extractelement <8 x i1> %175, i64 7, !dbg !43
  %177 = extractelement <8 x i1> %175, i64 6, !dbg !43
  %178 = extractelement <8 x i1> %175, i64 5, !dbg !43
  %179 = extractelement <8 x i1> %175, i64 4, !dbg !43
  %180 = extractelement <8 x i1> %175, i64 3, !dbg !43
  %181 = extractelement <8 x i1> %175, i64 2, !dbg !43
  %182 = extractelement <8 x i1> %175, i64 1, !dbg !43
  %183 = extractelement <8 x i1> %175, i64 0, !dbg !43
  %184 = bitcast float %69 to i32, !dbg !44
  %185 = bitcast float %68 to i32, !dbg !44
  %186 = bitcast float %71 to i32, !dbg !44
  %187 = bitcast float %73 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %184, i32 %185, i32 %186, i32 %187, ptr addrspace(1) %26, i1 true) #5, !dbg !44
  %188 = bitcast float %76 to i32, !dbg !44
  %189 = bitcast float %75 to i32, !dbg !44
  %190 = bitcast float %78 to i32, !dbg !44
  %191 = bitcast float %80 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %189, i32 %190, i32 %191, ptr addrspace(1) %28, i1 true) #5, !dbg !44
  %192 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !45
  %193 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !45
  %bc = bitcast <8 x float> %174 to <8 x i32>, !dbg !46
  %194 = extractelement <8 x i32> %bc, i64 7, !dbg !46
  %195 = select i1 %176, i32 0, i32 %194, !dbg !43
  %bc32 = bitcast <8 x float> %174 to <8 x i32>, !dbg !46
  %196 = extractelement <8 x i32> %bc32, i64 6, !dbg !46
  %197 = select i1 %177, i32 0, i32 %196, !dbg !43
  %bc33 = bitcast <8 x float> %174 to <8 x i32>, !dbg !46
  %198 = extractelement <8 x i32> %bc33, i64 5, !dbg !46
  %199 = select i1 %178, i32 0, i32 %198, !dbg !43
  %bc34 = bitcast <8 x float> %174 to <8 x i32>, !dbg !46
  %200 = extractelement <8 x i32> %bc34, i64 4, !dbg !46
  %201 = select i1 %179, i32 0, i32 %200, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %195, i32 %197, i32 %199, i32 %201, ptr addrspace(1) %192, i1 true) #5, !dbg !46
  %bc35 = bitcast <8 x float> %174 to <8 x i32>, !dbg !46
  %202 = extractelement <8 x i32> %bc35, i64 3, !dbg !46
  %203 = select i1 %180, i32 0, i32 %202, !dbg !43
  %bc36 = bitcast <8 x float> %174 to <8 x i32>, !dbg !46
  %204 = extractelement <8 x i32> %bc36, i64 2, !dbg !46
  %205 = select i1 %181, i32 0, i32 %204, !dbg !43
  %bc37 = bitcast <8 x float> %174 to <8 x i32>, !dbg !46
  %206 = extractelement <8 x i32> %bc37, i64 1, !dbg !46
  %207 = select i1 %182, i32 0, i32 %206, !dbg !43
  %bc38 = bitcast <8 x float> %174 to <8 x i32>, !dbg !46
  %208 = extractelement <8 x i32> %bc38, i64 0, !dbg !46
  %209 = select i1 %183, i32 0, i32 %208, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %203, i32 %205, i32 %207, i32 %209, ptr addrspace(1) %193, i1 true) #5, !dbg !46
  %210 = sext i32 %170 to i64, !dbg !47
  %211 = getelementptr float, ptr addrspace(1) %4, i64 %210, !dbg !47
  %212 = and i32 %10, 128, !dbg !48
  %213 = icmp eq i32 %212, 0, !dbg !48
  %214 = bitcast float %.0.i to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %211, i1 %213) #5, !dbg !48
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %210, !dbg !49
  %216 = bitcast float %101 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %215, i1 %213) #5, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccw3zf5lbhgkaokn3uv3lmiuqzeqatlk6jyrhwzlpqjrg4izaagy.py", directory: "inductor_cache/cw")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_relu_39, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_relu_39, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_relu_39", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_relu_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 42, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 47, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 40, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 37, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 41, column: 19, scope: !7)
!31 = !DILocation(line: 42, column: 20, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !33)
!33 = !DILocation(line: 44, column: 26, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !33)
!35 = !DILocation(line: 50, column: 28, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 53, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 54, column: 47, scope: !7)
!45 = !DILocation(line: 55, column: 25, scope: !7)
!46 = !DILocation(line: 55, column: 45, scope: !7)
!47 = !DILocation(line: 56, column: 25, scope: !7)
!48 = !DILocation(line: 56, column: 37, scope: !7)
!49 = !DILocation(line: 57, column: 25, scope: !7)
!50 = !DILocation(line: 57, column: 37, scope: !7)
!51 = !DILocation(line: 57, column: 4, scope: !7)
