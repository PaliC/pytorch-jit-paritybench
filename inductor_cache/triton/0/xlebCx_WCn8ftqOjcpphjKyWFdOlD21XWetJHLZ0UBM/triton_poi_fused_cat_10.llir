; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 64, !dbg !14
  %15 = srem i32 %14, 128, !dbg !15
  %16 = mul i32 %14, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %.frozen1 = freeze i32 %13, !dbg !17
  %17 = sdiv i32 %.frozen1, 8192, !dbg !17
  %18 = icmp slt i32 %15, 28, !dbg !18
  %19 = mul i32 %17, 8192, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %19, !dbg !19
  %20 = mul nsw i32 %17, 1792, !dbg !20
  %21 = add nsw i32 %20, %srem.decomposed, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #1, !dbg !23
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !23
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !23
  %27 = add nsw i32 %15, -28, !dbg !24
  %28 = icmp ult i32 %27, 25, !dbg !24
  %29 = shl nsw i32 %15, 6, !dbg !25
  %30 = mul nsw i32 %17, 1600, !dbg !26
  %31 = add nsw i32 %30, %.decomposed, !dbg !25
  %32 = add nsw i32 %31, -1792, !dbg !27
  %33 = add nsw i32 %32, %29, !dbg !28
  %34 = sext i32 %33 to i64, !dbg !29
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !29
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !30
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !30
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !30
  %39 = add nsw i32 %15, -53, !dbg !31
  %40 = icmp ult i32 %39, 25, !dbg !31
  %41 = add nsw i32 %31, -3392, !dbg !32
  %42 = add nsw i32 %41, %29, !dbg !33
  %43 = sext i32 %42 to i64, !dbg !34
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !34
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #1, !dbg !35
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !35
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !35
  %48 = bitcast i32 %46 to float, !dbg !35
  %49 = bitcast i32 %47 to float, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !36
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #1, !dbg !37
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !37
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !37
  %54 = bitcast i32 %52 to float, !dbg !37
  %55 = bitcast i32 %53 to float, !dbg !37
  %56 = fadd float %48, %54, !dbg !38
  %57 = fadd float %49, %55, !dbg !38
  %58 = add nsw i32 %15, -78, !dbg !39
  %59 = icmp ult i32 %58, 25, !dbg !39
  %60 = add nsw i32 %31, -4992, !dbg !40
  %61 = add nsw i32 %60, %29, !dbg !41
  %62 = sext i32 %61 to i64, !dbg !42
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !42
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !43
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !43
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !43
  %67 = bitcast i32 %65 to float, !dbg !43
  %68 = bitcast i32 %66 to float, !dbg !43
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !44
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !45
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !45
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !45
  %73 = bitcast i32 %71 to float, !dbg !45
  %74 = bitcast i32 %72 to float, !dbg !45
  %75 = fadd float %67, %73, !dbg !46
  %76 = fadd float %68, %74, !dbg !46
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !47
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !48
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !48
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !48
  %81 = bitcast i32 %79 to float, !dbg !48
  %82 = bitcast i32 %80 to float, !dbg !48
  %83 = fadd float %75, %81, !dbg !49
  %84 = fadd float %76, %82, !dbg !49
  %85 = icmp sgt i32 %15, 102, !dbg !50
  %86 = add nsw i32 %31, -6592, !dbg !51
  %87 = add nsw i32 %86, %29, !dbg !52
  %88 = sext i32 %87 to i64, !dbg !53
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !53
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #1, !dbg !54
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !54
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !54
  %93 = bitcast i32 %91 to float, !dbg !54
  %94 = bitcast i32 %92 to float, !dbg !54
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !55
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %95, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #1, !dbg !56
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !56
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !56
  %99 = bitcast i32 %97 to float, !dbg !56
  %100 = bitcast i32 %98 to float, !dbg !56
  %101 = fadd float %93, %99, !dbg !57
  %102 = fadd float %94, %100, !dbg !57
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %88, !dbg !58
  %104 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %103, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #1, !dbg !59
  %105 = extractvalue { i32, i32 } %104, 0, !dbg !59
  %106 = extractvalue { i32, i32 } %104, 1, !dbg !59
  %107 = bitcast i32 %105 to float, !dbg !59
  %108 = bitcast i32 %106 to float, !dbg !59
  %109 = fadd float %101, %107, !dbg !60
  %110 = fadd float %102, %108, !dbg !60
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %88, !dbg !61
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %111, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #1, !dbg !62
  %113 = extractvalue { i32, i32 } %112, 0, !dbg !62
  %114 = extractvalue { i32, i32 } %112, 1, !dbg !62
  %115 = bitcast i32 %113 to float, !dbg !62
  %116 = bitcast i32 %114 to float, !dbg !62
  %117 = fadd float %109, %115, !dbg !63
  %118 = fadd float %110, %116, !dbg !63
  %119 = select i1 %85, float %117, float 0.000000e+00, !dbg !64
  %120 = select i1 %85, float %118, float 0.000000e+00, !dbg !64
  %121 = select i1 %59, float %83, float %119, !dbg !65
  %122 = select i1 %59, float %84, float %120, !dbg !65
  %123 = select i1 %40, float %56, float %121, !dbg !65
  %124 = select i1 %40, float %57, float %122, !dbg !65
  %125 = sext i32 %13 to i64, !dbg !66
  %126 = getelementptr float, ptr addrspace(1) %5, i64 %125, !dbg !66
  %127 = bitcast float %123 to i32, !dbg !67
  %128 = select i1 %28, i32 %37, i32 %127, !dbg !68
  %129 = select i1 %18, i32 %25, i32 %128, !dbg !69
  %130 = bitcast float %124 to i32, !dbg !67
  %131 = select i1 %28, i32 %38, i32 %130, !dbg !68
  %132 = select i1 %18, i32 %26, i32 %131, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %129, i32 %132, ptr addrspace(1) %126, i1 true) #1, !dbg !67
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3to7ypq6f5zx7fyroedlwwjjcckf7ple7hwic6bbzeoxlyatmes.py", directory: "inductor_cache/3t")
!4 = !{ptr @triton_poi_fused_cat_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_10", linkageName: "triton_poi_fused_cat_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 50, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 55, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 40, scope: !7)
!26 = !DILocation(line: 38, column: 59, scope: !7)
!27 = !DILocation(line: 38, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 54, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 64, scope: !7)
!31 = !DILocation(line: 42, column: 20, scope: !7)
!32 = !DILocation(line: 43, column: 36, scope: !7)
!33 = !DILocation(line: 43, column: 54, scope: !7)
!34 = !DILocation(line: 43, column: 31, scope: !7)
!35 = !DILocation(line: 43, column: 64, scope: !7)
!36 = !DILocation(line: 44, column: 31, scope: !7)
!37 = !DILocation(line: 44, column: 64, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 36, scope: !7)
!41 = !DILocation(line: 52, column: 54, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 64, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 64, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 31, scope: !7)
!48 = !DILocation(line: 55, column: 64, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 62, column: 36, scope: !7)
!52 = !DILocation(line: 62, column: 55, scope: !7)
!53 = !DILocation(line: 62, column: 31, scope: !7)
!54 = !DILocation(line: 62, column: 65, scope: !7)
!55 = !DILocation(line: 63, column: 31, scope: !7)
!56 = !DILocation(line: 63, column: 65, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 31, scope: !7)
!59 = !DILocation(line: 65, column: 65, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 31, scope: !7)
!62 = !DILocation(line: 67, column: 65, scope: !7)
!63 = !DILocation(line: 68, column: 20, scope: !7)
!64 = !DILocation(line: 70, column: 35, scope: !7)
!65 = !DILocation(line: 0, scope: !7)
!66 = !DILocation(line: 75, column: 25, scope: !7)
!67 = !DILocation(line: 75, column: 37, scope: !7)
!68 = !DILocation(line: 73, column: 34, scope: !7)
!69 = !DILocation(line: 74, column: 33, scope: !7)
!70 = !DILocation(line: 75, column: 4, scope: !7)
