; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 24, !dbg !12
  %12 = lshr i32 %9, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %8, %13, !dbg !13
  %18 = or disjoint i32 %8, %14, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = shl i32 %19, 5, !dbg !15
  %21 = lshr i32 %9, 2, !dbg !16
  %22 = and i32 %21, 31, !dbg !16
  %23 = shl i32 %9, 2, !dbg !16
  %24 = and i32 %23, 28, !dbg !16
  %25 = or disjoint i32 %20, %22, !dbg !17
  %26 = or disjoint i32 %20, %24, !dbg !17
  %27 = icmp slt i32 %25, 256, !dbg !18
  %28 = icmp slt i32 %26, 256, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %29 = sdiv i32 %.frozen, 256, !dbg !19
  %30 = mul i32 %29, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = srem i32 %16, 256, !dbg !20
  %32 = shl i32 %25, 8, !dbg !21
  %33 = shl i32 %29, 16, !dbg !22
  %34 = add i32 %33, %32, !dbg !23
  %35 = add i32 %34, %.decomposed, !dbg !24
  %36 = add i32 %34, %31, !dbg !24
  %37 = sext i32 %35 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %27) #2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %27) #2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %51 = sext i32 %.decomposed to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !27
  %53 = sext i32 %31 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = shl i32 %17, 8, !dbg !29
  %66 = shl i32 %18, 8, !dbg !29
  %67 = add i32 %26, %65, !dbg !30
  %68 = add i32 %26, %66, !dbg !30
  %69 = sext i32 %67 to i64, !dbg !31
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !31
  %71 = sext i32 %68 to i64, !dbg !31
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !31
  %73 = shl i32 %9, 8, !dbg !32
  %74 = and i32 %73, 768, !dbg !32
  %75 = or disjoint i32 %74, %22, !dbg !32
  %76 = and i32 %23, 508, !dbg !32
  %77 = lshr exact i32 %74, 3, !dbg !32
  %78 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %77, !dbg !32
  %79 = getelementptr float, ptr addrspace(3) %78, i32 %75, !dbg !32
  %80 = or disjoint i32 %75, 32, !dbg !32
  %81 = lshr i32 %80, 5, !dbg !32
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !32
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %80, !dbg !32
  %84 = or disjoint i32 %75, 64, !dbg !32
  %85 = lshr i32 %84, 5, !dbg !32
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !32
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %84, !dbg !32
  %88 = or disjoint i32 %75, 96, !dbg !32
  %89 = lshr i32 %88, 5, !dbg !32
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !32
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %88, !dbg !32
  %92 = or disjoint i32 %75, 128, !dbg !32
  %93 = lshr i32 %92, 5, !dbg !32
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !32
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %92, !dbg !32
  %96 = or disjoint i32 %75, 160, !dbg !32
  %97 = lshr i32 %96, 5, !dbg !32
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !32
  %99 = getelementptr float, ptr addrspace(3) %98, i32 %96, !dbg !32
  %100 = or disjoint i32 %75, 192, !dbg !32
  %101 = lshr i32 %100, 5, !dbg !32
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !32
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !32
  %104 = or disjoint i32 %75, 224, !dbg !32
  %105 = lshr i32 %104, 5, !dbg !32
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !32
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104, !dbg !32
  %108 = lshr i32 %76, 5, !dbg !32
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %108, !dbg !32
  %110 = getelementptr inbounds float, ptr addrspace(3) %109, i32 %76, !dbg !32
  %111 = or disjoint i32 %76, 1, !dbg !32
  %112 = getelementptr inbounds float, ptr addrspace(3) %109, i32 %111, !dbg !32
  %113 = or disjoint i32 %76, 2, !dbg !32
  %114 = getelementptr inbounds float, ptr addrspace(3) %109, i32 %113, !dbg !32
  %115 = or disjoint i32 %76, 3, !dbg !32
  %116 = getelementptr inbounds float, ptr addrspace(3) %109, i32 %115, !dbg !32
  %117 = or disjoint i32 %76, 512, !dbg !32
  %118 = lshr i32 %117, 5, !dbg !32
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %118, !dbg !32
  %120 = getelementptr inbounds float, ptr addrspace(3) %119, i32 %117, !dbg !32
  %121 = or disjoint i32 %76, 513, !dbg !32
  %122 = lshr i32 %121, 5, !dbg !32
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !32
  %124 = getelementptr inbounds float, ptr addrspace(3) %123, i32 %121, !dbg !32
  %125 = or disjoint i32 %76, 514, !dbg !32
  %126 = lshr i32 %125, 5, !dbg !32
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %126, !dbg !32
  %128 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %125, !dbg !32
  %129 = or disjoint i32 %76, 515, !dbg !32
  %130 = lshr i32 %129, 5, !dbg !32
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %130, !dbg !32
  %132 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %129, !dbg !32
  %133 = getelementptr i1, ptr addrspace(1) %3, i64 %37, !dbg !33
  %134 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !26
  %135 = insertelement <4 x i32> %134, i32 %43, i64 1, !dbg !26
  %136 = insertelement <4 x i32> %135, i32 %44, i64 2, !dbg !26
  %137 = insertelement <4 x i32> %136, i32 %45, i64 3, !dbg !26
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !26
  %139 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !28
  %140 = insertelement <4 x i32> %139, i32 %57, i64 1, !dbg !28
  %141 = insertelement <4 x i32> %140, i32 %58, i64 2, !dbg !28
  %142 = insertelement <4 x i32> %141, i32 %59, i64 3, !dbg !28
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !28
  %144 = fadd <4 x float> %138, %143, !dbg !34
  %145 = fcmp olt <4 x float> %144, zeroinitializer, !dbg !35
  %146 = select <4 x i1> %145, <4 x float> zeroinitializer, <4 x float> %144, !dbg !39
  %147 = fcmp ole <4 x float> %146, zeroinitializer, !dbg !40
  %148 = extractelement <4 x float> %146, i64 0, !dbg !32
  %149 = bitcast float %148 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %149, i1 true) #2, !dbg !32
  %150 = extractelement <4 x float> %146, i64 1, !dbg !32
  %151 = bitcast float %150 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %151, i1 true) #2, !dbg !32
  %152 = extractelement <4 x float> %146, i64 2, !dbg !32
  %153 = bitcast float %152 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %153, i1 true) #2, !dbg !32
  %154 = extractelement <4 x float> %146, i64 3, !dbg !32
  %155 = bitcast float %154 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %155, i1 true) #2, !dbg !32
  %156 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !26
  %157 = insertelement <4 x i32> %156, i32 %48, i64 1, !dbg !26
  %158 = insertelement <4 x i32> %157, i32 %49, i64 2, !dbg !26
  %159 = insertelement <4 x i32> %158, i32 %50, i64 3, !dbg !26
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !26
  %161 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !28
  %162 = insertelement <4 x i32> %161, i32 %62, i64 1, !dbg !28
  %163 = insertelement <4 x i32> %162, i32 %63, i64 2, !dbg !28
  %164 = insertelement <4 x i32> %163, i32 %64, i64 3, !dbg !28
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !28
  %166 = fadd <4 x float> %160, %165, !dbg !34
  %167 = fcmp olt <4 x float> %166, zeroinitializer, !dbg !35
  %168 = select <4 x i1> %167, <4 x float> zeroinitializer, <4 x float> %166, !dbg !39
  %169 = fcmp ole <4 x float> %168, zeroinitializer, !dbg !40
  %170 = extractelement <4 x float> %168, i64 0, !dbg !32
  %171 = bitcast float %170 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %171, i1 true) #2, !dbg !32
  %172 = extractelement <4 x float> %168, i64 1, !dbg !32
  %173 = bitcast float %172 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %173, i1 true) #2, !dbg !32
  %174 = extractelement <4 x float> %168, i64 2, !dbg !32
  %175 = bitcast float %174 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %175, i1 true) #2, !dbg !32
  %176 = extractelement <4 x float> %168, i64 3, !dbg !32
  %177 = bitcast float %176 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %177, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %178 = load i32, ptr addrspace(3) %110, align 4, !dbg !32
  %179 = load i32, ptr addrspace(3) %112, align 4, !dbg !32
  %180 = load i32, ptr addrspace(3) %114, align 4, !dbg !32
  %181 = load i32, ptr addrspace(3) %116, align 4, !dbg !32
  %182 = load i32, ptr addrspace(3) %120, align 4, !dbg !32
  %183 = load i32, ptr addrspace(3) %124, align 4, !dbg !32
  %184 = load i32, ptr addrspace(3) %128, align 4, !dbg !32
  %185 = load i32, ptr addrspace(3) %132, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %179, i32 %180, i32 %181, ptr addrspace(1) %70, i1 %28) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %182, i32 %183, i32 %184, i32 %185, ptr addrspace(1) %72, i1 %28) #2, !dbg !32
  %186 = zext <4 x i1> %147 to <4 x i8>, !dbg !41
  %187 = bitcast <4 x i8> %186 to i32, !dbg !41
  %188 = zext <4 x i1> %169 to <4 x i8>, !dbg !41
  %189 = bitcast <4 x i8> %188 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %187, i32 %189, ptr addrspace(1) %133, i1 %27) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coe5l3k7y6o4xusfk3vwn4yvyx444tvovt7e7bdekr63y6glyhme.py", directory: "inductor_cache/oe")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_12", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 39, column: 34, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 25, scope: !7)
!32 = !DILocation(line: 39, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 36, column: 40, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 40, column: 56, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
