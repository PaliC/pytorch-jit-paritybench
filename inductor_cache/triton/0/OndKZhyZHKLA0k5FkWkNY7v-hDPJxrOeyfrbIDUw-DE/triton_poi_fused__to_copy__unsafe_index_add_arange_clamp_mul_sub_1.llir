; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = or disjoint i32 %9, 8, !dbg !12
  %11 = shl i32 %7, 2, !dbg !12
  %12 = and i32 %11, 60, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %17 = shl i32 %16, 4, !dbg !15
  %18 = and i32 %7, 15, !dbg !16
  %19 = or disjoint i32 %17, %18, !dbg !17
  %20 = or disjoint i32 %17, %9, !dbg !17
  %21 = or disjoint i32 %17, %10, !dbg !17
  %22 = icmp slt i32 %19, 16, !dbg !18
  %23 = icmp slt i32 %20, 16, !dbg !18
  %24 = icmp slt i32 %21, 16, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %25 = sdiv i32 %.frozen, 4, !dbg !19
  %26 = mul i32 %25, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %.frozen16 = freeze i32 %15, !dbg !21
  %27 = sdiv i32 %.frozen16, 1024, !dbg !21
  %28 = mul i32 %27, 1024, !dbg !22
  %.decomposed17 = sub i32 %.frozen16, %28, !dbg !22
  %29 = sitofp i32 %25 to float, !dbg !23
  %30 = fmul float %29, 2.100000e+01, !dbg !24
  %31 = fcmp ogt float %30, 0.000000e+00, !dbg !25
  %32 = select i1 %31, float %30, float 0.000000e+00, !dbg !29
  %33 = fptosi float %32 to i32, !dbg !30
  %34 = tail call i32 @llvm.smin.i32(i32 %33, i32 62), !dbg !31
  %narrow = add nsw i32 %34, 1, !dbg !31
  %35 = sext i32 %narrow to i64, !dbg !31
  %36 = sitofp i32 %.decomposed to float, !dbg !33
  %37 = fmul float %36, 2.100000e+01, !dbg !34
  %38 = fcmp ogt float %37, 0.000000e+00, !dbg !35
  %39 = select i1 %38, float %37, float 0.000000e+00, !dbg !37
  %40 = fptosi float %39 to i32, !dbg !38
  %41 = shl nsw i64 %35, 6, !dbg !39
  %42 = sext i32 %40 to i64, !dbg !40
  %43 = shl i32 %13, 12, !dbg !41
  %44 = shl i32 %14, 12, !dbg !41
  %45 = or disjoint i32 %43, 65536, !dbg !41
  %46 = or disjoint i32 %43, 98304, !dbg !41
  %47 = or disjoint i32 %43, 131072, !dbg !41
  %48 = or disjoint i32 %43, 163840, !dbg !41
  %49 = or disjoint i32 %43, 196608, !dbg !41
  %50 = or disjoint i32 %43, 229376, !dbg !41
  %51 = sext i32 %43 to i64, !dbg !42
  %52 = sext i32 %44 to i64, !dbg !42
  %53 = sext i32 %45 to i64, !dbg !42
  %54 = sext i32 %46 to i64, !dbg !42
  %55 = sext i32 %47 to i64, !dbg !42
  %56 = sext i32 %48 to i64, !dbg !42
  %57 = sext i32 %49 to i64, !dbg !42
  %58 = sext i32 %50 to i64, !dbg !42
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !43
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %42, !dbg !43
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %51, !dbg !43
  %62 = getelementptr float, ptr addrspace(1) %60, i64 %52, !dbg !43
  %63 = getelementptr float, ptr addrspace(1) %60, i64 %53, !dbg !43
  %64 = getelementptr float, ptr addrspace(1) %60, i64 %54, !dbg !43
  %65 = getelementptr float, ptr addrspace(1) %60, i64 %55, !dbg !43
  %66 = getelementptr float, ptr addrspace(1) %60, i64 %56, !dbg !43
  %67 = getelementptr float, ptr addrspace(1) %60, i64 %57, !dbg !43
  %68 = getelementptr float, ptr addrspace(1) %60, i64 %58, !dbg !43
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %22) #3, !dbg !44
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #3, !dbg !44
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %22) #3, !dbg !44
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %22) #3, !dbg !44
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !44
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %22) #3, !dbg !44
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %22) #3, !dbg !44
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %22) #3, !dbg !44
  %77 = tail call i64 @llvm.smin.i64(i64 %42, i64 62), !dbg !45
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !47
  %79 = getelementptr i8, ptr addrspace(1) %78, i64 4, !dbg !47
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %41, !dbg !47
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %51, !dbg !47
  %82 = getelementptr float, ptr addrspace(1) %80, i64 %52, !dbg !47
  %83 = getelementptr float, ptr addrspace(1) %80, i64 %53, !dbg !47
  %84 = getelementptr float, ptr addrspace(1) %80, i64 %54, !dbg !47
  %85 = getelementptr float, ptr addrspace(1) %80, i64 %55, !dbg !47
  %86 = getelementptr float, ptr addrspace(1) %80, i64 %56, !dbg !47
  %87 = getelementptr float, ptr addrspace(1) %80, i64 %57, !dbg !47
  %88 = getelementptr float, ptr addrspace(1) %80, i64 %58, !dbg !47
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %22) #3, !dbg !48
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %22) #3, !dbg !48
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %22) #3, !dbg !48
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %22) #3, !dbg !48
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %22) #3, !dbg !48
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %22) #3, !dbg !48
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %22) #3, !dbg !48
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %22) #3, !dbg !48
  %97 = sitofp i32 %40 to float, !dbg !49
  %98 = fsub float %39, %97, !dbg !50
  %99 = fcmp ogt float %98, 0.000000e+00, !dbg !51
  %100 = select i1 %99, float %98, float 0.000000e+00, !dbg !53
  %101 = fcmp olt float %100, 1.000000e+00, !dbg !54
  %102 = select i1 %101, float %100, float 1.000000e+00, !dbg !56
  %103 = shl i32 %33, 6, !dbg !57
  %104 = add i32 %103, %40, !dbg !58
  %105 = add i32 %104, %43, !dbg !59
  %106 = add i32 %104, %44, !dbg !59
  %107 = add i32 %104, %45, !dbg !59
  %108 = add i32 %104, %46, !dbg !59
  %109 = add i32 %104, %47, !dbg !59
  %110 = add i32 %104, %48, !dbg !59
  %111 = add i32 %104, %49, !dbg !59
  %112 = add i32 %104, %50, !dbg !59
  %113 = sext i32 %105 to i64, !dbg !60
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !60
  %115 = sext i32 %106 to i64, !dbg !60
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !60
  %117 = sext i32 %107 to i64, !dbg !60
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !60
  %119 = sext i32 %108 to i64, !dbg !60
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !60
  %121 = sext i32 %109 to i64, !dbg !60
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !60
  %123 = sext i32 %110 to i64, !dbg !60
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !60
  %125 = sext i32 %111 to i64, !dbg !60
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !60
  %127 = sext i32 %112 to i64, !dbg !60
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !60
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %22) #3, !dbg !61
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %22) #3, !dbg !61
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %22) #3, !dbg !61
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %22) #3, !dbg !61
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %22) #3, !dbg !61
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %22) #3, !dbg !61
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %22) #3, !dbg !61
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %22) #3, !dbg !61
  %137 = sext i32 %103 to i64, !dbg !62
  %138 = getelementptr float, ptr addrspace(1) %79, i64 %137, !dbg !63
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %51, !dbg !63
  %140 = getelementptr float, ptr addrspace(1) %138, i64 %52, !dbg !63
  %141 = getelementptr float, ptr addrspace(1) %138, i64 %53, !dbg !63
  %142 = getelementptr float, ptr addrspace(1) %138, i64 %54, !dbg !63
  %143 = getelementptr float, ptr addrspace(1) %138, i64 %55, !dbg !63
  %144 = getelementptr float, ptr addrspace(1) %138, i64 %56, !dbg !63
  %145 = getelementptr float, ptr addrspace(1) %138, i64 %57, !dbg !63
  %146 = getelementptr float, ptr addrspace(1) %138, i64 %58, !dbg !63
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %22) #3, !dbg !64
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %22) #3, !dbg !64
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %22) #3, !dbg !64
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %22) #3, !dbg !64
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %22) #3, !dbg !64
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %22) #3, !dbg !64
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %22) #3, !dbg !64
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %22) #3, !dbg !64
  %155 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !44
  %156 = insertelement <2 x i32> %155, i32 %129, i64 1, !dbg !44
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !44
  %158 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !48
  %159 = insertelement <2 x i32> %158, i32 %147, i64 1, !dbg !48
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !48
  %161 = fsub <2 x float> %160, %157, !dbg !65
  %162 = insertelement <2 x float> poison, float %102, i64 0, !dbg !66
  %163 = shufflevector <2 x float> %162, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !66
  %164 = fmul <2 x float> %161, %163, !dbg !66
  %165 = fadd <2 x float> %164, %157, !dbg !67
  %166 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !44
  %167 = insertelement <2 x i32> %166, i32 %130, i64 1, !dbg !44
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !44
  %169 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !48
  %170 = insertelement <2 x i32> %169, i32 %148, i64 1, !dbg !48
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !48
  %172 = fsub <2 x float> %171, %168, !dbg !65
  %173 = fmul <2 x float> %172, %163, !dbg !66
  %174 = fadd <2 x float> %173, %168, !dbg !67
  %175 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !44
  %176 = insertelement <2 x i32> %175, i32 %131, i64 1, !dbg !44
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !44
  %178 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !48
  %179 = insertelement <2 x i32> %178, i32 %149, i64 1, !dbg !48
  %180 = bitcast <2 x i32> %179 to <2 x float>, !dbg !48
  %181 = fsub <2 x float> %180, %177, !dbg !65
  %182 = fmul <2 x float> %181, %163, !dbg !66
  %183 = fadd <2 x float> %182, %177, !dbg !67
  %184 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !44
  %185 = insertelement <2 x i32> %184, i32 %132, i64 1, !dbg !44
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !44
  %187 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !48
  %188 = insertelement <2 x i32> %187, i32 %150, i64 1, !dbg !48
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !48
  %190 = fsub <2 x float> %189, %186, !dbg !65
  %191 = fmul <2 x float> %190, %163, !dbg !66
  %192 = fadd <2 x float> %191, %186, !dbg !67
  %193 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !44
  %194 = insertelement <2 x i32> %193, i32 %133, i64 1, !dbg !44
  %195 = bitcast <2 x i32> %194 to <2 x float>, !dbg !44
  %196 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !48
  %197 = insertelement <2 x i32> %196, i32 %151, i64 1, !dbg !48
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !48
  %199 = fsub <2 x float> %198, %195, !dbg !65
  %200 = fmul <2 x float> %163, %199, !dbg !66
  %201 = fadd <2 x float> %200, %195, !dbg !67
  %202 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !44
  %203 = insertelement <2 x i32> %202, i32 %134, i64 1, !dbg !44
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !44
  %205 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !48
  %206 = insertelement <2 x i32> %205, i32 %152, i64 1, !dbg !48
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !48
  %208 = fsub <2 x float> %207, %204, !dbg !65
  %209 = fmul <2 x float> %163, %208, !dbg !66
  %210 = fadd <2 x float> %209, %204, !dbg !67
  %211 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !44
  %212 = insertelement <2 x i32> %211, i32 %135, i64 1, !dbg !44
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !44
  %214 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !48
  %215 = insertelement <2 x i32> %214, i32 %153, i64 1, !dbg !48
  %216 = bitcast <2 x i32> %215 to <2 x float>, !dbg !48
  %217 = fsub <2 x float> %216, %213, !dbg !65
  %218 = fmul <2 x float> %163, %217, !dbg !66
  %219 = fadd <2 x float> %218, %213, !dbg !67
  %220 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !44
  %221 = insertelement <2 x i32> %220, i32 %136, i64 1, !dbg !44
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !44
  %223 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !48
  %224 = insertelement <2 x i32> %223, i32 %154, i64 1, !dbg !48
  %225 = bitcast <2 x i32> %224 to <2 x float>, !dbg !48
  %226 = fsub <2 x float> %225, %222, !dbg !65
  %227 = fmul <2 x float> %163, %226, !dbg !66
  %228 = fadd <2 x float> %227, %222, !dbg !67
  %229 = extractelement <2 x float> %165, i64 0, !dbg !68
  %230 = extractelement <2 x float> %165, i64 1, !dbg !69
  %231 = fsub float %229, %230, !dbg !68
  %232 = extractelement <2 x float> %174, i64 0, !dbg !68
  %233 = extractelement <2 x float> %174, i64 1, !dbg !69
  %234 = fsub float %232, %233, !dbg !68
  %235 = extractelement <2 x float> %183, i64 0, !dbg !68
  %236 = extractelement <2 x float> %183, i64 1, !dbg !69
  %237 = fsub float %235, %236, !dbg !68
  %238 = extractelement <2 x float> %192, i64 0, !dbg !68
  %239 = extractelement <2 x float> %192, i64 1, !dbg !69
  %240 = fsub float %238, %239, !dbg !68
  %241 = extractelement <2 x float> %201, i64 0, !dbg !68
  %242 = extractelement <2 x float> %201, i64 1, !dbg !69
  %243 = fsub float %241, %242, !dbg !68
  %244 = extractelement <2 x float> %210, i64 0, !dbg !68
  %245 = extractelement <2 x float> %210, i64 1, !dbg !69
  %246 = fsub float %244, %245, !dbg !68
  %247 = extractelement <2 x float> %219, i64 0, !dbg !68
  %248 = extractelement <2 x float> %219, i64 1, !dbg !69
  %249 = fsub float %247, %248, !dbg !68
  %250 = extractelement <2 x float> %228, i64 0, !dbg !68
  %251 = extractelement <2 x float> %228, i64 1, !dbg !69
  %252 = fsub float %250, %251, !dbg !68
  %253 = sitofp i32 %33 to float, !dbg !70
  %254 = fsub float %32, %253, !dbg !71
  %255 = fcmp ogt float %254, 0.000000e+00, !dbg !72
  %256 = select i1 %255, float %254, float 0.000000e+00, !dbg !74
  %257 = fcmp olt float %256, 1.000000e+00, !dbg !75
  %258 = select i1 %257, float %256, float 1.000000e+00, !dbg !77
  %259 = fmul float %258, %231, !dbg !78
  %260 = fmul float %258, %234, !dbg !78
  %261 = fmul float %258, %237, !dbg !78
  %262 = fmul float %258, %240, !dbg !78
  %263 = fmul float %258, %243, !dbg !78
  %264 = fmul float %258, %246, !dbg !78
  %265 = fmul float %258, %249, !dbg !78
  %266 = fmul float %258, %252, !dbg !78
  %267 = fadd float %230, %259, !dbg !69
  %268 = fadd float %233, %260, !dbg !69
  %269 = fadd float %236, %261, !dbg !69
  %270 = fadd float %239, %262, !dbg !69
  %271 = fadd float %242, %263, !dbg !69
  %272 = fadd float %245, %264, !dbg !69
  %273 = fadd float %248, %265, !dbg !69
  %274 = fadd float %251, %266, !dbg !69
  %275 = shl i32 %20, 10, !dbg !79
  %276 = shl i32 %21, 10, !dbg !79
  %277 = shl i32 %27, 14, !dbg !80
  %278 = add i32 %277, %.decomposed17, !dbg !81
  %279 = add i32 %278, %275, !dbg !82
  %280 = add i32 %278, %276, !dbg !82
  %281 = sext i32 %279 to i64, !dbg !83
  %282 = getelementptr float, ptr addrspace(1) %1, i64 %281, !dbg !83
  %283 = sext i32 %280 to i64, !dbg !83
  %284 = getelementptr float, ptr addrspace(1) %1, i64 %283, !dbg !83
  %285 = shl i32 %7, 6, !dbg !84
  %286 = and i32 %285, 960, !dbg !84
  %287 = or disjoint i32 %286, %9, !dbg !84
  %288 = and i32 %11, 508, !dbg !84
  %289 = lshr exact i32 %286, 2, !dbg !84
  %290 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %289, !dbg !84
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %287, !dbg !84
  %292 = bitcast float %267 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #3, !dbg !84
  %293 = or disjoint i32 %287, 8, !dbg !84
  %294 = getelementptr float, ptr addrspace(3) %290, i32 %293, !dbg !84
  %295 = bitcast float %268 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #3, !dbg !84
  %296 = or disjoint i32 %287, 16, !dbg !84
  %297 = getelementptr float, ptr addrspace(3) %290, i32 %296, !dbg !84
  %298 = bitcast float %269 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #3, !dbg !84
  %299 = or disjoint i32 %287, 24, !dbg !84
  %300 = getelementptr float, ptr addrspace(3) %290, i32 %299, !dbg !84
  %301 = bitcast float %270 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #3, !dbg !84
  %302 = or disjoint i32 %287, 32, !dbg !84
  %303 = getelementptr float, ptr addrspace(3) %290, i32 %302, !dbg !84
  %304 = bitcast float %271 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #3, !dbg !84
  %305 = or disjoint i32 %287, 40, !dbg !84
  %306 = getelementptr float, ptr addrspace(3) %290, i32 %305, !dbg !84
  %307 = bitcast float %272 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #3, !dbg !84
  %308 = or disjoint i32 %287, 48, !dbg !84
  %309 = getelementptr float, ptr addrspace(3) %290, i32 %308, !dbg !84
  %310 = bitcast float %273 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #3, !dbg !84
  %311 = or disjoint i32 %287, 56, !dbg !84
  %312 = getelementptr float, ptr addrspace(3) %290, i32 %311, !dbg !84
  %313 = bitcast float %274 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %313, i1 true) #3, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %314 = lshr i32 %11, 4, !dbg !84
  %315 = and i32 %314, 28, !dbg !84
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %315, !dbg !84
  %317 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %288, !dbg !84
  %318 = or disjoint i32 %288, 512, !dbg !84
  %319 = lshr i32 %318, 4, !dbg !84
  %320 = and i32 %319, 60, !dbg !84
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320, !dbg !84
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %318, !dbg !84
  %323 = load <4 x i32>, ptr addrspace(3) %322, align 16, !dbg !84
  %.extract = load i32, ptr addrspace(3) %317, align 16, !dbg !84
  %324 = getelementptr inbounds i8, ptr addrspace(3) %317, i32 4, !dbg !84
  %.extract9 = load i32, ptr addrspace(3) %324, align 4, !dbg !84
  %325 = getelementptr inbounds i8, ptr addrspace(3) %317, i32 8, !dbg !84
  %.extract10 = load i32, ptr addrspace(3) %325, align 8, !dbg !84
  %326 = getelementptr inbounds i8, ptr addrspace(3) %317, i32 12, !dbg !84
  %.extract11 = load i32, ptr addrspace(3) %326, align 4, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %282, i1 %23) #3, !dbg !84
  %.extract12 = extractelement <4 x i32> %323, i64 0, !dbg !84
  %.extract13 = extractelement <4 x i32> %323, i64 1, !dbg !84
  %.extract14 = extractelement <4 x i32> %323, i64 2, !dbg !84
  %.extract15 = extractelement <4 x i32> %323, i64 3, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %284, i1 %24) #3, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3crdcdgdov6kjqpp46ttv27suhspg7uaiopqs7vrbxiwzhuznub.py", directory: "inductor_cache/3c")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_1", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 35, column: 19, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 39, column: 40, scope: !7)
!29 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 40, column: 19, scope: !7)
!31 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !32)
!32 = !DILocation(line: 44, column: 41, scope: !7)
!33 = !DILocation(line: 46, column: 21, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 42, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !36)
!38 = !DILocation(line: 49, column: 21, scope: !7)
!39 = !DILocation(line: 50, column: 42, scope: !7)
!40 = !DILocation(line: 50, column: 39, scope: !7)
!41 = !DILocation(line: 50, column: 55, scope: !7)
!42 = !DILocation(line: 50, column: 50, scope: !7)
!43 = !DILocation(line: 50, column: 31, scope: !7)
!44 = !DILocation(line: 50, column: 60, scope: !7)
!45 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !46)
!46 = !DILocation(line: 52, column: 42, scope: !7)
!47 = !DILocation(line: 53, column: 31, scope: !7)
!48 = !DILocation(line: 53, column: 60, scope: !7)
!49 = !DILocation(line: 55, column: 21, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !52)
!52 = !DILocation(line: 57, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !52)
!54 = !DILocation(line: 110, column: 15, scope: !26, inlinedAt: !55)
!55 = !DILocation(line: 59, column: 42, scope: !7)
!56 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !55)
!57 = !DILocation(line: 62, column: 42, scope: !7)
!58 = !DILocation(line: 62, column: 39, scope: !7)
!59 = !DILocation(line: 62, column: 49, scope: !7)
!60 = !DILocation(line: 62, column: 31, scope: !7)
!61 = !DILocation(line: 62, column: 59, scope: !7)
!62 = !DILocation(line: 63, column: 39, scope: !7)
!63 = !DILocation(line: 63, column: 31, scope: !7)
!64 = !DILocation(line: 63, column: 59, scope: !7)
!65 = !DILocation(line: 54, column: 20, scope: !7)
!66 = !DILocation(line: 60, column: 20, scope: !7)
!67 = !DILocation(line: 61, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 68, column: 20, scope: !7)
!71 = !DILocation(line: 69, column: 19, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !73)
!73 = !DILocation(line: 70, column: 42, scope: !7)
!74 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !73)
!75 = !DILocation(line: 110, column: 15, scope: !26, inlinedAt: !76)
!76 = !DILocation(line: 71, column: 42, scope: !7)
!77 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !76)
!78 = !DILocation(line: 72, column: 20, scope: !7)
!79 = !DILocation(line: 74, column: 35, scope: !7)
!80 = !DILocation(line: 74, column: 46, scope: !7)
!81 = !DILocation(line: 74, column: 30, scope: !7)
!82 = !DILocation(line: 74, column: 40, scope: !7)
!83 = !DILocation(line: 74, column: 25, scope: !7)
!84 = !DILocation(line: 74, column: 58, scope: !7)
!85 = !DILocation(line: 74, column: 4, scope: !7)
