; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_69(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 126, !dbg !12
  %10 = and i32 %7, 127, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = icmp slt i32 %11, 2808, !dbg !14
  %14 = icmp slt i32 %12, 2808, !dbg !14
  %15 = lshr i32 %7, 6, !dbg !15
  %16 = and i32 %15, 3, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %17 = sdiv i32 %.frozen, 702, !dbg !16
  %18 = mul i32 %17, 702, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = mul nuw nsw i32 %16, 702, !dbg !18
  %20 = add nsw i32 %.decomposed, %19, !dbg !19
  %21 = mul i32 %17, 11232, !dbg !20
  %22 = add i32 %20, %21, !dbg !21
  %23 = add nsw i32 %20, 2808, !dbg !19
  %24 = add i32 %23, %21, !dbg !21
  %25 = add nsw i32 %20, 5616, !dbg !19
  %26 = add i32 %25, %21, !dbg !21
  %27 = add nsw i32 %20, 8424, !dbg !19
  %28 = add i32 %27, %21, !dbg !21
  %29 = sext i32 %22 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !22
  %31 = sext i32 %24 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !22
  %33 = sext i32 %26 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !22
  %35 = sext i32 %28 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !22
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !23
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !23
  %40 = bitcast i32 %38 to float, !dbg !23
  %41 = bitcast i32 %39 to float, !dbg !23
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !23
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !23
  %45 = bitcast i32 %43 to float, !dbg !23
  %46 = bitcast i32 %44 to float, !dbg !23
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !23
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !23
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !23
  %50 = bitcast i32 %48 to float, !dbg !23
  %51 = bitcast i32 %49 to float, !dbg !23
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !23
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !23
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !23
  %55 = bitcast i32 %53 to float, !dbg !23
  %56 = bitcast i32 %54 to float, !dbg !23
  %57 = fadd float %40, %45, !dbg !24
  %58 = fadd float %41, %46, !dbg !24
  %59 = fadd float %57, %50, !dbg !24
  %60 = fadd float %58, %51, !dbg !24
  %61 = fadd float %59, %55, !dbg !24
  %62 = fadd float %60, %56, !dbg !24
  %63 = shl nuw nsw i32 %9, 2, !dbg !29
  %64 = or disjoint i32 %63, %16, !dbg !29
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !29
  %66 = bitcast float %61 to i32, !dbg !29
  %67 = select i1 %13, i32 %66, i32 0, !dbg !24
  %68 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %68, i1 true) #3, !dbg !29
  %69 = or disjoint i32 %63, 4, !dbg !29
  %70 = or disjoint i32 %69, %16, !dbg !29
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !29
  %72 = bitcast float %62 to i32, !dbg !29
  %73 = select i1 %13, i32 %72, i32 0, !dbg !24
  %74 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %74, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %75 = icmp slt i32 %7, 512, !dbg !29
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !29
  %77 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %76, i1 %75) #3, !dbg !29
  %78 = bitcast i32 %77 to float, !dbg !29
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = fadd float %78, %80, !dbg !24
  %82 = bitcast float %81 to i32, !dbg !29
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 1, i32 31), !dbg !29
  %84 = bitcast i32 %83 to float, !dbg !29
  %85 = fadd float %81, %84, !dbg !24
  %86 = and i32 %7, 3, !dbg !29
  %87 = icmp eq i32 %86, 0, !dbg !29
  %88 = and i1 %75, %87, !dbg !29
  %89 = bitcast float %85 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %89, i1 %88) #3, !dbg !29
  %90 = getelementptr i8, ptr addrspace(3) %76, i32 1024, !dbg !29
  %91 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %90, i1 %75) #3, !dbg !29
  %92 = bitcast i32 %91 to float, !dbg !29
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !29
  %94 = bitcast i32 %93 to float, !dbg !29
  %95 = fadd float %92, %94, !dbg !24
  %96 = bitcast float %95 to i32, !dbg !29
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !29
  %98 = bitcast i32 %97 to float, !dbg !29
  %99 = fadd float %95, %98, !dbg !24
  %100 = bitcast float %99 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %100, i1 %88) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !29
  %102 = load i32, ptr addrspace(3) %101, align 16, !dbg !29
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !29
  %104 = load i32, ptr addrspace(3) %103, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !30
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %105, i32 %102, i32 %104, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %107 = load float, ptr addrspace(3) %106, align 4, !dbg !30
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 1.600000e+01) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %109 = sext i32 %12 to i64, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !32
  %111 = and i32 %7, 128, !dbg !33
  %112 = icmp eq i32 %111, 0, !dbg !33
  %113 = bitcast float %108 to i32, !dbg !33
  %114 = and i1 %112, %14, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %110, i1 %114) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqwqfuug4hmw6fy6jda47rrklnew6s7s6tbof6q7ln4qn54pucst.py", directory: "inductor_cache/qw")
!4 = !{ptr @triton_per_fused_mean_69, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_69, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_69", linkageName: "triton_per_fused_mean_69", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 50, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 55, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
!32 = !DILocation(line: 40, column: 28, scope: !7)
!33 = !DILocation(line: 40, column: 39, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
