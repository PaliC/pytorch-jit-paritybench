; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = srem i32 %15, 128, !dbg !14
  %17 = sext i32 %15 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %20 = sext i32 %16 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !19
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !21
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !23
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !24
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !24
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !24
  %31 = bitcast i32 %29 to float, !dbg !24
  %32 = bitcast i32 %30 to float, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !25
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !27
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !28
  %37 = fadd float %31, 0x3EE4F8B580000000, !dbg !29
  %38 = fadd float %32, 0x3EE4F8B580000000, !dbg !29
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %39, 0, !dbg !30
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %40, 0, !dbg !30
  br i1 %.not.i, label %46, label %41, !dbg !30

41:                                               ; preds = %9
  br i1 %.not1.i, label %44, label %42, !dbg !30

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

46:                                               ; preds = %9
  br i1 %.not1.i, label %49, label %47, !dbg !30

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %42, %44, %47, %49
  %.0.i = phi float [ %43, %42 ], [ %45, %44 ], [ %48, %47 ], [ %50, %49 ], !dbg !30
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %51, 0, !dbg !30
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %52, 0, !dbg !30
  br i1 %.not.i1, label %58, label %53, !dbg !30

53:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %56, label %54, !dbg !30

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %61, label %59, !dbg !30

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %54, %56, %59, %61
  %.0.i3 = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !30
  %63 = extractvalue { i32, i32 } %19, 1, !dbg !16
  %64 = bitcast i32 %63 to float, !dbg !16
  %65 = extractvalue { i32, i32 } %22, 1, !dbg !18
  %66 = bitcast i32 %65 to float, !dbg !18
  %67 = fadd float %64, %66, !dbg !31
  %68 = extractvalue { i32, i32 } %26, 1, !dbg !22
  %69 = bitcast i32 %68 to float, !dbg !22
  %70 = fsub float %67, %69, !dbg !32
  %71 = extractvalue { i32, i32 } %19, 0, !dbg !16
  %72 = bitcast i32 %71 to float, !dbg !16
  %73 = extractvalue { i32, i32 } %22, 0, !dbg !18
  %74 = bitcast i32 %73 to float, !dbg !18
  %75 = fadd float %72, %74, !dbg !31
  %76 = extractvalue { i32, i32 } %26, 0, !dbg !22
  %77 = bitcast i32 %76 to float, !dbg !22
  %78 = fsub float %75, %77, !dbg !32
  %79 = extractvalue { i32, i32 } %36, 1, !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = extractvalue { i32, i32 } %36, 0, !dbg !28
  %82 = bitcast i32 %81 to float, !dbg !28
  %83 = extractvalue { i32, i32 } %34, 1, !dbg !26
  %84 = bitcast i32 %83 to float, !dbg !26
  %85 = extractvalue { i32, i32 } %34, 0, !dbg !26
  %86 = bitcast i32 %85 to float, !dbg !26
  %87 = extractvalue { i32, i32 } %24, 1, !dbg !20
  %88 = bitcast i32 %87 to float, !dbg !20
  %89 = extractvalue { i32, i32 } %24, 0, !dbg !20
  %90 = bitcast i32 %89 to float, !dbg !20
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %93 = fmul float %78, %91, !dbg !34
  %94 = fmul float %70, %92, !dbg !34
  %95 = fmul float %93, %86, !dbg !35
  %96 = fmul float %94, %84, !dbg !35
  %97 = fadd float %95, %82, !dbg !36
  %98 = fadd float %96, %80, !dbg !36
  %99 = fcmp olt float %97, 0.000000e+00, !dbg !37
  %100 = fcmp olt float %98, 0.000000e+00, !dbg !37
  %101 = select i1 %99, float 0.000000e+00, float %97, !dbg !41
  %102 = select i1 %100, float 0.000000e+00, float %98, !dbg !41
  %103 = fadd float %101, %90, !dbg !42
  %104 = fadd float %102, %88, !dbg !42
  %105 = fcmp olt float %103, 0.000000e+00, !dbg !43
  %106 = fcmp olt float %104, 0.000000e+00, !dbg !43
  %107 = select i1 %105, float 0.000000e+00, float %103, !dbg !45
  %108 = select i1 %106, float 0.000000e+00, float %104, !dbg !45
  %109 = bitcast float %75 to i32, !dbg !46
  %110 = bitcast float %67 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %109, i32 %110, ptr addrspace(1) %18, i1 true) #3, !dbg !46
  %111 = getelementptr float, ptr addrspace(1) %7, i64 %17, !dbg !47
  %112 = bitcast float %107 to i32, !dbg !48
  %113 = bitcast float %108 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %112, i32 %113, ptr addrspace(1) %111, i1 true) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2svqro4pqqob2ey3r5r6hcimbizrmejsyaouiyplhxyxbnblypj.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 26, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 34, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 46, column: 42, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 47, column: 19, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !44)
!44 = !DILocation(line: 48, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !44)
!46 = !DILocation(line: 49, column: 39, scope: !7)
!47 = !DILocation(line: 50, column: 25, scope: !7)
!48 = !DILocation(line: 50, column: 37, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
