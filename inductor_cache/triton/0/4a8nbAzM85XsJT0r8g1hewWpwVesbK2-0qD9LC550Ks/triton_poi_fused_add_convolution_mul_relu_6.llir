; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = shl i32 %9, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = or disjoint i32 %19, %14, !dbg !16
  %21 = or disjoint i32 %19, %11, !dbg !16
  %22 = or disjoint i32 %19, %12, !dbg !16
  %23 = icmp slt i32 %20, 1088, !dbg !17
  %24 = icmp slt i32 %21, 1088, !dbg !17
  %25 = icmp slt i32 %22, 1088, !dbg !17
  %.frozen = freeze i32 %17, !dbg !18
  %26 = sdiv i32 %.frozen, 4096, !dbg !18
  %27 = mul i32 %26, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %27, !dbg !19
  %28 = mul i32 %15, 1088, !dbg !20
  %29 = mul i32 %16, 1088, !dbg !20
  %30 = add i32 %20, %28, !dbg !21
  %31 = add i32 %20, %29, !dbg !21
  %32 = sext i32 %30 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %23) #2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !23
  %46 = sext i32 %20 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !24
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %23) #2, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %23) #2, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !27
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %23) #2, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !27
  %65 = insertelement <8 x i32> poison, i32 %45, i64 0, !dbg !23
  %66 = insertelement <8 x i32> %65, i32 %44, i64 1, !dbg !23
  %67 = insertelement <8 x i32> %66, i32 %43, i64 2, !dbg !23
  %68 = insertelement <8 x i32> %67, i32 %42, i64 3, !dbg !23
  %69 = insertelement <8 x i32> %68, i32 %40, i64 4, !dbg !23
  %70 = insertelement <8 x i32> %69, i32 %39, i64 5, !dbg !23
  %71 = insertelement <8 x i32> %70, i32 %38, i64 6, !dbg !23
  %72 = insertelement <8 x i32> %71, i32 %37, i64 7, !dbg !23
  %73 = bitcast <8 x i32> %72 to <8 x float>, !dbg !23
  %74 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !25
  %75 = insertelement <4 x i32> %74, i32 %51, i64 1, !dbg !25
  %76 = insertelement <4 x i32> %75, i32 %50, i64 2, !dbg !25
  %77 = insertelement <4 x i32> %76, i32 %49, i64 3, !dbg !25
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !25
  %79 = shufflevector <4 x float> %78, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %80 = insertelement <8 x i32> poison, i32 %64, i64 0, !dbg !27
  %81 = insertelement <8 x i32> %80, i32 %63, i64 1, !dbg !27
  %82 = insertelement <8 x i32> %81, i32 %62, i64 2, !dbg !27
  %83 = insertelement <8 x i32> %82, i32 %61, i64 3, !dbg !27
  %84 = insertelement <8 x i32> %83, i32 %59, i64 4, !dbg !27
  %85 = insertelement <8 x i32> %84, i32 %58, i64 5, !dbg !27
  %86 = insertelement <8 x i32> %85, i32 %57, i64 6, !dbg !27
  %87 = insertelement <8 x i32> %86, i32 %56, i64 7, !dbg !27
  %88 = bitcast <8 x i32> %87 to <8 x float>, !dbg !27
  %89 = fadd <8 x float> %79, %73, !dbg !28
  %90 = fadd <8 x float> %89, %88, !dbg !29
  %91 = fcmp olt <8 x float> %90, zeroinitializer, !dbg !30
  %92 = extractelement <8 x i1> %91, i64 7, !dbg !34
  %93 = extractelement <8 x float> %90, i64 7, !dbg !34
  %94 = select i1 %92, float 0.000000e+00, float %93, !dbg !34
  %95 = extractelement <8 x i1> %91, i64 6, !dbg !34
  %96 = extractelement <8 x float> %90, i64 6, !dbg !34
  %97 = select i1 %95, float 0.000000e+00, float %96, !dbg !34
  %98 = extractelement <8 x i1> %91, i64 5, !dbg !34
  %99 = extractelement <8 x float> %90, i64 5, !dbg !34
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !34
  %101 = extractelement <8 x i1> %91, i64 4, !dbg !34
  %102 = extractelement <8 x float> %90, i64 4, !dbg !34
  %103 = select i1 %101, float 0.000000e+00, float %102, !dbg !34
  %104 = extractelement <8 x i1> %91, i64 3, !dbg !34
  %105 = extractelement <8 x float> %90, i64 3, !dbg !34
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !34
  %107 = extractelement <8 x i1> %91, i64 2, !dbg !34
  %108 = extractelement <8 x float> %90, i64 2, !dbg !34
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !34
  %110 = extractelement <8 x i1> %91, i64 1, !dbg !34
  %111 = extractelement <8 x float> %90, i64 1, !dbg !34
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !34
  %113 = extractelement <8 x i1> %91, i64 0, !dbg !34
  %114 = extractelement <8 x float> %90, i64 0, !dbg !34
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !34
  %116 = shl i32 %21, 12, !dbg !35
  %117 = shl i32 %22, 12, !dbg !35
  %118 = mul i32 %26, 4456448, !dbg !36
  %119 = add i32 %118, %.decomposed, !dbg !37
  %120 = add i32 %119, %116, !dbg !38
  %121 = add i32 %119, %117, !dbg !38
  %122 = sext i32 %120 to i64, !dbg !39
  %123 = getelementptr float, ptr addrspace(1) %3, i64 %122, !dbg !39
  %124 = sext i32 %121 to i64, !dbg !39
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %124, !dbg !39
  %126 = shl i32 %9, 7, !dbg !40
  %127 = and i32 %126, 896, !dbg !40
  %128 = or disjoint i32 %127, %11, !dbg !40
  %129 = and i32 %13, 508, !dbg !40
  %130 = lshr exact i32 %127, 1, !dbg !40
  %131 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %130, !dbg !40
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %128, !dbg !40
  %133 = bitcast float %94 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !40
  %134 = or disjoint i32 %128, 32, !dbg !40
  %135 = lshr i32 %134, 3, !dbg !40
  %136 = and i32 %135, 116, !dbg !40
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !40
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %134, !dbg !40
  %139 = bitcast float %97 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !40
  %140 = or disjoint i32 %128, 64, !dbg !40
  %141 = lshr i32 %140, 3, !dbg !40
  %142 = and i32 %141, 120, !dbg !40
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !40
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %140, !dbg !40
  %145 = bitcast float %100 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !40
  %146 = or disjoint i32 %128, 96, !dbg !40
  %147 = lshr i32 %146, 3, !dbg !40
  %148 = and i32 %147, 124, !dbg !40
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !40
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %146, !dbg !40
  %151 = bitcast float %103 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !40
  %152 = or disjoint i32 %128, 16, !dbg !40
  %153 = getelementptr float, ptr addrspace(3) %131, i32 %152, !dbg !40
  %154 = bitcast float %106 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !40
  %155 = or disjoint i32 %128, 48, !dbg !40
  %156 = lshr i32 %155, 3, !dbg !40
  %157 = and i32 %156, 116, !dbg !40
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !40
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %155, !dbg !40
  %160 = bitcast float %109 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !40
  %161 = or disjoint i32 %128, 80, !dbg !40
  %162 = lshr i32 %161, 3, !dbg !40
  %163 = and i32 %162, 120, !dbg !40
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !40
  %165 = getelementptr float, ptr addrspace(3) %164, i32 %161, !dbg !40
  %166 = bitcast float %112 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !40
  %167 = or disjoint i32 %128, 112, !dbg !40
  %168 = lshr i32 %167, 3, !dbg !40
  %169 = and i32 %168, 124, !dbg !40
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %169, !dbg !40
  %171 = getelementptr float, ptr addrspace(3) %170, i32 %167, !dbg !40
  %172 = bitcast float %115 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %173 = lshr i32 %13, 3, !dbg !40
  %174 = and i32 %173, 60, !dbg !40
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !40
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %129, !dbg !40
  %177 = or disjoint i32 %129, 512, !dbg !40
  %178 = lshr i32 %177, 3, !dbg !40
  %179 = and i32 %178, 124, !dbg !40
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %179, !dbg !40
  %181 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %177, !dbg !40
  %182 = load <4 x i32>, ptr addrspace(3) %181, align 16, !dbg !40
  %.extract = load i32, ptr addrspace(3) %176, align 16, !dbg !40
  %183 = getelementptr inbounds i8, ptr addrspace(3) %176, i32 4, !dbg !40
  %.extract8 = load i32, ptr addrspace(3) %183, align 4, !dbg !40
  %184 = getelementptr inbounds i8, ptr addrspace(3) %176, i32 8, !dbg !40
  %.extract9 = load i32, ptr addrspace(3) %184, align 8, !dbg !40
  %185 = getelementptr inbounds i8, ptr addrspace(3) %176, i32 12, !dbg !40
  %.extract10 = load i32, ptr addrspace(3) %185, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %123, i1 %24) #2, !dbg !40
  %.extract11 = extractelement <4 x i32> %182, i64 0, !dbg !40
  %.extract12 = extractelement <4 x i32> %182, i64 1, !dbg !40
  %.extract13 = extractelement <4 x i32> %182, i64 2, !dbg !40
  %.extract14 = extractelement <4 x i32> %182, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %125, i1 %25) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccd7nykkkmuelwk53fsppfnlfiiafrpk6o356i7mmlttjr7tuws6.py", directory: "inductor_cache/cd")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_relu_6", linkageName: "triton_poi_fused_add_convolution_mul_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 40, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 41, column: 35, scope: !7)
!36 = !DILocation(line: 41, column: 48, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 40, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 59, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
