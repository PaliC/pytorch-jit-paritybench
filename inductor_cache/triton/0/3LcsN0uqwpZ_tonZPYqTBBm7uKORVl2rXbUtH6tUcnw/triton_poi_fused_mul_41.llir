; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_41(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = sdiv i32 %9, 4096, !dbg !14
  %12 = sdiv i32 %10, 4096, !dbg !14
  %13 = sext i32 %9 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = sext i32 %10 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %22 = bitcast i32 %18 to float, !dbg !16
  %23 = bitcast i32 %19 to float, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %31 = bitcast i32 %27 to float, !dbg !16
  %32 = bitcast i32 %28 to float, !dbg !16
  %33 = bitcast i32 %29 to float, !dbg !16
  %34 = bitcast i32 %30 to float, !dbg !16
  %35 = sext i32 %11 to i64, !dbg !17
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !17
  %37 = sext i32 %12 to i64, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !17
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !18
  %40 = bitcast i32 %39 to float, !dbg !18
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !18
  %42 = bitcast i32 %41 to float, !dbg !18
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !18
  %44 = bitcast i32 %43 to float, !dbg !18
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !18
  %46 = bitcast i32 %45 to float, !dbg !18
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !18
  %48 = bitcast i32 %47 to float, !dbg !18
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !18
  %50 = bitcast i32 %49 to float, !dbg !18
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !18
  %52 = bitcast i32 %51 to float, !dbg !18
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !18
  %54 = bitcast i32 %53 to float, !dbg !18
  %55 = fsub float 0.000000e+00, %40, !dbg !19
  %56 = fsub float 0.000000e+00, %42, !dbg !19
  %57 = fsub float 0.000000e+00, %44, !dbg !19
  %58 = fsub float 0.000000e+00, %46, !dbg !19
  %59 = fsub float 0.000000e+00, %48, !dbg !19
  %60 = fsub float 0.000000e+00, %50, !dbg !19
  %61 = fsub float 0.000000e+00, %52, !dbg !19
  %62 = fsub float 0.000000e+00, %54, !dbg !19
  %63 = fmul float %55, 0x3FF7154760000000, !dbg !23
  %64 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %63) #1, !dbg !23
  %65 = fmul float %56, 0x3FF7154760000000, !dbg !23
  %66 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %65) #1, !dbg !23
  %67 = fmul float %57, 0x3FF7154760000000, !dbg !23
  %68 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %67) #1, !dbg !23
  %69 = fmul float %58, 0x3FF7154760000000, !dbg !23
  %70 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #1, !dbg !23
  %71 = fmul float %59, 0x3FF7154760000000, !dbg !23
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #1, !dbg !23
  %73 = fmul float %60, 0x3FF7154760000000, !dbg !23
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #1, !dbg !23
  %75 = fmul float %61, 0x3FF7154760000000, !dbg !23
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #1, !dbg !23
  %77 = fmul float %62, 0x3FF7154760000000, !dbg !23
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #1, !dbg !23
  %79 = fadd float %64, 1.000000e+00, !dbg !24
  %80 = fadd float %66, 1.000000e+00, !dbg !24
  %81 = fadd float %68, 1.000000e+00, !dbg !24
  %82 = fadd float %70, 1.000000e+00, !dbg !24
  %83 = fadd float %72, 1.000000e+00, !dbg !24
  %84 = fadd float %74, 1.000000e+00, !dbg !24
  %85 = fadd float %76, 1.000000e+00, !dbg !24
  %86 = fadd float %78, 1.000000e+00, !dbg !24
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %79) #1, !dbg !25
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %80) #1, !dbg !25
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %81) #1, !dbg !25
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %82) #1, !dbg !25
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %83) #1, !dbg !25
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %84) #1, !dbg !25
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %85) #1, !dbg !25
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %86) #1, !dbg !25
  %95 = fmul float %87, %22, !dbg !26
  %96 = fmul float %88, %23, !dbg !26
  %97 = fmul float %89, %24, !dbg !26
  %98 = fmul float %90, %25, !dbg !26
  %99 = fmul float %91, %31, !dbg !26
  %100 = fmul float %92, %32, !dbg !26
  %101 = fmul float %93, %33, !dbg !26
  %102 = fmul float %94, %34, !dbg !26
  %103 = bitcast float %95 to i32, !dbg !27
  %104 = bitcast float %96 to i32, !dbg !27
  %105 = bitcast float %97 to i32, !dbg !27
  %106 = bitcast float %98 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %103, i32 %104, i32 %105, i32 %106, ptr addrspace(1) %14, i1 true) #1, !dbg !27
  %107 = bitcast float %99 to i32, !dbg !27
  %108 = bitcast float %100 to i32, !dbg !27
  %109 = bitcast float %101 to i32, !dbg !27
  %110 = bitcast float %102 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %107, i32 %108, i32 %109, i32 %110, ptr addrspace(1) %16, i1 true) #1, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4xnlk2u75bh75tb6gjb2kqopiogfxpfjhyziv5jhlcfoj5gztmy.py", directory: "inductor_cache/4x")
!4 = !{ptr @triton_poi_fused_mul_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_41", linkageName: "triton_poi_fused_mul_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 47, column: 30, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = !DILocation(line: 28, column: 22, scope: !7)
!23 = !DILocation(line: 47, column: 29, scope: !20, inlinedAt: !22)
!24 = !DILocation(line: 47, column: 20, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 47, column: 16, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 29, column: 18, scope: !7)
!27 = !DILocation(line: 30, column: 39, scope: !7)
!28 = !DILocation(line: 30, column: 4, scope: !7)
