; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 16, !dbg !13
  %13 = or disjoint i32 %11, 32, !dbg !13
  %14 = or disjoint i32 %11, 48, !dbg !13
  %15 = or disjoint i32 %11, 64, !dbg !13
  %16 = or disjoint i32 %11, 80, !dbg !13
  %17 = or disjoint i32 %11, 96, !dbg !13
  %18 = or disjoint i32 %11, 112, !dbg !13
  %19 = icmp slt i32 %11, 576, !dbg !14
  %20 = icmp slt i32 %12, 576, !dbg !14
  %21 = icmp slt i32 %13, 576, !dbg !14
  %22 = icmp slt i32 %14, 576, !dbg !14
  %23 = icmp slt i32 %15, 576, !dbg !14
  %24 = icmp slt i32 %16, 576, !dbg !14
  %25 = icmp slt i32 %17, 576, !dbg !14
  %26 = icmp slt i32 %18, 576, !dbg !14
  %27 = and i32 %8, 15, !dbg !15
  %28 = icmp samesign ult i32 %27, 9, !dbg !16
  %29 = srem i32 %11, 9, !dbg !17
  %30 = srem i32 %12, 9, !dbg !17
  %31 = srem i32 %13, 9, !dbg !17
  %32 = srem i32 %14, 9, !dbg !17
  %33 = srem i32 %15, 9, !dbg !17
  %34 = srem i32 %16, 9, !dbg !17
  %35 = srem i32 %17, 9, !dbg !17
  %36 = srem i32 %18, 9, !dbg !17
  %.frozen = freeze i32 %11, !dbg !18
  %37 = sdiv i32 %.frozen, 144, !dbg !18
  %.frozen1 = freeze i32 %12, !dbg !18
  %38 = sdiv i32 %.frozen1, 144, !dbg !18
  %.frozen3 = freeze i32 %13, !dbg !18
  %39 = sdiv i32 %.frozen3, 144, !dbg !18
  %.frozen5 = freeze i32 %14, !dbg !18
  %40 = sdiv i32 %.frozen5, 144, !dbg !18
  %.frozen7 = freeze i32 %15, !dbg !18
  %41 = sdiv i32 %.frozen7, 144, !dbg !18
  %.frozen9 = freeze i32 %16, !dbg !18
  %42 = sdiv i32 %.frozen9, 144, !dbg !18
  %.frozen11 = freeze i32 %17, !dbg !18
  %43 = sdiv i32 %.frozen11, 144, !dbg !18
  %.frozen13 = freeze i32 %18, !dbg !18
  %44 = sdiv i32 %.frozen13, 144, !dbg !18
  %45 = mul i32 %37, 144, !dbg !19
  %.decomposed = sub i32 %.frozen, %45, !dbg !19
  %46 = mul i32 %38, 144, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %46, !dbg !19
  %47 = mul i32 %39, 144, !dbg !19
  %.decomposed4 = sub i32 %.frozen3, %47, !dbg !19
  %48 = mul i32 %40, 144, !dbg !19
  %.decomposed6 = sub i32 %.frozen5, %48, !dbg !19
  %49 = mul i32 %41, 144, !dbg !19
  %.decomposed8 = sub i32 %.frozen7, %49, !dbg !19
  %50 = mul i32 %42, 144, !dbg !19
  %.decomposed10 = sub i32 %.frozen9, %50, !dbg !19
  %51 = mul i32 %43, 144, !dbg !19
  %.decomposed12 = sub i32 %.frozen11, %51, !dbg !19
  %52 = mul i32 %44, 144, !dbg !19
  %.decomposed14 = sub i32 %.frozen13, %52, !dbg !19
  %53 = mul i32 %11, 9, !dbg !20
  %54 = mul i32 %12, 9, !dbg !20
  %55 = mul i32 %13, 9, !dbg !20
  %56 = mul i32 %14, 9, !dbg !20
  %57 = mul i32 %15, 9, !dbg !20
  %58 = mul i32 %16, 9, !dbg !20
  %59 = mul i32 %17, 9, !dbg !20
  %60 = mul i32 %18, 9, !dbg !20
  %61 = add i32 %53, %27, !dbg !21
  %62 = add i32 %54, %27, !dbg !21
  %63 = add i32 %55, %27, !dbg !21
  %64 = add i32 %56, %27, !dbg !21
  %65 = add i32 %57, %27, !dbg !21
  %66 = add i32 %58, %27, !dbg !21
  %67 = add i32 %59, %27, !dbg !21
  %68 = add i32 %60, %27, !dbg !21
  %69 = sext i32 %61 to i64, !dbg !22
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !22
  %71 = sext i32 %62 to i64, !dbg !22
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !22
  %73 = sext i32 %63 to i64, !dbg !22
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !22
  %75 = sext i32 %64 to i64, !dbg !22
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !22
  %77 = sext i32 %65 to i64, !dbg !22
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !22
  %79 = sext i32 %66 to i64, !dbg !22
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !22
  %81 = sext i32 %67 to i64, !dbg !22
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !22
  %83 = sext i32 %68 to i64, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !22
  %85 = and i1 %28, %19, !dbg !23
  %86 = and i1 %28, %20, !dbg !23
  %87 = and i1 %28, %21, !dbg !23
  %88 = and i1 %28, %22, !dbg !23
  %89 = and i1 %28, %23, !dbg !23
  %90 = and i1 %28, %24, !dbg !23
  %91 = and i1 %28, %25, !dbg !23
  %92 = and i1 %28, %26, !dbg !23
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %85, i32 0, i1 %85) #2, !dbg !24
  %94 = bitcast i32 %93 to float, !dbg !24
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %86, i32 0, i1 %86) #2, !dbg !24
  %96 = bitcast i32 %95 to float, !dbg !24
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %87, i32 0, i1 %87) #2, !dbg !24
  %98 = bitcast i32 %97 to float, !dbg !24
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %88, i32 0, i1 %88) #2, !dbg !24
  %100 = bitcast i32 %99 to float, !dbg !24
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %89, i32 0, i1 %89) #2, !dbg !24
  %102 = bitcast i32 %101 to float, !dbg !24
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %90, i32 0, i1 %90) #2, !dbg !24
  %104 = bitcast i32 %103 to float, !dbg !24
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %91, i32 0, i1 %91) #2, !dbg !24
  %106 = bitcast i32 %105 to float, !dbg !24
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %92, i32 0, i1 %92) #2, !dbg !24
  %108 = bitcast i32 %107 to float, !dbg !24
  %109 = mul nsw i32 %29, 9, !dbg !25
  %110 = mul nsw i32 %30, 9, !dbg !25
  %111 = mul nsw i32 %31, 9, !dbg !25
  %112 = mul nsw i32 %32, 9, !dbg !25
  %113 = mul nsw i32 %33, 9, !dbg !25
  %114 = mul nsw i32 %34, 9, !dbg !25
  %115 = mul nsw i32 %35, 9, !dbg !25
  %116 = mul nsw i32 %36, 9, !dbg !25
  %117 = add nsw i32 %109, %27, !dbg !26
  %118 = add nsw i32 %110, %27, !dbg !26
  %119 = add nsw i32 %111, %27, !dbg !26
  %120 = add nsw i32 %112, %27, !dbg !26
  %121 = add nsw i32 %113, %27, !dbg !26
  %122 = add nsw i32 %114, %27, !dbg !26
  %123 = add nsw i32 %115, %27, !dbg !26
  %124 = add nsw i32 %116, %27, !dbg !26
  %125 = sext i32 %117 to i64, !dbg !27
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !27
  %127 = sext i32 %118 to i64, !dbg !27
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !27
  %129 = sext i32 %119 to i64, !dbg !27
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !27
  %131 = sext i32 %120 to i64, !dbg !27
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !27
  %133 = sext i32 %121 to i64, !dbg !27
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !27
  %135 = sext i32 %122 to i64, !dbg !27
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !27
  %137 = sext i32 %123 to i64, !dbg !27
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !27
  %139 = sext i32 %124 to i64, !dbg !27
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !27
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %85, i32 0, i1 %85) #2, !dbg !28
  %142 = bitcast i32 %141 to float, !dbg !28
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %86, i32 0, i1 %86) #2, !dbg !28
  %144 = bitcast i32 %143 to float, !dbg !28
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %87, i32 0, i1 %87) #2, !dbg !28
  %146 = bitcast i32 %145 to float, !dbg !28
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %88, i32 0, i1 %88) #2, !dbg !28
  %148 = bitcast i32 %147 to float, !dbg !28
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %89, i32 0, i1 %89) #2, !dbg !28
  %150 = bitcast i32 %149 to float, !dbg !28
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %90, i32 0, i1 %90) #2, !dbg !28
  %152 = bitcast i32 %151 to float, !dbg !28
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %91, i32 0, i1 %91) #2, !dbg !28
  %154 = bitcast i32 %153 to float, !dbg !28
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %92, i32 0, i1 %92) #2, !dbg !28
  %156 = bitcast i32 %155 to float, !dbg !28
  %157 = fadd float %94, %142, !dbg !29
  %158 = fadd float %96, %144, !dbg !29
  %159 = fadd float %98, %146, !dbg !29
  %160 = fadd float %100, %148, !dbg !29
  %161 = fadd float %102, %150, !dbg !29
  %162 = fadd float %104, %152, !dbg !29
  %163 = fadd float %106, %154, !dbg !29
  %164 = fadd float %108, %156, !dbg !29
  %165 = select i1 %85, float %157, float 0xFFF0000000000000, !dbg !30
  %166 = select i1 %86, float %158, float 0xFFF0000000000000, !dbg !30
  %167 = select i1 %87, float %159, float 0xFFF0000000000000, !dbg !30
  %168 = select i1 %88, float %160, float 0xFFF0000000000000, !dbg !30
  %169 = select i1 %89, float %161, float 0xFFF0000000000000, !dbg !30
  %170 = select i1 %90, float %162, float 0xFFF0000000000000, !dbg !30
  %171 = select i1 %91, float %163, float 0xFFF0000000000000, !dbg !30
  %172 = select i1 %92, float %164, float 0xFFF0000000000000, !dbg !30
  %173 = bitcast float %165 to i32, !dbg !31
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !31
  %175 = bitcast i32 %174 to float, !dbg !31
  %176 = fcmp ogt float %165, %175, !dbg !35
  %177 = fcmp uno float %165, 0.000000e+00, !dbg !37
  %178 = or i1 %177, %176, !dbg !38
  %179 = select i1 %178, float %165, float %175, !dbg !39
  %180 = bitcast float %179 to i32, !dbg !31
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 4, i32 31), !dbg !31
  %182 = bitcast i32 %181 to float, !dbg !31
  %183 = fcmp ogt float %179, %182, !dbg !35
  %184 = fcmp uno float %179, 0.000000e+00, !dbg !37
  %185 = or i1 %183, %184, !dbg !38
  %186 = select i1 %185, float %179, float %182, !dbg !39
  %187 = bitcast float %186 to i32, !dbg !31
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !31
  %189 = bitcast i32 %188 to float, !dbg !31
  %190 = fcmp ogt float %186, %189, !dbg !35
  %191 = fcmp uno float %186, 0.000000e+00, !dbg !37
  %192 = or i1 %190, %191, !dbg !38
  %193 = select i1 %192, float %186, float %189, !dbg !39
  %194 = bitcast float %193 to i32, !dbg !31
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 1, i32 31), !dbg !31
  %196 = bitcast i32 %195 to float, !dbg !31
  %197 = fcmp ogt float %193, %196, !dbg !35
  %198 = fcmp uno float %193, 0.000000e+00, !dbg !37
  %199 = or i1 %197, %198, !dbg !38
  %200 = select i1 %199, float %193, float %196, !dbg !39
  %201 = bitcast float %166 to i32, !dbg !31
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 8, i32 31), !dbg !31
  %203 = bitcast i32 %202 to float, !dbg !31
  %204 = fcmp ogt float %166, %203, !dbg !35
  %205 = fcmp uno float %166, 0.000000e+00, !dbg !37
  %206 = or i1 %205, %204, !dbg !38
  %207 = select i1 %206, float %166, float %203, !dbg !39
  %208 = bitcast float %207 to i32, !dbg !31
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 4, i32 31), !dbg !31
  %210 = bitcast i32 %209 to float, !dbg !31
  %211 = fcmp ogt float %207, %210, !dbg !35
  %212 = fcmp uno float %207, 0.000000e+00, !dbg !37
  %213 = or i1 %211, %212, !dbg !38
  %214 = select i1 %213, float %207, float %210, !dbg !39
  %215 = bitcast float %214 to i32, !dbg !31
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !31
  %217 = bitcast i32 %216 to float, !dbg !31
  %218 = fcmp ogt float %214, %217, !dbg !35
  %219 = fcmp uno float %214, 0.000000e+00, !dbg !37
  %220 = or i1 %218, %219, !dbg !38
  %221 = select i1 %220, float %214, float %217, !dbg !39
  %222 = bitcast float %221 to i32, !dbg !31
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 1, i32 31), !dbg !31
  %224 = bitcast i32 %223 to float, !dbg !31
  %225 = fcmp ogt float %221, %224, !dbg !35
  %226 = fcmp uno float %221, 0.000000e+00, !dbg !37
  %227 = or i1 %225, %226, !dbg !38
  %228 = select i1 %227, float %221, float %224, !dbg !39
  %229 = bitcast float %167 to i32, !dbg !31
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 8, i32 31), !dbg !31
  %231 = bitcast i32 %230 to float, !dbg !31
  %232 = fcmp ogt float %167, %231, !dbg !35
  %233 = fcmp uno float %167, 0.000000e+00, !dbg !37
  %234 = or i1 %233, %232, !dbg !38
  %235 = select i1 %234, float %167, float %231, !dbg !39
  %236 = bitcast float %235 to i32, !dbg !31
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 4, i32 31), !dbg !31
  %238 = bitcast i32 %237 to float, !dbg !31
  %239 = fcmp ogt float %235, %238, !dbg !35
  %240 = fcmp uno float %235, 0.000000e+00, !dbg !37
  %241 = or i1 %239, %240, !dbg !38
  %242 = select i1 %241, float %235, float %238, !dbg !39
  %243 = bitcast float %242 to i32, !dbg !31
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !31
  %245 = bitcast i32 %244 to float, !dbg !31
  %246 = fcmp ogt float %242, %245, !dbg !35
  %247 = fcmp uno float %242, 0.000000e+00, !dbg !37
  %248 = or i1 %246, %247, !dbg !38
  %249 = select i1 %248, float %242, float %245, !dbg !39
  %250 = bitcast float %249 to i32, !dbg !31
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 1, i32 31), !dbg !31
  %252 = bitcast i32 %251 to float, !dbg !31
  %253 = fcmp ogt float %249, %252, !dbg !35
  %254 = fcmp uno float %249, 0.000000e+00, !dbg !37
  %255 = or i1 %253, %254, !dbg !38
  %256 = select i1 %255, float %249, float %252, !dbg !39
  %257 = bitcast float %168 to i32, !dbg !31
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 8, i32 31), !dbg !31
  %259 = bitcast i32 %258 to float, !dbg !31
  %260 = fcmp ogt float %168, %259, !dbg !35
  %261 = fcmp uno float %168, 0.000000e+00, !dbg !37
  %262 = or i1 %261, %260, !dbg !38
  %263 = select i1 %262, float %168, float %259, !dbg !39
  %264 = bitcast float %263 to i32, !dbg !31
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !31
  %266 = bitcast i32 %265 to float, !dbg !31
  %267 = fcmp ogt float %263, %266, !dbg !35
  %268 = fcmp uno float %263, 0.000000e+00, !dbg !37
  %269 = or i1 %267, %268, !dbg !38
  %270 = select i1 %269, float %263, float %266, !dbg !39
  %271 = bitcast float %270 to i32, !dbg !31
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 2, i32 31), !dbg !31
  %273 = bitcast i32 %272 to float, !dbg !31
  %274 = fcmp ogt float %270, %273, !dbg !35
  %275 = fcmp uno float %270, 0.000000e+00, !dbg !37
  %276 = or i1 %274, %275, !dbg !38
  %277 = select i1 %276, float %270, float %273, !dbg !39
  %278 = bitcast float %277 to i32, !dbg !31
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 1, i32 31), !dbg !31
  %280 = bitcast i32 %279 to float, !dbg !31
  %281 = fcmp ogt float %277, %280, !dbg !35
  %282 = fcmp uno float %277, 0.000000e+00, !dbg !37
  %283 = or i1 %281, %282, !dbg !38
  %284 = select i1 %283, float %277, float %280, !dbg !39
  %285 = bitcast float %169 to i32, !dbg !31
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 8, i32 31), !dbg !31
  %287 = bitcast i32 %286 to float, !dbg !31
  %288 = fcmp ogt float %169, %287, !dbg !35
  %289 = fcmp uno float %169, 0.000000e+00, !dbg !37
  %290 = or i1 %289, %288, !dbg !38
  %291 = select i1 %290, float %169, float %287, !dbg !39
  %292 = bitcast float %291 to i32, !dbg !31
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 4, i32 31), !dbg !31
  %294 = bitcast i32 %293 to float, !dbg !31
  %295 = fcmp ogt float %291, %294, !dbg !35
  %296 = fcmp uno float %291, 0.000000e+00, !dbg !37
  %297 = or i1 %295, %296, !dbg !38
  %298 = select i1 %297, float %291, float %294, !dbg !39
  %299 = bitcast float %298 to i32, !dbg !31
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 2, i32 31), !dbg !31
  %301 = bitcast i32 %300 to float, !dbg !31
  %302 = fcmp ogt float %298, %301, !dbg !35
  %303 = fcmp uno float %298, 0.000000e+00, !dbg !37
  %304 = or i1 %302, %303, !dbg !38
  %305 = select i1 %304, float %298, float %301, !dbg !39
  %306 = bitcast float %305 to i32, !dbg !31
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !31
  %308 = bitcast i32 %307 to float, !dbg !31
  %309 = fcmp ogt float %305, %308, !dbg !35
  %310 = fcmp uno float %305, 0.000000e+00, !dbg !37
  %311 = or i1 %309, %310, !dbg !38
  %312 = select i1 %311, float %305, float %308, !dbg !39
  %313 = bitcast float %170 to i32, !dbg !31
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 8, i32 31), !dbg !31
  %315 = bitcast i32 %314 to float, !dbg !31
  %316 = fcmp ogt float %170, %315, !dbg !35
  %317 = fcmp uno float %170, 0.000000e+00, !dbg !37
  %318 = or i1 %317, %316, !dbg !38
  %319 = select i1 %318, float %170, float %315, !dbg !39
  %320 = bitcast float %319 to i32, !dbg !31
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 4, i32 31), !dbg !31
  %322 = bitcast i32 %321 to float, !dbg !31
  %323 = fcmp ogt float %319, %322, !dbg !35
  %324 = fcmp uno float %319, 0.000000e+00, !dbg !37
  %325 = or i1 %323, %324, !dbg !38
  %326 = select i1 %325, float %319, float %322, !dbg !39
  %327 = bitcast float %326 to i32, !dbg !31
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 2, i32 31), !dbg !31
  %329 = bitcast i32 %328 to float, !dbg !31
  %330 = fcmp ogt float %326, %329, !dbg !35
  %331 = fcmp uno float %326, 0.000000e+00, !dbg !37
  %332 = or i1 %330, %331, !dbg !38
  %333 = select i1 %332, float %326, float %329, !dbg !39
  %334 = bitcast float %333 to i32, !dbg !31
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 1, i32 31), !dbg !31
  %336 = bitcast i32 %335 to float, !dbg !31
  %337 = fcmp ogt float %333, %336, !dbg !35
  %338 = fcmp uno float %333, 0.000000e+00, !dbg !37
  %339 = or i1 %337, %338, !dbg !38
  %340 = select i1 %339, float %333, float %336, !dbg !39
  %341 = bitcast float %171 to i32, !dbg !31
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 8, i32 31), !dbg !31
  %343 = bitcast i32 %342 to float, !dbg !31
  %344 = fcmp ogt float %171, %343, !dbg !35
  %345 = fcmp uno float %171, 0.000000e+00, !dbg !37
  %346 = or i1 %345, %344, !dbg !38
  %347 = select i1 %346, float %171, float %343, !dbg !39
  %348 = bitcast float %347 to i32, !dbg !31
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 4, i32 31), !dbg !31
  %350 = bitcast i32 %349 to float, !dbg !31
  %351 = fcmp ogt float %347, %350, !dbg !35
  %352 = fcmp uno float %347, 0.000000e+00, !dbg !37
  %353 = or i1 %351, %352, !dbg !38
  %354 = select i1 %353, float %347, float %350, !dbg !39
  %355 = bitcast float %354 to i32, !dbg !31
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 2, i32 31), !dbg !31
  %357 = bitcast i32 %356 to float, !dbg !31
  %358 = fcmp ogt float %354, %357, !dbg !35
  %359 = fcmp uno float %354, 0.000000e+00, !dbg !37
  %360 = or i1 %358, %359, !dbg !38
  %361 = select i1 %360, float %354, float %357, !dbg !39
  %362 = bitcast float %361 to i32, !dbg !31
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 1, i32 31), !dbg !31
  %364 = bitcast i32 %363 to float, !dbg !31
  %365 = fcmp ogt float %361, %364, !dbg !35
  %366 = fcmp uno float %361, 0.000000e+00, !dbg !37
  %367 = or i1 %365, %366, !dbg !38
  %368 = select i1 %367, float %361, float %364, !dbg !39
  %369 = bitcast float %172 to i32, !dbg !31
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 8, i32 31), !dbg !31
  %371 = bitcast i32 %370 to float, !dbg !31
  %372 = fcmp ogt float %172, %371, !dbg !35
  %373 = fcmp uno float %172, 0.000000e+00, !dbg !37
  %374 = or i1 %373, %372, !dbg !38
  %375 = select i1 %374, float %172, float %371, !dbg !39
  %376 = bitcast float %375 to i32, !dbg !31
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 4, i32 31), !dbg !31
  %378 = bitcast i32 %377 to float, !dbg !31
  %379 = fcmp ogt float %375, %378, !dbg !35
  %380 = fcmp uno float %375, 0.000000e+00, !dbg !37
  %381 = or i1 %379, %380, !dbg !38
  %382 = select i1 %381, float %375, float %378, !dbg !39
  %383 = bitcast float %382 to i32, !dbg !31
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 2, i32 31), !dbg !31
  %385 = bitcast i32 %384 to float, !dbg !31
  %386 = fcmp ogt float %382, %385, !dbg !35
  %387 = fcmp uno float %382, 0.000000e+00, !dbg !37
  %388 = or i1 %386, %387, !dbg !38
  %389 = select i1 %388, float %382, float %385, !dbg !39
  %390 = bitcast float %389 to i32, !dbg !31
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 1, i32 31), !dbg !31
  %392 = bitcast i32 %391 to float, !dbg !31
  %393 = fcmp ogt float %389, %392, !dbg !35
  %394 = fcmp uno float %389, 0.000000e+00, !dbg !37
  %395 = or i1 %393, %394, !dbg !38
  %396 = select i1 %395, float %389, float %392, !dbg !39
  %397 = fsub float %157, %200, !dbg !40
  %398 = fsub float %158, %228, !dbg !40
  %399 = fsub float %159, %256, !dbg !40
  %400 = fsub float %160, %284, !dbg !40
  %401 = fsub float %161, %312, !dbg !40
  %402 = fsub float %162, %340, !dbg !40
  %403 = fsub float %163, %368, !dbg !40
  %404 = fsub float %164, %396, !dbg !40
  %405 = fmul float %397, 5.000000e-01, !dbg !41
  %406 = fmul float %398, 5.000000e-01, !dbg !41
  %407 = fmul float %399, 5.000000e-01, !dbg !41
  %408 = fmul float %400, 5.000000e-01, !dbg !41
  %409 = fmul float %401, 5.000000e-01, !dbg !41
  %410 = fmul float %402, 5.000000e-01, !dbg !41
  %411 = fmul float %403, 5.000000e-01, !dbg !41
  %412 = fmul float %404, 5.000000e-01, !dbg !41
  %413 = fmul float %405, 0x3FF7154760000000, !dbg !42
  %414 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %413) #2, !dbg !42
  %415 = fmul float %406, 0x3FF7154760000000, !dbg !42
  %416 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %415) #2, !dbg !42
  %417 = fmul float %407, 0x3FF7154760000000, !dbg !42
  %418 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %417) #2, !dbg !42
  %419 = fmul float %408, 0x3FF7154760000000, !dbg !42
  %420 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %419) #2, !dbg !42
  %421 = fmul float %409, 0x3FF7154760000000, !dbg !42
  %422 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %421) #2, !dbg !42
  %423 = fmul float %410, 0x3FF7154760000000, !dbg !42
  %424 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %423) #2, !dbg !42
  %425 = fmul float %411, 0x3FF7154760000000, !dbg !42
  %426 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %425) #2, !dbg !42
  %427 = fmul float %412, 0x3FF7154760000000, !dbg !42
  %428 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %427) #2, !dbg !42
  %429 = select i1 %85, float %414, float 0.000000e+00, !dbg !43
  %430 = select i1 %86, float %416, float 0.000000e+00, !dbg !43
  %431 = select i1 %87, float %418, float 0.000000e+00, !dbg !43
  %432 = select i1 %88, float %420, float 0.000000e+00, !dbg !43
  %433 = select i1 %89, float %422, float 0.000000e+00, !dbg !43
  %434 = select i1 %90, float %424, float 0.000000e+00, !dbg !43
  %435 = select i1 %91, float %426, float 0.000000e+00, !dbg !43
  %436 = select i1 %92, float %428, float 0.000000e+00, !dbg !43
  %437 = bitcast float %429 to i32, !dbg !44
  %438 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 8, i32 31), !dbg !44
  %439 = bitcast i32 %438 to float, !dbg !44
  %440 = fadd float %429, %439, !dbg !48
  %441 = bitcast float %440 to i32, !dbg !44
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 4, i32 31), !dbg !44
  %443 = bitcast i32 %442 to float, !dbg !44
  %444 = fadd float %440, %443, !dbg !48
  %445 = bitcast float %444 to i32, !dbg !44
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 2, i32 31), !dbg !44
  %447 = bitcast i32 %446 to float, !dbg !44
  %448 = fadd float %444, %447, !dbg !48
  %449 = bitcast float %448 to i32, !dbg !44
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 1, i32 31), !dbg !44
  %451 = bitcast i32 %450 to float, !dbg !44
  %452 = fadd float %448, %451, !dbg !48
  %453 = bitcast float %430 to i32, !dbg !44
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 8, i32 31), !dbg !44
  %455 = bitcast i32 %454 to float, !dbg !44
  %456 = fadd float %430, %455, !dbg !48
  %457 = bitcast float %456 to i32, !dbg !44
  %458 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %457, i32 4, i32 31), !dbg !44
  %459 = bitcast i32 %458 to float, !dbg !44
  %460 = fadd float %456, %459, !dbg !48
  %461 = bitcast float %460 to i32, !dbg !44
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 2, i32 31), !dbg !44
  %463 = bitcast i32 %462 to float, !dbg !44
  %464 = fadd float %460, %463, !dbg !48
  %465 = bitcast float %464 to i32, !dbg !44
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 1, i32 31), !dbg !44
  %467 = bitcast i32 %466 to float, !dbg !44
  %468 = fadd float %464, %467, !dbg !48
  %469 = bitcast float %431 to i32, !dbg !44
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 8, i32 31), !dbg !44
  %471 = bitcast i32 %470 to float, !dbg !44
  %472 = fadd float %431, %471, !dbg !48
  %473 = bitcast float %472 to i32, !dbg !44
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 4, i32 31), !dbg !44
  %475 = bitcast i32 %474 to float, !dbg !44
  %476 = fadd float %472, %475, !dbg !48
  %477 = bitcast float %476 to i32, !dbg !44
  %478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %477, i32 2, i32 31), !dbg !44
  %479 = bitcast i32 %478 to float, !dbg !44
  %480 = fadd float %476, %479, !dbg !48
  %481 = bitcast float %480 to i32, !dbg !44
  %482 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %481, i32 1, i32 31), !dbg !44
  %483 = bitcast i32 %482 to float, !dbg !44
  %484 = fadd float %480, %483, !dbg !48
  %485 = bitcast float %432 to i32, !dbg !44
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 8, i32 31), !dbg !44
  %487 = bitcast i32 %486 to float, !dbg !44
  %488 = fadd float %432, %487, !dbg !48
  %489 = bitcast float %488 to i32, !dbg !44
  %490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 4, i32 31), !dbg !44
  %491 = bitcast i32 %490 to float, !dbg !44
  %492 = fadd float %488, %491, !dbg !48
  %493 = bitcast float %492 to i32, !dbg !44
  %494 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %493, i32 2, i32 31), !dbg !44
  %495 = bitcast i32 %494 to float, !dbg !44
  %496 = fadd float %492, %495, !dbg !48
  %497 = bitcast float %496 to i32, !dbg !44
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 1, i32 31), !dbg !44
  %499 = bitcast i32 %498 to float, !dbg !44
  %500 = fadd float %496, %499, !dbg !48
  %501 = bitcast float %433 to i32, !dbg !44
  %502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %501, i32 8, i32 31), !dbg !44
  %503 = bitcast i32 %502 to float, !dbg !44
  %504 = fadd float %433, %503, !dbg !48
  %505 = bitcast float %504 to i32, !dbg !44
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 4, i32 31), !dbg !44
  %507 = bitcast i32 %506 to float, !dbg !44
  %508 = fadd float %504, %507, !dbg !48
  %509 = bitcast float %508 to i32, !dbg !44
  %510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %509, i32 2, i32 31), !dbg !44
  %511 = bitcast i32 %510 to float, !dbg !44
  %512 = fadd float %508, %511, !dbg !48
  %513 = bitcast float %512 to i32, !dbg !44
  %514 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %513, i32 1, i32 31), !dbg !44
  %515 = bitcast i32 %514 to float, !dbg !44
  %516 = fadd float %512, %515, !dbg !48
  %517 = bitcast float %434 to i32, !dbg !44
  %518 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %517, i32 8, i32 31), !dbg !44
  %519 = bitcast i32 %518 to float, !dbg !44
  %520 = fadd float %434, %519, !dbg !48
  %521 = bitcast float %520 to i32, !dbg !44
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 4, i32 31), !dbg !44
  %523 = bitcast i32 %522 to float, !dbg !44
  %524 = fadd float %520, %523, !dbg !48
  %525 = bitcast float %524 to i32, !dbg !44
  %526 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 2, i32 31), !dbg !44
  %527 = bitcast i32 %526 to float, !dbg !44
  %528 = fadd float %524, %527, !dbg !48
  %529 = bitcast float %528 to i32, !dbg !44
  %530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 1, i32 31), !dbg !44
  %531 = bitcast i32 %530 to float, !dbg !44
  %532 = fadd float %528, %531, !dbg !48
  %533 = bitcast float %435 to i32, !dbg !44
  %534 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %533, i32 8, i32 31), !dbg !44
  %535 = bitcast i32 %534 to float, !dbg !44
  %536 = fadd float %435, %535, !dbg !48
  %537 = bitcast float %536 to i32, !dbg !44
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 4, i32 31), !dbg !44
  %539 = bitcast i32 %538 to float, !dbg !44
  %540 = fadd float %536, %539, !dbg !48
  %541 = bitcast float %540 to i32, !dbg !44
  %542 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %541, i32 2, i32 31), !dbg !44
  %543 = bitcast i32 %542 to float, !dbg !44
  %544 = fadd float %540, %543, !dbg !48
  %545 = bitcast float %544 to i32, !dbg !44
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 1, i32 31), !dbg !44
  %547 = bitcast i32 %546 to float, !dbg !44
  %548 = fadd float %544, %547, !dbg !48
  %549 = bitcast float %436 to i32, !dbg !44
  %550 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %549, i32 8, i32 31), !dbg !44
  %551 = bitcast i32 %550 to float, !dbg !44
  %552 = fadd float %436, %551, !dbg !48
  %553 = bitcast float %552 to i32, !dbg !44
  %554 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %553, i32 4, i32 31), !dbg !44
  %555 = bitcast i32 %554 to float, !dbg !44
  %556 = fadd float %552, %555, !dbg !48
  %557 = bitcast float %556 to i32, !dbg !44
  %558 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %557, i32 2, i32 31), !dbg !44
  %559 = bitcast i32 %558 to float, !dbg !44
  %560 = fadd float %556, %559, !dbg !48
  %561 = bitcast float %560 to i32, !dbg !44
  %562 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %561, i32 1, i32 31), !dbg !44
  %563 = bitcast i32 %562 to float, !dbg !44
  %564 = fadd float %560, %563, !dbg !48
  %565 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %414, float %452) #2, !dbg !50
  %566 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %416, float %468) #2, !dbg !50
  %567 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %418, float %484) #2, !dbg !50
  %568 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %420, float %500) #2, !dbg !50
  %569 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %422, float %516) #2, !dbg !50
  %570 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %424, float %532) #2, !dbg !50
  %571 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %426, float %548) #2, !dbg !50
  %572 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %428, float %564) #2, !dbg !50
  %573 = mul nsw i32 %.decomposed, 9, !dbg !51
  %574 = mul nsw i32 %.decomposed2, 9, !dbg !51
  %575 = mul nsw i32 %.decomposed4, 9, !dbg !51
  %576 = mul nsw i32 %.decomposed6, 9, !dbg !51
  %577 = mul nsw i32 %.decomposed8, 9, !dbg !51
  %578 = mul nsw i32 %.decomposed10, 9, !dbg !51
  %579 = mul nsw i32 %.decomposed12, 9, !dbg !51
  %580 = mul nsw i32 %.decomposed14, 9, !dbg !51
  %581 = add nsw i32 %573, %27, !dbg !52
  %582 = add nsw i32 %574, %27, !dbg !52
  %583 = add nsw i32 %575, %27, !dbg !52
  %584 = add nsw i32 %576, %27, !dbg !52
  %585 = add nsw i32 %577, %27, !dbg !52
  %586 = add nsw i32 %578, %27, !dbg !52
  %587 = add nsw i32 %579, %27, !dbg !52
  %588 = add nsw i32 %580, %27, !dbg !52
  %589 = mul i32 %37, 1312, !dbg !53
  %590 = mul i32 %38, 1312, !dbg !53
  %591 = mul i32 %39, 1312, !dbg !53
  %592 = mul i32 %40, 1312, !dbg !53
  %593 = mul i32 %41, 1312, !dbg !53
  %594 = mul i32 %42, 1312, !dbg !53
  %595 = mul i32 %43, 1312, !dbg !53
  %596 = mul i32 %44, 1312, !dbg !53
  %597 = add i32 %581, %589, !dbg !54
  %598 = add i32 %582, %590, !dbg !54
  %599 = add i32 %583, %591, !dbg !54
  %600 = add i32 %584, %592, !dbg !54
  %601 = add i32 %585, %593, !dbg !54
  %602 = add i32 %586, %594, !dbg !54
  %603 = add i32 %587, %595, !dbg !54
  %604 = add i32 %588, %596, !dbg !54
  %605 = sext i32 %597 to i64, !dbg !55
  %606 = getelementptr float, ptr addrspace(1) %2, i64 %605, !dbg !55
  %607 = sext i32 %598 to i64, !dbg !55
  %608 = getelementptr float, ptr addrspace(1) %2, i64 %607, !dbg !55
  %609 = sext i32 %599 to i64, !dbg !55
  %610 = getelementptr float, ptr addrspace(1) %2, i64 %609, !dbg !55
  %611 = sext i32 %600 to i64, !dbg !55
  %612 = getelementptr float, ptr addrspace(1) %2, i64 %611, !dbg !55
  %613 = sext i32 %601 to i64, !dbg !55
  %614 = getelementptr float, ptr addrspace(1) %2, i64 %613, !dbg !55
  %615 = sext i32 %602 to i64, !dbg !55
  %616 = getelementptr float, ptr addrspace(1) %2, i64 %615, !dbg !55
  %617 = sext i32 %603 to i64, !dbg !55
  %618 = getelementptr float, ptr addrspace(1) %2, i64 %617, !dbg !55
  %619 = sext i32 %604 to i64, !dbg !55
  %620 = getelementptr float, ptr addrspace(1) %2, i64 %619, !dbg !55
  %621 = bitcast float %565 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %621, ptr addrspace(1) %606, i1 %85) #2, !dbg !56
  %622 = bitcast float %566 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %622, ptr addrspace(1) %608, i1 %86) #2, !dbg !56
  %623 = bitcast float %567 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %623, ptr addrspace(1) %610, i1 %87) #2, !dbg !56
  %624 = bitcast float %568 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %624, ptr addrspace(1) %612, i1 %88) #2, !dbg !56
  %625 = bitcast float %569 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %625, ptr addrspace(1) %614, i1 %89) #2, !dbg !56
  %626 = bitcast float %570 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %626, ptr addrspace(1) %616, i1 %90) #2, !dbg !56
  %627 = bitcast float %571 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %627, ptr addrspace(1) %618, i1 %91) #2, !dbg !56
  %628 = bitcast float %572 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %628, ptr addrspace(1) %620, i1 %92) #2, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py", directory: "inductor_cache/m2")
!4 = !{ptr @triton_per_fused__softmax_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_2", linkageName: "triton_per_fused__softmax_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 37, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 50, scope: !7)
!24 = !DILocation(line: 34, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 42, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 41, scope: !7)
!31 = !DILocation(line: 131, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 41, column: 37, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 24, scope: !7)
!43 = !DILocation(line: 47, column: 43, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = !DILocation(line: 48, column: 26, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !47)
!49 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 32, scope: !7)
!52 = !DILocation(line: 50, column: 30, scope: !7)
!53 = !DILocation(line: 50, column: 42, scope: !7)
!54 = !DILocation(line: 50, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 25, scope: !7)
!56 = !DILocation(line: 50, column: 54, scope: !7)
!57 = !DILocation(line: 50, column: 4, scope: !7)
