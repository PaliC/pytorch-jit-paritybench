; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 14, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %16 = shl i32 %15, 4, !dbg !15
  %17 = and i32 %8, 15, !dbg !16
  %18 = lshr i32 %8, 3, !dbg !16
  %19 = and i32 %18, 15, !dbg !16
  %20 = or disjoint i32 %16, %17, !dbg !17
  %21 = or disjoint i32 %16, %19, !dbg !17
  %22 = icmp slt i32 %20, 16, !dbg !18
  %23 = icmp slt i32 %21, 16, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %24 = sdiv i32 %.frozen, 4, !dbg !19
  %25 = mul i32 %24, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %.frozen7 = freeze i32 %14, !dbg !21
  %26 = sdiv i32 %.frozen7, 512, !dbg !21
  %27 = mul i32 %26, 512, !dbg !22
  %.decomposed8 = sub i32 %.frozen7, %27, !dbg !22
  %28 = shl nsw i32 %.decomposed, 1, !dbg !23
  %29 = shl i32 %24, 4, !dbg !24
  %30 = add i32 %28, %29, !dbg !25
  %31 = shl i32 %13, 6, !dbg !26
  %32 = or disjoint i32 %31, 512, !dbg !26
  %33 = add i32 %30, %31, !dbg !27
  %34 = add i32 %30, %32, !dbg !27
  %35 = sext i32 %33 to i64, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !28
  %37 = sext i32 %34 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %22) #2, !dbg !29
  %40 = bitcast i32 %39 to float, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %22) #2, !dbg !29
  %42 = bitcast i32 %41 to float, !dbg !29
  %43 = or disjoint i32 %28, 1, !dbg !30
  %44 = add i32 %43, %29, !dbg !31
  %45 = add i32 %44, %31, !dbg !32
  %46 = add i32 %44, %32, !dbg !32
  %47 = sext i32 %45 to i64, !dbg !33
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !33
  %49 = sext i32 %46 to i64, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %22) #2, !dbg !34
  %52 = bitcast i32 %51 to float, !dbg !34
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #2, !dbg !34
  %54 = bitcast i32 %53 to float, !dbg !34
  %55 = add i32 %30, 8, !dbg !35
  %56 = add i32 %55, %31, !dbg !36
  %57 = add i32 %55, %32, !dbg !36
  %58 = sext i32 %56 to i64, !dbg !37
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !37
  %60 = sext i32 %57 to i64, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !37
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %22) #2, !dbg !38
  %63 = bitcast i32 %62 to float, !dbg !38
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %22) #2, !dbg !38
  %65 = bitcast i32 %64 to float, !dbg !38
  %66 = add i32 %30, 9, !dbg !39
  %67 = add i32 %66, %31, !dbg !40
  %68 = add i32 %66, %32, !dbg !40
  %69 = sext i32 %67 to i64, !dbg !41
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !41
  %71 = sext i32 %68 to i64, !dbg !41
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !41
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %22) #2, !dbg !42
  %74 = bitcast i32 %73 to float, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #2, !dbg !42
  %76 = bitcast i32 %75 to float, !dbg !42
  %77 = fcmp ogt float %52, %40, !dbg !43
  %78 = fcmp ogt float %54, %42, !dbg !43
  %79 = fcmp uno float %52, 0.000000e+00, !dbg !47
  %80 = fcmp uno float %54, 0.000000e+00, !dbg !47
  %81 = or i1 %77, %79, !dbg !48
  %82 = or i1 %78, %80, !dbg !48
  %83 = select i1 %81, float %52, float %40, !dbg !49
  %84 = select i1 %82, float %54, float %42, !dbg !49
  %85 = fcmp olt float %83, %63, !dbg !50
  %86 = fcmp olt float %84, %65, !dbg !50
  %87 = fcmp uno float %63, 0.000000e+00, !dbg !52
  %88 = fcmp uno float %65, 0.000000e+00, !dbg !52
  %89 = or i1 %87, %85, !dbg !53
  %90 = or i1 %88, %86, !dbg !53
  %91 = select i1 %89, float %63, float %83, !dbg !54
  %92 = select i1 %90, float %65, float %84, !dbg !54
  %93 = fcmp olt float %91, %74, !dbg !55
  %94 = fcmp olt float %92, %76, !dbg !55
  %95 = fcmp uno float %74, 0.000000e+00, !dbg !57
  %96 = fcmp uno float %76, 0.000000e+00, !dbg !57
  %97 = or i1 %95, %93, !dbg !58
  %98 = or i1 %96, %94, !dbg !58
  %99 = zext i1 %77 to i8, !dbg !59
  %100 = zext i1 %78 to i8, !dbg !59
  %101 = select i1 %85, i8 2, i8 %99, !dbg !60
  %102 = select i1 %86, i8 2, i8 %100, !dbg !60
  %103 = select i1 %93, i8 3, i8 %101, !dbg !61
  %104 = select i1 %94, i8 3, i8 %102, !dbg !61
  %105 = shl i32 %21, 9, !dbg !62
  %106 = add i32 %105, %.decomposed8, !dbg !63
  %107 = shl i32 %26, 13, !dbg !64
  %108 = add i32 %106, %107, !dbg !65
  %109 = sext i32 %108 to i64, !dbg !66
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !66
  %111 = shl i32 %8, 4, !dbg !67
  %112 = and i32 %111, 240, !dbg !67
  %113 = or disjoint i32 %112, %10, !dbg !67
  %114 = and i32 %11, 254, !dbg !67
  %115 = lshr exact i32 %112, 3, !dbg !67
  %116 = add nuw nsw i32 %115, %113, !dbg !67
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !67
  %118 = bitcast float %91 to i32, !dbg !67
  %119 = select i1 %97, i32 %73, i32 %118, !dbg !68
  %120 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %120, i1 true) #2, !dbg !67
  %121 = or disjoint i32 %113, 8, !dbg !67
  %122 = add nuw nsw i32 %121, %115, !dbg !67
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !67
  %124 = bitcast float %92 to i32, !dbg !67
  %125 = select i1 %98, i32 %75, i32 %124, !dbg !68
  %126 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %126, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %127 = lshr i32 %11, 3, !dbg !67
  %128 = and i32 %127, 30, !dbg !67
  %129 = add nuw nsw i32 %128, %114, !dbg !67
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %129, !dbg !67
  %.extract = load i32, ptr addrspace(3) %130, align 8, !dbg !67
  %131 = getelementptr inbounds i8, ptr addrspace(3) %130, i32 4, !dbg !67
  %.extract6 = load i32, ptr addrspace(3) %131, align 4, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %110, i1 %23) #2, !dbg !67
  %132 = getelementptr i8, ptr addrspace(1) %2, i64 %109, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %133 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %116, !dbg !70
  %134 = insertelement <1 x i8> poison, i8 %103, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %133, <1 x i8> %134, i1 true) #2, !dbg !70
  %135 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %122, !dbg !70
  %136 = insertelement <1 x i8> poison, i8 %104, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %135, <1 x i8> %136, i1 true) #2, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %137 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %129, !dbg !70
  %138 = load i16, ptr addrspace(3) %137, align 2, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %138, ptr addrspace(1) %132, i1 %23) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2zp6b5uehzfukfphpkqbkiisfjayny25ci6ttiymnk342uacxf4.py", directory: "inductor_cache/2z")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_17", linkageName: "triton_poi_fused_max_pool2d_with_indices_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 34, column: 48, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 53, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 49, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 57, scope: !7)
!35 = !DILocation(line: 36, column: 41, scope: !7)
!36 = !DILocation(line: 36, column: 49, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 57, scope: !7)
!39 = !DILocation(line: 37, column: 41, scope: !7)
!40 = !DILocation(line: 37, column: 49, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 57, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 38, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 44, column: 33, scope: !7)
!60 = !DILocation(line: 47, column: 35, scope: !7)
!61 = !DILocation(line: 50, column: 35, scope: !7)
!62 = !DILocation(line: 51, column: 34, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 44, scope: !7)
!65 = !DILocation(line: 51, column: 39, scope: !7)
!66 = !DILocation(line: 51, column: 25, scope: !7)
!67 = !DILocation(line: 51, column: 55, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 56, scope: !7)
!71 = !DILocation(line: 52, column: 4, scope: !7)
