; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_add_mean_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 31, !dbg !10
  %6 = lshr i32 %4, 5, !dbg !10
  %7 = and i32 %4, 63, !dbg !10
  %8 = and i32 %4, 48, !dbg !11
  %9 = icmp ne i32 %8, 48, !dbg !11
  %.lhs.trunc = trunc nuw nsw i32 %7 to i8, !dbg !12
  %10 = udiv i8 %.lhs.trunc, 3, !dbg !13
  %11 = mul i8 %10, 3, !dbg !12
  %.decomposed = sub i8 %.lhs.trunc, %11, !dbg !12
  %.zext = zext nneg i8 %.decomposed to i32, !dbg !12
  %12 = trunc nuw nsw i32 %7 to i8, !dbg !12
  %.lhs.trunc1 = or disjoint i8 %12, 64, !dbg !12
  %13 = udiv i8 %.lhs.trunc1, 3, !dbg !13
  %14 = mul i8 %13, 3, !dbg !12
  %.decomposed20 = sub i8 %.lhs.trunc1, %14, !dbg !12
  %.zext2 = zext nneg i8 %.decomposed20 to i32, !dbg !12
  %15 = trunc nuw nsw i32 %7 to i8, !dbg !12
  %.lhs.trunc3 = or disjoint i8 %15, -128, !dbg !12
  %16 = udiv i8 %.lhs.trunc3, 3, !dbg !13
  %17 = mul i8 %16, 3, !dbg !12
  %.decomposed21 = sub i8 %.lhs.trunc3, %17, !dbg !12
  %.zext4 = zext nneg i8 %.decomposed21 to i32, !dbg !12
  %18 = trunc i32 %4 to i8, !dbg !12
  %.lhs.trunc5 = or i8 %18, -64, !dbg !12
  %19 = udiv i8 %.lhs.trunc5, 3, !dbg !13
  %20 = mul i8 %19, 3, !dbg !12
  %.decomposed22 = sub i8 %.lhs.trunc5, %20, !dbg !12
  %.zext6 = zext nneg i8 %.decomposed22 to i32, !dbg !12
  %.zext14 = zext nneg i8 %19 to i32, !dbg !13
  %.tr = trunc i32 %4 to i8, !dbg !14
  %.lhs.trunc15 = shl i8 %.tr, 2, !dbg !14
  %21 = udiv i8 %.lhs.trunc15, 12, !dbg !15
  %22 = mul i8 %21, 12, !dbg !14
  %.decomposed23 = sub i8 %.lhs.trunc15, %22, !dbg !14
  %.zext16 = zext nneg i8 %.decomposed23 to i32, !dbg !14
  %.zext18 = zext nneg i8 %21 to i32, !dbg !15
  %23 = shl nuw nsw i8 %10, 2, !dbg !16
  %24 = zext nneg i8 %23 to i32, !dbg !16
  %25 = shl nuw i8 %13, 2, !dbg !16
  %26 = zext i8 %25 to i32, !dbg !16
  %27 = shl nuw i8 %16, 2, !dbg !16
  %28 = zext i8 %27 to i32, !dbg !16
  %29 = shl nuw nsw i32 %.zext14, 2, !dbg !16
  %30 = or disjoint i32 %24, %.zext, !dbg !17
  %31 = or disjoint i32 %26, %.zext2, !dbg !17
  %32 = or disjoint i32 %28, %.zext4, !dbg !17
  %33 = or disjoint i32 %29, %.zext6, !dbg !17
  %34 = zext nneg i32 %30 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !18
  %36 = zext nneg i32 %31 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !18
  %38 = zext nneg i32 %32 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !18
  %40 = zext nneg i32 %33 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !18
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true) #4, !dbg !19
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 true, i32 0, i1 true) #4, !dbg !19
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 true, i32 0, i1 true) #4, !dbg !19
  %45 = bitcast i32 %44 to float, !dbg !19
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 false, i32 0, i1 false) #4, !dbg !19
  %47 = add nuw nsw i32 %.zext, 1, !dbg !20
  %48 = add nuw nsw i32 %.zext2, 1, !dbg !20
  %49 = add nuw nsw i32 %.zext4, 1, !dbg !20
  %50 = add nuw nsw i32 %.zext6, 1, !dbg !20
  %51 = add nuw nsw i32 %47, %24, !dbg !21
  %52 = add nuw nsw i32 %48, %26, !dbg !21
  %53 = add nuw nsw i32 %49, %28, !dbg !21
  %54 = add nuw nsw i32 %50, %29, !dbg !21
  %55 = zext nneg i32 %51 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !22
  %57 = zext nneg i32 %52 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !22
  %59 = zext nneg i32 %53 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !22
  %61 = zext nneg i32 %54 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 true, i32 0, i1 true) #4, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 true, i32 0, i1 true) #4, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 true, i32 0, i1 true) #4, !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 false, i32 0, i1 false) #4, !dbg !23
  %68 = shl nuw nsw i32 %.zext18, 4, !dbg !24
  %69 = or disjoint i32 %68, %.zext16, !dbg !25
  %70 = zext nneg i32 %69 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !26
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #4, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !27
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !27
  %77 = bitcast i32 %75 to float, !dbg !27
  %78 = bitcast i32 %76 to float, !dbg !27
  %79 = add nuw nsw i32 %.zext16, 4, !dbg !28
  %80 = add nuw nsw i32 %79, %68, !dbg !29
  %81 = zext nneg i32 %80 to i64, !dbg !30
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !30
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #4, !dbg !31
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !31
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !31
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !31
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !31
  %88 = bitcast i32 %86 to float, !dbg !31
  %89 = bitcast i32 %87 to float, !dbg !31
  %90 = fsub float %45, %66, !dbg !32
  %91 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !19
  %92 = insertelement <2 x i32> %91, i32 %43, i64 1, !dbg !19
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !19
  %94 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !23
  %95 = insertelement <2 x i32> %94, i32 %64, i64 1, !dbg !23
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !23
  %97 = fsub <2 x float> %93, %96, !dbg !32
  %98 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %97), !dbg !33
  %99 = tail call float @llvm.fabs.f32(float %90), !dbg !33
  %shift = shufflevector <2 x float> %98, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %100 = fadd <2 x float> %98, %shift, !dbg !34
  %101 = extractelement <2 x float> %100, i64 0, !dbg !34
  %102 = fadd float %101, %99, !dbg !34
  %103 = bitcast float %102 to i32, !dbg !39
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 16, i32 31), !dbg !39
  %105 = bitcast i32 %104 to float, !dbg !39
  %106 = fadd float %102, %105, !dbg !34
  %107 = bitcast float %106 to i32, !dbg !39
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !39
  %109 = bitcast i32 %108 to float, !dbg !39
  %110 = fadd float %106, %109, !dbg !34
  %111 = bitcast float %110 to i32, !dbg !39
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !39
  %113 = bitcast i32 %112 to float, !dbg !39
  %114 = fadd float %110, %113, !dbg !34
  %115 = bitcast float %114 to i32, !dbg !39
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !39
  %117 = bitcast i32 %116 to float, !dbg !39
  %118 = fadd float %114, %117, !dbg !34
  %119 = bitcast float %118 to i32, !dbg !39
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !39
  %121 = bitcast i32 %120 to float, !dbg !39
  %122 = fadd float %118, %121, !dbg !34
  %123 = icmp eq i32 %5, 0, !dbg !39
  %124 = and i32 %6, 1, !dbg !39
  %125 = zext nneg i32 %124 to i64, !dbg !39
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i64 %125, !dbg !39
  %127 = bitcast float %122 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 %123) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %128 = icmp slt i32 %4, 2, !dbg !39
  %129 = sext i32 %4 to i64, !dbg !39
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %129, !dbg !39
  %131 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %130, i1 %128) #4, !dbg !39
  %132 = bitcast i32 %131 to float, !dbg !39
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !39
  %134 = bitcast i32 %133 to float, !dbg !39
  %135 = fadd float %132, %134, !dbg !34
  %136 = and i32 %4, 1, !dbg !39
  %137 = icmp eq i32 %136, 0, !dbg !39
  %138 = and i1 %128, %137, !dbg !39
  %139 = bitcast float %135 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %139, i1 %138) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %140 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %141 = fsub float %77, %88, !dbg !40
  %142 = fsub float %78, %89, !dbg !40
  %143 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !27
  %144 = insertelement <2 x i32> %143, i32 %74, i64 1, !dbg !27
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !27
  %146 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !31
  %147 = insertelement <2 x i32> %146, i32 %85, i64 1, !dbg !31
  %148 = bitcast <2 x i32> %147 to <2 x float>, !dbg !31
  %149 = fsub <2 x float> %145, %148, !dbg !40
  %150 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %149), !dbg !41
  %151 = tail call float @llvm.fabs.f32(float %141), !dbg !41
  %152 = tail call float @llvm.fabs.f32(float %142), !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %shift19 = shufflevector <2 x float> %150, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %153 = fadd <2 x float> %150, %shift19, !dbg !44
  %154 = extractelement <2 x float> %153, i64 0, !dbg !44
  %155 = fadd float %151, %154, !dbg !44
  %156 = fadd float %152, %155, !dbg !44
  %157 = select i1 %9, float %156, float 0.000000e+00, !dbg !44
  %158 = bitcast float %157 to i32, !dbg !42
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 16, i32 31), !dbg !42
  %160 = bitcast i32 %159 to float, !dbg !42
  %161 = fadd float %157, %160, !dbg !44
  %162 = bitcast float %161 to i32, !dbg !42
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !42
  %164 = bitcast i32 %163 to float, !dbg !42
  %165 = fadd float %161, %164, !dbg !44
  %166 = bitcast float %165 to i32, !dbg !42
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !42
  %168 = bitcast i32 %167 to float, !dbg !42
  %169 = fadd float %165, %168, !dbg !44
  %170 = bitcast float %169 to i32, !dbg !42
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !42
  %172 = bitcast i32 %171 to float, !dbg !42
  %173 = fadd float %169, %172, !dbg !44
  %174 = bitcast float %173 to i32, !dbg !42
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !42
  %176 = bitcast i32 %175 to float, !dbg !42
  %177 = fadd float %173, %176, !dbg !44
  %178 = bitcast float %177 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %178, i1 %123) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %179 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %130, i1 %128) #4, !dbg !42
  %180 = bitcast i32 %179 to float, !dbg !42
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 1, i32 31), !dbg !42
  %182 = bitcast i32 %181 to float, !dbg !42
  %183 = fadd float %180, %182, !dbg !44
  %184 = bitcast float %183 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %184, i1 %138) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %185 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 1.920000e+02) #4, !dbg !45
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float 1.920000e+02) #4, !dbg !46
  %188 = fadd float %186, %187, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %189 = bitcast float %188 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %189, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %189, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %189, i1 true) #4, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %189, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %190 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %191 = icmp eq i32 %7, 0, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %0, i1 %191) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctrzqfa26h5fg72eivfllx5azeadwme24tmi5gdzfzhxhfynqex7.py", directory: "inductor_cache/tr")
!4 = !{ptr @triton_per_fused_abs_add_mean_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_mean_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_mean_sub_0", linkageName: "triton_per_fused_abs_add_mean_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 29, column: 19, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 32, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 37, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 42, scope: !7)
!20 = !DILocation(line: 34, column: 34, scope: !7)
!21 = !DILocation(line: 34, column: 39, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 46, scope: !7)
!24 = !DILocation(line: 35, column: 38, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 43, scope: !7)
!28 = !DILocation(line: 36, column: 34, scope: !7)
!29 = !DILocation(line: 36, column: 39, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 47, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 23, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!38 = !DILocation(line: 41, column: 24, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 43, column: 24, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !43)
!43 = !DILocation(line: 46, column: 26, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !43)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 4, scope: !7)
!49 = !DILocation(line: 52, column: 71, scope: !7)
!50 = !DILocation(line: 52, column: 4, scope: !7)
