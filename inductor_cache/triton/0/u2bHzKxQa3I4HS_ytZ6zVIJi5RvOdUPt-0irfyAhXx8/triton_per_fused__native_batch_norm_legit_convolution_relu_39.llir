; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_relu_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 15, !dbg !11
  %11 = srem i32 %8, 1024, !dbg !12
  %12 = shl i32 %8, 4, !dbg !13
  %13 = or disjoint i32 %12, %10, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #4, !dbg !16
  %17 = bitcast i32 %16 to float, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #4, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = sext i32 %11 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !18
  %23 = bitcast i32 %22 to float, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !18
  %25 = bitcast i32 %24 to float, !dbg !18
  %26 = fadd float %17, %23, !dbg !19
  %27 = fadd float %19, %25, !dbg !19
  %28 = bitcast float %26 to i32, !dbg !20
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 8, i32 31), !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = fadd float %26, %30, !dbg !24
  %32 = bitcast float %31 to i32, !dbg !20
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 4, i32 31), !dbg !20
  %34 = bitcast i32 %33 to float, !dbg !20
  %35 = fadd float %31, %34, !dbg !24
  %36 = bitcast float %35 to i32, !dbg !20
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 2, i32 31), !dbg !20
  %38 = bitcast i32 %37 to float, !dbg !20
  %39 = fadd float %35, %38, !dbg !24
  %40 = bitcast float %39 to i32, !dbg !20
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 1, i32 31), !dbg !20
  %42 = bitcast i32 %41 to float, !dbg !20
  %43 = fadd float %39, %42, !dbg !24
  %44 = bitcast float %27 to i32, !dbg !20
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 8, i32 31), !dbg !20
  %46 = bitcast i32 %45 to float, !dbg !20
  %47 = fadd float %27, %46, !dbg !24
  %48 = bitcast float %47 to i32, !dbg !20
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 4, i32 31), !dbg !20
  %50 = bitcast i32 %49 to float, !dbg !20
  %51 = fadd float %47, %50, !dbg !24
  %52 = bitcast float %51 to i32, !dbg !20
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 2, i32 31), !dbg !20
  %54 = bitcast i32 %53 to float, !dbg !20
  %55 = fadd float %51, %54, !dbg !24
  %56 = bitcast float %55 to i32, !dbg !20
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !20
  %58 = bitcast i32 %57 to float, !dbg !20
  %59 = fadd float %55, %58, !dbg !24
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float 1.600000e+01) #4, !dbg !26
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 1.600000e+01) #4, !dbg !26
  %62 = fsub float %26, %60, !dbg !27
  %63 = fsub float %27, %61, !dbg !27
  %64 = fmul float %62, %62, !dbg !28
  %65 = fmul float %63, %63, !dbg !28
  %66 = bitcast float %64 to i32, !dbg !29
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 8, i32 31), !dbg !29
  %68 = bitcast i32 %67 to float, !dbg !29
  %69 = fadd float %64, %68, !dbg !31
  %70 = bitcast float %69 to i32, !dbg !29
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !29
  %72 = bitcast i32 %71 to float, !dbg !29
  %73 = fadd float %69, %72, !dbg !31
  %74 = bitcast float %73 to i32, !dbg !29
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !29
  %76 = bitcast i32 %75 to float, !dbg !29
  %77 = fadd float %73, %76, !dbg !31
  %78 = bitcast float %77 to i32, !dbg !29
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = fadd float %77, %80, !dbg !31
  %82 = bitcast float %65 to i32, !dbg !29
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !29
  %84 = bitcast i32 %83 to float, !dbg !29
  %85 = fadd float %65, %84, !dbg !31
  %86 = bitcast float %85 to i32, !dbg !29
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = fadd float %85, %88, !dbg !31
  %90 = bitcast float %89 to i32, !dbg !29
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !29
  %92 = bitcast i32 %91 to float, !dbg !29
  %93 = fadd float %89, %92, !dbg !31
  %94 = bitcast float %93 to i32, !dbg !29
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !29
  %96 = bitcast i32 %95 to float, !dbg !29
  %97 = fadd float %93, %96, !dbg !31
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 1.600000e+01) #4, !dbg !32
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 1.600000e+01) #4, !dbg !32
  %100 = fadd float %98, 0x3EE4F8B580000000, !dbg !33
  %101 = fadd float %99, 0x3EE4F8B580000000, !dbg !33
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %102, 0, !dbg !34
  br i1 %.not.i, label %105, label %103, !dbg !34

103:                                              ; preds = %7
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %100), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

105:                                              ; preds = %7
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %100), !dbg !34
  br label %__nv_rsqrtf.exit, !dbg !34

__nv_rsqrtf.exit:                                 ; preds = %103, %105
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], !dbg !34
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i1 = icmp eq i32 %107, 0, !dbg !34
  br i1 %.not.i1, label %110, label %108, !dbg !34

108:                                              ; preds = %__nv_rsqrtf.exit
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !34
  br label %__nv_rsqrtf.exit3, !dbg !34

110:                                              ; preds = %__nv_rsqrtf.exit
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !34
  br label %__nv_rsqrtf.exit3, !dbg !34

__nv_rsqrtf.exit3:                                ; preds = %108, %110
  %.0.i2 = phi float [ %109, %108 ], [ %111, %110 ], !dbg !34
  %112 = fmul float %62, %.0.i, !dbg !35
  %113 = fcmp olt float %112, 0.000000e+00, !dbg !36
  %114 = select i1 %113, float 0.000000e+00, float %112, !dbg !40
  %115 = and i32 %9, 48, !dbg !41
  %116 = icmp eq i32 %115, 0, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %28, ptr addrspace(1) %15, i1 %116) #4, !dbg !41
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !42
  %118 = bitcast float %114 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %117, i1 %116) #4, !dbg !43
  %119 = sext i32 %8 to i64, !dbg !44
  %120 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !44
  %urem = and i32 %9, 63, !dbg !45
  %121 = icmp eq i32 %urem, 0, !dbg !45
  %122 = bitcast float %.0.i2 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %120, i1 %121) #4, !dbg !45
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !46
  %124 = bitcast float %61 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %123, i1 %121) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccw3zf5lbhgkaokn3uv3lmiuqzeqatlk6jyrhwzlpqjrg4izaagy.py", directory: "inductor_cache/cw")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_relu_39, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_relu_39, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_relu_39", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_relu_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 19, scope: !7)
!13 = !DILocation(line: 32, column: 42, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 47, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 34, column: 18, scope: !7)
!20 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = !DILocation(line: 37, column: 24, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !23)
!25 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!26 = !DILocation(line: 40, column: 19, scope: !7)
!27 = !DILocation(line: 41, column: 19, scope: !7)
!28 = !DILocation(line: 42, column: 20, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !30)
!32 = !DILocation(line: 47, column: 20, scope: !7)
!33 = !DILocation(line: 49, column: 20, scope: !7)
!34 = !DILocation(line: 50, column: 28, scope: !7)
!35 = !DILocation(line: 51, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 53, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 54, column: 47, scope: !7)
!42 = !DILocation(line: 55, column: 25, scope: !7)
!43 = !DILocation(line: 55, column: 45, scope: !7)
!44 = !DILocation(line: 56, column: 25, scope: !7)
!45 = !DILocation(line: 56, column: 37, scope: !7)
!46 = !DILocation(line: 57, column: 25, scope: !7)
!47 = !DILocation(line: 57, column: 37, scope: !7)
!48 = !DILocation(line: 57, column: 4, scope: !7)
