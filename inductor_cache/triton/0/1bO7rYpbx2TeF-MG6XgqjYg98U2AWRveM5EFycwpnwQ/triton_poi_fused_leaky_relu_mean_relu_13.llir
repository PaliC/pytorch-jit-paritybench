; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_leaky_relu_mean_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %.frozen = freeze i32 %8, !dbg !14
  %9 = sdiv i32 %.frozen, 1024, !dbg !14
  %10 = mul i32 %9, 1024, !dbg !15
  %.decomposed = sub i32 %.frozen, %10, !dbg !15
  %11 = shl i32 %9, 12, !dbg !16
  %12 = add i32 %11, %.decomposed, !dbg !17
  %13 = sext i32 %12 to i64, !dbg !18
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !18
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !19
  %16 = add i32 %12, 1024, !dbg !20
  %17 = sext i32 %16 to i64, !dbg !21
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !21
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !22
  %20 = add i32 %12, 2048, !dbg !23
  %21 = sext i32 %20 to i64, !dbg !24
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !24
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !25
  %24 = bitcast i32 %23 to float, !dbg !25
  %25 = add i32 %12, 3072, !dbg !26
  %26 = sext i32 %25 to i64, !dbg !27
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !27
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !28
  %29 = bitcast i32 %28 to float, !dbg !28
  %30 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !19
  %31 = insertelement <2 x i32> %30, i32 %19, i64 1, !dbg !19
  %32 = bitcast <2 x i32> %31 to <2 x float>, !dbg !19
  %33 = fcmp ogt <2 x float> %32, zeroinitializer, !dbg !29
  %34 = fmul <2 x float> %32, splat (float 0x3F847AE140000000), !dbg !30
  %35 = select <2 x i1> %33, <2 x float> %32, <2 x float> %34, !dbg !31
  %36 = fcmp olt <2 x float> %35, zeroinitializer, !dbg !32
  %37 = select <2 x i1> %36, <2 x float> zeroinitializer, <2 x float> %35, !dbg !36
  %shift = shufflevector <2 x float> %37, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %38 = fadd <2 x float> %37, %shift, !dbg !37
  %39 = extractelement <2 x float> %38, i64 0, !dbg !37
  %40 = fcmp ogt float %24, 0.000000e+00, !dbg !38
  %41 = fmul float %24, 0x3F847AE140000000, !dbg !39
  %42 = select i1 %40, float %24, float %41, !dbg !40
  %43 = fcmp olt float %42, 0.000000e+00, !dbg !41
  %44 = select i1 %43, float 0.000000e+00, float %42, !dbg !43
  %45 = fadd float %39, %44, !dbg !44
  %46 = fcmp ogt float %29, 0.000000e+00, !dbg !45
  %47 = fmul float %29, 0x3F847AE140000000, !dbg !46
  %48 = select i1 %46, float %29, float %47, !dbg !47
  %49 = fcmp olt float %48, 0.000000e+00, !dbg !48
  %50 = select i1 %49, float 0.000000e+00, float %48, !dbg !50
  %51 = fadd float %45, %50, !dbg !51
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 4.000000e+00) #1, !dbg !52
  %53 = sext i32 %8 to i64, !dbg !53
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !53
  %55 = bitcast float %52 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %55, ptr addrspace(1) %54, i1 true) #1, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdorzmcnyoypctbdj2qyzqc55cwnum64ltsignsly6llsyqqymie.py", directory: "inductor_cache/do")
!4 = !{ptr @triton_poi_fused_leaky_relu_mean_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_mean_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_mean_relu_13", linkageName: "triton_poi_fused_leaky_relu_mean_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 40, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 31, scope: !7)
!22 = !DILocation(line: 28, column: 53, scope: !7)
!23 = !DILocation(line: 29, column: 43, scope: !7)
!24 = !DILocation(line: 29, column: 31, scope: !7)
!25 = !DILocation(line: 29, column: 53, scope: !7)
!26 = !DILocation(line: 30, column: 43, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 53, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 32, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 37, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !42)
!42 = !DILocation(line: 52, column: 41, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !42)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 20, scope: !7)
!46 = !DILocation(line: 58, column: 20, scope: !7)
!47 = !DILocation(line: 59, column: 35, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !49)
!49 = !DILocation(line: 60, column: 41, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !49)
!51 = !DILocation(line: 64, column: 20, scope: !7)
!52 = !DILocation(line: 66, column: 20, scope: !7)
!53 = !DILocation(line: 67, column: 25, scope: !7)
!54 = !DILocation(line: 67, column: 37, scope: !7)
!55 = !DILocation(line: 67, column: 4, scope: !7)
