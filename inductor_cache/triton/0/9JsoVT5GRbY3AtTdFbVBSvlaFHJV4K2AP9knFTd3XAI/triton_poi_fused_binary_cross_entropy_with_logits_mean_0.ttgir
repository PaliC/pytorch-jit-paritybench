#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_binary_cross_entropy_with_logits_mean_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<3> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<2> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<96> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<1536> : tensor<128xi32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_7 : tensor<128xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_6 : tensor<128xi32, #blocked> loc(#loc7)
    %7 = arith.muli %4, %cst_5 : tensor<128xi32, #blocked> loc(#loc8)
    %8 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc9)
    %9 = tt.addptr %8, %7 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc9)
    %10 = tt.load %9, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc10)
    %11 = arith.muli %6, %cst_5 : tensor<128xi32, #blocked> loc(#loc11)
    %12 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = tt.addptr %12, %11 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc12)
    %14 = tt.load %13, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc13)
    %15 = arith.addi %7, %cst_4 : tensor<128xi32, #blocked> loc(#loc14)
    %16 = tt.addptr %8, %15 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc15)
    %17 = tt.load %16, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = arith.addi %11, %cst_4 : tensor<128xi32, #blocked> loc(#loc17)
    %19 = tt.addptr %12, %18 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc18)
    %20 = tt.load %19, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc19)
    %21 = arith.addi %7, %cst_3 : tensor<128xi32, #blocked> loc(#loc20)
    %22 = tt.addptr %8, %21 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc21)
    %23 = tt.load %22, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc22)
    %24 = arith.addi %11, %cst_3 : tensor<128xi32, #blocked> loc(#loc23)
    %25 = tt.addptr %12, %24 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc24)
    %26 = tt.load %25, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc25)
    %27 = arith.addi %7, %cst_2 : tensor<128xi32, #blocked> loc(#loc26)
    %28 = tt.addptr %8, %27 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc27)
    %29 = tt.load %28, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc28)
    %30 = arith.addi %11, %cst_2 : tensor<128xi32, #blocked> loc(#loc29)
    %31 = tt.addptr %12, %30 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc30)
    %32 = tt.load %31, %5 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc31)
    %33 = arith.subf %cst_1, %10 : tensor<128xf32, #blocked> loc(#loc32)
    %34 = arith.mulf %33, %14 : tensor<128xf32, #blocked> loc(#loc33)
    %35 = arith.cmpf olt, %cst_0, %14 : tensor<128xf32, #blocked> loc(#loc77)
    %36 = arith.select %35, %cst_0, %14 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc78)
    %37 = math.absf %14 : tensor<128xf32, #blocked> loc(#loc37)
    %38 = arith.subf %cst_0, %37 : tensor<128xf32, #blocked> loc(#loc38)
    %39 = math.exp %38 : tensor<128xf32, #blocked> loc(#loc39)
    %40 = tt.extern_elementwise %39 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<128xf32, #blocked>) -> tensor<128xf32, #blocked> loc(#loc40)
    %41 = arith.subf %36, %40 : tensor<128xf32, #blocked> loc(#loc41)
    %42 = arith.subf %34, %41 : tensor<128xf32, #blocked> loc(#loc42)
    %43 = arith.subf %cst_1, %17 : tensor<128xf32, #blocked> loc(#loc43)
    %44 = arith.mulf %43, %20 : tensor<128xf32, #blocked> loc(#loc44)
    %45 = arith.cmpf olt, %cst_0, %20 : tensor<128xf32, #blocked> loc(#loc79)
    %46 = arith.select %45, %cst_0, %20 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc80)
    %47 = math.absf %20 : tensor<128xf32, #blocked> loc(#loc46)
    %48 = arith.subf %cst_0, %47 : tensor<128xf32, #blocked> loc(#loc47)
    %49 = math.exp %48 : tensor<128xf32, #blocked> loc(#loc48)
    %50 = tt.extern_elementwise %49 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<128xf32, #blocked>) -> tensor<128xf32, #blocked> loc(#loc49)
    %51 = arith.subf %46, %50 : tensor<128xf32, #blocked> loc(#loc50)
    %52 = arith.subf %44, %51 : tensor<128xf32, #blocked> loc(#loc51)
    %53 = arith.addf %42, %52 : tensor<128xf32, #blocked> loc(#loc52)
    %54 = arith.subf %cst_1, %23 : tensor<128xf32, #blocked> loc(#loc53)
    %55 = arith.mulf %54, %26 : tensor<128xf32, #blocked> loc(#loc54)
    %56 = arith.cmpf olt, %cst_0, %26 : tensor<128xf32, #blocked> loc(#loc81)
    %57 = arith.select %56, %cst_0, %26 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc82)
    %58 = math.absf %26 : tensor<128xf32, #blocked> loc(#loc56)
    %59 = arith.subf %cst_0, %58 : tensor<128xf32, #blocked> loc(#loc57)
    %60 = math.exp %59 : tensor<128xf32, #blocked> loc(#loc58)
    %61 = tt.extern_elementwise %60 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<128xf32, #blocked>) -> tensor<128xf32, #blocked> loc(#loc59)
    %62 = arith.subf %57, %61 : tensor<128xf32, #blocked> loc(#loc60)
    %63 = arith.subf %55, %62 : tensor<128xf32, #blocked> loc(#loc61)
    %64 = arith.addf %53, %63 : tensor<128xf32, #blocked> loc(#loc62)
    %65 = arith.subf %cst_1, %29 : tensor<128xf32, #blocked> loc(#loc63)
    %66 = arith.mulf %65, %32 : tensor<128xf32, #blocked> loc(#loc64)
    %67 = arith.cmpf olt, %cst_0, %32 : tensor<128xf32, #blocked> loc(#loc83)
    %68 = arith.select %67, %cst_0, %32 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc84)
    %69 = math.absf %32 : tensor<128xf32, #blocked> loc(#loc66)
    %70 = arith.subf %cst_0, %69 : tensor<128xf32, #blocked> loc(#loc67)
    %71 = math.exp %70 : tensor<128xf32, #blocked> loc(#loc68)
    %72 = tt.extern_elementwise %71 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<128xf32, #blocked>) -> tensor<128xf32, #blocked> loc(#loc69)
    %73 = arith.subf %68, %72 : tensor<128xf32, #blocked> loc(#loc70)
    %74 = arith.subf %66, %73 : tensor<128xf32, #blocked> loc(#loc71)
    %75 = arith.addf %64, %74 : tensor<128xf32, #blocked> loc(#loc72)
    %76 = arith.divf %75, %cst : tensor<128xf32, #blocked> loc(#loc73)
    %77 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc74)
    %78 = tt.addptr %77, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc74)
    tt.store %78, %76, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc75)
    tt.return loc(#loc76)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":21:28)
#loc3 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":21:33)
#loc4 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":22:36)
#loc5 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":22:23)
#loc6 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":23:21)
#loc7 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":25:19)
#loc8 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":26:32)
#loc9 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":26:30)
#loc10 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":26:37)
#loc11 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":27:32)
#loc12 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":27:30)
#loc13 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":27:37)
#loc14 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":28:35)
#loc15 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":28:31)
#loc16 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":28:42)
#loc17 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":29:35)
#loc18 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":29:31)
#loc19 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":29:42)
#loc20 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":30:35)
#loc21 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":30:31)
#loc22 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":30:42)
#loc23 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":31:35)
#loc24 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":31:31)
#loc25 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":31:42)
#loc26 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":32:35)
#loc27 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":32:31)
#loc28 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":32:42)
#loc29 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":33:35)
#loc30 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":33:31)
#loc31 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":33:42)
#loc32 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":35:18)
#loc33 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":36:18)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc35 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":38:40)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc37 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":39:23)
#loc38 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":40:12)
#loc39 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":41:23)
#loc40 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":42:28)
#loc41 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":43:19)
#loc42 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":44:19)
#loc43 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":45:19)
#loc44 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":46:20)
#loc45 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":47:41)
#loc46 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":48:24)
#loc47 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":49:13)
#loc48 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":50:24)
#loc49 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":51:28)
#loc50 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":52:20)
#loc51 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":53:20)
#loc52 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":54:20)
#loc53 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":55:19)
#loc54 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":56:20)
#loc55 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":57:41)
#loc56 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":58:24)
#loc57 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":59:13)
#loc58 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":60:24)
#loc59 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":61:28)
#loc60 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":62:20)
#loc61 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":63:20)
#loc62 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":64:20)
#loc63 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":65:19)
#loc64 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":66:20)
#loc65 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":67:41)
#loc66 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":68:24)
#loc67 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":69:13)
#loc68 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":70:24)
#loc69 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":71:28)
#loc70 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":72:20)
#loc71 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":73:20)
#loc72 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":74:20)
#loc73 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":76:20)
#loc74 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":77:25)
#loc75 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":77:37)
#loc76 = loc("inductor_cache/of/cofms27qd34ltiqnm6zkv65iu6nghia2364ltq42slioffn5zmn3.py":77:4)
#loc77 = loc(callsite(#loc34 at #loc35))
#loc78 = loc(callsite(#loc36 at #loc35))
#loc79 = loc(callsite(#loc34 at #loc45))
#loc80 = loc(callsite(#loc36 at #loc45))
#loc81 = loc(callsite(#loc34 at #loc55))
#loc82 = loc(callsite(#loc36 at #loc55))
#loc83 = loc(callsite(#loc34 at #loc65))
#loc84 = loc(callsite(#loc36 at #loc65))
