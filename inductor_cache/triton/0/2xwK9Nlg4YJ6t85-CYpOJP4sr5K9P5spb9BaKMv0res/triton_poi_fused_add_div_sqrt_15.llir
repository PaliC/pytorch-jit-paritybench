; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %9, 252, !dbg !12
  %12 = lshr i32 %8, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %13, !dbg !13
  %16 = or disjoint i32 %15, 64, !dbg !13
  %17 = or disjoint i32 %15, 128, !dbg !13
  %18 = or disjoint i32 %15, 192, !dbg !13
  %19 = icmp slt i32 %14, 256, !dbg !14
  %20 = icmp slt i32 %15, 256, !dbg !14
  %21 = icmp slt i32 %16, 256, !dbg !14
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 4, !dbg !16
  %26 = lshr i32 %8, 6, !dbg !17
  %27 = and i32 %26, 3, !dbg !17
  %28 = or disjoint i32 %27, 4, !dbg !17
  %29 = or disjoint i32 %27, 8, !dbg !17
  %30 = or disjoint i32 %27, 12, !dbg !17
  %31 = or disjoint i32 %25, %27, !dbg !18
  %32 = or disjoint i32 %25, %28, !dbg !18
  %33 = or disjoint i32 %25, %29, !dbg !18
  %34 = or disjoint i32 %25, %30, !dbg !18
  %35 = or disjoint i32 %25, %10, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %36 = sdiv i32 %.frozen, 64, !dbg !19
  %37 = mul i32 %36, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %37, !dbg !20
  %38 = sdiv i32 %15, 64, !dbg !19
  %39 = sdiv i32 %16, 64, !dbg !19
  %40 = sdiv i32 %17, 64, !dbg !19
  %41 = sdiv i32 %18, 64, !dbg !19
  %42 = shl i32 %31, 6, !dbg !21
  %43 = shl i32 %32, 6, !dbg !21
  %44 = shl i32 %33, 6, !dbg !21
  %45 = shl i32 %34, 6, !dbg !21
  %46 = shl i32 %36, 18, !dbg !22
  %47 = add i32 %46, %.decomposed, !dbg !23
  %48 = add i32 %47, %42, !dbg !24
  %49 = add i32 %47, %43, !dbg !24
  %50 = add i32 %47, %44, !dbg !24
  %51 = add i32 %47, %45, !dbg !24
  %52 = sext i32 %48 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = sext i32 %49 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !25
  %56 = sext i32 %50 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !25
  %58 = sext i32 %51 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %19) #4, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %19) #4, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %19) #4, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !26
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %19) #4, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !26
  %80 = shl i32 %8, 6, !dbg !26
  %81 = and i32 %80, 4032, !dbg !26
  %82 = or disjoint i32 %81, %27, !dbg !26
  %83 = and i32 %9, 1020, !dbg !26
  %84 = lshr exact i32 %81, 2, !dbg !26
  %85 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %84, !dbg !26
  %86 = getelementptr float, ptr addrspace(3) %85, i32 %82, !dbg !26
  %87 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #4, !dbg !26
  %88 = or disjoint i32 %82, 16, !dbg !26
  %89 = lshr i32 %88, 4, !dbg !26
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !26
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %88, !dbg !26
  %92 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #4, !dbg !26
  %93 = or disjoint i32 %82, 32, !dbg !26
  %94 = lshr i32 %93, 4, !dbg !26
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !26
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %93, !dbg !26
  %97 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #4, !dbg !26
  %98 = or disjoint i32 %82, 48, !dbg !26
  %99 = lshr i32 %98, 4, !dbg !26
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !26
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %98, !dbg !26
  %102 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #4, !dbg !26
  %103 = or disjoint i32 %82, 4, !dbg !26
  %104 = getelementptr float, ptr addrspace(3) %85, i32 %103, !dbg !26
  %105 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #4, !dbg !26
  %106 = or disjoint i32 %82, 20, !dbg !26
  %107 = lshr i32 %106, 4, !dbg !26
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !26
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !26
  %110 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #4, !dbg !26
  %111 = or disjoint i32 %82, 36, !dbg !26
  %112 = lshr i32 %111, 4, !dbg !26
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !26
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !26
  %115 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #4, !dbg !26
  %116 = or disjoint i32 %82, 52, !dbg !26
  %117 = lshr i32 %116, 4, !dbg !26
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !26
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !26
  %120 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #4, !dbg !26
  %121 = or disjoint i32 %82, 8, !dbg !26
  %122 = getelementptr float, ptr addrspace(3) %85, i32 %121, !dbg !26
  %123 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #4, !dbg !26
  %124 = or disjoint i32 %82, 24, !dbg !26
  %125 = lshr i32 %124, 4, !dbg !26
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !26
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !26
  %128 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #4, !dbg !26
  %129 = or disjoint i32 %82, 40, !dbg !26
  %130 = lshr i32 %129, 4, !dbg !26
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !26
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !26
  %133 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #4, !dbg !26
  %134 = or disjoint i32 %82, 56, !dbg !26
  %135 = lshr i32 %134, 4, !dbg !26
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !26
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !26
  %138 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #4, !dbg !26
  %139 = or disjoint i32 %82, 12, !dbg !26
  %140 = getelementptr float, ptr addrspace(3) %85, i32 %139, !dbg !26
  %141 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #4, !dbg !26
  %142 = or disjoint i32 %82, 28, !dbg !26
  %143 = lshr i32 %142, 4, !dbg !26
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !26
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !26
  %146 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #4, !dbg !26
  %147 = or disjoint i32 %82, 44, !dbg !26
  %148 = lshr i32 %147, 4, !dbg !26
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !26
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !26
  %151 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #4, !dbg !26
  %152 = or disjoint i32 %82, 60, !dbg !26
  %153 = lshr i32 %152, 4, !dbg !26
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !26
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !26
  %156 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %157 = lshr i32 %83, 4, !dbg !26
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !26
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %83, !dbg !26
  %160 = load float, ptr addrspace(3) %159, align 4, !dbg !26
  %161 = or disjoint i32 %83, 1, !dbg !26
  %162 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %161, !dbg !26
  %163 = load float, ptr addrspace(3) %162, align 4, !dbg !26
  %164 = or disjoint i32 %83, 2, !dbg !26
  %165 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %164, !dbg !26
  %166 = load float, ptr addrspace(3) %165, align 4, !dbg !26
  %167 = or disjoint i32 %83, 3, !dbg !26
  %168 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %167, !dbg !26
  %169 = load float, ptr addrspace(3) %168, align 4, !dbg !26
  %170 = or disjoint i32 %83, 1024, !dbg !26
  %171 = lshr i32 %170, 4, !dbg !26
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %171, !dbg !26
  %173 = getelementptr inbounds float, ptr addrspace(3) %172, i32 %170, !dbg !26
  %174 = load float, ptr addrspace(3) %173, align 4, !dbg !26
  %175 = or disjoint i32 %83, 1025, !dbg !26
  %176 = lshr i32 %175, 4, !dbg !26
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %176, !dbg !26
  %178 = getelementptr inbounds float, ptr addrspace(3) %177, i32 %175, !dbg !26
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !26
  %180 = or disjoint i32 %83, 1026, !dbg !26
  %181 = lshr i32 %180, 4, !dbg !26
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !26
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %180, !dbg !26
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !26
  %185 = or disjoint i32 %83, 1027, !dbg !26
  %186 = lshr i32 %185, 4, !dbg !26
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !26
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %185, !dbg !26
  %189 = load float, ptr addrspace(3) %188, align 4, !dbg !26
  %190 = or disjoint i32 %83, 2048, !dbg !26
  %191 = lshr i32 %190, 4, !dbg !26
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !26
  %193 = getelementptr inbounds float, ptr addrspace(3) %192, i32 %190, !dbg !26
  %194 = load float, ptr addrspace(3) %193, align 4, !dbg !26
  %195 = or disjoint i32 %83, 2049, !dbg !26
  %196 = lshr i32 %195, 4, !dbg !26
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !26
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %195, !dbg !26
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !26
  %200 = or disjoint i32 %83, 2050, !dbg !26
  %201 = lshr i32 %200, 4, !dbg !26
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !26
  %203 = getelementptr inbounds float, ptr addrspace(3) %202, i32 %200, !dbg !26
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !26
  %205 = or disjoint i32 %83, 2051, !dbg !26
  %206 = lshr i32 %205, 4, !dbg !26
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !26
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %205, !dbg !26
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !26
  %210 = or disjoint i32 %83, 3072, !dbg !26
  %211 = lshr i32 %210, 4, !dbg !26
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !26
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !26
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !26
  %215 = or disjoint i32 %83, 3073, !dbg !26
  %216 = lshr i32 %215, 4, !dbg !26
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !26
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !26
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !26
  %220 = or disjoint i32 %83, 3074, !dbg !26
  %221 = lshr i32 %220, 4, !dbg !26
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !26
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !26
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !26
  %225 = or disjoint i32 %83, 3075, !dbg !26
  %226 = lshr i32 %225, 4, !dbg !26
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !26
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !26
  %229 = load float, ptr addrspace(3) %228, align 4, !dbg !26
  %230 = shl i32 %38, 12, !dbg !27
  %231 = shl i32 %39, 12, !dbg !27
  %232 = shl i32 %40, 12, !dbg !27
  %233 = shl i32 %41, 12, !dbg !27
  %234 = add i32 %230, %35, !dbg !28
  %235 = add i32 %35, %231, !dbg !28
  %236 = add i32 %35, %232, !dbg !28
  %237 = add i32 %35, %233, !dbg !28
  %238 = sext i32 %234 to i64, !dbg !29
  %239 = getelementptr float, ptr addrspace(1) %1, i64 %238, !dbg !29
  %240 = sext i32 %235 to i64, !dbg !29
  %241 = getelementptr float, ptr addrspace(1) %1, i64 %240, !dbg !29
  %242 = sext i32 %236 to i64, !dbg !29
  %243 = getelementptr float, ptr addrspace(1) %1, i64 %242, !dbg !29
  %244 = sext i32 %237 to i64, !dbg !29
  %245 = getelementptr float, ptr addrspace(1) %1, i64 %244, !dbg !29
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %239, i1 %20) #4, !dbg !30
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !30
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !30
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !30
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !30
  %251 = bitcast i32 %247 to float, !dbg !30
  %252 = bitcast i32 %248 to float, !dbg !30
  %253 = bitcast i32 %249 to float, !dbg !30
  %254 = bitcast i32 %250 to float, !dbg !30
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %241, i1 %21) #4, !dbg !30
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !30
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !30
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !30
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !30
  %260 = bitcast i32 %256 to float, !dbg !30
  %261 = bitcast i32 %257 to float, !dbg !30
  %262 = bitcast i32 %258 to float, !dbg !30
  %263 = bitcast i32 %259 to float, !dbg !30
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %243, i1 %22) #4, !dbg !30
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !30
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !30
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !30
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !30
  %269 = bitcast i32 %265 to float, !dbg !30
  %270 = bitcast i32 %266 to float, !dbg !30
  %271 = bitcast i32 %267 to float, !dbg !30
  %272 = bitcast i32 %268 to float, !dbg !30
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %245, i1 %23) #4, !dbg !30
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !30
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !30
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !30
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !30
  %278 = bitcast i32 %274 to float, !dbg !30
  %279 = bitcast i32 %275 to float, !dbg !30
  %280 = bitcast i32 %276 to float, !dbg !30
  %281 = bitcast i32 %277 to float, !dbg !30
  %282 = fadd float %251, 0x3E112E0BE0000000, !dbg !31
  %283 = fadd float %252, 0x3E112E0BE0000000, !dbg !31
  %284 = fadd float %253, 0x3E112E0BE0000000, !dbg !31
  %285 = fadd float %254, 0x3E112E0BE0000000, !dbg !31
  %286 = fadd float %260, 0x3E112E0BE0000000, !dbg !31
  %287 = fadd float %261, 0x3E112E0BE0000000, !dbg !31
  %288 = fadd float %262, 0x3E112E0BE0000000, !dbg !31
  %289 = fadd float %263, 0x3E112E0BE0000000, !dbg !31
  %290 = fadd float %269, 0x3E112E0BE0000000, !dbg !31
  %291 = fadd float %270, 0x3E112E0BE0000000, !dbg !31
  %292 = fadd float %271, 0x3E112E0BE0000000, !dbg !31
  %293 = fadd float %272, 0x3E112E0BE0000000, !dbg !31
  %294 = fadd float %278, 0x3E112E0BE0000000, !dbg !31
  %295 = fadd float %279, 0x3E112E0BE0000000, !dbg !31
  %296 = fadd float %280, 0x3E112E0BE0000000, !dbg !31
  %297 = fadd float %281, 0x3E112E0BE0000000, !dbg !31
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %298, 0, !dbg !32
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %299, 0, !dbg !32
  br i1 %.not.i, label %305, label %300, !dbg !32

300:                                              ; preds = %5
  br i1 %.not1.i, label %303, label %301, !dbg !32

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %282) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %282) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

305:                                              ; preds = %5
  br i1 %.not1.i, label %308, label %306, !dbg !32

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.f(float %282) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.f(float %282) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %301, %303, %306, %308
  %.0.i = phi float [ %302, %301 ], [ %304, %303 ], [ %307, %306 ], [ %309, %308 ], !dbg !32
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i3 = icmp eq i32 %310, 0, !dbg !32
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i6 = icmp eq i32 %311, 0, !dbg !32
  br i1 %.not.i3, label %317, label %312, !dbg !32

312:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %315, label %313, !dbg !32

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %283) #4, !dbg !32
  br label %__nv_sqrtf.exit7, !dbg !32

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %283) #4, !dbg !32
  br label %__nv_sqrtf.exit7, !dbg !32

317:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %320, label %318, !dbg !32

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.f(float %283) #4, !dbg !32
  br label %__nv_sqrtf.exit7, !dbg !32

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.f(float %283) #4, !dbg !32
  br label %__nv_sqrtf.exit7, !dbg !32

__nv_sqrtf.exit7:                                 ; preds = %313, %315, %318, %320
  %.0.i5 = phi float [ %314, %313 ], [ %316, %315 ], [ %319, %318 ], [ %321, %320 ], !dbg !32
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i8 = icmp eq i32 %322, 0, !dbg !32
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i11 = icmp eq i32 %323, 0, !dbg !32
  br i1 %.not.i8, label %329, label %324, !dbg !32

324:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %327, label %325, !dbg !32

325:                                              ; preds = %324
  %326 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %284) #4, !dbg !32
  br label %__nv_sqrtf.exit12, !dbg !32

327:                                              ; preds = %324
  %328 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %284) #4, !dbg !32
  br label %__nv_sqrtf.exit12, !dbg !32

329:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %332, label %330, !dbg !32

330:                                              ; preds = %329
  %331 = tail call float @llvm.nvvm.sqrt.rn.f(float %284) #4, !dbg !32
  br label %__nv_sqrtf.exit12, !dbg !32

332:                                              ; preds = %329
  %333 = tail call float @llvm.nvvm.sqrt.approx.f(float %284) #4, !dbg !32
  br label %__nv_sqrtf.exit12, !dbg !32

__nv_sqrtf.exit12:                                ; preds = %325, %327, %330, %332
  %.0.i10 = phi float [ %326, %325 ], [ %328, %327 ], [ %331, %330 ], [ %333, %332 ], !dbg !32
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i13 = icmp eq i32 %334, 0, !dbg !32
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i16 = icmp eq i32 %335, 0, !dbg !32
  br i1 %.not.i13, label %341, label %336, !dbg !32

336:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %339, label %337, !dbg !32

337:                                              ; preds = %336
  %338 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %285) #4, !dbg !32
  br label %__nv_sqrtf.exit17, !dbg !32

339:                                              ; preds = %336
  %340 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %285) #4, !dbg !32
  br label %__nv_sqrtf.exit17, !dbg !32

341:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %344, label %342, !dbg !32

342:                                              ; preds = %341
  %343 = tail call float @llvm.nvvm.sqrt.rn.f(float %285) #4, !dbg !32
  br label %__nv_sqrtf.exit17, !dbg !32

344:                                              ; preds = %341
  %345 = tail call float @llvm.nvvm.sqrt.approx.f(float %285) #4, !dbg !32
  br label %__nv_sqrtf.exit17, !dbg !32

__nv_sqrtf.exit17:                                ; preds = %337, %339, %342, %344
  %.0.i15 = phi float [ %338, %337 ], [ %340, %339 ], [ %343, %342 ], [ %345, %344 ], !dbg !32
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i18 = icmp eq i32 %346, 0, !dbg !32
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i21 = icmp eq i32 %347, 0, !dbg !32
  br i1 %.not.i18, label %353, label %348, !dbg !32

348:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %351, label %349, !dbg !32

349:                                              ; preds = %348
  %350 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %286) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

351:                                              ; preds = %348
  %352 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %286) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

353:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %356, label %354, !dbg !32

354:                                              ; preds = %353
  %355 = tail call float @llvm.nvvm.sqrt.rn.f(float %286) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

356:                                              ; preds = %353
  %357 = tail call float @llvm.nvvm.sqrt.approx.f(float %286) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

__nv_sqrtf.exit22:                                ; preds = %349, %351, %354, %356
  %.0.i20 = phi float [ %350, %349 ], [ %352, %351 ], [ %355, %354 ], [ %357, %356 ], !dbg !32
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i23 = icmp eq i32 %358, 0, !dbg !32
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i26 = icmp eq i32 %359, 0, !dbg !32
  br i1 %.not.i23, label %365, label %360, !dbg !32

360:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %363, label %361, !dbg !32

361:                                              ; preds = %360
  %362 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %287) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

363:                                              ; preds = %360
  %364 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %287) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

365:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %368, label %366, !dbg !32

366:                                              ; preds = %365
  %367 = tail call float @llvm.nvvm.sqrt.rn.f(float %287) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

368:                                              ; preds = %365
  %369 = tail call float @llvm.nvvm.sqrt.approx.f(float %287) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

__nv_sqrtf.exit27:                                ; preds = %361, %363, %366, %368
  %.0.i25 = phi float [ %362, %361 ], [ %364, %363 ], [ %367, %366 ], [ %369, %368 ], !dbg !32
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i28 = icmp eq i32 %370, 0, !dbg !32
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i31 = icmp eq i32 %371, 0, !dbg !32
  br i1 %.not.i28, label %377, label %372, !dbg !32

372:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %375, label %373, !dbg !32

373:                                              ; preds = %372
  %374 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %288) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

375:                                              ; preds = %372
  %376 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %288) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

377:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %380, label %378, !dbg !32

378:                                              ; preds = %377
  %379 = tail call float @llvm.nvvm.sqrt.rn.f(float %288) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

380:                                              ; preds = %377
  %381 = tail call float @llvm.nvvm.sqrt.approx.f(float %288) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

__nv_sqrtf.exit32:                                ; preds = %373, %375, %378, %380
  %.0.i30 = phi float [ %374, %373 ], [ %376, %375 ], [ %379, %378 ], [ %381, %380 ], !dbg !32
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i33 = icmp eq i32 %382, 0, !dbg !32
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i36 = icmp eq i32 %383, 0, !dbg !32
  br i1 %.not.i33, label %389, label %384, !dbg !32

384:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %387, label %385, !dbg !32

385:                                              ; preds = %384
  %386 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %289) #4, !dbg !32
  br label %__nv_sqrtf.exit37, !dbg !32

387:                                              ; preds = %384
  %388 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %289) #4, !dbg !32
  br label %__nv_sqrtf.exit37, !dbg !32

389:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %392, label %390, !dbg !32

390:                                              ; preds = %389
  %391 = tail call float @llvm.nvvm.sqrt.rn.f(float %289) #4, !dbg !32
  br label %__nv_sqrtf.exit37, !dbg !32

392:                                              ; preds = %389
  %393 = tail call float @llvm.nvvm.sqrt.approx.f(float %289) #4, !dbg !32
  br label %__nv_sqrtf.exit37, !dbg !32

__nv_sqrtf.exit37:                                ; preds = %385, %387, %390, %392
  %.0.i35 = phi float [ %386, %385 ], [ %388, %387 ], [ %391, %390 ], [ %393, %392 ], !dbg !32
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i38 = icmp eq i32 %394, 0, !dbg !32
  %395 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i41 = icmp eq i32 %395, 0, !dbg !32
  br i1 %.not.i38, label %401, label %396, !dbg !32

396:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %399, label %397, !dbg !32

397:                                              ; preds = %396
  %398 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %290) #4, !dbg !32
  br label %__nv_sqrtf.exit42, !dbg !32

399:                                              ; preds = %396
  %400 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %290) #4, !dbg !32
  br label %__nv_sqrtf.exit42, !dbg !32

401:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %404, label %402, !dbg !32

402:                                              ; preds = %401
  %403 = tail call float @llvm.nvvm.sqrt.rn.f(float %290) #4, !dbg !32
  br label %__nv_sqrtf.exit42, !dbg !32

404:                                              ; preds = %401
  %405 = tail call float @llvm.nvvm.sqrt.approx.f(float %290) #4, !dbg !32
  br label %__nv_sqrtf.exit42, !dbg !32

__nv_sqrtf.exit42:                                ; preds = %397, %399, %402, %404
  %.0.i40 = phi float [ %398, %397 ], [ %400, %399 ], [ %403, %402 ], [ %405, %404 ], !dbg !32
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i43 = icmp eq i32 %406, 0, !dbg !32
  %407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i46 = icmp eq i32 %407, 0, !dbg !32
  br i1 %.not.i43, label %413, label %408, !dbg !32

408:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %411, label %409, !dbg !32

409:                                              ; preds = %408
  %410 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %291) #4, !dbg !32
  br label %__nv_sqrtf.exit47, !dbg !32

411:                                              ; preds = %408
  %412 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %291) #4, !dbg !32
  br label %__nv_sqrtf.exit47, !dbg !32

413:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %416, label %414, !dbg !32

414:                                              ; preds = %413
  %415 = tail call float @llvm.nvvm.sqrt.rn.f(float %291) #4, !dbg !32
  br label %__nv_sqrtf.exit47, !dbg !32

416:                                              ; preds = %413
  %417 = tail call float @llvm.nvvm.sqrt.approx.f(float %291) #4, !dbg !32
  br label %__nv_sqrtf.exit47, !dbg !32

__nv_sqrtf.exit47:                                ; preds = %409, %411, %414, %416
  %.0.i45 = phi float [ %410, %409 ], [ %412, %411 ], [ %415, %414 ], [ %417, %416 ], !dbg !32
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i48 = icmp eq i32 %418, 0, !dbg !32
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i51 = icmp eq i32 %419, 0, !dbg !32
  br i1 %.not.i48, label %425, label %420, !dbg !32

420:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %423, label %421, !dbg !32

421:                                              ; preds = %420
  %422 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %292) #4, !dbg !32
  br label %__nv_sqrtf.exit52, !dbg !32

423:                                              ; preds = %420
  %424 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %292) #4, !dbg !32
  br label %__nv_sqrtf.exit52, !dbg !32

425:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %428, label %426, !dbg !32

426:                                              ; preds = %425
  %427 = tail call float @llvm.nvvm.sqrt.rn.f(float %292) #4, !dbg !32
  br label %__nv_sqrtf.exit52, !dbg !32

428:                                              ; preds = %425
  %429 = tail call float @llvm.nvvm.sqrt.approx.f(float %292) #4, !dbg !32
  br label %__nv_sqrtf.exit52, !dbg !32

__nv_sqrtf.exit52:                                ; preds = %421, %423, %426, %428
  %.0.i50 = phi float [ %422, %421 ], [ %424, %423 ], [ %427, %426 ], [ %429, %428 ], !dbg !32
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i53 = icmp eq i32 %430, 0, !dbg !32
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i56 = icmp eq i32 %431, 0, !dbg !32
  br i1 %.not.i53, label %437, label %432, !dbg !32

432:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %435, label %433, !dbg !32

433:                                              ; preds = %432
  %434 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %293) #4, !dbg !32
  br label %__nv_sqrtf.exit57, !dbg !32

435:                                              ; preds = %432
  %436 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %293) #4, !dbg !32
  br label %__nv_sqrtf.exit57, !dbg !32

437:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %440, label %438, !dbg !32

438:                                              ; preds = %437
  %439 = tail call float @llvm.nvvm.sqrt.rn.f(float %293) #4, !dbg !32
  br label %__nv_sqrtf.exit57, !dbg !32

440:                                              ; preds = %437
  %441 = tail call float @llvm.nvvm.sqrt.approx.f(float %293) #4, !dbg !32
  br label %__nv_sqrtf.exit57, !dbg !32

__nv_sqrtf.exit57:                                ; preds = %433, %435, %438, %440
  %.0.i55 = phi float [ %434, %433 ], [ %436, %435 ], [ %439, %438 ], [ %441, %440 ], !dbg !32
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i58 = icmp eq i32 %442, 0, !dbg !32
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i61 = icmp eq i32 %443, 0, !dbg !32
  br i1 %.not.i58, label %449, label %444, !dbg !32

444:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %447, label %445, !dbg !32

445:                                              ; preds = %444
  %446 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %294) #4, !dbg !32
  br label %__nv_sqrtf.exit62, !dbg !32

447:                                              ; preds = %444
  %448 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %294) #4, !dbg !32
  br label %__nv_sqrtf.exit62, !dbg !32

449:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %452, label %450, !dbg !32

450:                                              ; preds = %449
  %451 = tail call float @llvm.nvvm.sqrt.rn.f(float %294) #4, !dbg !32
  br label %__nv_sqrtf.exit62, !dbg !32

452:                                              ; preds = %449
  %453 = tail call float @llvm.nvvm.sqrt.approx.f(float %294) #4, !dbg !32
  br label %__nv_sqrtf.exit62, !dbg !32

__nv_sqrtf.exit62:                                ; preds = %445, %447, %450, %452
  %.0.i60 = phi float [ %446, %445 ], [ %448, %447 ], [ %451, %450 ], [ %453, %452 ], !dbg !32
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i63 = icmp eq i32 %454, 0, !dbg !32
  %455 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i66 = icmp eq i32 %455, 0, !dbg !32
  br i1 %.not.i63, label %461, label %456, !dbg !32

456:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %459, label %457, !dbg !32

457:                                              ; preds = %456
  %458 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %295) #4, !dbg !32
  br label %__nv_sqrtf.exit67, !dbg !32

459:                                              ; preds = %456
  %460 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %295) #4, !dbg !32
  br label %__nv_sqrtf.exit67, !dbg !32

461:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %464, label %462, !dbg !32

462:                                              ; preds = %461
  %463 = tail call float @llvm.nvvm.sqrt.rn.f(float %295) #4, !dbg !32
  br label %__nv_sqrtf.exit67, !dbg !32

464:                                              ; preds = %461
  %465 = tail call float @llvm.nvvm.sqrt.approx.f(float %295) #4, !dbg !32
  br label %__nv_sqrtf.exit67, !dbg !32

__nv_sqrtf.exit67:                                ; preds = %457, %459, %462, %464
  %.0.i65 = phi float [ %458, %457 ], [ %460, %459 ], [ %463, %462 ], [ %465, %464 ], !dbg !32
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i68 = icmp eq i32 %466, 0, !dbg !32
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i71 = icmp eq i32 %467, 0, !dbg !32
  br i1 %.not.i68, label %473, label %468, !dbg !32

468:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %471, label %469, !dbg !32

469:                                              ; preds = %468
  %470 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %296) #4, !dbg !32
  br label %__nv_sqrtf.exit72, !dbg !32

471:                                              ; preds = %468
  %472 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %296) #4, !dbg !32
  br label %__nv_sqrtf.exit72, !dbg !32

473:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %476, label %474, !dbg !32

474:                                              ; preds = %473
  %475 = tail call float @llvm.nvvm.sqrt.rn.f(float %296) #4, !dbg !32
  br label %__nv_sqrtf.exit72, !dbg !32

476:                                              ; preds = %473
  %477 = tail call float @llvm.nvvm.sqrt.approx.f(float %296) #4, !dbg !32
  br label %__nv_sqrtf.exit72, !dbg !32

__nv_sqrtf.exit72:                                ; preds = %469, %471, %474, %476
  %.0.i70 = phi float [ %470, %469 ], [ %472, %471 ], [ %475, %474 ], [ %477, %476 ], !dbg !32
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i73 = icmp eq i32 %478, 0, !dbg !32
  %479 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i76 = icmp eq i32 %479, 0, !dbg !32
  br i1 %.not.i73, label %485, label %480, !dbg !32

480:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %483, label %481, !dbg !32

481:                                              ; preds = %480
  %482 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %297) #4, !dbg !32
  br label %__nv_sqrtf.exit77, !dbg !32

483:                                              ; preds = %480
  %484 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %297) #4, !dbg !32
  br label %__nv_sqrtf.exit77, !dbg !32

485:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %488, label %486, !dbg !32

486:                                              ; preds = %485
  %487 = tail call float @llvm.nvvm.sqrt.rn.f(float %297) #4, !dbg !32
  br label %__nv_sqrtf.exit77, !dbg !32

488:                                              ; preds = %485
  %489 = tail call float @llvm.nvvm.sqrt.approx.f(float %297) #4, !dbg !32
  br label %__nv_sqrtf.exit77, !dbg !32

__nv_sqrtf.exit77:                                ; preds = %481, %483, %486, %488
  %.0.i75 = phi float [ %482, %481 ], [ %484, %483 ], [ %487, %486 ], [ %489, %488 ], !dbg !32
  %490 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !33
  %491 = fadd float %.0.i5, 0x3DDB7CDFE0000000, !dbg !33
  %492 = fadd float %.0.i10, 0x3DDB7CDFE0000000, !dbg !33
  %493 = fadd float %.0.i15, 0x3DDB7CDFE0000000, !dbg !33
  %494 = fadd float %.0.i20, 0x3DDB7CDFE0000000, !dbg !33
  %495 = fadd float %.0.i25, 0x3DDB7CDFE0000000, !dbg !33
  %496 = fadd float %.0.i30, 0x3DDB7CDFE0000000, !dbg !33
  %497 = fadd float %.0.i35, 0x3DDB7CDFE0000000, !dbg !33
  %498 = fadd float %.0.i40, 0x3DDB7CDFE0000000, !dbg !33
  %499 = fadd float %.0.i45, 0x3DDB7CDFE0000000, !dbg !33
  %500 = fadd float %.0.i50, 0x3DDB7CDFE0000000, !dbg !33
  %501 = fadd float %.0.i55, 0x3DDB7CDFE0000000, !dbg !33
  %502 = fadd float %.0.i60, 0x3DDB7CDFE0000000, !dbg !33
  %503 = fadd float %.0.i65, 0x3DDB7CDFE0000000, !dbg !33
  %504 = fadd float %.0.i70, 0x3DDB7CDFE0000000, !dbg !33
  %505 = fadd float %.0.i75, 0x3DDB7CDFE0000000, !dbg !33
  %506 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %490) #4, !dbg !34
  %507 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %491) #4, !dbg !34
  %508 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %492) #4, !dbg !34
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %493) #4, !dbg !34
  %510 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %494) #4, !dbg !34
  %511 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %495) #4, !dbg !34
  %512 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %496) #4, !dbg !34
  %513 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %497) #4, !dbg !34
  %514 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %498) #4, !dbg !34
  %515 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %499) #4, !dbg !34
  %516 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %500) #4, !dbg !34
  %517 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %501) #4, !dbg !34
  %518 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %502) #4, !dbg !34
  %519 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %503) #4, !dbg !34
  %520 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %504) #4, !dbg !34
  %521 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %505) #4, !dbg !34
  %522 = shl i32 %15, 12, !dbg !35
  %523 = shl i32 %16, 12, !dbg !35
  %524 = shl i32 %17, 12, !dbg !35
  %525 = shl i32 %18, 12, !dbg !35
  %526 = add i32 %35, %522, !dbg !36
  %527 = add i32 %35, %523, !dbg !36
  %528 = add i32 %35, %524, !dbg !36
  %529 = add i32 %35, %525, !dbg !36
  %530 = sext i32 %526 to i64, !dbg !37
  %531 = getelementptr float, ptr addrspace(1) %2, i64 %530, !dbg !37
  %532 = sext i32 %527 to i64, !dbg !37
  %533 = getelementptr float, ptr addrspace(1) %2, i64 %532, !dbg !37
  %534 = sext i32 %528 to i64, !dbg !37
  %535 = getelementptr float, ptr addrspace(1) %2, i64 %534, !dbg !37
  %536 = sext i32 %529 to i64, !dbg !37
  %537 = getelementptr float, ptr addrspace(1) %2, i64 %536, !dbg !37
  %538 = bitcast float %506 to i32, !dbg !38
  %539 = bitcast float %507 to i32, !dbg !38
  %540 = bitcast float %508 to i32, !dbg !38
  %541 = bitcast float %509 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %538, i32 %539, i32 %540, i32 %541, ptr addrspace(1) %531, i1 %20) #4, !dbg !38
  %542 = bitcast float %510 to i32, !dbg !38
  %543 = bitcast float %511 to i32, !dbg !38
  %544 = bitcast float %512 to i32, !dbg !38
  %545 = bitcast float %513 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %542, i32 %543, i32 %544, i32 %545, ptr addrspace(1) %533, i1 %21) #4, !dbg !38
  %546 = bitcast float %514 to i32, !dbg !38
  %547 = bitcast float %515 to i32, !dbg !38
  %548 = bitcast float %516 to i32, !dbg !38
  %549 = bitcast float %517 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %546, i32 %547, i32 %548, i32 %549, ptr addrspace(1) %535, i1 %22) #4, !dbg !38
  %550 = bitcast float %518 to i32, !dbg !38
  %551 = bitcast float %519 to i32, !dbg !38
  %552 = bitcast float %520 to i32, !dbg !38
  %553 = bitcast float %521 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %550, i32 %551, i32 %552, i32 %553, ptr addrspace(1) %537, i1 %23) #4, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb2ykvsflsja2vnvxeiuxyfb3bkpmhzjf6cmykvmi6getvkxmkwc.py", directory: "inductor_cache/b2")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_15", linkageName: "triton_poi_fused_add_div_sqrt_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 40, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 45, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 26, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 35, scope: !7)
!36 = !DILocation(line: 40, column: 30, scope: !7)
!37 = !DILocation(line: 40, column: 25, scope: !7)
!38 = !DILocation(line: 40, column: 46, scope: !7)
!39 = !DILocation(line: 40, column: 4, scope: !7)
