; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 2, !dbg !13
  %14 = or disjoint i32 %12, 512, !dbg !13
  %.frozen8 = freeze i32 %12, !dbg !14
  %15 = sdiv i32 %.frozen8, 256, !dbg !14
  %16 = sdiv i32 %14, 256, !dbg !14
  %17 = srem i32 %15, 384, !dbg !15
  %18 = srem i32 %16, 384, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %19 = sdiv i32 %.frozen, 16, !dbg !16
  %20 = sdiv i32 %14, 16, !dbg !16
  %21 = srem i32 %19, 16, !dbg !17
  %22 = srem i32 %20, 16, !dbg !17
  %23 = mul i32 %19, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %23, !dbg !18
  %24 = srem i32 %13, 16, !dbg !18
  %25 = sdiv i32 %12, 98304, !dbg !19
  %26 = sdiv i32 %14, 98304, !dbg !19
  %27 = mul i32 %15, 256, !dbg !20
  %.decomposed9 = sub i32 %.frozen8, %27, !dbg !20
  %28 = icmp slt i32 %17, 256, !dbg !21
  %29 = icmp slt i32 %18, 256, !dbg !21
  %30 = sext i32 %21 to i64, !dbg !22
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = sext i32 %22 to i64, !dbg !22
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %31, i1 %28, i1 %28) #1, !dbg !23
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %31, i1 %28, i1 %28) #1, !dbg !23
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %31, i1 %28, i1 %28) #1, !dbg !23
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %31, i1 %28, i1 %28) #1, !dbg !23
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %33, i1 %29, i1 %29) #1, !dbg !23
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %33, i1 %29, i1 %29) #1, !dbg !23
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %33, i1 %29, i1 %29) #1, !dbg !23
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %33, i1 %29, i1 %29) #1, !dbg !23
  %42 = lshr i64 %34, 60, !dbg !24
  %43 = and i64 %42, 8, !dbg !24
  %44 = add i64 %43, %34, !dbg !24
  %45 = lshr i64 %38, 60, !dbg !24
  %46 = and i64 %45, 8, !dbg !24
  %47 = add i64 %46, %38, !dbg !24
  %48 = sext i32 %.decomposed to i64, !dbg !25
  %49 = getelementptr i64, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = sext i32 %24 to i64, !dbg !25
  %51 = getelementptr i64, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %49, i1 %28, i1 %28, i1 %28) #1, !dbg !26
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !26
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !26
  %55 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %51, i1 %28, i1 %28, i1 %28) #1, !dbg !26
  %56 = extractvalue { i64, i64 } %55, 0, !dbg !26
  %57 = extractvalue { i64, i64 } %55, 1, !dbg !26
  %58 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %49, i1 %29, i1 %29, i1 %29) #1, !dbg !26
  %59 = extractvalue { i64, i64 } %58, 0, !dbg !26
  %60 = extractvalue { i64, i64 } %58, 1, !dbg !26
  %61 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %51, i1 %29, i1 %29, i1 %29) #1, !dbg !26
  %62 = extractvalue { i64, i64 } %61, 0, !dbg !26
  %63 = extractvalue { i64, i64 } %61, 1, !dbg !26
  %64 = lshr i64 %53, 60, !dbg !27
  %65 = and i64 %64, 8, !dbg !27
  %66 = lshr i64 %54, 60, !dbg !27
  %67 = and i64 %66, 8, !dbg !27
  %68 = lshr i64 %56, 60, !dbg !27
  %69 = and i64 %68, 8, !dbg !27
  %70 = lshr i64 %57, 60, !dbg !27
  %71 = and i64 %70, 8, !dbg !27
  %72 = lshr i64 %59, 60, !dbg !27
  %73 = and i64 %72, 8, !dbg !27
  %74 = lshr i64 %60, 60, !dbg !27
  %75 = and i64 %74, 8, !dbg !27
  %76 = lshr i64 %62, 60, !dbg !27
  %77 = and i64 %76, 8, !dbg !27
  %78 = lshr i64 %63, 60, !dbg !27
  %79 = and i64 %78, 8, !dbg !27
  %80 = shl i64 %44, 3, !dbg !28
  %81 = shl i64 %47, 3, !dbg !28
  %82 = shl nsw i32 %17, 6, !dbg !29
  %83 = shl nsw i32 %18, 6, !dbg !29
  %84 = sext i32 %82 to i64, !dbg !30
  %85 = sext i32 %83 to i64, !dbg !30
  %86 = shl nsw i32 %25, 14, !dbg !31
  %87 = shl nsw i32 %26, 14, !dbg !31
  %88 = sext i32 %86 to i64, !dbg !32
  %89 = sext i32 %87 to i64, !dbg !32
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !33
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %65, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %80, !dbg !33
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %84, !dbg !33
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %88, !dbg !33
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %67, !dbg !33
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %80, !dbg !33
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %84, !dbg !33
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %88, !dbg !33
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !33
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %69, !dbg !33
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %80, !dbg !33
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %84, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %88, !dbg !33
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !33
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %71, !dbg !33
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %80, !dbg !33
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %84, !dbg !33
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %88, !dbg !33
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !33
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %73, !dbg !33
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %81, !dbg !33
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %85, !dbg !33
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %89, !dbg !33
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !33
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %75, !dbg !33
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %81, !dbg !33
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %85, !dbg !33
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %89, !dbg !33
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !33
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %77, !dbg !33
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %81, !dbg !33
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %85, !dbg !33
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %89, !dbg !33
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !33
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %79, !dbg !33
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %81, !dbg !33
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %85, !dbg !33
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %89, !dbg !33
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %28, i32 0, i1 %28) #1, !dbg !34
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %28, i32 0, i1 %28) #1, !dbg !34
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %28, i32 0, i1 %28) #1, !dbg !34
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %28, i32 0, i1 %28) #1, !dbg !34
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %29, i32 0, i1 %29) #1, !dbg !34
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %29, i32 0, i1 %29) #1, !dbg !34
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %29, i32 0, i1 %29) #1, !dbg !34
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %29, i32 0, i1 %29) #1, !dbg !34
  %138 = sext i32 %17 to i64, !dbg !35
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !35
  %140 = sext i32 %18 to i64, !dbg !35
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !35
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %28, i32 0, i1 %28) #1, !dbg !36
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %28, i32 0, i1 %28) #1, !dbg !36
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %28, i32 0, i1 %28) #1, !dbg !36
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %28, i32 0, i1 %28) #1, !dbg !36
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %29, i32 0, i1 %29) #1, !dbg !36
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %29, i32 0, i1 %29) #1, !dbg !36
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %29, i32 0, i1 %29) #1, !dbg !36
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %29, i32 0, i1 %29) #1, !dbg !36
  %150 = insertelement <8 x i32> poison, i32 %137, i64 0, !dbg !34
  %151 = insertelement <8 x i32> %150, i32 %136, i64 1, !dbg !34
  %152 = insertelement <8 x i32> %151, i32 %135, i64 2, !dbg !34
  %153 = insertelement <8 x i32> %152, i32 %134, i64 3, !dbg !34
  %154 = insertelement <8 x i32> %153, i32 %133, i64 4, !dbg !34
  %155 = insertelement <8 x i32> %154, i32 %132, i64 5, !dbg !34
  %156 = insertelement <8 x i32> %155, i32 %131, i64 6, !dbg !34
  %157 = insertelement <8 x i32> %156, i32 %130, i64 7, !dbg !34
  %158 = bitcast <8 x i32> %157 to <8 x float>, !dbg !34
  %159 = insertelement <8 x i32> poison, i32 %149, i64 0, !dbg !36
  %160 = insertelement <8 x i32> %159, i32 %148, i64 1, !dbg !36
  %161 = insertelement <8 x i32> %160, i32 %147, i64 2, !dbg !36
  %162 = insertelement <8 x i32> %161, i32 %146, i64 3, !dbg !36
  %163 = insertelement <8 x i32> %162, i32 %145, i64 4, !dbg !36
  %164 = insertelement <8 x i32> %163, i32 %144, i64 5, !dbg !36
  %165 = insertelement <8 x i32> %164, i32 %143, i64 6, !dbg !36
  %166 = insertelement <8 x i32> %165, i32 %142, i64 7, !dbg !36
  %167 = bitcast <8 x i32> %166 to <8 x float>, !dbg !36
  %168 = fadd <8 x float> %158, %167, !dbg !37
  %169 = fcmp olt <8 x float> %168, zeroinitializer, !dbg !38
  %170 = extractelement <8 x i1> %169, i64 7, !dbg !42
  %171 = extractelement <8 x i1> %169, i64 6, !dbg !42
  %172 = extractelement <8 x i1> %169, i64 5, !dbg !42
  %173 = extractelement <8 x i1> %169, i64 4, !dbg !42
  %174 = extractelement <8 x i1> %169, i64 3, !dbg !42
  %175 = extractelement <8 x i1> %169, i64 2, !dbg !42
  %176 = extractelement <8 x i1> %169, i64 1, !dbg !42
  %177 = extractelement <8 x i1> %169, i64 0, !dbg !42
  %178 = icmp sgt i32 %17, 255, !dbg !43
  %179 = icmp sgt i32 %18, 255, !dbg !43
  %180 = shl nsw i32 %17, 8, !dbg !44
  %181 = shl nsw i32 %18, 8, !dbg !44
  %182 = shl nsw i32 %25, 15, !dbg !45
  %183 = shl nsw i32 %26, 15, !dbg !45
  %184 = add nsw i32 %.decomposed9, -65536, !dbg !44
  %185 = add nsw i32 %184, %182, !dbg !46
  %186 = add nsw i32 %185, %180, !dbg !47
  %187 = add nsw i32 %184, %183, !dbg !46
  %188 = add nsw i32 %187, %181, !dbg !47
  %189 = sext i32 %186 to i64, !dbg !48
  %190 = getelementptr float, ptr addrspace(1) %3, i64 %189, !dbg !48
  %191 = sext i32 %188 to i64, !dbg !48
  %192 = getelementptr float, ptr addrspace(1) %3, i64 %191, !dbg !48
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %190, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #1, !dbg !49
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !49
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !49
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !49
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !49
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %192, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #1, !dbg !49
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !49
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !49
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !49
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !49
  %203 = sext i32 %12 to i64, !dbg !50
  %204 = getelementptr float, ptr addrspace(1) %4, i64 %203, !dbg !50
  %205 = sext i32 %14 to i64, !dbg !50
  %206 = getelementptr float, ptr addrspace(1) %4, i64 %205, !dbg !50
  %bc = bitcast <8 x float> %168 to <8 x i32>, !dbg !51
  %207 = extractelement <8 x i32> %bc, i64 7, !dbg !51
  %208 = select i1 %170, i32 0, i32 %207, !dbg !42
  %209 = select i1 %28, i32 %208, i32 %194, !dbg !52
  %bc1 = bitcast <8 x float> %168 to <8 x i32>, !dbg !51
  %210 = extractelement <8 x i32> %bc1, i64 6, !dbg !51
  %211 = select i1 %171, i32 0, i32 %210, !dbg !42
  %212 = select i1 %28, i32 %211, i32 %195, !dbg !52
  %bc2 = bitcast <8 x float> %168 to <8 x i32>, !dbg !51
  %213 = extractelement <8 x i32> %bc2, i64 5, !dbg !51
  %214 = select i1 %172, i32 0, i32 %213, !dbg !42
  %215 = select i1 %28, i32 %214, i32 %196, !dbg !52
  %bc3 = bitcast <8 x float> %168 to <8 x i32>, !dbg !51
  %216 = extractelement <8 x i32> %bc3, i64 4, !dbg !51
  %217 = select i1 %173, i32 0, i32 %216, !dbg !42
  %218 = select i1 %28, i32 %217, i32 %197, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %209, i32 %212, i32 %215, i32 %218, ptr addrspace(1) %204, i1 true) #1, !dbg !51
  %bc4 = bitcast <8 x float> %168 to <8 x i32>, !dbg !51
  %219 = extractelement <8 x i32> %bc4, i64 3, !dbg !51
  %220 = select i1 %174, i32 0, i32 %219, !dbg !42
  %221 = select i1 %29, i32 %220, i32 %199, !dbg !52
  %bc5 = bitcast <8 x float> %168 to <8 x i32>, !dbg !51
  %222 = extractelement <8 x i32> %bc5, i64 2, !dbg !51
  %223 = select i1 %175, i32 0, i32 %222, !dbg !42
  %224 = select i1 %29, i32 %223, i32 %200, !dbg !52
  %bc6 = bitcast <8 x float> %168 to <8 x i32>, !dbg !51
  %225 = extractelement <8 x i32> %bc6, i64 1, !dbg !51
  %226 = select i1 %176, i32 0, i32 %225, !dbg !42
  %227 = select i1 %29, i32 %226, i32 %201, !dbg !52
  %bc7 = bitcast <8 x float> %168 to <8 x i32>, !dbg !51
  %228 = extractelement <8 x i32> %bc7, i64 0, !dbg !51
  %229 = select i1 %177, i32 0, i32 %228, !dbg !42
  %230 = select i1 %29, i32 %229, i32 %202, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %221, i32 %224, i32 %227, i32 %230, ptr addrspace(1) %206, i1 true) #1, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "catqwztodugljvupiukafi7qhi5agsrdehaue3xd7n7m6gkb7ui4.py", directory: "inductor_cache/at")
!4 = !{ptr @triton_poi_fused_cat_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_16", linkageName: "triton_poi_fused_cat_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 39, column: 32, scope: !7)
!25 = !DILocation(line: 40, column: 31, scope: !7)
!26 = !DILocation(line: 40, column: 36, scope: !7)
!27 = !DILocation(line: 43, column: 35, scope: !7)
!28 = !DILocation(line: 44, column: 41, scope: !7)
!29 = !DILocation(line: 44, column: 52, scope: !7)
!30 = !DILocation(line: 44, column: 48, scope: !7)
!31 = !DILocation(line: 44, column: 64, scope: !7)
!32 = !DILocation(line: 44, column: 58, scope: !7)
!33 = !DILocation(line: 44, column: 31, scope: !7)
!34 = !DILocation(line: 44, column: 69, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 36, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 48, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 41, scope: !7)
!45 = !DILocation(line: 54, column: 62, scope: !7)
!46 = !DILocation(line: 54, column: 36, scope: !7)
!47 = !DILocation(line: 54, column: 56, scope: !7)
!48 = !DILocation(line: 54, column: 31, scope: !7)
!49 = !DILocation(line: 54, column: 67, scope: !7)
!50 = !DILocation(line: 56, column: 25, scope: !7)
!51 = !DILocation(line: 56, column: 37, scope: !7)
!52 = !DILocation(line: 0, scope: !7)
!53 = !DILocation(line: 56, column: 4, scope: !7)
