#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_convolution_sigmoid_84(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":19:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %6 = tt.addptr %5, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc6)
    %7 = tt.load %6 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %8, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc8)
    %10 = tt.load %9 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc10)
    %12 = tt.load %11 : !tt.ptr<f32> loc(#loc11)
    %13 = tt.splat %12 : f32 -> tensor<256xf32, #blocked> loc(#loc12)
    %14 = arith.addf %10, %13 : tensor<256xf32, #blocked> loc(#loc13)
    %15 = arith.addf %7, %14 : tensor<256xf32, #blocked> loc(#loc14)
    %16 = arith.subf %cst, %15 : tensor<256xf32, #blocked> loc(#loc25)
    %17 = math.exp %16 : tensor<256xf32, #blocked> loc(#loc26)
    %18 = arith.addf %17, %cst_0 : tensor<256xf32, #blocked> loc(#loc27)
    %19 = arith.divf %cst_0, %18 : tensor<256xf32, #blocked> loc(#loc28)
    %20 = arith.subf %cst, %7 : tensor<256xf32, #blocked> loc(#loc29)
    %21 = math.exp %20 : tensor<256xf32, #blocked> loc(#loc30)
    %22 = arith.addf %21, %cst_0 : tensor<256xf32, #blocked> loc(#loc31)
    %23 = arith.divf %cst_0, %22 : tensor<256xf32, #blocked> loc(#loc32)
    tt.store %9, %19 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc21)
    %24 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc22)
    %25 = tt.addptr %24, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc22)
    tt.store %25, %23 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc23)
    tt.return loc(#loc24)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":21:28)
#loc3 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":21:33)
#loc4 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":22:36)
#loc5 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":22:23)
#loc6 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":25:30)
#loc7 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":25:35)
#loc8 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":26:34)
#loc9 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":26:39)
#loc10 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":27:30)
#loc11 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":27:19)
#loc12 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":28:33)
#loc13 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":29:18)
#loc14 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":30:18)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc16 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":31:22)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc20 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":32:22)
#loc21 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":33:39)
#loc22 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":34:25)
#loc23 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":34:36)
#loc24 = loc("inductor_cache/np/cnpj6nkktqis4eynomceo32binutpw3oynm6ryiif3kvqe3w7ar2.py":34:4)
#loc25 = loc(callsite(#loc15 at #loc16))
#loc26 = loc(callsite(#loc17 at #loc16))
#loc27 = loc(callsite(#loc18 at #loc16))
#loc28 = loc(callsite(#loc19 at #loc16))
#loc29 = loc(callsite(#loc15 at #loc20))
#loc30 = loc(callsite(#loc17 at #loc20))
#loc31 = loc(callsite(#loc18 at #loc20))
#loc32 = loc(callsite(#loc19 at #loc20))
