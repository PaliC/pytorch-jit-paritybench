; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %12, 32, !dbg !12
  %15 = or disjoint i32 %12, 48, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 6, !dbg !15
  %23 = or disjoint i32 %22, %12, !dbg !16
  %24 = or disjoint i32 %22, %13, !dbg !16
  %25 = or disjoint i32 %22, %14, !dbg !16
  %26 = or disjoint i32 %22, %15, !dbg !16
  %27 = or disjoint i32 %22, %10, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %28 = sdiv i32 %.frozen, 256, !dbg !17
  %29 = mul i32 %28, 256, !dbg !18
  %.decomposed = sub i32 %.frozen, %29, !dbg !18
  %30 = shl i32 %23, 8, !dbg !19
  %31 = shl i32 %24, 8, !dbg !19
  %32 = shl i32 %25, 8, !dbg !19
  %33 = shl i32 %26, 8, !dbg !19
  %34 = shl i32 %28, 20, !dbg !20
  %35 = add i32 %34, %.decomposed, !dbg !21
  %36 = add i32 %35, %30, !dbg !22
  %37 = add i32 %35, %31, !dbg !22
  %38 = add i32 %35, %32, !dbg !22
  %39 = add i32 %35, %33, !dbg !22
  %40 = sext i32 %36 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = sext i32 %37 to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = sext i32 %38 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = sext i32 %39 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = bitcast i32 %50 to float, !dbg !24
  %55 = bitcast i32 %51 to float, !dbg !24
  %56 = bitcast i32 %52 to float, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !24
  %62 = bitcast i32 %58 to float, !dbg !24
  %63 = bitcast i32 %59 to float, !dbg !24
  %64 = bitcast i32 %60 to float, !dbg !24
  %65 = bitcast i32 %61 to float, !dbg !24
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !24
  %71 = bitcast i32 %67 to float, !dbg !24
  %72 = bitcast i32 %68 to float, !dbg !24
  %73 = bitcast i32 %69 to float, !dbg !24
  %74 = bitcast i32 %70 to float, !dbg !24
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !24
  %80 = bitcast i32 %76 to float, !dbg !24
  %81 = bitcast i32 %77 to float, !dbg !24
  %82 = bitcast i32 %78 to float, !dbg !24
  %83 = bitcast i32 %79 to float, !dbg !24
  %84 = sext i32 %.decomposed to i64, !dbg !25
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !25
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #2, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !26
  %91 = bitcast i32 %87 to float, !dbg !26
  %92 = bitcast i32 %88 to float, !dbg !26
  %93 = bitcast i32 %89 to float, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = fadd float %53, %91, !dbg !27
  %96 = fadd float %54, %92, !dbg !27
  %97 = fadd float %55, %93, !dbg !27
  %98 = fadd float %56, %94, !dbg !27
  %99 = fadd float %62, %91, !dbg !27
  %100 = fadd float %63, %92, !dbg !27
  %101 = fadd float %64, %93, !dbg !27
  %102 = fadd float %65, %94, !dbg !27
  %103 = fadd float %71, %91, !dbg !27
  %104 = fadd float %72, %92, !dbg !27
  %105 = fadd float %73, %93, !dbg !27
  %106 = fadd float %74, %94, !dbg !27
  %107 = fadd float %80, %91, !dbg !27
  %108 = fadd float %81, %92, !dbg !27
  %109 = fadd float %82, %93, !dbg !27
  %110 = fadd float %83, %94, !dbg !27
  %111 = shl i32 %17, 12, !dbg !28
  %112 = shl i32 %18, 12, !dbg !28
  %113 = shl i32 %19, 12, !dbg !28
  %114 = shl i32 %20, 12, !dbg !28
  %115 = add i32 %27, %111, !dbg !29
  %116 = add i32 %27, %112, !dbg !29
  %117 = add i32 %27, %113, !dbg !29
  %118 = add i32 %27, %114, !dbg !29
  %119 = sext i32 %115 to i64, !dbg !30
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !30
  %121 = sext i32 %116 to i64, !dbg !30
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !30
  %123 = sext i32 %117 to i64, !dbg !30
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !30
  %125 = sext i32 %118 to i64, !dbg !30
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !30
  %127 = shl i32 %8, 8, !dbg !31
  %128 = and i32 %127, 3840, !dbg !31
  %129 = or disjoint i32 %128, %12, !dbg !31
  %130 = and i32 %9, 1020, !dbg !31
  %131 = lshr exact i32 %128, 4, !dbg !31
  %132 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %131, !dbg !31
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %129, !dbg !31
  %134 = bitcast float %95 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !31
  %135 = or disjoint i32 %129, 64, !dbg !31
  %136 = lshr i32 %135, 6, !dbg !31
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !31
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %135, !dbg !31
  %139 = bitcast float %96 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !31
  %140 = or disjoint i32 %129, 128, !dbg !31
  %141 = lshr i32 %140, 6, !dbg !31
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !31
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %140, !dbg !31
  %144 = bitcast float %97 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !31
  %145 = or disjoint i32 %129, 192, !dbg !31
  %146 = lshr i32 %145, 6, !dbg !31
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !31
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %145, !dbg !31
  %149 = bitcast float %98 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !31
  %150 = or disjoint i32 %129, 16, !dbg !31
  %151 = getelementptr float, ptr addrspace(3) %132, i32 %150, !dbg !31
  %152 = bitcast float %99 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !31
  %153 = or disjoint i32 %129, 80, !dbg !31
  %154 = lshr i32 %153, 6, !dbg !31
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !31
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %153, !dbg !31
  %157 = bitcast float %100 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !31
  %158 = or disjoint i32 %129, 144, !dbg !31
  %159 = lshr i32 %158, 6, !dbg !31
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !31
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %158, !dbg !31
  %162 = bitcast float %101 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !31
  %163 = or disjoint i32 %129, 208, !dbg !31
  %164 = lshr i32 %163, 6, !dbg !31
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %164, !dbg !31
  %166 = getelementptr float, ptr addrspace(3) %165, i32 %163, !dbg !31
  %167 = bitcast float %102 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !31
  %168 = or disjoint i32 %129, 32, !dbg !31
  %169 = getelementptr float, ptr addrspace(3) %132, i32 %168, !dbg !31
  %170 = bitcast float %103 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !31
  %171 = or disjoint i32 %129, 96, !dbg !31
  %172 = lshr i32 %171, 6, !dbg !31
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !31
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !31
  %175 = bitcast float %104 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !31
  %176 = or disjoint i32 %129, 160, !dbg !31
  %177 = lshr i32 %176, 6, !dbg !31
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !31
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %176, !dbg !31
  %180 = bitcast float %105 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !31
  %181 = or disjoint i32 %129, 224, !dbg !31
  %182 = lshr i32 %181, 6, !dbg !31
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !31
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %181, !dbg !31
  %185 = bitcast float %106 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !31
  %186 = or disjoint i32 %129, 48, !dbg !31
  %187 = getelementptr float, ptr addrspace(3) %132, i32 %186, !dbg !31
  %188 = bitcast float %107 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !31
  %189 = or disjoint i32 %129, 112, !dbg !31
  %190 = lshr i32 %189, 6, !dbg !31
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !31
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !31
  %193 = bitcast float %108 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !31
  %194 = or disjoint i32 %129, 176, !dbg !31
  %195 = lshr i32 %194, 6, !dbg !31
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !31
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %194, !dbg !31
  %198 = bitcast float %109 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !31
  %199 = or disjoint i32 %129, 240, !dbg !31
  %200 = lshr i32 %199, 6, !dbg !31
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !31
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %199, !dbg !31
  %203 = bitcast float %110 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %204 = lshr i32 %130, 6, !dbg !31
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !31
  %206 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %130, !dbg !31
  %207 = load i32, ptr addrspace(3) %206, align 4, !dbg !31
  %208 = or disjoint i32 %130, 1, !dbg !31
  %209 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %208, !dbg !31
  %210 = load i32, ptr addrspace(3) %209, align 4, !dbg !31
  %211 = or disjoint i32 %130, 2, !dbg !31
  %212 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %211, !dbg !31
  %213 = load i32, ptr addrspace(3) %212, align 4, !dbg !31
  %214 = or disjoint i32 %130, 3, !dbg !31
  %215 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %214, !dbg !31
  %216 = load i32, ptr addrspace(3) %215, align 4, !dbg !31
  %217 = or disjoint i32 %130, 1024, !dbg !31
  %218 = lshr i32 %217, 6, !dbg !31
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !31
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %217, !dbg !31
  %221 = load i32, ptr addrspace(3) %220, align 4, !dbg !31
  %222 = or disjoint i32 %130, 1025, !dbg !31
  %223 = lshr i32 %222, 6, !dbg !31
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %223, !dbg !31
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %222, !dbg !31
  %226 = load i32, ptr addrspace(3) %225, align 4, !dbg !31
  %227 = or disjoint i32 %130, 1026, !dbg !31
  %228 = lshr i32 %227, 6, !dbg !31
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !31
  %230 = getelementptr inbounds float, ptr addrspace(3) %229, i32 %227, !dbg !31
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !31
  %232 = or disjoint i32 %130, 1027, !dbg !31
  %233 = lshr i32 %232, 6, !dbg !31
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %233, !dbg !31
  %235 = getelementptr inbounds float, ptr addrspace(3) %234, i32 %232, !dbg !31
  %236 = load i32, ptr addrspace(3) %235, align 4, !dbg !31
  %237 = or disjoint i32 %130, 2048, !dbg !31
  %238 = lshr i32 %237, 6, !dbg !31
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %238, !dbg !31
  %240 = getelementptr inbounds float, ptr addrspace(3) %239, i32 %237, !dbg !31
  %241 = load i32, ptr addrspace(3) %240, align 4, !dbg !31
  %242 = or disjoint i32 %130, 2049, !dbg !31
  %243 = lshr i32 %242, 6, !dbg !31
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !31
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %242, !dbg !31
  %246 = load i32, ptr addrspace(3) %245, align 4, !dbg !31
  %247 = or disjoint i32 %130, 2050, !dbg !31
  %248 = lshr i32 %247, 6, !dbg !31
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %248, !dbg !31
  %250 = getelementptr inbounds float, ptr addrspace(3) %249, i32 %247, !dbg !31
  %251 = load i32, ptr addrspace(3) %250, align 4, !dbg !31
  %252 = or disjoint i32 %130, 2051, !dbg !31
  %253 = lshr i32 %252, 6, !dbg !31
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %253, !dbg !31
  %255 = getelementptr inbounds float, ptr addrspace(3) %254, i32 %252, !dbg !31
  %256 = load i32, ptr addrspace(3) %255, align 4, !dbg !31
  %257 = or disjoint i32 %130, 3072, !dbg !31
  %258 = lshr i32 %257, 6, !dbg !31
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !31
  %260 = getelementptr inbounds float, ptr addrspace(3) %259, i32 %257, !dbg !31
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !31
  %262 = or disjoint i32 %130, 3073, !dbg !31
  %263 = lshr i32 %262, 6, !dbg !31
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %263, !dbg !31
  %265 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %262, !dbg !31
  %266 = load i32, ptr addrspace(3) %265, align 4, !dbg !31
  %267 = or disjoint i32 %130, 3074, !dbg !31
  %268 = lshr i32 %267, 6, !dbg !31
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !31
  %270 = getelementptr inbounds float, ptr addrspace(3) %269, i32 %267, !dbg !31
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !31
  %272 = or disjoint i32 %130, 3075, !dbg !31
  %273 = lshr i32 %272, 6, !dbg !31
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %273, !dbg !31
  %275 = getelementptr inbounds float, ptr addrspace(3) %274, i32 %272, !dbg !31
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %210, i32 %213, i32 %216, ptr addrspace(1) %120, i1 true) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %221, i32 %226, i32 %231, i32 %236, ptr addrspace(1) %122, i1 true) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %241, i32 %246, i32 %251, i32 %256, ptr addrspace(1) %124, i1 true) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %261, i32 %266, i32 %271, i32 %276, ptr addrspace(1) %126, i1 true) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crbgxxbe4gipc7e23jtxwua55srfmdpppcqiabflolf2bokj35ui.py", directory: "inductor_cache/rb")
!4 = !{ptr @triton_poi_fused_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_2", linkageName: "triton_poi_fused_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 52, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 57, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 25, scope: !7)
!31 = !DILocation(line: 35, column: 46, scope: !7)
!32 = !DILocation(line: 35, column: 4, scope: !7)
