; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 256, !dbg !14
  %12 = sdiv i32 %9, 4, !dbg !15
  %13 = srem i32 %10, 4, !dbg !16
  %14 = icmp sgt i32 %13, 0, !dbg !17
  %15 = add i32 %9, -5, !dbg !18
  %16 = add i32 %9, -4, !dbg !18
  %17 = sext i32 %15 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = sext i32 %16 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = add nsw i32 %13, 1, !dbg !20
  %22 = icmp ult i32 %21, 4, !dbg !20
  %23 = add i32 %9, -3, !dbg !21
  %24 = add i32 %9, -2, !dbg !21
  %25 = sext i32 %23 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = add i32 %9, -1, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = sext i32 %10 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = getelementptr i8, ptr addrspace(1) %33, i64 -4, !dbg !24
  %35 = sext i32 %9 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = add i32 %9, 2, !dbg !26
  %38 = sext i32 %37 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = add i32 %9, 3, !dbg !28
  %41 = add i32 %9, 4, !dbg !28
  %42 = sext i32 %40 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !29
  %44 = sext i32 %41 to i64, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !29
  %46 = add i32 %9, 5, !dbg !30
  %47 = add i32 %9, 6, !dbg !30
  %48 = sext i32 %46 to i64, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !31
  %50 = sext i32 %47 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !31
  %52 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !32
  %53 = insertelement <2 x i32> %52, i32 %9, i64 1, !dbg !32
  %54 = srem <2 x i32> %53, splat (i32 4), !dbg !32
  %55 = extractelement <2 x i32> %54, i64 0, !dbg !33
  %56 = icmp sgt i32 %55, 0, !dbg !34
  %57 = extractelement <2 x i32> %54, i64 1, !dbg !35
  %58 = icmp sgt i32 %57, 0, !dbg !17
  %59 = and i1 %58, %56, !dbg !36
  %60 = and i1 %14, %56, !dbg !36
  %61 = and i1 %11, %59, !dbg !37
  %62 = and i1 %11, %60, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %61, i32 0, i1 %61) #1, !dbg !38
  %64 = bitcast i32 %63 to float, !dbg !38
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %62, i32 0, i1 %62) #1, !dbg !38
  %66 = bitcast i32 %65 to float, !dbg !38
  %67 = icmp sgt i32 %57, -1, !dbg !39
  %68 = and i1 %67, %56, !dbg !40
  %69 = and i1 %11, %68, !dbg !41
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #1, !dbg !42
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !42
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !42
  %73 = bitcast i32 %71 to float, !dbg !42
  %74 = bitcast i32 %72 to float, !dbg !42
  %75 = fcmp ogt float %73, %64, !dbg !43
  %76 = fcmp ogt float %74, %66, !dbg !43
  %77 = fcmp uno float %73, 0.000000e+00, !dbg !47
  %78 = fcmp uno float %74, 0.000000e+00, !dbg !47
  %79 = or i1 %75, %77, !dbg !48
  %80 = or i1 %76, %78, !dbg !48
  %81 = select i1 %79, float %73, float %64, !dbg !49
  %82 = select i1 %80, float %74, float %66, !dbg !49
  %83 = icmp ult i32 %57, 4, !dbg !20
  %84 = and i1 %83, %56, !dbg !20
  %85 = and i1 %22, %56, !dbg !20
  %86 = and i1 %11, %84, !dbg !50
  %87 = and i1 %11, %85, !dbg !50
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %86, i32 0, i1 %86) #1, !dbg !51
  %89 = bitcast i32 %88 to float, !dbg !51
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %87, i32 0, i1 %87) #1, !dbg !51
  %91 = bitcast i32 %90 to float, !dbg !51
  %92 = fcmp olt float %81, %89, !dbg !52
  %93 = fcmp olt float %82, %91, !dbg !52
  %94 = fcmp uno float %89, 0.000000e+00, !dbg !54
  %95 = fcmp uno float %91, 0.000000e+00, !dbg !54
  %96 = or i1 %94, %92, !dbg !55
  %97 = or i1 %95, %93, !dbg !55
  %98 = select i1 %96, float %89, float %81, !dbg !56
  %99 = select i1 %97, float %91, float %82, !dbg !56
  %100 = add nsw <2 x i32> %54, splat (i32 2), !dbg !57
  %101 = extractelement <2 x i32> %100, i64 1, !dbg !58
  %102 = icmp ult i32 %101, 4, !dbg !59
  %103 = and i1 %56, %102, !dbg !59
  %104 = and i1 %11, %103, !dbg !60
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #1, !dbg !61
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !61
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !61
  %108 = bitcast i32 %106 to float, !dbg !61
  %109 = bitcast i32 %107 to float, !dbg !61
  %110 = fcmp olt float %98, %108, !dbg !62
  %111 = fcmp olt float %99, %109, !dbg !62
  %112 = fcmp uno float %108, 0.000000e+00, !dbg !64
  %113 = fcmp uno float %109, 0.000000e+00, !dbg !64
  %114 = or i1 %112, %110, !dbg !65
  %115 = or i1 %113, %111, !dbg !65
  %116 = select i1 %114, float %108, float %98, !dbg !66
  %117 = select i1 %115, float %109, float %99, !dbg !66
  %118 = icmp sgt i32 %55, -1, !dbg !67
  %119 = and i1 %58, %118, !dbg !68
  %120 = and i1 %14, %118, !dbg !68
  %121 = and i1 %11, %119, !dbg !69
  %122 = and i1 %11, %120, !dbg !69
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %121, i32 0, i1 %121) #1, !dbg !70
  %124 = bitcast i32 %123 to float, !dbg !70
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %122, i32 0, i1 %122) #1, !dbg !70
  %126 = bitcast i32 %125 to float, !dbg !70
  %127 = fcmp olt float %116, %124, !dbg !71
  %128 = fcmp olt float %117, %126, !dbg !71
  %129 = fcmp uno float %124, 0.000000e+00, !dbg !73
  %130 = fcmp uno float %126, 0.000000e+00, !dbg !73
  %131 = or i1 %129, %127, !dbg !74
  %132 = or i1 %130, %128, !dbg !74
  %133 = select i1 %131, float %124, float %116, !dbg !75
  %134 = select i1 %132, float %126, float %117, !dbg !75
  %135 = or i32 %55, %57, !dbg !76
  %136 = icmp sgt i32 %135, -1, !dbg !76
  %137 = and i1 %11, %136, !dbg !77
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %137, i32 0, i1 %137, i32 0, i1 %137) #1, !dbg !78
  %139 = extractvalue { i32, i32 } %138, 0, !dbg !78
  %140 = extractvalue { i32, i32 } %138, 1, !dbg !78
  %141 = bitcast i32 %139 to float, !dbg !78
  %142 = bitcast i32 %140 to float, !dbg !78
  %143 = fcmp olt float %133, %141, !dbg !79
  %144 = fcmp olt float %134, %142, !dbg !79
  %145 = fcmp uno float %141, 0.000000e+00, !dbg !81
  %146 = fcmp uno float %142, 0.000000e+00, !dbg !81
  %147 = or i1 %145, %143, !dbg !82
  %148 = or i1 %146, %144, !dbg !82
  %149 = select i1 %147, float %141, float %133, !dbg !83
  %150 = select i1 %148, float %142, float %134, !dbg !83
  %151 = and i1 %83, %118, !dbg !84
  %152 = and i1 %22, %118, !dbg !84
  %153 = and i1 %11, %151, !dbg !85
  %154 = and i1 %11, %152, !dbg !85
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %153, i32 0, i1 %153) #1, !dbg !86
  %156 = bitcast i32 %155 to float, !dbg !86
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %154, i32 0, i1 %154) #1, !dbg !86
  %158 = bitcast i32 %157 to float, !dbg !86
  %159 = fcmp olt float %149, %156, !dbg !87
  %160 = fcmp olt float %150, %158, !dbg !87
  %161 = fcmp uno float %156, 0.000000e+00, !dbg !89
  %162 = fcmp uno float %158, 0.000000e+00, !dbg !89
  %163 = or i1 %161, %159, !dbg !90
  %164 = or i1 %162, %160, !dbg !90
  %165 = select i1 %163, float %156, float %149, !dbg !91
  %166 = select i1 %164, float %158, float %150, !dbg !91
  %167 = and i1 %118, %102, !dbg !92
  %168 = and i1 %11, %167, !dbg !93
  %169 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %168, i32 0, i1 %168, i32 0, i1 %168) #1, !dbg !94
  %170 = extractvalue { i32, i32 } %169, 0, !dbg !94
  %171 = extractvalue { i32, i32 } %169, 1, !dbg !94
  %172 = bitcast i32 %170 to float, !dbg !94
  %173 = bitcast i32 %171 to float, !dbg !94
  %174 = fcmp olt float %165, %172, !dbg !95
  %175 = fcmp olt float %166, %173, !dbg !95
  %176 = fcmp uno float %172, 0.000000e+00, !dbg !97
  %177 = fcmp uno float %173, 0.000000e+00, !dbg !97
  %178 = or i1 %176, %174, !dbg !98
  %179 = or i1 %177, %175, !dbg !98
  %180 = select i1 %178, float %172, float %165, !dbg !99
  %181 = select i1 %179, float %173, float %166, !dbg !99
  %182 = add nsw i32 %55, 1, !dbg !33
  %183 = icmp ult i32 %182, 4, !dbg !33
  %184 = and i1 %58, %183, !dbg !100
  %185 = and i1 %14, %183, !dbg !100
  %186 = and i1 %11, %184, !dbg !101
  %187 = and i1 %11, %185, !dbg !101
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %186, i32 0, i1 %186) #1, !dbg !102
  %189 = bitcast i32 %188 to float, !dbg !102
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %187, i32 0, i1 %187) #1, !dbg !102
  %191 = bitcast i32 %190 to float, !dbg !102
  %192 = fcmp olt float %180, %189, !dbg !103
  %193 = fcmp olt float %181, %191, !dbg !103
  %194 = fcmp uno float %189, 0.000000e+00, !dbg !105
  %195 = fcmp uno float %191, 0.000000e+00, !dbg !105
  %196 = or i1 %194, %192, !dbg !106
  %197 = or i1 %195, %193, !dbg !106
  %198 = select i1 %196, float %189, float %180, !dbg !107
  %199 = select i1 %197, float %191, float %181, !dbg !107
  %200 = and i1 %67, %183, !dbg !108
  %201 = and i1 %11, %200, !dbg !109
  %202 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %201, i32 0, i1 %201, i32 0, i1 %201) #1, !dbg !110
  %203 = extractvalue { i32, i32 } %202, 0, !dbg !110
  %204 = extractvalue { i32, i32 } %202, 1, !dbg !110
  %205 = bitcast i32 %203 to float, !dbg !110
  %206 = bitcast i32 %204 to float, !dbg !110
  %207 = fcmp olt float %198, %205, !dbg !111
  %208 = fcmp olt float %199, %206, !dbg !111
  %209 = fcmp uno float %205, 0.000000e+00, !dbg !113
  %210 = fcmp uno float %206, 0.000000e+00, !dbg !113
  %211 = or i1 %209, %207, !dbg !114
  %212 = or i1 %210, %208, !dbg !114
  %213 = select i1 %211, float %205, float %198, !dbg !115
  %214 = select i1 %212, float %206, float %199, !dbg !115
  %215 = or i32 %182, %57, !dbg !116
  %216 = icmp ult i32 %215, 4, !dbg !116
  %217 = or i32 %182, %21, !dbg !116
  %218 = icmp ult i32 %217, 4, !dbg !116
  %219 = and i1 %11, %216, !dbg !117
  %220 = and i1 %11, %218, !dbg !117
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %219, i32 0, i1 %219) #1, !dbg !118
  %222 = bitcast i32 %221 to float, !dbg !118
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %220, i32 0, i1 %220) #1, !dbg !118
  %224 = bitcast i32 %223 to float, !dbg !118
  %225 = fcmp olt float %213, %222, !dbg !119
  %226 = fcmp olt float %214, %224, !dbg !119
  %227 = fcmp uno float %222, 0.000000e+00, !dbg !121
  %228 = fcmp uno float %224, 0.000000e+00, !dbg !121
  %229 = or i1 %227, %225, !dbg !122
  %230 = or i1 %228, %226, !dbg !122
  %231 = select i1 %229, float %222, float %213, !dbg !123
  %232 = select i1 %230, float %224, float %214, !dbg !123
  %233 = or i32 %182, %101, !dbg !124
  %234 = icmp ult i32 %233, 4, !dbg !124
  %235 = and i1 %11, %234, !dbg !125
  %236 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %235, i32 0, i1 %235, i32 0, i1 %235) #1, !dbg !126
  %237 = extractvalue { i32, i32 } %236, 0, !dbg !126
  %238 = extractvalue { i32, i32 } %236, 1, !dbg !126
  %239 = bitcast i32 %237 to float, !dbg !126
  %240 = bitcast i32 %238 to float, !dbg !126
  %241 = fcmp olt float %231, %239, !dbg !127
  %242 = fcmp olt float %232, %240, !dbg !127
  %243 = fcmp uno float %239, 0.000000e+00, !dbg !129
  %244 = fcmp uno float %240, 0.000000e+00, !dbg !129
  %245 = or i1 %243, %241, !dbg !130
  %246 = or i1 %244, %242, !dbg !130
  %247 = select i1 %245, float %239, float %231, !dbg !131
  %248 = select i1 %246, float %240, float %232, !dbg !131
  %249 = extractelement <2 x i32> %100, i64 0, !dbg !58
  %250 = icmp ult i32 %249, 4, !dbg !57
  %251 = and i1 %58, %250, !dbg !132
  %252 = and i1 %14, %250, !dbg !132
  %253 = add i32 %9, 7, !dbg !133
  %254 = add i32 %9, 8, !dbg !133
  %255 = sext i32 %253 to i64, !dbg !134
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !134
  %257 = sext i32 %254 to i64, !dbg !134
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !134
  %259 = and i1 %11, %251, !dbg !135
  %260 = and i1 %11, %252, !dbg !135
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %256, i1 %259, i32 0, i1 %259) #1, !dbg !136
  %262 = bitcast i32 %261 to float, !dbg !136
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %260, i32 0, i1 %260) #1, !dbg !136
  %264 = bitcast i32 %263 to float, !dbg !136
  %265 = fcmp olt float %247, %262, !dbg !137
  %266 = fcmp olt float %248, %264, !dbg !137
  %267 = fcmp uno float %262, 0.000000e+00, !dbg !139
  %268 = fcmp uno float %264, 0.000000e+00, !dbg !139
  %269 = or i1 %267, %265, !dbg !140
  %270 = or i1 %268, %266, !dbg !140
  %271 = select i1 %269, float %262, float %247, !dbg !141
  %272 = select i1 %270, float %264, float %248, !dbg !141
  %273 = and i1 %67, %250, !dbg !142
  %274 = and i1 %11, %273, !dbg !143
  %275 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %258, i1 %274, i32 0, i1 %274, i32 0, i1 %274) #1, !dbg !144
  %276 = extractvalue { i32, i32 } %275, 0, !dbg !144
  %277 = extractvalue { i32, i32 } %275, 1, !dbg !144
  %278 = bitcast i32 %276 to float, !dbg !144
  %279 = bitcast i32 %277 to float, !dbg !144
  %280 = fcmp olt float %271, %278, !dbg !145
  %281 = fcmp olt float %272, %279, !dbg !145
  %282 = fcmp uno float %278, 0.000000e+00, !dbg !147
  %283 = fcmp uno float %279, 0.000000e+00, !dbg !147
  %284 = or i1 %282, %280, !dbg !148
  %285 = or i1 %283, %281, !dbg !148
  %286 = select i1 %284, float %278, float %271, !dbg !149
  %287 = select i1 %285, float %279, float %272, !dbg !149
  %288 = or i32 %249, %57, !dbg !35
  %289 = icmp ult i32 %288, 4, !dbg !35
  %290 = or i32 %249, %21, !dbg !35
  %291 = icmp ult i32 %290, 4, !dbg !35
  %292 = add i32 %9, 9, !dbg !150
  %293 = add i32 %9, 10, !dbg !150
  %294 = sext i32 %292 to i64, !dbg !151
  %295 = getelementptr float, ptr addrspace(1) %0, i64 %294, !dbg !151
  %296 = sext i32 %293 to i64, !dbg !151
  %297 = getelementptr float, ptr addrspace(1) %0, i64 %296, !dbg !151
  %298 = and i1 %11, %289, !dbg !152
  %299 = and i1 %11, %291, !dbg !152
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %295, i1 %298, i32 0, i1 %298) #1, !dbg !153
  %301 = bitcast i32 %300 to float, !dbg !153
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %299, i32 0, i1 %299) #1, !dbg !153
  %303 = bitcast i32 %302 to float, !dbg !153
  %304 = fcmp olt float %286, %301, !dbg !154
  %305 = fcmp olt float %287, %303, !dbg !154
  %306 = fcmp uno float %301, 0.000000e+00, !dbg !156
  %307 = fcmp uno float %303, 0.000000e+00, !dbg !156
  %308 = or i1 %306, %304, !dbg !157
  %309 = or i1 %307, %305, !dbg !157
  %310 = select i1 %308, float %301, float %286, !dbg !158
  %311 = select i1 %309, float %303, float %287, !dbg !158
  %312 = or i32 %249, %101, !dbg !58
  %313 = icmp ult i32 %312, 4, !dbg !58
  %314 = and i1 %11, %313, !dbg !159
  %315 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %297, i1 %314, i32 0, i1 %314, i32 0, i1 %314) #1, !dbg !160
  %316 = extractvalue { i32, i32 } %315, 0, !dbg !160
  %317 = extractvalue { i32, i32 } %315, 1, !dbg !160
  %318 = bitcast i32 %316 to float, !dbg !160
  %319 = bitcast i32 %317 to float, !dbg !160
  %320 = fcmp olt float %310, %318, !dbg !161
  %321 = fcmp olt float %311, %319, !dbg !161
  %322 = fcmp uno float %318, 0.000000e+00, !dbg !163
  %323 = fcmp uno float %319, 0.000000e+00, !dbg !163
  %324 = or i1 %322, %320, !dbg !164
  %325 = or i1 %323, %321, !dbg !164
  %326 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !165
  %327 = bitcast float %310 to i32, !dbg !166
  %328 = select i1 %324, i32 %316, i32 %327, !dbg !167
  %329 = bitcast float %311 to i32, !dbg !166
  %330 = select i1 %325, i32 %317, i32 %329, !dbg !167
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %328, i32 %330, ptr addrspace(1) %326, i1 %11) #1, !dbg !166
  ret void, !dbg !168
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4rdnk7zmmivx5bvg5weuoabxddbujjll6c5cog3c3ppzzotawkx.py", directory: "inductor_cache/4r")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_0", linkageName: "triton_poi_fused_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 19, scope: !7)
!18 = !DILocation(line: 38, column: 38, scope: !7)
!19 = !DILocation(line: 38, column: 31, scope: !7)
!20 = !DILocation(line: 50, column: 20, scope: !7)
!21 = !DILocation(line: 51, column: 38, scope: !7)
!22 = !DILocation(line: 51, column: 31, scope: !7)
!23 = !DILocation(line: 66, column: 38, scope: !7)
!24 = !DILocation(line: 66, column: 31, scope: !7)
!25 = !DILocation(line: 70, column: 31, scope: !7)
!26 = !DILocation(line: 74, column: 35, scope: !7)
!27 = !DILocation(line: 74, column: 31, scope: !7)
!28 = !DILocation(line: 86, column: 35, scope: !7)
!29 = !DILocation(line: 86, column: 31, scope: !7)
!30 = !DILocation(line: 94, column: 35, scope: !7)
!31 = !DILocation(line: 94, column: 31, scope: !7)
!32 = !DILocation(line: 24, column: 26, scope: !7)
!33 = !DILocation(line: 83, column: 20, scope: !7)
!34 = !DILocation(line: 29, column: 19, scope: !7)
!35 = !DILocation(line: 113, column: 20, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 51, scope: !7)
!38 = !DILocation(line: 38, column: 43, scope: !7)
!39 = !DILocation(line: 40, column: 21, scope: !7)
!40 = !DILocation(line: 42, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 51, scope: !7)
!42 = !DILocation(line: 44, column: 43, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 45, column: 42, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 51, column: 51, scope: !7)
!51 = !DILocation(line: 51, column: 43, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !53)
!53 = !DILocation(line: 52, column: 42, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !53)
!57 = !DILocation(line: 103, column: 20, scope: !7)
!58 = !DILocation(line: 117, column: 20, scope: !7)
!59 = !DILocation(line: 57, column: 20, scope: !7)
!60 = !DILocation(line: 58, column: 51, scope: !7)
!61 = !DILocation(line: 58, column: 43, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !63)
!63 = !DILocation(line: 59, column: 42, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !63)
!67 = !DILocation(line: 61, column: 21, scope: !7)
!68 = !DILocation(line: 64, column: 20, scope: !7)
!69 = !DILocation(line: 66, column: 51, scope: !7)
!70 = !DILocation(line: 66, column: 43, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !72)
!72 = !DILocation(line: 67, column: 42, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !72)
!76 = !DILocation(line: 68, column: 20, scope: !7)
!77 = !DILocation(line: 70, column: 44, scope: !7)
!78 = !DILocation(line: 70, column: 36, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !80)
!80 = !DILocation(line: 71, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !80)
!84 = !DILocation(line: 73, column: 20, scope: !7)
!85 = !DILocation(line: 74, column: 48, scope: !7)
!86 = !DILocation(line: 74, column: 40, scope: !7)
!87 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !88)
!88 = !DILocation(line: 75, column: 42, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !88)
!92 = !DILocation(line: 77, column: 20, scope: !7)
!93 = !DILocation(line: 78, column: 48, scope: !7)
!94 = !DILocation(line: 78, column: 40, scope: !7)
!95 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !96)
!96 = !DILocation(line: 79, column: 42, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !96)
!100 = !DILocation(line: 84, column: 20, scope: !7)
!101 = !DILocation(line: 86, column: 48, scope: !7)
!102 = !DILocation(line: 86, column: 40, scope: !7)
!103 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !104)
!104 = !DILocation(line: 87, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !104)
!108 = !DILocation(line: 88, column: 20, scope: !7)
!109 = !DILocation(line: 90, column: 48, scope: !7)
!110 = !DILocation(line: 90, column: 40, scope: !7)
!111 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !112)
!112 = !DILocation(line: 91, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !112)
!116 = !DILocation(line: 93, column: 20, scope: !7)
!117 = !DILocation(line: 94, column: 48, scope: !7)
!118 = !DILocation(line: 94, column: 40, scope: !7)
!119 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !120)
!120 = !DILocation(line: 95, column: 42, scope: !7)
!121 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !120)
!122 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !120)
!123 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !120)
!124 = !DILocation(line: 97, column: 20, scope: !7)
!125 = !DILocation(line: 98, column: 48, scope: !7)
!126 = !DILocation(line: 98, column: 40, scope: !7)
!127 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !128)
!128 = !DILocation(line: 99, column: 42, scope: !7)
!129 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !128)
!130 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !128)
!131 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !128)
!132 = !DILocation(line: 104, column: 20, scope: !7)
!133 = !DILocation(line: 106, column: 35, scope: !7)
!134 = !DILocation(line: 106, column: 31, scope: !7)
!135 = !DILocation(line: 106, column: 48, scope: !7)
!136 = !DILocation(line: 106, column: 40, scope: !7)
!137 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !138)
!138 = !DILocation(line: 107, column: 42, scope: !7)
!139 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !138)
!140 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !138)
!141 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !138)
!142 = !DILocation(line: 108, column: 20, scope: !7)
!143 = !DILocation(line: 110, column: 48, scope: !7)
!144 = !DILocation(line: 110, column: 40, scope: !7)
!145 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !146)
!146 = !DILocation(line: 111, column: 42, scope: !7)
!147 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !146)
!148 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !146)
!149 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !146)
!150 = !DILocation(line: 114, column: 35, scope: !7)
!151 = !DILocation(line: 114, column: 31, scope: !7)
!152 = !DILocation(line: 114, column: 48, scope: !7)
!153 = !DILocation(line: 114, column: 40, scope: !7)
!154 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !155)
!155 = !DILocation(line: 115, column: 42, scope: !7)
!156 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !155)
!157 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !155)
!158 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !155)
!159 = !DILocation(line: 118, column: 49, scope: !7)
!160 = !DILocation(line: 118, column: 41, scope: !7)
!161 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !162)
!162 = !DILocation(line: 119, column: 42, scope: !7)
!163 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !162)
!164 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !162)
!165 = !DILocation(line: 120, column: 25, scope: !7)
!166 = !DILocation(line: 120, column: 37, scope: !7)
!167 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !162)
!168 = !DILocation(line: 120, column: 4, scope: !7)
