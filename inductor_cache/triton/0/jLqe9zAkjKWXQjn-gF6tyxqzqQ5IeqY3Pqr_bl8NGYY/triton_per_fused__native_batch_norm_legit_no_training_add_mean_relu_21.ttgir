#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0)
#loc1 = loc(unknown)
#loc47 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":66:26)
#loc62 = loc(callsite(#loc1 at #loc47))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":19:0)) attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc3)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc3)
    %5 = arith.remsi %0, %c1024_i32 : i32 loc(#loc4)
    %6 = arith.muli %0, %c16_i32 : i32 loc(#loc5)
    %7 = tt.splat %6 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc6)
    %8 = tt.splat %6 : i32 -> tensor<1x16xi32, #blocked> loc(#loc6)
    %9 = arith.addi %3, %7 : tensor<1x16xi32, #blocked1> loc(#loc6)
    %10 = arith.addi %4, %8 : tensor<1x16xi32, #blocked> loc(#loc6)
    %11 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc7)
    %13 = tt.addptr %11, %9 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc7)
    %14 = tt.addptr %12, %10 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc7)
    %15 = tt.load %13 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %16 = tt.load %14 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %17 = tt.addptr %arg3, %5 : !tt.ptr<f32>, i32 loc(#loc9)
    %18 = tt.splat %17 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %19 = tt.splat %17 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc10)
    %20 = tt.load %18 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %21 = tt.load %19 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc10)
    %22 = tt.addptr %arg4, %5 : !tt.ptr<f32>, i32 loc(#loc11)
    %23 = tt.splat %22 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %24 = tt.splat %22 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %25 = tt.load %23 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %26 = tt.load %24 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %27 = tt.addptr %arg5, %5 : !tt.ptr<f32>, i32 loc(#loc13)
    %28 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %29 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %30 = tt.load %28 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %31 = tt.load %29 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %32 = tt.addptr %arg6, %5 : !tt.ptr<f32>, i32 loc(#loc15)
    %33 = tt.splat %32 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %34 = tt.splat %32 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %35 = tt.load %33 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %36 = tt.load %34 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %37 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc17)
    %38 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc17)
    %39 = tt.addptr %37, %9 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc17)
    %40 = tt.addptr %38, %10 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc17)
    %41 = tt.load %39 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %42 = tt.load %40 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc18)
    %43 = tt.addptr %arg8, %5 : !tt.ptr<f32>, i32 loc(#loc19)
    %44 = tt.splat %43 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc20)
    %45 = tt.splat %43 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %46 = tt.load %44 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc20)
    %47 = tt.load %45 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %48 = tt.addptr %arg9, %5 : !tt.ptr<f32>, i32 loc(#loc21)
    %49 = tt.splat %48 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc22)
    %50 = tt.splat %48 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %51 = tt.load %49 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc22)
    %52 = tt.load %50 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %53 = tt.addptr %arg10, %5 : !tt.ptr<f32>, i32 loc(#loc23)
    %54 = tt.splat %53 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %55 = tt.splat %53 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc24)
    %56 = tt.load %54 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %57 = tt.load %55 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc24)
    %58 = tt.addptr %arg11, %5 : !tt.ptr<f32>, i32 loc(#loc25)
    %59 = tt.splat %58 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc26)
    %60 = tt.splat %58 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc26)
    %61 = tt.load %59 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc26)
    %62 = tt.load %60 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc26)
    %63 = tt.broadcast %20 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc27)
    %64 = tt.broadcast %21 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc27)
    %65 = arith.subf %15, %63 : tensor<1x16xf32, #blocked1> loc(#loc27)
    %66 = arith.subf %16, %64 : tensor<1x16xf32, #blocked> loc(#loc27)
    %67 = arith.addf %25, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc28)
    %68 = arith.addf %26, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc28)
    %69 = tt.extern_elementwise %67 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc29)
    %70 = tt.extern_elementwise %68 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc29)
    %71 = arith.divf %cst_1, %69 : tensor<1x1xf32, #blocked1> loc(#loc30)
    %72 = arith.divf %cst_2, %70 : tensor<1x1xf32, #blocked> loc(#loc30)
    %73 = tt.broadcast %71 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc31)
    %74 = tt.broadcast %72 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc31)
    %75 = arith.mulf %65, %73 : tensor<1x16xf32, #blocked1> loc(#loc31)
    %76 = arith.mulf %66, %74 : tensor<1x16xf32, #blocked> loc(#loc31)
    %77 = tt.broadcast %30 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc32)
    %78 = tt.broadcast %31 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc32)
    %79 = arith.mulf %75, %77 : tensor<1x16xf32, #blocked1> loc(#loc32)
    %80 = arith.mulf %76, %78 : tensor<1x16xf32, #blocked> loc(#loc32)
    %81 = tt.broadcast %35 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc33)
    %82 = tt.broadcast %36 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc33)
    %83 = arith.addf %79, %81 : tensor<1x16xf32, #blocked1> loc(#loc33)
    %84 = arith.addf %80, %82 : tensor<1x16xf32, #blocked> loc(#loc33)
    %85 = tt.broadcast %46 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc34)
    %86 = tt.broadcast %47 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc34)
    %87 = arith.subf %41, %85 : tensor<1x16xf32, #blocked1> loc(#loc34)
    %88 = arith.subf %42, %86 : tensor<1x16xf32, #blocked> loc(#loc34)
    %89 = arith.addf %51, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc35)
    %90 = arith.addf %52, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc35)
    %91 = tt.extern_elementwise %89 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc36)
    %92 = tt.extern_elementwise %90 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc36)
    %93 = arith.divf %cst_1, %91 : tensor<1x1xf32, #blocked1> loc(#loc37)
    %94 = arith.divf %cst_2, %92 : tensor<1x1xf32, #blocked> loc(#loc37)
    %95 = tt.broadcast %93 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc38)
    %96 = tt.broadcast %94 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc38)
    %97 = arith.mulf %87, %95 : tensor<1x16xf32, #blocked1> loc(#loc38)
    %98 = arith.mulf %88, %96 : tensor<1x16xf32, #blocked> loc(#loc38)
    %99 = tt.broadcast %56 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc39)
    %100 = tt.broadcast %57 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc39)
    %101 = arith.mulf %97, %99 : tensor<1x16xf32, #blocked1> loc(#loc39)
    %102 = arith.mulf %98, %100 : tensor<1x16xf32, #blocked> loc(#loc39)
    %103 = tt.broadcast %61 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc40)
    %104 = tt.broadcast %62 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc40)
    %105 = arith.addf %101, %103 : tensor<1x16xf32, #blocked1> loc(#loc40)
    %106 = arith.addf %102, %104 : tensor<1x16xf32, #blocked> loc(#loc40)
    %107 = arith.cmpf ogt, %cst_0, %105 : tensor<1x16xf32, #blocked1> loc(#loc57)
    %108 = arith.cmpf ogt, %cst, %106 : tensor<1x16xf32, #blocked> loc(#loc57)
    %109 = arith.select %107, %cst_0, %105 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc58)
    %110 = arith.select %108, %cst, %106 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc58)
    %111 = arith.addf %83, %109 : tensor<1x16xf32, #blocked1> loc(#loc44)
    %112 = arith.addf %84, %110 : tensor<1x16xf32, #blocked> loc(#loc44)
    %113 = arith.cmpf ogt, %cst_0, %111 : tensor<1x16xf32, #blocked1> loc(#loc59)
    %114 = arith.cmpf ogt, %cst, %112 : tensor<1x16xf32, #blocked> loc(#loc59)
    %115 = arith.select %113, %cst_0, %111 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc60)
    %116 = arith.select %114, %cst, %112 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc60)
    %117 = "tt.reduce"(%115) <{axis = 1 : i32}> ({
    ^bb0(%arg14: f32 loc(callsite(#loc1 at #loc47)), %arg15: f32 loc(callsite(#loc1 at #loc47))):
      %124 = arith.addf %arg14, %arg15 : f32 loc(#loc64)
      tt.reduce.return %124 : f32 loc(#loc61)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc61)
    %118 = tt.expand_dims %117 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc49)
    %119 = arith.divf %118, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc50)
    %120 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc51)
    %121 = tt.addptr %120, %10 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc51)
    tt.store %121, %116 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc52)
    gpu.barrier loc(#loc53)
    %122 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc54)
    %123 = tt.splat %122 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc55)
    tt.store %123, %119 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc55)
    tt.return loc(#loc56)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":23:28)
#loc3 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":26:34)
#loc4 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":31:19)
#loc5 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":32:38)
#loc6 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":32:35)
#loc7 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":32:30)
#loc8 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":32:43)
#loc9 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":33:30)
#loc10 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":33:35)
#loc11 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":34:30)
#loc12 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":34:35)
#loc13 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":35:31)
#loc14 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":35:36)
#loc15 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":36:31)
#loc16 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":36:36)
#loc17 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":37:31)
#loc18 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":37:44)
#loc19 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":38:31)
#loc20 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":38:36)
#loc21 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":39:31)
#loc22 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":39:36)
#loc23 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":40:31)
#loc24 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":40:36)
#loc25 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":41:31)
#loc26 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":41:36)
#loc27 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":42:18)
#loc28 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":44:18)
#loc29 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":45:26)
#loc30 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":47:18)
#loc31 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":50:19)
#loc32 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":51:20)
#loc33 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":52:20)
#loc34 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":53:20)
#loc35 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":54:20)
#loc36 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":55:27)
#loc37 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":56:19)
#loc38 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":58:20)
#loc39 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":59:20)
#loc40 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":60:20)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc42 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":62:42)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc44 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":63:20)
#loc45 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":64:42)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc49 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":66:29)
#loc50 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":68:20)
#loc51 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":69:28)
#loc52 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":69:48)
#loc53 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":70:4)
#loc54 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":71:28)
#loc55 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":71:40)
#loc56 = loc("inductor_cache/yu/cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py":71:4)
#loc57 = loc(callsite(#loc41 at #loc42))
#loc58 = loc(callsite(#loc43 at #loc42))
#loc59 = loc(callsite(#loc41 at #loc45))
#loc60 = loc(callsite(#loc43 at #loc45))
#loc61 = loc(callsite(#loc46 at #loc47))
#loc63 = loc(callsite(#loc48 at #loc46))
#loc64 = loc(callsite(#loc63 at #loc47))
