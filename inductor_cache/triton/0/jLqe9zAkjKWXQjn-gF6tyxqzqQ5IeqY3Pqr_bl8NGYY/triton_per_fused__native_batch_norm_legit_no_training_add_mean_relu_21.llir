; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %17 = and i32 %16, 15, !dbg !11
  %18 = srem i32 %15, 1024, !dbg !12
  %19 = shl i32 %15, 4, !dbg !13
  %20 = or disjoint i32 %19, %17, !dbg !14
  %21 = sext i32 %20 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !15
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !16
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !16
  %25 = sext i32 %18 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !17
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !20
  %31 = bitcast i32 %30 to float, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !20
  %33 = bitcast i32 %32 to float, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #5, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #5, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #5, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #5, !dbg !34
  %57 = fadd float %31, 0x3EE4F8B580000000, !dbg !35
  %58 = fadd float %33, 0x3EE4F8B580000000, !dbg !35
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %59, 0, !dbg !36
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i = icmp eq i32 %60, 0, !dbg !36
  br i1 %.not.i, label %66, label %61, !dbg !36

61:                                               ; preds = %14
  br i1 %.not1.i, label %64, label %62, !dbg !36

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

66:                                               ; preds = %14
  br i1 %.not1.i, label %69, label %67, !dbg !36

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !36
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i1 = icmp eq i32 %71, 0, !dbg !36
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i4 = icmp eq i32 %72, 0, !dbg !36
  br i1 %.not.i1, label %78, label %73, !dbg !36

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !36

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #5, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #5, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !36

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #5, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #5, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %74, %76, %79, %81
  %.0.i3 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !36
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !37
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !37
  %85 = fadd float %48, 0x3EE4F8B580000000, !dbg !38
  %86 = fadd float %50, 0x3EE4F8B580000000, !dbg !38
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i6 = icmp eq i32 %87, 0, !dbg !39
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %.not1.i9 = icmp eq i32 %88, 0, !dbg !39
  br i1 %.not.i6, label %94, label %89, !dbg !39

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !39

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #5, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #5, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !39

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #5, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #5, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

__nv_sqrtf.exit10:                                ; preds = %90, %92, %95, %97
  %.0.i8 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !39
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i11 = icmp eq i32 %99, 0, !dbg !39
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %.not1.i14 = icmp eq i32 %100, 0, !dbg !39
  br i1 %.not.i11, label %106, label %101, !dbg !39

101:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %104, label %102, !dbg !39

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #5, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #5, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !39

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #5, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #5, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

__nv_sqrtf.exit15:                                ; preds = %102, %104, %107, %109
  %.0.i13 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !39
  %111 = bitcast i32 %42 to float, !dbg !26
  %112 = bitcast i32 %45 to float, !dbg !28
  %113 = fsub float %111, %112, !dbg !40
  %114 = bitcast i32 %41 to float, !dbg !26
  %115 = bitcast i32 %44 to float, !dbg !28
  %116 = fsub float %114, %115, !dbg !40
  %117 = bitcast i32 %24 to float, !dbg !16
  %118 = bitcast i32 %28 to float, !dbg !18
  %119 = fsub float %117, %118, !dbg !41
  %120 = fmul float %119, %84, !dbg !42
  %121 = bitcast i32 %36 to float, !dbg !22
  %122 = fmul float %120, %121, !dbg !43
  %123 = bitcast i32 %39 to float, !dbg !24
  %124 = fadd float %122, %123, !dbg !44
  %125 = bitcast i32 %23 to float, !dbg !16
  %126 = bitcast i32 %27 to float, !dbg !18
  %127 = fsub float %125, %126, !dbg !41
  %128 = fmul float %127, %83, !dbg !42
  %129 = bitcast i32 %35 to float, !dbg !22
  %130 = fmul float %128, %129, !dbg !43
  %131 = bitcast i32 %38 to float, !dbg !24
  %132 = fadd float %130, %131, !dbg !44
  %133 = bitcast i32 %56 to float, !dbg !34
  %134 = bitcast i32 %55 to float, !dbg !34
  %135 = bitcast i32 %53 to float, !dbg !32
  %136 = bitcast i32 %52 to float, !dbg !32
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #5, !dbg !45
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !45
  %139 = fmul float %116, %137, !dbg !46
  %140 = fmul float %113, %138, !dbg !46
  %141 = fmul float %139, %136, !dbg !47
  %142 = fmul float %140, %135, !dbg !47
  %143 = fadd float %141, %134, !dbg !48
  %144 = fadd float %142, %133, !dbg !48
  %145 = fcmp olt float %143, 0.000000e+00, !dbg !49
  %146 = fcmp olt float %144, 0.000000e+00, !dbg !49
  %147 = select i1 %145, float 0.000000e+00, float %143, !dbg !53
  %148 = select i1 %146, float 0.000000e+00, float %144, !dbg !53
  %149 = fadd float %132, %147, !dbg !54
  %150 = fadd float %124, %148, !dbg !54
  %151 = fcmp olt float %149, 0.000000e+00, !dbg !55
  %152 = fcmp olt float %150, 0.000000e+00, !dbg !55
  %153 = select i1 %151, float 0.000000e+00, float %149, !dbg !57
  %154 = select i1 %152, float 0.000000e+00, float %150, !dbg !57
  %155 = bitcast float %153 to i32, !dbg !58
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 8, i32 31), !dbg !58
  %157 = bitcast i32 %156 to float, !dbg !58
  %158 = fadd float %153, %157, !dbg !62
  %159 = bitcast float %158 to i32, !dbg !58
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 4, i32 31), !dbg !58
  %161 = bitcast i32 %160 to float, !dbg !58
  %162 = fadd float %158, %161, !dbg !62
  %163 = bitcast float %162 to i32, !dbg !58
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !58
  %165 = bitcast i32 %164 to float, !dbg !58
  %166 = fadd float %162, %165, !dbg !62
  %167 = bitcast float %166 to i32, !dbg !58
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !58
  %169 = bitcast i32 %168 to float, !dbg !58
  %170 = fadd float %166, %169, !dbg !62
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float 1.600000e+01) #5, !dbg !64
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !65
  %173 = and i32 %16, 48, !dbg !66
  %174 = icmp eq i32 %173, 0, !dbg !66
  %175 = bitcast float %154 to i32, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %172, i1 %174) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %176 = sext i32 %15 to i64, !dbg !68
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !68
  %urem = and i32 %16, 63, !dbg !69
  %178 = icmp eq i32 %urem, 0, !dbg !69
  %179 = bitcast float %171 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %179, ptr addrspace(1) %177, i1 %178) #5, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyu4atiykzi647y2yvxigjg2trl64tllwmkerpksx7wbee3qzbec.py", directory: "inductor_cache/yu")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 19, scope: !7)
!13 = !DILocation(line: 32, column: 38, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 43, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 35, column: 36, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 36, scope: !7)
!25 = !DILocation(line: 37, column: 31, scope: !7)
!26 = !DILocation(line: 37, column: 44, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 31, scope: !7)
!30 = !DILocation(line: 39, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 31, scope: !7)
!32 = !DILocation(line: 40, column: 36, scope: !7)
!33 = !DILocation(line: 41, column: 31, scope: !7)
!34 = !DILocation(line: 41, column: 36, scope: !7)
!35 = !DILocation(line: 44, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 26, scope: !7)
!37 = !DILocation(line: 47, column: 18, scope: !7)
!38 = !DILocation(line: 54, column: 20, scope: !7)
!39 = !DILocation(line: 55, column: 27, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 42, column: 18, scope: !7)
!42 = !DILocation(line: 50, column: 19, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 19, scope: !7)
!46 = !DILocation(line: 58, column: 20, scope: !7)
!47 = !DILocation(line: 59, column: 20, scope: !7)
!48 = !DILocation(line: 60, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 62, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !56)
!56 = !DILocation(line: 64, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !56)
!58 = !DILocation(line: 267, column: 36, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!61 = !DILocation(line: 66, column: 26, scope: !7)
!62 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !61)
!63 = distinct !DILexicalBlockFile(scope: !59, file: !60, discriminator: 0)
!64 = !DILocation(line: 68, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 28, scope: !7)
!66 = !DILocation(line: 69, column: 48, scope: !7)
!67 = !DILocation(line: 70, column: 4, scope: !7)
!68 = !DILocation(line: 71, column: 28, scope: !7)
!69 = !DILocation(line: 71, column: 40, scope: !7)
!70 = !DILocation(line: 71, column: 4, scope: !7)
