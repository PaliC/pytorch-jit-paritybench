; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_unsqueeze_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %9, 32, !dbg !12
  %11 = shl i32 %7, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = and i32 %11, 60, !dbg !12
  %14 = or disjoint i32 %6, %9, !dbg !13
  %15 = or disjoint i32 %6, %10, !dbg !13
  %16 = or disjoint i32 %6, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 4, !dbg !15
  %19 = lshr i32 %7, 4, !dbg !16
  %20 = and i32 %19, 7, !dbg !16
  %21 = or disjoint i32 %18, %12, !dbg !17
  %22 = or disjoint i32 %18, %20, !dbg !17
  %23 = or disjoint i32 %22, 8, !dbg !17
  %24 = icmp slt i32 %21, 16, !dbg !18
  %25 = icmp slt i32 %22, 16, !dbg !18
  %26 = icmp slt i32 %23, 16, !dbg !18
  %27 = add i32 %21, 16384, !dbg !19
  %28 = shl i32 %14, 4, !dbg !20
  %29 = shl i32 %15, 4, !dbg !20
  %30 = add i32 %27, %28, !dbg !21
  %31 = add i32 %27, %29, !dbg !21
  %32 = sext i32 %30 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %24) #2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %24) #2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !23
  %46 = shl i32 %22, 10, !dbg !24
  %47 = shl i32 %23, 10, !dbg !24
  %48 = add i32 %46, %16, !dbg !25
  %49 = add i32 %16, %47, !dbg !25
  %50 = sext i32 %48 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !26
  %52 = sext i32 %49 to i64, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !26
  %54 = shl i32 %7, 8, !dbg !27
  %55 = and i32 %54, 768, !dbg !27
  %56 = or disjoint i32 %55, %9, !dbg !27
  %57 = and i32 %11, 508, !dbg !27
  %58 = lshr exact i32 %55, 2, !dbg !27
  %59 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %58, !dbg !27
  %60 = getelementptr float, ptr addrspace(3) %59, i32 %56, !dbg !27
  %61 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #2, !dbg !27
  %62 = or disjoint i32 %56, 64, !dbg !27
  %63 = lshr i32 %62, 4, !dbg !27
  %64 = and i32 %63, 52, !dbg !27
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !27
  %66 = getelementptr float, ptr addrspace(3) %65, i32 %62, !dbg !27
  %67 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #2, !dbg !27
  %68 = or disjoint i32 %56, 128, !dbg !27
  %69 = lshr i32 %68, 4, !dbg !27
  %70 = and i32 %69, 56, !dbg !27
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !27
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %68, !dbg !27
  %73 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !27
  %74 = or disjoint i32 %56, 192, !dbg !27
  %75 = lshr i32 %74, 4, !dbg !27
  %76 = and i32 %75, 60, !dbg !27
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !27
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %74, !dbg !27
  %79 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !27
  %80 = or disjoint i32 %56, 32, !dbg !27
  %81 = getelementptr float, ptr addrspace(3) %59, i32 %80, !dbg !27
  %82 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !27
  %83 = or disjoint i32 %56, 96, !dbg !27
  %84 = lshr i32 %83, 4, !dbg !27
  %85 = and i32 %84, 52, !dbg !27
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !27
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %83, !dbg !27
  %88 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !27
  %89 = or disjoint i32 %56, 160, !dbg !27
  %90 = lshr i32 %89, 4, !dbg !27
  %91 = and i32 %90, 56, !dbg !27
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !27
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %89, !dbg !27
  %94 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !27
  %95 = or disjoint i32 %56, 224, !dbg !27
  %96 = lshr i32 %95, 4, !dbg !27
  %97 = and i32 %96, 60, !dbg !27
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !27
  %99 = getelementptr float, ptr addrspace(3) %98, i32 %95, !dbg !27
  %100 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %101 = lshr i32 %11, 4, !dbg !27
  %102 = and i32 %101, 28, !dbg !27
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %102, !dbg !27
  %104 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %57, !dbg !27
  %105 = or disjoint i32 %57, 512, !dbg !27
  %106 = lshr i32 %105, 4, !dbg !27
  %107 = and i32 %106, 60, !dbg !27
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !27
  %109 = getelementptr inbounds float, ptr addrspace(3) %108, i32 %105, !dbg !27
  %110 = load <4 x i32>, ptr addrspace(3) %109, align 16, !dbg !27
  %.extract = load i32, ptr addrspace(3) %104, align 16, !dbg !27
  %111 = getelementptr inbounds i8, ptr addrspace(3) %104, i32 4, !dbg !27
  %.extract10 = load i32, ptr addrspace(3) %111, align 4, !dbg !27
  %112 = getelementptr inbounds i8, ptr addrspace(3) %104, i32 8, !dbg !27
  %.extract11 = load i32, ptr addrspace(3) %112, align 8, !dbg !27
  %113 = getelementptr inbounds i8, ptr addrspace(3) %104, i32 12, !dbg !27
  %.extract12 = load i32, ptr addrspace(3) %113, align 4, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %51, i1 %25) #2, !dbg !27
  %.extract13 = extractelement <4 x i32> %110, i64 0, !dbg !27
  %.extract14 = extractelement <4 x i32> %110, i64 1, !dbg !27
  %.extract15 = extractelement <4 x i32> %110, i64 2, !dbg !27
  %.extract16 = extractelement <4 x i32> %110, i64 3, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %53, i1 %26) #2, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c42ljtgumjymuxxky6dg7n74hguml5sisovmbzlj23iqwqcc6igj.py", directory: "inductor_cache/42")
!4 = !{ptr @triton_poi_fused_unsqueeze_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_unsqueeze_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_unsqueeze_2", linkageName: "triton_poi_fused_unsqueeze_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 38, scope: !7)
!20 = !DILocation(line: 30, column: 46, scope: !7)
!21 = !DILocation(line: 30, column: 43, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 51, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 25, scope: !7)
!27 = !DILocation(line: 31, column: 46, scope: !7)
!28 = !DILocation(line: 31, column: 4, scope: !7)
