#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":19:0)
#loc1 = loc(unknown)
#loc16 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":39:24)
#loc23 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":47:26)
#loc44 = loc(callsite(#loc1 at #loc16))
#loc47 = loc(callsite(#loc1 at #loc23))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_relu_repeat_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %6 = arith.remsi %0, %c4_i32 : i32 loc(#loc5)
    %7 = tt.addptr %arg0, %6 : !tt.ptr<f32>, i32 loc(#loc6)
    %8 = tt.splat %7 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %9 = tt.splat %7 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %10 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc7)
    %11 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc7)
    %12 = tt.load %8, %10 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %13 = tt.load %9, %11 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %14 = arith.muli %0, %c16_i32 : i32 loc(#loc8)
    %15 = tt.splat %14 : i32 -> tensor<1x16xi32, #blocked> loc(#loc9)
    %16 = tt.splat %14 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc9)
    %17 = arith.addi %4, %15 : tensor<1x16xi32, #blocked> loc(#loc9)
    %18 = arith.addi %5, %16 : tensor<1x16xi32, #blocked1> loc(#loc9)
    %19 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %20 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %21 = tt.addptr %19, %17 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc10)
    %22 = tt.addptr %20, %18 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc10)
    %23 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc11)
    %24 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc11)
    %25 = tt.load %21, %23, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc11)
    %26 = tt.load %22, %24, %cst_4 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %27 = tt.addptr %arg2, %6 : !tt.ptr<f32>, i32 loc(#loc12)
    %28 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %29 = tt.load %28, %10 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %30 = arith.select %23, %25, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc14)
    %31 = arith.select %24, %26, %cst_4 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc14)
    %32 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc16)), %arg10: f32 loc(callsite(#loc1 at #loc16))):
      %72 = arith.addf %arg9, %arg10 : f32 loc(#loc50)
      tt.reduce.return %72 : f32 loc(#loc43)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
    %33 = "tt.reduce"(%31) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc16)), %arg10: f32 loc(callsite(#loc1 at #loc16))):
      %72 = arith.addf %arg9, %arg10 : f32 loc(#loc50)
      tt.reduce.return %72 : f32 loc(#loc43)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc43)
    %34 = tt.expand_dims %32 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc18)
    %35 = tt.expand_dims %33 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc18)
    %36 = arith.divf %34, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc19)
    %37 = arith.divf %35, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc19)
    %38 = tt.broadcast %36 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc20)
    %39 = tt.broadcast %37 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc20)
    %40 = arith.subf %25, %38 : tensor<1x16xf32, #blocked> loc(#loc20)
    %41 = arith.subf %26, %39 : tensor<1x16xf32, #blocked1> loc(#loc20)
    %42 = arith.mulf %40, %40 : tensor<1x16xf32, #blocked> loc(#loc21)
    %43 = arith.mulf %41, %41 : tensor<1x16xf32, #blocked1> loc(#loc21)
    %44 = arith.select %23, %42, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc22)
    %45 = arith.select %24, %43, %cst_4 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc22)
    %46 = "tt.reduce"(%44) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc23)), %arg10: f32 loc(callsite(#loc1 at #loc23))):
      %72 = arith.addf %arg9, %arg10 : f32 loc(#loc51)
      tt.reduce.return %72 : f32 loc(#loc46)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc46)
    %47 = "tt.reduce"(%45) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc23)), %arg10: f32 loc(callsite(#loc1 at #loc23))):
      %72 = arith.addf %arg9, %arg10 : f32 loc(#loc51)
      tt.reduce.return %72 : f32 loc(#loc46)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc46)
    %48 = tt.expand_dims %46 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc24)
    %49 = tt.expand_dims %47 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc24)
    %50 = arith.divf %48, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc25)
    %51 = arith.divf %49, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc25)
    %52 = arith.addf %50, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc26)
    %53 = arith.addf %51, %cst_1 : tensor<1x1xf32, #blocked1> loc(#loc26)
    %54 = tt.extern_elementwise %52 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc27)
    %55 = tt.extern_elementwise %53 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc27)
    %56 = tt.broadcast %54 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc28)
    %57 = arith.mulf %40, %56 : tensor<1x16xf32, #blocked> loc(#loc28)
    %58 = tt.broadcast %12 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc29)
    %59 = arith.mulf %57, %58 : tensor<1x16xf32, #blocked> loc(#loc29)
    %60 = tt.broadcast %29 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc30)
    %61 = arith.addf %59, %60 : tensor<1x16xf32, #blocked> loc(#loc30)
    %62 = arith.cmpf ogt, %cst, %61 : tensor<1x16xf32, #blocked> loc(#loc48)
    %63 = arith.select %62, %cst, %61 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc49)
    %64 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc34)
    %65 = tt.splat %64 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    tt.store %65, %13, %11 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %66 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc36)
    %67 = tt.addptr %66, %17 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc36)
    tt.store %67, %63, %23 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc37)
    %68 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc38)
    %69 = tt.splat %68 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc39)
    tt.store %69, %55, %11 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc39)
    %70 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc40)
    %71 = tt.splat %70 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    tt.store %71, %37, %11 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":23:28)
#loc3 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":25:21)
#loc4 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":26:34)
#loc5 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":31:19)
#loc6 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":32:31)
#loc7 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":32:41)
#loc8 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":33:38)
#loc9 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":33:35)
#loc10 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":33:30)
#loc11 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":33:43)
#loc12 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":34:31)
#loc13 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":34:36)
#loc14 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":38:33)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc18 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":39:27)
#loc19 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":42:19)
#loc20 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":43:19)
#loc21 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":44:20)
#loc22 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":46:35)
#loc24 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":47:29)
#loc25 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":50:20)
#loc26 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":52:20)
#loc27 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":53:28)
#loc28 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":54:20)
#loc29 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":55:20)
#loc30 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":56:20)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc32 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":58:42)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc34 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":59:25)
#loc35 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":59:36)
#loc36 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":60:25)
#loc37 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":60:45)
#loc38 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":61:25)
#loc39 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":61:37)
#loc40 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":62:25)
#loc41 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":62:37)
#loc42 = loc("inductor_cache/dv/cdvb2rrtrjgsyhyemq5jngfwkp436jznm4iuebk74etfdsjvx6be.py":62:4)
#loc43 = loc(callsite(#loc15 at #loc16))
#loc45 = loc(callsite(#loc17 at #loc15))
#loc46 = loc(callsite(#loc15 at #loc23))
#loc48 = loc(callsite(#loc31 at #loc32))
#loc49 = loc(callsite(#loc33 at #loc32))
#loc50 = loc(callsite(#loc45 at #loc16))
#loc51 = loc(callsite(#loc45 at #loc23))
