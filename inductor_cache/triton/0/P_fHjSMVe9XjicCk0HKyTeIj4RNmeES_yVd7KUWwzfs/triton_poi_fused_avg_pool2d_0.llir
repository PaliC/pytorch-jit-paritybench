; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 6, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 62, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %5, 1, !dbg !13
  %11 = icmp slt i32 %9, 64, !dbg !14
  %12 = ashr exact i32 %9, 1, !dbg !15
  %13 = shl i32 %9, 2, !dbg !16
  %14 = add i32 %13, -5, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 false, i32 0, i1 false) #1, !dbg !19
  %18 = bitcast i32 %17 to float, !dbg !19
  %19 = add i32 %13, -4, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = add i32 %13, -3, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = add i32 %13, -1, !dbg !24
  %26 = sext i32 %25 to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !25
  %28 = sext i32 %13 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = or disjoint i32 %13, 1, !dbg !27
  %31 = sext i32 %30 to i64, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !28
  %33 = or disjoint i32 %13, 3, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !30
  %36 = or disjoint i32 %13, 4, !dbg !31
  %37 = sext i32 %36 to i64, !dbg !32
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !32
  %39 = or disjoint i32 %13, 5, !dbg !33
  %40 = sext i32 %39 to i64, !dbg !34
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !34
  %42 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !35
  %43 = insertelement <2 x i32> %42, i32 %12, i64 1, !dbg !35
  %44 = srem <2 x i32> %43, splat (i32 2), !dbg !35
  %45 = extractelement <2 x i32> %44, i64 0, !dbg !35
  %46 = extractelement <2 x i32> %44, i64 1, !dbg !36
  %47 = icmp sgt i32 %46, 0, !dbg !37
  %48 = shl nsw <2 x i32> %44, splat (i32 1), !dbg !38
  %49 = shl nsw i32 %45, 1, !dbg !38
  %50 = icmp sgt i32 %45, 0, !dbg !39
  %51 = and i1 %50, %47, !dbg !40
  %52 = add i32 %49, %13, !dbg !41
  %53 = add i32 %52, -5, !dbg !17
  %54 = sext i32 %53 to i64, !dbg !18
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !18
  %56 = and i1 %11, %51, !dbg !42
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %56, i32 0, i1 %56) #1, !dbg !19
  %58 = bitcast i32 %57 to float, !dbg !19
  %59 = icmp sgt i32 %45, -1, !dbg !43
  %60 = and i1 %59, %47, !dbg !44
  %61 = add i32 %52, -4, !dbg !20
  %62 = sext i32 %61 to i64, !dbg !21
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !21
  %64 = and i1 %11, %47, !dbg !45
  %65 = and i1 %11, %60, !dbg !45
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %64, i32 0, i1 %64) #1, !dbg !46
  %67 = bitcast i32 %66 to float, !dbg !46
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %65, i32 0, i1 %65) #1, !dbg !46
  %69 = bitcast i32 %68 to float, !dbg !46
  %70 = fadd float %18, %67, !dbg !47
  %71 = fadd float %58, %69, !dbg !47
  %72 = add i32 %52, -3, !dbg !22
  %73 = sext i32 %72 to i64, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !23
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %64, i32 0, i1 %64) #1, !dbg !48
  %76 = bitcast i32 %75 to float, !dbg !48
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %65, i32 0, i1 %65) #1, !dbg !48
  %78 = bitcast i32 %77 to float, !dbg !48
  %79 = fadd float %70, %76, !dbg !49
  %80 = fadd float %71, %78, !dbg !49
  %81 = icmp sgt i32 %46, -1, !dbg !50
  %82 = and i1 %50, %81, !dbg !51
  %83 = sext i32 %52 to i64, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !25
  %85 = getelementptr i8, ptr addrspace(1) %84, i64 -4, !dbg !25
  %86 = and i1 %11, %82, !dbg !52
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 false, i32 0, i1 false) #1, !dbg !53
  %88 = bitcast i32 %87 to float, !dbg !53
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %86, i32 0, i1 %86) #1, !dbg !53
  %90 = bitcast i32 %89 to float, !dbg !53
  %91 = fadd float %79, %88, !dbg !54
  %92 = fadd float %80, %90, !dbg !54
  %93 = or i32 %46, %45, !dbg !55
  %94 = icmp sgt i32 %93, -1, !dbg !55
  %95 = and i1 %11, %81, !dbg !56
  %96 = and i1 %11, %94, !dbg !56
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %95, i32 0, i1 %95) #1, !dbg !57
  %98 = bitcast i32 %97 to float, !dbg !57
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %96, i32 0, i1 %96) #1, !dbg !57
  %100 = bitcast i32 %99 to float, !dbg !57
  %101 = fadd float %91, %98, !dbg !58
  %102 = fadd float %92, %100, !dbg !58
  %103 = or disjoint i32 %52, 1, !dbg !27
  %104 = sext i32 %103 to i64, !dbg !28
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %95, i32 0, i1 %95) #1, !dbg !59
  %107 = bitcast i32 %106 to float, !dbg !59
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %96, i32 0, i1 %96) #1, !dbg !59
  %109 = bitcast i32 %108 to float, !dbg !59
  %110 = fadd float %101, %107, !dbg !60
  %111 = fadd float %102, %109, !dbg !60
  %112 = add i32 %52, 3, !dbg !29
  %113 = sext i32 %112 to i64, !dbg !30
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !30
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 false, i32 0, i1 false) #1, !dbg !61
  %116 = bitcast i32 %115 to float, !dbg !61
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %86, i32 0, i1 %86) #1, !dbg !61
  %118 = bitcast i32 %117 to float, !dbg !61
  %119 = fadd float %110, %116, !dbg !62
  %120 = fadd float %111, %118, !dbg !62
  %121 = add i32 %52, 4, !dbg !31
  %122 = sext i32 %121 to i64, !dbg !32
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !32
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %95, i32 0, i1 %95) #1, !dbg !63
  %125 = bitcast i32 %124 to float, !dbg !63
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %96, i32 0, i1 %96) #1, !dbg !63
  %127 = bitcast i32 %126 to float, !dbg !63
  %128 = fadd float %119, %125, !dbg !64
  %129 = fadd float %120, %127, !dbg !64
  %130 = add i32 %52, 5, !dbg !33
  %131 = sext i32 %130 to i64, !dbg !34
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !34
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %95, i32 0, i1 %95) #1, !dbg !65
  %134 = bitcast i32 %133 to float, !dbg !65
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %96, i32 0, i1 %96) #1, !dbg !65
  %136 = bitcast i32 %135 to float, !dbg !65
  %137 = fadd float %128, %134, !dbg !66
  %138 = fadd float %129, %136, !dbg !66
  %139 = mul nsw i32 %45, -2, !dbg !67
  %140 = mul nsw i32 %46, -2, !dbg !68
  %141 = add nsw <2 x i32> %48, splat (i32 2), !dbg !69
  %142 = extractelement <2 x i32> %141, i64 1, !dbg !70
  %143 = shl nuw nsw i32 %142, 1, !dbg !70
  %144 = extractelement <2 x i32> %141, i64 0, !dbg !36
  %145 = mul nsw i32 %140, %144, !dbg !71
  %146 = shl nsw i32 %45, 2, !dbg !72
  %147 = mul nsw i32 %146, %46, !dbg !73
  %148 = add nsw i32 %140, 3, !dbg !74
  %149 = shl nsw i32 %46, 2, !dbg !36
  %150 = sub nsw i32 %148, %149, !dbg !36
  %151 = add nsw i32 %150, %142, !dbg !75
  %152 = add nsw i32 %151, %143, !dbg !76
  %reass.add = add nsw i32 %144, %139
  %reass.mul = mul nsw i32 %reass.add, %142
  %153 = or disjoint i32 %139, 1, !dbg !77
  %154 = add nsw i32 %153, %140, !dbg !74
  %155 = add nsw i32 %154, %147, !dbg !78
  %156 = add nsw i32 %155, %144, !dbg !36
  %157 = add nsw i32 %156, %145, !dbg !79
  %158 = add i32 %157, %142, !dbg !75
  %159 = add i32 %158, %reass.mul, !dbg !76
  %160 = sitofp i32 %152 to float, !dbg !80
  %161 = sitofp i32 %159 to float, !dbg !80
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %160) #1, !dbg !80
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %161) #1, !dbg !80
  %164 = sext i32 %9 to i64, !dbg !81
  %165 = getelementptr float, ptr addrspace(1) %1, i64 %164, !dbg !81
  %166 = bitcast float %162 to i32, !dbg !82
  %167 = bitcast float %163 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %167, ptr addrspace(1) %165, i1 %11) #1, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cisvofwnbheoik5dwyaxrlwkyqcwcfxrblbwyzbk32mcjuyqfajp.py", directory: "inductor_cache/is")
!4 = !{ptr @triton_poi_fused_avg_pool2d_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_0", linkageName: "triton_poi_fused_avg_pool2d_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 39, column: 47, scope: !7)
!17 = !DILocation(line: 39, column: 45, scope: !7)
!18 = !DILocation(line: 39, column: 31, scope: !7)
!19 = !DILocation(line: 39, column: 52, scope: !7)
!20 = !DILocation(line: 45, column: 45, scope: !7)
!21 = !DILocation(line: 45, column: 31, scope: !7)
!22 = !DILocation(line: 52, column: 45, scope: !7)
!23 = !DILocation(line: 52, column: 31, scope: !7)
!24 = !DILocation(line: 59, column: 45, scope: !7)
!25 = !DILocation(line: 59, column: 31, scope: !7)
!26 = !DILocation(line: 62, column: 31, scope: !7)
!27 = !DILocation(line: 65, column: 42, scope: !7)
!28 = !DILocation(line: 65, column: 31, scope: !7)
!29 = !DILocation(line: 72, column: 42, scope: !7)
!30 = !DILocation(line: 72, column: 31, scope: !7)
!31 = !DILocation(line: 75, column: 42, scope: !7)
!32 = !DILocation(line: 75, column: 31, scope: !7)
!33 = !DILocation(line: 78, column: 42, scope: !7)
!34 = !DILocation(line: 78, column: 31, scope: !7)
!35 = !DILocation(line: 25, column: 19, scope: !7)
!36 = !DILocation(line: 80, column: 241, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 34, column: 20, scope: !7)
!39 = !DILocation(line: 35, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 38, scope: !7)
!42 = !DILocation(line: 39, column: 60, scope: !7)
!43 = !DILocation(line: 41, column: 21, scope: !7)
!44 = !DILocation(line: 44, column: 19, scope: !7)
!45 = !DILocation(line: 45, column: 60, scope: !7)
!46 = !DILocation(line: 45, column: 52, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 52, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 21, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 60, scope: !7)
!53 = !DILocation(line: 59, column: 52, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 62, column: 53, scope: !7)
!57 = !DILocation(line: 62, column: 45, scope: !7)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 49, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 72, column: 49, scope: !7)
!62 = !DILocation(line: 73, column: 20, scope: !7)
!63 = !DILocation(line: 75, column: 49, scope: !7)
!64 = !DILocation(line: 76, column: 20, scope: !7)
!65 = !DILocation(line: 78, column: 49, scope: !7)
!66 = !DILocation(line: 79, column: 20, scope: !7)
!67 = !DILocation(line: 80, column: 22, scope: !7)
!68 = !DILocation(line: 80, column: 34, scope: !7)
!69 = !DILocation(line: 80, column: 60, scope: !7)
!70 = !DILocation(line: 80, column: 103, scope: !7)
!71 = !DILocation(line: 80, column: 250, scope: !7)
!72 = !DILocation(line: 80, column: 316, scope: !7)
!73 = !DILocation(line: 80, column: 319, scope: !7)
!74 = !DILocation(line: 80, column: 40, scope: !7)
!75 = !DILocation(line: 80, column: 325, scope: !7)
!76 = !DILocation(line: 80, column: 389, scope: !7)
!77 = !DILocation(line: 80, column: 29, scope: !7)
!78 = !DILocation(line: 80, column: 167, scope: !7)
!79 = !DILocation(line: 80, column: 314, scope: !7)
!80 = !DILocation(line: 81, column: 20, scope: !7)
!81 = !DILocation(line: 82, column: 25, scope: !7)
!82 = !DILocation(line: 82, column: 37, scope: !7)
!83 = !DILocation(line: 82, column: 4, scope: !7)
