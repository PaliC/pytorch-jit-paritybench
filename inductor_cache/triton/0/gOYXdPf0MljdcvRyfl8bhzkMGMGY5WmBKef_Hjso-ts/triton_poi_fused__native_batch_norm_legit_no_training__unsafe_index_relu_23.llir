; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %16 = or disjoint i32 %14, 512, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %17 = sdiv i32 %.frozen, 64, !dbg !14
  %18 = sdiv i32 %16, 64, !dbg !14
  %19 = srem i32 %17, 64, !dbg !15
  %20 = srem i32 %18, 64, !dbg !15
  %21 = mul i32 %17, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %15, 64, !dbg !16
  %23 = sdiv i32 %14, 4096, !dbg !17
  %24 = sdiv i32 %16, 4096, !dbg !17
  %25 = srem i32 %23, 128, !dbg !18
  %26 = srem i32 %24, 128, !dbg !18
  %27 = sext i32 %19 to i64, !dbg !19
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = sext i32 %20 to i64, !dbg !19
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %39 = sext i32 %.decomposed to i64, !dbg !21
  %40 = getelementptr i64, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = sext i32 %22 to i64, !dbg !21
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !22
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !22
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !22
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !22
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !22
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !22
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !22
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !22
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !22
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !22
  %55 = sext i32 %25 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !23
  %57 = sext i32 %26 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %74 = bitcast i32 %73 to float, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !26
  %76 = bitcast i32 %75 to float, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %78 = bitcast i32 %77 to float, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %80 = bitcast i32 %79 to float, !dbg !26
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %82 = bitcast i32 %81 to float, !dbg !26
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %84 = bitcast i32 %83 to float, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !27
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !28
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !28
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !28
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !28
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !28
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !28
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !28
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !28
  %95 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !29
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !29
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !30
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !30
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !30
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !30
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !30
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !30
  %105 = lshr i64 %31, 58, !dbg !31
  %106 = and i64 %105, 32, !dbg !31
  %107 = add i64 %106, %31, !dbg !31
  %108 = lshr i64 %35, 58, !dbg !31
  %109 = and i64 %108, 32, !dbg !31
  %110 = add i64 %109, %35, !dbg !31
  %111 = lshr i64 %44, 58, !dbg !32
  %112 = and i64 %111, 32, !dbg !32
  %113 = lshr i64 %45, 58, !dbg !32
  %114 = and i64 %113, 32, !dbg !32
  %115 = lshr i64 %47, 58, !dbg !32
  %116 = and i64 %115, 32, !dbg !32
  %117 = lshr i64 %48, 58, !dbg !32
  %118 = and i64 %117, 32, !dbg !32
  %119 = lshr i64 %50, 58, !dbg !32
  %120 = and i64 %119, 32, !dbg !32
  %121 = lshr i64 %51, 58, !dbg !32
  %122 = and i64 %121, 32, !dbg !32
  %123 = lshr i64 %53, 58, !dbg !32
  %124 = and i64 %123, 32, !dbg !32
  %125 = lshr i64 %54, 58, !dbg !32
  %126 = and i64 %125, 32, !dbg !32
  %127 = shl i64 %107, 5, !dbg !33
  %128 = shl i64 %110, 5, !dbg !33
  %129 = shl nsw i32 %23, 10, !dbg !34
  %130 = shl nsw i32 %24, 10, !dbg !34
  %131 = sext i32 %129 to i64, !dbg !35
  %132 = sext i32 %130 to i64, !dbg !35
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !36
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %112, !dbg !36
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %127, !dbg !36
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %131, !dbg !36
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !36
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %114, !dbg !36
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %127, !dbg !36
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %131, !dbg !36
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !36
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %116, !dbg !36
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %127, !dbg !36
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %131, !dbg !36
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !36
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %118, !dbg !36
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %127, !dbg !36
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %131, !dbg !36
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !36
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %120, !dbg !36
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %128, !dbg !36
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %132, !dbg !36
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !36
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %122, !dbg !36
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %128, !dbg !36
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %132, !dbg !36
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !36
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %124, !dbg !36
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %128, !dbg !36
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %132, !dbg !36
  %161 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !36
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %126, !dbg !36
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %128, !dbg !36
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %132, !dbg !36
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #3, !dbg !37
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #3, !dbg !37
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #3, !dbg !37
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !37
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #3, !dbg !37
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !37
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #3, !dbg !37
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #3, !dbg !37
  %173 = fadd float %70, 0x3EE4F8B580000000, !dbg !38
  %174 = fadd float %72, 0x3EE4F8B580000000, !dbg !38
  %175 = fadd float %74, 0x3EE4F8B580000000, !dbg !38
  %176 = fadd float %76, 0x3EE4F8B580000000, !dbg !38
  %177 = fadd float %78, 0x3EE4F8B580000000, !dbg !38
  %178 = fadd float %80, 0x3EE4F8B580000000, !dbg !38
  %179 = fadd float %82, 0x3EE4F8B580000000, !dbg !38
  %180 = fadd float %84, 0x3EE4F8B580000000, !dbg !38
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %181, 0, !dbg !39
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %182, 0, !dbg !39
  br i1 %.not.i, label %188, label %183, !dbg !39

183:                                              ; preds = %8
  br i1 %.not1.i, label %186, label %184, !dbg !39

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

188:                                              ; preds = %8
  br i1 %.not1.i, label %191, label %189, !dbg !39

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %184, %186, %189, %191
  %.0.i = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !39
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %193, 0, !dbg !39
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %194, 0, !dbg !39
  br i1 %.not.i1, label %200, label %195, !dbg !39

195:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %198, label %196, !dbg !39

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

200:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %203, label %201, !dbg !39

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %196, %198, %201, %203
  %.0.i3 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !39
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i6 = icmp eq i32 %205, 0, !dbg !39
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i9 = icmp eq i32 %206, 0, !dbg !39
  br i1 %.not.i6, label %212, label %207, !dbg !39

207:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %210, label %208, !dbg !39

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

212:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %215, label %213, !dbg !39

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

__nv_sqrtf.exit10:                                ; preds = %208, %210, %213, %215
  %.0.i8 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !39
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i11 = icmp eq i32 %217, 0, !dbg !39
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i14 = icmp eq i32 %218, 0, !dbg !39
  br i1 %.not.i11, label %224, label %219, !dbg !39

219:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %222, label %220, !dbg !39

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %176) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %176) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

224:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %227, label %225, !dbg !39

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %176) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %176) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

__nv_sqrtf.exit15:                                ; preds = %220, %222, %225, %227
  %.0.i13 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !39
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i16 = icmp eq i32 %229, 0, !dbg !39
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i19 = icmp eq i32 %230, 0, !dbg !39
  br i1 %.not.i16, label %236, label %231, !dbg !39

231:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %234, label %232, !dbg !39

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %177) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %177) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

236:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %239, label %237, !dbg !39

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %177) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %177) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

__nv_sqrtf.exit20:                                ; preds = %232, %234, %237, %239
  %.0.i18 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !39
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i21 = icmp eq i32 %241, 0, !dbg !39
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i24 = icmp eq i32 %242, 0, !dbg !39
  br i1 %.not.i21, label %248, label %243, !dbg !39

243:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %246, label %244, !dbg !39

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

248:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %251, label %249, !dbg !39

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

__nv_sqrtf.exit25:                                ; preds = %244, %246, %249, %251
  %.0.i23 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !39
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i26 = icmp eq i32 %253, 0, !dbg !39
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i29 = icmp eq i32 %254, 0, !dbg !39
  br i1 %.not.i26, label %260, label %255, !dbg !39

255:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %258, label %256, !dbg !39

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

260:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %263, label %261, !dbg !39

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

__nv_sqrtf.exit30:                                ; preds = %256, %258, %261, %263
  %.0.i28 = phi float [ %257, %256 ], [ %259, %258 ], [ %262, %261 ], [ %264, %263 ], !dbg !39
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i31 = icmp eq i32 %265, 0, !dbg !39
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i34 = icmp eq i32 %266, 0, !dbg !39
  br i1 %.not.i31, label %272, label %267, !dbg !39

267:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %270, label %268, !dbg !39

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %180) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %180) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

272:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %275, label %273, !dbg !39

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %180) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %180) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

__nv_sqrtf.exit35:                                ; preds = %268, %270, %273, %275
  %.0.i33 = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !39
  %277 = insertelement <8 x i32> poison, i32 %172, i64 0, !dbg !37
  %278 = insertelement <8 x i32> %277, i32 %171, i64 1, !dbg !37
  %279 = insertelement <8 x i32> %278, i32 %170, i64 2, !dbg !37
  %280 = insertelement <8 x i32> %279, i32 %169, i64 3, !dbg !37
  %281 = insertelement <8 x i32> %280, i32 %168, i64 4, !dbg !37
  %282 = insertelement <8 x i32> %281, i32 %167, i64 5, !dbg !37
  %283 = insertelement <8 x i32> %282, i32 %166, i64 6, !dbg !37
  %284 = insertelement <8 x i32> %283, i32 %165, i64 7, !dbg !37
  %285 = bitcast <8 x i32> %284 to <8 x float>, !dbg !37
  %286 = insertelement <8 x i32> poison, i32 %66, i64 0, !dbg !24
  %287 = insertelement <8 x i32> %286, i32 %65, i64 1, !dbg !24
  %288 = insertelement <8 x i32> %287, i32 %64, i64 2, !dbg !24
  %289 = insertelement <8 x i32> %288, i32 %63, i64 3, !dbg !24
  %290 = insertelement <8 x i32> %289, i32 %62, i64 4, !dbg !24
  %291 = insertelement <8 x i32> %290, i32 %61, i64 5, !dbg !24
  %292 = insertelement <8 x i32> %291, i32 %60, i64 6, !dbg !24
  %293 = insertelement <8 x i32> %292, i32 %59, i64 7, !dbg !24
  %294 = bitcast <8 x i32> %293 to <8 x float>, !dbg !24
  %295 = insertelement <8 x i32> poison, i32 %104, i64 0, !dbg !30
  %296 = insertelement <8 x i32> %295, i32 %103, i64 1, !dbg !30
  %297 = insertelement <8 x i32> %296, i32 %102, i64 2, !dbg !30
  %298 = insertelement <8 x i32> %297, i32 %101, i64 3, !dbg !30
  %299 = insertelement <8 x i32> %298, i32 %100, i64 4, !dbg !30
  %300 = insertelement <8 x i32> %299, i32 %99, i64 5, !dbg !30
  %301 = insertelement <8 x i32> %300, i32 %98, i64 6, !dbg !30
  %302 = insertelement <8 x i32> %301, i32 %97, i64 7, !dbg !30
  %303 = bitcast <8 x i32> %302 to <8 x float>, !dbg !30
  %304 = insertelement <8 x i32> poison, i32 %94, i64 0, !dbg !28
  %305 = insertelement <8 x i32> %304, i32 %93, i64 1, !dbg !28
  %306 = insertelement <8 x i32> %305, i32 %92, i64 2, !dbg !28
  %307 = insertelement <8 x i32> %306, i32 %91, i64 3, !dbg !28
  %308 = insertelement <8 x i32> %307, i32 %90, i64 4, !dbg !28
  %309 = insertelement <8 x i32> %308, i32 %89, i64 5, !dbg !28
  %310 = insertelement <8 x i32> %309, i32 %88, i64 6, !dbg !28
  %311 = insertelement <8 x i32> %310, i32 %87, i64 7, !dbg !28
  %312 = bitcast <8 x i32> %311 to <8 x float>, !dbg !28
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !40
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !40
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !40
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !40
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !40
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !40
  %321 = fsub <8 x float> %285, %294, !dbg !41
  %322 = insertelement <8 x float> poison, float %320, i64 0, !dbg !42
  %323 = insertelement <8 x float> %322, float %319, i64 1, !dbg !42
  %324 = insertelement <8 x float> %323, float %318, i64 2, !dbg !42
  %325 = insertelement <8 x float> %324, float %317, i64 3, !dbg !42
  %326 = insertelement <8 x float> %325, float %316, i64 4, !dbg !42
  %327 = insertelement <8 x float> %326, float %315, i64 5, !dbg !42
  %328 = insertelement <8 x float> %327, float %314, i64 6, !dbg !42
  %329 = insertelement <8 x float> %328, float %313, i64 7, !dbg !42
  %330 = fmul <8 x float> %321, %329, !dbg !42
  %331 = fmul <8 x float> %330, %312, !dbg !43
  %332 = fadd <8 x float> %331, %303, !dbg !44
  %333 = fcmp olt <8 x float> %332, zeroinitializer, !dbg !45
  %334 = extractelement <8 x i1> %333, i64 7, !dbg !49
  %335 = extractelement <8 x i1> %333, i64 6, !dbg !49
  %336 = extractelement <8 x i1> %333, i64 5, !dbg !49
  %337 = extractelement <8 x i1> %333, i64 4, !dbg !49
  %338 = extractelement <8 x i1> %333, i64 3, !dbg !49
  %339 = extractelement <8 x i1> %333, i64 2, !dbg !49
  %340 = extractelement <8 x i1> %333, i64 1, !dbg !49
  %341 = extractelement <8 x i1> %333, i64 0, !dbg !49
  %342 = sext i32 %14 to i64, !dbg !50
  %343 = getelementptr float, ptr addrspace(1) %6, i64 %342, !dbg !50
  %344 = sext i32 %16 to i64, !dbg !50
  %345 = getelementptr float, ptr addrspace(1) %6, i64 %344, !dbg !50
  %bc = bitcast <8 x float> %332 to <8 x i32>, !dbg !51
  %346 = extractelement <8 x i32> %bc, i64 7, !dbg !51
  %347 = select i1 %334, i32 0, i32 %346, !dbg !49
  %bc36 = bitcast <8 x float> %332 to <8 x i32>, !dbg !51
  %348 = extractelement <8 x i32> %bc36, i64 6, !dbg !51
  %349 = select i1 %335, i32 0, i32 %348, !dbg !49
  %bc37 = bitcast <8 x float> %332 to <8 x i32>, !dbg !51
  %350 = extractelement <8 x i32> %bc37, i64 5, !dbg !51
  %351 = select i1 %336, i32 0, i32 %350, !dbg !49
  %bc38 = bitcast <8 x float> %332 to <8 x i32>, !dbg !51
  %352 = extractelement <8 x i32> %bc38, i64 4, !dbg !51
  %353 = select i1 %337, i32 0, i32 %352, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %349, i32 %351, i32 %353, ptr addrspace(1) %343, i1 true) #3, !dbg !51
  %bc39 = bitcast <8 x float> %332 to <8 x i32>, !dbg !51
  %354 = extractelement <8 x i32> %bc39, i64 3, !dbg !51
  %355 = select i1 %338, i32 0, i32 %354, !dbg !49
  %bc40 = bitcast <8 x float> %332 to <8 x i32>, !dbg !51
  %356 = extractelement <8 x i32> %bc40, i64 2, !dbg !51
  %357 = select i1 %339, i32 0, i32 %356, !dbg !49
  %bc41 = bitcast <8 x float> %332 to <8 x i32>, !dbg !51
  %358 = extractelement <8 x i32> %bc41, i64 1, !dbg !51
  %359 = select i1 %340, i32 0, i32 %358, !dbg !49
  %bc42 = bitcast <8 x float> %332 to <8 x i32>, !dbg !51
  %360 = extractelement <8 x i32> %bc42, i64 0, !dbg !51
  %361 = select i1 %341, i32 0, i32 %360, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %355, i32 %357, i32 %359, i32 %361, ptr addrspace(1) %345, i1 true) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv6tcvkkmzacogg2zpk5zrtrm2kjt2afjbs7x4blqzmeca2yurjl.py", directory: "inductor_cache/v6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 32, scope: !7)
!32 = !DILocation(line: 41, column: 32, scope: !7)
!33 = !DILocation(line: 42, column: 40, scope: !7)
!34 = !DILocation(line: 42, column: 52, scope: !7)
!35 = !DILocation(line: 42, column: 47, scope: !7)
!36 = !DILocation(line: 42, column: 30, scope: !7)
!37 = !DILocation(line: 42, column: 57, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 27, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 55, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 56, column: 25, scope: !7)
!51 = !DILocation(line: 56, column: 37, scope: !7)
!52 = !DILocation(line: 56, column: 4, scope: !7)
