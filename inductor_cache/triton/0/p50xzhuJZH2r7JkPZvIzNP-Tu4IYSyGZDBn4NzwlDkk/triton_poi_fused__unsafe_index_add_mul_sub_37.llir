; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 2, !dbg !13
  %17 = or disjoint i32 %15, 512, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %18 = sdiv i32 %.frozen, 32, !dbg !14
  %19 = sdiv i32 %17, 32, !dbg !14
  %20 = srem i32 %18, 32, !dbg !15
  %21 = srem i32 %19, 32, !dbg !15
  %22 = mul i32 %18, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = srem i32 %16, 32, !dbg !16
  %24 = sdiv i32 %15, 1024, !dbg !17
  %25 = sdiv i32 %17, 1024, !dbg !17
  %.frozen1 = freeze i32 %15, !dbg !18
  %26 = sdiv i32 %.frozen1, 262144, !dbg !18
  %.frozen3 = freeze i32 %17, !dbg !18
  %27 = sdiv i32 %.frozen3, 262144, !dbg !18
  %28 = mul i32 %26, 262144, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %28, !dbg !19
  %29 = mul i32 %27, 262144, !dbg !19
  %.decomposed4 = sub i32 %.frozen3, %29, !dbg !19
  %30 = sext i32 %20 to i64, !dbg !20
  %31 = getelementptr i64, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = sext i32 %21 to i64, !dbg !20
  %33 = getelementptr i64, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %42 = sext i32 %.decomposed to i64, !dbg !22
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !22
  %44 = sext i32 %23 to i64, !dbg !22
  %45 = getelementptr i64, ptr addrspace(1) %1, i64 %44, !dbg !22
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !23
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !23
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !23
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !23
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !23
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !23
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !23
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !23
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !23
  %55 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !23
  %56 = extractvalue { i64, i64 } %55, 0, !dbg !23
  %57 = extractvalue { i64, i64 } %55, 1, !dbg !23
  %58 = getelementptr i64, ptr addrspace(1) %3, i64 %42, !dbg !24
  %59 = getelementptr i64, ptr addrspace(1) %3, i64 %44, !dbg !24
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !25
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !25
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !25
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !25
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !25
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !25
  %66 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !25
  %67 = extractvalue { i64, i64 } %66, 0, !dbg !25
  %68 = extractvalue { i64, i64 } %66, 1, !dbg !25
  %69 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !25
  %70 = extractvalue { i64, i64 } %69, 0, !dbg !25
  %71 = extractvalue { i64, i64 } %69, 1, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !26
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !27
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !27
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !27
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !27
  %83 = getelementptr i64, ptr addrspace(1) %5, i64 %30, !dbg !28
  %84 = getelementptr i64, ptr addrspace(1) %5, i64 %32, !dbg !28
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !29
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !29
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !29
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !29
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !29
  %93 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !31
  %96 = bitcast i32 %95 to float, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !31
  %106 = bitcast i32 %105 to float, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !31
  %108 = bitcast i32 %107 to float, !dbg !31
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !31
  %110 = bitcast i32 %109 to float, !dbg !31
  %111 = lshr i64 %34, 59, !dbg !32
  %112 = and i64 %111, 16, !dbg !32
  %113 = add i64 %112, %34, !dbg !32
  %114 = lshr i64 %38, 59, !dbg !32
  %115 = and i64 %114, 16, !dbg !32
  %116 = add i64 %115, %38, !dbg !32
  %117 = lshr i64 %47, 59, !dbg !33
  %118 = and i64 %117, 16, !dbg !33
  %119 = lshr i64 %48, 59, !dbg !33
  %120 = and i64 %119, 16, !dbg !33
  %121 = lshr i64 %50, 59, !dbg !33
  %122 = and i64 %121, 16, !dbg !33
  %123 = lshr i64 %51, 59, !dbg !33
  %124 = and i64 %123, 16, !dbg !33
  %125 = lshr i64 %53, 59, !dbg !33
  %126 = and i64 %125, 16, !dbg !33
  %127 = lshr i64 %54, 59, !dbg !33
  %128 = and i64 %127, 16, !dbg !33
  %129 = lshr i64 %56, 59, !dbg !33
  %130 = and i64 %129, 16, !dbg !33
  %131 = lshr i64 %57, 59, !dbg !33
  %132 = and i64 %131, 16, !dbg !33
  %133 = shl i64 %113, 4, !dbg !34
  %134 = shl i64 %116, 4, !dbg !34
  %135 = shl nsw i32 %24, 8, !dbg !35
  %136 = shl nsw i32 %25, 8, !dbg !35
  %137 = sext i32 %135 to i64, !dbg !36
  %138 = sext i32 %136 to i64, !dbg !36
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !37
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %118, !dbg !37
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %133, !dbg !37
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %137, !dbg !37
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !37
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %120, !dbg !37
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %133, !dbg !37
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %137, !dbg !37
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !37
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %122, !dbg !37
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %133, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %137, !dbg !37
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !37
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %124, !dbg !37
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %133, !dbg !37
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %137, !dbg !37
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !37
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %126, !dbg !37
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %134, !dbg !37
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %138, !dbg !37
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !37
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %128, !dbg !37
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %134, !dbg !37
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %138, !dbg !37
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !37
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %130, !dbg !37
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %134, !dbg !37
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %138, !dbg !37
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !37
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %132, !dbg !37
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %134, !dbg !37
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %138, !dbg !37
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #1, !dbg !38
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !38
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !38
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !38
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !38
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #1, !dbg !38
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !38
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #1, !dbg !38
  %179 = lshr i64 %61, 59, !dbg !39
  %180 = and i64 %179, 16, !dbg !39
  %181 = lshr i64 %62, 59, !dbg !39
  %182 = and i64 %181, 16, !dbg !39
  %183 = lshr i64 %64, 59, !dbg !39
  %184 = and i64 %183, 16, !dbg !39
  %185 = lshr i64 %65, 59, !dbg !39
  %186 = and i64 %185, 16, !dbg !39
  %187 = lshr i64 %67, 59, !dbg !39
  %188 = and i64 %187, 16, !dbg !39
  %189 = lshr i64 %68, 59, !dbg !39
  %190 = and i64 %189, 16, !dbg !39
  %191 = lshr i64 %70, 59, !dbg !39
  %192 = and i64 %191, 16, !dbg !39
  %193 = lshr i64 %71, 59, !dbg !39
  %194 = and i64 %193, 16, !dbg !39
  %195 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !40
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %180, !dbg !40
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %133, !dbg !40
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %137, !dbg !40
  %199 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !40
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %182, !dbg !40
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %133, !dbg !40
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %137, !dbg !40
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !40
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %184, !dbg !40
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %133, !dbg !40
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %137, !dbg !40
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !40
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %186, !dbg !40
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %133, !dbg !40
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %137, !dbg !40
  %211 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !40
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %188, !dbg !40
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %134, !dbg !40
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %138, !dbg !40
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !40
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %190, !dbg !40
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %134, !dbg !40
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %138, !dbg !40
  %219 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !40
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %192, !dbg !40
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %134, !dbg !40
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %138, !dbg !40
  %223 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !40
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %194, !dbg !40
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %134, !dbg !40
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %138, !dbg !40
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 true) #1, !dbg !41
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #1, !dbg !41
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #1, !dbg !41
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 true) #1, !dbg !41
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #1, !dbg !41
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !41
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !41
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !41
  %235 = lshr i64 %85, 59, !dbg !42
  %236 = and i64 %235, 16, !dbg !42
  %237 = add i64 %236, %85, !dbg !42
  %238 = lshr i64 %89, 59, !dbg !42
  %239 = and i64 %238, 16, !dbg !42
  %240 = add i64 %239, %89, !dbg !42
  %241 = shl i64 %237, 4, !dbg !43
  %242 = shl i64 %240, 4, !dbg !43
  %243 = getelementptr float, ptr addrspace(1) %140, i64 %241, !dbg !44
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %137, !dbg !44
  %245 = getelementptr float, ptr addrspace(1) %144, i64 %241, !dbg !44
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %137, !dbg !44
  %247 = getelementptr float, ptr addrspace(1) %148, i64 %241, !dbg !44
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %137, !dbg !44
  %249 = getelementptr float, ptr addrspace(1) %152, i64 %241, !dbg !44
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %137, !dbg !44
  %251 = getelementptr float, ptr addrspace(1) %156, i64 %242, !dbg !44
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %138, !dbg !44
  %253 = getelementptr float, ptr addrspace(1) %160, i64 %242, !dbg !44
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %138, !dbg !44
  %255 = getelementptr float, ptr addrspace(1) %164, i64 %242, !dbg !44
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %138, !dbg !44
  %257 = getelementptr float, ptr addrspace(1) %168, i64 %242, !dbg !44
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %138, !dbg !44
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #1, !dbg !45
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #1, !dbg !45
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #1, !dbg !45
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #1, !dbg !45
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #1, !dbg !45
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #1, !dbg !45
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #1, !dbg !45
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #1, !dbg !45
  %267 = getelementptr float, ptr addrspace(1) %196, i64 %241, !dbg !46
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %137, !dbg !46
  %269 = getelementptr float, ptr addrspace(1) %200, i64 %241, !dbg !46
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %137, !dbg !46
  %271 = getelementptr float, ptr addrspace(1) %204, i64 %241, !dbg !46
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %137, !dbg !46
  %273 = getelementptr float, ptr addrspace(1) %208, i64 %241, !dbg !46
  %274 = getelementptr float, ptr addrspace(1) %273, i64 %137, !dbg !46
  %275 = getelementptr float, ptr addrspace(1) %212, i64 %242, !dbg !46
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %138, !dbg !46
  %277 = getelementptr float, ptr addrspace(1) %216, i64 %242, !dbg !46
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %138, !dbg !46
  %279 = getelementptr float, ptr addrspace(1) %220, i64 %242, !dbg !46
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %138, !dbg !46
  %281 = getelementptr float, ptr addrspace(1) %224, i64 %242, !dbg !46
  %282 = getelementptr float, ptr addrspace(1) %281, i64 %138, !dbg !46
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #1, !dbg !47
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !47
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #1, !dbg !47
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #1, !dbg !47
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #1, !dbg !47
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #1, !dbg !47
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 true) #1, !dbg !47
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 true) #1, !dbg !47
  %291 = insertelement <2 x i32> poison, i32 %259, i64 0, !dbg !45
  %292 = insertelement <2 x i32> %291, i32 %171, i64 1, !dbg !45
  %293 = bitcast <2 x i32> %292 to <2 x float>, !dbg !45
  %294 = insertelement <2 x i32> poison, i32 %283, i64 0, !dbg !47
  %295 = insertelement <2 x i32> %294, i32 %227, i64 1, !dbg !47
  %296 = bitcast <2 x i32> %295 to <2 x float>, !dbg !47
  %297 = fsub <2 x float> %296, %293, !dbg !48
  %298 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !49
  %299 = bitcast <2 x i32> %298 to <2 x float>, !dbg !49
  %300 = shufflevector <2 x float> %299, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %301 = fmul <2 x float> %297, %300, !dbg !49
  %302 = fadd <2 x float> %301, %293, !dbg !50
  %303 = insertelement <2 x i32> poison, i32 %260, i64 0, !dbg !45
  %304 = insertelement <2 x i32> %303, i32 %172, i64 1, !dbg !45
  %305 = bitcast <2 x i32> %304 to <2 x float>, !dbg !45
  %306 = insertelement <2 x i32> poison, i32 %284, i64 0, !dbg !47
  %307 = insertelement <2 x i32> %306, i32 %228, i64 1, !dbg !47
  %308 = bitcast <2 x i32> %307 to <2 x float>, !dbg !47
  %309 = fsub <2 x float> %308, %305, !dbg !48
  %310 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !49
  %311 = bitcast <2 x i32> %310 to <2 x float>, !dbg !49
  %312 = shufflevector <2 x float> %311, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %313 = fmul <2 x float> %309, %312, !dbg !49
  %314 = fadd <2 x float> %313, %305, !dbg !50
  %315 = insertelement <2 x i32> poison, i32 %261, i64 0, !dbg !45
  %316 = insertelement <2 x i32> %315, i32 %173, i64 1, !dbg !45
  %317 = bitcast <2 x i32> %316 to <2 x float>, !dbg !45
  %318 = insertelement <2 x i32> poison, i32 %285, i64 0, !dbg !47
  %319 = insertelement <2 x i32> %318, i32 %229, i64 1, !dbg !47
  %320 = bitcast <2 x i32> %319 to <2 x float>, !dbg !47
  %321 = fsub <2 x float> %320, %317, !dbg !48
  %322 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !49
  %323 = bitcast <2 x i32> %322 to <2 x float>, !dbg !49
  %324 = shufflevector <2 x float> %323, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %325 = fmul <2 x float> %321, %324, !dbg !49
  %326 = fadd <2 x float> %325, %317, !dbg !50
  %327 = insertelement <2 x i32> poison, i32 %262, i64 0, !dbg !45
  %328 = insertelement <2 x i32> %327, i32 %174, i64 1, !dbg !45
  %329 = bitcast <2 x i32> %328 to <2 x float>, !dbg !45
  %330 = insertelement <2 x i32> poison, i32 %286, i64 0, !dbg !47
  %331 = insertelement <2 x i32> %330, i32 %230, i64 1, !dbg !47
  %332 = bitcast <2 x i32> %331 to <2 x float>, !dbg !47
  %333 = fsub <2 x float> %332, %329, !dbg !48
  %334 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !49
  %335 = bitcast <2 x i32> %334 to <2 x float>, !dbg !49
  %336 = shufflevector <2 x float> %335, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %337 = fmul <2 x float> %333, %336, !dbg !49
  %338 = fadd <2 x float> %337, %329, !dbg !50
  %339 = insertelement <2 x i32> poison, i32 %263, i64 0, !dbg !45
  %340 = insertelement <2 x i32> %339, i32 %175, i64 1, !dbg !45
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !45
  %342 = insertelement <2 x i32> poison, i32 %287, i64 0, !dbg !47
  %343 = insertelement <2 x i32> %342, i32 %231, i64 1, !dbg !47
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !47
  %345 = fsub <2 x float> %344, %341, !dbg !48
  %346 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !49
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !49
  %348 = shufflevector <2 x float> %347, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %349 = fmul <2 x float> %345, %348, !dbg !49
  %350 = fadd <2 x float> %349, %341, !dbg !50
  %351 = insertelement <2 x i32> poison, i32 %264, i64 0, !dbg !45
  %352 = insertelement <2 x i32> %351, i32 %176, i64 1, !dbg !45
  %353 = bitcast <2 x i32> %352 to <2 x float>, !dbg !45
  %354 = insertelement <2 x i32> poison, i32 %288, i64 0, !dbg !47
  %355 = insertelement <2 x i32> %354, i32 %232, i64 1, !dbg !47
  %356 = bitcast <2 x i32> %355 to <2 x float>, !dbg !47
  %357 = fsub <2 x float> %356, %353, !dbg !48
  %358 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !49
  %359 = bitcast <2 x i32> %358 to <2 x float>, !dbg !49
  %360 = shufflevector <2 x float> %359, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %361 = fmul <2 x float> %357, %360, !dbg !49
  %362 = fadd <2 x float> %361, %353, !dbg !50
  %363 = insertelement <2 x i32> poison, i32 %265, i64 0, !dbg !45
  %364 = insertelement <2 x i32> %363, i32 %177, i64 1, !dbg !45
  %365 = bitcast <2 x i32> %364 to <2 x float>, !dbg !45
  %366 = insertelement <2 x i32> poison, i32 %289, i64 0, !dbg !47
  %367 = insertelement <2 x i32> %366, i32 %233, i64 1, !dbg !47
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !47
  %369 = fsub <2 x float> %368, %365, !dbg !48
  %370 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !49
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !49
  %372 = shufflevector <2 x float> %371, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %373 = fmul <2 x float> %369, %372, !dbg !49
  %374 = fadd <2 x float> %373, %365, !dbg !50
  %375 = insertelement <2 x i32> poison, i32 %266, i64 0, !dbg !45
  %376 = insertelement <2 x i32> %375, i32 %178, i64 1, !dbg !45
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !45
  %378 = insertelement <2 x i32> poison, i32 %290, i64 0, !dbg !47
  %379 = insertelement <2 x i32> %378, i32 %234, i64 1, !dbg !47
  %380 = bitcast <2 x i32> %379 to <2 x float>, !dbg !47
  %381 = fsub <2 x float> %380, %377, !dbg !48
  %382 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !49
  %383 = bitcast <2 x i32> %382 to <2 x float>, !dbg !49
  %384 = shufflevector <2 x float> %383, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %385 = fmul <2 x float> %381, %384, !dbg !49
  %386 = fadd <2 x float> %385, %377, !dbg !50
  %387 = extractelement <2 x float> %302, i64 0, !dbg !51
  %388 = extractelement <2 x float> %302, i64 1, !dbg !52
  %389 = fsub float %387, %388, !dbg !51
  %390 = extractelement <2 x float> %314, i64 0, !dbg !51
  %391 = extractelement <2 x float> %314, i64 1, !dbg !52
  %392 = fsub float %390, %391, !dbg !51
  %393 = extractelement <2 x float> %326, i64 0, !dbg !51
  %394 = extractelement <2 x float> %326, i64 1, !dbg !52
  %395 = fsub float %393, %394, !dbg !51
  %396 = extractelement <2 x float> %338, i64 0, !dbg !51
  %397 = extractelement <2 x float> %338, i64 1, !dbg !52
  %398 = fsub float %396, %397, !dbg !51
  %399 = extractelement <2 x float> %350, i64 0, !dbg !51
  %400 = extractelement <2 x float> %350, i64 1, !dbg !52
  %401 = fsub float %399, %400, !dbg !51
  %402 = extractelement <2 x float> %362, i64 0, !dbg !51
  %403 = extractelement <2 x float> %362, i64 1, !dbg !52
  %404 = fsub float %402, %403, !dbg !51
  %405 = extractelement <2 x float> %374, i64 0, !dbg !51
  %406 = extractelement <2 x float> %374, i64 1, !dbg !52
  %407 = fsub float %405, %406, !dbg !51
  %408 = extractelement <2 x float> %386, i64 0, !dbg !51
  %409 = extractelement <2 x float> %386, i64 1, !dbg !52
  %410 = fsub float %408, %409, !dbg !51
  %411 = fmul float %389, %96, !dbg !53
  %412 = fmul float %392, %98, !dbg !53
  %413 = fmul float %395, %100, !dbg !53
  %414 = fmul float %398, %102, !dbg !53
  %415 = fmul float %401, %104, !dbg !53
  %416 = fmul float %404, %106, !dbg !53
  %417 = fmul float %407, %108, !dbg !53
  %418 = fmul float %410, %110, !dbg !53
  %419 = fadd float %388, %411, !dbg !52
  %420 = fadd float %391, %412, !dbg !52
  %421 = fadd float %394, %413, !dbg !52
  %422 = fadd float %397, %414, !dbg !52
  %423 = fadd float %400, %415, !dbg !52
  %424 = fadd float %403, %416, !dbg !52
  %425 = fadd float %406, %417, !dbg !52
  %426 = fadd float %409, %418, !dbg !52
  %427 = mul i32 %26, 655360, !dbg !54
  %428 = mul i32 %27, 655360, !dbg !54
  %429 = add i32 %427, %.decomposed2, !dbg !55
  %430 = add i32 %428, %.decomposed4, !dbg !55
  %431 = sext i32 %429 to i64, !dbg !56
  %432 = getelementptr float, ptr addrspace(1) %7, i64 %431, !dbg !56
  %433 = sext i32 %430 to i64, !dbg !56
  %434 = getelementptr float, ptr addrspace(1) %7, i64 %433, !dbg !56
  %435 = bitcast float %419 to i32, !dbg !57
  %436 = bitcast float %420 to i32, !dbg !57
  %437 = bitcast float %421 to i32, !dbg !57
  %438 = bitcast float %422 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %435, i32 %436, i32 %437, i32 %438, ptr addrspace(1) %432, i1 true) #1, !dbg !57
  %439 = bitcast float %423 to i32, !dbg !57
  %440 = bitcast float %424 to i32, !dbg !57
  %441 = bitcast float %425 to i32, !dbg !57
  %442 = bitcast float %426 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %439, i32 %440, i32 %441, i32 %442, ptr addrspace(1) %434, i1 true) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxf7gfn6qhsqw7i6qqwdwqnonbadzdkea5l4b47vuojldrgdgfa3.py", directory: "inductor_cache/xf")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_37", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 42, column: 32, scope: !7)
!34 = !DILocation(line: 43, column: 40, scope: !7)
!35 = !DILocation(line: 43, column: 51, scope: !7)
!36 = !DILocation(line: 43, column: 47, scope: !7)
!37 = !DILocation(line: 43, column: 30, scope: !7)
!38 = !DILocation(line: 43, column: 56, scope: !7)
!39 = !DILocation(line: 46, column: 35, scope: !7)
!40 = !DILocation(line: 47, column: 31, scope: !7)
!41 = !DILocation(line: 47, column: 58, scope: !7)
!42 = !DILocation(line: 53, column: 35, scope: !7)
!43 = !DILocation(line: 54, column: 41, scope: !7)
!44 = !DILocation(line: 54, column: 31, scope: !7)
!45 = !DILocation(line: 54, column: 58, scope: !7)
!46 = !DILocation(line: 55, column: 31, scope: !7)
!47 = !DILocation(line: 55, column: 59, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 37, scope: !7)
!55 = !DILocation(line: 62, column: 30, scope: !7)
!56 = !DILocation(line: 62, column: 25, scope: !7)
!57 = !DILocation(line: 62, column: 49, scope: !7)
!58 = !DILocation(line: 62, column: 4, scope: !7)
