; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_89(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = icmp slt i32 %14, 89088, !dbg !14
  %17 = icmp slt i32 %15, 89088, !dbg !14
  %18 = srem i32 %14, 348, !dbg !15
  %19 = srem i32 %15, 348, !dbg !15
  %20 = sext i32 %14 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = sext i32 %15 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 %16) #3, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 %17) #3, !dbg !17
  %26 = sext i32 %18 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = sext i32 %19 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %17) #3, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %16) #3, !dbg !21
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %17) #3, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %16) #3, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %17) #3, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = bitcast i32 %49 to float, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = bitcast i32 %51 to float, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %16) #3, !dbg !25
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %17) #3, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %16) #3, !dbg !27
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %17) #3, !dbg !27
  %64 = fadd float %43, 0x3EE4F8B580000000, !dbg !28
  %65 = fadd float %44, 0x3EE4F8B580000000, !dbg !28
  %66 = fadd float %45, 0x3EE4F8B580000000, !dbg !28
  %67 = fadd float %46, 0x3EE4F8B580000000, !dbg !28
  %68 = fadd float %52, 0x3EE4F8B580000000, !dbg !28
  %69 = fadd float %53, 0x3EE4F8B580000000, !dbg !28
  %70 = fadd float %54, 0x3EE4F8B580000000, !dbg !28
  %71 = fadd float %55, 0x3EE4F8B580000000, !dbg !28
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %72, 0, !dbg !29
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %73, 0, !dbg !29
  br i1 %.not.i, label %79, label %74, !dbg !29

74:                                               ; preds = %8
  br i1 %.not1.i, label %77, label %75, !dbg !29

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

79:                                               ; preds = %8
  br i1 %.not1.i, label %82, label %80, !dbg !29

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !29
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i8 = icmp eq i32 %84, 0, !dbg !29
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i11 = icmp eq i32 %85, 0, !dbg !29
  br i1 %.not.i8, label %91, label %86, !dbg !29

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %89, label %87, !dbg !29

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %94, label %92, !dbg !29

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

__nv_sqrtf.exit12:                                ; preds = %87, %89, %92, %94
  %.0.i10 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !29
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i13 = icmp eq i32 %96, 0, !dbg !29
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i16 = icmp eq i32 %97, 0, !dbg !29
  br i1 %.not.i13, label %103, label %98, !dbg !29

98:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %101, label %99, !dbg !29

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

103:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %106, label %104, !dbg !29

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

__nv_sqrtf.exit17:                                ; preds = %99, %101, %104, %106
  %.0.i15 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !29
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i18 = icmp eq i32 %108, 0, !dbg !29
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i21 = icmp eq i32 %109, 0, !dbg !29
  br i1 %.not.i18, label %115, label %110, !dbg !29

110:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %113, label %111, !dbg !29

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

115:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %118, label %116, !dbg !29

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

__nv_sqrtf.exit22:                                ; preds = %111, %113, %116, %118
  %.0.i20 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !29
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i23 = icmp eq i32 %120, 0, !dbg !29
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i26 = icmp eq i32 %121, 0, !dbg !29
  br i1 %.not.i23, label %127, label %122, !dbg !29

122:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %125, label %123, !dbg !29

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

127:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %130, label %128, !dbg !29

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

__nv_sqrtf.exit27:                                ; preds = %123, %125, %128, %130
  %.0.i25 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !29
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i28 = icmp eq i32 %132, 0, !dbg !29
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i31 = icmp eq i32 %133, 0, !dbg !29
  br i1 %.not.i28, label %139, label %134, !dbg !29

134:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %137, label %135, !dbg !29

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

139:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %142, label %140, !dbg !29

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

__nv_sqrtf.exit32:                                ; preds = %135, %137, %140, %142
  %.0.i30 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !29
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i33 = icmp eq i32 %144, 0, !dbg !29
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i36 = icmp eq i32 %145, 0, !dbg !29
  br i1 %.not.i33, label %151, label %146, !dbg !29

146:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %149, label %147, !dbg !29

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

151:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %154, label %152, !dbg !29

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

__nv_sqrtf.exit37:                                ; preds = %147, %149, %152, %154
  %.0.i35 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !29
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i38 = icmp eq i32 %156, 0, !dbg !29
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i41 = icmp eq i32 %157, 0, !dbg !29
  br i1 %.not.i38, label %163, label %158, !dbg !29

158:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %161, label %159, !dbg !29

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

163:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %166, label %164, !dbg !29

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

__nv_sqrtf.exit42:                                ; preds = %159, %161, %164, %166
  %.0.i40 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !29
  %168 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %169 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !19
  %170 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !21
  %171 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %172 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !19
  %173 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !21
  %174 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %175 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !19
  %176 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !21
  %177 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %178 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !19
  %179 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !21
  %180 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %181 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !19
  %182 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !21
  %183 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %184 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !19
  %185 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !21
  %186 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %187 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !19
  %188 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !21
  %189 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %190 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !19
  %191 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !21
  %192 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !27
  %193 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !27
  %194 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !27
  %195 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !27
  %196 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !27
  %197 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !27
  %198 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !27
  %199 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !27
  %200 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !25
  %201 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !25
  %202 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !25
  %203 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !25
  %204 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %205 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %206 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %207 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !30
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !30
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !30
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !30
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !30
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !30
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !30
  %216 = insertelement <8 x i32> poison, i32 %168, i64 0, !dbg !17
  %217 = insertelement <8 x i32> %216, i32 %171, i64 1, !dbg !17
  %218 = insertelement <8 x i32> %217, i32 %174, i64 2, !dbg !17
  %219 = insertelement <8 x i32> %218, i32 %177, i64 3, !dbg !17
  %220 = insertelement <8 x i32> %219, i32 %180, i64 4, !dbg !17
  %221 = insertelement <8 x i32> %220, i32 %183, i64 5, !dbg !17
  %222 = insertelement <8 x i32> %221, i32 %186, i64 6, !dbg !17
  %223 = insertelement <8 x i32> %222, i32 %189, i64 7, !dbg !17
  %224 = bitcast <8 x i32> %223 to <8 x float>, !dbg !17
  %225 = insertelement <8 x i32> poison, i32 %169, i64 0, !dbg !19
  %226 = insertelement <8 x i32> %225, i32 %172, i64 1, !dbg !19
  %227 = insertelement <8 x i32> %226, i32 %175, i64 2, !dbg !19
  %228 = insertelement <8 x i32> %227, i32 %178, i64 3, !dbg !19
  %229 = insertelement <8 x i32> %228, i32 %181, i64 4, !dbg !19
  %230 = insertelement <8 x i32> %229, i32 %184, i64 5, !dbg !19
  %231 = insertelement <8 x i32> %230, i32 %187, i64 6, !dbg !19
  %232 = insertelement <8 x i32> %231, i32 %190, i64 7, !dbg !19
  %233 = bitcast <8 x i32> %232 to <8 x float>, !dbg !19
  %234 = fadd <8 x float> %224, %233, !dbg !31
  %235 = insertelement <8 x i32> poison, i32 %170, i64 0, !dbg !21
  %236 = insertelement <8 x i32> %235, i32 %173, i64 1, !dbg !21
  %237 = insertelement <8 x i32> %236, i32 %176, i64 2, !dbg !21
  %238 = insertelement <8 x i32> %237, i32 %179, i64 3, !dbg !21
  %239 = insertelement <8 x i32> %238, i32 %182, i64 4, !dbg !21
  %240 = insertelement <8 x i32> %239, i32 %185, i64 5, !dbg !21
  %241 = insertelement <8 x i32> %240, i32 %188, i64 6, !dbg !21
  %242 = insertelement <8 x i32> %241, i32 %191, i64 7, !dbg !21
  %243 = bitcast <8 x i32> %242 to <8 x float>, !dbg !21
  %244 = fsub <8 x float> %234, %243, !dbg !32
  %245 = insertelement <8 x i32> poison, i32 %192, i64 0, !dbg !27
  %246 = insertelement <8 x i32> %245, i32 %193, i64 1, !dbg !27
  %247 = insertelement <8 x i32> %246, i32 %194, i64 2, !dbg !27
  %248 = insertelement <8 x i32> %247, i32 %195, i64 3, !dbg !27
  %249 = insertelement <8 x i32> %248, i32 %196, i64 4, !dbg !27
  %250 = insertelement <8 x i32> %249, i32 %197, i64 5, !dbg !27
  %251 = insertelement <8 x i32> %250, i32 %198, i64 6, !dbg !27
  %252 = insertelement <8 x i32> %251, i32 %199, i64 7, !dbg !27
  %253 = bitcast <8 x i32> %252 to <8 x float>, !dbg !27
  %254 = insertelement <8 x i32> poison, i32 %200, i64 0, !dbg !25
  %255 = insertelement <8 x i32> %254, i32 %201, i64 1, !dbg !25
  %256 = insertelement <8 x i32> %255, i32 %202, i64 2, !dbg !25
  %257 = insertelement <8 x i32> %256, i32 %203, i64 3, !dbg !25
  %258 = insertelement <8 x i32> %257, i32 %204, i64 4, !dbg !25
  %259 = insertelement <8 x i32> %258, i32 %205, i64 5, !dbg !25
  %260 = insertelement <8 x i32> %259, i32 %206, i64 6, !dbg !25
  %261 = insertelement <8 x i32> %260, i32 %207, i64 7, !dbg !25
  %262 = bitcast <8 x i32> %261 to <8 x float>, !dbg !25
  %263 = insertelement <8 x float> poison, float %215, i64 0, !dbg !33
  %264 = insertelement <8 x float> %263, float %214, i64 1, !dbg !33
  %265 = insertelement <8 x float> %264, float %213, i64 2, !dbg !33
  %266 = insertelement <8 x float> %265, float %212, i64 3, !dbg !33
  %267 = insertelement <8 x float> %266, float %211, i64 4, !dbg !33
  %268 = insertelement <8 x float> %267, float %210, i64 5, !dbg !33
  %269 = insertelement <8 x float> %268, float %209, i64 6, !dbg !33
  %270 = insertelement <8 x float> %269, float %208, i64 7, !dbg !33
  %271 = fmul <8 x float> %244, %270, !dbg !33
  %272 = fmul <8 x float> %271, %262, !dbg !34
  %273 = fadd <8 x float> %272, %253, !dbg !35
  %274 = fcmp ole <8 x float> %273, zeroinitializer, !dbg !36
  %275 = select <8 x i1> %274, <8 x float> zeroinitializer, <8 x float> %273, !dbg !36
  %276 = fcmp olt <8 x float> %275, splat (float 6.000000e+00), !dbg !40
  %277 = extractelement <8 x float> %275, i64 7, !dbg !42
  %278 = fcmp uno float %277, 0.000000e+00, !dbg !43
  %279 = extractelement <8 x float> %275, i64 6, !dbg !42
  %280 = fcmp uno float %279, 0.000000e+00, !dbg !43
  %281 = extractelement <8 x float> %275, i64 5, !dbg !42
  %282 = fcmp uno float %281, 0.000000e+00, !dbg !43
  %283 = extractelement <8 x float> %275, i64 4, !dbg !42
  %284 = fcmp uno float %283, 0.000000e+00, !dbg !43
  %285 = extractelement <8 x float> %275, i64 3, !dbg !42
  %286 = fcmp uno float %285, 0.000000e+00, !dbg !43
  %287 = extractelement <8 x float> %275, i64 2, !dbg !42
  %288 = fcmp uno float %287, 0.000000e+00, !dbg !43
  %289 = extractelement <8 x float> %275, i64 1, !dbg !42
  %290 = fcmp uno float %289, 0.000000e+00, !dbg !43
  %291 = extractelement <8 x float> %275, i64 0, !dbg !42
  %292 = fcmp uno float %291, 0.000000e+00, !dbg !43
  %293 = extractelement <8 x i1> %276, i64 7, !dbg !44
  %294 = or i1 %293, %278, !dbg !44
  %295 = extractelement <8 x i1> %276, i64 6, !dbg !44
  %296 = or i1 %295, %280, !dbg !44
  %297 = extractelement <8 x i1> %276, i64 5, !dbg !44
  %298 = or i1 %297, %282, !dbg !44
  %299 = extractelement <8 x i1> %276, i64 4, !dbg !44
  %300 = or i1 %299, %284, !dbg !44
  %301 = extractelement <8 x i1> %276, i64 3, !dbg !44
  %302 = or i1 %301, %286, !dbg !44
  %303 = extractelement <8 x i1> %276, i64 2, !dbg !44
  %304 = or i1 %303, %288, !dbg !44
  %305 = extractelement <8 x i1> %276, i64 1, !dbg !44
  %306 = or i1 %305, %290, !dbg !44
  %307 = extractelement <8 x i1> %276, i64 0, !dbg !44
  %308 = or i1 %307, %292, !dbg !44
  %bc = bitcast <8 x float> %234 to <8 x i32>, !dbg !45
  %309 = extractelement <8 x i32> %bc, i64 7, !dbg !45
  %bc43 = bitcast <8 x float> %234 to <8 x i32>, !dbg !45
  %310 = extractelement <8 x i32> %bc43, i64 6, !dbg !45
  %bc44 = bitcast <8 x float> %234 to <8 x i32>, !dbg !45
  %311 = extractelement <8 x i32> %bc44, i64 5, !dbg !45
  %bc45 = bitcast <8 x float> %234 to <8 x i32>, !dbg !45
  %312 = extractelement <8 x i32> %bc45, i64 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %309, i32 %310, i32 %311, i32 %312, ptr addrspace(1) %21, i1 %16) #3, !dbg !45
  %bc46 = bitcast <8 x float> %234 to <8 x i32>, !dbg !45
  %313 = extractelement <8 x i32> %bc46, i64 3, !dbg !45
  %bc47 = bitcast <8 x float> %234 to <8 x i32>, !dbg !45
  %314 = extractelement <8 x i32> %bc47, i64 2, !dbg !45
  %bc48 = bitcast <8 x float> %234 to <8 x i32>, !dbg !45
  %315 = extractelement <8 x i32> %bc48, i64 1, !dbg !45
  %bc49 = bitcast <8 x float> %234 to <8 x i32>, !dbg !45
  %316 = extractelement <8 x i32> %bc49, i64 0, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %313, i32 %314, i32 %315, i32 %316, ptr addrspace(1) %23, i1 %17) #3, !dbg !45
  %317 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !46
  %318 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !46
  %319 = bitcast float %277 to i32, !dbg !42
  %320 = select i1 %294, i32 %319, i32 1086324736, !dbg !47
  %321 = bitcast float %279 to i32, !dbg !42
  %322 = select i1 %296, i32 %321, i32 1086324736, !dbg !47
  %323 = bitcast float %281 to i32, !dbg !42
  %324 = select i1 %298, i32 %323, i32 1086324736, !dbg !47
  %325 = bitcast float %283 to i32, !dbg !42
  %326 = select i1 %300, i32 %325, i32 1086324736, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %320, i32 %322, i32 %324, i32 %326, ptr addrspace(1) %317, i1 %16) #3, !dbg !42
  %327 = bitcast float %285 to i32, !dbg !42
  %328 = select i1 %302, i32 %327, i32 1086324736, !dbg !47
  %329 = bitcast float %287 to i32, !dbg !42
  %330 = select i1 %304, i32 %329, i32 1086324736, !dbg !47
  %331 = bitcast float %289 to i32, !dbg !42
  %332 = select i1 %306, i32 %331, i32 1086324736, !dbg !47
  %333 = bitcast float %291 to i32, !dbg !42
  %334 = select i1 %308, i32 %333, i32 1086324736, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %328, i32 %330, i32 %332, i32 %334, ptr addrspace(1) %318, i1 %17) #3, !dbg !42
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvz2q2oblbljnsvfj53zceol7ny2oij4ozide6wddxpcgju2qar4.py", directory: "inductor_cache/vz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_89, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_89, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_89", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_89", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 45, column: 42, scope: !7)
!40 = !DILocation(line: 110, column: 15, scope: !37, inlinedAt: !41)
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 49, column: 37, scope: !7)
!43 = !DILocation(line: 112, column: 21, scope: !37, inlinedAt: !41)
!44 = !DILocation(line: 112, column: 16, scope: !37, inlinedAt: !41)
!45 = !DILocation(line: 48, column: 39, scope: !7)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 113, column: 29, scope: !37, inlinedAt: !41)
!48 = !DILocation(line: 49, column: 4, scope: !7)
