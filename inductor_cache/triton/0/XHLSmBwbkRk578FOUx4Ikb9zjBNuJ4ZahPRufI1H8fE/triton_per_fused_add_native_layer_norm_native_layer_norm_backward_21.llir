; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !10
  %14 = icmp slt i32 %13, 256, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 31, !dbg !12
  %17 = lshr i32 %15, 5, !dbg !12
  %18 = shl i32 %15, 2, !dbg !12
  %19 = and i32 %18, 252, !dbg !12
  %20 = icmp samesign ult i32 %19, 192, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %21 = sdiv i32 %.frozen, 8, !dbg !14
  %22 = mul i32 %21, 8, !dbg !15
  %.decomposed = sub i32 %.frozen, %22, !dbg !15
  %23 = srem i32 %21, 8, !dbg !16
  %24 = sdiv i32 %13, 64, !dbg !17
  %25 = mul i32 %13, 192, !dbg !18
  %26 = add i32 %25, %19, !dbg !19
  %27 = sext i32 %26 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = and i1 %20, %14, !dbg !21
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #6, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !22
  %35 = bitcast i32 %31 to float, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #6, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %44 = bitcast i32 %42 to float, !dbg !24
  %45 = zext nneg i32 %19 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #6, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !26
  %52 = bitcast i32 %50 to float, !dbg !26
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !27
  %53 = sdiv i8 %.lhs.trunc, 4, !dbg !28
  %54 = mul i8 %53, 4, !dbg !27
  %.decomposed19 = sub i8 %.lhs.trunc, %54, !dbg !27
  %.lhs.trunc13 = trunc nsw i32 %23 to i8, !dbg !29
  %55 = sdiv i8 %.lhs.trunc13, 4, !dbg !30
  %56 = mul i8 %55, 4, !dbg !29
  %.decomposed20 = sub i8 %.lhs.trunc13, %56, !dbg !29
  %57 = insertelement <4 x i8> poison, i8 %.decomposed19, i64 0, !dbg !27
  %58 = insertelement <4 x i8> %57, i8 %53, i64 1, !dbg !27
  %59 = insertelement <4 x i8> %58, i8 %.decomposed20, i64 2, !dbg !27
  %60 = insertelement <4 x i8> %59, i8 %55, i64 3, !dbg !27
  %61 = sext <4 x i8> %60 to <4 x i32>, !dbg !27
  %62 = mul nsw <4 x i32> %61, <i32 192, i32 3072, i32 768, i32 6144>, !dbg !31
  %63 = mul i32 %24, 12288, !dbg !32
  %64 = or disjoint i32 %63, %19, !dbg !33
  %65 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %62), !dbg !34
  %op.rdx = add i32 %65, %64, !dbg !35
  %66 = sext i32 %op.rdx to i64, !dbg !36
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !36
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #6, !dbg !37
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !37
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !37
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !37
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !37
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !38
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #6, !dbg !39
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !39
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !39
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !39
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !39
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %45, !dbg !40
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #6, !dbg !41
  %81 = getelementptr float, ptr addrspace(1) %6, i64 %45, !dbg !42
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #6, !dbg !43
  %83 = fadd float %44, %52, !dbg !44
  %84 = fadd float %83, %37, !dbg !45
  %85 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !24
  %86 = insertelement <2 x i32> %85, i32 %69, i64 1, !dbg !24
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !24
  %88 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !26
  %89 = insertelement <2 x i32> %88, i32 %75, i64 1, !dbg !26
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !26
  %91 = fadd <2 x float> %87, %90, !dbg !44
  %92 = extractelement <2 x float> %91, i64 0, !dbg !45
  %93 = fadd float %92, %35, !dbg !45
  %94 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !24
  %95 = insertelement <2 x i32> %94, i32 %70, i64 1, !dbg !24
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !24
  %97 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !26
  %98 = insertelement <2 x i32> %97, i32 %76, i64 1, !dbg !26
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !26
  %100 = fadd <2 x float> %96, %99, !dbg !44
  %101 = extractelement <2 x float> %100, i64 0, !dbg !45
  %102 = fadd float %101, %36, !dbg !45
  %103 = extractelement <2 x float> %91, i64 1, !dbg !46
  %104 = fadd float %93, %103, !dbg !46
  %105 = extractelement <2 x float> %100, i64 1, !dbg !46
  %106 = fadd float %102, %105, !dbg !46
  %107 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !24
  %108 = insertelement <2 x i32> %107, i32 %71, i64 1, !dbg !24
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !24
  %110 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !26
  %111 = insertelement <2 x i32> %110, i32 %77, i64 1, !dbg !26
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !26
  %113 = fadd <2 x float> %109, %112, !dbg !44
  %114 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !45
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !45
  %116 = insertelement <2 x float> %115, float %84, i64 1, !dbg !45
  %117 = fadd <2 x float> %113, %116, !dbg !45
  %118 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !47
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !47
  %120 = insertelement <2 x float> %119, float %104, i64 1, !dbg !47
  %121 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !47
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !47
  %123 = insertelement <2 x float> %122, float %106, i64 1, !dbg !47
  %124 = fadd <2 x float> %120, %123, !dbg !47
  %125 = fadd <2 x float> %117, %124, !dbg !46
  %126 = extractelement <2 x float> %125, i64 0, !dbg !48
  %127 = extractelement <2 x float> %125, i64 1, !dbg !48
  %128 = fadd float %126, %127, !dbg !48
  %129 = select i1 %29, float %128, float 0.000000e+00, !dbg !48
  %130 = bitcast float %129 to i32, !dbg !53
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 16, i32 31), !dbg !53
  %132 = bitcast i32 %131 to float, !dbg !53
  %133 = fadd float %129, %132, !dbg !48
  %134 = bitcast float %133 to i32, !dbg !53
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !53
  %136 = bitcast i32 %135 to float, !dbg !53
  %137 = fadd float %133, %136, !dbg !48
  %138 = bitcast float %137 to i32, !dbg !53
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !53
  %140 = bitcast i32 %139 to float, !dbg !53
  %141 = fadd float %137, %140, !dbg !48
  %142 = bitcast float %141 to i32, !dbg !53
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !53
  %144 = bitcast i32 %143 to float, !dbg !53
  %145 = fadd float %141, %144, !dbg !48
  %146 = bitcast float %145 to i32, !dbg !53
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !53
  %148 = bitcast i32 %147 to float, !dbg !53
  %149 = fadd float %145, %148, !dbg !48
  %150 = icmp eq i32 %16, 0, !dbg !53
  %151 = and i32 %17, 1, !dbg !53
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !53
  %153 = bitcast float %149 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 %150) #6, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %154 = icmp slt i32 %15, 2, !dbg !53
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !53
  %156 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %155, i1 %154) #6, !dbg !53
  %157 = bitcast i32 %156 to float, !dbg !53
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !53
  %159 = bitcast i32 %158 to float, !dbg !53
  %160 = fadd float %157, %159, !dbg !48
  %161 = and i32 %15, 1, !dbg !53
  %162 = icmp eq i32 %161, 0, !dbg !53
  %163 = and i1 %154, %162, !dbg !53
  %164 = bitcast float %160 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %164, i1 %163) #6, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %165 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 1.920000e+02) #6, !dbg !54
  %167 = fsub float %104, %166, !dbg !55
  %168 = fsub float %106, %166, !dbg !55
  %169 = extractelement <2 x float> %117, i64 1, !dbg !55
  %170 = fsub float %169, %166, !dbg !55
  %171 = fsub float %126, %166, !dbg !55
  %172 = fmul float %167, %167, !dbg !56
  %173 = fmul float %168, %168, !dbg !56
  %174 = fmul float %170, %170, !dbg !56
  %175 = fmul float %171, %171, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %176 = fadd float %172, %173, !dbg !59
  %177 = fadd float %174, %176, !dbg !59
  %178 = fadd float %175, %177, !dbg !59
  %179 = select i1 %29, float %178, float 0.000000e+00, !dbg !59
  %180 = bitcast float %179 to i32, !dbg !57
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 16, i32 31), !dbg !57
  %182 = bitcast i32 %181 to float, !dbg !57
  %183 = fadd float %179, %182, !dbg !59
  %184 = bitcast float %183 to i32, !dbg !57
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 8, i32 31), !dbg !57
  %186 = bitcast i32 %185 to float, !dbg !57
  %187 = fadd float %183, %186, !dbg !59
  %188 = bitcast float %187 to i32, !dbg !57
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 4, i32 31), !dbg !57
  %190 = bitcast i32 %189 to float, !dbg !57
  %191 = fadd float %187, %190, !dbg !59
  %192 = bitcast float %191 to i32, !dbg !57
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 2, i32 31), !dbg !57
  %194 = bitcast i32 %193 to float, !dbg !57
  %195 = fadd float %191, %194, !dbg !59
  %196 = bitcast float %195 to i32, !dbg !57
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 1, i32 31), !dbg !57
  %198 = bitcast i32 %197 to float, !dbg !57
  %199 = fadd float %195, %198, !dbg !59
  %200 = bitcast float %199 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %200, i1 %150) #6, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %201 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %155, i1 %154) #6, !dbg !57
  %202 = bitcast i32 %201 to float, !dbg !57
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !57
  %204 = bitcast i32 %203 to float, !dbg !57
  %205 = fadd float %202, %204, !dbg !59
  %206 = bitcast float %205 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %206, i1 %163) #6, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %207 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !57
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float 1.920000e+02) #6, !dbg !60
  %209 = fadd float %208, 0x3EB0C6F7A0000000, !dbg !61
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !62
  %.not.i = icmp eq i32 %210, 0, !dbg !62
  br i1 %.not.i, label %213, label %211, !dbg !62

211:                                              ; preds = %12
  %212 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %209), !dbg !62
  br label %__nv_rsqrtf.exit, !dbg !62

213:                                              ; preds = %12
  %214 = tail call float @llvm.nvvm.rsqrt.approx.f(float %209), !dbg !62
  br label %__nv_rsqrtf.exit, !dbg !62

__nv_rsqrtf.exit:                                 ; preds = %211, %213
  %.0.i = phi float [ %212, %211 ], [ %214, %213 ], !dbg !62
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !62
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !62
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !62
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !62
  %.not.i10 = icmp eq i32 %218, 0, !dbg !62
  br i1 %.not.i10, label %221, label %219, !dbg !62

219:                                              ; preds = %__nv_rsqrtf.exit
  %220 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %209), !dbg !62
  br label %__nv_rsqrtf.exit12, !dbg !62

221:                                              ; preds = %__nv_rsqrtf.exit
  %222 = tail call float @llvm.nvvm.rsqrt.approx.f(float %209), !dbg !62
  br label %__nv_rsqrtf.exit12, !dbg !62

__nv_rsqrtf.exit12:                               ; preds = %219, %221
  %.0.i11 = phi float [ %220, %219 ], [ %222, %221 ], !dbg !62
  %223 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !43
  %224 = bitcast i32 %223 to float, !dbg !43
  %225 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !43
  %226 = bitcast i32 %225 to float, !dbg !43
  %227 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !43
  %228 = bitcast i32 %227 to float, !dbg !43
  %229 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !43
  %230 = bitcast i32 %229 to float, !dbg !43
  %231 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !41
  %232 = bitcast i32 %231 to float, !dbg !41
  %233 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !41
  %234 = bitcast i32 %233 to float, !dbg !41
  %235 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !41
  %236 = bitcast i32 %235 to float, !dbg !41
  %237 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !41
  %238 = bitcast i32 %237 to float, !dbg !41
  %239 = fmul float %167, %.0.i11, !dbg !63
  %240 = fmul float %168, %.0.i11, !dbg !63
  %241 = fmul float %170, %.0.i11, !dbg !63
  %242 = fmul float %171, %.0.i11, !dbg !63
  %243 = fmul float %239, %238, !dbg !64
  %244 = fmul float %240, %236, !dbg !64
  %245 = fmul float %241, %234, !dbg !64
  %246 = fmul float %242, %232, !dbg !64
  %247 = fadd float %243, %230, !dbg !65
  %248 = fadd float %244, %228, !dbg !65
  %249 = fadd float %245, %226, !dbg !65
  %250 = fadd float %246, %224, !dbg !65
  %251 = fmul float %.0.i, 0x3F75555560000000, !dbg !66
  %252 = bitcast float %104 to i32, !dbg !67
  %253 = bitcast float %106 to i32, !dbg !67
  %254 = bitcast float %169 to i32, !dbg !67
  %255 = bitcast float %126 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %252, i32 %253, i32 %254, i32 %255, ptr addrspace(1) %28, i1 %29) #6, !dbg !67
  %256 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !68
  %257 = bitcast float %239 to i32, !dbg !69
  %258 = bitcast float %240 to i32, !dbg !69
  %259 = bitcast float %241 to i32, !dbg !69
  %260 = bitcast float %242 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %257, i32 %258, i32 %259, i32 %260, ptr addrspace(1) %256, i1 %29) #6, !dbg !69
  %261 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !70
  %262 = bitcast float %247 to i32, !dbg !71
  %263 = bitcast float %248 to i32, !dbg !71
  %264 = bitcast float %249 to i32, !dbg !71
  %265 = bitcast float %250 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %262, i32 %263, i32 %264, i32 %265, ptr addrspace(1) %261, i1 %29) #6, !dbg !71
  %266 = sext i32 %13 to i64, !dbg !72
  %267 = getelementptr float, ptr addrspace(1) %9, i64 %266, !dbg !72
  %urem = and i32 %15, 63, !dbg !73
  %268 = icmp eq i32 %urem, 0, !dbg !73
  %269 = bitcast float %251 to i32, !dbg !73
  %270 = and i1 %268, %14, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %269, ptr addrspace(1) %267, i1 %270) #6, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7istjaymt7hqrdmimyn3l5m42awxkfo5ze265driy5x7zraxnb3.py", directory: "inductor_cache/7i")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_21, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_21, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_21", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 32, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 26, scope: !7)
!17 = !DILocation(line: 33, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 43, scope: !7)
!19 = !DILocation(line: 34, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 34, scope: !7)
!21 = !DILocation(line: 34, column: 56, scope: !7)
!22 = !DILocation(line: 34, column: 48, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 44, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 46, scope: !7)
!28 = !DILocation(line: 37, column: 81, scope: !7)
!29 = !DILocation(line: 37, column: 63, scope: !7)
!30 = !DILocation(line: 37, column: 98, scope: !7)
!31 = !DILocation(line: 37, column: 41, scope: !7)
!32 = !DILocation(line: 37, column: 109, scope: !7)
!33 = !DILocation(line: 37, column: 35, scope: !7)
!34 = !DILocation(line: 37, column: 103, scope: !7)
!35 = !DILocation(line: 37, column: 52, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 114, scope: !7)
!38 = !DILocation(line: 38, column: 30, scope: !7)
!39 = !DILocation(line: 38, column: 35, scope: !7)
!40 = !DILocation(line: 39, column: 31, scope: !7)
!41 = !DILocation(line: 39, column: 36, scope: !7)
!42 = !DILocation(line: 40, column: 31, scope: !7)
!43 = !DILocation(line: 40, column: 36, scope: !7)
!44 = !DILocation(line: 41, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 18, scope: !7)
!46 = !DILocation(line: 44, column: 18, scope: !7)
!47 = !DILocation(line: 43, column: 18, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !52)
!49 = distinct !DILexicalBlockFile(scope: !51, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!51 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!52 = !DILocation(line: 49, column: 26, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !52)
!54 = !DILocation(line: 52, column: 20, scope: !7)
!55 = !DILocation(line: 53, column: 19, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !58)
!58 = !DILocation(line: 57, column: 26, scope: !7)
!59 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !58)
!60 = !DILocation(line: 60, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 28, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 65, column: 20, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 48, scope: !7)
!68 = !DILocation(line: 70, column: 25, scope: !7)
!69 = !DILocation(line: 70, column: 46, scope: !7)
!70 = !DILocation(line: 71, column: 25, scope: !7)
!71 = !DILocation(line: 71, column: 46, scope: !7)
!72 = !DILocation(line: 72, column: 25, scope: !7)
!73 = !DILocation(line: 72, column: 37, scope: !7)
!74 = !DILocation(line: 72, column: 4, scope: !7)
