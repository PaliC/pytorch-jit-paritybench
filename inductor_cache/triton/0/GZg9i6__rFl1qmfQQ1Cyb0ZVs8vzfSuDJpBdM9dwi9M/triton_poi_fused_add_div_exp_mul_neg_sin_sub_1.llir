; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@__cudart_i2opi_f = internal unnamed_addr addrspace(1) constant [6 x i32] [i32 1011060801, i32 -614296167, i32 -181084736, i32 -64530479, i32 1313084713, i32 -1560706194], align 4

define void @triton_poi_fused_add_div_exp_mul_neg_sin_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %result.i.i.i.i1 = alloca [7 x i32], align 4
  %result.i.i.i.i = alloca [7 x i32], align 4
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 256, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %16 = sdiv i32 %.frozen, 4, !dbg !15
  %17 = srem i32 %16, 16, !dbg !16
  %18 = sdiv i32 %13, 64, !dbg !17
  %19 = mul i32 %16, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %19, !dbg !18
  %20 = srem i32 %14, 4, !dbg !18
  %21 = shl nsw i32 %18, 6, !dbg !19
  %22 = add i32 %17, %21, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %15) #4, !dbg !22
  %26 = bitcast i32 %25 to float, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %15) #4, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = add i32 %22, 16, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %15) #4, !dbg !25
  %33 = bitcast i32 %32 to float, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %15) #4, !dbg !25
  %35 = bitcast i32 %34 to float, !dbg !25
  %36 = add i32 %22, 32, !dbg !26
  %37 = sext i32 %36 to i64, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !28
  %40 = bitcast i32 %39 to float, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %15) #4, !dbg !28
  %42 = bitcast i32 %41 to float, !dbg !28
  %43 = add i32 %22, 48, !dbg !29
  %44 = sext i32 %43 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %15) #4, !dbg !31
  %47 = bitcast i32 %46 to float, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %15) #4, !dbg !31
  %49 = bitcast i32 %48 to float, !dbg !31
  %50 = shl nsw i32 %.decomposed, 2, !dbg !32
  %51 = shl nsw i32 %20, 2, !dbg !32
  %52 = sext i32 %50 to i64, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !33
  %54 = sext i32 %51 to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %15) #4, !dbg !34
  %57 = bitcast i32 %56 to float, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %15) #4, !dbg !34
  %59 = bitcast i32 %58 to float, !dbg !34
  %60 = or disjoint i32 %50, 1, !dbg !35
  %61 = or disjoint i32 %51, 1, !dbg !35
  %62 = sext i32 %60 to i64, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !36
  %64 = sext i32 %61 to i64, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !36
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %15) #4, !dbg !37
  %67 = bitcast i32 %66 to float, !dbg !37
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %15) #4, !dbg !37
  %69 = bitcast i32 %68 to float, !dbg !37
  %70 = or disjoint i32 %50, 2, !dbg !38
  %71 = or disjoint i32 %51, 2, !dbg !38
  %72 = sext i32 %70 to i64, !dbg !39
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !39
  %74 = sext i32 %71 to i64, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !39
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %15) #4, !dbg !40
  %77 = bitcast i32 %76 to float, !dbg !40
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %15) #4, !dbg !40
  %79 = bitcast i32 %78 to float, !dbg !40
  %80 = or disjoint i32 %50, 3, !dbg !41
  %81 = or disjoint i32 %51, 3, !dbg !41
  %82 = sext i32 %80 to i64, !dbg !42
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !42
  %84 = sext i32 %81 to i64, !dbg !42
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !42
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %15) #4, !dbg !43
  %87 = bitcast i32 %86 to float, !dbg !43
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %15) #4, !dbg !43
  %89 = bitcast i32 %88 to float, !dbg !43
  %90 = sext i32 %13 to i64, !dbg !44
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !44
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %91, i1 %15) #4, !dbg !45
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !45
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !45
  %95 = bitcast i32 %93 to float, !dbg !45
  %96 = bitcast i32 %94 to float, !dbg !45
  %97 = sext i32 %.decomposed to i64, !dbg !46
  %98 = getelementptr float, ptr addrspace(1) %4, i64 %97, !dbg !46
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %98, i1 %15) #4, !dbg !47
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !47
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !47
  %102 = bitcast i32 %100 to float, !dbg !47
  %103 = bitcast i32 %101 to float, !dbg !47
  %104 = getelementptr float, ptr addrspace(1) %5, i64 %90, !dbg !48
  %105 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %104, i1 %15) #4, !dbg !49
  %106 = extractvalue { i32, i32 } %105, 0, !dbg !49
  %107 = extractvalue { i32, i32 } %105, 1, !dbg !49
  %108 = bitcast i32 %106 to float, !dbg !49
  %109 = bitcast i32 %107 to float, !dbg !49
  %110 = fmul float %26, %26, !dbg !50
  %111 = fmul float %28, %28, !dbg !50
  %112 = fmul float %33, %33, !dbg !51
  %113 = fmul float %35, %35, !dbg !51
  %114 = fadd float %110, %112, !dbg !52
  %115 = fadd float %111, %113, !dbg !52
  %116 = fmul float %40, %40, !dbg !53
  %117 = fmul float %42, %42, !dbg !53
  %118 = fadd float %114, %116, !dbg !54
  %119 = fadd float %115, %117, !dbg !54
  %120 = fmul float %47, %47, !dbg !55
  %121 = fmul float %49, %49, !dbg !55
  %122 = fadd float %118, %120, !dbg !56
  %123 = fadd float %119, %121, !dbg !56
  %124 = fmul float %57, %57, !dbg !57
  %125 = fmul float %59, %59, !dbg !57
  %126 = fmul float %67, %67, !dbg !58
  %127 = fmul float %69, %69, !dbg !58
  %128 = fadd float %124, %126, !dbg !59
  %129 = fadd float %125, %127, !dbg !59
  %130 = fmul float %77, %77, !dbg !60
  %131 = fmul float %79, %79, !dbg !60
  %132 = fadd float %128, %130, !dbg !61
  %133 = fadd float %129, %131, !dbg !61
  %134 = fmul float %87, %87, !dbg !62
  %135 = fmul float %89, %89, !dbg !62
  %136 = fadd float %132, %134, !dbg !63
  %137 = fadd float %133, %135, !dbg !63
  %138 = fadd float %122, %136, !dbg !64
  %139 = fadd float %123, %137, !dbg !64
  %140 = fsub float %138, %95, !dbg !65
  %141 = fsub float %139, %96, !dbg !65
  %142 = fsub float 0.000000e+00, %102, !dbg !66
  %143 = fsub float 0.000000e+00, %103, !dbg !66
  %144 = fmul float %142, 5.000000e-01, !dbg !67
  %145 = fmul float %143, 5.000000e-01, !dbg !67
  %146 = fmul float %140, %144, !dbg !68
  %147 = fmul float %141, %145, !dbg !68
  %148 = fmul float %146, 0x3FF7154760000000, !dbg !69
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #4, !dbg !69
  %150 = fmul float %147, 0x3FF7154760000000, !dbg !69
  %151 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %150) #4, !dbg !69
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !70
  %152 = fmul float %108, 0x3FE45F3060000000, !dbg !70
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not.i = icmp eq i32 %153, 0, !dbg !70
  %154 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %152) #4, !dbg !70
  %155 = tail call i32 @llvm.nvvm.f2i.rn(float %152) #4, !dbg !70
  %.01.i = select i1 %.not.i, i32 %155, i32 %154, !dbg !70
  %156 = sitofp i32 %.01.i to float, !dbg !70
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not15.i = icmp eq i32 %157, 0, !dbg !70
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %156, float 0xBFF921FB40000000, float %108) #4, !dbg !70
  %159 = tail call float @llvm.nvvm.fma.rn.f(float %156, float 0xBFF921FB40000000, float %108) #4, !dbg !70
  %.02.i = select i1 %.not15.i, float %159, float %158, !dbg !70
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not16.i = icmp eq i32 %160, 0, !dbg !70
  %161 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %156, float 0xBE74442D00000000, float %.02.i) #4, !dbg !70
  %162 = tail call float @llvm.nvvm.fma.rn.f(float %156, float 0xBE74442D00000000, float %.02.i) #4, !dbg !70
  %.03.i = select i1 %.not16.i, float %162, float %161, !dbg !70
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not17.i = icmp eq i32 %163, 0, !dbg !70
  %164 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %156, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !70
  %165 = tail call float @llvm.nvvm.fma.rn.f(float %156, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !70
  %.04.i = select i1 %.not17.i, float %165, float %164, !dbg !70
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not18.i = icmp eq i32 %166, 0, !dbg !70
  %167 = tail call float @llvm.nvvm.fabs.ftz.f(float %108) #4, !dbg !70
  %168 = tail call float @llvm.nvvm.fabs.f(float %108) #4, !dbg !70
  %.06.i = select i1 %.not18.i, float %168, float %167, !dbg !70
  %169 = fcmp ult float %.06.i, 1.056150e+05, !dbg !70
  br i1 %169, label %__internal_trig_reduction_kernel.exit.i.i, label %__nv_isinff.exit.i.i.i, !dbg !70

__nv_isinff.exit.i.i.i:                           ; preds = %7
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not19.i = icmp eq i32 %170, 0, !dbg !70
  %.07.i = select i1 %.not19.i, float %168, float %167, !dbg !70
  %171 = fcmp oeq float %.07.i, 0x7FF0000000000000, !dbg !70
  br i1 %171, label %__nv_fmul_rn.exit.i.i.i, label %175, !dbg !70

__nv_fmul_rn.exit.i.i.i:                          ; preds = %__nv_isinff.exit.i.i.i
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not27.i = icmp eq i32 %172, 0, !dbg !70
  %173 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %108, float 0.000000e+00) #4, !dbg !70
  %174 = tail call float @llvm.nvvm.mul.rn.f(float %108, float 0.000000e+00) #4, !dbg !70
  %.08.i = select i1 %.not27.i, float %174, float %173, !dbg !70
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !70

175:                                              ; preds = %__nv_isinff.exit.i.i.i
  %176 = lshr i32 %106, 23, !dbg !70
  %177 = and i32 %176, 224, !dbg !70
  %178 = add nsw i32 %177, -128, !dbg !70
  %179 = shl i32 %106, 8, !dbg !70
  %180 = or i32 %179, -2147483648, !dbg !70
  %181 = lshr exact i32 %178, 5, !dbg !70
  br label %182, !dbg !70

182:                                              ; preds = %175, %182
  %indvars.iv = phi i64 [ 0, %175 ], [ %indvars.iv.next, %182 ]
  %hi.i.i.i.0.i56 = phi i32 [ 0, %175 ], [ %187, %182 ]
  %183 = getelementptr inbounds [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv, !dbg !70
  %184 = load i32, ptr addrspace(1) %183, align 4, !dbg !70
  %185 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %184, i32 %180, i32 %hi.i.i.i.0.i56) #5, !dbg !70, !srcloc !71
  %186 = extractvalue { i32, i32 } %185, 0, !dbg !70
  %187 = extractvalue { i32, i32 } %185, 1, !dbg !70
  %188 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %indvars.iv, !dbg !70
  store i32 %186, ptr %188, align 4, !dbg !70
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !70
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !70
  br i1 %exitcond.not, label %189, label %182, !dbg !70, !llvm.loop !72

189:                                              ; preds = %182
  %190 = getelementptr inbounds i8, ptr %result.i.i.i.i, i64 24, !dbg !70
  store i32 %187, ptr %190, align 4, !dbg !70
  %191 = and i32 %176, 31, !dbg !70
  %192 = sub nsw i32 6, %181, !dbg !70
  %193 = sext i32 %192 to i64, !dbg !70
  %194 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %193, !dbg !70
  %195 = load i32, ptr %194, align 4, !dbg !70
  %196 = sub nsw i32 5, %181, !dbg !70
  %197 = sext i32 %196 to i64, !dbg !70
  %198 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %197, !dbg !70
  %199 = load i32, ptr %198, align 4, !dbg !70
  %.not20.i = icmp eq i32 %191, 0, !dbg !70
  br i1 %.not20.i, label %__internal_trig_reduction_slowpath.exit.i.i.i, label %200, !dbg !70

200:                                              ; preds = %189
  %201 = sub nsw i32 4, %181, !dbg !70
  %202 = sub nuw nsw i32 32, %191, !dbg !70
  %203 = shl i32 %195, %191, !dbg !70
  %204 = lshr i32 %199, %202, !dbg !70
  %205 = add i32 %204, %203, !dbg !70
  %206 = shl i32 %199, %191, !dbg !70
  %207 = sext i32 %201 to i64, !dbg !70
  %208 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %207, !dbg !70
  %209 = load i32, ptr %208, align 4, !dbg !70
  %210 = lshr i32 %209, %202, !dbg !70
  %211 = add i32 %210, %206, !dbg !70
  br label %__internal_trig_reduction_slowpath.exit.i.i.i, !dbg !70

__internal_trig_reduction_slowpath.exit.i.i.i:    ; preds = %200, %189
  %hi.i.i.i.1.i = phi i32 [ %205, %200 ], [ %195, %189 ], !dbg !70
  %lo.i.i.i.0.i = phi i32 [ %211, %200 ], [ %199, %189 ], !dbg !70
  %212 = lshr i32 %hi.i.i.i.1.i, 30, !dbg !70
  %213 = tail call i32 @llvm.fshl.i32(i32 %hi.i.i.i.1.i, i32 %lo.i.i.i.0.i, i32 2), !dbg !70
  %214 = shl i32 %lo.i.i.i.0.i, 2, !dbg !70
  %215 = lshr i32 %213, 31, !dbg !70
  %216 = add nuw nsw i32 %215, %212, !dbg !70
  %217 = sub nsw i32 0, %216, !dbg !70
  %.not2123.i = icmp slt i32 %106, 0, !dbg !70
  %spec.select.i = select i1 %.not2123.i, i32 %217, i32 %216, !dbg !70
  %218 = xor i32 %213, %106, !dbg !70
  %.lobit.i = ashr i32 %213, 31, !dbg !70
  %hi.i.i.i.2.i = xor i32 %.lobit.i, %213, !dbg !70
  %lo.i.i.i.1.i = xor i32 %.lobit.i, %214, !dbg !70
  %219 = zext i32 %hi.i.i.i.2.i to i64, !dbg !70
  %220 = shl nuw i64 %219, 32, !dbg !70
  %221 = zext i32 %lo.i.i.i.1.i to i64, !dbg !70
  %222 = or disjoint i64 %220, %221, !dbg !70
  %223 = sitofp i64 %222 to double, !dbg !70
  %224 = fmul double %223, 0x3BF921FB54442D19, !dbg !70
  %225 = fptrunc double %224 to float, !dbg !70
  %226 = fneg float %225, !dbg !70
  %.not2526.i = icmp slt i32 %218, 0, !dbg !70
  %r.i.i.i.0.i = select i1 %.not2526.i, float %226, float %225, !dbg !70
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !70

__internal_trig_reduction_kernel.exit.i.i:        ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i, %__nv_fmul_rn.exit.i.i.i, %7
  %i.i.1.i = phi i32 [ %.01.i, %7 ], [ 0, %__nv_fmul_rn.exit.i.i.i ], [ %spec.select.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !70
  %t.i.i.1.i = phi float [ %.04.i, %7 ], [ %.08.i, %__nv_fmul_rn.exit.i.i.i ], [ %r.i.i.i.0.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !70
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not28.i = icmp eq i32 %227, 0, !dbg !70
  %228 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !70
  %229 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !70
  %.011.i = select i1 %.not28.i, float %229, float %228, !dbg !70
  %230 = and i32 %i.i.1.i, 1, !dbg !70
  %.not29.i = icmp eq i32 %230, 0, !dbg !70
  %231 = select i1 %.not29.i, float %t.i.i.1.i, float 1.000000e+00, !dbg !70
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not30.i = icmp eq i32 %232, 0, !dbg !70
  %233 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %231, float 0.000000e+00) #4, !dbg !70
  %234 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %231, float 0.000000e+00) #4, !dbg !70
  %.012.i = select i1 %.not30.i, float %234, float %233, !dbg !70
  br i1 %.not29.i, label %__internal_fmad.exit2.i.i.i, label %__internal_fmad.exit1.i.i.i, !dbg !70

__internal_fmad.exit1.i.i.i:                      ; preds = %__internal_trig_reduction_kernel.exit.i.i
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not31.i = icmp eq i32 %235, 0, !dbg !70
  %236 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !70
  %237 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !70
  %.013.i = select i1 %.not31.i, float %237, float %236, !dbg !70
  br label %__internal_fmad.exit2.i.i.i, !dbg !70

__internal_fmad.exit2.i.i.i:                      ; preds = %__internal_fmad.exit1.i.i.i, %__internal_trig_reduction_kernel.exit.i.i
  %238 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !70
  %239 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !70
  %240 = phi float [ %.013.i, %__internal_fmad.exit1.i.i.i ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !70
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not32.i = icmp eq i32 %241, 0, !dbg !70
  %242 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %240, float %.011.i, float %239) #4, !dbg !70
  %243 = tail call float @llvm.nvvm.fma.rn.f(float %240, float %.011.i, float %239) #4, !dbg !70
  %.010.i = select i1 %.not32.i, float %243, float %242, !dbg !70
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not33.i = icmp eq i32 %244, 0, !dbg !70
  %245 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %.011.i, float %238) #4, !dbg !70
  %246 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %.011.i, float %238) #4, !dbg !70
  %.09.i = select i1 %.not33.i, float %246, float %245, !dbg !70
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not34.i = icmp eq i32 %247, 0, !dbg !70
  %248 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.012.i, float %231) #4, !dbg !70
  %249 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.012.i, float %231) #4, !dbg !70
  %.05.i = select i1 %.not34.i, float %249, float %248, !dbg !70
  %250 = and i32 %i.i.1.i, 2, !dbg !70
  %.not35.i = icmp eq i32 %250, 0, !dbg !70
  br i1 %.not35.i, label %__nv_sinf.exit, label %__internal_fmad.exit5.i.i.i, !dbg !70

__internal_fmad.exit5.i.i.i:                      ; preds = %__internal_fmad.exit2.i.i.i
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not36.i = icmp eq i32 %251, 0, !dbg !70
  %252 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !70
  %253 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !70
  %.0.i = select i1 %.not36.i, float %253, float %252, !dbg !70
  br label %__nv_sinf.exit, !dbg !70

__nv_sinf.exit:                                   ; preds = %__internal_fmad.exit2.i.i.i, %__internal_fmad.exit5.i.i.i
  %z.i.i.0.i = phi float [ %.0.i, %__internal_fmad.exit5.i.i.i ], [ %.05.i, %__internal_fmad.exit2.i.i.i ], !dbg !70
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !70
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i1), !dbg !70
  %254 = fmul float %109, 0x3FE45F3060000000, !dbg !70
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not.i2 = icmp eq i32 %255, 0, !dbg !70
  %256 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %254) #4, !dbg !70
  %257 = tail call i32 @llvm.nvvm.f2i.rn(float %254) #4, !dbg !70
  %.01.i3 = select i1 %.not.i2, i32 %257, i32 %256, !dbg !70
  %258 = sitofp i32 %.01.i3 to float, !dbg !70
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not15.i4 = icmp eq i32 %259, 0, !dbg !70
  %260 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %258, float 0xBFF921FB40000000, float %109) #4, !dbg !70
  %261 = tail call float @llvm.nvvm.fma.rn.f(float %258, float 0xBFF921FB40000000, float %109) #4, !dbg !70
  %.02.i5 = select i1 %.not15.i4, float %261, float %260, !dbg !70
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not16.i6 = icmp eq i32 %262, 0, !dbg !70
  %263 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %258, float 0xBE74442D00000000, float %.02.i5) #4, !dbg !70
  %264 = tail call float @llvm.nvvm.fma.rn.f(float %258, float 0xBE74442D00000000, float %.02.i5) #4, !dbg !70
  %.03.i7 = select i1 %.not16.i6, float %264, float %263, !dbg !70
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not17.i8 = icmp eq i32 %265, 0, !dbg !70
  %266 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %258, float 0xBCF84698A0000000, float %.03.i7) #4, !dbg !70
  %267 = tail call float @llvm.nvvm.fma.rn.f(float %258, float 0xBCF84698A0000000, float %.03.i7) #4, !dbg !70
  %.04.i9 = select i1 %.not17.i8, float %267, float %266, !dbg !70
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not18.i10 = icmp eq i32 %268, 0, !dbg !70
  %269 = tail call float @llvm.nvvm.fabs.ftz.f(float %109) #4, !dbg !70
  %270 = tail call float @llvm.nvvm.fabs.f(float %109) #4, !dbg !70
  %.06.i11 = select i1 %.not18.i10, float %270, float %269, !dbg !70
  %271 = fcmp ult float %.06.i11, 1.056150e+05, !dbg !70
  br i1 %271, label %__internal_trig_reduction_kernel.exit.i.i29, label %__nv_isinff.exit.i.i.i12, !dbg !70

__nv_isinff.exit.i.i.i12:                         ; preds = %__nv_sinf.exit
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not19.i13 = icmp eq i32 %272, 0, !dbg !70
  %.07.i14 = select i1 %.not19.i13, float %270, float %269, !dbg !70
  %273 = fcmp oeq float %.07.i14, 0x7FF0000000000000, !dbg !70
  br i1 %273, label %__nv_fmul_rn.exit.i.i.i52, label %277, !dbg !70

__nv_fmul_rn.exit.i.i.i52:                        ; preds = %__nv_isinff.exit.i.i.i12
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not27.i53 = icmp eq i32 %274, 0, !dbg !70
  %275 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %109, float 0.000000e+00) #4, !dbg !70
  %276 = tail call float @llvm.nvvm.mul.rn.f(float %109, float 0.000000e+00) #4, !dbg !70
  %.08.i54 = select i1 %.not27.i53, float %276, float %275, !dbg !70
  br label %__internal_trig_reduction_kernel.exit.i.i29, !dbg !70

277:                                              ; preds = %__nv_isinff.exit.i.i.i12
  %278 = lshr i32 %107, 23, !dbg !70
  %279 = and i32 %278, 224, !dbg !70
  %280 = add nsw i32 %279, -128, !dbg !70
  %281 = shl i32 %107, 8, !dbg !70
  %282 = or i32 %281, -2147483648, !dbg !70
  %283 = lshr exact i32 %280, 5, !dbg !70
  br label %284, !dbg !70

284:                                              ; preds = %277, %284
  %indvars.iv63 = phi i64 [ 0, %277 ], [ %indvars.iv.next64, %284 ]
  %hi.i.i.i.0.i1558 = phi i32 [ 0, %277 ], [ %289, %284 ]
  %285 = getelementptr inbounds [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv63, !dbg !70
  %286 = load i32, ptr addrspace(1) %285, align 4, !dbg !70
  %287 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %286, i32 %282, i32 %hi.i.i.i.0.i1558) #5, !dbg !70, !srcloc !71
  %288 = extractvalue { i32, i32 } %287, 0, !dbg !70
  %289 = extractvalue { i32, i32 } %287, 1, !dbg !70
  %290 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %indvars.iv63, !dbg !70
  store i32 %288, ptr %290, align 4, !dbg !70
  %indvars.iv.next64 = add nuw nsw i64 %indvars.iv63, 1, !dbg !70
  %exitcond65.not = icmp eq i64 %indvars.iv.next64, 6, !dbg !70
  br i1 %exitcond65.not, label %291, label %284, !dbg !70, !llvm.loop !74

291:                                              ; preds = %284
  %292 = getelementptr inbounds i8, ptr %result.i.i.i.i1, i64 24, !dbg !70
  store i32 %289, ptr %292, align 4, !dbg !70
  %293 = and i32 %278, 31, !dbg !70
  %294 = sub nsw i32 6, %283, !dbg !70
  %295 = sext i32 %294 to i64, !dbg !70
  %296 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %295, !dbg !70
  %297 = load i32, ptr %296, align 4, !dbg !70
  %298 = sub nsw i32 5, %283, !dbg !70
  %299 = sext i32 %298 to i64, !dbg !70
  %300 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %299, !dbg !70
  %301 = load i32, ptr %300, align 4, !dbg !70
  %.not20.i17 = icmp eq i32 %293, 0, !dbg !70
  br i1 %.not20.i17, label %__internal_trig_reduction_slowpath.exit.i.i.i18, label %302, !dbg !70

302:                                              ; preds = %291
  %303 = sub nsw i32 4, %283, !dbg !70
  %304 = sub nuw nsw i32 32, %293, !dbg !70
  %305 = shl i32 %297, %293, !dbg !70
  %306 = lshr i32 %301, %304, !dbg !70
  %307 = add i32 %306, %305, !dbg !70
  %308 = shl i32 %301, %293, !dbg !70
  %309 = sext i32 %303 to i64, !dbg !70
  %310 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i1, i64 0, i64 %309, !dbg !70
  %311 = load i32, ptr %310, align 4, !dbg !70
  %312 = lshr i32 %311, %304, !dbg !70
  %313 = add i32 %312, %308, !dbg !70
  br label %__internal_trig_reduction_slowpath.exit.i.i.i18, !dbg !70

__internal_trig_reduction_slowpath.exit.i.i.i18:  ; preds = %302, %291
  %hi.i.i.i.1.i19 = phi i32 [ %307, %302 ], [ %297, %291 ], !dbg !70
  %lo.i.i.i.0.i20 = phi i32 [ %313, %302 ], [ %301, %291 ], !dbg !70
  %314 = lshr i32 %hi.i.i.i.1.i19, 30, !dbg !70
  %315 = tail call i32 @llvm.fshl.i32(i32 %hi.i.i.i.1.i19, i32 %lo.i.i.i.0.i20, i32 2), !dbg !70
  %316 = shl i32 %lo.i.i.i.0.i20, 2, !dbg !70
  %317 = lshr i32 %315, 31, !dbg !70
  %318 = add nuw nsw i32 %317, %314, !dbg !70
  %319 = sub nsw i32 0, %318, !dbg !70
  %.not2123.i21 = icmp slt i32 %107, 0, !dbg !70
  %spec.select.i22 = select i1 %.not2123.i21, i32 %319, i32 %318, !dbg !70
  %320 = xor i32 %315, %107, !dbg !70
  %.lobit.i23 = ashr i32 %315, 31, !dbg !70
  %hi.i.i.i.2.i24 = xor i32 %.lobit.i23, %315, !dbg !70
  %lo.i.i.i.1.i26 = xor i32 %.lobit.i23, %316, !dbg !70
  %321 = zext i32 %hi.i.i.i.2.i24 to i64, !dbg !70
  %322 = shl nuw i64 %321, 32, !dbg !70
  %323 = zext i32 %lo.i.i.i.1.i26 to i64, !dbg !70
  %324 = or disjoint i64 %322, %323, !dbg !70
  %325 = sitofp i64 %324 to double, !dbg !70
  %326 = fmul double %325, 0x3BF921FB54442D19, !dbg !70
  %327 = fptrunc double %326 to float, !dbg !70
  %328 = fneg float %327, !dbg !70
  %.not2526.i27 = icmp slt i32 %320, 0, !dbg !70
  %r.i.i.i.0.i28 = select i1 %.not2526.i27, float %328, float %327, !dbg !70
  br label %__internal_trig_reduction_kernel.exit.i.i29, !dbg !70

__internal_trig_reduction_kernel.exit.i.i29:      ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i18, %__nv_fmul_rn.exit.i.i.i52, %__nv_sinf.exit
  %i.i.1.i30 = phi i32 [ %.01.i3, %__nv_sinf.exit ], [ 0, %__nv_fmul_rn.exit.i.i.i52 ], [ %spec.select.i22, %__internal_trig_reduction_slowpath.exit.i.i.i18 ], !dbg !70
  %t.i.i.1.i31 = phi float [ %.04.i9, %__nv_sinf.exit ], [ %.08.i54, %__nv_fmul_rn.exit.i.i.i52 ], [ %r.i.i.i.0.i28, %__internal_trig_reduction_slowpath.exit.i.i.i18 ], !dbg !70
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not28.i32 = icmp eq i32 %329, 0, !dbg !70
  %330 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i31, float %t.i.i.1.i31) #4, !dbg !70
  %331 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i31, float %t.i.i.1.i31) #4, !dbg !70
  %.011.i33 = select i1 %.not28.i32, float %331, float %330, !dbg !70
  %332 = and i32 %i.i.1.i30, 1, !dbg !70
  %.not29.i34 = icmp eq i32 %332, 0, !dbg !70
  %333 = select i1 %.not29.i34, float %t.i.i.1.i31, float 1.000000e+00, !dbg !70
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not30.i35 = icmp eq i32 %334, 0, !dbg !70
  %335 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i33, float %333, float 0.000000e+00) #4, !dbg !70
  %336 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i33, float %333, float 0.000000e+00) #4, !dbg !70
  %.012.i36 = select i1 %.not30.i35, float %336, float %335, !dbg !70
  br i1 %.not29.i34, label %__internal_fmad.exit2.i.i.i40, label %__internal_fmad.exit1.i.i.i37, !dbg !70

__internal_fmad.exit1.i.i.i37:                    ; preds = %__internal_trig_reduction_kernel.exit.i.i29
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not31.i38 = icmp eq i32 %337, 0, !dbg !70
  %338 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i33, float 0xBF56C0FDA0000000) #4, !dbg !70
  %339 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i33, float 0xBF56C0FDA0000000) #4, !dbg !70
  %.013.i39 = select i1 %.not31.i38, float %339, float %338, !dbg !70
  br label %__internal_fmad.exit2.i.i.i40, !dbg !70

__internal_fmad.exit2.i.i.i40:                    ; preds = %__internal_fmad.exit1.i.i.i37, %__internal_trig_reduction_kernel.exit.i.i29
  %340 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i37 ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !70
  %341 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i37 ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !70
  %342 = phi float [ %.013.i39, %__internal_fmad.exit1.i.i.i37 ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i29 ], !dbg !70
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not32.i41 = icmp eq i32 %343, 0, !dbg !70
  %344 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %342, float %.011.i33, float %341) #4, !dbg !70
  %345 = tail call float @llvm.nvvm.fma.rn.f(float %342, float %.011.i33, float %341) #4, !dbg !70
  %.010.i42 = select i1 %.not32.i41, float %345, float %344, !dbg !70
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not33.i43 = icmp eq i32 %346, 0, !dbg !70
  %347 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i42, float %.011.i33, float %340) #4, !dbg !70
  %348 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i42, float %.011.i33, float %340) #4, !dbg !70
  %.09.i44 = select i1 %.not33.i43, float %348, float %347, !dbg !70
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not34.i45 = icmp eq i32 %349, 0, !dbg !70
  %350 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i44, float %.012.i36, float %333) #4, !dbg !70
  %351 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i44, float %.012.i36, float %333) #4, !dbg !70
  %.05.i46 = select i1 %.not34.i45, float %351, float %350, !dbg !70
  %352 = and i32 %i.i.1.i30, 2, !dbg !70
  %.not35.i47 = icmp eq i32 %352, 0, !dbg !70
  br i1 %.not35.i47, label %__nv_sinf.exit55, label %__internal_fmad.exit5.i.i.i48, !dbg !70

__internal_fmad.exit5.i.i.i48:                    ; preds = %__internal_fmad.exit2.i.i.i40
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !70
  %.not36.i49 = icmp eq i32 %353, 0, !dbg !70
  %354 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i46, float -1.000000e+00, float 0.000000e+00) #4, !dbg !70
  %355 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i46, float -1.000000e+00, float 0.000000e+00) #4, !dbg !70
  %.0.i50 = select i1 %.not36.i49, float %355, float %354, !dbg !70
  br label %__nv_sinf.exit55, !dbg !70

__nv_sinf.exit55:                                 ; preds = %__internal_fmad.exit2.i.i.i40, %__internal_fmad.exit5.i.i.i48
  %z.i.i.0.i51 = phi float [ %.0.i50, %__internal_fmad.exit5.i.i.i48 ], [ %.05.i46, %__internal_fmad.exit2.i.i.i40 ], !dbg !70
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i1), !dbg !70
  %356 = fmul float %149, %z.i.i.0.i, !dbg !75
  %357 = fmul float %151, %z.i.i.0.i51, !dbg !75
  %358 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !76
  %359 = bitcast float %356 to i32, !dbg !77
  %360 = bitcast float %357 to i32, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %359, i32 %360, ptr addrspace(1) %358, i1 %15) #4, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn.ftz(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqdycgsihir5b3ccjij2lb32ynlvcjsd54unnzpygdkt4qoxlwam.py", directory: "inductor_cache/qd")
!4 = !{ptr @triton_poi_fused_add_div_exp_mul_neg_sin_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_exp_mul_neg_sin_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_exp_mul_neg_sin_sub_1", linkageName: "triton_poi_fused_add_div_exp_mul_neg_sin_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 40, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 30, column: 40, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 48, scope: !7)
!29 = !DILocation(line: 31, column: 40, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 48, scope: !7)
!32 = !DILocation(line: 32, column: 33, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 38, scope: !7)
!35 = !DILocation(line: 33, column: 35, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 42, scope: !7)
!38 = !DILocation(line: 34, column: 35, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 42, scope: !7)
!41 = !DILocation(line: 35, column: 35, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 42, scope: !7)
!44 = !DILocation(line: 36, column: 31, scope: !7)
!45 = !DILocation(line: 36, column: 36, scope: !7)
!46 = !DILocation(line: 37, column: 31, scope: !7)
!47 = !DILocation(line: 37, column: 36, scope: !7)
!48 = !DILocation(line: 38, column: 31, scope: !7)
!49 = !DILocation(line: 38, column: 36, scope: !7)
!50 = !DILocation(line: 39, column: 18, scope: !7)
!51 = !DILocation(line: 40, column: 18, scope: !7)
!52 = !DILocation(line: 41, column: 18, scope: !7)
!53 = !DILocation(line: 42, column: 18, scope: !7)
!54 = !DILocation(line: 43, column: 18, scope: !7)
!55 = !DILocation(line: 44, column: 18, scope: !7)
!56 = !DILocation(line: 45, column: 19, scope: !7)
!57 = !DILocation(line: 46, column: 20, scope: !7)
!58 = !DILocation(line: 47, column: 20, scope: !7)
!59 = !DILocation(line: 48, column: 20, scope: !7)
!60 = !DILocation(line: 49, column: 20, scope: !7)
!61 = !DILocation(line: 50, column: 20, scope: !7)
!62 = !DILocation(line: 51, column: 20, scope: !7)
!63 = !DILocation(line: 52, column: 20, scope: !7)
!64 = !DILocation(line: 53, column: 20, scope: !7)
!65 = !DILocation(line: 54, column: 20, scope: !7)
!66 = !DILocation(line: 55, column: 13, scope: !7)
!67 = !DILocation(line: 57, column: 20, scope: !7)
!68 = !DILocation(line: 58, column: 20, scope: !7)
!69 = !DILocation(line: 59, column: 24, scope: !7)
!70 = !DILocation(line: 60, column: 24, scope: !7)
!71 = !{i32 30999, i32 31003, i32 31048, i32 31093}
!72 = distinct !{!72, !73}
!73 = !{!"llvm.loop.unroll.count", i32 1}
!74 = distinct !{!74, !73}
!75 = !DILocation(line: 61, column: 20, scope: !7)
!76 = !DILocation(line: 62, column: 28, scope: !7)
!77 = !DILocation(line: 62, column: 40, scope: !7)
!78 = !DILocation(line: 62, column: 4, scope: !7)
