; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = lshr i32 %11, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = or disjoint i32 %19, %15, !dbg !16
  %21 = or disjoint i32 %19, %16, !dbg !16
  %22 = icmp slt i32 %20, 36, !dbg !17
  %23 = icmp slt i32 %21, 36, !dbg !17
  %.frozen = freeze i32 %17, !dbg !18
  %24 = sdiv i32 %.frozen, 256, !dbg !18
  %25 = mul i32 %24, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %25, !dbg !19
  %26 = shl i32 %20, 8, !dbg !20
  %27 = shl i32 %21, 8, !dbg !20
  %28 = mul i32 %24, 9216, !dbg !21
  %29 = add i32 %28, %.decomposed, !dbg !22
  %30 = add i32 %29, %26, !dbg !23
  %31 = add i32 %29, %27, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %22) #4, !dbg !25
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #4, !dbg !25
  %38 = sext i32 %.decomposed to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !28
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !29
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !29
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !29
  %47 = bitcast i32 %43 to float, !dbg !29
  %48 = bitcast i32 %44 to float, !dbg !29
  %49 = bitcast i32 %45 to float, !dbg !29
  %50 = bitcast i32 %46 to float, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !30
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !32
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !33
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !34
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !34
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !34
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %59, 0, !dbg !35
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %60, 0, !dbg !35
  br i1 %.not.i, label %66, label %61, !dbg !35

61:                                               ; preds = %8
  br i1 %.not1.i, label %64, label %62, !dbg !35

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

66:                                               ; preds = %8
  br i1 %.not1.i, label %69, label %67, !dbg !35

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !35
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i1 = icmp eq i32 %71, 0, !dbg !35
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i4 = icmp eq i32 %72, 0, !dbg !35
  br i1 %.not.i1, label %78, label %73, !dbg !35

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !35

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !35

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %74, %76, %79, %81
  %.0.i3 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !35
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i6 = icmp eq i32 %83, 0, !dbg !35
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i9 = icmp eq i32 %84, 0, !dbg !35
  br i1 %.not.i6, label %90, label %85, !dbg !35

85:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %88, label %86, !dbg !35

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !35

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %86, %88, %91, %93
  %.0.i8 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !35
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i11 = icmp eq i32 %95, 0, !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i14 = icmp eq i32 %96, 0, !dbg !35
  br i1 %.not.i11, label %102, label %97, !dbg !35

97:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %100, label %98, !dbg !35

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !35

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %98, %100, %103, %105
  %.0.i13 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !35
  %107 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %110 = bitcast i32 %109 to float, !dbg !27
  %111 = fsub float %108, %110, !dbg !36
  %112 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %113 = bitcast i32 %112 to float, !dbg !25
  %114 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %115 = bitcast i32 %114 to float, !dbg !27
  %116 = fsub float %113, %115, !dbg !36
  %117 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %118 = bitcast i32 %117 to float, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %120 = bitcast i32 %119 to float, !dbg !27
  %121 = fsub float %118, %120, !dbg !36
  %122 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %123 = bitcast i32 %122 to float, !dbg !25
  %124 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %125 = bitcast i32 %124 to float, !dbg !27
  %126 = fsub float %123, %125, !dbg !36
  %127 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !25
  %128 = bitcast i32 %127 to float, !dbg !25
  %129 = fsub float %128, %110, !dbg !36
  %130 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !25
  %131 = bitcast i32 %130 to float, !dbg !25
  %132 = fsub float %131, %115, !dbg !36
  %133 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !25
  %134 = bitcast i32 %133 to float, !dbg !25
  %135 = fsub float %134, %120, !dbg !36
  %136 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !25
  %137 = bitcast i32 %136 to float, !dbg !25
  %138 = fsub float %137, %125, !dbg !36
  %139 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !33
  %140 = bitcast i32 %139 to float, !dbg !33
  %141 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !33
  %142 = bitcast i32 %141 to float, !dbg !33
  %143 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !33
  %144 = bitcast i32 %143 to float, !dbg !33
  %145 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !33
  %146 = bitcast i32 %145 to float, !dbg !33
  %147 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !31
  %148 = bitcast i32 %147 to float, !dbg !31
  %149 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !31
  %150 = bitcast i32 %149 to float, !dbg !31
  %151 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !31
  %152 = bitcast i32 %151 to float, !dbg !31
  %153 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !31
  %154 = bitcast i32 %153 to float, !dbg !31
  %155 = or disjoint i32 %19, %13, !dbg !16
  %156 = icmp slt i32 %155, 36, !dbg !17
  %157 = or disjoint i32 %10, %16, !dbg !13
  %158 = or disjoint i32 %10, %15, !dbg !13
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !37
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !37
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !37
  %163 = fmul float %138, %159, !dbg !38
  %164 = fmul float %135, %160, !dbg !38
  %165 = fmul float %132, %161, !dbg !38
  %166 = fmul float %129, %162, !dbg !38
  %167 = fmul float %126, %159, !dbg !38
  %168 = fmul float %121, %160, !dbg !38
  %169 = fmul float %116, %161, !dbg !38
  %170 = fmul float %111, %162, !dbg !38
  %171 = fmul float %163, %154, !dbg !39
  %172 = fmul float %164, %152, !dbg !39
  %173 = fmul float %165, %150, !dbg !39
  %174 = fmul float %166, %148, !dbg !39
  %175 = fmul float %167, %154, !dbg !39
  %176 = fmul float %168, %152, !dbg !39
  %177 = fmul float %169, %150, !dbg !39
  %178 = fmul float %170, %148, !dbg !39
  %179 = fadd float %171, %146, !dbg !40
  %180 = fadd float %172, %144, !dbg !40
  %181 = fadd float %173, %142, !dbg !40
  %182 = fadd float %174, %140, !dbg !40
  %183 = fadd float %175, %146, !dbg !40
  %184 = fadd float %176, %144, !dbg !40
  %185 = fadd float %177, %142, !dbg !40
  %186 = fadd float %178, %140, !dbg !40
  %187 = mul i32 %158, 36, !dbg !41
  %188 = mul i32 %157, 36, !dbg !41
  %189 = add i32 %155, %187, !dbg !42
  %190 = add i32 %155, %188, !dbg !42
  %191 = sext i32 %189 to i64, !dbg !43
  %192 = getelementptr float, ptr addrspace(1) %5, i64 %191, !dbg !43
  %193 = sext i32 %190 to i64, !dbg !43
  %194 = getelementptr float, ptr addrspace(1) %5, i64 %193, !dbg !43
  %195 = shl i32 %11, 7, !dbg !44
  %196 = and i32 %195, 896, !dbg !44
  %197 = or disjoint i32 %196, %15, !dbg !44
  %198 = and i32 %12, 508, !dbg !44
  %199 = lshr exact i32 %196, 5, !dbg !44
  %200 = add nuw nsw i32 %199, %197, !dbg !44
  %201 = zext nneg i32 %200 to i64, !dbg !44
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %201, !dbg !44
  %203 = bitcast float %179 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #4, !dbg !44
  %204 = or disjoint i32 %197, 32, !dbg !44
  %205 = lshr i32 %204, 5, !dbg !44
  %206 = add nuw nsw i32 %205, %204, !dbg !44
  %207 = zext nneg i32 %206 to i64, !dbg !44
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %207, !dbg !44
  %209 = bitcast float %180 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #4, !dbg !44
  %210 = or disjoint i32 %197, 64, !dbg !44
  %211 = lshr i32 %210, 5, !dbg !44
  %212 = add nuw nsw i32 %211, %210, !dbg !44
  %213 = zext nneg i32 %212 to i64, !dbg !44
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %213, !dbg !44
  %215 = bitcast float %181 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #4, !dbg !44
  %216 = or disjoint i32 %197, 96, !dbg !44
  %217 = lshr i32 %216, 5, !dbg !44
  %218 = add nuw nsw i32 %217, %216, !dbg !44
  %219 = zext nneg i32 %218 to i64, !dbg !44
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %219, !dbg !44
  %221 = bitcast float %182 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #4, !dbg !44
  %222 = or disjoint i32 %197, 16, !dbg !44
  %223 = add nuw nsw i32 %222, %199, !dbg !44
  %224 = zext nneg i32 %223 to i64, !dbg !44
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %224, !dbg !44
  %226 = bitcast float %183 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #4, !dbg !44
  %227 = or disjoint i32 %197, 48, !dbg !44
  %228 = lshr i32 %227, 5, !dbg !44
  %229 = add nuw nsw i32 %228, %227, !dbg !44
  %230 = zext nneg i32 %229 to i64, !dbg !44
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %230, !dbg !44
  %232 = bitcast float %184 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !44
  %233 = or disjoint i32 %197, 80, !dbg !44
  %234 = lshr i32 %233, 5, !dbg !44
  %235 = add nuw nsw i32 %234, %233, !dbg !44
  %236 = zext nneg i32 %235 to i64, !dbg !44
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %236, !dbg !44
  %238 = bitcast float %185 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #4, !dbg !44
  %239 = or disjoint i32 %197, 112, !dbg !44
  %240 = lshr i32 %239, 5, !dbg !44
  %241 = add nuw nsw i32 %240, %239, !dbg !44
  %242 = zext nneg i32 %241 to i64, !dbg !44
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %242, !dbg !44
  %244 = bitcast float %186 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %245 = lshr i32 %198, 5, !dbg !44
  %246 = add nuw nsw i32 %245, %198, !dbg !44
  %247 = zext nneg i32 %246 to i64, !dbg !44
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %247, !dbg !44
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !44
  %250 = or disjoint i32 %198, 1, !dbg !44
  %251 = add nuw nsw i32 %250, %245, !dbg !44
  %252 = zext nneg i32 %251 to i64, !dbg !44
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %252, !dbg !44
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !44
  %255 = or disjoint i32 %198, 2, !dbg !44
  %256 = add nuw nsw i32 %255, %245, !dbg !44
  %257 = zext nneg i32 %256 to i64, !dbg !44
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %257, !dbg !44
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !44
  %260 = or disjoint i32 %198, 3, !dbg !44
  %261 = add nuw nsw i32 %260, %245, !dbg !44
  %262 = zext nneg i32 %261 to i64, !dbg !44
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %262, !dbg !44
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !44
  %265 = or disjoint i32 %198, 512, !dbg !44
  %266 = lshr i32 %265, 5, !dbg !44
  %267 = add nuw nsw i32 %266, %265, !dbg !44
  %268 = zext nneg i32 %267 to i64, !dbg !44
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %268, !dbg !44
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !44
  %271 = or disjoint i32 %198, 513, !dbg !44
  %272 = lshr i32 %271, 5, !dbg !44
  %273 = add nuw nsw i32 %272, %271, !dbg !44
  %274 = zext nneg i32 %273 to i64, !dbg !44
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %274, !dbg !44
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !44
  %277 = or disjoint i32 %198, 514, !dbg !44
  %278 = lshr i32 %277, 5, !dbg !44
  %279 = add nuw nsw i32 %278, %277, !dbg !44
  %280 = zext nneg i32 %279 to i64, !dbg !44
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %280, !dbg !44
  %282 = load i32, ptr addrspace(3) %281, align 4, !dbg !44
  %283 = or disjoint i32 %198, 515, !dbg !44
  %284 = lshr i32 %283, 5, !dbg !44
  %285 = add nuw nsw i32 %284, %283, !dbg !44
  %286 = zext nneg i32 %285 to i64, !dbg !44
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %286, !dbg !44
  %288 = load i32, ptr addrspace(3) %287, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %249, i32 %254, i32 %259, i32 %264, ptr addrspace(1) %192, i1 %156) #4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %270, i32 %276, i32 %282, i32 %288, ptr addrspace(1) %194, i1 %156) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cudctemwvjjsxdcrryzsv6lpashxebnoeh6swwegpy6nwluainlp.py", directory: "inductor_cache/ud")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 33, scope: !7)
!42 = !DILocation(line: 48, column: 30, scope: !7)
!43 = !DILocation(line: 48, column: 25, scope: !7)
!44 = !DILocation(line: 48, column: 45, scope: !7)
!45 = !DILocation(line: 48, column: 4, scope: !7)
