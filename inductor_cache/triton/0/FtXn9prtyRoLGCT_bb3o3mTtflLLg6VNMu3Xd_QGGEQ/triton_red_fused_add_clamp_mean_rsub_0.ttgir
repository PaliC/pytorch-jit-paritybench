#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":19:0)
#loc1 = loc(unknown)
#loc22 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":42:25)
#loc35 = loc(callsite(#loc1 at #loc22))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_add_clamp_mean_rsub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<256> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc2)
    %2 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc3)
    %3 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = scf.for %arg4 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg5 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %11 = tt.splat %arg4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc6)
      %12 = arith.addi %11, %1 : tensor<1x2048xi32, #blocked> loc(#loc6)
      %13 = arith.cmpi slt, %12, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc7)
      %14 = arith.remsi %12, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc8)
      %15 = tt.addptr %2, %12 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc3)
      %16 = tt.load %15, %13, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc9)
      %17 = tt.addptr %3, %14 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc4)
      %18 = tt.load %17, %13, %cst evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc10)
      %19 = arith.subf %cst_0, %16 : tensor<1x2048xf32, #blocked> loc(#loc11)
      %20 = arith.addf %19, %18 : tensor<1x2048xf32, #blocked> loc(#loc12)
      %21 = arith.cmpf ogt, %20, %cst : tensor<1x2048xf32, #blocked> loc(#loc30)
      %22 = arith.cmpf une, %20, %20 : tensor<1x2048xf32, #blocked> loc(#loc31)
      %23 = arith.ori %21, %22 : tensor<1x2048xi1, #blocked> loc(#loc32)
      %24 = arith.select %23, %20, %cst : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc33)
      %25 = arith.addf %arg5, %24 : tensor<1x2048xf32, #blocked> loc(#loc18)
      %26 = arith.select %13, %25, %arg5 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc19)
      scf.yield %26 : tensor<1x2048xf32, #blocked> loc(#loc20)
    } loc(#loc5)
    %5 = "tt.reduce"(%4) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc22)), %arg5: f32 loc(callsite(#loc1 at #loc22))):
      %11 = arith.addf %arg4, %arg5 : f32 loc(#loc37)
      tt.reduce.return %11 : f32 loc(#loc34)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc34)
    %6 = triton_gpu.convert_layout %5 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc24)
    %7 = tt.expand_dims %6 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc25)
    %8 = arith.divf %7, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc24)
    gpu.barrier loc(#loc26)
    %9 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc27)
    %10 = tt.splat %9 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc28)
    tt.store %10, %8 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc28)
    tt.return loc(#loc29)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":25:33)
#loc3 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":32:34)
#loc4 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":33:34)
#loc5 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":27:36)
#loc6 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":28:27)
#loc7 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":29:25)
#loc8 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":31:23)
#loc9 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":32:39)
#loc10 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":33:39)
#loc11 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":35:22)
#loc12 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":36:22)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc14 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":38:44)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc18 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":40:23)
#loc19 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":41:38)
#loc20 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":41:8)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc24 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":44:19)
#loc25 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":42:28)
#loc26 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":45:4)
#loc27 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":46:28)
#loc28 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":46:71)
#loc29 = loc("inductor_cache/lh/clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py":46:4)
#loc30 = loc(callsite(#loc13 at #loc14))
#loc31 = loc(callsite(#loc15 at #loc14))
#loc32 = loc(callsite(#loc16 at #loc14))
#loc33 = loc(callsite(#loc17 at #loc14))
#loc34 = loc(callsite(#loc21 at #loc22))
#loc36 = loc(callsite(#loc23 at #loc21))
#loc37 = loc(callsite(#loc36 at #loc22))
