; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_add_clamp_mean_rsub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = shl i32 %5, 2, !dbg !10
  %7 = and i32 %6, 2044, !dbg !10
  %8 = and i32 %6, 252
  %9 = zext nneg i32 %8 to i64
  %10 = getelementptr float, ptr addrspace(1) %2, i64 %9
  %11 = zext nneg i32 %7 to i64, !dbg !11
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !12
  %13 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %12, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %14 = extractvalue { i32, i32, i32, i32 } %13, 0, !dbg !13
  %15 = extractvalue { i32, i32, i32, i32 } %13, 1, !dbg !13
  %16 = extractvalue { i32, i32, i32, i32 } %13, 2, !dbg !13
  %17 = extractvalue { i32, i32, i32, i32 } %13, 3, !dbg !13
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %10, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !14
  %23 = or disjoint i64 %11, 2048, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !12
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !13
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !13
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !13
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !13
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %10, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !14
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !14
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !14
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !14
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !14
  %35 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !13
  %36 = insertelement <2 x i32> %35, i32 %15, i64 1, !dbg !13
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !13
  %38 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !14
  %39 = insertelement <2 x i32> %38, i32 %20, i64 1, !dbg !14
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !14
  %41 = fsub <2 x float> splat (float 1.000000e+00), %37, !dbg !16
  %42 = fadd <2 x float> %41, %40, !dbg !17
  %43 = fcmp ole <2 x float> %42, zeroinitializer, !dbg !18
  %44 = select <2 x i1> %43, <2 x float> zeroinitializer, <2 x float> %42, !dbg !18
  %45 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !13
  %46 = insertelement <2 x i32> %45, i32 %27, i64 1, !dbg !13
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !13
  %48 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !14
  %49 = insertelement <2 x i32> %48, i32 %32, i64 1, !dbg !14
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !14
  %51 = fsub <2 x float> splat (float 1.000000e+00), %47, !dbg !16
  %52 = fadd <2 x float> %51, %50, !dbg !17
  %53 = fcmp ole <2 x float> %52, zeroinitializer, !dbg !18
  %54 = select <2 x i1> %53, <2 x float> zeroinitializer, <2 x float> %52, !dbg !18
  %55 = fadd <2 x float> %44, %54, !dbg !22
  %56 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !13
  %57 = insertelement <2 x i32> %56, i32 %16, i64 1, !dbg !13
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !13
  %59 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !14
  %60 = insertelement <2 x i32> %59, i32 %21, i64 1, !dbg !14
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !14
  %62 = fsub <2 x float> splat (float 1.000000e+00), %58, !dbg !16
  %63 = fadd <2 x float> %62, %61, !dbg !17
  %64 = fcmp ole <2 x float> %63, zeroinitializer, !dbg !18
  %65 = select <2 x i1> %64, <2 x float> zeroinitializer, <2 x float> %63, !dbg !18
  %66 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !13
  %67 = insertelement <2 x i32> %66, i32 %28, i64 1, !dbg !13
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !13
  %69 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !14
  %70 = insertelement <2 x i32> %69, i32 %33, i64 1, !dbg !14
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !14
  %72 = fsub <2 x float> splat (float 1.000000e+00), %68, !dbg !16
  %73 = fadd <2 x float> %72, %71, !dbg !17
  %74 = fcmp ole <2 x float> %73, zeroinitializer, !dbg !18
  %75 = select <2 x i1> %74, <2 x float> zeroinitializer, <2 x float> %73, !dbg !18
  %76 = fadd <2 x float> %65, %75, !dbg !22
  %77 = lshr i32 %5, 5, !dbg !10
  %78 = and i32 %5, 31, !dbg !10
  %shift = shufflevector <2 x float> %55, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %79 = fadd <2 x float> %55, %shift, !dbg !23
  %shift7 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %80 = fadd <2 x float> %shift7, %79, !dbg !23
  %81 = fadd <2 x float> %76, %80, !dbg !23
  %82 = extractelement <2 x float> %81, i64 0, !dbg !23
  %83 = bitcast float %82 to i32, !dbg !28
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !28
  %85 = bitcast i32 %84 to float, !dbg !28
  %86 = fadd float %82, %85, !dbg !23
  %87 = bitcast float %86 to i32, !dbg !28
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !28
  %89 = bitcast i32 %88 to float, !dbg !28
  %90 = fadd float %86, %89, !dbg !23
  %91 = bitcast float %90 to i32, !dbg !28
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !28
  %93 = bitcast i32 %92 to float, !dbg !28
  %94 = fadd float %90, %93, !dbg !23
  %95 = bitcast float %94 to i32, !dbg !28
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !28
  %97 = bitcast i32 %96 to float, !dbg !28
  %98 = fadd float %94, %97, !dbg !23
  %99 = bitcast float %98 to i32, !dbg !28
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !28
  %101 = bitcast i32 %100 to float, !dbg !28
  %102 = fadd float %98, %101, !dbg !23
  %103 = icmp eq i32 %78, 0, !dbg !28
  %104 = and i32 %77, 15, !dbg !28
  %105 = zext nneg i32 %104 to i64, !dbg !28
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i64 %105, !dbg !28
  %107 = bitcast float %102 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 %103) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %108 = icmp slt i32 %5, 16, !dbg !28
  %109 = sext i32 %5 to i64, !dbg !28
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i64 %109, !dbg !28
  %111 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %108) #3, !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = fadd float %112, %114, !dbg !23
  %116 = bitcast float %115 to i32, !dbg !28
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = fadd float %115, %118, !dbg !23
  %120 = bitcast float %119 to i32, !dbg !28
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !28
  %122 = bitcast i32 %121 to float, !dbg !28
  %123 = fadd float %119, %122, !dbg !23
  %124 = bitcast float %123 to i32, !dbg !28
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !28
  %126 = bitcast i32 %125 to float, !dbg !28
  %127 = fadd float %123, %126, !dbg !23
  %128 = and i32 %5, 15, !dbg !28
  %129 = icmp eq i32 %128, 0, !dbg !28
  %130 = and i1 %108, %129, !dbg !28
  %131 = bitcast float %127 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %131, i1 %130) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %132 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float 4.096000e+03) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %urem = and i32 %5, 511, !dbg !31
  %134 = icmp eq i32 %urem, 0, !dbg !31
  %135 = bitcast float %133 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %0, i1 %134) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clhqzg3owb2ecwak7dt5iqdsy342j7xlyb3du24trd3gkbshwuuc.py", directory: "inductor_cache/lh")
!4 = !{ptr @triton_red_fused_add_clamp_mean_rsub_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_clamp_mean_rsub_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_clamp_mean_rsub_0", linkageName: "triton_red_fused_add_clamp_mean_rsub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 27, column: 36, scope: !7)
!12 = !DILocation(line: 32, column: 34, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 33, column: 39, scope: !7)
!15 = !DILocation(line: 28, column: 27, scope: !7)
!16 = !DILocation(line: 35, column: 22, scope: !7)
!17 = !DILocation(line: 36, column: 22, scope: !7)
!18 = !DILocation(line: 121, column: 29, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 38, column: 44, scope: !7)
!22 = !DILocation(line: 40, column: 23, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 42, column: 25, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 4, scope: !7)
!31 = !DILocation(line: 46, column: 71, scope: !7)
!32 = !DILocation(line: 46, column: 4, scope: !7)
