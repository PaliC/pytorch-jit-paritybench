; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 31104, !dbg !14
  %16 = sdiv i32 %14, 7776, !dbg !15
  %17 = srem i32 %14, 432, !dbg !16
  %18 = srem i32 %14, 24, !dbg !17
  %19 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !18
  %20 = shufflevector <2 x i32> %19, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %21 = sdiv <2 x i32> %20, <i32 432, i32 24>, !dbg !18
  %22 = srem <2 x i32> %21, splat (i32 18), !dbg !19
  %23 = add nsw <2 x i32> %22, splat (i32 -1), !dbg !20
  %shift = shufflevector <2 x i32> %23, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %24 = or <2 x i32> %23, %shift, !dbg !21
  %25 = extractelement <2 x i32> %24, i64 0, !dbg !21
  %26 = icmp ult i32 %25, 16, !dbg !21
  %27 = add nsw i32 %17, -408, !dbg !22
  %28 = extractelement <2 x i32> %22, i64 0, !dbg !23
  %29 = mul nsw i32 %28, 384, !dbg !23
  %30 = mul nsw i32 %16, 6144, !dbg !24
  %31 = add nsw i32 %27, %30, !dbg !25
  %32 = add nsw i32 %31, %29, !dbg !26
  %33 = sext i32 %32 to i64, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !27
  %35 = and i1 %15, %26, !dbg !28
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #3, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !30
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #3, !dbg !31
  %39 = sext i32 %18 to i64, !dbg !32
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !32
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #3, !dbg !33
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !34
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #3, !dbg !35
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !35
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !35
  %46 = bitcast i32 %44 to float, !dbg !35
  %47 = bitcast i32 %45 to float, !dbg !35
  %48 = fadd float %46, 0x3EE4F8B580000000, !dbg !36
  %49 = fadd float %47, 0x3EE4F8B580000000, !dbg !36
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %50, 0, !dbg !37
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %51, 0, !dbg !37
  br i1 %.not.i, label %57, label %52, !dbg !37

52:                                               ; preds = %8
  br i1 %.not1.i, label %55, label %53, !dbg !37

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

57:                                               ; preds = %8
  br i1 %.not1.i, label %60, label %58, !dbg !37

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %53, %55, %58, %60
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !37
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %62, 0, !dbg !37
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %63, 0, !dbg !37
  br i1 %.not.i1, label %69, label %64, !dbg !37

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %67, label %65, !dbg !37

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !37

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %65, %67, %70, %72
  %.0.i3 = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !37
  %74 = extractvalue { i32, i32 } %38, 1, !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = extractvalue { i32, i32 } %41, 1, !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = fsub float %75, %77, !dbg !38
  %79 = extractvalue { i32, i32 } %38, 0, !dbg !31
  %80 = bitcast i32 %79 to float, !dbg !31
  %81 = extractvalue { i32, i32 } %41, 0, !dbg !33
  %82 = bitcast i32 %81 to float, !dbg !33
  %83 = fsub float %80, %82, !dbg !38
  %84 = extractvalue { i32, i32 } %36, 1, !dbg !29
  %85 = bitcast i32 %84 to float, !dbg !29
  %86 = extractvalue { i32, i32 } %36, 0, !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %90 = fmul float %83, %88, !dbg !40
  %91 = fmul float %78, %89, !dbg !40
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !41
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %92, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #3, !dbg !42
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !42
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !42
  %96 = bitcast i32 %94 to float, !dbg !42
  %97 = bitcast i32 %95 to float, !dbg !42
  %98 = fmul float %90, %96, !dbg !43
  %99 = fmul float %91, %97, !dbg !43
  %100 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !44
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #3, !dbg !45
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !45
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !45
  %104 = bitcast i32 %102 to float, !dbg !45
  %105 = bitcast i32 %103 to float, !dbg !45
  %106 = fadd float %98, %104, !dbg !46
  %107 = fadd float %99, %105, !dbg !46
  %108 = fadd float %106, %87, !dbg !47
  %109 = fadd float %107, %85, !dbg !47
  %110 = sext i32 %14 to i64, !dbg !48
  %111 = getelementptr float, ptr addrspace(1) %6, i64 %110, !dbg !48
  %112 = bitcast float %108 to i32, !dbg !49
  %113 = select i1 %26, i32 %112, i32 0, !dbg !50
  %114 = bitcast float %109 to i32, !dbg !49
  %115 = select i1 %26, i32 %114, i32 0, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %113, i32 %115, ptr addrspace(1) %111, i1 %15) #3, !dbg !49
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctnofpwvbgtatbobdocl47q577ntxzcxifadlqdqjccbmixaorbn.py", directory: "inductor_cache/tn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_constant_pad_nd_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 24, column: 28, scope: !7)
!20 = !DILocation(line: 38, column: 18, scope: !7)
!21 = !DILocation(line: 40, column: 19, scope: !7)
!22 = !DILocation(line: 41, column: 40, scope: !7)
!23 = !DILocation(line: 41, column: 49, scope: !7)
!24 = !DILocation(line: 41, column: 59, scope: !7)
!25 = !DILocation(line: 41, column: 45, scope: !7)
!26 = !DILocation(line: 41, column: 54, scope: !7)
!27 = !DILocation(line: 41, column: 31, scope: !7)
!28 = !DILocation(line: 41, column: 72, scope: !7)
!29 = !DILocation(line: 41, column: 64, scope: !7)
!30 = !DILocation(line: 42, column: 31, scope: !7)
!31 = !DILocation(line: 42, column: 64, scope: !7)
!32 = !DILocation(line: 43, column: 31, scope: !7)
!33 = !DILocation(line: 43, column: 36, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 27, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 31, scope: !7)
!42 = !DILocation(line: 54, column: 36, scope: !7)
!43 = !DILocation(line: 55, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 31, scope: !7)
!45 = !DILocation(line: 56, column: 36, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 25, scope: !7)
!49 = !DILocation(line: 61, column: 37, scope: !7)
!50 = !DILocation(line: 60, column: 35, scope: !7)
!51 = !DILocation(line: 61, column: 4, scope: !7)
