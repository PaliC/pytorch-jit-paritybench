; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = and i32 %8, 64, !dbg !12
  %12 = lshr exact i32 %11, 2, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !12
  %14 = shl i32 %8, 2, !dbg !12
  %15 = and i32 %14, 252, !dbg !12
  %16 = shl i32 %8, 3, !dbg !12
  %17 = and i32 %16, 248, !dbg !12
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %18, 32, !dbg !13
  %20 = or disjoint i32 %18, 64, !dbg !13
  %21 = or disjoint i32 %18, 96, !dbg !13
  %22 = or disjoint i32 %18, 128, !dbg !13
  %23 = or disjoint i32 %18, 160, !dbg !13
  %24 = or disjoint i32 %18, 192, !dbg !13
  %25 = or disjoint i32 %18, 224, !dbg !13
  %26 = or disjoint i32 %7, %15, !dbg !13
  %27 = or disjoint i32 %7, %17, !dbg !13
  %28 = icmp slt i32 %18, 256, !dbg !14
  %29 = icmp slt i32 %19, 256, !dbg !14
  %30 = icmp slt i32 %20, 256, !dbg !14
  %31 = icmp slt i32 %21, 256, !dbg !14
  %32 = icmp slt i32 %22, 256, !dbg !14
  %33 = icmp slt i32 %23, 256, !dbg !14
  %34 = icmp slt i32 %24, 256, !dbg !14
  %35 = icmp slt i32 %25, 256, !dbg !14
  %36 = icmp slt i32 %26, 256, !dbg !14
  %37 = icmp slt i32 %27, 256, !dbg !14
  %38 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %39 = shl i32 %38, 2, !dbg !16
  %40 = and i32 %8, 3, !dbg !17
  %.lobit1 = lshr exact i32 %11, 6, !dbg !17
  %.lobit35 = lshr i32 %8, 5, !dbg !17
  %41 = and i32 %.lobit35, 3, !dbg !17
  %42 = or disjoint i32 %39, %40, !dbg !18
  %43 = or disjoint i32 %39, %.lobit1, !dbg !18
  %44 = or disjoint i32 %43, 2, !dbg !18
  %45 = or disjoint i32 %39, %41, !dbg !18
  %46 = icmp slt i32 %42, 1024, !dbg !19
  %47 = icmp slt i32 %43, 1024, !dbg !19
  %48 = icmp slt i32 %44, 1024, !dbg !19
  %49 = icmp slt i32 %45, 1024, !dbg !19
  %.frozen = freeze i32 %42, !dbg !20
  %50 = sdiv i32 %.frozen, 32, !dbg !20
  %51 = mul i32 %50, 32, !dbg !21
  %.decomposed = sub i32 %.frozen, %51, !dbg !21
  %.frozen20 = freeze i32 %26, !dbg !22
  %52 = sdiv i32 %.frozen20, 64, !dbg !22
  %53 = mul i32 %52, 64, !dbg !23
  %.decomposed21 = sub i32 %.frozen20, %53, !dbg !23
  %.frozen22 = freeze i32 %27, !dbg !22
  %54 = sdiv i32 %.frozen22, 64, !dbg !22
  %55 = mul i32 %54, 64, !dbg !23
  %.decomposed23 = sub i32 %.frozen22, %55, !dbg !23
  %56 = shl nsw i32 %.decomposed, 1, !dbg !24
  %57 = shl i32 %50, 7, !dbg !25
  %58 = add i32 %56, %57, !dbg !26
  %59 = shl i32 %18, 12, !dbg !27
  %60 = shl i32 %19, 12, !dbg !27
  %61 = shl i32 %20, 12, !dbg !27
  %62 = shl i32 %21, 12, !dbg !27
  %63 = shl i32 %22, 12, !dbg !27
  %64 = shl i32 %23, 12, !dbg !27
  %65 = shl i32 %24, 12, !dbg !27
  %66 = shl i32 %25, 12, !dbg !27
  %67 = add i32 %58, %59, !dbg !28
  %68 = add i32 %58, %60, !dbg !28
  %69 = add i32 %58, %61, !dbg !28
  %70 = add i32 %58, %62, !dbg !28
  %71 = add i32 %58, %63, !dbg !28
  %72 = add i32 %58, %64, !dbg !28
  %73 = add i32 %58, %65, !dbg !28
  %74 = add i32 %58, %66, !dbg !28
  %75 = sext i32 %67 to i64, !dbg !29
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !29
  %77 = sext i32 %68 to i64, !dbg !29
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !29
  %79 = sext i32 %69 to i64, !dbg !29
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !29
  %81 = sext i32 %70 to i64, !dbg !29
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !29
  %83 = sext i32 %71 to i64, !dbg !29
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !29
  %85 = sext i32 %72 to i64, !dbg !29
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !29
  %87 = sext i32 %73 to i64, !dbg !29
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !29
  %89 = sext i32 %74 to i64, !dbg !29
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !29
  %91 = and i1 %28, %46, !dbg !30
  %92 = and i1 %29, %46, !dbg !30
  %93 = and i1 %30, %46, !dbg !30
  %94 = and i1 %31, %46, !dbg !30
  %95 = and i1 %32, %46, !dbg !30
  %96 = and i1 %33, %46, !dbg !30
  %97 = and i1 %34, %46, !dbg !30
  %98 = and i1 %35, %46, !dbg !30
  %99 = and i1 %36, %47, !dbg !30
  %100 = and i1 %48, %36, !dbg !30
  %101 = and i1 %37, %49, !dbg !30
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %91) #2, !dbg !31
  %103 = bitcast i32 %102 to float, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %92) #2, !dbg !31
  %105 = bitcast i32 %104 to float, !dbg !31
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %93) #2, !dbg !31
  %107 = bitcast i32 %106 to float, !dbg !31
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %94) #2, !dbg !31
  %109 = bitcast i32 %108 to float, !dbg !31
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %95) #2, !dbg !31
  %111 = bitcast i32 %110 to float, !dbg !31
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %96) #2, !dbg !31
  %113 = bitcast i32 %112 to float, !dbg !31
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %97) #2, !dbg !31
  %115 = bitcast i32 %114 to float, !dbg !31
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %98) #2, !dbg !31
  %117 = bitcast i32 %116 to float, !dbg !31
  %118 = or disjoint i32 %56, 1, !dbg !32
  %119 = add i32 %118, %57, !dbg !33
  %120 = add i32 %119, %59, !dbg !34
  %121 = add i32 %119, %60, !dbg !34
  %122 = add i32 %119, %61, !dbg !34
  %123 = add i32 %119, %62, !dbg !34
  %124 = add i32 %119, %63, !dbg !34
  %125 = add i32 %119, %64, !dbg !34
  %126 = add i32 %119, %65, !dbg !34
  %127 = add i32 %119, %66, !dbg !34
  %128 = sext i32 %120 to i64, !dbg !35
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !35
  %130 = sext i32 %121 to i64, !dbg !35
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !35
  %132 = sext i32 %122 to i64, !dbg !35
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !35
  %134 = sext i32 %123 to i64, !dbg !35
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !35
  %136 = sext i32 %124 to i64, !dbg !35
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !35
  %138 = sext i32 %125 to i64, !dbg !35
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !35
  %140 = sext i32 %126 to i64, !dbg !35
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !35
  %142 = sext i32 %127 to i64, !dbg !35
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !35
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %91) #2, !dbg !36
  %145 = bitcast i32 %144 to float, !dbg !36
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %92) #2, !dbg !36
  %147 = bitcast i32 %146 to float, !dbg !36
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %93) #2, !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %94) #2, !dbg !36
  %151 = bitcast i32 %150 to float, !dbg !36
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %95) #2, !dbg !36
  %153 = bitcast i32 %152 to float, !dbg !36
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %96) #2, !dbg !36
  %155 = bitcast i32 %154 to float, !dbg !36
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %97) #2, !dbg !36
  %157 = bitcast i32 %156 to float, !dbg !36
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %98) #2, !dbg !36
  %159 = bitcast i32 %158 to float, !dbg !36
  %160 = add i32 %58, 64, !dbg !37
  %161 = add i32 %160, %59, !dbg !38
  %162 = add i32 %160, %60, !dbg !38
  %163 = add i32 %160, %61, !dbg !38
  %164 = add i32 %160, %62, !dbg !38
  %165 = add i32 %160, %63, !dbg !38
  %166 = add i32 %160, %64, !dbg !38
  %167 = add i32 %160, %65, !dbg !38
  %168 = add i32 %160, %66, !dbg !38
  %169 = sext i32 %161 to i64, !dbg !39
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !39
  %171 = sext i32 %162 to i64, !dbg !39
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !39
  %173 = sext i32 %163 to i64, !dbg !39
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !39
  %175 = sext i32 %164 to i64, !dbg !39
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !39
  %177 = sext i32 %165 to i64, !dbg !39
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !39
  %179 = sext i32 %166 to i64, !dbg !39
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !39
  %181 = sext i32 %167 to i64, !dbg !39
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !39
  %183 = sext i32 %168 to i64, !dbg !39
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !39
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %91) #2, !dbg !40
  %186 = bitcast i32 %185 to float, !dbg !40
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %92) #2, !dbg !40
  %188 = bitcast i32 %187 to float, !dbg !40
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %93) #2, !dbg !40
  %190 = bitcast i32 %189 to float, !dbg !40
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %94) #2, !dbg !40
  %192 = bitcast i32 %191 to float, !dbg !40
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %95) #2, !dbg !40
  %194 = bitcast i32 %193 to float, !dbg !40
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %96) #2, !dbg !40
  %196 = bitcast i32 %195 to float, !dbg !40
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %97) #2, !dbg !40
  %198 = bitcast i32 %197 to float, !dbg !40
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %98) #2, !dbg !40
  %200 = bitcast i32 %199 to float, !dbg !40
  %201 = add i32 %58, 65, !dbg !41
  %202 = add i32 %201, %59, !dbg !42
  %203 = add i32 %201, %60, !dbg !42
  %204 = add i32 %201, %61, !dbg !42
  %205 = add i32 %201, %62, !dbg !42
  %206 = add i32 %201, %63, !dbg !42
  %207 = add i32 %201, %64, !dbg !42
  %208 = add i32 %201, %65, !dbg !42
  %209 = add i32 %201, %66, !dbg !42
  %210 = sext i32 %202 to i64, !dbg !43
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !43
  %212 = sext i32 %203 to i64, !dbg !43
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !43
  %214 = sext i32 %204 to i64, !dbg !43
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !43
  %216 = sext i32 %205 to i64, !dbg !43
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !43
  %218 = sext i32 %206 to i64, !dbg !43
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !43
  %220 = sext i32 %207 to i64, !dbg !43
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !43
  %222 = sext i32 %208 to i64, !dbg !43
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !43
  %224 = sext i32 %209 to i64, !dbg !43
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !43
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %91) #2, !dbg !44
  %227 = bitcast i32 %226 to float, !dbg !44
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %92) #2, !dbg !44
  %229 = bitcast i32 %228 to float, !dbg !44
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %93) #2, !dbg !44
  %231 = bitcast i32 %230 to float, !dbg !44
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 %94) #2, !dbg !44
  %233 = bitcast i32 %232 to float, !dbg !44
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %95) #2, !dbg !44
  %235 = bitcast i32 %234 to float, !dbg !44
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 %96) #2, !dbg !44
  %237 = bitcast i32 %236 to float, !dbg !44
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 %97) #2, !dbg !44
  %239 = bitcast i32 %238 to float, !dbg !44
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %98) #2, !dbg !44
  %241 = bitcast i32 %240 to float, !dbg !44
  %242 = fcmp ogt float %145, %103, !dbg !45
  %243 = fcmp ogt float %147, %105, !dbg !45
  %244 = fcmp ogt float %149, %107, !dbg !45
  %245 = fcmp ogt float %151, %109, !dbg !45
  %246 = fcmp ogt float %153, %111, !dbg !45
  %247 = fcmp ogt float %155, %113, !dbg !45
  %248 = fcmp ogt float %157, %115, !dbg !45
  %249 = fcmp ogt float %159, %117, !dbg !45
  %250 = fcmp uno float %145, 0.000000e+00, !dbg !49
  %251 = fcmp uno float %147, 0.000000e+00, !dbg !49
  %252 = fcmp uno float %149, 0.000000e+00, !dbg !49
  %253 = fcmp uno float %151, 0.000000e+00, !dbg !49
  %254 = fcmp uno float %153, 0.000000e+00, !dbg !49
  %255 = fcmp uno float %155, 0.000000e+00, !dbg !49
  %256 = fcmp uno float %157, 0.000000e+00, !dbg !49
  %257 = fcmp uno float %159, 0.000000e+00, !dbg !49
  %258 = or i1 %242, %250, !dbg !50
  %259 = or i1 %243, %251, !dbg !50
  %260 = or i1 %244, %252, !dbg !50
  %261 = or i1 %245, %253, !dbg !50
  %262 = or i1 %246, %254, !dbg !50
  %263 = or i1 %247, %255, !dbg !50
  %264 = or i1 %248, %256, !dbg !50
  %265 = or i1 %249, %257, !dbg !50
  %266 = select i1 %258, float %145, float %103, !dbg !51
  %267 = select i1 %259, float %147, float %105, !dbg !51
  %268 = select i1 %260, float %149, float %107, !dbg !51
  %269 = select i1 %261, float %151, float %109, !dbg !51
  %270 = select i1 %262, float %153, float %111, !dbg !51
  %271 = select i1 %263, float %155, float %113, !dbg !51
  %272 = select i1 %264, float %157, float %115, !dbg !51
  %273 = select i1 %265, float %159, float %117, !dbg !51
  %274 = fcmp olt float %266, %186, !dbg !52
  %275 = fcmp olt float %267, %188, !dbg !52
  %276 = fcmp olt float %268, %190, !dbg !52
  %277 = fcmp olt float %269, %192, !dbg !52
  %278 = fcmp olt float %270, %194, !dbg !52
  %279 = fcmp olt float %271, %196, !dbg !52
  %280 = fcmp olt float %272, %198, !dbg !52
  %281 = fcmp olt float %273, %200, !dbg !52
  %282 = fcmp uno float %186, 0.000000e+00, !dbg !54
  %283 = fcmp uno float %188, 0.000000e+00, !dbg !54
  %284 = fcmp uno float %190, 0.000000e+00, !dbg !54
  %285 = fcmp uno float %192, 0.000000e+00, !dbg !54
  %286 = fcmp uno float %194, 0.000000e+00, !dbg !54
  %287 = fcmp uno float %196, 0.000000e+00, !dbg !54
  %288 = fcmp uno float %198, 0.000000e+00, !dbg !54
  %289 = fcmp uno float %200, 0.000000e+00, !dbg !54
  %290 = or i1 %274, %282, !dbg !55
  %291 = or i1 %275, %283, !dbg !55
  %292 = or i1 %276, %284, !dbg !55
  %293 = or i1 %277, %285, !dbg !55
  %294 = or i1 %278, %286, !dbg !55
  %295 = or i1 %279, %287, !dbg !55
  %296 = or i1 %280, %288, !dbg !55
  %297 = or i1 %281, %289, !dbg !55
  %298 = select i1 %290, float %186, float %266, !dbg !56
  %299 = select i1 %291, float %188, float %267, !dbg !56
  %300 = select i1 %292, float %190, float %268, !dbg !56
  %301 = select i1 %293, float %192, float %269, !dbg !56
  %302 = select i1 %294, float %194, float %270, !dbg !56
  %303 = select i1 %295, float %196, float %271, !dbg !56
  %304 = select i1 %296, float %198, float %272, !dbg !56
  %305 = select i1 %297, float %200, float %273, !dbg !56
  %306 = fcmp olt float %298, %227, !dbg !57
  %307 = fcmp olt float %299, %229, !dbg !57
  %308 = fcmp olt float %300, %231, !dbg !57
  %309 = fcmp olt float %301, %233, !dbg !57
  %310 = fcmp olt float %302, %235, !dbg !57
  %311 = fcmp olt float %303, %237, !dbg !57
  %312 = fcmp olt float %304, %239, !dbg !57
  %313 = fcmp olt float %305, %241, !dbg !57
  %314 = fcmp uno float %227, 0.000000e+00, !dbg !59
  %315 = fcmp uno float %229, 0.000000e+00, !dbg !59
  %316 = fcmp uno float %231, 0.000000e+00, !dbg !59
  %317 = fcmp uno float %233, 0.000000e+00, !dbg !59
  %318 = fcmp uno float %235, 0.000000e+00, !dbg !59
  %319 = fcmp uno float %237, 0.000000e+00, !dbg !59
  %320 = fcmp uno float %239, 0.000000e+00, !dbg !59
  %321 = fcmp uno float %241, 0.000000e+00, !dbg !59
  %322 = or i1 %306, %314, !dbg !60
  %323 = or i1 %307, %315, !dbg !60
  %324 = or i1 %308, %316, !dbg !60
  %325 = or i1 %309, %317, !dbg !60
  %326 = or i1 %310, %318, !dbg !60
  %327 = or i1 %311, %319, !dbg !60
  %328 = or i1 %312, %320, !dbg !60
  %329 = or i1 %313, %321, !dbg !60
  %330 = zext i1 %242 to i8, !dbg !61
  %331 = zext i1 %243 to i8, !dbg !61
  %332 = zext i1 %244 to i8, !dbg !61
  %333 = zext i1 %245 to i8, !dbg !61
  %334 = zext i1 %246 to i8, !dbg !61
  %335 = zext i1 %247 to i8, !dbg !61
  %336 = zext i1 %248 to i8, !dbg !61
  %337 = zext i1 %249 to i8, !dbg !61
  %338 = select i1 %274, i8 2, i8 %330, !dbg !62
  %339 = select i1 %275, i8 2, i8 %331, !dbg !62
  %340 = select i1 %276, i8 2, i8 %332, !dbg !62
  %341 = select i1 %277, i8 2, i8 %333, !dbg !62
  %342 = select i1 %278, i8 2, i8 %334, !dbg !62
  %343 = select i1 %279, i8 2, i8 %335, !dbg !62
  %344 = select i1 %280, i8 2, i8 %336, !dbg !62
  %345 = select i1 %281, i8 2, i8 %337, !dbg !62
  %346 = select i1 %306, i8 3, i8 %338, !dbg !63
  %347 = select i1 %307, i8 3, i8 %339, !dbg !63
  %348 = select i1 %308, i8 3, i8 %340, !dbg !63
  %349 = select i1 %309, i8 3, i8 %341, !dbg !63
  %350 = select i1 %310, i8 3, i8 %342, !dbg !63
  %351 = select i1 %311, i8 3, i8 %343, !dbg !63
  %352 = select i1 %312, i8 3, i8 %344, !dbg !63
  %353 = select i1 %313, i8 3, i8 %345, !dbg !63
  %354 = shl i32 %43, 6, !dbg !64
  %355 = shl i32 %44, 6, !dbg !64
  %356 = shl i32 %45, 6, !dbg !64
  %357 = add i32 %356, %.decomposed23, !dbg !65
  %358 = shl i32 %52, 16, !dbg !66
  %359 = shl i32 %54, 16, !dbg !66
  %360 = add i32 %358, %.decomposed21, !dbg !65
  %361 = add i32 %360, %354, !dbg !67
  %362 = add i32 %360, %355, !dbg !67
  %363 = add i32 %357, %359, !dbg !67
  %364 = sext i32 %361 to i64, !dbg !68
  %365 = getelementptr float, ptr addrspace(1) %1, i64 %364, !dbg !68
  %366 = sext i32 %362 to i64, !dbg !68
  %367 = getelementptr float, ptr addrspace(1) %1, i64 %366, !dbg !68
  %368 = shl i32 %8, 8, !dbg !69
  %369 = and i32 %368, 768, !dbg !69
  %370 = or disjoint i32 %369, %10, !dbg !69
  %371 = or disjoint i32 %370, %12, !dbg !69
  %372 = and i32 %14, 508, !dbg !69
  %373 = lshr exact i32 %369, 5, !dbg !69
  %374 = lshr exact i32 %369, 4, !dbg !69
  %375 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %374, !dbg !69
  %376 = getelementptr float, ptr addrspace(3) %375, i32 %371, !dbg !69
  %377 = bitcast float %298 to i32, !dbg !69
  %378 = select i1 %322, i32 %226, i32 %377, !dbg !70
  %379 = insertelement <1 x i32> poison, i32 %378, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %379, i1 true) #2, !dbg !69
  %380 = or disjoint i32 %371, 32, !dbg !69
  %381 = getelementptr float, ptr addrspace(3) %375, i32 %380, !dbg !69
  %382 = bitcast float %299 to i32, !dbg !69
  %383 = select i1 %323, i32 %228, i32 %382, !dbg !70
  %384 = insertelement <1 x i32> poison, i32 %383, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %384, i1 true) #2, !dbg !69
  %385 = or disjoint i32 %371, 64, !dbg !69
  %386 = getelementptr float, ptr addrspace(3) %375, i32 %385, !dbg !69
  %387 = bitcast float %300 to i32, !dbg !69
  %388 = select i1 %324, i32 %230, i32 %387, !dbg !70
  %389 = insertelement <1 x i32> poison, i32 %388, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %389, i1 true) #2, !dbg !69
  %390 = or disjoint i32 %371, 96, !dbg !69
  %391 = getelementptr float, ptr addrspace(3) %375, i32 %390, !dbg !69
  %392 = bitcast float %301 to i32, !dbg !69
  %393 = select i1 %325, i32 %232, i32 %392, !dbg !70
  %394 = insertelement <1 x i32> poison, i32 %393, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %394, i1 true) #2, !dbg !69
  %395 = or disjoint i32 %371, 128, !dbg !69
  %396 = getelementptr float, ptr addrspace(3) %375, i32 %395, !dbg !69
  %397 = bitcast float %302 to i32, !dbg !69
  %398 = select i1 %326, i32 %234, i32 %397, !dbg !70
  %399 = insertelement <1 x i32> poison, i32 %398, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %399, i1 true) #2, !dbg !69
  %400 = or disjoint i32 %371, 160, !dbg !69
  %401 = getelementptr float, ptr addrspace(3) %375, i32 %400, !dbg !69
  %402 = bitcast float %303 to i32, !dbg !69
  %403 = select i1 %327, i32 %236, i32 %402, !dbg !70
  %404 = insertelement <1 x i32> poison, i32 %403, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %404, i1 true) #2, !dbg !69
  %405 = or disjoint i32 %371, 192, !dbg !69
  %406 = getelementptr float, ptr addrspace(3) %375, i32 %405, !dbg !69
  %407 = bitcast float %304 to i32, !dbg !69
  %408 = select i1 %328, i32 %238, i32 %407, !dbg !70
  %409 = insertelement <1 x i32> poison, i32 %408, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %409, i1 true) #2, !dbg !69
  %410 = or disjoint i32 %371, 224, !dbg !69
  %411 = getelementptr float, ptr addrspace(3) %375, i32 %410, !dbg !69
  %412 = bitcast float %305 to i32, !dbg !69
  %413 = select i1 %329, i32 %240, i32 %412, !dbg !70
  %414 = insertelement <1 x i32> poison, i32 %413, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %414, i1 true) #2, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %415 = lshr i32 %14, 6, !dbg !69
  %416 = and i32 %415, 4, !dbg !69
  %417 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %416, !dbg !69
  %418 = getelementptr inbounds float, ptr addrspace(3) %417, i32 %372, !dbg !69
  %419 = or disjoint i32 %372, 512, !dbg !69
  %420 = lshr i32 %419, 6, !dbg !69
  %421 = and i32 %420, 12, !dbg !69
  %422 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %421, !dbg !69
  %423 = getelementptr inbounds float, ptr addrspace(3) %422, i32 %419, !dbg !69
  %424 = load <4 x i32>, ptr addrspace(3) %423, align 16, !dbg !69
  %.extract = load i32, ptr addrspace(3) %418, align 16, !dbg !69
  %425 = getelementptr inbounds i8, ptr addrspace(3) %418, i32 4, !dbg !69
  %.extract13 = load i32, ptr addrspace(3) %425, align 4, !dbg !69
  %426 = getelementptr inbounds i8, ptr addrspace(3) %418, i32 8, !dbg !69
  %.extract14 = load i32, ptr addrspace(3) %426, align 8, !dbg !69
  %427 = getelementptr inbounds i8, ptr addrspace(3) %418, i32 12, !dbg !69
  %.extract15 = load i32, ptr addrspace(3) %427, align 4, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %365, i1 %99) #2, !dbg !69
  %.extract16 = extractelement <4 x i32> %424, i64 0, !dbg !69
  %.extract17 = extractelement <4 x i32> %424, i64 1, !dbg !69
  %.extract18 = extractelement <4 x i32> %424, i64 2, !dbg !69
  %.extract19 = extractelement <4 x i32> %424, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract16, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %367, i1 %100) #2, !dbg !69
  %428 = sext i32 %363 to i64, !dbg !71
  %429 = getelementptr i8, ptr addrspace(1) %2, i64 %428, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %430 = and i32 %16, 1016, !dbg !72
  %431 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %373, !dbg !72
  %432 = getelementptr i8, ptr addrspace(3) %431, i32 %371, !dbg !72
  %433 = insertelement <1 x i8> poison, i8 %346, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %432, <1 x i8> %433, i1 true) #2, !dbg !72
  %434 = getelementptr i8, ptr addrspace(3) %431, i32 %380, !dbg !72
  %435 = insertelement <1 x i8> poison, i8 %347, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %434, <1 x i8> %435, i1 true) #2, !dbg !72
  %436 = getelementptr i8, ptr addrspace(3) %431, i32 %385, !dbg !72
  %437 = insertelement <1 x i8> poison, i8 %348, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %436, <1 x i8> %437, i1 true) #2, !dbg !72
  %438 = getelementptr i8, ptr addrspace(3) %431, i32 %390, !dbg !72
  %439 = insertelement <1 x i8> poison, i8 %349, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %438, <1 x i8> %439, i1 true) #2, !dbg !72
  %440 = getelementptr i8, ptr addrspace(3) %431, i32 %395, !dbg !72
  %441 = insertelement <1 x i8> poison, i8 %350, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %440, <1 x i8> %441, i1 true) #2, !dbg !72
  %442 = getelementptr i8, ptr addrspace(3) %431, i32 %400, !dbg !72
  %443 = insertelement <1 x i8> poison, i8 %351, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %442, <1 x i8> %443, i1 true) #2, !dbg !72
  %444 = getelementptr i8, ptr addrspace(3) %431, i32 %405, !dbg !72
  %445 = insertelement <1 x i8> poison, i8 %352, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %444, <1 x i8> %445, i1 true) #2, !dbg !72
  %446 = getelementptr i8, ptr addrspace(3) %431, i32 %410, !dbg !72
  %447 = insertelement <1 x i8> poison, i8 %353, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %446, <1 x i8> %447, i1 true) #2, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %448 = lshr i32 %16, 5, !dbg !72
  %449 = and i32 %448, 24, !dbg !72
  %450 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %449, !dbg !72
  %451 = getelementptr inbounds i8, ptr addrspace(3) %450, i32 %430, !dbg !72
  %452 = load i32, ptr addrspace(3) %451, align 8, !dbg !72
  %453 = getelementptr inbounds i8, ptr addrspace(3) %451, i32 4, !dbg !72
  %454 = load i32, ptr addrspace(3) %453, align 4, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %452, i32 %454, ptr addrspace(1) %429, i1 %101) #2, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py", directory: "inductor_cache/ox")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 41, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 51, scope: !7)
!28 = !DILocation(line: 34, column: 46, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 64, scope: !7)
!31 = !DILocation(line: 34, column: 56, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 50, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 60, scope: !7)
!37 = !DILocation(line: 36, column: 42, scope: !7)
!38 = !DILocation(line: 36, column: 51, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 61, scope: !7)
!41 = !DILocation(line: 37, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 51, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 61, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 38, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !53)
!53 = !DILocation(line: 39, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !53)
!57 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !58)
!58 = !DILocation(line: 40, column: 40, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !58)
!61 = !DILocation(line: 44, column: 33, scope: !7)
!62 = !DILocation(line: 47, column: 35, scope: !7)
!63 = !DILocation(line: 50, column: 35, scope: !7)
!64 = !DILocation(line: 51, column: 33, scope: !7)
!65 = !DILocation(line: 51, column: 30, scope: !7)
!66 = !DILocation(line: 51, column: 44, scope: !7)
!67 = !DILocation(line: 51, column: 38, scope: !7)
!68 = !DILocation(line: 51, column: 25, scope: !7)
!69 = !DILocation(line: 51, column: 55, scope: !7)
!70 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !58)
!71 = !DILocation(line: 52, column: 25, scope: !7)
!72 = !DILocation(line: 52, column: 56, scope: !7)
!73 = !DILocation(line: 52, column: 4, scope: !7)
