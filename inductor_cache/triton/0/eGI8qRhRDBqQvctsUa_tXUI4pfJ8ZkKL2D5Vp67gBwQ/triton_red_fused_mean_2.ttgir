#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":19:0)
#loc1 = loc(unknown)
#loc25 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":39:25)
#loc32 = loc(callsite(#loc1 at #loc25))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_mean_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":19:0), %arg2: i32 loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":19:0), %arg3: i32 loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c7_i32 = arith.constant 7 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c7690_i32 = arith.constant 7690 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<3392> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<3364> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<53824> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<7690> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c7_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c7690_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc8)
    %8 = scf.for %arg4 = %c0_i32 to %c7690_i32 step %c2048_i32 iter_args(%arg5 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %15 = tt.splat %arg4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc10)
      %16 = arith.addi %15, %3 : tensor<1x2048xi32, #blocked> loc(#loc10)
      %17 = arith.cmpi slt, %16, %cst_4 : tensor<1x2048xi32, #blocked> loc(#loc11)
      %18 = arith.addi %16, %5 : tensor<1x2048xi32, #blocked> loc(#loc6)
      %19 = arith.cmpi slt, %18, %cst_3 : tensor<1x2048xi32, #blocked> loc(#loc12)
      %20 = arith.divsi %18, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc13)
      %21 = arith.remsi %20, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc14)
      %22 = arith.muli %21, %cst_0 : tensor<1x2048xi32, #blocked> loc(#loc15)
      %23 = arith.remsi %18, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc16)
      %24 = arith.addi %22, %23 : tensor<1x2048xi32, #blocked> loc(#loc17)
      %25 = tt.addptr %6, %24 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc7)
      %26 = arith.andi %17, %19 : tensor<1x2048xi1, #blocked> loc(#loc18)
      %27 = arith.andi %26, %7 : tensor<1x2048xi1, #blocked> loc(#loc8)
      %28 = tt.load %25, %27, %cst evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc19)
      %29 = arith.addf %arg5, %28 : tensor<1x2048xf32, #blocked> loc(#loc20)
      %30 = arith.andi %17, %7 : tensor<1x2048xi1, #blocked> loc(#loc21)
      %31 = arith.select %30, %29, %arg5 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc22)
      scf.yield %31 : tensor<1x2048xf32, #blocked> loc(#loc23)
    } loc(#loc9)
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc25)), %arg5: f32 loc(callsite(#loc1 at #loc25))):
      %15 = arith.addf %arg4, %arg5 : f32 loc(#loc34)
      tt.reduce.return %15 : f32 loc(#loc31)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc31)
    %10 = triton_gpu.convert_layout %9 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc27)
    %12 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc28)
    %13 = tt.splat %12 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc29)
    %14 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc29)
    tt.store %13, %11, %14 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc29)
    tt.return loc(#loc30)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":22:28)
#loc3 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":24:21)
#loc4 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":25:33)
#loc5 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":32:25)
#loc6 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":32:20)
#loc7 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":35:34)
#loc8 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":35:118)
#loc9 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":28:36)
#loc10 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":29:27)
#loc11 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":30:25)
#loc12 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":34:22)
#loc13 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":35:60)
#loc14 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":35:68)
#loc15 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":35:41)
#loc16 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":35:94)
#loc17 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":35:77)
#loc18 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":35:111)
#loc19 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":35:103)
#loc20 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":37:23)
#loc21 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":38:33)
#loc22 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":38:46)
#loc23 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":38:8)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc27 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":39:28)
#loc28 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":40:25)
#loc29 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":40:36)
#loc30 = loc("inductor_cache/sw/cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py":40:4)
#loc31 = loc(callsite(#loc24 at #loc25))
#loc33 = loc(callsite(#loc26 at #loc24))
#loc34 = loc(callsite(#loc33 at #loc25))
