; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = icmp slt i32 %5, 7, !dbg !11
  %7 = insertelement <4 x i1> poison, i1 %6, i64 0, !dbg !12
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %9 = shl i32 %8, 1, !dbg !13
  %10 = and i32 %9, 1022, !dbg !13
  %invariant.op = or disjoint i32 %10, 1024, !dbg !14
  %11 = mul i32 %5, 7690, !dbg !15
  %12 = add i32 %10, %11, !dbg !16
  %13 = add i32 %invariant.op, %11, !dbg !16
  %14 = icmp slt i32 %12, 53824, !dbg !17
  %15 = icmp slt i32 %13, 53824, !dbg !17
  %16 = sdiv i32 %12, 3364, !dbg !18
  %17 = sdiv i32 %13, 3364, !dbg !18
  %18 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !19
  %19 = insertelement <2 x i32> %18, i32 %12, i64 1, !dbg !19
  %20 = srem <2 x i32> %19, <i32 16, i32 3364>, !dbg !19
  %21 = extractelement <2 x i32> %20, i64 0, !dbg !20
  %22 = mul nsw i32 %21, 3392, !dbg !20
  %23 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !19
  %24 = insertelement <2 x i32> %23, i32 %13, i64 1, !dbg !19
  %25 = srem <2 x i32> %24, <i32 16, i32 3364>, !dbg !19
  %26 = extractelement <2 x i32> %25, i64 0, !dbg !20
  %27 = mul nsw i32 %26, 3392, !dbg !20
  %28 = extractelement <2 x i32> %20, i64 1, !dbg !21
  %29 = add nsw i32 %22, %28, !dbg !21
  %30 = extractelement <2 x i32> %25, i64 1, !dbg !21
  %31 = add nsw i32 %27, %30, !dbg !21
  %32 = sext i32 %29 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = and i1 %6, %14, !dbg !23
  %37 = and i1 %6, %15, !dbg !23
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !24
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !24
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !24
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #3, !dbg !24
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !24
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !24
  %44 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !24
  %45 = insertelement <4 x i32> %44, i32 %40, i64 1, !dbg !24
  %46 = insertelement <4 x i32> %45, i32 %42, i64 2, !dbg !24
  %47 = insertelement <4 x i32> %46, i32 %43, i64 3, !dbg !24
  %48 = bitcast <4 x i32> %47 to <4 x float>, !dbg !24
  %49 = fadd <4 x float> %48, zeroinitializer, !dbg !25
  %50 = shufflevector <4 x i1> %7, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !12
  %51 = select <4 x i1> %50, <4 x float> %49, <4 x float> zeroinitializer, !dbg !12
  %52 = or disjoint i32 %10, 2048, !dbg !26
  %.reass.1 = or disjoint i32 %10, 3072
  %53 = add i32 %52, %11, !dbg !16
  %54 = add i32 %.reass.1, %11, !dbg !16
  %55 = icmp slt i32 %53, 53824, !dbg !17
  %56 = icmp slt i32 %54, 53824, !dbg !17
  %57 = sdiv i32 %53, 3364, !dbg !18
  %58 = sdiv i32 %54, 3364, !dbg !18
  %59 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !19
  %60 = insertelement <2 x i32> %59, i32 %53, i64 1, !dbg !19
  %61 = srem <2 x i32> %60, <i32 16, i32 3364>, !dbg !19
  %62 = extractelement <2 x i32> %61, i64 0, !dbg !20
  %63 = mul nsw i32 %62, 3392, !dbg !20
  %64 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !19
  %65 = insertelement <2 x i32> %64, i32 %54, i64 1, !dbg !19
  %66 = srem <2 x i32> %65, <i32 16, i32 3364>, !dbg !19
  %67 = extractelement <2 x i32> %66, i64 0, !dbg !20
  %68 = mul nsw i32 %67, 3392, !dbg !20
  %69 = extractelement <2 x i32> %61, i64 1, !dbg !21
  %70 = add nsw i32 %63, %69, !dbg !21
  %71 = extractelement <2 x i32> %66, i64 1, !dbg !21
  %72 = add nsw i32 %68, %71, !dbg !21
  %73 = sext i32 %70 to i64, !dbg !22
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !22
  %75 = sext i32 %72 to i64, !dbg !22
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !22
  %77 = and i1 %6, %55, !dbg !23
  %78 = and i1 %6, %56, !dbg !23
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %77, i32 0, i1 %77, i32 0, i1 %77) #3, !dbg !24
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !24
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !24
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #3, !dbg !24
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !24
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !24
  %85 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !24
  %86 = insertelement <4 x i32> %85, i32 %81, i64 1, !dbg !24
  %87 = insertelement <4 x i32> %86, i32 %83, i64 2, !dbg !24
  %88 = insertelement <4 x i32> %87, i32 %84, i64 3, !dbg !24
  %89 = bitcast <4 x i32> %88 to <4 x float>, !dbg !24
  %90 = fadd <4 x float> %51, %89, !dbg !25
  %91 = shufflevector <4 x i1> %7, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !12
  %92 = select <4 x i1> %91, <4 x float> %90, <4 x float> %51, !dbg !12
  %93 = or disjoint i32 %10, 4096, !dbg !26
  %.reass.2 = or disjoint i32 %10, 5120
  %94 = add i32 %93, %11, !dbg !16
  %95 = add i32 %.reass.2, %11, !dbg !16
  %96 = icmp slt i32 %94, 53824, !dbg !17
  %97 = icmp slt i32 %95, 53824, !dbg !17
  %98 = sdiv i32 %94, 3364, !dbg !18
  %99 = sdiv i32 %95, 3364, !dbg !18
  %100 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !19
  %101 = insertelement <2 x i32> %100, i32 %94, i64 1, !dbg !19
  %102 = srem <2 x i32> %101, <i32 16, i32 3364>, !dbg !19
  %103 = extractelement <2 x i32> %102, i64 0, !dbg !20
  %104 = mul nsw i32 %103, 3392, !dbg !20
  %105 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !19
  %106 = insertelement <2 x i32> %105, i32 %95, i64 1, !dbg !19
  %107 = srem <2 x i32> %106, <i32 16, i32 3364>, !dbg !19
  %108 = extractelement <2 x i32> %107, i64 0, !dbg !20
  %109 = mul nsw i32 %108, 3392, !dbg !20
  %110 = extractelement <2 x i32> %102, i64 1, !dbg !21
  %111 = add nsw i32 %104, %110, !dbg !21
  %112 = extractelement <2 x i32> %107, i64 1, !dbg !21
  %113 = add nsw i32 %109, %112, !dbg !21
  %114 = sext i32 %111 to i64, !dbg !22
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !22
  %116 = sext i32 %113 to i64, !dbg !22
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !22
  %118 = and i1 %6, %96, !dbg !23
  %119 = and i1 %6, %97, !dbg !23
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %115, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #3, !dbg !24
  %121 = extractvalue { i32, i32 } %120, 0, !dbg !24
  %122 = extractvalue { i32, i32 } %120, 1, !dbg !24
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %117, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !24
  %124 = extractvalue { i32, i32 } %123, 0, !dbg !24
  %125 = extractvalue { i32, i32 } %123, 1, !dbg !24
  %126 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !24
  %127 = insertelement <4 x i32> %126, i32 %122, i64 1, !dbg !24
  %128 = insertelement <4 x i32> %127, i32 %124, i64 2, !dbg !24
  %129 = insertelement <4 x i32> %128, i32 %125, i64 3, !dbg !24
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !24
  %131 = fadd <4 x float> %92, %130, !dbg !25
  %132 = shufflevector <4 x i1> %7, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !12
  %133 = select <4 x i1> %132, <4 x float> %131, <4 x float> %92, !dbg !12
  %134 = or disjoint i32 %10, 6144, !dbg !26
  %.reass.3 = or disjoint i32 %10, 7168
  %135 = icmp samesign ult i32 %.reass.3, 7690, !dbg !27
  %136 = add i32 %134, %11, !dbg !16
  %137 = add i32 %.reass.3, %11, !dbg !16
  %138 = icmp slt i32 %136, 53824, !dbg !17
  %139 = icmp slt i32 %137, 53824, !dbg !17
  %140 = sdiv i32 %136, 3364, !dbg !18
  %141 = sdiv i32 %137, 3364, !dbg !18
  %142 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !19
  %143 = insertelement <2 x i32> %142, i32 %136, i64 1, !dbg !19
  %144 = srem <2 x i32> %143, <i32 16, i32 3364>, !dbg !19
  %145 = extractelement <2 x i32> %144, i64 0, !dbg !20
  %146 = mul nsw i32 %145, 3392, !dbg !20
  %147 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !19
  %148 = insertelement <2 x i32> %147, i32 %137, i64 1, !dbg !19
  %149 = srem <2 x i32> %148, <i32 16, i32 3364>, !dbg !19
  %150 = extractelement <2 x i32> %149, i64 0, !dbg !20
  %151 = mul nsw i32 %150, 3392, !dbg !20
  %152 = extractelement <2 x i32> %144, i64 1, !dbg !21
  %153 = add nsw i32 %146, %152, !dbg !21
  %154 = extractelement <2 x i32> %149, i64 1, !dbg !21
  %155 = add nsw i32 %151, %154, !dbg !21
  %156 = sext i32 %153 to i64, !dbg !22
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !22
  %158 = sext i32 %155 to i64, !dbg !22
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !22
  %160 = and i1 %135, %139, !dbg !28
  %161 = and i1 %6, %138, !dbg !23
  %162 = and i1 %6, %160, !dbg !23
  %163 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %157, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #3, !dbg !24
  %164 = extractvalue { i32, i32 } %163, 0, !dbg !24
  %165 = extractvalue { i32, i32 } %163, 1, !dbg !24
  %166 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %159, i1 %162, i32 0, i1 %162, i32 0, i1 %162) #3, !dbg !24
  %167 = extractvalue { i32, i32 } %166, 0, !dbg !24
  %168 = extractvalue { i32, i32 } %166, 1, !dbg !24
  %169 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !24
  %170 = insertelement <4 x i32> %169, i32 %165, i64 1, !dbg !24
  %171 = insertelement <4 x i32> %170, i32 %167, i64 2, !dbg !24
  %172 = insertelement <4 x i32> %171, i32 %168, i64 3, !dbg !24
  %173 = bitcast <4 x i32> %172 to <4 x float>, !dbg !24
  %174 = fadd <4 x float> %133, %173, !dbg !25
  %175 = and i1 %6, %135, !dbg !29
  %176 = insertelement <4 x i1> %7, i1 %175, i64 1, !dbg !12
  %177 = shufflevector <4 x i1> %176, <4 x i1> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !12
  %178 = select <4 x i1> %177, <4 x float> %174, <4 x float> %133, !dbg !12
  %179 = lshr i32 %8, 5, !dbg !13
  %180 = and i32 %8, 31, !dbg !13
  %shift = shufflevector <4 x float> %178, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !30
  %181 = fadd <4 x float> %178, %shift, !dbg !30
  %shift10 = shufflevector <4 x float> %178, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !30
  %182 = fadd <4 x float> %shift10, %181, !dbg !30
  %shift11 = shufflevector <4 x float> %178, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !30
  %183 = fadd <4 x float> %shift11, %182, !dbg !30
  %184 = extractelement <4 x float> %183, i64 0, !dbg !30
  %185 = bitcast float %184 to i32, !dbg !35
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 16, i32 31), !dbg !35
  %187 = bitcast i32 %186 to float, !dbg !35
  %188 = fadd float %184, %187, !dbg !30
  %189 = bitcast float %188 to i32, !dbg !35
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 8, i32 31), !dbg !35
  %191 = bitcast i32 %190 to float, !dbg !35
  %192 = fadd float %188, %191, !dbg !30
  %193 = bitcast float %192 to i32, !dbg !35
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 4, i32 31), !dbg !35
  %195 = bitcast i32 %194 to float, !dbg !35
  %196 = fadd float %192, %195, !dbg !30
  %197 = bitcast float %196 to i32, !dbg !35
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 2, i32 31), !dbg !35
  %199 = bitcast i32 %198 to float, !dbg !35
  %200 = fadd float %196, %199, !dbg !30
  %201 = bitcast float %200 to i32, !dbg !35
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !35
  %203 = bitcast i32 %202 to float, !dbg !35
  %204 = fadd float %200, %203, !dbg !30
  %205 = icmp eq i32 %180, 0, !dbg !35
  %206 = and i32 %179, 15, !dbg !35
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i32 %206, !dbg !35
  %208 = bitcast float %204 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 %205) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %209 = icmp slt i32 %8, 16, !dbg !35
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !35
  %211 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %210, i1 %209) #3, !dbg !35
  %212 = bitcast i32 %211 to float, !dbg !35
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 8, i32 31), !dbg !35
  %214 = bitcast i32 %213 to float, !dbg !35
  %215 = fadd float %212, %214, !dbg !30
  %216 = bitcast float %215 to i32, !dbg !35
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !35
  %218 = bitcast i32 %217 to float, !dbg !35
  %219 = fadd float %215, %218, !dbg !30
  %220 = bitcast float %219 to i32, !dbg !35
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 2, i32 31), !dbg !35
  %222 = bitcast i32 %221 to float, !dbg !35
  %223 = fadd float %219, %222, !dbg !30
  %224 = bitcast float %223 to i32, !dbg !35
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !35
  %226 = bitcast i32 %225 to float, !dbg !35
  %227 = fadd float %223, %226, !dbg !30
  %228 = and i32 %8, 15, !dbg !35
  %229 = icmp eq i32 %228, 0, !dbg !35
  %230 = and i1 %209, %229, !dbg !35
  %231 = bitcast float %227 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %231, i1 %230) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %232 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %233 = sext i32 %5 to i64, !dbg !36
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %233, !dbg !36
  %urem = and i32 %8, 511, !dbg !37
  %235 = icmp eq i32 %urem, 0, !dbg !37
  %236 = and i1 %235, %6, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %232, ptr addrspace(1) %234, i1 %236) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cswlo6qealefvtqdhhjjtjc4szrbpxhs6vv2heul22nqpsq63vci.py", directory: "inductor_cache/sw")
!4 = !{ptr @triton_red_fused_mean_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_2, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_2", linkageName: "triton_red_fused_mean_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 38, column: 46, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 25, scope: !7)
!16 = !DILocation(line: 32, column: 20, scope: !7)
!17 = !DILocation(line: 34, column: 22, scope: !7)
!18 = !DILocation(line: 35, column: 60, scope: !7)
!19 = !DILocation(line: 35, column: 68, scope: !7)
!20 = !DILocation(line: 35, column: 41, scope: !7)
!21 = !DILocation(line: 35, column: 77, scope: !7)
!22 = !DILocation(line: 35, column: 34, scope: !7)
!23 = !DILocation(line: 35, column: 118, scope: !7)
!24 = !DILocation(line: 35, column: 103, scope: !7)
!25 = !DILocation(line: 37, column: 23, scope: !7)
!26 = !DILocation(line: 29, column: 27, scope: !7)
!27 = !DILocation(line: 30, column: 25, scope: !7)
!28 = !DILocation(line: 35, column: 111, scope: !7)
!29 = !DILocation(line: 38, column: 33, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!34 = !DILocation(line: 39, column: 25, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 36, scope: !7)
!38 = !DILocation(line: 40, column: 4, scope: !7)
