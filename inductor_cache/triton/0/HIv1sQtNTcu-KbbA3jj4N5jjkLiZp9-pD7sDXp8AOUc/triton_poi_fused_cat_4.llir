; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = or disjoint i32 %18, 2, !dbg !13
  %21 = or disjoint i32 %18, 3, !dbg !13
  %22 = or disjoint i32 %18, 512, !dbg !13
  %23 = or disjoint i32 %18, 513, !dbg !13
  %24 = or disjoint i32 %18, 514, !dbg !13
  %25 = or disjoint i32 %18, 515, !dbg !13
  %26 = icmp slt i32 %18, 2952192, !dbg !14
  %27 = icmp slt i32 %22, 2952192, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %28 = sdiv i32 %.frozen, 3844, !dbg !15
  %.frozen76 = freeze i32 %22, !dbg !15
  %29 = sdiv i32 %.frozen76, 3844, !dbg !15
  %30 = srem i32 %28, 192, !dbg !16
  %31 = srem i32 %29, 192, !dbg !16
  %32 = mul i32 %28, 3844, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %33 = srem i32 %19, 3844, !dbg !17
  %34 = srem i32 %20, 3844, !dbg !17
  %35 = srem i32 %21, 3844, !dbg !17
  %36 = mul i32 %29, 3844, !dbg !17
  %.decomposed77 = sub i32 %.frozen76, %36, !dbg !17
  %37 = srem i32 %23, 3844, !dbg !17
  %38 = srem i32 %24, 3844, !dbg !17
  %39 = srem i32 %25, 3844, !dbg !17
  %40 = sdiv i32 %18, 738048, !dbg !18
  %41 = sdiv i32 %22, 738048, !dbg !18
  %42 = icmp slt i32 %30, 96, !dbg !19
  %43 = icmp slt i32 %31, 96, !dbg !19
  %44 = mul nsw i32 %.decomposed, 96, !dbg !20
  %45 = mul nsw i32 %33, 96, !dbg !20
  %46 = mul nsw i32 %34, 96, !dbg !20
  %47 = mul nsw i32 %35, 96, !dbg !20
  %48 = mul nsw i32 %.decomposed77, 96, !dbg !20
  %49 = mul nsw i32 %37, 96, !dbg !20
  %50 = mul nsw i32 %38, 96, !dbg !20
  %51 = mul nsw i32 %39, 96, !dbg !20
  %52 = mul nsw i32 %40, 369024, !dbg !21
  %53 = mul nsw i32 %41, 369024, !dbg !21
  %54 = add nsw i32 %44, %52, !dbg !22
  %55 = add nsw i32 %52, %45, !dbg !22
  %56 = add nsw i32 %52, %46, !dbg !22
  %57 = add nsw i32 %52, %47, !dbg !22
  %58 = add nsw i32 %48, %53, !dbg !22
  %59 = add nsw i32 %49, %53, !dbg !22
  %60 = add nsw i32 %50, %53, !dbg !22
  %61 = add nsw i32 %51, %53, !dbg !22
  %62 = add nsw i32 %54, %30, !dbg !23
  %63 = add nsw i32 %55, %30, !dbg !23
  %64 = add nsw i32 %56, %30, !dbg !23
  %65 = add nsw i32 %57, %30, !dbg !23
  %66 = add nsw i32 %58, %31, !dbg !23
  %67 = add nsw i32 %59, %31, !dbg !23
  %68 = add nsw i32 %60, %31, !dbg !23
  %69 = add nsw i32 %61, %31, !dbg !23
  %70 = sext i32 %62 to i64, !dbg !24
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !24
  %72 = sext i32 %63 to i64, !dbg !24
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !24
  %74 = sext i32 %64 to i64, !dbg !24
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !24
  %76 = sext i32 %65 to i64, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !24
  %78 = sext i32 %66 to i64, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !24
  %80 = sext i32 %67 to i64, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !24
  %82 = sext i32 %68 to i64, !dbg !24
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !24
  %84 = sext i32 %69 to i64, !dbg !24
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !24
  %86 = and i1 %26, %42, !dbg !25
  %87 = and i1 %27, %43, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %86, i32 0, i1 %86) #3, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %86, i32 0, i1 %86) #3, !dbg !26
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %86, i32 0, i1 %86) #3, !dbg !26
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %86, i32 0, i1 %86) #3, !dbg !26
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %87, i32 0, i1 %87) #3, !dbg !26
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %87, i32 0, i1 %87) #3, !dbg !26
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %87, i32 0, i1 %87) #3, !dbg !26
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %87, i32 0, i1 %87) #3, !dbg !26
  %96 = sext i32 %30 to i64, !dbg !27
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !27
  %98 = sext i32 %31 to i64, !dbg !27
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !27
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %86, i32 0, i1 %86) #3, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %86, i32 0, i1 %86) #3, !dbg !28
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %86, i32 0, i1 %86) #3, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %86, i32 0, i1 %86) #3, !dbg !28
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %87, i32 0, i1 %87) #3, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %87, i32 0, i1 %87) #3, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %87, i32 0, i1 %87) #3, !dbg !28
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %87, i32 0, i1 %87) #3, !dbg !28
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !29
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !29
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %86, i32 0, i1 %86) #3, !dbg !30
  %111 = bitcast i32 %110 to float, !dbg !30
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %86, i32 0, i1 %86) #3, !dbg !30
  %113 = bitcast i32 %112 to float, !dbg !30
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %86, i32 0, i1 %86) #3, !dbg !30
  %115 = bitcast i32 %114 to float, !dbg !30
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %86, i32 0, i1 %86) #3, !dbg !30
  %117 = bitcast i32 %116 to float, !dbg !30
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %87, i32 0, i1 %87) #3, !dbg !30
  %119 = bitcast i32 %118 to float, !dbg !30
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %87, i32 0, i1 %87) #3, !dbg !30
  %121 = bitcast i32 %120 to float, !dbg !30
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %87, i32 0, i1 %87) #3, !dbg !30
  %123 = bitcast i32 %122 to float, !dbg !30
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %87, i32 0, i1 %87) #3, !dbg !30
  %125 = bitcast i32 %124 to float, !dbg !30
  %126 = fadd float %111, 0x3EE4F8B580000000, !dbg !31
  %127 = fadd float %113, 0x3EE4F8B580000000, !dbg !31
  %128 = fadd float %115, 0x3EE4F8B580000000, !dbg !31
  %129 = fadd float %117, 0x3EE4F8B580000000, !dbg !31
  %130 = fadd float %119, 0x3EE4F8B580000000, !dbg !31
  %131 = fadd float %121, 0x3EE4F8B580000000, !dbg !31
  %132 = fadd float %123, 0x3EE4F8B580000000, !dbg !31
  %133 = fadd float %125, 0x3EE4F8B580000000, !dbg !31
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %134, 0, !dbg !32
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %135, 0, !dbg !32
  br i1 %.not.i, label %141, label %136, !dbg !32

136:                                              ; preds = %12
  br i1 %.not1.i, label %139, label %137, !dbg !32

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

141:                                              ; preds = %12
  br i1 %.not1.i, label %144, label %142, !dbg !32

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %137, %139, %142, %144
  %.0.i = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !32
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %146, 0, !dbg !32
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %147, 0, !dbg !32
  br i1 %.not.i1, label %153, label %148, !dbg !32

148:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %151, label %149, !dbg !32

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

153:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %156, label %154, !dbg !32

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %149, %151, %154, %156
  %.0.i3 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !32
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i6 = icmp eq i32 %158, 0, !dbg !32
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i9 = icmp eq i32 %159, 0, !dbg !32
  br i1 %.not.i6, label %165, label %160, !dbg !32

160:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %163, label %161, !dbg !32

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

165:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %168, label %166, !dbg !32

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %161, %163, %166, %168
  %.0.i8 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !32
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i11 = icmp eq i32 %170, 0, !dbg !32
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i14 = icmp eq i32 %171, 0, !dbg !32
  br i1 %.not.i11, label %177, label %172, !dbg !32

172:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %175, label %173, !dbg !32

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

177:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %180, label %178, !dbg !32

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %173, %175, %178, %180
  %.0.i13 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !32
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i16 = icmp eq i32 %182, 0, !dbg !32
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i19 = icmp eq i32 %183, 0, !dbg !32
  br i1 %.not.i16, label %189, label %184, !dbg !32

184:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %187, label %185, !dbg !32

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

189:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %192, label %190, !dbg !32

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

__nv_sqrtf.exit20:                                ; preds = %185, %187, %190, %192
  %.0.i18 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !32
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i21 = icmp eq i32 %194, 0, !dbg !32
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i24 = icmp eq i32 %195, 0, !dbg !32
  br i1 %.not.i21, label %201, label %196, !dbg !32

196:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %199, label %197, !dbg !32

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

201:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %204, label %202, !dbg !32

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

__nv_sqrtf.exit25:                                ; preds = %197, %199, %202, %204
  %.0.i23 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !32
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i26 = icmp eq i32 %206, 0, !dbg !32
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i29 = icmp eq i32 %207, 0, !dbg !32
  br i1 %.not.i26, label %213, label %208, !dbg !32

208:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %211, label %209, !dbg !32

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

213:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %216, label %214, !dbg !32

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

__nv_sqrtf.exit30:                                ; preds = %209, %211, %214, %216
  %.0.i28 = phi float [ %210, %209 ], [ %212, %211 ], [ %215, %214 ], [ %217, %216 ], !dbg !32
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i31 = icmp eq i32 %218, 0, !dbg !32
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i34 = icmp eq i32 %219, 0, !dbg !32
  br i1 %.not.i31, label %225, label %220, !dbg !32

220:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %223, label %221, !dbg !32

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

225:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %228, label %226, !dbg !32

226:                                              ; preds = %225
  %227 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

228:                                              ; preds = %225
  %229 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

__nv_sqrtf.exit35:                                ; preds = %221, %223, %226, %228
  %.0.i33 = phi float [ %222, %221 ], [ %224, %223 ], [ %227, %226 ], [ %229, %228 ], !dbg !32
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !33
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !33
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !33
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !33
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !33
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !33
  %238 = getelementptr float, ptr addrspace(1) %3, i64 %96, !dbg !34
  %239 = getelementptr float, ptr addrspace(1) %3, i64 %98, !dbg !34
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %86, i32 0, i1 %86) #3, !dbg !35
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %86, i32 0, i1 %86) #3, !dbg !35
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %86, i32 0, i1 %86) #3, !dbg !35
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %86, i32 0, i1 %86) #3, !dbg !35
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %87, i32 0, i1 %87) #3, !dbg !35
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %87, i32 0, i1 %87) #3, !dbg !35
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %87, i32 0, i1 %87) #3, !dbg !35
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %87, i32 0, i1 %87) #3, !dbg !35
  %248 = getelementptr float, ptr addrspace(1) %4, i64 %96, !dbg !36
  %249 = getelementptr float, ptr addrspace(1) %4, i64 %98, !dbg !36
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %86, i32 0, i1 %86) #3, !dbg !37
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %86, i32 0, i1 %86) #3, !dbg !37
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %86, i32 0, i1 %86) #3, !dbg !37
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %86, i32 0, i1 %86) #3, !dbg !37
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %87, i32 0, i1 %87) #3, !dbg !37
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %87, i32 0, i1 %87) #3, !dbg !37
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %87, i32 0, i1 %87) #3, !dbg !37
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %87, i32 0, i1 %87) #3, !dbg !37
  %258 = icmp sgt i32 %30, 95, !dbg !38
  %259 = icmp sgt i32 %31, 95, !dbg !38
  %260 = add nsw i32 %30, -96, !dbg !39
  %261 = add nsw i32 %31, -96, !dbg !39
  %262 = add nsw i32 %54, %260, !dbg !40
  %263 = add nsw i32 %55, %260, !dbg !40
  %264 = add nsw i32 %56, %260, !dbg !40
  %265 = add nsw i32 %57, %260, !dbg !40
  %266 = add nsw i32 %58, %261, !dbg !40
  %267 = add nsw i32 %59, %261, !dbg !40
  %268 = add nsw i32 %60, %261, !dbg !40
  %269 = add nsw i32 %61, %261, !dbg !40
  %270 = sext i32 %262 to i64, !dbg !41
  %271 = getelementptr float, ptr addrspace(1) %5, i64 %270, !dbg !41
  %272 = sext i32 %263 to i64, !dbg !41
  %273 = getelementptr float, ptr addrspace(1) %5, i64 %272, !dbg !41
  %274 = sext i32 %264 to i64, !dbg !41
  %275 = getelementptr float, ptr addrspace(1) %5, i64 %274, !dbg !41
  %276 = sext i32 %265 to i64, !dbg !41
  %277 = getelementptr float, ptr addrspace(1) %5, i64 %276, !dbg !41
  %278 = sext i32 %266 to i64, !dbg !41
  %279 = getelementptr float, ptr addrspace(1) %5, i64 %278, !dbg !41
  %280 = sext i32 %267 to i64, !dbg !41
  %281 = getelementptr float, ptr addrspace(1) %5, i64 %280, !dbg !41
  %282 = sext i32 %268 to i64, !dbg !41
  %283 = getelementptr float, ptr addrspace(1) %5, i64 %282, !dbg !41
  %284 = sext i32 %269 to i64, !dbg !41
  %285 = getelementptr float, ptr addrspace(1) %5, i64 %284, !dbg !41
  %286 = and i1 %26, %258, !dbg !42
  %287 = and i1 %27, %259, !dbg !42
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %286, i32 0, i1 %286) #3, !dbg !43
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %273, i1 %286, i32 0, i1 %286) #3, !dbg !43
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %275, i1 %286, i32 0, i1 %286) #3, !dbg !43
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %286, i32 0, i1 %286) #3, !dbg !43
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %287, i32 0, i1 %287) #3, !dbg !43
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %281, i1 %287, i32 0, i1 %287) #3, !dbg !43
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %287, i32 0, i1 %287) #3, !dbg !43
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %285, i1 %287, i32 0, i1 %287) #3, !dbg !43
  %296 = sext i32 %260 to i64, !dbg !44
  %297 = getelementptr float, ptr addrspace(1) %6, i64 %296, !dbg !44
  %298 = sext i32 %261 to i64, !dbg !44
  %299 = getelementptr float, ptr addrspace(1) %6, i64 %298, !dbg !44
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %286, i32 0, i1 %286) #3, !dbg !45
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %286, i32 0, i1 %286) #3, !dbg !45
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %286, i32 0, i1 %286) #3, !dbg !45
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %297, i1 %286, i32 0, i1 %286) #3, !dbg !45
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %299, i1 %287, i32 0, i1 %287) #3, !dbg !45
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %299, i1 %287, i32 0, i1 %287) #3, !dbg !45
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %299, i1 %287, i32 0, i1 %287) #3, !dbg !45
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %299, i1 %287, i32 0, i1 %287) #3, !dbg !45
  %308 = getelementptr float, ptr addrspace(1) %7, i64 %296, !dbg !46
  %309 = getelementptr float, ptr addrspace(1) %7, i64 %298, !dbg !46
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %308, i1 %286, i32 0, i1 %286) #3, !dbg !47
  %311 = bitcast i32 %310 to float, !dbg !47
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %308, i1 %286, i32 0, i1 %286) #3, !dbg !47
  %313 = bitcast i32 %312 to float, !dbg !47
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %308, i1 %286, i32 0, i1 %286) #3, !dbg !47
  %315 = bitcast i32 %314 to float, !dbg !47
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %308, i1 %286, i32 0, i1 %286) #3, !dbg !47
  %317 = bitcast i32 %316 to float, !dbg !47
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %287, i32 0, i1 %287) #3, !dbg !47
  %319 = bitcast i32 %318 to float, !dbg !47
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %287, i32 0, i1 %287) #3, !dbg !47
  %321 = bitcast i32 %320 to float, !dbg !47
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %287, i32 0, i1 %287) #3, !dbg !47
  %323 = bitcast i32 %322 to float, !dbg !47
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %309, i1 %287, i32 0, i1 %287) #3, !dbg !47
  %325 = bitcast i32 %324 to float, !dbg !47
  %326 = fadd float %311, 0x3EE4F8B580000000, !dbg !48
  %327 = fadd float %313, 0x3EE4F8B580000000, !dbg !48
  %328 = fadd float %315, 0x3EE4F8B580000000, !dbg !48
  %329 = fadd float %317, 0x3EE4F8B580000000, !dbg !48
  %330 = fadd float %319, 0x3EE4F8B580000000, !dbg !48
  %331 = fadd float %321, 0x3EE4F8B580000000, !dbg !48
  %332 = fadd float %323, 0x3EE4F8B580000000, !dbg !48
  %333 = fadd float %325, 0x3EE4F8B580000000, !dbg !48
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i36 = icmp eq i32 %334, 0, !dbg !49
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i39 = icmp eq i32 %335, 0, !dbg !49
  br i1 %.not.i36, label %341, label %336, !dbg !49

336:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %339, label %337, !dbg !49

337:                                              ; preds = %336
  %338 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %326) #3, !dbg !49
  br label %__nv_sqrtf.exit40, !dbg !49

339:                                              ; preds = %336
  %340 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %326) #3, !dbg !49
  br label %__nv_sqrtf.exit40, !dbg !49

341:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %344, label %342, !dbg !49

342:                                              ; preds = %341
  %343 = tail call float @llvm.nvvm.sqrt.rn.f(float %326) #3, !dbg !49
  br label %__nv_sqrtf.exit40, !dbg !49

344:                                              ; preds = %341
  %345 = tail call float @llvm.nvvm.sqrt.approx.f(float %326) #3, !dbg !49
  br label %__nv_sqrtf.exit40, !dbg !49

__nv_sqrtf.exit40:                                ; preds = %337, %339, %342, %344
  %.0.i38 = phi float [ %338, %337 ], [ %340, %339 ], [ %343, %342 ], [ %345, %344 ], !dbg !49
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i41 = icmp eq i32 %346, 0, !dbg !49
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i44 = icmp eq i32 %347, 0, !dbg !49
  br i1 %.not.i41, label %353, label %348, !dbg !49

348:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %351, label %349, !dbg !49

349:                                              ; preds = %348
  %350 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %327) #3, !dbg !49
  br label %__nv_sqrtf.exit45, !dbg !49

351:                                              ; preds = %348
  %352 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %327) #3, !dbg !49
  br label %__nv_sqrtf.exit45, !dbg !49

353:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %356, label %354, !dbg !49

354:                                              ; preds = %353
  %355 = tail call float @llvm.nvvm.sqrt.rn.f(float %327) #3, !dbg !49
  br label %__nv_sqrtf.exit45, !dbg !49

356:                                              ; preds = %353
  %357 = tail call float @llvm.nvvm.sqrt.approx.f(float %327) #3, !dbg !49
  br label %__nv_sqrtf.exit45, !dbg !49

__nv_sqrtf.exit45:                                ; preds = %349, %351, %354, %356
  %.0.i43 = phi float [ %350, %349 ], [ %352, %351 ], [ %355, %354 ], [ %357, %356 ], !dbg !49
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i46 = icmp eq i32 %358, 0, !dbg !49
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i49 = icmp eq i32 %359, 0, !dbg !49
  br i1 %.not.i46, label %365, label %360, !dbg !49

360:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %363, label %361, !dbg !49

361:                                              ; preds = %360
  %362 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %328) #3, !dbg !49
  br label %__nv_sqrtf.exit50, !dbg !49

363:                                              ; preds = %360
  %364 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %328) #3, !dbg !49
  br label %__nv_sqrtf.exit50, !dbg !49

365:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %368, label %366, !dbg !49

366:                                              ; preds = %365
  %367 = tail call float @llvm.nvvm.sqrt.rn.f(float %328) #3, !dbg !49
  br label %__nv_sqrtf.exit50, !dbg !49

368:                                              ; preds = %365
  %369 = tail call float @llvm.nvvm.sqrt.approx.f(float %328) #3, !dbg !49
  br label %__nv_sqrtf.exit50, !dbg !49

__nv_sqrtf.exit50:                                ; preds = %361, %363, %366, %368
  %.0.i48 = phi float [ %362, %361 ], [ %364, %363 ], [ %367, %366 ], [ %369, %368 ], !dbg !49
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i51 = icmp eq i32 %370, 0, !dbg !49
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i54 = icmp eq i32 %371, 0, !dbg !49
  br i1 %.not.i51, label %377, label %372, !dbg !49

372:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %375, label %373, !dbg !49

373:                                              ; preds = %372
  %374 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %329) #3, !dbg !49
  br label %__nv_sqrtf.exit55, !dbg !49

375:                                              ; preds = %372
  %376 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %329) #3, !dbg !49
  br label %__nv_sqrtf.exit55, !dbg !49

377:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %380, label %378, !dbg !49

378:                                              ; preds = %377
  %379 = tail call float @llvm.nvvm.sqrt.rn.f(float %329) #3, !dbg !49
  br label %__nv_sqrtf.exit55, !dbg !49

380:                                              ; preds = %377
  %381 = tail call float @llvm.nvvm.sqrt.approx.f(float %329) #3, !dbg !49
  br label %__nv_sqrtf.exit55, !dbg !49

__nv_sqrtf.exit55:                                ; preds = %373, %375, %378, %380
  %.0.i53 = phi float [ %374, %373 ], [ %376, %375 ], [ %379, %378 ], [ %381, %380 ], !dbg !49
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i56 = icmp eq i32 %382, 0, !dbg !49
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i59 = icmp eq i32 %383, 0, !dbg !49
  br i1 %.not.i56, label %389, label %384, !dbg !49

384:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %387, label %385, !dbg !49

385:                                              ; preds = %384
  %386 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %330) #3, !dbg !49
  br label %__nv_sqrtf.exit60, !dbg !49

387:                                              ; preds = %384
  %388 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %330) #3, !dbg !49
  br label %__nv_sqrtf.exit60, !dbg !49

389:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %392, label %390, !dbg !49

390:                                              ; preds = %389
  %391 = tail call float @llvm.nvvm.sqrt.rn.f(float %330) #3, !dbg !49
  br label %__nv_sqrtf.exit60, !dbg !49

392:                                              ; preds = %389
  %393 = tail call float @llvm.nvvm.sqrt.approx.f(float %330) #3, !dbg !49
  br label %__nv_sqrtf.exit60, !dbg !49

__nv_sqrtf.exit60:                                ; preds = %385, %387, %390, %392
  %.0.i58 = phi float [ %386, %385 ], [ %388, %387 ], [ %391, %390 ], [ %393, %392 ], !dbg !49
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i61 = icmp eq i32 %394, 0, !dbg !49
  %395 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i64 = icmp eq i32 %395, 0, !dbg !49
  br i1 %.not.i61, label %401, label %396, !dbg !49

396:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %399, label %397, !dbg !49

397:                                              ; preds = %396
  %398 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %331) #3, !dbg !49
  br label %__nv_sqrtf.exit65, !dbg !49

399:                                              ; preds = %396
  %400 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %331) #3, !dbg !49
  br label %__nv_sqrtf.exit65, !dbg !49

401:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %404, label %402, !dbg !49

402:                                              ; preds = %401
  %403 = tail call float @llvm.nvvm.sqrt.rn.f(float %331) #3, !dbg !49
  br label %__nv_sqrtf.exit65, !dbg !49

404:                                              ; preds = %401
  %405 = tail call float @llvm.nvvm.sqrt.approx.f(float %331) #3, !dbg !49
  br label %__nv_sqrtf.exit65, !dbg !49

__nv_sqrtf.exit65:                                ; preds = %397, %399, %402, %404
  %.0.i63 = phi float [ %398, %397 ], [ %400, %399 ], [ %403, %402 ], [ %405, %404 ], !dbg !49
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i66 = icmp eq i32 %406, 0, !dbg !49
  %407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i69 = icmp eq i32 %407, 0, !dbg !49
  br i1 %.not.i66, label %413, label %408, !dbg !49

408:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %411, label %409, !dbg !49

409:                                              ; preds = %408
  %410 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %332) #3, !dbg !49
  br label %__nv_sqrtf.exit70, !dbg !49

411:                                              ; preds = %408
  %412 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %332) #3, !dbg !49
  br label %__nv_sqrtf.exit70, !dbg !49

413:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %416, label %414, !dbg !49

414:                                              ; preds = %413
  %415 = tail call float @llvm.nvvm.sqrt.rn.f(float %332) #3, !dbg !49
  br label %__nv_sqrtf.exit70, !dbg !49

416:                                              ; preds = %413
  %417 = tail call float @llvm.nvvm.sqrt.approx.f(float %332) #3, !dbg !49
  br label %__nv_sqrtf.exit70, !dbg !49

__nv_sqrtf.exit70:                                ; preds = %409, %411, %414, %416
  %.0.i68 = phi float [ %410, %409 ], [ %412, %411 ], [ %415, %414 ], [ %417, %416 ], !dbg !49
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i71 = icmp eq i32 %418, 0, !dbg !49
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i74 = icmp eq i32 %419, 0, !dbg !49
  br i1 %.not.i71, label %425, label %420, !dbg !49

420:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %423, label %421, !dbg !49

421:                                              ; preds = %420
  %422 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %333) #3, !dbg !49
  br label %__nv_sqrtf.exit75, !dbg !49

423:                                              ; preds = %420
  %424 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %333) #3, !dbg !49
  br label %__nv_sqrtf.exit75, !dbg !49

425:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %428, label %426, !dbg !49

426:                                              ; preds = %425
  %427 = tail call float @llvm.nvvm.sqrt.rn.f(float %333) #3, !dbg !49
  br label %__nv_sqrtf.exit75, !dbg !49

428:                                              ; preds = %425
  %429 = tail call float @llvm.nvvm.sqrt.approx.f(float %333) #3, !dbg !49
  br label %__nv_sqrtf.exit75, !dbg !49

__nv_sqrtf.exit75:                                ; preds = %421, %423, %426, %428
  %.0.i73 = phi float [ %422, %421 ], [ %424, %423 ], [ %427, %426 ], [ %429, %428 ], !dbg !49
  %430 = insertelement <16 x i32> poison, i32 %295, i64 0, !dbg !43
  %431 = insertelement <16 x i32> %430, i32 %294, i64 1, !dbg !43
  %432 = insertelement <16 x i32> %431, i32 %293, i64 2, !dbg !43
  %433 = insertelement <16 x i32> %432, i32 %292, i64 3, !dbg !43
  %434 = insertelement <16 x i32> %433, i32 %291, i64 4, !dbg !43
  %435 = insertelement <16 x i32> %434, i32 %290, i64 5, !dbg !43
  %436 = insertelement <16 x i32> %435, i32 %289, i64 6, !dbg !43
  %437 = insertelement <16 x i32> %436, i32 %288, i64 7, !dbg !43
  %438 = insertelement <16 x i32> %437, i32 %88, i64 8, !dbg !43
  %439 = insertelement <16 x i32> %438, i32 %89, i64 9, !dbg !43
  %440 = insertelement <16 x i32> %439, i32 %90, i64 10, !dbg !43
  %441 = insertelement <16 x i32> %440, i32 %91, i64 11, !dbg !43
  %442 = insertelement <16 x i32> %441, i32 %92, i64 12, !dbg !43
  %443 = insertelement <16 x i32> %442, i32 %93, i64 13, !dbg !43
  %444 = insertelement <16 x i32> %443, i32 %94, i64 14, !dbg !43
  %445 = insertelement <16 x i32> %444, i32 %95, i64 15, !dbg !43
  %446 = bitcast <16 x i32> %445 to <16 x float>, !dbg !43
  %447 = insertelement <16 x i32> poison, i32 %307, i64 0, !dbg !45
  %448 = insertelement <16 x i32> %447, i32 %306, i64 1, !dbg !45
  %449 = insertelement <16 x i32> %448, i32 %305, i64 2, !dbg !45
  %450 = insertelement <16 x i32> %449, i32 %304, i64 3, !dbg !45
  %451 = insertelement <16 x i32> %450, i32 %303, i64 4, !dbg !45
  %452 = insertelement <16 x i32> %451, i32 %302, i64 5, !dbg !45
  %453 = insertelement <16 x i32> %452, i32 %301, i64 6, !dbg !45
  %454 = insertelement <16 x i32> %453, i32 %300, i64 7, !dbg !45
  %455 = insertelement <16 x i32> %454, i32 %100, i64 8, !dbg !45
  %456 = insertelement <16 x i32> %455, i32 %101, i64 9, !dbg !45
  %457 = insertelement <16 x i32> %456, i32 %102, i64 10, !dbg !45
  %458 = insertelement <16 x i32> %457, i32 %103, i64 11, !dbg !45
  %459 = insertelement <16 x i32> %458, i32 %104, i64 12, !dbg !45
  %460 = insertelement <16 x i32> %459, i32 %105, i64 13, !dbg !45
  %461 = insertelement <16 x i32> %460, i32 %106, i64 14, !dbg !45
  %462 = insertelement <16 x i32> %461, i32 %107, i64 15, !dbg !45
  %463 = bitcast <16 x i32> %462 to <16 x float>, !dbg !45
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !50
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !50
  %466 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !50
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !50
  %468 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !50
  %469 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !50
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !50
  %471 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !50
  %472 = getelementptr float, ptr addrspace(1) %8, i64 %296, !dbg !51
  %473 = getelementptr float, ptr addrspace(1) %8, i64 %298, !dbg !51
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %286, i32 0, i1 %286) #3, !dbg !52
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %286, i32 0, i1 %286) #3, !dbg !52
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %286, i32 0, i1 %286) #3, !dbg !52
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %286, i32 0, i1 %286) #3, !dbg !52
  %478 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %473, i1 %287, i32 0, i1 %287) #3, !dbg !52
  %479 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %473, i1 %287, i32 0, i1 %287) #3, !dbg !52
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %473, i1 %287, i32 0, i1 %287) #3, !dbg !52
  %481 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %473, i1 %287, i32 0, i1 %287) #3, !dbg !52
  %482 = getelementptr float, ptr addrspace(1) %9, i64 %296, !dbg !53
  %483 = getelementptr float, ptr addrspace(1) %9, i64 %298, !dbg !53
  %484 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %482, i1 %286, i32 0, i1 %286) #3, !dbg !54
  %485 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %482, i1 %286, i32 0, i1 %286) #3, !dbg !54
  %486 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %482, i1 %286, i32 0, i1 %286) #3, !dbg !54
  %487 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %482, i1 %286, i32 0, i1 %286) #3, !dbg !54
  %488 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %483, i1 %287, i32 0, i1 %287) #3, !dbg !54
  %489 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %483, i1 %287, i32 0, i1 %287) #3, !dbg !54
  %490 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %483, i1 %287, i32 0, i1 %287) #3, !dbg !54
  %491 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %483, i1 %287, i32 0, i1 %287) #3, !dbg !54
  %492 = fsub <16 x float> %446, %463, !dbg !55
  %493 = insertelement <16 x float> poison, float %471, i64 0, !dbg !56
  %494 = insertelement <16 x float> %493, float %470, i64 1, !dbg !56
  %495 = insertelement <16 x float> %494, float %469, i64 2, !dbg !56
  %496 = insertelement <16 x float> %495, float %468, i64 3, !dbg !56
  %497 = insertelement <16 x float> %496, float %467, i64 4, !dbg !56
  %498 = insertelement <16 x float> %497, float %466, i64 5, !dbg !56
  %499 = insertelement <16 x float> %498, float %465, i64 6, !dbg !56
  %500 = insertelement <16 x float> %499, float %464, i64 7, !dbg !56
  %501 = insertelement <16 x float> %500, float %230, i64 8, !dbg !56
  %502 = insertelement <16 x float> %501, float %231, i64 9, !dbg !56
  %503 = insertelement <16 x float> %502, float %232, i64 10, !dbg !56
  %504 = insertelement <16 x float> %503, float %233, i64 11, !dbg !56
  %505 = insertelement <16 x float> %504, float %234, i64 12, !dbg !56
  %506 = insertelement <16 x float> %505, float %235, i64 13, !dbg !56
  %507 = insertelement <16 x float> %506, float %236, i64 14, !dbg !56
  %508 = insertelement <16 x float> %507, float %237, i64 15, !dbg !56
  %509 = fmul <16 x float> %492, %508, !dbg !56
  %510 = insertelement <16 x i32> poison, i32 %481, i64 0, !dbg !52
  %511 = insertelement <16 x i32> %510, i32 %480, i64 1, !dbg !52
  %512 = insertelement <16 x i32> %511, i32 %479, i64 2, !dbg !52
  %513 = insertelement <16 x i32> %512, i32 %478, i64 3, !dbg !52
  %514 = insertelement <16 x i32> %513, i32 %477, i64 4, !dbg !52
  %515 = insertelement <16 x i32> %514, i32 %476, i64 5, !dbg !52
  %516 = insertelement <16 x i32> %515, i32 %475, i64 6, !dbg !52
  %517 = insertelement <16 x i32> %516, i32 %474, i64 7, !dbg !52
  %518 = insertelement <16 x i32> %517, i32 %240, i64 8, !dbg !52
  %519 = insertelement <16 x i32> %518, i32 %241, i64 9, !dbg !52
  %520 = insertelement <16 x i32> %519, i32 %242, i64 10, !dbg !52
  %521 = insertelement <16 x i32> %520, i32 %243, i64 11, !dbg !52
  %522 = insertelement <16 x i32> %521, i32 %244, i64 12, !dbg !52
  %523 = insertelement <16 x i32> %522, i32 %245, i64 13, !dbg !52
  %524 = insertelement <16 x i32> %523, i32 %246, i64 14, !dbg !52
  %525 = insertelement <16 x i32> %524, i32 %247, i64 15, !dbg !52
  %526 = bitcast <16 x i32> %525 to <16 x float>, !dbg !52
  %527 = fmul <16 x float> %509, %526, !dbg !57
  %528 = insertelement <16 x i32> poison, i32 %491, i64 0, !dbg !54
  %529 = insertelement <16 x i32> %528, i32 %490, i64 1, !dbg !54
  %530 = insertelement <16 x i32> %529, i32 %489, i64 2, !dbg !54
  %531 = insertelement <16 x i32> %530, i32 %488, i64 3, !dbg !54
  %532 = insertelement <16 x i32> %531, i32 %487, i64 4, !dbg !54
  %533 = insertelement <16 x i32> %532, i32 %486, i64 5, !dbg !54
  %534 = insertelement <16 x i32> %533, i32 %485, i64 6, !dbg !54
  %535 = insertelement <16 x i32> %534, i32 %484, i64 7, !dbg !54
  %536 = insertelement <16 x i32> %535, i32 %250, i64 8, !dbg !54
  %537 = insertelement <16 x i32> %536, i32 %251, i64 9, !dbg !54
  %538 = insertelement <16 x i32> %537, i32 %252, i64 10, !dbg !54
  %539 = insertelement <16 x i32> %538, i32 %253, i64 11, !dbg !54
  %540 = insertelement <16 x i32> %539, i32 %254, i64 12, !dbg !54
  %541 = insertelement <16 x i32> %540, i32 %255, i64 13, !dbg !54
  %542 = insertelement <16 x i32> %541, i32 %256, i64 14, !dbg !54
  %543 = insertelement <16 x i32> %542, i32 %257, i64 15, !dbg !54
  %544 = bitcast <16 x i32> %543 to <16 x float>, !dbg !54
  %545 = fadd <16 x float> %527, %544, !dbg !58
  %546 = fcmp olt <16 x float> %545, zeroinitializer, !dbg !59
  %547 = extractelement <16 x i1> %546, i64 15, !dbg !63
  %548 = extractelement <16 x float> %545, i64 15, !dbg !63
  %549 = select i1 %547, float 0.000000e+00, float %548, !dbg !63
  %550 = extractelement <16 x i1> %546, i64 14, !dbg !63
  %551 = extractelement <16 x float> %545, i64 14, !dbg !63
  %552 = select i1 %550, float 0.000000e+00, float %551, !dbg !63
  %553 = extractelement <16 x i1> %546, i64 13, !dbg !63
  %554 = extractelement <16 x float> %545, i64 13, !dbg !63
  %555 = select i1 %553, float 0.000000e+00, float %554, !dbg !63
  %556 = extractelement <16 x i1> %546, i64 12, !dbg !63
  %557 = extractelement <16 x float> %545, i64 12, !dbg !63
  %558 = select i1 %556, float 0.000000e+00, float %557, !dbg !63
  %559 = extractelement <16 x i1> %546, i64 11, !dbg !63
  %560 = extractelement <16 x float> %545, i64 11, !dbg !63
  %561 = select i1 %559, float 0.000000e+00, float %560, !dbg !63
  %562 = extractelement <16 x i1> %546, i64 10, !dbg !63
  %563 = extractelement <16 x float> %545, i64 10, !dbg !63
  %564 = select i1 %562, float 0.000000e+00, float %563, !dbg !63
  %565 = extractelement <16 x i1> %546, i64 9, !dbg !63
  %566 = extractelement <16 x float> %545, i64 9, !dbg !63
  %567 = select i1 %565, float 0.000000e+00, float %566, !dbg !63
  %568 = extractelement <16 x i1> %546, i64 8, !dbg !63
  %569 = extractelement <16 x float> %545, i64 8, !dbg !63
  %570 = select i1 %568, float 0.000000e+00, float %569, !dbg !63
  %571 = extractelement <16 x i1> %546, i64 7, !dbg !65
  %572 = extractelement <16 x float> %545, i64 7, !dbg !65
  %573 = select i1 %571, float 0.000000e+00, float %572, !dbg !65
  %574 = extractelement <16 x i1> %546, i64 6, !dbg !65
  %575 = extractelement <16 x float> %545, i64 6, !dbg !65
  %576 = select i1 %574, float 0.000000e+00, float %575, !dbg !65
  %577 = extractelement <16 x i1> %546, i64 5, !dbg !65
  %578 = extractelement <16 x float> %545, i64 5, !dbg !65
  %579 = select i1 %577, float 0.000000e+00, float %578, !dbg !65
  %580 = extractelement <16 x i1> %546, i64 4, !dbg !65
  %581 = extractelement <16 x float> %545, i64 4, !dbg !65
  %582 = select i1 %580, float 0.000000e+00, float %581, !dbg !65
  %583 = extractelement <16 x i1> %546, i64 3, !dbg !65
  %584 = extractelement <16 x float> %545, i64 3, !dbg !65
  %585 = select i1 %583, float 0.000000e+00, float %584, !dbg !65
  %586 = extractelement <16 x i1> %546, i64 2, !dbg !65
  %587 = extractelement <16 x float> %545, i64 2, !dbg !65
  %588 = select i1 %586, float 0.000000e+00, float %587, !dbg !65
  %589 = extractelement <16 x i1> %546, i64 1, !dbg !65
  %590 = extractelement <16 x float> %545, i64 1, !dbg !65
  %591 = select i1 %589, float 0.000000e+00, float %590, !dbg !65
  %592 = extractelement <16 x i1> %546, i64 0, !dbg !65
  %593 = extractelement <16 x float> %545, i64 0, !dbg !65
  %594 = select i1 %592, float 0.000000e+00, float %593, !dbg !65
  %595 = select i1 %42, float %570, float %573, !dbg !66
  %596 = select i1 %42, float %567, float %576, !dbg !66
  %597 = select i1 %42, float %564, float %579, !dbg !66
  %598 = select i1 %42, float %561, float %582, !dbg !66
  %599 = select i1 %43, float %558, float %585, !dbg !66
  %600 = select i1 %43, float %555, float %588, !dbg !66
  %601 = select i1 %43, float %552, float %591, !dbg !66
  %602 = select i1 %43, float %549, float %594, !dbg !66
  %603 = sext i32 %18 to i64, !dbg !67
  %604 = getelementptr float, ptr addrspace(1) %10, i64 %603, !dbg !67
  %605 = sext i32 %22 to i64, !dbg !67
  %606 = getelementptr float, ptr addrspace(1) %10, i64 %605, !dbg !67
  %607 = bitcast float %595 to i32, !dbg !68
  %608 = bitcast float %596 to i32, !dbg !68
  %609 = bitcast float %597 to i32, !dbg !68
  %610 = bitcast float %598 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %607, i32 %608, i32 %609, i32 %610, ptr addrspace(1) %604, i1 %26) #3, !dbg !68
  %611 = bitcast float %599 to i32, !dbg !68
  %612 = bitcast float %600 to i32, !dbg !68
  %613 = bitcast float %601 to i32, !dbg !68
  %614 = bitcast float %602 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %611, i32 %612, i32 %613, i32 %614, ptr addrspace(1) %606, i1 %27) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn7kslvs2amigcm62akbjn2wxolxwgq577j5us4yssjraq7756rq.py", directory: "inductor_cache/n7")
!4 = !{ptr @triton_poi_fused_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_4", linkageName: "triton_poi_fused_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 38, scope: !7)
!23 = !DILocation(line: 33, column: 51, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 64, scope: !7)
!26 = !DILocation(line: 33, column: 57, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 39, column: 27, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 56, column: 60, scope: !7)
!40 = !DILocation(line: 56, column: 52, scope: !7)
!41 = !DILocation(line: 56, column: 31, scope: !7)
!42 = !DILocation(line: 56, column: 74, scope: !7)
!43 = !DILocation(line: 56, column: 66, scope: !7)
!44 = !DILocation(line: 57, column: 31, scope: !7)
!45 = !DILocation(line: 57, column: 44, scope: !7)
!46 = !DILocation(line: 59, column: 31, scope: !7)
!47 = !DILocation(line: 59, column: 44, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 27, scope: !7)
!50 = !DILocation(line: 64, column: 20, scope: !7)
!51 = !DILocation(line: 68, column: 31, scope: !7)
!52 = !DILocation(line: 68, column: 44, scope: !7)
!53 = !DILocation(line: 70, column: 31, scope: !7)
!54 = !DILocation(line: 70, column: 44, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 67, column: 20, scope: !7)
!57 = !DILocation(line: 69, column: 20, scope: !7)
!58 = !DILocation(line: 71, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 73, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !64)
!64 = !DILocation(line: 50, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 77, column: 25, scope: !7)
!68 = !DILocation(line: 77, column: 37, scope: !7)
!69 = !DILocation(line: 77, column: 4, scope: !7)
