; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_layer_norm_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = lshr i32 %12, 5, !dbg !12
  %15 = shl i32 %12, 1, !dbg !12
  %16 = and i32 %15, 126, !dbg !12
  %17 = shl i32 %10, 7, !dbg !13
  %18 = or disjoint i32 %17, %16, !dbg !14
  %19 = sext i32 %18 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !16
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !16
  %24 = zext nneg i32 %16 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !17
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !18
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !18
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !22
  %33 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !16
  %34 = insertelement <2 x i32> %33, i32 %23, i64 1, !dbg !16
  %35 = bitcast <2 x i32> %34 to <2 x float>, !dbg !16
  %36 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !18
  %37 = insertelement <2 x i32> %36, i32 %28, i64 1, !dbg !18
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !18
  %39 = fadd <2 x float> %35, %38, !dbg !23
  %40 = extractelement <2 x float> %39, i64 0, !dbg !24
  %41 = extractelement <2 x float> %39, i64 1, !dbg !24
  %42 = fadd float %40, %41, !dbg !24
  %43 = select i1 %11, float %42, float 0.000000e+00, !dbg !24
  %44 = bitcast float %43 to i32, !dbg !29
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 16, i32 31), !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = fadd float %43, %46, !dbg !24
  %48 = bitcast float %47 to i32, !dbg !29
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 8, i32 31), !dbg !29
  %50 = bitcast i32 %49 to float, !dbg !29
  %51 = fadd float %47, %50, !dbg !24
  %52 = bitcast float %51 to i32, !dbg !29
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !29
  %54 = bitcast i32 %53 to float, !dbg !29
  %55 = fadd float %51, %54, !dbg !24
  %56 = bitcast float %55 to i32, !dbg !29
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !29
  %58 = bitcast i32 %57 to float, !dbg !29
  %59 = fadd float %55, %58, !dbg !24
  %60 = bitcast float %59 to i32, !dbg !29
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !29
  %62 = bitcast i32 %61 to float, !dbg !29
  %63 = fadd float %59, %62, !dbg !24
  %64 = icmp eq i32 %13, 0, !dbg !29
  %65 = and i32 %14, 1, !dbg !29
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !29
  %67 = bitcast float %63 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 %64) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %68 = icmp slt i32 %12, 2, !dbg !29
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !29
  %70 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %68) #5, !dbg !29
  %71 = bitcast i32 %70 to float, !dbg !29
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !29
  %73 = bitcast i32 %72 to float, !dbg !29
  %74 = fadd float %71, %73, !dbg !24
  %75 = and i32 %12, 1, !dbg !29
  %76 = icmp eq i32 %75, 0, !dbg !29
  %77 = and i1 %68, %76, !dbg !29
  %78 = bitcast float %74 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %78, i1 %77) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %79 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 1.280000e+02) #5, !dbg !30
  %81 = fsub float %40, %80, !dbg !31
  %82 = fsub float %41, %80, !dbg !31
  %83 = fmul float %81, %81, !dbg !32
  %84 = fmul float %82, %82, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %85 = fadd float %83, %84, !dbg !35
  %86 = select i1 %11, float %85, float 0.000000e+00, !dbg !35
  %87 = bitcast float %86 to i32, !dbg !33
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 16, i32 31), !dbg !33
  %89 = bitcast i32 %88 to float, !dbg !33
  %90 = fadd float %86, %89, !dbg !35
  %91 = bitcast float %90 to i32, !dbg !33
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !33
  %93 = bitcast i32 %92 to float, !dbg !33
  %94 = fadd float %90, %93, !dbg !35
  %95 = bitcast float %94 to i32, !dbg !33
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !33
  %97 = bitcast i32 %96 to float, !dbg !33
  %98 = fadd float %94, %97, !dbg !35
  %99 = bitcast float %98 to i32, !dbg !33
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !33
  %101 = bitcast i32 %100 to float, !dbg !33
  %102 = fadd float %98, %101, !dbg !35
  %103 = bitcast float %102 to i32, !dbg !33
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !33
  %105 = bitcast i32 %104 to float, !dbg !33
  %106 = fadd float %102, %105, !dbg !35
  %107 = bitcast float %106 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %107, i1 %64) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %108 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %68) #5, !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = fadd float %109, %111, !dbg !35
  %113 = bitcast float %112 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %113, i1 %77) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %114 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float 1.280000e+02) #5, !dbg !36
  %116 = fadd float %115, 0x3EE4F8B580000000, !dbg !37
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %117, 0, !dbg !38
  br i1 %.not.i, label %120, label %118, !dbg !38

118:                                              ; preds = %9
  %119 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %116), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

120:                                              ; preds = %9
  %121 = tail call float @llvm.nvvm.rsqrt.approx.f(float %116), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %118, %120
  %.0.i = phi float [ %119, %118 ], [ %121, %120 ], !dbg !38
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i4 = icmp eq i32 %123, 0, !dbg !38
  br i1 %.not.i4, label %126, label %124, !dbg !38

124:                                              ; preds = %__nv_rsqrtf.exit
  %125 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %116), !dbg !38
  br label %__nv_rsqrtf.exit6, !dbg !38

126:                                              ; preds = %__nv_rsqrtf.exit
  %127 = tail call float @llvm.nvvm.rsqrt.approx.f(float %116), !dbg !38
  br label %__nv_rsqrtf.exit6, !dbg !38

__nv_rsqrtf.exit6:                                ; preds = %124, %126
  %.0.i5 = phi float [ %125, %124 ], [ %127, %126 ], !dbg !38
  %128 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %129 = bitcast i32 %128 to float, !dbg !22
  %130 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %131 = bitcast i32 %130 to float, !dbg !22
  %132 = extractvalue { i32, i32 } %30, 1, !dbg !20
  %133 = bitcast i32 %132 to float, !dbg !20
  %134 = extractvalue { i32, i32 } %30, 0, !dbg !20
  %135 = bitcast i32 %134 to float, !dbg !20
  %136 = fmul float %81, %.0.i5, !dbg !39
  %137 = fmul float %82, %.0.i5, !dbg !39
  %138 = fmul float %136, %135, !dbg !40
  %139 = fmul float %137, %133, !dbg !40
  %140 = fadd float %138, %131, !dbg !41
  %141 = fadd float %139, %129, !dbg !41
  %142 = fcmp olt float %140, 0.000000e+00, !dbg !42
  %143 = fcmp olt float %141, 0.000000e+00, !dbg !42
  %144 = select i1 %142, float 0.000000e+00, float %140, !dbg !46
  %145 = select i1 %143, float 0.000000e+00, float %141, !dbg !46
  %146 = bitcast float %40 to i32, !dbg !47
  %147 = bitcast float %41 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %146, i32 %147, ptr addrspace(1) %20, i1 %11) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %148 = sext i32 %10 to i64, !dbg !49
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !49
  %urem = and i32 %12, 63, !dbg !50
  %150 = icmp eq i32 %urem, 0, !dbg !50
  %151 = bitcast float %.0.i to i32, !dbg !50
  %152 = and i1 %150, %11, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %149, i1 %152) #5, !dbg !50
  %153 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !51
  %154 = bitcast float %144 to i32, !dbg !52
  %155 = bitcast float %145 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %153, i1 %11) #5, !dbg !52
  %156 = getelementptr float, ptr addrspace(1) %5, i64 %148, !dbg !53
  %157 = bitcast float %80 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %156, i1 %152) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr7nkw62la2fozwubtpnlpqisdlrhc6bhgril24kbiyjl7ut47ct.py", directory: "inductor_cache/r7")
!4 = !{ptr @triton_per_fused_convolution_native_layer_norm_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_layer_norm_relu_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_layer_norm_relu_5", linkageName: "triton_per_fused_convolution_native_layer_norm_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 43, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 48, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 31, scope: !7)
!20 = !DILocation(line: 33, column: 36, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 35, column: 18, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 40, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 43, column: 19, scope: !7)
!31 = !DILocation(line: 44, column: 19, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !34)
!34 = !DILocation(line: 48, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!36 = !DILocation(line: 50, column: 20, scope: !7)
!37 = !DILocation(line: 52, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 28, scope: !7)
!39 = !DILocation(line: 55, column: 20, scope: !7)
!40 = !DILocation(line: 56, column: 20, scope: !7)
!41 = !DILocation(line: 57, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 59, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 60, column: 48, scope: !7)
!48 = !DILocation(line: 61, column: 4, scope: !7)
!49 = !DILocation(line: 62, column: 28, scope: !7)
!50 = !DILocation(line: 62, column: 40, scope: !7)
!51 = !DILocation(line: 63, column: 25, scope: !7)
!52 = !DILocation(line: 63, column: 46, scope: !7)
!53 = !DILocation(line: 64, column: 25, scope: !7)
!54 = !DILocation(line: 64, column: 37, scope: !7)
!55 = !DILocation(line: 64, column: 4, scope: !7)
