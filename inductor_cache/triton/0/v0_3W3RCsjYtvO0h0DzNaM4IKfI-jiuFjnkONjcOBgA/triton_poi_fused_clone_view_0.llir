; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_view_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %12, 32, !dbg !12
  %15 = or disjoint i32 %12, 48, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 6, !dbg !15
  %23 = or disjoint i32 %22, %12, !dbg !16
  %24 = or disjoint i32 %22, %13, !dbg !16
  %25 = or disjoint i32 %22, %14, !dbg !16
  %26 = or disjoint i32 %22, %15, !dbg !16
  %27 = or disjoint i32 %22, %10, !dbg !16
  %28 = icmp slt i32 %23, 36, !dbg !17
  %29 = icmp slt i32 %24, 36, !dbg !17
  %30 = icmp slt i32 %25, 36, !dbg !17
  %31 = icmp slt i32 %26, 36, !dbg !17
  %32 = icmp slt i32 %27, 36, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %33 = sdiv i32 %.frozen, 4096, !dbg !18
  %34 = mul i32 %33, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %34, !dbg !19
  %35 = shl i32 %23, 12, !dbg !20
  %36 = shl i32 %24, 12, !dbg !20
  %37 = shl i32 %25, 12, !dbg !20
  %38 = shl i32 %26, 12, !dbg !20
  %39 = mul i32 %33, 147456, !dbg !21
  %40 = add i32 %39, %.decomposed, !dbg !22
  %41 = add i32 %40, %35, !dbg !23
  %42 = add i32 %40, %36, !dbg !23
  %43 = add i32 %40, %37, !dbg !23
  %44 = add i32 %40, %38, !dbg !23
  %45 = sext i32 %41 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !24
  %47 = sext i32 %42 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !24
  %49 = sext i32 %43 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !24
  %51 = sext i32 %44 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !24
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %28) #2, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %29) #2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = bitcast i32 %65 to float, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %30) #2, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !25
  %76 = bitcast i32 %72 to float, !dbg !25
  %77 = bitcast i32 %73 to float, !dbg !25
  %78 = bitcast i32 %74 to float, !dbg !25
  %79 = bitcast i32 %75 to float, !dbg !25
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %31) #2, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !25
  %85 = bitcast i32 %81 to float, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = bitcast i32 %83 to float, !dbg !25
  %88 = bitcast i32 %84 to float, !dbg !25
  %89 = sext i32 %23 to i64, !dbg !26
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !26
  %91 = sext i32 %24 to i64, !dbg !26
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !26
  %93 = sext i32 %25 to i64, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !26
  %95 = sext i32 %26 to i64, !dbg !26
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !26
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %28) #2, !dbg !27
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %28) #2, !dbg !27
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %28) #2, !dbg !27
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %28) #2, !dbg !27
  %101 = bitcast i32 %100 to float, !dbg !27
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %29) #2, !dbg !27
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %29) #2, !dbg !27
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %29) #2, !dbg !27
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %29) #2, !dbg !27
  %106 = bitcast i32 %105 to float, !dbg !27
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %30) #2, !dbg !27
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %30) #2, !dbg !27
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %30) #2, !dbg !27
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %30) #2, !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %31) #2, !dbg !27
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %31) #2, !dbg !27
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %31) #2, !dbg !27
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %31) #2, !dbg !27
  %116 = bitcast i32 %115 to float, !dbg !27
  %117 = fadd float %58, %101, !dbg !28
  %118 = fadd float %59, %101, !dbg !28
  %119 = fadd float %60, %101, !dbg !28
  %120 = fadd float %61, %101, !dbg !28
  %121 = fadd float %67, %106, !dbg !28
  %122 = fadd float %68, %106, !dbg !28
  %123 = fadd float %69, %106, !dbg !28
  %124 = fadd float %70, %106, !dbg !28
  %125 = fadd float %76, %111, !dbg !28
  %126 = fadd float %77, %111, !dbg !28
  %127 = fadd float %78, %111, !dbg !28
  %128 = fadd float %79, %111, !dbg !28
  %129 = fadd float %85, %116, !dbg !28
  %130 = fadd float %86, %116, !dbg !28
  %131 = fadd float %87, %116, !dbg !28
  %132 = fadd float %88, %116, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %133 = mul i32 %17, 36, !dbg !30
  %134 = mul i32 %18, 36, !dbg !30
  %135 = mul i32 %19, 36, !dbg !30
  %136 = mul i32 %20, 36, !dbg !30
  %137 = add i32 %27, %133, !dbg !31
  %138 = add i32 %27, %134, !dbg !31
  %139 = add i32 %27, %135, !dbg !31
  %140 = add i32 %27, %136, !dbg !31
  %141 = sext i32 %137 to i64, !dbg !32
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !32
  %143 = sext i32 %138 to i64, !dbg !32
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !32
  %145 = sext i32 %139 to i64, !dbg !32
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !32
  %147 = sext i32 %140 to i64, !dbg !32
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !32
  %149 = shl i32 %8, 8, !dbg !33
  %150 = and i32 %149, 3840, !dbg !33
  %151 = or disjoint i32 %150, %12, !dbg !33
  %152 = and i32 %9, 1020, !dbg !33
  %153 = lshr exact i32 %150, 4, !dbg !33
  %154 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %153, !dbg !33
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %151, !dbg !33
  %156 = bitcast float %117 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !33
  %157 = or disjoint i32 %151, 64, !dbg !33
  %158 = lshr i32 %157, 6, !dbg !33
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !33
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %157, !dbg !33
  %161 = bitcast float %118 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #2, !dbg !33
  %162 = or disjoint i32 %151, 128, !dbg !33
  %163 = lshr i32 %162, 6, !dbg !33
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !33
  %165 = getelementptr float, ptr addrspace(3) %164, i32 %162, !dbg !33
  %166 = bitcast float %119 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !33
  %167 = or disjoint i32 %151, 192, !dbg !33
  %168 = lshr i32 %167, 6, !dbg !33
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !33
  %170 = getelementptr float, ptr addrspace(3) %169, i32 %167, !dbg !33
  %171 = bitcast float %120 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !33
  %172 = or disjoint i32 %151, 16, !dbg !33
  %173 = getelementptr float, ptr addrspace(3) %154, i32 %172, !dbg !33
  %174 = bitcast float %121 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !33
  %175 = or disjoint i32 %151, 80, !dbg !33
  %176 = lshr i32 %175, 6, !dbg !33
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !33
  %178 = getelementptr float, ptr addrspace(3) %177, i32 %175, !dbg !33
  %179 = bitcast float %122 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #2, !dbg !33
  %180 = or disjoint i32 %151, 144, !dbg !33
  %181 = lshr i32 %180, 6, !dbg !33
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %181, !dbg !33
  %183 = getelementptr float, ptr addrspace(3) %182, i32 %180, !dbg !33
  %184 = bitcast float %123 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #2, !dbg !33
  %185 = or disjoint i32 %151, 208, !dbg !33
  %186 = lshr i32 %185, 6, !dbg !33
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %186, !dbg !33
  %188 = getelementptr float, ptr addrspace(3) %187, i32 %185, !dbg !33
  %189 = bitcast float %124 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !33
  %190 = or disjoint i32 %151, 32, !dbg !33
  %191 = getelementptr float, ptr addrspace(3) %154, i32 %190, !dbg !33
  %192 = bitcast float %125 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #2, !dbg !33
  %193 = or disjoint i32 %151, 96, !dbg !33
  %194 = lshr i32 %193, 6, !dbg !33
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !33
  %196 = getelementptr float, ptr addrspace(3) %195, i32 %193, !dbg !33
  %197 = bitcast float %126 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #2, !dbg !33
  %198 = or disjoint i32 %151, 160, !dbg !33
  %199 = lshr i32 %198, 6, !dbg !33
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !33
  %201 = getelementptr float, ptr addrspace(3) %200, i32 %198, !dbg !33
  %202 = bitcast float %127 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #2, !dbg !33
  %203 = or disjoint i32 %151, 224, !dbg !33
  %204 = lshr i32 %203, 6, !dbg !33
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %204, !dbg !33
  %206 = getelementptr float, ptr addrspace(3) %205, i32 %203, !dbg !33
  %207 = bitcast float %128 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #2, !dbg !33
  %208 = or disjoint i32 %151, 48, !dbg !33
  %209 = getelementptr float, ptr addrspace(3) %154, i32 %208, !dbg !33
  %210 = bitcast float %129 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !33
  %211 = or disjoint i32 %151, 112, !dbg !33
  %212 = lshr i32 %211, 6, !dbg !33
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !33
  %214 = getelementptr float, ptr addrspace(3) %213, i32 %211, !dbg !33
  %215 = bitcast float %130 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #2, !dbg !33
  %216 = or disjoint i32 %151, 176, !dbg !33
  %217 = lshr i32 %216, 6, !dbg !33
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !33
  %219 = getelementptr float, ptr addrspace(3) %218, i32 %216, !dbg !33
  %220 = bitcast float %131 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #2, !dbg !33
  %221 = or disjoint i32 %151, 240, !dbg !33
  %222 = lshr i32 %221, 6, !dbg !33
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !33
  %224 = getelementptr float, ptr addrspace(3) %223, i32 %221, !dbg !33
  %225 = bitcast float %132 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %226 = lshr i32 %152, 6, !dbg !33
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !33
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %152, !dbg !33
  %229 = load i32, ptr addrspace(3) %228, align 4, !dbg !33
  %230 = or disjoint i32 %152, 1, !dbg !33
  %231 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %230, !dbg !33
  %232 = load i32, ptr addrspace(3) %231, align 4, !dbg !33
  %233 = or disjoint i32 %152, 2, !dbg !33
  %234 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %233, !dbg !33
  %235 = load i32, ptr addrspace(3) %234, align 4, !dbg !33
  %236 = or disjoint i32 %152, 3, !dbg !33
  %237 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %236, !dbg !33
  %238 = load i32, ptr addrspace(3) %237, align 4, !dbg !33
  %239 = or disjoint i32 %152, 1024, !dbg !33
  %240 = lshr i32 %239, 6, !dbg !33
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %240, !dbg !33
  %242 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %239, !dbg !33
  %243 = load i32, ptr addrspace(3) %242, align 4, !dbg !33
  %244 = or disjoint i32 %152, 1025, !dbg !33
  %245 = lshr i32 %244, 6, !dbg !33
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %245, !dbg !33
  %247 = getelementptr inbounds float, ptr addrspace(3) %246, i32 %244, !dbg !33
  %248 = load i32, ptr addrspace(3) %247, align 4, !dbg !33
  %249 = or disjoint i32 %152, 1026, !dbg !33
  %250 = lshr i32 %249, 6, !dbg !33
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !33
  %252 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %249, !dbg !33
  %253 = load i32, ptr addrspace(3) %252, align 4, !dbg !33
  %254 = or disjoint i32 %152, 1027, !dbg !33
  %255 = lshr i32 %254, 6, !dbg !33
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !33
  %257 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %254, !dbg !33
  %258 = load i32, ptr addrspace(3) %257, align 4, !dbg !33
  %259 = or disjoint i32 %152, 2048, !dbg !33
  %260 = lshr i32 %259, 6, !dbg !33
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %260, !dbg !33
  %262 = getelementptr inbounds float, ptr addrspace(3) %261, i32 %259, !dbg !33
  %263 = load i32, ptr addrspace(3) %262, align 4, !dbg !33
  %264 = or disjoint i32 %152, 2049, !dbg !33
  %265 = lshr i32 %264, 6, !dbg !33
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %265, !dbg !33
  %267 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %264, !dbg !33
  %268 = load i32, ptr addrspace(3) %267, align 4, !dbg !33
  %269 = or disjoint i32 %152, 2050, !dbg !33
  %270 = lshr i32 %269, 6, !dbg !33
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %270, !dbg !33
  %272 = getelementptr inbounds float, ptr addrspace(3) %271, i32 %269, !dbg !33
  %273 = load i32, ptr addrspace(3) %272, align 4, !dbg !33
  %274 = or disjoint i32 %152, 2051, !dbg !33
  %275 = lshr i32 %274, 6, !dbg !33
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !33
  %277 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %274, !dbg !33
  %278 = load i32, ptr addrspace(3) %277, align 4, !dbg !33
  %279 = or disjoint i32 %152, 3072, !dbg !33
  %280 = lshr i32 %279, 6, !dbg !33
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !33
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %279, !dbg !33
  %283 = load i32, ptr addrspace(3) %282, align 4, !dbg !33
  %284 = or disjoint i32 %152, 3073, !dbg !33
  %285 = lshr i32 %284, 6, !dbg !33
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !33
  %287 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %284, !dbg !33
  %288 = load i32, ptr addrspace(3) %287, align 4, !dbg !33
  %289 = or disjoint i32 %152, 3074, !dbg !33
  %290 = lshr i32 %289, 6, !dbg !33
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !33
  %292 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %289, !dbg !33
  %293 = load i32, ptr addrspace(3) %292, align 4, !dbg !33
  %294 = or disjoint i32 %152, 3075, !dbg !33
  %295 = lshr i32 %294, 6, !dbg !33
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !33
  %297 = getelementptr inbounds float, ptr addrspace(3) %296, i32 %294, !dbg !33
  %298 = load i32, ptr addrspace(3) %297, align 4, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %229, i32 %232, i32 %235, i32 %238, ptr addrspace(1) %142, i1 %32) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %243, i32 %248, i32 %253, i32 %258, ptr addrspace(1) %144, i1 %32) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %263, i32 %268, i32 %273, i32 %278, ptr addrspace(1) %146, i1 %32) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %283, i32 %288, i32 %293, i32 %298, ptr addrspace(1) %148, i1 %32) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cagwpezg2bapxucni6m5e36vyrybkdozg7hvqzt72rdzovwu4nie.py", directory: "inductor_cache/ag")
!4 = !{ptr @triton_poi_fused_clone_view_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_view_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_view_0", linkageName: "triton_poi_fused_clone_view_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 4, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 33, scope: !7)
!32 = !DILocation(line: 36, column: 28, scope: !7)
!33 = !DILocation(line: 36, column: 47, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
