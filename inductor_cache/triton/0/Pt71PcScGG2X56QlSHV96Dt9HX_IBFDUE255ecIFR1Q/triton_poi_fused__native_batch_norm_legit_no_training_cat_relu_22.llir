; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = sdiv i32 %14, 256, !dbg !14
  %16 = srem i32 %15, 64, !dbg !15
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !17
  %20 = sext i32 %16 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %45 = fadd float %28, 0x3EE4F8B580000000, !dbg !26
  %46 = fadd float %30, 0x3EE4F8B580000000, !dbg !26
  %47 = fadd float %32, 0x3EE4F8B580000000, !dbg !26
  %48 = fadd float %34, 0x3EE4F8B580000000, !dbg !26
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %49, 0, !dbg !27
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i = icmp eq i32 %50, 0, !dbg !27
  br i1 %.not.i, label %56, label %51, !dbg !27

51:                                               ; preds = %8
  br i1 %.not1.i, label %54, label %52, !dbg !27

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

56:                                               ; preds = %8
  br i1 %.not1.i, label %59, label %57, !dbg !27

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !27
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i1 = icmp eq i32 %61, 0, !dbg !27
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i4 = icmp eq i32 %62, 0, !dbg !27
  br i1 %.not.i1, label %68, label %63, !dbg !27

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !27

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !27

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %64, %66, %69, %71
  %.0.i3 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !27
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i6 = icmp eq i32 %73, 0, !dbg !27
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i9 = icmp eq i32 %74, 0, !dbg !27
  br i1 %.not.i6, label %80, label %75, !dbg !27

75:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %78, label %76, !dbg !27

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

80:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %83, label %81, !dbg !27

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %76, %78, %81, %83
  %.0.i8 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !27
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i11 = icmp eq i32 %85, 0, !dbg !27
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i14 = icmp eq i32 %86, 0, !dbg !27
  br i1 %.not.i11, label %92, label %87, !dbg !27

87:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %90, label %88, !dbg !27

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

92:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %95, label %93, !dbg !27

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %88, %90, %93, %95
  %.0.i13 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !17
  %98 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !19
  %99 = insertelement <4 x i32> %98, i32 %24, i64 1, !dbg !19
  %100 = insertelement <4 x i32> %99, i32 %23, i64 2, !dbg !19
  %101 = insertelement <4 x i32> %100, i32 %22, i64 3, !dbg !19
  %102 = bitcast <4 x i32> %101 to <4 x float>, !dbg !19
  %103 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !17
  %104 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !17
  %105 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !17
  %106 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !25
  %107 = insertelement <4 x i32> %106, i32 %43, i64 1, !dbg !25
  %108 = insertelement <4 x i32> %107, i32 %42, i64 2, !dbg !25
  %109 = insertelement <4 x i32> %108, i32 %41, i64 3, !dbg !25
  %110 = bitcast <4 x i32> %109 to <4 x float>, !dbg !25
  %111 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !23
  %112 = insertelement <4 x i32> %111, i32 %38, i64 1, !dbg !23
  %113 = insertelement <4 x i32> %112, i32 %37, i64 2, !dbg !23
  %114 = insertelement <4 x i32> %113, i32 %36, i64 3, !dbg !23
  %115 = bitcast <4 x i32> %114 to <4 x float>, !dbg !23
  %.frozen = freeze i32 %14, !dbg !28
  %116 = sdiv i32 %.frozen, 16384, !dbg !28
  %117 = mul i32 %116, 16384, !dbg !29
  %.decomposed = sub i32 %.frozen, %117, !dbg !29
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !30
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !30
  %122 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !17
  %123 = insertelement <4 x i32> %122, i32 %103, i64 1, !dbg !17
  %124 = insertelement <4 x i32> %123, i32 %104, i64 2, !dbg !17
  %125 = insertelement <4 x i32> %124, i32 %105, i64 3, !dbg !17
  %126 = bitcast <4 x i32> %125 to <4 x float>, !dbg !17
  %127 = fsub <4 x float> %126, %102, !dbg !31
  %128 = insertelement <4 x float> poison, float %121, i64 0, !dbg !32
  %129 = insertelement <4 x float> %128, float %120, i64 1, !dbg !32
  %130 = insertelement <4 x float> %129, float %119, i64 2, !dbg !32
  %131 = insertelement <4 x float> %130, float %118, i64 3, !dbg !32
  %132 = fmul <4 x float> %127, %131, !dbg !32
  %133 = fmul <4 x float> %132, %115, !dbg !33
  %134 = fadd <4 x float> %133, %110, !dbg !34
  %135 = fcmp olt <4 x float> %134, zeroinitializer, !dbg !35
  %136 = extractelement <4 x i1> %135, i64 3, !dbg !39
  %137 = extractelement <4 x i1> %135, i64 2, !dbg !39
  %138 = extractelement <4 x i1> %135, i64 1, !dbg !39
  %139 = extractelement <4 x i1> %135, i64 0, !dbg !39
  %140 = shl i32 %116, 16, !dbg !40
  %141 = add i32 %140, %.decomposed, !dbg !41
  %142 = sext i32 %141 to i64, !dbg !42
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %142, !dbg !42
  %bc = bitcast <4 x float> %134 to <4 x i32>, !dbg !43
  %144 = extractelement <4 x i32> %bc, i64 3, !dbg !43
  %145 = select i1 %136, i32 0, i32 %144, !dbg !39
  %bc16 = bitcast <4 x float> %134 to <4 x i32>, !dbg !43
  %146 = extractelement <4 x i32> %bc16, i64 2, !dbg !43
  %147 = select i1 %137, i32 0, i32 %146, !dbg !39
  %bc17 = bitcast <4 x float> %134 to <4 x i32>, !dbg !43
  %148 = extractelement <4 x i32> %bc17, i64 1, !dbg !43
  %149 = select i1 %138, i32 0, i32 %148, !dbg !39
  %bc18 = bitcast <4 x float> %134 to <4 x i32>, !dbg !43
  %150 = extractelement <4 x i32> %bc18, i64 0, !dbg !43
  %151 = select i1 %139, i32 0, i32 %150, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %145, i32 %147, i32 %149, i32 %151, ptr addrspace(1) %143, i1 true) #3, !dbg !43
  %152 = shl i32 %116, 17, !dbg !44
  %153 = add i32 %152, %.decomposed, !dbg !45
  %154 = sext i32 %153 to i64, !dbg !46
  %155 = getelementptr float, ptr addrspace(1) %6, i64 %154, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %145, i32 %147, i32 %149, i32 %151, ptr addrspace(1) %155, i1 true) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c65pv572fzdntbe6fi2tbnvffrfdj2gwvo6wgi4b6vkiodg25bnh.py", directory: "inductor_cache/65")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 28, column: 30, scope: !7)
!17 = !DILocation(line: 28, column: 35, scope: !7)
!18 = !DILocation(line: 29, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 26, scope: !7)
!28 = !DILocation(line: 26, column: 19, scope: !7)
!29 = !DILocation(line: 27, column: 19, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 20, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 45, column: 42, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 46, column: 36, scope: !7)
!41 = !DILocation(line: 46, column: 30, scope: !7)
!42 = !DILocation(line: 46, column: 25, scope: !7)
!43 = !DILocation(line: 46, column: 48, scope: !7)
!44 = !DILocation(line: 47, column: 37, scope: !7)
!45 = !DILocation(line: 47, column: 30, scope: !7)
!46 = !DILocation(line: 47, column: 25, scope: !7)
!47 = !DILocation(line: 47, column: 49, scope: !7)
!48 = !DILocation(line: 47, column: 4, scope: !7)
