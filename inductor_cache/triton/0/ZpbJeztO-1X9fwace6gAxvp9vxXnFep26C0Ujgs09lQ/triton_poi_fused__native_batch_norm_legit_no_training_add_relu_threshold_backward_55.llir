; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_55(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 1016, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = srem i32 %15, 8192, !dbg !14
  %18 = srem i32 %16, 8192, !dbg !14
  %19 = sext i32 %15 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = sext i32 %16 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #4, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #4, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !18
  %29 = sext i32 %17 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !19
  %31 = sext i32 %18 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #4, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = bitcast i32 %50 to float, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !23
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #4, !dbg !24
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !25
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #4, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !26
  %63 = fadd float %42, 0x3EE4F8B580000000, !dbg !27
  %64 = fadd float %43, 0x3EE4F8B580000000, !dbg !27
  %65 = fadd float %44, 0x3EE4F8B580000000, !dbg !27
  %66 = fadd float %45, 0x3EE4F8B580000000, !dbg !27
  %67 = fadd float %51, 0x3EE4F8B580000000, !dbg !27
  %68 = fadd float %52, 0x3EE4F8B580000000, !dbg !27
  %69 = fadd float %53, 0x3EE4F8B580000000, !dbg !27
  %70 = fadd float %54, 0x3EE4F8B580000000, !dbg !27
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i = icmp eq i32 %71, 0, !dbg !28
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i = icmp eq i32 %72, 0, !dbg !28
  br i1 %.not.i, label %78, label %73, !dbg !28

73:                                               ; preds = %9
  br i1 %.not1.i, label %76, label %74, !dbg !28

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

78:                                               ; preds = %9
  br i1 %.not1.i, label %81, label %79, !dbg !28

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !28
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i15 = icmp eq i32 %83, 0, !dbg !28
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i18 = icmp eq i32 %84, 0, !dbg !28
  br i1 %.not.i15, label %90, label %85, !dbg !28

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %88, label %86, !dbg !28

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #4, !dbg !28
  br label %__nv_sqrtf.exit19, !dbg !28

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #4, !dbg !28
  br label %__nv_sqrtf.exit19, !dbg !28

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %93, label %91, !dbg !28

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #4, !dbg !28
  br label %__nv_sqrtf.exit19, !dbg !28

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #4, !dbg !28
  br label %__nv_sqrtf.exit19, !dbg !28

__nv_sqrtf.exit19:                                ; preds = %86, %88, %91, %93
  %.0.i17 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !28
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i20 = icmp eq i32 %95, 0, !dbg !28
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i23 = icmp eq i32 %96, 0, !dbg !28
  br i1 %.not.i20, label %102, label %97, !dbg !28

97:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %100, label %98, !dbg !28

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #4, !dbg !28
  br label %__nv_sqrtf.exit24, !dbg !28

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #4, !dbg !28
  br label %__nv_sqrtf.exit24, !dbg !28

102:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %105, label %103, !dbg !28

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #4, !dbg !28
  br label %__nv_sqrtf.exit24, !dbg !28

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #4, !dbg !28
  br label %__nv_sqrtf.exit24, !dbg !28

__nv_sqrtf.exit24:                                ; preds = %98, %100, %103, %105
  %.0.i22 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !28
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i25 = icmp eq i32 %107, 0, !dbg !28
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i28 = icmp eq i32 %108, 0, !dbg !28
  br i1 %.not.i25, label %114, label %109, !dbg !28

109:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %112, label %110, !dbg !28

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #4, !dbg !28
  br label %__nv_sqrtf.exit29, !dbg !28

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #4, !dbg !28
  br label %__nv_sqrtf.exit29, !dbg !28

114:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %117, label %115, !dbg !28

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #4, !dbg !28
  br label %__nv_sqrtf.exit29, !dbg !28

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #4, !dbg !28
  br label %__nv_sqrtf.exit29, !dbg !28

__nv_sqrtf.exit29:                                ; preds = %110, %112, %115, %117
  %.0.i27 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !28
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i30 = icmp eq i32 %119, 0, !dbg !28
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i33 = icmp eq i32 %120, 0, !dbg !28
  br i1 %.not.i30, label %126, label %121, !dbg !28

121:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %124, label %122, !dbg !28

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !28
  br label %__nv_sqrtf.exit34, !dbg !28

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !28
  br label %__nv_sqrtf.exit34, !dbg !28

126:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %129, label %127, !dbg !28

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !28
  br label %__nv_sqrtf.exit34, !dbg !28

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !28
  br label %__nv_sqrtf.exit34, !dbg !28

__nv_sqrtf.exit34:                                ; preds = %122, %124, %127, %129
  %.0.i32 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !28
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i35 = icmp eq i32 %131, 0, !dbg !28
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i38 = icmp eq i32 %132, 0, !dbg !28
  br i1 %.not.i35, label %138, label %133, !dbg !28

133:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %136, label %134, !dbg !28

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !28
  br label %__nv_sqrtf.exit39, !dbg !28

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !28
  br label %__nv_sqrtf.exit39, !dbg !28

138:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %141, label %139, !dbg !28

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !28
  br label %__nv_sqrtf.exit39, !dbg !28

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !28
  br label %__nv_sqrtf.exit39, !dbg !28

__nv_sqrtf.exit39:                                ; preds = %134, %136, %139, %141
  %.0.i37 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !28
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i40 = icmp eq i32 %143, 0, !dbg !28
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i43 = icmp eq i32 %144, 0, !dbg !28
  br i1 %.not.i40, label %150, label %145, !dbg !28

145:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %148, label %146, !dbg !28

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !28
  br label %__nv_sqrtf.exit44, !dbg !28

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !28
  br label %__nv_sqrtf.exit44, !dbg !28

150:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %153, label %151, !dbg !28

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !28
  br label %__nv_sqrtf.exit44, !dbg !28

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !28
  br label %__nv_sqrtf.exit44, !dbg !28

__nv_sqrtf.exit44:                                ; preds = %146, %148, %151, %153
  %.0.i42 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !28
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i45 = icmp eq i32 %155, 0, !dbg !28
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i48 = icmp eq i32 %156, 0, !dbg !28
  br i1 %.not.i45, label %162, label %157, !dbg !28

157:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %160, label %158, !dbg !28

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !28
  br label %__nv_sqrtf.exit49, !dbg !28

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !28
  br label %__nv_sqrtf.exit49, !dbg !28

162:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %165, label %163, !dbg !28

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !28
  br label %__nv_sqrtf.exit49, !dbg !28

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !28
  br label %__nv_sqrtf.exit49, !dbg !28

__nv_sqrtf.exit49:                                ; preds = %158, %160, %163, %165
  %.0.i47 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !28
  %167 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %168 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %169 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %170 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %171 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %172 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %173 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %174 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %175 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %176 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %177 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %178 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %179 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %180 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %181 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %182 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %183 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %184 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %185 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %186 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %187 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %188 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %189 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %190 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %191 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !24
  %192 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !24
  %193 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !24
  %194 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !24
  %195 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !24
  %196 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !24
  %197 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !24
  %198 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !24
  %199 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %200 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %201 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %202 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %203 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %204 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %205 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %206 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %207 = shl i32 %12, 2, !dbg !12
  %208 = and i32 %207, 508, !dbg !12
  %209 = or disjoint i32 %208, 512, !dbg !12
  %210 = or disjoint i32 %11, %209, !dbg !13
  %211 = or disjoint i32 %11, %208, !dbg !13
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !29
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !29
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !29
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !29
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !29
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !29
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !29
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !29
  %220 = sext i32 %211 to i64, !dbg !30
  %221 = getelementptr float, ptr addrspace(1) %6, i64 %220, !dbg !30
  %222 = sext i32 %210 to i64, !dbg !30
  %223 = getelementptr float, ptr addrspace(1) %6, i64 %222, !dbg !30
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %225 = getelementptr inbounds i8, ptr addrspace(3) %224, i32 16, !dbg !31
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !31
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %209, !dbg !31
  %228 = getelementptr inbounds i8, ptr addrspace(3) %226, i32 4, !dbg !31
  %229 = getelementptr inbounds i8, ptr addrspace(3) %226, i32 8, !dbg !31
  %230 = getelementptr inbounds i8, ptr addrspace(3) %226, i32 12, !dbg !31
  %231 = getelementptr i1, ptr addrspace(1) %7, i64 %19, !dbg !32
  %232 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !18
  %233 = insertelement <4 x i32> %232, i32 %179, i64 1, !dbg !18
  %234 = insertelement <4 x i32> %233, i32 %177, i64 2, !dbg !18
  %235 = insertelement <4 x i32> %234, i32 %175, i64 3, !dbg !18
  %236 = bitcast <4 x i32> %235 to <4 x float>, !dbg !18
  %237 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !20
  %238 = insertelement <4 x i32> %237, i32 %180, i64 1, !dbg !20
  %239 = insertelement <4 x i32> %238, i32 %178, i64 2, !dbg !20
  %240 = insertelement <4 x i32> %239, i32 %176, i64 3, !dbg !20
  %241 = bitcast <4 x i32> %240 to <4 x float>, !dbg !20
  %242 = fsub <4 x float> %236, %241, !dbg !33
  %243 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !26
  %244 = insertelement <4 x i32> %243, i32 %189, i64 1, !dbg !26
  %245 = insertelement <4 x i32> %244, i32 %188, i64 2, !dbg !26
  %246 = insertelement <4 x i32> %245, i32 %187, i64 3, !dbg !26
  %247 = bitcast <4 x i32> %246 to <4 x float>, !dbg !26
  %248 = insertelement <4 x i32> poison, i32 %198, i64 0, !dbg !24
  %249 = insertelement <4 x i32> %248, i32 %197, i64 1, !dbg !24
  %250 = insertelement <4 x i32> %249, i32 %196, i64 2, !dbg !24
  %251 = insertelement <4 x i32> %250, i32 %195, i64 3, !dbg !24
  %252 = bitcast <4 x i32> %251 to <4 x float>, !dbg !24
  %253 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !16
  %254 = insertelement <4 x i32> %253, i32 %205, i64 1, !dbg !16
  %255 = insertelement <4 x i32> %254, i32 %204, i64 2, !dbg !16
  %256 = insertelement <4 x i32> %255, i32 %203, i64 3, !dbg !16
  %257 = bitcast <4 x i32> %256 to <4 x float>, !dbg !16
  %258 = insertelement <4 x float> poison, float %212, i64 0, !dbg !34
  %259 = insertelement <4 x float> %258, float %213, i64 1, !dbg !34
  %260 = insertelement <4 x float> %259, float %214, i64 2, !dbg !34
  %261 = insertelement <4 x float> %260, float %215, i64 3, !dbg !34
  %262 = fmul <4 x float> %242, %261, !dbg !34
  %263 = fmul <4 x float> %262, %252, !dbg !35
  %264 = fadd <4 x float> %263, %247, !dbg !36
  %265 = fadd <4 x float> %264, %257, !dbg !37
  %266 = fcmp olt <4 x float> %265, zeroinitializer, !dbg !38
  %267 = select <4 x i1> %266, <4 x float> zeroinitializer, <4 x float> %265, !dbg !42
  %268 = fcmp ole <4 x float> %267, zeroinitializer, !dbg !43
  %bc = bitcast <4 x float> %267 to <4 x i32>, !dbg !31
  %269 = extractelement <4 x i32> %bc, i64 0, !dbg !31
  %bc50 = bitcast <4 x float> %267 to <4 x i32>, !dbg !31
  %270 = extractelement <4 x i32> %bc50, i64 1, !dbg !31
  %bc51 = bitcast <4 x float> %267 to <4 x i32>, !dbg !31
  %271 = extractelement <4 x i32> %bc51, i64 2, !dbg !31
  %bc52 = bitcast <4 x float> %267 to <4 x i32>, !dbg !31
  %272 = extractelement <4 x i32> %bc52, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %224, i32 %269, i32 %270, i32 %271, i32 %272, i1 true) #4, !dbg !31
  %273 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !18
  %274 = insertelement <4 x i32> %273, i32 %171, i64 1, !dbg !18
  %275 = insertelement <4 x i32> %274, i32 %169, i64 2, !dbg !18
  %276 = insertelement <4 x i32> %275, i32 %167, i64 3, !dbg !18
  %277 = bitcast <4 x i32> %276 to <4 x float>, !dbg !18
  %278 = insertelement <4 x i32> poison, i32 %174, i64 0, !dbg !20
  %279 = insertelement <4 x i32> %278, i32 %172, i64 1, !dbg !20
  %280 = insertelement <4 x i32> %279, i32 %170, i64 2, !dbg !20
  %281 = insertelement <4 x i32> %280, i32 %168, i64 3, !dbg !20
  %282 = bitcast <4 x i32> %281 to <4 x float>, !dbg !20
  %283 = fsub <4 x float> %277, %282, !dbg !33
  %284 = insertelement <4 x i32> poison, i32 %186, i64 0, !dbg !26
  %285 = insertelement <4 x i32> %284, i32 %185, i64 1, !dbg !26
  %286 = insertelement <4 x i32> %285, i32 %184, i64 2, !dbg !26
  %287 = insertelement <4 x i32> %286, i32 %183, i64 3, !dbg !26
  %288 = bitcast <4 x i32> %287 to <4 x float>, !dbg !26
  %289 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !24
  %290 = insertelement <4 x i32> %289, i32 %193, i64 1, !dbg !24
  %291 = insertelement <4 x i32> %290, i32 %192, i64 2, !dbg !24
  %292 = insertelement <4 x i32> %291, i32 %191, i64 3, !dbg !24
  %293 = bitcast <4 x i32> %292 to <4 x float>, !dbg !24
  %294 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !16
  %295 = insertelement <4 x i32> %294, i32 %201, i64 1, !dbg !16
  %296 = insertelement <4 x i32> %295, i32 %200, i64 2, !dbg !16
  %297 = insertelement <4 x i32> %296, i32 %199, i64 3, !dbg !16
  %298 = bitcast <4 x i32> %297 to <4 x float>, !dbg !16
  %299 = insertelement <4 x float> poison, float %216, i64 0, !dbg !34
  %300 = insertelement <4 x float> %299, float %217, i64 1, !dbg !34
  %301 = insertelement <4 x float> %300, float %218, i64 2, !dbg !34
  %302 = insertelement <4 x float> %301, float %219, i64 3, !dbg !34
  %303 = fmul <4 x float> %283, %302, !dbg !34
  %304 = fmul <4 x float> %303, %293, !dbg !35
  %305 = fadd <4 x float> %304, %288, !dbg !36
  %306 = fadd <4 x float> %305, %298, !dbg !37
  %307 = fcmp olt <4 x float> %306, zeroinitializer, !dbg !38
  %308 = select <4 x i1> %307, <4 x float> zeroinitializer, <4 x float> %306, !dbg !42
  %309 = fcmp ole <4 x float> %308, zeroinitializer, !dbg !43
  %bc53 = bitcast <4 x float> %308 to <4 x i32>, !dbg !31
  %310 = extractelement <4 x i32> %bc53, i64 0, !dbg !31
  %bc54 = bitcast <4 x float> %308 to <4 x i32>, !dbg !31
  %311 = extractelement <4 x i32> %bc54, i64 1, !dbg !31
  %bc55 = bitcast <4 x float> %308 to <4 x i32>, !dbg !31
  %312 = extractelement <4 x i32> %bc55, i64 2, !dbg !31
  %bc56 = bitcast <4 x float> %308 to <4 x i32>, !dbg !31
  %313 = extractelement <4 x i32> %bc56, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %225, i32 %310, i32 %311, i32 %312, i32 %313, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %314 = load <4 x i32>, ptr addrspace(3) %227, align 16, !dbg !31
  %.extract = load i32, ptr addrspace(3) %226, align 16, !dbg !31
  %.extract8 = load i32, ptr addrspace(3) %228, align 4, !dbg !31
  %.extract9 = load i32, ptr addrspace(3) %229, align 8, !dbg !31
  %.extract10 = load i32, ptr addrspace(3) %230, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %221, i1 true) #4, !dbg !31
  %.extract11 = extractelement <4 x i32> %314, i64 0, !dbg !31
  %.extract12 = extractelement <4 x i32> %314, i64 1, !dbg !31
  %.extract13 = extractelement <4 x i32> %314, i64 2, !dbg !31
  %.extract14 = extractelement <4 x i32> %314, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %223, i1 true) #4, !dbg !31
  %315 = zext <4 x i1> %268 to <4 x i8>, !dbg !44
  %316 = bitcast <4 x i8> %315 to i32, !dbg !44
  %317 = zext <4 x i1> %309 to <4 x i8>, !dbg !44
  %318 = bitcast <4 x i8> %317 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %316, i32 %318, ptr addrspace(1) %231, i1 true) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgfpy4vzkwzmrjxbhcv2tbusgfvxfl6f66lmujkwq5gkzhshlofm.py", directory: "inductor_cache/gf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_55, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_55, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_55", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_55", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 26, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 48, column: 25, scope: !7)
!31 = !DILocation(line: 48, column: 37, scope: !7)
!32 = !DILocation(line: 49, column: 25, scope: !7)
!33 = !DILocation(line: 32, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 19, scope: !7)
!35 = !DILocation(line: 41, column: 20, scope: !7)
!36 = !DILocation(line: 42, column: 20, scope: !7)
!37 = !DILocation(line: 43, column: 19, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 45, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 47, column: 21, scope: !7)
!44 = !DILocation(line: 49, column: 37, scope: !7)
!45 = !DILocation(line: 49, column: 4, scope: !7)
