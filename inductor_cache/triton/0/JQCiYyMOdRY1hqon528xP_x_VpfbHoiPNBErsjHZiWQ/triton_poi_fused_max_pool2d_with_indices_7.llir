; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 4, !dbg !13
  %18 = or disjoint i32 %13, 5, !dbg !13
  %19 = or disjoint i32 %13, 6, !dbg !13
  %20 = or disjoint i32 %13, 7, !dbg !13
  %21 = or disjoint i32 %6, %11, !dbg !13
  %22 = or disjoint i32 %6, %12, !dbg !13
  %23 = icmp slt i32 %13, 129792, !dbg !14
  %24 = icmp slt i32 %21, 129792, !dbg !14
  %25 = icmp slt i32 %22, 129792, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %26 = sdiv i32 %.frozen, 13, !dbg !15
  %27 = mul i32 %26, 13, !dbg !16
  %.decomposed = sub i32 %.frozen, %27, !dbg !16
  %.frozen28 = freeze i32 %14, !dbg !15
  %28 = sdiv i32 %.frozen28, 13, !dbg !15
  %29 = mul i32 %28, 13, !dbg !16
  %.decomposed29 = sub i32 %.frozen28, %29, !dbg !16
  %.frozen30 = freeze i32 %15, !dbg !15
  %30 = sdiv i32 %.frozen30, 13, !dbg !15
  %31 = mul i32 %30, 13, !dbg !16
  %.decomposed31 = sub i32 %.frozen30, %31, !dbg !16
  %.frozen32 = freeze i32 %16, !dbg !15
  %32 = sdiv i32 %.frozen32, 13, !dbg !15
  %33 = mul i32 %32, 13, !dbg !16
  %.decomposed33 = sub i32 %.frozen32, %33, !dbg !16
  %.frozen34 = freeze i32 %17, !dbg !15
  %34 = sdiv i32 %.frozen34, 13, !dbg !15
  %35 = mul i32 %34, 13, !dbg !16
  %.decomposed35 = sub i32 %.frozen34, %35, !dbg !16
  %.frozen36 = freeze i32 %18, !dbg !15
  %36 = sdiv i32 %.frozen36, 13, !dbg !15
  %37 = mul i32 %36, 13, !dbg !16
  %.decomposed37 = sub i32 %.frozen36, %37, !dbg !16
  %.frozen38 = freeze i32 %19, !dbg !15
  %38 = sdiv i32 %.frozen38, 13, !dbg !15
  %39 = mul i32 %38, 13, !dbg !16
  %.decomposed39 = sub i32 %.frozen38, %39, !dbg !16
  %.frozen40 = freeze i32 %20, !dbg !15
  %40 = sdiv i32 %.frozen40, 13, !dbg !15
  %41 = mul i32 %40, 13, !dbg !16
  %.decomposed41 = sub i32 %.frozen40, %41, !dbg !16
  %42 = srem i32 %26, 13, !dbg !17
  %43 = srem i32 %28, 13, !dbg !17
  %44 = srem i32 %30, 13, !dbg !17
  %45 = srem i32 %32, 13, !dbg !17
  %46 = srem i32 %34, 13, !dbg !17
  %47 = srem i32 %36, 13, !dbg !17
  %48 = srem i32 %38, 13, !dbg !17
  %49 = srem i32 %40, 13, !dbg !17
  %50 = sdiv i32 %13, 169, !dbg !18
  %51 = sdiv i32 %14, 169, !dbg !18
  %52 = sdiv i32 %15, 169, !dbg !18
  %53 = sdiv i32 %16, 169, !dbg !18
  %54 = sdiv i32 %17, 169, !dbg !18
  %55 = sdiv i32 %18, 169, !dbg !18
  %56 = sdiv i32 %19, 169, !dbg !18
  %57 = sdiv i32 %20, 169, !dbg !18
  %.frozen42 = freeze i32 %21, !dbg !19
  %58 = sdiv i32 %.frozen42, 32448, !dbg !19
  %.frozen44 = freeze i32 %22, !dbg !19
  %59 = sdiv i32 %.frozen44, 32448, !dbg !19
  %.frozen46 = freeze i32 %13, !dbg !19
  %60 = sdiv i32 %.frozen46, 32448, !dbg !19
  %61 = mul i32 %58, 32448, !dbg !20
  %.decomposed43 = sub i32 %.frozen42, %61, !dbg !20
  %62 = mul i32 %59, 32448, !dbg !20
  %.decomposed45 = sub i32 %.frozen44, %62, !dbg !20
  %63 = mul i32 %60, 32448, !dbg !20
  %.decomposed47 = sub i32 %.frozen46, %63, !dbg !20
  %64 = shl nsw i32 %.decomposed, 1, !dbg !21
  %65 = shl nsw i32 %.decomposed29, 1, !dbg !21
  %66 = shl nsw i32 %.decomposed31, 1, !dbg !21
  %67 = shl nsw i32 %.decomposed33, 1, !dbg !21
  %68 = shl nsw i32 %.decomposed35, 1, !dbg !21
  %69 = shl nsw i32 %.decomposed37, 1, !dbg !21
  %70 = shl nsw i32 %.decomposed39, 1, !dbg !21
  %71 = shl nsw i32 %.decomposed41, 1, !dbg !21
  %72 = mul nsw i32 %42, 56, !dbg !22
  %73 = mul nsw i32 %43, 56, !dbg !22
  %74 = mul nsw i32 %44, 56, !dbg !22
  %75 = mul nsw i32 %45, 56, !dbg !22
  %76 = mul nsw i32 %46, 56, !dbg !22
  %77 = mul nsw i32 %47, 56, !dbg !22
  %78 = mul nsw i32 %48, 56, !dbg !22
  %79 = mul nsw i32 %49, 56, !dbg !22
  %80 = mul i32 %50, 784, !dbg !23
  %81 = mul i32 %51, 784, !dbg !23
  %82 = mul i32 %52, 784, !dbg !23
  %83 = mul i32 %53, 784, !dbg !23
  %84 = mul i32 %54, 784, !dbg !23
  %85 = mul i32 %55, 784, !dbg !23
  %86 = mul i32 %56, 784, !dbg !23
  %87 = mul i32 %57, 784, !dbg !23
  %88 = add i32 %72, %80, !dbg !24
  %89 = add i32 %88, %64, !dbg !25
  %90 = add i32 %73, %81, !dbg !24
  %91 = add i32 %90, %65, !dbg !25
  %92 = add i32 %74, %82, !dbg !24
  %93 = add i32 %92, %66, !dbg !25
  %94 = add i32 %75, %83, !dbg !24
  %95 = add i32 %94, %67, !dbg !25
  %96 = add i32 %76, %84, !dbg !24
  %97 = add i32 %96, %68, !dbg !25
  %98 = add i32 %77, %85, !dbg !24
  %99 = add i32 %98, %69, !dbg !25
  %100 = add i32 %78, %86, !dbg !24
  %101 = add i32 %100, %70, !dbg !25
  %102 = add i32 %79, %87, !dbg !24
  %103 = add i32 %102, %71, !dbg !25
  %104 = sext i32 %89 to i64, !dbg !26
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !26
  %106 = sext i32 %91 to i64, !dbg !26
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !26
  %108 = sext i32 %93 to i64, !dbg !26
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !26
  %110 = sext i32 %95 to i64, !dbg !26
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !26
  %112 = sext i32 %97 to i64, !dbg !26
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !26
  %114 = sext i32 %99 to i64, !dbg !26
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !26
  %116 = sext i32 %101 to i64, !dbg !26
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !26
  %118 = sext i32 %103 to i64, !dbg !26
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !26
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %23) #2, !dbg !27
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %23) #2, !dbg !27
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %23) #2, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %23) #2, !dbg !27
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %23) #2, !dbg !27
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %23) #2, !dbg !27
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %23) #2, !dbg !27
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %23) #2, !dbg !27
  %128 = or disjoint i32 %88, 1, !dbg !28
  %129 = add i32 %128, %64, !dbg !29
  %130 = or disjoint i32 %90, 1, !dbg !28
  %131 = add i32 %130, %65, !dbg !29
  %132 = or disjoint i32 %92, 1, !dbg !28
  %133 = add i32 %132, %66, !dbg !29
  %134 = or disjoint i32 %94, 1, !dbg !28
  %135 = add i32 %134, %67, !dbg !29
  %136 = or disjoint i32 %96, 1, !dbg !28
  %137 = add i32 %136, %68, !dbg !29
  %138 = or disjoint i32 %98, 1, !dbg !28
  %139 = add i32 %138, %69, !dbg !29
  %140 = or disjoint i32 %100, 1, !dbg !28
  %141 = add i32 %140, %70, !dbg !29
  %142 = or disjoint i32 %102, 1, !dbg !28
  %143 = add i32 %142, %71, !dbg !29
  %144 = sext i32 %129 to i64, !dbg !30
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !30
  %146 = sext i32 %131 to i64, !dbg !30
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !30
  %148 = sext i32 %133 to i64, !dbg !30
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !30
  %150 = sext i32 %135 to i64, !dbg !30
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !30
  %152 = sext i32 %137 to i64, !dbg !30
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !30
  %154 = sext i32 %139 to i64, !dbg !30
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !30
  %156 = sext i32 %141 to i64, !dbg !30
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !30
  %158 = sext i32 %143 to i64, !dbg !30
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !30
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %23) #2, !dbg !31
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %23) #2, !dbg !31
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %23) #2, !dbg !31
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %23) #2, !dbg !31
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %23) #2, !dbg !31
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %23) #2, !dbg !31
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %23) #2, !dbg !31
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %23) #2, !dbg !31
  %168 = or disjoint i32 %88, 2, !dbg !32
  %169 = add i32 %168, %64, !dbg !33
  %170 = or disjoint i32 %90, 2, !dbg !32
  %171 = add i32 %170, %65, !dbg !33
  %172 = or disjoint i32 %92, 2, !dbg !32
  %173 = add i32 %172, %66, !dbg !33
  %174 = or disjoint i32 %94, 2, !dbg !32
  %175 = add i32 %174, %67, !dbg !33
  %176 = or disjoint i32 %96, 2, !dbg !32
  %177 = add i32 %176, %68, !dbg !33
  %178 = or disjoint i32 %98, 2, !dbg !32
  %179 = add i32 %178, %69, !dbg !33
  %180 = or disjoint i32 %100, 2, !dbg !32
  %181 = add i32 %180, %70, !dbg !33
  %182 = or disjoint i32 %102, 2, !dbg !32
  %183 = add i32 %182, %71, !dbg !33
  %184 = sext i32 %169 to i64, !dbg !34
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !34
  %186 = sext i32 %171 to i64, !dbg !34
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !34
  %188 = sext i32 %173 to i64, !dbg !34
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !34
  %190 = sext i32 %175 to i64, !dbg !34
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !34
  %192 = sext i32 %177 to i64, !dbg !34
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !34
  %194 = sext i32 %179 to i64, !dbg !34
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !34
  %196 = sext i32 %181 to i64, !dbg !34
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !34
  %198 = sext i32 %183 to i64, !dbg !34
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !34
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %23) #2, !dbg !35
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %23) #2, !dbg !35
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %23) #2, !dbg !35
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %23) #2, !dbg !35
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %23) #2, !dbg !35
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %23) #2, !dbg !35
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %23) #2, !dbg !35
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %23) #2, !dbg !35
  %208 = add i32 %88, 28, !dbg !36
  %209 = add i32 %208, %64, !dbg !37
  %210 = add i32 %90, 28, !dbg !36
  %211 = add i32 %210, %65, !dbg !37
  %212 = add i32 %92, 28, !dbg !36
  %213 = add i32 %212, %66, !dbg !37
  %214 = add i32 %94, 28, !dbg !36
  %215 = add i32 %214, %67, !dbg !37
  %216 = add i32 %96, 28, !dbg !36
  %217 = add i32 %216, %68, !dbg !37
  %218 = add i32 %98, 28, !dbg !36
  %219 = add i32 %218, %69, !dbg !37
  %220 = add i32 %100, 28, !dbg !36
  %221 = add i32 %220, %70, !dbg !37
  %222 = add i32 %102, 28, !dbg !36
  %223 = add i32 %222, %71, !dbg !37
  %224 = sext i32 %209 to i64, !dbg !38
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !38
  %226 = sext i32 %211 to i64, !dbg !38
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !38
  %228 = sext i32 %213 to i64, !dbg !38
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !38
  %230 = sext i32 %215 to i64, !dbg !38
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !38
  %232 = sext i32 %217 to i64, !dbg !38
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !38
  %234 = sext i32 %219 to i64, !dbg !38
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !38
  %236 = sext i32 %221 to i64, !dbg !38
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !38
  %238 = sext i32 %223 to i64, !dbg !38
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !38
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %23) #2, !dbg !39
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 %23) #2, !dbg !39
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 %23) #2, !dbg !39
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %23) #2, !dbg !39
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %23) #2, !dbg !39
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 %23) #2, !dbg !39
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 %23) #2, !dbg !39
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %23) #2, !dbg !39
  %248 = add i32 %88, 29, !dbg !40
  %249 = add i32 %248, %64, !dbg !41
  %250 = add i32 %90, 29, !dbg !40
  %251 = add i32 %250, %65, !dbg !41
  %252 = add i32 %92, 29, !dbg !40
  %253 = add i32 %252, %66, !dbg !41
  %254 = add i32 %94, 29, !dbg !40
  %255 = add i32 %254, %67, !dbg !41
  %256 = add i32 %96, 29, !dbg !40
  %257 = add i32 %256, %68, !dbg !41
  %258 = add i32 %98, 29, !dbg !40
  %259 = add i32 %258, %69, !dbg !41
  %260 = add i32 %100, 29, !dbg !40
  %261 = add i32 %260, %70, !dbg !41
  %262 = add i32 %102, 29, !dbg !40
  %263 = add i32 %262, %71, !dbg !41
  %264 = sext i32 %249 to i64, !dbg !42
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !42
  %266 = sext i32 %251 to i64, !dbg !42
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !42
  %268 = sext i32 %253 to i64, !dbg !42
  %269 = getelementptr float, ptr addrspace(1) %0, i64 %268, !dbg !42
  %270 = sext i32 %255 to i64, !dbg !42
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !42
  %272 = sext i32 %257 to i64, !dbg !42
  %273 = getelementptr float, ptr addrspace(1) %0, i64 %272, !dbg !42
  %274 = sext i32 %259 to i64, !dbg !42
  %275 = getelementptr float, ptr addrspace(1) %0, i64 %274, !dbg !42
  %276 = sext i32 %261 to i64, !dbg !42
  %277 = getelementptr float, ptr addrspace(1) %0, i64 %276, !dbg !42
  %278 = sext i32 %263 to i64, !dbg !42
  %279 = getelementptr float, ptr addrspace(1) %0, i64 %278, !dbg !42
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 %23) #2, !dbg !43
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 %23) #2, !dbg !43
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 %23) #2, !dbg !43
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %23) #2, !dbg !43
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %23) #2, !dbg !43
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %23) #2, !dbg !43
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %23) #2, !dbg !43
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 %23) #2, !dbg !43
  %288 = add i32 %88, 30, !dbg !44
  %289 = add i32 %288, %64, !dbg !45
  %290 = add i32 %90, 30, !dbg !44
  %291 = add i32 %290, %65, !dbg !45
  %292 = add i32 %92, 30, !dbg !44
  %293 = add i32 %292, %66, !dbg !45
  %294 = add i32 %94, 30, !dbg !44
  %295 = add i32 %294, %67, !dbg !45
  %296 = add i32 %96, 30, !dbg !44
  %297 = add i32 %296, %68, !dbg !45
  %298 = add i32 %98, 30, !dbg !44
  %299 = add i32 %298, %69, !dbg !45
  %300 = add i32 %100, 30, !dbg !44
  %301 = add i32 %300, %70, !dbg !45
  %302 = add i32 %102, 30, !dbg !44
  %303 = add i32 %302, %71, !dbg !45
  %304 = sext i32 %289 to i64, !dbg !46
  %305 = getelementptr float, ptr addrspace(1) %0, i64 %304, !dbg !46
  %306 = sext i32 %291 to i64, !dbg !46
  %307 = getelementptr float, ptr addrspace(1) %0, i64 %306, !dbg !46
  %308 = sext i32 %293 to i64, !dbg !46
  %309 = getelementptr float, ptr addrspace(1) %0, i64 %308, !dbg !46
  %310 = sext i32 %295 to i64, !dbg !46
  %311 = getelementptr float, ptr addrspace(1) %0, i64 %310, !dbg !46
  %312 = sext i32 %297 to i64, !dbg !46
  %313 = getelementptr float, ptr addrspace(1) %0, i64 %312, !dbg !46
  %314 = sext i32 %299 to i64, !dbg !46
  %315 = getelementptr float, ptr addrspace(1) %0, i64 %314, !dbg !46
  %316 = sext i32 %301 to i64, !dbg !46
  %317 = getelementptr float, ptr addrspace(1) %0, i64 %316, !dbg !46
  %318 = sext i32 %303 to i64, !dbg !46
  %319 = getelementptr float, ptr addrspace(1) %0, i64 %318, !dbg !46
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 %23) #2, !dbg !47
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 %23) #2, !dbg !47
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 %23) #2, !dbg !47
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 %23) #2, !dbg !47
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 %23) #2, !dbg !47
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 %23) #2, !dbg !47
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %317, i1 %23) #2, !dbg !47
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %319, i1 %23) #2, !dbg !47
  %328 = add i32 %88, 56, !dbg !48
  %329 = add i32 %328, %64, !dbg !49
  %330 = add i32 %90, 56, !dbg !48
  %331 = add i32 %330, %65, !dbg !49
  %332 = add i32 %92, 56, !dbg !48
  %333 = add i32 %332, %66, !dbg !49
  %334 = add i32 %94, 56, !dbg !48
  %335 = add i32 %334, %67, !dbg !49
  %336 = add i32 %96, 56, !dbg !48
  %337 = add i32 %336, %68, !dbg !49
  %338 = add i32 %98, 56, !dbg !48
  %339 = add i32 %338, %69, !dbg !49
  %340 = add i32 %100, 56, !dbg !48
  %341 = add i32 %340, %70, !dbg !49
  %342 = add i32 %102, 56, !dbg !48
  %343 = add i32 %342, %71, !dbg !49
  %344 = sext i32 %329 to i64, !dbg !50
  %345 = getelementptr float, ptr addrspace(1) %0, i64 %344, !dbg !50
  %346 = sext i32 %331 to i64, !dbg !50
  %347 = getelementptr float, ptr addrspace(1) %0, i64 %346, !dbg !50
  %348 = sext i32 %333 to i64, !dbg !50
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !50
  %350 = sext i32 %335 to i64, !dbg !50
  %351 = getelementptr float, ptr addrspace(1) %0, i64 %350, !dbg !50
  %352 = sext i32 %337 to i64, !dbg !50
  %353 = getelementptr float, ptr addrspace(1) %0, i64 %352, !dbg !50
  %354 = sext i32 %339 to i64, !dbg !50
  %355 = getelementptr float, ptr addrspace(1) %0, i64 %354, !dbg !50
  %356 = sext i32 %341 to i64, !dbg !50
  %357 = getelementptr float, ptr addrspace(1) %0, i64 %356, !dbg !50
  %358 = sext i32 %343 to i64, !dbg !50
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !50
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %345, i1 %23) #2, !dbg !51
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %347, i1 %23) #2, !dbg !51
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %349, i1 %23) #2, !dbg !51
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %351, i1 %23) #2, !dbg !51
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %353, i1 %23) #2, !dbg !51
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %355, i1 %23) #2, !dbg !51
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %357, i1 %23) #2, !dbg !51
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %359, i1 %23) #2, !dbg !51
  %368 = add i32 %88, 57, !dbg !52
  %369 = add i32 %368, %64, !dbg !53
  %370 = add i32 %90, 57, !dbg !52
  %371 = add i32 %370, %65, !dbg !53
  %372 = add i32 %92, 57, !dbg !52
  %373 = add i32 %372, %66, !dbg !53
  %374 = add i32 %94, 57, !dbg !52
  %375 = add i32 %374, %67, !dbg !53
  %376 = add i32 %96, 57, !dbg !52
  %377 = add i32 %376, %68, !dbg !53
  %378 = add i32 %98, 57, !dbg !52
  %379 = add i32 %378, %69, !dbg !53
  %380 = add i32 %100, 57, !dbg !52
  %381 = add i32 %380, %70, !dbg !53
  %382 = add i32 %102, 57, !dbg !52
  %383 = add i32 %382, %71, !dbg !53
  %384 = sext i32 %369 to i64, !dbg !54
  %385 = getelementptr float, ptr addrspace(1) %0, i64 %384, !dbg !54
  %386 = sext i32 %371 to i64, !dbg !54
  %387 = getelementptr float, ptr addrspace(1) %0, i64 %386, !dbg !54
  %388 = sext i32 %373 to i64, !dbg !54
  %389 = getelementptr float, ptr addrspace(1) %0, i64 %388, !dbg !54
  %390 = sext i32 %375 to i64, !dbg !54
  %391 = getelementptr float, ptr addrspace(1) %0, i64 %390, !dbg !54
  %392 = sext i32 %377 to i64, !dbg !54
  %393 = getelementptr float, ptr addrspace(1) %0, i64 %392, !dbg !54
  %394 = sext i32 %379 to i64, !dbg !54
  %395 = getelementptr float, ptr addrspace(1) %0, i64 %394, !dbg !54
  %396 = sext i32 %381 to i64, !dbg !54
  %397 = getelementptr float, ptr addrspace(1) %0, i64 %396, !dbg !54
  %398 = sext i32 %383 to i64, !dbg !54
  %399 = getelementptr float, ptr addrspace(1) %0, i64 %398, !dbg !54
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %385, i1 %23) #2, !dbg !55
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %387, i1 %23) #2, !dbg !55
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %389, i1 %23) #2, !dbg !55
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %391, i1 %23) #2, !dbg !55
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %393, i1 %23) #2, !dbg !55
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %395, i1 %23) #2, !dbg !55
  %406 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %397, i1 %23) #2, !dbg !55
  %407 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 %23) #2, !dbg !55
  %408 = add i32 %88, 58, !dbg !56
  %409 = add i32 %408, %64, !dbg !57
  %410 = add i32 %90, 58, !dbg !56
  %411 = add i32 %410, %65, !dbg !57
  %412 = add i32 %92, 58, !dbg !56
  %413 = add i32 %412, %66, !dbg !57
  %414 = add i32 %94, 58, !dbg !56
  %415 = add i32 %414, %67, !dbg !57
  %416 = add i32 %96, 58, !dbg !56
  %417 = add i32 %416, %68, !dbg !57
  %418 = add i32 %98, 58, !dbg !56
  %419 = add i32 %418, %69, !dbg !57
  %420 = add i32 %100, 58, !dbg !56
  %421 = add i32 %420, %70, !dbg !57
  %422 = add i32 %102, 58, !dbg !56
  %423 = add i32 %422, %71, !dbg !57
  %424 = sext i32 %409 to i64, !dbg !58
  %425 = getelementptr float, ptr addrspace(1) %0, i64 %424, !dbg !58
  %426 = sext i32 %411 to i64, !dbg !58
  %427 = getelementptr float, ptr addrspace(1) %0, i64 %426, !dbg !58
  %428 = sext i32 %413 to i64, !dbg !58
  %429 = getelementptr float, ptr addrspace(1) %0, i64 %428, !dbg !58
  %430 = sext i32 %415 to i64, !dbg !58
  %431 = getelementptr float, ptr addrspace(1) %0, i64 %430, !dbg !58
  %432 = sext i32 %417 to i64, !dbg !58
  %433 = getelementptr float, ptr addrspace(1) %0, i64 %432, !dbg !58
  %434 = sext i32 %419 to i64, !dbg !58
  %435 = getelementptr float, ptr addrspace(1) %0, i64 %434, !dbg !58
  %436 = sext i32 %421 to i64, !dbg !58
  %437 = getelementptr float, ptr addrspace(1) %0, i64 %436, !dbg !58
  %438 = sext i32 %423 to i64, !dbg !58
  %439 = getelementptr float, ptr addrspace(1) %0, i64 %438, !dbg !58
  %440 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %425, i1 %23) #2, !dbg !59
  %441 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %427, i1 %23) #2, !dbg !59
  %442 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %429, i1 %23) #2, !dbg !59
  %443 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %431, i1 %23) #2, !dbg !59
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %433, i1 %23) #2, !dbg !59
  %445 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %435, i1 %23) #2, !dbg !59
  %446 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %437, i1 %23) #2, !dbg !59
  %447 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %439, i1 %23) #2, !dbg !59
  %448 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !27
  %449 = insertelement <4 x i32> %448, i32 %121, i64 1, !dbg !27
  %450 = insertelement <4 x i32> %449, i32 %122, i64 2, !dbg !27
  %451 = insertelement <4 x i32> %450, i32 %123, i64 3, !dbg !27
  %452 = bitcast <4 x i32> %451 to <4 x float>, !dbg !27
  %453 = insertelement <4 x i32> poison, i32 %160, i64 0, !dbg !31
  %454 = insertelement <4 x i32> %453, i32 %161, i64 1, !dbg !31
  %455 = insertelement <4 x i32> %454, i32 %162, i64 2, !dbg !31
  %456 = insertelement <4 x i32> %455, i32 %163, i64 3, !dbg !31
  %457 = bitcast <4 x i32> %456 to <4 x float>, !dbg !31
  %458 = insertelement <4 x i32> poison, i32 %200, i64 0, !dbg !35
  %459 = insertelement <4 x i32> %458, i32 %201, i64 1, !dbg !35
  %460 = insertelement <4 x i32> %459, i32 %202, i64 2, !dbg !35
  %461 = insertelement <4 x i32> %460, i32 %203, i64 3, !dbg !35
  %462 = bitcast <4 x i32> %461 to <4 x float>, !dbg !35
  %463 = insertelement <4 x i32> poison, i32 %240, i64 0, !dbg !39
  %464 = insertelement <4 x i32> %463, i32 %241, i64 1, !dbg !39
  %465 = insertelement <4 x i32> %464, i32 %242, i64 2, !dbg !39
  %466 = insertelement <4 x i32> %465, i32 %243, i64 3, !dbg !39
  %467 = bitcast <4 x i32> %466 to <4 x float>, !dbg !39
  %468 = insertelement <4 x i32> poison, i32 %280, i64 0, !dbg !43
  %469 = insertelement <4 x i32> %468, i32 %281, i64 1, !dbg !43
  %470 = insertelement <4 x i32> %469, i32 %282, i64 2, !dbg !43
  %471 = insertelement <4 x i32> %470, i32 %283, i64 3, !dbg !43
  %472 = bitcast <4 x i32> %471 to <4 x float>, !dbg !43
  %473 = insertelement <4 x i32> poison, i32 %320, i64 0, !dbg !47
  %474 = insertelement <4 x i32> %473, i32 %321, i64 1, !dbg !47
  %475 = insertelement <4 x i32> %474, i32 %322, i64 2, !dbg !47
  %476 = insertelement <4 x i32> %475, i32 %323, i64 3, !dbg !47
  %477 = bitcast <4 x i32> %476 to <4 x float>, !dbg !47
  %478 = insertelement <4 x i32> poison, i32 %360, i64 0, !dbg !51
  %479 = insertelement <4 x i32> %478, i32 %361, i64 1, !dbg !51
  %480 = insertelement <4 x i32> %479, i32 %362, i64 2, !dbg !51
  %481 = insertelement <4 x i32> %480, i32 %363, i64 3, !dbg !51
  %482 = bitcast <4 x i32> %481 to <4 x float>, !dbg !51
  %483 = insertelement <4 x i32> poison, i32 %400, i64 0, !dbg !55
  %484 = insertelement <4 x i32> %483, i32 %401, i64 1, !dbg !55
  %485 = insertelement <4 x i32> %484, i32 %402, i64 2, !dbg !55
  %486 = insertelement <4 x i32> %485, i32 %403, i64 3, !dbg !55
  %487 = bitcast <4 x i32> %486 to <4 x float>, !dbg !55
  %488 = insertelement <4 x i32> poison, i32 %440, i64 0, !dbg !59
  %489 = insertelement <4 x i32> %488, i32 %441, i64 1, !dbg !59
  %490 = insertelement <4 x i32> %489, i32 %442, i64 2, !dbg !59
  %491 = insertelement <4 x i32> %490, i32 %443, i64 3, !dbg !59
  %492 = bitcast <4 x i32> %491 to <4 x float>, !dbg !59
  %493 = fcmp ogt <4 x float> %457, %452, !dbg !60
  %494 = fcmp uno <4 x float> %457, zeroinitializer, !dbg !64
  %495 = or <4 x i1> %493, %494, !dbg !65
  %.v = select <4 x i1> %495, <4 x i32> %456, <4 x i32> %451, !dbg !66
  %496 = bitcast <4 x i32> %.v to <4 x float>, !dbg !66
  %497 = fcmp olt <4 x float> %496, %462, !dbg !67
  %498 = fcmp uno <4 x float> %462, zeroinitializer, !dbg !69
  %499 = or <4 x i1> %497, %498, !dbg !70
  %.v15 = select <4 x i1> %499, <4 x i32> %461, <4 x i32> %.v, !dbg !71
  %500 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !71
  %501 = fcmp olt <4 x float> %500, %467, !dbg !72
  %502 = fcmp uno <4 x float> %467, zeroinitializer, !dbg !74
  %503 = or <4 x i1> %501, %502, !dbg !75
  %.v16 = select <4 x i1> %503, <4 x i32> %466, <4 x i32> %.v15, !dbg !76
  %504 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !76
  %505 = fcmp olt <4 x float> %504, %472, !dbg !77
  %506 = fcmp uno <4 x float> %472, zeroinitializer, !dbg !79
  %507 = or <4 x i1> %505, %506, !dbg !80
  %.v17 = select <4 x i1> %507, <4 x i32> %471, <4 x i32> %.v16, !dbg !81
  %508 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !81
  %509 = fcmp olt <4 x float> %508, %477, !dbg !82
  %510 = fcmp uno <4 x float> %477, zeroinitializer, !dbg !84
  %511 = or <4 x i1> %509, %510, !dbg !85
  %.v18 = select <4 x i1> %511, <4 x i32> %476, <4 x i32> %.v17, !dbg !86
  %512 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !86
  %513 = fcmp olt <4 x float> %512, %482, !dbg !87
  %514 = fcmp uno <4 x float> %482, zeroinitializer, !dbg !89
  %515 = or <4 x i1> %513, %514, !dbg !90
  %.v19 = select <4 x i1> %515, <4 x i32> %481, <4 x i32> %.v18, !dbg !91
  %516 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !91
  %517 = fcmp olt <4 x float> %516, %487, !dbg !92
  %518 = fcmp uno <4 x float> %487, zeroinitializer, !dbg !94
  %519 = or <4 x i1> %517, %518, !dbg !95
  %.v20 = select <4 x i1> %519, <4 x i32> %486, <4 x i32> %.v19, !dbg !96
  %520 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !96
  %521 = fcmp olt <4 x float> %520, %492, !dbg !97
  %522 = extractelement <4 x i1> %521, i64 0, !dbg !99
  %523 = extractelement <4 x i1> %521, i64 1, !dbg !99
  %524 = extractelement <4 x i1> %521, i64 2, !dbg !99
  %525 = extractelement <4 x i1> %521, i64 3, !dbg !99
  %526 = zext <4 x i1> %493 to <4 x i8>, !dbg !100
  %527 = select <4 x i1> %497, <4 x i8> splat (i8 2), <4 x i8> %526, !dbg !101
  %528 = select <4 x i1> %501, <4 x i8> splat (i8 3), <4 x i8> %527, !dbg !102
  %529 = select <4 x i1> %505, <4 x i8> splat (i8 4), <4 x i8> %528, !dbg !103
  %530 = select <4 x i1> %509, <4 x i8> splat (i8 5), <4 x i8> %529, !dbg !104
  %531 = select <4 x i1> %513, <4 x i8> splat (i8 6), <4 x i8> %530, !dbg !105
  %532 = select <4 x i1> %517, <4 x i8> splat (i8 7), <4 x i8> %531, !dbg !106
  %533 = select <4 x i1> %521, <4 x i8> splat (i8 8), <4 x i8> %532, !dbg !107
  %534 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !27
  %535 = insertelement <4 x i32> %534, i32 %125, i64 1, !dbg !27
  %536 = insertelement <4 x i32> %535, i32 %126, i64 2, !dbg !27
  %537 = insertelement <4 x i32> %536, i32 %127, i64 3, !dbg !27
  %538 = bitcast <4 x i32> %537 to <4 x float>, !dbg !27
  %539 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !31
  %540 = insertelement <4 x i32> %539, i32 %165, i64 1, !dbg !31
  %541 = insertelement <4 x i32> %540, i32 %166, i64 2, !dbg !31
  %542 = insertelement <4 x i32> %541, i32 %167, i64 3, !dbg !31
  %543 = bitcast <4 x i32> %542 to <4 x float>, !dbg !31
  %544 = insertelement <4 x i32> poison, i32 %204, i64 0, !dbg !35
  %545 = insertelement <4 x i32> %544, i32 %205, i64 1, !dbg !35
  %546 = insertelement <4 x i32> %545, i32 %206, i64 2, !dbg !35
  %547 = insertelement <4 x i32> %546, i32 %207, i64 3, !dbg !35
  %548 = bitcast <4 x i32> %547 to <4 x float>, !dbg !35
  %549 = insertelement <4 x i32> poison, i32 %244, i64 0, !dbg !39
  %550 = insertelement <4 x i32> %549, i32 %245, i64 1, !dbg !39
  %551 = insertelement <4 x i32> %550, i32 %246, i64 2, !dbg !39
  %552 = insertelement <4 x i32> %551, i32 %247, i64 3, !dbg !39
  %553 = bitcast <4 x i32> %552 to <4 x float>, !dbg !39
  %554 = insertelement <4 x i32> poison, i32 %284, i64 0, !dbg !43
  %555 = insertelement <4 x i32> %554, i32 %285, i64 1, !dbg !43
  %556 = insertelement <4 x i32> %555, i32 %286, i64 2, !dbg !43
  %557 = insertelement <4 x i32> %556, i32 %287, i64 3, !dbg !43
  %558 = bitcast <4 x i32> %557 to <4 x float>, !dbg !43
  %559 = insertelement <4 x i32> poison, i32 %324, i64 0, !dbg !47
  %560 = insertelement <4 x i32> %559, i32 %325, i64 1, !dbg !47
  %561 = insertelement <4 x i32> %560, i32 %326, i64 2, !dbg !47
  %562 = insertelement <4 x i32> %561, i32 %327, i64 3, !dbg !47
  %563 = bitcast <4 x i32> %562 to <4 x float>, !dbg !47
  %564 = insertelement <4 x i32> poison, i32 %364, i64 0, !dbg !51
  %565 = insertelement <4 x i32> %564, i32 %365, i64 1, !dbg !51
  %566 = insertelement <4 x i32> %565, i32 %366, i64 2, !dbg !51
  %567 = insertelement <4 x i32> %566, i32 %367, i64 3, !dbg !51
  %568 = bitcast <4 x i32> %567 to <4 x float>, !dbg !51
  %569 = insertelement <4 x i32> poison, i32 %404, i64 0, !dbg !55
  %570 = insertelement <4 x i32> %569, i32 %405, i64 1, !dbg !55
  %571 = insertelement <4 x i32> %570, i32 %406, i64 2, !dbg !55
  %572 = insertelement <4 x i32> %571, i32 %407, i64 3, !dbg !55
  %573 = bitcast <4 x i32> %572 to <4 x float>, !dbg !55
  %574 = insertelement <4 x i32> poison, i32 %444, i64 0, !dbg !59
  %575 = insertelement <4 x i32> %574, i32 %445, i64 1, !dbg !59
  %576 = insertelement <4 x i32> %575, i32 %446, i64 2, !dbg !59
  %577 = insertelement <4 x i32> %576, i32 %447, i64 3, !dbg !59
  %578 = bitcast <4 x i32> %577 to <4 x float>, !dbg !59
  %579 = fcmp ogt <4 x float> %543, %538, !dbg !60
  %580 = fcmp uno <4 x float> %543, zeroinitializer, !dbg !64
  %581 = or <4 x i1> %579, %580, !dbg !65
  %.v21 = select <4 x i1> %581, <4 x i32> %542, <4 x i32> %537, !dbg !66
  %582 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !66
  %583 = fcmp olt <4 x float> %582, %548, !dbg !67
  %584 = fcmp uno <4 x float> %548, zeroinitializer, !dbg !69
  %585 = or <4 x i1> %583, %584, !dbg !70
  %.v22 = select <4 x i1> %585, <4 x i32> %547, <4 x i32> %.v21, !dbg !71
  %586 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !71
  %587 = fcmp olt <4 x float> %586, %553, !dbg !72
  %588 = fcmp uno <4 x float> %553, zeroinitializer, !dbg !74
  %589 = or <4 x i1> %587, %588, !dbg !75
  %.v23 = select <4 x i1> %589, <4 x i32> %552, <4 x i32> %.v22, !dbg !76
  %590 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !76
  %591 = fcmp olt <4 x float> %590, %558, !dbg !77
  %592 = fcmp uno <4 x float> %558, zeroinitializer, !dbg !79
  %593 = or <4 x i1> %591, %592, !dbg !80
  %.v24 = select <4 x i1> %593, <4 x i32> %557, <4 x i32> %.v23, !dbg !81
  %594 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !81
  %595 = fcmp olt <4 x float> %594, %563, !dbg !82
  %596 = fcmp uno <4 x float> %563, zeroinitializer, !dbg !84
  %597 = or <4 x i1> %595, %596, !dbg !85
  %.v25 = select <4 x i1> %597, <4 x i32> %562, <4 x i32> %.v24, !dbg !86
  %598 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !86
  %599 = fcmp olt <4 x float> %598, %568, !dbg !87
  %600 = fcmp uno <4 x float> %568, zeroinitializer, !dbg !89
  %601 = or <4 x i1> %599, %600, !dbg !90
  %.v26 = select <4 x i1> %601, <4 x i32> %567, <4 x i32> %.v25, !dbg !91
  %602 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !91
  %603 = fcmp olt <4 x float> %602, %573, !dbg !92
  %604 = fcmp uno <4 x float> %573, zeroinitializer, !dbg !94
  %605 = or <4 x i1> %603, %604, !dbg !95
  %.v27 = select <4 x i1> %605, <4 x i32> %572, <4 x i32> %.v26, !dbg !96
  %606 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !96
  %607 = fcmp olt <4 x float> %606, %578, !dbg !97
  %608 = shufflevector <4 x float> %578, <4 x float> %492, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !108
  %609 = fcmp uno <8 x float> %608, zeroinitializer, !dbg !108
  %610 = extractelement <8 x i1> %609, i64 7, !dbg !99
  %611 = or i1 %522, %610, !dbg !99
  %612 = extractelement <8 x i1> %609, i64 6, !dbg !99
  %613 = or i1 %523, %612, !dbg !99
  %614 = extractelement <8 x i1> %609, i64 5, !dbg !99
  %615 = or i1 %524, %614, !dbg !99
  %616 = extractelement <8 x i1> %609, i64 4, !dbg !99
  %617 = or i1 %525, %616, !dbg !99
  %618 = extractelement <4 x i1> %607, i64 0, !dbg !99
  %619 = extractelement <8 x i1> %609, i64 3, !dbg !99
  %620 = or i1 %618, %619, !dbg !99
  %621 = extractelement <4 x i1> %607, i64 1, !dbg !99
  %622 = extractelement <8 x i1> %609, i64 2, !dbg !99
  %623 = or i1 %621, %622, !dbg !99
  %624 = extractelement <4 x i1> %607, i64 2, !dbg !99
  %625 = extractelement <8 x i1> %609, i64 1, !dbg !99
  %626 = or i1 %624, %625, !dbg !99
  %627 = extractelement <4 x i1> %607, i64 3, !dbg !99
  %628 = extractelement <8 x i1> %609, i64 0, !dbg !99
  %629 = or i1 %627, %628, !dbg !99
  %630 = zext <4 x i1> %579 to <4 x i8>, !dbg !100
  %631 = select <4 x i1> %583, <4 x i8> splat (i8 2), <4 x i8> %630, !dbg !101
  %632 = select <4 x i1> %587, <4 x i8> splat (i8 3), <4 x i8> %631, !dbg !102
  %633 = select <4 x i1> %591, <4 x i8> splat (i8 4), <4 x i8> %632, !dbg !103
  %634 = select <4 x i1> %595, <4 x i8> splat (i8 5), <4 x i8> %633, !dbg !104
  %635 = select <4 x i1> %599, <4 x i8> splat (i8 6), <4 x i8> %634, !dbg !105
  %636 = select <4 x i1> %603, <4 x i8> splat (i8 7), <4 x i8> %635, !dbg !106
  %637 = select <4 x i1> %607, <4 x i8> splat (i8 8), <4 x i8> %636, !dbg !107
  %638 = mul i32 %58, 64896, !dbg !109
  %639 = mul i32 %59, 64896, !dbg !109
  %640 = add i32 %638, %.decomposed43, !dbg !110
  %641 = add i32 %639, %.decomposed45, !dbg !110
  %642 = sext i32 %640 to i64, !dbg !111
  %643 = getelementptr float, ptr addrspace(1) %1, i64 %642, !dbg !111
  %644 = sext i32 %641 to i64, !dbg !111
  %645 = getelementptr float, ptr addrspace(1) %1, i64 %644, !dbg !111
  %646 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !112
  %647 = extractelement <4 x i32> %.v20, i64 0, !dbg !112
  %648 = select i1 %611, i32 %440, i32 %647, !dbg !113
  %649 = extractelement <4 x i32> %.v20, i64 1, !dbg !112
  %650 = select i1 %613, i32 %441, i32 %649, !dbg !113
  %651 = extractelement <4 x i32> %.v20, i64 2, !dbg !112
  %652 = select i1 %615, i32 %442, i32 %651, !dbg !113
  %653 = extractelement <4 x i32> %.v20, i64 3, !dbg !112
  %654 = select i1 %617, i32 %443, i32 %653, !dbg !113
  %655 = extractelement <4 x i32> %.v27, i64 0, !dbg !112
  %656 = select i1 %620, i32 %444, i32 %655, !dbg !113
  %657 = extractelement <4 x i32> %.v27, i64 1, !dbg !112
  %658 = select i1 %623, i32 %445, i32 %657, !dbg !113
  %659 = extractelement <4 x i32> %.v27, i64 2, !dbg !112
  %660 = select i1 %626, i32 %446, i32 %659, !dbg !113
  %661 = extractelement <4 x i32> %.v27, i64 3, !dbg !112
  %662 = select i1 %629, i32 %447, i32 %661, !dbg !113
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %646, i32 %648, i32 %650, i32 %652, i32 %654, i1 true) #2, !dbg !112
  %663 = getelementptr inbounds i8, ptr addrspace(3) %646, i32 16, !dbg !112
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %663, i32 %656, i32 %658, i32 %660, i32 %662, i1 true) #2, !dbg !112
  tail call void @llvm.nvvm.barrier0(), !dbg !112
  %664 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !112
  %665 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !112
  %666 = load <4 x i32>, ptr addrspace(3) %665, align 16, !dbg !112
  %.extract = load i32, ptr addrspace(3) %664, align 16, !dbg !112
  %667 = getelementptr inbounds i8, ptr addrspace(3) %664, i32 4, !dbg !112
  %.extract8 = load i32, ptr addrspace(3) %667, align 4, !dbg !112
  %668 = getelementptr inbounds i8, ptr addrspace(3) %664, i32 8, !dbg !112
  %.extract9 = load i32, ptr addrspace(3) %668, align 8, !dbg !112
  %669 = getelementptr inbounds i8, ptr addrspace(3) %664, i32 12, !dbg !112
  %.extract10 = load i32, ptr addrspace(3) %669, align 4, !dbg !112
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %643, i1 %24) #2, !dbg !112
  %.extract11 = extractelement <4 x i32> %666, i64 0, !dbg !112
  %.extract12 = extractelement <4 x i32> %666, i64 1, !dbg !112
  %.extract13 = extractelement <4 x i32> %666, i64 2, !dbg !112
  %.extract14 = extractelement <4 x i32> %666, i64 3, !dbg !112
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %645, i1 %25) #2, !dbg !112
  %670 = mul i32 %60, 32512, !dbg !114
  %671 = add i32 %670, %.decomposed47, !dbg !115
  %672 = sext i32 %671 to i64, !dbg !116
  %673 = getelementptr i8, ptr addrspace(1) %2, i64 %672, !dbg !116
  %674 = bitcast <4 x i8> %533 to i32, !dbg !117
  %675 = bitcast <4 x i8> %637 to i32, !dbg !117
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %674, i32 %675, ptr addrspace(1) %673, i1 %23) #2, !dbg !117
  ret void, !dbg !118
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgsdudxhyjcw4vsi3y3frr2fyqpm5bfvj7z5jnb5h4w4rlypvwuy.py", directory: "inductor_cache/gs")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_7", linkageName: "triton_poi_fused_max_pool2d_with_indices_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 32, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 29, column: 49, scope: !7)
!24 = !DILocation(line: 29, column: 37, scope: !7)
!25 = !DILocation(line: 29, column: 45, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 54, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 30, column: 49, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 58, scope: !7)
!32 = !DILocation(line: 31, column: 41, scope: !7)
!33 = !DILocation(line: 31, column: 49, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 58, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 32, column: 50, scope: !7)
!38 = !DILocation(line: 32, column: 30, scope: !7)
!39 = !DILocation(line: 32, column: 59, scope: !7)
!40 = !DILocation(line: 33, column: 42, scope: !7)
!41 = !DILocation(line: 33, column: 50, scope: !7)
!42 = !DILocation(line: 33, column: 30, scope: !7)
!43 = !DILocation(line: 33, column: 59, scope: !7)
!44 = !DILocation(line: 34, column: 42, scope: !7)
!45 = !DILocation(line: 34, column: 50, scope: !7)
!46 = !DILocation(line: 34, column: 30, scope: !7)
!47 = !DILocation(line: 34, column: 59, scope: !7)
!48 = !DILocation(line: 35, column: 43, scope: !7)
!49 = !DILocation(line: 35, column: 51, scope: !7)
!50 = !DILocation(line: 35, column: 31, scope: !7)
!51 = !DILocation(line: 35, column: 60, scope: !7)
!52 = !DILocation(line: 36, column: 43, scope: !7)
!53 = !DILocation(line: 36, column: 51, scope: !7)
!54 = !DILocation(line: 36, column: 31, scope: !7)
!55 = !DILocation(line: 36, column: 60, scope: !7)
!56 = !DILocation(line: 37, column: 43, scope: !7)
!57 = !DILocation(line: 37, column: 51, scope: !7)
!58 = !DILocation(line: 37, column: 31, scope: !7)
!59 = !DILocation(line: 37, column: 60, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!63 = !DILocation(line: 38, column: 40, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !63)
!67 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !68)
!68 = !DILocation(line: 39, column: 40, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !68)
!72 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !73)
!73 = !DILocation(line: 40, column: 40, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !78)
!78 = !DILocation(line: 41, column: 40, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !83)
!83 = !DILocation(line: 42, column: 41, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !88)
!88 = !DILocation(line: 43, column: 42, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !93)
!93 = !DILocation(line: 44, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !61, inlinedAt: !98)
!98 = !DILocation(line: 45, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 16, scope: !61, inlinedAt: !98)
!100 = !DILocation(line: 49, column: 35, scope: !7)
!101 = !DILocation(line: 52, column: 35, scope: !7)
!102 = !DILocation(line: 55, column: 35, scope: !7)
!103 = !DILocation(line: 58, column: 35, scope: !7)
!104 = !DILocation(line: 61, column: 35, scope: !7)
!105 = !DILocation(line: 64, column: 35, scope: !7)
!106 = !DILocation(line: 67, column: 35, scope: !7)
!107 = !DILocation(line: 70, column: 35, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !61, inlinedAt: !98)
!109 = !DILocation(line: 71, column: 36, scope: !7)
!110 = !DILocation(line: 71, column: 30, scope: !7)
!111 = !DILocation(line: 71, column: 25, scope: !7)
!112 = !DILocation(line: 71, column: 48, scope: !7)
!113 = !DILocation(line: 121, column: 29, scope: !61, inlinedAt: !98)
!114 = !DILocation(line: 72, column: 36, scope: !7)
!115 = !DILocation(line: 72, column: 30, scope: !7)
!116 = !DILocation(line: 72, column: 25, scope: !7)
!117 = !DILocation(line: 72, column: 48, scope: !7)
!118 = !DILocation(line: 72, column: 4, scope: !7)
