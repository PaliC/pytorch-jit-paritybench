#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":19:0)
#loc1 = loc(unknown)
#loc14 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":36:24)
#loc21 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":44:26)
#loc41 = loc(callsite(#loc1 at #loc14))
#loc44 = loc(callsite(#loc1 at #loc21))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_leaky_relu_leaky_relu_backward_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":19:0), %arg3: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.600000e+01> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<8x16xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<8x1xi32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<2.000000e-01> : tensor<8x16xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<1.600000e+01> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_1 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc7)
    %14 = arith.muli %8, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc8)
    %15 = tt.broadcast %13 : tensor<1x16xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc9)
    %16 = tt.broadcast %14 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc9)
    %17 = arith.addi %15, %16 : tensor<8x16xi32, #blocked> loc(#loc9)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %19 = tt.addptr %18, %17 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc10)
    %20 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc11)
    %21 = tt.load %19, %20, %cst_0 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc11)
    %22 = arith.select %20, %21, %cst_0 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc12)
    %23 = "tt.reduce"(%22) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc14)), %arg8: f32 loc(callsite(#loc1 at #loc14))):
      %59 = arith.addf %arg7, %arg8 : f32 loc(#loc45)
      tt.reduce.return %59 : f32 loc(#loc40)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc40)
    %24 = triton_gpu.convert_layout %23 {fastmath = #arith.fastmath<none>} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc16)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc17)
    %26 = tt.expand_dims %23 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc17)
    %27 = arith.divf %25, %cst_6 : tensor<8x1xf32, #blocked1> loc(#loc16)
    %28 = arith.divf %26, %cst : tensor<8x1xf32, #blocked> loc(#loc16)
    %29 = tt.broadcast %28 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc18)
    %30 = arith.subf %21, %29 : tensor<8x16xf32, #blocked> loc(#loc18)
    %31 = arith.mulf %30, %30 : tensor<8x16xf32, #blocked> loc(#loc19)
    %32 = arith.select %20, %31, %cst_0 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc20)
    %33 = "tt.reduce"(%32) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc21)), %arg8: f32 loc(callsite(#loc1 at #loc21))):
      %59 = arith.addf %arg7, %arg8 : f32 loc(#loc46)
      tt.reduce.return %59 : f32 loc(#loc43)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
    %34 = triton_gpu.convert_layout %33 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc22)
    %35 = tt.expand_dims %34 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc23)
    %36 = tt.expand_dims %33 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc23)
    %37 = arith.divf %35, %cst_6 : tensor<8x1xf32, #blocked1> loc(#loc24)
    %38 = arith.divf %36, %cst : tensor<8x1xf32, #blocked> loc(#loc24)
    %39 = arith.addf %37, %cst_5 : tensor<8x1xf32, #blocked1> loc(#loc25)
    %40 = arith.addf %38, %cst_4 : tensor<8x1xf32, #blocked> loc(#loc25)
    %41 = tt.extern_elementwise %39 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked1>) -> tensor<8x1xf32, #blocked1> loc(#loc22)
    %42 = tt.extern_elementwise %40 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked> loc(#loc22)
    %43 = tt.broadcast %42 : tensor<8x1xf32, #blocked> -> tensor<8x16xf32, #blocked> loc(#loc26)
    %44 = arith.mulf %30, %43 : tensor<8x16xf32, #blocked> loc(#loc26)
    %45 = arith.cmpf ogt, %44, %cst_0 : tensor<8x16xf32, #blocked> loc(#loc27)
    %46 = arith.mulf %44, %cst_3 : tensor<8x16xf32, #blocked> loc(#loc28)
    %47 = arith.select %45, %44, %46 : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc29)
    %48 = arith.cmpf ogt, %47, %cst_0 : tensor<8x16xf32, #blocked> loc(#loc30)
    %49 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc31)
    %50 = tt.addptr %49, %17 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc31)
    tt.store %50, %47, %20 : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc32)
    %51 = tt.splat %arg3 : !tt.ptr<i1> -> tensor<8x16x!tt.ptr<i1>, #blocked> loc(#loc33)
    %52 = tt.addptr %51, %17 : tensor<8x16x!tt.ptr<i1>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc33)
    %53 = tt.bitcast %52 : tensor<8x16x!tt.ptr<i1>, #blocked> -> tensor<8x16x!tt.ptr<i8>, #blocked> loc(#loc34)
    %54 = arith.extui %48 : tensor<8x16xi1, #blocked> to tensor<8x16xi8, #blocked> loc(#loc34)
    tt.store %53, %54, %20 : tensor<8x16x!tt.ptr<i8>, #blocked> loc(#loc34)
    %55 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %56 = tt.addptr %55, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc35)
    tt.store %56, %41, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %57 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc37)
    %58 = tt.addptr %57, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc37)
    tt.store %58, %27, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    tt.return loc(#loc39)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":23:28)
#loc3 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":23:33)
#loc4 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":24:44)
#loc5 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":24:23)
#loc6 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":25:21)
#loc7 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":26:34)
#loc8 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":31:38)
#loc9 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":31:35)
#loc10 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":31:30)
#loc11 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":31:43)
#loc12 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":35:33)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc16 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":39:19)
#loc17 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":36:27)
#loc18 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":40:19)
#loc19 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":41:20)
#loc20 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":43:35)
#loc22 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":50:28)
#loc23 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":44:29)
#loc24 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":47:20)
#loc25 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":49:20)
#loc26 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":51:20)
#loc27 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":53:20)
#loc28 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":55:20)
#loc29 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":56:35)
#loc30 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":57:20)
#loc31 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":58:25)
#loc32 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":58:45)
#loc33 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":59:25)
#loc34 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":59:45)
#loc35 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":60:25)
#loc36 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":60:37)
#loc37 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":61:25)
#loc38 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":61:37)
#loc39 = loc("inductor_cache/ea/ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py":61:4)
#loc40 = loc(callsite(#loc13 at #loc14))
#loc42 = loc(callsite(#loc15 at #loc13))
#loc43 = loc(callsite(#loc13 at #loc21))
#loc45 = loc(callsite(#loc42 at #loc14))
#loc46 = loc(callsite(#loc42 at #loc21))
