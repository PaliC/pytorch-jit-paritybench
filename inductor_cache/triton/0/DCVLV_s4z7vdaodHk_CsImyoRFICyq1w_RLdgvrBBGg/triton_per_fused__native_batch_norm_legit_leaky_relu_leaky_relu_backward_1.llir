; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_leaky_relu_leaky_relu_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 3, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %10, 7, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = icmp slt i32 %14, 16, !dbg !14
  %16 = shl i32 %10, 1, !dbg !15
  %17 = and i32 %16, 14, !dbg !15
  %18 = shl i32 %14, 4, !dbg !16
  %19 = or disjoint i32 %18, %17, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !19
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !19
  %25 = bitcast i32 %23 to float, !dbg !19
  %26 = bitcast i32 %24 to float, !dbg !19
  %27 = fadd float %25, %26, !dbg !20
  %28 = select i1 %15, float %27, float 0.000000e+00, !dbg !20
  %29 = bitcast float %28 to i32, !dbg !25
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 4, i32 31), !dbg !25
  %31 = bitcast i32 %30 to float, !dbg !25
  %32 = fadd float %28, %31, !dbg !20
  %33 = bitcast float %32 to i32, !dbg !25
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 2, i32 31), !dbg !25
  %35 = bitcast i32 %34 to float, !dbg !25
  %36 = fadd float %32, %35, !dbg !20
  %37 = bitcast float %36 to i32, !dbg !25
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 1, i32 31), !dbg !25
  %39 = bitcast i32 %38 to float, !dbg !25
  %40 = fadd float %36, %39, !dbg !20
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !26
  %42 = bitcast float %40 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %42, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !26
  %44 = load float, ptr addrspace(3) %43, align 4, !dbg !26
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float 1.600000e+01) #5, !dbg !26
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float 1.600000e+01) #5, !dbg !26
  %47 = fsub float %25, %46, !dbg !27
  %48 = fsub float %26, %46, !dbg !27
  %49 = fmul float %47, %47, !dbg !28
  %50 = fmul float %48, %48, !dbg !28
  %51 = fadd float %49, %50, !dbg !29
  %52 = select i1 %15, float %51, float 0.000000e+00, !dbg !29
  %53 = bitcast float %52 to i32, !dbg !31
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 4, i32 31), !dbg !31
  %55 = bitcast i32 %54 to float, !dbg !31
  %56 = fadd float %52, %55, !dbg !29
  %57 = bitcast float %56 to i32, !dbg !31
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !31
  %59 = bitcast i32 %58 to float, !dbg !31
  %60 = fadd float %56, %59, !dbg !29
  %61 = bitcast float %60 to i32, !dbg !31
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !31
  %63 = bitcast i32 %62 to float, !dbg !31
  %64 = fadd float %60, %63, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %65 = bitcast float %64 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %65, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %66 = load float, ptr addrspace(3) %43, align 4, !dbg !32
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 1.600000e+01) #5, !dbg !33
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 1.600000e+01) #5, !dbg !33
  %69 = fadd float %67, 0x3EE4F8B580000000, !dbg !34
  %70 = fadd float %68, 0x3EE4F8B580000000, !dbg !34
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %71, 0, !dbg !32
  br i1 %.not.i, label %74, label %72, !dbg !32

72:                                               ; preds = %7
  %73 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %69), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

74:                                               ; preds = %7
  %75 = tail call float @llvm.nvvm.rsqrt.approx.f(float %69), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %72, %74
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], !dbg !32
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i4 = icmp eq i32 %77, 0, !dbg !32
  br i1 %.not.i4, label %80, label %78, !dbg !32

78:                                               ; preds = %__nv_rsqrtf.exit
  %79 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %70), !dbg !32
  br label %__nv_rsqrtf.exit6, !dbg !32

80:                                               ; preds = %__nv_rsqrtf.exit
  %81 = tail call float @llvm.nvvm.rsqrt.approx.f(float %70), !dbg !32
  br label %__nv_rsqrtf.exit6, !dbg !32

__nv_rsqrtf.exit6:                                ; preds = %78, %80
  %.0.i5 = phi float [ %79, %78 ], [ %81, %80 ], !dbg !32
  %82 = or disjoint i32 %9, %13, !dbg !13
  %83 = icmp slt i32 %82, 16, !dbg !14
  %84 = fmul float %47, %.0.i5, !dbg !35
  %85 = fmul float %48, %.0.i5, !dbg !35
  %86 = fcmp ogt float %84, 0.000000e+00, !dbg !36
  %87 = fcmp ogt float %85, 0.000000e+00, !dbg !36
  %88 = fmul float %84, 0x3FC99999A0000000, !dbg !37
  %89 = fmul float %85, 0x3FC99999A0000000, !dbg !37
  %90 = select i1 %86, float %84, float %88, !dbg !38
  %91 = select i1 %87, float %85, float %89, !dbg !38
  %92 = fcmp ogt float %90, 0.000000e+00, !dbg !39
  %93 = fcmp ogt float %91, 0.000000e+00, !dbg !39
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !40
  %95 = bitcast float %90 to i32, !dbg !41
  %96 = bitcast float %91 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %95, i32 %96, ptr addrspace(1) %94, i1 %15) #5, !dbg !41
  %97 = getelementptr i1, ptr addrspace(1) %3, i64 %20, !dbg !42
  %98 = zext i1 %92 to i8, !dbg !43
  %99 = zext i1 %93 to i8, !dbg !43
  %100 = insertelement <2 x i8> poison, i8 %98, i64 0, !dbg !43
  %101 = insertelement <2 x i8> %100, i8 %99, i64 1, !dbg !43
  %102 = bitcast <2 x i8> %101 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %102, ptr addrspace(1) %97, i1 %15) #5, !dbg !43
  %103 = sext i32 %82 to i64, !dbg !44
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %103, !dbg !44
  %105 = and i32 %10, 56, !dbg !45
  %106 = icmp eq i32 %105, 0, !dbg !45
  %107 = bitcast float %.0.i to i32, !dbg !45
  %108 = and i1 %106, %83, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %104, i1 %108) #5, !dbg !45
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !46
  %110 = bitcast float %45 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %109, i1 %108) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceavspvlj6kjdmfqmvg6a7zjohegxsrueu7ar72wiw5qo32ls33m.py", directory: "inductor_cache/ea")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_leaky_relu_leaky_relu_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_leaky_relu_leaky_relu_backward_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_leaky_relu_leaky_relu_backward_1", linkageName: "triton_per_fused__native_batch_norm_legit_leaky_relu_leaky_relu_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 50, column: 28, scope: !7)
!33 = !DILocation(line: 47, column: 20, scope: !7)
!34 = !DILocation(line: 49, column: 20, scope: !7)
!35 = !DILocation(line: 51, column: 20, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 55, column: 20, scope: !7)
!38 = !DILocation(line: 56, column: 35, scope: !7)
!39 = !DILocation(line: 57, column: 20, scope: !7)
!40 = !DILocation(line: 58, column: 25, scope: !7)
!41 = !DILocation(line: 58, column: 45, scope: !7)
!42 = !DILocation(line: 59, column: 25, scope: !7)
!43 = !DILocation(line: 59, column: 45, scope: !7)
!44 = !DILocation(line: 60, column: 25, scope: !7)
!45 = !DILocation(line: 60, column: 37, scope: !7)
!46 = !DILocation(line: 61, column: 25, scope: !7)
!47 = !DILocation(line: 61, column: 37, scope: !7)
!48 = !DILocation(line: 61, column: 4, scope: !7)
