; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_34(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 1, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = and i32 %7, 1, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = lshr i32 %7, 5, !dbg !14
  %.frozen = freeze i32 %6, !dbg !15
  %12 = sdiv i32 %.frozen, 4096, !dbg !15
  %13 = mul i32 %12, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = shl i32 %7, 12, !dbg !17
  %15 = and i32 %14, 520192, !dbg !17
  %16 = shl i32 %12, 20, !dbg !18
  %17 = add i32 %16, %.decomposed, !dbg !19
  %18 = add i32 %17, %15, !dbg !20
  %19 = add i32 %17, 524288, !dbg !19
  %20 = add nuw i32 %19, %15, !dbg !20
  %21 = sext i32 %18 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %23 = sext i32 %20 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !22
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = bitcast i32 %27 to float, !dbg !22
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !22
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !22
  %33 = bitcast i32 %31 to float, !dbg !22
  %34 = bitcast i32 %32 to float, !dbg !22
  %35 = fadd float %28, 0.000000e+00, !dbg !23
  %36 = fadd float %29, 0.000000e+00, !dbg !23
  %37 = fadd float %33, 0.000000e+00, !dbg !23
  %38 = fadd float %34, 0.000000e+00, !dbg !23
  %39 = fadd float %35, %37, !dbg !24
  %40 = fadd float %36, %38, !dbg !24
  %41 = bitcast float %39 to i32, !dbg !29
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 16, i32 31), !dbg !29
  %43 = bitcast i32 %42 to float, !dbg !29
  %44 = fadd float %39, %43, !dbg !24
  %45 = bitcast float %44 to i32, !dbg !29
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 8, i32 31), !dbg !29
  %47 = bitcast i32 %46 to float, !dbg !29
  %48 = fadd float %44, %47, !dbg !24
  %49 = bitcast float %48 to i32, !dbg !29
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 4, i32 31), !dbg !29
  %51 = bitcast i32 %50 to float, !dbg !29
  %52 = fadd float %48, %51, !dbg !24
  %53 = bitcast float %52 to i32, !dbg !29
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 2, i32 31), !dbg !29
  %55 = bitcast i32 %54 to float, !dbg !29
  %56 = fadd float %52, %55, !dbg !24
  %57 = bitcast float %56 to i32, !dbg !29
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 1, i32 31), !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = fadd float %56, %59, !dbg !24
  %61 = bitcast float %40 to i32, !dbg !29
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 16, i32 31), !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = fadd float %40, %63, !dbg !24
  %65 = bitcast float %64 to i32, !dbg !29
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 8, i32 31), !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = fadd float %64, %67, !dbg !24
  %69 = bitcast float %68 to i32, !dbg !29
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !29
  %71 = bitcast i32 %70 to float, !dbg !29
  %72 = fadd float %68, %71, !dbg !24
  %73 = bitcast float %72 to i32, !dbg !29
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fadd float %72, %75, !dbg !24
  %77 = bitcast float %76 to i32, !dbg !29
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = fadd float %76, %79, !dbg !24
  %81 = icmp eq i32 %8, 0, !dbg !29
  %82 = and i32 %11, 3, !dbg !29
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !29
  %84 = bitcast float %60 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 %81) #3, !dbg !29
  %85 = or disjoint i32 %82, 4, !dbg !29
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !29
  %87 = bitcast float %80 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 %81) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %88 = icmp slt i32 %7, 8, !dbg !29
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !29
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %88) #3, !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !29
  %93 = bitcast i32 %92 to float, !dbg !29
  %94 = fadd float %91, %93, !dbg !24
  %95 = bitcast float %94 to i32, !dbg !29
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !29
  %97 = bitcast i32 %96 to float, !dbg !29
  %98 = fadd float %94, %97, !dbg !24
  %99 = and i32 %7, 3, !dbg !29
  %100 = icmp eq i32 %99, 0, !dbg !29
  %101 = and i1 %88, %100, !dbg !29
  %102 = bitcast float %98 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %102, i1 %101) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %103 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %104 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) @global_smem, i32 %103, i32 %104, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !30
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !30
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 2.560000e+02) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %108 = sext i32 %10 to i64, !dbg !32
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !32
  %110 = lshr i32 %8, 1, !dbg !33
  %111 = shl nuw nsw i32 %82, 4, !dbg !33
  %112 = or disjoint i32 %111, %110, !dbg !33
  %113 = icmp eq i32 %112, 0, !dbg !33
  %114 = bitcast float %107 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %109, i1 %113) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ojoprknxyrg2pes6evjhkfhlrqmz3umcwmfqqxdx5ngnm7ksel.py", directory: "inductor_cache/3o")
!4 = !{ptr @triton_red_fused_mean_34, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_34", linkageName: "triton_red_fused_mean_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 44, scope: !7)
!18 = !DILocation(line: 34, column: 57, scope: !7)
!19 = !DILocation(line: 34, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 34, column: 34, scope: !7)
!22 = !DILocation(line: 34, column: 62, scope: !7)
!23 = !DILocation(line: 36, column: 23, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 38, column: 25, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 4, scope: !7)
!32 = !DILocation(line: 42, column: 28, scope: !7)
!33 = !DILocation(line: 42, column: 39, scope: !7)
!34 = !DILocation(line: 42, column: 4, scope: !7)
