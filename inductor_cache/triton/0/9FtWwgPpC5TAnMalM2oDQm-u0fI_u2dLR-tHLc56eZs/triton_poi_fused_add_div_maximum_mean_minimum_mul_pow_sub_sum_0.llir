; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_div_maximum_mean_minimum_mul_pow_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 2, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %9, 3, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 4, !dbg !14
  %14 = shl i32 %12, 2, !dbg !15
  %15 = or disjoint i32 %14, 2, !dbg !16
  %16 = sext i32 %15 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %13) #1, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !19
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %13) #1, !dbg !20
  %21 = sext i32 %14 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %13) #1, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %13) #1, !dbg !24
  %26 = or disjoint i32 %14, 3, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %13) #1, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !28
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #1, !dbg !29
  %32 = or disjoint i32 %14, 1, !dbg !30
  %33 = sext i32 %32 to i64, !dbg !31
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !31
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %13) #1, !dbg !32
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !33
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !34
  %38 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !18
  %39 = insertelement <2 x i32> %38, i32 %29, i64 1, !dbg !18
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !18
  %41 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !20
  %42 = insertelement <2 x i32> %41, i32 %31, i64 1, !dbg !20
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !20
  %44 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !22
  %45 = insertelement <2 x i32> %44, i32 %35, i64 1, !dbg !22
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !22
  %47 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !24
  %48 = insertelement <2 x i32> %47, i32 %37, i64 1, !dbg !24
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !24
  %50 = fcmp olt <2 x float> %40, %43, !dbg !35
  %51 = fcmp uno <2 x float> %40, zeroinitializer, !dbg !39
  %52 = or <2 x i1> %51, %50, !dbg !40
  %.v = select <2 x i1> %52, <2 x i32> %39, <2 x i32> %42, !dbg !41
  %53 = bitcast <2 x i32> %.v to <2 x float>, !dbg !41
  %54 = fcmp ogt <2 x float> %46, %49, !dbg !42
  %55 = fcmp uno <2 x float> %46, zeroinitializer, !dbg !44
  %56 = or <2 x i1> %55, %54, !dbg !45
  %.v3 = select <2 x i1> %56, <2 x i32> %45, <2 x i32> %48, !dbg !46
  %57 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !46
  %58 = fsub <2 x float> %53, %57, !dbg !47
  %59 = fadd <2 x float> %58, splat (float 0x3EE4F8B580000000), !dbg !48
  %60 = fcmp ole <2 x float> %59, zeroinitializer, !dbg !49
  %61 = select <2 x i1> %60, <2 x float> zeroinitializer, <2 x float> %59, !dbg !49
  %shift = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %62 = fmul <2 x float> %61, %shift, !dbg !51
  %63 = extractelement <2 x float> %62, i64 0, !dbg !51
  %64 = bitcast i32 %23 to float, !dbg !52
  %65 = bitcast i32 %18 to float, !dbg !52
  %66 = fsub float %65, %64, !dbg !53
  %67 = bitcast i32 %35 to float, !dbg !54
  %68 = bitcast i32 %29 to float, !dbg !54
  %69 = fsub float %68, %67, !dbg !55
  %70 = fmul float %66, %69, !dbg !56
  %71 = bitcast i32 %25 to float, !dbg !57
  %72 = bitcast i32 %20 to float, !dbg !57
  %73 = fsub float %72, %71, !dbg !58
  %74 = bitcast i32 %37 to float, !dbg !59
  %75 = bitcast i32 %31 to float, !dbg !59
  %76 = fsub float %75, %74, !dbg !60
  %77 = fmul float %73, %76, !dbg !61
  %78 = fadd float %70, %77, !dbg !62
  %79 = fsub float %78, %63, !dbg !63
  %80 = fadd float %65, %64, !dbg !52
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 2.000000e+00) #1, !dbg !64
  %82 = fadd float %72, %71, !dbg !57
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 2.000000e+00) #1, !dbg !65
  %84 = fsub float %81, %83, !dbg !66
  %85 = fmul float %84, %84, !dbg !67
  %86 = fadd float %68, %67, !dbg !54
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 2.000000e+00) #1, !dbg !68
  %88 = fadd float %75, %74, !dbg !59
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 2.000000e+00) #1, !dbg !69
  %90 = fsub float %87, %89, !dbg !70
  %91 = fmul float %90, %90, !dbg !71
  %92 = fadd float %85, %91, !dbg !72
  %93 = fcmp olt <2 x float> %46, %49, !dbg !73
  %94 = or <2 x i1> %55, %93, !dbg !75
  %.v4 = select <2 x i1> %94, <2 x i32> %45, <2 x i32> %48, !dbg !76
  %95 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !76
  %96 = fcmp ogt <2 x float> %40, %43, !dbg !77
  %97 = or <2 x i1> %51, %96, !dbg !79
  %.v5 = select <2 x i1> %97, <2 x i32> %39, <2 x i32> %42, !dbg !80
  %98 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !80
  %99 = fsub <2 x float> %95, %98, !dbg !81
  %100 = fmul <2 x float> %99, %99, !dbg !82
  %shift2 = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !83
  %101 = fadd <2 x float> %100, %shift2, !dbg !83
  %102 = extractelement <2 x float> %101, i64 0, !dbg !83
  %103 = fadd float %102, 0x3EE4F8B580000000, !dbg !84
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %103) #1, !dbg !85
  %105 = sext i32 %12 to i64, !dbg !86
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !86
  %107 = icmp eq i32 %10, 0, !dbg !87
  %108 = bitcast float %63 to i32, !dbg !87
  %109 = and i1 %107, %13, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %106, i1 %109) #1, !dbg !87
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !88
  %111 = bitcast float %79 to i32, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %110, i1 %109) #1, !dbg !89
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %105, !dbg !90
  %113 = bitcast float %104 to i32, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %112, i1 %109) #1, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpbom3evnjfqrefhxkizt5falsw73r2624hmjcf6quiozsh5lg4f.py", directory: "inductor_cache/pb")
!4 = !{ptr @triton_poi_fused_add_div_maximum_mean_minimum_mul_pow_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_maximum_mean_minimum_mul_pow_sub_sum_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_maximum_mean_minimum_mul_pow_sub_sum_0", linkageName: "triton_poi_fused_add_div_maximum_mean_minimum_mul_pow_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 36, scope: !7)
!16 = !DILocation(line: 25, column: 34, scope: !7)
!17 = !DILocation(line: 25, column: 30, scope: !7)
!18 = !DILocation(line: 25, column: 41, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 37, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 37, scope: !7)
!25 = !DILocation(line: 29, column: 35, scope: !7)
!26 = !DILocation(line: 29, column: 31, scope: !7)
!27 = !DILocation(line: 29, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 110, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 33, column: 40, scope: !7)
!39 = !DILocation(line: 112, column: 21, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 112, column: 16, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 113, column: 29, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !43)
!43 = !DILocation(line: 34, column: 40, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !43)
!47 = !DILocation(line: 35, column: 18, scope: !7)
!48 = !DILocation(line: 37, column: 18, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !50)
!50 = !DILocation(line: 39, column: 41, scope: !7)
!51 = !DILocation(line: 45, column: 20, scope: !7)
!52 = !DILocation(line: 54, column: 19, scope: !7)
!53 = !DILocation(line: 46, column: 19, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 47, column: 20, scope: !7)
!56 = !DILocation(line: 48, column: 20, scope: !7)
!57 = !DILocation(line: 57, column: 19, scope: !7)
!58 = !DILocation(line: 49, column: 19, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 50, column: 20, scope: !7)
!61 = !DILocation(line: 51, column: 20, scope: !7)
!62 = !DILocation(line: 52, column: 20, scope: !7)
!63 = !DILocation(line: 53, column: 20, scope: !7)
!64 = !DILocation(line: 56, column: 20, scope: !7)
!65 = !DILocation(line: 58, column: 20, scope: !7)
!66 = !DILocation(line: 59, column: 20, scope: !7)
!67 = !DILocation(line: 60, column: 20, scope: !7)
!68 = !DILocation(line: 62, column: 20, scope: !7)
!69 = !DILocation(line: 64, column: 20, scope: !7)
!70 = !DILocation(line: 65, column: 20, scope: !7)
!71 = !DILocation(line: 66, column: 20, scope: !7)
!72 = !DILocation(line: 67, column: 20, scope: !7)
!73 = !DILocation(line: 110, column: 15, scope: !36, inlinedAt: !74)
!74 = !DILocation(line: 68, column: 41, scope: !7)
!75 = !DILocation(line: 112, column: 16, scope: !36, inlinedAt: !74)
!76 = !DILocation(line: 113, column: 29, scope: !36, inlinedAt: !74)
!77 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !78)
!78 = !DILocation(line: 69, column: 41, scope: !7)
!79 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !78)
!80 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !78)
!81 = !DILocation(line: 70, column: 20, scope: !7)
!82 = !DILocation(line: 71, column: 20, scope: !7)
!83 = !DILocation(line: 76, column: 20, scope: !7)
!84 = !DILocation(line: 77, column: 20, scope: !7)
!85 = !DILocation(line: 78, column: 20, scope: !7)
!86 = !DILocation(line: 79, column: 25, scope: !7)
!87 = !DILocation(line: 79, column: 37, scope: !7)
!88 = !DILocation(line: 80, column: 25, scope: !7)
!89 = !DILocation(line: 80, column: 37, scope: !7)
!90 = !DILocation(line: 81, column: 25, scope: !7)
!91 = !DILocation(line: 81, column: 37, scope: !7)
!92 = !DILocation(line: 81, column: 4, scope: !7)
