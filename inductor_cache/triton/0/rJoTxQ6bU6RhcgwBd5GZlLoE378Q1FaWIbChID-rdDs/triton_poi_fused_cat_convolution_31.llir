; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 1, !dbg !12
  %10 = shl nuw nsw i32 %9, 2, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %16 = shl i32 %15, 6, !dbg !15
  %17 = lshr i32 %8, 1, !dbg !16
  %18 = and i32 %17, 63, !dbg !16
  %19 = shl i32 %8, 2, !dbg !16
  %20 = and i32 %19, 60, !dbg !16
  %21 = or disjoint i32 %16, %18, !dbg !17
  %22 = or disjoint i32 %16, %20, !dbg !17
  %23 = icmp slt i32 %21, 64, !dbg !18
  %24 = icmp slt i32 %22, 64, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %25 = sdiv i32 %.frozen, 256, !dbg !19
  %26 = mul i32 %25, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = shl i32 %21, 8, !dbg !21
  %28 = add i32 %27, %.decomposed, !dbg !22
  %29 = shl i32 %25, 14, !dbg !23
  %30 = add i32 %28, %29, !dbg !24
  %31 = sext i32 %30 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %23) #2, !dbg !26
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !26
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !26
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !26
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !26
  %38 = shl i32 %14, 6, !dbg !27
  %39 = add i32 %22, %38, !dbg !28
  %40 = sext i32 %39 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !29
  %42 = shl nuw nsw i32 %9, 8, !dbg !30
  %43 = or disjoint i32 %42, %18, !dbg !30
  %44 = and i32 %19, 508, !dbg !30
  %.idx = shl nuw nsw i32 %9, 4, !dbg !30
  %45 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !30
  %46 = getelementptr float, ptr addrspace(3) %45, i32 %43, !dbg !30
  %47 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #2, !dbg !30
  %48 = or disjoint i32 %43, 64, !dbg !30
  %49 = lshr i32 %48, 6, !dbg !30
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i32 %49, !dbg !30
  %51 = getelementptr float, ptr addrspace(3) %50, i32 %48, !dbg !30
  %52 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #2, !dbg !30
  %53 = or disjoint i32 %43, 128, !dbg !30
  %54 = lshr i32 %53, 6, !dbg !30
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i32 %54, !dbg !30
  %56 = getelementptr float, ptr addrspace(3) %55, i32 %53, !dbg !30
  %57 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #2, !dbg !30
  %58 = or disjoint i32 %43, 192, !dbg !30
  %59 = lshr i32 %58, 6, !dbg !30
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !30
  %61 = getelementptr float, ptr addrspace(3) %60, i32 %58, !dbg !30
  %62 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %63 = lshr i32 %44, 6, !dbg !30
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !30
  %65 = getelementptr inbounds float, ptr addrspace(3) %64, i32 %44, !dbg !30
  %66 = load i32, ptr addrspace(3) %65, align 4, !dbg !30
  %67 = or disjoint i32 %44, 1, !dbg !30
  %68 = getelementptr inbounds float, ptr addrspace(3) %64, i32 %67, !dbg !30
  %69 = load i32, ptr addrspace(3) %68, align 4, !dbg !30
  %70 = or disjoint i32 %44, 2, !dbg !30
  %71 = getelementptr inbounds float, ptr addrspace(3) %64, i32 %70, !dbg !30
  %72 = load i32, ptr addrspace(3) %71, align 4, !dbg !30
  %73 = or disjoint i32 %44, 3, !dbg !30
  %74 = getelementptr inbounds float, ptr addrspace(3) %64, i32 %73, !dbg !30
  %75 = load i32, ptr addrspace(3) %74, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %66, i32 %69, i32 %72, i32 %75, ptr addrspace(1) %41, i1 %24) #2, !dbg !30
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %34, i32 %35, i32 %36, i32 %37, ptr addrspace(1) %76, i1 %23) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc6tfsiabx4rqdmqxbchg34jyzcoxbvsuc2eeryud6ua44tqdvhk.py", directory: "inductor_cache/c6")
!4 = !{ptr @triton_poi_fused_cat_convolution_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_31", linkageName: "triton_poi_fused_cat_convolution_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 33, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 44, scope: !7)
!31 = !DILocation(line: 34, column: 25, scope: !7)
!32 = !DILocation(line: 34, column: 56, scope: !7)
!33 = !DILocation(line: 34, column: 4, scope: !7)
