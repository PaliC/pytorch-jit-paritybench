; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 252, !dbg !12
  %15 = and i32 %12, 255, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %.lobit4 = lshr i32 %12, 6, !dbg !16
  %20 = and i32 %.lobit4, 3, !dbg !16
  %21 = or disjoint i32 %19, %20, !dbg !17
  %22 = or disjoint i32 %21, 4, !dbg !17
  %23 = or disjoint i32 %21, 8, !dbg !17
  %24 = or disjoint i32 %21, 12, !dbg !17
  %25 = icmp slt i32 %21, 64, !dbg !18
  %26 = icmp slt i32 %22, 64, !dbg !18
  %27 = icmp slt i32 %23, 64, !dbg !18
  %28 = icmp slt i32 %24, 64, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %29 = sdiv i32 %.frozen, 256, !dbg !19
  %30 = mul i32 %29, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = srem i32 %17, 256, !dbg !20
  %32 = shl i32 %21, 8, !dbg !21
  %33 = shl i32 %22, 8, !dbg !21
  %34 = shl i32 %23, 8, !dbg !21
  %35 = shl i32 %24, 8, !dbg !21
  %36 = shl i32 %29, 14, !dbg !22
  %37 = add i32 %36, %.decomposed, !dbg !23
  %38 = add i32 %37, %32, !dbg !24
  %39 = add i32 %37, %33, !dbg !24
  %40 = add i32 %37, %34, !dbg !24
  %41 = add i32 %37, %35, !dbg !24
  %42 = sext i32 %38 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = sext i32 %39 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %40 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %41 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %25) #4, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %26) #4, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %27) #4, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %28) #4, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = and i32 %13, 1020, !dbg !26
  %71 = lshr i32 %13, 6, !dbg !26
  %72 = and i32 %71, 12, !dbg !26
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !26
  %74 = getelementptr inbounds float, ptr addrspace(3) %73, i32 %70, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %51, i32 %52, i32 %53, i32 %54, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !26
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %77 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 1040, !dbg !26
  %78 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %79 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 2080, !dbg !26
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %81 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 3120, !dbg !26
  %82 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %56, i32 %57, i32 %58, i32 %59, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %83 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %84 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %85 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %86 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %61, i32 %62, i32 %63, i32 %64, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %87 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %88 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %89 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %90 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %66, i32 %67, i32 %68, i32 %69, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %91 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %92 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %93 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %94 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  %95 = sext i32 %31 to i64, !dbg !27
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !27
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #4, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !29
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #4, !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !31
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #4, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !33
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #4, !dbg !34
  %105 = fadd float %100, 0x3EE4F8B580000000, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %106, 0, !dbg !36
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %107, 0, !dbg !36
  br i1 %.not.i, label %113, label %108, !dbg !36

108:                                              ; preds = %9
  br i1 %.not1.i, label %111, label %109, !dbg !36

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

113:                                              ; preds = %9
  br i1 %.not1.i, label %116, label %114, !dbg !36

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %109, %111, %114, %116
  %.0.i = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !36
  %118 = and i32 %13, 12, !dbg !12
  %119 = or disjoint i32 %19, %118, !dbg !17
  %120 = icmp slt i32 %119, 64, !dbg !18
  %121 = lshr i32 %12, 2, !dbg !12
  %122 = and i32 %121, 63, !dbg !12
  %123 = or disjoint i32 %122, 192, !dbg !12
  %124 = or disjoint i32 %11, %123, !dbg !13
  %125 = or disjoint i32 %122, 128, !dbg !12
  %126 = or disjoint i32 %11, %125, !dbg !13
  %127 = or disjoint i32 %122, 64, !dbg !12
  %128 = or disjoint i32 %11, %127, !dbg !13
  %129 = or disjoint i32 %11, %122, !dbg !13
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %131 = insertelement <16 x float> poison, float %94, i64 0, !dbg !38
  %132 = insertelement <16 x float> %131, float %93, i64 1, !dbg !38
  %133 = insertelement <16 x float> %132, float %92, i64 2, !dbg !38
  %134 = insertelement <16 x float> %133, float %91, i64 3, !dbg !38
  %135 = insertelement <16 x float> %134, float %90, i64 4, !dbg !38
  %136 = insertelement <16 x float> %135, float %89, i64 5, !dbg !38
  %137 = insertelement <16 x float> %136, float %88, i64 6, !dbg !38
  %138 = insertelement <16 x float> %137, float %87, i64 7, !dbg !38
  %139 = insertelement <16 x float> %138, float %86, i64 8, !dbg !38
  %140 = insertelement <16 x float> %139, float %85, i64 9, !dbg !38
  %141 = insertelement <16 x float> %140, float %84, i64 10, !dbg !38
  %142 = insertelement <16 x float> %141, float %83, i64 11, !dbg !38
  %143 = insertelement <16 x float> %142, float %82, i64 12, !dbg !38
  %144 = insertelement <16 x float> %143, float %80, i64 13, !dbg !38
  %145 = insertelement <16 x float> %144, float %78, i64 14, !dbg !38
  %146 = insertelement <16 x float> %145, float %76, i64 15, !dbg !38
  %147 = insertelement <16 x i32> poison, i32 %97, i64 0, !dbg !38
  %148 = bitcast <16 x i32> %147 to <16 x float>, !dbg !38
  %149 = shufflevector <16 x float> %148, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %150 = fsub <16 x float> %146, %149, !dbg !38
  %151 = insertelement <16 x float> poison, float %130, i64 0, !dbg !39
  %152 = shufflevector <16 x float> %151, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %153 = fmul <16 x float> %150, %152, !dbg !39
  %154 = insertelement <16 x i32> poison, i32 %102, i64 0, !dbg !40
  %155 = bitcast <16 x i32> %154 to <16 x float>, !dbg !40
  %156 = shufflevector <16 x float> %155, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %157 = fmul <16 x float> %153, %156, !dbg !40
  %158 = insertelement <16 x i32> poison, i32 %104, i64 0, !dbg !41
  %159 = bitcast <16 x i32> %158 to <16 x float>, !dbg !41
  %160 = shufflevector <16 x float> %159, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %161 = fadd <16 x float> %157, %160, !dbg !41
  %162 = fcmp ole <16 x float> %161, zeroinitializer, !dbg !42
  %163 = select <16 x i1> %162, <16 x float> zeroinitializer, <16 x float> %161, !dbg !42
  %164 = fcmp olt <16 x float> %163, splat (float 6.000000e+00), !dbg !46
  %165 = extractelement <16 x float> %163, i64 15, !dbg !48
  %166 = fcmp uno float %165, 0.000000e+00, !dbg !49
  %167 = extractelement <16 x float> %163, i64 14, !dbg !48
  %168 = fcmp uno float %167, 0.000000e+00, !dbg !49
  %169 = extractelement <16 x float> %163, i64 13, !dbg !48
  %170 = fcmp uno float %169, 0.000000e+00, !dbg !49
  %171 = extractelement <16 x float> %163, i64 12, !dbg !48
  %172 = fcmp uno float %171, 0.000000e+00, !dbg !49
  %173 = extractelement <16 x float> %163, i64 11, !dbg !48
  %174 = fcmp uno float %173, 0.000000e+00, !dbg !49
  %175 = extractelement <16 x float> %163, i64 10, !dbg !48
  %176 = fcmp uno float %175, 0.000000e+00, !dbg !49
  %177 = extractelement <16 x float> %163, i64 9, !dbg !48
  %178 = fcmp uno float %177, 0.000000e+00, !dbg !49
  %179 = extractelement <16 x float> %163, i64 8, !dbg !48
  %180 = fcmp uno float %179, 0.000000e+00, !dbg !49
  %181 = extractelement <16 x float> %163, i64 7, !dbg !48
  %182 = fcmp uno float %181, 0.000000e+00, !dbg !49
  %183 = extractelement <16 x float> %163, i64 6, !dbg !48
  %184 = fcmp uno float %183, 0.000000e+00, !dbg !49
  %185 = extractelement <16 x float> %163, i64 5, !dbg !48
  %186 = fcmp uno float %185, 0.000000e+00, !dbg !49
  %187 = extractelement <16 x float> %163, i64 4, !dbg !48
  %188 = fcmp uno float %187, 0.000000e+00, !dbg !49
  %189 = extractelement <16 x float> %163, i64 3, !dbg !48
  %190 = fcmp uno float %189, 0.000000e+00, !dbg !49
  %191 = extractelement <16 x float> %163, i64 2, !dbg !48
  %192 = fcmp uno float %191, 0.000000e+00, !dbg !49
  %193 = extractelement <16 x float> %163, i64 1, !dbg !48
  %194 = fcmp uno float %193, 0.000000e+00, !dbg !49
  %195 = extractelement <16 x float> %163, i64 0, !dbg !48
  %196 = fcmp uno float %195, 0.000000e+00, !dbg !49
  %197 = extractelement <16 x i1> %164, i64 15, !dbg !50
  %198 = or i1 %197, %166, !dbg !50
  %199 = extractelement <16 x i1> %164, i64 14, !dbg !50
  %200 = or i1 %199, %168, !dbg !50
  %201 = extractelement <16 x i1> %164, i64 13, !dbg !50
  %202 = or i1 %201, %170, !dbg !50
  %203 = extractelement <16 x i1> %164, i64 12, !dbg !50
  %204 = or i1 %203, %172, !dbg !50
  %205 = extractelement <16 x i1> %164, i64 11, !dbg !50
  %206 = or i1 %205, %174, !dbg !50
  %207 = extractelement <16 x i1> %164, i64 10, !dbg !50
  %208 = or i1 %207, %176, !dbg !50
  %209 = extractelement <16 x i1> %164, i64 9, !dbg !50
  %210 = or i1 %209, %178, !dbg !50
  %211 = extractelement <16 x i1> %164, i64 8, !dbg !50
  %212 = or i1 %211, %180, !dbg !50
  %213 = extractelement <16 x i1> %164, i64 7, !dbg !50
  %214 = or i1 %213, %182, !dbg !50
  %215 = extractelement <16 x i1> %164, i64 6, !dbg !50
  %216 = or i1 %215, %184, !dbg !50
  %217 = extractelement <16 x i1> %164, i64 5, !dbg !50
  %218 = or i1 %217, %186, !dbg !50
  %219 = extractelement <16 x i1> %164, i64 4, !dbg !50
  %220 = or i1 %219, %188, !dbg !50
  %221 = extractelement <16 x i1> %164, i64 3, !dbg !50
  %222 = or i1 %221, %190, !dbg !50
  %223 = extractelement <16 x i1> %164, i64 2, !dbg !50
  %224 = or i1 %223, %192, !dbg !50
  %225 = extractelement <16 x i1> %164, i64 1, !dbg !50
  %226 = or i1 %225, %194, !dbg !50
  %227 = extractelement <16 x i1> %164, i64 0, !dbg !50
  %228 = or i1 %227, %196, !dbg !50
  %229 = shl i32 %129, 6, !dbg !51
  %230 = shl i32 %128, 6, !dbg !51
  %231 = shl i32 %126, 6, !dbg !51
  %232 = shl i32 %124, 6, !dbg !51
  %233 = add i32 %119, %229, !dbg !52
  %234 = add i32 %119, %230, !dbg !52
  %235 = add i32 %119, %231, !dbg !52
  %236 = add i32 %119, %232, !dbg !52
  %237 = sext i32 %233 to i64, !dbg !53
  %238 = getelementptr float, ptr addrspace(1) %5, i64 %237, !dbg !53
  %239 = sext i32 %234 to i64, !dbg !53
  %240 = getelementptr float, ptr addrspace(1) %5, i64 %239, !dbg !53
  %241 = sext i32 %235 to i64, !dbg !53
  %242 = getelementptr float, ptr addrspace(1) %5, i64 %241, !dbg !53
  %243 = sext i32 %236 to i64, !dbg !53
  %244 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %245 = shl i32 %12, 4, !dbg !48
  %246 = and i32 %245, 4080, !dbg !48
  %247 = lshr exact i32 %246, 2, !dbg !48
  %248 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %247, !dbg !48
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %246, !dbg !48
  %250 = bitcast float %165 to i32, !dbg !48
  %251 = select i1 %198, i32 %250, i32 1086324736, !dbg !54
  %252 = insertelement <1 x i32> poison, i32 %251, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %252, i1 true) #4, !dbg !48
  %253 = or disjoint i32 %246, 1, !dbg !48
  %254 = getelementptr float, ptr addrspace(3) %248, i32 %253, !dbg !48
  %255 = bitcast float %167 to i32, !dbg !48
  %256 = select i1 %200, i32 %255, i32 1086324736, !dbg !54
  %257 = insertelement <1 x i32> poison, i32 %256, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %257, i1 true) #4, !dbg !48
  %258 = or disjoint i32 %246, 2, !dbg !48
  %259 = getelementptr float, ptr addrspace(3) %248, i32 %258, !dbg !48
  %260 = bitcast float %169 to i32, !dbg !48
  %261 = select i1 %202, i32 %260, i32 1086324736, !dbg !54
  %262 = insertelement <1 x i32> poison, i32 %261, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %262, i1 true) #4, !dbg !48
  %263 = or disjoint i32 %246, 3, !dbg !48
  %264 = getelementptr float, ptr addrspace(3) %248, i32 %263, !dbg !48
  %265 = bitcast float %171 to i32, !dbg !48
  %266 = select i1 %204, i32 %265, i32 1086324736, !dbg !54
  %267 = insertelement <1 x i32> poison, i32 %266, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %267, i1 true) #4, !dbg !48
  %268 = or disjoint i32 %246, 4, !dbg !48
  %269 = getelementptr float, ptr addrspace(3) %248, i32 %268, !dbg !48
  %270 = bitcast float %173 to i32, !dbg !48
  %271 = select i1 %206, i32 %270, i32 1086324736, !dbg !54
  %272 = insertelement <1 x i32> poison, i32 %271, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %272, i1 true) #4, !dbg !48
  %273 = or disjoint i32 %246, 5, !dbg !48
  %274 = getelementptr float, ptr addrspace(3) %248, i32 %273, !dbg !48
  %275 = bitcast float %175 to i32, !dbg !48
  %276 = select i1 %208, i32 %275, i32 1086324736, !dbg !54
  %277 = insertelement <1 x i32> poison, i32 %276, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %277, i1 true) #4, !dbg !48
  %278 = or disjoint i32 %246, 6, !dbg !48
  %279 = getelementptr float, ptr addrspace(3) %248, i32 %278, !dbg !48
  %280 = bitcast float %177 to i32, !dbg !48
  %281 = select i1 %210, i32 %280, i32 1086324736, !dbg !54
  %282 = insertelement <1 x i32> poison, i32 %281, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %282, i1 true) #4, !dbg !48
  %283 = or disjoint i32 %246, 7, !dbg !48
  %284 = getelementptr float, ptr addrspace(3) %248, i32 %283, !dbg !48
  %285 = bitcast float %179 to i32, !dbg !48
  %286 = select i1 %212, i32 %285, i32 1086324736, !dbg !54
  %287 = insertelement <1 x i32> poison, i32 %286, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %287, i1 true) #4, !dbg !48
  %288 = or disjoint i32 %246, 8, !dbg !48
  %289 = getelementptr float, ptr addrspace(3) %248, i32 %288, !dbg !48
  %290 = bitcast float %181 to i32, !dbg !48
  %291 = select i1 %214, i32 %290, i32 1086324736, !dbg !54
  %292 = insertelement <1 x i32> poison, i32 %291, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %292, i1 true) #4, !dbg !48
  %293 = or disjoint i32 %246, 9, !dbg !48
  %294 = getelementptr float, ptr addrspace(3) %248, i32 %293, !dbg !48
  %295 = bitcast float %183 to i32, !dbg !48
  %296 = select i1 %216, i32 %295, i32 1086324736, !dbg !54
  %297 = insertelement <1 x i32> poison, i32 %296, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %297, i1 true) #4, !dbg !48
  %298 = or disjoint i32 %246, 10, !dbg !48
  %299 = getelementptr float, ptr addrspace(3) %248, i32 %298, !dbg !48
  %300 = bitcast float %185 to i32, !dbg !48
  %301 = select i1 %218, i32 %300, i32 1086324736, !dbg !54
  %302 = insertelement <1 x i32> poison, i32 %301, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %302, i1 true) #4, !dbg !48
  %303 = or disjoint i32 %246, 11, !dbg !48
  %304 = getelementptr float, ptr addrspace(3) %248, i32 %303, !dbg !48
  %305 = bitcast float %187 to i32, !dbg !48
  %306 = select i1 %220, i32 %305, i32 1086324736, !dbg !54
  %307 = insertelement <1 x i32> poison, i32 %306, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %307, i1 true) #4, !dbg !48
  %308 = or disjoint i32 %246, 12, !dbg !48
  %309 = getelementptr float, ptr addrspace(3) %248, i32 %308, !dbg !48
  %310 = bitcast float %189 to i32, !dbg !48
  %311 = select i1 %222, i32 %310, i32 1086324736, !dbg !54
  %312 = insertelement <1 x i32> poison, i32 %311, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %312, i1 true) #4, !dbg !48
  %313 = or disjoint i32 %246, 13, !dbg !48
  %314 = getelementptr float, ptr addrspace(3) %248, i32 %313, !dbg !48
  %315 = bitcast float %191 to i32, !dbg !48
  %316 = select i1 %224, i32 %315, i32 1086324736, !dbg !54
  %317 = insertelement <1 x i32> poison, i32 %316, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %317, i1 true) #4, !dbg !48
  %318 = or disjoint i32 %246, 14, !dbg !48
  %319 = getelementptr float, ptr addrspace(3) %248, i32 %318, !dbg !48
  %320 = bitcast float %193 to i32, !dbg !48
  %321 = select i1 %226, i32 %320, i32 1086324736, !dbg !54
  %322 = insertelement <1 x i32> poison, i32 %321, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %322, i1 true) #4, !dbg !48
  %323 = or disjoint i32 %246, 15, !dbg !48
  %324 = getelementptr float, ptr addrspace(3) %248, i32 %323, !dbg !48
  %325 = bitcast float %195 to i32, !dbg !48
  %326 = select i1 %228, i32 %325, i32 1086324736, !dbg !54
  %327 = insertelement <1 x i32> poison, i32 %326, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %327, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %328 = lshr i32 %70, 4, !dbg !48
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %328, !dbg !48
  %330 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %70, !dbg !48
  %331 = load i32, ptr addrspace(3) %330, align 4, !dbg !48
  %332 = or disjoint i32 %70, 1, !dbg !48
  %333 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %332, !dbg !48
  %334 = load i32, ptr addrspace(3) %333, align 4, !dbg !48
  %335 = or disjoint i32 %70, 2, !dbg !48
  %336 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %335, !dbg !48
  %337 = load i32, ptr addrspace(3) %336, align 4, !dbg !48
  %338 = or disjoint i32 %70, 3, !dbg !48
  %339 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %338, !dbg !48
  %340 = load i32, ptr addrspace(3) %339, align 4, !dbg !48
  %341 = or disjoint i32 %70, 1024, !dbg !48
  %342 = lshr i32 %341, 4, !dbg !48
  %343 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %342, !dbg !48
  %344 = getelementptr inbounds float, ptr addrspace(3) %343, i32 %341, !dbg !48
  %345 = load i32, ptr addrspace(3) %344, align 4, !dbg !48
  %346 = or disjoint i32 %70, 1025, !dbg !48
  %347 = lshr i32 %346, 4, !dbg !48
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %347, !dbg !48
  %349 = getelementptr inbounds float, ptr addrspace(3) %348, i32 %346, !dbg !48
  %350 = load i32, ptr addrspace(3) %349, align 4, !dbg !48
  %351 = or disjoint i32 %70, 1026, !dbg !48
  %352 = lshr i32 %351, 4, !dbg !48
  %353 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %352, !dbg !48
  %354 = getelementptr inbounds float, ptr addrspace(3) %353, i32 %351, !dbg !48
  %355 = load i32, ptr addrspace(3) %354, align 4, !dbg !48
  %356 = or disjoint i32 %70, 1027, !dbg !48
  %357 = lshr i32 %356, 4, !dbg !48
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %357, !dbg !48
  %359 = getelementptr inbounds float, ptr addrspace(3) %358, i32 %356, !dbg !48
  %360 = load i32, ptr addrspace(3) %359, align 4, !dbg !48
  %361 = or disjoint i32 %70, 2048, !dbg !48
  %362 = lshr i32 %361, 4, !dbg !48
  %363 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %362, !dbg !48
  %364 = getelementptr inbounds float, ptr addrspace(3) %363, i32 %361, !dbg !48
  %365 = load i32, ptr addrspace(3) %364, align 4, !dbg !48
  %366 = or disjoint i32 %70, 2049, !dbg !48
  %367 = lshr i32 %366, 4, !dbg !48
  %368 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %367, !dbg !48
  %369 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %366, !dbg !48
  %370 = load i32, ptr addrspace(3) %369, align 4, !dbg !48
  %371 = or disjoint i32 %70, 2050, !dbg !48
  %372 = lshr i32 %371, 4, !dbg !48
  %373 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %372, !dbg !48
  %374 = getelementptr inbounds float, ptr addrspace(3) %373, i32 %371, !dbg !48
  %375 = load i32, ptr addrspace(3) %374, align 4, !dbg !48
  %376 = or disjoint i32 %70, 2051, !dbg !48
  %377 = lshr i32 %376, 4, !dbg !48
  %378 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %377, !dbg !48
  %379 = getelementptr inbounds float, ptr addrspace(3) %378, i32 %376, !dbg !48
  %380 = load i32, ptr addrspace(3) %379, align 4, !dbg !48
  %381 = or disjoint i32 %70, 3072, !dbg !48
  %382 = lshr i32 %381, 4, !dbg !48
  %383 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %382, !dbg !48
  %384 = getelementptr inbounds float, ptr addrspace(3) %383, i32 %381, !dbg !48
  %385 = load i32, ptr addrspace(3) %384, align 4, !dbg !48
  %386 = or disjoint i32 %70, 3073, !dbg !48
  %387 = lshr i32 %386, 4, !dbg !48
  %388 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %387, !dbg !48
  %389 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %386, !dbg !48
  %390 = load i32, ptr addrspace(3) %389, align 4, !dbg !48
  %391 = or disjoint i32 %70, 3074, !dbg !48
  %392 = lshr i32 %391, 4, !dbg !48
  %393 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %392, !dbg !48
  %394 = getelementptr inbounds float, ptr addrspace(3) %393, i32 %391, !dbg !48
  %395 = load i32, ptr addrspace(3) %394, align 4, !dbg !48
  %396 = or disjoint i32 %70, 3075, !dbg !48
  %397 = lshr i32 %396, 4, !dbg !48
  %398 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %397, !dbg !48
  %399 = getelementptr inbounds float, ptr addrspace(3) %398, i32 %396, !dbg !48
  %400 = load i32, ptr addrspace(3) %399, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %334, i32 %337, i32 %340, ptr addrspace(1) %238, i1 %120) #4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %345, i32 %350, i32 %355, i32 %360, ptr addrspace(1) %240, i1 %120) #4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %365, i32 %370, i32 %375, i32 %380, ptr addrspace(1) %242, i1 %120) #4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %385, i32 %390, i32 %395, i32 %400, ptr addrspace(1) %244, i1 %120) #4, !dbg !48
  %401 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !55
  %402 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !55
  %403 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !55
  %404 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %252, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %257, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %262, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %267, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %405 = load <4 x i32>, ptr addrspace(3) %74, align 16, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %272, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %277, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %282, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %287, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %406 = load <4 x i32>, ptr addrspace(3) %74, align 16, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %292, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %297, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %302, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %307, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %407 = load <4 x i32>, ptr addrspace(3) %74, align 16, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %312, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %317, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %322, i1 true) #4, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %327, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %408 = load <4 x i32>, ptr addrspace(3) %74, align 16, !dbg !56
  %.extract = extractelement <4 x i32> %405, i64 0, !dbg !56
  %.extract35 = extractelement <4 x i32> %405, i64 1, !dbg !56
  %.extract36 = extractelement <4 x i32> %405, i64 2, !dbg !56
  %.extract37 = extractelement <4 x i32> %405, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract35, i32 %.extract36, i32 %.extract37, ptr addrspace(1) %401, i1 %25) #4, !dbg !56
  %.extract38 = extractelement <4 x i32> %406, i64 0, !dbg !56
  %.extract39 = extractelement <4 x i32> %406, i64 1, !dbg !56
  %.extract40 = extractelement <4 x i32> %406, i64 2, !dbg !56
  %.extract41 = extractelement <4 x i32> %406, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract38, i32 %.extract39, i32 %.extract40, i32 %.extract41, ptr addrspace(1) %402, i1 %26) #4, !dbg !56
  %.extract42 = extractelement <4 x i32> %407, i64 0, !dbg !56
  %.extract43 = extractelement <4 x i32> %407, i64 1, !dbg !56
  %.extract44 = extractelement <4 x i32> %407, i64 2, !dbg !56
  %.extract45 = extractelement <4 x i32> %407, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract42, i32 %.extract43, i32 %.extract44, i32 %.extract45, ptr addrspace(1) %403, i1 %27) #4, !dbg !56
  %.extract46 = extractelement <4 x i32> %408, i64 0, !dbg !56
  %.extract47 = extractelement <4 x i32> %408, i64 1, !dbg !56
  %.extract48 = extractelement <4 x i32> %408, i64 2, !dbg !56
  %.extract49 = extractelement <4 x i32> %408, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract46, i32 %.extract47, i32 %.extract48, i32 %.extract49, ptr addrspace(1) %404, i1 %28) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpknmvqg7o7ryzve5e4ilo6o5kibt3mf532coh37zavfxdjwata5.py", directory: "inductor_cache/pk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 110, column: 15, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 52, column: 45, scope: !7)
!49 = !DILocation(line: 112, column: 21, scope: !43, inlinedAt: !47)
!50 = !DILocation(line: 112, column: 16, scope: !43, inlinedAt: !47)
!51 = !DILocation(line: 52, column: 33, scope: !7)
!52 = !DILocation(line: 52, column: 30, scope: !7)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 113, column: 29, scope: !43, inlinedAt: !47)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 57, scope: !7)
!57 = !DILocation(line: 53, column: 4, scope: !7)
