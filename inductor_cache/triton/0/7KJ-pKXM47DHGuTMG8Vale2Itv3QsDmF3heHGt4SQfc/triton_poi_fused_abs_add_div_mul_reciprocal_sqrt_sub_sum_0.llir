; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_abs_add_div_mul_reciprocal_sqrt_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %0, i1 true) #3, !dbg !10
  %7 = bitcast i32 %6 to float, !dbg !10
  %8 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !11
  %9 = bitcast i32 %8 to float, !dbg !11
  %10 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #3, !dbg !12
  %11 = bitcast i32 %10 to float, !dbg !12
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #3, !dbg !13
  %13 = bitcast i32 %12 to float, !dbg !13
  %14 = getelementptr i8, ptr addrspace(1) %0, i64 4, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !15
  %16 = bitcast i32 %15 to float, !dbg !15
  %17 = getelementptr i8, ptr addrspace(1) %1, i64 4, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = getelementptr i8, ptr addrspace(1) %2, i64 4, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !19
  %22 = bitcast i32 %21 to float, !dbg !19
  %23 = getelementptr i8, ptr addrspace(1) %3, i64 4, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !21
  %25 = bitcast i32 %24 to float, !dbg !21
  %26 = getelementptr i8, ptr addrspace(1) %0, i64 8, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !23
  %28 = bitcast i32 %27 to float, !dbg !23
  %29 = getelementptr i8, ptr addrspace(1) %1, i64 8, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !25
  %31 = bitcast i32 %30 to float, !dbg !25
  %32 = getelementptr i8, ptr addrspace(1) %2, i64 8, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !27
  %34 = bitcast i32 %33 to float, !dbg !27
  %35 = getelementptr i8, ptr addrspace(1) %3, i64 8, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !29
  %37 = bitcast i32 %36 to float, !dbg !29
  %38 = getelementptr i8, ptr addrspace(1) %0, i64 12, !dbg !30
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !31
  %40 = bitcast i32 %39 to float, !dbg !31
  %41 = getelementptr i8, ptr addrspace(1) %1, i64 12, !dbg !32
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !33
  %43 = bitcast i32 %42 to float, !dbg !33
  %44 = getelementptr i8, ptr addrspace(1) %2, i64 12, !dbg !34
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !35
  %46 = getelementptr i8, ptr addrspace(1) %3, i64 12, !dbg !36
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !37
  %48 = bitcast i32 %47 to float, !dbg !37
  %49 = fadd float %9, 0x3EE4F8B580000000, !dbg !38
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %50, 0, !dbg !39
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %51, 0, !dbg !39
  br i1 %.not.i, label %57, label %52, !dbg !39

52:                                               ; preds = %5
  br i1 %.not1.i, label %55, label %53, !dbg !39

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

57:                                               ; preds = %5
  br i1 %.not1.i, label %60, label %58, !dbg !39

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %53, %55, %58, %60
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !39
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %7, float %.0.i) #3, !dbg !40
  %63 = fadd float %13, 0x3EE4F8B580000000, !dbg !41
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %64, 0, !dbg !42
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i4 = icmp eq i32 %65, 0, !dbg !42
  br i1 %.not.i1, label %71, label %66, !dbg !42

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !42

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !42

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %67, %69, %72, %74
  %.0.i3 = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !42
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %11, float %.0.i3) #3, !dbg !43
  %77 = fsub float %62, %76, !dbg !44
  %78 = tail call float @llvm.fabs.f32(float %77), !dbg !45
  %79 = fadd float %78, 1.000000e+00, !dbg !46
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %79) #3, !dbg !47
  %81 = fadd float %19, 0x3EE4F8B580000000, !dbg !48
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i6 = icmp eq i32 %82, 0, !dbg !49
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i9 = icmp eq i32 %83, 0, !dbg !49
  br i1 %.not.i6, label %89, label %84, !dbg !49

84:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %87, label %85, !dbg !49

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !49

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

__nv_sqrtf.exit10:                                ; preds = %85, %87, %90, %92
  %.0.i8 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !49
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %16, float %.0.i8) #3, !dbg !50
  %95 = fadd float %25, 0x3EE4F8B580000000, !dbg !51
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i11 = icmp eq i32 %96, 0, !dbg !52
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i14 = icmp eq i32 %97, 0, !dbg !52
  br i1 %.not.i11, label %103, label %98, !dbg !52

98:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %101, label %99, !dbg !52

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

103:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %106, label %104, !dbg !52

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

__nv_sqrtf.exit15:                                ; preds = %99, %101, %104, %106
  %.0.i13 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !52
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %22, float %.0.i13) #3, !dbg !53
  %109 = fsub float %94, %108, !dbg !54
  %110 = tail call float @llvm.fabs.f32(float %109), !dbg !55
  %111 = fadd float %110, 1.000000e+00, !dbg !56
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %111) #3, !dbg !57
  %113 = fadd float %31, 0x3EE4F8B580000000, !dbg !58
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !59
  %.not.i16 = icmp eq i32 %114, 0, !dbg !59
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !59
  %.not1.i19 = icmp eq i32 %115, 0, !dbg !59
  br i1 %.not.i16, label %121, label %116, !dbg !59

116:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %119, label %117, !dbg !59

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !59
  br label %__nv_sqrtf.exit20, !dbg !59

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !59
  br label %__nv_sqrtf.exit20, !dbg !59

121:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %124, label %122, !dbg !59

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !59
  br label %__nv_sqrtf.exit20, !dbg !59

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !59
  br label %__nv_sqrtf.exit20, !dbg !59

__nv_sqrtf.exit20:                                ; preds = %117, %119, %122, %124
  %.0.i18 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !59
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %28, float %.0.i18) #3, !dbg !60
  %127 = fadd float %37, 0x3EE4F8B580000000, !dbg !61
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !62
  %.not.i21 = icmp eq i32 %128, 0, !dbg !62
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !62
  %.not1.i24 = icmp eq i32 %129, 0, !dbg !62
  br i1 %.not.i21, label %135, label %130, !dbg !62

130:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %133, label %131, !dbg !62

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

135:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %138, label %136, !dbg !62

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

__nv_sqrtf.exit25:                                ; preds = %131, %133, %136, %138
  %.0.i23 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !62
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float %.0.i23) #3, !dbg !63
  %141 = fsub float %126, %140, !dbg !64
  %142 = tail call float @llvm.fabs.f32(float %141), !dbg !65
  %143 = fadd float %142, 1.000000e+00, !dbg !66
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %143) #3, !dbg !67
  %145 = fadd float %43, 0x3EE4F8B580000000, !dbg !68
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i26 = icmp eq i32 %146, 0, !dbg !69
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i29 = icmp eq i32 %147, 0, !dbg !69
  br i1 %.not.i26, label %153, label %148, !dbg !69

148:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %151, label %149, !dbg !69

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

153:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %156, label %154, !dbg !69

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !69
  br label %__nv_sqrtf.exit30, !dbg !69

__nv_sqrtf.exit30:                                ; preds = %149, %151, %154, %156
  %.0.i28 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !69
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float %.0.i28) #3, !dbg !70
  %159 = fadd float %48, 0x3EE4F8B580000000, !dbg !71
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i31 = icmp eq i32 %160, 0, !dbg !72
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i34 = icmp eq i32 %161, 0, !dbg !72
  br i1 %.not.i31, label %167, label %162, !dbg !72

162:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %165, label %163, !dbg !72

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %159) #3, !dbg !72
  br label %__nv_sqrtf.exit35, !dbg !72

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %159) #3, !dbg !72
  br label %__nv_sqrtf.exit35, !dbg !72

167:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %170, label %168, !dbg !72

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %159) #3, !dbg !72
  br label %__nv_sqrtf.exit35, !dbg !72

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %159) #3, !dbg !72
  br label %__nv_sqrtf.exit35, !dbg !72

__nv_sqrtf.exit35:                                ; preds = %163, %165, %168, %170
  %.0.i33 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !72
  %172 = fadd float %80, %112, !dbg !73
  %173 = fadd float %172, %144, !dbg !74
  %174 = bitcast i32 %45 to float, !dbg !35
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %.0.i33) #3, !dbg !75
  %176 = fsub float %158, %175, !dbg !76
  %177 = tail call float @llvm.fabs.f32(float %176), !dbg !77
  %178 = fadd float %177, 1.000000e+00, !dbg !78
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %178) #3, !dbg !79
  %180 = fadd float %173, %179, !dbg !80
  %181 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !81
  %182 = and i32 %181, 31, !dbg !81
  %183 = icmp eq i32 %182, 0, !dbg !81
  %184 = bitcast float %180 to i32, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %4, i1 %183) #3, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbvirxij63zjh4hhj4vfztwfd6iipesbo34q4cnsf4td6e5fnnyy.py", directory: "inductor_cache/bv")
!4 = !{ptr @triton_poi_fused_abs_add_div_mul_reciprocal_sqrt_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_abs_add_div_mul_reciprocal_sqrt_sub_sum_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_abs_add_div_mul_reciprocal_sqrt_sub_sum_0", linkageName: "triton_poi_fused_abs_add_div_mul_reciprocal_sqrt_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 19, scope: !7)
!11 = !DILocation(line: 26, column: 19, scope: !7)
!12 = !DILocation(line: 28, column: 19, scope: !7)
!13 = !DILocation(line: 30, column: 20, scope: !7)
!14 = !DILocation(line: 32, column: 31, scope: !7)
!15 = !DILocation(line: 32, column: 20, scope: !7)
!16 = !DILocation(line: 34, column: 31, scope: !7)
!17 = !DILocation(line: 34, column: 20, scope: !7)
!18 = !DILocation(line: 36, column: 31, scope: !7)
!19 = !DILocation(line: 36, column: 20, scope: !7)
!20 = !DILocation(line: 38, column: 31, scope: !7)
!21 = !DILocation(line: 38, column: 20, scope: !7)
!22 = !DILocation(line: 40, column: 31, scope: !7)
!23 = !DILocation(line: 40, column: 20, scope: !7)
!24 = !DILocation(line: 42, column: 31, scope: !7)
!25 = !DILocation(line: 42, column: 20, scope: !7)
!26 = !DILocation(line: 44, column: 31, scope: !7)
!27 = !DILocation(line: 44, column: 20, scope: !7)
!28 = !DILocation(line: 46, column: 31, scope: !7)
!29 = !DILocation(line: 46, column: 20, scope: !7)
!30 = !DILocation(line: 48, column: 31, scope: !7)
!31 = !DILocation(line: 48, column: 20, scope: !7)
!32 = !DILocation(line: 50, column: 31, scope: !7)
!33 = !DILocation(line: 50, column: 20, scope: !7)
!34 = !DILocation(line: 52, column: 31, scope: !7)
!35 = !DILocation(line: 52, column: 20, scope: !7)
!36 = !DILocation(line: 54, column: 31, scope: !7)
!37 = !DILocation(line: 54, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 18, scope: !7)
!39 = !DILocation(line: 58, column: 26, scope: !7)
!40 = !DILocation(line: 59, column: 18, scope: !7)
!41 = !DILocation(line: 60, column: 20, scope: !7)
!42 = !DILocation(line: 61, column: 27, scope: !7)
!43 = !DILocation(line: 62, column: 19, scope: !7)
!44 = !DILocation(line: 63, column: 19, scope: !7)
!45 = !DILocation(line: 64, column: 24, scope: !7)
!46 = !DILocation(line: 66, column: 20, scope: !7)
!47 = !DILocation(line: 68, column: 20, scope: !7)
!48 = !DILocation(line: 70, column: 20, scope: !7)
!49 = !DILocation(line: 71, column: 27, scope: !7)
!50 = !DILocation(line: 72, column: 20, scope: !7)
!51 = !DILocation(line: 73, column: 20, scope: !7)
!52 = !DILocation(line: 74, column: 27, scope: !7)
!53 = !DILocation(line: 75, column: 20, scope: !7)
!54 = !DILocation(line: 76, column: 20, scope: !7)
!55 = !DILocation(line: 77, column: 24, scope: !7)
!56 = !DILocation(line: 78, column: 20, scope: !7)
!57 = !DILocation(line: 79, column: 20, scope: !7)
!58 = !DILocation(line: 82, column: 20, scope: !7)
!59 = !DILocation(line: 83, column: 27, scope: !7)
!60 = !DILocation(line: 84, column: 20, scope: !7)
!61 = !DILocation(line: 85, column: 20, scope: !7)
!62 = !DILocation(line: 86, column: 27, scope: !7)
!63 = !DILocation(line: 87, column: 20, scope: !7)
!64 = !DILocation(line: 88, column: 20, scope: !7)
!65 = !DILocation(line: 89, column: 24, scope: !7)
!66 = !DILocation(line: 90, column: 20, scope: !7)
!67 = !DILocation(line: 91, column: 20, scope: !7)
!68 = !DILocation(line: 94, column: 20, scope: !7)
!69 = !DILocation(line: 95, column: 27, scope: !7)
!70 = !DILocation(line: 96, column: 20, scope: !7)
!71 = !DILocation(line: 97, column: 20, scope: !7)
!72 = !DILocation(line: 98, column: 27, scope: !7)
!73 = !DILocation(line: 81, column: 20, scope: !7)
!74 = !DILocation(line: 93, column: 20, scope: !7)
!75 = !DILocation(line: 99, column: 20, scope: !7)
!76 = !DILocation(line: 100, column: 20, scope: !7)
!77 = !DILocation(line: 101, column: 24, scope: !7)
!78 = !DILocation(line: 102, column: 20, scope: !7)
!79 = !DILocation(line: 103, column: 20, scope: !7)
!80 = !DILocation(line: 105, column: 20, scope: !7)
!81 = !DILocation(line: 106, column: 65, scope: !7)
!82 = !DILocation(line: 106, column: 4, scope: !7)
