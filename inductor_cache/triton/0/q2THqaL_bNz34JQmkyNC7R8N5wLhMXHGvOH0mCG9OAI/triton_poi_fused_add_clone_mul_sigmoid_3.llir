; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_clone_mul_sigmoid_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = lshr i32 %9, 2, !dbg !12
  %13 = and i32 %12, 4, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !12
  %15 = and i32 %9, 32, !dbg !12
  %16 = lshr exact i32 %15, 2, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !12
  %18 = and i32 %9, 64, !dbg !12
  %19 = lshr exact i32 %18, 2, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !12
  %21 = shl i32 %9, 2, !dbg !12
  %22 = and i32 %21, 12, !dbg !12
  %23 = and i32 %21, 28, !dbg !12
  %24 = or disjoint i32 %20, %8, !dbg !13
  %25 = or disjoint i32 %8, %23, !dbg !13
  %26 = icmp slt i32 %24, 64, !dbg !14
  %27 = icmp slt i32 %25, 64, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %29 = shl i32 %28, 4, !dbg !16
  %30 = lshr i32 %9, 3, !dbg !17
  %31 = and i32 %30, 3, !dbg !17
  %32 = lshr exact i32 %15, 3, !dbg !17
  %33 = or disjoint i32 %31, %32, !dbg !17
  %34 = lshr exact i32 %18, 3, !dbg !17
  %35 = or disjoint i32 %33, %34, !dbg !17
  %36 = or disjoint i32 %29, %22, !dbg !18
  %37 = or disjoint i32 %35, %29, !dbg !18
  %38 = icmp slt i32 %36, 16, !dbg !19
  %39 = icmp slt i32 %37, 16, !dbg !19
  %40 = shl i32 %24, 4, !dbg !20
  %41 = add i32 %36, %40, !dbg !21
  %42 = sext i32 %41 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = and i1 %26, %38, !dbg !23
  %45 = and i1 %27, %39, !dbg !23
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %44) #2, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = bitcast i32 %50 to float, !dbg !24
  %55 = sext i32 %24 to i64, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %26) #2, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %26) #2, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %26) #2, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %26) #2, !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = shl i32 %37, 2, !dbg !27
  %63 = shl i32 %25, 4, !dbg !28
  %64 = add i32 %62, %63, !dbg !29
  %65 = sext i32 %64 to i64, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !30
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %45) #2, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !31
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !31
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !31
  %72 = bitcast i32 %68 to float, !dbg !31
  %73 = bitcast i32 %69 to float, !dbg !31
  %74 = bitcast i32 %70 to float, !dbg !31
  %75 = bitcast i32 %71 to float, !dbg !31
  %76 = fsub float 0.000000e+00, %61, !dbg !32
  %77 = fmul float %76, 0x3FF7154760000000, !dbg !36
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #2, !dbg !36
  %79 = fadd float %78, 1.000000e+00, !dbg !37
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %79) #2, !dbg !38
  %81 = fmul float %80, %51, !dbg !39
  %82 = fmul float %80, %52, !dbg !39
  %83 = fmul float %80, %53, !dbg !39
  %84 = fmul float %80, %54, !dbg !39
  %85 = shl i32 %9, 7, !dbg !39
  %86 = and i32 %85, 384, !dbg !39
  %87 = or disjoint i32 %11, %86, !dbg !39
  %88 = or disjoint i32 %87, %13, !dbg !39
  %89 = or disjoint i32 %88, %16, !dbg !39
  %90 = or disjoint i32 %89, %19, !dbg !39
  %91 = and i32 %21, 508, !dbg !39
  %92 = lshr exact i32 %86, 1, !dbg !39
  %93 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %92, !dbg !39
  %94 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %90, !dbg !39
  %95 = bitcast float %81 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !39
  %96 = or disjoint i32 %90, 32, !dbg !39
  %97 = lshr i32 %96, 3, !dbg !39
  %98 = and i32 %97, 536870908, !dbg !39
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !39
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %96, !dbg !39
  %101 = bitcast float %82 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !39
  %102 = or disjoint i32 %90, 64, !dbg !39
  %103 = lshr i32 %102, 3, !dbg !39
  %104 = and i32 %103, 536870908, !dbg !39
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !39
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %102, !dbg !39
  %107 = bitcast float %83 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #2, !dbg !39
  %108 = or disjoint i32 %90, 96, !dbg !39
  %109 = lshr i32 %108, 3, !dbg !39
  %110 = and i32 %109, 536870908, !dbg !39
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !39
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %108, !dbg !39
  %113 = bitcast float %84 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %114 = lshr i32 %21, 3, !dbg !39
  %115 = and i32 %114, 60, !dbg !39
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !39
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %91, !dbg !39
  %118 = load float, ptr addrspace(3) %117, align 16, !dbg !39
  %119 = getelementptr inbounds i8, ptr addrspace(3) %117, i32 4, !dbg !39
  %120 = load float, ptr addrspace(3) %119, align 4, !dbg !39
  %121 = getelementptr inbounds i8, ptr addrspace(3) %117, i32 8, !dbg !39
  %122 = load float, ptr addrspace(3) %121, align 8, !dbg !39
  %123 = getelementptr inbounds i8, ptr addrspace(3) %117, i32 12, !dbg !39
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !39
  %125 = fadd float %118, %72, !dbg !40
  %126 = fadd float %120, %73, !dbg !40
  %127 = fadd float %122, %74, !dbg !40
  %128 = fadd float %124, %75, !dbg !40
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %130 = shl i32 %9, 6, !dbg !42
  %131 = and i32 %130, 448, !dbg !42
  %132 = or disjoint i32 %31, %131, !dbg !42
  %133 = or disjoint i32 %132, %32, !dbg !42
  %134 = or disjoint i32 %133, %34, !dbg !42
  %135 = lshr exact i32 %131, 2, !dbg !42
  %136 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %135, !dbg !42
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !42
  %138 = bitcast float %125 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !42
  %139 = or disjoint i32 %134, 16, !dbg !42
  %140 = lshr i32 %139, 4, !dbg !42
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !42
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %139, !dbg !42
  %143 = bitcast float %126 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !42
  %144 = or disjoint i32 %134, 32, !dbg !42
  %145 = lshr i32 %144, 4, !dbg !42
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !42
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %144, !dbg !42
  %148 = bitcast float %127 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !42
  %149 = or disjoint i32 %134, 48, !dbg !42
  %150 = lshr i32 %149, 4, !dbg !42
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !42
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %149, !dbg !42
  %153 = bitcast float %128 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %154 = lshr i32 %91, 4, !dbg !42
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !42
  %156 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %91, !dbg !42
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !42
  %158 = or disjoint i32 %91, 1, !dbg !42
  %159 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %158, !dbg !42
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !42
  %161 = or disjoint i32 %91, 2, !dbg !42
  %162 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %161, !dbg !42
  %163 = load i32, ptr addrspace(3) %162, align 4, !dbg !42
  %164 = or disjoint i32 %91, 3, !dbg !42
  %165 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %164, !dbg !42
  %166 = load i32, ptr addrspace(3) %165, align 4, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %157, i32 %160, i32 %163, i32 %166, ptr addrspace(1) %129, i1 %44) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cokhrb4iiusee4t7f3h5clt6t2leh4nkqmxfjazrsdrirel6rtrc.py", directory: "inductor_cache/ok")
!4 = !{ptr @triton_poi_fused_add_clone_mul_sigmoid_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clone_mul_sigmoid_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clone_mul_sigmoid_3", linkageName: "triton_poi_fused_add_clone_mul_sigmoid_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 37, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 34, column: 42, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 50, scope: !7)
!32 = !DILocation(line: 47, column: 30, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 35, column: 22, scope: !7)
!36 = !DILocation(line: 47, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 47, column: 20, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 47, column: 16, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 25, scope: !7)
!42 = !DILocation(line: 38, column: 44, scope: !7)
!43 = !DILocation(line: 38, column: 4, scope: !7)
