; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 3, !dbg !12
  %17 = and i32 %16, 248, !dbg !12
  %18 = shl i32 %15, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %14, %17, !dbg !13
  %21 = or disjoint i32 %20, 4, !dbg !13
  %22 = or disjoint i32 %14, %19, !dbg !13
  %23 = icmp slt i32 %20, 512, !dbg !14
  %24 = icmp slt i32 %22, 512, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %26 = shl i32 %25, 2, !dbg !16
  %.lobit1 = lshr i32 %15, 5, !dbg !17
  %27 = and i32 %.lobit1, 3, !dbg !17
  %28 = or disjoint i32 %26, %27, !dbg !18
  %29 = icmp slt i32 %28, 4, !dbg !19
  %.frozen = freeze i32 %20, !dbg !20
  %30 = sdiv i32 %.frozen, 128, !dbg !20
  %31 = mul i32 %30, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = srem i32 %21, 128, !dbg !21
  %33 = srem i32 %22, 128, !dbg !21
  %.frozen49 = freeze i32 %28, !dbg !22
  %34 = sdiv i32 %.frozen49, 2, !dbg !22
  %35 = mul i32 %34, 2, !dbg !23
  %.decomposed50 = sub i32 %.frozen49, %35, !dbg !23
  %36 = shl i32 %28, 7, !dbg !24
  %37 = shl i32 %30, 9, !dbg !25
  %38 = add i32 %37, %36, !dbg !26
  %39 = add i32 %38, %.decomposed, !dbg !27
  %40 = add i32 %38, %32, !dbg !27
  %41 = sext i32 %39 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !28
  %43 = sext i32 %40 to i64, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !28
  %45 = and i1 %23, %29, !dbg !29
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %45) #4, !dbg !30
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !30
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !30
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !30
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %45) #4, !dbg !30
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !30
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !30
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !30
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !30
  %56 = and i32 %16, 1016, !dbg !30
  %57 = lshr i32 %16, 5, !dbg !30
  %58 = and i32 %57, 24, !dbg !30
  %59 = add nuw nsw i32 %58, %56, !dbg !30
  %60 = zext nneg i32 %59 to i64, !dbg !30
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %60, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %61, i32 %47, i32 %48, i32 %49, i32 %50, i1 true) #4, !dbg !30
  %62 = getelementptr inbounds i8, ptr addrspace(3) %61, i64 16, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %62, i32 %52, i32 %53, i32 %54, i32 %55, i1 true) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %63 = zext nneg i32 %19 to i64, !dbg !30
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %63, !dbg !30
  %65 = load <2 x float>, ptr addrspace(3) %64, align 8, !dbg !30
  %66 = add nuw nsw i32 %19, 264, !dbg !30
  %67 = zext nneg i32 %66 to i64, !dbg !30
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %67, !dbg !30
  %69 = load <2 x float>, ptr addrspace(3) %68, align 8, !dbg !30
  %70 = add nuw nsw i32 %19, 528, !dbg !30
  %71 = zext nneg i32 %70 to i64, !dbg !30
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %71, !dbg !30
  %73 = load <2 x float>, ptr addrspace(3) %72, align 8, !dbg !30
  %74 = add nuw nsw i32 %19, 792, !dbg !30
  %75 = zext nneg i32 %74 to i64, !dbg !30
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %75, !dbg !30
  %77 = load <2 x float>, ptr addrspace(3) %76, align 8, !dbg !30
  %78 = sext i32 %33 to i64, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !31
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %79, i1 %24) #4, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !33
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %81, i1 %24) #4, !dbg !34
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !34
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !34
  %85 = bitcast i32 %83 to float, !dbg !34
  %86 = bitcast i32 %84 to float, !dbg !34
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !35
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %87, i1 %24) #4, !dbg !36
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %78, !dbg !37
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %89, i1 %24) #4, !dbg !38
  %91 = sext i32 %34 to i64, !dbg !39
  %92 = getelementptr i64, ptr addrspace(1) %5, i64 %91, !dbg !39
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #4, !dbg !40
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #4, !dbg !40
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #4, !dbg !40
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #4, !dbg !40
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #4, !dbg !40
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #4, !dbg !40
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #4, !dbg !40
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #4, !dbg !40
  %101 = sext i32 %.decomposed50 to i64, !dbg !41
  %102 = getelementptr i64, ptr addrspace(1) %5, i64 %101, !dbg !41
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %102, i1 %29) #4, !dbg !42
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %102, i1 %29) #4, !dbg !42
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %102, i1 %29) #4, !dbg !42
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %102, i1 %29) #4, !dbg !42
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %102, i1 %29) #4, !dbg !42
  %108 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %102, i1 %29) #4, !dbg !42
  %109 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %102, i1 %29) #4, !dbg !42
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %102, i1 %29) #4, !dbg !42
  %111 = fadd float %85, 0x3EE4F8B580000000, !dbg !43
  %112 = fadd float %86, 0x3EE4F8B580000000, !dbg !43
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %113, 0, !dbg !44
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i = icmp eq i32 %114, 0, !dbg !44
  br i1 %.not.i, label %120, label %115, !dbg !44

115:                                              ; preds = %12
  br i1 %.not1.i, label %118, label %116, !dbg !44

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

120:                                              ; preds = %12
  br i1 %.not1.i, label %123, label %121, !dbg !44

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %116, %118, %121, %123
  %.0.i = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !44
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i37 = icmp eq i32 %125, 0, !dbg !44
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i40 = icmp eq i32 %126, 0, !dbg !44
  br i1 %.not.i37, label %132, label %127, !dbg !44

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i40, label %130, label %128, !dbg !44

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #4, !dbg !44
  br label %__nv_sqrtf.exit41, !dbg !44

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #4, !dbg !44
  br label %__nv_sqrtf.exit41, !dbg !44

132:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i40, label %135, label %133, !dbg !44

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #4, !dbg !44
  br label %__nv_sqrtf.exit41, !dbg !44

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #4, !dbg !44
  br label %__nv_sqrtf.exit41, !dbg !44

__nv_sqrtf.exit41:                                ; preds = %128, %130, %133, %135
  %.0.i39 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !44
  %137 = extractvalue { i32, i32 } %80, 1, !dbg !32
  %138 = extractvalue { i32, i32 } %80, 0, !dbg !32
  %139 = extractelement <2 x float> %69, i64 1, !dbg !30
  %140 = extractelement <2 x float> %69, i64 0, !dbg !30
  %141 = extractelement <2 x float> %65, i64 1, !dbg !30
  %142 = extractelement <2 x float> %65, i64 0, !dbg !30
  %143 = extractvalue { i32, i32 } %90, 1, !dbg !38
  %144 = extractvalue { i32, i32 } %90, 0, !dbg !38
  %145 = extractvalue { i32, i32 } %88, 1, !dbg !36
  %146 = extractvalue { i32, i32 } %88, 0, !dbg !36
  %147 = lshr i32 %15, 6, !dbg !17
  %.lobit = and i32 %147, 1, !dbg !17
  %148 = or disjoint i32 %.lobit, %26, !dbg !18
  %149 = or disjoint i32 %148, 2, !dbg !18
  %150 = icmp slt i32 %149, 4, !dbg !19
  %151 = shl i32 %15, 2, !dbg !12
  %152 = and i32 %151, 252, !dbg !12
  %153 = or disjoint i32 %14, %152, !dbg !13
  %154 = icmp slt i32 %153, 512, !dbg !14
  %155 = and i1 %154, %150, !dbg !29
  %156 = icmp slt i32 %148, 4, !dbg !19
  %157 = and i1 %154, %156, !dbg !29
  %158 = icmp slt i32 %26, 4, !dbg !19
  %159 = and i32 %15, 127, !dbg !12
  %160 = or disjoint i32 %159, %14, !dbg !13
  %161 = or disjoint i32 %160, 128, !dbg !13
  %162 = icmp slt i32 %161, 512, !dbg !14
  %163 = and i1 %158, %162, !dbg !29
  %164 = icmp slt i32 %160, 512, !dbg !14
  %165 = and i1 %158, %164, !dbg !29
  %.frozen51 = freeze i32 %153, !dbg !20
  %166 = sdiv i32 %.frozen51, 128, !dbg !20
  %167 = mul i32 %166, 128, !dbg !21
  %.decomposed52 = sub i32 %.frozen51, %167, !dbg !21
  %168 = shl i32 %149, 7, !dbg !24
  %169 = shl i32 %166, 9, !dbg !25
  %170 = add i32 %169, %.decomposed52, !dbg !26
  %171 = add i32 %170, %168, !dbg !27
  %172 = shl i32 %148, 7, !dbg !24
  %173 = add i32 %170, %172, !dbg !27
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !45
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i39) #4, !dbg !45
  %176 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !32
  %177 = insertelement <2 x i32> %176, i32 %138, i64 1, !dbg !32
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !32
  %179 = shufflevector <2 x float> %178, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %180 = shufflevector <2 x float> %77, <2 x float> %73, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %181 = insertelement <8 x float> %180, float %139, i64 4, !dbg !46
  %182 = insertelement <8 x float> %181, float %140, i64 5, !dbg !46
  %183 = insertelement <8 x float> %182, float %141, i64 6, !dbg !46
  %184 = insertelement <8 x float> %183, float %142, i64 7, !dbg !46
  %185 = fsub <8 x float> %184, %179, !dbg !46
  %186 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !38
  %187 = insertelement <2 x i32> %186, i32 %144, i64 1, !dbg !38
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !38
  %189 = shufflevector <2 x float> %188, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !38
  %190 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !36
  %191 = insertelement <2 x i32> %190, i32 %146, i64 1, !dbg !36
  %192 = bitcast <2 x i32> %191 to <2 x float>, !dbg !36
  %193 = shufflevector <2 x float> %192, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !36
  %194 = insertelement <8 x float> poison, float %175, i64 0, !dbg !47
  %195 = insertelement <8 x float> %194, float %174, i64 1, !dbg !47
  %196 = shufflevector <8 x float> %195, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !47
  %197 = fmul <8 x float> %185, %196, !dbg !47
  %198 = fmul <8 x float> %197, %193, !dbg !48
  %199 = fadd <8 x float> %198, %189, !dbg !49
  %200 = fcmp olt <8 x float> %199, zeroinitializer, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %201 = getelementptr inbounds i8, ptr addrspace(3) %61, i64 4, !dbg !54
  %202 = getelementptr inbounds i8, ptr addrspace(3) %61, i64 8, !dbg !54
  %203 = getelementptr inbounds i8, ptr addrspace(3) %61, i64 12, !dbg !54
  %204 = lshr i64 %100, 57, !dbg !55
  %205 = and i64 %204, 64, !dbg !55
  %206 = add i64 %205, %100, !dbg !55
  %207 = lshr i64 %110, 57, !dbg !56
  %208 = and i64 %207, 64, !dbg !56
  %209 = add i64 %208, %110, !dbg !56
  %210 = sext i32 %.decomposed to i64, !dbg !57
  %211 = sext i32 %32 to i64, !dbg !57
  %212 = shl i64 %206, 13, !dbg !58
  %213 = shl i32 %30, 19, !dbg !59
  %214 = sext i32 %213 to i64, !dbg !60
  %.idx = shl i64 %209, 9, !dbg !61
  %215 = getelementptr i8, ptr addrspace(1) %6, i64 %.idx, !dbg !61
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %210, !dbg !61
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %212, !dbg !61
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %214, !dbg !61
  %219 = getelementptr float, ptr addrspace(1) %215, i64 %211, !dbg !61
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %212, !dbg !61
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %214, !dbg !61
  %222 = select <8 x i1> %200, <8 x float> zeroinitializer, <8 x float> %199, !dbg !54
  %bc = bitcast <8 x float> %222 to <8 x i32>, !dbg !54
  %223 = extractelement <8 x i32> %bc, i64 7, !dbg !54
  %bc42 = bitcast <8 x float> %222 to <8 x i32>, !dbg !54
  %224 = extractelement <8 x i32> %bc42, i64 6, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %64, i32 %223, i32 %224, i1 true) #4, !dbg !54
  %bc43 = bitcast <8 x float> %222 to <8 x i32>, !dbg !54
  %225 = extractelement <8 x i32> %bc43, i64 5, !dbg !54
  %bc44 = bitcast <8 x float> %222 to <8 x i32>, !dbg !54
  %226 = extractelement <8 x i32> %bc44, i64 4, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %68, i32 %225, i32 %226, i1 true) #4, !dbg !54
  %bc45 = bitcast <8 x float> %222 to <8 x i32>, !dbg !54
  %227 = extractelement <8 x i32> %bc45, i64 3, !dbg !54
  %bc46 = bitcast <8 x float> %222 to <8 x i32>, !dbg !54
  %228 = extractelement <8 x i32> %bc46, i64 2, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %72, i32 %227, i32 %228, i1 true) #4, !dbg !54
  %bc47 = bitcast <8 x float> %222 to <8 x i32>, !dbg !54
  %229 = extractelement <8 x i32> %bc47, i64 1, !dbg !54
  %bc48 = bitcast <8 x float> %222 to <8 x i32>, !dbg !54
  %230 = extractelement <8 x i32> %bc48, i64 0, !dbg !54
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %76, i32 %229, i32 %230, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %231 = load float, ptr addrspace(3) %61, align 16, !dbg !54
  %232 = load float, ptr addrspace(3) %201, align 4, !dbg !54
  %233 = load float, ptr addrspace(3) %202, align 8, !dbg !54
  %234 = load float, ptr addrspace(3) %203, align 4, !dbg !54
  %235 = load float, ptr addrspace(3) %62, align 16, !dbg !54
  %236 = getelementptr inbounds i8, ptr addrspace(3) %61, i64 20, !dbg !54
  %237 = load float, ptr addrspace(3) %236, align 4, !dbg !54
  %238 = getelementptr inbounds i8, ptr addrspace(3) %61, i64 24, !dbg !54
  %239 = load float, ptr addrspace(3) %238, align 8, !dbg !54
  %240 = getelementptr inbounds i8, ptr addrspace(3) %61, i64 28, !dbg !54
  %241 = load float, ptr addrspace(3) %240, align 4, !dbg !54
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %45) #4, !dbg !62
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !62
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !62
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !62
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !62
  %247 = bitcast i32 %243 to float, !dbg !62
  %248 = bitcast i32 %244 to float, !dbg !62
  %249 = bitcast i32 %245 to float, !dbg !62
  %250 = bitcast i32 %246 to float, !dbg !62
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %221, i1 %45) #4, !dbg !62
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !62
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !62
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !62
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !62
  %256 = bitcast i32 %252 to float, !dbg !62
  %257 = bitcast i32 %253 to float, !dbg !62
  %258 = bitcast i32 %254 to float, !dbg !62
  %259 = bitcast i32 %255 to float, !dbg !62
  %260 = fadd float %231, %247, !dbg !63
  %261 = fadd float %232, %248, !dbg !63
  %262 = fadd float %233, %249, !dbg !63
  %263 = fadd float %234, %250, !dbg !63
  %264 = fadd float %235, %256, !dbg !63
  %265 = fadd float %237, %257, !dbg !63
  %266 = fadd float %239, %258, !dbg !63
  %267 = fadd float %241, %259, !dbg !63
  %268 = fcmp ole <8 x float> %222, zeroinitializer, !dbg !64
  %269 = add i32 %160, %25, !dbg !65
  %270 = shl i32 %269, 2, !dbg !65
  %271 = add i32 %161, %25, !dbg !65
  %272 = shl i32 %271, 2, !dbg !65
  %273 = sext i32 %270 to i64, !dbg !66
  %274 = getelementptr float, ptr addrspace(1) %7, i64 %273, !dbg !66
  %275 = sext i32 %272 to i64, !dbg !66
  %276 = getelementptr float, ptr addrspace(1) %7, i64 %275, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %277 = and i32 %151, 508, !dbg !67
  %278 = lshr exact i32 %56, 2, !dbg !67
  %279 = add nuw nsw i32 %278, %56, !dbg !67
  %280 = zext nneg i32 %279 to i64, !dbg !67
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %280, !dbg !67
  %282 = shufflevector <8 x i32> %bc, <8 x i32> poison, <1 x i32> <i32 7>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #4, !dbg !67
  %283 = or disjoint i32 %56, 4, !dbg !67
  %284 = lshr exact i32 %283, 2, !dbg !67
  %285 = add nuw nsw i32 %284, %283, !dbg !67
  %286 = zext nneg i32 %285 to i64, !dbg !67
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %286, !dbg !67
  %288 = shufflevector <8 x i32> %bc42, <8 x i32> poison, <1 x i32> <i32 6>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #4, !dbg !67
  %289 = or disjoint i32 %56, 1, !dbg !67
  %290 = add nuw nsw i32 %289, %278, !dbg !67
  %291 = zext nneg i32 %290 to i64, !dbg !67
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %291, !dbg !67
  %293 = shufflevector <8 x i32> %bc43, <8 x i32> poison, <1 x i32> <i32 5>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #4, !dbg !67
  %294 = or disjoint i32 %56, 5, !dbg !67
  %295 = lshr i32 %294, 2, !dbg !67
  %296 = add nuw nsw i32 %295, %294, !dbg !67
  %297 = zext nneg i32 %296 to i64, !dbg !67
  %298 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %297, !dbg !67
  %299 = shufflevector <8 x i32> %bc44, <8 x i32> poison, <1 x i32> <i32 4>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #4, !dbg !67
  %300 = or disjoint i32 %56, 2, !dbg !67
  %301 = add nuw nsw i32 %300, %278, !dbg !67
  %302 = zext nneg i32 %301 to i64, !dbg !67
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %302, !dbg !67
  %304 = shufflevector <8 x i32> %bc45, <8 x i32> poison, <1 x i32> <i32 3>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !67
  %305 = or disjoint i32 %56, 6, !dbg !67
  %306 = lshr i32 %305, 2, !dbg !67
  %307 = add nuw nsw i32 %306, %305, !dbg !67
  %308 = zext nneg i32 %307 to i64, !dbg !67
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %308, !dbg !67
  %310 = shufflevector <8 x i32> %bc46, <8 x i32> poison, <1 x i32> <i32 2>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !67
  %311 = or disjoint i32 %56, 3, !dbg !67
  %312 = add nuw nsw i32 %311, %278, !dbg !67
  %313 = zext nneg i32 %312 to i64, !dbg !67
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %313, !dbg !67
  %315 = shufflevector <8 x i32> %bc47, <8 x i32> poison, <1 x i32> <i32 1>, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #4, !dbg !67
  %316 = or disjoint i32 %56, 7, !dbg !67
  %317 = lshr i32 %316, 2, !dbg !67
  %318 = add nuw nsw i32 %317, %316, !dbg !67
  %319 = zext nneg i32 %318 to i64, !dbg !67
  %320 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %319, !dbg !67
  %321 = shufflevector <8 x i32> %bc48, <8 x i32> poison, <1 x i32> zeroinitializer, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 true) #4, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %322 = lshr exact i32 %277, 2, !dbg !67
  %323 = add nuw nsw i32 %322, %277, !dbg !67
  %324 = zext nneg i32 %323 to i64, !dbg !67
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %324, !dbg !67
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !67
  %327 = or disjoint i32 %277, 1, !dbg !67
  %328 = add nuw nsw i32 %327, %322, !dbg !67
  %329 = zext nneg i32 %328 to i64, !dbg !67
  %330 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %329, !dbg !67
  %331 = load i32, ptr addrspace(3) %330, align 4, !dbg !67
  %332 = or disjoint i32 %277, 2, !dbg !67
  %333 = add nuw nsw i32 %332, %322, !dbg !67
  %334 = zext nneg i32 %333 to i64, !dbg !67
  %335 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %334, !dbg !67
  %336 = load i32, ptr addrspace(3) %335, align 4, !dbg !67
  %337 = or disjoint i32 %277, 3, !dbg !67
  %338 = add nuw nsw i32 %337, %322, !dbg !67
  %339 = zext nneg i32 %338 to i64, !dbg !67
  %340 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %339, !dbg !67
  %341 = load i32, ptr addrspace(3) %340, align 4, !dbg !67
  %342 = or disjoint i32 %277, 512, !dbg !67
  %343 = lshr exact i32 %342, 2, !dbg !67
  %344 = add nuw nsw i32 %343, %342, !dbg !67
  %345 = zext nneg i32 %344 to i64, !dbg !67
  %346 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %345, !dbg !67
  %347 = load i32, ptr addrspace(3) %346, align 4, !dbg !67
  %348 = or disjoint i32 %277, 513, !dbg !67
  %349 = lshr i32 %348, 2, !dbg !67
  %350 = add nuw nsw i32 %349, %348, !dbg !67
  %351 = zext nneg i32 %350 to i64, !dbg !67
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %351, !dbg !67
  %353 = load i32, ptr addrspace(3) %352, align 4, !dbg !67
  %354 = or disjoint i32 %277, 514, !dbg !67
  %355 = lshr i32 %354, 2, !dbg !67
  %356 = add nuw nsw i32 %355, %354, !dbg !67
  %357 = zext nneg i32 %356 to i64, !dbg !67
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %357, !dbg !67
  %359 = load i32, ptr addrspace(3) %358, align 4, !dbg !67
  %360 = or disjoint i32 %277, 515, !dbg !67
  %361 = lshr i32 %360, 2, !dbg !67
  %362 = add nuw nsw i32 %361, %360, !dbg !67
  %363 = zext nneg i32 %362 to i64, !dbg !67
  %364 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %363, !dbg !67
  %365 = load i32, ptr addrspace(3) %364, align 4, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %326, i32 %331, i32 %336, i32 %341, ptr addrspace(1) %274, i1 %165) #4, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %353, i32 %359, i32 %365, ptr addrspace(1) %276, i1 %163) #4, !dbg !67
  %366 = sext i32 %173 to i64, !dbg !68
  %367 = getelementptr float, ptr addrspace(1) %8, i64 %366, !dbg !68
  %368 = sext i32 %171 to i64, !dbg !68
  %369 = getelementptr float, ptr addrspace(1) %8, i64 %368, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %370 = bitcast float %260 to i32, !dbg !69
  %371 = bitcast float %261 to i32, !dbg !69
  %372 = bitcast float %262 to i32, !dbg !69
  %373 = bitcast float %263 to i32, !dbg !69
  %374 = bitcast float %264 to i32, !dbg !69
  %375 = bitcast float %265 to i32, !dbg !69
  %376 = bitcast float %266 to i32, !dbg !69
  %377 = bitcast float %267 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %61, i32 %370, i32 %371, i32 %372, i32 %373, i1 true) #4, !dbg !69
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %62, i32 %374, i32 %375, i32 %376, i32 %377, i1 true) #4, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %378 = lshr i32 %151, 5, !dbg !69
  %379 = and i32 %378, 8, !dbg !69
  %380 = add nuw nsw i32 %379, %277, !dbg !69
  %381 = zext nneg i32 %380 to i64, !dbg !69
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %381, !dbg !69
  %383 = lshr i32 %342, 5, !dbg !69
  %384 = and i32 %383, 24, !dbg !69
  %385 = add nuw nsw i32 %384, %342, !dbg !69
  %386 = zext nneg i32 %385 to i64, !dbg !69
  %387 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %386, !dbg !69
  %388 = load <4 x i32>, ptr addrspace(3) %387, align 16, !dbg !69
  %.extract = load i32, ptr addrspace(3) %382, align 16, !dbg !69
  %389 = getelementptr inbounds i8, ptr addrspace(3) %382, i64 4, !dbg !69
  %.extract26 = load i32, ptr addrspace(3) %389, align 4, !dbg !69
  %390 = getelementptr inbounds i8, ptr addrspace(3) %382, i64 8, !dbg !69
  %.extract27 = load i32, ptr addrspace(3) %390, align 8, !dbg !69
  %391 = getelementptr inbounds i8, ptr addrspace(3) %382, i64 12, !dbg !69
  %.extract28 = load i32, ptr addrspace(3) %391, align 4, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %367, i1 %157) #4, !dbg !69
  %.extract29 = extractelement <4 x i32> %388, i64 0, !dbg !69
  %.extract30 = extractelement <4 x i32> %388, i64 1, !dbg !69
  %.extract31 = extractelement <4 x i32> %388, i64 2, !dbg !69
  %.extract32 = extractelement <4 x i32> %388, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %369, i1 %155) #4, !dbg !69
  %392 = getelementptr i1, ptr addrspace(1) %9, i64 %41, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %393 = extractelement <8 x i1> %268, i64 7, !dbg !71
  %394 = zext i1 %393 to i8, !dbg !71
  %395 = extractelement <8 x i1> %268, i64 6, !dbg !71
  %396 = zext i1 %395 to i8, !dbg !71
  %397 = extractelement <8 x i1> %268, i64 5, !dbg !71
  %398 = zext i1 %397 to i8, !dbg !71
  %399 = extractelement <8 x i1> %268, i64 4, !dbg !71
  %400 = zext i1 %399 to i8, !dbg !71
  %401 = extractelement <8 x i1> %268, i64 3, !dbg !71
  %402 = zext i1 %401 to i8, !dbg !71
  %403 = extractelement <8 x i1> %268, i64 2, !dbg !71
  %404 = zext i1 %403 to i8, !dbg !71
  %405 = extractelement <8 x i1> %268, i64 1, !dbg !71
  %406 = zext i1 %405 to i8, !dbg !71
  %407 = extractelement <8 x i1> %268, i64 0, !dbg !71
  %408 = zext i1 %407 to i8, !dbg !71
  %409 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %63, !dbg !71
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %409, i8 %394, i8 %396, i1 true) #4, !dbg !71
  %410 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %67, !dbg !71
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %410, i8 %398, i8 %400, i1 true) #4, !dbg !71
  %411 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %71, !dbg !71
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %411, i8 %402, i8 %404, i1 true) #4, !dbg !71
  %412 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %75, !dbg !71
  tail call void asm sideeffect "@$3 st.shared.v2.b8 [ $0 + 0 ], { $1, $2 };", "r,h,h,b"(ptr addrspace(3) %412, i8 %406, i8 %408, i1 true) #4, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %413 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %60, !dbg !71
  %414 = load <2 x i32>, ptr addrspace(3) %413, align 8, !dbg !71
  %415 = bitcast <2 x i32> %414 to <64 x i1>, !dbg !71
  %416 = extractelement <64 x i1> %415, i64 24, !dbg !71
  %417 = extractelement <64 x i1> %415, i64 56, !dbg !71
  %418 = bitcast <2 x i32> %414 to <8 x i8>, !dbg !71
  %419 = extractelement <8 x i8> %418, i64 0, !dbg !71
  %420 = and i8 %419, 1, !dbg !71
  %421 = shufflevector <8 x i8> %418, <8 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !71
  %422 = and <2 x i8> %421, splat (i8 1), !dbg !71
  %423 = zext i1 %416 to i8, !dbg !71
  %424 = extractelement <8 x i8> %418, i64 4, !dbg !71
  %425 = and i8 %424, 1, !dbg !71
  %426 = shufflevector <8 x i8> %418, <8 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !71
  %427 = and <2 x i8> %426, splat (i8 1), !dbg !71
  %428 = zext i1 %417 to i8, !dbg !71
  %429 = insertelement <4 x i8> poison, i8 %420, i64 0, !dbg !71
  %430 = shufflevector <2 x i8> %422, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !71
  %431 = shufflevector <4 x i8> %429, <4 x i8> %430, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !71
  %432 = insertelement <4 x i8> %431, i8 %423, i64 3, !dbg !71
  %433 = bitcast <4 x i8> %432 to i32, !dbg !71
  %434 = insertelement <4 x i8> poison, i8 %425, i64 0, !dbg !71
  %435 = shufflevector <2 x i8> %427, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !71
  %436 = shufflevector <4 x i8> %434, <4 x i8> %435, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !71
  %437 = insertelement <4 x i8> %436, i8 %428, i64 3, !dbg !71
  %438 = bitcast <4 x i8> %437 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %433, i32 %438, ptr addrspace(1) %392, i1 %45) #4, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py", directory: "inductor_cache/it")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 48, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 61, scope: !7)
!30 = !DILocation(line: 34, column: 53, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 35, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 31, scope: !7)
!40 = !DILocation(line: 39, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 31, scope: !7)
!42 = !DILocation(line: 40, column: 36, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 26, scope: !7)
!45 = !DILocation(line: 46, column: 18, scope: !7)
!46 = !DILocation(line: 41, column: 18, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 50, column: 20, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 53, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 57, column: 35, scope: !7)
!56 = !DILocation(line: 60, column: 35, scope: !7)
!57 = !DILocation(line: 61, column: 36, scope: !7)
!58 = !DILocation(line: 61, column: 53, scope: !7)
!59 = !DILocation(line: 61, column: 68, scope: !7)
!60 = !DILocation(line: 61, column: 61, scope: !7)
!61 = !DILocation(line: 61, column: 31, scope: !7)
!62 = !DILocation(line: 61, column: 73, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 21, scope: !7)
!65 = !DILocation(line: 65, column: 30, scope: !7)
!66 = !DILocation(line: 65, column: 25, scope: !7)
!67 = !DILocation(line: 65, column: 44, scope: !7)
!68 = !DILocation(line: 66, column: 25, scope: !7)
!69 = !DILocation(line: 66, column: 55, scope: !7)
!70 = !DILocation(line: 67, column: 25, scope: !7)
!71 = !DILocation(line: 67, column: 55, scope: !7)
!72 = !DILocation(line: 67, column: 4, scope: !7)
