; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_56(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 10, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 2, !dbg !12
  %22 = and i32 %21, 508, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = or disjoint i32 %23, 1, !dbg !13
  %25 = or disjoint i32 %23, 2, !dbg !13
  %26 = or disjoint i32 %23, 3, !dbg !13
  %27 = or disjoint i32 %23, 512, !dbg !13
  %28 = icmp slt i32 %23, 153600, !dbg !14
  %29 = icmp slt i32 %27, 153600, !dbg !14
  %.frozen = freeze i32 %23, !dbg !15
  %30 = sdiv i32 %.frozen, 16, !dbg !15
  %31 = mul i32 %30, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %31, !dbg !16
  %32 = srem i32 %24, 16, !dbg !16
  %33 = srem i32 %25, 16, !dbg !16
  %34 = srem i32 %26, 16, !dbg !16
  %35 = sdiv i32 %27, 16, !dbg !15
  %36 = sdiv i32 %23, 256, !dbg !17
  %37 = sdiv i32 %27, 256, !dbg !17
  %38 = srem i32 %36, 150, !dbg !18
  %39 = srem i32 %37, 150, !dbg !18
  %40 = shl nsw i32 %.decomposed, 1, !dbg !19
  %41 = shl nsw i32 %32, 1, !dbg !19
  %42 = shl nsw i32 %33, 1, !dbg !19
  %43 = shl nsw i32 %34, 1, !dbg !19
  %44 = shl i32 %30, 6, !dbg !20
  %45 = shl i32 %35, 6, !dbg !20
  %46 = add i32 %40, %44, !dbg !21
  %47 = add i32 %44, %41, !dbg !21
  %48 = add i32 %44, %42, !dbg !21
  %49 = add i32 %44, %43, !dbg !21
  %50 = add i32 %40, %45, !dbg !21
  %51 = add i32 %41, %45, !dbg !21
  %52 = add i32 %42, %45, !dbg !21
  %53 = add i32 %43, %45, !dbg !21
  %54 = sext i32 %46 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !22
  %56 = sext i32 %47 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !22
  %58 = sext i32 %48 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !22
  %60 = sext i32 %49 to i64, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !22
  %62 = sext i32 %50 to i64, !dbg !22
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !22
  %64 = sext i32 %51 to i64, !dbg !22
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !22
  %66 = sext i32 %52 to i64, !dbg !22
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !22
  %68 = sext i32 %53 to i64, !dbg !22
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %28) #3, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %28) #3, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %28) #3, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %28) #3, !dbg !23
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %29) #3, !dbg !23
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %29) #3, !dbg !23
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %29) #3, !dbg !23
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %29) #3, !dbg !23
  %78 = or disjoint i32 %46, 1, !dbg !24
  %79 = or disjoint i32 %47, 1, !dbg !24
  %80 = or disjoint i32 %48, 1, !dbg !24
  %81 = or disjoint i32 %49, 1, !dbg !24
  %82 = or disjoint i32 %50, 1, !dbg !24
  %83 = or disjoint i32 %51, 1, !dbg !24
  %84 = or disjoint i32 %52, 1, !dbg !24
  %85 = or disjoint i32 %53, 1, !dbg !24
  %86 = sext i32 %78 to i64, !dbg !25
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !25
  %88 = sext i32 %79 to i64, !dbg !25
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !25
  %90 = sext i32 %80 to i64, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !25
  %92 = sext i32 %81 to i64, !dbg !25
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !25
  %94 = sext i32 %82 to i64, !dbg !25
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !25
  %96 = sext i32 %83 to i64, !dbg !25
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !25
  %98 = sext i32 %84 to i64, !dbg !25
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !25
  %100 = sext i32 %85 to i64, !dbg !25
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !25
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %28) #3, !dbg !26
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %28) #3, !dbg !26
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %28) #3, !dbg !26
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %28) #3, !dbg !26
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %29) #3, !dbg !26
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %29) #3, !dbg !26
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %29) #3, !dbg !26
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %29) #3, !dbg !26
  %110 = or disjoint i32 %44, 32, !dbg !27
  %111 = add i32 %110, %40, !dbg !28
  %112 = add i32 %110, %41, !dbg !28
  %113 = add i32 %110, %42, !dbg !28
  %114 = add i32 %110, %43, !dbg !28
  %115 = or disjoint i32 %45, 32, !dbg !27
  %116 = add i32 %115, %40, !dbg !28
  %117 = add i32 %115, %41, !dbg !28
  %118 = add i32 %115, %42, !dbg !28
  %119 = add i32 %115, %43, !dbg !28
  %120 = sext i32 %111 to i64, !dbg !29
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !29
  %122 = sext i32 %112 to i64, !dbg !29
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !29
  %124 = sext i32 %113 to i64, !dbg !29
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !29
  %126 = sext i32 %114 to i64, !dbg !29
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !29
  %128 = sext i32 %116 to i64, !dbg !29
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !29
  %130 = sext i32 %117 to i64, !dbg !29
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !29
  %132 = sext i32 %118 to i64, !dbg !29
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !29
  %134 = sext i32 %119 to i64, !dbg !29
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !29
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %28) #3, !dbg !30
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %28) #3, !dbg !30
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %28) #3, !dbg !30
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %28) #3, !dbg !30
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %29) #3, !dbg !30
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %29) #3, !dbg !30
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %29) #3, !dbg !30
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %29) #3, !dbg !30
  %144 = or disjoint i32 %44, 33, !dbg !31
  %145 = add i32 %144, %40, !dbg !32
  %146 = add i32 %144, %41, !dbg !32
  %147 = add i32 %144, %42, !dbg !32
  %148 = add i32 %144, %43, !dbg !32
  %149 = or disjoint i32 %45, 33, !dbg !31
  %150 = add i32 %149, %40, !dbg !32
  %151 = add i32 %149, %41, !dbg !32
  %152 = add i32 %149, %42, !dbg !32
  %153 = add i32 %149, %43, !dbg !32
  %154 = sext i32 %145 to i64, !dbg !33
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !33
  %156 = sext i32 %146 to i64, !dbg !33
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !33
  %158 = sext i32 %147 to i64, !dbg !33
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !33
  %160 = sext i32 %148 to i64, !dbg !33
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !33
  %162 = sext i32 %150 to i64, !dbg !33
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !33
  %164 = sext i32 %151 to i64, !dbg !33
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !33
  %166 = sext i32 %152 to i64, !dbg !33
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !33
  %168 = sext i32 %153 to i64, !dbg !33
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !33
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %28) #3, !dbg !34
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %28) #3, !dbg !34
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %28) #3, !dbg !34
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %28) #3, !dbg !34
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %29) #3, !dbg !34
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %29) #3, !dbg !34
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %29) #3, !dbg !34
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %29) #3, !dbg !34
  %178 = sext i32 %38 to i64, !dbg !35
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !35
  %180 = sext i32 %39 to i64, !dbg !35
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !35
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %28) #3, !dbg !36
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %28) #3, !dbg !36
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %28) #3, !dbg !36
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %28) #3, !dbg !36
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %29) #3, !dbg !36
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %29) #3, !dbg !36
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %29) #3, !dbg !36
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %29) #3, !dbg !36
  %190 = getelementptr float, ptr addrspace(1) %2, i64 %178, !dbg !37
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !37
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %28) #3, !dbg !38
  %193 = bitcast i32 %192 to float, !dbg !38
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %28) #3, !dbg !38
  %195 = bitcast i32 %194 to float, !dbg !38
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %28) #3, !dbg !38
  %197 = bitcast i32 %196 to float, !dbg !38
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %28) #3, !dbg !38
  %199 = bitcast i32 %198 to float, !dbg !38
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %29) #3, !dbg !38
  %201 = bitcast i32 %200 to float, !dbg !38
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %29) #3, !dbg !38
  %203 = bitcast i32 %202 to float, !dbg !38
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %29) #3, !dbg !38
  %205 = bitcast i32 %204 to float, !dbg !38
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %29) #3, !dbg !38
  %207 = bitcast i32 %206 to float, !dbg !38
  %208 = getelementptr float, ptr addrspace(1) %3, i64 %178, !dbg !39
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %180, !dbg !39
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %28) #3, !dbg !40
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %28) #3, !dbg !40
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %28) #3, !dbg !40
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %28) #3, !dbg !40
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %29) #3, !dbg !40
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %29) #3, !dbg !40
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %29) #3, !dbg !40
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %29) #3, !dbg !40
  %218 = getelementptr float, ptr addrspace(1) %4, i64 %178, !dbg !41
  %219 = getelementptr float, ptr addrspace(1) %4, i64 %180, !dbg !41
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %28) #3, !dbg !42
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %28) #3, !dbg !42
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %28) #3, !dbg !42
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %28) #3, !dbg !42
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %29) #3, !dbg !42
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %29) #3, !dbg !42
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %29) #3, !dbg !42
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %29) #3, !dbg !42
  %228 = fadd float %193, 0x3EE4F8B580000000, !dbg !43
  %229 = fadd float %195, 0x3EE4F8B580000000, !dbg !43
  %230 = fadd float %197, 0x3EE4F8B580000000, !dbg !43
  %231 = fadd float %199, 0x3EE4F8B580000000, !dbg !43
  %232 = fadd float %201, 0x3EE4F8B580000000, !dbg !43
  %233 = fadd float %203, 0x3EE4F8B580000000, !dbg !43
  %234 = fadd float %205, 0x3EE4F8B580000000, !dbg !43
  %235 = fadd float %207, 0x3EE4F8B580000000, !dbg !43
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %236, 0, !dbg !44
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %237, 0, !dbg !44
  br i1 %.not.i, label %243, label %238, !dbg !44

238:                                              ; preds = %17
  br i1 %.not1.i, label %241, label %239, !dbg !44

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %228) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %228) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

243:                                              ; preds = %17
  br i1 %.not1.i, label %246, label %244, !dbg !44

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.f(float %228) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.f(float %228) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %239, %241, %244, %246
  %.0.i = phi float [ %240, %239 ], [ %242, %241 ], [ %245, %244 ], [ %247, %246 ], !dbg !44
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %248, 0, !dbg !44
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %249, 0, !dbg !44
  br i1 %.not.i1, label %255, label %250, !dbg !44

250:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %253, label %251, !dbg !44

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %229) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %229) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

255:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %258, label %256, !dbg !44

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.f(float %229) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.f(float %229) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %251, %253, %256, %258
  %.0.i3 = phi float [ %252, %251 ], [ %254, %253 ], [ %257, %256 ], [ %259, %258 ], !dbg !44
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i6 = icmp eq i32 %260, 0, !dbg !44
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i9 = icmp eq i32 %261, 0, !dbg !44
  br i1 %.not.i6, label %267, label %262, !dbg !44

262:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %265, label %263, !dbg !44

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %230) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %230) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

267:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %270, label %268, !dbg !44

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.f(float %230) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.f(float %230) #3, !dbg !44
  br label %__nv_sqrtf.exit10, !dbg !44

__nv_sqrtf.exit10:                                ; preds = %263, %265, %268, %270
  %.0.i8 = phi float [ %264, %263 ], [ %266, %265 ], [ %269, %268 ], [ %271, %270 ], !dbg !44
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i11 = icmp eq i32 %272, 0, !dbg !44
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i14 = icmp eq i32 %273, 0, !dbg !44
  br i1 %.not.i11, label %279, label %274, !dbg !44

274:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %277, label %275, !dbg !44

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %231) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %231) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

279:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %282, label %280, !dbg !44

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.f(float %231) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.f(float %231) #3, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %275, %277, %280, %282
  %.0.i13 = phi float [ %276, %275 ], [ %278, %277 ], [ %281, %280 ], [ %283, %282 ], !dbg !44
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i16 = icmp eq i32 %284, 0, !dbg !44
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i19 = icmp eq i32 %285, 0, !dbg !44
  br i1 %.not.i16, label %291, label %286, !dbg !44

286:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %289, label %287, !dbg !44

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %232) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %232) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

291:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %294, label %292, !dbg !44

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.f(float %232) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.f(float %232) #3, !dbg !44
  br label %__nv_sqrtf.exit20, !dbg !44

__nv_sqrtf.exit20:                                ; preds = %287, %289, %292, %294
  %.0.i18 = phi float [ %288, %287 ], [ %290, %289 ], [ %293, %292 ], [ %295, %294 ], !dbg !44
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i21 = icmp eq i32 %296, 0, !dbg !44
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i24 = icmp eq i32 %297, 0, !dbg !44
  br i1 %.not.i21, label %303, label %298, !dbg !44

298:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %301, label %299, !dbg !44

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %233) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %233) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

303:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %306, label %304, !dbg !44

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.f(float %233) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.f(float %233) #3, !dbg !44
  br label %__nv_sqrtf.exit25, !dbg !44

__nv_sqrtf.exit25:                                ; preds = %299, %301, %304, %306
  %.0.i23 = phi float [ %300, %299 ], [ %302, %301 ], [ %305, %304 ], [ %307, %306 ], !dbg !44
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i26 = icmp eq i32 %308, 0, !dbg !44
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i29 = icmp eq i32 %309, 0, !dbg !44
  br i1 %.not.i26, label %315, label %310, !dbg !44

310:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %313, label %311, !dbg !44

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %234) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %234) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

315:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %318, label %316, !dbg !44

316:                                              ; preds = %315
  %317 = tail call float @llvm.nvvm.sqrt.rn.f(float %234) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

318:                                              ; preds = %315
  %319 = tail call float @llvm.nvvm.sqrt.approx.f(float %234) #3, !dbg !44
  br label %__nv_sqrtf.exit30, !dbg !44

__nv_sqrtf.exit30:                                ; preds = %311, %313, %316, %318
  %.0.i28 = phi float [ %312, %311 ], [ %314, %313 ], [ %317, %316 ], [ %319, %318 ], !dbg !44
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i31 = icmp eq i32 %320, 0, !dbg !44
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i34 = icmp eq i32 %321, 0, !dbg !44
  br i1 %.not.i31, label %327, label %322, !dbg !44

322:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %325, label %323, !dbg !44

323:                                              ; preds = %322
  %324 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %235) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

325:                                              ; preds = %322
  %326 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %235) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

327:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %330, label %328, !dbg !44

328:                                              ; preds = %327
  %329 = tail call float @llvm.nvvm.sqrt.rn.f(float %235) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

330:                                              ; preds = %327
  %331 = tail call float @llvm.nvvm.sqrt.approx.f(float %235) #3, !dbg !44
  br label %__nv_sqrtf.exit35, !dbg !44

__nv_sqrtf.exit35:                                ; preds = %323, %325, %328, %330
  %.0.i33 = phi float [ %324, %323 ], [ %326, %325 ], [ %329, %328 ], [ %331, %330 ], !dbg !44
  %332 = insertelement <8 x i32> poison, i32 %109, i64 0, !dbg !26
  %333 = insertelement <8 x i32> %332, i32 %108, i64 1, !dbg !26
  %334 = insertelement <8 x i32> %333, i32 %107, i64 2, !dbg !26
  %335 = insertelement <8 x i32> %334, i32 %106, i64 3, !dbg !26
  %336 = insertelement <8 x i32> %335, i32 %105, i64 4, !dbg !26
  %337 = insertelement <8 x i32> %336, i32 %104, i64 5, !dbg !26
  %338 = insertelement <8 x i32> %337, i32 %103, i64 6, !dbg !26
  %339 = insertelement <8 x i32> %338, i32 %102, i64 7, !dbg !26
  %340 = bitcast <8 x i32> %339 to <8 x float>, !dbg !26
  %341 = insertelement <8 x i32> poison, i32 %77, i64 0, !dbg !23
  %342 = insertelement <8 x i32> %341, i32 %76, i64 1, !dbg !23
  %343 = insertelement <8 x i32> %342, i32 %75, i64 2, !dbg !23
  %344 = insertelement <8 x i32> %343, i32 %74, i64 3, !dbg !23
  %345 = insertelement <8 x i32> %344, i32 %73, i64 4, !dbg !23
  %346 = insertelement <8 x i32> %345, i32 %72, i64 5, !dbg !23
  %347 = insertelement <8 x i32> %346, i32 %71, i64 6, !dbg !23
  %348 = insertelement <8 x i32> %347, i32 %70, i64 7, !dbg !23
  %349 = bitcast <8 x i32> %348 to <8 x float>, !dbg !23
  %350 = insertelement <8 x i32> poison, i32 %143, i64 0, !dbg !30
  %351 = insertelement <8 x i32> %350, i32 %142, i64 1, !dbg !30
  %352 = insertelement <8 x i32> %351, i32 %141, i64 2, !dbg !30
  %353 = insertelement <8 x i32> %352, i32 %140, i64 3, !dbg !30
  %354 = insertelement <8 x i32> %353, i32 %139, i64 4, !dbg !30
  %355 = insertelement <8 x i32> %354, i32 %138, i64 5, !dbg !30
  %356 = insertelement <8 x i32> %355, i32 %137, i64 6, !dbg !30
  %357 = insertelement <8 x i32> %356, i32 %136, i64 7, !dbg !30
  %358 = bitcast <8 x i32> %357 to <8 x float>, !dbg !30
  %359 = insertelement <8 x i32> poison, i32 %177, i64 0, !dbg !34
  %360 = insertelement <8 x i32> %359, i32 %176, i64 1, !dbg !34
  %361 = insertelement <8 x i32> %360, i32 %175, i64 2, !dbg !34
  %362 = insertelement <8 x i32> %361, i32 %174, i64 3, !dbg !34
  %363 = insertelement <8 x i32> %362, i32 %173, i64 4, !dbg !34
  %364 = insertelement <8 x i32> %363, i32 %172, i64 5, !dbg !34
  %365 = insertelement <8 x i32> %364, i32 %171, i64 6, !dbg !34
  %366 = insertelement <8 x i32> %365, i32 %170, i64 7, !dbg !34
  %367 = bitcast <8 x i32> %366 to <8 x float>, !dbg !34
  %368 = insertelement <8 x i32> poison, i32 %189, i64 0, !dbg !36
  %369 = insertelement <8 x i32> %368, i32 %188, i64 1, !dbg !36
  %370 = insertelement <8 x i32> %369, i32 %187, i64 2, !dbg !36
  %371 = insertelement <8 x i32> %370, i32 %186, i64 3, !dbg !36
  %372 = insertelement <8 x i32> %371, i32 %185, i64 4, !dbg !36
  %373 = insertelement <8 x i32> %372, i32 %184, i64 5, !dbg !36
  %374 = insertelement <8 x i32> %373, i32 %183, i64 6, !dbg !36
  %375 = insertelement <8 x i32> %374, i32 %182, i64 7, !dbg !36
  %376 = bitcast <8 x i32> %375 to <8 x float>, !dbg !36
  %377 = insertelement <8 x i32> poison, i32 %227, i64 0, !dbg !42
  %378 = insertelement <8 x i32> %377, i32 %226, i64 1, !dbg !42
  %379 = insertelement <8 x i32> %378, i32 %225, i64 2, !dbg !42
  %380 = insertelement <8 x i32> %379, i32 %224, i64 3, !dbg !42
  %381 = insertelement <8 x i32> %380, i32 %223, i64 4, !dbg !42
  %382 = insertelement <8 x i32> %381, i32 %222, i64 5, !dbg !42
  %383 = insertelement <8 x i32> %382, i32 %221, i64 6, !dbg !42
  %384 = insertelement <8 x i32> %383, i32 %220, i64 7, !dbg !42
  %385 = bitcast <8 x i32> %384 to <8 x float>, !dbg !42
  %386 = insertelement <8 x i32> poison, i32 %217, i64 0, !dbg !40
  %387 = insertelement <8 x i32> %386, i32 %216, i64 1, !dbg !40
  %388 = insertelement <8 x i32> %387, i32 %215, i64 2, !dbg !40
  %389 = insertelement <8 x i32> %388, i32 %214, i64 3, !dbg !40
  %390 = insertelement <8 x i32> %389, i32 %213, i64 4, !dbg !40
  %391 = insertelement <8 x i32> %390, i32 %212, i64 5, !dbg !40
  %392 = insertelement <8 x i32> %391, i32 %211, i64 6, !dbg !40
  %393 = insertelement <8 x i32> %392, i32 %210, i64 7, !dbg !40
  %394 = bitcast <8 x i32> %393 to <8 x float>, !dbg !40
  %.frozen51 = freeze i32 %27, !dbg !45
  %395 = sdiv i32 %.frozen51, 38400, !dbg !45
  %396 = mul i32 %395, 38400, !dbg !46
  %.decomposed52 = sub i32 %.frozen51, %396, !dbg !46
  %.frozen53 = freeze i32 %23, !dbg !45
  %397 = sdiv i32 %.frozen53, 38400, !dbg !45
  %398 = mul i32 %397, 38400, !dbg !46
  %.decomposed54 = sub i32 %.frozen53, %398, !dbg !46
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !47
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !47
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !47
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !47
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !47
  %407 = fadd <8 x float> %349, %340, !dbg !48
  %408 = fadd <8 x float> %407, %358, !dbg !49
  %409 = fadd <8 x float> %408, %367, !dbg !50
  %410 = fmul <8 x float> %409, splat (float 2.500000e-01), !dbg !51
  %411 = fsub <8 x float> %410, %376, !dbg !52
  %412 = insertelement <8 x float> poison, float %406, i64 0, !dbg !53
  %413 = insertelement <8 x float> %412, float %405, i64 1, !dbg !53
  %414 = insertelement <8 x float> %413, float %404, i64 2, !dbg !53
  %415 = insertelement <8 x float> %414, float %403, i64 3, !dbg !53
  %416 = insertelement <8 x float> %415, float %402, i64 4, !dbg !53
  %417 = insertelement <8 x float> %416, float %401, i64 5, !dbg !53
  %418 = insertelement <8 x float> %417, float %400, i64 6, !dbg !53
  %419 = insertelement <8 x float> %418, float %399, i64 7, !dbg !53
  %420 = fmul <8 x float> %411, %419, !dbg !53
  %421 = fmul <8 x float> %420, %394, !dbg !54
  %422 = fadd <8 x float> %421, %385, !dbg !55
  %423 = fcmp olt <8 x float> %422, zeroinitializer, !dbg !56
  %424 = extractelement <8 x i1> %423, i64 7, !dbg !60
  %425 = extractelement <8 x i1> %423, i64 6, !dbg !60
  %426 = extractelement <8 x i1> %423, i64 5, !dbg !60
  %427 = extractelement <8 x i1> %423, i64 4, !dbg !60
  %428 = extractelement <8 x i1> %423, i64 3, !dbg !60
  %429 = extractelement <8 x i1> %423, i64 2, !dbg !60
  %430 = extractelement <8 x i1> %423, i64 1, !dbg !60
  %431 = extractelement <8 x i1> %423, i64 0, !dbg !60
  %432 = sext i32 %23 to i64, !dbg !61
  %433 = getelementptr float, ptr addrspace(1) %5, i64 %432, !dbg !61
  %434 = sext i32 %27 to i64, !dbg !61
  %435 = getelementptr float, ptr addrspace(1) %5, i64 %434, !dbg !61
  %bc = bitcast <8 x float> %410 to <8 x i32>, !dbg !62
  %436 = extractelement <8 x i32> %bc, i64 7, !dbg !62
  %bc36 = bitcast <8 x float> %410 to <8 x i32>, !dbg !62
  %437 = extractelement <8 x i32> %bc36, i64 6, !dbg !62
  %bc37 = bitcast <8 x float> %410 to <8 x i32>, !dbg !62
  %438 = extractelement <8 x i32> %bc37, i64 5, !dbg !62
  %bc38 = bitcast <8 x float> %410 to <8 x i32>, !dbg !62
  %439 = extractelement <8 x i32> %bc38, i64 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %433, i1 %28) #3, !dbg !62
  %bc39 = bitcast <8 x float> %410 to <8 x i32>, !dbg !62
  %440 = extractelement <8 x i32> %bc39, i64 3, !dbg !62
  %bc40 = bitcast <8 x float> %410 to <8 x i32>, !dbg !62
  %441 = extractelement <8 x i32> %bc40, i64 2, !dbg !62
  %bc41 = bitcast <8 x float> %410 to <8 x i32>, !dbg !62
  %442 = extractelement <8 x i32> %bc41, i64 1, !dbg !62
  %bc42 = bitcast <8 x float> %410 to <8 x i32>, !dbg !62
  %443 = extractelement <8 x i32> %bc42, i64 0, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %435, i1 %29) #3, !dbg !62
  %444 = getelementptr float, ptr addrspace(1) %6, i64 %432, !dbg !63
  %445 = getelementptr float, ptr addrspace(1) %6, i64 %434, !dbg !63
  %bc43 = bitcast <8 x float> %422 to <8 x i32>, !dbg !64
  %446 = extractelement <8 x i32> %bc43, i64 7, !dbg !64
  %447 = select i1 %424, i32 0, i32 %446, !dbg !60
  %bc44 = bitcast <8 x float> %422 to <8 x i32>, !dbg !64
  %448 = extractelement <8 x i32> %bc44, i64 6, !dbg !64
  %449 = select i1 %425, i32 0, i32 %448, !dbg !60
  %bc45 = bitcast <8 x float> %422 to <8 x i32>, !dbg !64
  %450 = extractelement <8 x i32> %bc45, i64 5, !dbg !64
  %451 = select i1 %426, i32 0, i32 %450, !dbg !60
  %bc46 = bitcast <8 x float> %422 to <8 x i32>, !dbg !64
  %452 = extractelement <8 x i32> %bc46, i64 4, !dbg !64
  %453 = select i1 %427, i32 0, i32 %452, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %447, i32 %449, i32 %451, i32 %453, ptr addrspace(1) %444, i1 %28) #3, !dbg !64
  %bc47 = bitcast <8 x float> %422 to <8 x i32>, !dbg !64
  %454 = extractelement <8 x i32> %bc47, i64 3, !dbg !64
  %455 = select i1 %428, i32 0, i32 %454, !dbg !60
  %bc48 = bitcast <8 x float> %422 to <8 x i32>, !dbg !64
  %456 = extractelement <8 x i32> %bc48, i64 2, !dbg !64
  %457 = select i1 %429, i32 0, i32 %456, !dbg !60
  %bc49 = bitcast <8 x float> %422 to <8 x i32>, !dbg !64
  %458 = extractelement <8 x i32> %bc49, i64 1, !dbg !64
  %459 = select i1 %430, i32 0, i32 %458, !dbg !60
  %bc50 = bitcast <8 x float> %422 to <8 x i32>, !dbg !64
  %460 = extractelement <8 x i32> %bc50, i64 0, !dbg !64
  %461 = select i1 %431, i32 0, i32 %460, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %455, i32 %457, i32 %459, i32 %461, ptr addrspace(1) %445, i1 %29) #3, !dbg !64
  %462 = mul i32 %397, 62976, !dbg !65
  %463 = mul i32 %395, 62976, !dbg !65
  %464 = add i32 %462, %.decomposed54, !dbg !66
  %465 = add i32 %463, %.decomposed52, !dbg !66
  %466 = sext i32 %464 to i64, !dbg !67
  %467 = getelementptr float, ptr addrspace(1) %7, i64 %466, !dbg !67
  %468 = sext i32 %465 to i64, !dbg !67
  %469 = getelementptr float, ptr addrspace(1) %7, i64 %468, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %467, i1 %28) #3, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %469, i1 %29) #3, !dbg !68
  %470 = mul i32 %397, 66048, !dbg !69
  %471 = mul i32 %395, 66048, !dbg !69
  %472 = add i32 %470, %.decomposed54, !dbg !70
  %473 = add i32 %471, %.decomposed52, !dbg !70
  %474 = sext i32 %472 to i64, !dbg !71
  %475 = getelementptr float, ptr addrspace(1) %8, i64 %474, !dbg !71
  %476 = sext i32 %473 to i64, !dbg !71
  %477 = getelementptr float, ptr addrspace(1) %8, i64 %476, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %475, i1 %28) #3, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %477, i1 %29) #3, !dbg !72
  %478 = mul i32 %397, 69120, !dbg !73
  %479 = mul i32 %395, 69120, !dbg !73
  %480 = add i32 %478, %.decomposed54, !dbg !74
  %481 = add i32 %479, %.decomposed52, !dbg !74
  %482 = sext i32 %480 to i64, !dbg !75
  %483 = getelementptr float, ptr addrspace(1) %9, i64 %482, !dbg !75
  %484 = sext i32 %481 to i64, !dbg !75
  %485 = getelementptr float, ptr addrspace(1) %9, i64 %484, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %483, i1 %28) #3, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %485, i1 %29) #3, !dbg !76
  %486 = mul i32 %397, 72192, !dbg !77
  %487 = mul i32 %395, 72192, !dbg !77
  %488 = add i32 %486, %.decomposed54, !dbg !78
  %489 = add i32 %487, %.decomposed52, !dbg !78
  %490 = sext i32 %488 to i64, !dbg !79
  %491 = getelementptr float, ptr addrspace(1) %10, i64 %490, !dbg !79
  %492 = sext i32 %489 to i64, !dbg !79
  %493 = getelementptr float, ptr addrspace(1) %10, i64 %492, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %491, i1 %28) #3, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %493, i1 %29) #3, !dbg !80
  %494 = mul i32 %397, 75264, !dbg !81
  %495 = mul i32 %395, 75264, !dbg !81
  %496 = add i32 %494, %.decomposed54, !dbg !82
  %497 = add i32 %495, %.decomposed52, !dbg !82
  %498 = sext i32 %496 to i64, !dbg !83
  %499 = getelementptr float, ptr addrspace(1) %11, i64 %498, !dbg !83
  %500 = sext i32 %497 to i64, !dbg !83
  %501 = getelementptr float, ptr addrspace(1) %11, i64 %500, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %499, i1 %28) #3, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %501, i1 %29) #3, !dbg !84
  %502 = mul i32 %397, 78336, !dbg !85
  %503 = mul i32 %395, 78336, !dbg !85
  %504 = add i32 %502, %.decomposed54, !dbg !86
  %505 = add i32 %503, %.decomposed52, !dbg !86
  %506 = sext i32 %504 to i64, !dbg !87
  %507 = getelementptr float, ptr addrspace(1) %12, i64 %506, !dbg !87
  %508 = sext i32 %505 to i64, !dbg !87
  %509 = getelementptr float, ptr addrspace(1) %12, i64 %508, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %507, i1 %28) #3, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %509, i1 %29) #3, !dbg !88
  %510 = mul i32 %397, 81408, !dbg !89
  %511 = mul i32 %395, 81408, !dbg !89
  %512 = add i32 %510, %.decomposed54, !dbg !90
  %513 = add i32 %511, %.decomposed52, !dbg !90
  %514 = sext i32 %512 to i64, !dbg !91
  %515 = getelementptr float, ptr addrspace(1) %13, i64 %514, !dbg !91
  %516 = sext i32 %513 to i64, !dbg !91
  %517 = getelementptr float, ptr addrspace(1) %13, i64 %516, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %515, i1 %28) #3, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %517, i1 %29) #3, !dbg !92
  %518 = mul i32 %397, 84480, !dbg !93
  %519 = mul i32 %395, 84480, !dbg !93
  %520 = add i32 %518, %.decomposed54, !dbg !94
  %521 = add i32 %519, %.decomposed52, !dbg !94
  %522 = sext i32 %520 to i64, !dbg !95
  %523 = getelementptr float, ptr addrspace(1) %14, i64 %522, !dbg !95
  %524 = sext i32 %521 to i64, !dbg !95
  %525 = getelementptr float, ptr addrspace(1) %14, i64 %524, !dbg !95
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %523, i1 %28) #3, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %525, i1 %29) #3, !dbg !96
  %526 = mul i32 %397, 87552, !dbg !97
  %527 = mul i32 %395, 87552, !dbg !97
  %528 = add i32 %526, %.decomposed54, !dbg !98
  %529 = add i32 %527, %.decomposed52, !dbg !98
  %530 = sext i32 %528 to i64, !dbg !99
  %531 = getelementptr float, ptr addrspace(1) %15, i64 %530, !dbg !99
  %532 = sext i32 %529 to i64, !dbg !99
  %533 = getelementptr float, ptr addrspace(1) %15, i64 %532, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %531, i1 %28) #3, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %441, i32 %442, i32 %443, ptr addrspace(1) %533, i1 %29) #3, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvwrv6263lyasnwuxauqgchk6beiw3szhqsj6sktqaaaj4qcy255.py", directory: "inductor_cache/vw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_56, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_56, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_56", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_56", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 30, column: 32, scope: !7)
!20 = !DILocation(line: 30, column: 40, scope: !7)
!21 = !DILocation(line: 30, column: 37, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 45, scope: !7)
!24 = !DILocation(line: 31, column: 41, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 49, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 42, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 50, scope: !7)
!31 = !DILocation(line: 33, column: 35, scope: !7)
!32 = !DILocation(line: 33, column: 42, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 50, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 35, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 36, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 36, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 46, column: 27, scope: !7)
!45 = !DILocation(line: 28, column: 19, scope: !7)
!46 = !DILocation(line: 29, column: 19, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 38, column: 18, scope: !7)
!49 = !DILocation(line: 39, column: 18, scope: !7)
!50 = !DILocation(line: 40, column: 18, scope: !7)
!51 = !DILocation(line: 42, column: 18, scope: !7)
!52 = !DILocation(line: 43, column: 19, scope: !7)
!53 = !DILocation(line: 51, column: 20, scope: !7)
!54 = !DILocation(line: 52, column: 20, scope: !7)
!55 = !DILocation(line: 53, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 55, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 56, column: 25, scope: !7)
!62 = !DILocation(line: 56, column: 36, scope: !7)
!63 = !DILocation(line: 57, column: 25, scope: !7)
!64 = !DILocation(line: 57, column: 37, scope: !7)
!65 = !DILocation(line: 58, column: 36, scope: !7)
!66 = !DILocation(line: 58, column: 30, scope: !7)
!67 = !DILocation(line: 58, column: 25, scope: !7)
!68 = !DILocation(line: 58, column: 47, scope: !7)
!69 = !DILocation(line: 59, column: 36, scope: !7)
!70 = !DILocation(line: 59, column: 30, scope: !7)
!71 = !DILocation(line: 59, column: 25, scope: !7)
!72 = !DILocation(line: 59, column: 47, scope: !7)
!73 = !DILocation(line: 60, column: 36, scope: !7)
!74 = !DILocation(line: 60, column: 30, scope: !7)
!75 = !DILocation(line: 60, column: 25, scope: !7)
!76 = !DILocation(line: 60, column: 47, scope: !7)
!77 = !DILocation(line: 61, column: 36, scope: !7)
!78 = !DILocation(line: 61, column: 30, scope: !7)
!79 = !DILocation(line: 61, column: 25, scope: !7)
!80 = !DILocation(line: 61, column: 47, scope: !7)
!81 = !DILocation(line: 62, column: 36, scope: !7)
!82 = !DILocation(line: 62, column: 30, scope: !7)
!83 = !DILocation(line: 62, column: 25, scope: !7)
!84 = !DILocation(line: 62, column: 47, scope: !7)
!85 = !DILocation(line: 63, column: 36, scope: !7)
!86 = !DILocation(line: 63, column: 30, scope: !7)
!87 = !DILocation(line: 63, column: 25, scope: !7)
!88 = !DILocation(line: 63, column: 47, scope: !7)
!89 = !DILocation(line: 64, column: 36, scope: !7)
!90 = !DILocation(line: 64, column: 30, scope: !7)
!91 = !DILocation(line: 64, column: 25, scope: !7)
!92 = !DILocation(line: 64, column: 47, scope: !7)
!93 = !DILocation(line: 65, column: 36, scope: !7)
!94 = !DILocation(line: 65, column: 30, scope: !7)
!95 = !DILocation(line: 65, column: 25, scope: !7)
!96 = !DILocation(line: 65, column: 47, scope: !7)
!97 = !DILocation(line: 66, column: 37, scope: !7)
!98 = !DILocation(line: 66, column: 31, scope: !7)
!99 = !DILocation(line: 66, column: 26, scope: !7)
!100 = !DILocation(line: 66, column: 48, scope: !7)
!101 = !DILocation(line: 66, column: 4, scope: !7)
