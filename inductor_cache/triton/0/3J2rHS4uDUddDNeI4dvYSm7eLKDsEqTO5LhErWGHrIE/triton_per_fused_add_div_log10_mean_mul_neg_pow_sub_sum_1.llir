; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_div_log10_mean_mul_neg_pow_sub_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = shl i32 %5, 2, !dbg !11
  %7 = and i32 %6, 252, !dbg !11
  %8 = zext nneg i32 %7 to i64, !dbg !12
  %9 = getelementptr float, ptr addrspace(1) %1, i64 %8, !dbg !12
  %10 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #4, !dbg !13
  %11 = bitcast i32 %10 to float, !dbg !13
  %12 = getelementptr float, ptr addrspace(1) %2, i64 %8, !dbg !14
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #4, !dbg !15
  %14 = bitcast i32 %13 to float, !dbg !15
  %15 = or disjoint i32 %7, 1, !dbg !16
  %16 = zext nneg i32 %15 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !18
  %19 = bitcast i32 %18 to float, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #4, !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = or disjoint i32 %7, 2, !dbg !21
  %24 = zext nneg i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !23
  %27 = bitcast i32 %26 to float, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #4, !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = or disjoint i32 %7, 3, !dbg !26
  %32 = zext nneg i32 %31 to i64, !dbg !27
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !28
  %35 = bitcast i32 %34 to float, !dbg !28
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = fmul float %11, %14, !dbg !31
  %40 = fmul float %19, %22, !dbg !32
  %41 = fadd float %39, %40, !dbg !33
  %42 = fmul float %27, %30, !dbg !34
  %43 = fadd float %41, %42, !dbg !35
  %44 = fmul float %35, %38, !dbg !36
  %45 = fadd float %43, %44, !dbg !37
  %46 = fmul float %14, %14, !dbg !38
  %47 = fmul float %22, %22, !dbg !39
  %48 = fadd float %46, %47, !dbg !40
  %49 = fmul float %30, %30, !dbg !41
  %50 = fadd float %48, %49, !dbg !42
  %51 = fmul float %38, %38, !dbg !43
  %52 = fadd float %50, %51, !dbg !44
  %53 = fadd float %52, 0x3E45798EE0000000, !dbg !45
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float %53) #4, !dbg !46
  %55 = fmul float %54, %14, !dbg !47
  %56 = fsub float %11, %55, !dbg !48
  %57 = fmul float %56, %56, !dbg !49
  %58 = fmul float %54, %22, !dbg !50
  %59 = fsub float %19, %58, !dbg !51
  %60 = fmul float %59, %59, !dbg !52
  %61 = fadd float %57, %60, !dbg !53
  %62 = fmul float %54, %30, !dbg !54
  %63 = fsub float %27, %62, !dbg !55
  %64 = fmul float %63, %63, !dbg !56
  %65 = fadd float %64, %61, !dbg !57
  %66 = fmul float %54, %38, !dbg !58
  %67 = fsub float %35, %66, !dbg !59
  %68 = fmul float %67, %67, !dbg !60
  %69 = fadd float %68, %65, !dbg !61
  %70 = fmul float %55, %55, !dbg !62
  %71 = fmul float %58, %58, !dbg !63
  %72 = fadd float %70, %71, !dbg !64
  %73 = fmul float %62, %62, !dbg !65
  %74 = fadd float %73, %72, !dbg !66
  %75 = fmul float %66, %66, !dbg !67
  %76 = fadd float %75, %74, !dbg !68
  %77 = fadd float %69, 0x3E45798EE0000000, !dbg !69
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %77) #4, !dbg !70
  %79 = fadd float %78, 0x3E45798EE0000000, !dbg !71
  %80 = fcmp olt float %79, 0x3810000000000000, !dbg !72
  %81 = fmul float %79, 0x4160000000000000, !dbg !72
  %.02.i = select i1 %80, float %81, float %79, !dbg !72
  %i.i.0.i = select i1 %80, float -2.300000e+01, float 0.000000e+00, !dbg !72
  %82 = bitcast float %.02.i to i32, !dbg !72
  %83 = add i32 %82, -1059760811, !dbg !72
  %84 = and i32 %83, -8388608, !dbg !72
  %85 = sub i32 %82, %84, !dbg !72
  %86 = bitcast i32 %85 to float, !dbg !72
  %87 = sitofp i32 %84 to float, !dbg !72
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not.i = icmp eq i32 %88, 0, !dbg !72
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %87, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !72
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %87, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !72
  %.08.i = select i1 %.not.i, float %90, float %89, !dbg !72
  %91 = fadd float %86, -1.000000e+00, !dbg !72
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not1.i = icmp eq i32 %92, 0, !dbg !72
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %91, float 0x3FC2073EC0000000) #4, !dbg !72
  %94 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %91, float 0x3FC2073EC0000000) #4, !dbg !72
  %.010.i = select i1 %.not1.i, float %94, float %93, !dbg !72
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not2.i = icmp eq i32 %95, 0, !dbg !72
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %91, float 0xBFBF19B980000000) #4, !dbg !72
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %91, float 0xBFBF19B980000000) #4, !dbg !72
  %.011.i = select i1 %.not2.i, float %97, float %96, !dbg !72
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not3.i = icmp eq i32 %98, 0, !dbg !72
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %91, float 0x3FC1E52AA0000000) #4, !dbg !72
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %91, float 0x3FC1E52AA0000000) #4, !dbg !72
  %.012.i = select i1 %.not3.i, float %100, float %99, !dbg !72
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not4.i = icmp eq i32 %101, 0, !dbg !72
  %102 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %91, float 0xBFC55B1720000000) #4, !dbg !72
  %103 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %91, float 0xBFC55B1720000000) #4, !dbg !72
  %.09.i = select i1 %.not4.i, float %103, float %102, !dbg !72
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not5.i = icmp eq i32 %104, 0, !dbg !72
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %91, float 0x3FC99DA160000000) #4, !dbg !72
  %106 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %91, float 0x3FC99DA160000000) #4, !dbg !72
  %.05.i = select i1 %.not5.i, float %106, float %105, !dbg !72
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not6.i = icmp eq i32 %107, 0, !dbg !72
  %108 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %91, float 0xBFCFFFE440000000) #4, !dbg !72
  %109 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %91, float 0xBFCFFFE440000000) #4, !dbg !72
  %.01.i = select i1 %.not6.i, float %109, float %108, !dbg !72
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not7.i = icmp eq i32 %110, 0, !dbg !72
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %91, float 0x3FD5554F00000000) #4, !dbg !72
  %112 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %91, float 0x3FD5554F00000000) #4, !dbg !72
  %.0.i = select i1 %.not7.i, float %112, float %111, !dbg !72
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not8.i = icmp eq i32 %113, 0, !dbg !72
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %91, float -5.000000e-01) #4, !dbg !72
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %91, float -5.000000e-01) #4, !dbg !72
  %.07.i = select i1 %.not8.i, float %115, float %114, !dbg !72
  %116 = fmul float %91, %.07.i, !dbg !72
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not9.i = icmp eq i32 %117, 0, !dbg !72
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %116, float %91, float %91) #4, !dbg !72
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %116, float %91, float %91) #4, !dbg !72
  %.06.i = select i1 %.not9.i, float %119, float %118, !dbg !72
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not10.i = icmp eq i32 %120, 0, !dbg !72
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !72
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !72
  %.04.i = select i1 %.not10.i, float %122, float %121, !dbg !72
  %123 = icmp ugt i32 %82, 2139095039, !dbg !72
  br i1 %123, label %__nv_fmaf_rn.exit.i.i, label %__nv_log10f.exit, !dbg !72

__nv_fmaf_rn.exit.i.i:                            ; preds = %4
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not11.i = icmp eq i32 %124, 0, !dbg !72
  %125 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !72
  %126 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !72
  %.03.i = select i1 %.not11.i, float %126, float %125, !dbg !72
  br label %__nv_log10f.exit, !dbg !72

__nv_log10f.exit:                                 ; preds = %4, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %4 ], !dbg !72
  %127 = lshr i32 %5, 5, !dbg !10
  %128 = and i32 %5, 31, !dbg !10
  %129 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !72
  %130 = fmul float %r.i.0.i, 0x3FDBCB7B20000000, !dbg !72
  %131 = fmul float %130, 1.000000e+01, !dbg !73
  %132 = select i1 %129, float 0xFFF0000000000000, float %131, !dbg !72
  %133 = bitcast float %132 to i32, !dbg !74
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 16, i32 31), !dbg !74
  %135 = bitcast i32 %134 to float, !dbg !74
  %136 = fadd float %132, %135, !dbg !78
  %137 = bitcast float %136 to i32, !dbg !74
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !74
  %139 = bitcast i32 %138 to float, !dbg !74
  %140 = fadd float %136, %139, !dbg !78
  %141 = bitcast float %140 to i32, !dbg !74
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 4, i32 31), !dbg !74
  %143 = bitcast i32 %142 to float, !dbg !74
  %144 = fadd float %140, %143, !dbg !78
  %145 = bitcast float %144 to i32, !dbg !74
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !74
  %147 = bitcast i32 %146 to float, !dbg !74
  %148 = fadd float %144, %147, !dbg !78
  %149 = bitcast float %148 to i32, !dbg !74
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !74
  %151 = bitcast i32 %150 to float, !dbg !74
  %152 = fadd float %148, %151, !dbg !78
  %153 = icmp eq i32 %128, 0, !dbg !74
  %154 = and i32 %127, 1, !dbg !74
  %155 = zext nneg i32 %154 to i64, !dbg !74
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i64 %155, !dbg !74
  %157 = bitcast float %152 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 %153) #4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %158 = icmp slt i32 %5, 2, !dbg !74
  %159 = sext i32 %5 to i64, !dbg !74
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i64 %159, !dbg !74
  %161 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %160, i1 %158) #4, !dbg !74
  %162 = bitcast i32 %161 to float, !dbg !74
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !74
  %164 = bitcast i32 %163 to float, !dbg !74
  %165 = fadd float %162, %164, !dbg !78
  %166 = and i32 %5, 1, !dbg !74
  %167 = icmp eq i32 %166, 0, !dbg !74
  %168 = and i1 %158, %167, !dbg !74
  %169 = bitcast float %165 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %169, i1 %168) #4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %170 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !74
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float 6.400000e+01) #4, !dbg !80
  %172 = fsub float 0.000000e+00, %171, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !82
  %urem = and i32 %5, 63, !dbg !83
  %173 = icmp eq i32 %urem, 0, !dbg !83
  %174 = bitcast float %172 to i32, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %0, i1 %173) #4, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct56wqaotc43equ667b5mu62zlulpr4bv2jotcs7zzgtdc42fgly.py", directory: "inductor_cache/t5")
!4 = !{ptr @triton_per_fused_add_div_log10_mean_mul_neg_pow_sub_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_log10_mean_mul_neg_pow_sub_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_log10_mean_mul_neg_pow_sub_sum_1", linkageName: "triton_per_fused_add_div_log10_mean_mul_neg_pow_sub_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 32, scope: !7)
!12 = !DILocation(line: 30, column: 30, scope: !7)
!13 = !DILocation(line: 30, column: 37, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 37, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 41, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 41, scope: !7)
!21 = !DILocation(line: 34, column: 34, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 41, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 41, scope: !7)
!26 = !DILocation(line: 36, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 42, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 42, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 19, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 19, scope: !7)
!48 = !DILocation(line: 56, column: 19, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 19, scope: !7)
!51 = !DILocation(line: 59, column: 19, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 19, scope: !7)
!55 = !DILocation(line: 63, column: 19, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 20, scope: !7)
!61 = !DILocation(line: 69, column: 20, scope: !7)
!62 = !DILocation(line: 70, column: 20, scope: !7)
!63 = !DILocation(line: 71, column: 20, scope: !7)
!64 = !DILocation(line: 72, column: 20, scope: !7)
!65 = !DILocation(line: 73, column: 20, scope: !7)
!66 = !DILocation(line: 74, column: 20, scope: !7)
!67 = !DILocation(line: 75, column: 20, scope: !7)
!68 = !DILocation(line: 76, column: 20, scope: !7)
!69 = !DILocation(line: 77, column: 20, scope: !7)
!70 = !DILocation(line: 78, column: 20, scope: !7)
!71 = !DILocation(line: 79, column: 20, scope: !7)
!72 = !DILocation(line: 80, column: 28, scope: !7)
!73 = !DILocation(line: 82, column: 20, scope: !7)
!74 = !DILocation(line: 267, column: 36, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!77 = !DILocation(line: 84, column: 26, scope: !7)
!78 = !DILocation(line: 256, column: 15, scope: !79, inlinedAt: !77)
!79 = distinct !DILexicalBlockFile(scope: !75, file: !76, discriminator: 0)
!80 = !DILocation(line: 86, column: 20, scope: !7)
!81 = !DILocation(line: 87, column: 13, scope: !7)
!82 = !DILocation(line: 88, column: 4, scope: !7)
!83 = !DILocation(line: 89, column: 71, scope: !7)
!84 = !DILocation(line: 89, column: 4, scope: !7)
