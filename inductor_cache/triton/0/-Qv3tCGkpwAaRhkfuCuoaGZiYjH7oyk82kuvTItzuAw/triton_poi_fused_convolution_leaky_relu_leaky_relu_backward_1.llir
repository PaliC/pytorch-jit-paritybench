; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_leaky_relu_leaky_relu_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 4, !dbg !13
  %12 = sdiv i32 %10, 4096, !dbg !14
  %13 = srem i32 %12, 16, !dbg !15
  %14 = sext i32 %10 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = sext i32 %11 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !17
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %28 = sext i32 %13 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !19
  %38 = getelementptr i1, ptr addrspace(1) %2, i64 %14, !dbg !20
  %39 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !17
  %40 = insertelement <4 x i32> %39, i32 %20, i64 1, !dbg !17
  %41 = insertelement <4 x i32> %40, i32 %21, i64 2, !dbg !17
  %42 = insertelement <4 x i32> %41, i32 %22, i64 3, !dbg !17
  %43 = bitcast <4 x i32> %42 to <4 x float>, !dbg !17
  %44 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !19
  %45 = insertelement <4 x i32> %44, i32 %31, i64 1, !dbg !19
  %46 = insertelement <4 x i32> %45, i32 %32, i64 2, !dbg !19
  %47 = insertelement <4 x i32> %46, i32 %33, i64 3, !dbg !19
  %48 = bitcast <4 x i32> %47 to <4 x float>, !dbg !19
  %49 = fadd <4 x float> %43, %48, !dbg !21
  %50 = fcmp ogt <4 x float> %49, zeroinitializer, !dbg !22
  %51 = fmul <4 x float> %49, splat (float 0x3FC99999A0000000), !dbg !23
  %52 = select <4 x i1> %50, <4 x float> %49, <4 x float> %51, !dbg !24
  %53 = fcmp ogt <4 x float> %52, zeroinitializer, !dbg !25
  %54 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !17
  %55 = insertelement <4 x i32> %54, i32 %25, i64 1, !dbg !17
  %56 = insertelement <4 x i32> %55, i32 %26, i64 2, !dbg !17
  %57 = insertelement <4 x i32> %56, i32 %27, i64 3, !dbg !17
  %58 = bitcast <4 x i32> %57 to <4 x float>, !dbg !17
  %59 = insertelement <4 x i32> poison, i32 %34, i64 0, !dbg !19
  %60 = insertelement <4 x i32> %59, i32 %35, i64 1, !dbg !19
  %61 = insertelement <4 x i32> %60, i32 %36, i64 2, !dbg !19
  %62 = insertelement <4 x i32> %61, i32 %37, i64 3, !dbg !19
  %63 = bitcast <4 x i32> %62 to <4 x float>, !dbg !19
  %64 = fadd <4 x float> %58, %63, !dbg !21
  %65 = fcmp ogt <4 x float> %64, zeroinitializer, !dbg !22
  %66 = fmul <4 x float> %64, splat (float 0x3FC99999A0000000), !dbg !23
  %67 = select <4 x i1> %65, <4 x float> %64, <4 x float> %66, !dbg !24
  %68 = fcmp ogt <4 x float> %67, zeroinitializer, !dbg !25
  %69 = zext <4 x i1> %53 to <4 x i8>, !dbg !26
  %70 = bitcast <4 x i8> %69 to i32, !dbg !26
  %71 = zext <4 x i1> %68 to <4 x i8>, !dbg !26
  %72 = bitcast <4 x i8> %71 to i32, !dbg !26
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %70, i32 %72, ptr addrspace(1) %38, i1 true) #1, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqj3465i7qomsdzdhbvamldnoc25kat6qskzjghiadrymzj6oh3q.py", directory: "inductor_cache/qj")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_leaky_relu_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_leaky_relu_backward_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_leaky_relu_backward_1", linkageName: "triton_poi_fused_convolution_leaky_relu_leaky_relu_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 25, scope: !7)
!21 = !DILocation(line: 28, column: 18, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 35, column: 4, scope: !7)
