; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_mul_sigmoid_tanh_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 64, !dbg !15
  %16 = mul i32 %15, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = sdiv i32 %13, 16, !dbg !17
  %18 = srem i32 %17, 4, !dbg !18
  %19 = shl i32 %15, 7, !dbg !19
  %20 = add i32 %19, %.decomposed, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %14) #3, !dbg !22
  %24 = bitcast i32 %23 to float, !dbg !22
  %25 = sext i32 %18 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %14) #3, !dbg !24
  %28 = bitcast i32 %27 to float, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !25
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %14) #3, !dbg !26
  %31 = bitcast i32 %30 to float, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !27
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %14) #3, !dbg !28
  %34 = bitcast i32 %33 to float, !dbg !28
  %35 = add i32 %20, 64, !dbg !29
  %36 = sext i32 %35 to i64, !dbg !30
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %14) #3, !dbg !31
  %39 = add nsw i32 %18, 4, !dbg !32
  %40 = zext nneg i32 %39 to i64, !dbg !33
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !33
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %14) #3, !dbg !34
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !35
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %14) #3, !dbg !36
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !37
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %14) #3, !dbg !38
  %47 = fadd float %24, %28, !dbg !39
  %48 = fadd float %31, %34, !dbg !40
  %49 = fadd float %47, %48, !dbg !41
  %50 = fsub float 0.000000e+00, %49, !dbg !42
  %51 = fmul float %50, 0x3FF7154760000000, !dbg !46
  %52 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %51) #3, !dbg !46
  %53 = fadd float %52, 1.000000e+00, !dbg !47
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %53) #3, !dbg !48
  %55 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !31
  %56 = insertelement <2 x i32> %55, i32 %44, i64 1, !dbg !31
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !31
  %58 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !34
  %59 = insertelement <2 x i32> %58, i32 %46, i64 1, !dbg !34
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !34
  %61 = fadd <2 x float> %57, %60, !dbg !49
  %shift = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %62 = fadd <2 x float> %61, %shift, !dbg !50
  %63 = extractelement <2 x float> %62, i64 0, !dbg !50
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i = icmp eq i32 %64, 0, !dbg !51
  %65 = tail call float @llvm.nvvm.fabs.ftz.f(float %63) #3, !dbg !51
  %66 = tail call float @llvm.nvvm.fabs.f(float %63) #3, !dbg !51
  %.01.i = select i1 %.not.i, float %66, float %65, !dbg !51
  %67 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !51
  br i1 %67, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !51

__internal_fmad.exit1.i:                          ; preds = %8
  %68 = fmul float %.01.i, 0x4007154760000000, !dbg !51
  %69 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %68) #3, !dbg !51
  %70 = fadd float %69, 1.000000e+00, !dbg !51
  %71 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %70) #4, !dbg !51, !srcloc !52
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not6.i = icmp eq i32 %72, 0, !dbg !51
  %73 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %71, float -2.000000e+00, float 1.000000e+00) #3, !dbg !51
  %74 = tail call float @llvm.nvvm.fma.rn.f(float %71, float -2.000000e+00, float 1.000000e+00) #3, !dbg !51
  %.03.i = select i1 %.not6.i, float %74, float %73, !dbg !51
  %75 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !51
  %s.0.i = select i1 %75, float 1.000000e+00, float %.03.i, !dbg !51
  %76 = bitcast float %s.0.i to i32, !dbg !51
  %77 = bitcast float %63 to i32, !dbg !51
  %78 = and i32 %77, -2147483648, !dbg !51
  %79 = or i32 %78, %76, !dbg !51
  %80 = bitcast i32 %79 to float, !dbg !51
  br label %__nv_tanhf.exit, !dbg !51

__internal_fmad.exit3.i:                          ; preds = %8
  %81 = fmul float %63, %63, !dbg !51
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not1.i = icmp eq i32 %82, 0, !dbg !51
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %81, float 0xBFAAC795C0000000) #3, !dbg !51
  %84 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %81, float 0xBFAAC795C0000000) #3, !dbg !51
  %.06.i = select i1 %.not1.i, float %84, float %83, !dbg !51
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not2.i = icmp eq i32 %85, 0, !dbg !51
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %81, float 0x3FC10B2820000000) #3, !dbg !51
  %87 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %81, float 0x3FC10B2820000000) #3, !dbg !51
  %.05.i = select i1 %.not2.i, float %87, float %86, !dbg !51
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not3.i = icmp eq i32 %88, 0, !dbg !51
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %81, float 0xBFD5553DA0000000) #3, !dbg !51
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %81, float 0xBFD5553DA0000000) #3, !dbg !51
  %.0.i = select i1 %.not3.i, float %90, float %89, !dbg !51
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not4.i = icmp eq i32 %91, 0, !dbg !51
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %81, float 0.000000e+00) #3, !dbg !51
  %93 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %81, float 0.000000e+00) #3, !dbg !51
  %.04.i = select i1 %.not4.i, float %93, float %92, !dbg !51
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not5.i = icmp eq i32 %94, 0, !dbg !51
  %95 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %63, float %63) #3, !dbg !51
  %96 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %63, float %63) #3, !dbg !51
  %.02.i = select i1 %.not5.i, float %96, float %95, !dbg !51
  br label %__nv_tanhf.exit, !dbg !51

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %80, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !51
  %97 = fmul float %54, %s.1.i, !dbg !53
  %98 = sext i32 %13 to i64, !dbg !54
  %99 = getelementptr float, ptr addrspace(1) %4, i64 %98, !dbg !54
  %100 = bitcast float %54 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %100, ptr addrspace(1) %99, i1 %14) #3, !dbg !55
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %98, !dbg !56
  %102 = bitcast float %s.1.i to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %101, i1 %14) #3, !dbg !57
  %103 = getelementptr float, ptr addrspace(1) %6, i64 %98, !dbg !58
  %104 = bitcast float %97 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %103, i1 %14) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }
attributes #4 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crucptr3mgm6hwwp4jeoplmm2gso5j2kea4b6hiptuv3armcq7dk.py", directory: "inductor_cache/ru")
!4 = !{ptr @triton_poi_fused_mul_sigmoid_tanh_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sigmoid_tanh_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sigmoid_tanh_19", linkageName: "triton_poi_fused_mul_sigmoid_tanh_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 44, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 40, scope: !7)
!30 = !DILocation(line: 32, column: 30, scope: !7)
!31 = !DILocation(line: 32, column: 49, scope: !7)
!32 = !DILocation(line: 33, column: 34, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 39, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 50, scope: !7)
!37 = !DILocation(line: 35, column: 31, scope: !7)
!38 = !DILocation(line: 35, column: 40, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 47, column: 30, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 39, column: 22, scope: !7)
!46 = !DILocation(line: 47, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 47, column: 20, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 47, column: 16, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 40, column: 19, scope: !7)
!50 = !DILocation(line: 42, column: 20, scope: !7)
!51 = !DILocation(line: 43, column: 27, scope: !7)
!52 = !{i32 21046}
!53 = !DILocation(line: 44, column: 19, scope: !7)
!54 = !DILocation(line: 45, column: 25, scope: !7)
!55 = !DILocation(line: 45, column: 36, scope: !7)
!56 = !DILocation(line: 46, column: 25, scope: !7)
!57 = !DILocation(line: 46, column: 37, scope: !7)
!58 = !DILocation(line: 47, column: 25, scope: !7)
!59 = !DILocation(line: 47, column: 37, scope: !7)
!60 = !DILocation(line: 47, column: 4, scope: !7)
