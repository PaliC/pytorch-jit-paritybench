#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_31(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<9216> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<144> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<16> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2304> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<48> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<48> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<-48> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<1536> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_2 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_3 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_3 : tensor<256xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %7, %cst_4 : tensor<256xi32, #blocked> loc(#loc9)
    %9 = arith.divsi %4, %cst_5 : tensor<256xi32, #blocked> loc(#loc10)
    %10 = arith.extsi %6 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc11)
    %11 = arith.cmpi slt, %10, %cst_6 : tensor<256xi64, #blocked> loc(#loc11)
    %12 = arith.muli %7, %cst_7 : tensor<256xi32, #blocked> loc(#loc12)
    %13 = arith.addi %12, %6 : tensor<256xi32, #blocked> loc(#loc13)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc14)
    %15 = tt.addptr %14, %13 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc14)
    %16 = arith.andi %11, %5 : tensor<256xi1, #blocked> loc(#loc15)
    %17 = tt.load %15, %16, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc17)
    %19 = tt.addptr %18, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc17)
    %20 = tt.load %19, %16, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = arith.subf %17, %20 : tensor<256xf32, #blocked> loc(#loc19)
    %22 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc20)
    %23 = tt.addptr %22, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc20)
    %24 = tt.load %23, %16, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc21)
    %25 = arith.addf %24, %cst_0 : tensor<256xf32, #blocked> loc(#loc22)
    %26 = tt.extern_elementwise %25 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc23)
    %27 = arith.divf %cst_1, %26 : tensor<256xf32, #blocked> loc(#loc24)
    %28 = arith.mulf %21, %27 : tensor<256xf32, #blocked> loc(#loc25)
    %29 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc26)
    %30 = tt.addptr %29, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc26)
    %31 = tt.load %30, %16, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc27)
    %32 = arith.mulf %28, %31 : tensor<256xf32, #blocked> loc(#loc28)
    %33 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc29)
    %34 = tt.addptr %33, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc29)
    %35 = tt.load %34, %16, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc30)
    %36 = arith.addf %32, %35 : tensor<256xf32, #blocked> loc(#loc31)
    %37 = arith.cmpf ogt, %cst, %36 : tensor<256xf32, #blocked> loc(#loc49)
    %38 = arith.select %37, %cst, %36 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc50)
    %39 = arith.cmpi sge, %10, %cst_6 : tensor<256xi64, #blocked> loc(#loc35)
    %40 = arith.addi %6, %cst_8 : tensor<256xi32, #blocked> loc(#loc36)
    %41 = arith.muli %40, %cst_4 : tensor<256xi32, #blocked> loc(#loc37)
    %42 = arith.addi %8, %41 : tensor<256xi32, #blocked> loc(#loc38)
    %43 = arith.muli %9, %cst_9 : tensor<256xi32, #blocked> loc(#loc39)
    %44 = arith.addi %42, %43 : tensor<256xi32, #blocked> loc(#loc40)
    %45 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc41)
    %46 = tt.addptr %45, %44 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc41)
    %47 = arith.andi %39, %5 : tensor<256xi1, #blocked> loc(#loc42)
    %48 = tt.load %46, %47, %cst evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc43)
    %49 = arith.select %11, %38, %48 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc51)
    %50 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc46)
    %51 = tt.addptr %50, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc46)
    tt.store %51, %49, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc47)
    tt.return loc(#loc48)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":21:28)
#loc3 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":21:33)
#loc4 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":22:36)
#loc5 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":22:23)
#loc6 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":23:21)
#loc7 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":24:19)
#loc8 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":25:19)
#loc9 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":26:28)
#loc10 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":27:19)
#loc11 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":33:18)
#loc12 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":34:33)
#loc13 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":34:39)
#loc14 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":34:30)
#loc15 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":34:52)
#loc16 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":34:45)
#loc17 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":35:30)
#loc18 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":35:35)
#loc19 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":36:18)
#loc20 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":37:30)
#loc21 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":37:35)
#loc22 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":39:19)
#loc23 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":40:27)
#loc24 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":42:20)
#loc25 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":45:19)
#loc26 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":46:31)
#loc27 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":46:36)
#loc28 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":47:20)
#loc29 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":48:31)
#loc30 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":48:36)
#loc31 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":49:20)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc33 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":51:42)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc35 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":54:20)
#loc36 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":57:48)
#loc37 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":57:40)
#loc38 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":57:36)
#loc39 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":57:59)
#loc40 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":57:54)
#loc41 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":57:31)
#loc42 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":57:72)
#loc43 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":57:64)
#loc44 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":58:34)
#loc45 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":53:34)
#loc46 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":59:25)
#loc47 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":59:37)
#loc48 = loc("inductor_cache/cc/ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py":59:4)
#loc49 = loc(callsite(#loc32 at #loc33))
#loc50 = loc(callsite(#loc34 at #loc33))
#loc51 = loc(fused[#loc44, #loc45])
