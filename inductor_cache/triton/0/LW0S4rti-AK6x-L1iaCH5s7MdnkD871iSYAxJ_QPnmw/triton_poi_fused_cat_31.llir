; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 9216, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 144, !dbg !15
  %17 = mul i32 %16, 144, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = icmp slt i32 %.decomposed, 48, !dbg !17
  %19 = mul nsw i32 %16, 48, !dbg !18
  %20 = add nsw i32 %19, %.decomposed, !dbg !19
  %21 = sext i32 %20 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !20
  %23 = and i1 %15, %18, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !22
  %25 = sext i32 %.decomposed to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !23
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !25
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !26
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !26
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !26
  %32 = bitcast i32 %30 to float, !dbg !26
  %33 = bitcast i32 %31 to float, !dbg !26
  %34 = fadd float %32, 0x3EE4F8B580000000, !dbg !27
  %35 = fadd float %33, 0x3EE4F8B580000000, !dbg !27
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %36, 0, !dbg !28
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %37, 0, !dbg !28
  br i1 %.not.i, label %43, label %38, !dbg !28

38:                                               ; preds = %8
  br i1 %.not1.i, label %41, label %39, !dbg !28

39:                                               ; preds = %38
  %40 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

41:                                               ; preds = %38
  %42 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

43:                                               ; preds = %8
  br i1 %.not1.i, label %46, label %44, !dbg !28

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %39, %41, %44, %46
  %.0.i = phi float [ %40, %39 ], [ %42, %41 ], [ %45, %44 ], [ %47, %46 ], !dbg !28
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %48, 0, !dbg !28
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %49, 0, !dbg !28
  br i1 %.not.i1, label %55, label %50, !dbg !28

50:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %53, label %51, !dbg !28

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

55:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %58, label %56, !dbg !28

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %51, %53, %56, %58
  %.0.i3 = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !28
  %60 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = extractvalue { i32, i32 } %27, 1, !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = fsub float %61, %63, !dbg !29
  %65 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %66 = bitcast i32 %65 to float, !dbg !22
  %67 = extractvalue { i32, i32 } %27, 0, !dbg !24
  %68 = bitcast i32 %67 to float, !dbg !24
  %69 = fsub float %66, %68, !dbg !29
  %70 = sdiv i32 %14, 2304, !dbg !30
  %71 = or disjoint i32 %14, 1, !dbg !13
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %74 = fmul float %69, %72, !dbg !32
  %75 = fmul float %64, %73, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !33
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !34
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !34
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !34
  %80 = bitcast i32 %78 to float, !dbg !34
  %81 = bitcast i32 %79 to float, !dbg !34
  %82 = fmul float %74, %80, !dbg !35
  %83 = fmul float %75, %81, !dbg !35
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !36
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %84, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !37
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !37
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !37
  %88 = bitcast i32 %86 to float, !dbg !37
  %89 = bitcast i32 %87 to float, !dbg !37
  %90 = fadd float %82, %88, !dbg !38
  %91 = fadd float %83, %89, !dbg !38
  %92 = fcmp olt float %90, 0.000000e+00, !dbg !39
  %93 = fcmp olt float %91, 0.000000e+00, !dbg !39
  %94 = select i1 %92, float 0.000000e+00, float %90, !dbg !43
  %95 = select i1 %93, float 0.000000e+00, float %91, !dbg !43
  %96 = icmp sgt i32 %.decomposed, 47, !dbg !44
  %97 = shl nsw i32 %.decomposed, 4, !dbg !45
  %98 = mul nsw i32 %70, 1536, !dbg !46
  %99 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !47
  %100 = insertelement <2 x i32> %99, i32 %71, i64 1, !dbg !47
  %101 = srem <2 x i32> %100, <i32 16, i32 144>, !dbg !47
  %102 = extractelement <2 x i32> %101, i64 0, !dbg !48
  %103 = add nsw i32 %102, -768, !dbg !48
  %104 = add nsw i32 %103, %97, !dbg !48
  %105 = add nsw i32 %104, %98, !dbg !49
  %106 = extractelement <2 x i32> %101, i64 1, !dbg !48
  %107 = shl nsw i32 %106, 4, !dbg !48
  %108 = add nsw i32 %103, %107, !dbg !48
  %109 = add nsw i32 %108, %98, !dbg !49
  %110 = sext i32 %105 to i64, !dbg !50
  %111 = getelementptr float, ptr addrspace(1) %5, i64 %110, !dbg !50
  %112 = sext i32 %109 to i64, !dbg !50
  %113 = getelementptr float, ptr addrspace(1) %5, i64 %112, !dbg !50
  %114 = and i1 %15, %96, !dbg !51
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %114, i32 0, i1 %114) #3, !dbg !52
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %114, i32 0, i1 %114) #3, !dbg !52
  %117 = sext i32 %14 to i64, !dbg !53
  %118 = getelementptr float, ptr addrspace(1) %6, i64 %117, !dbg !53
  %119 = bitcast float %94 to i32, !dbg !54
  %120 = select i1 %18, i32 %119, i32 %115, !dbg !55
  %121 = bitcast float %95 to i32, !dbg !54
  %122 = select i1 %18, i32 %121, i32 %116, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %120, i32 %122, ptr addrspace(1) %118, i1 %15) #3, !dbg !54
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccc6gfgcpt5zy6zvb2zkarzdrjzfhbdg4dkzcxqdtvuprussc3et.py", directory: "inductor_cache/cc")
!4 = !{ptr @triton_poi_fused_cat_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_31", linkageName: "triton_poi_fused_cat_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 18, scope: !7)
!18 = !DILocation(line: 34, column: 33, scope: !7)
!19 = !DILocation(line: 34, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 52, scope: !7)
!22 = !DILocation(line: 34, column: 45, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 30, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 39, column: 19, scope: !7)
!28 = !DILocation(line: 40, column: 27, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 27, column: 19, scope: !7)
!31 = !DILocation(line: 42, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 19, scope: !7)
!33 = !DILocation(line: 46, column: 31, scope: !7)
!34 = !DILocation(line: 46, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 48, column: 31, scope: !7)
!37 = !DILocation(line: 48, column: 36, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 51, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 40, scope: !7)
!46 = !DILocation(line: 57, column: 59, scope: !7)
!47 = !DILocation(line: 26, column: 28, scope: !7)
!48 = !DILocation(line: 57, column: 36, scope: !7)
!49 = !DILocation(line: 57, column: 54, scope: !7)
!50 = !DILocation(line: 57, column: 31, scope: !7)
!51 = !DILocation(line: 57, column: 72, scope: !7)
!52 = !DILocation(line: 57, column: 64, scope: !7)
!53 = !DILocation(line: 59, column: 25, scope: !7)
!54 = !DILocation(line: 59, column: 37, scope: !7)
!55 = !DILocation(line: 0, scope: !7)
!56 = !DILocation(line: 59, column: 4, scope: !7)
