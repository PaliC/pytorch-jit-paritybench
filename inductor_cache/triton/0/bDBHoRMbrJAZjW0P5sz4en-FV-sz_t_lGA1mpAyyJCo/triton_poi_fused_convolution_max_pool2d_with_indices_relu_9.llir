; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_max_pool2d_with_indices_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = icmp slt i32 %6, 512, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 1, !dbg !14
  %14 = or disjoint i32 %12, 2, !dbg !14
  %15 = or disjoint i32 %12, 3, !dbg !14
  %16 = or disjoint i32 %12, 513, !dbg !14
  %17 = or disjoint i32 %12, 514, !dbg !14
  %18 = or disjoint i32 %12, 515, !dbg !14
  %19 = or disjoint i32 %9, %12, !dbg !15
  %20 = or disjoint i32 %9, %13, !dbg !15
  %21 = or disjoint i32 %9, %14, !dbg !15
  %22 = or disjoint i32 %9, %15, !dbg !15
  %23 = or disjoint i32 %19, 512, !dbg !15
  %24 = or disjoint i32 %9, %16, !dbg !15
  %25 = or disjoint i32 %9, %17, !dbg !15
  %26 = or disjoint i32 %9, %18, !dbg !15
  %27 = icmp slt i32 %19, 1024, !dbg !16
  %28 = icmp slt i32 %23, 1024, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %29 = sdiv i32 %.frozen, 128, !dbg !17
  %30 = mul i32 %29, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %30, !dbg !18
  %31 = shl i32 %19, 7, !dbg !19
  %32 = shl i32 %20, 7, !dbg !19
  %33 = shl i32 %21, 7, !dbg !19
  %34 = shl i32 %22, 7, !dbg !19
  %35 = shl i32 %23, 7, !dbg !19
  %36 = shl i32 %24, 7, !dbg !19
  %37 = shl i32 %25, 7, !dbg !19
  %38 = shl i32 %26, 7, !dbg !19
  %39 = shl i32 %29, 17, !dbg !20
  %40 = add i32 %39, %.decomposed, !dbg !21
  %41 = add i32 %40, %31, !dbg !22
  %42 = add i32 %40, %32, !dbg !22
  %43 = add i32 %40, %33, !dbg !22
  %44 = add i32 %40, %34, !dbg !22
  %45 = add i32 %40, %35, !dbg !22
  %46 = add i32 %40, %36, !dbg !22
  %47 = add i32 %40, %37, !dbg !22
  %48 = add i32 %40, %38, !dbg !22
  %49 = sext i32 %41 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = sext i32 %42 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %43 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %44 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %45 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %46 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %47 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %48 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = and i1 %7, %27, !dbg !24
  %66 = and i1 %28, %7, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %65) #1, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %65) #1, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %65) #1, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %65) #1, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %66) #1, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %66) #1, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %66) #1, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %66) #1, !dbg !25
  %75 = sext i32 %.decomposed to i64, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %7) #1, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %7) #1, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %7) #1, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %7) #1, !dbg !27
  %81 = insertelement <8 x i32> poison, i32 %74, i64 0, !dbg !25
  %82 = insertelement <8 x i32> %81, i32 %73, i64 1, !dbg !25
  %83 = insertelement <8 x i32> %82, i32 %72, i64 2, !dbg !25
  %84 = insertelement <8 x i32> %83, i32 %71, i64 3, !dbg !25
  %85 = insertelement <8 x i32> %84, i32 %70, i64 4, !dbg !25
  %86 = insertelement <8 x i32> %85, i32 %69, i64 5, !dbg !25
  %87 = insertelement <8 x i32> %86, i32 %68, i64 6, !dbg !25
  %88 = insertelement <8 x i32> %87, i32 %67, i64 7, !dbg !25
  %89 = bitcast <8 x i32> %88 to <8 x float>, !dbg !25
  %90 = insertelement <8 x i32> poison, i32 %80, i64 0, !dbg !28
  %91 = bitcast <8 x i32> %90 to <8 x float>, !dbg !28
  %92 = shufflevector <8 x float> %91, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !28
  %93 = fadd <8 x float> %92, %89, !dbg !28
  %94 = fcmp olt <8 x float> %93, zeroinitializer, !dbg !29
  %95 = extractelement <8 x i1> %94, i64 7, !dbg !33
  %96 = extractelement <8 x i1> %94, i64 6, !dbg !33
  %97 = extractelement <8 x i1> %94, i64 5, !dbg !33
  %98 = extractelement <8 x i1> %94, i64 4, !dbg !33
  %99 = extractelement <8 x i1> %94, i64 3, !dbg !33
  %100 = extractelement <8 x i1> %94, i64 2, !dbg !33
  %101 = extractelement <8 x i1> %94, i64 1, !dbg !33
  %102 = extractelement <8 x i1> %94, i64 0, !dbg !33
  %103 = shl i32 %6, 10, !dbg !34
  %104 = add i32 %19, %103, !dbg !35
  %105 = add i32 %103, %23, !dbg !35
  %106 = sext i32 %104 to i64, !dbg !36
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !36
  %108 = sext i32 %105 to i64, !dbg !36
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !36
  %bc = bitcast <8 x float> %93 to <8 x i32>, !dbg !37
  %110 = extractelement <8 x i32> %bc, i64 7, !dbg !37
  %111 = select i1 %95, i32 0, i32 %110, !dbg !33
  %bc1 = bitcast <8 x float> %93 to <8 x i32>, !dbg !37
  %112 = extractelement <8 x i32> %bc1, i64 6, !dbg !37
  %113 = select i1 %96, i32 0, i32 %112, !dbg !33
  %bc2 = bitcast <8 x float> %93 to <8 x i32>, !dbg !37
  %114 = extractelement <8 x i32> %bc2, i64 5, !dbg !37
  %115 = select i1 %97, i32 0, i32 %114, !dbg !33
  %bc3 = bitcast <8 x float> %93 to <8 x i32>, !dbg !37
  %116 = extractelement <8 x i32> %bc3, i64 4, !dbg !37
  %117 = select i1 %98, i32 0, i32 %116, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %111, i32 %113, i32 %115, i32 %117, ptr addrspace(1) %107, i1 %65) #1, !dbg !37
  %bc4 = bitcast <8 x float> %93 to <8 x i32>, !dbg !37
  %118 = extractelement <8 x i32> %bc4, i64 3, !dbg !37
  %119 = select i1 %99, i32 0, i32 %118, !dbg !33
  %bc5 = bitcast <8 x float> %93 to <8 x i32>, !dbg !37
  %120 = extractelement <8 x i32> %bc5, i64 2, !dbg !37
  %121 = select i1 %100, i32 0, i32 %120, !dbg !33
  %bc6 = bitcast <8 x float> %93 to <8 x i32>, !dbg !37
  %122 = extractelement <8 x i32> %bc6, i64 1, !dbg !37
  %123 = select i1 %101, i32 0, i32 %122, !dbg !33
  %bc7 = bitcast <8 x float> %93 to <8 x i32>, !dbg !37
  %124 = extractelement <8 x i32> %bc7, i64 0, !dbg !37
  %125 = select i1 %102, i32 0, i32 %124, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %119, i32 %121, i32 %123, i32 %125, ptr addrspace(1) %109, i1 %66) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cikc25loqmjuqfo46ogv6zoqopsvtsiozlvchd2najs4wfci5zy2.py", directory: "inductor_cache/ik")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_9", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 51, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 64, scope: !7)
!25 = !DILocation(line: 32, column: 56, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 36, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 35, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 46, scope: !7)
!38 = !DILocation(line: 37, column: 4, scope: !7)
