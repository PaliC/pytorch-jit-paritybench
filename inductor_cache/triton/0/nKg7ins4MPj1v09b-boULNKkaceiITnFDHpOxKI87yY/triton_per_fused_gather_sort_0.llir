; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/fc/cfcbdfl4vo2g66j5ucfvlq4wlik2skho5xaoaohv2hc6jfly6za5.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp10 < 4\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_gather_sort_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = icmp slt i32 %6, 256, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = and i32 %8, 1, !dbg !14
  %10 = and i32 %8, 3, !dbg !14
  %11 = shl i32 %6, 2, !dbg !15
  %12 = or disjoint i32 %11, %10, !dbg !16
  %13 = sext i32 %12 to i64, !dbg !17
  %14 = getelementptr i64, ptr addrspace(1) %0, i64 %13, !dbg !17
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %14, i1 %7, i1 %7) #4, !dbg !18
  %16 = lshr i32 %8, 1, !dbg !19
  %.lobit = and i32 %16, 1, !dbg !19
  %17 = zext nneg i32 %.lobit to i64, !dbg !24
  %18 = zext nneg i32 %9 to i64, !dbg !24
  %19 = xor i64 %17, 1, !dbg !26
  %20 = xor i64 %18, 1, !dbg !26
  %21 = mul nuw nsw i64 %15, %20, !dbg !27
  %extelt.offset = lshr i64 %21, 32, !dbg !28
  %22 = trunc nuw i64 %extelt.offset to i32, !dbg !28
  %23 = trunc i64 %21 to i32, !dbg !28
  %24 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %23, i32 1, i32 31), !dbg !28
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %22, i32 1, i32 31), !dbg !28
  %26 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !28
  %27 = insertelement <2 x i32> %26, i32 %25, i64 1, !dbg !28
  %28 = bitcast <2 x i32> %27 to i64, !dbg !28
  %29 = add i64 %21, %28, !dbg !31
  %30 = mul nuw nsw i64 %15, %18, !dbg !33
  %extelt.offset1 = lshr i64 %30, 32, !dbg !28
  %31 = trunc nuw i64 %extelt.offset1 to i32, !dbg !28
  %32 = trunc i64 %30 to i32, !dbg !28
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 1, i32 31), !dbg !28
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 1, i32 31), !dbg !28
  %35 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !28
  %36 = insertelement <2 x i32> %35, i32 %34, i64 1, !dbg !28
  %37 = bitcast <2 x i32> %36 to i64, !dbg !28
  %38 = add i64 %30, %37, !dbg !31
  %39 = trunc i32 %16 to i1, !dbg !34
  %40 = icmp sle i64 %29, %38, !dbg !34
  %.not = xor i1 %40, %39, !dbg !34
  %41 = xor i64 %38, %29, !dbg !35
  %42 = select i1 %.not, i64 0, i64 %41, !dbg !36
  %43 = xor i64 %42, %15, !dbg !37
  %44 = mul nuw nsw i64 %43, %19, !dbg !27
  %extelt.offset2 = lshr i64 %44, 32, !dbg !28
  %45 = trunc nuw i64 %extelt.offset2 to i32, !dbg !28
  %46 = trunc i64 %44 to i32, !dbg !28
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !28
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !28
  %49 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !28
  %50 = insertelement <2 x i32> %49, i32 %48, i64 1, !dbg !28
  %51 = bitcast <2 x i32> %50 to i64, !dbg !28
  %52 = add i64 %44, %51, !dbg !31
  %53 = mul nuw nsw i64 %43, %17, !dbg !33
  %extelt.offset3 = lshr i64 %53, 32, !dbg !28
  %54 = trunc nuw i64 %extelt.offset3 to i32, !dbg !28
  %55 = trunc i64 %53 to i32, !dbg !28
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !28
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !28
  %58 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !28
  %59 = insertelement <2 x i32> %58, i32 %57, i64 1, !dbg !28
  %60 = bitcast <2 x i32> %59 to i64, !dbg !28
  %61 = add i64 %53, %60, !dbg !31
  %62 = icmp sgt i64 %52, %61, !dbg !38
  %63 = xor i64 %52, %61, !dbg !35
  %64 = select i1 %62, i64 %63, i64 0, !dbg !36
  %65 = xor i64 %64, %43, !dbg !37
  %66 = mul nuw nsw i64 %65, %20, !dbg !27
  %extelt.offset4 = lshr i64 %66, 32, !dbg !28
  %67 = trunc nuw i64 %extelt.offset4 to i32, !dbg !28
  %68 = trunc i64 %66 to i32, !dbg !28
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 1, i32 31), !dbg !28
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !28
  %71 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !28
  %72 = insertelement <2 x i32> %71, i32 %70, i64 1, !dbg !28
  %73 = bitcast <2 x i32> %72 to i64, !dbg !28
  %74 = add i64 %66, %73, !dbg !31
  %75 = mul nuw nsw i64 %65, %18, !dbg !33
  %extelt.offset5 = lshr i64 %75, 32, !dbg !28
  %76 = trunc nuw i64 %extelt.offset5 to i32, !dbg !28
  %77 = trunc i64 %75 to i32, !dbg !28
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !28
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 1, i32 31), !dbg !28
  %80 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !28
  %81 = insertelement <2 x i32> %80, i32 %79, i64 1, !dbg !28
  %82 = bitcast <2 x i32> %81 to i64, !dbg !28
  %83 = add i64 %75, %82, !dbg !31
  %84 = icmp sgt i64 %74, %83, !dbg !38
  %85 = xor i64 %74, %83, !dbg !35
  %86 = select i1 %84, i64 %85, i64 0, !dbg !36
  %87 = xor i64 %86, %65, !dbg !37
  %88 = lshr i64 %87, 61, !dbg !39
  %89 = and i64 %88, 4, !dbg !39
  %90 = add i64 %89, %87, !dbg !39
  %91 = icmp ugt i64 %90, 3, !dbg !40
  %.not8 = and i1 %7, %91, !dbg !41
  br i1 %.not8, label %92, label %93, !dbg !41

92:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !41
  unreachable, !dbg !41

93:                                               ; preds = %5
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %94 = sext i32 %11 to i64, !dbg !42
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !43
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %94, !dbg !43
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %7) #4, !dbg !44
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !45
  %99 = and i32 %8, 60, !dbg !46
  %100 = icmp eq i32 %99, 0, !dbg !46
  %101 = and i1 %100, %7, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %98, i1 %101) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfcbdfl4vo2g66j5ucfvlq4wlik2skho5xaoaohv2hc6jfly6za5.py", directory: "inductor_cache/fc")
!4 = !{ptr @triton_per_fused_gather_sort_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_gather_sort_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_gather_sort_0", linkageName: "triton_per_fused_gather_sort_0", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 25, column: 21, scope: !11)
!14 = !DILocation(line: 26, column: 34, scope: !11)
!15 = !DILocation(line: 31, column: 41, scope: !11)
!16 = !DILocation(line: 31, column: 39, scope: !11)
!17 = !DILocation(line: 31, column: 34, scope: !11)
!18 = !DILocation(line: 31, column: 46, scope: !11)
!19 = !DILocation(line: 575, column: 44, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = distinct !DILexicalBlockFile(scope: !11, file: !21, discriminator: 0)
!23 = !DILocation(line: 36, column: 67, scope: !11)
!24 = !DILocation(line: 504, column: 51, scope: !25, inlinedAt: !23)
!25 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!26 = !DILocation(line: 505, column: 21, scope: !25, inlinedAt: !23)
!27 = !DILocation(line: 506, column: 40, scope: !25, inlinedAt: !23)
!28 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !23)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !23)
!32 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!33 = !DILocation(line: 507, column: 41, scope: !25, inlinedAt: !23)
!34 = !DILocation(line: 547, column: 28, scope: !25, inlinedAt: !23)
!35 = !DILocation(line: 548, column: 38, scope: !25, inlinedAt: !23)
!36 = !DILocation(line: 548, column: 46, scope: !25, inlinedAt: !23)
!37 = !DILocation(line: 548, column: 15, scope: !25, inlinedAt: !23)
!38 = !DILocation(line: 538, column: 22, scope: !25, inlinedAt: !23)
!39 = !DILocation(line: 40, column: 33, scope: !11)
!40 = !DILocation(line: 41, column: 38, scope: !11)
!41 = !DILocation(line: 41, column: 62, scope: !11)
!42 = !DILocation(line: 42, column: 39, scope: !11)
!43 = !DILocation(line: 42, column: 31, scope: !11)
!44 = !DILocation(line: 42, column: 46, scope: !11)
!45 = !DILocation(line: 43, column: 25, scope: !11)
!46 = !DILocation(line: 43, column: 44, scope: !11)
!47 = !DILocation(line: 43, column: 4, scope: !11)
