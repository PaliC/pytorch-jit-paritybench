; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_53(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = add i32 %9, -6144, !dbg !14
  %11 = sext i32 %10 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !15
  %13 = add i32 %9, -4096, !dbg !16
  %14 = sext i32 %13 to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !17
  %16 = add i32 %9, -2048, !dbg !18
  %17 = sext i32 %16 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = sext i32 %9 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = add i32 %9, 2048, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = add i32 %9, 4096, !dbg !23
  %25 = sext i32 %24 to i64, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !24
  %27 = add i32 %9, 6144, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !27
  %31 = shufflevector <2 x i32> %30, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !27
  %32 = sdiv <2 x i32> %31, <i32 2048, i32 4096>, !dbg !27
  %33 = srem <2 x i32> %32, splat (i32 2), !dbg !28
  %34 = icmp sgt <2 x i32> %33, zeroinitializer, !dbg !29
  %35 = extractelement <2 x i1> %34, i64 0, !dbg !30
  %36 = extractelement <2 x i1> %34, i64 1, !dbg !30
  %37 = and i1 %36, %35, !dbg !30
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %12, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #1, !dbg !31
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !31
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !31
  %41 = bitcast i32 %39 to float, !dbg !31
  %42 = bitcast i32 %40 to float, !dbg !31
  %43 = extractelement <2 x i32> %33, i64 0, !dbg !32
  %44 = icmp sgt i32 %43, -1, !dbg !33
  %45 = and i1 %36, %44, !dbg !34
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %15, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !35
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !35
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !35
  %49 = bitcast i32 %47 to float, !dbg !35
  %50 = bitcast i32 %48 to float, !dbg !35
  %51 = fadd float %41, %49, !dbg !36
  %52 = fadd float %42, %50, !dbg !36
  %53 = icmp slt i32 %43, 1, !dbg !37
  %54 = and i1 %36, %53, !dbg !38
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #1, !dbg !39
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !39
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !39
  %58 = bitcast i32 %56 to float, !dbg !39
  %59 = bitcast i32 %57 to float, !dbg !39
  %60 = fadd float %51, %58, !dbg !40
  %61 = fadd float %52, %59, !dbg !40
  %62 = extractelement <2 x i32> %33, i64 1, !dbg !32
  %63 = icmp sgt i32 %62, -1, !dbg !41
  %64 = and i1 %63, %35, !dbg !42
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #1, !dbg !43
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !43
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !43
  %68 = bitcast i32 %66 to float, !dbg !43
  %69 = bitcast i32 %67 to float, !dbg !43
  %70 = fadd float %60, %68, !dbg !44
  %71 = fadd float %61, %69, !dbg !44
  %72 = or i32 %62, %43, !dbg !45
  %73 = icmp sgt i32 %72, -1, !dbg !45
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #1, !dbg !46
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !46
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !46
  %77 = bitcast i32 %75 to float, !dbg !46
  %78 = bitcast i32 %76 to float, !dbg !46
  %79 = fadd float %70, %77, !dbg !47
  %80 = fadd float %71, %78, !dbg !47
  %81 = and i1 %63, %53, !dbg !48
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #1, !dbg !49
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !49
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !49
  %85 = bitcast i32 %83 to float, !dbg !49
  %86 = bitcast i32 %84 to float, !dbg !49
  %87 = fadd float %79, %85, !dbg !50
  %88 = fadd float %80, %86, !dbg !50
  %89 = icmp slt i32 %62, 1, !dbg !51
  %90 = and i1 %89, %35, !dbg !52
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #1, !dbg !53
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !53
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !53
  %94 = bitcast i32 %92 to float, !dbg !53
  %95 = bitcast i32 %93 to float, !dbg !53
  %96 = fadd float %87, %94, !dbg !54
  %97 = fadd float %88, %95, !dbg !54
  %98 = and i1 %89, %44, !dbg !55
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !56
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !56
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !56
  %102 = bitcast i32 %100 to float, !dbg !56
  %103 = bitcast i32 %101 to float, !dbg !56
  %104 = fadd float %96, %102, !dbg !57
  %105 = fadd float %97, %103, !dbg !57
  %106 = and i1 %89, %53, !dbg !58
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #1, !dbg !59
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !59
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !59
  %110 = bitcast i32 %108 to float, !dbg !59
  %111 = bitcast i32 %109 to float, !dbg !59
  %112 = fadd float %104, %110, !dbg !60
  %113 = fadd float %105, %111, !dbg !60
  %114 = mul nsw i32 %43, %62, !dbg !61
  %115 = add nsw <2 x i32> %33, splat (i32 2), !dbg !62
  %116 = select <2 x i1> %34, <2 x i32> splat (i32 3), <2 x i32> %115, !dbg !63
  %117 = extractelement <2 x i32> %116, i64 0, !dbg !64
  %118 = extractelement <2 x i32> %116, i64 1, !dbg !65
  %119 = mul nuw nsw i32 %117, %118, !dbg !66
  %120 = shufflevector <2 x i32> %33, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !65
  %121 = mul nsw <2 x i32> %116, %120, !dbg !65
  %shift = shufflevector <2 x i32> %121, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %122 = add nsw <2 x i32> %shift, %121
  %reass.add = extractelement <2 x i32> %122, i64 0
  %123 = add nsw i32 %62, %43, !dbg !32
  %reass.sub7 = sub nsw i32 %114, %123, !dbg !32
  %124 = add nsw i32 %reass.sub7, 1, !dbg !32
  %125 = add nsw i32 %124, %117, !dbg !64
  %126 = add nsw i32 %125, %118, !dbg !65
  %127 = add nuw nsw i32 %126, %119, !dbg !67
  %128 = sub nsw i32 %127, %reass.add, !dbg !68
  %129 = sitofp i32 %128 to float, !dbg !69
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %129) #1, !dbg !69
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %129) #1, !dbg !69
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !70
  %133 = bitcast float %130 to i32, !dbg !71
  %134 = bitcast float %131 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %134, ptr addrspace(1) %132, i1 true) #1, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjklql5b5flplr54xfsehrrwjbzay4c6fekda3i7ut7nksf3brcz.py", directory: "inductor_cache/jk")
!4 = !{ptr @triton_poi_fused_avg_pool2d_53, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_53, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_53", linkageName: "triton_poi_fused_avg_pool2d_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 38, column: 41, scope: !7)
!15 = !DILocation(line: 38, column: 31, scope: !7)
!16 = !DILocation(line: 44, column: 41, scope: !7)
!17 = !DILocation(line: 44, column: 31, scope: !7)
!18 = !DILocation(line: 51, column: 41, scope: !7)
!19 = !DILocation(line: 51, column: 31, scope: !7)
!20 = !DILocation(line: 61, column: 31, scope: !7)
!21 = !DILocation(line: 64, column: 38, scope: !7)
!22 = !DILocation(line: 64, column: 31, scope: !7)
!23 = !DILocation(line: 74, column: 38, scope: !7)
!24 = !DILocation(line: 74, column: 31, scope: !7)
!25 = !DILocation(line: 77, column: 38, scope: !7)
!26 = !DILocation(line: 77, column: 31, scope: !7)
!27 = !DILocation(line: 24, column: 21, scope: !7)
!28 = !DILocation(line: 24, column: 29, scope: !7)
!29 = !DILocation(line: 29, column: 19, scope: !7)
!30 = !DILocation(line: 37, column: 19, scope: !7)
!31 = !DILocation(line: 38, column: 46, scope: !7)
!32 = !DILocation(line: 79, column: 40, scope: !7)
!33 = !DILocation(line: 40, column: 21, scope: !7)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 46, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 19, scope: !7)
!39 = !DILocation(line: 51, column: 46, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 21, scope: !7)
!42 = !DILocation(line: 57, column: 20, scope: !7)
!43 = !DILocation(line: 58, column: 46, scope: !7)
!44 = !DILocation(line: 59, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 36, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 64, column: 43, scope: !7)
!50 = !DILocation(line: 65, column: 20, scope: !7)
!51 = !DILocation(line: 68, column: 20, scope: !7)
!52 = !DILocation(line: 70, column: 20, scope: !7)
!53 = !DILocation(line: 71, column: 43, scope: !7)
!54 = !DILocation(line: 72, column: 20, scope: !7)
!55 = !DILocation(line: 73, column: 20, scope: !7)
!56 = !DILocation(line: 74, column: 43, scope: !7)
!57 = !DILocation(line: 75, column: 20, scope: !7)
!58 = !DILocation(line: 76, column: 20, scope: !7)
!59 = !DILocation(line: 77, column: 43, scope: !7)
!60 = !DILocation(line: 78, column: 20, scope: !7)
!61 = !DILocation(line: 79, column: 43, scope: !7)
!62 = !DILocation(line: 79, column: 124, scope: !7)
!63 = !DILocation(line: 79, column: 131, scope: !7)
!64 = !DILocation(line: 79, column: 48, scope: !7)
!65 = !DILocation(line: 79, column: 231, scope: !7)
!66 = !DILocation(line: 79, column: 105, scope: !7)
!67 = !DILocation(line: 79, column: 299, scope: !7)
!68 = !DILocation(line: 79, column: 357, scope: !7)
!69 = !DILocation(line: 80, column: 20, scope: !7)
!70 = !DILocation(line: 81, column: 25, scope: !7)
!71 = !DILocation(line: 81, column: 37, scope: !7)
!72 = !DILocation(line: 81, column: 4, scope: !7)
