; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_mean_mul_rsqrt_sub_var_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 16, !dbg !15
  %14 = srem i32 %13, 4, !dbg !16
  %15 = mul i32 %13, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %16 = sdiv i32 %11, 64, !dbg !18
  %17 = sext i32 %14 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #3, !dbg !20
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #3, !dbg !20
  %21 = sext i32 %11 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %12) #3, !dbg !22
  %24 = shl nsw i32 %16, 6, !dbg !23
  %25 = add i32 %24, %.decomposed, !dbg !24
  %26 = sext i32 %25 to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !25
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %12) #3, !dbg !26
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !26
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !26
  %31 = bitcast i32 %29 to float, !dbg !26
  %32 = bitcast i32 %30 to float, !dbg !26
  %33 = add i32 %25, 16, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !28
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %12) #3, !dbg !29
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !29
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !29
  %39 = bitcast i32 %37 to float, !dbg !29
  %40 = bitcast i32 %38 to float, !dbg !29
  %41 = add i32 %25, 32, !dbg !30
  %42 = sext i32 %41 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !31
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %12) #3, !dbg !32
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !32
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !32
  %47 = bitcast i32 %45 to float, !dbg !32
  %48 = bitcast i32 %46 to float, !dbg !32
  %49 = add i32 %25, 48, !dbg !33
  %50 = sext i32 %49 to i64, !dbg !34
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !34
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %12) #3, !dbg !35
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !35
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !35
  %55 = bitcast i32 %53 to float, !dbg !35
  %56 = bitcast i32 %54 to float, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %12) #3, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %12) #3, !dbg !37
  %60 = fadd float %31, %39, !dbg !38
  %61 = fadd float %32, %40, !dbg !38
  %62 = fadd float %60, %47, !dbg !39
  %63 = fadd float %61, %48, !dbg !39
  %64 = fadd float %62, %55, !dbg !40
  %65 = fadd float %63, %56, !dbg !40
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 4.000000e+00) #3, !dbg !41
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 4.000000e+00) #3, !dbg !41
  %68 = fsub float %31, %66, !dbg !42
  %69 = fsub float %32, %67, !dbg !42
  %70 = fmul float %68, %68, !dbg !43
  %71 = fmul float %69, %69, !dbg !43
  %72 = fsub float %39, %66, !dbg !44
  %73 = fsub float %40, %67, !dbg !44
  %74 = fmul float %72, %72, !dbg !45
  %75 = fmul float %73, %73, !dbg !45
  %76 = fadd float %70, %74, !dbg !46
  %77 = fadd float %71, %75, !dbg !46
  %78 = fsub float %47, %66, !dbg !47
  %79 = fsub float %48, %67, !dbg !47
  %80 = fmul float %78, %78, !dbg !48
  %81 = fmul float %79, %79, !dbg !48
  %82 = fadd float %80, %76, !dbg !49
  %83 = fadd float %81, %77, !dbg !49
  %84 = fsub float %55, %66, !dbg !50
  %85 = fsub float %56, %67, !dbg !50
  %86 = fmul float %84, %84, !dbg !51
  %87 = fmul float %85, %85, !dbg !51
  %88 = fadd float %86, %82, !dbg !52
  %89 = fadd float %87, %83, !dbg !52
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 4.000000e+00) #3, !dbg !53
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 4.000000e+00) #3, !dbg !53
  %92 = fadd float %90, 0x3EB0C6F7A0000000, !dbg !54
  %93 = fadd float %91, 0x3EB0C6F7A0000000, !dbg !54
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %94, 0, !dbg !55
  br i1 %.not.i, label %97, label %95, !dbg !55

95:                                               ; preds = %5
  %96 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %92), !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !55

97:                                               ; preds = %5
  %98 = tail call float @llvm.nvvm.rsqrt.approx.f(float %92), !dbg !55
  br label %__nv_rsqrtf.exit, !dbg !55

__nv_rsqrtf.exit:                                 ; preds = %95, %97
  %.0.i = phi float [ %96, %95 ], [ %98, %97 ], !dbg !55
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i1 = icmp eq i32 %99, 0, !dbg !55
  br i1 %.not.i1, label %102, label %100, !dbg !55

100:                                              ; preds = %__nv_rsqrtf.exit
  %101 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !55
  br label %__nv_rsqrtf.exit3, !dbg !55

102:                                              ; preds = %__nv_rsqrtf.exit
  %103 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !55
  br label %__nv_rsqrtf.exit3, !dbg !55

__nv_rsqrtf.exit3:                                ; preds = %100, %102
  %.0.i2 = phi float [ %101, %100 ], [ %103, %102 ], !dbg !55
  %104 = extractvalue { i32, i32 } %23, 1, !dbg !22
  %105 = bitcast i32 %104 to float, !dbg !22
  %106 = fsub float %105, %67, !dbg !56
  %107 = extractvalue { i32, i32 } %23, 0, !dbg !22
  %108 = bitcast i32 %107 to float, !dbg !22
  %109 = fsub float %108, %66, !dbg !56
  %110 = bitcast i32 %59 to float, !dbg !37
  %111 = bitcast i32 %58 to float, !dbg !37
  %112 = bitcast i32 %20 to float, !dbg !20
  %113 = bitcast i32 %19 to float, !dbg !20
  %114 = fmul float %109, %.0.i, !dbg !57
  %115 = fmul float %106, %.0.i2, !dbg !57
  %116 = fmul float %114, %113, !dbg !58
  %117 = fmul float %115, %112, !dbg !58
  %118 = fadd float %116, %111, !dbg !59
  %119 = fadd float %117, %110, !dbg !59
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !60
  %121 = bitcast float %118 to i32, !dbg !61
  %122 = bitcast float %119 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %120, i1 %12) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cofnswcnyk46tbk7a6ofbuikpb7rx2lttqe47fgoszkdycsymwfb.py", directory: "inductor_cache/of")
!4 = !{ptr @triton_poi_fused_add_mean_mul_rsqrt_sub_var_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mean_mul_rsqrt_sub_var_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mean_mul_rsqrt_sub_var_0", linkageName: "triton_poi_fused_add_mean_mul_rsqrt_sub_var_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 38, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 43, scope: !7)
!27 = !DILocation(line: 31, column: 40, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 48, scope: !7)
!30 = !DILocation(line: 32, column: 40, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 48, scope: !7)
!33 = !DILocation(line: 33, column: 40, scope: !7)
!34 = !DILocation(line: 33, column: 30, scope: !7)
!35 = !DILocation(line: 33, column: 48, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 19, scope: !7)
!42 = !DILocation(line: 41, column: 19, scope: !7)
!43 = !DILocation(line: 42, column: 20, scope: !7)
!44 = !DILocation(line: 43, column: 19, scope: !7)
!45 = !DILocation(line: 44, column: 20, scope: !7)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 46, column: 19, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 19, scope: !7)
!51 = !DILocation(line: 50, column: 20, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 54, column: 20, scope: !7)
!55 = !DILocation(line: 55, column: 28, scope: !7)
!56 = !DILocation(line: 40, column: 19, scope: !7)
!57 = !DILocation(line: 56, column: 20, scope: !7)
!58 = !DILocation(line: 57, column: 19, scope: !7)
!59 = !DILocation(line: 58, column: 20, scope: !7)
!60 = !DILocation(line: 59, column: 25, scope: !7)
!61 = !DILocation(line: 59, column: 37, scope: !7)
!62 = !DILocation(line: 59, column: 4, scope: !7)
