; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %12, 7, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = icmp slt i32 %16, 16, !dbg !14
  %18 = srem i32 %16, 4, !dbg !15
  %19 = shl i32 %16, 3, !dbg !16
  %20 = or disjoint i32 %19, %15, !dbg !17
  %21 = sext i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %17, i32 0, i1 %17) #5, !dbg !19
  %24 = sext i32 %18 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %17) #5, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %17) #5, !dbg !23
  %29 = bitcast i32 %28 to float, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %17) #5, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %17) #5, !dbg !27
  %34 = fadd float %29, 0x3EE4F8B580000000, !dbg !28
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i = icmp eq i32 %35, 0, !dbg !29
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i = icmp eq i32 %36, 0, !dbg !29
  br i1 %.not.i, label %42, label %37, !dbg !29

37:                                               ; preds = %9
  br i1 %.not1.i, label %40, label %38, !dbg !29

38:                                               ; preds = %37
  %39 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %34) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

40:                                               ; preds = %37
  %41 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %34) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

42:                                               ; preds = %9
  br i1 %.not1.i, label %45, label %43, !dbg !29

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.f(float %34) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.f(float %34) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %38, %40, %43, %45
  %.0.i = phi float [ %39, %38 ], [ %41, %40 ], [ %44, %43 ], [ %46, %45 ], !dbg !29
  %47 = bitcast i32 %23 to float, !dbg !19
  %48 = bitcast i32 %26 to float, !dbg !21
  %49 = fsub float %47, %48, !dbg !30
  %50 = bitcast i32 %33 to float, !dbg !27
  %51 = bitcast i32 %31 to float, !dbg !25
  %52 = or disjoint i32 %11, %15, !dbg !13
  %53 = icmp slt i32 %52, 16, !dbg !14
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !31
  %55 = fmul float %49, %54, !dbg !32
  %56 = fmul float %55, %51, !dbg !33
  %57 = fadd float %56, %50, !dbg !34
  %58 = fcmp olt float %57, 0.000000e+00, !dbg !35
  %59 = select i1 %58, float 0.000000e+00, float %57, !dbg !39
  %60 = select i1 %17, float %59, float 0.000000e+00, !dbg !40
  %61 = bitcast float %60 to i32, !dbg !41
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !41
  %63 = bitcast i32 %62 to float, !dbg !41
  %64 = fadd float %60, %63, !dbg !45
  %65 = bitcast float %64 to i32, !dbg !41
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !41
  %67 = bitcast i32 %66 to float, !dbg !41
  %68 = fadd float %64, %67, !dbg !45
  %69 = bitcast float %68 to i32, !dbg !41
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !41
  %71 = bitcast i32 %70 to float, !dbg !41
  %72 = fadd float %68, %71, !dbg !45
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !47
  %74 = bitcast float %72 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !47
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !47
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float 8.000000e+00) #5, !dbg !47
  %78 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !48
  %79 = bitcast float %59 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %79, ptr addrspace(1) %78, i1 %17) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %80 = sext i32 %52 to i64, !dbg !51
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !51
  %82 = and i32 %12, 56, !dbg !52
  %83 = icmp eq i32 %82, 0, !dbg !52
  %84 = bitcast float %77 to i32, !dbg !52
  %85 = and i1 %83, %53, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %84, ptr addrspace(1) %81, i1 %85) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4vihls7qcrv5dnwj7djz2nvzr456fhuoc2q4pcfiryop5zegszn.py", directory: "inductor_cache/4v")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_2", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 37, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 42, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 26, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 18, scope: !7)
!32 = !DILocation(line: 45, column: 19, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 49, column: 42, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = !DILocation(line: 52, column: 26, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !46, inlinedAt: !44)
!46 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 25, scope: !7)
!49 = !DILocation(line: 55, column: 44, scope: !7)
!50 = !DILocation(line: 56, column: 4, scope: !7)
!51 = !DILocation(line: 57, column: 28, scope: !7)
!52 = !DILocation(line: 57, column: 40, scope: !7)
!53 = !DILocation(line: 57, column: 4, scope: !7)
