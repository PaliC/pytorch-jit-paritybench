; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 784, !dbg !14
  %16 = icmp slt i32 %14, 784, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 8, !dbg !16
  %19 = shl i32 %8, 4, !dbg !17
  %20 = and i32 %19, 240, !dbg !17
  %21 = lshr i32 %8, 2, !dbg !17
  %22 = and i32 %21, 63, !dbg !17
  %23 = or disjoint i32 %18, %20, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %23, 8, !dbg !18
  %26 = or disjoint i32 %23, 12, !dbg !18
  %27 = or disjoint i32 %18, %22, !dbg !18
  %28 = or disjoint i32 %27, 64, !dbg !18
  %29 = or disjoint i32 %27, 128, !dbg !18
  %30 = or disjoint i32 %27, 192, !dbg !18
  %31 = icmp slt i32 %23, 768, !dbg !19
  %32 = icmp slt i32 %27, 768, !dbg !19
  %33 = icmp slt i32 %28, 768, !dbg !19
  %34 = icmp slt i32 %29, 768, !dbg !19
  %35 = icmp slt i32 %30, 768, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %36 = sdiv i32 %.frozen, 14, !dbg !20
  %37 = mul i32 %36, 14, !dbg !21
  %.decomposed = sub i32 %.frozen, %37, !dbg !21
  %38 = srem i32 %36, 14, !dbg !22
  %39 = sdiv i32 %13, 196, !dbg !23
  %.frozen61 = freeze i32 %14, !dbg !23
  %40 = sdiv i32 %.frozen61, 196, !dbg !23
  %41 = mul i32 %40, 196, !dbg !24
  %.decomposed62 = sub i32 %.frozen61, %41, !dbg !24
  %42 = mul nsw i32 %.decomposed, 1536, !dbg !25
  %43 = mul nsw i32 %38, 46080, !dbg !26
  %44 = mul i32 %39, 691200, !dbg !27
  %45 = add i32 %44, %42, !dbg !28
  %46 = add i32 %45, %23, !dbg !29
  %47 = add i32 %46, %43, !dbg !30
  %48 = add i32 %45, %24, !dbg !29
  %49 = add i32 %48, %43, !dbg !30
  %50 = add i32 %45, %25, !dbg !29
  %51 = add i32 %50, %43, !dbg !30
  %52 = add i32 %45, %26, !dbg !29
  %53 = add i32 %52, %43, !dbg !30
  %54 = sext i32 %47 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !31
  %56 = sext i32 %49 to i64, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !31
  %58 = sext i32 %51 to i64, !dbg !31
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !31
  %60 = sext i32 %53 to i64, !dbg !31
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !31
  %62 = and i1 %15, %31, !dbg !32
  %63 = and i1 %16, %32, !dbg !32
  %64 = and i1 %33, %16, !dbg !32
  %65 = and i1 %34, %16, !dbg !32
  %66 = and i1 %35, %16, !dbg !32
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %62) #2, !dbg !33
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !33
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !33
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !33
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !33
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %62) #2, !dbg !33
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !33
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !33
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !33
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !33
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %62) #2, !dbg !33
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !33
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !33
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !33
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !33
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %62) #2, !dbg !33
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !33
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !33
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !33
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !33
  %87 = add i32 %45, 768, !dbg !34
  %88 = add i32 %87, %23, !dbg !35
  %89 = add i32 %88, %43, !dbg !36
  %90 = add i32 %87, %24, !dbg !35
  %91 = add i32 %90, %43, !dbg !36
  %92 = add i32 %87, %25, !dbg !35
  %93 = add i32 %92, %43, !dbg !36
  %94 = add i32 %87, %26, !dbg !35
  %95 = add i32 %94, %43, !dbg !36
  %96 = sext i32 %89 to i64, !dbg !37
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !37
  %98 = sext i32 %91 to i64, !dbg !37
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !37
  %100 = sext i32 %93 to i64, !dbg !37
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !37
  %102 = sext i32 %95 to i64, !dbg !37
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !37
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 %62) #2, !dbg !38
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !38
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !38
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !38
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !38
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %62) #2, !dbg !38
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !38
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !38
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !38
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !38
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %62) #2, !dbg !38
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !38
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !38
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !38
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !38
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %62) #2, !dbg !38
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !38
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !38
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !38
  %124 = add i32 %45, 1536, !dbg !39
  %125 = add i32 %124, %23, !dbg !40
  %126 = add i32 %125, %43, !dbg !41
  %127 = add i32 %124, %24, !dbg !40
  %128 = add i32 %127, %43, !dbg !41
  %129 = add i32 %124, %25, !dbg !40
  %130 = add i32 %129, %43, !dbg !41
  %131 = add i32 %124, %26, !dbg !40
  %132 = add i32 %131, %43, !dbg !41
  %133 = sext i32 %126 to i64, !dbg !42
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !42
  %135 = sext i32 %128 to i64, !dbg !42
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !42
  %137 = sext i32 %130 to i64, !dbg !42
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !42
  %139 = sext i32 %132 to i64, !dbg !42
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !42
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %134, i1 %62) #2, !dbg !43
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !43
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !43
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !43
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !43
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %62) #2, !dbg !43
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !43
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !43
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !43
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !43
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 %62) #2, !dbg !43
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !43
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !43
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !43
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !43
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 %62) #2, !dbg !43
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !43
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !43
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !43
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !43
  %161 = add i32 %45, 23040, !dbg !44
  %162 = add i32 %161, %23, !dbg !45
  %163 = add i32 %162, %43, !dbg !46
  %164 = add i32 %161, %24, !dbg !45
  %165 = add i32 %164, %43, !dbg !46
  %166 = add i32 %161, %25, !dbg !45
  %167 = add i32 %166, %43, !dbg !46
  %168 = add i32 %161, %26, !dbg !45
  %169 = add i32 %168, %43, !dbg !46
  %170 = sext i32 %163 to i64, !dbg !47
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !47
  %172 = sext i32 %165 to i64, !dbg !47
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !47
  %174 = sext i32 %167 to i64, !dbg !47
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !47
  %176 = sext i32 %169 to i64, !dbg !47
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !47
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 %62) #2, !dbg !48
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !48
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !48
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !48
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !48
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %173, i1 %62) #2, !dbg !48
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !48
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !48
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !48
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !48
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %62) #2, !dbg !48
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !48
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !48
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !48
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !48
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %177, i1 %62) #2, !dbg !48
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !48
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !48
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !48
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !48
  %198 = add i32 %45, 23808, !dbg !49
  %199 = add i32 %198, %23, !dbg !50
  %200 = add i32 %199, %43, !dbg !51
  %201 = add i32 %198, %24, !dbg !50
  %202 = add i32 %201, %43, !dbg !51
  %203 = add i32 %198, %25, !dbg !50
  %204 = add i32 %203, %43, !dbg !51
  %205 = add i32 %198, %26, !dbg !50
  %206 = add i32 %205, %43, !dbg !51
  %207 = sext i32 %200 to i64, !dbg !52
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !52
  %209 = sext i32 %202 to i64, !dbg !52
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !52
  %211 = sext i32 %204 to i64, !dbg !52
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !52
  %213 = sext i32 %206 to i64, !dbg !52
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !52
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %208, i1 %62) #2, !dbg !53
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !53
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !53
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !53
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !53
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %210, i1 %62) #2, !dbg !53
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !53
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !53
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !53
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !53
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %212, i1 %62) #2, !dbg !53
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !53
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !53
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !53
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !53
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %214, i1 %62) #2, !dbg !53
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !53
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !53
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !53
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !53
  %235 = add i32 %45, 24576, !dbg !54
  %236 = add i32 %235, %23, !dbg !55
  %237 = add i32 %236, %43, !dbg !56
  %238 = add i32 %235, %24, !dbg !55
  %239 = add i32 %238, %43, !dbg !56
  %240 = add i32 %235, %25, !dbg !55
  %241 = add i32 %240, %43, !dbg !56
  %242 = add i32 %235, %26, !dbg !55
  %243 = add i32 %242, %43, !dbg !56
  %244 = sext i32 %237 to i64, !dbg !57
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !57
  %246 = sext i32 %239 to i64, !dbg !57
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !57
  %248 = sext i32 %241 to i64, !dbg !57
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !57
  %250 = sext i32 %243 to i64, !dbg !57
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !57
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %245, i1 %62) #2, !dbg !58
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !58
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !58
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !58
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !58
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %247, i1 %62) #2, !dbg !58
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !58
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !58
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !58
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !58
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %249, i1 %62) #2, !dbg !58
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !58
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !58
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !58
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !58
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %251, i1 %62) #2, !dbg !58
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !58
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !58
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !58
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !58
  %272 = add i32 %45, 46080, !dbg !59
  %273 = add i32 %272, %23, !dbg !60
  %274 = add i32 %273, %43, !dbg !61
  %275 = add i32 %272, %24, !dbg !60
  %276 = add i32 %275, %43, !dbg !61
  %277 = add i32 %272, %25, !dbg !60
  %278 = add i32 %277, %43, !dbg !61
  %279 = add i32 %272, %26, !dbg !60
  %280 = add i32 %279, %43, !dbg !61
  %281 = sext i32 %274 to i64, !dbg !62
  %282 = getelementptr float, ptr addrspace(1) %0, i64 %281, !dbg !62
  %283 = sext i32 %276 to i64, !dbg !62
  %284 = getelementptr float, ptr addrspace(1) %0, i64 %283, !dbg !62
  %285 = sext i32 %278 to i64, !dbg !62
  %286 = getelementptr float, ptr addrspace(1) %0, i64 %285, !dbg !62
  %287 = sext i32 %280 to i64, !dbg !62
  %288 = getelementptr float, ptr addrspace(1) %0, i64 %287, !dbg !62
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %282, i1 %62) #2, !dbg !63
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !63
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !63
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !63
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !63
  %294 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %284, i1 %62) #2, !dbg !63
  %295 = extractvalue { i32, i32, i32, i32 } %294, 0, !dbg !63
  %296 = extractvalue { i32, i32, i32, i32 } %294, 1, !dbg !63
  %297 = extractvalue { i32, i32, i32, i32 } %294, 2, !dbg !63
  %298 = extractvalue { i32, i32, i32, i32 } %294, 3, !dbg !63
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %286, i1 %62) #2, !dbg !63
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !63
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !63
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !63
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !63
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %288, i1 %62) #2, !dbg !63
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !63
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !63
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !63
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !63
  %309 = add i32 %45, 46848, !dbg !64
  %310 = add i32 %309, %23, !dbg !65
  %311 = add i32 %310, %43, !dbg !66
  %312 = add i32 %309, %24, !dbg !65
  %313 = add i32 %312, %43, !dbg !66
  %314 = add i32 %309, %25, !dbg !65
  %315 = add i32 %314, %43, !dbg !66
  %316 = add i32 %309, %26, !dbg !65
  %317 = add i32 %316, %43, !dbg !66
  %318 = sext i32 %311 to i64, !dbg !67
  %319 = getelementptr float, ptr addrspace(1) %0, i64 %318, !dbg !67
  %320 = sext i32 %313 to i64, !dbg !67
  %321 = getelementptr float, ptr addrspace(1) %0, i64 %320, !dbg !67
  %322 = sext i32 %315 to i64, !dbg !67
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !67
  %324 = sext i32 %317 to i64, !dbg !67
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !67
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %319, i1 %62) #2, !dbg !68
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !68
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !68
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !68
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !68
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %321, i1 %62) #2, !dbg !68
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !68
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !68
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !68
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !68
  %336 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %323, i1 %62) #2, !dbg !68
  %337 = extractvalue { i32, i32, i32, i32 } %336, 0, !dbg !68
  %338 = extractvalue { i32, i32, i32, i32 } %336, 1, !dbg !68
  %339 = extractvalue { i32, i32, i32, i32 } %336, 2, !dbg !68
  %340 = extractvalue { i32, i32, i32, i32 } %336, 3, !dbg !68
  %341 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %325, i1 %62) #2, !dbg !68
  %342 = extractvalue { i32, i32, i32, i32 } %341, 0, !dbg !68
  %343 = extractvalue { i32, i32, i32, i32 } %341, 1, !dbg !68
  %344 = extractvalue { i32, i32, i32, i32 } %341, 2, !dbg !68
  %345 = extractvalue { i32, i32, i32, i32 } %341, 3, !dbg !68
  %346 = add i32 %45, 47616, !dbg !69
  %347 = add i32 %346, %23, !dbg !70
  %348 = add i32 %347, %43, !dbg !71
  %349 = add i32 %346, %24, !dbg !70
  %350 = add i32 %349, %43, !dbg !71
  %351 = add i32 %346, %25, !dbg !70
  %352 = add i32 %351, %43, !dbg !71
  %353 = add i32 %346, %26, !dbg !70
  %354 = add i32 %353, %43, !dbg !71
  %355 = sext i32 %348 to i64, !dbg !72
  %356 = getelementptr float, ptr addrspace(1) %0, i64 %355, !dbg !72
  %357 = sext i32 %350 to i64, !dbg !72
  %358 = getelementptr float, ptr addrspace(1) %0, i64 %357, !dbg !72
  %359 = sext i32 %352 to i64, !dbg !72
  %360 = getelementptr float, ptr addrspace(1) %0, i64 %359, !dbg !72
  %361 = sext i32 %354 to i64, !dbg !72
  %362 = getelementptr float, ptr addrspace(1) %0, i64 %361, !dbg !72
  %363 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %356, i1 %62) #2, !dbg !73
  %364 = extractvalue { i32, i32, i32, i32 } %363, 0, !dbg !73
  %365 = extractvalue { i32, i32, i32, i32 } %363, 1, !dbg !73
  %366 = extractvalue { i32, i32, i32, i32 } %363, 2, !dbg !73
  %367 = extractvalue { i32, i32, i32, i32 } %363, 3, !dbg !73
  %368 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %358, i1 %62) #2, !dbg !73
  %369 = extractvalue { i32, i32, i32, i32 } %368, 0, !dbg !73
  %370 = extractvalue { i32, i32, i32, i32 } %368, 1, !dbg !73
  %371 = extractvalue { i32, i32, i32, i32 } %368, 2, !dbg !73
  %372 = extractvalue { i32, i32, i32, i32 } %368, 3, !dbg !73
  %373 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %360, i1 %62) #2, !dbg !73
  %374 = extractvalue { i32, i32, i32, i32 } %373, 0, !dbg !73
  %375 = extractvalue { i32, i32, i32, i32 } %373, 1, !dbg !73
  %376 = extractvalue { i32, i32, i32, i32 } %373, 2, !dbg !73
  %377 = extractvalue { i32, i32, i32, i32 } %373, 3, !dbg !73
  %378 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %362, i1 %62) #2, !dbg !73
  %379 = extractvalue { i32, i32, i32, i32 } %378, 0, !dbg !73
  %380 = extractvalue { i32, i32, i32, i32 } %378, 1, !dbg !73
  %381 = extractvalue { i32, i32, i32, i32 } %378, 2, !dbg !73
  %382 = extractvalue { i32, i32, i32, i32 } %378, 3, !dbg !73
  %383 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !33
  %384 = insertelement <4 x i32> %383, i32 %69, i64 1, !dbg !33
  %385 = insertelement <4 x i32> %384, i32 %70, i64 2, !dbg !33
  %386 = insertelement <4 x i32> %385, i32 %71, i64 3, !dbg !33
  %387 = bitcast <4 x i32> %386 to <4 x float>, !dbg !33
  %388 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !38
  %389 = insertelement <4 x i32> %388, i32 %106, i64 1, !dbg !38
  %390 = insertelement <4 x i32> %389, i32 %107, i64 2, !dbg !38
  %391 = insertelement <4 x i32> %390, i32 %108, i64 3, !dbg !38
  %392 = bitcast <4 x i32> %391 to <4 x float>, !dbg !38
  %393 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !43
  %394 = insertelement <4 x i32> %393, i32 %143, i64 1, !dbg !43
  %395 = insertelement <4 x i32> %394, i32 %144, i64 2, !dbg !43
  %396 = insertelement <4 x i32> %395, i32 %145, i64 3, !dbg !43
  %397 = bitcast <4 x i32> %396 to <4 x float>, !dbg !43
  %398 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !48
  %399 = insertelement <4 x i32> %398, i32 %180, i64 1, !dbg !48
  %400 = insertelement <4 x i32> %399, i32 %181, i64 2, !dbg !48
  %401 = insertelement <4 x i32> %400, i32 %182, i64 3, !dbg !48
  %402 = bitcast <4 x i32> %401 to <4 x float>, !dbg !48
  %403 = insertelement <4 x i32> poison, i32 %216, i64 0, !dbg !53
  %404 = insertelement <4 x i32> %403, i32 %217, i64 1, !dbg !53
  %405 = insertelement <4 x i32> %404, i32 %218, i64 2, !dbg !53
  %406 = insertelement <4 x i32> %405, i32 %219, i64 3, !dbg !53
  %407 = bitcast <4 x i32> %406 to <4 x float>, !dbg !53
  %408 = insertelement <4 x i32> poison, i32 %253, i64 0, !dbg !58
  %409 = insertelement <4 x i32> %408, i32 %254, i64 1, !dbg !58
  %410 = insertelement <4 x i32> %409, i32 %255, i64 2, !dbg !58
  %411 = insertelement <4 x i32> %410, i32 %256, i64 3, !dbg !58
  %412 = bitcast <4 x i32> %411 to <4 x float>, !dbg !58
  %413 = insertelement <4 x i32> poison, i32 %290, i64 0, !dbg !63
  %414 = insertelement <4 x i32> %413, i32 %291, i64 1, !dbg !63
  %415 = insertelement <4 x i32> %414, i32 %292, i64 2, !dbg !63
  %416 = insertelement <4 x i32> %415, i32 %293, i64 3, !dbg !63
  %417 = bitcast <4 x i32> %416 to <4 x float>, !dbg !63
  %418 = insertelement <4 x i32> poison, i32 %327, i64 0, !dbg !68
  %419 = insertelement <4 x i32> %418, i32 %328, i64 1, !dbg !68
  %420 = insertelement <4 x i32> %419, i32 %329, i64 2, !dbg !68
  %421 = insertelement <4 x i32> %420, i32 %330, i64 3, !dbg !68
  %422 = bitcast <4 x i32> %421 to <4 x float>, !dbg !68
  %423 = insertelement <4 x i32> poison, i32 %364, i64 0, !dbg !73
  %424 = insertelement <4 x i32> %423, i32 %365, i64 1, !dbg !73
  %425 = insertelement <4 x i32> %424, i32 %366, i64 2, !dbg !73
  %426 = insertelement <4 x i32> %425, i32 %367, i64 3, !dbg !73
  %427 = bitcast <4 x i32> %426 to <4 x float>, !dbg !73
  %428 = fcmp ogt <4 x float> %392, %387, !dbg !74
  %429 = fcmp uno <4 x float> %392, zeroinitializer, !dbg !78
  %430 = or <4 x i1> %428, %429, !dbg !79
  %.v = select <4 x i1> %430, <4 x i32> %391, <4 x i32> %386, !dbg !80
  %431 = bitcast <4 x i32> %.v to <4 x float>, !dbg !80
  %432 = fcmp olt <4 x float> %431, %397, !dbg !81
  %433 = fcmp uno <4 x float> %397, zeroinitializer, !dbg !83
  %434 = or <4 x i1> %432, %433, !dbg !84
  %.v34 = select <4 x i1> %434, <4 x i32> %396, <4 x i32> %.v, !dbg !85
  %435 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !85
  %436 = fcmp olt <4 x float> %435, %402, !dbg !86
  %437 = fcmp uno <4 x float> %402, zeroinitializer, !dbg !88
  %438 = or <4 x i1> %436, %437, !dbg !89
  %.v35 = select <4 x i1> %438, <4 x i32> %401, <4 x i32> %.v34, !dbg !90
  %439 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !90
  %440 = fcmp olt <4 x float> %439, %407, !dbg !91
  %441 = fcmp uno <4 x float> %407, zeroinitializer, !dbg !93
  %442 = or <4 x i1> %440, %441, !dbg !94
  %.v36 = select <4 x i1> %442, <4 x i32> %406, <4 x i32> %.v35, !dbg !95
  %443 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !95
  %444 = fcmp olt <4 x float> %443, %412, !dbg !96
  %445 = fcmp uno <4 x float> %412, zeroinitializer, !dbg !98
  %446 = or <4 x i1> %444, %445, !dbg !99
  %.v37 = select <4 x i1> %446, <4 x i32> %411, <4 x i32> %.v36, !dbg !100
  %447 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !100
  %448 = fcmp olt <4 x float> %447, %417, !dbg !101
  %449 = fcmp uno <4 x float> %417, zeroinitializer, !dbg !103
  %450 = or <4 x i1> %448, %449, !dbg !104
  %.v38 = select <4 x i1> %450, <4 x i32> %416, <4 x i32> %.v37, !dbg !105
  %451 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !105
  %452 = fcmp olt <4 x float> %451, %422, !dbg !106
  %453 = fcmp uno <4 x float> %422, zeroinitializer, !dbg !108
  %454 = or <4 x i1> %452, %453, !dbg !109
  %.v39 = select <4 x i1> %454, <4 x i32> %421, <4 x i32> %.v38, !dbg !110
  %455 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !110
  %456 = fcmp olt <4 x float> %455, %427, !dbg !111
  %457 = bitcast i32 %364 to float, !dbg !113
  %458 = fcmp uno float %457, 0.000000e+00, !dbg !113
  %459 = bitcast i32 %365 to float, !dbg !113
  %460 = fcmp uno float %459, 0.000000e+00, !dbg !113
  %461 = bitcast i32 %366 to float, !dbg !113
  %462 = fcmp uno float %461, 0.000000e+00, !dbg !113
  %463 = bitcast i32 %367 to float, !dbg !113
  %464 = fcmp uno float %463, 0.000000e+00, !dbg !113
  %465 = extractelement <4 x i1> %456, i64 0, !dbg !114
  %466 = or i1 %465, %458, !dbg !114
  %467 = extractelement <4 x i1> %456, i64 1, !dbg !114
  %468 = or i1 %467, %460, !dbg !114
  %469 = extractelement <4 x i1> %456, i64 2, !dbg !114
  %470 = or i1 %469, %462, !dbg !114
  %471 = extractelement <4 x i1> %456, i64 3, !dbg !114
  %472 = or i1 %471, %464, !dbg !114
  %473 = zext <4 x i1> %428 to <4 x i8>, !dbg !115
  %474 = select <4 x i1> %432, <4 x i8> splat (i8 2), <4 x i8> %473, !dbg !116
  %475 = select <4 x i1> %436, <4 x i8> splat (i8 3), <4 x i8> %474, !dbg !117
  %476 = select <4 x i1> %440, <4 x i8> splat (i8 4), <4 x i8> %475, !dbg !118
  %477 = select <4 x i1> %444, <4 x i8> splat (i8 5), <4 x i8> %476, !dbg !119
  %478 = select <4 x i1> %448, <4 x i8> splat (i8 6), <4 x i8> %477, !dbg !120
  %479 = select <4 x i1> %452, <4 x i8> splat (i8 7), <4 x i8> %478, !dbg !121
  %480 = select <4 x i1> %456, <4 x i8> splat (i8 8), <4 x i8> %479, !dbg !122
  %481 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !33
  %482 = insertelement <4 x i32> %481, i32 %74, i64 1, !dbg !33
  %483 = insertelement <4 x i32> %482, i32 %75, i64 2, !dbg !33
  %484 = insertelement <4 x i32> %483, i32 %76, i64 3, !dbg !33
  %485 = bitcast <4 x i32> %484 to <4 x float>, !dbg !33
  %486 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !38
  %487 = insertelement <4 x i32> %486, i32 %111, i64 1, !dbg !38
  %488 = insertelement <4 x i32> %487, i32 %112, i64 2, !dbg !38
  %489 = insertelement <4 x i32> %488, i32 %113, i64 3, !dbg !38
  %490 = bitcast <4 x i32> %489 to <4 x float>, !dbg !38
  %491 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !43
  %492 = insertelement <4 x i32> %491, i32 %148, i64 1, !dbg !43
  %493 = insertelement <4 x i32> %492, i32 %149, i64 2, !dbg !43
  %494 = insertelement <4 x i32> %493, i32 %150, i64 3, !dbg !43
  %495 = bitcast <4 x i32> %494 to <4 x float>, !dbg !43
  %496 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !48
  %497 = insertelement <4 x i32> %496, i32 %185, i64 1, !dbg !48
  %498 = insertelement <4 x i32> %497, i32 %186, i64 2, !dbg !48
  %499 = insertelement <4 x i32> %498, i32 %187, i64 3, !dbg !48
  %500 = bitcast <4 x i32> %499 to <4 x float>, !dbg !48
  %501 = insertelement <4 x i32> poison, i32 %221, i64 0, !dbg !53
  %502 = insertelement <4 x i32> %501, i32 %222, i64 1, !dbg !53
  %503 = insertelement <4 x i32> %502, i32 %223, i64 2, !dbg !53
  %504 = insertelement <4 x i32> %503, i32 %224, i64 3, !dbg !53
  %505 = bitcast <4 x i32> %504 to <4 x float>, !dbg !53
  %506 = insertelement <4 x i32> poison, i32 %258, i64 0, !dbg !58
  %507 = insertelement <4 x i32> %506, i32 %259, i64 1, !dbg !58
  %508 = insertelement <4 x i32> %507, i32 %260, i64 2, !dbg !58
  %509 = insertelement <4 x i32> %508, i32 %261, i64 3, !dbg !58
  %510 = bitcast <4 x i32> %509 to <4 x float>, !dbg !58
  %511 = insertelement <4 x i32> poison, i32 %295, i64 0, !dbg !63
  %512 = insertelement <4 x i32> %511, i32 %296, i64 1, !dbg !63
  %513 = insertelement <4 x i32> %512, i32 %297, i64 2, !dbg !63
  %514 = insertelement <4 x i32> %513, i32 %298, i64 3, !dbg !63
  %515 = bitcast <4 x i32> %514 to <4 x float>, !dbg !63
  %516 = insertelement <4 x i32> poison, i32 %332, i64 0, !dbg !68
  %517 = insertelement <4 x i32> %516, i32 %333, i64 1, !dbg !68
  %518 = insertelement <4 x i32> %517, i32 %334, i64 2, !dbg !68
  %519 = insertelement <4 x i32> %518, i32 %335, i64 3, !dbg !68
  %520 = bitcast <4 x i32> %519 to <4 x float>, !dbg !68
  %521 = insertelement <4 x i32> poison, i32 %369, i64 0, !dbg !73
  %522 = insertelement <4 x i32> %521, i32 %370, i64 1, !dbg !73
  %523 = insertelement <4 x i32> %522, i32 %371, i64 2, !dbg !73
  %524 = insertelement <4 x i32> %523, i32 %372, i64 3, !dbg !73
  %525 = bitcast <4 x i32> %524 to <4 x float>, !dbg !73
  %526 = fcmp ogt <4 x float> %490, %485, !dbg !74
  %527 = fcmp uno <4 x float> %490, zeroinitializer, !dbg !78
  %528 = or <4 x i1> %526, %527, !dbg !79
  %.v40 = select <4 x i1> %528, <4 x i32> %489, <4 x i32> %484, !dbg !80
  %529 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !80
  %530 = fcmp olt <4 x float> %529, %495, !dbg !81
  %531 = fcmp uno <4 x float> %495, zeroinitializer, !dbg !83
  %532 = or <4 x i1> %530, %531, !dbg !84
  %.v41 = select <4 x i1> %532, <4 x i32> %494, <4 x i32> %.v40, !dbg !85
  %533 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !85
  %534 = fcmp olt <4 x float> %533, %500, !dbg !86
  %535 = fcmp uno <4 x float> %500, zeroinitializer, !dbg !88
  %536 = or <4 x i1> %534, %535, !dbg !89
  %.v42 = select <4 x i1> %536, <4 x i32> %499, <4 x i32> %.v41, !dbg !90
  %537 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !90
  %538 = fcmp olt <4 x float> %537, %505, !dbg !91
  %539 = fcmp uno <4 x float> %505, zeroinitializer, !dbg !93
  %540 = or <4 x i1> %538, %539, !dbg !94
  %.v43 = select <4 x i1> %540, <4 x i32> %504, <4 x i32> %.v42, !dbg !95
  %541 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !95
  %542 = fcmp olt <4 x float> %541, %510, !dbg !96
  %543 = fcmp uno <4 x float> %510, zeroinitializer, !dbg !98
  %544 = or <4 x i1> %542, %543, !dbg !99
  %.v44 = select <4 x i1> %544, <4 x i32> %509, <4 x i32> %.v43, !dbg !100
  %545 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !100
  %546 = fcmp olt <4 x float> %545, %515, !dbg !101
  %547 = fcmp uno <4 x float> %515, zeroinitializer, !dbg !103
  %548 = or <4 x i1> %546, %547, !dbg !104
  %.v45 = select <4 x i1> %548, <4 x i32> %514, <4 x i32> %.v44, !dbg !105
  %549 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !105
  %550 = fcmp olt <4 x float> %549, %520, !dbg !106
  %551 = fcmp uno <4 x float> %520, zeroinitializer, !dbg !108
  %552 = or <4 x i1> %550, %551, !dbg !109
  %.v46 = select <4 x i1> %552, <4 x i32> %519, <4 x i32> %.v45, !dbg !110
  %553 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !110
  %554 = fcmp olt <4 x float> %553, %525, !dbg !111
  %555 = bitcast i32 %369 to float, !dbg !113
  %556 = fcmp uno float %555, 0.000000e+00, !dbg !113
  %557 = bitcast i32 %370 to float, !dbg !113
  %558 = fcmp uno float %557, 0.000000e+00, !dbg !113
  %559 = bitcast i32 %371 to float, !dbg !113
  %560 = fcmp uno float %559, 0.000000e+00, !dbg !113
  %561 = bitcast i32 %372 to float, !dbg !113
  %562 = fcmp uno float %561, 0.000000e+00, !dbg !113
  %563 = extractelement <4 x i1> %554, i64 0, !dbg !114
  %564 = or i1 %563, %556, !dbg !114
  %565 = extractelement <4 x i1> %554, i64 1, !dbg !114
  %566 = or i1 %565, %558, !dbg !114
  %567 = extractelement <4 x i1> %554, i64 2, !dbg !114
  %568 = or i1 %567, %560, !dbg !114
  %569 = extractelement <4 x i1> %554, i64 3, !dbg !114
  %570 = or i1 %569, %562, !dbg !114
  %571 = zext <4 x i1> %526 to <4 x i8>, !dbg !115
  %572 = select <4 x i1> %530, <4 x i8> splat (i8 2), <4 x i8> %571, !dbg !116
  %573 = select <4 x i1> %534, <4 x i8> splat (i8 3), <4 x i8> %572, !dbg !117
  %574 = select <4 x i1> %538, <4 x i8> splat (i8 4), <4 x i8> %573, !dbg !118
  %575 = select <4 x i1> %542, <4 x i8> splat (i8 5), <4 x i8> %574, !dbg !119
  %576 = select <4 x i1> %546, <4 x i8> splat (i8 6), <4 x i8> %575, !dbg !120
  %577 = select <4 x i1> %550, <4 x i8> splat (i8 7), <4 x i8> %576, !dbg !121
  %578 = select <4 x i1> %554, <4 x i8> splat (i8 8), <4 x i8> %577, !dbg !122
  %579 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !33
  %580 = insertelement <4 x i32> %579, i32 %79, i64 1, !dbg !33
  %581 = insertelement <4 x i32> %580, i32 %80, i64 2, !dbg !33
  %582 = insertelement <4 x i32> %581, i32 %81, i64 3, !dbg !33
  %583 = bitcast <4 x i32> %582 to <4 x float>, !dbg !33
  %584 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !38
  %585 = insertelement <4 x i32> %584, i32 %116, i64 1, !dbg !38
  %586 = insertelement <4 x i32> %585, i32 %117, i64 2, !dbg !38
  %587 = insertelement <4 x i32> %586, i32 %118, i64 3, !dbg !38
  %588 = bitcast <4 x i32> %587 to <4 x float>, !dbg !38
  %589 = insertelement <4 x i32> poison, i32 %152, i64 0, !dbg !43
  %590 = insertelement <4 x i32> %589, i32 %153, i64 1, !dbg !43
  %591 = insertelement <4 x i32> %590, i32 %154, i64 2, !dbg !43
  %592 = insertelement <4 x i32> %591, i32 %155, i64 3, !dbg !43
  %593 = bitcast <4 x i32> %592 to <4 x float>, !dbg !43
  %594 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !48
  %595 = insertelement <4 x i32> %594, i32 %190, i64 1, !dbg !48
  %596 = insertelement <4 x i32> %595, i32 %191, i64 2, !dbg !48
  %597 = insertelement <4 x i32> %596, i32 %192, i64 3, !dbg !48
  %598 = bitcast <4 x i32> %597 to <4 x float>, !dbg !48
  %599 = insertelement <4 x i32> poison, i32 %226, i64 0, !dbg !53
  %600 = insertelement <4 x i32> %599, i32 %227, i64 1, !dbg !53
  %601 = insertelement <4 x i32> %600, i32 %228, i64 2, !dbg !53
  %602 = insertelement <4 x i32> %601, i32 %229, i64 3, !dbg !53
  %603 = bitcast <4 x i32> %602 to <4 x float>, !dbg !53
  %604 = insertelement <4 x i32> poison, i32 %263, i64 0, !dbg !58
  %605 = insertelement <4 x i32> %604, i32 %264, i64 1, !dbg !58
  %606 = insertelement <4 x i32> %605, i32 %265, i64 2, !dbg !58
  %607 = insertelement <4 x i32> %606, i32 %266, i64 3, !dbg !58
  %608 = bitcast <4 x i32> %607 to <4 x float>, !dbg !58
  %609 = insertelement <4 x i32> poison, i32 %300, i64 0, !dbg !63
  %610 = insertelement <4 x i32> %609, i32 %301, i64 1, !dbg !63
  %611 = insertelement <4 x i32> %610, i32 %302, i64 2, !dbg !63
  %612 = insertelement <4 x i32> %611, i32 %303, i64 3, !dbg !63
  %613 = bitcast <4 x i32> %612 to <4 x float>, !dbg !63
  %614 = insertelement <4 x i32> poison, i32 %337, i64 0, !dbg !68
  %615 = insertelement <4 x i32> %614, i32 %338, i64 1, !dbg !68
  %616 = insertelement <4 x i32> %615, i32 %339, i64 2, !dbg !68
  %617 = insertelement <4 x i32> %616, i32 %340, i64 3, !dbg !68
  %618 = bitcast <4 x i32> %617 to <4 x float>, !dbg !68
  %619 = insertelement <4 x i32> poison, i32 %374, i64 0, !dbg !73
  %620 = insertelement <4 x i32> %619, i32 %375, i64 1, !dbg !73
  %621 = insertelement <4 x i32> %620, i32 %376, i64 2, !dbg !73
  %622 = insertelement <4 x i32> %621, i32 %377, i64 3, !dbg !73
  %623 = bitcast <4 x i32> %622 to <4 x float>, !dbg !73
  %624 = fcmp ogt <4 x float> %588, %583, !dbg !74
  %625 = fcmp uno <4 x float> %588, zeroinitializer, !dbg !78
  %626 = or <4 x i1> %624, %625, !dbg !79
  %.v47 = select <4 x i1> %626, <4 x i32> %587, <4 x i32> %582, !dbg !80
  %627 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !80
  %628 = fcmp olt <4 x float> %627, %593, !dbg !81
  %629 = fcmp uno <4 x float> %593, zeroinitializer, !dbg !83
  %630 = or <4 x i1> %628, %629, !dbg !84
  %.v48 = select <4 x i1> %630, <4 x i32> %592, <4 x i32> %.v47, !dbg !85
  %631 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !85
  %632 = fcmp olt <4 x float> %631, %598, !dbg !86
  %633 = fcmp uno <4 x float> %598, zeroinitializer, !dbg !88
  %634 = or <4 x i1> %632, %633, !dbg !89
  %.v49 = select <4 x i1> %634, <4 x i32> %597, <4 x i32> %.v48, !dbg !90
  %635 = bitcast <4 x i32> %.v49 to <4 x float>, !dbg !90
  %636 = fcmp olt <4 x float> %635, %603, !dbg !91
  %637 = fcmp uno <4 x float> %603, zeroinitializer, !dbg !93
  %638 = or <4 x i1> %636, %637, !dbg !94
  %.v50 = select <4 x i1> %638, <4 x i32> %602, <4 x i32> %.v49, !dbg !95
  %639 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !95
  %640 = fcmp olt <4 x float> %639, %608, !dbg !96
  %641 = fcmp uno <4 x float> %608, zeroinitializer, !dbg !98
  %642 = or <4 x i1> %640, %641, !dbg !99
  %.v51 = select <4 x i1> %642, <4 x i32> %607, <4 x i32> %.v50, !dbg !100
  %643 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !100
  %644 = fcmp olt <4 x float> %643, %613, !dbg !101
  %645 = fcmp uno <4 x float> %613, zeroinitializer, !dbg !103
  %646 = or <4 x i1> %644, %645, !dbg !104
  %.v52 = select <4 x i1> %646, <4 x i32> %612, <4 x i32> %.v51, !dbg !105
  %647 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !105
  %648 = fcmp olt <4 x float> %647, %618, !dbg !106
  %649 = fcmp uno <4 x float> %618, zeroinitializer, !dbg !108
  %650 = or <4 x i1> %648, %649, !dbg !109
  %.v53 = select <4 x i1> %650, <4 x i32> %617, <4 x i32> %.v52, !dbg !110
  %651 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !110
  %652 = fcmp olt <4 x float> %651, %623, !dbg !111
  %653 = bitcast i32 %374 to float, !dbg !113
  %654 = fcmp uno float %653, 0.000000e+00, !dbg !113
  %655 = bitcast i32 %375 to float, !dbg !113
  %656 = fcmp uno float %655, 0.000000e+00, !dbg !113
  %657 = bitcast i32 %376 to float, !dbg !113
  %658 = fcmp uno float %657, 0.000000e+00, !dbg !113
  %659 = bitcast i32 %377 to float, !dbg !113
  %660 = fcmp uno float %659, 0.000000e+00, !dbg !113
  %661 = extractelement <4 x i1> %652, i64 0, !dbg !114
  %662 = or i1 %661, %654, !dbg !114
  %663 = extractelement <4 x i1> %652, i64 1, !dbg !114
  %664 = or i1 %663, %656, !dbg !114
  %665 = extractelement <4 x i1> %652, i64 2, !dbg !114
  %666 = or i1 %665, %658, !dbg !114
  %667 = extractelement <4 x i1> %652, i64 3, !dbg !114
  %668 = or i1 %667, %660, !dbg !114
  %669 = zext <4 x i1> %624 to <4 x i8>, !dbg !115
  %670 = select <4 x i1> %628, <4 x i8> splat (i8 2), <4 x i8> %669, !dbg !116
  %671 = select <4 x i1> %632, <4 x i8> splat (i8 3), <4 x i8> %670, !dbg !117
  %672 = select <4 x i1> %636, <4 x i8> splat (i8 4), <4 x i8> %671, !dbg !118
  %673 = select <4 x i1> %640, <4 x i8> splat (i8 5), <4 x i8> %672, !dbg !119
  %674 = select <4 x i1> %644, <4 x i8> splat (i8 6), <4 x i8> %673, !dbg !120
  %675 = select <4 x i1> %648, <4 x i8> splat (i8 7), <4 x i8> %674, !dbg !121
  %676 = select <4 x i1> %652, <4 x i8> splat (i8 8), <4 x i8> %675, !dbg !122
  %677 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !33
  %678 = insertelement <4 x i32> %677, i32 %84, i64 1, !dbg !33
  %679 = insertelement <4 x i32> %678, i32 %85, i64 2, !dbg !33
  %680 = insertelement <4 x i32> %679, i32 %86, i64 3, !dbg !33
  %681 = bitcast <4 x i32> %680 to <4 x float>, !dbg !33
  %682 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !38
  %683 = insertelement <4 x i32> %682, i32 %121, i64 1, !dbg !38
  %684 = insertelement <4 x i32> %683, i32 %122, i64 2, !dbg !38
  %685 = insertelement <4 x i32> %684, i32 %123, i64 3, !dbg !38
  %686 = bitcast <4 x i32> %685 to <4 x float>, !dbg !38
  %687 = insertelement <4 x i32> poison, i32 %157, i64 0, !dbg !43
  %688 = insertelement <4 x i32> %687, i32 %158, i64 1, !dbg !43
  %689 = insertelement <4 x i32> %688, i32 %159, i64 2, !dbg !43
  %690 = insertelement <4 x i32> %689, i32 %160, i64 3, !dbg !43
  %691 = bitcast <4 x i32> %690 to <4 x float>, !dbg !43
  %692 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !48
  %693 = insertelement <4 x i32> %692, i32 %195, i64 1, !dbg !48
  %694 = insertelement <4 x i32> %693, i32 %196, i64 2, !dbg !48
  %695 = insertelement <4 x i32> %694, i32 %197, i64 3, !dbg !48
  %696 = bitcast <4 x i32> %695 to <4 x float>, !dbg !48
  %697 = insertelement <4 x i32> poison, i32 %231, i64 0, !dbg !53
  %698 = insertelement <4 x i32> %697, i32 %232, i64 1, !dbg !53
  %699 = insertelement <4 x i32> %698, i32 %233, i64 2, !dbg !53
  %700 = insertelement <4 x i32> %699, i32 %234, i64 3, !dbg !53
  %701 = bitcast <4 x i32> %700 to <4 x float>, !dbg !53
  %702 = insertelement <4 x i32> poison, i32 %268, i64 0, !dbg !58
  %703 = insertelement <4 x i32> %702, i32 %269, i64 1, !dbg !58
  %704 = insertelement <4 x i32> %703, i32 %270, i64 2, !dbg !58
  %705 = insertelement <4 x i32> %704, i32 %271, i64 3, !dbg !58
  %706 = bitcast <4 x i32> %705 to <4 x float>, !dbg !58
  %707 = insertelement <4 x i32> poison, i32 %305, i64 0, !dbg !63
  %708 = insertelement <4 x i32> %707, i32 %306, i64 1, !dbg !63
  %709 = insertelement <4 x i32> %708, i32 %307, i64 2, !dbg !63
  %710 = insertelement <4 x i32> %709, i32 %308, i64 3, !dbg !63
  %711 = bitcast <4 x i32> %710 to <4 x float>, !dbg !63
  %712 = insertelement <4 x i32> poison, i32 %342, i64 0, !dbg !68
  %713 = insertelement <4 x i32> %712, i32 %343, i64 1, !dbg !68
  %714 = insertelement <4 x i32> %713, i32 %344, i64 2, !dbg !68
  %715 = insertelement <4 x i32> %714, i32 %345, i64 3, !dbg !68
  %716 = bitcast <4 x i32> %715 to <4 x float>, !dbg !68
  %717 = insertelement <4 x i32> poison, i32 %379, i64 0, !dbg !73
  %718 = insertelement <4 x i32> %717, i32 %380, i64 1, !dbg !73
  %719 = insertelement <4 x i32> %718, i32 %381, i64 2, !dbg !73
  %720 = insertelement <4 x i32> %719, i32 %382, i64 3, !dbg !73
  %721 = bitcast <4 x i32> %720 to <4 x float>, !dbg !73
  %722 = fcmp ogt <4 x float> %686, %681, !dbg !74
  %723 = fcmp uno <4 x float> %686, zeroinitializer, !dbg !78
  %724 = or <4 x i1> %722, %723, !dbg !79
  %.v54 = select <4 x i1> %724, <4 x i32> %685, <4 x i32> %680, !dbg !80
  %725 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !80
  %726 = fcmp olt <4 x float> %725, %691, !dbg !81
  %727 = fcmp uno <4 x float> %691, zeroinitializer, !dbg !83
  %728 = or <4 x i1> %726, %727, !dbg !84
  %.v55 = select <4 x i1> %728, <4 x i32> %690, <4 x i32> %.v54, !dbg !85
  %729 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !85
  %730 = fcmp olt <4 x float> %729, %696, !dbg !86
  %731 = fcmp uno <4 x float> %696, zeroinitializer, !dbg !88
  %732 = or <4 x i1> %730, %731, !dbg !89
  %.v56 = select <4 x i1> %732, <4 x i32> %695, <4 x i32> %.v55, !dbg !90
  %733 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !90
  %734 = fcmp olt <4 x float> %733, %701, !dbg !91
  %735 = fcmp uno <4 x float> %701, zeroinitializer, !dbg !93
  %736 = or <4 x i1> %734, %735, !dbg !94
  %.v57 = select <4 x i1> %736, <4 x i32> %700, <4 x i32> %.v56, !dbg !95
  %737 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !95
  %738 = fcmp olt <4 x float> %737, %706, !dbg !96
  %739 = fcmp uno <4 x float> %706, zeroinitializer, !dbg !98
  %740 = or <4 x i1> %738, %739, !dbg !99
  %.v58 = select <4 x i1> %740, <4 x i32> %705, <4 x i32> %.v57, !dbg !100
  %741 = bitcast <4 x i32> %.v58 to <4 x float>, !dbg !100
  %742 = fcmp olt <4 x float> %741, %711, !dbg !101
  %743 = fcmp uno <4 x float> %711, zeroinitializer, !dbg !103
  %744 = or <4 x i1> %742, %743, !dbg !104
  %.v59 = select <4 x i1> %744, <4 x i32> %710, <4 x i32> %.v58, !dbg !105
  %745 = bitcast <4 x i32> %.v59 to <4 x float>, !dbg !105
  %746 = fcmp olt <4 x float> %745, %716, !dbg !106
  %747 = fcmp uno <4 x float> %716, zeroinitializer, !dbg !108
  %748 = or <4 x i1> %746, %747, !dbg !109
  %.v60 = select <4 x i1> %748, <4 x i32> %715, <4 x i32> %.v59, !dbg !110
  %749 = bitcast <4 x i32> %.v60 to <4 x float>, !dbg !110
  %750 = fcmp olt <4 x float> %749, %721, !dbg !111
  %751 = bitcast i32 %379 to float, !dbg !113
  %752 = fcmp uno float %751, 0.000000e+00, !dbg !113
  %753 = bitcast i32 %380 to float, !dbg !113
  %754 = fcmp uno float %753, 0.000000e+00, !dbg !113
  %755 = bitcast i32 %381 to float, !dbg !113
  %756 = fcmp uno float %755, 0.000000e+00, !dbg !113
  %757 = bitcast i32 %382 to float, !dbg !113
  %758 = fcmp uno float %757, 0.000000e+00, !dbg !113
  %759 = extractelement <4 x i1> %750, i64 0, !dbg !114
  %760 = or i1 %759, %752, !dbg !114
  %761 = extractelement <4 x i1> %750, i64 1, !dbg !114
  %762 = or i1 %761, %754, !dbg !114
  %763 = extractelement <4 x i1> %750, i64 2, !dbg !114
  %764 = or i1 %763, %756, !dbg !114
  %765 = extractelement <4 x i1> %750, i64 3, !dbg !114
  %766 = or i1 %765, %758, !dbg !114
  %767 = zext <4 x i1> %722 to <4 x i8>, !dbg !115
  %768 = select <4 x i1> %726, <4 x i8> splat (i8 2), <4 x i8> %767, !dbg !116
  %769 = select <4 x i1> %730, <4 x i8> splat (i8 3), <4 x i8> %768, !dbg !117
  %770 = select <4 x i1> %734, <4 x i8> splat (i8 4), <4 x i8> %769, !dbg !118
  %771 = select <4 x i1> %738, <4 x i8> splat (i8 5), <4 x i8> %770, !dbg !119
  %772 = select <4 x i1> %742, <4 x i8> splat (i8 6), <4 x i8> %771, !dbg !120
  %773 = select <4 x i1> %746, <4 x i8> splat (i8 7), <4 x i8> %772, !dbg !121
  %774 = select <4 x i1> %750, <4 x i8> splat (i8 8), <4 x i8> %773, !dbg !122
  %775 = mul i32 %27, 196, !dbg !123
  %776 = mul i32 %28, 196, !dbg !123
  %777 = mul i32 %29, 196, !dbg !123
  %778 = mul i32 %30, 196, !dbg !123
  %779 = mul i32 %40, 250880, !dbg !124
  %780 = add i32 %779, %.decomposed62, !dbg !125
  %781 = add i32 %780, %775, !dbg !126
  %782 = add i32 %780, %776, !dbg !126
  %783 = add i32 %780, %777, !dbg !126
  %784 = add i32 %780, %778, !dbg !126
  %785 = sext i32 %781 to i64, !dbg !127
  %786 = getelementptr float, ptr addrspace(1) %1, i64 %785, !dbg !127
  %787 = sext i32 %782 to i64, !dbg !127
  %788 = getelementptr float, ptr addrspace(1) %1, i64 %787, !dbg !127
  %789 = sext i32 %783 to i64, !dbg !127
  %790 = getelementptr float, ptr addrspace(1) %1, i64 %789, !dbg !127
  %791 = sext i32 %784 to i64, !dbg !127
  %792 = getelementptr float, ptr addrspace(1) %1, i64 %791, !dbg !127
  %793 = shl i32 %8, 8, !dbg !128
  %794 = and i32 %793, 3840, !dbg !128
  %795 = or disjoint i32 %794, %10, !dbg !128
  %796 = and i32 %11, 1020, !dbg !128
  %797 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %794, !dbg !128
  %798 = getelementptr float, ptr addrspace(3) %797, i32 %795, !dbg !128
  %799 = extractelement <4 x i32> %.v39, i64 0, !dbg !128
  %800 = select i1 %466, i32 %364, i32 %799, !dbg !129
  %801 = insertelement <1 x i32> poison, i32 %800, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %798, <1 x i32> %801, i1 true) #2, !dbg !128
  %802 = or disjoint i32 %795, 16, !dbg !128
  %803 = lshr i32 %802, 2, !dbg !128
  %804 = and i32 %803, 964, !dbg !128
  %805 = getelementptr float, ptr addrspace(3) @global_smem, i32 %804, !dbg !128
  %806 = getelementptr float, ptr addrspace(3) %805, i32 %802, !dbg !128
  %807 = extractelement <4 x i32> %.v39, i64 1, !dbg !128
  %808 = select i1 %468, i32 %365, i32 %807, !dbg !129
  %809 = insertelement <1 x i32> poison, i32 %808, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %806, <1 x i32> %809, i1 true) #2, !dbg !128
  %810 = or disjoint i32 %795, 32, !dbg !128
  %811 = lshr i32 %810, 2, !dbg !128
  %812 = and i32 %811, 968, !dbg !128
  %813 = getelementptr float, ptr addrspace(3) @global_smem, i32 %812, !dbg !128
  %814 = getelementptr float, ptr addrspace(3) %813, i32 %810, !dbg !128
  %815 = extractelement <4 x i32> %.v39, i64 2, !dbg !128
  %816 = select i1 %470, i32 %366, i32 %815, !dbg !129
  %817 = insertelement <1 x i32> poison, i32 %816, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %814, <1 x i32> %817, i1 true) #2, !dbg !128
  %818 = or disjoint i32 %795, 48, !dbg !128
  %819 = lshr i32 %818, 2, !dbg !128
  %820 = and i32 %819, 972, !dbg !128
  %821 = getelementptr float, ptr addrspace(3) @global_smem, i32 %820, !dbg !128
  %822 = getelementptr float, ptr addrspace(3) %821, i32 %818, !dbg !128
  %823 = extractelement <4 x i32> %.v39, i64 3, !dbg !128
  %824 = select i1 %472, i32 %367, i32 %823, !dbg !129
  %825 = insertelement <1 x i32> poison, i32 %824, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %822, <1 x i32> %825, i1 true) #2, !dbg !128
  %826 = or disjoint i32 %795, 64, !dbg !128
  %827 = lshr i32 %826, 2, !dbg !128
  %828 = and i32 %827, 976, !dbg !128
  %829 = getelementptr float, ptr addrspace(3) @global_smem, i32 %828, !dbg !128
  %830 = getelementptr float, ptr addrspace(3) %829, i32 %826, !dbg !128
  %831 = extractelement <4 x i32> %.v46, i64 0, !dbg !128
  %832 = select i1 %564, i32 %369, i32 %831, !dbg !129
  %833 = insertelement <1 x i32> poison, i32 %832, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %830, <1 x i32> %833, i1 true) #2, !dbg !128
  %834 = or disjoint i32 %795, 80, !dbg !128
  %835 = lshr i32 %834, 2, !dbg !128
  %836 = and i32 %835, 980, !dbg !128
  %837 = getelementptr float, ptr addrspace(3) @global_smem, i32 %836, !dbg !128
  %838 = getelementptr float, ptr addrspace(3) %837, i32 %834, !dbg !128
  %839 = extractelement <4 x i32> %.v46, i64 1, !dbg !128
  %840 = select i1 %566, i32 %370, i32 %839, !dbg !129
  %841 = insertelement <1 x i32> poison, i32 %840, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %838, <1 x i32> %841, i1 true) #2, !dbg !128
  %842 = or disjoint i32 %795, 96, !dbg !128
  %843 = lshr i32 %842, 2, !dbg !128
  %844 = and i32 %843, 984, !dbg !128
  %845 = getelementptr float, ptr addrspace(3) @global_smem, i32 %844, !dbg !128
  %846 = getelementptr float, ptr addrspace(3) %845, i32 %842, !dbg !128
  %847 = extractelement <4 x i32> %.v46, i64 2, !dbg !128
  %848 = select i1 %568, i32 %371, i32 %847, !dbg !129
  %849 = insertelement <1 x i32> poison, i32 %848, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %846, <1 x i32> %849, i1 true) #2, !dbg !128
  %850 = or disjoint i32 %795, 112, !dbg !128
  %851 = lshr i32 %850, 2, !dbg !128
  %852 = and i32 %851, 988, !dbg !128
  %853 = getelementptr float, ptr addrspace(3) @global_smem, i32 %852, !dbg !128
  %854 = getelementptr float, ptr addrspace(3) %853, i32 %850, !dbg !128
  %855 = extractelement <4 x i32> %.v46, i64 3, !dbg !128
  %856 = select i1 %570, i32 %372, i32 %855, !dbg !129
  %857 = insertelement <1 x i32> poison, i32 %856, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %854, <1 x i32> %857, i1 true) #2, !dbg !128
  %858 = or disjoint i32 %795, 128, !dbg !128
  %859 = lshr i32 %858, 2, !dbg !128
  %860 = and i32 %859, 992, !dbg !128
  %861 = getelementptr float, ptr addrspace(3) @global_smem, i32 %860, !dbg !128
  %862 = getelementptr float, ptr addrspace(3) %861, i32 %858, !dbg !128
  %863 = extractelement <4 x i32> %.v53, i64 0, !dbg !128
  %864 = select i1 %662, i32 %374, i32 %863, !dbg !129
  %865 = insertelement <1 x i32> poison, i32 %864, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %862, <1 x i32> %865, i1 true) #2, !dbg !128
  %866 = or disjoint i32 %795, 144, !dbg !128
  %867 = lshr i32 %866, 2, !dbg !128
  %868 = and i32 %867, 996, !dbg !128
  %869 = getelementptr float, ptr addrspace(3) @global_smem, i32 %868, !dbg !128
  %870 = getelementptr float, ptr addrspace(3) %869, i32 %866, !dbg !128
  %871 = extractelement <4 x i32> %.v53, i64 1, !dbg !128
  %872 = select i1 %664, i32 %375, i32 %871, !dbg !129
  %873 = insertelement <1 x i32> poison, i32 %872, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %870, <1 x i32> %873, i1 true) #2, !dbg !128
  %874 = or disjoint i32 %795, 160, !dbg !128
  %875 = lshr i32 %874, 2, !dbg !128
  %876 = and i32 %875, 1000, !dbg !128
  %877 = getelementptr float, ptr addrspace(3) @global_smem, i32 %876, !dbg !128
  %878 = getelementptr float, ptr addrspace(3) %877, i32 %874, !dbg !128
  %879 = extractelement <4 x i32> %.v53, i64 2, !dbg !128
  %880 = select i1 %666, i32 %376, i32 %879, !dbg !129
  %881 = insertelement <1 x i32> poison, i32 %880, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %878, <1 x i32> %881, i1 true) #2, !dbg !128
  %882 = or disjoint i32 %795, 176, !dbg !128
  %883 = lshr i32 %882, 2, !dbg !128
  %884 = and i32 %883, 1004, !dbg !128
  %885 = getelementptr float, ptr addrspace(3) @global_smem, i32 %884, !dbg !128
  %886 = getelementptr float, ptr addrspace(3) %885, i32 %882, !dbg !128
  %887 = extractelement <4 x i32> %.v53, i64 3, !dbg !128
  %888 = select i1 %668, i32 %377, i32 %887, !dbg !129
  %889 = insertelement <1 x i32> poison, i32 %888, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %886, <1 x i32> %889, i1 true) #2, !dbg !128
  %890 = or disjoint i32 %795, 192, !dbg !128
  %891 = lshr i32 %890, 2, !dbg !128
  %892 = and i32 %891, 1008, !dbg !128
  %893 = getelementptr float, ptr addrspace(3) @global_smem, i32 %892, !dbg !128
  %894 = getelementptr float, ptr addrspace(3) %893, i32 %890, !dbg !128
  %895 = extractelement <4 x i32> %.v60, i64 0, !dbg !128
  %896 = select i1 %760, i32 %379, i32 %895, !dbg !129
  %897 = insertelement <1 x i32> poison, i32 %896, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %894, <1 x i32> %897, i1 true) #2, !dbg !128
  %898 = or disjoint i32 %795, 208, !dbg !128
  %899 = lshr i32 %898, 2, !dbg !128
  %900 = and i32 %899, 1012, !dbg !128
  %901 = getelementptr float, ptr addrspace(3) @global_smem, i32 %900, !dbg !128
  %902 = getelementptr float, ptr addrspace(3) %901, i32 %898, !dbg !128
  %903 = extractelement <4 x i32> %.v60, i64 1, !dbg !128
  %904 = select i1 %762, i32 %380, i32 %903, !dbg !129
  %905 = insertelement <1 x i32> poison, i32 %904, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %902, <1 x i32> %905, i1 true) #2, !dbg !128
  %906 = or disjoint i32 %795, 224, !dbg !128
  %907 = lshr i32 %906, 2, !dbg !128
  %908 = and i32 %907, 1016, !dbg !128
  %909 = getelementptr float, ptr addrspace(3) @global_smem, i32 %908, !dbg !128
  %910 = getelementptr float, ptr addrspace(3) %909, i32 %906, !dbg !128
  %911 = extractelement <4 x i32> %.v60, i64 2, !dbg !128
  %912 = select i1 %764, i32 %381, i32 %911, !dbg !129
  %913 = insertelement <1 x i32> poison, i32 %912, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %910, <1 x i32> %913, i1 true) #2, !dbg !128
  %914 = or disjoint i32 %795, 240, !dbg !128
  %915 = lshr i32 %914, 2, !dbg !128
  %916 = and i32 %915, 1020, !dbg !128
  %917 = getelementptr float, ptr addrspace(3) @global_smem, i32 %916, !dbg !128
  %918 = getelementptr float, ptr addrspace(3) %917, i32 %914, !dbg !128
  %919 = extractelement <4 x i32> %.v60, i64 3, !dbg !128
  %920 = select i1 %766, i32 %382, i32 %919, !dbg !129
  %921 = insertelement <1 x i32> poison, i32 %920, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %918, <1 x i32> %921, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %922 = and i32 %8, 252, !dbg !128
  %923 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %922, !dbg !128
  %924 = getelementptr inbounds float, ptr addrspace(3) %923, i32 %796, !dbg !128
  %925 = or disjoint i32 %796, 1024, !dbg !128
  %926 = lshr exact i32 %925, 2, !dbg !128
  %927 = and i32 %926, 508, !dbg !128
  %928 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %927, !dbg !128
  %929 = getelementptr inbounds float, ptr addrspace(3) %928, i32 %925, !dbg !128
  %930 = load <4 x i32>, ptr addrspace(3) %929, align 16, !dbg !128
  %931 = or disjoint i32 %796, 2048, !dbg !128
  %932 = lshr exact i32 %931, 2, !dbg !128
  %933 = and i32 %932, 764, !dbg !128
  %934 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %933, !dbg !128
  %935 = getelementptr inbounds float, ptr addrspace(3) %934, i32 %931, !dbg !128
  %936 = load <4 x i32>, ptr addrspace(3) %935, align 16, !dbg !128
  %937 = or disjoint i32 %796, 3072, !dbg !128
  %938 = lshr exact i32 %937, 2, !dbg !128
  %939 = and i32 %938, 1020, !dbg !128
  %940 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %939, !dbg !128
  %941 = getelementptr inbounds float, ptr addrspace(3) %940, i32 %937, !dbg !128
  %942 = load <4 x i32>, ptr addrspace(3) %941, align 16, !dbg !128
  %.extract = load i32, ptr addrspace(3) %924, align 16, !dbg !128
  %943 = getelementptr inbounds i8, ptr addrspace(3) %924, i32 4, !dbg !128
  %.extract19 = load i32, ptr addrspace(3) %943, align 4, !dbg !128
  %944 = getelementptr inbounds i8, ptr addrspace(3) %924, i32 8, !dbg !128
  %.extract20 = load i32, ptr addrspace(3) %944, align 8, !dbg !128
  %945 = getelementptr inbounds i8, ptr addrspace(3) %924, i32 12, !dbg !128
  %.extract21 = load i32, ptr addrspace(3) %945, align 4, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %786, i1 %63) #2, !dbg !128
  %.extract22 = extractelement <4 x i32> %930, i64 0, !dbg !128
  %.extract23 = extractelement <4 x i32> %930, i64 1, !dbg !128
  %.extract24 = extractelement <4 x i32> %930, i64 2, !dbg !128
  %.extract25 = extractelement <4 x i32> %930, i64 3, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %788, i1 %64) #2, !dbg !128
  %.extract26 = extractelement <4 x i32> %936, i64 0, !dbg !128
  %.extract27 = extractelement <4 x i32> %936, i64 1, !dbg !128
  %.extract28 = extractelement <4 x i32> %936, i64 2, !dbg !128
  %.extract29 = extractelement <4 x i32> %936, i64 3, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %790, i1 %65) #2, !dbg !128
  %.extract30 = extractelement <4 x i32> %942, i64 0, !dbg !128
  %.extract31 = extractelement <4 x i32> %942, i64 1, !dbg !128
  %.extract32 = extractelement <4 x i32> %942, i64 2, !dbg !128
  %.extract33 = extractelement <4 x i32> %942, i64 3, !dbg !128
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %792, i1 %66) #2, !dbg !128
  %946 = mul i32 %13, 768, !dbg !130
  %947 = add i32 %23, %946, !dbg !131
  %948 = sext i32 %947 to i64, !dbg !132
  %949 = getelementptr i8, ptr addrspace(1) %2, i64 %948, !dbg !132
  %950 = bitcast <4 x i8> %480 to i32, !dbg !133
  %951 = bitcast <4 x i8> %578 to i32, !dbg !133
  %952 = bitcast <4 x i8> %676 to i32, !dbg !133
  %953 = bitcast <4 x i8> %774 to i32, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %950, i32 %951, i32 %952, i32 %953, ptr addrspace(1) %949, i1 %62) #2, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7gksze6jiscj4ekra2t2i52wif65iwokw6idduocrsys55uqcmf.py", directory: "inductor_cache/7g")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_42, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_42", linkageName: "triton_poi_fused_max_pool2d_with_indices_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 27, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 34, column: 51, scope: !7)
!27 = !DILocation(line: 34, column: 63, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 45, scope: !7)
!30 = !DILocation(line: 34, column: 56, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 76, scope: !7)
!33 = !DILocation(line: 34, column: 68, scope: !7)
!34 = !DILocation(line: 35, column: 41, scope: !7)
!35 = !DILocation(line: 35, column: 51, scope: !7)
!36 = !DILocation(line: 35, column: 62, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 74, scope: !7)
!39 = !DILocation(line: 36, column: 42, scope: !7)
!40 = !DILocation(line: 36, column: 52, scope: !7)
!41 = !DILocation(line: 36, column: 63, scope: !7)
!42 = !DILocation(line: 36, column: 30, scope: !7)
!43 = !DILocation(line: 36, column: 75, scope: !7)
!44 = !DILocation(line: 37, column: 43, scope: !7)
!45 = !DILocation(line: 37, column: 53, scope: !7)
!46 = !DILocation(line: 37, column: 64, scope: !7)
!47 = !DILocation(line: 37, column: 30, scope: !7)
!48 = !DILocation(line: 37, column: 76, scope: !7)
!49 = !DILocation(line: 38, column: 43, scope: !7)
!50 = !DILocation(line: 38, column: 53, scope: !7)
!51 = !DILocation(line: 38, column: 64, scope: !7)
!52 = !DILocation(line: 38, column: 30, scope: !7)
!53 = !DILocation(line: 38, column: 76, scope: !7)
!54 = !DILocation(line: 39, column: 43, scope: !7)
!55 = !DILocation(line: 39, column: 53, scope: !7)
!56 = !DILocation(line: 39, column: 64, scope: !7)
!57 = !DILocation(line: 39, column: 30, scope: !7)
!58 = !DILocation(line: 39, column: 76, scope: !7)
!59 = !DILocation(line: 40, column: 44, scope: !7)
!60 = !DILocation(line: 40, column: 54, scope: !7)
!61 = !DILocation(line: 40, column: 65, scope: !7)
!62 = !DILocation(line: 40, column: 31, scope: !7)
!63 = !DILocation(line: 40, column: 77, scope: !7)
!64 = !DILocation(line: 41, column: 44, scope: !7)
!65 = !DILocation(line: 41, column: 54, scope: !7)
!66 = !DILocation(line: 41, column: 65, scope: !7)
!67 = !DILocation(line: 41, column: 31, scope: !7)
!68 = !DILocation(line: 41, column: 77, scope: !7)
!69 = !DILocation(line: 42, column: 44, scope: !7)
!70 = !DILocation(line: 42, column: 54, scope: !7)
!71 = !DILocation(line: 42, column: 65, scope: !7)
!72 = !DILocation(line: 42, column: 31, scope: !7)
!73 = !DILocation(line: 42, column: 77, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 43, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 44, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 45, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 46, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !97)
!97 = !DILocation(line: 47, column: 41, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !102)
!102 = !DILocation(line: 48, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !107)
!107 = !DILocation(line: 49, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !112)
!112 = !DILocation(line: 50, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !112)
!115 = !DILocation(line: 54, column: 35, scope: !7)
!116 = !DILocation(line: 57, column: 35, scope: !7)
!117 = !DILocation(line: 60, column: 35, scope: !7)
!118 = !DILocation(line: 63, column: 35, scope: !7)
!119 = !DILocation(line: 66, column: 35, scope: !7)
!120 = !DILocation(line: 69, column: 35, scope: !7)
!121 = !DILocation(line: 72, column: 35, scope: !7)
!122 = !DILocation(line: 75, column: 35, scope: !7)
!123 = !DILocation(line: 76, column: 34, scope: !7)
!124 = !DILocation(line: 76, column: 46, scope: !7)
!125 = !DILocation(line: 76, column: 30, scope: !7)
!126 = !DILocation(line: 76, column: 39, scope: !7)
!127 = !DILocation(line: 76, column: 25, scope: !7)
!128 = !DILocation(line: 76, column: 58, scope: !7)
!129 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !112)
!130 = !DILocation(line: 77, column: 34, scope: !7)
!131 = !DILocation(line: 77, column: 30, scope: !7)
!132 = !DILocation(line: 77, column: 25, scope: !7)
!133 = !DILocation(line: 77, column: 46, scope: !7)
!134 = !DILocation(line: 77, column: 4, scope: !7)
