; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_13(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 24, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 32, !dbg !14
  %15 = icmp slt i32 %13, 32, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %17 = and i32 %9, 992, !dbg !16
  %18 = or disjoint i32 %17, 1024, !dbg !16
  %19 = add i32 %12, %17, !dbg !17
  %20 = add i32 %18, %12, !dbg !17
  %21 = sext i32 %19 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %39 = bitcast i32 %35 to float, !dbg !19
  %40 = bitcast i32 %36 to float, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = fadd float %30, %39, !dbg !20
  %44 = select i1 %14, float %43, float 0.000000e+00, !dbg !20
  %45 = fadd float %31, %40, !dbg !20
  %46 = select i1 %14, float %45, float 0.000000e+00, !dbg !20
  %47 = fadd float %32, %41, !dbg !20
  %48 = select i1 %14, float %47, float 0.000000e+00, !dbg !20
  %49 = fadd float %33, %42, !dbg !20
  %50 = select i1 %14, float %49, float 0.000000e+00, !dbg !20
  %51 = bitcast float %44 to i32, !dbg !25
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 16, i32 31), !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = fadd float %44, %53, !dbg !20
  %55 = bitcast float %54 to i32, !dbg !25
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 8, i32 31), !dbg !25
  %57 = bitcast i32 %56 to float, !dbg !25
  %58 = fadd float %54, %57, !dbg !20
  %59 = bitcast float %46 to i32, !dbg !25
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 16, i32 31), !dbg !25
  %61 = bitcast i32 %60 to float, !dbg !25
  %62 = fadd float %46, %61, !dbg !20
  %63 = bitcast float %62 to i32, !dbg !25
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 8, i32 31), !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = fadd float %62, %65, !dbg !20
  %67 = bitcast float %48 to i32, !dbg !25
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = fadd float %48, %69, !dbg !20
  %71 = bitcast float %70 to i32, !dbg !25
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = fadd float %70, %73, !dbg !20
  %75 = bitcast float %50 to i32, !dbg !25
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 16, i32 31), !dbg !25
  %77 = bitcast i32 %76 to float, !dbg !25
  %78 = fadd float %50, %77, !dbg !20
  %79 = bitcast float %78 to i32, !dbg !25
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 8, i32 31), !dbg !25
  %81 = bitcast i32 %80 to float, !dbg !25
  %82 = fadd float %78, %81, !dbg !20
  %83 = icmp eq i32 %8, 0, !dbg !25
  %84 = and i32 %16, 7, !dbg !25
  %85 = shl nuw nsw i32 %10, 3, !dbg !25
  %86 = or disjoint i32 %85, %84, !dbg !25
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !25
  %88 = bitcast float %58 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 %83) #3, !dbg !25
  %89 = or disjoint i32 %85, 8, !dbg !25
  %90 = or disjoint i32 %89, %84, !dbg !25
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !25
  %92 = bitcast float %66 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 %83) #3, !dbg !25
  %93 = or disjoint i32 %85, 16, !dbg !25
  %94 = or disjoint i32 %93, %84, !dbg !25
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !25
  %96 = bitcast float %74 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 %83) #3, !dbg !25
  %97 = or disjoint i32 %85, 24, !dbg !25
  %98 = or disjoint i32 %97, %84, !dbg !25
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !25
  %100 = bitcast float %82 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 %83) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %101 = icmp slt i32 %7, 256, !dbg !25
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !25
  %103 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %102, i1 %101) #3, !dbg !25
  %104 = bitcast i32 %103 to float, !dbg !25
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 4, i32 31), !dbg !25
  %106 = bitcast i32 %105 to float, !dbg !25
  %107 = fadd float %104, %106, !dbg !20
  %108 = bitcast float %107 to i32, !dbg !25
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !25
  %110 = bitcast i32 %109 to float, !dbg !25
  %111 = fadd float %107, %110, !dbg !20
  %112 = bitcast float %111 to i32, !dbg !25
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !25
  %114 = bitcast i32 %113 to float, !dbg !25
  %115 = fadd float %111, %114, !dbg !20
  %116 = and i32 %7, 7, !dbg !25
  %117 = icmp eq i32 %116, 0, !dbg !25
  %118 = and i1 %101, %117, !dbg !25
  %119 = bitcast float %115 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %119, i1 %118) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !25
  %121 = load i32, ptr addrspace(3) %120, align 16, !dbg !25
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !25
  %123 = load i32, ptr addrspace(3) %122, align 16, !dbg !25
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !25
  %125 = load i32, ptr addrspace(3) %124, align 16, !dbg !25
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !25
  %127 = load i32, ptr addrspace(3) %126, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %128, i32 %121, i32 %123, i32 %125, i32 %127, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %130 = load i32, ptr addrspace(3) %129, align 4, !dbg !26
  %131 = sext i32 %13 to i64, !dbg !27
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !27
  %133 = icmp eq i32 %84, 0, !dbg !28
  %134 = and i1 %133, %15, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %132, i1 %134) #3, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clsdhhh3ssebliamu6jda4rygwf3vrbxlbpvll3xxbort2q3l6hw.py", directory: "inductor_cache/ls")
!4 = !{ptr @triton_per_fused_mean_pow_sub_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_13", linkageName: "triton_per_fused_mean_pow_sub_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 34, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 34, column: 27, scope: !7)
!27 = !DILocation(line: 35, column: 25, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 4, scope: !7)
