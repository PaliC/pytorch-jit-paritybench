; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 64, !dbg !12
  %.lobit = lshr exact i32 %9, 6, !dbg !12
  %10 = shl i32 %8, 1, !dbg !12
  %11 = and i32 %10, 2, !dbg !12
  %12 = or disjoint i32 %7, %.lobit, !dbg !13
  %13 = or disjoint i32 %12, 2, !dbg !13
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = icmp slt i32 %12, 192, !dbg !14
  %16 = icmp slt i32 %13, 192, !dbg !14
  %17 = icmp slt i32 %14, 192, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 6, !dbg !16
  %20 = and i32 %8, 63, !dbg !17
  %21 = lshr i32 %8, 1, !dbg !17
  %22 = and i32 %21, 63, !dbg !17
  %23 = or disjoint i32 %19, %20, !dbg !18
  %24 = or disjoint i32 %19, %22, !dbg !18
  %25 = icmp slt i32 %23, 49, !dbg !19
  %26 = icmp slt i32 %24, 49, !dbg !19
  %.frozen = freeze i32 %23, !dbg !20
  %27 = sdiv i32 %.frozen, 7, !dbg !20
  %28 = mul i32 %27, 7, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %.frozen7 = freeze i32 %14, !dbg !22
  %29 = sdiv i32 %.frozen7, 48, !dbg !22
  %30 = mul i32 %29, 48, !dbg !23
  %.decomposed8 = sub i32 %.frozen7, %30, !dbg !23
  %31 = shl nsw i32 %.decomposed, 1, !dbg !24
  %32 = mul i32 %27, 30, !dbg !25
  %33 = add i32 %31, %32, !dbg !26
  %34 = mul i32 %12, 225, !dbg !27
  %35 = mul i32 %13, 225, !dbg !27
  %36 = add i32 %33, %34, !dbg !28
  %37 = add i32 %33, %35, !dbg !28
  %38 = sext i32 %36 to i64, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !29
  %40 = sext i32 %37 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !29
  %42 = and i1 %15, %25, !dbg !30
  %43 = and i1 %16, %25, !dbg !30
  %44 = and i1 %17, %26, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %42) #2, !dbg !31
  %46 = bitcast i32 %45 to float, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %43) #2, !dbg !31
  %48 = bitcast i32 %47 to float, !dbg !31
  %49 = or disjoint i32 %31, 1, !dbg !32
  %50 = add i32 %49, %32, !dbg !33
  %51 = add i32 %50, %34, !dbg !34
  %52 = add i32 %50, %35, !dbg !34
  %53 = sext i32 %51 to i64, !dbg !35
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !35
  %55 = sext i32 %52 to i64, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !35
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %42) #2, !dbg !36
  %58 = bitcast i32 %57 to float, !dbg !36
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %43) #2, !dbg !36
  %60 = bitcast i32 %59 to float, !dbg !36
  %61 = add i32 %33, 2, !dbg !37
  %62 = add i32 %61, %34, !dbg !38
  %63 = add i32 %61, %35, !dbg !38
  %64 = sext i32 %62 to i64, !dbg !39
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !39
  %66 = sext i32 %63 to i64, !dbg !39
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !39
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %42) #2, !dbg !40
  %69 = bitcast i32 %68 to float, !dbg !40
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %43) #2, !dbg !40
  %71 = bitcast i32 %70 to float, !dbg !40
  %72 = add i32 %33, 15, !dbg !41
  %73 = add i32 %72, %34, !dbg !42
  %74 = add i32 %72, %35, !dbg !42
  %75 = sext i32 %73 to i64, !dbg !43
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !43
  %77 = sext i32 %74 to i64, !dbg !43
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !43
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %42) #2, !dbg !44
  %80 = bitcast i32 %79 to float, !dbg !44
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %43) #2, !dbg !44
  %82 = bitcast i32 %81 to float, !dbg !44
  %83 = add i32 %33, 16, !dbg !45
  %84 = add i32 %83, %34, !dbg !46
  %85 = add i32 %83, %35, !dbg !46
  %86 = sext i32 %84 to i64, !dbg !47
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !47
  %88 = sext i32 %85 to i64, !dbg !47
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !47
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %42) #2, !dbg !48
  %91 = bitcast i32 %90 to float, !dbg !48
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %43) #2, !dbg !48
  %93 = bitcast i32 %92 to float, !dbg !48
  %94 = add i32 %33, 17, !dbg !49
  %95 = add i32 %94, %34, !dbg !50
  %96 = add i32 %94, %35, !dbg !50
  %97 = sext i32 %95 to i64, !dbg !51
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !51
  %99 = sext i32 %96 to i64, !dbg !51
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !51
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %42) #2, !dbg !52
  %102 = bitcast i32 %101 to float, !dbg !52
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %43) #2, !dbg !52
  %104 = bitcast i32 %103 to float, !dbg !52
  %105 = add i32 %33, 30, !dbg !53
  %106 = add i32 %105, %34, !dbg !54
  %107 = add i32 %105, %35, !dbg !54
  %108 = sext i32 %106 to i64, !dbg !55
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !55
  %110 = sext i32 %107 to i64, !dbg !55
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !55
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %42) #2, !dbg !56
  %113 = bitcast i32 %112 to float, !dbg !56
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %43) #2, !dbg !56
  %115 = bitcast i32 %114 to float, !dbg !56
  %116 = add i32 %33, 31, !dbg !57
  %117 = add i32 %116, %34, !dbg !58
  %118 = add i32 %116, %35, !dbg !58
  %119 = sext i32 %117 to i64, !dbg !59
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !59
  %121 = sext i32 %118 to i64, !dbg !59
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !59
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %42) #2, !dbg !60
  %124 = bitcast i32 %123 to float, !dbg !60
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %43) #2, !dbg !60
  %126 = bitcast i32 %125 to float, !dbg !60
  %127 = add i32 %33, 32, !dbg !61
  %128 = add i32 %127, %34, !dbg !62
  %129 = add i32 %127, %35, !dbg !62
  %130 = sext i32 %128 to i64, !dbg !63
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !63
  %132 = sext i32 %129 to i64, !dbg !63
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !63
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %42) #2, !dbg !64
  %135 = bitcast i32 %134 to float, !dbg !64
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %43) #2, !dbg !64
  %137 = bitcast i32 %136 to float, !dbg !64
  %138 = fcmp ogt float %58, %46, !dbg !65
  %139 = fcmp ogt float %60, %48, !dbg !65
  %140 = fcmp uno float %58, 0.000000e+00, !dbg !69
  %141 = fcmp uno float %60, 0.000000e+00, !dbg !69
  %142 = or i1 %138, %140, !dbg !70
  %143 = or i1 %139, %141, !dbg !70
  %144 = select i1 %142, float %58, float %46, !dbg !71
  %145 = select i1 %143, float %60, float %48, !dbg !71
  %146 = fcmp olt float %144, %69, !dbg !72
  %147 = fcmp olt float %145, %71, !dbg !72
  %148 = fcmp uno float %69, 0.000000e+00, !dbg !74
  %149 = fcmp uno float %71, 0.000000e+00, !dbg !74
  %150 = or i1 %148, %146, !dbg !75
  %151 = or i1 %149, %147, !dbg !75
  %152 = select i1 %150, float %69, float %144, !dbg !76
  %153 = select i1 %151, float %71, float %145, !dbg !76
  %154 = fcmp olt float %152, %80, !dbg !77
  %155 = fcmp olt float %153, %82, !dbg !77
  %156 = fcmp uno float %80, 0.000000e+00, !dbg !79
  %157 = fcmp uno float %82, 0.000000e+00, !dbg !79
  %158 = or i1 %156, %154, !dbg !80
  %159 = or i1 %157, %155, !dbg !80
  %160 = select i1 %158, float %80, float %152, !dbg !81
  %161 = select i1 %159, float %82, float %153, !dbg !81
  %162 = fcmp olt float %160, %91, !dbg !82
  %163 = fcmp olt float %161, %93, !dbg !82
  %164 = fcmp uno float %91, 0.000000e+00, !dbg !84
  %165 = fcmp uno float %93, 0.000000e+00, !dbg !84
  %166 = or i1 %164, %162, !dbg !85
  %167 = or i1 %165, %163, !dbg !85
  %168 = select i1 %166, float %91, float %160, !dbg !86
  %169 = select i1 %167, float %93, float %161, !dbg !86
  %170 = fcmp olt float %168, %102, !dbg !87
  %171 = fcmp olt float %169, %104, !dbg !87
  %172 = fcmp uno float %102, 0.000000e+00, !dbg !89
  %173 = fcmp uno float %104, 0.000000e+00, !dbg !89
  %174 = or i1 %172, %170, !dbg !90
  %175 = or i1 %173, %171, !dbg !90
  %176 = select i1 %174, float %102, float %168, !dbg !91
  %177 = select i1 %175, float %104, float %169, !dbg !91
  %178 = fcmp olt float %176, %113, !dbg !92
  %179 = fcmp olt float %177, %115, !dbg !92
  %180 = fcmp uno float %113, 0.000000e+00, !dbg !94
  %181 = fcmp uno float %115, 0.000000e+00, !dbg !94
  %182 = or i1 %180, %178, !dbg !95
  %183 = or i1 %181, %179, !dbg !95
  %184 = select i1 %182, float %113, float %176, !dbg !96
  %185 = select i1 %183, float %115, float %177, !dbg !96
  %186 = fcmp olt float %184, %124, !dbg !97
  %187 = fcmp olt float %185, %126, !dbg !97
  %188 = fcmp uno float %124, 0.000000e+00, !dbg !99
  %189 = fcmp uno float %126, 0.000000e+00, !dbg !99
  %190 = or i1 %188, %186, !dbg !100
  %191 = or i1 %189, %187, !dbg !100
  %192 = select i1 %190, float %124, float %184, !dbg !101
  %193 = select i1 %191, float %126, float %185, !dbg !101
  %194 = fcmp olt float %192, %135, !dbg !102
  %195 = fcmp olt float %193, %137, !dbg !102
  %196 = fcmp uno float %135, 0.000000e+00, !dbg !104
  %197 = fcmp uno float %137, 0.000000e+00, !dbg !104
  %198 = or i1 %196, %194, !dbg !105
  %199 = or i1 %197, %195, !dbg !105
  %200 = zext i1 %138 to i8, !dbg !106
  %201 = zext i1 %139 to i8, !dbg !106
  %202 = select i1 %146, i8 2, i8 %200, !dbg !107
  %203 = select i1 %147, i8 2, i8 %201, !dbg !107
  %204 = select i1 %154, i8 3, i8 %202, !dbg !108
  %205 = select i1 %155, i8 3, i8 %203, !dbg !108
  %206 = select i1 %162, i8 4, i8 %204, !dbg !109
  %207 = select i1 %163, i8 4, i8 %205, !dbg !109
  %208 = select i1 %170, i8 5, i8 %206, !dbg !110
  %209 = select i1 %171, i8 5, i8 %207, !dbg !110
  %210 = select i1 %178, i8 6, i8 %208, !dbg !111
  %211 = select i1 %179, i8 6, i8 %209, !dbg !111
  %212 = select i1 %186, i8 7, i8 %210, !dbg !112
  %213 = select i1 %187, i8 7, i8 %211, !dbg !112
  %214 = select i1 %194, i8 8, i8 %212, !dbg !113
  %215 = select i1 %195, i8 8, i8 %213, !dbg !113
  %216 = mul i32 %24, 48, !dbg !114
  %217 = add i32 %216, %.decomposed8, !dbg !115
  %218 = mul i32 %29, 2352, !dbg !116
  %219 = add i32 %217, %218, !dbg !117
  %220 = sext i32 %219 to i64, !dbg !118
  %221 = getelementptr float, ptr addrspace(1) %1, i64 %220, !dbg !118
  %222 = shl i32 %8, 2, !dbg !119
  %223 = and i32 %222, 252, !dbg !119
  %224 = or disjoint i32 %223, %.lobit, !dbg !119
  %225 = and i32 %10, 126, !dbg !119
  %226 = shl nuw nsw i32 %9, 1, !dbg !119
  %227 = or disjoint i32 %225, %226, !dbg !119
  %228 = lshr exact i32 %223, 1, !dbg !119
  %229 = add nuw nsw i32 %228, %224, !dbg !119
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !119
  %231 = bitcast float %192 to i32, !dbg !119
  %232 = select i1 %198, i32 %134, i32 %231, !dbg !120
  %233 = insertelement <1 x i32> poison, i32 %232, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %233, i1 true) #2, !dbg !119
  %234 = or disjoint i32 %224, 2, !dbg !119
  %235 = add nuw nsw i32 %234, %228, !dbg !119
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %235, !dbg !119
  %237 = bitcast float %193 to i32, !dbg !119
  %238 = select i1 %199, i32 %136, i32 %237, !dbg !120
  %239 = insertelement <1 x i32> poison, i32 %238, i64 0, !dbg !119
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %239, i1 true) #2, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %240 = lshr exact i32 %227, 1, !dbg !119
  %241 = and i32 %240, 126, !dbg !119
  %242 = add nuw nsw i32 %241, %227, !dbg !119
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !119
  %.extract = load i32, ptr addrspace(3) %243, align 8, !dbg !119
  %244 = getelementptr inbounds i8, ptr addrspace(3) %243, i32 4, !dbg !119
  %.extract6 = load i32, ptr addrspace(3) %244, align 4, !dbg !119
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %221, i1 %44) #2, !dbg !119
  %245 = getelementptr i8, ptr addrspace(1) %2, i64 %220, !dbg !121
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %246 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %229, !dbg !122
  %247 = insertelement <1 x i8> poison, i8 %214, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %246, <1 x i8> %247, i1 true) #2, !dbg !122
  %248 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %235, !dbg !122
  %249 = insertelement <1 x i8> poison, i8 %215, i64 0, !dbg !122
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %248, <1 x i8> %249, i1 true) #2, !dbg !122
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %250 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %242, !dbg !122
  %251 = load i16, ptr addrspace(3) %250, align 2, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %251, ptr addrspace(1) %245, i1 %44) #2, !dbg !122
  ret void, !dbg !123
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3hs6rh7aupdypacpm4uybtbu5zct5c2nh7b7s4damq4rwryzrxl.py", directory: "inductor_cache/3h")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_3", linkageName: "triton_poi_fused_max_pool2d_with_indices_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 49, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 62, scope: !7)
!31 = !DILocation(line: 34, column: 54, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 49, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 58, scope: !7)
!37 = !DILocation(line: 36, column: 41, scope: !7)
!38 = !DILocation(line: 36, column: 49, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 58, scope: !7)
!41 = !DILocation(line: 37, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 50, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 59, scope: !7)
!45 = !DILocation(line: 38, column: 42, scope: !7)
!46 = !DILocation(line: 38, column: 50, scope: !7)
!47 = !DILocation(line: 38, column: 30, scope: !7)
!48 = !DILocation(line: 38, column: 59, scope: !7)
!49 = !DILocation(line: 39, column: 42, scope: !7)
!50 = !DILocation(line: 39, column: 50, scope: !7)
!51 = !DILocation(line: 39, column: 30, scope: !7)
!52 = !DILocation(line: 39, column: 59, scope: !7)
!53 = !DILocation(line: 40, column: 43, scope: !7)
!54 = !DILocation(line: 40, column: 51, scope: !7)
!55 = !DILocation(line: 40, column: 31, scope: !7)
!56 = !DILocation(line: 40, column: 60, scope: !7)
!57 = !DILocation(line: 41, column: 43, scope: !7)
!58 = !DILocation(line: 41, column: 51, scope: !7)
!59 = !DILocation(line: 41, column: 31, scope: !7)
!60 = !DILocation(line: 41, column: 60, scope: !7)
!61 = !DILocation(line: 42, column: 43, scope: !7)
!62 = !DILocation(line: 42, column: 51, scope: !7)
!63 = !DILocation(line: 42, column: 31, scope: !7)
!64 = !DILocation(line: 42, column: 60, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 43, column: 40, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !73)
!73 = !DILocation(line: 44, column: 40, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !78)
!78 = !DILocation(line: 45, column: 40, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !83)
!83 = !DILocation(line: 46, column: 40, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !88)
!88 = !DILocation(line: 47, column: 41, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !88)
!92 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !93)
!93 = !DILocation(line: 48, column: 42, scope: !7)
!94 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !93)
!95 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !93)
!96 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !93)
!97 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !98)
!98 = !DILocation(line: 49, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !103)
!103 = !DILocation(line: 50, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !103)
!106 = !DILocation(line: 54, column: 35, scope: !7)
!107 = !DILocation(line: 57, column: 35, scope: !7)
!108 = !DILocation(line: 60, column: 35, scope: !7)
!109 = !DILocation(line: 63, column: 35, scope: !7)
!110 = !DILocation(line: 66, column: 35, scope: !7)
!111 = !DILocation(line: 69, column: 35, scope: !7)
!112 = !DILocation(line: 72, column: 35, scope: !7)
!113 = !DILocation(line: 75, column: 35, scope: !7)
!114 = !DILocation(line: 76, column: 33, scope: !7)
!115 = !DILocation(line: 76, column: 30, scope: !7)
!116 = !DILocation(line: 76, column: 43, scope: !7)
!117 = !DILocation(line: 76, column: 38, scope: !7)
!118 = !DILocation(line: 76, column: 25, scope: !7)
!119 = !DILocation(line: 76, column: 55, scope: !7)
!120 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !103)
!121 = !DILocation(line: 77, column: 25, scope: !7)
!122 = !DILocation(line: 77, column: 55, scope: !7)
!123 = !DILocation(line: 77, column: 4, scope: !7)
