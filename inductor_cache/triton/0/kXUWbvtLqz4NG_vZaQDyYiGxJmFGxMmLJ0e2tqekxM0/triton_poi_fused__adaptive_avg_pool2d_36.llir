; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_36(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 18432, !dbg !14
  %12 = sdiv i32 %9, 3, !dbg !15
  %13 = sdiv i32 %10, 3, !dbg !15
  %14 = sdiv i32 %9, 9, !dbg !16
  %15 = sdiv i32 %10, 9, !dbg !16
  %16 = shl i32 %14, 6, !dbg !17
  %17 = shl i32 %15, 6, !dbg !17
  %18 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !18
  %19 = insertelement <2 x i32> %18, i32 %12, i64 1, !dbg !18
  %20 = srem <2 x i32> %19, splat (i32 3), !dbg !18
  %21 = trunc nsw <2 x i32> %20 to <2 x i8>, !dbg !19
  %22 = shl nsw <2 x i8> %21, splat (i8 3), !dbg !19
  %23 = sdiv <2 x i8> %22, splat (i8 3), !dbg !19
  %24 = add nsw <2 x i8> %22, splat (i8 10), !dbg !20
  %25 = sdiv <2 x i8> %24, splat (i8 3), !dbg !20
  %26 = icmp slt <2 x i8> %23, %25, !dbg !21
  %27 = extractelement <2 x i1> %26, i64 1, !dbg !21
  %28 = sext <2 x i8> %23 to <2 x i32>, !dbg !19
  %29 = icmp slt <2 x i8> %23, %25, !dbg !22
  %30 = extractelement <2 x i1> %29, i64 0, !dbg !22
  %31 = and i1 %30, %27, !dbg !23
  %32 = extractelement <2 x i32> %28, i64 1, !dbg !24
  %33 = shl nsw i32 %32, 3, !dbg !24
  %34 = extractelement <2 x i32> %28, i64 0, !dbg !25
  %35 = add i32 %16, %34, !dbg !26
  %36 = add i32 %35, %33, !dbg !27
  %37 = sext i32 %36 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !28
  %39 = and i1 %11, %31, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %39, i32 0, i1 %39) #1, !dbg !30
  %41 = bitcast i32 %40 to float, !dbg !30
  %42 = add i32 %35, 1, !dbg !31
  %43 = add i32 %42, %33, !dbg !32
  %44 = sext i32 %43 to i64, !dbg !33
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !33
  %46 = add i32 %35, 2, !dbg !34
  %47 = add i32 %46, %33, !dbg !35
  %48 = sext i32 %47 to i64, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !36
  %50 = add nsw <2 x i32> %28, splat (i32 3), !dbg !37
  %51 = sext <2 x i8> %25 to <2 x i32>, !dbg !38
  %52 = icmp slt <2 x i32> %50, %51, !dbg !38
  %53 = extractelement <2 x i1> %52, i64 0, !dbg !39
  %54 = and i1 %27, %53, !dbg !40
  %55 = add i32 %35, 3, !dbg !41
  %56 = add i32 %55, %33, !dbg !42
  %57 = sext i32 %56 to i64, !dbg !43
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !43
  %59 = and i1 %11, %54, !dbg !44
  %60 = add i32 %35, 8, !dbg !45
  %61 = add i32 %60, %33, !dbg !46
  %62 = sext i32 %61 to i64, !dbg !47
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !47
  %64 = add i32 %35, 9, !dbg !48
  %65 = add i32 %64, %33, !dbg !49
  %66 = sext i32 %65 to i64, !dbg !50
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !50
  %68 = add i32 %35, 10, !dbg !51
  %69 = add i32 %68, %33, !dbg !52
  %70 = sext i32 %69 to i64, !dbg !53
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !53
  %72 = add i32 %35, 11, !dbg !54
  %73 = add i32 %72, %33, !dbg !55
  %74 = sext i32 %73 to i64, !dbg !56
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !56
  %76 = add nsw <2 x i32> %28, splat (i32 2), !dbg !57
  %77 = sext <2 x i8> %25 to <2 x i32>, !dbg !58
  %78 = icmp slt <2 x i32> %76, %77, !dbg !58
  %79 = extractelement <2 x i1> %78, i64 0, !dbg !59
  %80 = and i1 %27, %79, !dbg !60
  %81 = and i1 %11, %80, !dbg !61
  %82 = extractelement <2 x i1> %78, i64 1, !dbg !62
  %83 = and i1 %30, %82, !dbg !63
  %84 = add i32 %35, 16, !dbg !64
  %85 = add i32 %84, %33, !dbg !65
  %86 = sext i32 %85 to i64, !dbg !66
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !66
  %88 = and i1 %11, %83, !dbg !67
  %89 = add i32 %35, 17, !dbg !68
  %90 = add i32 %89, %33, !dbg !69
  %91 = sext i32 %90 to i64, !dbg !70
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !70
  %93 = and i1 %79, %82, !dbg !71
  %94 = add i32 %35, 18, !dbg !72
  %95 = add i32 %94, %33, !dbg !73
  %96 = sext i32 %95 to i64, !dbg !74
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !74
  %98 = and i1 %11, %93, !dbg !75
  %99 = and i1 %53, %82, !dbg !62
  %100 = add i32 %35, 19, !dbg !76
  %101 = add i32 %100, %33, !dbg !77
  %102 = sext i32 %101 to i64, !dbg !78
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !78
  %104 = and i1 %11, %99, !dbg !79
  %105 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !18
  %106 = insertelement <2 x i32> %105, i32 %13, i64 1, !dbg !18
  %107 = srem <2 x i32> %106, splat (i32 3), !dbg !18
  %108 = trunc nsw <2 x i32> %107 to <2 x i8>, !dbg !19
  %109 = shl nsw <2 x i8> %108, splat (i8 3), !dbg !19
  %110 = sdiv <2 x i8> %109, splat (i8 3), !dbg !19
  %111 = add nsw <2 x i8> %109, splat (i8 10), !dbg !20
  %112 = sdiv <2 x i8> %111, splat (i8 3), !dbg !20
  %113 = icmp slt <2 x i8> %110, %112, !dbg !21
  %114 = extractelement <2 x i1> %113, i64 1, !dbg !21
  %115 = sext <2 x i8> %110 to <2 x i32>, !dbg !19
  %116 = icmp slt <2 x i8> %110, %112, !dbg !22
  %117 = extractelement <2 x i1> %116, i64 0, !dbg !22
  %118 = and i1 %117, %114, !dbg !23
  %119 = extractelement <2 x i32> %115, i64 1, !dbg !24
  %120 = shl nsw i32 %119, 3, !dbg !24
  %121 = extractelement <2 x i32> %115, i64 0, !dbg !25
  %122 = add i32 %17, %121, !dbg !26
  %123 = add i32 %122, %120, !dbg !27
  %124 = sext i32 %123 to i64, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !28
  %126 = and i1 %118, %11, !dbg !29
  %127 = add i32 %122, 1, !dbg !31
  %128 = add i32 %127, %120, !dbg !32
  %129 = sext i32 %128 to i64, !dbg !33
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !33
  %131 = add i32 %122, 2, !dbg !34
  %132 = add i32 %131, %120, !dbg !35
  %133 = sext i32 %132 to i64, !dbg !36
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !36
  %135 = add nsw <2 x i32> %115, splat (i32 3), !dbg !37
  %136 = sext <2 x i8> %112 to <2 x i32>, !dbg !38
  %137 = icmp slt <2 x i32> %135, %136, !dbg !38
  %138 = extractelement <2 x i1> %137, i64 0, !dbg !39
  %139 = and i1 %114, %138, !dbg !40
  %140 = add i32 %122, 3, !dbg !41
  %141 = add i32 %140, %120, !dbg !42
  %142 = sext i32 %141 to i64, !dbg !43
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !43
  %144 = and i1 %139, %11, !dbg !44
  %145 = add i32 %122, 8, !dbg !45
  %146 = add i32 %145, %120, !dbg !46
  %147 = sext i32 %146 to i64, !dbg !47
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !47
  %149 = add i32 %122, 9, !dbg !48
  %150 = add i32 %149, %120, !dbg !49
  %151 = sext i32 %150 to i64, !dbg !50
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !50
  %153 = add i32 %122, 10, !dbg !51
  %154 = add i32 %153, %120, !dbg !52
  %155 = sext i32 %154 to i64, !dbg !53
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !53
  %157 = add i32 %122, 11, !dbg !54
  %158 = add i32 %157, %120, !dbg !55
  %159 = sext i32 %158 to i64, !dbg !56
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !56
  %161 = add nsw <2 x i32> %115, splat (i32 2), !dbg !57
  %162 = sext <2 x i8> %112 to <2 x i32>, !dbg !58
  %163 = icmp slt <2 x i32> %161, %162, !dbg !58
  %164 = extractelement <2 x i1> %163, i64 0, !dbg !59
  %165 = and i1 %114, %164, !dbg !60
  %166 = and i1 %165, %11, !dbg !61
  %167 = shufflevector <2 x i32> %115, <2 x i32> %28, <4 x i32> <i32 1, i32 3, i32 0, i32 2>, !dbg !80
  %168 = add nsw <4 x i32> %167, splat (i32 1), !dbg !80
  %169 = shufflevector <2 x i8> %112, <2 x i8> %25, <4 x i32> <i32 1, i32 3, i32 0, i32 2>, !dbg !81
  %170 = sext <4 x i8> %169 to <4 x i32>, !dbg !81
  %171 = icmp slt <4 x i32> %168, %170, !dbg !81
  %172 = extractelement <4 x i1> %171, i64 3, !dbg !82
  %173 = and i1 %27, %172, !dbg !83
  %174 = and i1 %11, %173, !dbg !84
  %175 = extractelement <4 x i1> %171, i64 1, !dbg !85
  %176 = and i1 %30, %175, !dbg !86
  %177 = and i1 %11, %176, !dbg !87
  %178 = and i1 %172, %175, !dbg !88
  %179 = and i1 %11, %178, !dbg !89
  %180 = and i1 %79, %175, !dbg !90
  %181 = and i1 %11, %180, !dbg !91
  %182 = and i1 %53, %175, !dbg !85
  %183 = and i1 %11, %182, !dbg !92
  %184 = and i1 %172, %82, !dbg !93
  %185 = and i1 %11, %184, !dbg !94
  %186 = extractelement <4 x i1> %171, i64 2, !dbg !82
  %187 = and i1 %114, %186, !dbg !83
  %188 = and i1 %187, %11, !dbg !84
  %189 = extractelement <4 x i1> %171, i64 0, !dbg !85
  %190 = and i1 %117, %189, !dbg !86
  %191 = and i1 %190, %11, !dbg !87
  %192 = and i1 %186, %189, !dbg !88
  %193 = and i1 %192, %11, !dbg !89
  %194 = and i1 %164, %189, !dbg !90
  %195 = and i1 %194, %11, !dbg !91
  %196 = and i1 %138, %189, !dbg !85
  %197 = and i1 %196, %11, !dbg !92
  %198 = extractelement <2 x i1> %163, i64 1, !dbg !62
  %199 = and i1 %117, %198, !dbg !63
  %200 = add i32 %122, 16, !dbg !64
  %201 = add i32 %200, %120, !dbg !65
  %202 = sext i32 %201 to i64, !dbg !66
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !66
  %204 = and i1 %199, %11, !dbg !67
  %205 = and i1 %186, %198, !dbg !93
  %206 = add i32 %122, 17, !dbg !68
  %207 = add i32 %206, %120, !dbg !69
  %208 = sext i32 %207 to i64, !dbg !70
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !70
  %210 = and i1 %205, %11, !dbg !94
  %211 = and i1 %164, %198, !dbg !71
  %212 = add i32 %122, 18, !dbg !72
  %213 = add i32 %212, %120, !dbg !73
  %214 = sext i32 %213 to i64, !dbg !74
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !74
  %216 = and i1 %211, %11, !dbg !75
  %217 = and i1 %138, %198, !dbg !62
  %218 = add i32 %122, 19, !dbg !76
  %219 = add i32 %218, %120, !dbg !77
  %220 = sext i32 %219 to i64, !dbg !78
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !78
  %222 = and i1 %217, %11, !dbg !79
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %126, i32 0, i1 %126) #1, !dbg !30
  %224 = bitcast i32 %223 to float, !dbg !30
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %174, i32 0, i1 %174) #1, !dbg !95
  %226 = bitcast i32 %225 to float, !dbg !95
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %188, i32 0, i1 %188) #1, !dbg !95
  %228 = bitcast i32 %227 to float, !dbg !95
  %229 = fadd float %41, %226, !dbg !96
  %230 = fadd float %224, %228, !dbg !96
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %81, i32 0, i1 %81) #1, !dbg !97
  %232 = bitcast i32 %231 to float, !dbg !97
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %166, i32 0, i1 %166) #1, !dbg !97
  %234 = bitcast i32 %233 to float, !dbg !97
  %235 = fadd float %229, %232, !dbg !98
  %236 = fadd float %230, %234, !dbg !98
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 0, i1 %59) #1, !dbg !99
  %238 = bitcast i32 %237 to float, !dbg !99
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %144, i32 0, i1 %144) #1, !dbg !99
  %240 = bitcast i32 %239 to float, !dbg !99
  %241 = fadd float %235, %238, !dbg !100
  %242 = fadd float %236, %240, !dbg !100
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %177, i32 0, i1 %177) #1, !dbg !101
  %244 = bitcast i32 %243 to float, !dbg !101
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %191, i32 0, i1 %191) #1, !dbg !101
  %246 = bitcast i32 %245 to float, !dbg !101
  %247 = fadd float %241, %244, !dbg !102
  %248 = fadd float %242, %246, !dbg !102
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %179, i32 0, i1 %179) #1, !dbg !103
  %250 = bitcast i32 %249 to float, !dbg !103
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %193, i32 0, i1 %193) #1, !dbg !103
  %252 = bitcast i32 %251 to float, !dbg !103
  %253 = fadd float %247, %250, !dbg !104
  %254 = fadd float %248, %252, !dbg !104
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %181, i32 0, i1 %181) #1, !dbg !105
  %256 = bitcast i32 %255 to float, !dbg !105
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %195, i32 0, i1 %195) #1, !dbg !105
  %258 = bitcast i32 %257 to float, !dbg !105
  %259 = fadd float %253, %256, !dbg !106
  %260 = fadd float %254, %258, !dbg !106
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %183, i32 0, i1 %183) #1, !dbg !107
  %262 = bitcast i32 %261 to float, !dbg !107
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %197, i32 0, i1 %197) #1, !dbg !107
  %264 = bitcast i32 %263 to float, !dbg !107
  %265 = fadd float %259, %262, !dbg !108
  %266 = fadd float %260, %264, !dbg !108
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %88, i32 0, i1 %88) #1, !dbg !109
  %268 = bitcast i32 %267 to float, !dbg !109
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %204, i32 0, i1 %204) #1, !dbg !109
  %270 = bitcast i32 %269 to float, !dbg !109
  %271 = fadd float %265, %268, !dbg !110
  %272 = fadd float %266, %270, !dbg !110
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %185, i32 0, i1 %185) #1, !dbg !111
  %274 = bitcast i32 %273 to float, !dbg !111
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %210, i32 0, i1 %210) #1, !dbg !111
  %276 = bitcast i32 %275 to float, !dbg !111
  %277 = fadd float %271, %274, !dbg !112
  %278 = fadd float %272, %276, !dbg !112
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %98, i32 0, i1 %98) #1, !dbg !113
  %280 = bitcast i32 %279 to float, !dbg !113
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 %216, i32 0, i1 %216) #1, !dbg !113
  %282 = bitcast i32 %281 to float, !dbg !113
  %283 = fadd float %277, %280, !dbg !114
  %284 = fadd float %278, %282, !dbg !114
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %104, i32 0, i1 %104) #1, !dbg !115
  %286 = bitcast i32 %285 to float, !dbg !115
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %222, i32 0, i1 %222) #1, !dbg !115
  %288 = bitcast i32 %287 to float, !dbg !115
  %289 = fadd float %283, %286, !dbg !116
  %290 = fadd float %284, %288, !dbg !116
  %291 = extractelement <2 x i1> %52, i64 1, !dbg !39
  %292 = and i1 %30, %291, !dbg !117
  %293 = extractelement <2 x i1> %137, i64 1, !dbg !39
  %294 = and i1 %117, %293, !dbg !117
  %295 = add i32 %35, 24, !dbg !118
  %296 = add i32 %295, %33, !dbg !119
  %297 = add i32 %122, 24, !dbg !118
  %298 = add i32 %297, %120, !dbg !119
  %299 = sext i32 %296 to i64, !dbg !120
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %299, !dbg !120
  %301 = sext i32 %298 to i64, !dbg !120
  %302 = getelementptr float, ptr addrspace(1) %0, i64 %301, !dbg !120
  %303 = and i1 %11, %292, !dbg !121
  %304 = and i1 %294, %11, !dbg !121
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %300, i1 %303, i32 0, i1 %303) #1, !dbg !122
  %306 = bitcast i32 %305 to float, !dbg !122
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %304, i32 0, i1 %304) #1, !dbg !122
  %308 = bitcast i32 %307 to float, !dbg !122
  %309 = fadd float %289, %306, !dbg !123
  %310 = fadd float %290, %308, !dbg !123
  %311 = and i1 %172, %291, !dbg !82
  %312 = and i1 %186, %293, !dbg !82
  %313 = add i32 %35, 25, !dbg !124
  %314 = add i32 %313, %33, !dbg !125
  %315 = add i32 %122, 25, !dbg !124
  %316 = add i32 %315, %120, !dbg !125
  %317 = sext i32 %314 to i64, !dbg !126
  %318 = getelementptr float, ptr addrspace(1) %0, i64 %317, !dbg !126
  %319 = sext i32 %316 to i64, !dbg !126
  %320 = getelementptr float, ptr addrspace(1) %0, i64 %319, !dbg !126
  %321 = and i1 %11, %311, !dbg !127
  %322 = and i1 %312, %11, !dbg !127
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %318, i1 %321, i32 0, i1 %321) #1, !dbg !128
  %324 = bitcast i32 %323 to float, !dbg !128
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %320, i1 %322, i32 0, i1 %322) #1, !dbg !128
  %326 = bitcast i32 %325 to float, !dbg !128
  %327 = fadd float %309, %324, !dbg !129
  %328 = fadd float %310, %326, !dbg !129
  %329 = and i1 %79, %291, !dbg !59
  %330 = and i1 %164, %293, !dbg !59
  %331 = add i32 %35, 26, !dbg !130
  %332 = add i32 %331, %33, !dbg !131
  %333 = add i32 %122, 26, !dbg !130
  %334 = add i32 %333, %120, !dbg !131
  %335 = sext i32 %332 to i64, !dbg !132
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %335, !dbg !132
  %337 = sext i32 %334 to i64, !dbg !132
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %337, !dbg !132
  %339 = and i1 %11, %329, !dbg !133
  %340 = and i1 %330, %11, !dbg !133
  %341 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %336, i1 %339, i32 0, i1 %339) #1, !dbg !134
  %342 = bitcast i32 %341 to float, !dbg !134
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %338, i1 %340, i32 0, i1 %340) #1, !dbg !134
  %344 = bitcast i32 %343 to float, !dbg !134
  %345 = fadd float %327, %342, !dbg !135
  %346 = fadd float %328, %344, !dbg !135
  %347 = and i1 %53, %291, !dbg !39
  %348 = and i1 %138, %293, !dbg !39
  %349 = add i32 %35, 27, !dbg !136
  %350 = add i32 %349, %33, !dbg !137
  %351 = add i32 %122, 27, !dbg !136
  %352 = add i32 %351, %120, !dbg !137
  %353 = sext i32 %350 to i64, !dbg !138
  %354 = getelementptr float, ptr addrspace(1) %0, i64 %353, !dbg !138
  %355 = sext i32 %352 to i64, !dbg !138
  %356 = getelementptr float, ptr addrspace(1) %0, i64 %355, !dbg !138
  %357 = and i1 %11, %347, !dbg !139
  %358 = and i1 %348, %11, !dbg !139
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %354, i1 %357, i32 0, i1 %357) #1, !dbg !140
  %360 = bitcast i32 %359 to float, !dbg !140
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %356, i1 %358, i32 0, i1 %358) #1, !dbg !140
  %362 = bitcast i32 %361 to float, !dbg !140
  %363 = fadd float %345, %360, !dbg !141
  %364 = fadd float %346, %362, !dbg !141
  %365 = select i1 %31, float 1.000000e+00, float 0.000000e+00, !dbg !142
  %366 = select i1 %118, float 1.000000e+00, float 0.000000e+00, !dbg !142
  %367 = select i1 %173, float 1.000000e+00, float 0.000000e+00, !dbg !143
  %368 = select i1 %187, float 1.000000e+00, float 0.000000e+00, !dbg !143
  %369 = fadd float %367, %365, !dbg !144
  %370 = fadd float %368, %366, !dbg !144
  %371 = select i1 %80, float 1.000000e+00, float 0.000000e+00, !dbg !145
  %372 = select i1 %165, float 1.000000e+00, float 0.000000e+00, !dbg !145
  %373 = fadd float %371, %369, !dbg !146
  %374 = fadd float %372, %370, !dbg !146
  %375 = select i1 %54, float 1.000000e+00, float 0.000000e+00, !dbg !147
  %376 = select i1 %139, float 1.000000e+00, float 0.000000e+00, !dbg !147
  %377 = fadd float %375, %373, !dbg !148
  %378 = fadd float %376, %374, !dbg !148
  %379 = select i1 %176, float 1.000000e+00, float 0.000000e+00, !dbg !149
  %380 = select i1 %190, float 1.000000e+00, float 0.000000e+00, !dbg !149
  %381 = fadd float %379, %377, !dbg !150
  %382 = fadd float %380, %378, !dbg !150
  %383 = select i1 %178, float 1.000000e+00, float 0.000000e+00, !dbg !151
  %384 = select i1 %192, float 1.000000e+00, float 0.000000e+00, !dbg !151
  %385 = fadd float %383, %381, !dbg !152
  %386 = fadd float %384, %382, !dbg !152
  %387 = select i1 %180, float 1.000000e+00, float 0.000000e+00, !dbg !153
  %388 = select i1 %194, float 1.000000e+00, float 0.000000e+00, !dbg !153
  %389 = fadd float %387, %385, !dbg !154
  %390 = fadd float %388, %386, !dbg !154
  %391 = select i1 %182, float 1.000000e+00, float 0.000000e+00, !dbg !155
  %392 = select i1 %196, float 1.000000e+00, float 0.000000e+00, !dbg !155
  %393 = fadd float %391, %389, !dbg !156
  %394 = fadd float %392, %390, !dbg !156
  %395 = select i1 %83, float 1.000000e+00, float 0.000000e+00, !dbg !157
  %396 = select i1 %199, float 1.000000e+00, float 0.000000e+00, !dbg !157
  %397 = fadd float %395, %393, !dbg !158
  %398 = fadd float %396, %394, !dbg !158
  %399 = select i1 %184, float 1.000000e+00, float 0.000000e+00, !dbg !159
  %400 = select i1 %205, float 1.000000e+00, float 0.000000e+00, !dbg !159
  %401 = fadd float %399, %397, !dbg !160
  %402 = fadd float %400, %398, !dbg !160
  %403 = select i1 %93, float 1.000000e+00, float 0.000000e+00, !dbg !161
  %404 = select i1 %211, float 1.000000e+00, float 0.000000e+00, !dbg !161
  %405 = fadd float %403, %401, !dbg !162
  %406 = fadd float %404, %402, !dbg !162
  %407 = select i1 %99, float 1.000000e+00, float 0.000000e+00, !dbg !163
  %408 = select i1 %217, float 1.000000e+00, float 0.000000e+00, !dbg !163
  %409 = fadd float %407, %405, !dbg !164
  %410 = fadd float %408, %406, !dbg !164
  %411 = select i1 %292, float 1.000000e+00, float 0.000000e+00, !dbg !165
  %412 = select i1 %294, float 1.000000e+00, float 0.000000e+00, !dbg !165
  %413 = fadd float %411, %409, !dbg !166
  %414 = fadd float %412, %410, !dbg !166
  %415 = select i1 %311, float 1.000000e+00, float 0.000000e+00, !dbg !167
  %416 = select i1 %312, float 1.000000e+00, float 0.000000e+00, !dbg !167
  %417 = fadd float %415, %413, !dbg !168
  %418 = fadd float %416, %414, !dbg !168
  %419 = select i1 %329, float 1.000000e+00, float 0.000000e+00, !dbg !169
  %420 = select i1 %330, float 1.000000e+00, float 0.000000e+00, !dbg !169
  %421 = fadd float %419, %417, !dbg !170
  %422 = fadd float %420, %418, !dbg !170
  %423 = select i1 %347, float 1.000000e+00, float 0.000000e+00, !dbg !171
  %424 = select i1 %348, float 1.000000e+00, float 0.000000e+00, !dbg !171
  %425 = fadd float %423, %421, !dbg !172
  %426 = fadd float %424, %422, !dbg !172
  %427 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %363, float %425) #1, !dbg !173
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %364, float %426) #1, !dbg !173
  %429 = sext i32 %9 to i64, !dbg !174
  %430 = getelementptr float, ptr addrspace(1) %1, i64 %429, !dbg !174
  %431 = bitcast float %427 to i32, !dbg !175
  %432 = bitcast float %428 to i32, !dbg !175
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %431, i32 %432, ptr addrspace(1) %430, i1 %11) #1, !dbg !175
  ret void, !dbg !176
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crv4ijuxnfap5qukk4sj4lgrtuuh3arnmtajhth4rbmrxmcqct5c.py", directory: "inductor_cache/rv")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_36", linkageName: "triton_poi_fused__adaptive_avg_pool2d_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 35, column: 51, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 26, scope: !7)
!21 = !DILocation(line: 30, column: 18, scope: !7)
!22 = !DILocation(line: 33, column: 18, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 36, column: 16, scope: !7)
!26 = !DILocation(line: 35, column: 48, scope: !7)
!27 = !DILocation(line: 35, column: 57, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 79, scope: !7)
!30 = !DILocation(line: 35, column: 72, scope: !7)
!31 = !DILocation(line: 39, column: 53, scope: !7)
!32 = !DILocation(line: 39, column: 62, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 44, column: 53, scope: !7)
!35 = !DILocation(line: 44, column: 62, scope: !7)
!36 = !DILocation(line: 44, column: 31, scope: !7)
!37 = !DILocation(line: 46, column: 17, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 90, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 19, scope: !7)
!41 = !DILocation(line: 49, column: 53, scope: !7)
!42 = !DILocation(line: 49, column: 62, scope: !7)
!43 = !DILocation(line: 49, column: 31, scope: !7)
!44 = !DILocation(line: 49, column: 85, scope: !7)
!45 = !DILocation(line: 54, column: 53, scope: !7)
!46 = !DILocation(line: 54, column: 62, scope: !7)
!47 = !DILocation(line: 54, column: 31, scope: !7)
!48 = !DILocation(line: 57, column: 53, scope: !7)
!49 = !DILocation(line: 57, column: 62, scope: !7)
!50 = !DILocation(line: 57, column: 31, scope: !7)
!51 = !DILocation(line: 60, column: 54, scope: !7)
!52 = !DILocation(line: 60, column: 63, scope: !7)
!53 = !DILocation(line: 60, column: 31, scope: !7)
!54 = !DILocation(line: 63, column: 54, scope: !7)
!55 = !DILocation(line: 63, column: 63, scope: !7)
!56 = !DILocation(line: 63, column: 31, scope: !7)
!57 = !DILocation(line: 41, column: 17, scope: !7)
!58 = !DILocation(line: 42, column: 20, scope: !7)
!59 = !DILocation(line: 87, column: 20, scope: !7)
!60 = !DILocation(line: 43, column: 19, scope: !7)
!61 = !DILocation(line: 44, column: 85, scope: !7)
!62 = !DILocation(line: 76, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 68, column: 54, scope: !7)
!65 = !DILocation(line: 68, column: 63, scope: !7)
!66 = !DILocation(line: 68, column: 31, scope: !7)
!67 = !DILocation(line: 68, column: 86, scope: !7)
!68 = !DILocation(line: 71, column: 54, scope: !7)
!69 = !DILocation(line: 71, column: 63, scope: !7)
!70 = !DILocation(line: 71, column: 31, scope: !7)
!71 = !DILocation(line: 73, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 54, scope: !7)
!73 = !DILocation(line: 74, column: 63, scope: !7)
!74 = !DILocation(line: 74, column: 31, scope: !7)
!75 = !DILocation(line: 74, column: 86, scope: !7)
!76 = !DILocation(line: 77, column: 54, scope: !7)
!77 = !DILocation(line: 77, column: 63, scope: !7)
!78 = !DILocation(line: 77, column: 31, scope: !7)
!79 = !DILocation(line: 77, column: 86, scope: !7)
!80 = !DILocation(line: 51, column: 17, scope: !7)
!81 = !DILocation(line: 52, column: 20, scope: !7)
!82 = !DILocation(line: 84, column: 20, scope: !7)
!83 = !DILocation(line: 38, column: 19, scope: !7)
!84 = !DILocation(line: 39, column: 85, scope: !7)
!85 = !DILocation(line: 62, column: 20, scope: !7)
!86 = !DILocation(line: 53, column: 20, scope: !7)
!87 = !DILocation(line: 54, column: 85, scope: !7)
!88 = !DILocation(line: 56, column: 20, scope: !7)
!89 = !DILocation(line: 57, column: 85, scope: !7)
!90 = !DILocation(line: 59, column: 20, scope: !7)
!91 = !DILocation(line: 60, column: 86, scope: !7)
!92 = !DILocation(line: 63, column: 86, scope: !7)
!93 = !DILocation(line: 70, column: 20, scope: !7)
!94 = !DILocation(line: 71, column: 86, scope: !7)
!95 = !DILocation(line: 39, column: 77, scope: !7)
!96 = !DILocation(line: 40, column: 20, scope: !7)
!97 = !DILocation(line: 44, column: 77, scope: !7)
!98 = !DILocation(line: 45, column: 20, scope: !7)
!99 = !DILocation(line: 49, column: 77, scope: !7)
!100 = !DILocation(line: 50, column: 20, scope: !7)
!101 = !DILocation(line: 54, column: 77, scope: !7)
!102 = !DILocation(line: 55, column: 20, scope: !7)
!103 = !DILocation(line: 57, column: 77, scope: !7)
!104 = !DILocation(line: 58, column: 20, scope: !7)
!105 = !DILocation(line: 60, column: 78, scope: !7)
!106 = !DILocation(line: 61, column: 20, scope: !7)
!107 = !DILocation(line: 63, column: 78, scope: !7)
!108 = !DILocation(line: 64, column: 20, scope: !7)
!109 = !DILocation(line: 68, column: 78, scope: !7)
!110 = !DILocation(line: 69, column: 20, scope: !7)
!111 = !DILocation(line: 71, column: 78, scope: !7)
!112 = !DILocation(line: 72, column: 20, scope: !7)
!113 = !DILocation(line: 74, column: 78, scope: !7)
!114 = !DILocation(line: 75, column: 20, scope: !7)
!115 = !DILocation(line: 77, column: 78, scope: !7)
!116 = !DILocation(line: 78, column: 20, scope: !7)
!117 = !DILocation(line: 81, column: 20, scope: !7)
!118 = !DILocation(line: 82, column: 54, scope: !7)
!119 = !DILocation(line: 82, column: 63, scope: !7)
!120 = !DILocation(line: 82, column: 31, scope: !7)
!121 = !DILocation(line: 82, column: 86, scope: !7)
!122 = !DILocation(line: 82, column: 78, scope: !7)
!123 = !DILocation(line: 83, column: 20, scope: !7)
!124 = !DILocation(line: 85, column: 54, scope: !7)
!125 = !DILocation(line: 85, column: 63, scope: !7)
!126 = !DILocation(line: 85, column: 31, scope: !7)
!127 = !DILocation(line: 85, column: 86, scope: !7)
!128 = !DILocation(line: 85, column: 78, scope: !7)
!129 = !DILocation(line: 86, column: 20, scope: !7)
!130 = !DILocation(line: 88, column: 54, scope: !7)
!131 = !DILocation(line: 88, column: 63, scope: !7)
!132 = !DILocation(line: 88, column: 31, scope: !7)
!133 = !DILocation(line: 88, column: 86, scope: !7)
!134 = !DILocation(line: 88, column: 78, scope: !7)
!135 = !DILocation(line: 89, column: 20, scope: !7)
!136 = !DILocation(line: 91, column: 54, scope: !7)
!137 = !DILocation(line: 91, column: 63, scope: !7)
!138 = !DILocation(line: 91, column: 31, scope: !7)
!139 = !DILocation(line: 91, column: 86, scope: !7)
!140 = !DILocation(line: 91, column: 78, scope: !7)
!141 = !DILocation(line: 92, column: 20, scope: !7)
!142 = !DILocation(line: 95, column: 34, scope: !7)
!143 = !DILocation(line: 98, column: 35, scope: !7)
!144 = !DILocation(line: 99, column: 20, scope: !7)
!145 = !DILocation(line: 102, column: 35, scope: !7)
!146 = !DILocation(line: 103, column: 20, scope: !7)
!147 = !DILocation(line: 106, column: 35, scope: !7)
!148 = !DILocation(line: 107, column: 20, scope: !7)
!149 = !DILocation(line: 110, column: 35, scope: !7)
!150 = !DILocation(line: 111, column: 20, scope: !7)
!151 = !DILocation(line: 114, column: 35, scope: !7)
!152 = !DILocation(line: 115, column: 20, scope: !7)
!153 = !DILocation(line: 118, column: 35, scope: !7)
!154 = !DILocation(line: 119, column: 20, scope: !7)
!155 = !DILocation(line: 122, column: 35, scope: !7)
!156 = !DILocation(line: 123, column: 20, scope: !7)
!157 = !DILocation(line: 126, column: 35, scope: !7)
!158 = !DILocation(line: 127, column: 20, scope: !7)
!159 = !DILocation(line: 130, column: 37, scope: !7)
!160 = !DILocation(line: 131, column: 22, scope: !7)
!161 = !DILocation(line: 134, column: 37, scope: !7)
!162 = !DILocation(line: 135, column: 22, scope: !7)
!163 = !DILocation(line: 138, column: 37, scope: !7)
!164 = !DILocation(line: 139, column: 22, scope: !7)
!165 = !DILocation(line: 142, column: 37, scope: !7)
!166 = !DILocation(line: 143, column: 22, scope: !7)
!167 = !DILocation(line: 146, column: 37, scope: !7)
!168 = !DILocation(line: 147, column: 22, scope: !7)
!169 = !DILocation(line: 150, column: 37, scope: !7)
!170 = !DILocation(line: 151, column: 22, scope: !7)
!171 = !DILocation(line: 154, column: 37, scope: !7)
!172 = !DILocation(line: 155, column: 22, scope: !7)
!173 = !DILocation(line: 156, column: 21, scope: !7)
!174 = !DILocation(line: 157, column: 25, scope: !7)
!175 = !DILocation(line: 157, column: 38, scope: !7)
!176 = !DILocation(line: 157, column: 4, scope: !7)
