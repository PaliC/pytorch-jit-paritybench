; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %13 = sdiv i32 %.frozen, 4, !dbg !15
  %14 = mul i32 %13, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = icmp sgt i32 %.decomposed, 1, !dbg !17
  %16 = add i32 %10, -10, !dbg !18
  %17 = sext i32 %16 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = icmp sgt i32 %.decomposed, 0, !dbg !20
  %20 = add i32 %10, -9, !dbg !21
  %21 = add i32 %10, -8, !dbg !21
  %22 = sext i32 %20 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = sext i32 %21 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = icmp sgt i32 %.decomposed, -1, !dbg !23
  %27 = icmp ult i32 %.decomposed, 4, !dbg !24
  %28 = add i32 %10, -7, !dbg !25
  %29 = add i32 %10, -6, !dbg !25
  %30 = sext i32 %28 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !26
  %32 = sext i32 %29 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = add nsw i32 %.decomposed, 2, !dbg !27
  %35 = icmp ult i32 %34, 4, !dbg !27
  %36 = add i32 %10, -5, !dbg !28
  %37 = add i32 %10, -4, !dbg !28
  %38 = sext i32 %36 to i64, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !29
  %40 = sext i32 %37 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !29
  %42 = add i32 %10, -3, !dbg !30
  %43 = add i32 %10, -2, !dbg !30
  %44 = sext i32 %42 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !31
  %46 = sext i32 %43 to i64, !dbg !31
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !31
  %48 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !16
  %49 = insertelement <2 x i32> %48, i32 %13, i64 1, !dbg !16
  %50 = srem <2 x i32> %49, splat (i32 4), !dbg !16
  %51 = extractelement <2 x i32> %50, i64 1, !dbg !32
  %52 = icmp sgt i32 %51, 1, !dbg !33
  %53 = and i1 %15, %52, !dbg !34
  %54 = and i1 %12, %53, !dbg !35
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 %54, i32 -8388608, i1 %54, i32 -8388608, i1 %54) #1, !dbg !36
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !36
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !36
  %58 = and i1 %19, %52, !dbg !37
  %59 = icmp sgt <2 x i32> %50, <i32 0, i32 -1>, !dbg !20
  %60 = extractelement <2 x i1> %59, i64 0, !dbg !37
  %61 = and i1 %60, %52, !dbg !37
  %62 = and i1 %12, %58, !dbg !38
  %63 = and i1 %12, %61, !dbg !38
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %62, i32 -8388608, i1 %62) #1, !dbg !39
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %63, i32 -8388608, i1 %63) #1, !dbg !39
  %66 = and i1 %26, %52, !dbg !40
  %67 = and i1 %12, %66, !dbg !41
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #1, !dbg !42
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !42
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !42
  %71 = extractelement <2 x i32> %50, i64 0, !dbg !24
  %72 = add nsw i32 %71, 1, !dbg !24
  %73 = icmp ult i32 %72, 4, !dbg !24
  %74 = and i1 %27, %52, !dbg !43
  %75 = and i1 %73, %52, !dbg !43
  %76 = and i1 %12, %74, !dbg !44
  %77 = and i1 %12, %75, !dbg !44
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %76, i32 -8388608, i1 %76) #1, !dbg !45
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %77, i32 -8388608, i1 %77) #1, !dbg !45
  %80 = and i1 %52, %35, !dbg !46
  %81 = and i1 %12, %80, !dbg !47
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81) #1, !dbg !48
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !48
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !48
  %85 = icmp sgt i32 %51, 0, !dbg !49
  %86 = and i1 %15, %85, !dbg !50
  %87 = and i1 %12, %86, !dbg !51
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #1, !dbg !52
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !52
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !52
  %91 = and i1 %19, %85, !dbg !53
  %92 = and i1 %60, %85, !dbg !53
  %93 = and i1 %12, %91, !dbg !54
  %94 = and i1 %12, %92, !dbg !54
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %93, i32 -8388608, i1 %93) #1, !dbg !55
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %94, i32 -8388608, i1 %94) #1, !dbg !55
  %97 = and i1 %26, %85, !dbg !56
  %98 = and i1 %12, %97, !dbg !57
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %98, i32 -8388608, i1 %98, i32 -8388608, i1 %98) #1, !dbg !58
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !58
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !58
  %102 = and i1 %27, %85, !dbg !59
  %103 = and i1 %73, %85, !dbg !59
  %104 = and i1 %12, %102, !dbg !60
  %105 = and i1 %12, %103, !dbg !60
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %104, i32 -8388608, i1 %104) #1, !dbg !61
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %105, i32 -8388608, i1 %105) #1, !dbg !61
  %108 = and i1 %85, %35, !dbg !62
  %109 = and i1 %12, %108, !dbg !63
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %109, i32 -8388608, i1 %109, i32 -8388608, i1 %109) #1, !dbg !64
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !64
  %112 = extractvalue { i32, i32 } %110, 1, !dbg !64
  %113 = extractelement <2 x i1> %59, i64 1, !dbg !65
  %114 = and i1 %15, %113, !dbg !65
  %115 = and i1 %12, %114, !dbg !66
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115) #1, !dbg !67
  %117 = extractvalue { i32, i32 } %116, 0, !dbg !67
  %118 = extractvalue { i32, i32 } %116, 1, !dbg !67
  %119 = and i1 %19, %113, !dbg !68
  %120 = and i1 %60, %113, !dbg !68
  %121 = add i32 %10, -1, !dbg !69
  %122 = sext i32 %121 to i64, !dbg !70
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !70
  %124 = sext i32 %11 to i64, !dbg !70
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !70
  %126 = getelementptr i8, ptr addrspace(1) %125, i64 -4, !dbg !70
  %127 = and i1 %12, %119, !dbg !71
  %128 = and i1 %12, %120, !dbg !71
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %127, i32 -8388608, i1 %127) #1, !dbg !72
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %128, i32 -8388608, i1 %128) #1, !dbg !72
  %131 = or i32 %51, %.decomposed, !dbg !73
  %132 = icmp sgt i32 %131, -1, !dbg !73
  %133 = sext i32 %10 to i64, !dbg !74
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !74
  %135 = and i1 %12, %132, !dbg !75
  %136 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %134, i1 %135, i32 -8388608, i1 %135, i32 -8388608, i1 %135) #1, !dbg !76
  %137 = extractvalue { i32, i32 } %136, 0, !dbg !76
  %138 = extractvalue { i32, i32 } %136, 1, !dbg !76
  %139 = and i1 %27, %113, !dbg !77
  %140 = and i1 %73, %113, !dbg !77
  %141 = add i32 %10, 2, !dbg !78
  %142 = sext i32 %141 to i64, !dbg !79
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !79
  %144 = and i1 %12, %139, !dbg !80
  %145 = and i1 %12, %140, !dbg !80
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %144, i32 -8388608, i1 %144) #1, !dbg !81
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %145, i32 -8388608, i1 %145) #1, !dbg !81
  %148 = and i1 %113, %35, !dbg !82
  %149 = and i1 %12, %148, !dbg !83
  %150 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %143, i1 %149, i32 -8388608, i1 %149, i32 -8388608, i1 %149) #1, !dbg !84
  %151 = extractvalue { i32, i32 } %150, 0, !dbg !84
  %152 = extractvalue { i32, i32 } %150, 1, !dbg !84
  %153 = add nsw i32 %51, 1, !dbg !85
  %154 = icmp ult i32 %153, 4, !dbg !85
  %155 = and i1 %15, %154, !dbg !86
  %156 = and i1 %12, %155, !dbg !87
  %157 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %143, i1 %156, i32 -8388608, i1 %156, i32 -8388608, i1 %156) #1, !dbg !88
  %158 = extractvalue { i32, i32 } %157, 0, !dbg !88
  %159 = extractvalue { i32, i32 } %157, 1, !dbg !88
  %160 = and i1 %19, %154, !dbg !89
  %161 = and i1 %60, %154, !dbg !89
  %162 = add i32 %10, 3, !dbg !90
  %163 = add i32 %10, 4, !dbg !90
  %164 = sext i32 %162 to i64, !dbg !91
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !91
  %166 = sext i32 %163 to i64, !dbg !91
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !91
  %168 = and i1 %12, %160, !dbg !92
  %169 = and i1 %12, %161, !dbg !92
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %168, i32 -8388608, i1 %168) #1, !dbg !93
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %169, i32 -8388608, i1 %169) #1, !dbg !93
  %172 = and i1 %26, %154, !dbg !94
  %173 = and i1 %12, %172, !dbg !95
  %174 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %167, i1 %173, i32 -8388608, i1 %173, i32 -8388608, i1 %173) #1, !dbg !96
  %175 = extractvalue { i32, i32 } %174, 0, !dbg !96
  %176 = extractvalue { i32, i32 } %174, 1, !dbg !96
  %177 = or i32 %153, %.decomposed, !dbg !97
  %178 = icmp ult i32 %177, 4, !dbg !97
  %179 = add i32 %10, 5, !dbg !98
  %180 = add i32 %10, 6, !dbg !98
  %181 = sext i32 %179 to i64, !dbg !99
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !99
  %183 = sext i32 %180 to i64, !dbg !99
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !99
  %185 = and i1 %12, %178, !dbg !100
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %185, i32 -8388608, i1 %185) #1, !dbg !101
  %187 = add nsw i32 %51, 2, !dbg !32
  %188 = icmp ult i32 %187, 4, !dbg !32
  %189 = and i1 %15, %188, !dbg !102
  %190 = and i1 %12, %189, !dbg !103
  %191 = and i1 %19, %188, !dbg !104
  %192 = and i1 %60, %188, !dbg !104
  %193 = add i32 %10, 7, !dbg !105
  %194 = add i32 %10, 8, !dbg !105
  %195 = sext i32 %193 to i64, !dbg !106
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !106
  %197 = sext i32 %194 to i64, !dbg !106
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !106
  %199 = and i1 %12, %191, !dbg !107
  %200 = and i1 %12, %192, !dbg !107
  %201 = and i1 %26, %188, !dbg !108
  %202 = and i1 %12, %201, !dbg !109
  %203 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !110
  %204 = insertelement <4 x i32> %203, i32 %187, i64 1, !dbg !110
  %205 = insertelement <4 x i32> %204, i32 %153, i64 2, !dbg !110
  %206 = shufflevector <4 x i32> %205, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 0>, !dbg !110
  %207 = insertelement <4 x i32> poison, i32 %187, i64 0, !dbg !110
  %208 = insertelement <4 x i32> %207, i32 %.decomposed, i64 1, !dbg !110
  %209 = insertelement <4 x i32> %208, i32 %34, i64 2, !dbg !110
  %210 = insertelement <4 x i32> %209, i32 %153, i64 3, !dbg !110
  %211 = or <4 x i32> %206, %210, !dbg !110
  %212 = icmp ult <4 x i32> %211, splat (i32 4), !dbg !110
  %213 = extractelement <4 x i1> %212, i64 3, !dbg !100
  %214 = and i1 %12, %213, !dbg !100
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %214, i32 -8388608, i1 %214) #1, !dbg !101
  %216 = extractelement <4 x i1> %212, i64 2, !dbg !111
  %217 = and i1 %12, %216, !dbg !111
  %218 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %184, i1 %217, i32 -8388608, i1 %217, i32 -8388608, i1 %217) #1, !dbg !112
  %219 = extractvalue { i32, i32 } %218, 0, !dbg !112
  %220 = extractvalue { i32, i32 } %218, 1, !dbg !112
  %221 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %184, i1 %190, i32 -8388608, i1 %190, i32 -8388608, i1 %190) #1, !dbg !113
  %222 = extractvalue { i32, i32 } %221, 0, !dbg !113
  %223 = extractvalue { i32, i32 } %221, 1, !dbg !113
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %199, i32 -8388608, i1 %199) #1, !dbg !114
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %200, i32 -8388608, i1 %200) #1, !dbg !114
  %226 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %198, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #1, !dbg !115
  %227 = extractvalue { i32, i32 } %226, 0, !dbg !115
  %228 = extractvalue { i32, i32 } %226, 1, !dbg !115
  %229 = add i32 %10, 9, !dbg !116
  %230 = add i32 %10, 10, !dbg !116
  %231 = sext i32 %229 to i64, !dbg !117
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !117
  %233 = sext i32 %230 to i64, !dbg !117
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !117
  %235 = extractelement <4 x i1> %212, i64 1, !dbg !118
  %236 = and i1 %12, %235, !dbg !118
  %237 = extractelement <4 x i1> %212, i64 0, !dbg !118
  %238 = and i1 %12, %237, !dbg !118
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %236, i32 -8388608, i1 %236) #1, !dbg !119
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %238, i32 -8388608, i1 %238) #1, !dbg !119
  %241 = or i32 %187, %34, !dbg !120
  %242 = icmp ult i32 %241, 4, !dbg !120
  %243 = and i1 %12, %242, !dbg !121
  %244 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %234, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243) #1, !dbg !122
  %245 = extractvalue { i32, i32 } %244, 0, !dbg !122
  %246 = extractvalue { i32, i32 } %244, 1, !dbg !122
  %247 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !36
  %248 = insertelement <2 x i32> %247, i32 %57, i64 1, !dbg !36
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !36
  %250 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !39
  %251 = insertelement <2 x i32> %250, i32 %65, i64 1, !dbg !39
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !39
  %253 = fcmp ogt <2 x float> %252, %249, !dbg !123
  %254 = fcmp uno <2 x float> %252, zeroinitializer, !dbg !127
  %255 = or <2 x i1> %253, %254, !dbg !128
  %.v = select <2 x i1> %255, <2 x i32> %251, <2 x i32> %248, !dbg !129
  %256 = bitcast <2 x i32> %.v to <2 x float>, !dbg !129
  %257 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !42
  %258 = insertelement <2 x i32> %257, i32 %70, i64 1, !dbg !42
  %259 = bitcast <2 x i32> %258 to <2 x float>, !dbg !42
  %260 = fcmp olt <2 x float> %256, %259, !dbg !130
  %261 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !45
  %262 = insertelement <2 x i32> %261, i32 %79, i64 1, !dbg !45
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !45
  %264 = fcmp uno <2 x float> %259, zeroinitializer, !dbg !132
  %265 = or <2 x i1> %260, %264, !dbg !133
  %.v1 = select <2 x i1> %265, <2 x i32> %258, <2 x i32> %.v, !dbg !134
  %266 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !134
  %267 = fcmp olt <2 x float> %266, %263, !dbg !135
  %268 = fcmp uno <2 x float> %263, zeroinitializer, !dbg !137
  %269 = or <2 x i1> %268, %267, !dbg !138
  %.v2 = select <2 x i1> %269, <2 x i32> %262, <2 x i32> %.v1, !dbg !139
  %270 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !139
  %271 = zext <2 x i1> %253 to <2 x i8>, !dbg !140
  %272 = select <2 x i1> %260, <2 x i8> splat (i8 2), <2 x i8> %271, !dbg !141
  %273 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !48
  %274 = insertelement <2 x i32> %273, i32 %84, i64 1, !dbg !48
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !48
  %276 = fcmp uno <2 x float> %275, zeroinitializer, !dbg !142
  %277 = fcmp olt <2 x float> %270, %275, !dbg !144
  %278 = or <2 x i1> %276, %277, !dbg !145
  %.v3 = select <2 x i1> %278, <2 x i32> %274, <2 x i32> %.v2, !dbg !146
  %279 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !146
  %280 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !52
  %281 = insertelement <2 x i32> %280, i32 %90, i64 1, !dbg !52
  %282 = bitcast <2 x i32> %281 to <2 x float>, !dbg !52
  %283 = fcmp olt <2 x float> %279, %282, !dbg !147
  %284 = fcmp uno <2 x float> %282, zeroinitializer, !dbg !149
  %285 = or <2 x i1> %284, %283, !dbg !150
  %.v4 = select <2 x i1> %285, <2 x i32> %281, <2 x i32> %.v3, !dbg !151
  %286 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !151
  %287 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !55
  %288 = insertelement <2 x i32> %287, i32 %96, i64 1, !dbg !55
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !55
  %290 = fcmp olt <2 x float> %286, %289, !dbg !152
  %291 = fcmp uno <2 x float> %289, zeroinitializer, !dbg !154
  %292 = or <2 x i1> %291, %290, !dbg !155
  %.v5 = select <2 x i1> %292, <2 x i32> %288, <2 x i32> %.v4, !dbg !156
  %293 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !156
  %294 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !58
  %295 = insertelement <2 x i32> %294, i32 %101, i64 1, !dbg !58
  %296 = bitcast <2 x i32> %295 to <2 x float>, !dbg !58
  %297 = fcmp olt <2 x float> %293, %296, !dbg !157
  %298 = fcmp uno <2 x float> %296, zeroinitializer, !dbg !159
  %299 = or <2 x i1> %298, %297, !dbg !160
  %.v6 = select <2 x i1> %299, <2 x i32> %295, <2 x i32> %.v5, !dbg !161
  %300 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !161
  %301 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !61
  %302 = insertelement <2 x i32> %301, i32 %107, i64 1, !dbg !61
  %303 = bitcast <2 x i32> %302 to <2 x float>, !dbg !61
  %304 = fcmp olt <2 x float> %300, %303, !dbg !162
  %305 = fcmp uno <2 x float> %303, zeroinitializer, !dbg !164
  %306 = or <2 x i1> %305, %304, !dbg !165
  %.v7 = select <2 x i1> %306, <2 x i32> %302, <2 x i32> %.v6, !dbg !166
  %307 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !166
  %308 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !64
  %309 = insertelement <2 x i32> %308, i32 %112, i64 1, !dbg !64
  %310 = bitcast <2 x i32> %309 to <2 x float>, !dbg !64
  %311 = fcmp olt <2 x float> %307, %310, !dbg !167
  %312 = fcmp uno <2 x float> %310, zeroinitializer, !dbg !169
  %313 = or <2 x i1> %312, %311, !dbg !170
  %.v8 = select <2 x i1> %313, <2 x i32> %309, <2 x i32> %.v7, !dbg !171
  %314 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !171
  %315 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !67
  %316 = insertelement <2 x i32> %315, i32 %118, i64 1, !dbg !67
  %317 = bitcast <2 x i32> %316 to <2 x float>, !dbg !67
  %318 = fcmp olt <2 x float> %314, %317, !dbg !172
  %319 = fcmp uno <2 x float> %317, zeroinitializer, !dbg !174
  %320 = or <2 x i1> %319, %318, !dbg !175
  %.v9 = select <2 x i1> %320, <2 x i32> %316, <2 x i32> %.v8, !dbg !176
  %321 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !176
  %322 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !72
  %323 = insertelement <2 x i32> %322, i32 %130, i64 1, !dbg !72
  %324 = bitcast <2 x i32> %323 to <2 x float>, !dbg !72
  %325 = fcmp olt <2 x float> %321, %324, !dbg !177
  %326 = fcmp uno <2 x float> %324, zeroinitializer, !dbg !179
  %327 = or <2 x i1> %326, %325, !dbg !180
  %.v10 = select <2 x i1> %327, <2 x i32> %323, <2 x i32> %.v9, !dbg !181
  %328 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !181
  %329 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !76
  %330 = insertelement <2 x i32> %329, i32 %138, i64 1, !dbg !76
  %331 = bitcast <2 x i32> %330 to <2 x float>, !dbg !76
  %332 = fcmp olt <2 x float> %328, %331, !dbg !182
  %333 = fcmp uno <2 x float> %331, zeroinitializer, !dbg !184
  %334 = or <2 x i1> %333, %332, !dbg !185
  %.v11 = select <2 x i1> %334, <2 x i32> %330, <2 x i32> %.v10, !dbg !186
  %335 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !186
  %336 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !81
  %337 = insertelement <2 x i32> %336, i32 %147, i64 1, !dbg !81
  %338 = bitcast <2 x i32> %337 to <2 x float>, !dbg !81
  %339 = fcmp olt <2 x float> %335, %338, !dbg !187
  %340 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !84
  %341 = insertelement <2 x i32> %340, i32 %152, i64 1, !dbg !84
  %342 = bitcast <2 x i32> %341 to <2 x float>, !dbg !84
  %343 = fcmp uno <2 x float> %338, zeroinitializer, !dbg !189
  %344 = or <2 x i1> %343, %339, !dbg !190
  %.v12 = select <2 x i1> %344, <2 x i32> %337, <2 x i32> %.v11, !dbg !191
  %345 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !191
  %346 = fcmp olt <2 x float> %345, %342, !dbg !192
  %347 = fcmp uno <2 x float> %342, zeroinitializer, !dbg !194
  %348 = or <2 x i1> %347, %346, !dbg !195
  %.v13 = select <2 x i1> %348, <2 x i32> %341, <2 x i32> %.v12, !dbg !196
  %349 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !196
  %350 = select <2 x i1> %267, <2 x i8> splat (i8 3), <2 x i8> %272, !dbg !197
  %351 = select <2 x i1> %277, <2 x i8> splat (i8 4), <2 x i8> %350, !dbg !198
  %352 = select <2 x i1> %283, <2 x i8> splat (i8 5), <2 x i8> %351, !dbg !199
  %353 = select <2 x i1> %290, <2 x i8> splat (i8 6), <2 x i8> %352, !dbg !200
  %354 = select <2 x i1> %297, <2 x i8> splat (i8 7), <2 x i8> %353, !dbg !201
  %355 = select <2 x i1> %304, <2 x i8> splat (i8 8), <2 x i8> %354, !dbg !202
  %356 = select <2 x i1> %311, <2 x i8> splat (i8 9), <2 x i8> %355, !dbg !203
  %357 = select <2 x i1> %318, <2 x i8> splat (i8 10), <2 x i8> %356, !dbg !204
  %358 = select <2 x i1> %325, <2 x i8> splat (i8 11), <2 x i8> %357, !dbg !205
  %359 = select <2 x i1> %332, <2 x i8> splat (i8 12), <2 x i8> %358, !dbg !206
  %360 = select <2 x i1> %339, <2 x i8> splat (i8 13), <2 x i8> %359, !dbg !207
  %361 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !88
  %362 = insertelement <2 x i32> %361, i32 %159, i64 1, !dbg !88
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !88
  %364 = fcmp uno <2 x float> %363, zeroinitializer, !dbg !208
  %365 = fcmp olt <2 x float> %349, %363, !dbg !210
  %366 = or <2 x i1> %364, %365, !dbg !211
  %.v14 = select <2 x i1> %366, <2 x i32> %362, <2 x i32> %.v13, !dbg !212
  %367 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !212
  %368 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !93
  %369 = insertelement <2 x i32> %368, i32 %171, i64 1, !dbg !93
  %370 = bitcast <2 x i32> %369 to <2 x float>, !dbg !93
  %371 = fcmp olt <2 x float> %367, %370, !dbg !213
  %372 = fcmp uno <2 x float> %370, zeroinitializer, !dbg !215
  %373 = or <2 x i1> %372, %371, !dbg !216
  %.v15 = select <2 x i1> %373, <2 x i32> %369, <2 x i32> %.v14, !dbg !217
  %374 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !217
  %375 = insertelement <2 x i32> poison, i32 %175, i64 0, !dbg !96
  %376 = insertelement <2 x i32> %375, i32 %176, i64 1, !dbg !96
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !96
  %378 = fcmp olt <2 x float> %374, %377, !dbg !218
  %379 = fcmp uno <2 x float> %377, zeroinitializer, !dbg !220
  %380 = or <2 x i1> %379, %378, !dbg !221
  %.v16 = select <2 x i1> %380, <2 x i32> %376, <2 x i32> %.v15, !dbg !222
  %381 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !222
  %382 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !101
  %383 = insertelement <2 x i32> %382, i32 %215, i64 1, !dbg !101
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !101
  %385 = fcmp olt <2 x float> %381, %384, !dbg !223
  %386 = fcmp uno <2 x float> %384, zeroinitializer, !dbg !225
  %387 = or <2 x i1> %386, %385, !dbg !226
  %.v17 = select <2 x i1> %387, <2 x i32> %383, <2 x i32> %.v16, !dbg !227
  %388 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !227
  %389 = insertelement <2 x i32> poison, i32 %219, i64 0, !dbg !112
  %390 = insertelement <2 x i32> %389, i32 %220, i64 1, !dbg !112
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !112
  %392 = fcmp olt <2 x float> %388, %391, !dbg !228
  %393 = fcmp uno <2 x float> %391, zeroinitializer, !dbg !230
  %394 = or <2 x i1> %393, %392, !dbg !231
  %.v18 = select <2 x i1> %394, <2 x i32> %390, <2 x i32> %.v17, !dbg !232
  %395 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !232
  %396 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !113
  %397 = insertelement <2 x i32> %396, i32 %223, i64 1, !dbg !113
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !113
  %399 = fcmp olt <2 x float> %395, %398, !dbg !233
  %400 = fcmp uno <2 x float> %398, zeroinitializer, !dbg !235
  %401 = or <2 x i1> %400, %399, !dbg !236
  %.v19 = select <2 x i1> %401, <2 x i32> %397, <2 x i32> %.v18, !dbg !237
  %402 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !237
  %403 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !114
  %404 = insertelement <2 x i32> %403, i32 %225, i64 1, !dbg !114
  %405 = bitcast <2 x i32> %404 to <2 x float>, !dbg !114
  %406 = fcmp olt <2 x float> %402, %405, !dbg !238
  %407 = fcmp uno <2 x float> %405, zeroinitializer, !dbg !240
  %408 = or <2 x i1> %407, %406, !dbg !241
  %.v20 = select <2 x i1> %408, <2 x i32> %404, <2 x i32> %.v19, !dbg !242
  %409 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !242
  %410 = insertelement <2 x i32> poison, i32 %227, i64 0, !dbg !115
  %411 = insertelement <2 x i32> %410, i32 %228, i64 1, !dbg !115
  %412 = bitcast <2 x i32> %411 to <2 x float>, !dbg !115
  %413 = fcmp olt <2 x float> %409, %412, !dbg !243
  %414 = fcmp uno <2 x float> %412, zeroinitializer, !dbg !245
  %415 = or <2 x i1> %414, %413, !dbg !246
  %.v21 = select <2 x i1> %415, <2 x i32> %411, <2 x i32> %.v20, !dbg !247
  %416 = bitcast <2 x i32> %.v21 to <2 x float>, !dbg !247
  %417 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !119
  %418 = insertelement <2 x i32> %417, i32 %240, i64 1, !dbg !119
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !119
  %420 = fcmp olt <2 x float> %416, %419, !dbg !248
  %421 = fcmp uno <2 x float> %419, zeroinitializer, !dbg !250
  %422 = or <2 x i1> %421, %420, !dbg !251
  %.v22 = select <2 x i1> %422, <2 x i32> %418, <2 x i32> %.v21, !dbg !252
  %423 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !252
  %424 = insertelement <2 x i32> poison, i32 %245, i64 0, !dbg !122
  %425 = insertelement <2 x i32> %424, i32 %246, i64 1, !dbg !122
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !122
  %427 = fcmp olt <2 x float> %423, %426, !dbg !253
  %428 = bitcast i32 %245 to float, !dbg !255
  %429 = fcmp uno float %428, 0.000000e+00, !dbg !255
  %430 = bitcast i32 %246 to float, !dbg !255
  %431 = fcmp uno float %430, 0.000000e+00, !dbg !255
  %432 = extractelement <2 x i1> %427, i64 0, !dbg !256
  %433 = or i1 %429, %432, !dbg !256
  %434 = extractelement <2 x i1> %427, i64 1, !dbg !256
  %435 = or i1 %431, %434, !dbg !256
  %436 = select <2 x i1> %346, <2 x i8> splat (i8 14), <2 x i8> %360, !dbg !257
  %437 = select <2 x i1> %365, <2 x i8> splat (i8 15), <2 x i8> %436, !dbg !258
  %438 = select <2 x i1> %371, <2 x i8> splat (i8 16), <2 x i8> %437, !dbg !259
  %439 = select <2 x i1> %378, <2 x i8> splat (i8 17), <2 x i8> %438, !dbg !260
  %440 = select <2 x i1> %385, <2 x i8> splat (i8 18), <2 x i8> %439, !dbg !261
  %441 = select <2 x i1> %392, <2 x i8> splat (i8 19), <2 x i8> %440, !dbg !262
  %442 = select <2 x i1> %399, <2 x i8> splat (i8 20), <2 x i8> %441, !dbg !263
  %443 = select <2 x i1> %406, <2 x i8> splat (i8 21), <2 x i8> %442, !dbg !264
  %444 = select <2 x i1> %413, <2 x i8> splat (i8 22), <2 x i8> %443, !dbg !265
  %445 = select <2 x i1> %420, <2 x i8> splat (i8 23), <2 x i8> %444, !dbg !266
  %446 = select <2 x i1> %427, <2 x i8> splat (i8 24), <2 x i8> %445, !dbg !267
  %447 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !268
  %448 = extractelement <2 x i32> %.v22, i64 0, !dbg !269
  %449 = select i1 %433, i32 %245, i32 %448, !dbg !270
  %450 = extractelement <2 x i32> %.v22, i64 1, !dbg !269
  %451 = select i1 %435, i32 %246, i32 %450, !dbg !270
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %449, i32 %451, ptr addrspace(1) %447, i1 %12) #1, !dbg !269
  %452 = getelementptr i8, ptr addrspace(1) %2, i64 %133, !dbg !271
  %453 = bitcast <2 x i8> %446 to i16, !dbg !272
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %453, ptr addrspace(1) %452, i1 %12) #1, !dbg !272
  ret void, !dbg !273
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cswbpi2pk3rzn3duajjjplsmqrxjixefpgl67axlhq53bthfbcz6.py", directory: "inductor_cache/sw")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_1", linkageName: "triton_poi_fused_max_pool2d_with_indices_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 19, scope: !7)
!18 = !DILocation(line: 38, column: 39, scope: !7)
!19 = !DILocation(line: 38, column: 31, scope: !7)
!20 = !DILocation(line: 40, column: 21, scope: !7)
!21 = !DILocation(line: 44, column: 38, scope: !7)
!22 = !DILocation(line: 44, column: 31, scope: !7)
!23 = !DILocation(line: 47, column: 21, scope: !7)
!24 = !DILocation(line: 56, column: 20, scope: !7)
!25 = !DILocation(line: 58, column: 38, scope: !7)
!26 = !DILocation(line: 58, column: 31, scope: !7)
!27 = !DILocation(line: 63, column: 20, scope: !7)
!28 = !DILocation(line: 75, column: 38, scope: !7)
!29 = !DILocation(line: 75, column: 31, scope: !7)
!30 = !DILocation(line: 81, column: 38, scope: !7)
!31 = !DILocation(line: 81, column: 31, scope: !7)
!32 = !DILocation(line: 127, column: 21, scope: !7)
!33 = !DILocation(line: 29, column: 19, scope: !7)
!34 = !DILocation(line: 37, column: 19, scope: !7)
!35 = !DILocation(line: 38, column: 52, scope: !7)
!36 = !DILocation(line: 38, column: 44, scope: !7)
!37 = !DILocation(line: 43, column: 19, scope: !7)
!38 = !DILocation(line: 44, column: 51, scope: !7)
!39 = !DILocation(line: 44, column: 43, scope: !7)
!40 = !DILocation(line: 50, column: 19, scope: !7)
!41 = !DILocation(line: 51, column: 51, scope: !7)
!42 = !DILocation(line: 51, column: 43, scope: !7)
!43 = !DILocation(line: 57, column: 19, scope: !7)
!44 = !DILocation(line: 58, column: 51, scope: !7)
!45 = !DILocation(line: 58, column: 43, scope: !7)
!46 = !DILocation(line: 64, column: 19, scope: !7)
!47 = !DILocation(line: 65, column: 51, scope: !7)
!48 = !DILocation(line: 65, column: 43, scope: !7)
!49 = !DILocation(line: 68, column: 21, scope: !7)
!50 = !DILocation(line: 71, column: 20, scope: !7)
!51 = !DILocation(line: 72, column: 51, scope: !7)
!52 = !DILocation(line: 72, column: 43, scope: !7)
!53 = !DILocation(line: 74, column: 20, scope: !7)
!54 = !DILocation(line: 75, column: 51, scope: !7)
!55 = !DILocation(line: 75, column: 43, scope: !7)
!56 = !DILocation(line: 77, column: 20, scope: !7)
!57 = !DILocation(line: 78, column: 51, scope: !7)
!58 = !DILocation(line: 78, column: 43, scope: !7)
!59 = !DILocation(line: 80, column: 20, scope: !7)
!60 = !DILocation(line: 81, column: 51, scope: !7)
!61 = !DILocation(line: 81, column: 43, scope: !7)
!62 = !DILocation(line: 83, column: 20, scope: !7)
!63 = !DILocation(line: 84, column: 51, scope: !7)
!64 = !DILocation(line: 84, column: 43, scope: !7)
!65 = !DILocation(line: 90, column: 20, scope: !7)
!66 = !DILocation(line: 91, column: 51, scope: !7)
!67 = !DILocation(line: 91, column: 43, scope: !7)
!68 = !DILocation(line: 93, column: 20, scope: !7)
!69 = !DILocation(line: 94, column: 38, scope: !7)
!70 = !DILocation(line: 94, column: 31, scope: !7)
!71 = !DILocation(line: 94, column: 51, scope: !7)
!72 = !DILocation(line: 94, column: 43, scope: !7)
!73 = !DILocation(line: 96, column: 20, scope: !7)
!74 = !DILocation(line: 97, column: 31, scope: !7)
!75 = !DILocation(line: 97, column: 44, scope: !7)
!76 = !DILocation(line: 97, column: 36, scope: !7)
!77 = !DILocation(line: 99, column: 20, scope: !7)
!78 = !DILocation(line: 100, column: 35, scope: !7)
!79 = !DILocation(line: 100, column: 31, scope: !7)
!80 = !DILocation(line: 100, column: 48, scope: !7)
!81 = !DILocation(line: 100, column: 40, scope: !7)
!82 = !DILocation(line: 102, column: 20, scope: !7)
!83 = !DILocation(line: 103, column: 48, scope: !7)
!84 = !DILocation(line: 103, column: 40, scope: !7)
!85 = !DILocation(line: 108, column: 20, scope: !7)
!86 = !DILocation(line: 109, column: 20, scope: !7)
!87 = !DILocation(line: 110, column: 48, scope: !7)
!88 = !DILocation(line: 110, column: 40, scope: !7)
!89 = !DILocation(line: 112, column: 20, scope: !7)
!90 = !DILocation(line: 113, column: 35, scope: !7)
!91 = !DILocation(line: 113, column: 31, scope: !7)
!92 = !DILocation(line: 113, column: 48, scope: !7)
!93 = !DILocation(line: 113, column: 40, scope: !7)
!94 = !DILocation(line: 115, column: 20, scope: !7)
!95 = !DILocation(line: 116, column: 48, scope: !7)
!96 = !DILocation(line: 116, column: 40, scope: !7)
!97 = !DILocation(line: 118, column: 20, scope: !7)
!98 = !DILocation(line: 119, column: 35, scope: !7)
!99 = !DILocation(line: 119, column: 31, scope: !7)
!100 = !DILocation(line: 119, column: 48, scope: !7)
!101 = !DILocation(line: 119, column: 40, scope: !7)
!102 = !DILocation(line: 128, column: 22, scope: !7)
!103 = !DILocation(line: 129, column: 50, scope: !7)
!104 = !DILocation(line: 131, column: 22, scope: !7)
!105 = !DILocation(line: 132, column: 36, scope: !7)
!106 = !DILocation(line: 132, column: 32, scope: !7)
!107 = !DILocation(line: 132, column: 50, scope: !7)
!108 = !DILocation(line: 134, column: 22, scope: !7)
!109 = !DILocation(line: 135, column: 50, scope: !7)
!110 = !DILocation(line: 137, column: 22, scope: !7)
!111 = !DILocation(line: 122, column: 48, scope: !7)
!112 = !DILocation(line: 122, column: 40, scope: !7)
!113 = !DILocation(line: 129, column: 41, scope: !7)
!114 = !DILocation(line: 132, column: 41, scope: !7)
!115 = !DILocation(line: 135, column: 41, scope: !7)
!116 = !DILocation(line: 138, column: 36, scope: !7)
!117 = !DILocation(line: 138, column: 32, scope: !7)
!118 = !DILocation(line: 138, column: 50, scope: !7)
!119 = !DILocation(line: 138, column: 41, scope: !7)
!120 = !DILocation(line: 140, column: 22, scope: !7)
!121 = !DILocation(line: 141, column: 51, scope: !7)
!122 = !DILocation(line: 141, column: 42, scope: !7)
!123 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !126)
!124 = distinct !DILexicalBlockFile(scope: !7, file: !125, discriminator: 0)
!125 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!126 = !DILocation(line: 45, column: 42, scope: !7)
!127 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !126)
!128 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !126)
!129 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !126)
!130 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !131)
!131 = !DILocation(line: 52, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !131)
!134 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !131)
!135 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !136)
!136 = !DILocation(line: 59, column: 42, scope: !7)
!137 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !136)
!138 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !136)
!139 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !136)
!140 = !DILocation(line: 146, column: 38, scope: !7)
!141 = !DILocation(line: 149, column: 38, scope: !7)
!142 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !143)
!143 = !DILocation(line: 66, column: 42, scope: !7)
!144 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !143)
!145 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !143)
!146 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !143)
!147 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !148)
!148 = !DILocation(line: 73, column: 42, scope: !7)
!149 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !148)
!150 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !148)
!151 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !148)
!152 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !153)
!153 = !DILocation(line: 76, column: 42, scope: !7)
!154 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !153)
!155 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !153)
!156 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !153)
!157 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !158)
!158 = !DILocation(line: 79, column: 42, scope: !7)
!159 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !158)
!160 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !158)
!161 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !158)
!162 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !163)
!163 = !DILocation(line: 82, column: 42, scope: !7)
!164 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !163)
!165 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !163)
!166 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !163)
!167 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !168)
!168 = !DILocation(line: 85, column: 42, scope: !7)
!169 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !168)
!170 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !168)
!171 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !168)
!172 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !173)
!173 = !DILocation(line: 92, column: 42, scope: !7)
!174 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !173)
!175 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !173)
!176 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !173)
!177 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !178)
!178 = !DILocation(line: 95, column: 42, scope: !7)
!179 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !178)
!180 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !178)
!181 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !178)
!182 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !183)
!183 = !DILocation(line: 98, column: 42, scope: !7)
!184 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !183)
!185 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !183)
!186 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !183)
!187 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !188)
!188 = !DILocation(line: 101, column: 42, scope: !7)
!189 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !188)
!190 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !188)
!191 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !188)
!192 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !193)
!193 = !DILocation(line: 104, column: 42, scope: !7)
!194 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !193)
!195 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !193)
!196 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !193)
!197 = !DILocation(line: 152, column: 38, scope: !7)
!198 = !DILocation(line: 155, column: 38, scope: !7)
!199 = !DILocation(line: 158, column: 38, scope: !7)
!200 = !DILocation(line: 161, column: 38, scope: !7)
!201 = !DILocation(line: 164, column: 38, scope: !7)
!202 = !DILocation(line: 167, column: 38, scope: !7)
!203 = !DILocation(line: 170, column: 38, scope: !7)
!204 = !DILocation(line: 173, column: 38, scope: !7)
!205 = !DILocation(line: 176, column: 38, scope: !7)
!206 = !DILocation(line: 179, column: 38, scope: !7)
!207 = !DILocation(line: 182, column: 38, scope: !7)
!208 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !209)
!209 = !DILocation(line: 111, column: 42, scope: !7)
!210 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !209)
!211 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !209)
!212 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !209)
!213 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !214)
!214 = !DILocation(line: 114, column: 42, scope: !7)
!215 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !214)
!216 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !214)
!217 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !214)
!218 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !219)
!219 = !DILocation(line: 117, column: 42, scope: !7)
!220 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !219)
!221 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !219)
!222 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !219)
!223 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !224)
!224 = !DILocation(line: 120, column: 42, scope: !7)
!225 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !224)
!226 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !224)
!227 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !224)
!228 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !229)
!229 = !DILocation(line: 123, column: 42, scope: !7)
!230 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !229)
!231 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !229)
!232 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !229)
!233 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !234)
!234 = !DILocation(line: 130, column: 44, scope: !7)
!235 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !234)
!236 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !234)
!237 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !234)
!238 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !239)
!239 = !DILocation(line: 133, column: 44, scope: !7)
!240 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !239)
!241 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !239)
!242 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !239)
!243 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !244)
!244 = !DILocation(line: 136, column: 44, scope: !7)
!245 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !244)
!246 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !244)
!247 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !244)
!248 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !249)
!249 = !DILocation(line: 139, column: 44, scope: !7)
!250 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !249)
!251 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !249)
!252 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !249)
!253 = !DILocation(line: 118, column: 15, scope: !124, inlinedAt: !254)
!254 = !DILocation(line: 142, column: 44, scope: !7)
!255 = !DILocation(line: 120, column: 21, scope: !124, inlinedAt: !254)
!256 = !DILocation(line: 120, column: 16, scope: !124, inlinedAt: !254)
!257 = !DILocation(line: 185, column: 38, scope: !7)
!258 = !DILocation(line: 188, column: 38, scope: !7)
!259 = !DILocation(line: 191, column: 38, scope: !7)
!260 = !DILocation(line: 194, column: 38, scope: !7)
!261 = !DILocation(line: 197, column: 38, scope: !7)
!262 = !DILocation(line: 200, column: 38, scope: !7)
!263 = !DILocation(line: 203, column: 38, scope: !7)
!264 = !DILocation(line: 206, column: 38, scope: !7)
!265 = !DILocation(line: 209, column: 38, scope: !7)
!266 = !DILocation(line: 212, column: 38, scope: !7)
!267 = !DILocation(line: 215, column: 38, scope: !7)
!268 = !DILocation(line: 216, column: 25, scope: !7)
!269 = !DILocation(line: 216, column: 38, scope: !7)
!270 = !DILocation(line: 121, column: 29, scope: !124, inlinedAt: !254)
!271 = !DILocation(line: 217, column: 25, scope: !7)
!272 = !DILocation(line: 217, column: 38, scope: !7)
!273 = !DILocation(line: 217, column: 4, scope: !7)
