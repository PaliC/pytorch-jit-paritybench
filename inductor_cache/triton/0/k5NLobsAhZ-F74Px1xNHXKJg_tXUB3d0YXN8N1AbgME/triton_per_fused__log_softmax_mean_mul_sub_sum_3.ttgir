#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":19:0)
#loc1 = loc(unknown)
#loc51 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":62:26)
#loc73 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":83:26)
#loc84 = loc(callsite(#loc1 at #loc51))
#loc87 = loc(callsite(#loc1 at #loc73))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__log_softmax_mean_mul_sub_sum_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e-01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<2> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<3> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %2 = arith.muli %1, %cst_1 : tensor<1x64xi32, #blocked> loc(#loc3)
    %3 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.addptr %3, %2 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc4)
    %5 = tt.load %4 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc5)
    %6 = arith.addi %2, %cst_2 : tensor<1x64xi32, #blocked> loc(#loc6)
    %7 = tt.addptr %3, %6 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc7)
    %8 = tt.load %7 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = arith.addi %2, %cst_3 : tensor<1x64xi32, #blocked> loc(#loc9)
    %10 = tt.addptr %3, %9 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc10)
    %11 = tt.load %10 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = arith.addi %2, %cst_4 : tensor<1x64xi32, #blocked> loc(#loc12)
    %13 = tt.addptr %3, %12 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc13)
    %14 = tt.load %13 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc14)
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc15)
    %16 = tt.addptr %15, %2 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc15)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = tt.addptr %15, %6 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc17)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc18)
    %20 = tt.addptr %15, %9 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc19)
    %21 = tt.load %20 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc20)
    %22 = tt.addptr %15, %12 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc21)
    %23 = tt.load %22 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc22)
    %24 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc23)
    %25 = tt.addptr %24, %2 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc23)
    %26 = tt.load %25 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc24)
    %27 = tt.addptr %24, %6 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc25)
    %28 = tt.load %27 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc26)
    %29 = tt.addptr %24, %9 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc27)
    %30 = tt.load %29 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc28)
    %31 = tt.addptr %24, %12 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc29)
    %32 = tt.load %31 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc30)
    %33 = math.exp %5 : tensor<1x64xf32, #blocked> loc(#loc31)
    %34 = math.exp %8 : tensor<1x64xf32, #blocked> loc(#loc32)
    %35 = arith.addf %33, %34 : tensor<1x64xf32, #blocked> loc(#loc33)
    %36 = math.exp %11 : tensor<1x64xf32, #blocked> loc(#loc34)
    %37 = arith.addf %35, %36 : tensor<1x64xf32, #blocked> loc(#loc35)
    %38 = math.exp %14 : tensor<1x64xf32, #blocked> loc(#loc36)
    %39 = arith.addf %37, %38 : tensor<1x64xf32, #blocked> loc(#loc37)
    %40 = math.log %39 : tensor<1x64xf32, #blocked> loc(#loc38)
    %41 = arith.subf %5, %40 : tensor<1x64xf32, #blocked> loc(#loc39)
    %42 = arith.mulf %41, %17 : tensor<1x64xf32, #blocked> loc(#loc40)
    %43 = arith.subf %8, %40 : tensor<1x64xf32, #blocked> loc(#loc41)
    %44 = arith.mulf %43, %19 : tensor<1x64xf32, #blocked> loc(#loc42)
    %45 = arith.addf %42, %44 : tensor<1x64xf32, #blocked> loc(#loc43)
    %46 = arith.subf %11, %40 : tensor<1x64xf32, #blocked> loc(#loc44)
    %47 = arith.mulf %46, %21 : tensor<1x64xf32, #blocked> loc(#loc45)
    %48 = arith.addf %45, %47 : tensor<1x64xf32, #blocked> loc(#loc46)
    %49 = arith.subf %14, %40 : tensor<1x64xf32, #blocked> loc(#loc47)
    %50 = arith.mulf %49, %23 : tensor<1x64xf32, #blocked> loc(#loc48)
    %51 = arith.addf %48, %50 : tensor<1x64xf32, #blocked> loc(#loc49)
    %52 = "tt.reduce"(%51) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc51)), %arg6: f32 loc(callsite(#loc1 at #loc51))):
      %81 = arith.addf %arg5, %arg6 : f32 loc(#loc88)
      tt.reduce.return %81 : f32 loc(#loc83)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc83)
    %53 = tt.expand_dims %52 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc53)
    %54 = math.exp %26 : tensor<1x64xf32, #blocked> loc(#loc54)
    %55 = math.exp %28 : tensor<1x64xf32, #blocked> loc(#loc55)
    %56 = arith.addf %54, %55 : tensor<1x64xf32, #blocked> loc(#loc56)
    %57 = math.exp %30 : tensor<1x64xf32, #blocked> loc(#loc57)
    %58 = arith.addf %56, %57 : tensor<1x64xf32, #blocked> loc(#loc58)
    %59 = math.exp %32 : tensor<1x64xf32, #blocked> loc(#loc59)
    %60 = arith.addf %58, %59 : tensor<1x64xf32, #blocked> loc(#loc60)
    %61 = math.log %60 : tensor<1x64xf32, #blocked> loc(#loc61)
    %62 = arith.subf %26, %61 : tensor<1x64xf32, #blocked> loc(#loc62)
    %63 = arith.mulf %62, %17 : tensor<1x64xf32, #blocked> loc(#loc63)
    %64 = arith.subf %28, %61 : tensor<1x64xf32, #blocked> loc(#loc64)
    %65 = arith.mulf %64, %19 : tensor<1x64xf32, #blocked> loc(#loc65)
    %66 = arith.addf %63, %65 : tensor<1x64xf32, #blocked> loc(#loc66)
    %67 = arith.subf %30, %61 : tensor<1x64xf32, #blocked> loc(#loc67)
    %68 = arith.mulf %67, %21 : tensor<1x64xf32, #blocked> loc(#loc68)
    %69 = arith.addf %66, %68 : tensor<1x64xf32, #blocked> loc(#loc69)
    %70 = arith.subf %32, %61 : tensor<1x64xf32, #blocked> loc(#loc70)
    %71 = arith.mulf %70, %23 : tensor<1x64xf32, #blocked> loc(#loc71)
    %72 = arith.addf %69, %71 : tensor<1x64xf32, #blocked> loc(#loc72)
    %73 = "tt.reduce"(%72) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc73)), %arg6: f32 loc(callsite(#loc1 at #loc73))):
      %81 = arith.addf %arg5, %arg6 : f32 loc(#loc89)
      tt.reduce.return %81 : f32 loc(#loc86)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc86)
    %74 = tt.expand_dims %73 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc74)
    %75 = arith.divf %53, %cst : tensor<1x1xf32, #blocked> loc(#loc75)
    %76 = arith.divf %74, %cst : tensor<1x1xf32, #blocked> loc(#loc76)
    %77 = arith.subf %75, %76 : tensor<1x1xf32, #blocked> loc(#loc77)
    %78 = arith.mulf %77, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc78)
    gpu.barrier loc(#loc79)
    %79 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc80)
    %80 = tt.splat %79 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc81)
    tt.store %80, %78 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc81)
    tt.return loc(#loc82)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":26:34)
#loc3 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":30:32)
#loc4 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":30:30)
#loc5 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":30:37)
#loc6 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":31:34)
#loc7 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":31:30)
#loc8 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":31:41)
#loc9 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":32:34)
#loc10 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":32:30)
#loc11 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":32:41)
#loc12 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":33:34)
#loc13 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":33:30)
#loc14 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":33:41)
#loc15 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":34:31)
#loc16 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":34:38)
#loc17 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":35:31)
#loc18 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":35:42)
#loc19 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":36:31)
#loc20 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":36:42)
#loc21 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":37:31)
#loc22 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":37:42)
#loc23 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":38:31)
#loc24 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":38:38)
#loc25 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":39:31)
#loc26 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":39:42)
#loc27 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":40:31)
#loc28 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":40:42)
#loc29 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":41:31)
#loc30 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":41:42)
#loc31 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":42:23)
#loc32 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":43:23)
#loc33 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":44:18)
#loc34 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":45:23)
#loc35 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":46:18)
#loc36 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":47:23)
#loc37 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":48:19)
#loc38 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":49:24)
#loc39 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":50:19)
#loc40 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":51:20)
#loc41 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":52:19)
#loc42 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":53:20)
#loc43 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":54:20)
#loc44 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":55:19)
#loc45 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":56:20)
#loc46 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":57:20)
#loc47 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":58:19)
#loc48 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":59:20)
#loc49 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":60:20)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc53 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":62:29)
#loc54 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":63:24)
#loc55 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":64:24)
#loc56 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":65:20)
#loc57 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":66:24)
#loc58 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":67:20)
#loc59 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":68:24)
#loc60 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":69:20)
#loc61 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":70:24)
#loc62 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":71:20)
#loc63 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":72:20)
#loc64 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":73:20)
#loc65 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":74:20)
#loc66 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":75:20)
#loc67 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":76:20)
#loc68 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":77:20)
#loc69 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":78:20)
#loc70 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":79:20)
#loc71 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":80:20)
#loc72 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":81:20)
#loc74 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":83:29)
#loc75 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":85:20)
#loc76 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":86:20)
#loc77 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":87:20)
#loc78 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":89:20)
#loc79 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":90:4)
#loc80 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":91:28)
#loc81 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":91:71)
#loc82 = loc("inductor_cache/zf/czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py":91:4)
#loc83 = loc(callsite(#loc50 at #loc51))
#loc85 = loc(callsite(#loc52 at #loc50))
#loc86 = loc(callsite(#loc50 at #loc73))
#loc88 = loc(callsite(#loc85 at #loc51))
#loc89 = loc(callsite(#loc85 at #loc73))
