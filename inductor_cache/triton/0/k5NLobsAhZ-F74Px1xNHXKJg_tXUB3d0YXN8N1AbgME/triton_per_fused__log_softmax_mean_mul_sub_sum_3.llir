; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__log_softmax_mean_mul_sub_sum_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 31, !dbg !10
  %8 = lshr i32 %6, 5, !dbg !10
  %9 = shl i32 %6, 2, !dbg !11
  %10 = and i32 %9, 252, !dbg !11
  %11 = zext nneg i32 %10 to i64, !dbg !12
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !12
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #4, !dbg !13
  %14 = bitcast i32 %13 to float, !dbg !13
  %15 = or disjoint i32 %10, 1, !dbg !14
  %16 = zext nneg i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = or disjoint i32 %10, 2, !dbg !17
  %21 = zext nneg i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #4, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = or disjoint i32 %10, 3, !dbg !20
  %26 = zext nneg i32 %25 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !22
  %29 = bitcast i32 %28 to float, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !28
  %38 = bitcast i32 %37 to float, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !30
  %41 = bitcast i32 %40 to float, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %11, !dbg !31
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #4, !dbg !32
  %44 = bitcast i32 %43 to float, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %16, !dbg !33
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !34
  %47 = bitcast i32 %46 to float, !dbg !34
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !35
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #4, !dbg !36
  %50 = bitcast i32 %49 to float, !dbg !36
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !37
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !38
  %53 = bitcast i32 %52 to float, !dbg !38
  %54 = fmul float %14, 0x3FF7154760000000, !dbg !39
  %55 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %54) #4, !dbg !39
  %56 = fmul float %19, 0x3FF7154760000000, !dbg !40
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #4, !dbg !40
  %58 = fadd float %55, %57, !dbg !41
  %59 = fmul float %24, 0x3FF7154760000000, !dbg !42
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #4, !dbg !42
  %61 = fadd float %58, %60, !dbg !43
  %62 = fmul float %29, 0x3FF7154760000000, !dbg !44
  %63 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %62) #4, !dbg !44
  %64 = fadd float %61, %63, !dbg !45
  %65 = fcmp olt float %64, 0x3810000000000000, !dbg !46
  %66 = fmul float %64, 0x4160000000000000, !dbg !46
  %.02.i = select i1 %65, float %66, float %64, !dbg !46
  %i.i.0.i = select i1 %65, float -2.300000e+01, float 0.000000e+00, !dbg !46
  %67 = bitcast float %.02.i to i32, !dbg !46
  %68 = add i32 %67, -1059760811, !dbg !46
  %69 = and i32 %68, -8388608, !dbg !46
  %70 = sub i32 %67, %69, !dbg !46
  %71 = bitcast i32 %70 to float, !dbg !46
  %72 = sitofp i32 %69 to float, !dbg !46
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i = icmp eq i32 %73, 0, !dbg !46
  %74 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %72, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !46
  %75 = tail call float @llvm.nvvm.fma.rn.f(float %72, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !46
  %.08.i = select i1 %.not.i, float %75, float %74, !dbg !46
  %76 = fadd float %71, -1.000000e+00, !dbg !46
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not1.i = icmp eq i32 %77, 0, !dbg !46
  %78 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %76, float 0x3FC2073EC0000000) #4, !dbg !46
  %79 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %76, float 0x3FC2073EC0000000) #4, !dbg !46
  %.010.i = select i1 %.not1.i, float %79, float %78, !dbg !46
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not2.i = icmp eq i32 %80, 0, !dbg !46
  %81 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %76, float 0xBFBF19B980000000) #4, !dbg !46
  %82 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %76, float 0xBFBF19B980000000) #4, !dbg !46
  %.011.i = select i1 %.not2.i, float %82, float %81, !dbg !46
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not3.i = icmp eq i32 %83, 0, !dbg !46
  %84 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %76, float 0x3FC1E52AA0000000) #4, !dbg !46
  %85 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %76, float 0x3FC1E52AA0000000) #4, !dbg !46
  %.012.i = select i1 %.not3.i, float %85, float %84, !dbg !46
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not4.i = icmp eq i32 %86, 0, !dbg !46
  %87 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %76, float 0xBFC55B1720000000) #4, !dbg !46
  %88 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %76, float 0xBFC55B1720000000) #4, !dbg !46
  %.09.i = select i1 %.not4.i, float %88, float %87, !dbg !46
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not5.i = icmp eq i32 %89, 0, !dbg !46
  %90 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %76, float 0x3FC99DA160000000) #4, !dbg !46
  %91 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %76, float 0x3FC99DA160000000) #4, !dbg !46
  %.05.i = select i1 %.not5.i, float %91, float %90, !dbg !46
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not6.i = icmp eq i32 %92, 0, !dbg !46
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %76, float 0xBFCFFFE440000000) #4, !dbg !46
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %76, float 0xBFCFFFE440000000) #4, !dbg !46
  %.01.i = select i1 %.not6.i, float %94, float %93, !dbg !46
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not7.i = icmp eq i32 %95, 0, !dbg !46
  %96 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %76, float 0x3FD5554F00000000) #4, !dbg !46
  %97 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %76, float 0x3FD5554F00000000) #4, !dbg !46
  %.0.i = select i1 %.not7.i, float %97, float %96, !dbg !46
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not8.i = icmp eq i32 %98, 0, !dbg !46
  %99 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %76, float -5.000000e-01) #4, !dbg !46
  %100 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %76, float -5.000000e-01) #4, !dbg !46
  %.07.i = select i1 %.not8.i, float %100, float %99, !dbg !46
  %101 = fmul float %76, %.07.i, !dbg !46
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not9.i = icmp eq i32 %102, 0, !dbg !46
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %101, float %76, float %76) #4, !dbg !46
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %101, float %76, float %76) #4, !dbg !46
  %.06.i = select i1 %.not9.i, float %104, float %103, !dbg !46
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not10.i = icmp eq i32 %105, 0, !dbg !46
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !46
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !46
  %.04.i = select i1 %.not10.i, float %107, float %106, !dbg !46
  %108 = icmp ugt i32 %67, 2139095039, !dbg !46
  br i1 %108, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !46

__nv_fmaf_rn.exit.i.i:                            ; preds = %5
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not11.i = icmp eq i32 %109, 0, !dbg !46
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !46
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !46
  %.03.i = select i1 %.not11.i, float %111, float %110, !dbg !46
  br label %__nv_logf.exit, !dbg !46

__nv_logf.exit:                                   ; preds = %5, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %5 ], !dbg !46
  %112 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !46
  %r.i.1.i = select i1 %112, float 0xFFF0000000000000, float %r.i.0.i, !dbg !46
  %113 = fsub float %14, %r.i.1.i, !dbg !47
  %114 = fmul float %113, %32, !dbg !48
  %115 = fsub float %19, %r.i.1.i, !dbg !49
  %116 = fmul float %115, %35, !dbg !50
  %117 = fadd float %114, %116, !dbg !51
  %118 = fsub float %24, %r.i.1.i, !dbg !52
  %119 = fmul float %118, %38, !dbg !53
  %120 = fadd float %119, %117, !dbg !54
  %121 = fsub float %29, %r.i.1.i, !dbg !55
  %122 = fmul float %121, %41, !dbg !56
  %123 = fadd float %122, %120, !dbg !57
  %124 = bitcast float %123 to i32, !dbg !58
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 16, i32 31), !dbg !58
  %126 = bitcast i32 %125 to float, !dbg !58
  %127 = fadd float %123, %126, !dbg !62
  %128 = bitcast float %127 to i32, !dbg !58
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 8, i32 31), !dbg !58
  %130 = bitcast i32 %129 to float, !dbg !58
  %131 = fadd float %127, %130, !dbg !62
  %132 = bitcast float %131 to i32, !dbg !58
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 4, i32 31), !dbg !58
  %134 = bitcast i32 %133 to float, !dbg !58
  %135 = fadd float %131, %134, !dbg !62
  %136 = bitcast float %135 to i32, !dbg !58
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !58
  %138 = bitcast i32 %137 to float, !dbg !58
  %139 = fadd float %135, %138, !dbg !62
  %140 = bitcast float %139 to i32, !dbg !58
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !58
  %142 = bitcast i32 %141 to float, !dbg !58
  %143 = fadd float %139, %142, !dbg !62
  %144 = icmp eq i32 %7, 0, !dbg !58
  %145 = and i32 %8, 1, !dbg !58
  %146 = zext nneg i32 %145 to i64, !dbg !58
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i64 %146, !dbg !58
  %148 = bitcast float %143 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 %144) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %149 = icmp slt i32 %6, 2, !dbg !58
  %150 = sext i32 %6 to i64, !dbg !58
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i64 %150, !dbg !58
  %152 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %151, i1 %149) #4, !dbg !58
  %153 = bitcast i32 %152 to float, !dbg !58
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !58
  %155 = bitcast i32 %154 to float, !dbg !58
  %156 = fadd float %153, %155, !dbg !62
  %157 = and i32 %6, 1, !dbg !58
  %158 = icmp eq i32 %157, 0, !dbg !58
  %159 = and i1 %149, %158, !dbg !58
  %160 = bitcast float %156 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %160, i1 %159) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %161 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !58
  %162 = fmul float %44, 0x3FF7154760000000, !dbg !64
  %163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %162) #4, !dbg !64
  %164 = fmul float %47, 0x3FF7154760000000, !dbg !65
  %165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #4, !dbg !65
  %166 = fadd float %163, %165, !dbg !66
  %167 = fmul float %50, 0x3FF7154760000000, !dbg !67
  %168 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %167) #4, !dbg !67
  %169 = fadd float %166, %168, !dbg !68
  %170 = fmul float %53, 0x3FF7154760000000, !dbg !69
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #4, !dbg !69
  %172 = fadd float %169, %171, !dbg !70
  %173 = fcmp olt float %172, 0x3810000000000000, !dbg !71
  %174 = fmul float %172, 0x4160000000000000, !dbg !71
  %.02.i1 = select i1 %173, float %174, float %172, !dbg !71
  %i.i.0.i2 = select i1 %173, float -2.300000e+01, float 0.000000e+00, !dbg !71
  %175 = bitcast float %.02.i1 to i32, !dbg !71
  %176 = add i32 %175, -1059760811, !dbg !71
  %177 = and i32 %176, -8388608, !dbg !71
  %178 = sub i32 %175, %177, !dbg !71
  %179 = bitcast i32 %178 to float, !dbg !71
  %180 = sitofp i32 %177 to float, !dbg !71
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not.i3 = icmp eq i32 %181, 0, !dbg !71
  %182 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %180, float 0x3E80000000000000, float %i.i.0.i2) #4, !dbg !71
  %183 = tail call float @llvm.nvvm.fma.rn.f(float %180, float 0x3E80000000000000, float %i.i.0.i2) #4, !dbg !71
  %.08.i4 = select i1 %.not.i3, float %183, float %182, !dbg !71
  %184 = fadd float %179, -1.000000e+00, !dbg !71
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not1.i5 = icmp eq i32 %185, 0, !dbg !71
  %186 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %184, float 0x3FC2073EC0000000) #4, !dbg !71
  %187 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %184, float 0x3FC2073EC0000000) #4, !dbg !71
  %.010.i6 = select i1 %.not1.i5, float %187, float %186, !dbg !71
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not2.i7 = icmp eq i32 %188, 0, !dbg !71
  %189 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i6, float %184, float 0xBFBF19B980000000) #4, !dbg !71
  %190 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i6, float %184, float 0xBFBF19B980000000) #4, !dbg !71
  %.011.i8 = select i1 %.not2.i7, float %190, float %189, !dbg !71
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not3.i9 = icmp eq i32 %191, 0, !dbg !71
  %192 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i8, float %184, float 0x3FC1E52AA0000000) #4, !dbg !71
  %193 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i8, float %184, float 0x3FC1E52AA0000000) #4, !dbg !71
  %.012.i10 = select i1 %.not3.i9, float %193, float %192, !dbg !71
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not4.i11 = icmp eq i32 %194, 0, !dbg !71
  %195 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i10, float %184, float 0xBFC55B1720000000) #4, !dbg !71
  %196 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i10, float %184, float 0xBFC55B1720000000) #4, !dbg !71
  %.09.i12 = select i1 %.not4.i11, float %196, float %195, !dbg !71
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not5.i13 = icmp eq i32 %197, 0, !dbg !71
  %198 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i12, float %184, float 0x3FC99DA160000000) #4, !dbg !71
  %199 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i12, float %184, float 0x3FC99DA160000000) #4, !dbg !71
  %.05.i14 = select i1 %.not5.i13, float %199, float %198, !dbg !71
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not6.i15 = icmp eq i32 %200, 0, !dbg !71
  %201 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %184, float 0xBFCFFFE440000000) #4, !dbg !71
  %202 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %184, float 0xBFCFFFE440000000) #4, !dbg !71
  %.01.i16 = select i1 %.not6.i15, float %202, float %201, !dbg !71
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not7.i17 = icmp eq i32 %203, 0, !dbg !71
  %204 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i16, float %184, float 0x3FD5554F00000000) #4, !dbg !71
  %205 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i16, float %184, float 0x3FD5554F00000000) #4, !dbg !71
  %.0.i18 = select i1 %.not7.i17, float %205, float %204, !dbg !71
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not8.i19 = icmp eq i32 %206, 0, !dbg !71
  %207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %184, float -5.000000e-01) #4, !dbg !71
  %208 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %184, float -5.000000e-01) #4, !dbg !71
  %.07.i20 = select i1 %.not8.i19, float %208, float %207, !dbg !71
  %209 = fmul float %184, %.07.i20, !dbg !71
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not9.i21 = icmp eq i32 %210, 0, !dbg !71
  %211 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %209, float %184, float %184) #4, !dbg !71
  %212 = tail call float @llvm.nvvm.fma.rn.f(float %209, float %184, float %184) #4, !dbg !71
  %.06.i22 = select i1 %.not9.i21, float %212, float %211, !dbg !71
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not10.i23 = icmp eq i32 %213, 0, !dbg !71
  %214 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #4, !dbg !71
  %215 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #4, !dbg !71
  %.04.i24 = select i1 %.not10.i23, float %215, float %214, !dbg !71
  %216 = icmp ugt i32 %175, 2139095039, !dbg !71
  br i1 %216, label %__nv_fmaf_rn.exit.i.i27, label %__nv_logf.exit30, !dbg !71

__nv_fmaf_rn.exit.i.i27:                          ; preds = %__nv_logf.exit
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !71
  %.not11.i28 = icmp eq i32 %217, 0, !dbg !71
  %218 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !71
  %219 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !71
  %.03.i29 = select i1 %.not11.i28, float %219, float %218, !dbg !71
  br label %__nv_logf.exit30, !dbg !71

__nv_logf.exit30:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i27
  %r.i.0.i25 = phi float [ %.03.i29, %__nv_fmaf_rn.exit.i.i27 ], [ %.04.i24, %__nv_logf.exit ], !dbg !71
  %220 = fcmp oeq float %.02.i1, 0.000000e+00, !dbg !71
  %r.i.1.i26 = select i1 %220, float 0xFFF0000000000000, float %r.i.0.i25, !dbg !71
  %221 = fsub float %44, %r.i.1.i26, !dbg !72
  %222 = fmul float %221, %32, !dbg !73
  %223 = fsub float %47, %r.i.1.i26, !dbg !74
  %224 = fmul float %223, %35, !dbg !75
  %225 = fadd float %222, %224, !dbg !76
  %226 = fsub float %50, %r.i.1.i26, !dbg !77
  %227 = fmul float %226, %38, !dbg !78
  %228 = fadd float %227, %225, !dbg !79
  %229 = fsub float %53, %r.i.1.i26, !dbg !80
  %230 = fmul float %229, %41, !dbg !81
  %231 = fadd float %230, %228, !dbg !82
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %232 = bitcast float %231 to i32, !dbg !83
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 16, i32 31), !dbg !83
  %234 = bitcast i32 %233 to float, !dbg !83
  %235 = fadd float %231, %234, !dbg !85
  %236 = bitcast float %235 to i32, !dbg !83
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 8, i32 31), !dbg !83
  %238 = bitcast i32 %237 to float, !dbg !83
  %239 = fadd float %235, %238, !dbg !85
  %240 = bitcast float %239 to i32, !dbg !83
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 4, i32 31), !dbg !83
  %242 = bitcast i32 %241 to float, !dbg !83
  %243 = fadd float %239, %242, !dbg !85
  %244 = bitcast float %243 to i32, !dbg !83
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 2, i32 31), !dbg !83
  %246 = bitcast i32 %245 to float, !dbg !83
  %247 = fadd float %243, %246, !dbg !85
  %248 = bitcast float %247 to i32, !dbg !83
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 1, i32 31), !dbg !83
  %250 = bitcast i32 %249 to float, !dbg !83
  %251 = fadd float %247, %250, !dbg !85
  %252 = bitcast float %251 to <1 x i32>, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %252, i1 %144) #4, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %253 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %151, i1 %149) #4, !dbg !83
  %254 = bitcast i32 %253 to float, !dbg !83
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 1, i32 31), !dbg !83
  %256 = bitcast i32 %255 to float, !dbg !83
  %257 = fadd float %254, %256, !dbg !85
  %258 = bitcast float %257 to <1 x i32>, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %258, i1 %159) #4, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %259 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !83
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %161, float 6.400000e+01) #4, !dbg !86
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float 6.400000e+01) #4, !dbg !87
  %262 = fsub float %260, %261, !dbg !88
  %263 = fmul float %262, 0x3FB99999A0000000, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %urem = and i32 %6, 63, !dbg !91
  %264 = icmp eq i32 %urem, 0, !dbg !91
  %265 = bitcast float %263 to i32, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %265, ptr addrspace(1) %0, i1 %264) #4, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czfecyk23e2goqr7kaeaszzrltwruaxzl5bonp6wkfbph5tmq3vv.py", directory: "inductor_cache/zf")
!4 = !{ptr @triton_per_fused__log_softmax_mean_mul_sub_sum_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__log_softmax_mean_mul_sub_sum_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__log_softmax_mean_mul_sub_sum_3", linkageName: "triton_per_fused__log_softmax_mean_mul_sub_sum_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 32, scope: !7)
!12 = !DILocation(line: 30, column: 30, scope: !7)
!13 = !DILocation(line: 30, column: 37, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 41, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 41, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 42, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 42, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 42, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 38, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 42, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 42, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 42, scope: !7)
!39 = !DILocation(line: 42, column: 23, scope: !7)
!40 = !DILocation(line: 43, column: 23, scope: !7)
!41 = !DILocation(line: 44, column: 18, scope: !7)
!42 = !DILocation(line: 45, column: 23, scope: !7)
!43 = !DILocation(line: 46, column: 18, scope: !7)
!44 = !DILocation(line: 47, column: 23, scope: !7)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 49, column: 24, scope: !7)
!47 = !DILocation(line: 50, column: 19, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 19, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 19, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 19, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 267, column: 36, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!61 = !DILocation(line: 62, column: 26, scope: !7)
!62 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !61)
!63 = distinct !DILexicalBlockFile(scope: !59, file: !60, discriminator: 0)
!64 = !DILocation(line: 63, column: 24, scope: !7)
!65 = !DILocation(line: 64, column: 24, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 24, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 68, column: 24, scope: !7)
!70 = !DILocation(line: 69, column: 20, scope: !7)
!71 = !DILocation(line: 70, column: 24, scope: !7)
!72 = !DILocation(line: 71, column: 20, scope: !7)
!73 = !DILocation(line: 72, column: 20, scope: !7)
!74 = !DILocation(line: 73, column: 20, scope: !7)
!75 = !DILocation(line: 74, column: 20, scope: !7)
!76 = !DILocation(line: 75, column: 20, scope: !7)
!77 = !DILocation(line: 76, column: 20, scope: !7)
!78 = !DILocation(line: 77, column: 20, scope: !7)
!79 = !DILocation(line: 78, column: 20, scope: !7)
!80 = !DILocation(line: 79, column: 20, scope: !7)
!81 = !DILocation(line: 80, column: 20, scope: !7)
!82 = !DILocation(line: 81, column: 20, scope: !7)
!83 = !DILocation(line: 267, column: 36, scope: !59, inlinedAt: !84)
!84 = !DILocation(line: 83, column: 26, scope: !7)
!85 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !84)
!86 = !DILocation(line: 85, column: 20, scope: !7)
!87 = !DILocation(line: 86, column: 20, scope: !7)
!88 = !DILocation(line: 87, column: 20, scope: !7)
!89 = !DILocation(line: 89, column: 20, scope: !7)
!90 = !DILocation(line: 90, column: 4, scope: !7)
!91 = !DILocation(line: 91, column: 71, scope: !7)
!92 = !DILocation(line: 91, column: 4, scope: !7)
