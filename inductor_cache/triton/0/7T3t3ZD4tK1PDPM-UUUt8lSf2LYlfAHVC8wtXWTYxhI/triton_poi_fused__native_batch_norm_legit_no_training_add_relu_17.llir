; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = and i32 %14, 252, !dbg !12
  %17 = lshr i32 %13, 2, !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = and i32 %13, 255, !dbg !12
  %20 = or disjoint i32 %12, %16, !dbg !13
  %21 = or disjoint i32 %12, %18, !dbg !13
  %22 = or disjoint i32 %21, 64, !dbg !13
  %23 = or disjoint i32 %21, 128, !dbg !13
  %24 = or disjoint i32 %21, 192, !dbg !13
  %25 = or disjoint i32 %12, %19, !dbg !13
  %26 = icmp slt i32 %20, 512, !dbg !14
  %27 = icmp slt i32 %21, 512, !dbg !14
  %28 = icmp slt i32 %22, 512, !dbg !14
  %29 = icmp slt i32 %23, 512, !dbg !14
  %30 = icmp slt i32 %24, 512, !dbg !14
  %31 = icmp slt i32 %25, 512, !dbg !14
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %33 = shl i32 %32, 4, !dbg !16
  %.lobit24 = lshr i32 %13, 6, !dbg !17
  %34 = and i32 %.lobit24, 3, !dbg !17
  %35 = or disjoint i32 %33, %34, !dbg !18
  %36 = or disjoint i32 %35, 4, !dbg !18
  %37 = or disjoint i32 %35, 8, !dbg !18
  %38 = or disjoint i32 %35, 12, !dbg !18
  %39 = or disjoint i32 %33, %15, !dbg !18
  %40 = icmp slt i32 %35, 1024, !dbg !19
  %41 = icmp slt i32 %36, 1024, !dbg !19
  %42 = icmp slt i32 %37, 1024, !dbg !19
  %43 = icmp slt i32 %38, 1024, !dbg !19
  %44 = icmp slt i32 %39, 1024, !dbg !19
  %.frozen = freeze i32 %20, !dbg !20
  %45 = sdiv i32 %.frozen, 128, !dbg !20
  %46 = mul i32 %45, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %46, !dbg !21
  %.frozen35 = freeze i32 %21, !dbg !20
  %47 = sdiv i32 %.frozen35, 128, !dbg !20
  %48 = mul i32 %47, 128, !dbg !21
  %.decomposed36 = sub i32 %.frozen35, %48, !dbg !21
  %.frozen37 = freeze i32 %22, !dbg !20
  %49 = sdiv i32 %.frozen37, 128, !dbg !20
  %50 = mul i32 %49, 128, !dbg !21
  %.decomposed38 = sub i32 %.frozen37, %50, !dbg !21
  %.frozen39 = freeze i32 %24, !dbg !20
  %51 = sdiv i32 %.frozen39, 128, !dbg !20
  %52 = mul i32 %51, 128, !dbg !21
  %.decomposed40 = sub i32 %.frozen39, %52, !dbg !21
  %53 = srem i32 %25, 128, !dbg !21
  %54 = sdiv i32 %23, 128, !dbg !20
  %55 = shl i32 %35, 7, !dbg !22
  %56 = shl i32 %36, 7, !dbg !22
  %57 = shl i32 %37, 7, !dbg !22
  %58 = shl i32 %38, 7, !dbg !22
  %59 = shl i32 %45, 17, !dbg !23
  %60 = add i32 %59, %.decomposed, !dbg !24
  %61 = add i32 %60, %55, !dbg !25
  %62 = add i32 %60, %56, !dbg !25
  %63 = add i32 %60, %57, !dbg !25
  %64 = add i32 %60, %58, !dbg !25
  %65 = sext i32 %61 to i64, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !26
  %67 = sext i32 %62 to i64, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !26
  %69 = sext i32 %63 to i64, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !26
  %71 = sext i32 %64 to i64, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !26
  %73 = and i1 %26, %40, !dbg !27
  %74 = and i1 %41, %26, !dbg !27
  %75 = and i1 %42, %26, !dbg !27
  %76 = and i1 %43, %26, !dbg !27
  %77 = and i1 %27, %44, !dbg !27
  %78 = and i1 %28, %44, !dbg !27
  %79 = and i1 %29, %44, !dbg !27
  %80 = and i1 %30, %44, !dbg !27
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %73) #4, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !28
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %74) #4, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !28
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %75) #4, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !28
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %76) #4, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !28
  %101 = and i32 %14, 1020, !dbg !28
  %102 = lshr i32 %14, 6, !dbg !28
  %103 = and i32 %102, 12, !dbg !28
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !28
  %105 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %101, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %105, i32 %82, i32 %83, i32 %84, i32 %85, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !28
  %107 = load float, ptr addrspace(3) %106, align 4, !dbg !28
  %108 = getelementptr inbounds i8, ptr addrspace(3) %106, i32 1040, !dbg !28
  %109 = load float, ptr addrspace(3) %108, align 4, !dbg !28
  %110 = getelementptr inbounds i8, ptr addrspace(3) %106, i32 2080, !dbg !28
  %111 = load float, ptr addrspace(3) %110, align 4, !dbg !28
  %112 = getelementptr inbounds i8, ptr addrspace(3) %106, i32 3120, !dbg !28
  %113 = load float, ptr addrspace(3) %112, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %105, i32 %87, i32 %88, i32 %89, i32 %90, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %114 = load float, ptr addrspace(3) %106, align 4, !dbg !28
  %115 = load float, ptr addrspace(3) %108, align 4, !dbg !28
  %116 = load float, ptr addrspace(3) %110, align 4, !dbg !28
  %117 = load float, ptr addrspace(3) %112, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %105, i32 %92, i32 %93, i32 %94, i32 %95, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %118 = load float, ptr addrspace(3) %106, align 4, !dbg !28
  %119 = load float, ptr addrspace(3) %108, align 4, !dbg !28
  %120 = load float, ptr addrspace(3) %110, align 4, !dbg !28
  %121 = load float, ptr addrspace(3) %112, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %105, i32 %97, i32 %98, i32 %99, i32 %100, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %122 = load float, ptr addrspace(3) %106, align 4, !dbg !28
  %123 = load float, ptr addrspace(3) %108, align 4, !dbg !28
  %124 = load float, ptr addrspace(3) %110, align 4, !dbg !28
  %125 = load float, ptr addrspace(3) %112, align 4, !dbg !28
  %126 = sext i32 %53 to i64, !dbg !29
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !29
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %31) #4, !dbg !30
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !31
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %31) #4, !dbg !32
  %131 = bitcast i32 %130 to float, !dbg !32
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %126, !dbg !33
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %31) #4, !dbg !34
  %134 = getelementptr float, ptr addrspace(1) %4, i64 %126, !dbg !35
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %31) #4, !dbg !36
  %136 = add i32 %39, 262144, !dbg !37
  %137 = shl nsw i32 %.decomposed36, 10, !dbg !38
  %138 = shl nsw i32 %.decomposed38, 10, !dbg !38
  %139 = shl nsw i32 %.decomposed40, 10, !dbg !38
  %140 = shl i32 %47, 19, !dbg !39
  %141 = shl i32 %49, 19, !dbg !39
  %142 = shl i32 %54, 19, !dbg !39
  %143 = shl i32 %51, 19, !dbg !39
  %144 = add i32 %140, %137, !dbg !40
  %145 = add i32 %144, %136, !dbg !41
  %146 = add i32 %141, %138, !dbg !40
  %147 = add i32 %146, %136, !dbg !41
  %148 = add i32 %142, %137, !dbg !40
  %149 = add i32 %148, %136, !dbg !41
  %150 = add i32 %143, %139, !dbg !40
  %151 = add i32 %150, %136, !dbg !41
  %152 = sext i32 %145 to i64, !dbg !42
  %153 = getelementptr float, ptr addrspace(1) %5, i64 %152, !dbg !42
  %154 = sext i32 %147 to i64, !dbg !42
  %155 = getelementptr float, ptr addrspace(1) %5, i64 %154, !dbg !42
  %156 = sext i32 %149 to i64, !dbg !42
  %157 = getelementptr float, ptr addrspace(1) %5, i64 %156, !dbg !42
  %158 = sext i32 %151 to i64, !dbg !42
  %159 = getelementptr float, ptr addrspace(1) %5, i64 %158, !dbg !42
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %153, i1 %77) #4, !dbg !43
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %155, i1 %78) #4, !dbg !43
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %157, i1 %79) #4, !dbg !43
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %159, i1 %80) #4, !dbg !43
  %164 = fadd float %131, 0x3EE4F8B580000000, !dbg !44
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %165, 0, !dbg !45
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %166, 0, !dbg !45
  br i1 %.not.i, label %172, label %167, !dbg !45

167:                                              ; preds = %10
  br i1 %.not1.i, label %170, label %168, !dbg !45

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %164) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %164) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

172:                                              ; preds = %10
  br i1 %.not1.i, label %175, label %173, !dbg !45

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %164) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %164) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %168, %170, %173, %175
  %.0.i = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !45
  %177 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !43
  %178 = bitcast i32 %177 to float, !dbg !43
  %179 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !43
  %180 = bitcast i32 %179 to float, !dbg !43
  %181 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !43
  %182 = bitcast i32 %181 to float, !dbg !43
  %183 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !43
  %184 = bitcast i32 %183 to float, !dbg !43
  %185 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !43
  %186 = bitcast i32 %185 to float, !dbg !43
  %187 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !43
  %188 = bitcast i32 %187 to float, !dbg !43
  %189 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !43
  %190 = bitcast i32 %189 to float, !dbg !43
  %191 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !43
  %192 = bitcast i32 %191 to float, !dbg !43
  %193 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !43
  %194 = bitcast i32 %193 to float, !dbg !43
  %195 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !43
  %196 = bitcast i32 %195 to float, !dbg !43
  %197 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !43
  %198 = bitcast i32 %197 to float, !dbg !43
  %199 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !43
  %200 = bitcast i32 %199 to float, !dbg !43
  %201 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !43
  %202 = bitcast i32 %201 to float, !dbg !43
  %203 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !43
  %204 = bitcast i32 %203 to float, !dbg !43
  %205 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !43
  %206 = bitcast i32 %205 to float, !dbg !43
  %207 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !43
  %208 = bitcast i32 %207 to float, !dbg !43
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %210 = insertelement <16 x float> poison, float %125, i64 0, !dbg !47
  %211 = insertelement <16 x float> %210, float %124, i64 1, !dbg !47
  %212 = insertelement <16 x float> %211, float %123, i64 2, !dbg !47
  %213 = insertelement <16 x float> %212, float %122, i64 3, !dbg !47
  %214 = insertelement <16 x float> %213, float %121, i64 4, !dbg !47
  %215 = insertelement <16 x float> %214, float %120, i64 5, !dbg !47
  %216 = insertelement <16 x float> %215, float %119, i64 6, !dbg !47
  %217 = insertelement <16 x float> %216, float %118, i64 7, !dbg !47
  %218 = insertelement <16 x float> %217, float %117, i64 8, !dbg !47
  %219 = insertelement <16 x float> %218, float %116, i64 9, !dbg !47
  %220 = insertelement <16 x float> %219, float %115, i64 10, !dbg !47
  %221 = insertelement <16 x float> %220, float %114, i64 11, !dbg !47
  %222 = insertelement <16 x float> %221, float %113, i64 12, !dbg !47
  %223 = insertelement <16 x float> %222, float %111, i64 13, !dbg !47
  %224 = insertelement <16 x float> %223, float %109, i64 14, !dbg !47
  %225 = insertelement <16 x float> %224, float %107, i64 15, !dbg !47
  %226 = insertelement <16 x i32> poison, i32 %128, i64 0, !dbg !47
  %227 = bitcast <16 x i32> %226 to <16 x float>, !dbg !47
  %228 = shufflevector <16 x float> %227, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !47
  %229 = fsub <16 x float> %225, %228, !dbg !47
  %230 = insertelement <16 x float> poison, float %209, i64 0, !dbg !48
  %231 = shufflevector <16 x float> %230, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !48
  %232 = fmul <16 x float> %229, %231, !dbg !48
  %233 = insertelement <16 x i32> poison, i32 %133, i64 0, !dbg !49
  %234 = bitcast <16 x i32> %233 to <16 x float>, !dbg !49
  %235 = shufflevector <16 x float> %234, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !49
  %236 = fmul <16 x float> %232, %235, !dbg !49
  %237 = insertelement <16 x i32> poison, i32 %135, i64 0, !dbg !50
  %238 = bitcast <16 x i32> %237 to <16 x float>, !dbg !50
  %239 = shufflevector <16 x float> %238, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !50
  %240 = fadd <16 x float> %236, %239, !dbg !50
  %241 = fcmp olt <16 x float> %240, zeroinitializer, !dbg !51
  %242 = extractelement <16 x i1> %241, i64 15, !dbg !55
  %243 = extractelement <16 x float> %240, i64 15, !dbg !55
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !55
  %245 = extractelement <16 x i1> %241, i64 14, !dbg !55
  %246 = extractelement <16 x float> %240, i64 14, !dbg !55
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !55
  %248 = extractelement <16 x i1> %241, i64 13, !dbg !55
  %249 = extractelement <16 x float> %240, i64 13, !dbg !55
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !55
  %251 = extractelement <16 x i1> %241, i64 12, !dbg !55
  %252 = extractelement <16 x float> %240, i64 12, !dbg !55
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !55
  %254 = extractelement <16 x i1> %241, i64 11, !dbg !55
  %255 = extractelement <16 x float> %240, i64 11, !dbg !55
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !55
  %257 = extractelement <16 x i1> %241, i64 10, !dbg !55
  %258 = extractelement <16 x float> %240, i64 10, !dbg !55
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !55
  %260 = extractelement <16 x i1> %241, i64 9, !dbg !55
  %261 = extractelement <16 x float> %240, i64 9, !dbg !55
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !55
  %263 = extractelement <16 x i1> %241, i64 8, !dbg !55
  %264 = extractelement <16 x float> %240, i64 8, !dbg !55
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !55
  %266 = extractelement <16 x i1> %241, i64 7, !dbg !55
  %267 = extractelement <16 x float> %240, i64 7, !dbg !55
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !55
  %269 = extractelement <16 x i1> %241, i64 6, !dbg !55
  %270 = extractelement <16 x float> %240, i64 6, !dbg !55
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !55
  %272 = extractelement <16 x i1> %241, i64 5, !dbg !55
  %273 = extractelement <16 x float> %240, i64 5, !dbg !55
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !55
  %275 = extractelement <16 x i1> %241, i64 4, !dbg !55
  %276 = extractelement <16 x float> %240, i64 4, !dbg !55
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !55
  %278 = extractelement <16 x i1> %241, i64 3, !dbg !55
  %279 = extractelement <16 x float> %240, i64 3, !dbg !55
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !55
  %281 = extractelement <16 x i1> %241, i64 2, !dbg !55
  %282 = extractelement <16 x float> %240, i64 2, !dbg !55
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !55
  %284 = extractelement <16 x i1> %241, i64 1, !dbg !55
  %285 = extractelement <16 x float> %240, i64 1, !dbg !55
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !55
  %287 = extractelement <16 x i1> %241, i64 0, !dbg !55
  %288 = extractelement <16 x float> %240, i64 0, !dbg !55
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %290 = shl i32 %13, 4, !dbg !55
  %291 = and i32 %290, 4080, !dbg !55
  %292 = lshr exact i32 %291, 2, !dbg !55
  %293 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %292, !dbg !55
  %294 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %291, !dbg !55
  %295 = bitcast float %244 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !55
  %296 = or disjoint i32 %291, 1, !dbg !55
  %297 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %296, !dbg !55
  %298 = bitcast float %247 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !55
  %299 = or disjoint i32 %291, 2, !dbg !55
  %300 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %299, !dbg !55
  %301 = bitcast float %250 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !55
  %302 = or disjoint i32 %291, 3, !dbg !55
  %303 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %302, !dbg !55
  %304 = bitcast float %253 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !55
  %305 = or disjoint i32 %291, 4, !dbg !55
  %306 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %305, !dbg !55
  %307 = bitcast float %256 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !55
  %308 = or disjoint i32 %291, 5, !dbg !55
  %309 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %308, !dbg !55
  %310 = bitcast float %259 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !55
  %311 = or disjoint i32 %291, 6, !dbg !55
  %312 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %311, !dbg !55
  %313 = bitcast float %262 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %313, i1 true) #4, !dbg !55
  %314 = or disjoint i32 %291, 7, !dbg !55
  %315 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %314, !dbg !55
  %316 = bitcast float %265 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %316, i1 true) #4, !dbg !55
  %317 = or disjoint i32 %291, 8, !dbg !55
  %318 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %317, !dbg !55
  %319 = bitcast float %268 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %319, i1 true) #4, !dbg !55
  %320 = or disjoint i32 %291, 9, !dbg !55
  %321 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %320, !dbg !55
  %322 = bitcast float %271 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #4, !dbg !55
  %323 = or disjoint i32 %291, 10, !dbg !55
  %324 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %323, !dbg !55
  %325 = bitcast float %274 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #4, !dbg !55
  %326 = or disjoint i32 %291, 11, !dbg !55
  %327 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %326, !dbg !55
  %328 = bitcast float %277 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #4, !dbg !55
  %329 = or disjoint i32 %291, 12, !dbg !55
  %330 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %329, !dbg !55
  %331 = bitcast float %280 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %331, i1 true) #4, !dbg !55
  %332 = or disjoint i32 %291, 13, !dbg !55
  %333 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %332, !dbg !55
  %334 = bitcast float %283 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #4, !dbg !55
  %335 = or disjoint i32 %291, 14, !dbg !55
  %336 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %335, !dbg !55
  %337 = bitcast float %286 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #4, !dbg !55
  %338 = or disjoint i32 %291, 15, !dbg !55
  %339 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %338, !dbg !55
  %340 = bitcast float %289 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %341 = lshr i32 %101, 4, !dbg !55
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !55
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %101, !dbg !55
  %344 = load float, ptr addrspace(3) %343, align 4, !dbg !55
  %345 = or disjoint i32 %101, 1, !dbg !55
  %346 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %345, !dbg !55
  %347 = load float, ptr addrspace(3) %346, align 4, !dbg !55
  %348 = or disjoint i32 %101, 2, !dbg !55
  %349 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %348, !dbg !55
  %350 = load float, ptr addrspace(3) %349, align 4, !dbg !55
  %351 = or disjoint i32 %101, 3, !dbg !55
  %352 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %351, !dbg !55
  %353 = load float, ptr addrspace(3) %352, align 4, !dbg !55
  %354 = or disjoint i32 %101, 1024, !dbg !55
  %355 = lshr i32 %354, 4, !dbg !55
  %356 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %355, !dbg !55
  %357 = getelementptr inbounds float, ptr addrspace(3) %356, i32 %354, !dbg !55
  %358 = load float, ptr addrspace(3) %357, align 4, !dbg !55
  %359 = or disjoint i32 %101, 1025, !dbg !55
  %360 = lshr i32 %359, 4, !dbg !55
  %361 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %360, !dbg !55
  %362 = getelementptr inbounds float, ptr addrspace(3) %361, i32 %359, !dbg !55
  %363 = load float, ptr addrspace(3) %362, align 4, !dbg !55
  %364 = or disjoint i32 %101, 1026, !dbg !55
  %365 = lshr i32 %364, 4, !dbg !55
  %366 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %365, !dbg !55
  %367 = getelementptr inbounds float, ptr addrspace(3) %366, i32 %364, !dbg !55
  %368 = load float, ptr addrspace(3) %367, align 4, !dbg !55
  %369 = or disjoint i32 %101, 1027, !dbg !55
  %370 = lshr i32 %369, 4, !dbg !55
  %371 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %370, !dbg !55
  %372 = getelementptr inbounds float, ptr addrspace(3) %371, i32 %369, !dbg !55
  %373 = load float, ptr addrspace(3) %372, align 4, !dbg !55
  %374 = or disjoint i32 %101, 2048, !dbg !55
  %375 = lshr i32 %374, 4, !dbg !55
  %376 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %375, !dbg !55
  %377 = getelementptr inbounds float, ptr addrspace(3) %376, i32 %374, !dbg !55
  %378 = load float, ptr addrspace(3) %377, align 4, !dbg !55
  %379 = or disjoint i32 %101, 2049, !dbg !55
  %380 = lshr i32 %379, 4, !dbg !55
  %381 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %380, !dbg !55
  %382 = getelementptr inbounds float, ptr addrspace(3) %381, i32 %379, !dbg !55
  %383 = load float, ptr addrspace(3) %382, align 4, !dbg !55
  %384 = or disjoint i32 %101, 2050, !dbg !55
  %385 = lshr i32 %384, 4, !dbg !55
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %385, !dbg !55
  %387 = getelementptr inbounds float, ptr addrspace(3) %386, i32 %384, !dbg !55
  %388 = load float, ptr addrspace(3) %387, align 4, !dbg !55
  %389 = or disjoint i32 %101, 2051, !dbg !55
  %390 = lshr i32 %389, 4, !dbg !55
  %391 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %390, !dbg !55
  %392 = getelementptr inbounds float, ptr addrspace(3) %391, i32 %389, !dbg !55
  %393 = load float, ptr addrspace(3) %392, align 4, !dbg !55
  %394 = or disjoint i32 %101, 3072, !dbg !55
  %395 = lshr i32 %394, 4, !dbg !55
  %396 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %395, !dbg !55
  %397 = getelementptr inbounds float, ptr addrspace(3) %396, i32 %394, !dbg !55
  %398 = load float, ptr addrspace(3) %397, align 4, !dbg !55
  %399 = or disjoint i32 %101, 3073, !dbg !55
  %400 = lshr i32 %399, 4, !dbg !55
  %401 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %400, !dbg !55
  %402 = getelementptr inbounds float, ptr addrspace(3) %401, i32 %399, !dbg !55
  %403 = load float, ptr addrspace(3) %402, align 4, !dbg !55
  %404 = or disjoint i32 %101, 3074, !dbg !55
  %405 = lshr i32 %404, 4, !dbg !55
  %406 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %405, !dbg !55
  %407 = getelementptr inbounds float, ptr addrspace(3) %406, i32 %404, !dbg !55
  %408 = load float, ptr addrspace(3) %407, align 4, !dbg !55
  %409 = or disjoint i32 %101, 3075, !dbg !55
  %410 = lshr i32 %409, 4, !dbg !55
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %410, !dbg !55
  %412 = getelementptr inbounds float, ptr addrspace(3) %411, i32 %409, !dbg !55
  %413 = load float, ptr addrspace(3) %412, align 4, !dbg !55
  %414 = fadd float %344, %208, !dbg !56
  %415 = fadd float %347, %206, !dbg !56
  %416 = fadd float %350, %204, !dbg !56
  %417 = fadd float %353, %202, !dbg !56
  %418 = fadd float %358, %200, !dbg !56
  %419 = fadd float %363, %198, !dbg !56
  %420 = fadd float %368, %196, !dbg !56
  %421 = fadd float %373, %194, !dbg !56
  %422 = fadd float %378, %192, !dbg !56
  %423 = fadd float %383, %190, !dbg !56
  %424 = fadd float %388, %188, !dbg !56
  %425 = fadd float %393, %186, !dbg !56
  %426 = fadd float %398, %184, !dbg !56
  %427 = fadd float %403, %182, !dbg !56
  %428 = fadd float %408, %180, !dbg !56
  %429 = fadd float %413, %178, !dbg !56
  %430 = add i32 %144, %39, !dbg !57
  %431 = add i32 %146, %39, !dbg !57
  %432 = add i32 %148, %39, !dbg !57
  %433 = add i32 %150, %39, !dbg !57
  %434 = sext i32 %430 to i64, !dbg !58
  %435 = getelementptr float, ptr addrspace(1) %6, i64 %434, !dbg !58
  %436 = sext i32 %431 to i64, !dbg !58
  %437 = getelementptr float, ptr addrspace(1) %6, i64 %436, !dbg !58
  %438 = sext i32 %432 to i64, !dbg !58
  %439 = getelementptr float, ptr addrspace(1) %6, i64 %438, !dbg !58
  %440 = sext i32 %433 to i64, !dbg !58
  %441 = getelementptr float, ptr addrspace(1) %6, i64 %440, !dbg !58
  %442 = bitcast float %344 to i32, !dbg !59
  %443 = bitcast float %347 to i32, !dbg !59
  %444 = bitcast float %350 to i32, !dbg !59
  %445 = bitcast float %353 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %442, i32 %443, i32 %444, i32 %445, ptr addrspace(1) %435, i1 %77) #4, !dbg !59
  %446 = bitcast float %358 to i32, !dbg !59
  %447 = bitcast float %363 to i32, !dbg !59
  %448 = bitcast float %368 to i32, !dbg !59
  %449 = bitcast float %373 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %446, i32 %447, i32 %448, i32 %449, ptr addrspace(1) %437, i1 %78) #4, !dbg !59
  %450 = bitcast float %378 to i32, !dbg !59
  %451 = bitcast float %383 to i32, !dbg !59
  %452 = bitcast float %388 to i32, !dbg !59
  %453 = bitcast float %393 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %450, i32 %451, i32 %452, i32 %453, ptr addrspace(1) %439, i1 %79) #4, !dbg !59
  %454 = bitcast float %398 to i32, !dbg !59
  %455 = bitcast float %403 to i32, !dbg !59
  %456 = bitcast float %408 to i32, !dbg !59
  %457 = bitcast float %413 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %454, i32 %455, i32 %456, i32 %457, ptr addrspace(1) %441, i1 %80) #4, !dbg !59
  %458 = getelementptr float, ptr addrspace(1) %7, i64 %65, !dbg !60
  %459 = getelementptr float, ptr addrspace(1) %7, i64 %67, !dbg !60
  %460 = getelementptr float, ptr addrspace(1) %7, i64 %69, !dbg !60
  %461 = getelementptr float, ptr addrspace(1) %7, i64 %71, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %462 = shl i32 %13, 10, !dbg !61
  %463 = and i32 %462, 3072, !dbg !61
  %464 = or disjoint i32 %463, %18, !dbg !61
  %465 = lshr exact i32 %463, 4, !dbg !61
  %466 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %465, !dbg !61
  %467 = getelementptr float, ptr addrspace(3) %466, i32 %464, !dbg !61
  %468 = bitcast float %414 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, <1 x i32> %468, i1 true) #4, !dbg !61
  %469 = or disjoint i32 %464, 256, !dbg !61
  %470 = lshr i32 %469, 6, !dbg !61
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i32 %470, !dbg !61
  %472 = getelementptr float, ptr addrspace(3) %471, i32 %469, !dbg !61
  %473 = bitcast float %415 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %473, i1 true) #4, !dbg !61
  %474 = or disjoint i32 %464, 512, !dbg !61
  %475 = lshr i32 %474, 6, !dbg !61
  %476 = getelementptr float, ptr addrspace(3) @global_smem, i32 %475, !dbg !61
  %477 = getelementptr float, ptr addrspace(3) %476, i32 %474, !dbg !61
  %478 = bitcast float %416 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %478, i1 true) #4, !dbg !61
  %479 = or disjoint i32 %464, 768, !dbg !61
  %480 = lshr i32 %479, 6, !dbg !61
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %480, !dbg !61
  %482 = getelementptr float, ptr addrspace(3) %481, i32 %479, !dbg !61
  %483 = bitcast float %417 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %483, i1 true) #4, !dbg !61
  %484 = or disjoint i32 %464, 64, !dbg !61
  %485 = getelementptr float, ptr addrspace(3) %466, i32 %484, !dbg !61
  %486 = bitcast float %418 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %485, <1 x i32> %486, i1 true) #4, !dbg !61
  %487 = or disjoint i32 %464, 320, !dbg !61
  %488 = lshr i32 %487, 6, !dbg !61
  %489 = and i32 %488, 52, !dbg !61
  %490 = getelementptr float, ptr addrspace(3) @global_smem, i32 %489, !dbg !61
  %491 = getelementptr float, ptr addrspace(3) %490, i32 %487, !dbg !61
  %492 = bitcast float %419 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %492, i1 true) #4, !dbg !61
  %493 = or disjoint i32 %464, 576, !dbg !61
  %494 = lshr i32 %493, 6, !dbg !61
  %495 = and i32 %494, 56, !dbg !61
  %496 = getelementptr float, ptr addrspace(3) @global_smem, i32 %495, !dbg !61
  %497 = getelementptr float, ptr addrspace(3) %496, i32 %493, !dbg !61
  %498 = bitcast float %420 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %498, i1 true) #4, !dbg !61
  %499 = or disjoint i32 %464, 832, !dbg !61
  %500 = lshr i32 %499, 6, !dbg !61
  %501 = and i32 %500, 60, !dbg !61
  %502 = getelementptr float, ptr addrspace(3) @global_smem, i32 %501, !dbg !61
  %503 = getelementptr float, ptr addrspace(3) %502, i32 %499, !dbg !61
  %504 = bitcast float %421 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %504, i1 true) #4, !dbg !61
  %505 = or disjoint i32 %464, 128, !dbg !61
  %506 = getelementptr float, ptr addrspace(3) %466, i32 %505, !dbg !61
  %507 = bitcast float %422 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %507, i1 true) #4, !dbg !61
  %508 = or disjoint i32 %464, 384, !dbg !61
  %509 = lshr i32 %508, 6, !dbg !61
  %510 = and i32 %509, 52, !dbg !61
  %511 = getelementptr float, ptr addrspace(3) @global_smem, i32 %510, !dbg !61
  %512 = getelementptr float, ptr addrspace(3) %511, i32 %508, !dbg !61
  %513 = bitcast float %423 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %512, <1 x i32> %513, i1 true) #4, !dbg !61
  %514 = or disjoint i32 %464, 640, !dbg !61
  %515 = lshr i32 %514, 6, !dbg !61
  %516 = and i32 %515, 56, !dbg !61
  %517 = getelementptr float, ptr addrspace(3) @global_smem, i32 %516, !dbg !61
  %518 = getelementptr float, ptr addrspace(3) %517, i32 %514, !dbg !61
  %519 = bitcast float %424 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %518, <1 x i32> %519, i1 true) #4, !dbg !61
  %520 = or disjoint i32 %464, 896, !dbg !61
  %521 = lshr i32 %520, 6, !dbg !61
  %522 = and i32 %521, 60, !dbg !61
  %523 = getelementptr float, ptr addrspace(3) @global_smem, i32 %522, !dbg !61
  %524 = getelementptr float, ptr addrspace(3) %523, i32 %520, !dbg !61
  %525 = bitcast float %425 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %524, <1 x i32> %525, i1 true) #4, !dbg !61
  %526 = or disjoint i32 %464, 192, !dbg !61
  %527 = getelementptr float, ptr addrspace(3) %466, i32 %526, !dbg !61
  %528 = bitcast float %426 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %527, <1 x i32> %528, i1 true) #4, !dbg !61
  %529 = or disjoint i32 %464, 448, !dbg !61
  %530 = lshr i32 %529, 6, !dbg !61
  %531 = and i32 %530, 52, !dbg !61
  %532 = getelementptr float, ptr addrspace(3) @global_smem, i32 %531, !dbg !61
  %533 = getelementptr float, ptr addrspace(3) %532, i32 %529, !dbg !61
  %534 = bitcast float %427 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %533, <1 x i32> %534, i1 true) #4, !dbg !61
  %535 = or disjoint i32 %464, 704, !dbg !61
  %536 = lshr i32 %535, 6, !dbg !61
  %537 = and i32 %536, 56, !dbg !61
  %538 = getelementptr float, ptr addrspace(3) @global_smem, i32 %537, !dbg !61
  %539 = getelementptr float, ptr addrspace(3) %538, i32 %535, !dbg !61
  %540 = bitcast float %428 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %539, <1 x i32> %540, i1 true) #4, !dbg !61
  %541 = or disjoint i32 %464, 960, !dbg !61
  %542 = lshr i32 %541, 6, !dbg !61
  %543 = and i32 %542, 60, !dbg !61
  %544 = getelementptr float, ptr addrspace(3) @global_smem, i32 %543, !dbg !61
  %545 = getelementptr float, ptr addrspace(3) %544, i32 %541, !dbg !61
  %546 = bitcast float %429 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %545, <1 x i32> %546, i1 true) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %547 = lshr i32 %354, 6, !dbg !61
  %548 = and i32 %547, 28, !dbg !61
  %549 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %548, !dbg !61
  %550 = getelementptr inbounds float, ptr addrspace(3) %549, i32 %354, !dbg !61
  %551 = load <4 x i32>, ptr addrspace(3) %550, align 16, !dbg !61
  %552 = lshr i32 %374, 6, !dbg !61
  %553 = and i32 %552, 44, !dbg !61
  %554 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %553, !dbg !61
  %555 = getelementptr inbounds float, ptr addrspace(3) %554, i32 %374, !dbg !61
  %556 = load <4 x i32>, ptr addrspace(3) %555, align 16, !dbg !61
  %557 = lshr i32 %394, 6, !dbg !61
  %558 = and i32 %557, 60, !dbg !61
  %559 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %558, !dbg !61
  %560 = getelementptr inbounds float, ptr addrspace(3) %559, i32 %394, !dbg !61
  %561 = load <4 x i32>, ptr addrspace(3) %560, align 16, !dbg !61
  %.extract = load i32, ptr addrspace(3) %105, align 16, !dbg !61
  %562 = getelementptr inbounds i8, ptr addrspace(3) %105, i32 4, !dbg !61
  %.extract20 = load i32, ptr addrspace(3) %562, align 4, !dbg !61
  %563 = getelementptr inbounds i8, ptr addrspace(3) %105, i32 8, !dbg !61
  %.extract21 = load i32, ptr addrspace(3) %563, align 8, !dbg !61
  %564 = getelementptr inbounds i8, ptr addrspace(3) %105, i32 12, !dbg !61
  %.extract22 = load i32, ptr addrspace(3) %564, align 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %458, i1 %73) #4, !dbg !61
  %.extract23 = extractelement <4 x i32> %551, i64 0, !dbg !61
  %.extract24 = extractelement <4 x i32> %551, i64 1, !dbg !61
  %.extract25 = extractelement <4 x i32> %551, i64 2, !dbg !61
  %.extract26 = extractelement <4 x i32> %551, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %459, i1 %74) #4, !dbg !61
  %.extract27 = extractelement <4 x i32> %556, i64 0, !dbg !61
  %.extract28 = extractelement <4 x i32> %556, i64 1, !dbg !61
  %.extract29 = extractelement <4 x i32> %556, i64 2, !dbg !61
  %.extract30 = extractelement <4 x i32> %556, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %460, i1 %75) #4, !dbg !61
  %.extract31 = extractelement <4 x i32> %561, i64 0, !dbg !61
  %.extract32 = extractelement <4 x i32> %561, i64 1, !dbg !61
  %.extract33 = extractelement <4 x i32> %561, i64 2, !dbg !61
  %.extract34 = extractelement <4 x i32> %561, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %461, i1 %76) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7dzfqqci2667ocbe5ipsyrgj46pujii763s7f535gidrnwflcad.py", directory: "inductor_cache/7d")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 39, scope: !7)
!23 = !DILocation(line: 31, column: 51, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 44, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 64, scope: !7)
!28 = !DILocation(line: 31, column: 56, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 40, scope: !7)
!38 = !DILocation(line: 36, column: 50, scope: !7)
!39 = !DILocation(line: 36, column: 62, scope: !7)
!40 = !DILocation(line: 36, column: 45, scope: !7)
!41 = !DILocation(line: 36, column: 55, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 67, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 26, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 37, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 49, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 40, scope: !7)
!58 = !DILocation(line: 51, column: 25, scope: !7)
!59 = !DILocation(line: 51, column: 59, scope: !7)
!60 = !DILocation(line: 52, column: 25, scope: !7)
!61 = !DILocation(line: 52, column: 58, scope: !7)
!62 = !DILocation(line: 52, column: 4, scope: !7)
