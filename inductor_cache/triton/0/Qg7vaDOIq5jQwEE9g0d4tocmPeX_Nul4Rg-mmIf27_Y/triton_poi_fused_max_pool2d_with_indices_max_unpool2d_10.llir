; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/7f/c7fct3sovowyblb472nlfzopiwpsj56tb7pkqgcb7qmhyj7ot2id.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp33 < 8192\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %6 = shl i32 %5, 8, !dbg !13
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %8 = shl i32 %7, 1, !dbg !14
  %9 = and i32 %8, 254, !dbg !14
  %10 = or disjoint i32 %6, %9, !dbg !15
  %11 = or disjoint i32 %6, 1, !dbg !15
  %12 = icmp slt i32 %10, 2048, !dbg !16
  %13 = srem i32 %11, 2, !dbg !17
  %14 = ashr exact i32 %10, 1, !dbg !18
  %15 = srem i32 %14, 2, !dbg !19
  %16 = shl nsw i32 %13, 1, !dbg !20
  %17 = shl i32 %10, 2, !dbg !21
  %18 = add i32 %16, %17, !dbg !22
  %19 = sext i32 %17 to i64, !dbg !23
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !23
  %21 = sext i32 %18 to i64, !dbg !23
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !23
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %12) #3, !dbg !24
  %24 = bitcast i32 %23 to float, !dbg !24
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #3, !dbg !24
  %26 = bitcast i32 %25 to float, !dbg !24
  %27 = or disjoint i32 %17, 1, !dbg !25
  %28 = or disjoint i32 %18, 1, !dbg !25
  %29 = sext i32 %27 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !26
  %31 = sext i32 %28 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #3, !dbg !27
  %34 = bitcast i32 %33 to float, !dbg !27
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %12) #3, !dbg !27
  %36 = bitcast i32 %35 to float, !dbg !27
  %37 = or disjoint i32 %17, 4, !dbg !28
  %38 = add i32 %18, 4, !dbg !28
  %39 = sext i32 %37 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !29
  %41 = sext i32 %38 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #3, !dbg !30
  %44 = bitcast i32 %43 to float, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %12) #3, !dbg !30
  %46 = bitcast i32 %45 to float, !dbg !30
  %47 = or disjoint i32 %17, 5, !dbg !31
  %48 = add i32 %18, 5, !dbg !31
  %49 = sext i32 %47 to i64, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !32
  %51 = sext i32 %48 to i64, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %12) #3, !dbg !33
  %54 = bitcast i32 %53 to float, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %12) #3, !dbg !33
  %56 = bitcast i32 %55 to float, !dbg !33
  %57 = fcmp ogt float %34, %24, !dbg !34
  %58 = fcmp ogt float %36, %26, !dbg !34
  %59 = fcmp uno float %34, 0.000000e+00, !dbg !35
  %60 = fcmp uno float %36, 0.000000e+00, !dbg !35
  %61 = or i1 %57, %59, !dbg !39
  %62 = or i1 %58, %60, !dbg !39
  %63 = select i1 %61, float %34, float %24, !dbg !40
  %64 = select i1 %62, float %36, float %26, !dbg !40
  %65 = fcmp olt float %63, %44, !dbg !41
  %66 = fcmp olt float %64, %46, !dbg !41
  %67 = fcmp uno float %44, 0.000000e+00, !dbg !42
  %68 = fcmp uno float %46, 0.000000e+00, !dbg !42
  %69 = or i1 %67, %65, !dbg !44
  %70 = or i1 %68, %66, !dbg !44
  %71 = select i1 %69, float %44, float %63, !dbg !45
  %72 = select i1 %70, float %46, float %64, !dbg !45
  %73 = fcmp olt float %71, %54, !dbg !46
  %74 = fcmp olt float %72, %56, !dbg !46
  %75 = zext i1 %57 to i32, !dbg !47
  %76 = select i1 %65, i32 2, i32 %75, !dbg !48
  %77 = select i1 %73, i32 3, i32 %76, !dbg !49
  %78 = zext i1 %58 to i32, !dbg !47
  %79 = select i1 %66, i32 2, i32 %78, !dbg !48
  %80 = select i1 %74, i32 3, i32 %79, !dbg !49
  %81 = lshr i32 %77, 1, !dbg !50
  %82 = lshr i32 %80, 1, !dbg !50
  %83 = and i32 %77, 1, !dbg !51
  %84 = shl nsw i32 %15, 1, !dbg !52
  %85 = or disjoint i32 %81, %84, !dbg !53
  %86 = or disjoint i32 %82, %84, !dbg !53
  %87 = or i32 %80, %16, !dbg !54
  %88 = sext i32 %85 to i64, !dbg !55
  %89 = sext i32 %86 to i64, !dbg !55
  %90 = shl nsw i64 %88, 2, !dbg !55
  %91 = shl nsw i64 %89, 2, !dbg !55
  %92 = zext nneg i32 %83 to i64, !dbg !56
  %93 = sext i32 %87 to i64, !dbg !56
  %94 = or disjoint i64 %90, %92, !dbg !56
  %95 = add nsw i64 %91, %93, !dbg !56
  %96 = sdiv i32 %10, 4, !dbg !57
  %97 = shl i32 %96, 4, !dbg !58
  %98 = sext i32 %97 to i64, !dbg !59
  %99 = add nsw i64 %94, %98, !dbg !59
  %100 = add nsw i64 %95, %98, !dbg !59
  %101 = lshr i64 %99, 50, !dbg !60
  %102 = and i64 %101, 8192, !dbg !60
  %103 = add nsw i64 %102, %99, !dbg !60
  %104 = lshr i64 %100, 50, !dbg !60
  %105 = and i64 %104, 8192, !dbg !60
  %106 = add nsw i64 %105, %100, !dbg !60
  %107 = or i64 %106, %103, !dbg !61
  %.not13 = icmp ugt i64 %107, 8191, !dbg !61
  %108 = and i1 %12, %.not13, !dbg !61
  br i1 %108, label %109, label %110, !dbg !61

109:                                              ; preds = %4
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 66, ptr nonnull @assertFunc_0, i64 1), !dbg !61
  unreachable, !dbg !61

110:                                              ; preds = %4
  %111 = and i32 %7, 127, !dbg !14
  %112 = or disjoint i32 %111, 128, !dbg !14
  %113 = or disjoint i32 %6, %112, !dbg !15
  %114 = icmp slt i32 %113, 2048, !dbg !16
  %115 = or disjoint i32 %6, %111, !dbg !15
  %116 = icmp slt i32 %115, 2048, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %117 = fcmp uno float %54, 0.000000e+00, !dbg !62
  %118 = fcmp uno float %56, 0.000000e+00, !dbg !62
  %119 = or i1 %117, %73, !dbg !64
  %120 = or i1 %118, %74, !dbg !64
  %121 = sext i32 %10 to i64, !dbg !65
  %122 = getelementptr i64, ptr addrspace(1) %1, i64 %121, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %94, i64 %95, ptr addrspace(1) %122, i1 %12) #3, !dbg !66
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !67
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !67
  %125 = ptrtoint ptr addrspace(1) %123 to i64, !dbg !68
  %126 = ptrtoint ptr addrspace(1) %124 to i64, !dbg !68
  %127 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %9, !dbg !68
  tail call void asm sideeffect "@$3 st.shared.v2.b64 [ $0 + 0 ], { $1, $2 };", "r,l,l,b"(ptr addrspace(3) %127, i64 %125, i64 %126, i1 true) #3, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %128 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %111, !dbg !68
  %129 = load i64, ptr addrspace(3) %128, align 8, !dbg !68
  %130 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %112, !dbg !68
  %131 = load i64, ptr addrspace(3) %130, align 8, !dbg !68
  %132 = inttoptr i64 %129 to ptr addrspace(1), !dbg !68
  %133 = inttoptr i64 %131 to ptr addrspace(1), !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !68
  %135 = bitcast float %71 to i32, !dbg !68
  %136 = select i1 %119, i32 %53, i32 %135, !dbg !69
  %137 = bitcast float %72 to i32, !dbg !68
  %138 = select i1 %120, i32 %55, i32 %137, !dbg !69
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %134, i32 %136, i32 %138, i1 true) #3, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !68
  %140 = load i32, ptr addrspace(3) %139, align 4, !dbg !68
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !68
  %142 = load i32, ptr addrspace(3) %141, align 4, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %132, i1 %116) #3, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %133, i1 %114) #3, !dbg !68
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7fct3sovowyblb472nlfzopiwpsj56tb7pkqgcb7qmhyj7ot2id.py", directory: "inductor_cache/7f")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10", linkageName: "triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 24, column: 19, scope: !11)
!18 = !DILocation(line: 25, column: 19, scope: !11)
!19 = !DILocation(line: 26, column: 26, scope: !11)
!20 = !DILocation(line: 28, column: 32, scope: !11)
!21 = !DILocation(line: 28, column: 39, scope: !11)
!22 = !DILocation(line: 28, column: 37, scope: !11)
!23 = !DILocation(line: 28, column: 30, scope: !11)
!24 = !DILocation(line: 28, column: 44, scope: !11)
!25 = !DILocation(line: 29, column: 41, scope: !11)
!26 = !DILocation(line: 29, column: 30, scope: !11)
!27 = !DILocation(line: 29, column: 48, scope: !11)
!28 = !DILocation(line: 30, column: 41, scope: !11)
!29 = !DILocation(line: 30, column: 30, scope: !11)
!30 = !DILocation(line: 30, column: 48, scope: !11)
!31 = !DILocation(line: 31, column: 42, scope: !11)
!32 = !DILocation(line: 31, column: 31, scope: !11)
!33 = !DILocation(line: 31, column: 49, scope: !11)
!34 = !DILocation(line: 36, column: 18, scope: !11)
!35 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !11, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 40, column: 40, scope: !11)
!39 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 41, column: 18, scope: !11)
!42 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !43)
!43 = !DILocation(line: 44, column: 41, scope: !11)
!44 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !43)
!45 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !43)
!46 = !DILocation(line: 45, column: 20, scope: !11)
!47 = !DILocation(line: 50, column: 30, scope: !11)
!48 = !DILocation(line: 43, column: 33, scope: !11)
!49 = !DILocation(line: 47, column: 35, scope: !11)
!50 = !DILocation(line: 50, column: 87, scope: !11)
!51 = !DILocation(line: 52, column: 20, scope: !11)
!52 = !DILocation(line: 53, column: 14, scope: !11)
!53 = !DILocation(line: 54, column: 20, scope: !11)
!54 = !DILocation(line: 56, column: 20, scope: !11)
!55 = !DILocation(line: 58, column: 20, scope: !11)
!56 = !DILocation(line: 59, column: 20, scope: !11)
!57 = !DILocation(line: 60, column: 22, scope: !11)
!58 = !DILocation(line: 60, column: 16, scope: !11)
!59 = !DILocation(line: 61, column: 20, scope: !11)
!60 = !DILocation(line: 65, column: 35, scope: !11)
!61 = !DILocation(line: 66, column: 65, scope: !11)
!62 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !63)
!63 = !DILocation(line: 69, column: 42, scope: !11)
!64 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !63)
!65 = !DILocation(line: 70, column: 25, scope: !11)
!66 = !DILocation(line: 70, column: 37, scope: !11)
!67 = !DILocation(line: 71, column: 25, scope: !11)
!68 = !DILocation(line: 71, column: 67, scope: !11)
!69 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !63)
!70 = !DILocation(line: 71, column: 4, scope: !11)
