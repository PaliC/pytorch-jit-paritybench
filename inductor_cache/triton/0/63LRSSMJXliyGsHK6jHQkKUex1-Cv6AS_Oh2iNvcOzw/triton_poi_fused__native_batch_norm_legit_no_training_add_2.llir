; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %18 = shl i32 %17, 4, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = lshr i32 %19, 1, !dbg !12
  %21 = and i32 %20, 7, !dbg !12
  %22 = and i32 %19, 16, !dbg !12
  %23 = lshr exact i32 %22, 1, !dbg !12
  %24 = or disjoint i32 %21, %23, !dbg !12
  %25 = and i32 %19, 1, !dbg !12
  %26 = and i32 %19, 15, !dbg !12
  %27 = or disjoint i32 %24, %18, !dbg !13
  %28 = or disjoint i32 %18, %26, !dbg !13
  %29 = icmp slt i32 %27, 16, !dbg !14
  %30 = icmp slt i32 %28, 16, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %32 = shl i32 %31, 1, !dbg !16
  %.lobit2 = lshr exact i32 %22, 4, !dbg !17
  %33 = or disjoint i32 %32, %25, !dbg !18
  %34 = or disjoint i32 %32, %.lobit2, !dbg !18
  %35 = icmp slt i32 %33, 4, !dbg !19
  %36 = icmp slt i32 %34, 4, !dbg !19
  %37 = srem i32 %27, 4, !dbg !20
  %.frozen = freeze i32 %28, !dbg !21
  %38 = sdiv i32 %.frozen, 4, !dbg !21
  %39 = mul i32 %38, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %40 = shl i32 %27, 2, !dbg !22
  %41 = add i32 %33, %40, !dbg !23
  %42 = sext i32 %41 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = and i1 %29, %35, !dbg !25
  %45 = and i1 %30, %36, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %44) #4, !dbg !26
  %47 = shl nuw nsw i32 %25, 4, !dbg !26
  %48 = or disjoint i32 %47, %21, !dbg !26
  %49 = or disjoint i32 %48, %23, !dbg !26
  %50 = and i32 %19, 31, !dbg !26
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !26
  %52 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %49, !dbg !26
  %53 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %54 = lshr i32 %50, 4, !dbg !26
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !26
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %50, !dbg !26
  %57 = load float, ptr addrspace(3) %56, align 4, !dbg !26
  %58 = shl i32 %34, 2, !dbg !27
  %59 = add i32 %58, %.decomposed, !dbg !28
  %60 = shl i32 %38, 4, !dbg !29
  %61 = add i32 %59, %60, !dbg !30
  %62 = sext i32 %61 to i64, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !31
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %45) #4, !dbg !32
  %65 = bitcast i32 %64 to float, !dbg !32
  %66 = sext i32 %.decomposed to i64, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !33
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %30) #4, !dbg !34
  %69 = bitcast i32 %68 to float, !dbg !34
  %70 = shl nsw i32 %37, 2, !dbg !35
  %71 = add i32 %70, %33, !dbg !36
  %72 = sext i32 %71 to i64, !dbg !37
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !37
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %44) #4, !dbg !38
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !39
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %44) #4, !dbg !40
  %77 = bitcast i32 %76 to float, !dbg !40
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %72, !dbg !41
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %44) #4, !dbg !42
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %72, !dbg !43
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %44) #4, !dbg !44
  %82 = getelementptr float, ptr addrspace(1) %7, i64 %72, !dbg !45
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %44) #4, !dbg !46
  %84 = getelementptr float, ptr addrspace(1) %8, i64 %72, !dbg !47
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %44) #4, !dbg !48
  %86 = bitcast i32 %85 to float, !dbg !48
  %87 = getelementptr float, ptr addrspace(1) %9, i64 %72, !dbg !49
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %44) #4, !dbg !50
  %89 = getelementptr float, ptr addrspace(1) %10, i64 %72, !dbg !51
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %44) #4, !dbg !52
  %91 = fadd float %65, %69, !dbg !53
  %92 = fcmp olt float %91, 0.000000e+00, !dbg !54
  %93 = select i1 %92, float 0.000000e+00, float %91, !dbg !58
  %94 = fadd float %57, %93, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %95 = shl i32 %19, 1, !dbg !59
  %96 = and i32 %95, 30, !dbg !59
  %97 = or disjoint i32 %96, %.lobit2, !dbg !59
  %98 = lshr exact i32 %96, 1, !dbg !59
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !59
  %100 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %97, !dbg !59
  %101 = bitcast float %94 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %102 = lshr i32 %50, 1, !dbg !59
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %102, !dbg !59
  %104 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %50, !dbg !59
  %105 = load float, ptr addrspace(3) %104, align 4, !dbg !59
  %106 = fadd float %77, 0x3EE4F8B580000000, !dbg !60
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !61
  %.not.i = icmp eq i32 %107, 0, !dbg !61
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !61
  %.not1.i = icmp eq i32 %108, 0, !dbg !61
  br i1 %.not.i, label %114, label %109, !dbg !61

109:                                              ; preds = %16
  br i1 %.not1.i, label %112, label %110, !dbg !61

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

114:                                              ; preds = %16
  br i1 %.not1.i, label %117, label %115, !dbg !61

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

__nv_sqrtf.exit:                                  ; preds = %110, %112, %115, %117
  %.0.i = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !61
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !62
  %120 = fadd float %86, 0x3EE4F8B580000000, !dbg !63
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not.i4 = icmp eq i32 %121, 0, !dbg !64
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !64
  %.not1.i7 = icmp eq i32 %122, 0, !dbg !64
  br i1 %.not.i4, label %128, label %123, !dbg !64

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %126, label %124, !dbg !64

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !64
  br label %__nv_sqrtf.exit8, !dbg !64

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !64
  br label %__nv_sqrtf.exit8, !dbg !64

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %131, label %129, !dbg !64

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !64
  br label %__nv_sqrtf.exit8, !dbg !64

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !64
  br label %__nv_sqrtf.exit8, !dbg !64

__nv_sqrtf.exit8:                                 ; preds = %124, %126, %129, %131
  %.0.i6 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !64
  %133 = bitcast i32 %74 to float, !dbg !38
  %134 = fsub float %105, %133, !dbg !65
  %135 = fmul float %134, %119, !dbg !66
  %136 = bitcast i32 %79 to float, !dbg !42
  %137 = fmul float %135, %136, !dbg !67
  %138 = bitcast i32 %81 to float, !dbg !44
  %139 = fadd float %137, %138, !dbg !68
  %140 = bitcast i32 %83 to float, !dbg !46
  %141 = fsub float %139, %140, !dbg !69
  %142 = bitcast i32 %90 to float, !dbg !52
  %143 = bitcast i32 %88 to float, !dbg !50
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !70
  %145 = fmul float %141, %144, !dbg !71
  %146 = fmul float %145, %143, !dbg !72
  %147 = fadd float %146, %142, !dbg !73
  %148 = getelementptr float, ptr addrspace(1) %11, i64 %42, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %149 = load i32, ptr addrspace(3) %104, align 4, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %148, i1 %44) #4, !dbg !75
  %150 = getelementptr float, ptr addrspace(1) %12, i64 %42, !dbg !76
  %151 = bitcast float %139 to i32, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %150, i1 %44) #4, !dbg !77
  %152 = getelementptr float, ptr addrspace(1) %13, i64 %42, !dbg !78
  %153 = bitcast float %147 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %152, i1 %44) #4, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqncs52p2cuscbxxnbktpxxboosgyzzt2xapufoo4qmqesw6ve46.py", directory: "inductor_cache/qn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 45, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 50, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 37, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 42, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 42, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 43, scope: !7)
!43 = !DILocation(line: 38, column: 31, scope: !7)
!44 = !DILocation(line: 38, column: 43, scope: !7)
!45 = !DILocation(line: 39, column: 31, scope: !7)
!46 = !DILocation(line: 39, column: 43, scope: !7)
!47 = !DILocation(line: 40, column: 31, scope: !7)
!48 = !DILocation(line: 40, column: 43, scope: !7)
!49 = !DILocation(line: 41, column: 31, scope: !7)
!50 = !DILocation(line: 41, column: 43, scope: !7)
!51 = !DILocation(line: 42, column: 32, scope: !7)
!52 = !DILocation(line: 42, column: 44, scope: !7)
!53 = !DILocation(line: 43, column: 18, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 45, column: 40, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 46, column: 18, scope: !7)
!60 = !DILocation(line: 49, column: 19, scope: !7)
!61 = !DILocation(line: 50, column: 27, scope: !7)
!62 = !DILocation(line: 52, column: 20, scope: !7)
!63 = !DILocation(line: 59, column: 20, scope: !7)
!64 = !DILocation(line: 60, column: 27, scope: !7)
!65 = !DILocation(line: 47, column: 18, scope: !7)
!66 = !DILocation(line: 55, column: 19, scope: !7)
!67 = !DILocation(line: 56, column: 20, scope: !7)
!68 = !DILocation(line: 57, column: 20, scope: !7)
!69 = !DILocation(line: 58, column: 20, scope: !7)
!70 = !DILocation(line: 61, column: 20, scope: !7)
!71 = !DILocation(line: 63, column: 20, scope: !7)
!72 = !DILocation(line: 64, column: 20, scope: !7)
!73 = !DILocation(line: 65, column: 20, scope: !7)
!74 = !DILocation(line: 66, column: 25, scope: !7)
!75 = !DILocation(line: 66, column: 43, scope: !7)
!76 = !DILocation(line: 67, column: 25, scope: !7)
!77 = !DILocation(line: 67, column: 44, scope: !7)
!78 = !DILocation(line: 68, column: 25, scope: !7)
!79 = !DILocation(line: 68, column: 44, scope: !7)
!80 = !DILocation(line: 68, column: 4, scope: !7)
