; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = srem i32 %17, 16, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %20 = sdiv i32 %.frozen, 22528, !dbg !15
  %.frozen59 = freeze i32 %18, !dbg !15
  %21 = sdiv i32 %.frozen59, 22528, !dbg !15
  %22 = mul i32 %20, 22528, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = mul i32 %21, 22528, !dbg !16
  %srem1.decomposed = sub i32 %.frozen59, %23, !dbg !16
  %24 = mul nsw i32 %20, 21760, !dbg !17
  %25 = mul nsw i32 %21, 21760, !dbg !17
  %26 = add nsw i32 %24, %srem.decomposed, !dbg !18
  %27 = add nsw i32 %25, %srem1.decomposed, !dbg !18
  %28 = sext i32 %26 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = sext i32 %27 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = mul nsw i32 %20, 16768, !dbg !20
  %33 = mul nsw i32 %21, 16768, !dbg !20
  %34 = add nsw i32 %32, %srem.decomposed, !dbg !21
  %35 = add nsw i32 %33, %srem1.decomposed, !dbg !21
  %36 = sext i32 %34 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !22
  %38 = sext i32 %35 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !23
  %42 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !24
  %43 = insertelement <2 x i32> %42, i32 %17, i64 1, !dbg !24
  %44 = sdiv <2 x i32> %43, splat (i32 16), !dbg !24
  %45 = srem <2 x i32> %44, splat (i32 1408), !dbg !25
  %46 = extractelement <2 x i32> %45, i64 1, !dbg !26
  %47 = sext i32 %46 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !27
  %49 = extractelement <2 x i32> %45, i64 0, !dbg !26
  %50 = sext i32 %49 to i64, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %63 = bitcast i32 %62 to float, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %65 = bitcast i32 %64 to float, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %67 = bitcast i32 %66 to float, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %69 = bitcast i32 %68 to float, !dbg !30
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !30
  %71 = bitcast i32 %70 to float, !dbg !30
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !30
  %73 = bitcast i32 %72 to float, !dbg !30
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !30
  %75 = bitcast i32 %74 to float, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !30
  %77 = bitcast i32 %76 to float, !dbg !30
  %78 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !31
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !32
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %7, i64 %47, !dbg !33
  %89 = getelementptr float, ptr addrspace(1) %7, i64 %50, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !34
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !34
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !34
  %98 = icmp slt <2 x i32> %45, splat (i32 1024), !dbg !35
  %99 = extractelement <2 x i1> %98, i64 1, !dbg !36
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #3, !dbg !36
  %101 = extractelement <2 x i1> %98, i64 0, !dbg !36
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !36
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #3, !dbg !37
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !37
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99, i32 0, i1 %99) #3, !dbg !38
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !38
  %107 = add nsw <2 x i32> %45, splat (i32 -1024), !dbg !39
  %108 = extractelement <2 x i32> %107, i64 1, !dbg !40
  %109 = icmp ult i32 %108, 336, !dbg !40
  %110 = extractelement <2 x i32> %107, i64 0, !dbg !40
  %111 = icmp ult i32 %110, 336, !dbg !40
  %112 = shl nsw i32 %46, 4, !dbg !26
  %113 = shl nsw i32 %49, 4, !dbg !26
  %114 = add nsw i32 %19, -16384, !dbg !26
  %115 = add nsw i32 %114, %24, !dbg !41
  %116 = add nsw i32 %115, %112, !dbg !42
  %117 = add nsw i32 %114, %25, !dbg !41
  %118 = add nsw i32 %117, %113, !dbg !42
  %119 = sext i32 %116 to i64, !dbg !43
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !43
  %121 = sext i32 %118 to i64, !dbg !43
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !43
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #3, !dbg !44
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111, i32 0, i1 %111) #3, !dbg !44
  %125 = add nsw i32 %46, -1360, !dbg !45
  %126 = icmp ult i32 %125, 24, !dbg !45
  %127 = add nsw i32 %49, -1360, !dbg !45
  %128 = icmp ult i32 %127, 24, !dbg !45
  %129 = add nsw i32 %19, 16384, !dbg !46
  %130 = add nsw i32 %32, %129, !dbg !47
  %131 = add nsw i32 %130, -21760, !dbg !48
  %132 = add nsw i32 %131, %112, !dbg !49
  %133 = add nsw i32 %33, %129, !dbg !47
  %134 = add nsw i32 %133, -21760, !dbg !48
  %135 = add nsw i32 %134, %113, !dbg !49
  %136 = sext i32 %132 to i64, !dbg !50
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !50
  %138 = sext i32 %135 to i64, !dbg !50
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !50
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #3, !dbg !51
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #3, !dbg !51
  %142 = icmp sgt i32 %46, 1383, !dbg !52
  %143 = icmp sgt i32 %49, 1383, !dbg !52
  %144 = add nsw i32 %130, -22144, !dbg !53
  %145 = add nsw i32 %144, %112, !dbg !54
  %146 = add nsw i32 %133, -22144, !dbg !53
  %147 = add nsw i32 %146, %113, !dbg !54
  %148 = sext i32 %145 to i64, !dbg !55
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !55
  %150 = sext i32 %147 to i64, !dbg !55
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !55
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !56
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %151, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #3, !dbg !56
  %154 = fadd float %63, 0x3F50624DE0000000, !dbg !57
  %155 = fadd float %65, 0x3F50624DE0000000, !dbg !57
  %156 = fadd float %67, 0x3F50624DE0000000, !dbg !57
  %157 = fadd float %69, 0x3F50624DE0000000, !dbg !57
  %158 = fadd float %71, 0x3F50624DE0000000, !dbg !57
  %159 = fadd float %73, 0x3F50624DE0000000, !dbg !57
  %160 = fadd float %75, 0x3F50624DE0000000, !dbg !57
  %161 = fadd float %77, 0x3F50624DE0000000, !dbg !57
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i = icmp eq i32 %162, 0, !dbg !58
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i = icmp eq i32 %163, 0, !dbg !58
  br i1 %.not.i, label %169, label %164, !dbg !58

164:                                              ; preds = %11
  br i1 %.not1.i, label %167, label %165, !dbg !58

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

169:                                              ; preds = %11
  br i1 %.not1.i, label %172, label %170, !dbg !58

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %165, %167, %170, %172
  %.0.i = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !58
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i9 = icmp eq i32 %174, 0, !dbg !58
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i12 = icmp eq i32 %175, 0, !dbg !58
  br i1 %.not.i9, label %181, label %176, !dbg !58

176:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %179, label %177, !dbg !58

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #3, !dbg !58
  br label %__nv_sqrtf.exit13, !dbg !58

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #3, !dbg !58
  br label %__nv_sqrtf.exit13, !dbg !58

181:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %184, label %182, !dbg !58

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #3, !dbg !58
  br label %__nv_sqrtf.exit13, !dbg !58

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #3, !dbg !58
  br label %__nv_sqrtf.exit13, !dbg !58

__nv_sqrtf.exit13:                                ; preds = %177, %179, %182, %184
  %.0.i11 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !58
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i14 = icmp eq i32 %186, 0, !dbg !58
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i17 = icmp eq i32 %187, 0, !dbg !58
  br i1 %.not.i14, label %193, label %188, !dbg !58

188:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %191, label %189, !dbg !58

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #3, !dbg !58
  br label %__nv_sqrtf.exit18, !dbg !58

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #3, !dbg !58
  br label %__nv_sqrtf.exit18, !dbg !58

193:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %196, label %194, !dbg !58

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #3, !dbg !58
  br label %__nv_sqrtf.exit18, !dbg !58

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #3, !dbg !58
  br label %__nv_sqrtf.exit18, !dbg !58

__nv_sqrtf.exit18:                                ; preds = %189, %191, %194, %196
  %.0.i16 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !58
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i19 = icmp eq i32 %198, 0, !dbg !58
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i22 = icmp eq i32 %199, 0, !dbg !58
  br i1 %.not.i19, label %205, label %200, !dbg !58

200:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %203, label %201, !dbg !58

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #3, !dbg !58
  br label %__nv_sqrtf.exit23, !dbg !58

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #3, !dbg !58
  br label %__nv_sqrtf.exit23, !dbg !58

205:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %208, label %206, !dbg !58

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #3, !dbg !58
  br label %__nv_sqrtf.exit23, !dbg !58

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #3, !dbg !58
  br label %__nv_sqrtf.exit23, !dbg !58

__nv_sqrtf.exit23:                                ; preds = %201, %203, %206, %208
  %.0.i21 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !58
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i24 = icmp eq i32 %210, 0, !dbg !58
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i27 = icmp eq i32 %211, 0, !dbg !58
  br i1 %.not.i24, label %217, label %212, !dbg !58

212:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %215, label %213, !dbg !58

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #3, !dbg !58
  br label %__nv_sqrtf.exit28, !dbg !58

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #3, !dbg !58
  br label %__nv_sqrtf.exit28, !dbg !58

217:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %220, label %218, !dbg !58

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #3, !dbg !58
  br label %__nv_sqrtf.exit28, !dbg !58

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #3, !dbg !58
  br label %__nv_sqrtf.exit28, !dbg !58

__nv_sqrtf.exit28:                                ; preds = %213, %215, %218, %220
  %.0.i26 = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !58
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i29 = icmp eq i32 %222, 0, !dbg !58
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i32 = icmp eq i32 %223, 0, !dbg !58
  br i1 %.not.i29, label %229, label %224, !dbg !58

224:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %227, label %225, !dbg !58

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %159) #3, !dbg !58
  br label %__nv_sqrtf.exit33, !dbg !58

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %159) #3, !dbg !58
  br label %__nv_sqrtf.exit33, !dbg !58

229:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %232, label %230, !dbg !58

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %159) #3, !dbg !58
  br label %__nv_sqrtf.exit33, !dbg !58

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %159) #3, !dbg !58
  br label %__nv_sqrtf.exit33, !dbg !58

__nv_sqrtf.exit33:                                ; preds = %225, %227, %230, %232
  %.0.i31 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !58
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i34 = icmp eq i32 %234, 0, !dbg !58
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i37 = icmp eq i32 %235, 0, !dbg !58
  br i1 %.not.i34, label %241, label %236, !dbg !58

236:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %239, label %237, !dbg !58

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %160) #3, !dbg !58
  br label %__nv_sqrtf.exit38, !dbg !58

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %160) #3, !dbg !58
  br label %__nv_sqrtf.exit38, !dbg !58

241:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %244, label %242, !dbg !58

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %160) #3, !dbg !58
  br label %__nv_sqrtf.exit38, !dbg !58

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %160) #3, !dbg !58
  br label %__nv_sqrtf.exit38, !dbg !58

__nv_sqrtf.exit38:                                ; preds = %237, %239, %242, %244
  %.0.i36 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !58
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i39 = icmp eq i32 %246, 0, !dbg !58
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i42 = icmp eq i32 %247, 0, !dbg !58
  br i1 %.not.i39, label %253, label %248, !dbg !58

248:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %251, label %249, !dbg !58

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #3, !dbg !58
  br label %__nv_sqrtf.exit43, !dbg !58

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #3, !dbg !58
  br label %__nv_sqrtf.exit43, !dbg !58

253:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %256, label %254, !dbg !58

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #3, !dbg !58
  br label %__nv_sqrtf.exit43, !dbg !58

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #3, !dbg !58
  br label %__nv_sqrtf.exit43, !dbg !58

__nv_sqrtf.exit43:                                ; preds = %249, %251, %254, %256
  %.0.i41 = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !58
  %258 = shufflevector <2 x i1> %98, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !35
  %259 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !36
  %260 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !37
  %261 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !38
  %262 = icmp slt <2 x i32> %45, splat (i32 1384), !dbg !59
  %263 = shufflevector <2 x i1> %262, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !59
  %264 = icmp ult <2 x i32> %107, splat (i32 360), !dbg !39
  %265 = shufflevector <2 x i1> %264, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !39
  %266 = icmp slt <2 x i32> %45, splat (i32 1360), !dbg !60
  %267 = shufflevector <2 x i1> %266, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !60
  %268 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !44
  %269 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !51
  %270 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !56
  %271 = insertelement <8 x i32> poison, i32 %59, i64 0, !dbg !28
  %272 = insertelement <8 x i32> %271, i32 %58, i64 1, !dbg !28
  %273 = insertelement <8 x i32> %272, i32 %57, i64 2, !dbg !28
  %274 = insertelement <8 x i32> %273, i32 %56, i64 3, !dbg !28
  %275 = insertelement <8 x i32> %274, i32 %55, i64 4, !dbg !28
  %276 = insertelement <8 x i32> %275, i32 %54, i64 5, !dbg !28
  %277 = insertelement <8 x i32> %276, i32 %53, i64 6, !dbg !28
  %278 = insertelement <8 x i32> %277, i32 %52, i64 7, !dbg !28
  %279 = bitcast <8 x i32> %278 to <8 x float>, !dbg !28
  %280 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !36
  %281 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !37
  %282 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !38
  %283 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !44
  %284 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !51
  %285 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !56
  %286 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !36
  %287 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !37
  %288 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !38
  %289 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !44
  %290 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !51
  %291 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !56
  %292 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !36
  %293 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !37
  %294 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !38
  %295 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !44
  %296 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !51
  %297 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !56
  %298 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !36
  %299 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !37
  %300 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !38
  %301 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !44
  %302 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !51
  %303 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !56
  %304 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !36
  %305 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !37
  %306 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !38
  %307 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !44
  %308 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !51
  %309 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !56
  %310 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !36
  %311 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !37
  %312 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !38
  %313 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !44
  %314 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !51
  %315 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !56
  %316 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !36
  %317 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !37
  %318 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !38
  %319 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !44
  %320 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !51
  %321 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !56
  %322 = insertelement <8 x i32> poison, i32 %97, i64 0, !dbg !34
  %323 = insertelement <8 x i32> %322, i32 %96, i64 1, !dbg !34
  %324 = insertelement <8 x i32> %323, i32 %95, i64 2, !dbg !34
  %325 = insertelement <8 x i32> %324, i32 %94, i64 3, !dbg !34
  %326 = insertelement <8 x i32> %325, i32 %93, i64 4, !dbg !34
  %327 = insertelement <8 x i32> %326, i32 %92, i64 5, !dbg !34
  %328 = insertelement <8 x i32> %327, i32 %91, i64 6, !dbg !34
  %329 = insertelement <8 x i32> %328, i32 %90, i64 7, !dbg !34
  %330 = bitcast <8 x i32> %329 to <8 x float>, !dbg !34
  %331 = insertelement <8 x i32> poison, i32 %87, i64 0, !dbg !32
  %332 = insertelement <8 x i32> %331, i32 %86, i64 1, !dbg !32
  %333 = insertelement <8 x i32> %332, i32 %85, i64 2, !dbg !32
  %334 = insertelement <8 x i32> %333, i32 %84, i64 3, !dbg !32
  %335 = insertelement <8 x i32> %334, i32 %83, i64 4, !dbg !32
  %336 = insertelement <8 x i32> %335, i32 %82, i64 5, !dbg !32
  %337 = insertelement <8 x i32> %336, i32 %81, i64 6, !dbg !32
  %338 = insertelement <8 x i32> %337, i32 %80, i64 7, !dbg !32
  %339 = bitcast <8 x i32> %338 to <8 x float>, !dbg !32
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !61
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !61
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !61
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #3, !dbg !61
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #3, !dbg !61
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #3, !dbg !61
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #3, !dbg !61
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #3, !dbg !61
  %348 = insertelement <8 x i32> poison, i32 %259, i64 0, !dbg !36
  %349 = insertelement <8 x i32> %348, i32 %280, i64 1, !dbg !36
  %350 = insertelement <8 x i32> %349, i32 %286, i64 2, !dbg !36
  %351 = insertelement <8 x i32> %350, i32 %292, i64 3, !dbg !36
  %352 = insertelement <8 x i32> %351, i32 %298, i64 4, !dbg !36
  %353 = insertelement <8 x i32> %352, i32 %304, i64 5, !dbg !36
  %354 = insertelement <8 x i32> %353, i32 %310, i64 6, !dbg !36
  %355 = insertelement <8 x i32> %354, i32 %316, i64 7, !dbg !36
  %356 = bitcast <8 x i32> %355 to <8 x float>, !dbg !36
  %357 = insertelement <8 x i32> poison, i32 %260, i64 0, !dbg !37
  %358 = insertelement <8 x i32> %357, i32 %281, i64 1, !dbg !37
  %359 = insertelement <8 x i32> %358, i32 %287, i64 2, !dbg !37
  %360 = insertelement <8 x i32> %359, i32 %293, i64 3, !dbg !37
  %361 = insertelement <8 x i32> %360, i32 %299, i64 4, !dbg !37
  %362 = insertelement <8 x i32> %361, i32 %305, i64 5, !dbg !37
  %363 = insertelement <8 x i32> %362, i32 %311, i64 6, !dbg !37
  %364 = insertelement <8 x i32> %363, i32 %317, i64 7, !dbg !37
  %365 = bitcast <8 x i32> %364 to <8 x float>, !dbg !37
  %366 = fadd <8 x float> %356, %365, !dbg !62
  %367 = insertelement <8 x i32> poison, i32 %261, i64 0, !dbg !38
  %368 = insertelement <8 x i32> %367, i32 %282, i64 1, !dbg !38
  %369 = insertelement <8 x i32> %368, i32 %288, i64 2, !dbg !38
  %370 = insertelement <8 x i32> %369, i32 %294, i64 3, !dbg !38
  %371 = insertelement <8 x i32> %370, i32 %300, i64 4, !dbg !38
  %372 = insertelement <8 x i32> %371, i32 %306, i64 5, !dbg !38
  %373 = insertelement <8 x i32> %372, i32 %312, i64 6, !dbg !38
  %374 = insertelement <8 x i32> %373, i32 %318, i64 7, !dbg !38
  %375 = bitcast <8 x i32> %374 to <8 x float>, !dbg !38
  %376 = fadd <8 x float> %366, %375, !dbg !63
  %377 = insertelement <8 x i32> poison, i32 %268, i64 0, !dbg !64
  %378 = insertelement <8 x i32> %377, i32 %283, i64 1, !dbg !64
  %379 = insertelement <8 x i32> %378, i32 %289, i64 2, !dbg !64
  %380 = insertelement <8 x i32> %379, i32 %295, i64 3, !dbg !64
  %381 = insertelement <8 x i32> %380, i32 %301, i64 4, !dbg !64
  %382 = insertelement <8 x i32> %381, i32 %307, i64 5, !dbg !64
  %383 = insertelement <8 x i32> %382, i32 %313, i64 6, !dbg !64
  %384 = insertelement <8 x i32> %383, i32 %319, i64 7, !dbg !64
  %385 = insertelement <8 x i32> poison, i32 %269, i64 0, !dbg !64
  %386 = insertelement <8 x i32> %385, i32 %284, i64 1, !dbg !64
  %387 = insertelement <8 x i32> %386, i32 %290, i64 2, !dbg !64
  %388 = insertelement <8 x i32> %387, i32 %296, i64 3, !dbg !64
  %389 = insertelement <8 x i32> %388, i32 %302, i64 4, !dbg !64
  %390 = insertelement <8 x i32> %389, i32 %308, i64 5, !dbg !64
  %391 = insertelement <8 x i32> %390, i32 %314, i64 6, !dbg !64
  %392 = insertelement <8 x i32> %391, i32 %320, i64 7, !dbg !64
  %393 = select <8 x i1> %267, <8 x i32> %384, <8 x i32> %392, !dbg !64
  %394 = bitcast <8 x i32> %393 to <8 x float>, !dbg !64
  %395 = select <8 x i1> %265, <8 x float> %394, <8 x float> zeroinitializer, !dbg !65
  %396 = insertelement <8 x i32> poison, i32 %270, i64 0, !dbg !56
  %397 = insertelement <8 x i32> %396, i32 %285, i64 1, !dbg !56
  %398 = insertelement <8 x i32> %397, i32 %291, i64 2, !dbg !56
  %399 = insertelement <8 x i32> %398, i32 %297, i64 3, !dbg !56
  %400 = insertelement <8 x i32> %399, i32 %303, i64 4, !dbg !56
  %401 = insertelement <8 x i32> %400, i32 %309, i64 5, !dbg !56
  %402 = insertelement <8 x i32> %401, i32 %315, i64 6, !dbg !56
  %403 = insertelement <8 x i32> %402, i32 %321, i64 7, !dbg !56
  %404 = bitcast <8 x i32> %403 to <8 x float>, !dbg !56
  %405 = select <8 x i1> %263, <8 x float> %395, <8 x float> %404, !dbg !66
  %406 = select <8 x i1> %258, <8 x float> %376, <8 x float> %405, !dbg !67
  %407 = fsub <8 x float> %406, %279, !dbg !68
  %408 = insertelement <8 x float> poison, float %347, i64 0, !dbg !69
  %409 = insertelement <8 x float> %408, float %346, i64 1, !dbg !69
  %410 = insertelement <8 x float> %409, float %345, i64 2, !dbg !69
  %411 = insertelement <8 x float> %410, float %344, i64 3, !dbg !69
  %412 = insertelement <8 x float> %411, float %343, i64 4, !dbg !69
  %413 = insertelement <8 x float> %412, float %342, i64 5, !dbg !69
  %414 = insertelement <8 x float> %413, float %341, i64 6, !dbg !69
  %415 = insertelement <8 x float> %414, float %340, i64 7, !dbg !69
  %416 = fmul <8 x float> %407, %415, !dbg !69
  %417 = fmul <8 x float> %416, %339, !dbg !70
  %418 = fadd <8 x float> %417, %330, !dbg !71
  %419 = fcmp olt <8 x float> %418, zeroinitializer, !dbg !72
  %420 = extractelement <8 x i1> %419, i64 7, !dbg !76
  %421 = extractelement <8 x i1> %419, i64 6, !dbg !76
  %422 = extractelement <8 x i1> %419, i64 5, !dbg !76
  %423 = extractelement <8 x i1> %419, i64 4, !dbg !76
  %424 = extractelement <8 x i1> %419, i64 3, !dbg !76
  %425 = extractelement <8 x i1> %419, i64 2, !dbg !76
  %426 = extractelement <8 x i1> %419, i64 1, !dbg !76
  %427 = extractelement <8 x i1> %419, i64 0, !dbg !76
  %428 = sext i32 %17 to i64, !dbg !77
  %429 = getelementptr float, ptr addrspace(1) %8, i64 %428, !dbg !77
  %430 = sext i32 %18 to i64, !dbg !77
  %431 = getelementptr float, ptr addrspace(1) %8, i64 %430, !dbg !77
  %bc = bitcast <8 x float> %406 to <8 x i32>, !dbg !78
  %432 = extractelement <8 x i32> %bc, i64 7, !dbg !78
  %bc44 = bitcast <8 x float> %406 to <8 x i32>, !dbg !78
  %433 = extractelement <8 x i32> %bc44, i64 6, !dbg !78
  %bc45 = bitcast <8 x float> %406 to <8 x i32>, !dbg !78
  %434 = extractelement <8 x i32> %bc45, i64 5, !dbg !78
  %bc46 = bitcast <8 x float> %406 to <8 x i32>, !dbg !78
  %435 = extractelement <8 x i32> %bc46, i64 4, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %432, i32 %433, i32 %434, i32 %435, ptr addrspace(1) %429, i1 true) #3, !dbg !78
  %bc47 = bitcast <8 x float> %406 to <8 x i32>, !dbg !78
  %436 = extractelement <8 x i32> %bc47, i64 3, !dbg !78
  %bc48 = bitcast <8 x float> %406 to <8 x i32>, !dbg !78
  %437 = extractelement <8 x i32> %bc48, i64 2, !dbg !78
  %bc49 = bitcast <8 x float> %406 to <8 x i32>, !dbg !78
  %438 = extractelement <8 x i32> %bc49, i64 1, !dbg !78
  %bc50 = bitcast <8 x float> %406 to <8 x i32>, !dbg !78
  %439 = extractelement <8 x i32> %bc50, i64 0, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %436, i32 %437, i32 %438, i32 %439, ptr addrspace(1) %431, i1 true) #3, !dbg !78
  %440 = getelementptr float, ptr addrspace(1) %9, i64 %428, !dbg !79
  %441 = getelementptr float, ptr addrspace(1) %9, i64 %430, !dbg !79
  %bc51 = bitcast <8 x float> %418 to <8 x i32>, !dbg !80
  %442 = extractelement <8 x i32> %bc51, i64 7, !dbg !80
  %443 = select i1 %420, i32 0, i32 %442, !dbg !76
  %bc52 = bitcast <8 x float> %418 to <8 x i32>, !dbg !80
  %444 = extractelement <8 x i32> %bc52, i64 6, !dbg !80
  %445 = select i1 %421, i32 0, i32 %444, !dbg !76
  %bc53 = bitcast <8 x float> %418 to <8 x i32>, !dbg !80
  %446 = extractelement <8 x i32> %bc53, i64 5, !dbg !80
  %447 = select i1 %422, i32 0, i32 %446, !dbg !76
  %bc54 = bitcast <8 x float> %418 to <8 x i32>, !dbg !80
  %448 = extractelement <8 x i32> %bc54, i64 4, !dbg !80
  %449 = select i1 %423, i32 0, i32 %448, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %443, i32 %445, i32 %447, i32 %449, ptr addrspace(1) %440, i1 true) #3, !dbg !80
  %bc55 = bitcast <8 x float> %418 to <8 x i32>, !dbg !80
  %450 = extractelement <8 x i32> %bc55, i64 3, !dbg !80
  %451 = select i1 %424, i32 0, i32 %450, !dbg !76
  %bc56 = bitcast <8 x float> %418 to <8 x i32>, !dbg !80
  %452 = extractelement <8 x i32> %bc56, i64 2, !dbg !80
  %453 = select i1 %425, i32 0, i32 %452, !dbg !76
  %bc57 = bitcast <8 x float> %418 to <8 x i32>, !dbg !80
  %454 = extractelement <8 x i32> %bc57, i64 1, !dbg !80
  %455 = select i1 %426, i32 0, i32 %454, !dbg !76
  %bc58 = bitcast <8 x float> %418 to <8 x i32>, !dbg !80
  %456 = extractelement <8 x i32> %bc58, i64 0, !dbg !80
  %457 = select i1 %427, i32 0, i32 %456, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %451, i32 %453, i32 %455, i32 %457, ptr addrspace(1) %441, i1 true) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chvv3hqpd46futh72e4fsgep5fezx4xxi5orwk7xpw7fjgd3n5yv.py", directory: "inductor_cache/hv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_39, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_39, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_39", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 51, scope: !7)
!18 = !DILocation(line: 37, column: 45, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 38, column: 51, scope: !7)
!21 = !DILocation(line: 38, column: 45, scope: !7)
!22 = !DILocation(line: 38, column: 30, scope: !7)
!23 = !DILocation(line: 40, column: 30, scope: !7)
!24 = !DILocation(line: 24, column: 21, scope: !7)
!25 = !DILocation(line: 24, column: 27, scope: !7)
!26 = !DILocation(line: 59, column: 40, scope: !7)
!27 = !DILocation(line: 28, column: 31, scope: !7)
!28 = !DILocation(line: 28, column: 36, scope: !7)
!29 = !DILocation(line: 29, column: 31, scope: !7)
!30 = !DILocation(line: 29, column: 36, scope: !7)
!31 = !DILocation(line: 30, column: 31, scope: !7)
!32 = !DILocation(line: 30, column: 36, scope: !7)
!33 = !DILocation(line: 31, column: 31, scope: !7)
!34 = !DILocation(line: 31, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 56, scope: !7)
!37 = !DILocation(line: 38, column: 56, scope: !7)
!38 = !DILocation(line: 40, column: 56, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 58, column: 20, scope: !7)
!41 = !DILocation(line: 59, column: 36, scope: !7)
!42 = !DILocation(line: 59, column: 56, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 67, scope: !7)
!45 = !DILocation(line: 63, column: 20, scope: !7)
!46 = !DILocation(line: 64, column: 39, scope: !7)
!47 = !DILocation(line: 64, column: 48, scope: !7)
!48 = !DILocation(line: 64, column: 44, scope: !7)
!49 = !DILocation(line: 64, column: 75, scope: !7)
!50 = !DILocation(line: 64, column: 31, scope: !7)
!51 = !DILocation(line: 64, column: 86, scope: !7)
!52 = !DILocation(line: 68, column: 21, scope: !7)
!53 = !DILocation(line: 72, column: 44, scope: !7)
!54 = !DILocation(line: 72, column: 75, scope: !7)
!55 = !DILocation(line: 72, column: 31, scope: !7)
!56 = !DILocation(line: 72, column: 86, scope: !7)
!57 = !DILocation(line: 79, column: 20, scope: !7)
!58 = !DILocation(line: 80, column: 27, scope: !7)
!59 = !DILocation(line: 51, column: 20, scope: !7)
!60 = !DILocation(line: 57, column: 20, scope: !7)
!61 = !DILocation(line: 82, column: 20, scope: !7)
!62 = !DILocation(line: 39, column: 18, scope: !7)
!63 = !DILocation(line: 41, column: 18, scope: !7)
!64 = !DILocation(line: 65, column: 35, scope: !7)
!65 = !DILocation(line: 67, column: 35, scope: !7)
!66 = !DILocation(line: 73, column: 35, scope: !7)
!67 = !DILocation(line: 0, scope: !7)
!68 = !DILocation(line: 77, column: 20, scope: !7)
!69 = !DILocation(line: 85, column: 20, scope: !7)
!70 = !DILocation(line: 86, column: 20, scope: !7)
!71 = !DILocation(line: 87, column: 20, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!75 = !DILocation(line: 89, column: 42, scope: !7)
!76 = !DILocation(line: 121, column: 29, scope: !73, inlinedAt: !75)
!77 = !DILocation(line: 90, column: 25, scope: !7)
!78 = !DILocation(line: 90, column: 37, scope: !7)
!79 = !DILocation(line: 91, column: 25, scope: !7)
!80 = !DILocation(line: 91, column: 37, scope: !7)
!81 = !DILocation(line: 91, column: 4, scope: !7)
