; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_div_sub_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = icmp slt i32 %7, 12, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %10 = shl i32 %9, 10, !dbg !13
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %12 = shl i32 %11, 2, !dbg !14
  %13 = and i32 %12, 508, !dbg !14
  %14 = or disjoint i32 %13, 512, !dbg !14
  %15 = and i32 %11, 127, !dbg !14
  %16 = or disjoint i32 %15, 128, !dbg !14
  %17 = or disjoint i32 %15, 256, !dbg !14
  %18 = or disjoint i32 %15, 384, !dbg !14
  %19 = or disjoint i32 %15, 512, !dbg !14
  %20 = or disjoint i32 %15, 640, !dbg !14
  %21 = or disjoint i32 %15, 768, !dbg !14
  %22 = or disjoint i32 %15, 896, !dbg !14
  %23 = or disjoint i32 %10, %15, !dbg !15
  %24 = or disjoint i32 %10, %16, !dbg !15
  %25 = or disjoint i32 %10, %17, !dbg !15
  %26 = or disjoint i32 %10, %18, !dbg !15
  %27 = or disjoint i32 %10, %19, !dbg !15
  %28 = or disjoint i32 %10, %20, !dbg !15
  %29 = or disjoint i32 %10, %21, !dbg !15
  %30 = or disjoint i32 %10, %22, !dbg !15
  %.frozen = freeze i32 %7, !dbg !16
  %31 = sdiv i32 %.frozen, 3, !dbg !16
  %32 = mul i32 %31, 3, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %33 = shl i32 %7, 18, !dbg !18
  %34 = or disjoint i32 %33, %13, !dbg !15
  %35 = add i32 %34, %10, !dbg !19
  %36 = or disjoint i32 %33, %14, !dbg !15
  %37 = add i32 %36, %10, !dbg !19
  %38 = sext i32 %35 to i64, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !20
  %40 = sext i32 %37 to i64, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !20
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %8) #2, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !21
  %47 = bitcast i32 %43 to float, !dbg !21
  %48 = bitcast i32 %44 to float, !dbg !21
  %49 = bitcast i32 %45 to float, !dbg !21
  %50 = bitcast i32 %46 to float, !dbg !21
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %8) #2, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !21
  %56 = bitcast i32 %52 to float, !dbg !21
  %57 = bitcast i32 %53 to float, !dbg !21
  %58 = bitcast i32 %54 to float, !dbg !21
  %59 = bitcast i32 %55 to float, !dbg !21
  %60 = sext i32 %.decomposed to i64, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !22
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %8) #2, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %8) #2, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %8) #2, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %8) #2, !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %8) #2, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %8) #2, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %8) #2, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %8) #2, !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = fsub float %47, %66, !dbg !26
  %74 = fsub float %48, %66, !dbg !26
  %75 = fsub float %49, %66, !dbg !26
  %76 = fsub float %50, %66, !dbg !26
  %77 = fsub float %56, %66, !dbg !26
  %78 = fsub float %57, %66, !dbg !26
  %79 = fsub float %58, %66, !dbg !26
  %80 = fsub float %59, %66, !dbg !26
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %72) #2, !dbg !27
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %72) #2, !dbg !27
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %72) #2, !dbg !27
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %72) #2, !dbg !27
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float %72) #2, !dbg !27
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float %72) #2, !dbg !27
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float %72) #2, !dbg !27
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %72) #2, !dbg !27
  %89 = mul i32 %23, 3, !dbg !28
  %90 = mul i32 %24, 3, !dbg !28
  %91 = mul i32 %25, 3, !dbg !28
  %92 = mul i32 %26, 3, !dbg !28
  %93 = mul i32 %27, 3, !dbg !28
  %94 = mul i32 %28, 3, !dbg !28
  %95 = mul i32 %29, 3, !dbg !28
  %96 = mul i32 %30, 3, !dbg !28
  %97 = mul i32 %31, 786432, !dbg !29
  %98 = add i32 %97, %.decomposed, !dbg !30
  %99 = add i32 %98, %89, !dbg !31
  %100 = add i32 %98, %90, !dbg !31
  %101 = add i32 %98, %91, !dbg !31
  %102 = add i32 %98, %92, !dbg !31
  %103 = add i32 %98, %93, !dbg !31
  %104 = add i32 %98, %94, !dbg !31
  %105 = add i32 %98, %95, !dbg !31
  %106 = add i32 %98, %96, !dbg !31
  %107 = sext i32 %99 to i64, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !32
  %109 = sext i32 %100 to i64, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !32
  %111 = sext i32 %101 to i64, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !32
  %113 = sext i32 %102 to i64, !dbg !32
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !32
  %115 = sext i32 %103 to i64, !dbg !32
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !32
  %117 = sext i32 %104 to i64, !dbg !32
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !32
  %119 = sext i32 %105 to i64, !dbg !32
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !32
  %121 = sext i32 %106 to i64, !dbg !32
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !32
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !33
  %124 = bitcast float %81 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !33
  %125 = or disjoint i32 %13, 1, !dbg !33
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %125, !dbg !33
  %127 = bitcast float %82 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !33
  %128 = or disjoint i32 %13, 2, !dbg !33
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !33
  %130 = bitcast float %83 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !33
  %131 = or disjoint i32 %13, 3, !dbg !33
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !33
  %133 = bitcast float %84 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !33
  %135 = load i32, ptr addrspace(3) %134, align 4, !dbg !33
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !33
  %137 = load i32, ptr addrspace(3) %136, align 4, !dbg !33
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !33
  %139 = load i32, ptr addrspace(3) %138, align 4, !dbg !33
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !33
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %142 = bitcast float %85 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %142, i1 true) #2, !dbg !33
  %143 = bitcast float %86 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %143, i1 true) #2, !dbg !33
  %144 = bitcast float %87 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %144, i1 true) #2, !dbg !33
  %145 = bitcast float %88 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %145, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %146 = load i32, ptr addrspace(3) %134, align 4, !dbg !33
  %147 = load i32, ptr addrspace(3) %136, align 4, !dbg !33
  %148 = load i32, ptr addrspace(3) %138, align 4, !dbg !33
  %149 = load i32, ptr addrspace(3) %140, align 4, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %108, i1 %8) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %110, i1 %8) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %112, i1 %8) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %114, i1 %8) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %116, i1 %8) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %118, i1 %8) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %120, i1 %8) #2, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %122, i1 %8) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqttxpins755lmba6tmii3pj7otftg3ydsrszivx2c7m5vofjaru.py", directory: "inductor_cache/qt")
!4 = !{ptr @triton_poi_fused_div_sub_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_sub_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_sub_13", linkageName: "triton_poi_fused_div_sub_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 42, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 32, scope: !7)
!29 = !DILocation(line: 37, column: 44, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 37, scope: !7)
!32 = !DILocation(line: 37, column: 25, scope: !7)
!33 = !DILocation(line: 37, column: 55, scope: !7)
!34 = !DILocation(line: 37, column: 4, scope: !7)
