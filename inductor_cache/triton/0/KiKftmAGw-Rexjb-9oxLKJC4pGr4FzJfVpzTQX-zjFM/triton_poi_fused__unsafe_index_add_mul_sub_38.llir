; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 510, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 64, !dbg !14
  %19 = srem i32 %18, 64, !dbg !15
  %20 = mul i32 %18, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = sdiv i32 %17, 4096, !dbg !17
  %22 = srem i32 %21, 128, !dbg !18
  %.frozen1 = freeze i32 %17, !dbg !19
  %23 = sdiv i32 %.frozen1, 524288, !dbg !19
  %24 = mul i32 %23, 524288, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %24, !dbg !20
  %25 = sext i32 %19 to i64, !dbg !21
  %26 = getelementptr i64, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !22
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !22
  %29 = sext i32 %.decomposed to i64, !dbg !23
  %30 = getelementptr i64, ptr addrspace(1) %1, i64 %29, !dbg !23
  %31 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !24
  %32 = extractvalue { i64, i64 } %31, 0, !dbg !24
  %33 = extractvalue { i64, i64 } %31, 1, !dbg !24
  %34 = getelementptr i64, ptr addrspace(1) %3, i64 %29, !dbg !25
  %35 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !26
  %36 = extractvalue { i64, i64 } %35, 0, !dbg !26
  %37 = extractvalue { i64, i64 } %35, 1, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !27
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !28
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !28
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !28
  %42 = bitcast i32 %40 to float, !dbg !28
  %43 = bitcast i32 %41 to float, !dbg !28
  %44 = getelementptr i64, ptr addrspace(1) %5, i64 %25, !dbg !29
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !30
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !32
  %49 = bitcast i32 %48 to float, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !32
  %51 = bitcast i32 %50 to float, !dbg !32
  %52 = lshr i64 %27, 58, !dbg !33
  %53 = and i64 %52, 32, !dbg !33
  %54 = add i64 %53, %27, !dbg !33
  %55 = lshr i64 %32, 58, !dbg !34
  %56 = and i64 %55, 32, !dbg !34
  %57 = add i64 %56, %32, !dbg !34
  %58 = lshr i64 %33, 58, !dbg !34
  %59 = and i64 %58, 32, !dbg !34
  %60 = add i64 %59, %33, !dbg !34
  %61 = shl i64 %54, 5, !dbg !35
  %62 = add i64 %57, %61, !dbg !36
  %63 = add i64 %60, %61, !dbg !36
  %64 = shl nsw i32 %22, 10, !dbg !37
  %65 = sext i32 %64 to i64, !dbg !38
  %66 = mul i32 %23, 655360, !dbg !39
  %67 = sext i32 %66 to i64, !dbg !40
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !41
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %65, !dbg !41
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %67, !dbg !41
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !41
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %65, !dbg !41
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %67, !dbg !41
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !42
  %76 = lshr i64 %36, 58, !dbg !43
  %77 = and i64 %76, 32, !dbg !43
  %78 = add i64 %77, %36, !dbg !43
  %79 = lshr i64 %37, 58, !dbg !43
  %80 = and i64 %79, 32, !dbg !43
  %81 = add i64 %80, %37, !dbg !43
  %82 = add i64 %78, %61, !dbg !44
  %83 = add i64 %81, %61, !dbg !44
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !45
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %65, !dbg !45
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %67, !dbg !45
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !45
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %65, !dbg !45
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %67, !dbg !45
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !46
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !46
  %92 = lshr i64 %45, 58, !dbg !47
  %93 = and i64 %92, 32, !dbg !47
  %94 = add i64 %93, %45, !dbg !47
  %95 = shl i64 %94, 5, !dbg !48
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !49
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %95, !dbg !49
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %65, !dbg !49
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %67, !dbg !49
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !49
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %95, !dbg !49
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %65, !dbg !49
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %67, !dbg !49
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !50
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !50
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !51
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %95, !dbg !51
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %65, !dbg !51
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %67, !dbg !51
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !51
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %95, !dbg !51
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %65, !dbg !51
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %67, !dbg !51
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !52
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #1, !dbg !52
  %116 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !50
  %117 = insertelement <2 x i32> %116, i32 %74, i64 1, !dbg !50
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !50
  %119 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !52
  %120 = insertelement <2 x i32> %119, i32 %90, i64 1, !dbg !52
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !52
  %122 = fsub <2 x float> %121, %118, !dbg !53
  %123 = insertelement <2 x float> poison, float %42, i64 0, !dbg !54
  %124 = shufflevector <2 x float> %123, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %125 = fmul <2 x float> %122, %124, !dbg !54
  %126 = fadd <2 x float> %125, %118, !dbg !55
  %127 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !50
  %128 = insertelement <2 x i32> %127, i32 %75, i64 1, !dbg !50
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !50
  %130 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !52
  %131 = insertelement <2 x i32> %130, i32 %91, i64 1, !dbg !52
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !52
  %133 = fsub <2 x float> %132, %129, !dbg !53
  %134 = insertelement <2 x float> poison, float %43, i64 0, !dbg !54
  %135 = shufflevector <2 x float> %134, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !54
  %136 = fmul <2 x float> %133, %135, !dbg !54
  %137 = fadd <2 x float> %136, %129, !dbg !55
  %138 = extractelement <2 x float> %126, i64 0, !dbg !56
  %139 = extractelement <2 x float> %126, i64 1, !dbg !57
  %140 = fsub float %138, %139, !dbg !56
  %141 = extractelement <2 x float> %137, i64 0, !dbg !56
  %142 = extractelement <2 x float> %137, i64 1, !dbg !57
  %143 = fsub float %141, %142, !dbg !56
  %144 = fmul float %140, %49, !dbg !58
  %145 = fmul float %143, %51, !dbg !58
  %146 = fadd float %139, %144, !dbg !57
  %147 = fadd float %142, %145, !dbg !57
  %148 = shl nsw i32 %21, 10, !dbg !59
  %149 = sext i32 %148 to i64, !dbg !60
  %150 = getelementptr float, ptr addrspace(1) %7, i64 %62, !dbg !61
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %149, !dbg !61
  %152 = getelementptr float, ptr addrspace(1) %7, i64 %63, !dbg !61
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %149, !dbg !61
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #1, !dbg !62
  %155 = bitcast i32 %154 to float, !dbg !62
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 true) #1, !dbg !62
  %157 = bitcast i32 %156 to float, !dbg !62
  %158 = getelementptr float, ptr addrspace(1) %7, i64 %82, !dbg !63
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %149, !dbg !63
  %160 = getelementptr float, ptr addrspace(1) %7, i64 %83, !dbg !63
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %149, !dbg !63
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #1, !dbg !64
  %163 = bitcast i32 %162 to float, !dbg !64
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #1, !dbg !64
  %165 = bitcast i32 %164 to float, !dbg !64
  %166 = fsub float %163, %155, !dbg !65
  %167 = fsub float %165, %157, !dbg !65
  %168 = fmul float %166, %42, !dbg !66
  %169 = fmul float %167, %43, !dbg !66
  %170 = fadd float %168, %155, !dbg !67
  %171 = fadd float %169, %157, !dbg !67
  %172 = mul i32 %23, 1310720, !dbg !68
  %173 = add i32 %172, %.decomposed2, !dbg !69
  %174 = sext i32 %173 to i64, !dbg !70
  %175 = getelementptr float, ptr addrspace(1) %8, i64 %174, !dbg !70
  %176 = bitcast float %146 to i32, !dbg !71
  %177 = bitcast float %147 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %177, ptr addrspace(1) %175, i1 true) #1, !dbg !71
  %178 = sext i32 %17 to i64, !dbg !72
  %179 = getelementptr float, ptr addrspace(1) %9, i64 %178, !dbg !72
  %180 = bitcast float %170 to i32, !dbg !73
  %181 = bitcast float %171 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %180, i32 %181, ptr addrspace(1) %179, i1 true) #1, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c52u3kgyunba3g5v4l3qtwq4xjioewxcy6ohtrhezi6xhar6fbef.py", directory: "inductor_cache/52")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_38, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_38", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 32, scope: !7)
!34 = !DILocation(line: 43, column: 32, scope: !7)
!35 = !DILocation(line: 44, column: 40, scope: !7)
!36 = !DILocation(line: 44, column: 37, scope: !7)
!37 = !DILocation(line: 44, column: 52, scope: !7)
!38 = !DILocation(line: 44, column: 47, scope: !7)
!39 = !DILocation(line: 44, column: 64, scope: !7)
!40 = !DILocation(line: 44, column: 57, scope: !7)
!41 = !DILocation(line: 44, column: 30, scope: !7)
!42 = !DILocation(line: 44, column: 69, scope: !7)
!43 = !DILocation(line: 47, column: 35, scope: !7)
!44 = !DILocation(line: 48, column: 39, scope: !7)
!45 = !DILocation(line: 48, column: 31, scope: !7)
!46 = !DILocation(line: 48, column: 71, scope: !7)
!47 = !DILocation(line: 54, column: 35, scope: !7)
!48 = !DILocation(line: 55, column: 41, scope: !7)
!49 = !DILocation(line: 55, column: 31, scope: !7)
!50 = !DILocation(line: 55, column: 71, scope: !7)
!51 = !DILocation(line: 56, column: 31, scope: !7)
!52 = !DILocation(line: 56, column: 72, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 53, scope: !7)
!60 = !DILocation(line: 63, column: 48, scope: !7)
!61 = !DILocation(line: 63, column: 31, scope: !7)
!62 = !DILocation(line: 63, column: 58, scope: !7)
!63 = !DILocation(line: 64, column: 31, scope: !7)
!64 = !DILocation(line: 64, column: 59, scope: !7)
!65 = !DILocation(line: 65, column: 20, scope: !7)
!66 = !DILocation(line: 66, column: 20, scope: !7)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 68, column: 38, scope: !7)
!69 = !DILocation(line: 68, column: 30, scope: !7)
!70 = !DILocation(line: 68, column: 25, scope: !7)
!71 = !DILocation(line: 68, column: 50, scope: !7)
!72 = !DILocation(line: 69, column: 25, scope: !7)
!73 = !DILocation(line: 69, column: 37, scope: !7)
!74 = !DILocation(line: 69, column: 4, scope: !7)
