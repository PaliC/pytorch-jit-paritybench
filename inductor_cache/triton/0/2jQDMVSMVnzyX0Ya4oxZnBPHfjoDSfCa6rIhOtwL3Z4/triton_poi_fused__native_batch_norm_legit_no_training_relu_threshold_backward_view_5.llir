; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 4, !dbg !12
  %14 = and i32 %13, 240, !dbg !12
  %15 = and i32 %12, 255, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = or disjoint i32 %11, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = shl i32 %21, 4, !dbg !15
  %23 = lshr i32 %12, 4, !dbg !16
  %24 = and i32 %23, 15, !dbg !16
  %25 = or disjoint i32 %22, %24, !dbg !17
  %26 = icmp slt i32 %25, 3025, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %27 = sdiv i32 %.frozen, 256, !dbg !19
  %28 = mul i32 %27, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = srem i32 %17, 256, !dbg !20
  %30 = srem i32 %18, 256, !dbg !20
  %31 = srem i32 %19, 256, !dbg !20
  %32 = srem i32 %20, 256, !dbg !20
  %33 = shl i32 %25, 8, !dbg !21
  %34 = mul i32 %27, 774400, !dbg !22
  %35 = add i32 %34, %33, !dbg !23
  %36 = add i32 %35, %.decomposed, !dbg !24
  %37 = add i32 %35, %29, !dbg !24
  %38 = add i32 %35, %30, !dbg !24
  %39 = add i32 %35, %31, !dbg !24
  %40 = sext i32 %36 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = sext i32 %37 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = sext i32 %38 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %39 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %26) #4, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %26) #4, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !26
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %26) #4, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %26) #4, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %68 = and i32 %13, 4080, !dbg !26
  %69 = and i32 %12, 240, !dbg !26
  %70 = add nuw nsw i32 %68, %69, !dbg !26
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %71, i32 %49, i32 %50, i32 %51, i32 %52, i1 true) #4, !dbg !26
  %72 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 16, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %54, i32 %55, i32 %56, i32 %57, i1 true) #4, !dbg !26
  %73 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 32, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %59, i32 %60, i32 %61, i32 %62, i1 true) #4, !dbg !26
  %74 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 48, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %64, i32 %65, i32 %66, i32 %67, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !26
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %77 = add nuw nsw i32 %15, 272, !dbg !26
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !26
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !26
  %80 = add nuw nsw i32 %15, 544, !dbg !26
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80, !dbg !26
  %82 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  %83 = add nuw nsw i32 %15, 816, !dbg !26
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %83, !dbg !26
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !26
  %86 = add nuw nsw i32 %15, 1088, !dbg !26
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %86, !dbg !26
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !26
  %89 = add nuw nsw i32 %15, 1360, !dbg !26
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %89, !dbg !26
  %91 = load float, ptr addrspace(3) %90, align 4, !dbg !26
  %92 = add nuw nsw i32 %15, 1632, !dbg !26
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !26
  %94 = load float, ptr addrspace(3) %93, align 4, !dbg !26
  %95 = add nuw nsw i32 %15, 1904, !dbg !26
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !26
  %97 = load float, ptr addrspace(3) %96, align 4, !dbg !26
  %98 = add nuw nsw i32 %15, 2176, !dbg !26
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !26
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !26
  %101 = add nuw nsw i32 %15, 2448, !dbg !26
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !26
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !26
  %104 = add nuw nsw i32 %15, 2720, !dbg !26
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !26
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !26
  %107 = add nuw nsw i32 %15, 2992, !dbg !26
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !26
  %109 = load float, ptr addrspace(3) %108, align 4, !dbg !26
  %110 = add nuw nsw i32 %15, 3264, !dbg !26
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !26
  %112 = load float, ptr addrspace(3) %111, align 4, !dbg !26
  %113 = add nuw nsw i32 %15, 3536, !dbg !26
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %113, !dbg !26
  %115 = load float, ptr addrspace(3) %114, align 4, !dbg !26
  %116 = add nuw nsw i32 %15, 3808, !dbg !26
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !26
  %118 = load float, ptr addrspace(3) %117, align 4, !dbg !26
  %119 = add nuw nsw i32 %15, 4080, !dbg !26
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !26
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !26
  %122 = sext i32 %32 to i64, !dbg !27
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !27
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #4, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !29
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #4, !dbg !30
  %127 = bitcast i32 %126 to float, !dbg !30
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %122, !dbg !31
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #4, !dbg !32
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %122, !dbg !33
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #4, !dbg !34
  %132 = fadd float %127, 0x3EE4F8B580000000, !dbg !35
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %133, 0, !dbg !36
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %134, 0, !dbg !36
  br i1 %.not.i, label %140, label %135, !dbg !36

135:                                              ; preds = %9
  br i1 %.not1.i, label %138, label %136, !dbg !36

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

140:                                              ; preds = %9
  br i1 %.not1.i, label %143, label %141, !dbg !36

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %136, %138, %141, %143
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !36
  %.lobit3 = lshr i32 %12, 6, !dbg !16
  %145 = and i32 %.lobit3, 3, !dbg !16
  %146 = or disjoint i32 %145, %22, !dbg !17
  %147 = or disjoint i32 %146, 12, !dbg !17
  %148 = icmp slt i32 %147, 3025, !dbg !18
  %149 = or disjoint i32 %146, 8, !dbg !17
  %150 = icmp slt i32 %149, 3025, !dbg !18
  %151 = or disjoint i32 %146, 4, !dbg !17
  %152 = icmp slt i32 %151, 3025, !dbg !18
  %153 = icmp slt i32 %146, 3025, !dbg !18
  %154 = shl i32 %12, 2, !dbg !12
  %155 = and i32 %154, 252, !dbg !12
  %156 = or disjoint i32 %11, %155, !dbg !13
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %158 = insertelement <16 x float> poison, float %121, i64 0, !dbg !38
  %159 = insertelement <16 x float> %158, float %118, i64 1, !dbg !38
  %160 = insertelement <16 x float> %159, float %115, i64 2, !dbg !38
  %161 = insertelement <16 x float> %160, float %112, i64 3, !dbg !38
  %162 = insertelement <16 x float> %161, float %109, i64 4, !dbg !38
  %163 = insertelement <16 x float> %162, float %106, i64 5, !dbg !38
  %164 = insertelement <16 x float> %163, float %103, i64 6, !dbg !38
  %165 = insertelement <16 x float> %164, float %100, i64 7, !dbg !38
  %166 = insertelement <16 x float> %165, float %97, i64 8, !dbg !38
  %167 = insertelement <16 x float> %166, float %94, i64 9, !dbg !38
  %168 = insertelement <16 x float> %167, float %91, i64 10, !dbg !38
  %169 = insertelement <16 x float> %168, float %88, i64 11, !dbg !38
  %170 = insertelement <16 x float> %169, float %85, i64 12, !dbg !38
  %171 = insertelement <16 x float> %170, float %82, i64 13, !dbg !38
  %172 = insertelement <16 x float> %171, float %79, i64 14, !dbg !38
  %173 = insertelement <16 x float> %172, float %76, i64 15, !dbg !38
  %174 = insertelement <16 x i32> poison, i32 %124, i64 0, !dbg !38
  %175 = bitcast <16 x i32> %174 to <16 x float>, !dbg !38
  %176 = shufflevector <16 x float> %175, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %177 = fsub <16 x float> %173, %176, !dbg !38
  %178 = insertelement <16 x float> poison, float %157, i64 0, !dbg !39
  %179 = shufflevector <16 x float> %178, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %180 = fmul <16 x float> %177, %179, !dbg !39
  %181 = insertelement <16 x i32> poison, i32 %129, i64 0, !dbg !40
  %182 = bitcast <16 x i32> %181 to <16 x float>, !dbg !40
  %183 = shufflevector <16 x float> %182, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %184 = fmul <16 x float> %180, %183, !dbg !40
  %185 = insertelement <16 x i32> poison, i32 %131, i64 0, !dbg !41
  %186 = bitcast <16 x i32> %185 to <16 x float>, !dbg !41
  %187 = shufflevector <16 x float> %186, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %188 = fadd <16 x float> %184, %187, !dbg !41
  %189 = fcmp olt <16 x float> %188, zeroinitializer, !dbg !42
  %190 = select <16 x i1> %189, <16 x float> zeroinitializer, <16 x float> %188, !dbg !46
  %191 = fcmp ole <16 x float> %190, zeroinitializer, !dbg !47
  %192 = shl i32 %146, 10, !dbg !48
  %193 = shl i32 %151, 10, !dbg !48
  %194 = shl i32 %149, 10, !dbg !48
  %195 = shl i32 %147, 10, !dbg !48
  %196 = add i32 %192, %156, !dbg !49
  %197 = add i32 %193, %156, !dbg !49
  %198 = add i32 %194, %156, !dbg !49
  %199 = add i32 %195, %156, !dbg !49
  %200 = sext i32 %196 to i64, !dbg !50
  %201 = getelementptr float, ptr addrspace(1) %5, i64 %200, !dbg !50
  %202 = sext i32 %197 to i64, !dbg !50
  %203 = getelementptr float, ptr addrspace(1) %5, i64 %202, !dbg !50
  %204 = sext i32 %198 to i64, !dbg !50
  %205 = getelementptr float, ptr addrspace(1) %5, i64 %204, !dbg !50
  %206 = sext i32 %199 to i64, !dbg !50
  %207 = getelementptr float, ptr addrspace(1) %5, i64 %206, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %208 = and i32 %154, 1020, !dbg !51
  %209 = extractelement <16 x float> %190, i64 15, !dbg !51
  %210 = bitcast float %209 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %210, i1 true) #4, !dbg !51
  %211 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 1040, !dbg !51
  %212 = extractelement <16 x float> %190, i64 14, !dbg !51
  %213 = bitcast float %212 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %213, i1 true) #4, !dbg !51
  %214 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 2080, !dbg !51
  %215 = extractelement <16 x float> %190, i64 13, !dbg !51
  %216 = bitcast float %215 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %216, i1 true) #4, !dbg !51
  %217 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 3120, !dbg !51
  %218 = extractelement <16 x float> %190, i64 12, !dbg !51
  %219 = bitcast float %218 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %219, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %220 = lshr i32 %154, 6, !dbg !51
  %221 = and i32 %220, 12, !dbg !51
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !51
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %208, !dbg !51
  %224 = load <4 x i32>, ptr addrspace(3) %223, align 16, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %225 = extractelement <16 x float> %190, i64 11, !dbg !51
  %226 = bitcast float %225 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %226, i1 true) #4, !dbg !51
  %227 = extractelement <16 x float> %190, i64 10, !dbg !51
  %228 = bitcast float %227 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %228, i1 true) #4, !dbg !51
  %229 = extractelement <16 x float> %190, i64 9, !dbg !51
  %230 = bitcast float %229 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %230, i1 true) #4, !dbg !51
  %231 = extractelement <16 x float> %190, i64 8, !dbg !51
  %232 = bitcast float %231 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %232, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %233 = load <4 x i32>, ptr addrspace(3) %223, align 16, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %234 = extractelement <16 x float> %190, i64 7, !dbg !51
  %235 = bitcast float %234 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %235, i1 true) #4, !dbg !51
  %236 = extractelement <16 x float> %190, i64 6, !dbg !51
  %237 = bitcast float %236 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %237, i1 true) #4, !dbg !51
  %238 = extractelement <16 x float> %190, i64 5, !dbg !51
  %239 = bitcast float %238 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %239, i1 true) #4, !dbg !51
  %240 = extractelement <16 x float> %190, i64 4, !dbg !51
  %241 = bitcast float %240 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %241, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %242 = load <4 x i32>, ptr addrspace(3) %223, align 16, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %243 = extractelement <16 x float> %190, i64 3, !dbg !51
  %244 = bitcast float %243 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %244, i1 true) #4, !dbg !51
  %245 = extractelement <16 x float> %190, i64 2, !dbg !51
  %246 = bitcast float %245 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %246, i1 true) #4, !dbg !51
  %247 = extractelement <16 x float> %190, i64 1, !dbg !51
  %248 = bitcast float %247 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %248, i1 true) #4, !dbg !51
  %249 = extractelement <16 x float> %190, i64 0, !dbg !51
  %250 = bitcast float %249 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %250, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %251 = load <4 x i32>, ptr addrspace(3) %223, align 16, !dbg !51
  %.extract = extractelement <4 x i32> %224, i64 0, !dbg !51
  %.extract19 = extractelement <4 x i32> %224, i64 1, !dbg !51
  %.extract20 = extractelement <4 x i32> %224, i64 2, !dbg !51
  %.extract21 = extractelement <4 x i32> %224, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %201, i1 %153) #4, !dbg !51
  %.extract22 = extractelement <4 x i32> %233, i64 0, !dbg !51
  %.extract23 = extractelement <4 x i32> %233, i64 1, !dbg !51
  %.extract24 = extractelement <4 x i32> %233, i64 2, !dbg !51
  %.extract25 = extractelement <4 x i32> %233, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %203, i1 %152) #4, !dbg !51
  %.extract26 = extractelement <4 x i32> %242, i64 0, !dbg !51
  %.extract27 = extractelement <4 x i32> %242, i64 1, !dbg !51
  %.extract28 = extractelement <4 x i32> %242, i64 2, !dbg !51
  %.extract29 = extractelement <4 x i32> %242, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %205, i1 %150) #4, !dbg !51
  %.extract30 = extractelement <4 x i32> %251, i64 0, !dbg !51
  %.extract31 = extractelement <4 x i32> %251, i64 1, !dbg !51
  %.extract32 = extractelement <4 x i32> %251, i64 2, !dbg !51
  %.extract33 = extractelement <4 x i32> %251, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %207, i1 %148) #4, !dbg !51
  %252 = getelementptr i1, ptr addrspace(1) %6, i64 %40, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %253 = extractelement <16 x i1> %191, i64 15, !dbg !53
  %254 = zext i1 %253 to i8, !dbg !53
  %255 = extractelement <16 x i1> %191, i64 14, !dbg !53
  %256 = zext i1 %255 to i8, !dbg !53
  %257 = extractelement <16 x i1> %191, i64 13, !dbg !53
  %258 = zext i1 %257 to i8, !dbg !53
  %259 = extractelement <16 x i1> %191, i64 12, !dbg !53
  %260 = zext i1 %259 to i8, !dbg !53
  %261 = extractelement <16 x i1> %191, i64 11, !dbg !53
  %262 = zext i1 %261 to i8, !dbg !53
  %263 = extractelement <16 x i1> %191, i64 10, !dbg !53
  %264 = zext i1 %263 to i8, !dbg !53
  %265 = extractelement <16 x i1> %191, i64 9, !dbg !53
  %266 = zext i1 %265 to i8, !dbg !53
  %267 = extractelement <16 x i1> %191, i64 8, !dbg !53
  %268 = zext i1 %267 to i8, !dbg !53
  %269 = extractelement <16 x i1> %191, i64 7, !dbg !53
  %270 = zext i1 %269 to i8, !dbg !53
  %271 = extractelement <16 x i1> %191, i64 6, !dbg !53
  %272 = zext i1 %271 to i8, !dbg !53
  %273 = extractelement <16 x i1> %191, i64 5, !dbg !53
  %274 = zext i1 %273 to i8, !dbg !53
  %275 = extractelement <16 x i1> %191, i64 4, !dbg !53
  %276 = zext i1 %275 to i8, !dbg !53
  %277 = extractelement <16 x i1> %191, i64 3, !dbg !53
  %278 = zext i1 %277 to i8, !dbg !53
  %279 = extractelement <16 x i1> %191, i64 2, !dbg !53
  %280 = zext i1 %279 to i8, !dbg !53
  %281 = extractelement <16 x i1> %191, i64 1, !dbg !53
  %282 = zext i1 %281 to i8, !dbg !53
  %283 = extractelement <16 x i1> %191, i64 0, !dbg !53
  %284 = zext i1 %283 to i8, !dbg !53
  %285 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %15, !dbg !53
  %286 = insertelement <1 x i8> poison, i8 %254, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %285, <1 x i8> %286, i1 true) #4, !dbg !53
  %287 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %77, !dbg !53
  %288 = insertelement <1 x i8> poison, i8 %256, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %287, <1 x i8> %288, i1 true) #4, !dbg !53
  %289 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %80, !dbg !53
  %290 = insertelement <1 x i8> poison, i8 %258, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %289, <1 x i8> %290, i1 true) #4, !dbg !53
  %291 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %83, !dbg !53
  %292 = insertelement <1 x i8> poison, i8 %260, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %291, <1 x i8> %292, i1 true) #4, !dbg !53
  %293 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %86, !dbg !53
  %294 = insertelement <1 x i8> poison, i8 %262, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %293, <1 x i8> %294, i1 true) #4, !dbg !53
  %295 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %89, !dbg !53
  %296 = insertelement <1 x i8> poison, i8 %264, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %295, <1 x i8> %296, i1 true) #4, !dbg !53
  %297 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %92, !dbg !53
  %298 = insertelement <1 x i8> poison, i8 %266, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %297, <1 x i8> %298, i1 true) #4, !dbg !53
  %299 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %95, !dbg !53
  %300 = insertelement <1 x i8> poison, i8 %268, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %299, <1 x i8> %300, i1 true) #4, !dbg !53
  %301 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %98, !dbg !53
  %302 = insertelement <1 x i8> poison, i8 %270, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %301, <1 x i8> %302, i1 true) #4, !dbg !53
  %303 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %101, !dbg !53
  %304 = insertelement <1 x i8> poison, i8 %272, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %303, <1 x i8> %304, i1 true) #4, !dbg !53
  %305 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %104, !dbg !53
  %306 = insertelement <1 x i8> poison, i8 %274, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %305, <1 x i8> %306, i1 true) #4, !dbg !53
  %307 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %107, !dbg !53
  %308 = insertelement <1 x i8> poison, i8 %276, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %307, <1 x i8> %308, i1 true) #4, !dbg !53
  %309 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %110, !dbg !53
  %310 = insertelement <1 x i8> poison, i8 %278, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %309, <1 x i8> %310, i1 true) #4, !dbg !53
  %311 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %113, !dbg !53
  %312 = insertelement <1 x i8> poison, i8 %280, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %311, <1 x i8> %312, i1 true) #4, !dbg !53
  %313 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %116, !dbg !53
  %314 = insertelement <1 x i8> poison, i8 %282, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %313, <1 x i8> %314, i1 true) #4, !dbg !53
  %315 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %119, !dbg !53
  %316 = insertelement <1 x i8> poison, i8 %284, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %315, <1 x i8> %316, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %317 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %70, !dbg !53
  %318 = load <4 x i32>, ptr addrspace(3) %317, align 16, !dbg !53
  %319 = bitcast <4 x i32> %318 to <128 x i1>, !dbg !53
  %320 = extractelement <128 x i1> %319, i64 24, !dbg !53
  %321 = extractelement <128 x i1> %319, i64 56, !dbg !53
  %322 = extractelement <128 x i1> %319, i64 88, !dbg !53
  %323 = extractelement <128 x i1> %319, i64 120, !dbg !53
  %324 = bitcast <4 x i32> %318 to <16 x i8>, !dbg !53
  %325 = extractelement <16 x i8> %324, i64 0, !dbg !53
  %326 = and i8 %325, 1, !dbg !53
  %327 = shufflevector <16 x i8> %324, <16 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !53
  %328 = and <2 x i8> %327, splat (i8 1), !dbg !53
  %329 = zext i1 %320 to i8, !dbg !53
  %330 = extractelement <16 x i8> %324, i64 4, !dbg !53
  %331 = and i8 %330, 1, !dbg !53
  %332 = shufflevector <16 x i8> %324, <16 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !53
  %333 = and <2 x i8> %332, splat (i8 1), !dbg !53
  %334 = zext i1 %321 to i8, !dbg !53
  %335 = extractelement <16 x i8> %324, i64 8, !dbg !53
  %336 = and i8 %335, 1, !dbg !53
  %337 = shufflevector <16 x i8> %324, <16 x i8> poison, <2 x i32> <i32 9, i32 10>, !dbg !53
  %338 = and <2 x i8> %337, splat (i8 1), !dbg !53
  %339 = zext i1 %322 to i8, !dbg !53
  %340 = extractelement <16 x i8> %324, i64 12, !dbg !53
  %341 = and i8 %340, 1, !dbg !53
  %342 = shufflevector <16 x i8> %324, <16 x i8> poison, <2 x i32> <i32 13, i32 14>, !dbg !53
  %343 = and <2 x i8> %342, splat (i8 1), !dbg !53
  %344 = zext i1 %323 to i8, !dbg !53
  %345 = insertelement <4 x i8> poison, i8 %326, i64 0, !dbg !53
  %346 = shufflevector <2 x i8> %328, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %347 = shufflevector <4 x i8> %345, <4 x i8> %346, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !53
  %348 = insertelement <4 x i8> %347, i8 %329, i64 3, !dbg !53
  %349 = bitcast <4 x i8> %348 to i32, !dbg !53
  %350 = insertelement <4 x i8> poison, i8 %331, i64 0, !dbg !53
  %351 = shufflevector <2 x i8> %333, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %352 = shufflevector <4 x i8> %350, <4 x i8> %351, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !53
  %353 = insertelement <4 x i8> %352, i8 %334, i64 3, !dbg !53
  %354 = bitcast <4 x i8> %353 to i32, !dbg !53
  %355 = insertelement <4 x i8> poison, i8 %336, i64 0, !dbg !53
  %356 = shufflevector <2 x i8> %338, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %357 = shufflevector <4 x i8> %355, <4 x i8> %356, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !53
  %358 = insertelement <4 x i8> %357, i8 %339, i64 3, !dbg !53
  %359 = bitcast <4 x i8> %358 to i32, !dbg !53
  %360 = insertelement <4 x i8> poison, i8 %341, i64 0, !dbg !53
  %361 = shufflevector <2 x i8> %343, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %362 = shufflevector <4 x i8> %360, <4 x i8> %361, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !53
  %363 = insertelement <4 x i8> %362, i8 %344, i64 3, !dbg !53
  %364 = bitcast <4 x i8> %363 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %349, i32 %354, i32 %359, i32 %364, ptr addrspace(1) %252, i1 %26) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c77w36caunqyqol6hb7es2bxubqmzufm37d3wl6z5kfecycgwt4w.py", directory: "inductor_cache/77")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_view_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 56, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 51, column: 21, scope: !7)
!48 = !DILocation(line: 52, column: 35, scope: !7)
!49 = !DILocation(line: 52, column: 30, scope: !7)
!50 = !DILocation(line: 52, column: 25, scope: !7)
!51 = !DILocation(line: 52, column: 47, scope: !7)
!52 = !DILocation(line: 53, column: 25, scope: !7)
!53 = !DILocation(line: 53, column: 58, scope: !7)
!54 = !DILocation(line: 53, column: 4, scope: !7)
