; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 7, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 28, !dbg !12
  %16 = and i32 %14, 124, !dbg !12
  %17 = lshr i32 %13, 3, !dbg !12
  %18 = and i32 %17, 31, !dbg !12
  %19 = or disjoint i32 %18, 32, !dbg !12
  %20 = or disjoint i32 %18, 64, !dbg !12
  %21 = or disjoint i32 %18, 96, !dbg !12
  %22 = and i32 %13, 127, !dbg !12
  %23 = or disjoint i32 %12, %16, !dbg !13
  %24 = or disjoint i32 %12, %18, !dbg !13
  %25 = or disjoint i32 %12, %19, !dbg !13
  %26 = or disjoint i32 %12, %20, !dbg !13
  %27 = or disjoint i32 %12, %21, !dbg !13
  %28 = icmp slt i32 %24, 256, !dbg !14
  %29 = icmp slt i32 %25, 256, !dbg !14
  %30 = icmp slt i32 %26, 256, !dbg !14
  %31 = icmp slt i32 %27, 256, !dbg !14
  %32 = icmp slt i32 %23, 256, !dbg !14
  %33 = lshr i32 %13, 5, !dbg !15
  %.frozen = freeze i32 %23, !dbg !16
  %34 = sdiv i32 %.frozen, 64, !dbg !16
  %35 = mul i32 %34, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %35, !dbg !17
  %36 = shl i32 %33, 6, !dbg !18
  %37 = and i32 %36, 448, !dbg !18
  %38 = shl i32 %34, 11, !dbg !19
  %39 = add i32 %38, %.decomposed, !dbg !20
  %40 = add i32 %39, %37, !dbg !21
  %41 = add i32 %39, 512, !dbg !20
  %42 = add nuw i32 %41, %37, !dbg !21
  %43 = add i32 %39, 1024, !dbg !20
  %44 = add nuw i32 %43, %37, !dbg !21
  %45 = add i32 %39, 1536, !dbg !20
  %46 = add nuw i32 %45, %37, !dbg !21
  %47 = sext i32 %40 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = sext i32 %42 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = sext i32 %44 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !22
  %53 = sext i32 %46 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !23
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !23
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !23
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #5, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !23
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !23
  %75 = shl i32 %13, 7, !dbg !23
  %76 = and i32 %75, 3968, !dbg !23
  %77 = and i32 %33, 7, !dbg !23
  %78 = or disjoint i32 %76, %77, !dbg !23
  %79 = and i32 %14, 1020, !dbg !23
  %80 = lshr exact i32 %76, 1, !dbg !23
  %81 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %80, !dbg !23
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %78, !dbg !23
  %83 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #5, !dbg !23
  %84 = or disjoint i32 %78, 32, !dbg !23
  %85 = lshr i32 %84, 3, !dbg !23
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !23
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %84, !dbg !23
  %88 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #5, !dbg !23
  %89 = or disjoint i32 %78, 64, !dbg !23
  %90 = lshr i32 %89, 3, !dbg !23
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !23
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !23
  %93 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #5, !dbg !23
  %94 = or disjoint i32 %78, 96, !dbg !23
  %95 = lshr i32 %94, 3, !dbg !23
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !23
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %94, !dbg !23
  %98 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #5, !dbg !23
  %99 = or disjoint i32 %78, 8, !dbg !23
  %100 = getelementptr float, ptr addrspace(3) %81, i32 %99, !dbg !23
  %101 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #5, !dbg !23
  %102 = or disjoint i32 %78, 40, !dbg !23
  %103 = lshr i32 %102, 3, !dbg !23
  %104 = and i32 %103, 500, !dbg !23
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !23
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %102, !dbg !23
  %107 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #5, !dbg !23
  %108 = or disjoint i32 %78, 72, !dbg !23
  %109 = lshr i32 %108, 3, !dbg !23
  %110 = and i32 %109, 504, !dbg !23
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !23
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %108, !dbg !23
  %113 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #5, !dbg !23
  %114 = or disjoint i32 %78, 104, !dbg !23
  %115 = lshr i32 %114, 3, !dbg !23
  %116 = and i32 %115, 508, !dbg !23
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !23
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %114, !dbg !23
  %119 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #5, !dbg !23
  %120 = or disjoint i32 %78, 16, !dbg !23
  %121 = getelementptr float, ptr addrspace(3) %81, i32 %120, !dbg !23
  %122 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #5, !dbg !23
  %123 = or disjoint i32 %78, 48, !dbg !23
  %124 = lshr i32 %123, 3, !dbg !23
  %125 = and i32 %124, 500, !dbg !23
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !23
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %123, !dbg !23
  %128 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #5, !dbg !23
  %129 = or disjoint i32 %78, 80, !dbg !23
  %130 = lshr i32 %129, 3, !dbg !23
  %131 = and i32 %130, 504, !dbg !23
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !23
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %129, !dbg !23
  %134 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #5, !dbg !23
  %135 = or disjoint i32 %78, 112, !dbg !23
  %136 = lshr i32 %135, 3, !dbg !23
  %137 = and i32 %136, 508, !dbg !23
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !23
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %135, !dbg !23
  %140 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #5, !dbg !23
  %141 = or disjoint i32 %78, 24, !dbg !23
  %142 = getelementptr float, ptr addrspace(3) %81, i32 %141, !dbg !23
  %143 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #5, !dbg !23
  %144 = or disjoint i32 %78, 56, !dbg !23
  %145 = lshr i32 %144, 3, !dbg !23
  %146 = and i32 %145, 500, !dbg !23
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !23
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %144, !dbg !23
  %149 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #5, !dbg !23
  %150 = or disjoint i32 %78, 88, !dbg !23
  %151 = lshr i32 %150, 3, !dbg !23
  %152 = and i32 %151, 504, !dbg !23
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !23
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %150, !dbg !23
  %155 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #5, !dbg !23
  %156 = or disjoint i32 %78, 120, !dbg !23
  %157 = lshr i32 %156, 3, !dbg !23
  %158 = and i32 %157, 508, !dbg !23
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !23
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %156, !dbg !23
  %161 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %162 = lshr i32 %14, 3, !dbg !23
  %163 = and i32 %162, 124, !dbg !23
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163, !dbg !23
  %165 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %79, !dbg !23
  %166 = load float, ptr addrspace(3) %165, align 16, !dbg !23
  %167 = getelementptr inbounds i8, ptr addrspace(3) %165, i32 4, !dbg !23
  %168 = load float, ptr addrspace(3) %167, align 4, !dbg !23
  %169 = getelementptr inbounds i8, ptr addrspace(3) %165, i32 8, !dbg !23
  %170 = load float, ptr addrspace(3) %169, align 8, !dbg !23
  %171 = getelementptr inbounds i8, ptr addrspace(3) %165, i32 12, !dbg !23
  %172 = load float, ptr addrspace(3) %171, align 4, !dbg !23
  %173 = or disjoint i32 %79, 1024, !dbg !23
  %174 = lshr i32 %173, 3, !dbg !23
  %175 = and i32 %174, 252, !dbg !23
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %175, !dbg !23
  %177 = getelementptr inbounds float, ptr addrspace(3) %176, i32 %173, !dbg !23
  %178 = load float, ptr addrspace(3) %177, align 16, !dbg !23
  %179 = getelementptr inbounds i8, ptr addrspace(3) %177, i32 4, !dbg !23
  %180 = load float, ptr addrspace(3) %179, align 4, !dbg !23
  %181 = getelementptr inbounds i8, ptr addrspace(3) %177, i32 8, !dbg !23
  %182 = load float, ptr addrspace(3) %181, align 8, !dbg !23
  %183 = getelementptr inbounds i8, ptr addrspace(3) %177, i32 12, !dbg !23
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !23
  %185 = or disjoint i32 %79, 2048, !dbg !23
  %186 = lshr i32 %185, 3, !dbg !23
  %187 = and i32 %186, 380, !dbg !23
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !23
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %185, !dbg !23
  %190 = load float, ptr addrspace(3) %189, align 16, !dbg !23
  %191 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 4, !dbg !23
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !23
  %193 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 8, !dbg !23
  %194 = load float, ptr addrspace(3) %193, align 8, !dbg !23
  %195 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 12, !dbg !23
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !23
  %197 = or disjoint i32 %79, 3072, !dbg !23
  %198 = lshr i32 %197, 3, !dbg !23
  %199 = and i32 %198, 508, !dbg !23
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %199, !dbg !23
  %201 = getelementptr inbounds float, ptr addrspace(3) %200, i32 %197, !dbg !23
  %202 = load float, ptr addrspace(3) %201, align 16, !dbg !23
  %203 = getelementptr inbounds i8, ptr addrspace(3) %201, i32 4, !dbg !23
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !23
  %205 = getelementptr inbounds i8, ptr addrspace(3) %201, i32 8, !dbg !23
  %206 = load float, ptr addrspace(3) %205, align 8, !dbg !23
  %207 = getelementptr inbounds i8, ptr addrspace(3) %201, i32 12, !dbg !23
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !23
  %209 = shl i32 %24, 5, !dbg !24
  %210 = shl i32 %25, 5, !dbg !24
  %211 = shl i32 %26, 5, !dbg !24
  %212 = shl i32 %27, 5, !dbg !24
  %213 = or disjoint i32 %209, %15, !dbg !25
  %214 = or disjoint i32 %210, %15, !dbg !25
  %215 = or disjoint i32 %211, %15, !dbg !25
  %216 = or disjoint i32 %212, %15, !dbg !25
  %217 = sext i32 %213 to i64, !dbg !26
  %218 = getelementptr float, ptr addrspace(1) %1, i64 %217, !dbg !26
  %219 = sext i32 %214 to i64, !dbg !26
  %220 = getelementptr float, ptr addrspace(1) %1, i64 %219, !dbg !26
  %221 = sext i32 %215 to i64, !dbg !26
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !26
  %223 = sext i32 %216 to i64, !dbg !26
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %223, !dbg !26
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %218, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #5, !dbg !27
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !27
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !27
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !27
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !27
  %230 = bitcast i32 %226 to float, !dbg !27
  %231 = bitcast i32 %227 to float, !dbg !27
  %232 = bitcast i32 %228 to float, !dbg !27
  %233 = bitcast i32 %229 to float, !dbg !27
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %220, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #5, !dbg !27
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !27
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !27
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !27
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !27
  %239 = bitcast i32 %235 to float, !dbg !27
  %240 = bitcast i32 %236 to float, !dbg !27
  %241 = bitcast i32 %237 to float, !dbg !27
  %242 = bitcast i32 %238 to float, !dbg !27
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %222, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !27
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !27
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !27
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !27
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !27
  %248 = bitcast i32 %244 to float, !dbg !27
  %249 = bitcast i32 %245 to float, !dbg !27
  %250 = bitcast i32 %246 to float, !dbg !27
  %251 = bitcast i32 %247 to float, !dbg !27
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %224, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #5, !dbg !27
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !27
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !27
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !27
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !27
  %257 = bitcast i32 %253 to float, !dbg !27
  %258 = bitcast i32 %254 to float, !dbg !27
  %259 = bitcast i32 %255 to float, !dbg !27
  %260 = bitcast i32 %256 to float, !dbg !27
  %261 = zext nneg i32 %15 to i64, !dbg !28
  %262 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !28
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %262, i1 true) #5, !dbg !29
  %264 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !29
  %265 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !29
  %266 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !29
  %267 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !29
  %268 = bitcast i32 %264 to float, !dbg !29
  %269 = bitcast i32 %265 to float, !dbg !29
  %270 = bitcast i32 %266 to float, !dbg !29
  %271 = bitcast i32 %267 to float, !dbg !29
  %272 = getelementptr float, ptr addrspace(1) %3, i64 %261, !dbg !30
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %272, i1 true) #5, !dbg !31
  %274 = getelementptr float, ptr addrspace(1) %4, i64 %261, !dbg !32
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %274, i1 true) #5, !dbg !33
  %276 = fadd float %230, %268, !dbg !34
  %277 = fadd float %231, %269, !dbg !34
  %278 = fadd float %232, %270, !dbg !34
  %279 = fadd float %233, %271, !dbg !34
  %280 = fadd float %239, %268, !dbg !34
  %281 = fadd float %240, %269, !dbg !34
  %282 = fadd float %241, %270, !dbg !34
  %283 = fadd float %242, %271, !dbg !34
  %284 = fadd float %248, %268, !dbg !34
  %285 = fadd float %249, %269, !dbg !34
  %286 = fadd float %250, %270, !dbg !34
  %287 = fadd float %251, %271, !dbg !34
  %288 = fadd float %257, %268, !dbg !34
  %289 = fadd float %258, %269, !dbg !34
  %290 = fadd float %259, %270, !dbg !34
  %291 = fadd float %260, %271, !dbg !34
  %292 = fadd float %166, %276, !dbg !35
  %293 = fadd float %168, %277, !dbg !35
  %294 = fadd float %170, %278, !dbg !35
  %295 = fadd float %172, %279, !dbg !35
  %296 = fadd float %178, %280, !dbg !35
  %297 = fadd float %180, %281, !dbg !35
  %298 = fadd float %182, %282, !dbg !35
  %299 = fadd float %184, %283, !dbg !35
  %300 = fadd float %190, %284, !dbg !35
  %301 = fadd float %192, %285, !dbg !35
  %302 = fadd float %194, %286, !dbg !35
  %303 = fadd float %196, %287, !dbg !35
  %304 = fadd float %202, %288, !dbg !35
  %305 = fadd float %204, %289, !dbg !35
  %306 = fadd float %206, %290, !dbg !35
  %307 = fadd float %208, %291, !dbg !35
  %308 = fadd float %292, %293, !dbg !36
  %309 = fadd float %294, %308, !dbg !36
  %310 = fadd float %295, %309, !dbg !36
  %311 = select i1 %28, float %310, float 0.000000e+00, !dbg !36
  %312 = fadd float %296, %297, !dbg !36
  %313 = fadd float %298, %312, !dbg !36
  %314 = fadd float %299, %313, !dbg !36
  %315 = select i1 %29, float %314, float 0.000000e+00, !dbg !36
  %316 = fadd float %300, %301, !dbg !36
  %317 = fadd float %302, %316, !dbg !36
  %318 = fadd float %303, %317, !dbg !36
  %319 = select i1 %30, float %318, float 0.000000e+00, !dbg !36
  %320 = fadd float %304, %305, !dbg !36
  %321 = fadd float %306, %320, !dbg !36
  %322 = fadd float %307, %321, !dbg !36
  %323 = select i1 %31, float %322, float 0.000000e+00, !dbg !36
  %324 = bitcast float %311 to i32, !dbg !41
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !41
  %326 = bitcast i32 %325 to float, !dbg !41
  %327 = fadd float %311, %326, !dbg !36
  %328 = bitcast float %327 to i32, !dbg !41
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 2, i32 31), !dbg !41
  %330 = bitcast i32 %329 to float, !dbg !41
  %331 = fadd float %327, %330, !dbg !36
  %332 = bitcast float %331 to i32, !dbg !41
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !41
  %334 = bitcast i32 %333 to float, !dbg !41
  %335 = fadd float %331, %334, !dbg !36
  %336 = bitcast float %315 to i32, !dbg !41
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 4, i32 31), !dbg !41
  %338 = bitcast i32 %337 to float, !dbg !41
  %339 = fadd float %315, %338, !dbg !36
  %340 = bitcast float %339 to i32, !dbg !41
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 2, i32 31), !dbg !41
  %342 = bitcast i32 %341 to float, !dbg !41
  %343 = fadd float %339, %342, !dbg !36
  %344 = bitcast float %343 to i32, !dbg !41
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 1, i32 31), !dbg !41
  %346 = bitcast i32 %345 to float, !dbg !41
  %347 = fadd float %343, %346, !dbg !36
  %348 = bitcast float %319 to i32, !dbg !41
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 4, i32 31), !dbg !41
  %350 = bitcast i32 %349 to float, !dbg !41
  %351 = fadd float %319, %350, !dbg !36
  %352 = bitcast float %351 to i32, !dbg !41
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 2, i32 31), !dbg !41
  %354 = bitcast i32 %353 to float, !dbg !41
  %355 = fadd float %351, %354, !dbg !36
  %356 = bitcast float %355 to i32, !dbg !41
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 1, i32 31), !dbg !41
  %358 = bitcast i32 %357 to float, !dbg !41
  %359 = fadd float %355, %358, !dbg !36
  %360 = bitcast float %323 to i32, !dbg !41
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !41
  %362 = bitcast i32 %361 to float, !dbg !41
  %363 = fadd float %323, %362, !dbg !36
  %364 = bitcast float %363 to i32, !dbg !41
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 2, i32 31), !dbg !41
  %366 = bitcast i32 %365 to float, !dbg !41
  %367 = fadd float %363, %366, !dbg !36
  %368 = bitcast float %367 to i32, !dbg !41
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 1, i32 31), !dbg !41
  %370 = bitcast i32 %369 to float, !dbg !41
  %371 = fadd float %367, %370, !dbg !36
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %335, float 3.200000e+01) #5, !dbg !42
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float 3.200000e+01) #5, !dbg !42
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %359, float 3.200000e+01) #5, !dbg !42
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %371, float 3.200000e+01) #5, !dbg !42
  %376 = fsub float %292, %372, !dbg !43
  %377 = fsub float %293, %372, !dbg !43
  %378 = fsub float %294, %372, !dbg !43
  %379 = fsub float %295, %372, !dbg !43
  %380 = fsub float %296, %373, !dbg !43
  %381 = fsub float %297, %373, !dbg !43
  %382 = fsub float %298, %373, !dbg !43
  %383 = fsub float %299, %373, !dbg !43
  %384 = fsub float %300, %374, !dbg !43
  %385 = fsub float %301, %374, !dbg !43
  %386 = fsub float %302, %374, !dbg !43
  %387 = fsub float %303, %374, !dbg !43
  %388 = fsub float %304, %375, !dbg !43
  %389 = fsub float %305, %375, !dbg !43
  %390 = fsub float %306, %375, !dbg !43
  %391 = fsub float %307, %375, !dbg !43
  %392 = fmul float %376, %376, !dbg !44
  %393 = fmul float %377, %377, !dbg !44
  %394 = fmul float %378, %378, !dbg !44
  %395 = fmul float %379, %379, !dbg !44
  %396 = fmul float %380, %380, !dbg !44
  %397 = fmul float %381, %381, !dbg !44
  %398 = fmul float %382, %382, !dbg !44
  %399 = fmul float %383, %383, !dbg !44
  %400 = fmul float %384, %384, !dbg !44
  %401 = fmul float %385, %385, !dbg !44
  %402 = fmul float %386, %386, !dbg !44
  %403 = fmul float %387, %387, !dbg !44
  %404 = fmul float %388, %388, !dbg !44
  %405 = fmul float %389, %389, !dbg !44
  %406 = fmul float %390, %390, !dbg !44
  %407 = fmul float %391, %391, !dbg !44
  %408 = fadd float %392, %393, !dbg !45
  %409 = fadd float %394, %408, !dbg !45
  %410 = fadd float %395, %409, !dbg !45
  %411 = select i1 %28, float %410, float 0.000000e+00, !dbg !45
  %412 = fadd float %396, %397, !dbg !45
  %413 = fadd float %398, %412, !dbg !45
  %414 = fadd float %399, %413, !dbg !45
  %415 = select i1 %29, float %414, float 0.000000e+00, !dbg !45
  %416 = fadd float %400, %401, !dbg !45
  %417 = fadd float %402, %416, !dbg !45
  %418 = fadd float %403, %417, !dbg !45
  %419 = select i1 %30, float %418, float 0.000000e+00, !dbg !45
  %420 = fadd float %404, %405, !dbg !45
  %421 = fadd float %406, %420, !dbg !45
  %422 = fadd float %407, %421, !dbg !45
  %423 = select i1 %31, float %422, float 0.000000e+00, !dbg !45
  %424 = bitcast float %411 to i32, !dbg !47
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 4, i32 31), !dbg !47
  %426 = bitcast i32 %425 to float, !dbg !47
  %427 = fadd float %411, %426, !dbg !45
  %428 = bitcast float %427 to i32, !dbg !47
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 2, i32 31), !dbg !47
  %430 = bitcast i32 %429 to float, !dbg !47
  %431 = fadd float %427, %430, !dbg !45
  %432 = bitcast float %431 to i32, !dbg !47
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 1, i32 31), !dbg !47
  %434 = bitcast i32 %433 to float, !dbg !47
  %435 = fadd float %431, %434, !dbg !45
  %436 = bitcast float %415 to i32, !dbg !47
  %437 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %436, i32 4, i32 31), !dbg !47
  %438 = bitcast i32 %437 to float, !dbg !47
  %439 = fadd float %415, %438, !dbg !45
  %440 = bitcast float %439 to i32, !dbg !47
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 2, i32 31), !dbg !47
  %442 = bitcast i32 %441 to float, !dbg !47
  %443 = fadd float %439, %442, !dbg !45
  %444 = bitcast float %443 to i32, !dbg !47
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 1, i32 31), !dbg !47
  %446 = bitcast i32 %445 to float, !dbg !47
  %447 = fadd float %443, %446, !dbg !45
  %448 = bitcast float %419 to i32, !dbg !47
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 4, i32 31), !dbg !47
  %450 = bitcast i32 %449 to float, !dbg !47
  %451 = fadd float %419, %450, !dbg !45
  %452 = bitcast float %451 to i32, !dbg !47
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %452, i32 2, i32 31), !dbg !47
  %454 = bitcast i32 %453 to float, !dbg !47
  %455 = fadd float %451, %454, !dbg !45
  %456 = bitcast float %455 to i32, !dbg !47
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %456, i32 1, i32 31), !dbg !47
  %458 = bitcast i32 %457 to float, !dbg !47
  %459 = fadd float %455, %458, !dbg !45
  %460 = bitcast float %423 to i32, !dbg !47
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 4, i32 31), !dbg !47
  %462 = bitcast i32 %461 to float, !dbg !47
  %463 = fadd float %423, %462, !dbg !45
  %464 = bitcast float %463 to i32, !dbg !47
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 2, i32 31), !dbg !47
  %466 = bitcast i32 %465 to float, !dbg !47
  %467 = fadd float %463, %466, !dbg !45
  %468 = bitcast float %467 to i32, !dbg !47
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 1, i32 31), !dbg !47
  %470 = bitcast i32 %469 to float, !dbg !47
  %471 = fadd float %467, %470, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %472 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !48
  %473 = bitcast float %435 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %473, i1 true) #5, !dbg !48
  %474 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !48
  %475 = bitcast float %447 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %475, i1 true) #5, !dbg !48
  %476 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !48
  %477 = bitcast float %459 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %476, <1 x i32> %477, i1 true) #5, !dbg !48
  %478 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !48
  %479 = bitcast float %471 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %480 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !48
  %481 = load float, ptr addrspace(3) %480, align 4, !dbg !48
  %482 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %481, float 3.200000e+01) #5, !dbg !49
  %483 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %435, float 3.200000e+01) #5, !dbg !49
  %484 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %447, float 3.200000e+01) #5, !dbg !49
  %485 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %459, float 3.200000e+01) #5, !dbg !49
  %486 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %471, float 3.200000e+01) #5, !dbg !49
  %487 = fadd float %482, 0x3EE4F8B580000000, !dbg !50
  %488 = fadd float %483, 0x3EE4F8B580000000, !dbg !50
  %489 = fadd float %484, 0x3EE4F8B580000000, !dbg !50
  %490 = fadd float %485, 0x3EE4F8B580000000, !dbg !50
  %491 = fadd float %486, 0x3EE4F8B580000000, !dbg !50
  %492 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i = icmp eq i32 %492, 0, !dbg !51
  br i1 %.not.i, label %495, label %493, !dbg !51

493:                                              ; preds = %10
  %494 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %487), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

495:                                              ; preds = %10
  %496 = tail call float @llvm.nvvm.rsqrt.approx.f(float %487), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %493, %495
  %.0.i = phi float [ %494, %493 ], [ %496, %495 ], !dbg !51
  %497 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %499 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %500 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i28 = icmp eq i32 %500, 0, !dbg !51
  br i1 %.not.i28, label %503, label %501, !dbg !51

501:                                              ; preds = %__nv_rsqrtf.exit
  %502 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %488), !dbg !51
  br label %__nv_rsqrtf.exit30, !dbg !51

503:                                              ; preds = %__nv_rsqrtf.exit
  %504 = tail call float @llvm.nvvm.rsqrt.approx.f(float %488), !dbg !51
  br label %__nv_rsqrtf.exit30, !dbg !51

__nv_rsqrtf.exit30:                               ; preds = %501, %503
  %.0.i29 = phi float [ %502, %501 ], [ %504, %503 ], !dbg !51
  %505 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %508 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i40 = icmp eq i32 %508, 0, !dbg !51
  br i1 %.not.i40, label %511, label %509, !dbg !51

509:                                              ; preds = %__nv_rsqrtf.exit30
  %510 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %489), !dbg !51
  br label %__nv_rsqrtf.exit42, !dbg !51

511:                                              ; preds = %__nv_rsqrtf.exit30
  %512 = tail call float @llvm.nvvm.rsqrt.approx.f(float %489), !dbg !51
  br label %__nv_rsqrtf.exit42, !dbg !51

__nv_rsqrtf.exit42:                               ; preds = %509, %511
  %.0.i41 = phi float [ %510, %509 ], [ %512, %511 ], !dbg !51
  %513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %514 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %515 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %516 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i52 = icmp eq i32 %516, 0, !dbg !51
  br i1 %.not.i52, label %519, label %517, !dbg !51

517:                                              ; preds = %__nv_rsqrtf.exit42
  %518 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %490), !dbg !51
  br label %__nv_rsqrtf.exit54, !dbg !51

519:                                              ; preds = %__nv_rsqrtf.exit42
  %520 = tail call float @llvm.nvvm.rsqrt.approx.f(float %490), !dbg !51
  br label %__nv_rsqrtf.exit54, !dbg !51

__nv_rsqrtf.exit54:                               ; preds = %517, %519
  %.0.i53 = phi float [ %518, %517 ], [ %520, %519 ], !dbg !51
  %521 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %522 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %523 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %524 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i64 = icmp eq i32 %524, 0, !dbg !51
  br i1 %.not.i64, label %527, label %525, !dbg !51

525:                                              ; preds = %__nv_rsqrtf.exit54
  %526 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %491), !dbg !51
  br label %__nv_rsqrtf.exit66, !dbg !51

527:                                              ; preds = %__nv_rsqrtf.exit54
  %528 = tail call float @llvm.nvvm.rsqrt.approx.f(float %491), !dbg !51
  br label %__nv_rsqrtf.exit66, !dbg !51

__nv_rsqrtf.exit66:                               ; preds = %525, %527
  %.0.i65 = phi float [ %526, %525 ], [ %528, %527 ], !dbg !51
  %529 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !33
  %530 = bitcast i32 %529 to float, !dbg !33
  %531 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !33
  %532 = bitcast i32 %531 to float, !dbg !33
  %533 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !33
  %534 = bitcast i32 %533 to float, !dbg !33
  %535 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !33
  %536 = bitcast i32 %535 to float, !dbg !33
  %537 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !31
  %538 = bitcast i32 %537 to float, !dbg !31
  %539 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !31
  %540 = bitcast i32 %539 to float, !dbg !31
  %541 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !31
  %542 = bitcast i32 %541 to float, !dbg !31
  %543 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !31
  %544 = bitcast i32 %543 to float, !dbg !31
  %545 = or disjoint i32 %12, %22, !dbg !13
  %546 = icmp slt i32 %545, 256, !dbg !14
  %547 = fmul float %376, %.0.i29, !dbg !52
  %548 = fmul float %377, %.0.i29, !dbg !52
  %549 = fmul float %378, %.0.i29, !dbg !52
  %550 = fmul float %379, %.0.i29, !dbg !52
  %551 = fmul float %380, %.0.i41, !dbg !52
  %552 = fmul float %381, %.0.i41, !dbg !52
  %553 = fmul float %382, %.0.i41, !dbg !52
  %554 = fmul float %383, %.0.i41, !dbg !52
  %555 = fmul float %384, %.0.i53, !dbg !52
  %556 = fmul float %385, %.0.i53, !dbg !52
  %557 = fmul float %386, %.0.i53, !dbg !52
  %558 = fmul float %387, %.0.i53, !dbg !52
  %559 = fmul float %388, %.0.i65, !dbg !52
  %560 = fmul float %389, %.0.i65, !dbg !52
  %561 = fmul float %390, %.0.i65, !dbg !52
  %562 = fmul float %391, %.0.i65, !dbg !52
  %563 = fmul float %547, %544, !dbg !53
  %564 = fmul float %548, %542, !dbg !53
  %565 = fmul float %549, %540, !dbg !53
  %566 = fmul float %550, %538, !dbg !53
  %567 = fmul float %551, %544, !dbg !53
  %568 = fmul float %552, %542, !dbg !53
  %569 = fmul float %553, %540, !dbg !53
  %570 = fmul float %554, %538, !dbg !53
  %571 = fmul float %555, %544, !dbg !53
  %572 = fmul float %556, %542, !dbg !53
  %573 = fmul float %557, %540, !dbg !53
  %574 = fmul float %558, %538, !dbg !53
  %575 = fmul float %559, %544, !dbg !53
  %576 = fmul float %560, %542, !dbg !53
  %577 = fmul float %561, %540, !dbg !53
  %578 = fmul float %562, %538, !dbg !53
  %579 = fadd float %563, %536, !dbg !54
  %580 = fadd float %564, %534, !dbg !54
  %581 = fadd float %565, %532, !dbg !54
  %582 = fadd float %566, %530, !dbg !54
  %583 = fadd float %567, %536, !dbg !54
  %584 = fadd float %568, %534, !dbg !54
  %585 = fadd float %569, %532, !dbg !54
  %586 = fadd float %570, %530, !dbg !54
  %587 = fadd float %571, %536, !dbg !54
  %588 = fadd float %572, %534, !dbg !54
  %589 = fadd float %573, %532, !dbg !54
  %590 = fadd float %574, %530, !dbg !54
  %591 = fadd float %575, %536, !dbg !54
  %592 = fadd float %576, %534, !dbg !54
  %593 = fadd float %577, %532, !dbg !54
  %594 = fadd float %578, %530, !dbg !54
  %595 = fmul float %.0.i, 3.125000e-02, !dbg !48
  %596 = getelementptr float, ptr addrspace(1) %5, i64 %217, !dbg !55
  %597 = getelementptr float, ptr addrspace(1) %5, i64 %219, !dbg !55
  %598 = getelementptr float, ptr addrspace(1) %5, i64 %221, !dbg !55
  %599 = getelementptr float, ptr addrspace(1) %5, i64 %223, !dbg !55
  %600 = bitcast float %547 to i32, !dbg !56
  %601 = bitcast float %548 to i32, !dbg !56
  %602 = bitcast float %549 to i32, !dbg !56
  %603 = bitcast float %550 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %600, i32 %601, i32 %602, i32 %603, ptr addrspace(1) %596, i1 %28) #5, !dbg !56
  %604 = bitcast float %551 to i32, !dbg !56
  %605 = bitcast float %552 to i32, !dbg !56
  %606 = bitcast float %553 to i32, !dbg !56
  %607 = bitcast float %554 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %604, i32 %605, i32 %606, i32 %607, ptr addrspace(1) %597, i1 %29) #5, !dbg !56
  %608 = bitcast float %555 to i32, !dbg !56
  %609 = bitcast float %556 to i32, !dbg !56
  %610 = bitcast float %557 to i32, !dbg !56
  %611 = bitcast float %558 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %608, i32 %609, i32 %610, i32 %611, ptr addrspace(1) %598, i1 %30) #5, !dbg !56
  %612 = bitcast float %559 to i32, !dbg !56
  %613 = bitcast float %560 to i32, !dbg !56
  %614 = bitcast float %561 to i32, !dbg !56
  %615 = bitcast float %562 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %612, i32 %613, i32 %614, i32 %615, ptr addrspace(1) %599, i1 %31) #5, !dbg !56
  %616 = getelementptr float, ptr addrspace(1) %6, i64 %217, !dbg !57
  %617 = getelementptr float, ptr addrspace(1) %6, i64 %219, !dbg !57
  %618 = getelementptr float, ptr addrspace(1) %6, i64 %221, !dbg !57
  %619 = getelementptr float, ptr addrspace(1) %6, i64 %223, !dbg !57
  %620 = bitcast float %579 to i32, !dbg !58
  %621 = bitcast float %580 to i32, !dbg !58
  %622 = bitcast float %581 to i32, !dbg !58
  %623 = bitcast float %582 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %620, i32 %621, i32 %622, i32 %623, ptr addrspace(1) %616, i1 %28) #5, !dbg !58
  %624 = bitcast float %583 to i32, !dbg !58
  %625 = bitcast float %584 to i32, !dbg !58
  %626 = bitcast float %585 to i32, !dbg !58
  %627 = bitcast float %586 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %624, i32 %625, i32 %626, i32 %627, ptr addrspace(1) %617, i1 %29) #5, !dbg !58
  %628 = bitcast float %587 to i32, !dbg !58
  %629 = bitcast float %588 to i32, !dbg !58
  %630 = bitcast float %589 to i32, !dbg !58
  %631 = bitcast float %590 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %628, i32 %629, i32 %630, i32 %631, ptr addrspace(1) %618, i1 %30) #5, !dbg !58
  %632 = bitcast float %591 to i32, !dbg !58
  %633 = bitcast float %592 to i32, !dbg !58
  %634 = bitcast float %593 to i32, !dbg !58
  %635 = bitcast float %594 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %632, i32 %633, i32 %634, i32 %635, ptr addrspace(1) %619, i1 %31) #5, !dbg !58
  %636 = sext i32 %545 to i64, !dbg !59
  %637 = getelementptr float, ptr addrspace(1) %7, i64 %636, !dbg !59
  %638 = and i32 %13, 128, !dbg !60
  %639 = icmp eq i32 %638, 0, !dbg !60
  %640 = bitcast float %595 to i32, !dbg !60
  %641 = and i1 %639, %546, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %640, ptr addrspace(1) %637, i1 %641) #5, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuikj2fj7dthoyhdafnokwdyuhlh7dg2nrrpeedhe6yomz4lhufr.py", directory: "inductor_cache/ui")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 48, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 43, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 44, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 19, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !46)
!46 = !DILocation(line: 52, column: 26, scope: !7)
!47 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !46)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 28, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 25, scope: !7)
!56 = !DILocation(line: 64, column: 45, scope: !7)
!57 = !DILocation(line: 65, column: 25, scope: !7)
!58 = !DILocation(line: 65, column: 45, scope: !7)
!59 = !DILocation(line: 66, column: 25, scope: !7)
!60 = !DILocation(line: 66, column: 37, scope: !7)
!61 = !DILocation(line: 66, column: 4, scope: !7)
