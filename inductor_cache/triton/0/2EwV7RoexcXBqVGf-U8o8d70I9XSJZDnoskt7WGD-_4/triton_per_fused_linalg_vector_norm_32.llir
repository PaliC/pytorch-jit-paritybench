; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_linalg_vector_norm_32(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 4, !dbg !12
  %11 = and i32 %7, 7, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = lshr i32 %7, 5, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 4096, !dbg !15
  %15 = mul i32 %14, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = shl i32 %7, 11, !dbg !17
  %17 = and i32 %16, 258048, !dbg !17
  %18 = add nsw i32 %.decomposed, %17, !dbg !18
  %19 = shl i32 %14, 18, !dbg !19
  %20 = add i32 %18, %19, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !22
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !22
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !22
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !22
  %28 = bitcast i32 %24 to float, !dbg !22
  %29 = bitcast i32 %25 to float, !dbg !22
  %30 = bitcast i32 %26 to float, !dbg !22
  %31 = bitcast i32 %27 to float, !dbg !22
  %32 = fmul float %28, %28, !dbg !23
  %33 = fmul float %29, %29, !dbg !23
  %34 = fmul float %30, %30, !dbg !23
  %35 = fmul float %31, %31, !dbg !23
  %36 = bitcast float %32 to i32, !dbg !24
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 16, i32 31), !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = fadd float %32, %38, !dbg !28
  %40 = bitcast float %39 to i32, !dbg !24
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 8, i32 31), !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = fadd float %39, %42, !dbg !28
  %44 = bitcast float %43 to i32, !dbg !24
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 4, i32 31), !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = fadd float %43, %46, !dbg !28
  %48 = bitcast float %47 to i32, !dbg !24
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !24
  %50 = bitcast i32 %49 to float, !dbg !24
  %51 = fadd float %47, %50, !dbg !28
  %52 = bitcast float %33 to i32, !dbg !24
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 16, i32 31), !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = fadd float %33, %54, !dbg !28
  %56 = bitcast float %55 to i32, !dbg !24
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = fadd float %55, %58, !dbg !28
  %60 = bitcast float %59 to i32, !dbg !24
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !24
  %62 = bitcast i32 %61 to float, !dbg !24
  %63 = fadd float %59, %62, !dbg !28
  %64 = bitcast float %63 to i32, !dbg !24
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 2, i32 31), !dbg !24
  %66 = bitcast i32 %65 to float, !dbg !24
  %67 = fadd float %63, %66, !dbg !28
  %68 = bitcast float %34 to i32, !dbg !24
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 16, i32 31), !dbg !24
  %70 = bitcast i32 %69 to float, !dbg !24
  %71 = fadd float %34, %70, !dbg !28
  %72 = bitcast float %71 to i32, !dbg !24
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 8, i32 31), !dbg !24
  %74 = bitcast i32 %73 to float, !dbg !24
  %75 = fadd float %71, %74, !dbg !28
  %76 = bitcast float %75 to i32, !dbg !24
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 4, i32 31), !dbg !24
  %78 = bitcast i32 %77 to float, !dbg !24
  %79 = fadd float %75, %78, !dbg !28
  %80 = bitcast float %79 to i32, !dbg !24
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !24
  %82 = bitcast i32 %81 to float, !dbg !24
  %83 = fadd float %79, %82, !dbg !28
  %84 = bitcast float %35 to i32, !dbg !24
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 16, i32 31), !dbg !24
  %86 = bitcast i32 %85 to float, !dbg !24
  %87 = fadd float %35, %86, !dbg !28
  %88 = bitcast float %87 to i32, !dbg !24
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 8, i32 31), !dbg !24
  %90 = bitcast i32 %89 to float, !dbg !24
  %91 = fadd float %87, %90, !dbg !28
  %92 = bitcast float %91 to i32, !dbg !24
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 4, i32 31), !dbg !24
  %94 = bitcast i32 %93 to float, !dbg !24
  %95 = fadd float %91, %94, !dbg !28
  %96 = bitcast float %95 to i32, !dbg !24
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 2, i32 31), !dbg !24
  %98 = bitcast i32 %97 to float, !dbg !24
  %99 = fadd float %95, %98, !dbg !28
  %100 = icmp samesign ult i32 %8, 2, !dbg !24
  %101 = and i32 %13, 3, !dbg !24
  %102 = shl nuw nsw i32 %10, 2, !dbg !24
  %103 = or disjoint i32 %102, %101, !dbg !24
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !24
  %105 = bitcast float %51 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 %100) #5, !dbg !24
  %106 = or disjoint i32 %102, 4, !dbg !24
  %107 = or disjoint i32 %106, %101, !dbg !24
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !24
  %109 = bitcast float %67 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 %100) #5, !dbg !24
  %110 = or disjoint i32 %102, 8, !dbg !24
  %111 = or disjoint i32 %110, %101, !dbg !24
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !24
  %113 = bitcast float %83 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 %100) #5, !dbg !24
  %114 = or disjoint i32 %102, 12, !dbg !24
  %115 = or disjoint i32 %114, %101, !dbg !24
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !24
  %117 = bitcast float %99 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 %100) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %118 = icmp slt i32 %7, 32, !dbg !24
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !24
  %120 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %119, i1 %118) #5, !dbg !24
  %121 = bitcast i32 %120 to float, !dbg !24
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !24
  %123 = bitcast i32 %122 to float, !dbg !24
  %124 = fadd float %121, %123, !dbg !28
  %125 = bitcast float %124 to i32, !dbg !24
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !24
  %127 = bitcast i32 %126 to float, !dbg !24
  %128 = fadd float %124, %127, !dbg !28
  %129 = and i32 %7, 3, !dbg !24
  %130 = icmp eq i32 %129, 0, !dbg !24
  %131 = and i1 %118, %130, !dbg !24
  %132 = bitcast float %128 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %132, i1 %131) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !24
  %134 = load i32, ptr addrspace(3) %133, align 16, !dbg !24
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !24
  %136 = load i32, ptr addrspace(3) %135, align 16, !dbg !24
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !24
  %138 = load i32, ptr addrspace(3) %137, align 16, !dbg !24
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !24
  %140 = load i32, ptr addrspace(3) %139, align 16, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %141, i32 %134, i32 %136, i32 %138, i32 %140, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %143 = load float, ptr addrspace(3) %142, align 4, !dbg !30
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i = icmp eq i32 %144, 0, !dbg !30
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i = icmp eq i32 %145, 0, !dbg !30
  br i1 %.not.i, label %151, label %146, !dbg !30

146:                                              ; preds = %4
  br i1 %.not1.i, label %149, label %147, !dbg !30

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

151:                                              ; preds = %4
  br i1 %.not1.i, label %154, label %152, !dbg !30

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %147, %149, %152, %154
  %.0.i = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !30
  %156 = or disjoint i32 %6, %11, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %157 = sext i32 %156 to i64, !dbg !32
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !32
  %159 = lshr i32 %8, 3, !dbg !33
  %160 = shl nuw nsw i32 %101, 2, !dbg !33
  %161 = or disjoint i32 %160, %159, !dbg !33
  %162 = icmp eq i32 %161, 0, !dbg !33
  %163 = bitcast float %.0.i to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %158, i1 %162) #5, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5gj43uweoyuxy6ccp6qvihdlrs3tvorlefxfdt5fk7kltkc2ymo.py", directory: "inductor_cache/5g")
!4 = !{ptr @triton_per_fused_linalg_vector_norm_32, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_linalg_vector_norm_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_linalg_vector_norm_32", linkageName: "triton_per_fused_linalg_vector_norm_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 40, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 52, scope: !7)
!20 = !DILocation(line: 33, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 57, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 37, column: 26, scope: !7)
!31 = !DILocation(line: 38, column: 4, scope: !7)
!32 = !DILocation(line: 39, column: 28, scope: !7)
!33 = !DILocation(line: 39, column: 39, scope: !7)
!34 = !DILocation(line: 39, column: 4, scope: !7)
