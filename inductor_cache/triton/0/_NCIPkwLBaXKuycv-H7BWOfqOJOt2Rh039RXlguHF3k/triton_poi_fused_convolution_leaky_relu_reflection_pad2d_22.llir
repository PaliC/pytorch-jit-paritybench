; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_leaky_relu_reflection_pad2d_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = or disjoint i32 %11, 2, !dbg !13
  %14 = or disjoint i32 %11, 3, !dbg !13
  %15 = or disjoint i32 %11, 512, !dbg !13
  %16 = srem i32 %11, 256, !dbg !14
  %17 = srem i32 %12, 256, !dbg !14
  %18 = srem i32 %13, 256, !dbg !14
  %19 = srem i32 %14, 256, !dbg !14
  %20 = sdiv i32 %11, 82944, !dbg !15
  %21 = sdiv i32 %15, 82944, !dbg !15
  %22 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !16
  %23 = shufflevector <2 x i32> %22, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %24 = sdiv <2 x i32> %23, <i32 4608, i32 256>, !dbg !16
  %25 = srem <2 x i32> %24, splat (i32 18), !dbg !17
  %26 = add nsw <2 x i32> %25, splat (i32 -1), !dbg !18
  %27 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %26, i1 true), !dbg !19
  %28 = add nsw <2 x i32> %27, splat (i32 -15), !dbg !20
  %29 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %28, i1 true), !dbg !21
  %30 = mul nsw <2 x i32> %29, <i32 -4096, i32 -256>, !dbg !22
  %31 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !16
  %32 = shufflevector <2 x i32> %31, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %33 = sdiv <2 x i32> %32, <i32 4608, i32 256>, !dbg !16
  %34 = srem <2 x i32> %33, splat (i32 18), !dbg !17
  %35 = add nsw <2 x i32> %34, splat (i32 -1), !dbg !18
  %36 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %35, i1 true), !dbg !19
  %37 = add nsw <2 x i32> %36, splat (i32 -15), !dbg !20
  %38 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %37, i1 true), !dbg !21
  %39 = mul nsw <2 x i32> %38, <i32 -4096, i32 -256>, !dbg !22
  %40 = shl nsw i32 %20, 16, !dbg !23
  %41 = shl nsw i32 %21, 16, !dbg !23
  %42 = or disjoint i32 %40, 65280, !dbg !24
  %43 = add nsw i32 %42, %16, !dbg !25
  %44 = extractelement <2 x i32> %30, i64 0, !dbg !26
  %45 = add i32 %43, %44, !dbg !26
  %46 = extractelement <2 x i32> %30, i64 1, !dbg !27
  %47 = add i32 %45, %46, !dbg !27
  %48 = add nsw i32 %42, %17, !dbg !25
  %49 = add i32 %48, %44, !dbg !26
  %50 = add i32 %49, %46, !dbg !27
  %51 = add nsw i32 %42, %18, !dbg !25
  %52 = add i32 %51, %44, !dbg !26
  %53 = add i32 %52, %46, !dbg !27
  %54 = add nsw i32 %42, %19, !dbg !25
  %55 = add i32 %54, %44, !dbg !26
  %56 = add i32 %55, %46, !dbg !27
  %57 = or disjoint i32 %41, 65280, !dbg !24
  %58 = add nsw i32 %57, %16, !dbg !25
  %59 = extractelement <2 x i32> %39, i64 0, !dbg !26
  %60 = add i32 %58, %59, !dbg !26
  %61 = extractelement <2 x i32> %39, i64 1, !dbg !27
  %62 = add i32 %60, %61, !dbg !27
  %63 = add nsw i32 %57, %17, !dbg !25
  %64 = add i32 %63, %59, !dbg !26
  %65 = add i32 %64, %61, !dbg !27
  %66 = add nsw i32 %57, %18, !dbg !25
  %67 = add i32 %66, %59, !dbg !26
  %68 = add i32 %67, %61, !dbg !27
  %69 = add nsw i32 %57, %19, !dbg !25
  %70 = add i32 %69, %59, !dbg !26
  %71 = add i32 %70, %61, !dbg !27
  %72 = sext i32 %47 to i64, !dbg !28
  %73 = getelementptr i1, ptr addrspace(1) %0, i64 %72, !dbg !28
  %74 = sext i32 %50 to i64, !dbg !28
  %75 = getelementptr i1, ptr addrspace(1) %0, i64 %74, !dbg !28
  %76 = sext i32 %53 to i64, !dbg !28
  %77 = getelementptr i1, ptr addrspace(1) %0, i64 %76, !dbg !28
  %78 = sext i32 %56 to i64, !dbg !28
  %79 = getelementptr i1, ptr addrspace(1) %0, i64 %78, !dbg !28
  %80 = sext i32 %62 to i64, !dbg !28
  %81 = getelementptr i1, ptr addrspace(1) %0, i64 %80, !dbg !28
  %82 = sext i32 %65 to i64, !dbg !28
  %83 = getelementptr i1, ptr addrspace(1) %0, i64 %82, !dbg !28
  %84 = sext i32 %68 to i64, !dbg !28
  %85 = getelementptr i1, ptr addrspace(1) %0, i64 %84, !dbg !28
  %86 = sext i32 %71 to i64, !dbg !28
  %87 = getelementptr i1, ptr addrspace(1) %0, i64 %86, !dbg !28
  %88 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %73, i1 true) #2, !dbg !29
  %89 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %75, i1 true) #2, !dbg !29
  %90 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %77, i1 true) #2, !dbg !29
  %91 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %79, i1 true) #2, !dbg !29
  %92 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !29
  %93 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %83, i1 true) #2, !dbg !29
  %94 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %85, i1 true) #2, !dbg !29
  %95 = tail call i8 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b8 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %87, i1 true) #2, !dbg !29
  %.not = icmp eq i8 %88, 0, !dbg !29
  %.not1 = icmp eq i8 %89, 0, !dbg !29
  %.not2 = icmp eq i8 %90, 0, !dbg !29
  %.not3 = icmp eq i8 %91, 0, !dbg !29
  %.not4 = icmp eq i8 %92, 0, !dbg !29
  %.not5 = icmp eq i8 %93, 0, !dbg !29
  %.not6 = icmp eq i8 %94, 0, !dbg !29
  %.not7 = icmp eq i8 %95, 0, !dbg !29
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !30
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !30
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !30
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !30
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !30
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #2, !dbg !31
  %105 = bitcast i32 %104 to float, !dbg !31
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #2, !dbg !31
  %107 = bitcast i32 %106 to float, !dbg !31
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !31
  %109 = bitcast i32 %108 to float, !dbg !31
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #2, !dbg !31
  %111 = bitcast i32 %110 to float, !dbg !31
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #2, !dbg !31
  %113 = bitcast i32 %112 to float, !dbg !31
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #2, !dbg !31
  %115 = bitcast i32 %114 to float, !dbg !31
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #2, !dbg !31
  %117 = bitcast i32 %116 to float, !dbg !31
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #2, !dbg !31
  %119 = bitcast i32 %118 to float, !dbg !31
  %120 = sext i32 %16 to i64, !dbg !32
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !32
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 true) #2, !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !33
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !33
  %127 = bitcast i32 %123 to float, !dbg !33
  %128 = bitcast i32 %124 to float, !dbg !33
  %129 = bitcast i32 %125 to float, !dbg !33
  %130 = bitcast i32 %126 to float, !dbg !33
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 true) #2, !dbg !33
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !33
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !33
  %136 = bitcast i32 %132 to float, !dbg !33
  %137 = bitcast i32 %133 to float, !dbg !33
  %138 = bitcast i32 %134 to float, !dbg !33
  %139 = bitcast i32 %135 to float, !dbg !33
  %140 = fadd float %105, %127, !dbg !34
  %141 = fadd float %107, %128, !dbg !34
  %142 = fadd float %109, %129, !dbg !34
  %143 = fadd float %111, %130, !dbg !34
  %144 = fadd float %113, %136, !dbg !34
  %145 = fadd float %115, %137, !dbg !34
  %146 = fadd float %117, %138, !dbg !34
  %147 = fadd float %119, %139, !dbg !34
  %148 = fmul float %140, 0x3FC99999A0000000, !dbg !35
  %149 = fmul float %141, 0x3FC99999A0000000, !dbg !35
  %150 = fmul float %142, 0x3FC99999A0000000, !dbg !35
  %151 = fmul float %143, 0x3FC99999A0000000, !dbg !35
  %152 = fmul float %144, 0x3FC99999A0000000, !dbg !35
  %153 = fmul float %145, 0x3FC99999A0000000, !dbg !35
  %154 = fmul float %146, 0x3FC99999A0000000, !dbg !35
  %155 = fmul float %147, 0x3FC99999A0000000, !dbg !35
  %156 = select i1 %.not, float %148, float %140, !dbg !36
  %157 = select i1 %.not1, float %149, float %141, !dbg !36
  %158 = select i1 %.not2, float %150, float %142, !dbg !36
  %159 = select i1 %.not3, float %151, float %143, !dbg !36
  %160 = select i1 %.not4, float %152, float %144, !dbg !36
  %161 = select i1 %.not5, float %153, float %145, !dbg !36
  %162 = select i1 %.not6, float %154, float %146, !dbg !36
  %163 = select i1 %.not7, float %155, float %147, !dbg !36
  %164 = sext i32 %11 to i64, !dbg !37
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %164, !dbg !37
  %166 = sext i32 %15 to i64, !dbg !37
  %167 = getelementptr float, ptr addrspace(1) %3, i64 %166, !dbg !37
  %168 = bitcast float %156 to i32, !dbg !38
  %169 = bitcast float %157 to i32, !dbg !38
  %170 = bitcast float %158 to i32, !dbg !38
  %171 = bitcast float %159 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %168, i32 %169, i32 %170, i32 %171, ptr addrspace(1) %165, i1 true) #2, !dbg !38
  %172 = bitcast float %160 to i32, !dbg !38
  %173 = bitcast float %161 to i32, !dbg !38
  %174 = bitcast float %162 to i32, !dbg !38
  %175 = bitcast float %163 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %172, i32 %173, i32 %174, i32 %175, ptr addrspace(1) %167, i1 true) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c27n47fepscw673ol3xkpi5obbz2isp5dsqjjbwzyrv2n7hkjbfg.py", directory: "inductor_cache/27")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_reflection_pad2d_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_reflection_pad2d_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_reflection_pad2d_22", linkageName: "triton_poi_fused_convolution_leaky_relu_reflection_pad2d_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 29, column: 91, scope: !7)
!19 = !DILocation(line: 29, column: 84, scope: !7)
!20 = !DILocation(line: 29, column: 72, scope: !7)
!21 = !DILocation(line: 29, column: 64, scope: !7)
!22 = !DILocation(line: 29, column: 52, scope: !7)
!23 = !DILocation(line: 29, column: 160, scope: !7)
!24 = !DILocation(line: 29, column: 38, scope: !7)
!25 = !DILocation(line: 29, column: 44, scope: !7)
!26 = !DILocation(line: 29, column: 100, scope: !7)
!27 = !DILocation(line: 29, column: 154, scope: !7)
!28 = !DILocation(line: 29, column: 30, scope: !7)
!29 = !DILocation(line: 29, column: 165, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 165, scope: !7)
!32 = !DILocation(line: 31, column: 30, scope: !7)
!33 = !DILocation(line: 31, column: 35, scope: !7)
!34 = !DILocation(line: 32, column: 18, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 35, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 25, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 36, column: 4, scope: !7)
