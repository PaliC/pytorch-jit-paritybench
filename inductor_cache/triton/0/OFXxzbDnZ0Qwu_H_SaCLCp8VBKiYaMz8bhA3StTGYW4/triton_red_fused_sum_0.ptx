//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_red_fused_sum_0  // -- Begin function triton_red_fused_sum_0
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
.noreturn;
.global .align 1 .b8 assertFunc_0[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_0[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 105, 50, 47, 99, 105, 50, 99, 99, 51, 97, 114, 113, 117, 102, 116, 101, 121, 119, 115, 115, 100, 105, 99, 97, 117, 115, 104, 50, 118, 53, 120, 97, 103, 111, 105, 120, 121, 102, 97, 119, 100, 122, 106, 117, 55, 122, 106, 111, 105, 109, 110, 55, 116, 52, 113, 46, 112, 121};
.global .align 1 .b8 assertMessage_0[36] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 56, 32, 60, 32, 49, 54};
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_red_fused_sum_0
.visible .entry triton_red_fused_sum_0(
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_0,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_1,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_2,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_3,
	.param .u64 .ptr .global .align 1 triton_red_fused_sum_0_param_4,
	.param .u32 triton_red_fused_sum_0_param_5
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<31>;
	.reg .b32 	%r<74>;
	.reg .f32 	%f<49>;
	.reg .b64 	%rd<49>;
	.loc	1 19 0                          // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:19:0

// %bb.0:
	ld.param.u64 	%rd13, [triton_red_fused_sum_0_param_2];
	ld.param.u64 	%rd19, [triton_red_fused_sum_0_param_0];
	ld.param.u64 	%rd20, [triton_red_fused_sum_0_param_1];
$L__tmp0:
	.loc	1 25 33                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:25:33
	mov.u32 	%r20, %tid.x;
	and.b32  	%r21, %r20, 31;
	and.b32  	%r22, %r20, 63;
	ld.param.u64 	%rd21, [triton_red_fused_sum_0_param_3];
	ld.param.u64 	%rd22, [triton_red_fused_sum_0_param_4];
	.loc	1 31 34                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:34
	mul.wide.u32 	%rd23, %r22, 4;
	add.s64 	%rd14, %rd19, %rd23;
	mov.b32 	%r13, 0;
	mov.pred 	%p8, -1;
	.loc	1 31 39                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:39
	// begin inline asm
	mov.u32 %r6, 0x0;
	@%p8 ld.global.L1::evict_last.b32 { %r6 }, [ %rd14 + 0 ];
	@!%p8 mov.u32 %r6, %r13;
	// end inline asm
	mov.b32 	%f2, %r6;
	.loc	1 33 23                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:33:23
	add.f32 	%f3, %f2, 0f00000000;
	.loc	1 31 34                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:34
	add.s64 	%rd15, %rd14, 256;
	.loc	1 31 39                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:39
	// begin inline asm
	mov.u32 %r8, 0x0;
	@%p8 ld.global.L1::evict_last.b32 { %r8 }, [ %rd15 + 0 ];
	@!%p8 mov.u32 %r8, %r13;
	// end inline asm
	mov.b32 	%f4, %r8;
	.loc	1 33 23                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:33:23
	add.f32 	%f5, %f3, %f4;
	.loc	1 31 34                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:34
	add.s64 	%rd16, %rd14, 512;
	.loc	1 31 39                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:39
	// begin inline asm
	mov.u32 %r10, 0x0;
	@%p8 ld.global.L1::evict_last.b32 { %r10 }, [ %rd16 + 0 ];
	@!%p8 mov.u32 %r10, %r13;
	// end inline asm
	mov.b32 	%f6, %r10;
	.loc	1 33 23                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:33:23
	add.f32 	%f7, %f5, %f6;
	.loc	1 31 34                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:34
	add.s64 	%rd17, %rd14, 768;
	.loc	1 31 39                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:31:39
	// begin inline asm
	mov.u32 %r12, 0x0;
	@%p8 ld.global.L1::evict_last.b32 { %r12 }, [ %rd17 + 0 ];
	@!%p8 mov.u32 %r12, %r13;
	// end inline asm
	mov.b32 	%f8, %r12;
	.loc	1 33 23                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:33:23
	add.f32 	%f9, %f7, %f8;
$L__tmp1:
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r23, %f9;
	shfl.sync.bfly.b32	%r24, %r23, 16, 31, -1;
	mov.b32 	%f10, %r24;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f11, %f9, %f10;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r25, %f11;
	shfl.sync.bfly.b32	%r26, %r25, 8, 31, -1;
	mov.b32 	%f12, %r26;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f13, %f11, %f12;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r27, %f13;
	shfl.sync.bfly.b32	%r28, %r27, 4, 31, -1;
	mov.b32 	%f14, %r28;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f15, %f13, %f14;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r29, %f15;
	shfl.sync.bfly.b32	%r30, %r29, 2, 31, -1;
	mov.b32 	%f16, %r30;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f17, %f15, %f16;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r31, %f17;
	shfl.sync.bfly.b32	%r32, %r31, 1, 31, -1;
	mov.b32 	%f18, %r32;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f19, %f17, %f18;
	.loc	2 267 36                        // standard.py:267:36
	setp.eq.s32 	%p9, %r21, 0;
	shr.u32 	%r33, %r20, 3;
	and.b32  	%r34, %r33, 4;
	mov.u32 	%r35, global_smem;
	add.s32 	%r14, %r35, %r34;
	mov.b32 	%r15, %f19;
	// begin inline asm
	@%p9 st.shared.b32 [ %r14 + 0 ], %r15;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p10, %r20, 2;
	shl.b32 	%r36, %r20, 2;
	add.s32 	%r17, %r35, %r36;
	// begin inline asm
	@%p10 ld.shared.b32 %r16, [ %r17 + 0 ];
	// end inline asm
	mov.b32 	%f20, %r16;
	shfl.sync.bfly.b32	%r37, %r16, 1, 31, -1;
	mov.b32 	%f21, %r37;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f22, %f20, %f21;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r38, %r20, 1;
	setp.eq.b32 	%p12, %r38, 1;
	not.pred 	%p13, %p12;
	and.pred  	%p11, %p10, %p13;
	mov.b32 	%r19, %f22;
	// begin inline asm
	@%p11 st.shared.b32 [ %r17 + 0 ], %r19;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f23, [global_smem];
$L__tmp2:
	.loc	1 62 23                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:62:23
	add.f32 	%f1, %f23, 0f38D1B717;
	bfe.u32 	%r39, %r20, 2, 4;
	and.b32  	%r40, %r20, 15;
	mul.wide.u32 	%rd24, %r39, 8;
	add.s64 	%rd27, %rd20, %rd24;
	shl.b32 	%r41, %r20, 4;
	and.b32  	%r42, %r41, 48;
	and.b32  	%r43, %r36, 192;
	or.b32  	%r44, %r42, %r43;
	cvt.u64.u32 	%rd2, %r44;
	.loc	1 36 36                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:36:36
	mul.wide.u32 	%rd25, %r40, 4;
	add.s64 	%rd3, %rd19, %rd25;
	add.s64 	%rd47, %rd22, %rd23;
	add.s64 	%rd46, %rd21, %rd23;
	mov.u64 	%rd48, -64;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	.loc	1 45 39                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:45:39
	// begin inline asm
	mov.u64 %rd26, 0x0;
	@%p8 ld.global.L1::evict_last.b64 { %rd26 }, [ %rd27 + 0 ];
	@!%p8 mov.u64 %rd26, 0x0;
	// end inline asm
	.loc	1 46 48                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:48
	add.s64 	%rd33, %rd3, %rd48;
	add.s64 	%rd28, %rd33, 64;
	// begin inline asm
	mov.u32 %r45, 0x0;
	@%p8 ld.global.L1::evict_last.b32 { %r45 }, [ %rd28 + 0 ];
	@!%p8 mov.u32 %r45, %r13;
	// end inline asm
	.loc	1 47 40                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:47:40
	// begin inline asm
	mov.u32 %r47, 0x0;
	@%p8 ld.global.L1::evict_first.b32 { %r47 }, [ %rd46 + 0 ];
	@!%p8 mov.u32 %r47, %r13;
	// end inline asm
	.loc	1 48 53                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:48:53
	add.s64 	%rd30, %rd33, 320;
	// begin inline asm
	mov.u32 %r49, 0x0;
	@%p8 ld.global.L1::evict_last.b32 { %r49 }, [ %rd30 + 0 ];
	@!%p8 mov.u32 %r49, %r13;
	// end inline asm
	.loc	1 49 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:49:54
	add.s64 	%rd31, %rd33, 576;
	// begin inline asm
	mov.u32 %r51, 0x0;
	@%p8 ld.global.L1::evict_last.b32 { %r51 }, [ %rd31 + 0 ];
	@!%p8 mov.u32 %r51, %r13;
	// end inline asm
	.loc	1 50 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:50:54
	add.s64 	%rd32, %rd33, 832;
	// begin inline asm
	mov.u32 %r53, 0x0;
	@%p8 ld.global.L1::evict_last.b32 { %r53 }, [ %rd32 + 0 ];
	@!%p8 mov.u32 %r53, %r13;
	// end inline asm
	.loc	1 54 36                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:54:36
	shr.u64 	%rd34, %rd26, 59;
	and.b64  	%rd35, %rd34, 16;
	add.s64 	%rd9, %rd35, %rd26;
	.loc	1 55 41                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:55:41
	setp.lt.u64 	%p26, %rd9, 16;
	.loc	1 55 65                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:55:65
	@%p26 bra 	$L__BB0_3;
	bra.uni 	$L__BB0_2;
$L__BB0_3:                              //   in Loop: Header=BB0_1 Depth=1
	.loc	1 50 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:50:54
	mov.b32 	%f24, %r53;
	.loc	1 49 54                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:49:54
	mov.b32 	%f25, %r51;
	.loc	1 48 53                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:48:53
	mov.b32 	%f26, %r49;
	.loc	1 47 40                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:47:40
	mov.b32 	%f27, %r47;
	.loc	1 46 48                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:46:48
	mov.b32 	%f28, %r45;
	.loc	1 55 65                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:55:65
	bar.sync 	0;
	.loc	1 56 53                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:53
	or.b64  	%rd38, %rd9, %rd2;
	.loc	1 56 35                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:35
	shl.b64 	%rd39, %rd38, 2;
	add.s64 	%rd36, %rd13, %rd39;
	.loc	1 56 67                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:56:67
	// begin inline asm
	mov.u32 %r55, 0x0;
	@%p8 ld.global.L1::evict_last.b32 { %r55 }, [ %rd36 + 0 ];
	@!%p8 mov.u32 %r55, %r13;
	// end inline asm
	mov.b32 	%f29, %r55;
	.loc	1 58 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:58:24
	mul.f32 	%f30, %f28, %f27;
	.loc	1 59 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:59:24
	neg.f32 	%f31, %f30;
	fma.rn.f32 	%f32, %f28, %f29, %f31;
	mov.b32 	%r70, %f32;
	.loc	1 63 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:63:24
	and.b32  	%r58, %r70, 2147483647;
	mov.b32 	%r59, %f1;
	// begin inline asm
	div.full.f32 %r57, %r58, %r59;
	// end inline asm
	mov.b32 	%f33, %r57;
	.loc	1 65 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:65:24
	mul.f32 	%f34, %f27, %f26;
	.loc	1 66 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:66:24
	neg.f32 	%f35, %f34;
	fma.rn.f32 	%f36, %f26, %f29, %f35;
	mov.b32 	%r71, %f36;
	.loc	1 68 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:68:24
	and.b32  	%r61, %r71, 2147483647;
	// begin inline asm
	div.full.f32 %r60, %r61, %r59;
	// end inline asm
	mov.b32 	%f37, %r60;
	.loc	1 69 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:69:24
	add.f32 	%f38, %f33, %f37;
	.loc	1 71 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:71:24
	mul.f32 	%f39, %f27, %f25;
	.loc	1 72 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:72:24
	neg.f32 	%f40, %f39;
	fma.rn.f32 	%f41, %f25, %f29, %f40;
	mov.b32 	%r72, %f41;
	.loc	1 74 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:74:24
	and.b32  	%r64, %r72, 2147483647;
	// begin inline asm
	div.full.f32 %r63, %r64, %r59;
	// end inline asm
	mov.b32 	%f42, %r63;
	.loc	1 75 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:75:24
	add.f32 	%f43, %f38, %f42;
	.loc	1 77 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:77:24
	mul.f32 	%f44, %f27, %f24;
	.loc	1 78 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:78:24
	neg.f32 	%f45, %f44;
	fma.rn.f32 	%f46, %f24, %f29, %f45;
	mov.b32 	%r73, %f46;
	.loc	1 80 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:80:24
	and.b32  	%r67, %r73, 2147483647;
	// begin inline asm
	div.full.f32 %r66, %r67, %r59;
	// end inline asm
	mov.b32 	%f47, %r66;
	.loc	1 81 24                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:81:24
	add.f32 	%f48, %f43, %f47;
	.loc	1 82 76                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:82:76
	mov.b32 	%r69, %f48;
	// begin inline asm
	@%p8 st.global.b32 [ %rd47 + 0 ], { %r69 };
	// end inline asm
	.loc	1 36 36                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:36:36
	add.s64 	%rd48, %rd48, 64;
	add.s64 	%rd47, %rd47, 256;
	add.s64 	%rd46, %rd46, 256;
	setp.lt.u64 	%p30, %rd48, 192;
	@%p30 bra 	$L__BB0_1;
// %bb.4:
	.loc	1 36 4                          // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:36:4
	ret;
$L__BB0_2:
	.loc	1 55 65                         // ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py:55:65
	mov.u64 	%rd40, assertMessage_0;
	cvta.global.u64 	%rd41, %rd40;
	mov.u64 	%rd42, assertFile_0;
	cvta.global.u64 	%rd43, %rd42;
	mov.u64 	%rd44, assertFunc_0;
	cvta.global.u64 	%rd45, %rd44;
	{ // callseq 1, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd41;
	.param .b64 param1;
	st.param.b64 	[param1], %rd43;
	.param .b32 param2;
	st.param.b32 	[param2], 55;
	.param .b64 param3;
	st.param.b64 	[param3], %rd45;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 1
	trap;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 167                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xa0 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 105
.b8 50
.b8 99
.b8 99
.b8 51
.b8 97
.b8 114
.b8 113
.b8 117
.b8 102
.b8 116
.b8 101
.b8 121
.b8 119
.b8 115
.b8 115
.b8 100
.b8 105
.b8 99
.b8 97
.b8 117
.b8 115
.b8 104
.b8 50
.b8 118
.b8 53
.b8 120
.b8 97
.b8 103
.b8 111
.b8 105
.b8 120
.b8 121
.b8 102
.b8 97
.b8 119
.b8 100
.b8 122
.b8 106
.b8 117
.b8 55
.b8 122
.b8 106
.b8 111
.b8 105
.b8 109
.b8 110
.b8 55
.b8 116
.b8 52
.b8 113
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 105
.b8 50
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x19 DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 114
.b8 101
.b8 100
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 115
.b8 117
.b8 109
.b8 95
.b8 48
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x7c:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0x91:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 35                                  // DW_AT_call_line
.b8 25                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
