#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":19:0)
#loc1 = loc(unknown)
#loc12 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":35:25)
#loc89 = loc(callsite(#loc1 at #loc12))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<16> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-5> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<192> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<16> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<true> : tensor<1x64xi1, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<256> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<4> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc2)
    %4 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc3)
    %5 = scf.for %arg6 = %c0_i32 to %c256_i32 step %c64_i32 iter_args(%arg7 = %cst_7) -> (tensor<1x64xf32, #blocked1>)  : i32 {
      %15 = tt.splat %arg6 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc5)
      %16 = arith.addi %15, %3 : tensor<1x64xi32, #blocked1> loc(#loc5)
      %17 = arith.cmpi slt, %16, %cst_6 : tensor<1x64xi32, #blocked1> loc(#loc6)
      %18 = tt.addptr %4, %16 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc3)
      %19 = tt.load %18, %17, %cst_7 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc7)
      %20 = arith.addf %arg7, %19 : tensor<1x64xf32, #blocked1> loc(#loc8)
      %21 = arith.select %17, %20, %arg7 : tensor<1x64xi1, #blocked1>, tensor<1x64xf32, #blocked1> loc(#loc9)
      scf.yield %21 : tensor<1x64xf32, #blocked1> loc(#loc10)
    } loc(#loc4)
    %6 = "tt.reduce"(%5) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc12)), %arg7: f32 loc(callsite(#loc1 at #loc12))):
      %15 = arith.addf %arg6, %arg7 : f32 loc(#loc91)
      tt.reduce.return %15 : f32 loc(#loc88)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc88)
    %7 = tt.expand_dims %6 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc14)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc15)
    %9 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %10 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc17)
    %11 = arith.addf %7, %cst_0 : tensor<1x1xf32, #blocked1> loc(#loc18)
    %12 = triton_gpu.convert_layout %11 : tensor<1x1xf32, #blocked1> -> tensor<1x1xf32, #blocked> loc(#loc19)
    %13 = tt.broadcast %12 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc19)
    %14 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc20)
    scf.for %arg6 = %c0_i32 to %c256_i32 step %c64_i32  : i32 {
      %15 = tt.splat %arg6 : i32 -> tensor<1x64xi32, #blocked> loc(#loc22)
      %16 = tt.splat %arg6 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc22)
      %17 = arith.addi %15, %2 : tensor<1x64xi32, #blocked> loc(#loc22)
      %18 = arith.addi %16, %3 : tensor<1x64xi32, #blocked1> loc(#loc22)
      %19 = arith.cmpi slt, %17, %cst_10 : tensor<1x64xi32, #blocked> loc(#loc23)
      %20 = arith.cmpi slt, %18, %cst_6 : tensor<1x64xi32, #blocked1> loc(#loc23)
      %21 = arith.divsi %17, %cst_11 : tensor<1x64xi32, #blocked> loc(#loc24)
      %22 = arith.remsi %21, %cst_12 : tensor<1x64xi32, #blocked> loc(#loc25)
      %23 = arith.remsi %17, %cst_11 : tensor<1x64xi32, #blocked> loc(#loc26)
      %24 = arith.divsi %17, %cst_12 : tensor<1x64xi32, #blocked> loc(#loc27)
      %25 = arith.remsi %24, %cst_11 : tensor<1x64xi32, #blocked> loc(#loc28)
      %26 = arith.divsi %18, %cst_4 : tensor<1x64xi32, #blocked1> loc(#loc29)
      %27 = arith.remsi %18, %cst_5 : tensor<1x64xi32, #blocked1> loc(#loc30)
      %28 = tt.addptr %8, %22 : tensor<1x64x!tt.ptr<i64>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc15)
      %29 = tt.load %28, %19, %cst_1 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc31)
      %30 = arith.muli %26, %cst_5 : tensor<1x64xi32, #blocked1> loc(#loc32)
      %31 = arith.addi %27, %30 : tensor<1x64xi32, #blocked1> loc(#loc33)
      %32 = tt.addptr %4, %31 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc34)
      %33 = tt.load %32, %20, %cst_7 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc35)
      %34 = triton_gpu.convert_layout %33 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 3 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc35)
      %35 = tt.addptr %9, %18 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc16)
      %36 = tt.load %35, %20, %cst_7 evictionPolicy = evict_first : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc36)
      %37 = arith.addi %27, %cst_4 : tensor<1x64xi32, #blocked1> loc(#loc37)
      %38 = arith.addi %37, %30 : tensor<1x64xi32, #blocked1> loc(#loc38)
      %39 = tt.addptr %4, %38 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc39)
      %40 = tt.load %39, %20, %cst_7 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc40)
      %41 = triton_gpu.convert_layout %40 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 3 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc40)
      %42 = arith.addi %27, %cst_3 : tensor<1x64xi32, #blocked1> loc(#loc41)
      %43 = arith.addi %42, %30 : tensor<1x64xi32, #blocked1> loc(#loc42)
      %44 = tt.addptr %4, %43 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc43)
      %45 = tt.load %44, %20, %cst_7 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc44)
      %46 = triton_gpu.convert_layout %45 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 3 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc44)
      %47 = arith.addi %27, %cst_2 : tensor<1x64xi32, #blocked1> loc(#loc45)
      %48 = arith.addi %47, %30 : tensor<1x64xi32, #blocked1> loc(#loc46)
      %49 = tt.addptr %4, %48 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc47)
      %50 = tt.load %49, %20, %cst_7 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc48)
      %51 = triton_gpu.convert_layout %50 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 3 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc48)
      %52 = arith.addi %29, %cst : tensor<1x64xi64, #blocked> loc(#loc49)
      %53 = arith.cmpi slt, %29, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc50)
      %54 = arith.select %53, %52, %29 : tensor<1x64xi1, #blocked>, tensor<1x64xi64, #blocked> loc(#loc51)
      %55 = arith.cmpi sge, %54, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc52)
      %56 = arith.cmpi slt, %54, %cst : tensor<1x64xi64, #blocked> loc(#loc53)
      %57 = arith.andi %55, %56 : tensor<1x64xi1, #blocked> loc(#loc54)
      %58 = arith.xori %19, %cst_9 : tensor<1x64xi1, #blocked> loc(#loc55)
      %59 = arith.ori %57, %58 : tensor<1x64xi1, #blocked> loc(#loc56)
      tt.assert %59, "index out of bounds: 0 <= tmp8 < 16" : tensor<1x64xi1, #blocked> loc(#loc57)
      %60 = arith.muli %23, %cst_12 : tensor<1x64xi32, #blocked> loc(#loc58)
      %61 = arith.muli %25, %cst_13 : tensor<1x64xi32, #blocked> loc(#loc59)
      %62 = arith.addi %60, %61 : tensor<1x64xi32, #blocked> loc(#loc60)
      %63 = arith.remsi %54, %cst : tensor<1x64xi64, #blocked> loc(#loc61)
      %64 = arith.extsi %62 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked> loc(#loc62)
      %65 = arith.addi %64, %63 : tensor<1x64xi64, #blocked> loc(#loc62)
      %66 = tt.addptr %10, %65 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi64, #blocked> loc(#loc17)
      %67 = tt.load %66, %19, %cst_8 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc63)
      %68 = arith.mulf %67, %34 : tensor<1x64xf32, #blocked> loc(#loc64)
      %69 = arith.mulf %36, %33 : tensor<1x64xf32, #blocked1> loc(#loc65)
      %70 = triton_gpu.convert_layout %69 {fastmath = #arith.fastmath<none>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc65)
      %71 = arith.subf %68, %70 : tensor<1x64xf32, #blocked> loc(#loc66)
      %72 = math.absf %71 : tensor<1x64xf32, #blocked> loc(#loc67)
      %73 = arith.divf %72, %13 : tensor<1x64xf32, #blocked> loc(#loc19)
      %74 = arith.mulf %67, %41 : tensor<1x64xf32, #blocked> loc(#loc68)
      %75 = arith.mulf %36, %40 : tensor<1x64xf32, #blocked1> loc(#loc69)
      %76 = triton_gpu.convert_layout %75 {fastmath = #arith.fastmath<none>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc69)
      %77 = arith.subf %74, %76 : tensor<1x64xf32, #blocked> loc(#loc70)
      %78 = math.absf %77 : tensor<1x64xf32, #blocked> loc(#loc71)
      %79 = arith.divf %78, %13 : tensor<1x64xf32, #blocked> loc(#loc72)
      %80 = arith.addf %73, %79 : tensor<1x64xf32, #blocked> loc(#loc73)
      %81 = arith.mulf %67, %46 : tensor<1x64xf32, #blocked> loc(#loc74)
      %82 = arith.mulf %36, %45 : tensor<1x64xf32, #blocked1> loc(#loc75)
      %83 = triton_gpu.convert_layout %82 {fastmath = #arith.fastmath<none>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc75)
      %84 = arith.subf %81, %83 : tensor<1x64xf32, #blocked> loc(#loc76)
      %85 = math.absf %84 : tensor<1x64xf32, #blocked> loc(#loc77)
      %86 = arith.divf %85, %13 : tensor<1x64xf32, #blocked> loc(#loc78)
      %87 = arith.addf %80, %86 : tensor<1x64xf32, #blocked> loc(#loc79)
      %88 = arith.mulf %67, %51 : tensor<1x64xf32, #blocked> loc(#loc80)
      %89 = arith.mulf %36, %50 : tensor<1x64xf32, #blocked1> loc(#loc81)
      %90 = triton_gpu.convert_layout %89 {fastmath = #arith.fastmath<none>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc81)
      %91 = arith.subf %88, %90 : tensor<1x64xf32, #blocked> loc(#loc82)
      %92 = math.absf %91 : tensor<1x64xf32, #blocked> loc(#loc83)
      %93 = arith.divf %92, %13 : tensor<1x64xf32, #blocked> loc(#loc84)
      %94 = arith.addf %87, %93 : tensor<1x64xf32, #blocked> loc(#loc85)
      %95 = tt.addptr %14, %18 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc20)
      %96 = triton_gpu.convert_layout %94 : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc86)
      tt.store %95, %96, %20 : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc86)
    } loc(#loc21)
    tt.return loc(#loc87)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":25:33)
#loc3 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":31:34)
#loc4 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":27:36)
#loc5 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":28:27)
#loc6 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":29:25)
#loc7 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":31:39)
#loc8 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":33:23)
#loc9 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":34:38)
#loc10 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":34:8)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc14 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":35:28)
#loc15 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":45:34)
#loc16 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":47:35)
#loc17 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":56:35)
#loc18 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":62:23)
#loc19 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":63:24)
#loc20 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":82:29)
#loc21 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":36:36)
#loc22 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":37:27)
#loc23 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":38:25)
#loc24 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":39:25)
#loc25 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":39:30)
#loc26 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":40:23)
#loc27 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":41:25)
#loc28 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":41:31)
#loc29 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":42:23)
#loc30 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":43:23)
#loc31 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":45:39)
#loc32 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":46:43)
#loc33 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":46:40)
#loc34 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":46:35)
#loc35 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":46:48)
#loc36 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":47:40)
#loc37 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":48:40)
#loc38 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":48:45)
#loc39 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":48:35)
#loc40 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":48:53)
#loc41 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":49:41)
#loc42 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":49:46)
#loc43 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":49:35)
#loc44 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":49:54)
#loc45 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":50:41)
#loc46 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":50:46)
#loc47 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":50:35)
#loc48 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":50:54)
#loc49 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":52:22)
#loc50 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":53:22)
#loc51 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":54:36)
#loc52 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":55:32)
#loc53 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":55:48)
#loc54 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":55:41)
#loc55 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":55:57)
#loc56 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":55:55)
#loc57 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":55:65)
#loc58 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":56:38)
#loc59 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":56:46)
#loc60 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":56:43)
#loc61 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":56:60)
#loc62 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":56:53)
#loc63 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":56:67)
#loc64 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":57:24)
#loc65 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":58:24)
#loc66 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":59:24)
#loc67 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":60:28)
#loc68 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":64:24)
#loc69 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":65:24)
#loc70 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":66:24)
#loc71 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":67:28)
#loc72 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":68:24)
#loc73 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":69:24)
#loc74 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":70:24)
#loc75 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":71:24)
#loc76 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":72:24)
#loc77 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":73:28)
#loc78 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":74:24)
#loc79 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":75:24)
#loc80 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":76:24)
#loc81 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":77:24)
#loc82 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":78:24)
#loc83 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":79:28)
#loc84 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":80:24)
#loc85 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":81:24)
#loc86 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":82:76)
#loc87 = loc("inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py":36:4)
#loc88 = loc(callsite(#loc11 at #loc12))
#loc90 = loc(callsite(#loc13 at #loc11))
#loc91 = loc(callsite(#loc90 at #loc12))
