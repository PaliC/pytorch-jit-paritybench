; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/i2/ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp8 < 16\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_red_fused_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = and i32 %7, 63, !dbg !12
  %10 = zext nneg i32 %9 to i64, !dbg !13
  %11 = getelementptr float, ptr addrspace(1) %0, i64 %10, !dbg !14
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %11, i1 true, i32 0, i1 true) #4, !dbg !15
  %13 = bitcast i32 %12 to float, !dbg !15
  %14 = fadd float %13, 0.000000e+00, !dbg !16
  %15 = or disjoint i64 %10, 64, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 true, i32 0, i1 true) #4, !dbg !15
  %18 = bitcast i32 %17 to float, !dbg !15
  %19 = fadd float %14, %18, !dbg !16
  %20 = or disjoint i64 %10, 128, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !14
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 true, i32 0, i1 true) #4, !dbg !15
  %23 = bitcast i32 %22 to float, !dbg !15
  %24 = fadd float %19, %23, !dbg !16
  %25 = or disjoint i64 %10, 192, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !14
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 true, i32 0, i1 true) #4, !dbg !15
  %28 = bitcast i32 %27 to float, !dbg !15
  %29 = fadd float %24, %28, !dbg !16
  %30 = lshr i32 %7, 5, !dbg !12
  %31 = bitcast float %29 to i32, !dbg !18
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 16, i32 31), !dbg !18
  %33 = bitcast i32 %32 to float, !dbg !18
  %34 = fadd float %29, %33, !dbg !22
  %35 = bitcast float %34 to i32, !dbg !18
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 8, i32 31), !dbg !18
  %37 = bitcast i32 %36 to float, !dbg !18
  %38 = fadd float %34, %37, !dbg !22
  %39 = bitcast float %38 to i32, !dbg !18
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 4, i32 31), !dbg !18
  %41 = bitcast i32 %40 to float, !dbg !18
  %42 = fadd float %38, %41, !dbg !22
  %43 = bitcast float %42 to i32, !dbg !18
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 2, i32 31), !dbg !18
  %45 = bitcast i32 %44 to float, !dbg !18
  %46 = fadd float %42, %45, !dbg !22
  %47 = bitcast float %46 to i32, !dbg !18
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 1, i32 31), !dbg !18
  %49 = bitcast i32 %48 to float, !dbg !18
  %50 = fadd float %46, %49, !dbg !22
  %51 = icmp eq i32 %8, 0, !dbg !18
  %52 = and i32 %30, 1, !dbg !18
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i32 %52, !dbg !18
  %54 = bitcast float %50 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 %51) #4, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %55 = icmp slt i32 %7, 2, !dbg !18
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !18
  %57 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %56, i1 %55) #4, !dbg !18
  %58 = bitcast i32 %57 to float, !dbg !18
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 1, i32 31), !dbg !18
  %60 = bitcast i32 %59 to float, !dbg !18
  %61 = fadd float %58, %60, !dbg !22
  %62 = and i32 %7, 1, !dbg !18
  %63 = icmp eq i32 %62, 0, !dbg !18
  %64 = and i1 %55, %63, !dbg !18
  %65 = bitcast float %61 to <1 x i32>, !dbg !18
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %65, i1 %64) #4, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !18
  %66 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !18
  %67 = fadd float %66, 0x3F1A36E2E0000000, !dbg !24
  %68 = lshr i32 %7, 2
  %69 = and i32 %68, 15
  %70 = and i32 %7, 15
  %71 = zext nneg i32 %69 to i64
  %72 = getelementptr i64, ptr addrspace(1) %1, i64 %71
  %73 = shl i32 %7, 4
  %74 = and i32 %73, 48
  %75 = shl i32 %7, 2
  %76 = and i32 %75, 192
  %77 = or disjoint i32 %74, %76
  %78 = zext nneg i32 %77 to i64
  %79 = zext nneg i32 %70 to i64, !dbg !25
  br label %80, !dbg !25

80:                                               ; preds = %6, %103
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %103 ]
  %81 = or disjoint i64 %indvars.iv, %10, !dbg !26
  %82 = lshr exact i64 %indvars.iv, 2, !dbg !27
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %72, i1 true, i1 true) #4, !dbg !28
  %84 = or disjoint i64 %82, %79, !dbg !29
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 true, i32 0, i1 true) #4, !dbg !31
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !32
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 true, i32 0, i1 true) #4, !dbg !33
  %89 = or disjoint i64 %84, 64, !dbg !34
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !35
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 true, i32 0, i1 true) #4, !dbg !36
  %92 = or disjoint i64 %84, 128, !dbg !37
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !38
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 true, i32 0, i1 true) #4, !dbg !39
  %95 = or disjoint i64 %84, 192, !dbg !40
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !41
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 true, i32 0, i1 true) #4, !dbg !42
  %98 = lshr i64 %83, 59, !dbg !43
  %99 = and i64 %98, 16, !dbg !43
  %100 = add i64 %99, %83, !dbg !43
  %101 = icmp ugt i64 %100, 15, !dbg !44
  br i1 %101, label %102, label %103, !dbg !45

102:                                              ; preds = %80
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 55, ptr nonnull @assertFunc_0, i64 1), !dbg !45
  unreachable, !dbg !45

103:                                              ; preds = %80
  %104 = bitcast i32 %97 to float, !dbg !42
  %105 = bitcast i32 %94 to float, !dbg !39
  %106 = bitcast i32 %91 to float, !dbg !36
  %107 = bitcast i32 %88 to float, !dbg !33
  %108 = bitcast i32 %86 to float, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %109 = or disjoint i64 %100, %78, !dbg !46
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !47
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 true, i32 0, i1 true) #4, !dbg !48
  %112 = bitcast i32 %111 to float, !dbg !48
  %113 = fmul float %108, %112, !dbg !49
  %114 = fmul float %108, %107, !dbg !50
  %115 = fsub float %113, %114, !dbg !51
  %116 = tail call float @llvm.fabs.f32(float %115), !dbg !52
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %67) #4, !dbg !53
  %118 = fmul float %106, %112, !dbg !54
  %119 = fmul float %107, %106, !dbg !55
  %120 = fsub float %118, %119, !dbg !56
  %121 = tail call float @llvm.fabs.f32(float %120), !dbg !57
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %67) #4, !dbg !58
  %123 = fadd float %117, %122, !dbg !59
  %124 = fmul float %105, %112, !dbg !60
  %125 = fmul float %107, %105, !dbg !61
  %126 = fsub float %124, %125, !dbg !62
  %127 = tail call float @llvm.fabs.f32(float %126), !dbg !63
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %67) #4, !dbg !64
  %129 = fadd float %123, %128, !dbg !65
  %130 = fmul float %104, %112, !dbg !66
  %131 = fmul float %107, %104, !dbg !67
  %132 = fsub float %130, %131, !dbg !68
  %133 = tail call float @llvm.fabs.f32(float %132), !dbg !69
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %67) #4, !dbg !70
  %135 = fadd float %129, %134, !dbg !71
  %136 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !72
  %137 = bitcast float %135 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %136, i1 true) #4, !dbg !73
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !25
  %138 = icmp samesign ult i64 %indvars.iv, 192, !dbg !25
  br i1 %138, label %80, label %139, !dbg !25

139:                                              ; preds = %103
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci2cc3arqufteywssdicaush2v5xagoixyfawdzju7zjoimn7t4q.py", directory: "inductor_cache/i2")
!4 = !{ptr @triton_red_fused_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_red_fused_sum_0", linkageName: "triton_red_fused_sum_0", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 25, column: 33, scope: !11)
!13 = !DILocation(line: 27, column: 36, scope: !11)
!14 = !DILocation(line: 31, column: 34, scope: !11)
!15 = !DILocation(line: 31, column: 39, scope: !11)
!16 = !DILocation(line: 33, column: 23, scope: !11)
!17 = !DILocation(line: 28, column: 27, scope: !11)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !11, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 35, column: 25, scope: !11)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !21)
!23 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!24 = !DILocation(line: 62, column: 23, scope: !11)
!25 = !DILocation(line: 36, column: 36, scope: !11)
!26 = !DILocation(line: 37, column: 27, scope: !11)
!27 = !DILocation(line: 42, column: 23, scope: !11)
!28 = !DILocation(line: 45, column: 39, scope: !11)
!29 = !DILocation(line: 46, column: 40, scope: !11)
!30 = !DILocation(line: 46, column: 35, scope: !11)
!31 = !DILocation(line: 46, column: 48, scope: !11)
!32 = !DILocation(line: 47, column: 35, scope: !11)
!33 = !DILocation(line: 47, column: 40, scope: !11)
!34 = !DILocation(line: 48, column: 45, scope: !11)
!35 = !DILocation(line: 48, column: 35, scope: !11)
!36 = !DILocation(line: 48, column: 53, scope: !11)
!37 = !DILocation(line: 49, column: 46, scope: !11)
!38 = !DILocation(line: 49, column: 35, scope: !11)
!39 = !DILocation(line: 49, column: 54, scope: !11)
!40 = !DILocation(line: 50, column: 46, scope: !11)
!41 = !DILocation(line: 50, column: 35, scope: !11)
!42 = !DILocation(line: 50, column: 54, scope: !11)
!43 = !DILocation(line: 54, column: 36, scope: !11)
!44 = !DILocation(line: 55, column: 41, scope: !11)
!45 = !DILocation(line: 55, column: 65, scope: !11)
!46 = !DILocation(line: 56, column: 53, scope: !11)
!47 = !DILocation(line: 56, column: 35, scope: !11)
!48 = !DILocation(line: 56, column: 67, scope: !11)
!49 = !DILocation(line: 57, column: 24, scope: !11)
!50 = !DILocation(line: 58, column: 24, scope: !11)
!51 = !DILocation(line: 59, column: 24, scope: !11)
!52 = !DILocation(line: 60, column: 28, scope: !11)
!53 = !DILocation(line: 63, column: 24, scope: !11)
!54 = !DILocation(line: 64, column: 24, scope: !11)
!55 = !DILocation(line: 65, column: 24, scope: !11)
!56 = !DILocation(line: 66, column: 24, scope: !11)
!57 = !DILocation(line: 67, column: 28, scope: !11)
!58 = !DILocation(line: 68, column: 24, scope: !11)
!59 = !DILocation(line: 69, column: 24, scope: !11)
!60 = !DILocation(line: 70, column: 24, scope: !11)
!61 = !DILocation(line: 71, column: 24, scope: !11)
!62 = !DILocation(line: 72, column: 24, scope: !11)
!63 = !DILocation(line: 73, column: 28, scope: !11)
!64 = !DILocation(line: 74, column: 24, scope: !11)
!65 = !DILocation(line: 75, column: 24, scope: !11)
!66 = !DILocation(line: 76, column: 24, scope: !11)
!67 = !DILocation(line: 77, column: 24, scope: !11)
!68 = !DILocation(line: 78, column: 24, scope: !11)
!69 = !DILocation(line: 79, column: 28, scope: !11)
!70 = !DILocation(line: 80, column: 24, scope: !11)
!71 = !DILocation(line: 81, column: 24, scope: !11)
!72 = !DILocation(line: 82, column: 29, scope: !11)
!73 = !DILocation(line: 82, column: 76, scope: !11)
!74 = !DILocation(line: 36, column: 4, scope: !11)
