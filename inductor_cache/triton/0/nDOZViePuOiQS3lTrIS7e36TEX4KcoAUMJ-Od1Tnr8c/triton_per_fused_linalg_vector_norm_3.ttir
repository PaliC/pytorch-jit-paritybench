#loc = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":19:0)
#loc1 = loc(unknown)
#loc21 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":37:24)
#loc28 = loc(callsite(#loc1 at #loc21))
module {
  tt.func public @triton_per_fused_linalg_vector_norm_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x16xf32> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<8x1xi32> loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<1x16xi32> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<8x1xi32> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<8x1xi32> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32> -> tensor<8x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<8x1xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_3 : tensor<8x1xi32> loc(#loc7)
    %7 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc8)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc9)
    %9 = arith.remsi %5, %cst_2 : tensor<8x1xi32> loc(#loc10)
    %10 = arith.divsi %5, %cst_2 : tensor<8x1xi32> loc(#loc11)
    %11 = arith.muli %8, %cst_1 : tensor<1x16xi32> loc(#loc12)
    %12 = tt.broadcast %9 : tensor<8x1xi32> -> tensor<8x16xi32> loc(#loc13)
    %13 = tt.broadcast %11 : tensor<1x16xi32> -> tensor<8x16xi32> loc(#loc13)
    %14 = arith.addi %12, %13 : tensor<8x16xi32> loc(#loc13)
    %15 = arith.muli %10, %cst_0 : tensor<8x1xi32> loc(#loc14)
    %16 = tt.broadcast %15 : tensor<8x1xi32> -> tensor<8x16xi32> loc(#loc15)
    %17 = arith.addi %14, %16 : tensor<8x16xi32> loc(#loc15)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>> loc(#loc16)
    %19 = tt.addptr %18, %17 : tensor<8x16x!tt.ptr<f32>>, tensor<8x16xi32> loc(#loc16)
    %20 = tt.broadcast %6 : tensor<8x1xi1> -> tensor<8x16xi1> loc(#loc17)
    %21 = tt.load %19, %20, %cst : tensor<8x16x!tt.ptr<f32>> loc(#loc17)
    %22 = math.absf %21 : tensor<8x16xf32> loc(#loc18)
    %23 = arith.select %20, %22, %cst : tensor<8x16xi1>, tensor<8x16xf32> loc(#loc19)
    %24 = "tt.reduce"(%23) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc21)), %arg5: f32 loc(callsite(#loc1 at #loc21))):
      %28 = arith.addf %arg4, %arg5 : f32 loc(#loc30)
      tt.reduce.return %28 : f32 loc(#loc27)
    }) : (tensor<8x16xf32>) -> tensor<8xf32> loc(#loc27)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<8xf32> -> tensor<8x1xf32> loc(#loc23)
    %26 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>> loc(#loc24)
    %27 = tt.addptr %26, %5 : tensor<8x1x!tt.ptr<f32>>, tensor<8x1xi32> loc(#loc24)
    tt.store %27, %25, %6 : tensor<8x1x!tt.ptr<f32>> loc(#loc25)
    tt.return loc(#loc26)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":23:28)
#loc3 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":23:33)
#loc4 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":24:36)
#loc5 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":24:44)
#loc6 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":24:23)
#loc7 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":25:21)
#loc8 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":26:26)
#loc9 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":26:34)
#loc10 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":30:19)
#loc11 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":31:19)
#loc12 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":33:37)
#loc13 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":33:35)
#loc14 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":33:45)
#loc15 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":33:42)
#loc16 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":33:30)
#loc17 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":33:50)
#loc18 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":34:23)
#loc19 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":36:33)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc23 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":37:27)
#loc24 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":38:25)
#loc25 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":38:36)
#loc26 = loc("inductor_cache/cg/ccg7o3ubteaiwnnmnsa5tdn3sye5w4dblyb2mwt7freszkggxof5.py":38:4)
#loc27 = loc(callsite(#loc20 at #loc21))
#loc29 = loc(callsite(#loc22 at #loc20))
#loc30 = loc(callsite(#loc29 at #loc21))
