; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_layer_norm_sigmoid_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 2, !dbg !11
  %15 = and i32 %14, 508, !dbg !11
  %16 = shl i32 %10, 9, !dbg !12
  %17 = or disjoint i32 %16, %15, !dbg !13
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !15
  %25 = zext nneg i32 %15 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !18
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !21
  %36 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !15
  %37 = insertelement <2 x i32> %36, i32 %22, i64 1, !dbg !15
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !15
  %39 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !17
  %40 = insertelement <2 x i32> %39, i32 %29, i64 1, !dbg !17
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !17
  %42 = fadd <2 x float> %38, %41, !dbg !22
  %43 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !15
  %44 = insertelement <2 x i32> %43, i32 %23, i64 1, !dbg !15
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !15
  %46 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !17
  %47 = insertelement <2 x i32> %46, i32 %30, i64 1, !dbg !17
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !17
  %49 = fadd <2 x float> %45, %48, !dbg !22
  %50 = extractelement <2 x float> %42, i64 0, !dbg !23
  %51 = extractelement <2 x float> %42, i64 1, !dbg !23
  %52 = fadd float %50, %51, !dbg !24
  %53 = extractelement <2 x float> %49, i64 1, !dbg !23
  %54 = fadd float %53, %52, !dbg !24
  %55 = extractelement <2 x float> %49, i64 0, !dbg !23
  %56 = fadd float %55, %54, !dbg !24
  %57 = bitcast float %56 to i32, !dbg !29
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 16, i32 31), !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = fadd float %56, %59, !dbg !24
  %61 = bitcast float %60 to i32, !dbg !29
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = fadd float %60, %63, !dbg !24
  %65 = bitcast float %64 to i32, !dbg !29
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 4, i32 31), !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = fadd float %64, %67, !dbg !24
  %69 = bitcast float %68 to i32, !dbg !29
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !29
  %71 = bitcast i32 %70 to float, !dbg !29
  %72 = fadd float %68, %71, !dbg !24
  %73 = bitcast float %72 to i32, !dbg !29
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = fadd float %72, %75, !dbg !24
  %77 = icmp eq i32 %12, 0, !dbg !29
  %78 = and i32 %13, 3, !dbg !29
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !29
  %80 = bitcast float %76 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 %77) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %81 = icmp slt i32 %11, 4, !dbg !29
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %83 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %82, i1 %81) #5, !dbg !29
  %84 = bitcast i32 %83 to float, !dbg !29
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !29
  %86 = bitcast i32 %85 to float, !dbg !29
  %87 = fadd float %84, %86, !dbg !24
  %88 = bitcast float %87 to i32, !dbg !29
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !29
  %90 = bitcast i32 %89 to float, !dbg !29
  %91 = fadd float %87, %90, !dbg !24
  %92 = and i32 %11, 3, !dbg !29
  %93 = icmp eq i32 %92, 0, !dbg !29
  %94 = and i1 %81, %93, !dbg !29
  %95 = bitcast float %91 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %95, i1 %94) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %96 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !29
  %97 = fadd float %96, 0.000000e+00, !dbg !30
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 5.120000e+02) #5, !dbg !34
  %99 = fsub float %50, %98, !dbg !23
  %100 = fsub float %51, %98, !dbg !23
  %101 = fsub float %53, %98, !dbg !23
  %102 = fsub float %55, %98, !dbg !23
  %103 = fmul float %99, %99, !dbg !35
  %104 = fmul float %100, %100, !dbg !35
  %105 = fmul float %101, %101, !dbg !35
  %106 = fmul float %102, %102, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %107 = fadd float %103, %104, !dbg !38
  %108 = fadd float %105, %107, !dbg !38
  %109 = fadd float %106, %108, !dbg !38
  %110 = bitcast float %109 to i32, !dbg !36
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 16, i32 31), !dbg !36
  %112 = bitcast i32 %111 to float, !dbg !36
  %113 = fadd float %109, %112, !dbg !38
  %114 = bitcast float %113 to i32, !dbg !36
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 8, i32 31), !dbg !36
  %116 = bitcast i32 %115 to float, !dbg !36
  %117 = fadd float %113, %116, !dbg !38
  %118 = bitcast float %117 to i32, !dbg !36
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !36
  %120 = bitcast i32 %119 to float, !dbg !36
  %121 = fadd float %117, %120, !dbg !38
  %122 = bitcast float %121 to i32, !dbg !36
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !36
  %124 = bitcast i32 %123 to float, !dbg !36
  %125 = fadd float %121, %124, !dbg !38
  %126 = bitcast float %125 to i32, !dbg !36
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !36
  %128 = bitcast i32 %127 to float, !dbg !36
  %129 = fadd float %125, %128, !dbg !38
  %130 = bitcast float %129 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %130, i1 %77) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %131 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %82, i1 %81) #5, !dbg !36
  %132 = bitcast i32 %131 to float, !dbg !36
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !36
  %134 = bitcast i32 %133 to float, !dbg !36
  %135 = fadd float %132, %134, !dbg !38
  %136 = bitcast float %135 to i32, !dbg !36
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !36
  %138 = bitcast i32 %137 to float, !dbg !36
  %139 = fadd float %135, %138, !dbg !38
  %140 = bitcast float %139 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %140, i1 %94) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %141 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %142 = fadd float %141, 0.000000e+00, !dbg !39
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 5.120000e+02) #5, !dbg !41
  %144 = fadd float %143, 0x3EE4F8B580000000, !dbg !42
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %145, 0, !dbg !43
  br i1 %.not.i, label %148, label %146, !dbg !43

146:                                              ; preds = %9
  %147 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

148:                                              ; preds = %9
  %149 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %146, %148
  %.0.i = phi float [ %147, %146 ], [ %149, %148 ], !dbg !43
  %150 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !21
  %151 = bitcast i32 %150 to float, !dbg !21
  %152 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !21
  %153 = bitcast i32 %152 to float, !dbg !21
  %154 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !21
  %155 = bitcast i32 %154 to float, !dbg !21
  %156 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !21
  %157 = bitcast i32 %156 to float, !dbg !21
  %158 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !19
  %159 = bitcast i32 %158 to float, !dbg !19
  %160 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !19
  %161 = bitcast i32 %160 to float, !dbg !19
  %162 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !19
  %163 = bitcast i32 %162 to float, !dbg !19
  %164 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !19
  %165 = bitcast i32 %164 to float, !dbg !19
  %166 = fmul float %99, %.0.i, !dbg !44
  %167 = fmul float %100, %.0.i, !dbg !44
  %168 = fmul float %101, %.0.i, !dbg !44
  %169 = fmul float %102, %.0.i, !dbg !44
  %170 = fmul float %166, %165, !dbg !45
  %171 = fmul float %167, %163, !dbg !45
  %172 = fmul float %168, %161, !dbg !45
  %173 = fmul float %169, %159, !dbg !45
  %174 = fadd float %170, %157, !dbg !46
  %175 = fadd float %171, %155, !dbg !46
  %176 = fadd float %172, %153, !dbg !46
  %177 = fadd float %173, %151, !dbg !46
  %178 = fsub float 0.000000e+00, %174, !dbg !47
  %179 = fsub float 0.000000e+00, %175, !dbg !47
  %180 = fsub float 0.000000e+00, %176, !dbg !47
  %181 = fsub float 0.000000e+00, %177, !dbg !47
  %182 = fmul float %178, 0x3FF7154760000000, !dbg !49
  %183 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %182) #5, !dbg !49
  %184 = fmul float %179, 0x3FF7154760000000, !dbg !49
  %185 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %184) #5, !dbg !49
  %186 = fmul float %180, 0x3FF7154760000000, !dbg !49
  %187 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %186) #5, !dbg !49
  %188 = fmul float %181, 0x3FF7154760000000, !dbg !49
  %189 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %188) #5, !dbg !49
  %190 = fadd float %183, 1.000000e+00, !dbg !50
  %191 = fadd float %185, 1.000000e+00, !dbg !50
  %192 = fadd float %187, 1.000000e+00, !dbg !50
  %193 = fadd float %189, 1.000000e+00, !dbg !50
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %190) #5, !dbg !51
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %191) #5, !dbg !51
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %192) #5, !dbg !51
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %193) #5, !dbg !51
  %198 = bitcast float %50 to i32, !dbg !52
  %199 = bitcast float %51 to i32, !dbg !52
  %200 = bitcast float %53 to i32, !dbg !52
  %201 = bitcast float %55 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %199, i32 %200, i32 %201, ptr addrspace(1) %19, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %202 = sext i32 %10 to i64, !dbg !54
  %203 = getelementptr float, ptr addrspace(1) %1, i64 %202, !dbg !54
  %urem = and i32 %11, 127, !dbg !55
  %204 = icmp eq i32 %urem, 0, !dbg !55
  %205 = bitcast float %.0.i to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %203, i1 %204) #5, !dbg !55
  %206 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !56
  %207 = bitcast float %194 to i32, !dbg !57
  %208 = bitcast float %195 to i32, !dbg !57
  %209 = bitcast float %196 to i32, !dbg !57
  %210 = bitcast float %197 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %208, i32 %209, i32 %210, ptr addrspace(1) %206, i1 true) #5, !dbg !57
  %211 = getelementptr float, ptr addrspace(1) %5, i64 %202, !dbg !58
  %212 = bitcast float %98 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %212, ptr addrspace(1) %211, i1 %204) #5, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvth7t3ljnwyljpowry5j3invlzo3hoibuwypgxnrinwsueprmxl.py", directory: "inductor_cache/vt")
!4 = !{ptr @triton_per_fused_convolution_native_layer_norm_sigmoid_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_layer_norm_sigmoid_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_layer_norm_sigmoid_3", linkageName: "triton_per_fused_convolution_native_layer_norm_sigmoid_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 43, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 48, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 31, scope: !7)
!19 = !DILocation(line: 34, column: 36, scope: !7)
!20 = !DILocation(line: 35, column: 31, scope: !7)
!21 = !DILocation(line: 35, column: 36, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 43, column: 19, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 39, column: 57, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 73, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 39, column: 44, scope: !7)
!34 = !DILocation(line: 42, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 46, column: 59, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !37)
!39 = !DILocation(line: 73, column: 15, scope: !31, inlinedAt: !40)
!40 = !DILocation(line: 46, column: 45, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 28, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 30, scope: !27, inlinedAt: !48)
!48 = !DILocation(line: 56, column: 23, scope: !7)
!49 = !DILocation(line: 47, column: 29, scope: !27, inlinedAt: !48)
!50 = !DILocation(line: 47, column: 20, scope: !27, inlinedAt: !48)
!51 = !DILocation(line: 47, column: 16, scope: !27, inlinedAt: !48)
!52 = !DILocation(line: 57, column: 48, scope: !7)
!53 = !DILocation(line: 58, column: 4, scope: !7)
!54 = !DILocation(line: 59, column: 28, scope: !7)
!55 = !DILocation(line: 59, column: 40, scope: !7)
!56 = !DILocation(line: 60, column: 25, scope: !7)
!57 = !DILocation(line: 60, column: 46, scope: !7)
!58 = !DILocation(line: 61, column: 25, scope: !7)
!59 = !DILocation(line: 61, column: 37, scope: !7)
!60 = !DILocation(line: 61, column: 4, scope: !7)
