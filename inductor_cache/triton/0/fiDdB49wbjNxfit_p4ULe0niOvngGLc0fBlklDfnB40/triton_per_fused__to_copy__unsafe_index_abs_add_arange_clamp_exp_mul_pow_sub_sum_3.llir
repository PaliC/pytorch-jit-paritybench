; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__to_copy__unsafe_index_abs_add_arange_clamp_exp_mul_pow_sub_sum_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 7, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = icmp slt i32 %13, 256, !dbg !14
  %16 = icmp slt i32 %14, 256, !dbg !14
  %17 = shl i32 %9, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %19 = sdiv i32 %14, 4, !dbg !16
  %20 = sdiv i32 %13, 4, !dbg !16
  %21 = sdiv i32 %14, 16, !dbg !17
  %.frozen = freeze i32 %13, !dbg !17
  %22 = sdiv i32 %.frozen, 16, !dbg !17
  %23 = mul i32 %22, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %23, !dbg !18
  %24 = sdiv i32 %13, 64, !dbg !19
  %25 = shl nsw i32 %.decomposed, 4, !dbg !20
  %26 = or disjoint i32 %25, %18, !dbg !21
  %27 = shl i32 %24, 8, !dbg !22
  %28 = add i32 %26, %27, !dbg !23
  %29 = sext i32 %28 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !25
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %34 = bitcast i32 %32 to float, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !26
  %37 = insertelement <4 x i32> %36, i32 %14, i64 1, !dbg !26
  %38 = insertelement <4 x i32> %37, i32 %20, i64 2, !dbg !26
  %39 = insertelement <4 x i32> %38, i32 %13, i64 3, !dbg !26
  %40 = srem <4 x i32> %39, splat (i32 4), !dbg !26
  %41 = tail call <4 x i32> @llvm.smax.v4i32(<4 x i32> %40, <4 x i32> zeroinitializer), !dbg !27
  %42 = uitofp nneg <4 x i32> %41 to <4 x float>, !dbg !27
  %43 = fptosi <4 x float> %42 to <4 x i32>, !dbg !31
  %44 = extractelement <4 x i32> %43, i64 0, !dbg !32
  %45 = tail call i32 @llvm.smin.i32(i32 %44, i32 2), !dbg !33
  %narrow = add nsw i32 %45, 1, !dbg !33
  %46 = sext i32 %narrow to i64, !dbg !33
  %47 = extractelement <4 x i32> %43, i64 2, !dbg !32
  %48 = tail call i32 @llvm.smin.i32(i32 %47, i32 2), !dbg !33
  %narrow1 = add nsw i32 %48, 1, !dbg !33
  %49 = sext i32 %narrow1 to i64, !dbg !33
  %50 = shl nsw i64 %46, 2, !dbg !35
  %51 = shl nsw i64 %49, 2, !dbg !35
  %52 = extractelement <4 x i32> %43, i64 1, !dbg !36
  %53 = sext i32 %52 to i64, !dbg !37
  %54 = extractelement <4 x i32> %43, i64 3, !dbg !36
  %55 = sext i32 %54 to i64, !dbg !37
  %56 = shl nsw i32 %21, 4, !dbg !38
  %57 = shl nsw i32 %22, 4, !dbg !38
  %58 = sext i32 %56 to i64, !dbg !39
  %59 = sext i32 %57 to i64, !dbg !39
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !40
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %53, !dbg !40
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %58, !dbg !40
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !40
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %55, !dbg !40
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %59, !dbg !40
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %16) #5, !dbg !41
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %15) #5, !dbg !41
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %15) #5, !dbg !41
  %69 = tail call i64 @llvm.smin.i64(i64 %53, i64 2), !dbg !42
  %70 = tail call i64 @llvm.smin.i64(i64 %55, i64 2), !dbg !42
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !44
  %72 = getelementptr i8, ptr addrspace(1) %71, i64 4, !dbg !44
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %50, !dbg !44
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %58, !dbg !44
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !44
  %76 = getelementptr i8, ptr addrspace(1) %75, i64 4, !dbg !44
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %51, !dbg !44
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %59, !dbg !44
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %16) #5, !dbg !45
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %15) #5, !dbg !45
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %15) #5, !dbg !45
  %82 = shl i32 %44, 2, !dbg !32
  %83 = shl i32 %47, 2, !dbg !32
  %84 = add i32 %56, %52, !dbg !36
  %85 = add i32 %84, %82, !dbg !46
  %86 = add i32 %57, %54, !dbg !36
  %87 = add i32 %86, %83, !dbg !46
  %88 = sext i32 %85 to i64, !dbg !47
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !47
  %90 = sext i32 %87 to i64, !dbg !47
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !47
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %16) #5, !dbg !48
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %15) #5, !dbg !48
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %15) #5, !dbg !48
  %95 = sext i32 %82 to i64, !dbg !49
  %96 = sext i32 %83 to i64, !dbg !49
  %97 = getelementptr float, ptr addrspace(1) %72, i64 %95, !dbg !50
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %58, !dbg !50
  %99 = getelementptr float, ptr addrspace(1) %76, i64 %96, !dbg !50
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %59, !dbg !50
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %16) #5, !dbg !51
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %15) #5, !dbg !51
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %15) #5, !dbg !51
  %104 = fmul float %34, 0x3FF7154760000000, !dbg !52
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #5, !dbg !52
  %106 = fmul float %35, 0x3FF7154760000000, !dbg !52
  %107 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %106) #5, !dbg !52
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i = icmp eq i32 %108, 0, !dbg !53
  %109 = tail call float @llvm.nvvm.add.rz.ftz.f(float %105, float 1.000000e+00) #5, !dbg !53
  %110 = tail call float @llvm.nvvm.add.rz.f(float %105, float 1.000000e+00) #5, !dbg !53
  %.01.i = select i1 %.not.i, float %110, float %109, !dbg !53
  %111 = bitcast float %.01.i to i32, !dbg !53
  %112 = add i32 %111, -1061158912, !dbg !53
  %113 = and i32 %112, -8388608, !dbg !53
  %114 = bitcast float %105 to i32, !dbg !53
  %115 = sub i32 %114, %113, !dbg !53
  %116 = bitcast i32 %115 to float, !dbg !53
  %117 = sub i32 1082130432, %113, !dbg !53
  %118 = bitcast i32 %117 to float, !dbg !53
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not14.i = icmp eq i32 %119, 0, !dbg !53
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 2.500000e-01, float %118, float -1.000000e+00) #5, !dbg !53
  %121 = tail call float @llvm.nvvm.fma.rn.f(float 2.500000e-01, float %118, float -1.000000e+00) #5, !dbg !53
  %.09.i = select i1 %.not14.i, float %121, float %120, !dbg !53
  %122 = fadd float %.09.i, %116, !dbg !53
  %123 = sitofp i32 %113 to float, !dbg !53
  %124 = fmul float %123, 0x3E80000000000000, !dbg !53
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not15.i = icmp eq i32 %125, 0, !dbg !53
  %126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFA737EF00000000, float %122, float 0x3FBB000240000000) #5, !dbg !53
  %127 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFA737EF00000000, float %122, float 0x3FBB000240000000) #5, !dbg !53
  %.012.i = select i1 %.not15.i, float %127, float %126, !dbg !53
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not16.i = icmp eq i32 %128, 0, !dbg !53
  %129 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %122, float 0xBFC0EF1C00000000) #5, !dbg !53
  %130 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %122, float 0xBFC0EF1C00000000) #5, !dbg !53
  %.010.i = select i1 %.not16.i, float %130, float %129, !dbg !53
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not17.i = icmp eq i32 %131, 0, !dbg !53
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %122, float 0x3FC28C8EA0000000) #5, !dbg !53
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %122, float 0x3FC28C8EA0000000) #5, !dbg !53
  %.06.i = select i1 %.not17.i, float %133, float %132, !dbg !53
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not18.i = icmp eq i32 %134, 0, !dbg !53
  %135 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %122, float 0xBFC54D1BA0000000) #5, !dbg !53
  %136 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %122, float 0xBFC54D1BA0000000) #5, !dbg !53
  %.02.i = select i1 %.not18.i, float %136, float %135, !dbg !53
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not19.i = icmp eq i32 %137, 0, !dbg !53
  %138 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %122, float 0x3FC995F3C0000000) #5, !dbg !53
  %139 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %122, float 0x3FC995F3C0000000) #5, !dbg !53
  %.0.i = select i1 %.not19.i, float %139, float %138, !dbg !53
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not20.i = icmp eq i32 %140, 0, !dbg !53
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %122, float 0xBFD0000840000000) #5, !dbg !53
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %122, float 0xBFD0000840000000) #5, !dbg !53
  %.011.i = select i1 %.not20.i, float %142, float %141, !dbg !53
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not21.i = icmp eq i32 %143, 0, !dbg !53
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %122, float 0x3FD5555CC0000000) #5, !dbg !53
  %145 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %122, float 0x3FD5555CC0000000) #5, !dbg !53
  %.08.i = select i1 %.not21.i, float %145, float %144, !dbg !53
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not22.i = icmp eq i32 %146, 0, !dbg !53
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %122, float -5.000000e-01) #5, !dbg !53
  %148 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %122, float -5.000000e-01) #5, !dbg !53
  %.07.i = select i1 %.not22.i, float %148, float %147, !dbg !53
  %149 = fmul float %122, %.07.i, !dbg !53
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not23.i = icmp eq i32 %150, 0, !dbg !53
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %149, float %122, float %122) #5, !dbg !53
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %149, float %122, float %122) #5, !dbg !53
  %.05.i = select i1 %.not23.i, float %152, float %151, !dbg !53
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not24.i = icmp eq i32 %153, 0, !dbg !53
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %124, float 0x3FE62E4300000000, float %.05.i) #5, !dbg !53
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %124, float 0x3FE62E4300000000, float %.05.i) #5, !dbg !53
  %.04.i = select i1 %.not24.i, float %155, float %154, !dbg !53
  %156 = icmp ugt i32 %114, 2139095039, !dbg !53
  br i1 %156, label %157, label %__nv_log1pf.exit, !dbg !53

157:                                              ; preds = %6
  %158 = icmp sgt i32 %114, -1082130432, !dbg !53
  br i1 %158, label %__nv_fmaf_rn.exit.i, label %162, !dbg !53

__nv_fmaf_rn.exit.i:                              ; preds = %157
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not25.i = icmp eq i32 %159, 0, !dbg !53
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %105, float 0x7FF0000000000000, float 0x7FF0000000000000) #5, !dbg !53
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %105, float 0x7FF0000000000000, float 0x7FF0000000000000) #5, !dbg !53
  %.03.i = select i1 %.not25.i, float %161, float %160, !dbg !53
  br label %162, !dbg !53

162:                                              ; preds = %__nv_fmaf_rn.exit.i, %157
  %r.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i ], [ %.04.i, %157 ], !dbg !53
  %163 = fcmp oeq float %105, 0.000000e+00, !dbg !53
  %r.1.i = select i1 %163, float -0.000000e+00, float %r.0.i, !dbg !53
  br label %__nv_log1pf.exit, !dbg !53

__nv_log1pf.exit:                                 ; preds = %6, %162
  %r.2.i = phi float [ %r.1.i, %162 ], [ %.04.i, %6 ], !dbg !53
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i2 = icmp eq i32 %164, 0, !dbg !53
  %165 = tail call float @llvm.nvvm.add.rz.ftz.f(float %107, float 1.000000e+00) #5, !dbg !53
  %166 = tail call float @llvm.nvvm.add.rz.f(float %107, float 1.000000e+00) #5, !dbg !53
  %.01.i3 = select i1 %.not.i2, float %166, float %165, !dbg !53
  %167 = bitcast float %.01.i3 to i32, !dbg !53
  %168 = add i32 %167, -1061158912, !dbg !53
  %169 = and i32 %168, -8388608, !dbg !53
  %170 = bitcast float %107 to i32, !dbg !53
  %171 = sub i32 %170, %169, !dbg !53
  %172 = bitcast i32 %171 to float, !dbg !53
  %173 = sub i32 1082130432, %169, !dbg !53
  %174 = bitcast i32 %173 to float, !dbg !53
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not14.i4 = icmp eq i32 %175, 0, !dbg !53
  %176 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 2.500000e-01, float %174, float -1.000000e+00) #5, !dbg !53
  %177 = tail call float @llvm.nvvm.fma.rn.f(float 2.500000e-01, float %174, float -1.000000e+00) #5, !dbg !53
  %.09.i5 = select i1 %.not14.i4, float %177, float %176, !dbg !53
  %178 = fadd float %.09.i5, %172, !dbg !53
  %179 = sitofp i32 %169 to float, !dbg !53
  %180 = fmul float %179, 0x3E80000000000000, !dbg !53
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not15.i6 = icmp eq i32 %181, 0, !dbg !53
  %182 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFA737EF00000000, float %178, float 0x3FBB000240000000) #5, !dbg !53
  %183 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFA737EF00000000, float %178, float 0x3FBB000240000000) #5, !dbg !53
  %.012.i7 = select i1 %.not15.i6, float %183, float %182, !dbg !53
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not16.i8 = icmp eq i32 %184, 0, !dbg !53
  %185 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i7, float %178, float 0xBFC0EF1C00000000) #5, !dbg !53
  %186 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i7, float %178, float 0xBFC0EF1C00000000) #5, !dbg !53
  %.010.i9 = select i1 %.not16.i8, float %186, float %185, !dbg !53
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not17.i10 = icmp eq i32 %187, 0, !dbg !53
  %188 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i9, float %178, float 0x3FC28C8EA0000000) #5, !dbg !53
  %189 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i9, float %178, float 0x3FC28C8EA0000000) #5, !dbg !53
  %.06.i11 = select i1 %.not17.i10, float %189, float %188, !dbg !53
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not18.i12 = icmp eq i32 %190, 0, !dbg !53
  %191 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i11, float %178, float 0xBFC54D1BA0000000) #5, !dbg !53
  %192 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i11, float %178, float 0xBFC54D1BA0000000) #5, !dbg !53
  %.02.i13 = select i1 %.not18.i12, float %192, float %191, !dbg !53
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not19.i14 = icmp eq i32 %193, 0, !dbg !53
  %194 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i13, float %178, float 0x3FC995F3C0000000) #5, !dbg !53
  %195 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i13, float %178, float 0x3FC995F3C0000000) #5, !dbg !53
  %.0.i15 = select i1 %.not19.i14, float %195, float %194, !dbg !53
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not20.i16 = icmp eq i32 %196, 0, !dbg !53
  %197 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i15, float %178, float 0xBFD0000840000000) #5, !dbg !53
  %198 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i15, float %178, float 0xBFD0000840000000) #5, !dbg !53
  %.011.i17 = select i1 %.not20.i16, float %198, float %197, !dbg !53
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not21.i18 = icmp eq i32 %199, 0, !dbg !53
  %200 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i17, float %178, float 0x3FD5555CC0000000) #5, !dbg !53
  %201 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i17, float %178, float 0x3FD5555CC0000000) #5, !dbg !53
  %.08.i19 = select i1 %.not21.i18, float %201, float %200, !dbg !53
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not22.i20 = icmp eq i32 %202, 0, !dbg !53
  %203 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i19, float %178, float -5.000000e-01) #5, !dbg !53
  %204 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i19, float %178, float -5.000000e-01) #5, !dbg !53
  %.07.i21 = select i1 %.not22.i20, float %204, float %203, !dbg !53
  %205 = fmul float %178, %.07.i21, !dbg !53
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not23.i22 = icmp eq i32 %206, 0, !dbg !53
  %207 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %205, float %178, float %178) #5, !dbg !53
  %208 = tail call float @llvm.nvvm.fma.rn.f(float %205, float %178, float %178) #5, !dbg !53
  %.05.i23 = select i1 %.not23.i22, float %208, float %207, !dbg !53
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not24.i24 = icmp eq i32 %209, 0, !dbg !53
  %210 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %180, float 0x3FE62E4300000000, float %.05.i23) #5, !dbg !53
  %211 = tail call float @llvm.nvvm.fma.rn.f(float %180, float 0x3FE62E4300000000, float %.05.i23) #5, !dbg !53
  %.04.i25 = select i1 %.not24.i24, float %211, float %210, !dbg !53
  %212 = icmp ugt i32 %170, 2139095039, !dbg !53
  br i1 %212, label %213, label %__nv_log1pf.exit32, !dbg !53

213:                                              ; preds = %__nv_log1pf.exit
  %214 = icmp sgt i32 %170, -1082130432, !dbg !53
  br i1 %214, label %__nv_fmaf_rn.exit.i29, label %218, !dbg !53

__nv_fmaf_rn.exit.i29:                            ; preds = %213
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not25.i30 = icmp eq i32 %215, 0, !dbg !53
  %216 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %107, float 0x7FF0000000000000, float 0x7FF0000000000000) #5, !dbg !53
  %217 = tail call float @llvm.nvvm.fma.rn.f(float %107, float 0x7FF0000000000000, float 0x7FF0000000000000) #5, !dbg !53
  %.03.i31 = select i1 %.not25.i30, float %217, float %216, !dbg !53
  br label %218, !dbg !53

218:                                              ; preds = %__nv_fmaf_rn.exit.i29, %213
  %r.0.i27 = phi float [ %.03.i31, %__nv_fmaf_rn.exit.i29 ], [ %.04.i25, %213 ], !dbg !53
  %219 = fcmp oeq float %107, 0.000000e+00, !dbg !53
  %r.1.i28 = select i1 %219, float -0.000000e+00, float %r.0.i27, !dbg !53
  br label %__nv_log1pf.exit32, !dbg !53

__nv_log1pf.exit32:                               ; preds = %__nv_log1pf.exit, %218
  %r.2.i26 = phi float [ %r.1.i28, %218 ], [ %.04.i25, %__nv_log1pf.exit ], !dbg !53
  %220 = fcmp ogt float %35, 2.000000e+01, !dbg !54
  %221 = fcmp ogt float %34, 2.000000e+01, !dbg !54
  %222 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !45
  %223 = insertelement <2 x i32> %222, i32 %103, i64 1, !dbg !45
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !45
  %225 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !41
  %226 = insertelement <2 x i32> %225, i32 %94, i64 1, !dbg !41
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !41
  %228 = sitofp <4 x i32> %43 to <4 x float>, !dbg !55
  %229 = fsub <2 x float> %224, %227, !dbg !56
  %230 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !45
  %231 = insertelement <2 x i32> %230, i32 %101, i64 1, !dbg !45
  %232 = bitcast <2 x i32> %231 to <2 x float>, !dbg !45
  %233 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !41
  %234 = insertelement <2 x i32> %233, i32 %92, i64 1, !dbg !41
  %235 = bitcast <2 x i32> %234 to <2 x float>, !dbg !41
  %236 = fsub <2 x float> %232, %235, !dbg !56
  %237 = fsub <4 x float> %42, %228, !dbg !57
  %238 = fcmp ogt <4 x float> %237, zeroinitializer, !dbg !58
  %239 = select <4 x i1> %238, <4 x float> %237, <4 x float> zeroinitializer, !dbg !60
  %240 = fcmp olt <4 x float> %239, splat (float 1.000000e+00), !dbg !61
  %241 = extractelement <4 x i1> %240, i64 3, !dbg !63
  %242 = extractelement <4 x float> %239, i64 3, !dbg !63
  %243 = select i1 %241, float %242, float 1.000000e+00, !dbg !63
  %244 = insertelement <2 x float> poison, float %243, i64 0, !dbg !65
  %245 = shufflevector <2 x float> %244, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %246 = fmul <2 x float> %229, %245, !dbg !65
  %247 = fadd <2 x float> %246, %227, !dbg !66
  %248 = extractelement <2 x float> %247, i64 0, !dbg !67
  %249 = extractelement <2 x float> %247, i64 1, !dbg !68
  %250 = fsub float %248, %249, !dbg !67
  %251 = extractelement <4 x i1> %240, i64 2, !dbg !69
  %252 = extractelement <4 x float> %239, i64 2, !dbg !69
  %253 = select i1 %251, float %252, float 1.000000e+00, !dbg !69
  %254 = fmul float %253, %250, !dbg !70
  %255 = fadd float %249, %254, !dbg !68
  %256 = extractelement <4 x i1> %240, i64 1, !dbg !63
  %257 = extractelement <4 x float> %239, i64 1, !dbg !63
  %258 = select i1 %256, float %257, float 1.000000e+00, !dbg !63
  %259 = insertelement <2 x float> poison, float %258, i64 0, !dbg !65
  %260 = shufflevector <2 x float> %259, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %261 = fmul <2 x float> %236, %260, !dbg !65
  %262 = fadd <2 x float> %261, %235, !dbg !66
  %263 = extractelement <2 x float> %262, i64 0, !dbg !67
  %264 = extractelement <2 x float> %262, i64 1, !dbg !68
  %265 = fsub float %263, %264, !dbg !67
  %266 = extractelement <4 x i1> %240, i64 0, !dbg !69
  %267 = extractelement <4 x float> %239, i64 0, !dbg !69
  %268 = select i1 %266, float %267, float 1.000000e+00, !dbg !69
  %269 = fmul float %268, %265, !dbg !70
  %270 = fadd float %264, %269, !dbg !68
  %271 = select i1 %221, float %34, float %r.2.i, !dbg !71
  %272 = select i1 %220, float %35, float %r.2.i26, !dbg !71
  %273 = fsub float %271, %255, !dbg !72
  %274 = fsub float %272, %255, !dbg !72
  %275 = fmul float %273, %273, !dbg !73
  %276 = fmul float %274, %274, !dbg !73
  %277 = fmul float %275, -3.000000e+02, !dbg !74
  %278 = fmul float %276, -3.000000e+02, !dbg !74
  %279 = fmul float %277, 0x3FF7154760000000, !dbg !75
  %280 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %279) #5, !dbg !75
  %281 = fmul float %278, 0x3FF7154760000000, !dbg !75
  %282 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %281) #5, !dbg !75
  %283 = fmul float %273, %280, !dbg !76
  %284 = fmul float %282, %274, !dbg !76
  %285 = fadd float %283, %284, !dbg !77
  %286 = select i1 %15, float %285, float 0.000000e+00, !dbg !77
  %287 = bitcast float %286 to i32, !dbg !82
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 4, i32 31), !dbg !82
  %289 = bitcast i32 %288 to float, !dbg !82
  %290 = fadd float %286, %289, !dbg !77
  %291 = bitcast float %290 to i32, !dbg !82
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 2, i32 31), !dbg !82
  %293 = bitcast i32 %292 to float, !dbg !82
  %294 = fadd float %290, %293, !dbg !77
  %295 = bitcast float %294 to i32, !dbg !82
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 1, i32 31), !dbg !82
  %297 = bitcast i32 %296 to float, !dbg !82
  %298 = fadd float %294, %297, !dbg !77
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !83
  %300 = bitcast float %298 to <1 x i32>, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !83
  %302 = load float, ptr addrspace(3) %301, align 4, !dbg !83
  %303 = fadd float %270, %302, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %304 = sext i32 %14 to i64, !dbg !85
  %305 = getelementptr float, ptr addrspace(1) %0, i64 %304, !dbg !85
  %306 = and i32 %9, 56, !dbg !86
  %307 = icmp eq i32 %306, 0, !dbg !86
  %308 = bitcast float %270 to i32, !dbg !86
  %309 = and i1 %307, %16, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %308, ptr addrspace(1) %305, i1 %309) #5, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %310 = getelementptr float, ptr addrspace(1) %1, i64 %304, !dbg !88
  %311 = bitcast float %303 to i32, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %311, ptr addrspace(1) %310, i1 %309) #5, !dbg !89
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rz.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <4 x i32> @llvm.smax.v4i32(<4 x i32>, <4 x i32>) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py", directory: "inductor_cache/mv")
!4 = !{ptr @triton_per_fused__to_copy__unsafe_index_abs_add_arange_clamp_exp_mul_pow_sub_sum_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy__unsafe_index_abs_add_arange_clamp_exp_mul_pow_sub_sum_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy__unsafe_index_abs_add_arange_clamp_exp_mul_pow_sub_sum_3", linkageName: "triton_per_fused__to_copy__unsafe_index_abs_add_arange_clamp_exp_mul_pow_sub_sum_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 29, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 19, scope: !7)
!20 = !DILocation(line: 36, column: 39, scope: !7)
!21 = !DILocation(line: 36, column: 36, scope: !7)
!22 = !DILocation(line: 36, column: 48, scope: !7)
!23 = !DILocation(line: 36, column: 44, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 53, scope: !7)
!26 = !DILocation(line: 29, column: 26, scope: !7)
!27 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 42, column: 40, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 64, column: 41, scope: !7)
!33 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 41, scope: !7)
!35 = !DILocation(line: 53, column: 41, scope: !7)
!36 = !DILocation(line: 64, column: 39, scope: !7)
!37 = !DILocation(line: 53, column: 39, scope: !7)
!38 = !DILocation(line: 53, column: 52, scope: !7)
!39 = !DILocation(line: 53, column: 49, scope: !7)
!40 = !DILocation(line: 53, column: 31, scope: !7)
!41 = !DILocation(line: 53, column: 57, scope: !7)
!42 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !43)
!43 = !DILocation(line: 55, column: 42, scope: !7)
!44 = !DILocation(line: 56, column: 31, scope: !7)
!45 = !DILocation(line: 56, column: 57, scope: !7)
!46 = !DILocation(line: 64, column: 48, scope: !7)
!47 = !DILocation(line: 64, column: 31, scope: !7)
!48 = !DILocation(line: 64, column: 56, scope: !7)
!49 = !DILocation(line: 65, column: 39, scope: !7)
!50 = !DILocation(line: 65, column: 31, scope: !7)
!51 = !DILocation(line: 65, column: 56, scope: !7)
!52 = !DILocation(line: 79, column: 24, scope: !7)
!53 = !DILocation(line: 80, column: 28, scope: !7)
!54 = !DILocation(line: 78, column: 20, scope: !7)
!55 = !DILocation(line: 70, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 71, column: 19, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !59)
!59 = !DILocation(line: 72, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !59)
!61 = !DILocation(line: 110, column: 15, scope: !28, inlinedAt: !62)
!62 = !DILocation(line: 73, column: 42, scope: !7)
!63 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !64)
!64 = !DILocation(line: 61, column: 42, scope: !7)
!65 = !DILocation(line: 62, column: 20, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 75, column: 20, scope: !7)
!69 = !DILocation(line: 113, column: 29, scope: !28, inlinedAt: !62)
!70 = !DILocation(line: 74, column: 20, scope: !7)
!71 = !DILocation(line: 82, column: 35, scope: !7)
!72 = !DILocation(line: 83, column: 20, scope: !7)
!73 = !DILocation(line: 85, column: 20, scope: !7)
!74 = !DILocation(line: 87, column: 20, scope: !7)
!75 = !DILocation(line: 88, column: 24, scope: !7)
!76 = !DILocation(line: 89, column: 20, scope: !7)
!77 = !DILocation(line: 256, column: 15, scope: !78, inlinedAt: !81)
!78 = distinct !DILexicalBlockFile(scope: !80, file: !79, discriminator: 0)
!79 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!80 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!81 = !DILocation(line: 92, column: 26, scope: !7)
!82 = !DILocation(line: 267, column: 36, scope: !80, inlinedAt: !81)
!83 = !DILocation(line: 93, column: 20, scope: !7)
!84 = !DILocation(line: 94, column: 4, scope: !7)
!85 = !DILocation(line: 95, column: 28, scope: !7)
!86 = !DILocation(line: 95, column: 40, scope: !7)
!87 = !DILocation(line: 96, column: 4, scope: !7)
!88 = !DILocation(line: 97, column: 28, scope: !7)
!89 = !DILocation(line: 97, column: 40, scope: !7)
!90 = !DILocation(line: 97, column: 4, scope: !7)
