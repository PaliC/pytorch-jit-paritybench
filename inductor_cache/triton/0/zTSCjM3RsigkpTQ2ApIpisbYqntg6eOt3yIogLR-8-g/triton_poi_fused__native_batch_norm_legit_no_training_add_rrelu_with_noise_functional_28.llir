; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 1, !dbg !12
  %15 = and i32 %14, 63, !dbg !12
  %16 = and i32 %13, 1, !dbg !12
  %17 = shl nuw nsw i32 %16, 2, !dbg !12
  %18 = shl i32 %13, 2, !dbg !12
  %19 = and i32 %18, 60, !dbg !12
  %20 = or disjoint i32 %12, %15, !dbg !13
  %21 = or disjoint i32 %12, %19, !dbg !13
  %22 = icmp slt i32 %20, 64, !dbg !14
  %23 = icmp slt i32 %21, 64, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 3, !dbg !16
  %26 = lshr i32 %13, 4, !dbg !17
  %27 = and i32 %26, 7, !dbg !17
  %28 = or disjoint i32 %25, %17, !dbg !18
  %29 = or disjoint i32 %25, %27, !dbg !18
  %30 = icmp slt i32 %28, 1024, !dbg !19
  %31 = icmp slt i32 %29, 1024, !dbg !19
  %.frozen = freeze i32 %21, !dbg !20
  %32 = sdiv i32 %.frozen, 16, !dbg !20
  %33 = mul i32 %32, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %33, !dbg !21
  %34 = shl i32 %20, 10, !dbg !22
  %35 = add i32 %28, %34, !dbg !23
  %36 = sext i32 %35 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = and i1 %22, %30, !dbg !25
  %39 = and i1 %23, %31, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %38) #4, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %45 = shl nuw nsw i32 %16, 8, !dbg !26
  %46 = or disjoint i32 %45, %15, !dbg !26
  %47 = and i32 %18, 508, !dbg !26
  %.idx = shl nuw nsw i32 %16, 6, !dbg !26
  %48 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !26
  %49 = getelementptr float, ptr addrspace(3) %48, i32 %46, !dbg !26
  %50 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 true) #4, !dbg !26
  %51 = or disjoint i32 %46, 64, !dbg !26
  %52 = lshr i32 %51, 4, !dbg !26
  %53 = and i32 %52, 20, !dbg !26
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %53, !dbg !26
  %55 = getelementptr float, ptr addrspace(3) %54, i32 %51, !dbg !26
  %56 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #4, !dbg !26
  %57 = or disjoint i32 %46, 128, !dbg !26
  %58 = lshr i32 %57, 4, !dbg !26
  %59 = and i32 %58, 24, !dbg !26
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !26
  %61 = getelementptr float, ptr addrspace(3) %60, i32 %57, !dbg !26
  %62 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #4, !dbg !26
  %63 = or disjoint i32 %46, 192, !dbg !26
  %64 = lshr i32 %63, 4, !dbg !26
  %65 = and i32 %64, 28, !dbg !26
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !26
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %63, !dbg !26
  %68 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %69 = lshr i32 %18, 4, !dbg !26
  %70 = and i32 %69, 28, !dbg !26
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70, !dbg !26
  %72 = getelementptr inbounds float, ptr addrspace(3) %71, i32 %47, !dbg !26
  %73 = load <4 x float>, ptr addrspace(3) %72, align 16, !dbg !26
  %74 = shl i32 %29, 4, !dbg !27
  %75 = add i32 %74, %.decomposed, !dbg !28
  %76 = shl i32 %32, 14, !dbg !29
  %77 = add i32 %75, %76, !dbg !30
  %78 = sext i32 %77 to i64, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !31
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %39) #4, !dbg !32
  %81 = sext i32 %.decomposed to i64, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !33
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %23) #4, !dbg !34
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !35
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %23) #4, !dbg !36
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !36
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !36
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !36
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !36
  %90 = bitcast i32 %86 to float, !dbg !36
  %91 = bitcast i32 %87 to float, !dbg !36
  %92 = bitcast i32 %88 to float, !dbg !36
  %93 = bitcast i32 %89 to float, !dbg !36
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !37
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %23) #4, !dbg !38
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %81, !dbg !39
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %23) #4, !dbg !40
  %98 = fadd float %90, 0x3EE4F8B580000000, !dbg !41
  %99 = fadd float %91, 0x3EE4F8B580000000, !dbg !41
  %100 = fadd float %92, 0x3EE4F8B580000000, !dbg !41
  %101 = fadd float %93, 0x3EE4F8B580000000, !dbg !41
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %102, 0, !dbg !42
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i = icmp eq i32 %103, 0, !dbg !42
  br i1 %.not.i, label %109, label %104, !dbg !42

104:                                              ; preds = %10
  br i1 %.not1.i, label %107, label %105, !dbg !42

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

109:                                              ; preds = %10
  br i1 %.not1.i, label %112, label %110, !dbg !42

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %105, %107, %110, %112
  %.0.i = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !42
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i6 = icmp eq i32 %114, 0, !dbg !42
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i9 = icmp eq i32 %115, 0, !dbg !42
  br i1 %.not.i6, label %121, label %116, !dbg !42

116:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %119, label %117, !dbg !42

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #4, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #4, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

121:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %124, label %122, !dbg !42

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #4, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #4, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

__nv_sqrtf.exit10:                                ; preds = %117, %119, %122, %124
  %.0.i8 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !42
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i11 = icmp eq i32 %126, 0, !dbg !42
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i14 = icmp eq i32 %127, 0, !dbg !42
  br i1 %.not.i11, label %133, label %128, !dbg !42

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !42

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

133:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %136, label %134, !dbg !42

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %129, %131, %134, %136
  %.0.i13 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !42
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i16 = icmp eq i32 %138, 0, !dbg !42
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i19 = icmp eq i32 %139, 0, !dbg !42
  br i1 %.not.i16, label %145, label %140, !dbg !42

140:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %143, label %141, !dbg !42

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #4, !dbg !42
  br label %__nv_sqrtf.exit20, !dbg !42

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #4, !dbg !42
  br label %__nv_sqrtf.exit20, !dbg !42

145:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %148, label %146, !dbg !42

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #4, !dbg !42
  br label %__nv_sqrtf.exit20, !dbg !42

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #4, !dbg !42
  br label %__nv_sqrtf.exit20, !dbg !42

__nv_sqrtf.exit20:                                ; preds = %141, %143, %146, %148
  %.0.i18 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !42
  %150 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !32
  %151 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !34
  %152 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !32
  %153 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !34
  %154 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !32
  %155 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !32
  %157 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !40
  %159 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !40
  %160 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !40
  %161 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !40
  %162 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !38
  %163 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !38
  %164 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !38
  %165 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !38
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !43
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !43
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !43
  %170 = getelementptr i1, ptr addrspace(1) %6, i64 %78, !dbg !44
  %171 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !32
  %172 = insertelement <4 x i32> %171, i32 %154, i64 1, !dbg !32
  %173 = insertelement <4 x i32> %172, i32 %152, i64 2, !dbg !32
  %174 = insertelement <4 x i32> %173, i32 %150, i64 3, !dbg !32
  %175 = bitcast <4 x i32> %174 to <4 x float>, !dbg !32
  %176 = insertelement <4 x i32> poison, i32 %157, i64 0, !dbg !34
  %177 = insertelement <4 x i32> %176, i32 %155, i64 1, !dbg !34
  %178 = insertelement <4 x i32> %177, i32 %153, i64 2, !dbg !34
  %179 = insertelement <4 x i32> %178, i32 %151, i64 3, !dbg !34
  %180 = bitcast <4 x i32> %179 to <4 x float>, !dbg !34
  %181 = fsub <4 x float> %175, %180, !dbg !45
  %182 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !40
  %183 = insertelement <4 x i32> %182, i32 %160, i64 1, !dbg !40
  %184 = insertelement <4 x i32> %183, i32 %159, i64 2, !dbg !40
  %185 = insertelement <4 x i32> %184, i32 %158, i64 3, !dbg !40
  %186 = bitcast <4 x i32> %185 to <4 x float>, !dbg !40
  %187 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !38
  %188 = insertelement <4 x i32> %187, i32 %164, i64 1, !dbg !38
  %189 = insertelement <4 x i32> %188, i32 %163, i64 2, !dbg !38
  %190 = insertelement <4 x i32> %189, i32 %162, i64 3, !dbg !38
  %191 = bitcast <4 x i32> %190 to <4 x float>, !dbg !38
  %192 = insertelement <4 x float> poison, float %166, i64 0, !dbg !46
  %193 = insertelement <4 x float> %192, float %167, i64 1, !dbg !46
  %194 = insertelement <4 x float> %193, float %168, i64 2, !dbg !46
  %195 = insertelement <4 x float> %194, float %169, i64 3, !dbg !46
  %196 = fmul <4 x float> %181, %195, !dbg !46
  %197 = fmul <4 x float> %196, %191, !dbg !47
  %198 = fadd <4 x float> %197, %186, !dbg !48
  %199 = fadd <4 x float> %73, %198, !dbg !49
  %200 = fcmp ogt <4 x float> %199, zeroinitializer, !dbg !50
  %201 = extractelement <4 x float> %199, i64 0, !dbg !51
  %202 = fmul float %201, 0x3FCD555560000000, !dbg !52
  %203 = extractelement <4 x float> %199, i64 1, !dbg !51
  %204 = fmul float %203, 0x3FCD555560000000, !dbg !52
  %205 = extractelement <4 x float> %199, i64 2, !dbg !51
  %206 = fmul float %205, 0x3FCD555560000000, !dbg !52
  %207 = extractelement <4 x float> %199, i64 3, !dbg !51
  %208 = fmul float %207, 0x3FCD555560000000, !dbg !52
  %209 = extractelement <4 x i1> %200, i64 0, !dbg !51
  %210 = select i1 %209, float %201, float %202, !dbg !51
  %211 = extractelement <4 x i1> %200, i64 1, !dbg !51
  %212 = select i1 %211, float %203, float %204, !dbg !51
  %213 = extractelement <4 x i1> %200, i64 2, !dbg !51
  %214 = select i1 %213, float %205, float %206, !dbg !51
  %215 = extractelement <4 x i1> %200, i64 3, !dbg !51
  %216 = select i1 %215, float %207, float %208, !dbg !51
  %217 = zext <4 x i1> %200 to <4 x i8>, !dbg !53
  %218 = bitcast <4 x i8> %217 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %218, ptr addrspace(1) %170, i1 %39) #4, !dbg !53
  %219 = getelementptr float, ptr addrspace(1) %7, i64 %78, !dbg !54
  %220 = bitcast float %210 to i32, !dbg !55
  %221 = bitcast float %212 to i32, !dbg !55
  %222 = bitcast float %214 to i32, !dbg !55
  %223 = bitcast float %216 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %220, i32 %221, i32 %222, i32 %223, ptr addrspace(1) %219, i1 %39) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfzqgjunbhmfgdemy2glwwzqcvvwx2zhzpz67cd5cd3cig4h2vci.py", directory: "inductor_cache/fz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 40, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 53, scope: !7)
!26 = !DILocation(line: 32, column: 45, scope: !7)
!27 = !DILocation(line: 33, column: 38, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 49, scope: !7)
!30 = !DILocation(line: 33, column: 43, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 54, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 26, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 55, column: 25, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 19, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 19, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 55, column: 56, scope: !7)
!54 = !DILocation(line: 56, column: 25, scope: !7)
!55 = !DILocation(line: 56, column: 56, scope: !7)
!56 = !DILocation(line: 56, column: 4, scope: !7)
