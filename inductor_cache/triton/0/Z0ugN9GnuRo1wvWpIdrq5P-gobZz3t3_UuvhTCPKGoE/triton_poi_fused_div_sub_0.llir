; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_div_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %11, 6, !dbg !12
  %12 = and i32 %.lobit1, 3, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %10, 1, !dbg !13
  %18 = or disjoint i32 %10, 2, !dbg !13
  %19 = or disjoint i32 %10, 3, !dbg !13
  %20 = or disjoint i32 %10, 4, !dbg !13
  %21 = or disjoint i32 %10, 5, !dbg !13
  %22 = or disjoint i32 %10, 6, !dbg !13
  %23 = or disjoint i32 %10, 7, !dbg !13
  %24 = or disjoint i32 %10, 8, !dbg !13
  %25 = or disjoint i32 %10, 9, !dbg !13
  %26 = or disjoint i32 %10, 10, !dbg !13
  %27 = or disjoint i32 %10, 11, !dbg !13
  %28 = or disjoint i32 %10, 12, !dbg !13
  %29 = or disjoint i32 %10, 13, !dbg !13
  %30 = or disjoint i32 %10, 14, !dbg !13
  %31 = or disjoint i32 %10, 15, !dbg !13
  %32 = icmp slt i32 %13, 12, !dbg !14
  %33 = icmp slt i32 %14, 12, !dbg !14
  %34 = icmp slt i32 %15, 12, !dbg !14
  %35 = icmp slt i32 %10, 0, !dbg !14
  %36 = icmp slt i32 %10, 12, !dbg !14
  %37 = icmp slt i32 %17, 12, !dbg !14
  %38 = icmp slt i32 %18, 12, !dbg !14
  %39 = icmp slt i32 %19, 12, !dbg !14
  %40 = icmp slt i32 %20, 12, !dbg !14
  %41 = icmp slt i32 %21, 12, !dbg !14
  %42 = icmp slt i32 %22, 12, !dbg !14
  %43 = icmp slt i32 %23, 12, !dbg !14
  %44 = icmp slt i32 %24, 12, !dbg !14
  %45 = icmp slt i32 %25, 12, !dbg !14
  %46 = icmp slt i32 %26, 12, !dbg !14
  %47 = icmp slt i32 %27, 12, !dbg !14
  %48 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %49 = shl i32 %48, 8, !dbg !16
  %50 = shl i32 %11, 2, !dbg !17
  %51 = and i32 %50, 252, !dbg !17
  %52 = and i32 %11, 255, !dbg !17
  %53 = or disjoint i32 %49, %51, !dbg !18
  %54 = or disjoint i32 %49, %52, !dbg !18
  %55 = srem i32 %13, 3, !dbg !19
  %56 = srem i32 %14, 3, !dbg !19
  %57 = srem i32 %15, 3, !dbg !19
  %58 = srem i32 %16, 3, !dbg !19
  %.frozen = freeze i32 %10, !dbg !20
  %59 = sdiv i32 %.frozen, 3, !dbg !20
  %60 = mul i32 %59, 3, !dbg !19
  %.decomposed = sub i32 %.frozen, %60, !dbg !19
  %.frozen2 = freeze i32 %17, !dbg !20
  %61 = sdiv i32 %.frozen2, 3, !dbg !20
  %62 = mul i32 %61, 3, !dbg !19
  %.decomposed3 = sub i32 %.frozen2, %62, !dbg !19
  %.frozen4 = freeze i32 %18, !dbg !20
  %63 = sdiv i32 %.frozen4, 3, !dbg !20
  %64 = mul i32 %63, 3, !dbg !19
  %.decomposed5 = sub i32 %.frozen4, %64, !dbg !19
  %.frozen6 = freeze i32 %19, !dbg !20
  %65 = sdiv i32 %.frozen6, 3, !dbg !20
  %66 = mul i32 %65, 3, !dbg !19
  %.decomposed7 = sub i32 %.frozen6, %66, !dbg !19
  %.frozen8 = freeze i32 %20, !dbg !20
  %67 = sdiv i32 %.frozen8, 3, !dbg !20
  %68 = mul i32 %67, 3, !dbg !19
  %.decomposed9 = sub i32 %.frozen8, %68, !dbg !19
  %.frozen10 = freeze i32 %21, !dbg !20
  %69 = sdiv i32 %.frozen10, 3, !dbg !20
  %70 = mul i32 %69, 3, !dbg !19
  %.decomposed11 = sub i32 %.frozen10, %70, !dbg !19
  %.frozen12 = freeze i32 %22, !dbg !20
  %71 = sdiv i32 %.frozen12, 3, !dbg !20
  %72 = mul i32 %71, 3, !dbg !19
  %.decomposed13 = sub i32 %.frozen12, %72, !dbg !19
  %.frozen14 = freeze i32 %23, !dbg !20
  %73 = sdiv i32 %.frozen14, 3, !dbg !20
  %74 = mul i32 %73, 3, !dbg !19
  %.decomposed15 = sub i32 %.frozen14, %74, !dbg !19
  %.frozen16 = freeze i32 %24, !dbg !20
  %75 = sdiv i32 %.frozen16, 3, !dbg !20
  %76 = mul i32 %75, 3, !dbg !19
  %.decomposed17 = sub i32 %.frozen16, %76, !dbg !19
  %.frozen18 = freeze i32 %25, !dbg !20
  %77 = sdiv i32 %.frozen18, 3, !dbg !20
  %78 = mul i32 %77, 3, !dbg !19
  %.decomposed19 = sub i32 %.frozen18, %78, !dbg !19
  %.frozen20 = freeze i32 %26, !dbg !20
  %79 = sdiv i32 %.frozen20, 3, !dbg !20
  %80 = mul i32 %79, 3, !dbg !19
  %.decomposed21 = sub i32 %.frozen20, %80, !dbg !19
  %.frozen22 = freeze i32 %27, !dbg !20
  %81 = sdiv i32 %.frozen22, 3, !dbg !20
  %82 = mul i32 %81, 3, !dbg !19
  %.decomposed23 = sub i32 %.frozen22, %82, !dbg !19
  %.frozen24 = freeze i32 %28, !dbg !20
  %83 = sdiv i32 %.frozen24, 3, !dbg !20
  %84 = mul i32 %83, 3, !dbg !19
  %.decomposed25 = sub i32 %.frozen24, %84, !dbg !19
  %.frozen26 = freeze i32 %29, !dbg !20
  %85 = sdiv i32 %.frozen26, 3, !dbg !20
  %86 = mul i32 %85, 3, !dbg !19
  %.decomposed27 = sub i32 %.frozen26, %86, !dbg !19
  %.frozen28 = freeze i32 %30, !dbg !20
  %87 = sdiv i32 %.frozen28, 3, !dbg !20
  %88 = mul i32 %87, 3, !dbg !19
  %.decomposed29 = sub i32 %.frozen28, %88, !dbg !19
  %.frozen30 = freeze i32 %31, !dbg !20
  %89 = sdiv i32 %.frozen30, 3, !dbg !20
  %90 = mul i32 %89, 3, !dbg !19
  %.decomposed31 = sub i32 %.frozen30, %90, !dbg !19
  %91 = shl i32 %13, 18, !dbg !21
  %92 = shl i32 %14, 18, !dbg !21
  %93 = shl i32 %15, 18, !dbg !21
  %94 = shl i32 %16, 18, !dbg !21
  %95 = add i32 %53, %91, !dbg !22
  %96 = add i32 %53, %92, !dbg !22
  %97 = add i32 %53, %93, !dbg !22
  %98 = add i32 %53, %94, !dbg !22
  %99 = sext i32 %95 to i64, !dbg !23
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !23
  %101 = sext i32 %96 to i64, !dbg !23
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !23
  %103 = sext i32 %97 to i64, !dbg !23
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !23
  %105 = sext i32 %98 to i64, !dbg !23
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !23
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %32) #2, !dbg !24
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !24
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !24
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !24
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !24
  %112 = bitcast i32 %108 to float, !dbg !24
  %113 = bitcast i32 %109 to float, !dbg !24
  %114 = bitcast i32 %110 to float, !dbg !24
  %115 = bitcast i32 %111 to float, !dbg !24
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %33) #2, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !24
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !24
  %121 = bitcast i32 %117 to float, !dbg !24
  %122 = bitcast i32 %118 to float, !dbg !24
  %123 = bitcast i32 %119 to float, !dbg !24
  %124 = bitcast i32 %120 to float, !dbg !24
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %34) #2, !dbg !24
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !24
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !24
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !24
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !24
  %130 = bitcast i32 %126 to float, !dbg !24
  %131 = bitcast i32 %127 to float, !dbg !24
  %132 = bitcast i32 %128 to float, !dbg !24
  %133 = bitcast i32 %129 to float, !dbg !24
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %35) #2, !dbg !24
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !24
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !24
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !24
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !24
  %139 = bitcast i32 %135 to float, !dbg !24
  %140 = bitcast i32 %136 to float, !dbg !24
  %141 = bitcast i32 %137 to float, !dbg !24
  %142 = bitcast i32 %138 to float, !dbg !24
  %143 = sext i32 %55 to i64, !dbg !25
  %144 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !25
  %145 = sext i32 %56 to i64, !dbg !25
  %146 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !25
  %147 = sext i32 %57 to i64, !dbg !25
  %148 = getelementptr float, ptr addrspace(1) %1, i64 %147, !dbg !25
  %149 = sext i32 %58 to i64, !dbg !25
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !25
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %32) #2, !dbg !26
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %32) #2, !dbg !26
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %32) #2, !dbg !26
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %32) #2, !dbg !26
  %155 = bitcast i32 %154 to float, !dbg !26
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %33) #2, !dbg !26
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %33) #2, !dbg !26
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %33) #2, !dbg !26
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %33) #2, !dbg !26
  %160 = bitcast i32 %159 to float, !dbg !26
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %34) #2, !dbg !26
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %34) #2, !dbg !26
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %34) #2, !dbg !26
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %34) #2, !dbg !26
  %165 = bitcast i32 %164 to float, !dbg !26
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %35) #2, !dbg !26
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %35) #2, !dbg !26
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %35) #2, !dbg !26
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %35) #2, !dbg !26
  %170 = bitcast i32 %169 to float, !dbg !26
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !27
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !27
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %147, !dbg !27
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %149, !dbg !27
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %32) #2, !dbg !28
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %32) #2, !dbg !28
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %32) #2, !dbg !28
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %32) #2, !dbg !28
  %179 = bitcast i32 %178 to float, !dbg !28
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %33) #2, !dbg !28
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %33) #2, !dbg !28
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %33) #2, !dbg !28
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %33) #2, !dbg !28
  %184 = bitcast i32 %183 to float, !dbg !28
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %34) #2, !dbg !28
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %34) #2, !dbg !28
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %34) #2, !dbg !28
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %34) #2, !dbg !28
  %189 = bitcast i32 %188 to float, !dbg !28
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %35) #2, !dbg !28
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %35) #2, !dbg !28
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %35) #2, !dbg !28
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %35) #2, !dbg !28
  %194 = bitcast i32 %193 to float, !dbg !28
  %195 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !29
  %196 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !29
  %197 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !29
  %198 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !29
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %195, i1 %32) #2, !dbg !30
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !30
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !30
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !30
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !30
  %204 = bitcast i32 %200 to float, !dbg !30
  %205 = bitcast i32 %201 to float, !dbg !30
  %206 = bitcast i32 %202 to float, !dbg !30
  %207 = bitcast i32 %203 to float, !dbg !30
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %196, i1 %33) #2, !dbg !30
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !30
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !30
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !30
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !30
  %213 = bitcast i32 %209 to float, !dbg !30
  %214 = bitcast i32 %210 to float, !dbg !30
  %215 = bitcast i32 %211 to float, !dbg !30
  %216 = bitcast i32 %212 to float, !dbg !30
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %197, i1 %34) #2, !dbg !30
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !30
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !30
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !30
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !30
  %222 = bitcast i32 %218 to float, !dbg !30
  %223 = bitcast i32 %219 to float, !dbg !30
  %224 = bitcast i32 %220 to float, !dbg !30
  %225 = bitcast i32 %221 to float, !dbg !30
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %198, i1 %35) #2, !dbg !30
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !30
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !30
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !30
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !30
  %231 = bitcast i32 %227 to float, !dbg !30
  %232 = bitcast i32 %228 to float, !dbg !30
  %233 = bitcast i32 %229 to float, !dbg !30
  %234 = bitcast i32 %230 to float, !dbg !30
  %235 = fsub float %112, %155, !dbg !31
  %236 = fsub float %113, %155, !dbg !31
  %237 = fsub float %114, %155, !dbg !31
  %238 = fsub float %115, %155, !dbg !31
  %239 = fsub float %121, %160, !dbg !31
  %240 = fsub float %122, %160, !dbg !31
  %241 = fsub float %123, %160, !dbg !31
  %242 = fsub float %124, %160, !dbg !31
  %243 = fsub float %130, %165, !dbg !31
  %244 = fsub float %131, %165, !dbg !31
  %245 = fsub float %132, %165, !dbg !31
  %246 = fsub float %133, %165, !dbg !31
  %247 = fsub float %139, %170, !dbg !31
  %248 = fsub float %140, %170, !dbg !31
  %249 = fsub float %141, %170, !dbg !31
  %250 = fsub float %142, %170, !dbg !31
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %179) #2, !dbg !32
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %236, float %179) #2, !dbg !32
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %237, float %179) #2, !dbg !32
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %179) #2, !dbg !32
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float %184) #2, !dbg !32
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float %184) #2, !dbg !32
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float %184) #2, !dbg !32
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %184) #2, !dbg !32
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %189) #2, !dbg !32
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %189) #2, !dbg !32
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float %189) #2, !dbg !32
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %189) #2, !dbg !32
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %194) #2, !dbg !32
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %194) #2, !dbg !32
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float %194) #2, !dbg !32
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float %194) #2, !dbg !32
  %267 = fsub float %204, %155, !dbg !33
  %268 = fsub float %205, %155, !dbg !33
  %269 = fsub float %206, %155, !dbg !33
  %270 = fsub float %207, %155, !dbg !33
  %271 = fsub float %213, %160, !dbg !33
  %272 = fsub float %214, %160, !dbg !33
  %273 = fsub float %215, %160, !dbg !33
  %274 = fsub float %216, %160, !dbg !33
  %275 = fsub float %222, %165, !dbg !33
  %276 = fsub float %223, %165, !dbg !33
  %277 = fsub float %224, %165, !dbg !33
  %278 = fsub float %225, %165, !dbg !33
  %279 = fsub float %231, %170, !dbg !33
  %280 = fsub float %232, %170, !dbg !33
  %281 = fsub float %233, %170, !dbg !33
  %282 = fsub float %234, %170, !dbg !33
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %179) #2, !dbg !34
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %179) #2, !dbg !34
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %269, float %179) #2, !dbg !34
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float %179) #2, !dbg !34
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %271, float %184) #2, !dbg !34
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %272, float %184) #2, !dbg !34
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %273, float %184) #2, !dbg !34
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %274, float %184) #2, !dbg !34
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %275, float %189) #2, !dbg !34
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float %189) #2, !dbg !34
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %277, float %189) #2, !dbg !34
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %278, float %189) #2, !dbg !34
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %279, float %194) #2, !dbg !34
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %280, float %194) #2, !dbg !34
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %281, float %194) #2, !dbg !34
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %282, float %194) #2, !dbg !34
  %299 = mul i32 %54, 3, !dbg !35
  %300 = add i32 %299, %.decomposed3, !dbg !36
  %301 = add i32 %299, %.decomposed5, !dbg !36
  %302 = add i32 %299, %.decomposed7, !dbg !36
  %303 = add i32 %299, %.decomposed9, !dbg !36
  %304 = add i32 %299, %.decomposed11, !dbg !36
  %305 = add i32 %299, %.decomposed13, !dbg !36
  %306 = add i32 %299, %.decomposed15, !dbg !36
  %307 = add i32 %299, %.decomposed17, !dbg !36
  %308 = add i32 %299, %.decomposed19, !dbg !36
  %309 = add i32 %299, %.decomposed21, !dbg !36
  %310 = add i32 %299, %.decomposed23, !dbg !36
  %311 = add i32 %299, %.decomposed25, !dbg !36
  %312 = add i32 %299, %.decomposed27, !dbg !36
  %313 = add i32 %299, %.decomposed29, !dbg !36
  %314 = add i32 %299, %.decomposed31, !dbg !36
  %315 = mul i32 %59, 786432, !dbg !37
  %316 = mul i32 %61, 786432, !dbg !37
  %317 = mul i32 %63, 786432, !dbg !37
  %318 = mul i32 %65, 786432, !dbg !37
  %319 = mul i32 %67, 786432, !dbg !37
  %320 = mul i32 %69, 786432, !dbg !37
  %321 = mul i32 %71, 786432, !dbg !37
  %322 = mul i32 %73, 786432, !dbg !37
  %323 = mul i32 %75, 786432, !dbg !37
  %324 = mul i32 %77, 786432, !dbg !37
  %325 = mul i32 %79, 786432, !dbg !37
  %326 = mul i32 %81, 786432, !dbg !37
  %327 = mul i32 %83, 786432, !dbg !37
  %328 = mul i32 %85, 786432, !dbg !37
  %329 = mul i32 %87, 786432, !dbg !37
  %330 = mul i32 %89, 786432, !dbg !37
  %331 = add i32 %315, %.decomposed, !dbg !36
  %332 = add i32 %331, %299, !dbg !38
  %333 = add i32 %300, %316, !dbg !38
  %334 = add i32 %301, %317, !dbg !38
  %335 = add i32 %302, %318, !dbg !38
  %336 = add i32 %303, %319, !dbg !38
  %337 = add i32 %304, %320, !dbg !38
  %338 = add i32 %305, %321, !dbg !38
  %339 = add i32 %306, %322, !dbg !38
  %340 = add i32 %307, %323, !dbg !38
  %341 = add i32 %308, %324, !dbg !38
  %342 = add i32 %309, %325, !dbg !38
  %343 = add i32 %310, %326, !dbg !38
  %344 = add i32 %311, %327, !dbg !38
  %345 = add i32 %312, %328, !dbg !38
  %346 = add i32 %313, %329, !dbg !38
  %347 = add i32 %314, %330, !dbg !38
  %348 = sext i32 %332 to i64, !dbg !39
  %349 = getelementptr float, ptr addrspace(1) %4, i64 %348, !dbg !39
  %350 = sext i32 %333 to i64, !dbg !39
  %351 = getelementptr float, ptr addrspace(1) %4, i64 %350, !dbg !39
  %352 = sext i32 %334 to i64, !dbg !39
  %353 = getelementptr float, ptr addrspace(1) %4, i64 %352, !dbg !39
  %354 = sext i32 %335 to i64, !dbg !39
  %355 = getelementptr float, ptr addrspace(1) %4, i64 %354, !dbg !39
  %356 = sext i32 %336 to i64, !dbg !39
  %357 = getelementptr float, ptr addrspace(1) %4, i64 %356, !dbg !39
  %358 = sext i32 %337 to i64, !dbg !39
  %359 = getelementptr float, ptr addrspace(1) %4, i64 %358, !dbg !39
  %360 = sext i32 %338 to i64, !dbg !39
  %361 = getelementptr float, ptr addrspace(1) %4, i64 %360, !dbg !39
  %362 = sext i32 %339 to i64, !dbg !39
  %363 = getelementptr float, ptr addrspace(1) %4, i64 %362, !dbg !39
  %364 = sext i32 %340 to i64, !dbg !39
  %365 = getelementptr float, ptr addrspace(1) %4, i64 %364, !dbg !39
  %366 = sext i32 %341 to i64, !dbg !39
  %367 = getelementptr float, ptr addrspace(1) %4, i64 %366, !dbg !39
  %368 = sext i32 %342 to i64, !dbg !39
  %369 = getelementptr float, ptr addrspace(1) %4, i64 %368, !dbg !39
  %370 = sext i32 %343 to i64, !dbg !39
  %371 = getelementptr float, ptr addrspace(1) %4, i64 %370, !dbg !39
  %372 = sext i32 %344 to i64, !dbg !39
  %373 = getelementptr float, ptr addrspace(1) %4, i64 %372, !dbg !39
  %374 = sext i32 %345 to i64, !dbg !39
  %375 = getelementptr float, ptr addrspace(1) %4, i64 %374, !dbg !39
  %376 = sext i32 %346 to i64, !dbg !39
  %377 = getelementptr float, ptr addrspace(1) %4, i64 %376, !dbg !39
  %378 = sext i32 %347 to i64, !dbg !39
  %379 = getelementptr float, ptr addrspace(1) %4, i64 %378, !dbg !39
  %380 = and i32 %50, 768, !dbg !40
  %381 = and i32 %50, 1020, !dbg !40
  %382 = lshr exact i32 %380, 8, !dbg !40
  %383 = or disjoint i32 %382, %381, !dbg !40
  %384 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %383, !dbg !40
  %385 = bitcast float %251 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #2, !dbg !40
  %386 = or disjoint i32 %381, 1, !dbg !40
  %387 = lshr exact i32 %380, 6, !dbg !40
  %388 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %387, !dbg !40
  %389 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %386, !dbg !40
  %390 = bitcast float %252 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #2, !dbg !40
  %391 = or disjoint i32 %381, 2, !dbg !40
  %392 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %391, !dbg !40
  %393 = bitcast float %253 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #2, !dbg !40
  %394 = or disjoint i32 %381, 3, !dbg !40
  %395 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %394, !dbg !40
  %396 = bitcast float %254 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %396, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %52, !dbg !40
  %398 = load i32, ptr addrspace(3) %397, align 4, !dbg !40
  %399 = getelementptr inbounds i8, ptr addrspace(3) %397, i32 1028, !dbg !40
  %400 = load i32, ptr addrspace(3) %399, align 4, !dbg !40
  %401 = getelementptr inbounds i8, ptr addrspace(3) %397, i32 2056, !dbg !40
  %402 = load i32, ptr addrspace(3) %401, align 4, !dbg !40
  %403 = getelementptr inbounds i8, ptr addrspace(3) %397, i32 3084, !dbg !40
  %404 = load i32, ptr addrspace(3) %403, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %405 = bitcast float %255 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %405, i1 true) #2, !dbg !40
  %406 = bitcast float %256 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %406, i1 true) #2, !dbg !40
  %407 = bitcast float %257 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %407, i1 true) #2, !dbg !40
  %408 = bitcast float %258 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %408, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %409 = load i32, ptr addrspace(3) %397, align 4, !dbg !40
  %410 = load i32, ptr addrspace(3) %399, align 4, !dbg !40
  %411 = load i32, ptr addrspace(3) %401, align 4, !dbg !40
  %412 = load i32, ptr addrspace(3) %403, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %413 = bitcast float %259 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %413, i1 true) #2, !dbg !40
  %414 = bitcast float %260 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %414, i1 true) #2, !dbg !40
  %415 = bitcast float %261 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %415, i1 true) #2, !dbg !40
  %416 = bitcast float %262 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %416, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %417 = load i32, ptr addrspace(3) %397, align 4, !dbg !40
  %418 = load i32, ptr addrspace(3) %399, align 4, !dbg !40
  %419 = load i32, ptr addrspace(3) %401, align 4, !dbg !40
  %420 = load i32, ptr addrspace(3) %403, align 4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %421 = bitcast float %263 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %421, i1 true) #2, !dbg !40
  %422 = bitcast float %264 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %422, i1 true) #2, !dbg !40
  %423 = bitcast float %265 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %423, i1 true) #2, !dbg !40
  %424 = bitcast float %266 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %424, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %425 = load i32, ptr addrspace(3) %397, align 4, !dbg !40
  %426 = load i32, ptr addrspace(3) %399, align 4, !dbg !40
  %427 = load i32, ptr addrspace(3) %401, align 4, !dbg !40
  %428 = load i32, ptr addrspace(3) %403, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %398, ptr addrspace(1) %349, i1 %36) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %400, ptr addrspace(1) %351, i1 %37) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %402, ptr addrspace(1) %353, i1 %38) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %404, ptr addrspace(1) %355, i1 %39) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %409, ptr addrspace(1) %357, i1 %40) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %410, ptr addrspace(1) %359, i1 %41) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %411, ptr addrspace(1) %361, i1 %42) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %412, ptr addrspace(1) %363, i1 %43) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %417, ptr addrspace(1) %365, i1 %44) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %418, ptr addrspace(1) %367, i1 %45) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %419, ptr addrspace(1) %369, i1 %46) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %420, ptr addrspace(1) %371, i1 %47) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %425, ptr addrspace(1) %373, i1 %35) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %426, ptr addrspace(1) %375, i1 %35) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %427, ptr addrspace(1) %377, i1 %35) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %428, ptr addrspace(1) %379, i1 %35) #2, !dbg !40
  %429 = getelementptr float, ptr addrspace(1) %5, i64 %348, !dbg !41
  %430 = getelementptr float, ptr addrspace(1) %5, i64 %350, !dbg !41
  %431 = getelementptr float, ptr addrspace(1) %5, i64 %352, !dbg !41
  %432 = getelementptr float, ptr addrspace(1) %5, i64 %354, !dbg !41
  %433 = getelementptr float, ptr addrspace(1) %5, i64 %356, !dbg !41
  %434 = getelementptr float, ptr addrspace(1) %5, i64 %358, !dbg !41
  %435 = getelementptr float, ptr addrspace(1) %5, i64 %360, !dbg !41
  %436 = getelementptr float, ptr addrspace(1) %5, i64 %362, !dbg !41
  %437 = getelementptr float, ptr addrspace(1) %5, i64 %364, !dbg !41
  %438 = getelementptr float, ptr addrspace(1) %5, i64 %366, !dbg !41
  %439 = getelementptr float, ptr addrspace(1) %5, i64 %368, !dbg !41
  %440 = getelementptr float, ptr addrspace(1) %5, i64 %370, !dbg !41
  %441 = getelementptr float, ptr addrspace(1) %5, i64 %372, !dbg !41
  %442 = getelementptr float, ptr addrspace(1) %5, i64 %374, !dbg !41
  %443 = getelementptr float, ptr addrspace(1) %5, i64 %376, !dbg !41
  %444 = getelementptr float, ptr addrspace(1) %5, i64 %378, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %445 = bitcast float %283 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %445, i1 true) #2, !dbg !42
  %446 = bitcast float %284 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %446, i1 true) #2, !dbg !42
  %447 = bitcast float %285 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %447, i1 true) #2, !dbg !42
  %448 = bitcast float %286 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %448, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %449 = load i32, ptr addrspace(3) %397, align 4, !dbg !42
  %450 = load i32, ptr addrspace(3) %399, align 4, !dbg !42
  %451 = load i32, ptr addrspace(3) %401, align 4, !dbg !42
  %452 = load i32, ptr addrspace(3) %403, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %453 = bitcast float %287 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %453, i1 true) #2, !dbg !42
  %454 = bitcast float %288 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %454, i1 true) #2, !dbg !42
  %455 = bitcast float %289 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %455, i1 true) #2, !dbg !42
  %456 = bitcast float %290 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %456, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %457 = load i32, ptr addrspace(3) %397, align 4, !dbg !42
  %458 = load i32, ptr addrspace(3) %399, align 4, !dbg !42
  %459 = load i32, ptr addrspace(3) %401, align 4, !dbg !42
  %460 = load i32, ptr addrspace(3) %403, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %461 = bitcast float %291 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %461, i1 true) #2, !dbg !42
  %462 = bitcast float %292 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %462, i1 true) #2, !dbg !42
  %463 = bitcast float %293 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %463, i1 true) #2, !dbg !42
  %464 = bitcast float %294 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %464, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %465 = load i32, ptr addrspace(3) %397, align 4, !dbg !42
  %466 = load i32, ptr addrspace(3) %399, align 4, !dbg !42
  %467 = load i32, ptr addrspace(3) %401, align 4, !dbg !42
  %468 = load i32, ptr addrspace(3) %403, align 4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %469 = bitcast float %295 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %469, i1 true) #2, !dbg !42
  %470 = bitcast float %296 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %470, i1 true) #2, !dbg !42
  %471 = bitcast float %297 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %471, i1 true) #2, !dbg !42
  %472 = bitcast float %298 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %472, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %473 = load i32, ptr addrspace(3) %397, align 4, !dbg !42
  %474 = load i32, ptr addrspace(3) %399, align 4, !dbg !42
  %475 = load i32, ptr addrspace(3) %401, align 4, !dbg !42
  %476 = load i32, ptr addrspace(3) %403, align 4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %449, ptr addrspace(1) %429, i1 %36) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %450, ptr addrspace(1) %430, i1 %37) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %451, ptr addrspace(1) %431, i1 %38) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %452, ptr addrspace(1) %432, i1 %39) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %457, ptr addrspace(1) %433, i1 %40) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %458, ptr addrspace(1) %434, i1 %41) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %459, ptr addrspace(1) %435, i1 %42) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %460, ptr addrspace(1) %436, i1 %43) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %465, ptr addrspace(1) %437, i1 %44) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %466, ptr addrspace(1) %438, i1 %45) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %467, ptr addrspace(1) %439, i1 %46) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %468, ptr addrspace(1) %440, i1 %47) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %473, ptr addrspace(1) %441, i1 %35) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %474, ptr addrspace(1) %442, i1 %35) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %475, ptr addrspace(1) %443, i1 %35) #2, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %476, ptr addrspace(1) %444, i1 %35) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyri5puopb75qgsijlw6g7o2ivyk66amgsv7mjoi5oswinzn3ooj.py", directory: "inductor_cache/yr")
!4 = !{ptr @triton_poi_fused_div_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_sub_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_sub_0", linkageName: "triton_poi_fused_div_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 47, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 47, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 32, scope: !7)
!36 = !DILocation(line: 40, column: 30, scope: !7)
!37 = !DILocation(line: 40, column: 44, scope: !7)
!38 = !DILocation(line: 40, column: 37, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 55, scope: !7)
!41 = !DILocation(line: 41, column: 25, scope: !7)
!42 = !DILocation(line: 41, column: 55, scope: !7)
!43 = !DILocation(line: 41, column: 4, scope: !7)
