; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 510, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = sdiv i32 %17, 4096, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %19 = sdiv i32 %.frozen, 786432, !dbg !15
  %20 = mul i32 %19, 786432, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = shl nsw i32 %19, 18, !dbg !17
  %22 = add nsw i32 %21, %srem.decomposed, !dbg !18
  %23 = sext i32 %22 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = shl nsw i32 %19, 17, !dbg !20
  %26 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !21
  %27 = insertelement <2 x i32> %26, i32 %18, i64 1, !dbg !21
  %28 = srem <2 x i32> %27, <i32 4096, i32 192>, !dbg !21
  %29 = extractelement <2 x i32> %28, i64 1, !dbg !22
  %30 = icmp slt i32 %29, 64, !dbg !23
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #1, !dbg !24
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !24
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !24
  %34 = and i32 %29, -32, !dbg !25
  %35 = icmp eq i32 %34, 64, !dbg !25
  %36 = insertelement <2 x i32> <i32 poison, i32 -64>, i32 %25, i64 0, !dbg !26
  %37 = add nsw <2 x i32> %36, %28, !dbg !26
  %38 = extractelement <2 x i32> %37, i64 1, !dbg !27
  %39 = shl nsw i32 %38, 12, !dbg !27
  %40 = extractelement <2 x i32> %37, i64 0, !dbg !28
  %41 = add nsw i32 %40, %39, !dbg !29
  %42 = sext i32 %41 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !30
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !31
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !31
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !31
  %47 = sext i32 %38 to i64, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %35, i32 0, i1 %35) #1, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %35, i32 0, i1 %35) #1, !dbg !33
  %51 = icmp eq i32 %34, 96, !dbg !34
  %52 = add nsw i32 %29, -96, !dbg !35
  %53 = shl nsw i32 %52, 12, !dbg !36
  %54 = add nsw i32 %40, %53, !dbg !37
  %55 = sext i32 %54 to i64, !dbg !38
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !38
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #1, !dbg !39
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !39
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !39
  %60 = sext i32 %52 to i64, !dbg !40
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !40
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %51, i32 0, i1 %51) #1, !dbg !41
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %51, i32 0, i1 %51) #1, !dbg !41
  %64 = icmp eq i32 %34, 128, !dbg !42
  %65 = add nsw i32 %29, -128, !dbg !43
  %66 = shl nsw i32 %65, 12, !dbg !44
  %67 = add nsw i32 %40, %66, !dbg !45
  %68 = sext i32 %67 to i64, !dbg !46
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %68, !dbg !46
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #1, !dbg !47
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !47
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !47
  %73 = sext i32 %65 to i64, !dbg !48
  %74 = getelementptr float, ptr addrspace(1) %6, i64 %73, !dbg !48
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %64, i32 0, i1 %64) #1, !dbg !49
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %64, i32 0, i1 %64) #1, !dbg !49
  %77 = icmp sgt i32 %29, 159, !dbg !22
  %78 = add nsw i32 %29, -160, !dbg !50
  %79 = shl nsw i32 %78, 12, !dbg !51
  %80 = add nsw i32 %40, %79, !dbg !28
  %81 = sext i32 %80 to i64, !dbg !52
  %82 = getelementptr float, ptr addrspace(1) %7, i64 %81, !dbg !52
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %82, i1 %77, i32 0, i1 %77, i32 0, i1 %77) #1, !dbg !53
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !53
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !53
  %86 = sext i32 %78 to i64, !dbg !54
  %87 = getelementptr float, ptr addrspace(1) %8, i64 %86, !dbg !54
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %77, i32 0, i1 %77) #1, !dbg !55
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %77, i32 0, i1 %77) #1, !dbg !55
  %90 = insertelement <8 x i32> poison, i32 %85, i64 0, !dbg !53
  %91 = insertelement <8 x i32> %90, i32 %84, i64 1, !dbg !53
  %92 = insertelement <8 x i32> %91, i32 %72, i64 2, !dbg !53
  %93 = insertelement <8 x i32> %92, i32 %71, i64 3, !dbg !53
  %94 = insertelement <8 x i32> %93, i32 %59, i64 4, !dbg !53
  %95 = insertelement <8 x i32> %94, i32 %58, i64 5, !dbg !53
  %96 = insertelement <8 x i32> %95, i32 %46, i64 6, !dbg !53
  %97 = insertelement <8 x i32> %96, i32 %45, i64 7, !dbg !53
  %98 = bitcast <8 x i32> %97 to <8 x float>, !dbg !53
  %99 = insertelement <8 x i32> poison, i32 %89, i64 0, !dbg !55
  %100 = insertelement <8 x i32> %99, i32 %88, i64 1, !dbg !55
  %101 = insertelement <8 x i32> %100, i32 %76, i64 2, !dbg !55
  %102 = insertelement <8 x i32> %101, i32 %75, i64 3, !dbg !55
  %103 = insertelement <8 x i32> %102, i32 %63, i64 4, !dbg !55
  %104 = insertelement <8 x i32> %103, i32 %62, i64 5, !dbg !55
  %105 = insertelement <8 x i32> %104, i32 %50, i64 6, !dbg !55
  %106 = insertelement <8 x i32> %105, i32 %49, i64 7, !dbg !55
  %107 = bitcast <8 x i32> %106 to <8 x float>, !dbg !55
  %108 = fadd <8 x float> %98, %107, !dbg !56
  %109 = extractelement <8 x float> %108, i64 7, !dbg !57
  %110 = fmul float %109, 0x3FC99999A0000000, !dbg !58
  %111 = extractelement <8 x float> %108, i64 6, !dbg !57
  %112 = fmul float %111, 0x3FC99999A0000000, !dbg !58
  %113 = fcmp ogt <8 x float> %108, zeroinitializer, !dbg !59
  %114 = extractelement <8 x i1> %113, i64 7, !dbg !57
  %115 = select i1 %114, float %109, float %110, !dbg !57
  %116 = extractelement <8 x i1> %113, i64 6, !dbg !57
  %117 = select i1 %116, float %111, float %112, !dbg !57
  %118 = extractelement <8 x float> %108, i64 5, !dbg !60
  %119 = fmul float %118, 0x3FC99999A0000000, !dbg !61
  %120 = extractelement <8 x float> %108, i64 4, !dbg !60
  %121 = fmul float %120, 0x3FC99999A0000000, !dbg !61
  %122 = extractelement <8 x i1> %113, i64 5, !dbg !60
  %123 = select i1 %122, float %118, float %119, !dbg !60
  %124 = extractelement <8 x i1> %113, i64 4, !dbg !60
  %125 = select i1 %124, float %120, float %121, !dbg !60
  %126 = extractelement <8 x float> %108, i64 3, !dbg !62
  %127 = fmul float %126, 0x3FC99999A0000000, !dbg !63
  %128 = extractelement <8 x float> %108, i64 2, !dbg !62
  %129 = fmul float %128, 0x3FC99999A0000000, !dbg !63
  %130 = extractelement <8 x i1> %113, i64 3, !dbg !62
  %131 = select i1 %130, float %126, float %127, !dbg !62
  %132 = extractelement <8 x i1> %113, i64 2, !dbg !62
  %133 = select i1 %132, float %128, float %129, !dbg !62
  %134 = extractelement <8 x float> %108, i64 1, !dbg !64
  %135 = fmul float %134, 0x3FC99999A0000000, !dbg !65
  %136 = extractelement <8 x float> %108, i64 0, !dbg !64
  %137 = fmul float %136, 0x3FC99999A0000000, !dbg !65
  %138 = extractelement <8 x i1> %113, i64 1, !dbg !64
  %139 = select i1 %138, float %134, float %135, !dbg !64
  %140 = extractelement <8 x i1> %113, i64 0, !dbg !64
  %141 = select i1 %140, float %136, float %137, !dbg !64
  %142 = select i1 %77, float %139, float 0.000000e+00, !dbg !66
  %143 = select i1 %77, float %141, float 0.000000e+00, !dbg !66
  %144 = select i1 %64, float %131, float %142, !dbg !67
  %145 = select i1 %64, float %133, float %143, !dbg !67
  %146 = select i1 %51, float %123, float %144, !dbg !67
  %147 = select i1 %51, float %125, float %145, !dbg !67
  %148 = select i1 %35, float %115, float %146, !dbg !67
  %149 = select i1 %35, float %117, float %147, !dbg !67
  %150 = sext i32 %17 to i64, !dbg !68
  %151 = getelementptr float, ptr addrspace(1) %9, i64 %150, !dbg !68
  %152 = bitcast float %148 to i32, !dbg !69
  %153 = select i1 %30, i32 %32, i32 %152, !dbg !70
  %154 = bitcast float %149 to i32, !dbg !69
  %155 = select i1 %30, i32 %33, i32 %154, !dbg !70
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %153, i32 %155, ptr addrspace(1) %151, i1 true) #1, !dbg !69
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxp3e43evrayj7qvx4zdbkaoxl72jrionmgtb6jqbhyldogof7w5.py", directory: "inductor_cache/xp")
!4 = !{ptr @triton_poi_fused_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_4", linkageName: "triton_poi_fused_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 38, column: 63, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 76, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 42, scope: !7)
!28 = !DILocation(line: 79, column: 57, scope: !7)
!29 = !DILocation(line: 38, column: 56, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 68, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 44, scope: !7)
!34 = !DILocation(line: 51, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 50, scope: !7)
!36 = !DILocation(line: 52, column: 42, scope: !7)
!37 = !DILocation(line: 52, column: 56, scope: !7)
!38 = !DILocation(line: 52, column: 31, scope: !7)
!39 = !DILocation(line: 52, column: 68, scope: !7)
!40 = !DILocation(line: 53, column: 31, scope: !7)
!41 = !DILocation(line: 53, column: 44, scope: !7)
!42 = !DILocation(line: 65, column: 20, scope: !7)
!43 = !DILocation(line: 66, column: 51, scope: !7)
!44 = !DILocation(line: 66, column: 42, scope: !7)
!45 = !DILocation(line: 66, column: 57, scope: !7)
!46 = !DILocation(line: 66, column: 31, scope: !7)
!47 = !DILocation(line: 66, column: 69, scope: !7)
!48 = !DILocation(line: 67, column: 31, scope: !7)
!49 = !DILocation(line: 67, column: 45, scope: !7)
!50 = !DILocation(line: 79, column: 51, scope: !7)
!51 = !DILocation(line: 79, column: 42, scope: !7)
!52 = !DILocation(line: 79, column: 31, scope: !7)
!53 = !DILocation(line: 79, column: 69, scope: !7)
!54 = !DILocation(line: 80, column: 31, scope: !7)
!55 = !DILocation(line: 80, column: 45, scope: !7)
!56 = !DILocation(line: 81, column: 20, scope: !7)
!57 = !DILocation(line: 45, column: 35, scope: !7)
!58 = !DILocation(line: 44, column: 20, scope: !7)
!59 = !DILocation(line: 83, column: 20, scope: !7)
!60 = !DILocation(line: 59, column: 35, scope: !7)
!61 = !DILocation(line: 58, column: 20, scope: !7)
!62 = !DILocation(line: 73, column: 35, scope: !7)
!63 = !DILocation(line: 72, column: 20, scope: !7)
!64 = !DILocation(line: 86, column: 35, scope: !7)
!65 = !DILocation(line: 85, column: 20, scope: !7)
!66 = !DILocation(line: 88, column: 35, scope: !7)
!67 = !DILocation(line: 0, scope: !7)
!68 = !DILocation(line: 93, column: 25, scope: !7)
!69 = !DILocation(line: 93, column: 37, scope: !7)
!70 = !DILocation(line: 92, column: 33, scope: !7)
!71 = !DILocation(line: 93, column: 4, scope: !7)
