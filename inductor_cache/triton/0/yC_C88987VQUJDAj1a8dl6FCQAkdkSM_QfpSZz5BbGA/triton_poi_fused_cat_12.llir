; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 16, !dbg !14
  %15 = srem i32 %14, 1536, !dbg !15
  %16 = mul i32 %14, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %.frozen1 = freeze i32 %13, !dbg !17
  %17 = sdiv i32 %.frozen1, 24576, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !18
  %19 = bitcast i32 %18 to float, !dbg !18
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !19
  %21 = bitcast i32 %20 to float, !dbg !19
  %22 = icmp slt i32 %15, 512, !dbg !20
  %23 = mul i32 %17, 24576, !dbg !21
  %srem.decomposed = sub i32 %.frozen1, %23, !dbg !21
  %24 = shl nsw i32 %17, 13, !dbg !22
  %25 = add nsw i32 %24, %srem.decomposed, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #1, !dbg !25
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %31 = and i32 %15, -512, !dbg !26
  %32 = icmp eq i32 %31, 512, !dbg !26
  %33 = shl nsw i32 %15, 4, !dbg !27
  %34 = add nsw i32 %24, %.decomposed, !dbg !27
  %35 = add nsw i32 %34, -8192, !dbg !28
  %36 = add nsw i32 %35, %33, !dbg !29
  %37 = sext i32 %36 to i64, !dbg !30
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !30
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #1, !dbg !31
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !31
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !31
  %42 = bitcast i32 %40 to float, !dbg !31
  %43 = bitcast i32 %41 to float, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !32
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #1, !dbg !33
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !33
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !33
  %48 = bitcast i32 %46 to float, !dbg !33
  %49 = bitcast i32 %47 to float, !dbg !33
  %50 = fmul float %19, %48, !dbg !34
  %51 = fmul float %19, %49, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !35
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #1, !dbg !36
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !36
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !36
  %56 = bitcast i32 %54 to float, !dbg !36
  %57 = bitcast i32 %55 to float, !dbg !36
  %58 = fmul float %21, %56, !dbg !37
  %59 = fmul float %21, %57, !dbg !37
  %60 = fadd float %50, %58, !dbg !38
  %61 = fadd float %51, %59, !dbg !38
  %62 = fmul float %60, %42, !dbg !39
  %63 = fmul float %61, %43, !dbg !39
  %64 = icmp sgt i32 %15, 1023, !dbg !40
  %65 = add nsw i32 %34, -16384, !dbg !41
  %66 = add nsw i32 %65, %33, !dbg !42
  %67 = sext i32 %66 to i64, !dbg !43
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !43
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #1, !dbg !44
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !44
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !44
  %72 = bitcast i32 %70 to float, !dbg !44
  %73 = bitcast i32 %71 to float, !dbg !44
  %74 = fmul float %19, %72, !dbg !45
  %75 = fmul float %19, %73, !dbg !45
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !46
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #1, !dbg !47
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !47
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !47
  %80 = bitcast i32 %78 to float, !dbg !47
  %81 = bitcast i32 %79 to float, !dbg !47
  %82 = fmul float %21, %80, !dbg !48
  %83 = fmul float %21, %81, !dbg !48
  %84 = fadd float %74, %82, !dbg !49
  %85 = fadd float %75, %83, !dbg !49
  %86 = select i1 %64, float %84, float 0.000000e+00, !dbg !50
  %87 = select i1 %64, float %85, float 0.000000e+00, !dbg !50
  %88 = select i1 %32, float %62, float %86, !dbg !51
  %89 = select i1 %32, float %63, float %87, !dbg !51
  %90 = sext i32 %13 to i64, !dbg !52
  %91 = getelementptr float, ptr addrspace(1) %5, i64 %90, !dbg !52
  %92 = bitcast float %88 to i32, !dbg !53
  %93 = select i1 %22, i32 %29, i32 %92, !dbg !54
  %94 = bitcast float %89 to i32, !dbg !53
  %95 = select i1 %22, i32 %30, i32 %94, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %93, i32 %95, ptr addrspace(1) %91, i1 true) #1, !dbg !53
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5eko4gy2xzjknw3snhjp5vyexe2eebjgpcarz5mlus7jf4njllu.py", directory: "inductor_cache/5e")
!4 = !{ptr @triton_poi_fused_cat_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_12", linkageName: "triton_poi_fused_cat_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 20, scope: !7)
!19 = !DILocation(line: 30, column: 20, scope: !7)
!20 = !DILocation(line: 40, column: 18, scope: !7)
!21 = !DILocation(line: 41, column: 35, scope: !7)
!22 = !DILocation(line: 41, column: 50, scope: !7)
!23 = !DILocation(line: 41, column: 45, scope: !7)
!24 = !DILocation(line: 41, column: 30, scope: !7)
!25 = !DILocation(line: 41, column: 55, scope: !7)
!26 = !DILocation(line: 45, column: 18, scope: !7)
!27 = !DILocation(line: 46, column: 40, scope: !7)
!28 = !DILocation(line: 46, column: 36, scope: !7)
!29 = !DILocation(line: 46, column: 55, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 65, scope: !7)
!32 = !DILocation(line: 47, column: 31, scope: !7)
!33 = !DILocation(line: 47, column: 65, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 49, column: 31, scope: !7)
!36 = !DILocation(line: 49, column: 65, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 58, column: 36, scope: !7)
!42 = !DILocation(line: 58, column: 56, scope: !7)
!43 = !DILocation(line: 58, column: 31, scope: !7)
!44 = !DILocation(line: 58, column: 66, scope: !7)
!45 = !DILocation(line: 59, column: 20, scope: !7)
!46 = !DILocation(line: 60, column: 31, scope: !7)
!47 = !DILocation(line: 60, column: 66, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 64, column: 35, scope: !7)
!51 = !DILocation(line: 0, scope: !7)
!52 = !DILocation(line: 67, column: 25, scope: !7)
!53 = !DILocation(line: 67, column: 37, scope: !7)
!54 = !DILocation(line: 66, column: 33, scope: !7)
!55 = !DILocation(line: 67, column: 4, scope: !7)
