; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %9, 252, !dbg !12
  %12 = lshr i32 %8, 2, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %13, !dbg !13
  %16 = or disjoint i32 %15, 64, !dbg !13
  %17 = or disjoint i32 %15, 128, !dbg !13
  %18 = or disjoint i32 %15, 192, !dbg !13
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !14
  %23 = icmp slt i32 %18, 512, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 4, !dbg !16
  %26 = lshr i32 %8, 6, !dbg !17
  %27 = and i32 %26, 3, !dbg !17
  %28 = or disjoint i32 %25, %27, !dbg !18
  %29 = or disjoint i32 %28, 4, !dbg !18
  %30 = or disjoint i32 %28, 8, !dbg !18
  %31 = or disjoint i32 %28, 12, !dbg !18
  %32 = or disjoint i32 %25, %10, !dbg !18
  %33 = icmp slt i32 %28, 1024, !dbg !19
  %34 = icmp slt i32 %29, 1024, !dbg !19
  %35 = icmp slt i32 %30, 1024, !dbg !19
  %36 = icmp slt i32 %31, 1024, !dbg !19
  %37 = icmp slt i32 %32, 1024, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %38 = sdiv i32 %.frozen, 128, !dbg !20
  %39 = mul i32 %38, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %39, !dbg !21
  %40 = sdiv i32 %15, 128, !dbg !20
  %41 = sdiv i32 %16, 128, !dbg !20
  %42 = sdiv i32 %17, 128, !dbg !20
  %43 = sdiv i32 %18, 128, !dbg !20
  %44 = shl i32 %28, 7, !dbg !22
  %45 = shl i32 %29, 7, !dbg !22
  %46 = shl i32 %30, 7, !dbg !22
  %47 = shl i32 %31, 7, !dbg !22
  %48 = shl i32 %38, 17, !dbg !23
  %49 = add i32 %48, %.decomposed, !dbg !24
  %50 = add i32 %49, %44, !dbg !25
  %51 = add i32 %49, %45, !dbg !25
  %52 = add i32 %49, %46, !dbg !25
  %53 = add i32 %49, %47, !dbg !25
  %54 = sext i32 %50 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !26
  %56 = sext i32 %51 to i64, !dbg !26
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !26
  %58 = sext i32 %52 to i64, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !26
  %60 = sext i32 %53 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !26
  %62 = and i1 %19, %33, !dbg !27
  %63 = and i1 %34, %19, !dbg !27
  %64 = and i1 %35, %19, !dbg !27
  %65 = and i1 %36, %19, !dbg !27
  %66 = and i1 %20, %37, !dbg !27
  %67 = and i1 %21, %37, !dbg !27
  %68 = and i1 %22, %37, !dbg !27
  %69 = and i1 %23, %37, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %62) #4, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %63) #4, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !28
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %64) #4, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !28
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %65) #4, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !28
  %90 = shl i32 %8, 6, !dbg !28
  %91 = and i32 %90, 4032, !dbg !28
  %92 = or disjoint i32 %91, %27, !dbg !28
  %93 = and i32 %9, 1020, !dbg !28
  %94 = lshr exact i32 %91, 2, !dbg !28
  %95 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %94, !dbg !28
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %92, !dbg !28
  %97 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #4, !dbg !28
  %98 = or disjoint i32 %92, 16, !dbg !28
  %99 = lshr i32 %98, 4, !dbg !28
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !28
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %98, !dbg !28
  %102 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #4, !dbg !28
  %103 = or disjoint i32 %92, 32, !dbg !28
  %104 = lshr i32 %103, 4, !dbg !28
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !28
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %103, !dbg !28
  %107 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #4, !dbg !28
  %108 = or disjoint i32 %92, 48, !dbg !28
  %109 = lshr i32 %108, 4, !dbg !28
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !28
  %111 = getelementptr float, ptr addrspace(3) %110, i32 %108, !dbg !28
  %112 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #4, !dbg !28
  %113 = or disjoint i32 %92, 4, !dbg !28
  %114 = getelementptr float, ptr addrspace(3) %95, i32 %113, !dbg !28
  %115 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #4, !dbg !28
  %116 = or disjoint i32 %92, 20, !dbg !28
  %117 = lshr i32 %116, 4, !dbg !28
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !28
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !28
  %120 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #4, !dbg !28
  %121 = or disjoint i32 %92, 36, !dbg !28
  %122 = lshr i32 %121, 4, !dbg !28
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !28
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %121, !dbg !28
  %125 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #4, !dbg !28
  %126 = or disjoint i32 %92, 52, !dbg !28
  %127 = lshr i32 %126, 4, !dbg !28
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !28
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %126, !dbg !28
  %130 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #4, !dbg !28
  %131 = or disjoint i32 %92, 8, !dbg !28
  %132 = getelementptr float, ptr addrspace(3) %95, i32 %131, !dbg !28
  %133 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #4, !dbg !28
  %134 = or disjoint i32 %92, 24, !dbg !28
  %135 = lshr i32 %134, 4, !dbg !28
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !28
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !28
  %138 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #4, !dbg !28
  %139 = or disjoint i32 %92, 40, !dbg !28
  %140 = lshr i32 %139, 4, !dbg !28
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !28
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %139, !dbg !28
  %143 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #4, !dbg !28
  %144 = or disjoint i32 %92, 56, !dbg !28
  %145 = lshr i32 %144, 4, !dbg !28
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !28
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %144, !dbg !28
  %148 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #4, !dbg !28
  %149 = or disjoint i32 %92, 12, !dbg !28
  %150 = getelementptr float, ptr addrspace(3) %95, i32 %149, !dbg !28
  %151 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #4, !dbg !28
  %152 = or disjoint i32 %92, 28, !dbg !28
  %153 = lshr i32 %152, 4, !dbg !28
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !28
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !28
  %156 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #4, !dbg !28
  %157 = or disjoint i32 %92, 44, !dbg !28
  %158 = lshr i32 %157, 4, !dbg !28
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !28
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %157, !dbg !28
  %161 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #4, !dbg !28
  %162 = or disjoint i32 %92, 60, !dbg !28
  %163 = lshr i32 %162, 4, !dbg !28
  %164 = getelementptr float, ptr addrspace(3) @global_smem, i32 %163, !dbg !28
  %165 = getelementptr float, ptr addrspace(3) %164, i32 %162, !dbg !28
  %166 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %167 = lshr i32 %93, 4, !dbg !28
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !28
  %169 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %93, !dbg !28
  %170 = load float, ptr addrspace(3) %169, align 4, !dbg !28
  %171 = or disjoint i32 %93, 1, !dbg !28
  %172 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %171, !dbg !28
  %173 = load float, ptr addrspace(3) %172, align 4, !dbg !28
  %174 = or disjoint i32 %93, 2, !dbg !28
  %175 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %174, !dbg !28
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !28
  %177 = or disjoint i32 %93, 3, !dbg !28
  %178 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %177, !dbg !28
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !28
  %180 = or disjoint i32 %93, 1024, !dbg !28
  %181 = lshr i32 %180, 4, !dbg !28
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !28
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %180, !dbg !28
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !28
  %185 = or disjoint i32 %93, 1025, !dbg !28
  %186 = lshr i32 %185, 4, !dbg !28
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !28
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %185, !dbg !28
  %189 = load float, ptr addrspace(3) %188, align 4, !dbg !28
  %190 = or disjoint i32 %93, 1026, !dbg !28
  %191 = lshr i32 %190, 4, !dbg !28
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !28
  %193 = getelementptr inbounds float, ptr addrspace(3) %192, i32 %190, !dbg !28
  %194 = load float, ptr addrspace(3) %193, align 4, !dbg !28
  %195 = or disjoint i32 %93, 1027, !dbg !28
  %196 = lshr i32 %195, 4, !dbg !28
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !28
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %195, !dbg !28
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !28
  %200 = or disjoint i32 %93, 2048, !dbg !28
  %201 = lshr i32 %200, 4, !dbg !28
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !28
  %203 = getelementptr inbounds float, ptr addrspace(3) %202, i32 %200, !dbg !28
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !28
  %205 = or disjoint i32 %93, 2049, !dbg !28
  %206 = lshr i32 %205, 4, !dbg !28
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !28
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %205, !dbg !28
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !28
  %210 = or disjoint i32 %93, 2050, !dbg !28
  %211 = lshr i32 %210, 4, !dbg !28
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !28
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !28
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !28
  %215 = or disjoint i32 %93, 2051, !dbg !28
  %216 = lshr i32 %215, 4, !dbg !28
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !28
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !28
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !28
  %220 = or disjoint i32 %93, 3072, !dbg !28
  %221 = lshr i32 %220, 4, !dbg !28
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !28
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !28
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !28
  %225 = or disjoint i32 %93, 3073, !dbg !28
  %226 = lshr i32 %225, 4, !dbg !28
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !28
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !28
  %229 = load float, ptr addrspace(3) %228, align 4, !dbg !28
  %230 = or disjoint i32 %93, 3074, !dbg !28
  %231 = lshr i32 %230, 4, !dbg !28
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !28
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !28
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !28
  %235 = or disjoint i32 %93, 3075, !dbg !28
  %236 = lshr i32 %235, 4, !dbg !28
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !28
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !28
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !28
  %240 = shl i32 %40, 10, !dbg !29
  %241 = shl i32 %41, 10, !dbg !29
  %242 = shl i32 %42, 10, !dbg !29
  %243 = shl i32 %43, 10, !dbg !29
  %244 = add i32 %240, %32, !dbg !30
  %245 = add i32 %32, %241, !dbg !30
  %246 = add i32 %32, %242, !dbg !30
  %247 = add i32 %32, %243, !dbg !30
  %248 = sext i32 %244 to i64, !dbg !31
  %249 = getelementptr float, ptr addrspace(1) %1, i64 %248, !dbg !31
  %250 = sext i32 %245 to i64, !dbg !31
  %251 = getelementptr float, ptr addrspace(1) %1, i64 %250, !dbg !31
  %252 = sext i32 %246 to i64, !dbg !31
  %253 = getelementptr float, ptr addrspace(1) %1, i64 %252, !dbg !31
  %254 = sext i32 %247 to i64, !dbg !31
  %255 = getelementptr float, ptr addrspace(1) %1, i64 %254, !dbg !31
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %249, i1 %66) #4, !dbg !32
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !32
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !32
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !32
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !32
  %261 = bitcast i32 %257 to float, !dbg !32
  %262 = bitcast i32 %258 to float, !dbg !32
  %263 = bitcast i32 %259 to float, !dbg !32
  %264 = bitcast i32 %260 to float, !dbg !32
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %251, i1 %67) #4, !dbg !32
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !32
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !32
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !32
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !32
  %270 = bitcast i32 %266 to float, !dbg !32
  %271 = bitcast i32 %267 to float, !dbg !32
  %272 = bitcast i32 %268 to float, !dbg !32
  %273 = bitcast i32 %269 to float, !dbg !32
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %253, i1 %68) #4, !dbg !32
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !32
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !32
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !32
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !32
  %279 = bitcast i32 %275 to float, !dbg !32
  %280 = bitcast i32 %276 to float, !dbg !32
  %281 = bitcast i32 %277 to float, !dbg !32
  %282 = bitcast i32 %278 to float, !dbg !32
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %255, i1 %69) #4, !dbg !32
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !32
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !32
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !32
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !32
  %288 = bitcast i32 %284 to float, !dbg !32
  %289 = bitcast i32 %285 to float, !dbg !32
  %290 = bitcast i32 %286 to float, !dbg !32
  %291 = bitcast i32 %287 to float, !dbg !32
  %292 = fadd float %261, 0x3E112E0BE0000000, !dbg !33
  %293 = fadd float %262, 0x3E112E0BE0000000, !dbg !33
  %294 = fadd float %263, 0x3E112E0BE0000000, !dbg !33
  %295 = fadd float %264, 0x3E112E0BE0000000, !dbg !33
  %296 = fadd float %270, 0x3E112E0BE0000000, !dbg !33
  %297 = fadd float %271, 0x3E112E0BE0000000, !dbg !33
  %298 = fadd float %272, 0x3E112E0BE0000000, !dbg !33
  %299 = fadd float %273, 0x3E112E0BE0000000, !dbg !33
  %300 = fadd float %279, 0x3E112E0BE0000000, !dbg !33
  %301 = fadd float %280, 0x3E112E0BE0000000, !dbg !33
  %302 = fadd float %281, 0x3E112E0BE0000000, !dbg !33
  %303 = fadd float %282, 0x3E112E0BE0000000, !dbg !33
  %304 = fadd float %288, 0x3E112E0BE0000000, !dbg !33
  %305 = fadd float %289, 0x3E112E0BE0000000, !dbg !33
  %306 = fadd float %290, 0x3E112E0BE0000000, !dbg !33
  %307 = fadd float %291, 0x3E112E0BE0000000, !dbg !33
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %308, 0, !dbg !34
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %309, 0, !dbg !34
  br i1 %.not.i, label %315, label %310, !dbg !34

310:                                              ; preds = %5
  br i1 %.not1.i, label %313, label %311, !dbg !34

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %292) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %292) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

315:                                              ; preds = %5
  br i1 %.not1.i, label %318, label %316, !dbg !34

316:                                              ; preds = %315
  %317 = tail call float @llvm.nvvm.sqrt.rn.f(float %292) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

318:                                              ; preds = %315
  %319 = tail call float @llvm.nvvm.sqrt.approx.f(float %292) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %311, %313, %316, %318
  %.0.i = phi float [ %312, %311 ], [ %314, %313 ], [ %317, %316 ], [ %319, %318 ], !dbg !34
  %320 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i3 = icmp eq i32 %320, 0, !dbg !34
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i6 = icmp eq i32 %321, 0, !dbg !34
  br i1 %.not.i3, label %327, label %322, !dbg !34

322:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %325, label %323, !dbg !34

323:                                              ; preds = %322
  %324 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %293) #4, !dbg !34
  br label %__nv_sqrtf.exit7, !dbg !34

325:                                              ; preds = %322
  %326 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %293) #4, !dbg !34
  br label %__nv_sqrtf.exit7, !dbg !34

327:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %330, label %328, !dbg !34

328:                                              ; preds = %327
  %329 = tail call float @llvm.nvvm.sqrt.rn.f(float %293) #4, !dbg !34
  br label %__nv_sqrtf.exit7, !dbg !34

330:                                              ; preds = %327
  %331 = tail call float @llvm.nvvm.sqrt.approx.f(float %293) #4, !dbg !34
  br label %__nv_sqrtf.exit7, !dbg !34

__nv_sqrtf.exit7:                                 ; preds = %323, %325, %328, %330
  %.0.i5 = phi float [ %324, %323 ], [ %326, %325 ], [ %329, %328 ], [ %331, %330 ], !dbg !34
  %332 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i8 = icmp eq i32 %332, 0, !dbg !34
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i11 = icmp eq i32 %333, 0, !dbg !34
  br i1 %.not.i8, label %339, label %334, !dbg !34

334:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %337, label %335, !dbg !34

335:                                              ; preds = %334
  %336 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %294) #4, !dbg !34
  br label %__nv_sqrtf.exit12, !dbg !34

337:                                              ; preds = %334
  %338 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %294) #4, !dbg !34
  br label %__nv_sqrtf.exit12, !dbg !34

339:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %342, label %340, !dbg !34

340:                                              ; preds = %339
  %341 = tail call float @llvm.nvvm.sqrt.rn.f(float %294) #4, !dbg !34
  br label %__nv_sqrtf.exit12, !dbg !34

342:                                              ; preds = %339
  %343 = tail call float @llvm.nvvm.sqrt.approx.f(float %294) #4, !dbg !34
  br label %__nv_sqrtf.exit12, !dbg !34

__nv_sqrtf.exit12:                                ; preds = %335, %337, %340, %342
  %.0.i10 = phi float [ %336, %335 ], [ %338, %337 ], [ %341, %340 ], [ %343, %342 ], !dbg !34
  %344 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i13 = icmp eq i32 %344, 0, !dbg !34
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i16 = icmp eq i32 %345, 0, !dbg !34
  br i1 %.not.i13, label %351, label %346, !dbg !34

346:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %349, label %347, !dbg !34

347:                                              ; preds = %346
  %348 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %295) #4, !dbg !34
  br label %__nv_sqrtf.exit17, !dbg !34

349:                                              ; preds = %346
  %350 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %295) #4, !dbg !34
  br label %__nv_sqrtf.exit17, !dbg !34

351:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %354, label %352, !dbg !34

352:                                              ; preds = %351
  %353 = tail call float @llvm.nvvm.sqrt.rn.f(float %295) #4, !dbg !34
  br label %__nv_sqrtf.exit17, !dbg !34

354:                                              ; preds = %351
  %355 = tail call float @llvm.nvvm.sqrt.approx.f(float %295) #4, !dbg !34
  br label %__nv_sqrtf.exit17, !dbg !34

__nv_sqrtf.exit17:                                ; preds = %347, %349, %352, %354
  %.0.i15 = phi float [ %348, %347 ], [ %350, %349 ], [ %353, %352 ], [ %355, %354 ], !dbg !34
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i18 = icmp eq i32 %356, 0, !dbg !34
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i21 = icmp eq i32 %357, 0, !dbg !34
  br i1 %.not.i18, label %363, label %358, !dbg !34

358:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %361, label %359, !dbg !34

359:                                              ; preds = %358
  %360 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %296) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

361:                                              ; preds = %358
  %362 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %296) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

363:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %366, label %364, !dbg !34

364:                                              ; preds = %363
  %365 = tail call float @llvm.nvvm.sqrt.rn.f(float %296) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

366:                                              ; preds = %363
  %367 = tail call float @llvm.nvvm.sqrt.approx.f(float %296) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

__nv_sqrtf.exit22:                                ; preds = %359, %361, %364, %366
  %.0.i20 = phi float [ %360, %359 ], [ %362, %361 ], [ %365, %364 ], [ %367, %366 ], !dbg !34
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i23 = icmp eq i32 %368, 0, !dbg !34
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i26 = icmp eq i32 %369, 0, !dbg !34
  br i1 %.not.i23, label %375, label %370, !dbg !34

370:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %373, label %371, !dbg !34

371:                                              ; preds = %370
  %372 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %297) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

373:                                              ; preds = %370
  %374 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %297) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

375:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %378, label %376, !dbg !34

376:                                              ; preds = %375
  %377 = tail call float @llvm.nvvm.sqrt.rn.f(float %297) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

378:                                              ; preds = %375
  %379 = tail call float @llvm.nvvm.sqrt.approx.f(float %297) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

__nv_sqrtf.exit27:                                ; preds = %371, %373, %376, %378
  %.0.i25 = phi float [ %372, %371 ], [ %374, %373 ], [ %377, %376 ], [ %379, %378 ], !dbg !34
  %380 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i28 = icmp eq i32 %380, 0, !dbg !34
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i31 = icmp eq i32 %381, 0, !dbg !34
  br i1 %.not.i28, label %387, label %382, !dbg !34

382:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %385, label %383, !dbg !34

383:                                              ; preds = %382
  %384 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %298) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

385:                                              ; preds = %382
  %386 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %298) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

387:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %390, label %388, !dbg !34

388:                                              ; preds = %387
  %389 = tail call float @llvm.nvvm.sqrt.rn.f(float %298) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

390:                                              ; preds = %387
  %391 = tail call float @llvm.nvvm.sqrt.approx.f(float %298) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

__nv_sqrtf.exit32:                                ; preds = %383, %385, %388, %390
  %.0.i30 = phi float [ %384, %383 ], [ %386, %385 ], [ %389, %388 ], [ %391, %390 ], !dbg !34
  %392 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i33 = icmp eq i32 %392, 0, !dbg !34
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i36 = icmp eq i32 %393, 0, !dbg !34
  br i1 %.not.i33, label %399, label %394, !dbg !34

394:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %397, label %395, !dbg !34

395:                                              ; preds = %394
  %396 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %299) #4, !dbg !34
  br label %__nv_sqrtf.exit37, !dbg !34

397:                                              ; preds = %394
  %398 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %299) #4, !dbg !34
  br label %__nv_sqrtf.exit37, !dbg !34

399:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %402, label %400, !dbg !34

400:                                              ; preds = %399
  %401 = tail call float @llvm.nvvm.sqrt.rn.f(float %299) #4, !dbg !34
  br label %__nv_sqrtf.exit37, !dbg !34

402:                                              ; preds = %399
  %403 = tail call float @llvm.nvvm.sqrt.approx.f(float %299) #4, !dbg !34
  br label %__nv_sqrtf.exit37, !dbg !34

__nv_sqrtf.exit37:                                ; preds = %395, %397, %400, %402
  %.0.i35 = phi float [ %396, %395 ], [ %398, %397 ], [ %401, %400 ], [ %403, %402 ], !dbg !34
  %404 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i38 = icmp eq i32 %404, 0, !dbg !34
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i41 = icmp eq i32 %405, 0, !dbg !34
  br i1 %.not.i38, label %411, label %406, !dbg !34

406:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %409, label %407, !dbg !34

407:                                              ; preds = %406
  %408 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %300) #4, !dbg !34
  br label %__nv_sqrtf.exit42, !dbg !34

409:                                              ; preds = %406
  %410 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %300) #4, !dbg !34
  br label %__nv_sqrtf.exit42, !dbg !34

411:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %414, label %412, !dbg !34

412:                                              ; preds = %411
  %413 = tail call float @llvm.nvvm.sqrt.rn.f(float %300) #4, !dbg !34
  br label %__nv_sqrtf.exit42, !dbg !34

414:                                              ; preds = %411
  %415 = tail call float @llvm.nvvm.sqrt.approx.f(float %300) #4, !dbg !34
  br label %__nv_sqrtf.exit42, !dbg !34

__nv_sqrtf.exit42:                                ; preds = %407, %409, %412, %414
  %.0.i40 = phi float [ %408, %407 ], [ %410, %409 ], [ %413, %412 ], [ %415, %414 ], !dbg !34
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i43 = icmp eq i32 %416, 0, !dbg !34
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i46 = icmp eq i32 %417, 0, !dbg !34
  br i1 %.not.i43, label %423, label %418, !dbg !34

418:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %421, label %419, !dbg !34

419:                                              ; preds = %418
  %420 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %301) #4, !dbg !34
  br label %__nv_sqrtf.exit47, !dbg !34

421:                                              ; preds = %418
  %422 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %301) #4, !dbg !34
  br label %__nv_sqrtf.exit47, !dbg !34

423:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %426, label %424, !dbg !34

424:                                              ; preds = %423
  %425 = tail call float @llvm.nvvm.sqrt.rn.f(float %301) #4, !dbg !34
  br label %__nv_sqrtf.exit47, !dbg !34

426:                                              ; preds = %423
  %427 = tail call float @llvm.nvvm.sqrt.approx.f(float %301) #4, !dbg !34
  br label %__nv_sqrtf.exit47, !dbg !34

__nv_sqrtf.exit47:                                ; preds = %419, %421, %424, %426
  %.0.i45 = phi float [ %420, %419 ], [ %422, %421 ], [ %425, %424 ], [ %427, %426 ], !dbg !34
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i48 = icmp eq i32 %428, 0, !dbg !34
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i51 = icmp eq i32 %429, 0, !dbg !34
  br i1 %.not.i48, label %435, label %430, !dbg !34

430:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %433, label %431, !dbg !34

431:                                              ; preds = %430
  %432 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %302) #4, !dbg !34
  br label %__nv_sqrtf.exit52, !dbg !34

433:                                              ; preds = %430
  %434 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %302) #4, !dbg !34
  br label %__nv_sqrtf.exit52, !dbg !34

435:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %438, label %436, !dbg !34

436:                                              ; preds = %435
  %437 = tail call float @llvm.nvvm.sqrt.rn.f(float %302) #4, !dbg !34
  br label %__nv_sqrtf.exit52, !dbg !34

438:                                              ; preds = %435
  %439 = tail call float @llvm.nvvm.sqrt.approx.f(float %302) #4, !dbg !34
  br label %__nv_sqrtf.exit52, !dbg !34

__nv_sqrtf.exit52:                                ; preds = %431, %433, %436, %438
  %.0.i50 = phi float [ %432, %431 ], [ %434, %433 ], [ %437, %436 ], [ %439, %438 ], !dbg !34
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i53 = icmp eq i32 %440, 0, !dbg !34
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i56 = icmp eq i32 %441, 0, !dbg !34
  br i1 %.not.i53, label %447, label %442, !dbg !34

442:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %445, label %443, !dbg !34

443:                                              ; preds = %442
  %444 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %303) #4, !dbg !34
  br label %__nv_sqrtf.exit57, !dbg !34

445:                                              ; preds = %442
  %446 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %303) #4, !dbg !34
  br label %__nv_sqrtf.exit57, !dbg !34

447:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %450, label %448, !dbg !34

448:                                              ; preds = %447
  %449 = tail call float @llvm.nvvm.sqrt.rn.f(float %303) #4, !dbg !34
  br label %__nv_sqrtf.exit57, !dbg !34

450:                                              ; preds = %447
  %451 = tail call float @llvm.nvvm.sqrt.approx.f(float %303) #4, !dbg !34
  br label %__nv_sqrtf.exit57, !dbg !34

__nv_sqrtf.exit57:                                ; preds = %443, %445, %448, %450
  %.0.i55 = phi float [ %444, %443 ], [ %446, %445 ], [ %449, %448 ], [ %451, %450 ], !dbg !34
  %452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i58 = icmp eq i32 %452, 0, !dbg !34
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i61 = icmp eq i32 %453, 0, !dbg !34
  br i1 %.not.i58, label %459, label %454, !dbg !34

454:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %457, label %455, !dbg !34

455:                                              ; preds = %454
  %456 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %304) #4, !dbg !34
  br label %__nv_sqrtf.exit62, !dbg !34

457:                                              ; preds = %454
  %458 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %304) #4, !dbg !34
  br label %__nv_sqrtf.exit62, !dbg !34

459:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %462, label %460, !dbg !34

460:                                              ; preds = %459
  %461 = tail call float @llvm.nvvm.sqrt.rn.f(float %304) #4, !dbg !34
  br label %__nv_sqrtf.exit62, !dbg !34

462:                                              ; preds = %459
  %463 = tail call float @llvm.nvvm.sqrt.approx.f(float %304) #4, !dbg !34
  br label %__nv_sqrtf.exit62, !dbg !34

__nv_sqrtf.exit62:                                ; preds = %455, %457, %460, %462
  %.0.i60 = phi float [ %456, %455 ], [ %458, %457 ], [ %461, %460 ], [ %463, %462 ], !dbg !34
  %464 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i63 = icmp eq i32 %464, 0, !dbg !34
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i66 = icmp eq i32 %465, 0, !dbg !34
  br i1 %.not.i63, label %471, label %466, !dbg !34

466:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %469, label %467, !dbg !34

467:                                              ; preds = %466
  %468 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %305) #4, !dbg !34
  br label %__nv_sqrtf.exit67, !dbg !34

469:                                              ; preds = %466
  %470 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %305) #4, !dbg !34
  br label %__nv_sqrtf.exit67, !dbg !34

471:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %474, label %472, !dbg !34

472:                                              ; preds = %471
  %473 = tail call float @llvm.nvvm.sqrt.rn.f(float %305) #4, !dbg !34
  br label %__nv_sqrtf.exit67, !dbg !34

474:                                              ; preds = %471
  %475 = tail call float @llvm.nvvm.sqrt.approx.f(float %305) #4, !dbg !34
  br label %__nv_sqrtf.exit67, !dbg !34

__nv_sqrtf.exit67:                                ; preds = %467, %469, %472, %474
  %.0.i65 = phi float [ %468, %467 ], [ %470, %469 ], [ %473, %472 ], [ %475, %474 ], !dbg !34
  %476 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i68 = icmp eq i32 %476, 0, !dbg !34
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i71 = icmp eq i32 %477, 0, !dbg !34
  br i1 %.not.i68, label %483, label %478, !dbg !34

478:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %481, label %479, !dbg !34

479:                                              ; preds = %478
  %480 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %306) #4, !dbg !34
  br label %__nv_sqrtf.exit72, !dbg !34

481:                                              ; preds = %478
  %482 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %306) #4, !dbg !34
  br label %__nv_sqrtf.exit72, !dbg !34

483:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %486, label %484, !dbg !34

484:                                              ; preds = %483
  %485 = tail call float @llvm.nvvm.sqrt.rn.f(float %306) #4, !dbg !34
  br label %__nv_sqrtf.exit72, !dbg !34

486:                                              ; preds = %483
  %487 = tail call float @llvm.nvvm.sqrt.approx.f(float %306) #4, !dbg !34
  br label %__nv_sqrtf.exit72, !dbg !34

__nv_sqrtf.exit72:                                ; preds = %479, %481, %484, %486
  %.0.i70 = phi float [ %480, %479 ], [ %482, %481 ], [ %485, %484 ], [ %487, %486 ], !dbg !34
  %488 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i73 = icmp eq i32 %488, 0, !dbg !34
  %489 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i76 = icmp eq i32 %489, 0, !dbg !34
  br i1 %.not.i73, label %495, label %490, !dbg !34

490:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %493, label %491, !dbg !34

491:                                              ; preds = %490
  %492 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %307) #4, !dbg !34
  br label %__nv_sqrtf.exit77, !dbg !34

493:                                              ; preds = %490
  %494 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %307) #4, !dbg !34
  br label %__nv_sqrtf.exit77, !dbg !34

495:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %498, label %496, !dbg !34

496:                                              ; preds = %495
  %497 = tail call float @llvm.nvvm.sqrt.rn.f(float %307) #4, !dbg !34
  br label %__nv_sqrtf.exit77, !dbg !34

498:                                              ; preds = %495
  %499 = tail call float @llvm.nvvm.sqrt.approx.f(float %307) #4, !dbg !34
  br label %__nv_sqrtf.exit77, !dbg !34

__nv_sqrtf.exit77:                                ; preds = %491, %493, %496, %498
  %.0.i75 = phi float [ %492, %491 ], [ %494, %493 ], [ %497, %496 ], [ %499, %498 ], !dbg !34
  %500 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !35
  %501 = fadd float %.0.i5, 0x3DDB7CDFE0000000, !dbg !35
  %502 = fadd float %.0.i10, 0x3DDB7CDFE0000000, !dbg !35
  %503 = fadd float %.0.i15, 0x3DDB7CDFE0000000, !dbg !35
  %504 = fadd float %.0.i20, 0x3DDB7CDFE0000000, !dbg !35
  %505 = fadd float %.0.i25, 0x3DDB7CDFE0000000, !dbg !35
  %506 = fadd float %.0.i30, 0x3DDB7CDFE0000000, !dbg !35
  %507 = fadd float %.0.i35, 0x3DDB7CDFE0000000, !dbg !35
  %508 = fadd float %.0.i40, 0x3DDB7CDFE0000000, !dbg !35
  %509 = fadd float %.0.i45, 0x3DDB7CDFE0000000, !dbg !35
  %510 = fadd float %.0.i50, 0x3DDB7CDFE0000000, !dbg !35
  %511 = fadd float %.0.i55, 0x3DDB7CDFE0000000, !dbg !35
  %512 = fadd float %.0.i60, 0x3DDB7CDFE0000000, !dbg !35
  %513 = fadd float %.0.i65, 0x3DDB7CDFE0000000, !dbg !35
  %514 = fadd float %.0.i70, 0x3DDB7CDFE0000000, !dbg !35
  %515 = fadd float %.0.i75, 0x3DDB7CDFE0000000, !dbg !35
  %516 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %500) #4, !dbg !36
  %517 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %501) #4, !dbg !36
  %518 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %502) #4, !dbg !36
  %519 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %503) #4, !dbg !36
  %520 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %504) #4, !dbg !36
  %521 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %505) #4, !dbg !36
  %522 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %506) #4, !dbg !36
  %523 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %507) #4, !dbg !36
  %524 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %508) #4, !dbg !36
  %525 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %509) #4, !dbg !36
  %526 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %510) #4, !dbg !36
  %527 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %511) #4, !dbg !36
  %528 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %512) #4, !dbg !36
  %529 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %513) #4, !dbg !36
  %530 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %514) #4, !dbg !36
  %531 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float %515) #4, !dbg !36
  %532 = shl i32 %15, 10, !dbg !37
  %533 = shl i32 %16, 10, !dbg !37
  %534 = shl i32 %17, 10, !dbg !37
  %535 = shl i32 %18, 10, !dbg !37
  %536 = add i32 %32, %532, !dbg !38
  %537 = add i32 %32, %533, !dbg !38
  %538 = add i32 %32, %534, !dbg !38
  %539 = add i32 %32, %535, !dbg !38
  %540 = sext i32 %536 to i64, !dbg !39
  %541 = getelementptr float, ptr addrspace(1) %2, i64 %540, !dbg !39
  %542 = sext i32 %537 to i64, !dbg !39
  %543 = getelementptr float, ptr addrspace(1) %2, i64 %542, !dbg !39
  %544 = sext i32 %538 to i64, !dbg !39
  %545 = getelementptr float, ptr addrspace(1) %2, i64 %544, !dbg !39
  %546 = sext i32 %539 to i64, !dbg !39
  %547 = getelementptr float, ptr addrspace(1) %2, i64 %546, !dbg !39
  %548 = bitcast float %516 to i32, !dbg !40
  %549 = bitcast float %517 to i32, !dbg !40
  %550 = bitcast float %518 to i32, !dbg !40
  %551 = bitcast float %519 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %548, i32 %549, i32 %550, i32 %551, ptr addrspace(1) %541, i1 %66) #4, !dbg !40
  %552 = bitcast float %520 to i32, !dbg !40
  %553 = bitcast float %521 to i32, !dbg !40
  %554 = bitcast float %522 to i32, !dbg !40
  %555 = bitcast float %523 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %552, i32 %553, i32 %554, i32 %555, ptr addrspace(1) %543, i1 %67) #4, !dbg !40
  %556 = bitcast float %524 to i32, !dbg !40
  %557 = bitcast float %525 to i32, !dbg !40
  %558 = bitcast float %526 to i32, !dbg !40
  %559 = bitcast float %527 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %556, i32 %557, i32 %558, i32 %559, ptr addrspace(1) %545, i1 %68) #4, !dbg !40
  %560 = bitcast float %528 to i32, !dbg !40
  %561 = bitcast float %529 to i32, !dbg !40
  %562 = bitcast float %530 to i32, !dbg !40
  %563 = bitcast float %531 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %560, i32 %561, i32 %562, i32 %563, ptr addrspace(1) %547, i1 %69) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cszwukoikas5ylhcvteoimxoz4c6dcc6kaccztylhanagbhoi73e.py", directory: "inductor_cache/sz")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_13", linkageName: "triton_poi_fused_add_div_sqrt_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 51, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 64, scope: !7)
!28 = !DILocation(line: 32, column: 56, scope: !7)
!29 = !DILocation(line: 33, column: 40, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 45, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 36, column: 26, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 35, scope: !7)
!38 = !DILocation(line: 40, column: 30, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 46, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
