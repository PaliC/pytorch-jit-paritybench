; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = sdiv i32 %16, 64, !dbg !14
  %.frozen1 = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen1, 98304, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %19 = sdiv i32 %.frozen, 8, !dbg !16
  %20 = srem i32 %19, 8, !dbg !17
  %21 = mul i32 %19, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %21, !dbg !18
  %22 = mul i32 %18, 98304, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %22, !dbg !19
  %23 = shl nsw i32 %18, 15, !dbg !20
  %24 = add nsw i32 %23, %srem.decomposed, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = shl nsw i32 %18, 16, !dbg !23
  %28 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !24
  %29 = insertelement <2 x i32> %28, i32 %17, i64 1, !dbg !24
  %30 = srem <2 x i32> %29, <i32 64, i32 1536>, !dbg !24
  %31 = extractelement <2 x i32> %30, i64 1, !dbg !25
  %32 = icmp slt i32 %31, 512, !dbg !26
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #1, !dbg !27
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !27
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !27
  %36 = icmp sgt i32 %31, 511, !dbg !25
  %37 = insertelement <2 x i32> <i32 poison, i32 -512>, i32 %27, i64 0, !dbg !28
  %38 = add nsw <2 x i32> %37, %30, !dbg !28
  %39 = extractelement <2 x i32> %38, i64 1, !dbg !29
  %40 = shl nsw i32 %39, 6, !dbg !29
  %41 = extractelement <2 x i32> %38, i64 0, !dbg !30
  %42 = add nsw i32 %41, %40, !dbg !30
  %43 = sext i32 %42 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !31
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #1, !dbg !32
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !32
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !32
  %48 = bitcast i32 %46 to float, !dbg !32
  %49 = bitcast i32 %47 to float, !dbg !32
  %50 = sext i32 %20 to i64, !dbg !33
  %51 = getelementptr i64, ptr addrspace(1) %2, i64 %50, !dbg !33
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %51, i1 %36, i1 %36) #1, !dbg !34
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %51, i1 %36, i1 %36) #1, !dbg !34
  %54 = lshr i64 %52, 61, !dbg !35
  %55 = and i64 %54, 4, !dbg !35
  %56 = add i64 %55, %52, !dbg !35
  %57 = sext i32 %.decomposed to i64, !dbg !36
  %58 = getelementptr i64, ptr addrspace(1) %3, i64 %57, !dbg !36
  %59 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %58, i1 %36, i1 %36, i1 %36) #1, !dbg !37
  %60 = extractvalue { i64, i64 } %59, 0, !dbg !37
  %61 = extractvalue { i64, i64 } %59, 1, !dbg !37
  %62 = lshr i64 %60, 61, !dbg !38
  %63 = and i64 %62, 4, !dbg !38
  %64 = lshr i64 %61, 61, !dbg !38
  %65 = and i64 %64, 4, !dbg !38
  %66 = shl i64 %56, 2, !dbg !39
  %67 = shl nsw i32 %39, 4, !dbg !40
  %68 = sext i32 %67 to i64, !dbg !41
  %69 = shl nsw i32 %18, 14, !dbg !42
  %70 = sext i32 %69 to i64, !dbg !43
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !44
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %63, !dbg !44
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %66, !dbg !44
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %68, !dbg !44
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %70, !dbg !44
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !44
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %65, !dbg !44
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %66, !dbg !44
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %68, !dbg !44
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %70, !dbg !44
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %36, i32 0, i1 %36) #1, !dbg !45
  %82 = bitcast i32 %81 to float, !dbg !45
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %36, i32 0, i1 %36) #1, !dbg !45
  %84 = bitcast i32 %83 to float, !dbg !45
  %85 = getelementptr i64, ptr addrspace(1) %5, i64 %57, !dbg !46
  %86 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %85, i1 %36, i1 %36, i1 %36) #1, !dbg !47
  %87 = extractvalue { i64, i64 } %86, 0, !dbg !47
  %88 = extractvalue { i64, i64 } %86, 1, !dbg !47
  %89 = lshr i64 %87, 61, !dbg !48
  %90 = and i64 %89, 4, !dbg !48
  %91 = lshr i64 %88, 61, !dbg !48
  %92 = and i64 %91, 4, !dbg !48
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %87, !dbg !49
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %90, !dbg !49
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %66, !dbg !49
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %68, !dbg !49
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %70, !dbg !49
  %98 = getelementptr float, ptr addrspace(1) %4, i64 %88, !dbg !49
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %92, !dbg !49
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %66, !dbg !49
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %68, !dbg !49
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %70, !dbg !49
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %36, i32 0, i1 %36) #1, !dbg !50
  %104 = bitcast i32 %103 to float, !dbg !50
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %36, i32 0, i1 %36) #1, !dbg !50
  %106 = bitcast i32 %105 to float, !dbg !50
  %107 = fsub float %104, %82, !dbg !51
  %108 = fsub float %106, %84, !dbg !51
  %109 = getelementptr float, ptr addrspace(1) %6, i64 %57, !dbg !52
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %109, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #1, !dbg !53
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !53
  %112 = extractvalue { i32, i32 } %110, 1, !dbg !53
  %113 = bitcast i32 %111 to float, !dbg !53
  %114 = bitcast i32 %112 to float, !dbg !53
  %115 = fmul float %107, %113, !dbg !54
  %116 = fmul float %108, %114, !dbg !54
  %117 = fadd float %115, %82, !dbg !55
  %118 = fadd float %116, %84, !dbg !55
  %119 = fsub float %117, %48, !dbg !56
  %120 = fsub float %118, %49, !dbg !56
  %121 = getelementptr float, ptr addrspace(1) %7, i64 %50, !dbg !57
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %36, i32 0, i1 %36) #1, !dbg !58
  %123 = bitcast i32 %122 to float, !dbg !58
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %36, i32 0, i1 %36) #1, !dbg !58
  %125 = bitcast i32 %124 to float, !dbg !58
  %126 = fmul float %119, %123, !dbg !59
  %127 = fmul float %120, %125, !dbg !59
  %128 = fadd float %126, %48, !dbg !60
  %129 = fadd float %127, %49, !dbg !60
  %130 = sext i32 %16 to i64, !dbg !61
  %131 = getelementptr float, ptr addrspace(1) %8, i64 %130, !dbg !61
  %132 = bitcast float %128 to i32, !dbg !62
  %133 = select i1 %32, i32 %34, i32 %132, !dbg !63
  %134 = bitcast float %129 to i32, !dbg !62
  %135 = select i1 %32, i32 %35, i32 %134, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %135, ptr addrspace(1) %131, i1 true) #1, !dbg !62
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctzdx3utsxjjgyzy24o6mveb65msylrdoceurexmptt2v77gn5pj.py", directory: "inductor_cache/tz")
!4 = !{ptr @triton_poi_fused_cat_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_25, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_25", linkageName: "triton_poi_fused_cat_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 26, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 51, scope: !7)
!21 = !DILocation(line: 35, column: 45, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 39, column: 60, scope: !7)
!24 = !DILocation(line: 26, column: 19, scope: !7)
!25 = !DILocation(line: 36, column: 19, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 56, scope: !7)
!28 = !DILocation(line: 39, column: 35, scope: !7)
!29 = !DILocation(line: 39, column: 39, scope: !7)
!30 = !DILocation(line: 39, column: 54, scope: !7)
!31 = !DILocation(line: 39, column: 30, scope: !7)
!32 = !DILocation(line: 39, column: 65, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 36, scope: !7)
!35 = !DILocation(line: 44, column: 35, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 36, scope: !7)
!38 = !DILocation(line: 48, column: 35, scope: !7)
!39 = !DILocation(line: 49, column: 41, scope: !7)
!40 = !DILocation(line: 49, column: 53, scope: !7)
!41 = !DILocation(line: 49, column: 49, scope: !7)
!42 = !DILocation(line: 49, column: 74, scope: !7)
!43 = !DILocation(line: 49, column: 68, scope: !7)
!44 = !DILocation(line: 49, column: 31, scope: !7)
!45 = !DILocation(line: 49, column: 79, scope: !7)
!46 = !DILocation(line: 50, column: 31, scope: !7)
!47 = !DILocation(line: 50, column: 36, scope: !7)
!48 = !DILocation(line: 53, column: 35, scope: !7)
!49 = !DILocation(line: 54, column: 31, scope: !7)
!50 = !DILocation(line: 54, column: 79, scope: !7)
!51 = !DILocation(line: 55, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 31, scope: !7)
!53 = !DILocation(line: 56, column: 36, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 31, scope: !7)
!58 = !DILocation(line: 60, column: 36, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 19, scope: !7)
!61 = !DILocation(line: 66, column: 25, scope: !7)
!62 = !DILocation(line: 66, column: 37, scope: !7)
!63 = !DILocation(line: 65, column: 33, scope: !7)
!64 = !DILocation(line: 66, column: 4, scope: !7)
