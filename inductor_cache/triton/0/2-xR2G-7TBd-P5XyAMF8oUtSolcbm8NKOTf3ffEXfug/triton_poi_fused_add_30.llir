; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = or disjoint i32 %11, 64, !dbg !12
  %13 = or disjoint i32 %11, 128, !dbg !12
  %14 = or disjoint i32 %11, 192, !dbg !12
  %15 = shl i32 %9, 2, !dbg !12
  %16 = and i32 %15, 12, !dbg !12
  %17 = and i32 %15, 252, !dbg !12
  %18 = and i32 %9, 255, !dbg !12
  %19 = or disjoint i32 %8, %11, !dbg !13
  %20 = or disjoint i32 %8, %12, !dbg !13
  %21 = or disjoint i32 %8, %13, !dbg !13
  %22 = or disjoint i32 %8, %14, !dbg !13
  %23 = or disjoint i32 %8, %17, !dbg !13
  %24 = or disjoint i32 %8, %18, !dbg !13
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %26 = shl i32 %25, 4, !dbg !15
  %27 = lshr i32 %9, 6, !dbg !16
  %28 = and i32 %27, 3, !dbg !16
  %29 = or disjoint i32 %26, %16, !dbg !17
  %30 = or disjoint i32 %26, %28, !dbg !17
  %31 = or disjoint i32 %30, 4, !dbg !17
  %32 = or disjoint i32 %30, 8, !dbg !17
  %33 = or disjoint i32 %30, 12, !dbg !17
  %34 = icmp slt i32 %29, 16, !dbg !18
  %35 = icmp slt i32 %30, 16, !dbg !18
  %36 = icmp slt i32 %31, 16, !dbg !18
  %37 = icmp slt i32 %32, 16, !dbg !18
  %38 = icmp slt i32 %33, 16, !dbg !18
  %39 = srem i32 %24, 512, !dbg !19
  %40 = shl i32 %19, 4, !dbg !20
  %41 = shl i32 %20, 4, !dbg !20
  %42 = shl i32 %21, 4, !dbg !20
  %43 = shl i32 %22, 4, !dbg !20
  %44 = add i32 %29, %40, !dbg !21
  %45 = add i32 %29, %41, !dbg !21
  %46 = add i32 %29, %42, !dbg !21
  %47 = add i32 %29, %43, !dbg !21
  %48 = sext i32 %44 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = sext i32 %45 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = sext i32 %46 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !22
  %54 = sext i32 %47 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !22
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %34) #2, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !23
  %61 = bitcast i32 %57 to float, !dbg !23
  %62 = bitcast i32 %58 to float, !dbg !23
  %63 = bitcast i32 %59 to float, !dbg !23
  %64 = bitcast i32 %60 to float, !dbg !23
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %34) #2, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !23
  %70 = bitcast i32 %66 to float, !dbg !23
  %71 = bitcast i32 %67 to float, !dbg !23
  %72 = bitcast i32 %68 to float, !dbg !23
  %73 = bitcast i32 %69 to float, !dbg !23
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %34) #2, !dbg !23
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !23
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !23
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !23
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !23
  %79 = bitcast i32 %75 to float, !dbg !23
  %80 = bitcast i32 %76 to float, !dbg !23
  %81 = bitcast i32 %77 to float, !dbg !23
  %82 = bitcast i32 %78 to float, !dbg !23
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %34) #2, !dbg !23
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !23
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !23
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !23
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !23
  %88 = bitcast i32 %84 to float, !dbg !23
  %89 = bitcast i32 %85 to float, !dbg !23
  %90 = bitcast i32 %86 to float, !dbg !23
  %91 = bitcast i32 %87 to float, !dbg !23
  %92 = shl i32 %30, 11, !dbg !24
  %93 = shl i32 %31, 11, !dbg !24
  %94 = shl i32 %32, 11, !dbg !24
  %95 = shl i32 %33, 11, !dbg !24
  %96 = add i32 %92, %23, !dbg !25
  %97 = add i32 %23, %93, !dbg !25
  %98 = add i32 %23, %94, !dbg !25
  %99 = add i32 %23, %95, !dbg !25
  %100 = sext i32 %96 to i64, !dbg !26
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !26
  %102 = sext i32 %97 to i64, !dbg !26
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !26
  %104 = sext i32 %98 to i64, !dbg !26
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !26
  %106 = sext i32 %99 to i64, !dbg !26
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !26
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %35) #2, !dbg !27
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !27
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !27
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !27
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %36) #2, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !27
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %37) #2, !dbg !27
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !27
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !27
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !27
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %38) #2, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !27
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !27
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !27
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !27
  %128 = shl i32 %9, 6, !dbg !27
  %129 = and i32 %128, 4032, !dbg !27
  %130 = or disjoint i32 %129, %28, !dbg !27
  %131 = and i32 %15, 1020, !dbg !27
  %132 = lshr exact i32 %129, 2, !dbg !27
  %133 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %132, !dbg !27
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %130, !dbg !27
  %135 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !27
  %136 = or disjoint i32 %130, 16, !dbg !27
  %137 = lshr i32 %136, 4, !dbg !27
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !27
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !27
  %140 = insertelement <1 x i32> poison, i32 %110, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !27
  %141 = or disjoint i32 %130, 32, !dbg !27
  %142 = lshr i32 %141, 4, !dbg !27
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !27
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !27
  %145 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !27
  %146 = or disjoint i32 %130, 48, !dbg !27
  %147 = lshr i32 %146, 4, !dbg !27
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !27
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !27
  %150 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !27
  %151 = or disjoint i32 %130, 4, !dbg !27
  %152 = getelementptr float, ptr addrspace(3) %133, i32 %151, !dbg !27
  %153 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !27
  %154 = or disjoint i32 %130, 20, !dbg !27
  %155 = lshr i32 %154, 4, !dbg !27
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !27
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %154, !dbg !27
  %158 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !27
  %159 = or disjoint i32 %130, 36, !dbg !27
  %160 = lshr i32 %159, 4, !dbg !27
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !27
  %162 = getelementptr float, ptr addrspace(3) %161, i32 %159, !dbg !27
  %163 = insertelement <1 x i32> poison, i32 %116, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !27
  %164 = or disjoint i32 %130, 52, !dbg !27
  %165 = lshr i32 %164, 4, !dbg !27
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !27
  %167 = getelementptr float, ptr addrspace(3) %166, i32 %164, !dbg !27
  %168 = insertelement <1 x i32> poison, i32 %117, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !27
  %169 = or disjoint i32 %130, 8, !dbg !27
  %170 = getelementptr float, ptr addrspace(3) %133, i32 %169, !dbg !27
  %171 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !27
  %172 = or disjoint i32 %130, 24, !dbg !27
  %173 = lshr i32 %172, 4, !dbg !27
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !27
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %172, !dbg !27
  %176 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #2, !dbg !27
  %177 = or disjoint i32 %130, 40, !dbg !27
  %178 = lshr i32 %177, 4, !dbg !27
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !27
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %177, !dbg !27
  %181 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !27
  %182 = or disjoint i32 %130, 56, !dbg !27
  %183 = lshr i32 %182, 4, !dbg !27
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !27
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %182, !dbg !27
  %186 = insertelement <1 x i32> poison, i32 %122, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !27
  %187 = or disjoint i32 %130, 12, !dbg !27
  %188 = getelementptr float, ptr addrspace(3) %133, i32 %187, !dbg !27
  %189 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !27
  %190 = or disjoint i32 %130, 28, !dbg !27
  %191 = lshr i32 %190, 4, !dbg !27
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !27
  %193 = getelementptr float, ptr addrspace(3) %192, i32 %190, !dbg !27
  %194 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #2, !dbg !27
  %195 = or disjoint i32 %130, 44, !dbg !27
  %196 = lshr i32 %195, 4, !dbg !27
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !27
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %195, !dbg !27
  %199 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #2, !dbg !27
  %200 = or disjoint i32 %130, 60, !dbg !27
  %201 = lshr i32 %200, 4, !dbg !27
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !27
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %200, !dbg !27
  %204 = insertelement <1 x i32> poison, i32 %127, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %205 = lshr i32 %131, 4, !dbg !27
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !27
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %131, !dbg !27
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !27
  %209 = or disjoint i32 %131, 1, !dbg !27
  %210 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %209, !dbg !27
  %211 = load float, ptr addrspace(3) %210, align 4, !dbg !27
  %212 = or disjoint i32 %131, 2, !dbg !27
  %213 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %212, !dbg !27
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !27
  %215 = or disjoint i32 %131, 3, !dbg !27
  %216 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %215, !dbg !27
  %217 = load float, ptr addrspace(3) %216, align 4, !dbg !27
  %218 = or disjoint i32 %131, 1024, !dbg !27
  %219 = lshr i32 %218, 4, !dbg !27
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %219, !dbg !27
  %221 = getelementptr inbounds float, ptr addrspace(3) %220, i32 %218, !dbg !27
  %222 = load float, ptr addrspace(3) %221, align 4, !dbg !27
  %223 = or disjoint i32 %131, 1025, !dbg !27
  %224 = lshr i32 %223, 4, !dbg !27
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !27
  %226 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %223, !dbg !27
  %227 = load float, ptr addrspace(3) %226, align 4, !dbg !27
  %228 = or disjoint i32 %131, 1026, !dbg !27
  %229 = lshr i32 %228, 4, !dbg !27
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !27
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %228, !dbg !27
  %232 = load float, ptr addrspace(3) %231, align 4, !dbg !27
  %233 = or disjoint i32 %131, 1027, !dbg !27
  %234 = lshr i32 %233, 4, !dbg !27
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !27
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %233, !dbg !27
  %237 = load float, ptr addrspace(3) %236, align 4, !dbg !27
  %238 = or disjoint i32 %131, 2048, !dbg !27
  %239 = lshr i32 %238, 4, !dbg !27
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %239, !dbg !27
  %241 = getelementptr inbounds float, ptr addrspace(3) %240, i32 %238, !dbg !27
  %242 = load float, ptr addrspace(3) %241, align 4, !dbg !27
  %243 = or disjoint i32 %131, 2049, !dbg !27
  %244 = lshr i32 %243, 4, !dbg !27
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !27
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %243, !dbg !27
  %247 = load float, ptr addrspace(3) %246, align 4, !dbg !27
  %248 = or disjoint i32 %131, 2050, !dbg !27
  %249 = lshr i32 %248, 4, !dbg !27
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !27
  %251 = getelementptr inbounds float, ptr addrspace(3) %250, i32 %248, !dbg !27
  %252 = load float, ptr addrspace(3) %251, align 4, !dbg !27
  %253 = or disjoint i32 %131, 2051, !dbg !27
  %254 = lshr i32 %253, 4, !dbg !27
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !27
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %253, !dbg !27
  %257 = load float, ptr addrspace(3) %256, align 4, !dbg !27
  %258 = or disjoint i32 %131, 3072, !dbg !27
  %259 = lshr i32 %258, 4, !dbg !27
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !27
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %258, !dbg !27
  %262 = load float, ptr addrspace(3) %261, align 4, !dbg !27
  %263 = or disjoint i32 %131, 3073, !dbg !27
  %264 = lshr i32 %263, 4, !dbg !27
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !27
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %263, !dbg !27
  %267 = load float, ptr addrspace(3) %266, align 4, !dbg !27
  %268 = or disjoint i32 %131, 3074, !dbg !27
  %269 = lshr i32 %268, 4, !dbg !27
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !27
  %271 = getelementptr inbounds float, ptr addrspace(3) %270, i32 %268, !dbg !27
  %272 = load float, ptr addrspace(3) %271, align 4, !dbg !27
  %273 = or disjoint i32 %131, 3075, !dbg !27
  %274 = lshr i32 %273, 4, !dbg !27
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !27
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %273, !dbg !27
  %277 = load float, ptr addrspace(3) %276, align 4, !dbg !27
  %278 = sext i32 %39 to i64, !dbg !28
  %279 = getelementptr float, ptr addrspace(1) %2, i64 %278, !dbg !28
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %279, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %.idx = shl nuw nsw i32 %18, 3, !dbg !30
  %281 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !30
  %282 = insertelement <1 x i32> poison, i32 %280, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %.idx4 = shl nuw nsw i32 %11, 3, !dbg !30
  %283 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !30
  %284 = load float, ptr addrspace(3) %283, align 8, !dbg !30
  %.idx5 = shl nuw nsw i32 %12, 3, !dbg !30
  %285 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !30
  %286 = load float, ptr addrspace(3) %285, align 8, !dbg !30
  %.idx6 = shl nuw nsw i32 %13, 3, !dbg !30
  %287 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !30
  %288 = load float, ptr addrspace(3) %287, align 8, !dbg !30
  %.idx7 = shl nuw nsw i32 %14, 3, !dbg !30
  %289 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !30
  %290 = load float, ptr addrspace(3) %289, align 8, !dbg !30
  %291 = fadd float %208, %284, !dbg !31
  %292 = fadd float %211, %284, !dbg !31
  %293 = fadd float %214, %284, !dbg !31
  %294 = fadd float %217, %284, !dbg !31
  %295 = fadd float %222, %286, !dbg !31
  %296 = fadd float %227, %286, !dbg !31
  %297 = fadd float %232, %286, !dbg !31
  %298 = fadd float %237, %286, !dbg !31
  %299 = fadd float %242, %288, !dbg !31
  %300 = fadd float %247, %288, !dbg !31
  %301 = fadd float %252, %288, !dbg !31
  %302 = fadd float %257, %288, !dbg !31
  %303 = fadd float %262, %290, !dbg !31
  %304 = fadd float %267, %290, !dbg !31
  %305 = fadd float %272, %290, !dbg !31
  %306 = fadd float %277, %290, !dbg !31
  %307 = fadd float %291, %61, !dbg !30
  %308 = fadd float %292, %62, !dbg !30
  %309 = fadd float %293, %63, !dbg !30
  %310 = fadd float %294, %64, !dbg !30
  %311 = fadd float %295, %70, !dbg !30
  %312 = fadd float %296, %71, !dbg !30
  %313 = fadd float %297, %72, !dbg !30
  %314 = fadd float %298, %73, !dbg !30
  %315 = fadd float %299, %79, !dbg !30
  %316 = fadd float %300, %80, !dbg !30
  %317 = fadd float %301, %81, !dbg !30
  %318 = fadd float %302, %82, !dbg !30
  %319 = fadd float %303, %88, !dbg !30
  %320 = fadd float %304, %89, !dbg !30
  %321 = fadd float %305, %90, !dbg !30
  %322 = fadd float %306, %91, !dbg !30
  %323 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !32
  %324 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !32
  %325 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !32
  %326 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !32
  %327 = bitcast float %307 to i32, !dbg !33
  %328 = bitcast float %308 to i32, !dbg !33
  %329 = bitcast float %309 to i32, !dbg !33
  %330 = bitcast float %310 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %327, i32 %328, i32 %329, i32 %330, ptr addrspace(1) %323, i1 %34) #2, !dbg !33
  %331 = bitcast float %311 to i32, !dbg !33
  %332 = bitcast float %312 to i32, !dbg !33
  %333 = bitcast float %313 to i32, !dbg !33
  %334 = bitcast float %314 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %332, i32 %333, i32 %334, ptr addrspace(1) %324, i1 %34) #2, !dbg !33
  %335 = bitcast float %315 to i32, !dbg !33
  %336 = bitcast float %316 to i32, !dbg !33
  %337 = bitcast float %317 to i32, !dbg !33
  %338 = bitcast float %318 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %335, i32 %336, i32 %337, i32 %338, ptr addrspace(1) %325, i1 %34) #2, !dbg !33
  %339 = bitcast float %319 to i32, !dbg !33
  %340 = bitcast float %320 to i32, !dbg !33
  %341 = bitcast float %321 to i32, !dbg !33
  %342 = bitcast float %322 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %339, i32 %340, i32 %341, i32 %342, ptr addrspace(1) %326, i1 %34) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmbqsxtocpa5jk2mgqfw3y2rmgqpsdgbesqoiacswh7l625pkfv5.py", directory: "inductor_cache/mb")
!4 = !{ptr @triton_poi_fused_add_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_30, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_30", linkageName: "triton_poi_fused_add_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 38, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 40, scope: !7)
!25 = !DILocation(line: 32, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 45, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 44, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
