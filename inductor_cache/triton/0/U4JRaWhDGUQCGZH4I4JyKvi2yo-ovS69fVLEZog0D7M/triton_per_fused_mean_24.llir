; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_24(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 24, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 512, !dbg !14
  %15 = icmp slt i32 %13, 512, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen, 128, !dbg !16
  %18 = mul i32 %17, 128, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = shl i32 %7, 4, !dbg !18
  %20 = and i32 %19, 3968, !dbg !18
  %21 = shl i32 %17, 13, !dbg !19
  %22 = add i32 %21, %.decomposed, !dbg !20
  %23 = add i32 %22, %20, !dbg !21
  %24 = add i32 %22, 4096, !dbg !20
  %25 = add nuw i32 %24, %20, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !22
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = fadd float %35, %44, !dbg !24
  %49 = select i1 %14, float %48, float 0.000000e+00, !dbg !24
  %50 = fadd float %36, %45, !dbg !24
  %51 = select i1 %14, float %50, float 0.000000e+00, !dbg !24
  %52 = fadd float %37, %46, !dbg !24
  %53 = select i1 %14, float %52, float 0.000000e+00, !dbg !24
  %54 = fadd float %38, %47, !dbg !24
  %55 = select i1 %14, float %54, float 0.000000e+00, !dbg !24
  %56 = bitcast float %49 to i32, !dbg !29
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 16, i32 31), !dbg !29
  %58 = bitcast i32 %57 to float, !dbg !29
  %59 = fadd float %49, %58, !dbg !24
  %60 = bitcast float %59 to i32, !dbg !29
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 8, i32 31), !dbg !29
  %62 = bitcast i32 %61 to float, !dbg !29
  %63 = fadd float %59, %62, !dbg !24
  %64 = bitcast float %51 to i32, !dbg !29
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 16, i32 31), !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = fadd float %51, %66, !dbg !24
  %68 = bitcast float %67 to i32, !dbg !29
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 8, i32 31), !dbg !29
  %70 = bitcast i32 %69 to float, !dbg !29
  %71 = fadd float %67, %70, !dbg !24
  %72 = bitcast float %53 to i32, !dbg !29
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = fadd float %53, %74, !dbg !24
  %76 = bitcast float %75 to i32, !dbg !29
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !29
  %78 = bitcast i32 %77 to float, !dbg !29
  %79 = fadd float %75, %78, !dbg !24
  %80 = bitcast float %55 to i32, !dbg !29
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !29
  %82 = bitcast i32 %81 to float, !dbg !29
  %83 = fadd float %55, %82, !dbg !24
  %84 = bitcast float %83 to i32, !dbg !29
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 8, i32 31), !dbg !29
  %86 = bitcast i32 %85 to float, !dbg !29
  %87 = fadd float %83, %86, !dbg !24
  %88 = icmp eq i32 %8, 0, !dbg !29
  %89 = and i32 %16, 7, !dbg !29
  %90 = shl nuw nsw i32 %10, 3, !dbg !29
  %91 = or disjoint i32 %90, %89, !dbg !29
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !29
  %93 = bitcast float %63 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 %88) #3, !dbg !29
  %94 = or disjoint i32 %90, 8, !dbg !29
  %95 = or disjoint i32 %94, %89, !dbg !29
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !29
  %97 = bitcast float %71 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 %88) #3, !dbg !29
  %98 = or disjoint i32 %90, 16, !dbg !29
  %99 = or disjoint i32 %98, %89, !dbg !29
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !29
  %101 = bitcast float %79 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 %88) #3, !dbg !29
  %102 = or disjoint i32 %90, 24, !dbg !29
  %103 = or disjoint i32 %102, %89, !dbg !29
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !29
  %105 = bitcast float %87 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 %88) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %106 = icmp slt i32 %7, 256, !dbg !29
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !29
  %108 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %107, i1 %106) #3, !dbg !29
  %109 = bitcast i32 %108 to float, !dbg !29
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = fadd float %109, %111, !dbg !24
  %113 = bitcast float %112 to i32, !dbg !29
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 2, i32 31), !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = fadd float %112, %115, !dbg !24
  %117 = bitcast float %116 to i32, !dbg !29
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = fadd float %116, %119, !dbg !24
  %121 = and i32 %7, 7, !dbg !29
  %122 = icmp eq i32 %121, 0, !dbg !29
  %123 = and i1 %106, %122, !dbg !29
  %124 = bitcast float %120 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %124, i1 %123) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !29
  %126 = load i32, ptr addrspace(3) %125, align 16, !dbg !29
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !29
  %128 = load i32, ptr addrspace(3) %127, align 16, !dbg !29
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !29
  %130 = load i32, ptr addrspace(3) %129, align 16, !dbg !29
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !29
  %132 = load i32, ptr addrspace(3) %131, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %133, i32 %126, i32 %128, i32 %130, i32 %132, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !30
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 6.400000e+01) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %137 = sext i32 %13 to i64, !dbg !32
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !32
  %139 = icmp eq i32 %89, 0, !dbg !33
  %140 = bitcast float %136 to i32, !dbg !33
  %141 = and i1 %139, %15, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %138, i1 %141) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co3gksmnzhzsbzrpjmvx5jsw2fcctg3fagy5gio2c4ypoivl3kn3.py", directory: "inductor_cache/o3")
!4 = !{ptr @triton_per_fused_mean_24, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_24, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_24", linkageName: "triton_per_fused_mean_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 49, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
!32 = !DILocation(line: 40, column: 28, scope: !7)
!33 = !DILocation(line: 40, column: 39, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
