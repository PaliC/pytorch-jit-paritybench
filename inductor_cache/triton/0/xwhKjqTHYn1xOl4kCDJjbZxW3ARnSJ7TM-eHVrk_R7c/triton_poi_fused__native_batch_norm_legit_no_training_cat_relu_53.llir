; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = ashr exact i32 %16, 2, !dbg !14
  %18 = srem i32 %17, 2560, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %19 = sdiv i32 %.frozen, 10240, !dbg !16
  %20 = sext i32 %18 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %32 = bitcast i32 %31 to float, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %34 = bitcast i32 %33 to float, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %45 = icmp slt i32 %18, 2048, !dbg !25
  %46 = mul i32 %19, 10240, !dbg !26
  %srem.decomposed = sub i32 %.frozen, %46, !dbg !26
  %47 = mul nsw i32 %19, 9216, !dbg !27
  %48 = add nsw i32 %47, %srem.decomposed, !dbg !28
  %49 = sext i32 %48 to i64, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !29
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !30
  %52 = mul nsw i32 %19, 8704, !dbg !31
  %53 = add nsw i32 %52, %srem.decomposed, !dbg !32
  %54 = sext i32 %53 to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !33
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !35
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !36
  %59 = and i32 %18, -256, !dbg !37
  %60 = icmp eq i32 %59, 2048, !dbg !37
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #3, !dbg !38
  %62 = and i32 %18, -128, !dbg !39
  %63 = icmp eq i32 %62, 2304, !dbg !39
  %64 = shl nsw i32 %18, 2, !dbg !40
  %65 = add nsw i32 %64, %52, !dbg !41
  %66 = sext i32 %65 to i64, !dbg !42
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !42
  %68 = getelementptr i8, ptr addrspace(1) %67, i64 -4096, !dbg !42
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #3, !dbg !43
  %70 = icmp sgt i32 %18, 2431, !dbg !44
  %71 = sext i32 %65 to i64, !dbg !45
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !45
  %73 = getelementptr i8, ptr addrspace(1) %72, i64 -6144, !dbg !45
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #3, !dbg !46
  %75 = fadd float %28, 0x3F50624DE0000000, !dbg !47
  %76 = fadd float %30, 0x3F50624DE0000000, !dbg !47
  %77 = fadd float %32, 0x3F50624DE0000000, !dbg !47
  %78 = fadd float %34, 0x3F50624DE0000000, !dbg !47
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i = icmp eq i32 %79, 0, !dbg !48
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i = icmp eq i32 %80, 0, !dbg !48
  br i1 %.not.i, label %86, label %81, !dbg !48

81:                                               ; preds = %10
  br i1 %.not1.i, label %84, label %82, !dbg !48

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

86:                                               ; preds = %10
  br i1 %.not1.i, label %89, label %87, !dbg !48

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

__nv_sqrtf.exit:                                  ; preds = %82, %84, %87, %89
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !48
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i5 = icmp eq i32 %91, 0, !dbg !48
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i8 = icmp eq i32 %92, 0, !dbg !48
  br i1 %.not.i5, label %98, label %93, !dbg !48

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %96, label %94, !dbg !48

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !48
  br label %__nv_sqrtf.exit9, !dbg !48

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !48
  br label %__nv_sqrtf.exit9, !dbg !48

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %101, label %99, !dbg !48

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !48
  br label %__nv_sqrtf.exit9, !dbg !48

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !48
  br label %__nv_sqrtf.exit9, !dbg !48

__nv_sqrtf.exit9:                                 ; preds = %94, %96, %99, %101
  %.0.i7 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !48
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i10 = icmp eq i32 %103, 0, !dbg !48
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i13 = icmp eq i32 %104, 0, !dbg !48
  br i1 %.not.i10, label %110, label %105, !dbg !48

105:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %108, label %106, !dbg !48

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !48
  br label %__nv_sqrtf.exit14, !dbg !48

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !48
  br label %__nv_sqrtf.exit14, !dbg !48

110:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %113, label %111, !dbg !48

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !48
  br label %__nv_sqrtf.exit14, !dbg !48

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !48
  br label %__nv_sqrtf.exit14, !dbg !48

__nv_sqrtf.exit14:                                ; preds = %106, %108, %111, %113
  %.0.i12 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !48
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i15 = icmp eq i32 %115, 0, !dbg !48
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i18 = icmp eq i32 %116, 0, !dbg !48
  br i1 %.not.i15, label %122, label %117, !dbg !48

117:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %120, label %118, !dbg !48

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit19, !dbg !48

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit19, !dbg !48

122:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %125, label %123, !dbg !48

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit19, !dbg !48

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !48
  br label %__nv_sqrtf.exit19, !dbg !48

__nv_sqrtf.exit19:                                ; preds = %118, %120, %123, %125
  %.0.i17 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !48
  %127 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !34
  %129 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !36
  %130 = icmp slt i32 %18, 2432, !dbg !49
  %131 = add nsw i32 %18, -2048, !dbg !50
  %132 = icmp ult i32 %131, 384, !dbg !50
  %133 = icmp slt i32 %18, 2304, !dbg !51
  %134 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !38
  %135 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !43
  %136 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !46
  %137 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !18
  %138 = insertelement <4 x i32> %137, i32 %24, i64 1, !dbg !18
  %139 = insertelement <4 x i32> %138, i32 %23, i64 2, !dbg !18
  %140 = insertelement <4 x i32> %139, i32 %22, i64 3, !dbg !18
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !18
  %142 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !34
  %144 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !36
  %145 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !38
  %146 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !43
  %147 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !46
  %148 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !30
  %149 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !36
  %151 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !38
  %152 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !43
  %153 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !46
  %154 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !30
  %155 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !36
  %157 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !38
  %158 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !43
  %159 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !46
  %160 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !24
  %161 = insertelement <4 x i32> %160, i32 %43, i64 1, !dbg !24
  %162 = insertelement <4 x i32> %161, i32 %42, i64 2, !dbg !24
  %163 = insertelement <4 x i32> %162, i32 %41, i64 3, !dbg !24
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !24
  %165 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !22
  %166 = insertelement <4 x i32> %165, i32 %38, i64 1, !dbg !22
  %167 = insertelement <4 x i32> %166, i32 %37, i64 2, !dbg !22
  %168 = insertelement <4 x i32> %167, i32 %36, i64 3, !dbg !22
  %169 = bitcast <4 x i32> %168 to <4 x float>, !dbg !22
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !52
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #3, !dbg !52
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #3, !dbg !52
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #3, !dbg !52
  %174 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !30
  %175 = insertelement <4 x i32> %174, i32 %142, i64 1, !dbg !30
  %176 = insertelement <4 x i32> %175, i32 %148, i64 2, !dbg !30
  %177 = insertelement <4 x i32> %176, i32 %154, i64 3, !dbg !30
  %178 = bitcast <4 x i32> %177 to <4 x float>, !dbg !30
  %179 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !34
  %180 = insertelement <4 x i32> %179, i32 %143, i64 1, !dbg !34
  %181 = insertelement <4 x i32> %180, i32 %149, i64 2, !dbg !34
  %182 = insertelement <4 x i32> %181, i32 %155, i64 3, !dbg !34
  %183 = bitcast <4 x i32> %182 to <4 x float>, !dbg !34
  %184 = fadd <4 x float> %178, %183, !dbg !53
  %185 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !36
  %186 = insertelement <4 x i32> %185, i32 %144, i64 1, !dbg !36
  %187 = insertelement <4 x i32> %186, i32 %150, i64 2, !dbg !36
  %188 = insertelement <4 x i32> %187, i32 %156, i64 3, !dbg !36
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !36
  %190 = fadd <4 x float> %184, %189, !dbg !54
  %191 = insertelement <4 x i1> poison, i1 %133, i64 0, !dbg !55
  %192 = shufflevector <4 x i1> %191, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !55
  %193 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !55
  %194 = insertelement <4 x i32> %193, i32 %145, i64 1, !dbg !55
  %195 = insertelement <4 x i32> %194, i32 %151, i64 2, !dbg !55
  %196 = insertelement <4 x i32> %195, i32 %157, i64 3, !dbg !55
  %197 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !55
  %198 = insertelement <4 x i32> %197, i32 %146, i64 1, !dbg !55
  %199 = insertelement <4 x i32> %198, i32 %152, i64 2, !dbg !55
  %200 = insertelement <4 x i32> %199, i32 %158, i64 3, !dbg !55
  %201 = select <4 x i1> %192, <4 x i32> %196, <4 x i32> %200, !dbg !55
  %202 = bitcast <4 x i32> %201 to <4 x float>, !dbg !55
  %203 = insertelement <4 x i1> poison, i1 %132, i64 0, !dbg !56
  %204 = shufflevector <4 x i1> %203, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !56
  %205 = select <4 x i1> %204, <4 x float> %202, <4 x float> zeroinitializer, !dbg !56
  %206 = insertelement <4 x i32> poison, i32 %136, i64 0, !dbg !46
  %207 = insertelement <4 x i32> %206, i32 %147, i64 1, !dbg !46
  %208 = insertelement <4 x i32> %207, i32 %153, i64 2, !dbg !46
  %209 = insertelement <4 x i32> %208, i32 %159, i64 3, !dbg !46
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !46
  %211 = insertelement <4 x i1> poison, i1 %130, i64 0, !dbg !57
  %212 = shufflevector <4 x i1> %211, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !57
  %213 = select <4 x i1> %212, <4 x float> %205, <4 x float> %210, !dbg !57
  %214 = insertelement <4 x i1> poison, i1 %45, i64 0, !dbg !58
  %215 = shufflevector <4 x i1> %214, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !58
  %216 = select <4 x i1> %215, <4 x float> %190, <4 x float> %213, !dbg !58
  %217 = fsub <4 x float> %216, %141, !dbg !59
  %218 = insertelement <4 x float> poison, float %173, i64 0, !dbg !60
  %219 = insertelement <4 x float> %218, float %172, i64 1, !dbg !60
  %220 = insertelement <4 x float> %219, float %171, i64 2, !dbg !60
  %221 = insertelement <4 x float> %220, float %170, i64 3, !dbg !60
  %222 = fmul <4 x float> %217, %221, !dbg !60
  %223 = fmul <4 x float> %222, %169, !dbg !61
  %224 = fadd <4 x float> %223, %164, !dbg !62
  %225 = fcmp olt <4 x float> %224, zeroinitializer, !dbg !63
  %226 = extractelement <4 x i1> %225, i64 3, !dbg !67
  %227 = extractelement <4 x i1> %225, i64 2, !dbg !67
  %228 = extractelement <4 x i1> %225, i64 1, !dbg !67
  %229 = extractelement <4 x i1> %225, i64 0, !dbg !67
  %230 = sext i32 %16 to i64, !dbg !68
  %231 = getelementptr float, ptr addrspace(1) %7, i64 %230, !dbg !68
  %bc = bitcast <4 x float> %216 to <4 x i32>, !dbg !69
  %232 = extractelement <4 x i32> %bc, i64 3, !dbg !69
  %bc20 = bitcast <4 x float> %216 to <4 x i32>, !dbg !69
  %233 = extractelement <4 x i32> %bc20, i64 2, !dbg !69
  %bc21 = bitcast <4 x float> %216 to <4 x i32>, !dbg !69
  %234 = extractelement <4 x i32> %bc21, i64 1, !dbg !69
  %bc22 = bitcast <4 x float> %216 to <4 x i32>, !dbg !69
  %235 = extractelement <4 x i32> %bc22, i64 0, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %232, i32 %233, i32 %234, i32 %235, ptr addrspace(1) %231, i1 true) #3, !dbg !69
  %236 = getelementptr float, ptr addrspace(1) %8, i64 %230, !dbg !70
  %bc23 = bitcast <4 x float> %224 to <4 x i32>, !dbg !71
  %237 = extractelement <4 x i32> %bc23, i64 3, !dbg !71
  %238 = select i1 %226, i32 0, i32 %237, !dbg !67
  %bc24 = bitcast <4 x float> %224 to <4 x i32>, !dbg !71
  %239 = extractelement <4 x i32> %bc24, i64 2, !dbg !71
  %240 = select i1 %227, i32 0, i32 %239, !dbg !67
  %bc25 = bitcast <4 x float> %224 to <4 x i32>, !dbg !71
  %241 = extractelement <4 x i32> %bc25, i64 1, !dbg !71
  %242 = select i1 %228, i32 0, i32 %241, !dbg !67
  %bc26 = bitcast <4 x float> %224 to <4 x i32>, !dbg !71
  %243 = extractelement <4 x i32> %bc26, i64 0, !dbg !71
  %244 = select i1 %229, i32 0, i32 %243, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %238, i32 %240, i32 %242, i32 %244, ptr addrspace(1) %236, i1 true) #3, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py", directory: "inductor_cache/ta")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_53, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_53, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_53", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 31, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 49, scope: !7)
!28 = !DILocation(line: 37, column: 44, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 54, scope: !7)
!31 = !DILocation(line: 38, column: 49, scope: !7)
!32 = !DILocation(line: 38, column: 44, scope: !7)
!33 = !DILocation(line: 38, column: 30, scope: !7)
!34 = !DILocation(line: 38, column: 54, scope: !7)
!35 = !DILocation(line: 40, column: 30, scope: !7)
!36 = !DILocation(line: 40, column: 54, scope: !7)
!37 = !DILocation(line: 58, column: 20, scope: !7)
!38 = !DILocation(line: 59, column: 72, scope: !7)
!39 = !DILocation(line: 63, column: 20, scope: !7)
!40 = !DILocation(line: 64, column: 46, scope: !7)
!41 = !DILocation(line: 64, column: 43, scope: !7)
!42 = !DILocation(line: 64, column: 31, scope: !7)
!43 = !DILocation(line: 64, column: 83, scope: !7)
!44 = !DILocation(line: 68, column: 21, scope: !7)
!45 = !DILocation(line: 72, column: 31, scope: !7)
!46 = !DILocation(line: 72, column: 83, scope: !7)
!47 = !DILocation(line: 79, column: 20, scope: !7)
!48 = !DILocation(line: 80, column: 27, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 82, column: 20, scope: !7)
!53 = !DILocation(line: 39, column: 18, scope: !7)
!54 = !DILocation(line: 41, column: 18, scope: !7)
!55 = !DILocation(line: 65, column: 35, scope: !7)
!56 = !DILocation(line: 67, column: 35, scope: !7)
!57 = !DILocation(line: 73, column: 35, scope: !7)
!58 = !DILocation(line: 0, scope: !7)
!59 = !DILocation(line: 77, column: 20, scope: !7)
!60 = !DILocation(line: 85, column: 20, scope: !7)
!61 = !DILocation(line: 86, column: 20, scope: !7)
!62 = !DILocation(line: 87, column: 20, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !66)
!64 = distinct !DILexicalBlockFile(scope: !7, file: !65, discriminator: 0)
!65 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!66 = !DILocation(line: 89, column: 42, scope: !7)
!67 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !66)
!68 = !DILocation(line: 90, column: 25, scope: !7)
!69 = !DILocation(line: 90, column: 37, scope: !7)
!70 = !DILocation(line: 91, column: 25, scope: !7)
!71 = !DILocation(line: 91, column: 37, scope: !7)
!72 = !DILocation(line: 91, column: 4, scope: !7)
