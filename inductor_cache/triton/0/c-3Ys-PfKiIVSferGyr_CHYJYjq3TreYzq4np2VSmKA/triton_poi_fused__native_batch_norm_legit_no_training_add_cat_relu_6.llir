; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 6, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 62, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = icmp slt i32 %17, 64, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %19 = sdiv i32 %.frozen, 4, !dbg !15
  %20 = srem i32 %19, 4, !dbg !16
  %21 = mul i32 %19, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %.frozen9 = freeze i32 %17, !dbg !18
  %22 = sdiv i32 %.frozen9, 16, !dbg !18
  %23 = sext i32 %17 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !19
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %18) #3, !dbg !20
  %26 = sext i32 %20 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %18) #3, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %18) #3, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #3, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #3, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #3, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %18) #3, !dbg !28
  %41 = icmp slt i32 %20, 2, !dbg !29
  %42 = mul i32 %22, 16, !dbg !30
  %srem.decomposed = sub i32 %.frozen9, %42, !dbg !30
  %43 = shl nsw i32 %22, 3, !dbg !31
  %44 = add nsw i32 %43, %srem.decomposed, !dbg !32
  %45 = sext i32 %44 to i64, !dbg !33
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !33
  %47 = and i1 %18, %41, !dbg !34
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #3, !dbg !35
  %49 = icmp eq i32 %20, 2, !dbg !36
  %50 = shl nsw i32 %22, 2, !dbg !37
  %51 = add nsw i32 %50, %.decomposed, !dbg !38
  %52 = sext i32 %51 to i64, !dbg !39
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !39
  %54 = and i1 %18, %49, !dbg !40
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #3, !dbg !41
  %56 = icmp sgt i32 %20, 2, !dbg !42
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !43
  %58 = and i1 %18, %56, !dbg !44
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #3, !dbg !45
  %60 = fadd float %32, 0x3EE4F8B580000000, !dbg !46
  %61 = fadd float %34, 0x3EE4F8B580000000, !dbg !46
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i = icmp eq i32 %62, 0, !dbg !47
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i = icmp eq i32 %63, 0, !dbg !47
  br i1 %.not.i, label %69, label %64, !dbg !47

64:                                               ; preds = %11
  br i1 %.not1.i, label %67, label %65, !dbg !47

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

69:                                               ; preds = %11
  br i1 %.not1.i, label %72, label %70, !dbg !47

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !47
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i4 = icmp eq i32 %74, 0, !dbg !47
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i7 = icmp eq i32 %75, 0, !dbg !47
  br i1 %.not.i4, label %81, label %76, !dbg !47

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %79, label %77, !dbg !47

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !47
  br label %__nv_sqrtf.exit8, !dbg !47

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !47
  br label %__nv_sqrtf.exit8, !dbg !47

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %84, label %82, !dbg !47

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !47
  br label %__nv_sqrtf.exit8, !dbg !47

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !47
  br label %__nv_sqrtf.exit8, !dbg !47

__nv_sqrtf.exit8:                                 ; preds = %77, %79, %82, %84
  %.0.i6 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !47
  %86 = extractvalue { i32, i32 } %48, 1, !dbg !35
  %87 = extractvalue { i32, i32 } %55, 1, !dbg !41
  %88 = extractvalue { i32, i32 } %59, 1, !dbg !45
  %.v1 = select i1 %49, i32 %87, i32 %88, !dbg !48
  %.v3 = select i1 %41, i32 %86, i32 %.v1, !dbg !49
  %89 = bitcast i32 %.v3 to float, !dbg !49
  %90 = extractvalue { i32, i32 } %25, 1, !dbg !20
  %91 = bitcast i32 %90 to float, !dbg !20
  %92 = fadd float %91, %89, !dbg !50
  %93 = bitcast i32 %29 to float, !dbg !22
  %94 = fsub float %92, %93, !dbg !51
  %95 = extractvalue { i32, i32 } %48, 0, !dbg !35
  %96 = extractvalue { i32, i32 } %55, 0, !dbg !41
  %97 = extractvalue { i32, i32 } %59, 0, !dbg !45
  %.v = select i1 %49, i32 %96, i32 %97, !dbg !48
  %.v2 = select i1 %41, i32 %95, i32 %.v, !dbg !49
  %98 = bitcast i32 %.v2 to float, !dbg !49
  %99 = extractvalue { i32, i32 } %25, 0, !dbg !20
  %100 = bitcast i32 %99 to float, !dbg !20
  %101 = fadd float %100, %98, !dbg !50
  %102 = bitcast i32 %28 to float, !dbg !22
  %103 = fsub float %101, %102, !dbg !51
  %104 = bitcast i32 %40 to float, !dbg !28
  %105 = bitcast i32 %39 to float, !dbg !28
  %106 = bitcast i32 %37 to float, !dbg !26
  %107 = bitcast i32 %36 to float, !dbg !26
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !52
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !52
  %110 = fmul float %103, %108, !dbg !53
  %111 = fmul float %94, %109, !dbg !53
  %112 = fmul float %110, %107, !dbg !54
  %113 = fmul float %111, %106, !dbg !54
  %114 = fadd float %112, %105, !dbg !55
  %115 = fadd float %113, %104, !dbg !55
  %116 = fcmp olt float %114, 0.000000e+00, !dbg !56
  %117 = fcmp olt float %115, 0.000000e+00, !dbg !56
  %118 = select i1 %116, float 0.000000e+00, float %114, !dbg !60
  %119 = select i1 %117, float 0.000000e+00, float %115, !dbg !60
  %120 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v2, i32 %.v3, ptr addrspace(1) %120, i1 %18) #3, !dbg !62
  %121 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !63
  %122 = bitcast float %118 to i32, !dbg !64
  %123 = bitcast float %119 to i32, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %122, i32 %123, ptr addrspace(1) %121, i1 %18) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cavlfwdxakmadrwysnetyszlscd7d4rrkbfnnbtu5i2pmcq2esou.py", directory: "inductor_cache/av")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_6, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 46, scope: !7)
!32 = !DILocation(line: 38, column: 44, scope: !7)
!33 = !DILocation(line: 38, column: 30, scope: !7)
!34 = !DILocation(line: 38, column: 58, scope: !7)
!35 = !DILocation(line: 38, column: 51, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 38, scope: !7)
!38 = !DILocation(line: 43, column: 36, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 50, scope: !7)
!41 = !DILocation(line: 43, column: 43, scope: !7)
!42 = !DILocation(line: 44, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 51, scope: !7)
!45 = !DILocation(line: 47, column: 43, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 27, scope: !7)
!48 = !DILocation(line: 48, column: 34, scope: !7)
!49 = !DILocation(line: 49, column: 33, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 51, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 63, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 64, column: 25, scope: !7)
!62 = !DILocation(line: 64, column: 37, scope: !7)
!63 = !DILocation(line: 65, column: 25, scope: !7)
!64 = !DILocation(line: 65, column: 37, scope: !7)
!65 = !DILocation(line: 65, column: 4, scope: !7)
