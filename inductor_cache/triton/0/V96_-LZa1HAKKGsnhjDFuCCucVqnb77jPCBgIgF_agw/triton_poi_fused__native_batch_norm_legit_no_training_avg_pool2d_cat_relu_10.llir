; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 1, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %21 = sdiv i32 %.frozen, 8, !dbg !14
  %22 = mul i32 %21, 8, !dbg !15
  %.decomposed = sub i32 %.frozen, %22, !dbg !15
  %23 = srem i32 %20, 8, !dbg !15
  %24 = sdiv i32 %19, 64, !dbg !16
  %25 = srem i32 %24, 128, !dbg !17
  %26 = shl nsw i32 %.decomposed, 1, !dbg !18
  %27 = shl nsw i32 %23, 1, !dbg !18
  %28 = shl i32 %21, 5, !dbg !19
  %29 = add i32 %26, %28, !dbg !20
  %30 = add i32 %28, %27, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %37 = or disjoint i32 %29, 1, !dbg !23
  %38 = or disjoint i32 %30, 1, !dbg !23
  %39 = sext i32 %37 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = sext i32 %38 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %45 = add i32 %29, 16, !dbg !26
  %46 = add i32 %30, 16, !dbg !26
  %47 = sext i32 %45 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !27
  %49 = sext i32 %46 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %53 = add i32 %29, 17, !dbg !29
  %54 = add i32 %30, 17, !dbg !29
  %55 = sext i32 %53 to i64, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !30
  %57 = sext i32 %54 to i64, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !31
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !31
  %61 = sext i32 %25 to i64, !dbg !32
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !32
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !33
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !33
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !34
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !35
  %67 = bitcast i32 %66 to float, !dbg !35
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !35
  %69 = bitcast i32 %68 to float, !dbg !35
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !36
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !37
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !37
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !38
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !39
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !39
  %76 = fadd float %67, 0x3EE4F8B580000000, !dbg !40
  %77 = fadd float %69, 0x3EE4F8B580000000, !dbg !40
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %78, 0, !dbg !41
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %79, 0, !dbg !41
  br i1 %.not.i, label %85, label %80, !dbg !41

80:                                               ; preds = %13
  br i1 %.not1.i, label %83, label %81, !dbg !41

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

85:                                               ; preds = %13
  br i1 %.not1.i, label %88, label %86, !dbg !41

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !41
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %90, 0, !dbg !41
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %91, 0, !dbg !41
  br i1 %.not.i1, label %97, label %92, !dbg !41

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !41

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !41

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %93, %95, %98, %100
  %.0.i3 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !41
  %102 = bitcast i32 %44 to float, !dbg !25
  %103 = bitcast i32 %36 to float, !dbg !22
  %104 = fadd float %103, %102, !dbg !42
  %105 = bitcast i32 %52 to float, !dbg !28
  %106 = fadd float %104, %105, !dbg !43
  %107 = bitcast i32 %60 to float, !dbg !31
  %108 = fadd float %106, %107, !dbg !44
  %109 = fmul float %108, 2.500000e-01, !dbg !45
  %110 = bitcast i32 %64 to float, !dbg !33
  %111 = fsub float %109, %110, !dbg !46
  %112 = bitcast i32 %43 to float, !dbg !25
  %113 = bitcast i32 %35 to float, !dbg !22
  %114 = fadd float %113, %112, !dbg !42
  %115 = bitcast i32 %51 to float, !dbg !28
  %116 = fadd float %114, %115, !dbg !43
  %117 = bitcast i32 %59 to float, !dbg !31
  %118 = fadd float %116, %117, !dbg !44
  %119 = fmul float %118, 2.500000e-01, !dbg !45
  %120 = bitcast i32 %63 to float, !dbg !33
  %121 = fsub float %119, %120, !dbg !46
  %122 = bitcast i32 %75 to float, !dbg !39
  %123 = bitcast i32 %74 to float, !dbg !39
  %124 = bitcast i32 %72 to float, !dbg !37
  %125 = bitcast i32 %71 to float, !dbg !37
  %.frozen6 = freeze i32 %19, !dbg !47
  %126 = sdiv i32 %.frozen6, 8192, !dbg !47
  %127 = mul i32 %126, 8192, !dbg !48
  %.decomposed7 = sub i32 %.frozen6, %127, !dbg !48
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !49
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !49
  %130 = fmul float %121, %128, !dbg !50
  %131 = fmul float %111, %129, !dbg !50
  %132 = fmul float %130, %125, !dbg !51
  %133 = fmul float %131, %124, !dbg !51
  %134 = fadd float %132, %123, !dbg !52
  %135 = fadd float %133, %122, !dbg !52
  %136 = fcmp olt float %134, 0.000000e+00, !dbg !53
  %137 = fcmp olt float %135, 0.000000e+00, !dbg !53
  %138 = select i1 %136, float 0.000000e+00, float %134, !dbg !57
  %139 = select i1 %137, float 0.000000e+00, float %135, !dbg !57
  %140 = sext i32 %19 to i64, !dbg !58
  %141 = getelementptr float, ptr addrspace(1) %5, i64 %140, !dbg !58
  %142 = bitcast float %119 to i32, !dbg !59
  %143 = bitcast float %109 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %141, i1 true) #3, !dbg !59
  %144 = getelementptr float, ptr addrspace(1) %6, i64 %140, !dbg !60
  %145 = bitcast float %138 to i32, !dbg !61
  %146 = bitcast float %139 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %145, i32 %146, ptr addrspace(1) %144, i1 true) #3, !dbg !61
  %147 = mul i32 %126, 24576, !dbg !62
  %148 = add i32 %147, %.decomposed7, !dbg !63
  %149 = sext i32 %148 to i64, !dbg !64
  %150 = getelementptr float, ptr addrspace(1) %7, i64 %149, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %150, i1 true) #3, !dbg !65
  %151 = mul i32 %126, 26624, !dbg !66
  %152 = add i32 %151, %.decomposed7, !dbg !67
  %153 = sext i32 %152 to i64, !dbg !68
  %154 = getelementptr float, ptr addrspace(1) %8, i64 %153, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %154, i1 true) #3, !dbg !69
  %155 = mul i32 %126, 28672, !dbg !70
  %156 = add i32 %155, %.decomposed7, !dbg !71
  %157 = sext i32 %156 to i64, !dbg !72
  %158 = getelementptr float, ptr addrspace(1) %9, i64 %157, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %158, i1 true) #3, !dbg !73
  %159 = mul i32 %126, 30720, !dbg !74
  %160 = add i32 %159, %.decomposed7, !dbg !75
  %161 = sext i32 %160 to i64, !dbg !76
  %162 = getelementptr float, ptr addrspace(1) %10, i64 %161, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %162, i1 true) #3, !dbg !77
  %163 = shl i32 %126, 15, !dbg !78
  %164 = add i32 %163, %.decomposed7, !dbg !79
  %165 = sext i32 %164 to i64, !dbg !80
  %166 = getelementptr float, ptr addrspace(1) %11, i64 %165, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %166, i1 true) #3, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7uui7rtk6aw2a6jz6p2pqmqgtd5d2uxzfw3bca5hix677chewvf.py", directory: "inductor_cache/7u")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 30, column: 32, scope: !7)
!19 = !DILocation(line: 30, column: 40, scope: !7)
!20 = !DILocation(line: 30, column: 37, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 45, scope: !7)
!23 = !DILocation(line: 31, column: 41, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 49, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 50, scope: !7)
!29 = !DILocation(line: 33, column: 42, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 50, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 31, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 18, scope: !7)
!46 = !DILocation(line: 43, column: 19, scope: !7)
!47 = !DILocation(line: 28, column: 19, scope: !7)
!48 = !DILocation(line: 29, column: 19, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 55, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 56, column: 25, scope: !7)
!59 = !DILocation(line: 56, column: 36, scope: !7)
!60 = !DILocation(line: 57, column: 25, scope: !7)
!61 = !DILocation(line: 57, column: 37, scope: !7)
!62 = !DILocation(line: 58, column: 36, scope: !7)
!63 = !DILocation(line: 58, column: 30, scope: !7)
!64 = !DILocation(line: 58, column: 25, scope: !7)
!65 = !DILocation(line: 58, column: 47, scope: !7)
!66 = !DILocation(line: 59, column: 36, scope: !7)
!67 = !DILocation(line: 59, column: 30, scope: !7)
!68 = !DILocation(line: 59, column: 25, scope: !7)
!69 = !DILocation(line: 59, column: 47, scope: !7)
!70 = !DILocation(line: 60, column: 36, scope: !7)
!71 = !DILocation(line: 60, column: 30, scope: !7)
!72 = !DILocation(line: 60, column: 25, scope: !7)
!73 = !DILocation(line: 60, column: 47, scope: !7)
!74 = !DILocation(line: 61, column: 36, scope: !7)
!75 = !DILocation(line: 61, column: 30, scope: !7)
!76 = !DILocation(line: 61, column: 25, scope: !7)
!77 = !DILocation(line: 61, column: 47, scope: !7)
!78 = !DILocation(line: 62, column: 36, scope: !7)
!79 = !DILocation(line: 62, column: 30, scope: !7)
!80 = !DILocation(line: 62, column: 25, scope: !7)
!81 = !DILocation(line: 62, column: 47, scope: !7)
!82 = !DILocation(line: 62, column: 4, scope: !7)
