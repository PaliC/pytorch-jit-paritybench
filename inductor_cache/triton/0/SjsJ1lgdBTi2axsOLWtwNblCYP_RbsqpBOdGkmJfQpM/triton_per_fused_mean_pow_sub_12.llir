; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 2048, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %8, 63, !dbg !12
  %.frozen = freeze i32 %6, !dbg !13
  %12 = sdiv i32 %.frozen, 32, !dbg !13
  %13 = mul i32 %12, 32, !dbg !14
  %.decomposed = sub i32 %.frozen, %13, !dbg !14
  %14 = shl i32 %8, 7, !dbg !15
  %15 = and i32 %14, 3968, !dbg !15
  %16 = shl i32 %12, 7, !dbg !16
  %17 = or disjoint i32 %16, %11, !dbg !17
  %18 = or disjoint i32 %17, 64, !dbg !17
  %19 = sdiv i32 %17, 32, !dbg !18
  %20 = sdiv i32 %18, 32, !dbg !18
  %21 = srem i32 %19, 32, !dbg !19
  %22 = srem i32 %20, 32, !dbg !19
  %23 = shl nsw i32 %21, 12, !dbg !20
  %24 = shl nsw i32 %22, 12, !dbg !20
  %25 = shl nsw i32 %.decomposed, 13, !dbg !21
  %26 = add i32 %17, %25, !dbg !22
  %27 = add i32 %18, %25, !dbg !22
  %28 = sdiv i32 %26, 131072, !dbg !23
  %29 = sdiv i32 %27, 131072, !dbg !23
  %30 = shl nsw i32 %28, 17, !dbg !24
  %31 = shl nsw i32 %29, 17, !dbg !24
  %32 = sdiv i32 %26, 1024, !dbg !25
  %33 = sdiv i32 %27, 1024, !dbg !25
  %34 = srem i32 %32, 128, !dbg !26
  %35 = srem i32 %33, 128, !dbg !26
  %36 = add i32 %34, %30, !dbg !27
  %37 = add i32 %36, %15, !dbg !28
  %38 = add i32 %37, %23, !dbg !29
  %39 = add i32 %35, %31, !dbg !27
  %40 = add i32 %39, %15, !dbg !28
  %41 = add i32 %40, %24, !dbg !29
  %42 = sext i32 %38 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !30
  %44 = sext i32 %41 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %7, i32 0, i1 %7) #3, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %7, i32 0, i1 %7) #3, !dbg !31
  %48 = sext i32 %34 to i64, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !32
  %50 = sext i32 %35 to i64, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %7, i32 0, i1 %7) #3, !dbg !33
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %7, i32 0, i1 %7) #3, !dbg !33
  %54 = or disjoint i32 %15, 262144, !dbg !34
  %55 = add i32 %36, %54, !dbg !35
  %56 = add i32 %55, %23, !dbg !36
  %57 = add i32 %39, %54, !dbg !35
  %58 = add i32 %57, %24, !dbg !36
  %59 = sext i32 %56 to i64, !dbg !37
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !37
  %61 = sext i32 %58 to i64, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %7, i32 0, i1 %7) #3, !dbg !38
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %7, i32 0, i1 %7) #3, !dbg !38
  %65 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !31
  %66 = insertelement <2 x i32> %65, i32 %47, i64 1, !dbg !31
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !31
  %68 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !33
  %69 = insertelement <2 x i32> %68, i32 %53, i64 1, !dbg !33
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !33
  %71 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !38
  %72 = insertelement <2 x i32> %71, i32 %64, i64 1, !dbg !38
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !38
  %74 = fadd <2 x float> %67, %70, !dbg !39
  %75 = fadd <2 x float> %70, %73, !dbg !40
  %76 = fsub <2 x float> %74, %75, !dbg !41
  %77 = fmul <2 x float> %76, %76, !dbg !42
  %shift = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !43
  %78 = fadd <2 x float> %77, %shift, !dbg !43
  %79 = extractelement <2 x float> %78, i64 0, !dbg !43
  %80 = select i1 %7, float %79, float 0.000000e+00, !dbg !43
  %81 = bitcast float %80 to i32, !dbg !48
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 16, i32 31), !dbg !48
  %83 = bitcast i32 %82 to float, !dbg !48
  %84 = fadd float %80, %83, !dbg !43
  %85 = bitcast float %84 to i32, !dbg !48
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !48
  %87 = bitcast i32 %86 to float, !dbg !48
  %88 = fadd float %84, %87, !dbg !43
  %89 = bitcast float %88 to i32, !dbg !48
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 4, i32 31), !dbg !48
  %91 = bitcast i32 %90 to float, !dbg !48
  %92 = fadd float %88, %91, !dbg !43
  %93 = bitcast float %92 to i32, !dbg !48
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 2, i32 31), !dbg !48
  %95 = bitcast i32 %94 to float, !dbg !48
  %96 = fadd float %92, %95, !dbg !43
  %97 = bitcast float %96 to i32, !dbg !48
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !48
  %99 = bitcast i32 %98 to float, !dbg !48
  %100 = fadd float %96, %99, !dbg !43
  %101 = icmp eq i32 %9, 0, !dbg !48
  %102 = and i32 %10, 1, !dbg !48
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !48
  %104 = bitcast float %100 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 %101) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %105 = icmp slt i32 %8, 2, !dbg !48
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !48
  %107 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %106, i1 %105) #3, !dbg !48
  %108 = bitcast i32 %107 to float, !dbg !48
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !48
  %110 = bitcast i32 %109 to float, !dbg !48
  %111 = fadd float %108, %110, !dbg !43
  %112 = and i32 %8, 1, !dbg !48
  %113 = icmp eq i32 %112, 0, !dbg !48
  %114 = and i1 %105, %113, !dbg !48
  %115 = bitcast float %111 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %115, i1 %114) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %116 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %117 = sext i32 %6 to i64, !dbg !49
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !49
  %119 = icmp eq i32 %11, 0, !dbg !50
  %120 = and i1 %119, %7, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %118, i1 %120) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py", directory: "inductor_cache/5r")
!4 = !{ptr @triton_per_fused_mean_pow_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_12, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_12", linkageName: "triton_per_fused_mean_pow_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 36, scope: !7)
!16 = !DILocation(line: 33, column: 66, scope: !7)
!17 = !DILocation(line: 33, column: 62, scope: !7)
!18 = !DILocation(line: 33, column: 73, scope: !7)
!19 = !DILocation(line: 33, column: 79, scope: !7)
!20 = !DILocation(line: 33, column: 55, scope: !7)
!21 = !DILocation(line: 33, column: 114, scope: !7)
!22 = !DILocation(line: 33, column: 109, scope: !7)
!23 = !DILocation(line: 33, column: 121, scope: !7)
!24 = !DILocation(line: 33, column: 94, scope: !7)
!25 = !DILocation(line: 33, column: 161, scope: !7)
!26 = !DILocation(line: 33, column: 169, scope: !7)
!27 = !DILocation(line: 33, column: 48, scope: !7)
!28 = !DILocation(line: 33, column: 86, scope: !7)
!29 = !DILocation(line: 33, column: 133, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 177, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 74, scope: !7)
!34 = !DILocation(line: 35, column: 39, scope: !7)
!35 = !DILocation(line: 35, column: 95, scope: !7)
!36 = !DILocation(line: 35, column: 142, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 186, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!47 = !DILocation(line: 42, column: 25, scope: !7)
!48 = !DILocation(line: 267, column: 36, scope: !46, inlinedAt: !47)
!49 = !DILocation(line: 43, column: 25, scope: !7)
!50 = !DILocation(line: 43, column: 37, scope: !7)
!51 = !DILocation(line: 43, column: 4, scope: !7)
