#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":19:0)
#loc1 = loc(unknown)
#loc39 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":42:25)
#loc46 = loc(callsite(#loc1 at #loc39))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_mean_pow_sub_12(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x128xf32, #blocked> loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<32> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<131072> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<1024> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<262144> : tensor<1x128xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c2048_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c32_i32 : i32 loc(#loc5)
    %5 = arith.divsi %0, %c32_i32 : i32 loc(#loc6)
    %6 = arith.remsi %3, %cst_0 : tensor<1x128xi32, #blocked> loc(#loc7)
    %7 = arith.muli %6, %cst_1 : tensor<1x128xi32, #blocked> loc(#loc8)
    %8 = arith.muli %5, %c128_i32 : i32 loc(#loc9)
    %9 = tt.splat %8 : i32 -> tensor<1x128xi32, #blocked> loc(#loc10)
    %10 = arith.addi %3, %9 : tensor<1x128xi32, #blocked> loc(#loc10)
    %11 = arith.divsi %10, %cst_0 : tensor<1x128xi32, #blocked> loc(#loc11)
    %12 = arith.remsi %11, %cst_0 : tensor<1x128xi32, #blocked> loc(#loc12)
    %13 = arith.muli %12, %cst_2 : tensor<1x128xi32, #blocked> loc(#loc13)
    %14 = arith.addi %7, %13 : tensor<1x128xi32, #blocked> loc(#loc14)
    %15 = arith.muli %4, %c8192_i32 : i32 loc(#loc15)
    %16 = tt.splat %15 : i32 -> tensor<1x128xi32, #blocked> loc(#loc16)
    %17 = arith.addi %10, %16 : tensor<1x128xi32, #blocked> loc(#loc16)
    %18 = arith.divsi %17, %cst_3 : tensor<1x128xi32, #blocked> loc(#loc17)
    %19 = arith.muli %18, %cst_3 : tensor<1x128xi32, #blocked> loc(#loc18)
    %20 = arith.addi %14, %19 : tensor<1x128xi32, #blocked> loc(#loc19)
    %21 = arith.divsi %17, %cst_4 : tensor<1x128xi32, #blocked> loc(#loc20)
    %22 = arith.remsi %21, %cst_1 : tensor<1x128xi32, #blocked> loc(#loc21)
    %23 = arith.addi %20, %22 : tensor<1x128xi32, #blocked> loc(#loc22)
    %24 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc23)
    %25 = tt.addptr %24, %23 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc23)
    %26 = tt.splat %1 : i1 -> tensor<1x128xi1, #blocked> loc(#loc24)
    %27 = tt.load %25, %26, %cst evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc24)
    %28 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc25)
    %29 = tt.addptr %28, %22 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc25)
    %30 = tt.load %29, %26, %cst evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc26)
    %31 = arith.addi %7, %cst_5 : tensor<1x128xi32, #blocked> loc(#loc27)
    %32 = arith.addi %31, %13 : tensor<1x128xi32, #blocked> loc(#loc28)
    %33 = arith.addi %32, %19 : tensor<1x128xi32, #blocked> loc(#loc29)
    %34 = arith.addi %33, %22 : tensor<1x128xi32, #blocked> loc(#loc30)
    %35 = tt.addptr %24, %34 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc31)
    %36 = tt.load %35, %26, %cst evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc32)
    %37 = arith.addf %27, %30 : tensor<1x128xf32, #blocked> loc(#loc33)
    %38 = arith.addf %36, %30 : tensor<1x128xf32, #blocked> loc(#loc34)
    %39 = arith.subf %37, %38 : tensor<1x128xf32, #blocked> loc(#loc35)
    %40 = arith.mulf %39, %39 : tensor<1x128xf32, #blocked> loc(#loc36)
    %41 = arith.select %26, %40, %cst : tensor<1x128xi1, #blocked>, tensor<1x128xf32, #blocked> loc(#loc37)
    %42 = "tt.reduce"(%41) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc39)), %arg6: f32 loc(callsite(#loc1 at #loc39))):
      %47 = arith.addf %arg5, %arg6 : f32 loc(#loc48)
      tt.reduce.return %47 : f32 loc(#loc45)
    }) : (tensor<1x128xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc45)
    %43 = tt.expand_dims %42 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc41)
    %44 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc42)
    %45 = tt.splat %44 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc43)
    %46 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc43)
    tt.store %45, %43, %46 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc43)
    tt.return loc(#loc44)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":23:28)
#loc3 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":25:21)
#loc4 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":26:34)
#loc5 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":30:19)
#loc6 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":31:19)
#loc7 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:41)
#loc8 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:36)
#loc9 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:66)
#loc10 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:62)
#loc11 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:73)
#loc12 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:79)
#loc13 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:55)
#loc14 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:48)
#loc15 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:114)
#loc16 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:109)
#loc17 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:121)
#loc18 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:94)
#loc19 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:86)
#loc20 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:161)
#loc21 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:169)
#loc22 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:133)
#loc23 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:30)
#loc24 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":33:177)
#loc25 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":34:31)
#loc26 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":34:74)
#loc27 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":35:39)
#loc28 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":35:57)
#loc29 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":35:95)
#loc30 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":35:142)
#loc31 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":35:30)
#loc32 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":35:186)
#loc33 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":36:18)
#loc34 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":37:18)
#loc35 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":38:18)
#loc36 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":39:18)
#loc37 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":41:33)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc41 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":42:28)
#loc42 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":43:25)
#loc43 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":43:37)
#loc44 = loc("inductor_cache/5r/c5rbpenr2izbfijc3owxy5dzs5og2o4gpvbi6evi2eqyxorlv3yn.py":43:4)
#loc45 = loc(callsite(#loc38 at #loc39))
#loc47 = loc(callsite(#loc40 at #loc38))
#loc48 = loc(callsite(#loc47 at #loc39))
