; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_mul_pow_sqrt_tanh_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 8, !dbg !14
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %14 = shl i32 %13, 6, !dbg !16
  %15 = shl i32 %8, 2, !dbg !17
  %16 = and i32 %15, 60, !dbg !17
  %17 = or disjoint i32 %14, %16, !dbg !18
  %18 = icmp slt i32 %17, 6144, !dbg !19
  %19 = mul i32 %11, 6144, !dbg !20
  %20 = add i32 %17, %19, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = and i1 %12, %18, !dbg !23
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 %23) #4, !dbg !24
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !24
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !24
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !24
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !24
  %29 = bitcast i32 %25 to float, !dbg !24
  %30 = bitcast i32 %26 to float, !dbg !24
  %31 = bitcast i32 %27 to float, !dbg !24
  %32 = bitcast i32 %28 to float, !dbg !24
  %33 = fmul float %29, %29, !dbg !25
  %34 = fmul float %30, %30, !dbg !25
  %35 = fmul float %31, %31, !dbg !25
  %36 = fmul float %32, %32, !dbg !25
  %37 = fmul float %33, %29, !dbg !26
  %38 = fmul float %34, %30, !dbg !26
  %39 = fmul float %35, %31, !dbg !26
  %40 = fmul float %36, %32, !dbg !26
  %41 = fmul float %37, 0x3FA6E4E260000000, !dbg !27
  %42 = fmul float %38, 0x3FA6E4E260000000, !dbg !27
  %43 = fmul float %39, 0x3FA6E4E260000000, !dbg !27
  %44 = fmul float %40, 0x3FA6E4E260000000, !dbg !27
  %45 = fadd float %41, %29, !dbg !28
  %46 = fadd float %42, %30, !dbg !28
  %47 = fadd float %43, %31, !dbg !28
  %48 = fadd float %44, %32, !dbg !28
  %49 = fmul float %45, 0x3FE9884540000000, !dbg !29
  %50 = fmul float %46, 0x3FE9884540000000, !dbg !29
  %51 = fmul float %47, 0x3FE9884540000000, !dbg !29
  %52 = fmul float %48, 0x3FE9884540000000, !dbg !29
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i = icmp eq i32 %53, 0, !dbg !30
  %54 = tail call float @llvm.nvvm.fabs.ftz.f(float %49) #4, !dbg !30
  %55 = tail call float @llvm.nvvm.fabs.f(float %49) #4, !dbg !30
  %.01.i = select i1 %.not.i, float %55, float %54, !dbg !30
  %56 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !30
  br i1 %56, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !30

__internal_fmad.exit1.i:                          ; preds = %5
  %57 = fmul float %.01.i, 0x4007154760000000, !dbg !30
  %58 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %57) #4, !dbg !30
  %59 = fadd float %58, 1.000000e+00, !dbg !30
  %60 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %59) #5, !dbg !30, !srcloc !31
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not6.i = icmp eq i32 %61, 0, !dbg !30
  %62 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %60, float -2.000000e+00, float 1.000000e+00) #4, !dbg !30
  %63 = tail call float @llvm.nvvm.fma.rn.f(float %60, float -2.000000e+00, float 1.000000e+00) #4, !dbg !30
  %.03.i = select i1 %.not6.i, float %63, float %62, !dbg !30
  %64 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !30
  %s.0.i = select i1 %64, float 1.000000e+00, float %.03.i, !dbg !30
  %65 = bitcast float %s.0.i to i32, !dbg !30
  %66 = bitcast float %49 to i32, !dbg !30
  %67 = and i32 %66, -2147483648, !dbg !30
  %68 = or i32 %67, %65, !dbg !30
  %69 = bitcast i32 %68 to float, !dbg !30
  br label %__nv_tanhf.exit, !dbg !30

__internal_fmad.exit3.i:                          ; preds = %5
  %70 = fmul float %49, %49, !dbg !30
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not1.i = icmp eq i32 %71, 0, !dbg !30
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %70, float 0xBFAAC795C0000000) #4, !dbg !30
  %73 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %70, float 0xBFAAC795C0000000) #4, !dbg !30
  %.06.i = select i1 %.not1.i, float %73, float %72, !dbg !30
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not2.i = icmp eq i32 %74, 0, !dbg !30
  %75 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %70, float 0x3FC10B2820000000) #4, !dbg !30
  %76 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %70, float 0x3FC10B2820000000) #4, !dbg !30
  %.05.i = select i1 %.not2.i, float %76, float %75, !dbg !30
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not3.i = icmp eq i32 %77, 0, !dbg !30
  %78 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %70, float 0xBFD5553DA0000000) #4, !dbg !30
  %79 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %70, float 0xBFD5553DA0000000) #4, !dbg !30
  %.0.i = select i1 %.not3.i, float %79, float %78, !dbg !30
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not4.i = icmp eq i32 %80, 0, !dbg !30
  %81 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %70, float 0.000000e+00) #4, !dbg !30
  %82 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %70, float 0.000000e+00) #4, !dbg !30
  %.04.i = select i1 %.not4.i, float %82, float %81, !dbg !30
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not5.i = icmp eq i32 %83, 0, !dbg !30
  %84 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %49, float %49) #4, !dbg !30
  %85 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %49, float %49) #4, !dbg !30
  %.02.i = select i1 %.not5.i, float %85, float %84, !dbg !30
  br label %__nv_tanhf.exit, !dbg !30

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %69, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !30
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i10 = icmp eq i32 %86, 0, !dbg !30
  %87 = tail call float @llvm.nvvm.fabs.ftz.f(float %50) #4, !dbg !30
  %88 = tail call float @llvm.nvvm.fabs.f(float %50) #4, !dbg !30
  %.01.i11 = select i1 %.not.i10, float %88, float %87, !dbg !30
  %89 = fcmp ult float %.01.i11, 0x3FE3333340000000, !dbg !30
  br i1 %89, label %__internal_fmad.exit3.i17, label %__internal_fmad.exit1.i12, !dbg !30

__internal_fmad.exit1.i12:                        ; preds = %__nv_tanhf.exit
  %90 = fmul float %.01.i11, 0x4007154760000000, !dbg !30
  %91 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %90) #4, !dbg !30
  %92 = fadd float %91, 1.000000e+00, !dbg !30
  %93 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %92) #5, !dbg !30, !srcloc !31
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not6.i13 = icmp eq i32 %94, 0, !dbg !30
  %95 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %93, float -2.000000e+00, float 1.000000e+00) #4, !dbg !30
  %96 = tail call float @llvm.nvvm.fma.rn.f(float %93, float -2.000000e+00, float 1.000000e+00) #4, !dbg !30
  %.03.i14 = select i1 %.not6.i13, float %96, float %95, !dbg !30
  %97 = fcmp oge float %.01.i11, 0x4022059680000000, !dbg !30
  %s.0.i15 = select i1 %97, float 1.000000e+00, float %.03.i14, !dbg !30
  %98 = bitcast float %s.0.i15 to i32, !dbg !30
  %99 = bitcast float %50 to i32, !dbg !30
  %100 = and i32 %99, -2147483648, !dbg !30
  %101 = or i32 %100, %98, !dbg !30
  %102 = bitcast i32 %101 to float, !dbg !30
  br label %__nv_tanhf.exit28, !dbg !30

__internal_fmad.exit3.i17:                        ; preds = %__nv_tanhf.exit
  %103 = fmul float %50, %50, !dbg !30
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not1.i18 = icmp eq i32 %104, 0, !dbg !30
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %103, float 0xBFAAC795C0000000) #4, !dbg !30
  %106 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %103, float 0xBFAAC795C0000000) #4, !dbg !30
  %.06.i19 = select i1 %.not1.i18, float %106, float %105, !dbg !30
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not2.i20 = icmp eq i32 %107, 0, !dbg !30
  %108 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i19, float %103, float 0x3FC10B2820000000) #4, !dbg !30
  %109 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i19, float %103, float 0x3FC10B2820000000) #4, !dbg !30
  %.05.i21 = select i1 %.not2.i20, float %109, float %108, !dbg !30
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not3.i22 = icmp eq i32 %110, 0, !dbg !30
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i21, float %103, float 0xBFD5553DA0000000) #4, !dbg !30
  %112 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i21, float %103, float 0xBFD5553DA0000000) #4, !dbg !30
  %.0.i23 = select i1 %.not3.i22, float %112, float %111, !dbg !30
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not4.i24 = icmp eq i32 %113, 0, !dbg !30
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i23, float %103, float 0.000000e+00) #4, !dbg !30
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i23, float %103, float 0.000000e+00) #4, !dbg !30
  %.04.i25 = select i1 %.not4.i24, float %115, float %114, !dbg !30
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not5.i26 = icmp eq i32 %116, 0, !dbg !30
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i25, float %50, float %50) #4, !dbg !30
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i25, float %50, float %50) #4, !dbg !30
  %.02.i27 = select i1 %.not5.i26, float %118, float %117, !dbg !30
  br label %__nv_tanhf.exit28, !dbg !30

__nv_tanhf.exit28:                                ; preds = %__internal_fmad.exit1.i12, %__internal_fmad.exit3.i17
  %s.1.i16 = phi float [ %102, %__internal_fmad.exit1.i12 ], [ %.02.i27, %__internal_fmad.exit3.i17 ], !dbg !30
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i29 = icmp eq i32 %119, 0, !dbg !30
  %120 = tail call float @llvm.nvvm.fabs.ftz.f(float %51) #4, !dbg !30
  %121 = tail call float @llvm.nvvm.fabs.f(float %51) #4, !dbg !30
  %.01.i30 = select i1 %.not.i29, float %121, float %120, !dbg !30
  %122 = fcmp ult float %.01.i30, 0x3FE3333340000000, !dbg !30
  br i1 %122, label %__internal_fmad.exit3.i36, label %__internal_fmad.exit1.i31, !dbg !30

__internal_fmad.exit1.i31:                        ; preds = %__nv_tanhf.exit28
  %123 = fmul float %.01.i30, 0x4007154760000000, !dbg !30
  %124 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %123) #4, !dbg !30
  %125 = fadd float %124, 1.000000e+00, !dbg !30
  %126 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %125) #5, !dbg !30, !srcloc !31
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not6.i32 = icmp eq i32 %127, 0, !dbg !30
  %128 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %126, float -2.000000e+00, float 1.000000e+00) #4, !dbg !30
  %129 = tail call float @llvm.nvvm.fma.rn.f(float %126, float -2.000000e+00, float 1.000000e+00) #4, !dbg !30
  %.03.i33 = select i1 %.not6.i32, float %129, float %128, !dbg !30
  %130 = fcmp oge float %.01.i30, 0x4022059680000000, !dbg !30
  %s.0.i34 = select i1 %130, float 1.000000e+00, float %.03.i33, !dbg !30
  %131 = bitcast float %s.0.i34 to i32, !dbg !30
  %132 = bitcast float %51 to i32, !dbg !30
  %133 = and i32 %132, -2147483648, !dbg !30
  %134 = or i32 %133, %131, !dbg !30
  %135 = bitcast i32 %134 to float, !dbg !30
  br label %__nv_tanhf.exit47, !dbg !30

__internal_fmad.exit3.i36:                        ; preds = %__nv_tanhf.exit28
  %136 = fmul float %51, %51, !dbg !30
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not1.i37 = icmp eq i32 %137, 0, !dbg !30
  %138 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %136, float 0xBFAAC795C0000000) #4, !dbg !30
  %139 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %136, float 0xBFAAC795C0000000) #4, !dbg !30
  %.06.i38 = select i1 %.not1.i37, float %139, float %138, !dbg !30
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not2.i39 = icmp eq i32 %140, 0, !dbg !30
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i38, float %136, float 0x3FC10B2820000000) #4, !dbg !30
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i38, float %136, float 0x3FC10B2820000000) #4, !dbg !30
  %.05.i40 = select i1 %.not2.i39, float %142, float %141, !dbg !30
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not3.i41 = icmp eq i32 %143, 0, !dbg !30
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i40, float %136, float 0xBFD5553DA0000000) #4, !dbg !30
  %145 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i40, float %136, float 0xBFD5553DA0000000) #4, !dbg !30
  %.0.i42 = select i1 %.not3.i41, float %145, float %144, !dbg !30
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not4.i43 = icmp eq i32 %146, 0, !dbg !30
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i42, float %136, float 0.000000e+00) #4, !dbg !30
  %148 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i42, float %136, float 0.000000e+00) #4, !dbg !30
  %.04.i44 = select i1 %.not4.i43, float %148, float %147, !dbg !30
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not5.i45 = icmp eq i32 %149, 0, !dbg !30
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i44, float %51, float %51) #4, !dbg !30
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i44, float %51, float %51) #4, !dbg !30
  %.02.i46 = select i1 %.not5.i45, float %151, float %150, !dbg !30
  br label %__nv_tanhf.exit47, !dbg !30

__nv_tanhf.exit47:                                ; preds = %__internal_fmad.exit1.i31, %__internal_fmad.exit3.i36
  %s.1.i35 = phi float [ %135, %__internal_fmad.exit1.i31 ], [ %.02.i46, %__internal_fmad.exit3.i36 ], !dbg !30
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i48 = icmp eq i32 %152, 0, !dbg !30
  %153 = tail call float @llvm.nvvm.fabs.ftz.f(float %52) #4, !dbg !30
  %154 = tail call float @llvm.nvvm.fabs.f(float %52) #4, !dbg !30
  %.01.i49 = select i1 %.not.i48, float %154, float %153, !dbg !30
  %155 = fcmp ult float %.01.i49, 0x3FE3333340000000, !dbg !30
  br i1 %155, label %__internal_fmad.exit3.i55, label %__internal_fmad.exit1.i50, !dbg !30

__internal_fmad.exit1.i50:                        ; preds = %__nv_tanhf.exit47
  %156 = fmul float %.01.i49, 0x4007154760000000, !dbg !30
  %157 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %156) #4, !dbg !30
  %158 = fadd float %157, 1.000000e+00, !dbg !30
  %159 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %158) #5, !dbg !30, !srcloc !31
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not6.i51 = icmp eq i32 %160, 0, !dbg !30
  %161 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %159, float -2.000000e+00, float 1.000000e+00) #4, !dbg !30
  %162 = tail call float @llvm.nvvm.fma.rn.f(float %159, float -2.000000e+00, float 1.000000e+00) #4, !dbg !30
  %.03.i52 = select i1 %.not6.i51, float %162, float %161, !dbg !30
  %163 = fcmp oge float %.01.i49, 0x4022059680000000, !dbg !30
  %s.0.i53 = select i1 %163, float 1.000000e+00, float %.03.i52, !dbg !30
  %164 = bitcast float %s.0.i53 to i32, !dbg !30
  %165 = bitcast float %52 to i32, !dbg !30
  %166 = and i32 %165, -2147483648, !dbg !30
  %167 = or i32 %166, %164, !dbg !30
  %168 = bitcast i32 %167 to float, !dbg !30
  br label %__nv_tanhf.exit66, !dbg !30

__internal_fmad.exit3.i55:                        ; preds = %__nv_tanhf.exit47
  %169 = fmul float %52, %52, !dbg !30
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not1.i56 = icmp eq i32 %170, 0, !dbg !30
  %171 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %169, float 0xBFAAC795C0000000) #4, !dbg !30
  %172 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %169, float 0xBFAAC795C0000000) #4, !dbg !30
  %.06.i57 = select i1 %.not1.i56, float %172, float %171, !dbg !30
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not2.i58 = icmp eq i32 %173, 0, !dbg !30
  %174 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i57, float %169, float 0x3FC10B2820000000) #4, !dbg !30
  %175 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i57, float %169, float 0x3FC10B2820000000) #4, !dbg !30
  %.05.i59 = select i1 %.not2.i58, float %175, float %174, !dbg !30
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not3.i60 = icmp eq i32 %176, 0, !dbg !30
  %177 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i59, float %169, float 0xBFD5553DA0000000) #4, !dbg !30
  %178 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i59, float %169, float 0xBFD5553DA0000000) #4, !dbg !30
  %.0.i61 = select i1 %.not3.i60, float %178, float %177, !dbg !30
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not4.i62 = icmp eq i32 %179, 0, !dbg !30
  %180 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i61, float %169, float 0.000000e+00) #4, !dbg !30
  %181 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i61, float %169, float 0.000000e+00) #4, !dbg !30
  %.04.i63 = select i1 %.not4.i62, float %181, float %180, !dbg !30
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not5.i64 = icmp eq i32 %182, 0, !dbg !30
  %183 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i63, float %52, float %52) #4, !dbg !30
  %184 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i63, float %52, float %52) #4, !dbg !30
  %.02.i65 = select i1 %.not5.i64, float %184, float %183, !dbg !30
  br label %__nv_tanhf.exit66, !dbg !30

__nv_tanhf.exit66:                                ; preds = %__internal_fmad.exit1.i50, %__internal_fmad.exit3.i55
  %s.1.i54 = phi float [ %168, %__internal_fmad.exit1.i50 ], [ %.02.i65, %__internal_fmad.exit3.i55 ], !dbg !30
  %185 = lshr i32 %8, 2, !dbg !17
  %186 = and i32 %185, 31, !dbg !17
  %187 = or disjoint i32 %186, %14, !dbg !18
  %188 = or disjoint i32 %187, 32, !dbg !18
  %189 = icmp slt i32 %188, 6144, !dbg !19
  %190 = shl i32 %8, 1, !dbg !12
  %191 = and i32 %190, 6, !dbg !12
  %192 = or disjoint i32 %7, %191, !dbg !13
  %193 = icmp slt i32 %192, 8, !dbg !14
  %194 = and i1 %193, %189, !dbg !23
  %195 = icmp slt i32 %187, 6144, !dbg !19
  %196 = and i1 %193, %195, !dbg !23
  %197 = ashr exact i32 %192, 1, !dbg !32
  %198 = fmul float %29, 5.000000e-01, !dbg !33
  %199 = fmul float %30, 5.000000e-01, !dbg !33
  %200 = fmul float %31, 5.000000e-01, !dbg !33
  %201 = fmul float %32, 5.000000e-01, !dbg !33
  %202 = fadd float %s.1.i, 1.000000e+00, !dbg !34
  %203 = fadd float %s.1.i16, 1.000000e+00, !dbg !34
  %204 = fadd float %s.1.i35, 1.000000e+00, !dbg !34
  %205 = fadd float %s.1.i54, 1.000000e+00, !dbg !34
  %206 = fmul float %198, %202, !dbg !35
  %207 = fmul float %199, %203, !dbg !35
  %208 = fmul float %200, %204, !dbg !35
  %209 = fmul float %201, %205, !dbg !35
  %210 = shl i32 %187, 1, !dbg !36
  %211 = shl i32 %188, 1, !dbg !36
  %212 = mul i32 %197, 12288, !dbg !37
  %213 = add i32 %210, %212, !dbg !38
  %214 = add i32 %211, %212, !dbg !38
  %215 = sext i32 %213 to i64, !dbg !39
  %216 = getelementptr float, ptr addrspace(1) %1, i64 %215, !dbg !39
  %217 = sext i32 %214 to i64, !dbg !39
  %218 = getelementptr float, ptr addrspace(1) %1, i64 %217, !dbg !39
  %219 = shl i32 %8, 5, !dbg !40
  %220 = and i32 %219, 480, !dbg !40
  %221 = or disjoint i32 %220, %10, !dbg !40
  %222 = and i32 %190, 254, !dbg !40
  %223 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %220, !dbg !40
  %224 = getelementptr float, ptr addrspace(3) %223, i32 %221, !dbg !40
  %225 = bitcast float %s.1.i to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #4, !dbg !40
  %226 = or disjoint i32 %221, 8, !dbg !40
  %227 = lshr i32 %226, 2, !dbg !40
  %228 = and i32 %227, 122, !dbg !40
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !40
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %226, !dbg !40
  %231 = bitcast float %s.1.i16 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !40
  %232 = or disjoint i32 %221, 16, !dbg !40
  %233 = lshr i32 %232, 2, !dbg !40
  %234 = and i32 %233, 124, !dbg !40
  %235 = getelementptr float, ptr addrspace(3) @global_smem, i32 %234, !dbg !40
  %236 = getelementptr float, ptr addrspace(3) %235, i32 %232, !dbg !40
  %237 = bitcast float %s.1.i35 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #4, !dbg !40
  %238 = or disjoint i32 %221, 24, !dbg !40
  %239 = lshr i32 %238, 2, !dbg !40
  %240 = and i32 %239, 126, !dbg !40
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %240, !dbg !40
  %242 = getelementptr float, ptr addrspace(3) %241, i32 %238, !dbg !40
  %243 = bitcast float %s.1.i54 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %244 = lshr i32 %190, 2, !dbg !40
  %245 = and i32 %244, 62, !dbg !40
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %245, !dbg !40
  %247 = getelementptr inbounds float, ptr addrspace(3) %246, i32 %222, !dbg !40
  %248 = or disjoint i32 %222, 256, !dbg !40
  %249 = lshr i32 %248, 2, !dbg !40
  %250 = and i32 %249, 126, !dbg !40
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !40
  %252 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %248, !dbg !40
  %253 = load <2 x i32>, ptr addrspace(3) %252, align 8, !dbg !40
  %.extract = load i32, ptr addrspace(3) %247, align 8, !dbg !40
  %254 = getelementptr inbounds i8, ptr addrspace(3) %247, i32 4, !dbg !40
  %.extract7 = load i32, ptr addrspace(3) %254, align 4, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract7, ptr addrspace(1) %216, i1 %196) #4, !dbg !40
  %.extract8 = extractelement <2 x i32> %253, i64 0, !dbg !40
  %.extract9 = extractelement <2 x i32> %253, i64 1, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract8, i32 %.extract9, ptr addrspace(1) %218, i1 %194) #4, !dbg !40
  %255 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !41
  %256 = bitcast float %206 to i32, !dbg !42
  %257 = bitcast float %207 to i32, !dbg !42
  %258 = bitcast float %208 to i32, !dbg !42
  %259 = bitcast float %209 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %256, i32 %257, i32 %258, i32 %259, ptr addrspace(1) %255, i1 %23) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4nkrwp6be2ogbx5ka2eic3cwlkfflhxjrq47e3utyyelfokvjwu.py", directory: "inductor_cache/4n")
!4 = !{ptr @triton_poi_fused_add_mul_pow_sqrt_tanh_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_pow_sqrt_tanh_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_pow_sqrt_tanh_33", linkageName: "triton_poi_fused_add_mul_pow_sqrt_tanh_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 26, scope: !7)
!31 = !{i32 21046}
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 19, scope: !7)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 32, scope: !7)
!37 = !DILocation(line: 46, column: 43, scope: !7)
!38 = !DILocation(line: 46, column: 37, scope: !7)
!39 = !DILocation(line: 46, column: 25, scope: !7)
!40 = !DILocation(line: 46, column: 54, scope: !7)
!41 = !DILocation(line: 47, column: 25, scope: !7)
!42 = !DILocation(line: 47, column: 47, scope: !7)
!43 = !DILocation(line: 47, column: 4, scope: !7)
