; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__native_batch_norm_legit_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 28, !dbg !12
  %10 = and i32 %8, 3, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 4, !dbg !14
  %13 = shl i32 %11, 2, !dbg !15
  %14 = sext i32 %13 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %12) #1, !dbg !17
  %17 = bitcast i32 %16 to float, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !19
  %20 = bitcast i32 %19 to float, !dbg !19
  %21 = or disjoint i32 %13, 1, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %12) #1, !dbg !22
  %25 = bitcast i32 %24 to float, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %12) #1, !dbg !24
  %28 = bitcast i32 %27 to float, !dbg !24
  %29 = or disjoint i32 %13, 2, !dbg !25
  %30 = sext i32 %29 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %12) #1, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %12) #1, !dbg !29
  %36 = bitcast i32 %35 to float, !dbg !29
  %37 = or disjoint i32 %13, 3, !dbg !30
  %38 = sext i32 %37 to i64, !dbg !31
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !31
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %12) #1, !dbg !32
  %41 = bitcast i32 %40 to float, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !33
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %12) #1, !dbg !34
  %44 = bitcast i32 %43 to float, !dbg !34
  %45 = fcmp oeq float %17, 0.000000e+00, !dbg !35
  %46 = select i1 %45, float 1.000000e+00, float %17, !dbg !36
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %20, float %46) #1, !dbg !37
  %48 = select i1 %45, float 0.000000e+00, float %47, !dbg !38
  %49 = fcmp oeq float %25, 0.000000e+00, !dbg !39
  %50 = select i1 %49, float 1.000000e+00, float %25, !dbg !40
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %28, float %50) #1, !dbg !41
  %52 = select i1 %49, float 0.000000e+00, float %51, !dbg !42
  %53 = fadd float %48, %52, !dbg !43
  %54 = fcmp oeq float %33, 0.000000e+00, !dbg !44
  %55 = select i1 %54, float 1.000000e+00, float %33, !dbg !45
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float %55) #1, !dbg !46
  %57 = select i1 %54, float 0.000000e+00, float %56, !dbg !47
  %58 = fadd float %53, %57, !dbg !48
  %59 = fcmp oeq float %41, 0.000000e+00, !dbg !49
  %60 = select i1 %59, float 1.000000e+00, float %41, !dbg !50
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %60) #1, !dbg !51
  %62 = select i1 %59, float 0.000000e+00, float %61, !dbg !52
  %63 = fadd float %58, %62, !dbg !53
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 4.000000e+00) #1, !dbg !54
  %65 = fsub float %48, %64, !dbg !55
  %66 = fmul float %65, %65, !dbg !56
  %67 = fsub float %52, %64, !dbg !57
  %68 = fmul float %67, %67, !dbg !58
  %69 = fadd float %66, %68, !dbg !59
  %70 = fsub float %57, %64, !dbg !60
  %71 = fmul float %70, %70, !dbg !61
  %72 = fadd float %71, %69, !dbg !62
  %73 = fsub float %62, %64, !dbg !63
  %74 = fmul float %73, %73, !dbg !64
  %75 = fadd float %74, %72, !dbg !65
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 4.000000e+00) #1, !dbg !66
  %77 = sext i32 %11 to i64, !dbg !67
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !67
  %79 = icmp eq i32 %9, 0, !dbg !68
  %80 = bitcast float %64 to i32, !dbg !68
  %81 = and i1 %79, %12, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %80, ptr addrspace(1) %78, i1 %81) #1, !dbg !68
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %77, !dbg !69
  %83 = bitcast float %76 to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %83, ptr addrspace(1) %82, i1 %81) #1, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxnxogpjiftobwhz3hmvdbosocmdylucs7xqjlzrrgfowrb6rv4y.py", directory: "inductor_cache/xn")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_2", linkageName: "triton_poi_fused__native_batch_norm_legit_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 31, scope: !7)
!24 = !DILocation(line: 28, column: 42, scope: !7)
!25 = !DILocation(line: 29, column: 35, scope: !7)
!26 = !DILocation(line: 29, column: 31, scope: !7)
!27 = !DILocation(line: 29, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 34, column: 19, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 39, column: 19, scope: !7)
!40 = !DILocation(line: 40, column: 33, scope: !7)
!41 = !DILocation(line: 41, column: 20, scope: !7)
!42 = !DILocation(line: 42, column: 33, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 21, scope: !7)
!45 = !DILocation(line: 45, column: 34, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 34, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 21, scope: !7)
!50 = !DILocation(line: 50, column: 34, scope: !7)
!51 = !DILocation(line: 51, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 34, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 55, column: 20, scope: !7)
!55 = !DILocation(line: 56, column: 19, scope: !7)
!56 = !DILocation(line: 57, column: 20, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 20, scope: !7)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 64, column: 20, scope: !7)
!64 = !DILocation(line: 65, column: 20, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 67, column: 20, scope: !7)
!67 = !DILocation(line: 68, column: 25, scope: !7)
!68 = !DILocation(line: 68, column: 37, scope: !7)
!69 = !DILocation(line: 69, column: 25, scope: !7)
!70 = !DILocation(line: 69, column: 37, scope: !7)
!71 = !DILocation(line: 69, column: 4, scope: !7)
