; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = shl i32 %8, 2, !dbg !11
  %12 = and i32 %11, 12, !dbg !11
  %13 = shl i32 %8, 7, !dbg !11
  %14 = and i32 %13, 32256, !dbg !11
  %.frozen = freeze i32 %7, !dbg !12
  %15 = sdiv i32 %.frozen, 32, !dbg !12
  %16 = mul i32 %15, 32, !dbg !13
  %.decomposed = sub i32 %.frozen, %16, !dbg !13
  %17 = shl nsw i32 %.decomposed, 4, !dbg !14
  %18 = shl i32 %15, 15, !dbg !15
  %19 = or disjoint i32 %14, %12, !dbg !16
  %20 = add nsw i32 %19, %17, !dbg !17
  %21 = add i32 %20, %18, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %29 = bitcast i32 %25 to float, !dbg !20
  %30 = bitcast i32 %26 to float, !dbg !20
  %31 = bitcast i32 %27 to float, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = fadd float %29, %30, !dbg !21
  %34 = fadd float %33, %31, !dbg !21
  %35 = fadd float %34, %32, !dbg !21
  %36 = bitcast float %35 to i32, !dbg !26
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 16, i32 31), !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = fadd float %35, %38, !dbg !21
  %40 = bitcast float %39 to i32, !dbg !26
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 8, i32 31), !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = fadd float %39, %42, !dbg !21
  %44 = bitcast float %43 to i32, !dbg !26
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 4, i32 31), !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = fadd float %43, %46, !dbg !21
  %48 = bitcast float %47 to i32, !dbg !26
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = fadd float %47, %50, !dbg !21
  %52 = bitcast float %51 to i32, !dbg !26
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !26
  %54 = bitcast i32 %53 to float, !dbg !26
  %55 = fadd float %51, %54, !dbg !21
  %56 = icmp eq i32 %9, 0, !dbg !26
  %57 = and i32 %10, 7, !dbg !26
  %58 = zext nneg i32 %57 to i64, !dbg !26
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i64 %58, !dbg !26
  %60 = bitcast float %55 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 %56) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %61 = icmp slt i32 %8, 8, !dbg !26
  %62 = sext i32 %8 to i64, !dbg !26
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i64 %62, !dbg !26
  %64 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %61) #5, !dbg !26
  %65 = bitcast i32 %64 to float, !dbg !26
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 4, i32 31), !dbg !26
  %67 = bitcast i32 %66 to float, !dbg !26
  %68 = fadd float %65, %67, !dbg !21
  %69 = bitcast float %68 to i32, !dbg !26
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !26
  %71 = bitcast i32 %70 to float, !dbg !26
  %72 = fadd float %68, %71, !dbg !21
  %73 = bitcast float %72 to i32, !dbg !26
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !26
  %75 = bitcast i32 %74 to float, !dbg !26
  %76 = fadd float %72, %75, !dbg !21
  %77 = and i32 %8, 7, !dbg !26
  %78 = icmp eq i32 %77, 0, !dbg !26
  %79 = and i1 %61, %78, !dbg !26
  %80 = bitcast float %76 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %80, i1 %79) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %81 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %82 = fadd float %81, 0.000000e+00, !dbg !27
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 1.024000e+03) #5, !dbg !31
  %84 = fsub float %29, %83, !dbg !32
  %85 = fsub float %30, %83, !dbg !32
  %86 = fsub float %31, %83, !dbg !32
  %87 = fsub float %32, %83, !dbg !32
  %88 = fmul float %84, %84, !dbg !33
  %89 = fmul float %85, %85, !dbg !33
  %90 = fmul float %86, %86, !dbg !33
  %91 = fmul float %87, %87, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %92 = fadd float %88, %89, !dbg !36
  %93 = fadd float %90, %92, !dbg !36
  %94 = fadd float %91, %93, !dbg !36
  %95 = bitcast float %94 to i32, !dbg !34
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 16, i32 31), !dbg !34
  %97 = bitcast i32 %96 to float, !dbg !34
  %98 = fadd float %94, %97, !dbg !36
  %99 = bitcast float %98 to i32, !dbg !34
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 8, i32 31), !dbg !34
  %101 = bitcast i32 %100 to float, !dbg !34
  %102 = fadd float %98, %101, !dbg !36
  %103 = bitcast float %102 to i32, !dbg !34
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 4, i32 31), !dbg !34
  %105 = bitcast i32 %104 to float, !dbg !34
  %106 = fadd float %102, %105, !dbg !36
  %107 = bitcast float %106 to i32, !dbg !34
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 2, i32 31), !dbg !34
  %109 = bitcast i32 %108 to float, !dbg !34
  %110 = fadd float %106, %109, !dbg !36
  %111 = bitcast float %110 to i32, !dbg !34
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !34
  %113 = bitcast i32 %112 to float, !dbg !34
  %114 = fadd float %110, %113, !dbg !36
  %115 = bitcast float %114 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %115, i1 %56) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %116 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %61) #5, !dbg !34
  %117 = bitcast i32 %116 to float, !dbg !34
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !34
  %119 = bitcast i32 %118 to float, !dbg !34
  %120 = fadd float %117, %119, !dbg !36
  %121 = bitcast float %120 to i32, !dbg !34
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 2, i32 31), !dbg !34
  %123 = bitcast i32 %122 to float, !dbg !34
  %124 = fadd float %120, %123, !dbg !36
  %125 = bitcast float %124 to i32, !dbg !34
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 1, i32 31), !dbg !34
  %127 = bitcast i32 %126 to float, !dbg !34
  %128 = fadd float %124, %127, !dbg !36
  %129 = bitcast float %128 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %129, i1 %79) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %130 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %131 = fadd float %130, 0.000000e+00, !dbg !37
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 1.024000e+03) #5, !dbg !39
  %133 = fadd float %132, 0x3EE4F8B580000000, !dbg !40
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %134, 0, !dbg !41
  br i1 %.not.i, label %137, label %135, !dbg !41

135:                                              ; preds = %6
  %136 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

137:                                              ; preds = %6
  %138 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %135, %137
  %.0.i = phi float [ %136, %135 ], [ %138, %137 ], !dbg !41
  %139 = sext i32 %7 to i64, !dbg !42
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %139, !dbg !42
  %urem = and i32 %8, 255, !dbg !43
  %141 = icmp eq i32 %urem, 0, !dbg !43
  %142 = bitcast float %.0.i to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %140, i1 %141) #5, !dbg !43
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !44
  %144 = bitcast float %83 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %143, i1 %141) #5, !dbg !45
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !46
  %146 = bitcast float %131 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %145, i1 %141) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxnhup6i4ua7chulpxrt2bfaifzf2cjtbxss2abiimupi4bejgwq.py", directory: "inductor_cache/xn")
!4 = !{ptr @triton_per_fused_native_group_norm_23, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_23, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_23", linkageName: "triton_per_fused_native_group_norm_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 33, column: 19, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 35, column: 38, scope: !7)
!15 = !DILocation(line: 35, column: 58, scope: !7)
!16 = !DILocation(line: 35, column: 35, scope: !7)
!17 = !DILocation(line: 35, column: 43, scope: !7)
!18 = !DILocation(line: 35, column: 52, scope: !7)
!19 = !DILocation(line: 35, column: 30, scope: !7)
!20 = !DILocation(line: 35, column: 63, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 38, column: 57, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 38, column: 44, scope: !7)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !35)
!35 = !DILocation(line: 45, column: 59, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !35)
!37 = !DILocation(line: 73, column: 15, scope: !28, inlinedAt: !38)
!38 = !DILocation(line: 45, column: 45, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 28, scope: !7)
!42 = !DILocation(line: 51, column: 25, scope: !7)
!43 = !DILocation(line: 51, column: 37, scope: !7)
!44 = !DILocation(line: 52, column: 25, scope: !7)
!45 = !DILocation(line: 52, column: 36, scope: !7)
!46 = !DILocation(line: 53, column: 25, scope: !7)
!47 = !DILocation(line: 53, column: 37, scope: !7)
!48 = !DILocation(line: 53, column: 4, scope: !7)
