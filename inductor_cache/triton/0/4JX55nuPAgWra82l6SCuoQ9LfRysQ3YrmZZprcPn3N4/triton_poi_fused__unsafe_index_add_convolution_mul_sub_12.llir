; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 4, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 14, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %20 = lshr i32 %14, 3, !dbg !16
  %21 = and i32 %20, 15, !dbg !16
  %22 = or disjoint i32 %19, %21, !dbg !17
  %23 = icmp slt i32 %22, 16, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %24 = sdiv i32 %.frozen, 4, !dbg !19
  %25 = mul i32 %24, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %.frozen2 = freeze i32 %17, !dbg !21
  %26 = sdiv i32 %.frozen2, 256, !dbg !21
  %27 = mul i32 %26, 256, !dbg !22
  %.decomposed3 = sub i32 %.frozen2, %27, !dbg !22
  %28 = sext i32 %24 to i64, !dbg !23
  %29 = getelementptr i64, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %23) #1, !dbg !24
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 %23) #1, !dbg !24
  %32 = sext i32 %.decomposed to i64, !dbg !25
  %33 = getelementptr i64, ptr addrspace(1) %1, i64 %32, !dbg !25
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %23) #1, !dbg !26
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 %23) #1, !dbg !26
  %36 = sext i32 %.decomposed3 to i64, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !27
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !28
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !28
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !28
  %41 = getelementptr i64, ptr addrspace(1) %4, i64 %32, !dbg !29
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %23) #1, !dbg !30
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 %23) #1, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !31
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %23) #1, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %23) #1, !dbg !32
  %47 = getelementptr i64, ptr addrspace(1) %6, i64 %28, !dbg !33
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %23) #1, !dbg !34
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %23) #1, !dbg !34
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !35
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %23) #1, !dbg !36
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %23) #1, !dbg !36
  %53 = bitcast i32 %52 to float, !dbg !36
  %54 = lshr i64 %31, 62, !dbg !37
  %55 = and i64 %54, 2, !dbg !37
  %56 = add i64 %55, %31, !dbg !37
  %57 = lshr i64 %35, 62, !dbg !38
  %58 = and i64 %57, 2, !dbg !38
  %59 = add i64 %58, %35, !dbg !38
  %60 = shl i64 %56, 9, !dbg !39
  %61 = shl i32 %26, 10, !dbg !40
  %62 = sext i32 %61 to i64, !dbg !41
  %.idx = shl i64 %59, 10, !dbg !42
  %63 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !42
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %36, !dbg !42
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %60, !dbg !42
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %62, !dbg !42
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %23) #1, !dbg !43
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !43
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !43
  %70 = lshr i64 %43, 62, !dbg !44
  %71 = and i64 %70, 2, !dbg !44
  %72 = add i64 %71, %43, !dbg !44
  %.idx1 = shl i64 %72, 10, !dbg !45
  %73 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx1, !dbg !45
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %36, !dbg !45
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %60, !dbg !45
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %62, !dbg !45
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %23) #1, !dbg !46
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !46
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !46
  %80 = lshr i64 %49, 62, !dbg !47
  %81 = and i64 %80, 2, !dbg !47
  %82 = add i64 %81, %49, !dbg !47
  %83 = shl i64 %82, 9, !dbg !48
  %84 = getelementptr float, ptr addrspace(1) %64, i64 %83, !dbg !49
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %62, !dbg !49
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %85, i1 %23) #1, !dbg !50
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !50
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !50
  %89 = getelementptr float, ptr addrspace(1) %74, i64 %83, !dbg !51
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %62, !dbg !51
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %90, i1 %23) #1, !dbg !52
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !52
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !52
  %94 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !50
  %95 = insertelement <2 x i32> %94, i32 %68, i64 1, !dbg !50
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !50
  %97 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !53
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !53
  %99 = shufflevector <2 x float> %98, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %100 = fadd <2 x float> %99, %96, !dbg !53
  %101 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !52
  %102 = insertelement <2 x i32> %101, i32 %78, i64 1, !dbg !52
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !52
  %104 = fadd <2 x float> %99, %103, !dbg !54
  %105 = fsub <2 x float> %104, %100, !dbg !55
  %106 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !56
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !56
  %108 = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !56
  %109 = fmul <2 x float> %105, %108, !dbg !56
  %110 = fadd <2 x float> %100, %109, !dbg !57
  %111 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !50
  %112 = insertelement <2 x i32> %111, i32 %69, i64 1, !dbg !50
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !50
  %114 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !53
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !53
  %116 = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %117 = fadd <2 x float> %116, %113, !dbg !53
  %118 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !52
  %119 = insertelement <2 x i32> %118, i32 %79, i64 1, !dbg !52
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !52
  %121 = fadd <2 x float> %116, %120, !dbg !54
  %122 = fsub <2 x float> %121, %117, !dbg !55
  %123 = fmul <2 x float> %122, %108, !dbg !56
  %124 = fadd <2 x float> %117, %123, !dbg !57
  %125 = extractelement <2 x float> %110, i64 0, !dbg !58
  %126 = extractelement <2 x float> %110, i64 1, !dbg !59
  %127 = fsub float %125, %126, !dbg !58
  %128 = extractelement <2 x float> %124, i64 0, !dbg !58
  %129 = extractelement <2 x float> %124, i64 1, !dbg !59
  %130 = fsub float %128, %129, !dbg !58
  %131 = fmul float %127, %53, !dbg !60
  %132 = fmul float %130, %53, !dbg !60
  %133 = fadd float %126, %131, !dbg !59
  %134 = fadd float %129, %132, !dbg !59
  %135 = shl i32 %22, 8, !dbg !61
  %136 = add i32 %135, %.decomposed3, !dbg !62
  %137 = shl i32 %26, 12, !dbg !63
  %138 = add i32 %136, %137, !dbg !64
  %139 = sext i32 %138 to i64, !dbg !65
  %140 = getelementptr float, ptr addrspace(1) %8, i64 %139, !dbg !65
  %141 = bitcast float %133 to i32, !dbg !66
  %142 = bitcast float %134 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %141, i32 %142, ptr addrspace(1) %140, i1 %23) #1, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cg3fiiehl3syuq5yykkpwi7bsyoyvlpxtdko5e3oj4zq53sc4lua.py", directory: "inductor_cache/g3")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_12", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 44, column: 32, scope: !7)
!38 = !DILocation(line: 47, column: 32, scope: !7)
!39 = !DILocation(line: 48, column: 50, scope: !7)
!40 = !DILocation(line: 48, column: 62, scope: !7)
!41 = !DILocation(line: 48, column: 57, scope: !7)
!42 = !DILocation(line: 48, column: 30, scope: !7)
!43 = !DILocation(line: 48, column: 67, scope: !7)
!44 = !DILocation(line: 52, column: 35, scope: !7)
!45 = !DILocation(line: 53, column: 31, scope: !7)
!46 = !DILocation(line: 53, column: 69, scope: !7)
!47 = !DILocation(line: 60, column: 35, scope: !7)
!48 = !DILocation(line: 61, column: 51, scope: !7)
!49 = !DILocation(line: 61, column: 31, scope: !7)
!50 = !DILocation(line: 61, column: 69, scope: !7)
!51 = !DILocation(line: 63, column: 31, scope: !7)
!52 = !DILocation(line: 63, column: 70, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 67, column: 20, scope: !7)
!58 = !DILocation(line: 68, column: 20, scope: !7)
!59 = !DILocation(line: 70, column: 20, scope: !7)
!60 = !DILocation(line: 69, column: 20, scope: !7)
!61 = !DILocation(line: 71, column: 34, scope: !7)
!62 = !DILocation(line: 71, column: 30, scope: !7)
!63 = !DILocation(line: 71, column: 44, scope: !7)
!64 = !DILocation(line: 71, column: 39, scope: !7)
!65 = !DILocation(line: 71, column: 25, scope: !7)
!66 = !DILocation(line: 71, column: 56, scope: !7)
!67 = !DILocation(line: 71, column: 4, scope: !7)
