; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %13, !dbg !17
  %23 = or disjoint i32 %21, %10, !dbg !17
  %24 = or disjoint i32 %21, %11, !dbg !17
  %25 = icmp slt i32 %22, 196, !dbg !18
  %26 = icmp slt i32 %23, 196, !dbg !18
  %27 = icmp slt i32 %24, 196, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %28 = sdiv i32 %.frozen, 8, !dbg !19
  %29 = mul i32 %28, 8, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %.frozen18 = freeze i32 %15, !dbg !19
  %30 = sdiv i32 %.frozen18, 8, !dbg !19
  %31 = mul i32 %30, 8, !dbg !20
  %.decomposed19 = sub i32 %.frozen18, %31, !dbg !20
  %.frozen20 = freeze i32 %16, !dbg !21
  %32 = sdiv i32 %.frozen20, 64, !dbg !21
  %33 = mul i32 %32, 64, !dbg !22
  %.decomposed21 = sub i32 %.frozen20, %33, !dbg !22
  %34 = mul nsw i32 %.decomposed, 392, !dbg !23
  %35 = mul nsw i32 %.decomposed19, 392, !dbg !23
  %36 = mul i32 %28, 6272, !dbg !24
  %37 = mul i32 %30, 6272, !dbg !24
  %38 = add i32 %36, %34, !dbg !25
  %39 = add i32 %38, %22, !dbg !26
  %40 = add i32 %37, %35, !dbg !25
  %41 = add i32 %40, %22, !dbg !26
  %42 = sext i32 %39 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = sext i32 %41 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !27
  %46 = and i1 %17, %25, !dbg !28
  %47 = and i1 %18, %25, !dbg !28
  %48 = and i1 %19, %26, !dbg !28
  %49 = and i1 %19, %27, !dbg !28
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %46) #2, !dbg !29
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !29
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %47) #2, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !29
  %60 = add i32 %22, 196, !dbg !30
  %61 = add i32 %38, %60, !dbg !31
  %62 = add i32 %40, %60, !dbg !31
  %63 = sext i32 %61 to i64, !dbg !32
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !32
  %65 = sext i32 %62 to i64, !dbg !32
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !32
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %46) #2, !dbg !33
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !33
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !33
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !33
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !33
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %47) #2, !dbg !33
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !33
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !33
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !33
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !33
  %77 = add i32 %22, 3136, !dbg !34
  %78 = add i32 %38, %77, !dbg !35
  %79 = add i32 %40, %77, !dbg !35
  %80 = sext i32 %78 to i64, !dbg !36
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !36
  %82 = sext i32 %79 to i64, !dbg !36
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !36
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %46) #2, !dbg !37
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !37
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !37
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !37
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !37
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %47) #2, !dbg !37
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !37
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !37
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !37
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !37
  %94 = add i32 %22, 3332, !dbg !38
  %95 = add i32 %38, %94, !dbg !39
  %96 = add i32 %40, %94, !dbg !39
  %97 = sext i32 %95 to i64, !dbg !40
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !40
  %99 = sext i32 %96 to i64, !dbg !40
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !40
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %46) #2, !dbg !41
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !41
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !41
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !41
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !41
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %47) #2, !dbg !41
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !41
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !41
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !41
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !41
  %111 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !29
  %112 = insertelement <4 x i32> %111, i32 %52, i64 1, !dbg !29
  %113 = insertelement <4 x i32> %112, i32 %53, i64 2, !dbg !29
  %114 = insertelement <4 x i32> %113, i32 %54, i64 3, !dbg !29
  %115 = bitcast <4 x i32> %114 to <4 x float>, !dbg !29
  %116 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !33
  %117 = insertelement <4 x i32> %116, i32 %69, i64 1, !dbg !33
  %118 = insertelement <4 x i32> %117, i32 %70, i64 2, !dbg !33
  %119 = insertelement <4 x i32> %118, i32 %71, i64 3, !dbg !33
  %120 = bitcast <4 x i32> %119 to <4 x float>, !dbg !33
  %121 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !37
  %122 = insertelement <4 x i32> %121, i32 %86, i64 1, !dbg !37
  %123 = insertelement <4 x i32> %122, i32 %87, i64 2, !dbg !37
  %124 = insertelement <4 x i32> %123, i32 %88, i64 3, !dbg !37
  %125 = bitcast <4 x i32> %124 to <4 x float>, !dbg !37
  %126 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !41
  %127 = insertelement <4 x i32> %126, i32 %103, i64 1, !dbg !41
  %128 = insertelement <4 x i32> %127, i32 %104, i64 2, !dbg !41
  %129 = insertelement <4 x i32> %128, i32 %105, i64 3, !dbg !41
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !41
  %131 = fcmp ogt <4 x float> %120, %115, !dbg !42
  %132 = zext <4 x i1> %131 to <4 x i8>, !dbg !43
  %133 = fcmp uno <4 x float> %120, zeroinitializer, !dbg !44
  %134 = or <4 x i1> %131, %133, !dbg !48
  %.v = select <4 x i1> %134, <4 x i32> %119, <4 x i32> %114, !dbg !49
  %135 = bitcast <4 x i32> %.v to <4 x float>, !dbg !49
  %136 = fcmp olt <4 x float> %135, %125, !dbg !50
  %137 = select <4 x i1> %136, <4 x i8> splat (i8 2), <4 x i8> %132, !dbg !51
  %138 = fcmp uno <4 x float> %125, zeroinitializer, !dbg !52
  %139 = or <4 x i1> %138, %136, !dbg !54
  %.v15 = select <4 x i1> %139, <4 x i32> %124, <4 x i32> %.v, !dbg !55
  %140 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !55
  %141 = fcmp olt <4 x float> %140, %130, !dbg !56
  %142 = select <4 x i1> %141, <4 x i8> splat (i8 3), <4 x i8> %137, !dbg !57
  %143 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !29
  %144 = insertelement <4 x i32> %143, i32 %57, i64 1, !dbg !29
  %145 = insertelement <4 x i32> %144, i32 %58, i64 2, !dbg !29
  %146 = insertelement <4 x i32> %145, i32 %59, i64 3, !dbg !29
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !29
  %148 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !33
  %149 = insertelement <4 x i32> %148, i32 %74, i64 1, !dbg !33
  %150 = insertelement <4 x i32> %149, i32 %75, i64 2, !dbg !33
  %151 = insertelement <4 x i32> %150, i32 %76, i64 3, !dbg !33
  %152 = bitcast <4 x i32> %151 to <4 x float>, !dbg !33
  %153 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !37
  %154 = insertelement <4 x i32> %153, i32 %91, i64 1, !dbg !37
  %155 = insertelement <4 x i32> %154, i32 %92, i64 2, !dbg !37
  %156 = insertelement <4 x i32> %155, i32 %93, i64 3, !dbg !37
  %157 = bitcast <4 x i32> %156 to <4 x float>, !dbg !37
  %158 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !41
  %159 = insertelement <4 x i32> %158, i32 %108, i64 1, !dbg !41
  %160 = insertelement <4 x i32> %159, i32 %109, i64 2, !dbg !41
  %161 = insertelement <4 x i32> %160, i32 %110, i64 3, !dbg !41
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !41
  %163 = fcmp ogt <4 x float> %152, %147, !dbg !42
  %164 = zext <4 x i1> %163 to <4 x i8>, !dbg !43
  %165 = fcmp uno <4 x float> %152, zeroinitializer, !dbg !44
  %166 = or <4 x i1> %163, %165, !dbg !48
  %.v16 = select <4 x i1> %166, <4 x i32> %151, <4 x i32> %146, !dbg !49
  %167 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !49
  %168 = fcmp olt <4 x float> %167, %157, !dbg !50
  %169 = select <4 x i1> %168, <4 x i8> splat (i8 2), <4 x i8> %164, !dbg !51
  %170 = fcmp uno <4 x float> %157, zeroinitializer, !dbg !52
  %171 = or <4 x i1> %170, %168, !dbg !54
  %.v17 = select <4 x i1> %171, <4 x i32> %156, <4 x i32> %.v16, !dbg !55
  %172 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !55
  %173 = fcmp olt <4 x float> %172, %162, !dbg !56
  %174 = select <4 x i1> %173, <4 x i8> splat (i8 3), <4 x i8> %169, !dbg !57
  %175 = shufflevector <4 x float> %162, <4 x float> %130, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !58
  %176 = fcmp uno <8 x float> %175, zeroinitializer, !dbg !58
  %177 = extractelement <4 x i1> %141, i64 0, !dbg !60
  %178 = extractelement <8 x i1> %176, i64 7, !dbg !60
  %179 = or i1 %178, %177, !dbg !60
  %180 = extractelement <4 x i1> %141, i64 1, !dbg !60
  %181 = extractelement <8 x i1> %176, i64 6, !dbg !60
  %182 = or i1 %181, %180, !dbg !60
  %183 = extractelement <4 x i1> %141, i64 2, !dbg !60
  %184 = extractelement <8 x i1> %176, i64 5, !dbg !60
  %185 = or i1 %184, %183, !dbg !60
  %186 = extractelement <4 x i1> %141, i64 3, !dbg !60
  %187 = extractelement <8 x i1> %176, i64 4, !dbg !60
  %188 = or i1 %187, %186, !dbg !60
  %189 = extractelement <4 x i1> %173, i64 0, !dbg !60
  %190 = extractelement <8 x i1> %176, i64 3, !dbg !60
  %191 = or i1 %190, %189, !dbg !60
  %192 = extractelement <4 x i1> %173, i64 1, !dbg !60
  %193 = extractelement <8 x i1> %176, i64 2, !dbg !60
  %194 = or i1 %193, %192, !dbg !60
  %195 = extractelement <4 x i1> %173, i64 2, !dbg !60
  %196 = extractelement <8 x i1> %176, i64 1, !dbg !60
  %197 = or i1 %196, %195, !dbg !60
  %198 = extractelement <4 x i1> %173, i64 3, !dbg !60
  %199 = extractelement <8 x i1> %176, i64 0, !dbg !60
  %200 = or i1 %199, %198, !dbg !60
  %201 = mul i32 %14, 196, !dbg !61
  %202 = mul i32 %15, 196, !dbg !61
  %203 = add i32 %22, %201, !dbg !62
  %204 = add i32 %22, %202, !dbg !62
  %205 = sext i32 %203 to i64, !dbg !63
  %206 = getelementptr i8, ptr addrspace(1) %1, i64 %205, !dbg !63
  %207 = sext i32 %204 to i64, !dbg !63
  %208 = getelementptr i8, ptr addrspace(1) %1, i64 %207, !dbg !63
  %209 = bitcast <4 x i8> %142 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %206, i1 %46) #2, !dbg !64
  %210 = bitcast <4 x i8> %174 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %208, i1 %47) #2, !dbg !64
  %211 = shl i32 %23, 6, !dbg !65
  %212 = shl i32 %24, 6, !dbg !65
  %213 = mul i32 %32, 12544, !dbg !66
  %214 = add i32 %213, %.decomposed21, !dbg !67
  %215 = add i32 %214, %211, !dbg !68
  %216 = add i32 %214, %212, !dbg !68
  %217 = sext i32 %215 to i64, !dbg !69
  %218 = getelementptr float, ptr addrspace(1) %2, i64 %217, !dbg !69
  %219 = sext i32 %216 to i64, !dbg !69
  %220 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !69
  %221 = shl i32 %8, 7, !dbg !70
  %222 = and i32 %221, 896, !dbg !70
  %223 = or disjoint i32 %222, %10, !dbg !70
  %224 = and i32 %12, 508, !dbg !70
  %225 = lshr exact i32 %222, 3, !dbg !70
  %226 = or disjoint i32 %225, %223, !dbg !70
  %227 = zext nneg i32 %226 to i64, !dbg !70
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %227, !dbg !70
  %229 = extractelement <4 x i32> %.v15, i64 0, !dbg !70
  %230 = select i1 %179, i32 %102, i32 %229, !dbg !71
  %231 = insertelement <1 x i32> poison, i32 %230, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %231, i1 true) #2, !dbg !70
  %232 = or disjoint i32 %223, 32, !dbg !70
  %233 = lshr i32 %232, 3, !dbg !70
  %234 = and i32 %233, 116, !dbg !70
  %235 = add nuw nsw i32 %234, %232, !dbg !70
  %236 = zext nneg i32 %235 to i64, !dbg !70
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %236, !dbg !70
  %238 = extractelement <4 x i32> %.v15, i64 1, !dbg !70
  %239 = select i1 %182, i32 %103, i32 %238, !dbg !71
  %240 = insertelement <1 x i32> poison, i32 %239, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %240, i1 true) #2, !dbg !70
  %241 = or disjoint i32 %223, 64, !dbg !70
  %242 = lshr i32 %241, 3, !dbg !70
  %243 = and i32 %242, 120, !dbg !70
  %244 = add nuw nsw i32 %243, %241, !dbg !70
  %245 = zext nneg i32 %244 to i64, !dbg !70
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %245, !dbg !70
  %247 = extractelement <4 x i32> %.v15, i64 2, !dbg !70
  %248 = select i1 %185, i32 %104, i32 %247, !dbg !71
  %249 = insertelement <1 x i32> poison, i32 %248, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %249, i1 true) #2, !dbg !70
  %250 = or disjoint i32 %223, 96, !dbg !70
  %251 = lshr i32 %250, 3, !dbg !70
  %252 = and i32 %251, 124, !dbg !70
  %253 = add nuw nsw i32 %252, %250, !dbg !70
  %254 = zext nneg i32 %253 to i64, !dbg !70
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %254, !dbg !70
  %256 = extractelement <4 x i32> %.v15, i64 3, !dbg !70
  %257 = select i1 %188, i32 %105, i32 %256, !dbg !71
  %258 = insertelement <1 x i32> poison, i32 %257, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %258, i1 true) #2, !dbg !70
  %259 = or disjoint i32 %223, 16, !dbg !70
  %260 = add nuw nsw i32 %259, %225, !dbg !70
  %261 = zext nneg i32 %260 to i64, !dbg !70
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %261, !dbg !70
  %263 = extractelement <4 x i32> %.v17, i64 0, !dbg !70
  %264 = select i1 %191, i32 %107, i32 %263, !dbg !71
  %265 = insertelement <1 x i32> poison, i32 %264, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %265, i1 true) #2, !dbg !70
  %266 = or disjoint i32 %223, 48, !dbg !70
  %267 = lshr i32 %266, 3, !dbg !70
  %268 = and i32 %267, 116, !dbg !70
  %269 = add nuw nsw i32 %268, %266, !dbg !70
  %270 = zext nneg i32 %269 to i64, !dbg !70
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %270, !dbg !70
  %272 = extractelement <4 x i32> %.v17, i64 1, !dbg !70
  %273 = select i1 %194, i32 %108, i32 %272, !dbg !71
  %274 = insertelement <1 x i32> poison, i32 %273, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %274, i1 true) #2, !dbg !70
  %275 = or disjoint i32 %223, 80, !dbg !70
  %276 = lshr i32 %275, 3, !dbg !70
  %277 = and i32 %276, 120, !dbg !70
  %278 = add nuw nsw i32 %277, %275, !dbg !70
  %279 = zext nneg i32 %278 to i64, !dbg !70
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %279, !dbg !70
  %281 = extractelement <4 x i32> %.v17, i64 2, !dbg !70
  %282 = select i1 %197, i32 %109, i32 %281, !dbg !71
  %283 = insertelement <1 x i32> poison, i32 %282, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %283, i1 true) #2, !dbg !70
  %284 = or disjoint i32 %223, 112, !dbg !70
  %285 = lshr i32 %284, 3, !dbg !70
  %286 = and i32 %285, 124, !dbg !70
  %287 = add nuw nsw i32 %286, %284, !dbg !70
  %288 = zext nneg i32 %287 to i64, !dbg !70
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %288, !dbg !70
  %290 = extractelement <4 x i32> %.v17, i64 3, !dbg !70
  %291 = select i1 %200, i32 %110, i32 %290, !dbg !71
  %292 = insertelement <1 x i32> poison, i32 %291, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %292, i1 true) #2, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %293 = lshr i32 %12, 3, !dbg !70
  %294 = and i32 %293, 60, !dbg !70
  %295 = add nuw nsw i32 %294, %224, !dbg !70
  %296 = zext nneg i32 %295 to i64, !dbg !70
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %296, !dbg !70
  %298 = or disjoint i32 %224, 512, !dbg !70
  %299 = lshr i32 %298, 3, !dbg !70
  %300 = and i32 %299, 124, !dbg !70
  %301 = add nuw nsw i32 %300, %298, !dbg !70
  %302 = zext nneg i32 %301 to i64, !dbg !70
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %302, !dbg !70
  %304 = load <4 x i32>, ptr addrspace(3) %303, align 16, !dbg !70
  %.extract = load i32, ptr addrspace(3) %297, align 16, !dbg !70
  %305 = getelementptr inbounds i8, ptr addrspace(3) %297, i64 4, !dbg !70
  %.extract8 = load i32, ptr addrspace(3) %305, align 4, !dbg !70
  %306 = getelementptr inbounds i8, ptr addrspace(3) %297, i64 8, !dbg !70
  %.extract9 = load i32, ptr addrspace(3) %306, align 8, !dbg !70
  %307 = getelementptr inbounds i8, ptr addrspace(3) %297, i64 12, !dbg !70
  %.extract10 = load i32, ptr addrspace(3) %307, align 4, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %218, i1 %48) #2, !dbg !70
  %.extract11 = extractelement <4 x i32> %304, i64 0, !dbg !70
  %.extract12 = extractelement <4 x i32> %304, i64 1, !dbg !70
  %.extract13 = extractelement <4 x i32> %304, i64 2, !dbg !70
  %.extract14 = extractelement <4 x i32> %304, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %220, i1 %49) #2, !dbg !70
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgf2ns6yfsshgcpo6tkevycf4p362r65kepmfzpuf3zz63vu7bpy.py", directory: "inductor_cache/gf")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 49, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 62, scope: !7)
!29 = !DILocation(line: 34, column: 54, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 50, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 60, scope: !7)
!34 = !DILocation(line: 36, column: 37, scope: !7)
!35 = !DILocation(line: 36, column: 51, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 61, scope: !7)
!38 = !DILocation(line: 37, column: 38, scope: !7)
!39 = !DILocation(line: 37, column: 52, scope: !7)
!40 = !DILocation(line: 37, column: 31, scope: !7)
!41 = !DILocation(line: 37, column: 62, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 42, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 43, column: 18, scope: !7)
!51 = !DILocation(line: 45, column: 33, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !53)
!53 = !DILocation(line: 46, column: 41, scope: !7)
!54 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !53)
!55 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !53)
!56 = !DILocation(line: 47, column: 20, scope: !7)
!57 = !DILocation(line: 49, column: 35, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !59)
!59 = !DILocation(line: 50, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !59)
!61 = !DILocation(line: 51, column: 34, scope: !7)
!62 = !DILocation(line: 51, column: 30, scope: !7)
!63 = !DILocation(line: 51, column: 25, scope: !7)
!64 = !DILocation(line: 51, column: 46, scope: !7)
!65 = !DILocation(line: 52, column: 33, scope: !7)
!66 = !DILocation(line: 52, column: 44, scope: !7)
!67 = !DILocation(line: 52, column: 30, scope: !7)
!68 = !DILocation(line: 52, column: 38, scope: !7)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 56, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !59)
!72 = !DILocation(line: 52, column: 4, scope: !7)
