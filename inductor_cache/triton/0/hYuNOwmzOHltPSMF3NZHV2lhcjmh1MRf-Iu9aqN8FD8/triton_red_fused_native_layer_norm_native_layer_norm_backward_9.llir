; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_native_layer_norm_native_layer_norm_backward_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
.peel.next:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 60, !dbg !12
  %13 = lshr i32 %10, 1, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = icmp slt i32 %15, 1024, !dbg !14
  %17 = lshr i32 %10, 4, !dbg !15
  %18 = and i32 %17, 7, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %19 = sdiv i32 %.frozen, 256, !dbg !16
  %20 = mul i32 %19, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = mul i32 %19, 24576, !dbg !18
  %22 = add i32 %21, %.decomposed
  %23 = zext nneg i32 %18 to i64, !dbg !19
  %24 = shl nuw nsw i32 %18, 8, !dbg !20
  %25 = add i32 %22, %24, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !23
  %29 = select i1 %16, float 1.000000e+00, float 0.000000e+00, !dbg !24
  %30 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !23
  %34 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !23
  %35 = insertelement <4 x i32> %34, i32 %31, i64 1, !dbg !23
  %36 = insertelement <4 x i32> %35, i32 %32, i64 2, !dbg !23
  %37 = insertelement <4 x i32> %36, i32 %33, i64 3, !dbg !23
  %38 = bitcast <4 x i32> %37 to <4 x float>, !dbg !23
  %39 = insertelement <4 x i1> poison, i1 %16, i64 0, !dbg !25
  %40 = shufflevector <4 x i1> %39, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !25
  %41 = select <4 x i1> %40, <4 x float> %38, <4 x float> zeroinitializer, !dbg !25
  br label %42, !dbg !19

42:                                               ; preds = %.peel.next, %42
  %indvars.iv = phi i64 [ 8, %.peel.next ], [ %indvars.iv.next, %42 ]
  %.pn82 = phi float [ %29, %.peel.next ], [ %83, %42 ]
  %.pn80 = phi float [ %29, %.peel.next ], [ %84, %42 ]
  %.pn78 = phi float [ %29, %.peel.next ], [ %85, %42 ]
  %.pn76 = phi float [ %29, %.peel.next ], [ %86, %42 ]
  %43 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %82, %42 ]
  %44 = phi <4 x float> [ %41, %.peel.next ], [ %81, %42 ]
  %45 = trunc i64 %indvars.iv to i32, !dbg !21
  %.tr = or disjoint i32 %18, %45, !dbg !21
  %46 = shl i32 %.tr, 8, !dbg !21
  %47 = add i32 %22, %46, !dbg !21
  %48 = sext i32 %47 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !23
  %55 = fadd float %.pn82, 1.000000e+00, !dbg !26
  %56 = fadd float %.pn80, 1.000000e+00, !dbg !26
  %57 = fadd float %.pn78, 1.000000e+00, !dbg !26
  %58 = fadd float %.pn76, 1.000000e+00, !dbg !26
  %59 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !23
  %60 = insertelement <4 x i32> %59, i32 %53, i64 1, !dbg !23
  %61 = insertelement <4 x i32> %60, i32 %52, i64 2, !dbg !23
  %62 = insertelement <4 x i32> %61, i32 %51, i64 3, !dbg !23
  %63 = bitcast <4 x i32> %62 to <4 x float>, !dbg !23
  %64 = fsub <4 x float> %63, %44, !dbg !30
  %65 = extractelement <4 x float> %64, i64 0, !dbg !31
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %55) #5, !dbg !31
  %67 = extractelement <4 x float> %64, i64 1, !dbg !31
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %56) #5, !dbg !31
  %69 = extractelement <4 x float> %64, i64 2, !dbg !31
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float %57) #5, !dbg !31
  %71 = extractelement <4 x float> %64, i64 3, !dbg !31
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %58) #5, !dbg !31
  %73 = insertelement <4 x float> poison, float %66, i64 0, !dbg !32
  %74 = insertelement <4 x float> %73, float %68, i64 1, !dbg !32
  %75 = insertelement <4 x float> %74, float %70, i64 2, !dbg !32
  %76 = insertelement <4 x float> %75, float %72, i64 3, !dbg !32
  %77 = fadd <4 x float> %44, %76, !dbg !32
  %78 = fsub <4 x float> %63, %77, !dbg !33
  %79 = fmul <4 x float> %64, %78, !dbg !34
  %80 = fadd <4 x float> %43, %79, !dbg !35
  %81 = select <4 x i1> %40, <4 x float> %77, <4 x float> %44, !dbg !25
  %82 = select <4 x i1> %40, <4 x float> %80, <4 x float> %43, !dbg !36
  %83 = select i1 %16, float %55, float %.pn82, !dbg !24
  %84 = select i1 %16, float %56, float %.pn80, !dbg !24
  %85 = select i1 %16, float %57, float %.pn78, !dbg !24
  %86 = select i1 %16, float %58, float %.pn76, !dbg !24
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !19
  %87 = icmp samesign ult i64 %indvars.iv, 88, !dbg !19
  br i1 %87, label %42, label %.loopexit, !dbg !19, !llvm.loop !37

.loopexit:                                        ; preds = %42
  %88 = and i32 %10, 16, !dbg !12
  %89 = and i32 %11, 4, !dbg !12
  %90 = lshr i32 %10, 5, !dbg !12
  %91 = and i32 %10, 63, !dbg !12
  %92 = or disjoint i32 %9, %14, !dbg !13
  %93 = icmp slt i32 %92, 1024, !dbg !14
  %94 = extractelement <4 x float> %81, i64 0, !dbg !39
  %95 = bitcast float %94 to i32, !dbg !39
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 16, i32 31), !dbg !39
  %97 = bitcast i32 %96 to float, !dbg !39
  %98 = extractelement <4 x float> %82, i64 0, !dbg !39
  %99 = bitcast float %98 to i32, !dbg !39
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !39
  %101 = bitcast i32 %100 to float, !dbg !39
  %102 = bitcast float %83 to i32, !dbg !39
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !39
  %104 = bitcast i32 %103 to float, !dbg !39
  %105 = fsub float %97, %94, !dbg !41
  %106 = fadd float %83, %104, !dbg !43
  %107 = fcmp oeq float %106, 0.000000e+00, !dbg !44
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %106) #5, !dbg !45
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !46
  %110 = fmul float %105, %109, !dbg !47
  %111 = fadd float %94, %110, !dbg !48
  %112 = fadd float %98, %101, !dbg !49
  %113 = fmul float %105, %105, !dbg !50
  %114 = fmul float %83, %113, !dbg !51
  %115 = fmul float %114, %109, !dbg !52
  %116 = fadd float %112, %115, !dbg !53
  %117 = extractelement <4 x float> %81, i64 1, !dbg !39
  %118 = bitcast float %117 to i32, !dbg !39
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 16, i32 31), !dbg !39
  %120 = bitcast i32 %119 to float, !dbg !39
  %121 = extractelement <4 x float> %82, i64 1, !dbg !39
  %122 = bitcast float %121 to i32, !dbg !39
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 16, i32 31), !dbg !39
  %124 = bitcast i32 %123 to float, !dbg !39
  %125 = bitcast float %84 to i32, !dbg !39
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 16, i32 31), !dbg !39
  %127 = bitcast i32 %126 to float, !dbg !39
  %128 = fsub float %120, %117, !dbg !41
  %129 = fadd float %84, %127, !dbg !43
  %130 = fcmp oeq float %129, 0.000000e+00, !dbg !44
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %129) #5, !dbg !45
  %132 = select i1 %130, float 0.000000e+00, float %131, !dbg !46
  %133 = fmul float %128, %132, !dbg !47
  %134 = fadd float %117, %133, !dbg !48
  %135 = fadd float %121, %124, !dbg !49
  %136 = fmul float %128, %128, !dbg !50
  %137 = fmul float %84, %136, !dbg !51
  %138 = fmul float %137, %132, !dbg !52
  %139 = fadd float %135, %138, !dbg !53
  %140 = extractelement <4 x float> %81, i64 2, !dbg !39
  %141 = bitcast float %140 to i32, !dbg !39
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !39
  %143 = bitcast i32 %142 to float, !dbg !39
  %144 = extractelement <4 x float> %82, i64 2, !dbg !39
  %145 = bitcast float %144 to i32, !dbg !39
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 16, i32 31), !dbg !39
  %147 = bitcast i32 %146 to float, !dbg !39
  %148 = bitcast float %85 to i32, !dbg !39
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 16, i32 31), !dbg !39
  %150 = bitcast i32 %149 to float, !dbg !39
  %151 = fsub float %143, %140, !dbg !41
  %152 = fadd float %85, %150, !dbg !43
  %153 = fcmp oeq float %152, 0.000000e+00, !dbg !44
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %152) #5, !dbg !45
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !46
  %156 = fmul float %151, %155, !dbg !47
  %157 = fadd float %140, %156, !dbg !48
  %158 = fadd float %144, %147, !dbg !49
  %159 = fmul float %151, %151, !dbg !50
  %160 = fmul float %85, %159, !dbg !51
  %161 = fmul float %160, %155, !dbg !52
  %162 = fadd float %158, %161, !dbg !53
  %163 = extractelement <4 x float> %81, i64 3, !dbg !39
  %164 = bitcast float %163 to i32, !dbg !39
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 16, i32 31), !dbg !39
  %166 = bitcast i32 %165 to float, !dbg !39
  %167 = extractelement <4 x float> %82, i64 3, !dbg !39
  %168 = bitcast float %167 to i32, !dbg !39
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 16, i32 31), !dbg !39
  %170 = bitcast i32 %169 to float, !dbg !39
  %171 = bitcast float %86 to i32, !dbg !39
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 16, i32 31), !dbg !39
  %173 = bitcast i32 %172 to float, !dbg !39
  %174 = fsub float %166, %163, !dbg !41
  %175 = fadd float %86, %173, !dbg !43
  %176 = fcmp oeq float %175, 0.000000e+00, !dbg !44
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %175) #5, !dbg !45
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !46
  %179 = fmul float %174, %178, !dbg !47
  %180 = fadd float %163, %179, !dbg !48
  %181 = fadd float %167, %170, !dbg !49
  %182 = fmul float %174, %174, !dbg !50
  %183 = fmul float %86, %182, !dbg !51
  %184 = fmul float %183, %178, !dbg !52
  %185 = fadd float %181, %184, !dbg !53
  %186 = icmp eq i32 %88, 0, !dbg !39
  %187 = and i32 %90, 3, !dbg !39
  %188 = shl nuw nsw i32 %12, 2, !dbg !39
  %189 = or disjoint i32 %188, %187, !dbg !39
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !39
  %191 = bitcast float %111 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 %186) #5, !dbg !39
  %192 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %189, !dbg !39
  %193 = bitcast float %116 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 %186) #5, !dbg !39
  %194 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %189, !dbg !39
  %195 = bitcast float %106 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 %186) #5, !dbg !39
  %196 = or disjoint i32 %188, 4, !dbg !39
  %197 = or disjoint i32 %196, %187, !dbg !39
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !39
  %199 = bitcast float %134 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 %186) #5, !dbg !39
  %200 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %197, !dbg !39
  %201 = bitcast float %139 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 %186) #5, !dbg !39
  %202 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %197, !dbg !39
  %203 = bitcast float %129 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 %186) #5, !dbg !39
  %204 = or disjoint i32 %188, 8, !dbg !39
  %205 = or disjoint i32 %204, %187, !dbg !39
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %205, !dbg !39
  %207 = bitcast float %157 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 %186) #5, !dbg !39
  %208 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %205, !dbg !39
  %209 = bitcast float %162 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 %186) #5, !dbg !39
  %210 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %205, !dbg !39
  %211 = bitcast float %152 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 %186) #5, !dbg !39
  %212 = or disjoint i32 %188, 12, !dbg !39
  %213 = or disjoint i32 %212, %187, !dbg !39
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !39
  %215 = bitcast float %180 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 %186) #5, !dbg !39
  %216 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %213, !dbg !39
  %217 = bitcast float %185 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 %186) #5, !dbg !39
  %218 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %213, !dbg !39
  %219 = bitcast float %175 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 %186) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %220 = icmp slt i32 %10, 256, !dbg !39
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !39
  %222 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %221, i1 %220) #5, !dbg !39
  %223 = bitcast i32 %222 to float, !dbg !39
  %224 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %10, !dbg !39
  %225 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %224, i1 %220) #5, !dbg !39
  %226 = bitcast i32 %225 to float, !dbg !39
  %227 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %10, !dbg !39
  %228 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %227, i1 %220) #5, !dbg !39
  %229 = bitcast i32 %228 to float, !dbg !39
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 2, i32 31), !dbg !39
  %231 = bitcast i32 %230 to float, !dbg !39
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 2, i32 31), !dbg !39
  %233 = bitcast i32 %232 to float, !dbg !39
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 2, i32 31), !dbg !39
  %235 = bitcast i32 %234 to float, !dbg !39
  %236 = fsub float %231, %223, !dbg !41
  %237 = fadd float %229, %235, !dbg !43
  %238 = fcmp oeq float %237, 0.000000e+00, !dbg !44
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %237) #5, !dbg !45
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !46
  %241 = fmul float %236, %240, !dbg !47
  %242 = fadd float %241, %223, !dbg !48
  %243 = fadd float %226, %233, !dbg !49
  %244 = fmul float %236, %236, !dbg !50
  %245 = fmul float %244, %229, !dbg !51
  %246 = fmul float %245, %240, !dbg !52
  %247 = fadd float %243, %246, !dbg !53
  %248 = bitcast float %242 to i32, !dbg !39
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 1, i32 31), !dbg !39
  %250 = bitcast i32 %249 to float, !dbg !39
  %251 = bitcast float %247 to i32, !dbg !39
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 1, i32 31), !dbg !39
  %253 = bitcast i32 %252 to float, !dbg !39
  %254 = bitcast float %237 to i32, !dbg !39
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !39
  %256 = bitcast i32 %255 to float, !dbg !39
  %257 = fsub float %250, %242, !dbg !41
  %258 = fadd float %237, %256, !dbg !43
  %259 = fcmp oeq float %258, 0.000000e+00, !dbg !44
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float %258) #5, !dbg !45
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !46
  %262 = fmul float %257, %261, !dbg !47
  %263 = fadd float %242, %262, !dbg !48
  %264 = fadd float %247, %253, !dbg !49
  %265 = fmul float %257, %257, !dbg !50
  %266 = fmul float %237, %265, !dbg !51
  %267 = fmul float %261, %266, !dbg !52
  %268 = fadd float %264, %267, !dbg !53
  %269 = and i32 %10, 3, !dbg !39
  %270 = icmp eq i32 %269, 0, !dbg !39
  %271 = and i1 %220, %270, !dbg !39
  %272 = bitcast float %263 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %272, i1 %271) #5, !dbg !39
  %273 = bitcast float %268 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %273, i1 %271) #5, !dbg !39
  %274 = bitcast float %258 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %274, i1 %271) #5, !dbg !39
  %275 = add i32 %10, 128, !dbg !39
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !39
  %277 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %276, i1 %220) #5, !dbg !39
  %278 = bitcast i32 %277 to float, !dbg !39
  %279 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %275, !dbg !39
  %280 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %279, i1 %220) #5, !dbg !39
  %281 = bitcast i32 %280 to float, !dbg !39
  %282 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %275, !dbg !39
  %283 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %282, i1 %220) #5, !dbg !39
  %284 = bitcast i32 %283 to float, !dbg !39
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !39
  %286 = bitcast i32 %285 to float, !dbg !39
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !39
  %288 = bitcast i32 %287 to float, !dbg !39
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 2, i32 31), !dbg !39
  %290 = bitcast i32 %289 to float, !dbg !39
  %291 = fsub float %286, %278, !dbg !41
  %292 = fadd float %284, %290, !dbg !43
  %293 = fcmp oeq float %292, 0.000000e+00, !dbg !44
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %290, float %292) #5, !dbg !45
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !46
  %296 = fmul float %291, %295, !dbg !47
  %297 = fadd float %296, %278, !dbg !48
  %298 = fadd float %281, %288, !dbg !49
  %299 = fmul float %291, %291, !dbg !50
  %300 = fmul float %299, %284, !dbg !51
  %301 = fmul float %300, %295, !dbg !52
  %302 = fadd float %298, %301, !dbg !53
  %303 = bitcast float %297 to i32, !dbg !39
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !39
  %305 = bitcast i32 %304 to float, !dbg !39
  %306 = bitcast float %302 to i32, !dbg !39
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !39
  %308 = bitcast i32 %307 to float, !dbg !39
  %309 = bitcast float %292 to i32, !dbg !39
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 1, i32 31), !dbg !39
  %311 = bitcast i32 %310 to float, !dbg !39
  %312 = fsub float %305, %297, !dbg !41
  %313 = fadd float %292, %311, !dbg !43
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !44
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float %313) #5, !dbg !45
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !46
  %317 = fmul float %312, %316, !dbg !47
  %318 = fadd float %297, %317, !dbg !48
  %319 = fadd float %302, %308, !dbg !49
  %320 = fmul float %312, %312, !dbg !50
  %321 = fmul float %292, %320, !dbg !51
  %322 = fmul float %316, %321, !dbg !52
  %323 = fadd float %319, %322, !dbg !53
  %324 = bitcast float %318 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %324, i1 %271) #5, !dbg !39
  %325 = bitcast float %323 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %325, i1 %271) #5, !dbg !39
  %326 = bitcast float %313 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %326, i1 %271) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !39
  %328 = load float, ptr addrspace(3) %327, align 16, !dbg !39
  %329 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !39
  %330 = load float, ptr addrspace(3) %329, align 16, !dbg !39
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %204, !dbg !39
  %332 = load float, ptr addrspace(3) %331, align 16, !dbg !39
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !39
  %334 = load float, ptr addrspace(3) %333, align 16, !dbg !39
  %335 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %188, !dbg !39
  %336 = load float, ptr addrspace(3) %335, align 16, !dbg !39
  %337 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %196, !dbg !39
  %338 = load float, ptr addrspace(3) %337, align 16, !dbg !39
  %339 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %204, !dbg !39
  %340 = load float, ptr addrspace(3) %339, align 16, !dbg !39
  %341 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %212, !dbg !39
  %342 = load float, ptr addrspace(3) %341, align 16, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %343 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !54
  %344 = bitcast float %336 to i32, !dbg !54
  %345 = bitcast float %338 to i32, !dbg !54
  %346 = bitcast float %340 to i32, !dbg !54
  %347 = bitcast float %342 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %343, i32 %344, i32 %345, i32 %346, i32 %347, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !54
  %349 = load float, ptr addrspace(3) %348, align 4, !dbg !54
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %336, float 9.600000e+01) #5, !dbg !55
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %338, float 9.600000e+01) #5, !dbg !55
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %340, float 9.600000e+01) #5, !dbg !55
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %342, float 9.600000e+01) #5, !dbg !55
  %354 = fadd float %350, 0x3EB0C6F7A0000000, !dbg !56
  %355 = fadd float %351, 0x3EB0C6F7A0000000, !dbg !56
  %356 = fadd float %352, 0x3EB0C6F7A0000000, !dbg !56
  %357 = fadd float %353, 0x3EB0C6F7A0000000, !dbg !56
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i = icmp eq i32 %358, 0, !dbg !57
  br i1 %.not.i, label %361, label %359, !dbg !57

359:                                              ; preds = %.loopexit
  %360 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %354), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

361:                                              ; preds = %.loopexit
  %362 = tail call float @llvm.nvvm.rsqrt.approx.f(float %354), !dbg !57
  br label %__nv_rsqrtf.exit, !dbg !57

__nv_rsqrtf.exit:                                 ; preds = %359, %361
  %.0.i = phi float [ %360, %359 ], [ %362, %361 ], !dbg !57
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i25 = icmp eq i32 %363, 0, !dbg !57
  br i1 %.not.i25, label %366, label %364, !dbg !57

364:                                              ; preds = %__nv_rsqrtf.exit
  %365 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %355), !dbg !57
  br label %__nv_rsqrtf.exit27, !dbg !57

366:                                              ; preds = %__nv_rsqrtf.exit
  %367 = tail call float @llvm.nvvm.rsqrt.approx.f(float %355), !dbg !57
  br label %__nv_rsqrtf.exit27, !dbg !57

__nv_rsqrtf.exit27:                               ; preds = %364, %366
  %.0.i26 = phi float [ %365, %364 ], [ %367, %366 ], !dbg !57
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i28 = icmp eq i32 %368, 0, !dbg !57
  br i1 %.not.i28, label %371, label %369, !dbg !57

369:                                              ; preds = %__nv_rsqrtf.exit27
  %370 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %356), !dbg !57
  br label %__nv_rsqrtf.exit30, !dbg !57

371:                                              ; preds = %__nv_rsqrtf.exit27
  %372 = tail call float @llvm.nvvm.rsqrt.approx.f(float %356), !dbg !57
  br label %__nv_rsqrtf.exit30, !dbg !57

__nv_rsqrtf.exit30:                               ; preds = %369, %371
  %.0.i29 = phi float [ %370, %369 ], [ %372, %371 ], !dbg !57
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i31 = icmp eq i32 %373, 0, !dbg !57
  br i1 %.not.i31, label %376, label %374, !dbg !57

374:                                              ; preds = %__nv_rsqrtf.exit30
  %375 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %357), !dbg !57
  br label %__nv_rsqrtf.exit33, !dbg !57

376:                                              ; preds = %__nv_rsqrtf.exit30
  %377 = tail call float @llvm.nvvm.rsqrt.approx.f(float %357), !dbg !57
  br label %__nv_rsqrtf.exit33, !dbg !57

__nv_rsqrtf.exit33:                               ; preds = %374, %376
  %.0.i32 = phi float [ %375, %374 ], [ %377, %376 ], !dbg !57
  %378 = mul i32 %92, 96, !dbg !58
  %379 = or disjoint i32 %378, %89
  %380 = shl i32 %10, 5
  %381 = and i32 %380, 480
  %382 = or disjoint i32 %381, %18
  %383 = and i32 %11, 508
  %384 = lshr exact i32 %381, 1
  %385 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %384
  %386 = getelementptr inbounds float, ptr addrspace(3) %385, i32 %382
  %387 = or disjoint i32 %382, 8
  %388 = lshr i32 %387, 1
  %389 = and i32 %388, 244
  %390 = getelementptr float, ptr addrspace(3) @global_smem, i32 %389
  %391 = getelementptr float, ptr addrspace(3) %390, i32 %387
  %392 = or disjoint i32 %382, 16
  %393 = lshr i32 %392, 1
  %394 = and i32 %393, 248
  %395 = getelementptr float, ptr addrspace(3) @global_smem, i32 %394
  %396 = getelementptr float, ptr addrspace(3) %395, i32 %392
  %397 = or disjoint i32 %382, 24
  %398 = lshr i32 %397, 1
  %399 = and i32 %398, 252
  %400 = getelementptr float, ptr addrspace(3) @global_smem, i32 %399
  %401 = getelementptr float, ptr addrspace(3) %400, i32 %397
  %402 = lshr exact i32 %11, 1
  %403 = and i32 %402, 252
  %404 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %403
  %405 = getelementptr inbounds float, ptr addrspace(3) %404, i32 %383
  %406 = getelementptr inbounds i8, ptr addrspace(3) %405, i32 4
  %407 = getelementptr inbounds i8, ptr addrspace(3) %405, i32 8
  %408 = getelementptr inbounds i8, ptr addrspace(3) %405, i32 12
  br label %409, !dbg !59

409:                                              ; preds = %__nv_rsqrtf.exit33, %409
  %indvars.iv51 = phi i64 [ 0, %__nv_rsqrtf.exit33 ], [ %indvars.iv.next52, %409 ]
  %410 = or disjoint i64 %indvars.iv51, %23, !dbg !60
  %.tr91 = trunc i64 %410 to i32, !dbg !61
  %411 = shl i32 %.tr91, 8, !dbg !61
  %412 = add i32 %22, %411, !dbg !61
  %413 = sext i32 %412 to i64, !dbg !62
  %414 = getelementptr float, ptr addrspace(1) %0, i64 %413, !dbg !62
  %415 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %414, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !63
  %416 = extractvalue { i32, i32, i32, i32 } %415, 0, !dbg !63
  %417 = extractvalue { i32, i32, i32, i32 } %415, 1, !dbg !63
  %418 = extractvalue { i32, i32, i32, i32 } %415, 2, !dbg !63
  %419 = extractvalue { i32, i32, i32, i32 } %415, 3, !dbg !63
  %420 = bitcast i32 %416 to float, !dbg !63
  %421 = bitcast i32 %417 to float, !dbg !63
  %422 = bitcast i32 %418 to float, !dbg !63
  %423 = bitcast i32 %419 to float, !dbg !63
  %424 = getelementptr float, ptr addrspace(1) %1, i64 %410, !dbg !64
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %424, i1 true, i32 0, i1 true) #5, !dbg !65
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %424, i1 true, i32 0, i1 true) #5, !dbg !65
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %424, i1 true, i32 0, i1 true) #5, !dbg !65
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %424, i1 true, i32 0, i1 true) #5, !dbg !65
  %429 = bitcast i32 %428 to float, !dbg !65
  %430 = getelementptr float, ptr addrspace(1) %2, i64 %410, !dbg !66
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %430, i1 true, i32 0, i1 true) #5, !dbg !67
  %432 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %430, i1 true, i32 0, i1 true) #5, !dbg !67
  %433 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %430, i1 true, i32 0, i1 true) #5, !dbg !67
  %434 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %430, i1 true, i32 0, i1 true) #5, !dbg !67
  %435 = bitcast i32 %434 to float, !dbg !67
  %436 = fsub float %420, %328, !dbg !68
  %437 = fsub float %421, %330, !dbg !68
  %438 = fsub float %422, %332, !dbg !68
  %439 = fsub float %423, %334, !dbg !68
  %440 = fmul float %.0.i, %436, !dbg !69
  %441 = fmul float %.0.i26, %437, !dbg !69
  %442 = fmul float %.0.i29, %438, !dbg !69
  %443 = fmul float %.0.i32, %439, !dbg !69
  %444 = fmul float %440, %429, !dbg !70
  %445 = fmul float %441, %429, !dbg !70
  %446 = fmul float %442, %429, !dbg !70
  %447 = fmul float %443, %429, !dbg !70
  %448 = fadd float %444, %435, !dbg !71
  %449 = fadd float %445, %435, !dbg !71
  %450 = fadd float %446, %435, !dbg !71
  %451 = fadd float %447, %435, !dbg !71
  %452 = trunc nuw nsw i64 %indvars.iv51 to i32, !dbg !72
  %453 = add i32 %379, %452, !dbg !72
  %454 = sext i32 %453 to i64, !dbg !73
  %455 = getelementptr float, ptr addrspace(1) %3, i64 %454, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %456 = bitcast float %440 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %456, i1 true) #5, !dbg !74
  %457 = bitcast float %441 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %457, i1 true) #5, !dbg !74
  %458 = bitcast float %442 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %458, i1 true) #5, !dbg !74
  %459 = bitcast float %443 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %459, i1 true) #5, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %.extract = load i32, ptr addrspace(3) %405, align 16, !dbg !74
  %.extract8 = load i32, ptr addrspace(3) %406, align 4, !dbg !74
  %.extract9 = load i32, ptr addrspace(3) %407, align 8, !dbg !74
  %.extract10 = load i32, ptr addrspace(3) %408, align 4, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %455, i1 %93) #5, !dbg !74
  %460 = getelementptr float, ptr addrspace(1) %4, i64 %454, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %461 = bitcast float %448 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %461, i1 true) #5, !dbg !76
  %462 = bitcast float %449 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %462, i1 true) #5, !dbg !76
  %463 = bitcast float %450 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %463, i1 true) #5, !dbg !76
  %464 = bitcast float %451 to <1 x i32>, !dbg !76
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %464, i1 true) #5, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !76
  %.extract14 = load i32, ptr addrspace(3) %405, align 16, !dbg !76
  %.extract15 = load i32, ptr addrspace(3) %406, align 4, !dbg !76
  %.extract16 = load i32, ptr addrspace(3) %407, align 8, !dbg !76
  %.extract17 = load i32, ptr addrspace(3) %408, align 4, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %460, i1 %93) #5, !dbg !76
  %indvars.iv.next52 = add nuw nsw i64 %indvars.iv51, 8, !dbg !59
  %465 = icmp samesign ult i64 %indvars.iv51, 88, !dbg !59
  br i1 %465, label %409, label %466, !dbg !59

466:                                              ; preds = %409
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float 9.600000e+01) #5, !dbg !77
  %468 = fadd float %467, 0x3EB0C6F7A0000000, !dbg !78
  %469 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !79
  %.not.i34 = icmp eq i32 %469, 0, !dbg !79
  br i1 %.not.i34, label %472, label %470, !dbg !79

470:                                              ; preds = %466
  %471 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %468), !dbg !79
  br label %__nv_rsqrtf.exit36, !dbg !79

472:                                              ; preds = %466
  %473 = tail call float @llvm.nvvm.rsqrt.approx.f(float %468), !dbg !79
  br label %__nv_rsqrtf.exit36, !dbg !79

__nv_rsqrtf.exit36:                               ; preds = %470, %472
  %.0.i35 = phi float [ %471, %470 ], [ %473, %472 ], !dbg !79
  %474 = or disjoint i32 %9, %91, !dbg !13
  %475 = icmp slt i32 %474, 1024, !dbg !14
  %476 = fmul float %.0.i35, 0x3F85555560000000, !dbg !54
  %477 = sext i32 %474 to i64, !dbg !80
  %478 = getelementptr float, ptr addrspace(1) %5, i64 %477, !dbg !80
  %479 = and i32 %10, 64, !dbg !81
  %480 = icmp eq i32 %479, 0, !dbg !81
  %481 = bitcast float %476 to i32, !dbg !81
  %482 = and i1 %480, %475, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %481, ptr addrspace(1) %478, i1 %482) #5, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py", directory: "inductor_cache/kd")
!4 = !{ptr @triton_red_fused_native_layer_norm_native_layer_norm_backward_9, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_native_layer_norm_native_layer_norm_backward_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_native_layer_norm_native_layer_norm_backward_9", linkageName: "triton_red_fused_native_layer_norm_native_layer_norm_backward_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 36, column: 54, scope: !7)
!19 = !DILocation(line: 32, column: 36, scope: !7)
!20 = !DILocation(line: 36, column: 43, scope: !7)
!21 = !DILocation(line: 36, column: 48, scope: !7)
!22 = !DILocation(line: 36, column: 34, scope: !7)
!23 = !DILocation(line: 36, column: 59, scope: !7)
!24 = !DILocation(line: 43, column: 64, scope: !7)
!25 = !DILocation(line: 41, column: 60, scope: !7)
!26 = !DILocation(line: 184, column: 30, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 39, column: 51, scope: !7)
!30 = !DILocation(line: 183, column: 24, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 185, column: 34, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 185, column: 26, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 186, column: 39, scope: !27, inlinedAt: !29)
!34 = !DILocation(line: 186, column: 31, scope: !27, inlinedAt: !29)
!35 = !DILocation(line: 186, column: 22, scope: !27, inlinedAt: !29)
!36 = !DILocation(line: 42, column: 56, scope: !7)
!37 = distinct !{!37, !38}
!38 = !{!"llvm.loop.peeled.count", i32 1}
!39 = !DILocation(line: 204, column: 46, scope: !27, inlinedAt: !40)
!40 = !DILocation(line: 45, column: 41, scope: !7)
!41 = !DILocation(line: 192, column: 21, scope: !42, inlinedAt: !40)
!42 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!43 = !DILocation(line: 193, column: 28, scope: !42, inlinedAt: !40)
!44 = !DILocation(line: 194, column: 39, scope: !42, inlinedAt: !40)
!45 = !DILocation(line: 194, column: 60, scope: !42, inlinedAt: !40)
!46 = !DILocation(line: 194, column: 49, scope: !42, inlinedAt: !40)
!47 = !DILocation(line: 196, column: 25, scope: !42, inlinedAt: !40)
!48 = !DILocation(line: 196, column: 17, scope: !42, inlinedAt: !40)
!49 = !DILocation(line: 197, column: 15, scope: !42, inlinedAt: !40)
!50 = !DILocation(line: 197, column: 30, scope: !42, inlinedAt: !40)
!51 = !DILocation(line: 197, column: 38, scope: !42, inlinedAt: !40)
!52 = !DILocation(line: 197, column: 49, scope: !42, inlinedAt: !40)
!53 = !DILocation(line: 197, column: 22, scope: !42, inlinedAt: !40)
!54 = !DILocation(line: 74, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 22, scope: !7)
!56 = !DILocation(line: 61, column: 23, scope: !7)
!57 = !DILocation(line: 62, column: 32, scope: !7)
!58 = !DILocation(line: 66, column: 37, scope: !7)
!59 = !DILocation(line: 50, column: 36, scope: !7)
!60 = !DILocation(line: 51, column: 27, scope: !7)
!61 = !DILocation(line: 54, column: 48, scope: !7)
!62 = !DILocation(line: 54, column: 34, scope: !7)
!63 = !DILocation(line: 54, column: 59, scope: !7)
!64 = !DILocation(line: 55, column: 35, scope: !7)
!65 = !DILocation(line: 55, column: 40, scope: !7)
!66 = !DILocation(line: 56, column: 35, scope: !7)
!67 = !DILocation(line: 56, column: 40, scope: !7)
!68 = !DILocation(line: 57, column: 22, scope: !7)
!69 = !DILocation(line: 63, column: 23, scope: !7)
!70 = !DILocation(line: 64, column: 24, scope: !7)
!71 = !DILocation(line: 65, column: 24, scope: !7)
!72 = !DILocation(line: 66, column: 34, scope: !7)
!73 = !DILocation(line: 66, column: 29, scope: !7)
!74 = !DILocation(line: 66, column: 49, scope: !7)
!75 = !DILocation(line: 67, column: 29, scope: !7)
!76 = !DILocation(line: 67, column: 49, scope: !7)
!77 = !DILocation(line: 69, column: 19, scope: !7)
!78 = !DILocation(line: 71, column: 20, scope: !7)
!79 = !DILocation(line: 72, column: 28, scope: !7)
!80 = !DILocation(line: 75, column: 25, scope: !7)
!81 = !DILocation(line: 75, column: 37, scope: !7)
!82 = !DILocation(line: 75, column: 4, scope: !7)
