#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [16, 2], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#loc = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":19:0)
#loc1 = loc(unknown)
#loc36 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":45:41)
#loc94 = loc(callsite(#loc1 at #loc36))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_native_layer_norm_native_layer_norm_backward_9(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.600000e+01> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<96> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x8xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<24576> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<256> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<96> : tensor<1x8xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<96> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<256> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<1024> : tensor<64x1xi32, #blocked2> loc(#loc1)
    %cst_10 = arith.constant dense<1024> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<1024> : tensor<64x1xi32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_12 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c96_i32 = arith.constant 96 : i32 loc(#loc1)
    %cst_13 = arith.constant dense<9.99999997E-7> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<9.99999997E-7> : tensor<64x1xf32, #blocked2> loc(#loc1)
    %cst_15 = arith.constant dense<9.600000e+01> : tensor<64x1xf32, #blocked2> loc(#loc1)
    %cst_16 = arith.constant dense<0.010416667> : tensor<64x1xf32, #blocked2> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %7 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi32, #blocked2> loc(#loc4)
    %8 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked2> loc(#loc5)
    %11 = arith.addi %8, %5 : tensor<64x1xi32, #blocked> loc(#loc5)
    %12 = arith.addi %9, %6 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %13 = arith.addi %10, %7 : tensor<64x1xi32, #blocked2> loc(#loc5)
    %14 = arith.cmpi slt, %11, %cst_11 : tensor<64x1xi32, #blocked> loc(#loc6)
    %15 = arith.cmpi slt, %12, %cst_10 : tensor<64x1xi32, #blocked1> loc(#loc6)
    %16 = arith.cmpi slt, %13, %cst_9 : tensor<64x1xi32, #blocked2> loc(#loc6)
    %17 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %18 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %19 = tt.expand_dims %17 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc7)
    %20 = tt.expand_dims %18 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x8xi32, #blocked1> loc(#loc7)
    %21 = arith.remsi %11, %cst_8 : tensor<64x1xi32, #blocked> loc(#loc8)
    %22 = arith.divsi %11, %cst_8 : tensor<64x1xi32, #blocked> loc(#loc9)
    %23 = tt.broadcast %21 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc10)
    %24 = arith.muli %22, %cst_4 : tensor<64x1xi32, #blocked> loc(#loc11)
    %25 = tt.broadcast %24 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc12)
    %26 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc13)
    %27 = tt.broadcast %14 : tensor<64x1xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc14)
    %28:3 = scf.for %arg8 = %c0_i32 to %c96_i32 step %c8_i32 iter_args(%arg9 = %cst_0, %arg10 = %cst_0, %arg11 = %cst_0) -> (tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>)  : i32 {
      %52 = tt.splat %arg8 : i32 -> tensor<1x8xi32, #blocked> loc(#loc16)
      %53 = arith.addi %52, %19 : tensor<1x8xi32, #blocked> loc(#loc16)
      %54 = arith.cmpi slt, %53, %cst_7 : tensor<1x8xi32, #blocked> loc(#loc17)
      %55 = arith.muli %53, %cst_5 : tensor<1x8xi32, #blocked> loc(#loc18)
      %56 = tt.broadcast %55 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc10)
      %57 = arith.addi %23, %56 : tensor<64x8xi32, #blocked> loc(#loc10)
      %58 = arith.addi %57, %25 : tensor<64x8xi32, #blocked> loc(#loc12)
      %59 = tt.addptr %26, %58 : tensor<64x8x!tt.ptr<f32>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc13)
      %60 = tt.broadcast %54 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc14)
      %61 = arith.andi %60, %27 : tensor<64x8xi1, #blocked> loc(#loc14)
      %62 = tt.load %59, %61, %cst_0 evictionPolicy = evict_last : tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc19)
      %63 = arith.cmpi eq, %arg8, %c0_i32 : i32 loc(#loc20)
      %64:3 = scf.if %63 -> (tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>) {
        scf.yield %cst_0, %62, %cst_1 : tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked> loc(#loc85)
      } else {
        %68 = arith.subf %62, %arg9 : tensor<64x8xf32, #blocked> loc(#loc86)
        %69 = arith.addf %arg11, %cst_1 : tensor<64x8xf32, #blocked> loc(#loc87)
        %70 = arith.divf %68, %69 : tensor<64x8xf32, #blocked> loc(#loc88)
        %71 = arith.addf %arg9, %70 : tensor<64x8xf32, #blocked> loc(#loc89)
        %72 = arith.subf %62, %71 : tensor<64x8xf32, #blocked> loc(#loc90)
        %73 = arith.mulf %68, %72 : tensor<64x8xf32, #blocked> loc(#loc91)
        %74 = arith.addf %arg10, %73 : tensor<64x8xf32, #blocked> loc(#loc92)
        scf.yield %74, %71, %69 : tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked> loc(#loc92)
      } loc(#loc84)
      %65 = arith.select %61, %64#1, %arg9 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc31)
      %66 = arith.select %61, %64#0, %arg10 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc32)
      %67 = arith.select %61, %64#2, %arg11 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc33)
      scf.yield %65, %66, %67 : tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked> loc(#loc34)
    } loc(#loc15)
    %29:3 = "tt.reduce"(%28#0, %28#1, %28#2) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc36)), %arg9: f32 loc(callsite(#loc1 at #loc36)), %arg10: f32 loc(callsite(#loc1 at #loc36)), %arg11: f32 loc(callsite(#loc1 at #loc36)), %arg12: f32 loc(callsite(#loc1 at #loc36)), %arg13: f32 loc(callsite(#loc1 at #loc36))):
      %52 = arith.subf %arg11, %arg8 : f32 loc(#loc107)
      %53 = arith.addf %arg10, %arg13 : f32 loc(#loc108)
      %54 = arith.cmpf oeq, %53, %cst_12 : f32 loc(#loc109)
      %55 = arith.divf %arg13, %53 : f32 loc(#loc110)
      %56 = arith.select %54, %cst_12, %55 : f32 loc(#loc111)
      %57 = arith.mulf %52, %56 : f32 loc(#loc112)
      %58 = arith.addf %arg8, %57 : f32 loc(#loc113)
      %59 = arith.addf %arg9, %arg12 : f32 loc(#loc114)
      %60 = arith.mulf %52, %52 : f32 loc(#loc115)
      %61 = arith.mulf %60, %arg10 : f32 loc(#loc116)
      %62 = arith.mulf %61, %56 : f32 loc(#loc117)
      %63 = arith.addf %59, %62 : f32 loc(#loc118)
      tt.reduce.return %58, %63, %53 : f32, f32, f32 loc(#loc93)
    }) : (tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>, tensor<64x8xf32, #blocked>) -> (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc93)
    %30 = tt.expand_dims %29#0 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc49)
    %31 = triton_gpu.convert_layout %29#1 {fastmath = #arith.fastmath<none>} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc50)
    %32 = tt.expand_dims %31 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xf32, #blocked2> loc(#loc51)
    %33 = tt.expand_dims %29#1 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc51)
    %34 = tt.broadcast %15 : tensor<64x1xi1, #blocked1> -> tensor<64x8xi1, #blocked1> loc(#loc52)
    %35 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc53)
    %36 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc54)
    %37 = tt.broadcast %30 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc55)
    %38 = arith.divf %33, %cst : tensor<64x1xf32, #blocked> loc(#loc56)
    %39 = arith.addf %38, %cst_13 : tensor<64x1xf32, #blocked> loc(#loc57)
    %40 = tt.extern_elementwise %39 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32, #blocked>) -> tensor<64x1xf32, #blocked> loc(#loc58)
    %41 = tt.broadcast %40 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc59)
    %42 = arith.muli %12, %cst_2 : tensor<64x1xi32, #blocked1> loc(#loc60)
    %43 = tt.broadcast %42 : tensor<64x1xi32, #blocked1> -> tensor<64x8xi32, #blocked1> loc(#loc61)
    %44 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked1> loc(#loc62)
    %45 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked1> loc(#loc63)
    scf.for %arg8 = %c0_i32 to %c96_i32 step %c8_i32  : i32 {
      %52 = tt.splat %arg8 : i32 -> tensor<1x8xi32, #blocked> loc(#loc65)
      %53 = tt.splat %arg8 : i32 -> tensor<1x8xi32, #blocked1> loc(#loc65)
      %54 = arith.addi %52, %19 : tensor<1x8xi32, #blocked> loc(#loc65)
      %55 = arith.addi %53, %20 : tensor<1x8xi32, #blocked1> loc(#loc65)
      %56 = arith.cmpi slt, %54, %cst_7 : tensor<1x8xi32, #blocked> loc(#loc66)
      %57 = arith.cmpi slt, %55, %cst_6 : tensor<1x8xi32, #blocked1> loc(#loc66)
      %58 = arith.muli %54, %cst_5 : tensor<1x8xi32, #blocked> loc(#loc67)
      %59 = tt.broadcast %58 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc68)
      %60 = arith.addi %23, %59 : tensor<64x8xi32, #blocked> loc(#loc68)
      %61 = arith.addi %60, %25 : tensor<64x8xi32, #blocked> loc(#loc69)
      %62 = tt.addptr %26, %61 : tensor<64x8x!tt.ptr<f32>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc70)
      %63 = tt.broadcast %56 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc52)
      %64 = tt.broadcast %57 : tensor<1x8xi1, #blocked1> -> tensor<64x8xi1, #blocked1> loc(#loc52)
      %65 = arith.andi %63, %27 : tensor<64x8xi1, #blocked> loc(#loc52)
      %66 = arith.andi %64, %34 : tensor<64x8xi1, #blocked1> loc(#loc52)
      %67 = tt.load %62, %65, %cst_0 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc71)
      %68 = tt.addptr %35, %54 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc53)
      %69 = tt.load %68, %56, %cst_3 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc72)
      %70 = tt.addptr %36, %54 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc54)
      %71 = tt.load %70, %56, %cst_3 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc73)
      %72 = arith.subf %67, %37 : tensor<64x8xf32, #blocked> loc(#loc55)
      %73 = arith.mulf %72, %41 : tensor<64x8xf32, #blocked> loc(#loc59)
      %74 = tt.broadcast %69 : tensor<1x8xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc74)
      %75 = arith.mulf %73, %74 : tensor<64x8xf32, #blocked> loc(#loc74)
      %76 = tt.broadcast %71 : tensor<1x8xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc75)
      %77 = arith.addf %75, %76 : tensor<64x8xf32, #blocked> loc(#loc75)
      %78 = tt.broadcast %55 : tensor<1x8xi32, #blocked1> -> tensor<64x8xi32, #blocked1> loc(#loc61)
      %79 = arith.addi %78, %43 : tensor<64x8xi32, #blocked1> loc(#loc61)
      %80 = tt.addptr %44, %79 : tensor<64x8x!tt.ptr<f32>, #blocked1>, tensor<64x8xi32, #blocked1> loc(#loc62)
      %81 = triton_gpu.convert_layout %73 : tensor<64x8xf32, #blocked> -> tensor<64x8xf32, #blocked1> loc(#loc76)
      tt.store %80, %81, %66 : tensor<64x8x!tt.ptr<f32>, #blocked1> loc(#loc76)
      %82 = tt.addptr %45, %79 : tensor<64x8x!tt.ptr<f32>, #blocked1>, tensor<64x8xi32, #blocked1> loc(#loc63)
      %83 = triton_gpu.convert_layout %77 : tensor<64x8xf32, #blocked> -> tensor<64x8xf32, #blocked1> loc(#loc77)
      tt.store %82, %83, %66 : tensor<64x8x!tt.ptr<f32>, #blocked1> loc(#loc77)
    } loc(#loc64)
    %46 = arith.divf %32, %cst_15 : tensor<64x1xf32, #blocked2> loc(#loc78)
    %47 = arith.addf %46, %cst_14 : tensor<64x1xf32, #blocked2> loc(#loc79)
    %48 = tt.extern_elementwise %47 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<64x1xf32, #blocked2>) -> tensor<64x1xf32, #blocked2> loc(#loc80)
    %49 = arith.mulf %48, %cst_16 : tensor<64x1xf32, #blocked2> loc(#loc50)
    %50 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked2> loc(#loc81)
    %51 = tt.addptr %50, %13 : tensor<64x1x!tt.ptr<f32>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc81)
    tt.store %51, %49, %16 : tensor<64x1x!tt.ptr<f32>, #blocked2> loc(#loc82)
    tt.return loc(#loc83)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":22:28)
#loc3 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":22:33)
#loc4 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":23:44)
#loc5 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":23:23)
#loc6 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":24:21)
#loc7 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":25:33)
#loc8 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":26:19)
#loc9 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":27:19)
#loc10 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":36:39)
#loc11 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":36:54)
#loc12 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":36:48)
#loc13 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":36:34)
#loc14 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":36:67)
#loc15 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":32:36)
#loc16 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":33:27)
#loc17 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":34:25)
#loc18 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":36:43)
#loc19 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":36:59)
#loc20 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":39:62)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc22 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":39:51)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc31 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":41:60)
#loc32 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":42:56)
#loc33 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":43:64)
#loc34 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":43:8)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc49 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":47:20)
#loc50 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":74:20)
#loc51 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":48:20)
#loc52 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":54:67)
#loc53 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":55:35)
#loc54 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":56:35)
#loc55 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":57:22)
#loc56 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":59:22)
#loc57 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":61:23)
#loc58 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":62:32)
#loc59 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":63:23)
#loc60 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":66:37)
#loc61 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":66:34)
#loc62 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":66:29)
#loc63 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":67:29)
#loc64 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":50:36)
#loc65 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":51:27)
#loc66 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":52:25)
#loc67 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":54:43)
#loc68 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":54:39)
#loc69 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":54:48)
#loc70 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":54:34)
#loc71 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":54:59)
#loc72 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":55:40)
#loc73 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":56:40)
#loc74 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":64:24)
#loc75 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":65:24)
#loc76 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":66:49)
#loc77 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":67:49)
#loc78 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":69:19)
#loc79 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":71:20)
#loc80 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":72:28)
#loc81 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":75:25)
#loc82 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":75:37)
#loc83 = loc("inductor_cache/kd/ckdvdc3fspc5cmcwg2oghcck65neoxyvgeiwtbnt5l7jigpibrri.py":75:4)
#loc84 = loc(callsite(#loc21 at #loc22))
#loc85 = loc(callsite(#loc23 at #loc22))
#loc86 = loc(callsite(#loc24 at #loc22))
#loc87 = loc(callsite(#loc25 at #loc22))
#loc88 = loc(callsite(#loc26 at #loc22))
#loc89 = loc(callsite(#loc27 at #loc22))
#loc90 = loc(callsite(#loc28 at #loc22))
#loc91 = loc(callsite(#loc29 at #loc22))
#loc92 = loc(callsite(#loc30 at #loc22))
#loc93 = loc(callsite(#loc35 at #loc36))
#loc95 = loc(callsite(#loc37 at #loc35))
#loc96 = loc(callsite(#loc38 at #loc35))
#loc97 = loc(callsite(#loc39 at #loc35))
#loc98 = loc(callsite(#loc40 at #loc35))
#loc99 = loc(callsite(#loc41 at #loc35))
#loc100 = loc(callsite(#loc42 at #loc35))
#loc101 = loc(callsite(#loc43 at #loc35))
#loc102 = loc(callsite(#loc44 at #loc35))
#loc103 = loc(callsite(#loc45 at #loc35))
#loc104 = loc(callsite(#loc46 at #loc35))
#loc105 = loc(callsite(#loc47 at #loc35))
#loc106 = loc(callsite(#loc48 at #loc35))
#loc107 = loc(callsite(#loc95 at #loc36))
#loc108 = loc(callsite(#loc96 at #loc36))
#loc109 = loc(callsite(#loc97 at #loc36))
#loc110 = loc(callsite(#loc98 at #loc36))
#loc111 = loc(callsite(#loc99 at #loc36))
#loc112 = loc(callsite(#loc100 at #loc36))
#loc113 = loc(callsite(#loc101 at #loc36))
#loc114 = loc(callsite(#loc102 at #loc36))
#loc115 = loc(callsite(#loc103 at #loc36))
#loc116 = loc(callsite(#loc104 at #loc36))
#loc117 = loc(callsite(#loc105 at #loc36))
#loc118 = loc(callsite(#loc106 at #loc36))
