; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = add i32 %9, -8320, !dbg !14
  %12 = add i32 %9, -7808, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = add i32 %9, -8192, !dbg !16
  %18 = add i32 %9, -7680, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = add i32 %9, -8064, !dbg !18
  %24 = add i32 %9, -7552, !dbg !18
  %25 = sext i32 %23 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = sext i32 %24 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !20
  %30 = shufflevector <2 x i32> %29, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !20
  %31 = sdiv <2 x i32> %30, <i32 8192, i32 128>, !dbg !20
  %32 = srem <2 x i32> %31, splat (i32 64), !dbg !21
  %33 = extractelement <2 x i32> %32, i64 0, !dbg !22
  %34 = icmp sgt i32 %33, 0, !dbg !23
  %35 = icmp sgt <2 x i32> %32, <i32 -1, i32 0>, !dbg !24
  %36 = extractelement <2 x i1> %35, i64 1, !dbg !25
  %37 = and i1 %34, %36, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %37, i32 -8388608, i1 %37, i32 -8388608, i1 %37, i32 -8388608, i1 %37, i32 -8388608, i1 %37) #1, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %43 = bitcast i32 %39 to float, !dbg !26
  %44 = bitcast i32 %40 to float, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = extractelement <2 x i32> %32, i64 1, !dbg !27
  %48 = icmp sgt i32 %47, -1, !dbg !28
  %49 = and i1 %34, %48, !dbg !29
  %50 = add nsw i32 %47, 1, !dbg !30
  %51 = icmp ult i32 %50, 64, !dbg !30
  %52 = and i1 %34, %51, !dbg !31
  %53 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !20
  %54 = shufflevector <2 x i32> %53, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !20
  %55 = sdiv <2 x i32> %54, <i32 8192, i32 128>, !dbg !20
  %56 = srem <2 x i32> %55, splat (i32 64), !dbg !21
  %57 = extractelement <2 x i32> %56, i64 0, !dbg !22
  %58 = icmp sgt i32 %57, 0, !dbg !23
  %59 = icmp sgt <2 x i32> %56, <i32 -1, i32 0>, !dbg !24
  %60 = extractelement <2 x i1> %59, i64 1, !dbg !25
  %61 = and i1 %58, %60, !dbg !25
  %62 = extractelement <2 x i32> %56, i64 1, !dbg !27
  %63 = icmp sgt i32 %62, -1, !dbg !28
  %64 = and i1 %58, %63, !dbg !29
  %65 = add nsw i32 %62, 1, !dbg !30
  %66 = icmp ult i32 %65, 64, !dbg !30
  %67 = and i1 %58, %66, !dbg !31
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %61, i32 -8388608, i1 %61, i32 -8388608, i1 %61, i32 -8388608, i1 %61, i32 -8388608, i1 %61) #1, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !26
  %73 = bitcast i32 %69 to float, !dbg !26
  %74 = bitcast i32 %70 to float, !dbg !26
  %75 = bitcast i32 %71 to float, !dbg !26
  %76 = bitcast i32 %72 to float, !dbg !26
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49) #1, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !32
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !32
  %82 = bitcast i32 %78 to float, !dbg !32
  %83 = bitcast i32 %79 to float, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = bitcast i32 %81 to float, !dbg !32
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %64, i32 -8388608, i1 %64, i32 -8388608, i1 %64, i32 -8388608, i1 %64, i32 -8388608, i1 %64) #1, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !32
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !32
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !32
  %91 = bitcast i32 %87 to float, !dbg !32
  %92 = bitcast i32 %88 to float, !dbg !32
  %93 = bitcast i32 %89 to float, !dbg !32
  %94 = bitcast i32 %90 to float, !dbg !32
  %95 = fcmp ogt float %82, %43, !dbg !33
  %96 = fcmp ogt float %83, %44, !dbg !33
  %97 = fcmp ogt float %84, %45, !dbg !33
  %98 = fcmp ogt float %85, %46, !dbg !33
  %99 = fcmp ogt float %91, %73, !dbg !33
  %100 = fcmp ogt float %92, %74, !dbg !33
  %101 = fcmp ogt float %93, %75, !dbg !33
  %102 = fcmp ogt float %94, %76, !dbg !33
  %103 = fcmp uno float %82, 0.000000e+00, !dbg !37
  %104 = fcmp uno float %83, 0.000000e+00, !dbg !37
  %105 = fcmp uno float %84, 0.000000e+00, !dbg !37
  %106 = fcmp uno float %85, 0.000000e+00, !dbg !37
  %107 = fcmp uno float %91, 0.000000e+00, !dbg !37
  %108 = fcmp uno float %92, 0.000000e+00, !dbg !37
  %109 = fcmp uno float %93, 0.000000e+00, !dbg !37
  %110 = fcmp uno float %94, 0.000000e+00, !dbg !37
  %111 = or i1 %95, %103, !dbg !38
  %112 = or i1 %96, %104, !dbg !38
  %113 = or i1 %97, %105, !dbg !38
  %114 = or i1 %98, %106, !dbg !38
  %115 = or i1 %99, %107, !dbg !38
  %116 = or i1 %100, %108, !dbg !38
  %117 = or i1 %101, %109, !dbg !38
  %118 = or i1 %102, %110, !dbg !38
  %119 = select i1 %111, float %82, float %43, !dbg !39
  %120 = select i1 %112, float %83, float %44, !dbg !39
  %121 = select i1 %113, float %84, float %45, !dbg !39
  %122 = select i1 %114, float %85, float %46, !dbg !39
  %123 = select i1 %115, float %91, float %73, !dbg !39
  %124 = select i1 %116, float %92, float %74, !dbg !39
  %125 = select i1 %117, float %93, float %75, !dbg !39
  %126 = select i1 %118, float %94, float %76, !dbg !39
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52, i32 -8388608, i1 %52) #1, !dbg !40
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !40
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !40
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !40
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !40
  %132 = bitcast i32 %128 to float, !dbg !40
  %133 = bitcast i32 %129 to float, !dbg !40
  %134 = bitcast i32 %130 to float, !dbg !40
  %135 = bitcast i32 %131 to float, !dbg !40
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67, i32 -8388608, i1 %67) #1, !dbg !40
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !40
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !40
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !40
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !40
  %141 = bitcast i32 %137 to float, !dbg !40
  %142 = bitcast i32 %138 to float, !dbg !40
  %143 = bitcast i32 %139 to float, !dbg !40
  %144 = bitcast i32 %140 to float, !dbg !40
  %145 = fcmp olt float %119, %132, !dbg !41
  %146 = fcmp olt float %120, %133, !dbg !41
  %147 = fcmp olt float %121, %134, !dbg !41
  %148 = fcmp olt float %122, %135, !dbg !41
  %149 = fcmp olt float %123, %141, !dbg !41
  %150 = fcmp olt float %124, %142, !dbg !41
  %151 = fcmp olt float %125, %143, !dbg !41
  %152 = fcmp olt float %126, %144, !dbg !41
  %153 = fcmp uno float %132, 0.000000e+00, !dbg !43
  %154 = fcmp uno float %133, 0.000000e+00, !dbg !43
  %155 = fcmp uno float %134, 0.000000e+00, !dbg !43
  %156 = fcmp uno float %135, 0.000000e+00, !dbg !43
  %157 = fcmp uno float %141, 0.000000e+00, !dbg !43
  %158 = fcmp uno float %142, 0.000000e+00, !dbg !43
  %159 = fcmp uno float %143, 0.000000e+00, !dbg !43
  %160 = fcmp uno float %144, 0.000000e+00, !dbg !43
  %161 = or i1 %153, %145, !dbg !44
  %162 = or i1 %154, %146, !dbg !44
  %163 = or i1 %155, %147, !dbg !44
  %164 = or i1 %156, %148, !dbg !44
  %165 = or i1 %157, %149, !dbg !44
  %166 = or i1 %158, %150, !dbg !44
  %167 = or i1 %159, %151, !dbg !44
  %168 = or i1 %160, %152, !dbg !44
  %169 = select i1 %161, float %132, float %119, !dbg !45
  %170 = select i1 %162, float %133, float %120, !dbg !45
  %171 = select i1 %163, float %134, float %121, !dbg !45
  %172 = select i1 %164, float %135, float %122, !dbg !45
  %173 = select i1 %165, float %141, float %123, !dbg !45
  %174 = select i1 %166, float %142, float %124, !dbg !45
  %175 = select i1 %167, float %143, float %125, !dbg !45
  %176 = select i1 %168, float %144, float %126, !dbg !45
  %177 = extractelement <2 x i1> %35, i64 0, !dbg !46
  %178 = and i1 %177, %36, !dbg !46
  %179 = extractelement <2 x i1> %59, i64 0, !dbg !46
  %180 = and i1 %179, %60, !dbg !46
  %181 = add i32 %9, -128, !dbg !47
  %182 = sext i32 %181 to i64, !dbg !48
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !48
  %184 = sext i32 %10 to i64, !dbg !48
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !48
  %186 = getelementptr i8, ptr addrspace(1) %185, i64 -512, !dbg !48
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %183, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178) #1, !dbg !49
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !49
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !49
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !49
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !49
  %192 = bitcast i32 %188 to float, !dbg !49
  %193 = bitcast i32 %189 to float, !dbg !49
  %194 = bitcast i32 %190 to float, !dbg !49
  %195 = bitcast i32 %191 to float, !dbg !49
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %186, i1 %180, i32 -8388608, i1 %180, i32 -8388608, i1 %180, i32 -8388608, i1 %180, i32 -8388608, i1 %180) #1, !dbg !49
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !49
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !49
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !49
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !49
  %201 = bitcast i32 %197 to float, !dbg !49
  %202 = bitcast i32 %198 to float, !dbg !49
  %203 = bitcast i32 %199 to float, !dbg !49
  %204 = bitcast i32 %200 to float, !dbg !49
  %205 = fcmp olt float %169, %192, !dbg !50
  %206 = fcmp olt float %170, %193, !dbg !50
  %207 = fcmp olt float %171, %194, !dbg !50
  %208 = fcmp olt float %172, %195, !dbg !50
  %209 = fcmp olt float %173, %201, !dbg !50
  %210 = fcmp olt float %174, %202, !dbg !50
  %211 = fcmp olt float %175, %203, !dbg !50
  %212 = fcmp olt float %176, %204, !dbg !50
  %213 = fcmp uno float %192, 0.000000e+00, !dbg !52
  %214 = fcmp uno float %193, 0.000000e+00, !dbg !52
  %215 = fcmp uno float %194, 0.000000e+00, !dbg !52
  %216 = fcmp uno float %195, 0.000000e+00, !dbg !52
  %217 = fcmp uno float %201, 0.000000e+00, !dbg !52
  %218 = fcmp uno float %202, 0.000000e+00, !dbg !52
  %219 = fcmp uno float %203, 0.000000e+00, !dbg !52
  %220 = fcmp uno float %204, 0.000000e+00, !dbg !52
  %221 = or i1 %213, %205, !dbg !53
  %222 = or i1 %214, %206, !dbg !53
  %223 = or i1 %215, %207, !dbg !53
  %224 = or i1 %216, %208, !dbg !53
  %225 = or i1 %217, %209, !dbg !53
  %226 = or i1 %218, %210, !dbg !53
  %227 = or i1 %219, %211, !dbg !53
  %228 = or i1 %220, %212, !dbg !53
  %229 = select i1 %221, float %192, float %169, !dbg !54
  %230 = select i1 %222, float %193, float %170, !dbg !54
  %231 = select i1 %223, float %194, float %171, !dbg !54
  %232 = select i1 %224, float %195, float %172, !dbg !54
  %233 = select i1 %225, float %201, float %173, !dbg !54
  %234 = select i1 %226, float %202, float %174, !dbg !54
  %235 = select i1 %227, float %203, float %175, !dbg !54
  %236 = select i1 %228, float %204, float %176, !dbg !54
  %237 = or i32 %33, %47, !dbg !27
  %238 = icmp sgt i32 %237, -1, !dbg !27
  %239 = or i32 %57, %62, !dbg !27
  %240 = icmp sgt i32 %239, -1, !dbg !27
  %241 = sext i32 %9 to i64, !dbg !55
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !55
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %242, i1 %238, i32 -8388608, i1 %238, i32 -8388608, i1 %238, i32 -8388608, i1 %238, i32 -8388608, i1 %238) #1, !dbg !56
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !56
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !56
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !56
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !56
  %248 = bitcast i32 %244 to float, !dbg !56
  %249 = bitcast i32 %245 to float, !dbg !56
  %250 = bitcast i32 %246 to float, !dbg !56
  %251 = bitcast i32 %247 to float, !dbg !56
  %252 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %185, i1 %240, i32 -8388608, i1 %240, i32 -8388608, i1 %240, i32 -8388608, i1 %240, i32 -8388608, i1 %240) #1, !dbg !56
  %253 = extractvalue { i32, i32, i32, i32 } %252, 0, !dbg !56
  %254 = extractvalue { i32, i32, i32, i32 } %252, 1, !dbg !56
  %255 = extractvalue { i32, i32, i32, i32 } %252, 2, !dbg !56
  %256 = extractvalue { i32, i32, i32, i32 } %252, 3, !dbg !56
  %257 = bitcast i32 %253 to float, !dbg !56
  %258 = bitcast i32 %254 to float, !dbg !56
  %259 = bitcast i32 %255 to float, !dbg !56
  %260 = bitcast i32 %256 to float, !dbg !56
  %261 = fcmp olt float %229, %248, !dbg !57
  %262 = fcmp olt float %230, %249, !dbg !57
  %263 = fcmp olt float %231, %250, !dbg !57
  %264 = fcmp olt float %232, %251, !dbg !57
  %265 = fcmp olt float %233, %257, !dbg !57
  %266 = fcmp olt float %234, %258, !dbg !57
  %267 = fcmp olt float %235, %259, !dbg !57
  %268 = fcmp olt float %236, %260, !dbg !57
  %269 = fcmp uno float %248, 0.000000e+00, !dbg !59
  %270 = fcmp uno float %249, 0.000000e+00, !dbg !59
  %271 = fcmp uno float %250, 0.000000e+00, !dbg !59
  %272 = fcmp uno float %251, 0.000000e+00, !dbg !59
  %273 = fcmp uno float %257, 0.000000e+00, !dbg !59
  %274 = fcmp uno float %258, 0.000000e+00, !dbg !59
  %275 = fcmp uno float %259, 0.000000e+00, !dbg !59
  %276 = fcmp uno float %260, 0.000000e+00, !dbg !59
  %277 = or i1 %269, %261, !dbg !60
  %278 = or i1 %270, %262, !dbg !60
  %279 = or i1 %271, %263, !dbg !60
  %280 = or i1 %272, %264, !dbg !60
  %281 = or i1 %273, %265, !dbg !60
  %282 = or i1 %274, %266, !dbg !60
  %283 = or i1 %275, %267, !dbg !60
  %284 = or i1 %276, %268, !dbg !60
  %285 = select i1 %277, float %248, float %229, !dbg !61
  %286 = select i1 %278, float %249, float %230, !dbg !61
  %287 = select i1 %279, float %250, float %231, !dbg !61
  %288 = select i1 %280, float %251, float %232, !dbg !61
  %289 = select i1 %281, float %257, float %233, !dbg !61
  %290 = select i1 %282, float %258, float %234, !dbg !61
  %291 = select i1 %283, float %259, float %235, !dbg !61
  %292 = select i1 %284, float %260, float %236, !dbg !61
  %293 = and i1 %177, %51, !dbg !62
  %294 = and i1 %179, %66, !dbg !62
  %295 = add i32 %9, 640, !dbg !63
  %296 = getelementptr i8, ptr addrspace(1) %242, i64 512, !dbg !64
  %297 = sext i32 %295 to i64, !dbg !64
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !64
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %296, i1 %293, i32 -8388608, i1 %293, i32 -8388608, i1 %293, i32 -8388608, i1 %293, i32 -8388608, i1 %293) #1, !dbg !65
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !65
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !65
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !65
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !65
  %304 = bitcast i32 %300 to float, !dbg !65
  %305 = bitcast i32 %301 to float, !dbg !65
  %306 = bitcast i32 %302 to float, !dbg !65
  %307 = bitcast i32 %303 to float, !dbg !65
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %298, i1 %294, i32 -8388608, i1 %294, i32 -8388608, i1 %294, i32 -8388608, i1 %294, i32 -8388608, i1 %294) #1, !dbg !65
  %309 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !65
  %310 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !65
  %311 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !65
  %312 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !65
  %313 = bitcast i32 %309 to float, !dbg !65
  %314 = bitcast i32 %310 to float, !dbg !65
  %315 = bitcast i32 %311 to float, !dbg !65
  %316 = bitcast i32 %312 to float, !dbg !65
  %317 = fcmp olt float %285, %304, !dbg !66
  %318 = fcmp olt float %286, %305, !dbg !66
  %319 = fcmp olt float %287, %306, !dbg !66
  %320 = fcmp olt float %288, %307, !dbg !66
  %321 = fcmp olt float %289, %313, !dbg !66
  %322 = fcmp olt float %290, %314, !dbg !66
  %323 = fcmp olt float %291, %315, !dbg !66
  %324 = fcmp olt float %292, %316, !dbg !66
  %325 = fcmp uno float %304, 0.000000e+00, !dbg !68
  %326 = fcmp uno float %305, 0.000000e+00, !dbg !68
  %327 = fcmp uno float %306, 0.000000e+00, !dbg !68
  %328 = fcmp uno float %307, 0.000000e+00, !dbg !68
  %329 = fcmp uno float %313, 0.000000e+00, !dbg !68
  %330 = fcmp uno float %314, 0.000000e+00, !dbg !68
  %331 = fcmp uno float %315, 0.000000e+00, !dbg !68
  %332 = fcmp uno float %316, 0.000000e+00, !dbg !68
  %333 = or i1 %325, %317, !dbg !69
  %334 = or i1 %326, %318, !dbg !69
  %335 = or i1 %327, %319, !dbg !69
  %336 = or i1 %328, %320, !dbg !69
  %337 = or i1 %329, %321, !dbg !69
  %338 = or i1 %330, %322, !dbg !69
  %339 = or i1 %331, %323, !dbg !69
  %340 = or i1 %332, %324, !dbg !69
  %341 = select i1 %333, float %304, float %285, !dbg !70
  %342 = select i1 %334, float %305, float %286, !dbg !70
  %343 = select i1 %335, float %306, float %287, !dbg !70
  %344 = select i1 %336, float %307, float %288, !dbg !70
  %345 = select i1 %337, float %313, float %289, !dbg !70
  %346 = select i1 %338, float %314, float %290, !dbg !70
  %347 = select i1 %339, float %315, float %291, !dbg !70
  %348 = select i1 %340, float %316, float %292, !dbg !70
  %349 = add nsw i32 %33, 1, !dbg !22
  %350 = icmp ult i32 %349, 64, !dbg !22
  %351 = add nsw i32 %57, 1, !dbg !22
  %352 = icmp ult i32 %351, 64, !dbg !22
  %353 = and i1 %36, %350, !dbg !71
  %354 = and i1 %60, %352, !dbg !71
  %355 = add i32 %9, 8064, !dbg !72
  %356 = add i32 %9, 8576, !dbg !72
  %357 = sext i32 %355 to i64, !dbg !73
  %358 = getelementptr float, ptr addrspace(1) %0, i64 %357, !dbg !73
  %359 = sext i32 %356 to i64, !dbg !73
  %360 = getelementptr float, ptr addrspace(1) %0, i64 %359, !dbg !73
  %361 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %358, i1 %353, i32 -8388608, i1 %353, i32 -8388608, i1 %353, i32 -8388608, i1 %353, i32 -8388608, i1 %353) #1, !dbg !74
  %362 = extractvalue { i32, i32, i32, i32 } %361, 0, !dbg !74
  %363 = extractvalue { i32, i32, i32, i32 } %361, 1, !dbg !74
  %364 = extractvalue { i32, i32, i32, i32 } %361, 2, !dbg !74
  %365 = extractvalue { i32, i32, i32, i32 } %361, 3, !dbg !74
  %366 = bitcast i32 %362 to float, !dbg !74
  %367 = bitcast i32 %363 to float, !dbg !74
  %368 = bitcast i32 %364 to float, !dbg !74
  %369 = bitcast i32 %365 to float, !dbg !74
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %360, i1 %354, i32 -8388608, i1 %354, i32 -8388608, i1 %354, i32 -8388608, i1 %354, i32 -8388608, i1 %354) #1, !dbg !74
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !74
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !74
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !74
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !74
  %375 = bitcast i32 %371 to float, !dbg !74
  %376 = bitcast i32 %372 to float, !dbg !74
  %377 = bitcast i32 %373 to float, !dbg !74
  %378 = bitcast i32 %374 to float, !dbg !74
  %379 = fcmp olt float %341, %366, !dbg !75
  %380 = fcmp olt float %342, %367, !dbg !75
  %381 = fcmp olt float %343, %368, !dbg !75
  %382 = fcmp olt float %344, %369, !dbg !75
  %383 = fcmp olt float %345, %375, !dbg !75
  %384 = fcmp olt float %346, %376, !dbg !75
  %385 = fcmp olt float %347, %377, !dbg !75
  %386 = fcmp olt float %348, %378, !dbg !75
  %387 = fcmp uno float %366, 0.000000e+00, !dbg !77
  %388 = fcmp uno float %367, 0.000000e+00, !dbg !77
  %389 = fcmp uno float %368, 0.000000e+00, !dbg !77
  %390 = fcmp uno float %369, 0.000000e+00, !dbg !77
  %391 = fcmp uno float %375, 0.000000e+00, !dbg !77
  %392 = fcmp uno float %376, 0.000000e+00, !dbg !77
  %393 = fcmp uno float %377, 0.000000e+00, !dbg !77
  %394 = fcmp uno float %378, 0.000000e+00, !dbg !77
  %395 = or i1 %387, %379, !dbg !78
  %396 = or i1 %388, %380, !dbg !78
  %397 = or i1 %389, %381, !dbg !78
  %398 = or i1 %390, %382, !dbg !78
  %399 = or i1 %391, %383, !dbg !78
  %400 = or i1 %392, %384, !dbg !78
  %401 = or i1 %393, %385, !dbg !78
  %402 = or i1 %394, %386, !dbg !78
  %403 = select i1 %395, float %366, float %341, !dbg !79
  %404 = select i1 %396, float %367, float %342, !dbg !79
  %405 = select i1 %397, float %368, float %343, !dbg !79
  %406 = select i1 %398, float %369, float %344, !dbg !79
  %407 = select i1 %399, float %375, float %345, !dbg !79
  %408 = select i1 %400, float %376, float %346, !dbg !79
  %409 = select i1 %401, float %377, float %347, !dbg !79
  %410 = select i1 %402, float %378, float %348, !dbg !79
  %411 = and i1 %48, %350, !dbg !80
  %412 = and i1 %63, %352, !dbg !80
  %413 = add i32 %9, 8192, !dbg !81
  %414 = add i32 %9, 8704, !dbg !81
  %415 = sext i32 %413 to i64, !dbg !82
  %416 = getelementptr float, ptr addrspace(1) %0, i64 %415, !dbg !82
  %417 = sext i32 %414 to i64, !dbg !82
  %418 = getelementptr float, ptr addrspace(1) %0, i64 %417, !dbg !82
  %419 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %416, i1 %411, i32 -8388608, i1 %411, i32 -8388608, i1 %411, i32 -8388608, i1 %411, i32 -8388608, i1 %411) #1, !dbg !83
  %420 = extractvalue { i32, i32, i32, i32 } %419, 0, !dbg !83
  %421 = extractvalue { i32, i32, i32, i32 } %419, 1, !dbg !83
  %422 = extractvalue { i32, i32, i32, i32 } %419, 2, !dbg !83
  %423 = extractvalue { i32, i32, i32, i32 } %419, 3, !dbg !83
  %424 = bitcast i32 %420 to float, !dbg !83
  %425 = bitcast i32 %421 to float, !dbg !83
  %426 = bitcast i32 %422 to float, !dbg !83
  %427 = bitcast i32 %423 to float, !dbg !83
  %428 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %418, i1 %412, i32 -8388608, i1 %412, i32 -8388608, i1 %412, i32 -8388608, i1 %412, i32 -8388608, i1 %412) #1, !dbg !83
  %429 = extractvalue { i32, i32, i32, i32 } %428, 0, !dbg !83
  %430 = extractvalue { i32, i32, i32, i32 } %428, 1, !dbg !83
  %431 = extractvalue { i32, i32, i32, i32 } %428, 2, !dbg !83
  %432 = extractvalue { i32, i32, i32, i32 } %428, 3, !dbg !83
  %433 = bitcast i32 %429 to float, !dbg !83
  %434 = bitcast i32 %430 to float, !dbg !83
  %435 = bitcast i32 %431 to float, !dbg !83
  %436 = bitcast i32 %432 to float, !dbg !83
  %437 = fcmp olt float %403, %424, !dbg !84
  %438 = fcmp olt float %404, %425, !dbg !84
  %439 = fcmp olt float %405, %426, !dbg !84
  %440 = fcmp olt float %406, %427, !dbg !84
  %441 = fcmp olt float %407, %433, !dbg !84
  %442 = fcmp olt float %408, %434, !dbg !84
  %443 = fcmp olt float %409, %435, !dbg !84
  %444 = fcmp olt float %410, %436, !dbg !84
  %445 = fcmp uno float %424, 0.000000e+00, !dbg !86
  %446 = fcmp uno float %425, 0.000000e+00, !dbg !86
  %447 = fcmp uno float %426, 0.000000e+00, !dbg !86
  %448 = fcmp uno float %427, 0.000000e+00, !dbg !86
  %449 = fcmp uno float %433, 0.000000e+00, !dbg !86
  %450 = fcmp uno float %434, 0.000000e+00, !dbg !86
  %451 = fcmp uno float %435, 0.000000e+00, !dbg !86
  %452 = fcmp uno float %436, 0.000000e+00, !dbg !86
  %453 = or i1 %445, %437, !dbg !87
  %454 = or i1 %446, %438, !dbg !87
  %455 = or i1 %447, %439, !dbg !87
  %456 = or i1 %448, %440, !dbg !87
  %457 = or i1 %449, %441, !dbg !87
  %458 = or i1 %450, %442, !dbg !87
  %459 = or i1 %451, %443, !dbg !87
  %460 = or i1 %452, %444, !dbg !87
  %461 = select i1 %453, float %424, float %403, !dbg !88
  %462 = select i1 %454, float %425, float %404, !dbg !88
  %463 = select i1 %455, float %426, float %405, !dbg !88
  %464 = select i1 %456, float %427, float %406, !dbg !88
  %465 = select i1 %457, float %433, float %407, !dbg !88
  %466 = select i1 %458, float %434, float %408, !dbg !88
  %467 = select i1 %459, float %435, float %409, !dbg !88
  %468 = select i1 %460, float %436, float %410, !dbg !88
  %469 = or i32 %349, %50, !dbg !89
  %470 = icmp ult i32 %469, 64, !dbg !89
  %471 = or i32 %351, %65, !dbg !89
  %472 = icmp ult i32 %471, 64, !dbg !89
  %473 = add i32 %9, 8320, !dbg !90
  %474 = add i32 %9, 8832, !dbg !90
  %475 = sext i32 %473 to i64, !dbg !91
  %476 = getelementptr float, ptr addrspace(1) %0, i64 %475, !dbg !91
  %477 = sext i32 %474 to i64, !dbg !91
  %478 = getelementptr float, ptr addrspace(1) %0, i64 %477, !dbg !91
  %479 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %476, i1 %470, i32 -8388608, i1 %470, i32 -8388608, i1 %470, i32 -8388608, i1 %470, i32 -8388608, i1 %470) #1, !dbg !92
  %480 = extractvalue { i32, i32, i32, i32 } %479, 0, !dbg !92
  %481 = extractvalue { i32, i32, i32, i32 } %479, 1, !dbg !92
  %482 = extractvalue { i32, i32, i32, i32 } %479, 2, !dbg !92
  %483 = extractvalue { i32, i32, i32, i32 } %479, 3, !dbg !92
  %484 = bitcast i32 %480 to float, !dbg !92
  %485 = bitcast i32 %481 to float, !dbg !92
  %486 = bitcast i32 %482 to float, !dbg !92
  %487 = bitcast i32 %483 to float, !dbg !92
  %488 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %478, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472, i32 -8388608, i1 %472) #1, !dbg !92
  %489 = extractvalue { i32, i32, i32, i32 } %488, 0, !dbg !92
  %490 = extractvalue { i32, i32, i32, i32 } %488, 1, !dbg !92
  %491 = extractvalue { i32, i32, i32, i32 } %488, 2, !dbg !92
  %492 = extractvalue { i32, i32, i32, i32 } %488, 3, !dbg !92
  %493 = bitcast i32 %489 to float, !dbg !92
  %494 = bitcast i32 %490 to float, !dbg !92
  %495 = bitcast i32 %491 to float, !dbg !92
  %496 = bitcast i32 %492 to float, !dbg !92
  %497 = fcmp olt float %461, %484, !dbg !93
  %498 = fcmp olt float %462, %485, !dbg !93
  %499 = fcmp olt float %463, %486, !dbg !93
  %500 = fcmp olt float %464, %487, !dbg !93
  %501 = fcmp olt float %465, %493, !dbg !93
  %502 = fcmp olt float %466, %494, !dbg !93
  %503 = fcmp olt float %467, %495, !dbg !93
  %504 = fcmp olt float %468, %496, !dbg !93
  %505 = fcmp uno float %484, 0.000000e+00, !dbg !95
  %506 = fcmp uno float %485, 0.000000e+00, !dbg !95
  %507 = fcmp uno float %486, 0.000000e+00, !dbg !95
  %508 = fcmp uno float %487, 0.000000e+00, !dbg !95
  %509 = fcmp uno float %493, 0.000000e+00, !dbg !95
  %510 = fcmp uno float %494, 0.000000e+00, !dbg !95
  %511 = fcmp uno float %495, 0.000000e+00, !dbg !95
  %512 = fcmp uno float %496, 0.000000e+00, !dbg !95
  %513 = or i1 %505, %497, !dbg !96
  %514 = or i1 %506, %498, !dbg !96
  %515 = or i1 %507, %499, !dbg !96
  %516 = or i1 %508, %500, !dbg !96
  %517 = or i1 %509, %501, !dbg !96
  %518 = or i1 %510, %502, !dbg !96
  %519 = or i1 %511, %503, !dbg !96
  %520 = or i1 %512, %504, !dbg !96
  %521 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !97
  %522 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !97
  %523 = bitcast float %461 to i32, !dbg !98
  %524 = select i1 %513, i32 %480, i32 %523, !dbg !99
  %525 = bitcast float %462 to i32, !dbg !98
  %526 = select i1 %514, i32 %481, i32 %525, !dbg !99
  %527 = bitcast float %463 to i32, !dbg !98
  %528 = select i1 %515, i32 %482, i32 %527, !dbg !99
  %529 = bitcast float %464 to i32, !dbg !98
  %530 = select i1 %516, i32 %483, i32 %529, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %524, i32 %526, i32 %528, i32 %530, ptr addrspace(1) %521, i1 true) #1, !dbg !98
  %531 = bitcast float %465 to i32, !dbg !98
  %532 = select i1 %517, i32 %489, i32 %531, !dbg !99
  %533 = bitcast float %466 to i32, !dbg !98
  %534 = select i1 %518, i32 %490, i32 %533, !dbg !99
  %535 = bitcast float %467 to i32, !dbg !98
  %536 = select i1 %519, i32 %491, i32 %535, !dbg !99
  %537 = bitcast float %468 to i32, !dbg !98
  %538 = select i1 %520, i32 %492, i32 %537, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %532, i32 %534, i32 %536, i32 %538, ptr addrspace(1) %522, i1 true) #1, !dbg !98
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmwwg54qkb74xsygq5qsj3qdctiuelswzjew64fje6vaxi3kfs3d.py", directory: "inductor_cache/mw")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_3", linkageName: "triton_poi_fused_max_pool2d_with_indices_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 38, column: 41, scope: !7)
!15 = !DILocation(line: 38, column: 31, scope: !7)
!16 = !DILocation(line: 44, column: 41, scope: !7)
!17 = !DILocation(line: 44, column: 31, scope: !7)
!18 = !DILocation(line: 51, column: 41, scope: !7)
!19 = !DILocation(line: 51, column: 31, scope: !7)
!20 = !DILocation(line: 24, column: 21, scope: !7)
!21 = !DILocation(line: 24, column: 29, scope: !7)
!22 = !DILocation(line: 69, column: 20, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 54, column: 21, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 46, scope: !7)
!27 = !DILocation(line: 60, column: 20, scope: !7)
!28 = !DILocation(line: 40, column: 21, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 49, column: 20, scope: !7)
!31 = !DILocation(line: 50, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 46, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 45, column: 42, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 51, column: 46, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !42)
!42 = !DILocation(line: 52, column: 42, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !42)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 40, scope: !7)
!48 = !DILocation(line: 58, column: 31, scope: !7)
!49 = !DILocation(line: 58, column: 45, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !51)
!51 = !DILocation(line: 59, column: 42, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !51)
!55 = !DILocation(line: 61, column: 31, scope: !7)
!56 = !DILocation(line: 61, column: 36, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !58)
!58 = !DILocation(line: 62, column: 42, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !58)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 64, column: 37, scope: !7)
!64 = !DILocation(line: 64, column: 31, scope: !7)
!65 = !DILocation(line: 64, column: 42, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !67)
!67 = !DILocation(line: 65, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !67)
!71 = !DILocation(line: 70, column: 20, scope: !7)
!72 = !DILocation(line: 71, column: 38, scope: !7)
!73 = !DILocation(line: 71, column: 31, scope: !7)
!74 = !DILocation(line: 71, column: 43, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !76)
!76 = !DILocation(line: 72, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !76)
!80 = !DILocation(line: 73, column: 20, scope: !7)
!81 = !DILocation(line: 74, column: 38, scope: !7)
!82 = !DILocation(line: 74, column: 31, scope: !7)
!83 = !DILocation(line: 74, column: 43, scope: !7)
!84 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !85)
!85 = !DILocation(line: 75, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !85)
!89 = !DILocation(line: 76, column: 20, scope: !7)
!90 = !DILocation(line: 77, column: 38, scope: !7)
!91 = !DILocation(line: 77, column: 31, scope: !7)
!92 = !DILocation(line: 77, column: 43, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !94)
!94 = !DILocation(line: 78, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !94)
!97 = !DILocation(line: 79, column: 25, scope: !7)
!98 = !DILocation(line: 79, column: 37, scope: !7)
!99 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !94)
!100 = !DILocation(line: 79, column: 4, scope: !7)
