; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 1, !dbg !11
  %13 = or disjoint i32 %12, 1, !dbg !12
  %14 = icmp slt i32 %12, 256, !dbg !13
  %15 = icmp slt i32 %13, 256, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = shl i32 %16, 9, !dbg !15
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %19 = shl i32 %18, 2, !dbg !16
  %20 = and i32 %19, 508, !dbg !16
  %21 = or disjoint i32 %17, %20, !dbg !17
  %22 = icmp slt i32 %21, 512, !dbg !18
  %23 = shl i32 %11, 10, !dbg !19
  %24 = shl i32 %13, 9, !dbg !19
  %25 = add i32 %21, %23, !dbg !20
  %26 = add i32 %21, %24, !dbg !20
  %27 = sext i32 %25 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = and i1 %14, %22, !dbg !22
  %32 = and i1 %15, %22, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %31) #4, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %32) #4, !dbg !23
  %35 = sext i32 %21 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %22) #4, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %31) #4, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %32) #4, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !28
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %22) #4, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !30
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %22) #4, !dbg !31
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !31
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !31
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !31
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !31
  %50 = bitcast i32 %46 to float, !dbg !31
  %51 = bitcast i32 %47 to float, !dbg !31
  %52 = bitcast i32 %48 to float, !dbg !31
  %53 = bitcast i32 %49 to float, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !32
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %22) #4, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !34
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %22) #4, !dbg !35
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !36
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !36
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !36
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !36
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %62, 0, !dbg !37
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %63, 0, !dbg !37
  br i1 %.not.i, label %69, label %64, !dbg !37

64:                                               ; preds = %10
  br i1 %.not1.i, label %67, label %65, !dbg !37

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

69:                                               ; preds = %10
  br i1 %.not1.i, label %72, label %70, !dbg !37

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !37
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i15 = icmp eq i32 %74, 0, !dbg !37
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i18 = icmp eq i32 %75, 0, !dbg !37
  br i1 %.not.i15, label %81, label %76, !dbg !37

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %79, label %77, !dbg !37

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %84, label %82, !dbg !37

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

__nv_sqrtf.exit19:                                ; preds = %77, %79, %82, %84
  %.0.i17 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !37
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i20 = icmp eq i32 %86, 0, !dbg !37
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i23 = icmp eq i32 %87, 0, !dbg !37
  br i1 %.not.i20, label %93, label %88, !dbg !37

88:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %91, label %89, !dbg !37

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

93:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %96, label %94, !dbg !37

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

__nv_sqrtf.exit24:                                ; preds = %89, %91, %94, %96
  %.0.i22 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !37
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i25 = icmp eq i32 %98, 0, !dbg !37
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i28 = icmp eq i32 %99, 0, !dbg !37
  br i1 %.not.i25, label %105, label %100, !dbg !37

100:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %103, label %101, !dbg !37

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

105:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %108, label %106, !dbg !37

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

__nv_sqrtf.exit29:                                ; preds = %101, %103, %106, %108
  %.0.i27 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !37
  %110 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %111 = bitcast i32 %110 to float, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %113 = bitcast i32 %112 to float, !dbg !25
  %114 = fadd float %111, %113, !dbg !38
  %115 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !29
  %116 = bitcast i32 %115 to float, !dbg !29
  %117 = fsub float %114, %116, !dbg !39
  %118 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %119 = bitcast i32 %118 to float, !dbg !23
  %120 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %121 = bitcast i32 %120 to float, !dbg !25
  %122 = fadd float %119, %121, !dbg !38
  %123 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !29
  %124 = bitcast i32 %123 to float, !dbg !29
  %125 = fsub float %122, %124, !dbg !39
  %126 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %127 = bitcast i32 %126 to float, !dbg !23
  %128 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %129 = bitcast i32 %128 to float, !dbg !25
  %130 = fadd float %127, %129, !dbg !38
  %131 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !29
  %132 = bitcast i32 %131 to float, !dbg !29
  %133 = fsub float %130, %132, !dbg !39
  %134 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %135 = bitcast i32 %134 to float, !dbg !23
  %136 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %137 = bitcast i32 %136 to float, !dbg !25
  %138 = fadd float %135, %137, !dbg !38
  %139 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !29
  %140 = bitcast i32 %139 to float, !dbg !29
  %141 = fsub float %138, %140, !dbg !39
  %142 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %143 = bitcast i32 %142 to float, !dbg !23
  %144 = fadd float %143, %113, !dbg !38
  %145 = fsub float %144, %116, !dbg !39
  %146 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %147 = bitcast i32 %146 to float, !dbg !23
  %148 = fadd float %147, %121, !dbg !38
  %149 = fsub float %148, %124, !dbg !39
  %150 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %151 = bitcast i32 %150 to float, !dbg !23
  %152 = fadd float %151, %129, !dbg !38
  %153 = fsub float %152, %132, !dbg !39
  %154 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %155 = bitcast i32 %154 to float, !dbg !23
  %156 = fadd float %155, %137, !dbg !38
  %157 = fsub float %156, %140, !dbg !39
  %158 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !35
  %159 = bitcast i32 %158 to float, !dbg !35
  %160 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !35
  %161 = bitcast i32 %160 to float, !dbg !35
  %162 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !35
  %163 = bitcast i32 %162 to float, !dbg !35
  %164 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !35
  %165 = bitcast i32 %164 to float, !dbg !35
  %166 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !33
  %167 = bitcast i32 %166 to float, !dbg !33
  %168 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !33
  %169 = bitcast i32 %168 to float, !dbg !33
  %170 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !33
  %171 = bitcast i32 %170 to float, !dbg !33
  %172 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !33
  %173 = bitcast i32 %172 to float, !dbg !33
  %174 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %175 = bitcast i32 %174 to float, !dbg !27
  %176 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %177 = bitcast i32 %176 to float, !dbg !27
  %178 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %179 = bitcast i32 %178 to float, !dbg !27
  %180 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %181 = bitcast i32 %180 to float, !dbg !27
  %182 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %183 = bitcast i32 %182 to float, !dbg !27
  %184 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %185 = bitcast i32 %184 to float, !dbg !27
  %186 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %187 = bitcast i32 %186 to float, !dbg !27
  %188 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %189 = bitcast i32 %188 to float, !dbg !27
  %190 = and i32 %18, 127, !dbg !16
  %191 = or disjoint i32 %190, %17, !dbg !17
  %192 = or disjoint i32 %191, 384, !dbg !17
  %193 = icmp slt i32 %192, 512, !dbg !18
  %194 = and i1 %14, %193, !dbg !22
  %195 = or disjoint i32 %191, 256, !dbg !17
  %196 = icmp slt i32 %195, 512, !dbg !18
  %197 = and i1 %14, %196, !dbg !22
  %198 = or disjoint i32 %191, 128, !dbg !17
  %199 = icmp slt i32 %198, 512, !dbg !18
  %200 = and i1 %14, %199, !dbg !22
  %201 = icmp slt i32 %191, 512, !dbg !18
  %202 = and i1 %14, %201, !dbg !22
  %.frozen = freeze i32 %12, !dbg !40
  %203 = sdiv i32 %.frozen, 64, !dbg !40
  %204 = mul i32 %203, 64, !dbg !41
  %.decomposed = sub i32 %.frozen, %204, !dbg !41
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !42
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !42
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !42
  %209 = fmul float %157, %205, !dbg !43
  %210 = fmul float %153, %206, !dbg !43
  %211 = fmul float %149, %207, !dbg !43
  %212 = fmul float %145, %208, !dbg !43
  %213 = fmul float %141, %205, !dbg !43
  %214 = fmul float %133, %206, !dbg !43
  %215 = fmul float %125, %207, !dbg !43
  %216 = fmul float %117, %208, !dbg !43
  %217 = fmul float %209, %173, !dbg !44
  %218 = fmul float %210, %171, !dbg !44
  %219 = fmul float %211, %169, !dbg !44
  %220 = fmul float %212, %167, !dbg !44
  %221 = fmul float %213, %173, !dbg !44
  %222 = fmul float %214, %171, !dbg !44
  %223 = fmul float %215, %169, !dbg !44
  %224 = fmul float %216, %167, !dbg !44
  %225 = fadd float %217, %165, !dbg !45
  %226 = fadd float %218, %163, !dbg !45
  %227 = fadd float %219, %161, !dbg !45
  %228 = fadd float %220, %159, !dbg !45
  %229 = fadd float %221, %165, !dbg !45
  %230 = fadd float %222, %163, !dbg !45
  %231 = fadd float %223, %161, !dbg !45
  %232 = fadd float %224, %159, !dbg !45
  %233 = fadd float %225, %189, !dbg !46
  %234 = fadd float %226, %187, !dbg !46
  %235 = fadd float %227, %185, !dbg !46
  %236 = fadd float %228, %183, !dbg !46
  %237 = fadd float %229, %181, !dbg !46
  %238 = fadd float %230, %179, !dbg !46
  %239 = fadd float %231, %177, !dbg !46
  %240 = fadd float %232, %175, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %241 = bitcast float %156 to i32, !dbg !48
  %242 = bitcast float %152 to i32, !dbg !48
  %243 = bitcast float %148 to i32, !dbg !48
  %244 = bitcast float %144 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %241, i32 %242, i32 %243, i32 %244, ptr addrspace(1) %28, i1 %31) #4, !dbg !48
  %245 = bitcast float %138 to i32, !dbg !48
  %246 = bitcast float %130 to i32, !dbg !48
  %247 = bitcast float %122 to i32, !dbg !48
  %248 = bitcast float %114 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %245, i32 %246, i32 %247, i32 %248, ptr addrspace(1) %30, i1 %32) #4, !dbg !48
  %249 = shl i32 %191, 6, !dbg !49
  %250 = shl i32 %198, 6, !dbg !49
  %251 = shl i32 %195, 6, !dbg !49
  %252 = shl i32 %192, 6, !dbg !49
  %253 = shl i32 %203, 15, !dbg !50
  %254 = add i32 %253, %.decomposed, !dbg !51
  %255 = add i32 %254, %249, !dbg !52
  %256 = add i32 %254, %250, !dbg !52
  %257 = add i32 %254, %251, !dbg !52
  %258 = add i32 %254, %252, !dbg !52
  %259 = sext i32 %255 to i64, !dbg !53
  %260 = getelementptr float, ptr addrspace(1) %7, i64 %259, !dbg !53
  %261 = sext i32 %256 to i64, !dbg !53
  %262 = getelementptr float, ptr addrspace(1) %7, i64 %261, !dbg !53
  %263 = sext i32 %257 to i64, !dbg !53
  %264 = getelementptr float, ptr addrspace(1) %7, i64 %263, !dbg !53
  %265 = sext i32 %258 to i64, !dbg !53
  %266 = getelementptr float, ptr addrspace(1) %7, i64 %265, !dbg !53
  %267 = shl i32 %18, 3, !dbg !54
  %268 = and i32 %267, 1016, !dbg !54
  %269 = shl i32 %18, 1, !dbg !54
  %270 = and i32 %269, 254, !dbg !54
  %.idx = shl nuw nsw i32 %268, 3, !dbg !54
  %271 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !54
  %272 = bitcast float %233 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !54
  %273 = shl nuw nsw i32 %268, 1, !dbg !54
  %274 = or disjoint i32 %273, 4, !dbg !54
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !54
  %276 = bitcast float %234 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !54
  %277 = or disjoint i32 %273, 8, !dbg !54
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !54
  %279 = bitcast float %235 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #4, !dbg !54
  %280 = or disjoint i32 %273, 12, !dbg !54
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !54
  %282 = bitcast float %236 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #4, !dbg !54
  %283 = or disjoint i32 %268, 1, !dbg !54
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !54
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %283, !dbg !54
  %286 = bitcast float %237 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !54
  %287 = or disjoint i32 %268, 3, !dbg !54
  %288 = or disjoint i32 %268, 2, !dbg !54
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !54
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %287, !dbg !54
  %291 = bitcast float %238 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #4, !dbg !54
  %292 = or disjoint i32 %268, 5, !dbg !54
  %293 = or disjoint i32 %268, 4, !dbg !54
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !54
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %292, !dbg !54
  %296 = bitcast float %239 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 true) #4, !dbg !54
  %297 = or disjoint i32 %268, 7, !dbg !54
  %298 = or disjoint i32 %268, 6, !dbg !54
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %298, !dbg !54
  %300 = getelementptr inbounds float, ptr addrspace(3) %299, i32 %297, !dbg !54
  %301 = bitcast float %240 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i32 %270, !dbg !54
  %303 = getelementptr float, ptr addrspace(3) %302, i32 %270, !dbg !54
  %304 = or disjoint i32 %270, 256, !dbg !54
  %305 = getelementptr float, ptr addrspace(3) @global_smem, i32 %304, !dbg !54
  %306 = getelementptr float, ptr addrspace(3) %305, i32 %304, !dbg !54
  %307 = load <2 x i32>, ptr addrspace(3) %306, align 8, !dbg !54
  %308 = or disjoint i32 %270, 512, !dbg !54
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i32 %308, !dbg !54
  %310 = getelementptr float, ptr addrspace(3) %309, i32 %308, !dbg !54
  %311 = load <2 x i32>, ptr addrspace(3) %310, align 8, !dbg !54
  %312 = or disjoint i32 %270, 768, !dbg !54
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i32 %312, !dbg !54
  %314 = getelementptr float, ptr addrspace(3) %313, i32 %312, !dbg !54
  %315 = load <2 x i32>, ptr addrspace(3) %314, align 8, !dbg !54
  %.extract = load i32, ptr addrspace(3) %303, align 8, !dbg !54
  %316 = getelementptr inbounds i8, ptr addrspace(3) %303, i32 4, !dbg !54
  %.extract8 = load i32, ptr addrspace(3) %316, align 4, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract8, ptr addrspace(1) %260, i1 %202) #4, !dbg !54
  %.extract9 = extractelement <2 x i32> %307, i64 0, !dbg !54
  %.extract10 = extractelement <2 x i32> %307, i64 1, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract9, i32 %.extract10, ptr addrspace(1) %262, i1 %200) #4, !dbg !54
  %.extract11 = extractelement <2 x i32> %311, i64 0, !dbg !54
  %.extract12 = extractelement <2 x i32> %311, i64 1, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %264, i1 %197) #4, !dbg !54
  %.extract13 = extractelement <2 x i32> %315, i64 0, !dbg !54
  %.extract14 = extractelement <2 x i32> %315, i64 1, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %266, i1 %194) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4p3taeuxilxplfmil5ygwgn7mkfyb3o4szrp2rw4w5c4fvrj7dm.py", directory: "inductor_cache/4p")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 23, scope: !7)
!13 = !DILocation(line: 24, column: 21, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 56, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 26, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 31, column: 19, scope: !7)
!41 = !DILocation(line: 30, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 19, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 19, scope: !7)
!47 = !DILocation(line: 52, column: 4, scope: !7)
!48 = !DILocation(line: 53, column: 48, scope: !7)
!49 = !DILocation(line: 54, column: 33, scope: !7)
!50 = !DILocation(line: 54, column: 44, scope: !7)
!51 = !DILocation(line: 54, column: 30, scope: !7)
!52 = !DILocation(line: 54, column: 38, scope: !7)
!53 = !DILocation(line: 54, column: 25, scope: !7)
!54 = !DILocation(line: 54, column: 56, scope: !7)
!55 = !DILocation(line: 54, column: 4, scope: !7)
