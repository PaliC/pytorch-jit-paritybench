; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_native_layer_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 1024, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 4, !dbg !15
  %16 = mul i32 %15, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = srem i32 %15, 16, !dbg !17
  %.frozen1 = freeze i32 %13, !dbg !18
  %18 = sdiv i32 %.frozen1, 256, !dbg !18
  %19 = mul i32 %18, 256, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %19, !dbg !19
  %20 = srem i32 %15, 64, !dbg !20
  %21 = shl nsw i32 %17, 3, !dbg !21
  %22 = shl nsw i32 %18, 7, !dbg !22
  %23 = add nsw i32 %21, %22, !dbg !23
  %24 = add nsw i32 %23, %.decomposed, !dbg !24
  %25 = sext i32 %24 to i64, !dbg !25
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !25
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %14) #1, !dbg !26
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !26
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !26
  %30 = sext i32 %.decomposed to i64, !dbg !27
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !27
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %14) #1, !dbg !28
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !28
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !28
  %35 = sext i32 %.decomposed2 to i64, !dbg !29
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !29
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %14) #1, !dbg !30
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !30
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !30
  %40 = bitcast i32 %38 to float, !dbg !30
  %41 = bitcast i32 %39 to float, !dbg !30
  %42 = sext i32 %20 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !31
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %14) #1, !dbg !32
  %45 = bitcast i32 %44 to float, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %14) #1, !dbg !32
  %47 = bitcast i32 %46 to float, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !33
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %14) #1, !dbg !34
  %50 = bitcast i32 %49 to float, !dbg !34
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %14) #1, !dbg !34
  %52 = bitcast i32 %51 to float, !dbg !34
  %53 = add nsw i32 %.decomposed, 4, !dbg !35
  %54 = add nsw i32 %23, %53, !dbg !36
  %55 = sext i32 %54 to i64, !dbg !37
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !37
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %14) #1, !dbg !38
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !38
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !38
  %60 = zext nneg i32 %53 to i64, !dbg !39
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !39
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %14) #1, !dbg !40
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !40
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !40
  %65 = fsub float %40, %45, !dbg !41
  %66 = fsub float %41, %47, !dbg !41
  %67 = fmul float %65, %50, !dbg !42
  %68 = fmul float %66, %52, !dbg !42
  %69 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !26
  %70 = insertelement <2 x i32> %69, i32 %58, i64 1, !dbg !26
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !26
  %72 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !28
  %73 = insertelement <2 x i32> %72, i32 %63, i64 1, !dbg !28
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !28
  %75 = fadd <2 x float> %71, %74, !dbg !43
  %76 = extractelement <2 x float> %75, i64 0, !dbg !44
  %77 = fmul float %76, %67, !dbg !44
  %78 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !26
  %79 = insertelement <2 x i32> %78, i32 %59, i64 1, !dbg !26
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !26
  %81 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !28
  %82 = insertelement <2 x i32> %81, i32 %64, i64 1, !dbg !28
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !28
  %84 = fadd <2 x float> %80, %83, !dbg !43
  %85 = extractelement <2 x float> %84, i64 0, !dbg !44
  %86 = fmul float %85, %68, !dbg !44
  %87 = extractelement <2 x float> %75, i64 1, !dbg !45
  %88 = fadd float %77, %87, !dbg !45
  %89 = extractelement <2 x float> %84, i64 1, !dbg !45
  %90 = fadd float %86, %89, !dbg !45
  %91 = sext i32 %13 to i64, !dbg !46
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %91, !dbg !46
  %93 = bitcast float %88 to i32, !dbg !47
  %94 = bitcast float %90 to i32, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %93, i32 %94, ptr addrspace(1) %92, i1 %14) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cocg7ozttidzhsk3rjru5wldde66ydxvyfra7yhlgipx5im5ixyb.py", directory: "inductor_cache/oc")
!4 = !{ptr @triton_poi_fused_add_mul_native_layer_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_native_layer_norm_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_native_layer_norm_1", linkageName: "triton_poi_fused_add_mul_native_layer_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 26, scope: !7)
!21 = !DILocation(line: 30, column: 37, scope: !7)
!22 = !DILocation(line: 30, column: 46, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 42, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 51, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 34, scope: !7)
!36 = !DILocation(line: 35, column: 46, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 55, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 40, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 19, scope: !7)
!46 = !DILocation(line: 43, column: 25, scope: !7)
!47 = !DILocation(line: 43, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 4, scope: !7)
