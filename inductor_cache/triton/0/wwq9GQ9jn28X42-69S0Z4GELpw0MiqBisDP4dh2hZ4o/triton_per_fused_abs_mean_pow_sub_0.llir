; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_pow_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %15 to float, !dbg !12
  %18 = bitcast i32 %16 to float, !dbg !12
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #4, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !14
  %25 = bitcast i32 %23 to float, !dbg !14
  %26 = bitcast i32 %24 to float, !dbg !14
  %27 = fsub float %17, %25, !dbg !15
  %28 = fsub float %18, %26, !dbg !15
  %29 = fmul float %27, %27, !dbg !16
  %30 = fmul float %28, %28, !dbg !16
  %31 = fmul float %29, %29, !dbg !17
  %32 = fmul float %30, %30, !dbg !17
  %33 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %34 = insertelement <2 x i32> %33, i32 %14, i64 1, !dbg !12
  %35 = bitcast <2 x i32> %34 to <2 x float>, !dbg !12
  %36 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !14
  %37 = insertelement <2 x i32> %36, i32 %22, i64 1, !dbg !14
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !14
  %39 = fsub <2 x float> %35, %38, !dbg !15
  %40 = fmul <2 x float> %39, %39, !dbg !16
  %41 = fmul <2 x float> %40, %40, !dbg !17
  %42 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %41), !dbg !18
  %43 = tail call float @llvm.fabs.f32(float %31), !dbg !18
  %44 = tail call float @llvm.fabs.f32(float %32), !dbg !18
  %shift = shufflevector <2 x float> %42, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %45 = fadd <2 x float> %42, %shift, !dbg !19
  %46 = extractelement <2 x float> %45, i64 0, !dbg !19
  %47 = fadd float %43, %46, !dbg !19
  %48 = fadd float %44, %47, !dbg !19
  %49 = bitcast float %48 to i32, !dbg !24
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 16, i32 31), !dbg !24
  %51 = bitcast i32 %50 to float, !dbg !24
  %52 = fadd float %48, %51, !dbg !19
  %53 = bitcast float %52 to i32, !dbg !24
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = fadd float %52, %55, !dbg !19
  %57 = bitcast float %56 to i32, !dbg !24
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = fadd float %56, %59, !dbg !19
  %61 = bitcast float %60 to i32, !dbg !24
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 2, i32 31), !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = fadd float %60, %63, !dbg !19
  %65 = bitcast float %64 to i32, !dbg !24
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = fadd float %64, %67, !dbg !19
  %69 = icmp eq i32 %6, 0, !dbg !24
  %70 = and i32 %7, 1, !dbg !24
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !24
  %72 = bitcast float %68 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 %69) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %73 = icmp slt i32 %5, 2, !dbg !24
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !24
  %75 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %74, i1 %73) #4, !dbg !24
  %76 = bitcast i32 %75 to float, !dbg !24
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !24
  %78 = bitcast i32 %77 to float, !dbg !24
  %79 = fadd float %76, %78, !dbg !19
  %80 = and i32 %5, 1, !dbg !24
  %81 = icmp eq i32 %80, 0, !dbg !24
  %82 = and i1 %73, %81, !dbg !24
  %83 = bitcast float %79 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %83, i1 %82) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %84 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %85 = fadd float %84, 0.000000e+00, !dbg !25
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 2.560000e+02) #4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %urem = and i32 %5, 63, !dbg !31
  %87 = icmp eq i32 %urem, 0, !dbg !31
  %88 = bitcast float %86 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %0, i1 %87) #4, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cig22ipzjhidsqnyjcpzxvrpczkxxnmyjqm7mz6wmtn53yxm6ng4.py", directory: "inductor_cache/ig")
!4 = !{ptr @triton_per_fused_abs_mean_pow_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_pow_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_pow_sub_0", linkageName: "triton_per_fused_abs_mean_pow_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 34, column: 18, scope: !7)
!17 = !DILocation(line: 35, column: 18, scope: !7)
!18 = !DILocation(line: 36, column: 23, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 38, column: 57, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 73, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 38, column: 44, scope: !7)
!29 = !DILocation(line: 40, column: 19, scope: !7)
!30 = !DILocation(line: 41, column: 4, scope: !7)
!31 = !DILocation(line: 42, column: 63, scope: !7)
!32 = !DILocation(line: 42, column: 4, scope: !7)
