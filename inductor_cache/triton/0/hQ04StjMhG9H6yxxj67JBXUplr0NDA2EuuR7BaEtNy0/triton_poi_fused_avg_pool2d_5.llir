; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = sdiv i32 %9, 32, !dbg !14
  %12 = srem i32 %10, 32, !dbg !15
  %13 = shl nsw i32 %12, 1, !dbg !16
  %14 = icmp sgt i32 %12, 0, !dbg !17
  %15 = shl i32 %11, 7, !dbg !18
  %16 = add i32 %15, %13, !dbg !19
  %17 = add i32 %16, -65, !dbg !20
  %18 = sext i32 %17 to i64, !dbg !21
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !21
  %20 = icmp sgt i32 %12, -1, !dbg !22
  %21 = add i32 %16, -64, !dbg !23
  %22 = sext i32 %21 to i64, !dbg !24
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !24
  %24 = add i32 %16, -63, !dbg !25
  %25 = sext i32 %24 to i64, !dbg !26
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !26
  %27 = sext i32 %16 to i64, !dbg !27
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !27
  %29 = getelementptr i8, ptr addrspace(1) %28, i64 -4, !dbg !27
  %30 = or disjoint i32 %16, 1, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !29
  %33 = add i32 %16, 63, !dbg !30
  %34 = sext i32 %33 to i64, !dbg !31
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !31
  %36 = add i32 %16, 64, !dbg !32
  %37 = sext i32 %36 to i64, !dbg !33
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !33
  %39 = add i32 %16, 65, !dbg !34
  %40 = sext i32 %39 to i64, !dbg !35
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !35
  %42 = mul nsw i32 %12, -2, !dbg !36
  %43 = add nsw i32 %13, 2, !dbg !37
  %44 = shl nsw i32 %12, 2, !dbg !38
  %45 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %46 = insertelement <2 x i32> %45, i32 %11, i64 1, !dbg !15
  %47 = srem <2 x i32> %46, splat (i32 32), !dbg !15
  %48 = extractelement <2 x i32> %47, i64 1, !dbg !39
  %49 = shl nsw i32 %48, 1, !dbg !40
  %50 = icmp sgt i32 %48, 0, !dbg !41
  %51 = extractelement <2 x i32> %47, i64 0, !dbg !38
  %52 = shl nsw i32 %51, 1, !dbg !16
  %53 = icmp sgt i32 %51, 0, !dbg !17
  %54 = and i1 %53, %50, !dbg !42
  %55 = and i1 %14, %50, !dbg !42
  %56 = add i32 %15, %52, !dbg !19
  %57 = add i32 %56, -65, !dbg !20
  %58 = sext i32 %57 to i64, !dbg !21
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !21
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %54, i32 0, i1 %54) #1, !dbg !43
  %61 = bitcast i32 %60 to float, !dbg !43
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %55, i32 0, i1 %55) #1, !dbg !43
  %63 = bitcast i32 %62 to float, !dbg !43
  %64 = icmp sgt i32 %51, -1, !dbg !22
  %65 = and i1 %64, %50, !dbg !44
  %66 = and i1 %20, %50, !dbg !44
  %67 = add i32 %56, -64, !dbg !23
  %68 = sext i32 %67 to i64, !dbg !24
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %65, i32 0, i1 %65) #1, !dbg !45
  %71 = bitcast i32 %70 to float, !dbg !45
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %66, i32 0, i1 %66) #1, !dbg !45
  %73 = bitcast i32 %72 to float, !dbg !45
  %74 = fadd float %61, %71, !dbg !46
  %75 = fadd float %63, %73, !dbg !46
  %76 = add i32 %56, -63, !dbg !25
  %77 = sext i32 %76 to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %65, i32 0, i1 %65) #1, !dbg !47
  %80 = bitcast i32 %79 to float, !dbg !47
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %66, i32 0, i1 %66) #1, !dbg !47
  %82 = bitcast i32 %81 to float, !dbg !47
  %83 = fadd float %74, %80, !dbg !48
  %84 = fadd float %75, %82, !dbg !48
  %85 = icmp sgt i32 %48, -1, !dbg !49
  %86 = and i1 %53, %85, !dbg !50
  %87 = and i1 %14, %85, !dbg !50
  %88 = add i32 %56, -1, !dbg !51
  %89 = sext i32 %88 to i64, !dbg !27
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !27
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %86, i32 0, i1 %86) #1, !dbg !52
  %92 = bitcast i32 %91 to float, !dbg !52
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %87, i32 0, i1 %87) #1, !dbg !52
  %94 = bitcast i32 %93 to float, !dbg !52
  %95 = fadd float %83, %92, !dbg !53
  %96 = fadd float %84, %94, !dbg !53
  %97 = or i32 %48, %51, !dbg !39
  %98 = icmp sgt i32 %97, -1, !dbg !39
  %99 = or i32 %48, %12, !dbg !39
  %100 = icmp sgt i32 %99, -1, !dbg !39
  %101 = sext i32 %56 to i64, !dbg !54
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !54
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %98, i32 0, i1 %98) #1, !dbg !55
  %104 = bitcast i32 %103 to float, !dbg !55
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %100, i32 0, i1 %100) #1, !dbg !55
  %106 = bitcast i32 %105 to float, !dbg !55
  %107 = fadd float %95, %104, !dbg !56
  %108 = fadd float %96, %106, !dbg !56
  %109 = or disjoint i32 %56, 1, !dbg !28
  %110 = sext i32 %109 to i64, !dbg !29
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !29
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %98, i32 0, i1 %98) #1, !dbg !57
  %113 = bitcast i32 %112 to float, !dbg !57
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %100, i32 0, i1 %100) #1, !dbg !57
  %115 = bitcast i32 %114 to float, !dbg !57
  %116 = fadd float %107, %113, !dbg !58
  %117 = fadd float %108, %115, !dbg !58
  %118 = add i32 %56, 63, !dbg !30
  %119 = sext i32 %118 to i64, !dbg !31
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !31
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %86, i32 0, i1 %86) #1, !dbg !59
  %122 = bitcast i32 %121 to float, !dbg !59
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %87, i32 0, i1 %87) #1, !dbg !59
  %124 = bitcast i32 %123 to float, !dbg !59
  %125 = fadd float %116, %122, !dbg !60
  %126 = fadd float %117, %124, !dbg !60
  %127 = add i32 %56, 64, !dbg !32
  %128 = sext i32 %127 to i64, !dbg !33
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !33
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %98, i32 0, i1 %98) #1, !dbg !61
  %131 = bitcast i32 %130 to float, !dbg !61
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %100, i32 0, i1 %100) #1, !dbg !61
  %133 = bitcast i32 %132 to float, !dbg !61
  %134 = fadd float %125, %131, !dbg !62
  %135 = fadd float %126, %133, !dbg !62
  %136 = add i32 %56, 65, !dbg !34
  %137 = sext i32 %136 to i64, !dbg !35
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !35
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %98, i32 0, i1 %98) #1, !dbg !63
  %140 = bitcast i32 %139 to float, !dbg !63
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %100, i32 0, i1 %100) #1, !dbg !63
  %142 = bitcast i32 %141 to float, !dbg !63
  %143 = fadd float %134, %140, !dbg !64
  %144 = fadd float %135, %142, !dbg !64
  %145 = mul nsw i32 %48, -2, !dbg !65
  %146 = or disjoint i32 %52, 2, !dbg !37
  %147 = add nsw i32 %49, 2, !dbg !66
  %148 = mul nsw i32 %145, %146, !dbg !67
  %149 = mul nsw i32 %145, %43, !dbg !67
  %150 = shl nsw i32 %51, 2, !dbg !38
  %151 = insertelement <2 x i32> <i32 -2, i32 poison>, i32 %150, i64 1, !dbg !36
  %152 = mul nsw <2 x i32> %151, %47, !dbg !36
  %153 = mul nsw i32 %44, %48, !dbg !68
  %154 = extractelement <2 x i32> %152, i64 0, !dbg !69
  %reass.add = add nsw i32 %146, %154
  %reass.mul = mul nsw i32 %reass.add, %147
  %155 = add nsw i32 %147, %145, !dbg !70
  %156 = or disjoint i32 %155, 1, !dbg !71
  %157 = add nsw i32 %156, %154, !dbg !69
  %158 = extractelement <2 x i32> %152, i64 1, !dbg !72
  %159 = add nsw i32 %157, %158, !dbg !72
  %160 = add i32 %159, %146, !dbg !73
  %161 = add i32 %160, %148, !dbg !74
  %162 = add i32 %161, %reass.mul, !dbg !75
  %reass.add1 = add nsw i32 %43, %42
  %reass.mul2 = mul nsw i32 %147, %reass.add1
  %163 = add nsw i32 %156, %42, !dbg !69
  %164 = add nsw i32 %163, %43, !dbg !72
  %165 = add i32 %164, %153, !dbg !73
  %166 = add i32 %165, %149, !dbg !74
  %167 = add i32 %166, %reass.mul2, !dbg !75
  %168 = sitofp i32 %162 to float, !dbg !76
  %169 = sitofp i32 %167 to float, !dbg !76
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %168) #1, !dbg !76
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %169) #1, !dbg !76
  %172 = sext i32 %9 to i64, !dbg !77
  %173 = getelementptr float, ptr addrspace(1) %1, i64 %172, !dbg !77
  %174 = bitcast float %170 to i32, !dbg !78
  %175 = bitcast float %171 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %174, i32 %175, ptr addrspace(1) %173, i1 true) #1, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck4dbub76svfij53aodv5oiadpvkjjhkddi55m2kjglht6rbl2te.py", directory: "inductor_cache/k4")
!4 = !{ptr @triton_poi_fused_avg_pool2d_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_5", linkageName: "triton_poi_fused_avg_pool2d_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 20, scope: !7)
!17 = !DILocation(line: 35, column: 19, scope: !7)
!18 = !DILocation(line: 39, column: 50, scope: !7)
!19 = !DILocation(line: 39, column: 39, scope: !7)
!20 = !DILocation(line: 39, column: 46, scope: !7)
!21 = !DILocation(line: 39, column: 31, scope: !7)
!22 = !DILocation(line: 41, column: 21, scope: !7)
!23 = !DILocation(line: 45, column: 46, scope: !7)
!24 = !DILocation(line: 45, column: 31, scope: !7)
!25 = !DILocation(line: 52, column: 46, scope: !7)
!26 = !DILocation(line: 52, column: 31, scope: !7)
!27 = !DILocation(line: 59, column: 31, scope: !7)
!28 = !DILocation(line: 65, column: 42, scope: !7)
!29 = !DILocation(line: 65, column: 31, scope: !7)
!30 = !DILocation(line: 72, column: 43, scope: !7)
!31 = !DILocation(line: 72, column: 31, scope: !7)
!32 = !DILocation(line: 75, column: 43, scope: !7)
!33 = !DILocation(line: 75, column: 31, scope: !7)
!34 = !DILocation(line: 78, column: 43, scope: !7)
!35 = !DILocation(line: 78, column: 31, scope: !7)
!36 = !DILocation(line: 80, column: 22, scope: !7)
!37 = !DILocation(line: 80, column: 62, scope: !7)
!38 = !DILocation(line: 80, column: 328, scope: !7)
!39 = !DILocation(line: 61, column: 20, scope: !7)
!40 = !DILocation(line: 28, column: 20, scope: !7)
!41 = !DILocation(line: 30, column: 19, scope: !7)
!42 = !DILocation(line: 38, column: 19, scope: !7)
!43 = !DILocation(line: 39, column: 55, scope: !7)
!44 = !DILocation(line: 44, column: 19, scope: !7)
!45 = !DILocation(line: 45, column: 55, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 55, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 21, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 45, scope: !7)
!52 = !DILocation(line: 59, column: 54, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 31, scope: !7)
!55 = !DILocation(line: 62, column: 47, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 51, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 72, column: 52, scope: !7)
!60 = !DILocation(line: 73, column: 20, scope: !7)
!61 = !DILocation(line: 75, column: 52, scope: !7)
!62 = !DILocation(line: 76, column: 20, scope: !7)
!63 = !DILocation(line: 78, column: 52, scope: !7)
!64 = !DILocation(line: 79, column: 20, scope: !7)
!65 = !DILocation(line: 80, column: 34, scope: !7)
!66 = !DILocation(line: 80, column: 127, scope: !7)
!67 = !DILocation(line: 80, column: 259, scope: !7)
!68 = !DILocation(line: 80, column: 331, scope: !7)
!69 = !DILocation(line: 80, column: 173, scope: !7)
!70 = !DILocation(line: 80, column: 29, scope: !7)
!71 = !DILocation(line: 80, column: 40, scope: !7)
!72 = !DILocation(line: 80, column: 250, scope: !7)
!73 = !DILocation(line: 80, column: 326, scope: !7)
!74 = !DILocation(line: 80, column: 337, scope: !7)
!75 = !DILocation(line: 80, column: 404, scope: !7)
!76 = !DILocation(line: 81, column: 20, scope: !7)
!77 = !DILocation(line: 82, column: 25, scope: !7)
!78 = !DILocation(line: 82, column: 37, scope: !7)
!79 = !DILocation(line: 82, column: 4, scope: !7)
