; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 4, !dbg !13
  %13 = or disjoint i32 %11, 8, !dbg !13
  %14 = or disjoint i32 %11, 12, !dbg !13
  %15 = icmp slt i32 %11, 12, !dbg !14
  %16 = icmp slt i32 %12, 12, !dbg !14
  %17 = icmp slt i32 %13, 12, !dbg !14
  %18 = icmp slt i32 %7, 0, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !15
  %20 = shl i32 %19, 8, !dbg !16
  %21 = shl i32 %8, 2, !dbg !17
  %22 = and i32 %21, 252, !dbg !17
  %23 = or disjoint i32 %20, %22, !dbg !18
  %.frozen = freeze i32 %11, !dbg !19
  %24 = sdiv i32 %.frozen, 3, !dbg !19
  %25 = mul i32 %24, 3, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %.frozen1 = freeze i32 %12, !dbg !19
  %26 = sdiv i32 %.frozen1, 3, !dbg !19
  %27 = mul i32 %26, 3, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %27, !dbg !20
  %.frozen3 = freeze i32 %13, !dbg !19
  %28 = sdiv i32 %.frozen3, 3, !dbg !19
  %29 = mul i32 %28, 3, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %29, !dbg !20
  %.frozen5 = freeze i32 %14, !dbg !19
  %30 = sdiv i32 %.frozen5, 3, !dbg !19
  %31 = mul i32 %30, 3, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %31, !dbg !20
  %32 = mul i32 %23, 3, !dbg !21
  %33 = or disjoint i32 %32, 3, !dbg !21
  %34 = add i32 %32, 6, !dbg !21
  %35 = add i32 %32, 9, !dbg !21
  %36 = mul i32 %24, 12288, !dbg !22
  %37 = mul i32 %26, 12288, !dbg !22
  %38 = mul i32 %28, 12288, !dbg !22
  %39 = mul i32 %30, 12288, !dbg !22
  %40 = add i32 %36, %.decomposed, !dbg !23
  %41 = add i32 %40, %32, !dbg !24
  %42 = add i32 %40, %33, !dbg !24
  %43 = add i32 %40, %34, !dbg !24
  %44 = add i32 %40, %35, !dbg !24
  %45 = add i32 %37, %.decomposed2, !dbg !23
  %46 = add i32 %45, %32, !dbg !24
  %47 = add i32 %45, %33, !dbg !24
  %48 = add i32 %45, %34, !dbg !24
  %49 = add i32 %45, %35, !dbg !24
  %50 = add i32 %38, %.decomposed4, !dbg !23
  %51 = add i32 %50, %32, !dbg !24
  %52 = add i32 %50, %33, !dbg !24
  %53 = add i32 %50, %34, !dbg !24
  %54 = add i32 %50, %35, !dbg !24
  %55 = add i32 %39, %.decomposed6, !dbg !23
  %56 = add i32 %55, %32, !dbg !24
  %57 = add i32 %55, %33, !dbg !24
  %58 = add i32 %55, %34, !dbg !24
  %59 = add i32 %55, %35, !dbg !24
  %60 = sext i32 %41 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !25
  %62 = sext i32 %42 to i64, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !25
  %64 = sext i32 %43 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !25
  %66 = sext i32 %44 to i64, !dbg !25
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !25
  %68 = sext i32 %46 to i64, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !25
  %70 = sext i32 %47 to i64, !dbg !25
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !25
  %72 = sext i32 %48 to i64, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !25
  %74 = sext i32 %49 to i64, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !25
  %76 = sext i32 %51 to i64, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !25
  %78 = sext i32 %52 to i64, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !25
  %80 = sext i32 %53 to i64, !dbg !25
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !25
  %82 = sext i32 %54 to i64, !dbg !25
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !25
  %84 = sext i32 %56 to i64, !dbg !25
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !25
  %86 = sext i32 %57 to i64, !dbg !25
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !25
  %88 = sext i32 %58 to i64, !dbg !25
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !25
  %90 = sext i32 %59 to i64, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %15) #1, !dbg !26
  %93 = bitcast i32 %92 to float, !dbg !26
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %15) #1, !dbg !26
  %95 = bitcast i32 %94 to float, !dbg !26
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %15) #1, !dbg !26
  %97 = bitcast i32 %96 to float, !dbg !26
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %15) #1, !dbg !26
  %99 = bitcast i32 %98 to float, !dbg !26
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %16) #1, !dbg !26
  %101 = bitcast i32 %100 to float, !dbg !26
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %16) #1, !dbg !26
  %103 = bitcast i32 %102 to float, !dbg !26
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %16) #1, !dbg !26
  %105 = bitcast i32 %104 to float, !dbg !26
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %16) #1, !dbg !26
  %107 = bitcast i32 %106 to float, !dbg !26
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %17) #1, !dbg !26
  %109 = bitcast i32 %108 to float, !dbg !26
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %17) #1, !dbg !26
  %111 = bitcast i32 %110 to float, !dbg !26
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %17) #1, !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %17) #1, !dbg !26
  %115 = bitcast i32 %114 to float, !dbg !26
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %18) #1, !dbg !26
  %117 = bitcast i32 %116 to float, !dbg !26
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %18) #1, !dbg !26
  %119 = bitcast i32 %118 to float, !dbg !26
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %18) #1, !dbg !26
  %121 = bitcast i32 %120 to float, !dbg !26
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %18) #1, !dbg !26
  %123 = bitcast i32 %122 to float, !dbg !26
  %124 = sext i32 %.decomposed to i64, !dbg !27
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !27
  %126 = sext i32 %.decomposed2 to i64, !dbg !27
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !27
  %128 = sext i32 %.decomposed4 to i64, !dbg !27
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !27
  %130 = sext i32 %.decomposed6 to i64, !dbg !27
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !27
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %15) #1, !dbg !28
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %15) #1, !dbg !28
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %15) #1, !dbg !28
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %15) #1, !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %16) #1, !dbg !28
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %16) #1, !dbg !28
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %16) #1, !dbg !28
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %16) #1, !dbg !28
  %141 = bitcast i32 %140 to float, !dbg !28
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %17) #1, !dbg !28
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %17) #1, !dbg !28
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %17) #1, !dbg !28
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %17) #1, !dbg !28
  %146 = bitcast i32 %145 to float, !dbg !28
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %18) #1, !dbg !28
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %18) #1, !dbg !28
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %18) #1, !dbg !28
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %18) #1, !dbg !28
  %151 = bitcast i32 %150 to float, !dbg !28
  %152 = fadd float %93, %136, !dbg !29
  %153 = fadd float %95, %136, !dbg !29
  %154 = fadd float %97, %136, !dbg !29
  %155 = fadd float %99, %136, !dbg !29
  %156 = fadd float %101, %141, !dbg !29
  %157 = fadd float %103, %141, !dbg !29
  %158 = fadd float %105, %141, !dbg !29
  %159 = fadd float %107, %141, !dbg !29
  %160 = fadd float %109, %146, !dbg !29
  %161 = fadd float %111, %146, !dbg !29
  %162 = fadd float %113, %146, !dbg !29
  %163 = fadd float %115, %146, !dbg !29
  %164 = fadd float %117, %151, !dbg !29
  %165 = fadd float %119, %151, !dbg !29
  %166 = fadd float %121, %151, !dbg !29
  %167 = fadd float %123, %151, !dbg !29
  %168 = shl i32 %11, 12, !dbg !30
  %169 = shl i32 %12, 12, !dbg !30
  %170 = shl i32 %13, 12, !dbg !30
  %171 = shl i32 %14, 12, !dbg !30
  %172 = add i32 %23, %168, !dbg !31
  %173 = add i32 %23, %169, !dbg !31
  %174 = add i32 %23, %170, !dbg !31
  %175 = add i32 %23, %171, !dbg !31
  %176 = sext i32 %172 to i64, !dbg !32
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %176, !dbg !32
  %178 = sext i32 %173 to i64, !dbg !32
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %178, !dbg !32
  %180 = sext i32 %174 to i64, !dbg !32
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !32
  %182 = sext i32 %175 to i64, !dbg !32
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %182, !dbg !32
  %184 = bitcast float %152 to i32, !dbg !33
  %185 = bitcast float %153 to i32, !dbg !33
  %186 = bitcast float %154 to i32, !dbg !33
  %187 = bitcast float %155 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %184, i32 %185, i32 %186, i32 %187, ptr addrspace(1) %177, i1 %15) #1, !dbg !33
  %188 = bitcast float %156 to i32, !dbg !33
  %189 = bitcast float %157 to i32, !dbg !33
  %190 = bitcast float %158 to i32, !dbg !33
  %191 = bitcast float %159 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %189, i32 %190, i32 %191, ptr addrspace(1) %179, i1 %16) #1, !dbg !33
  %192 = bitcast float %160 to i32, !dbg !33
  %193 = bitcast float %161 to i32, !dbg !33
  %194 = bitcast float %162 to i32, !dbg !33
  %195 = bitcast float %163 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %193, i32 %194, i32 %195, ptr addrspace(1) %181, i1 %17) #1, !dbg !33
  %196 = bitcast float %164 to i32, !dbg !33
  %197 = bitcast float %165 to i32, !dbg !33
  %198 = bitcast float %166 to i32, !dbg !33
  %199 = bitcast float %167 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %196, i32 %197, i32 %198, i32 %199, ptr addrspace(1) %183, i1 %18) #1, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cizykmdkp24nelluv4oquqjy64qn4kbm2nyxylzh6ttomz3yqxqf.py", directory: "inductor_cache/iz")
!4 = !{ptr @triton_poi_fused_convolution_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_1", linkageName: "triton_poi_fused_convolution_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 42, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 53, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 25, scope: !7)
!33 = !DILocation(line: 35, column: 46, scope: !7)
!34 = !DILocation(line: 35, column: 4, scope: !7)
