; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_relu_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = and i32 %8, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = or disjoint i32 %7, %14, !dbg !13
  %19 = icmp slt i32 %15, 256, !dbg !14
  %20 = icmp slt i32 %16, 256, !dbg !14
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 2, !dbg !16
  %25 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %25, 1, !dbg !17
  %26 = or disjoint i32 %.lobit, 2, !dbg !17
  %27 = or disjoint i32 %24, %.lobit, !dbg !18
  %28 = or disjoint i32 %24, %26, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %29 = sdiv i32 %.frozen, 64, !dbg !19
  %30 = mul i32 %29, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = srem i32 %16, 64, !dbg !20
  %32 = shl i32 %27, 6, !dbg !21
  %33 = shl i32 %28, 6, !dbg !21
  %34 = shl i32 %29, 18, !dbg !22
  %35 = add i32 %34, %.decomposed, !dbg !23
  %36 = add i32 %35, %32, !dbg !24
  %37 = add i32 %35, %33, !dbg !24
  %38 = sext i32 %36 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = sext i32 %37 to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %19) #2, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %19) #2, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !26
  %52 = shl i32 %8, 4, !dbg !26
  %53 = and i32 %52, 1008, !dbg !26
  %54 = or disjoint i32 %53, %.lobit, !dbg !26
  %55 = and i32 %9, 508, !dbg !26
  %56 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %53, !dbg !26
  %57 = getelementptr float, ptr addrspace(3) %56, i32 %54, !dbg !26
  %58 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #2, !dbg !26
  %59 = or disjoint i32 %54, 4, !dbg !26
  %60 = lshr i32 %59, 2, !dbg !26
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !26
  %62 = getelementptr float, ptr addrspace(3) %61, i32 %59, !dbg !26
  %63 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #2, !dbg !26
  %64 = or disjoint i32 %54, 8, !dbg !26
  %65 = lshr i32 %64, 2, !dbg !26
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !26
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %64, !dbg !26
  %68 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !26
  %69 = or disjoint i32 %54, 12, !dbg !26
  %70 = lshr i32 %69, 2, !dbg !26
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !26
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %69, !dbg !26
  %73 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !26
  %74 = or disjoint i32 %54, 2, !dbg !26
  %75 = getelementptr float, ptr addrspace(3) %56, i32 %74, !dbg !26
  %76 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !26
  %77 = or disjoint i32 %54, 6, !dbg !26
  %78 = lshr i32 %77, 2, !dbg !26
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !26
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %77, !dbg !26
  %81 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !26
  %82 = or disjoint i32 %54, 10, !dbg !26
  %83 = lshr i32 %82, 2, !dbg !26
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !26
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %82, !dbg !26
  %86 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !26
  %87 = or disjoint i32 %54, 14, !dbg !26
  %88 = lshr i32 %87, 2, !dbg !26
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !26
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !26
  %91 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %92 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %55, !dbg !26
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %55, !dbg !26
  %94 = or disjoint i32 %55, 512, !dbg !26
  %95 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %94, !dbg !26
  %96 = getelementptr inbounds float, ptr addrspace(3) %95, i32 %94, !dbg !26
  %97 = load float, ptr addrspace(3) %96, align 4, !dbg !26
  %98 = or disjoint i32 %55, 513, !dbg !26
  %99 = lshr i32 %98, 2, !dbg !26
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %99, !dbg !26
  %101 = getelementptr inbounds float, ptr addrspace(3) %100, i32 %98, !dbg !26
  %102 = load float, ptr addrspace(3) %101, align 4, !dbg !26
  %103 = or disjoint i32 %55, 514, !dbg !26
  %104 = lshr i32 %103, 2, !dbg !26
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !26
  %106 = getelementptr inbounds float, ptr addrspace(3) %105, i32 %103, !dbg !26
  %107 = load float, ptr addrspace(3) %106, align 4, !dbg !26
  %108 = or disjoint i32 %55, 515, !dbg !26
  %109 = lshr i32 %108, 2, !dbg !26
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !26
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %108, !dbg !26
  %112 = load float, ptr addrspace(3) %111, align 4, !dbg !26
  %113 = sext i32 %31 to i64, !dbg !27
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !27
  %.idx = shl nuw nsw i32 %12, 3, !dbg !28
  %115 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !28
  %116 = shl nuw nsw i32 %12, 1, !dbg !28
  %117 = or disjoint i32 %116, 2, !dbg !28
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !28
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !28
  %119 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !28
  %.idx3 = shl nuw nsw i32 %14, 3, !dbg !28
  %120 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !28
  %121 = load <4 x float>, ptr addrspace(3) %93, align 4, !dbg !26
  %122 = shufflevector <4 x float> %121, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %114, i1 %20) #2, !dbg !32
  %124 = extractvalue { i32, i32 } %123, 0, !dbg !32
  %125 = extractvalue { i32, i32 } %123, 1, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %126 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %126, i1 true) #2, !dbg !28
  %127 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %127, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %128 = load float, ptr addrspace(3) %119, align 8, !dbg !28
  %129 = load float, ptr addrspace(3) %120, align 8, !dbg !28
  %130 = insertelement <8 x float> poison, float %112, i64 0, !dbg !33
  %131 = insertelement <8 x float> %130, float %107, i64 1, !dbg !33
  %132 = insertelement <8 x float> %131, float %102, i64 2, !dbg !33
  %133 = insertelement <8 x float> %132, float %97, i64 3, !dbg !33
  %134 = shufflevector <4 x float> %122, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !33
  %135 = shufflevector <8 x float> %133, <8 x float> %134, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !33
  %136 = insertelement <8 x float> poison, float %129, i64 0, !dbg !33
  %137 = insertelement <8 x float> %136, float %128, i64 1, !dbg !33
  %138 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !33
  %139 = fadd <8 x float> %135, %138, !dbg !33
  %140 = fcmp olt <8 x float> %139, zeroinitializer, !dbg !34
  %141 = extractelement <8 x i1> %140, i64 7, !dbg !28
  %142 = extractelement <8 x i1> %140, i64 6, !dbg !28
  %143 = extractelement <8 x i1> %140, i64 5, !dbg !28
  %144 = extractelement <8 x i1> %140, i64 4, !dbg !28
  %145 = extractelement <8 x i1> %140, i64 3, !dbg !28
  %146 = extractelement <8 x i1> %140, i64 2, !dbg !28
  %147 = extractelement <8 x i1> %140, i64 1, !dbg !28
  %148 = extractelement <8 x i1> %140, i64 0, !dbg !28
  %149 = shl i32 %17, 12, !dbg !35
  %150 = shl i32 %18, 12, !dbg !35
  %151 = add i32 %149, %24, !dbg !36
  %152 = add i32 %150, %24, !dbg !36
  %153 = sext i32 %151 to i64, !dbg !37
  %154 = getelementptr float, ptr addrspace(1) %2, i64 %153, !dbg !37
  %155 = sext i32 %152 to i64, !dbg !37
  %156 = getelementptr float, ptr addrspace(1) %2, i64 %155, !dbg !37
  %bc = bitcast <8 x float> %139 to <8 x i32>, !dbg !38
  %157 = extractelement <8 x i32> %bc, i64 7, !dbg !38
  %158 = select i1 %141, i32 0, i32 %157, !dbg !28
  %bc4 = bitcast <8 x float> %139 to <8 x i32>, !dbg !38
  %159 = extractelement <8 x i32> %bc4, i64 6, !dbg !38
  %160 = select i1 %142, i32 0, i32 %159, !dbg !28
  %bc5 = bitcast <8 x float> %139 to <8 x i32>, !dbg !38
  %161 = extractelement <8 x i32> %bc5, i64 5, !dbg !38
  %162 = select i1 %143, i32 0, i32 %161, !dbg !28
  %bc6 = bitcast <8 x float> %139 to <8 x i32>, !dbg !38
  %163 = extractelement <8 x i32> %bc6, i64 4, !dbg !38
  %164 = select i1 %144, i32 0, i32 %163, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %158, i32 %160, i32 %162, i32 %164, ptr addrspace(1) %154, i1 %21) #2, !dbg !38
  %bc7 = bitcast <8 x float> %139 to <8 x i32>, !dbg !38
  %165 = extractelement <8 x i32> %bc7, i64 3, !dbg !38
  %166 = select i1 %145, i32 0, i32 %165, !dbg !28
  %bc8 = bitcast <8 x float> %139 to <8 x i32>, !dbg !38
  %167 = extractelement <8 x i32> %bc8, i64 2, !dbg !38
  %168 = select i1 %146, i32 0, i32 %167, !dbg !28
  %bc9 = bitcast <8 x float> %139 to <8 x i32>, !dbg !38
  %169 = extractelement <8 x i32> %bc9, i64 1, !dbg !38
  %170 = select i1 %147, i32 0, i32 %169, !dbg !28
  %bc10 = bitcast <8 x float> %139 to <8 x i32>, !dbg !38
  %171 = extractelement <8 x i32> %bc10, i64 0, !dbg !38
  %172 = select i1 %148, i32 0, i32 %171, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %168, i32 %170, i32 %172, ptr addrspace(1) %156, i1 %22) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvw3al4oi5lzxpvwkqmaimlwmwbsg6ra2yoxuflcvapxe6gx5zwq.py", directory: "inductor_cache/vw")
!4 = !{ptr @triton_poi_fused_convolution_div_relu_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_relu_sub_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_relu_sub_7", linkageName: "triton_poi_fused_convolution_div_relu_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 37, column: 35, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 46, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
