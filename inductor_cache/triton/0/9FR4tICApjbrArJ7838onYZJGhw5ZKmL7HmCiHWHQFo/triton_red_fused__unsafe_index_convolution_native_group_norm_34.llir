; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_convolution_native_group_norm_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = and i32 %12, 64, !dbg !12
  %15 = lshr i32 %12, 1, !dbg !12
  %16 = and i32 %15, 63, !dbg !12
  %17 = or disjoint i32 %11, %13, !dbg !13
  %18 = or disjoint i32 %11, %16, !dbg !13
  %19 = icmp slt i32 %17, 1024, !dbg !14
  %20 = icmp slt i32 %18, 1024, !dbg !14
  %.lobit = lshr exact i32 %14, 6, !dbg !15
  %21 = shl i32 %12, 2, !dbg !15
  %22 = and i32 %21, 4, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %23 = sdiv i32 %.frozen, 4, !dbg !16
  %24 = mul i32 %23, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %24, !dbg !17
  %25 = srem i32 %23, 64, !dbg !18
  %26 = sext i32 %25 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %19) #3, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = shl nsw i32 %.decomposed, 3, !dbg !21
  %31 = shl i32 %23, 12, !dbg !22
  %32 = sext i32 %31 to i64, !dbg !23
  %33 = shl i32 %18, 13, !dbg !24
  %34 = or disjoint i32 %33, %22
  %35 = shl i32 %12, 3
  %36 = and i32 %35, 504
  %37 = or disjoint i32 %36, %.lobit
  %38 = and i32 %21, 252
  %39 = shl nuw nsw i32 %14, 2
  %40 = or disjoint i32 %38, %39
  %41 = lshr exact i32 %36, 1
  %42 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %41
  %43 = getelementptr inbounds float, ptr addrspace(3) %42, i32 %37
  %44 = or disjoint i32 %37, 2
  %45 = getelementptr inbounds float, ptr addrspace(3) %42, i32 %44
  %46 = or disjoint i32 %37, 4
  %47 = getelementptr inbounds float, ptr addrspace(3) %42, i32 %46
  %48 = or disjoint i32 %37, 6
  %49 = getelementptr inbounds float, ptr addrspace(3) %42, i32 %48
  %50 = lshr exact i32 %40, 1
  %51 = and i32 %50, 252
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i32 %51
  %53 = getelementptr float, ptr addrspace(3) %52, i32 %40
  %54 = sext i32 %34 to i64, !dbg !25
  %invariant.gep = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !25
  %55 = getelementptr inbounds i8, ptr addrspace(3) %53, i32 4
  %56 = getelementptr inbounds i8, ptr addrspace(3) %53, i32 8
  %57 = getelementptr inbounds i8, ptr addrspace(3) %53, i32 12
  br label %58, !dbg !25

58:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %59 = phi float [ 0.000000e+00, %9 ], [ %213, %._crit_edge ]
  %60 = phi float [ 0.000000e+00, %9 ], [ %214, %._crit_edge ]
  %61 = phi float [ 0.000000e+00, %9 ], [ %215, %._crit_edge ]
  %62 = phi float [ 0.000000e+00, %9 ], [ %216, %._crit_edge ]
  %63 = phi float [ 0.000000e+00, %9 ], [ %209, %._crit_edge ]
  %64 = phi float [ 0.000000e+00, %9 ], [ %210, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %9 ], [ %211, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %9 ], [ %212, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %9 ], [ %205, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %9 ], [ %206, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %9 ], [ %207, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %9 ], [ %208, %._crit_edge ]
  %71 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !26
  %72 = lshr i32 %71, 10, !dbg !26
  %73 = lshr i64 %indvars.iv, 5, !dbg !27
  %74 = and i64 %73, 31, !dbg !28
  %.masked = and i32 %71, 24, !dbg !29
  %75 = or disjoint i32 %.masked, %.lobit, !dbg !29
  %76 = or disjoint i32 %75, 2, !dbg !29
  %77 = or disjoint i32 %75, 4, !dbg !29
  %78 = or disjoint i32 %75, 6, !dbg !29
  %79 = add nuw nsw i32 %72, %30, !dbg !30
  %80 = sext i32 %79 to i64, !dbg !31
  %81 = getelementptr i64, ptr addrspace(1) %0, i64 %80, !dbg !31
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %81, i1 %19, i1 %19) #3, !dbg !32
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %81, i1 %19, i1 %19) #3, !dbg !32
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %81, i1 %19, i1 %19) #3, !dbg !32
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %81, i1 %19, i1 %19) #3, !dbg !32
  %86 = getelementptr i64, ptr addrspace(1) %0, i64 %74, !dbg !33
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %86, i1 true, i1 true) #3, !dbg !34
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %86, i1 true, i1 true) #3, !dbg !34
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %86, i1 true, i1 true) #3, !dbg !34
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %86, i1 true, i1 true) #3, !dbg !34
  %91 = zext nneg i32 %75 to i64, !dbg !35
  %92 = getelementptr i64, ptr addrspace(1) %0, i64 %91, !dbg !35
  %93 = zext nneg i32 %76 to i64, !dbg !35
  %94 = getelementptr i64, ptr addrspace(1) %0, i64 %93, !dbg !35
  %95 = zext nneg i32 %77 to i64, !dbg !35
  %96 = getelementptr i64, ptr addrspace(1) %0, i64 %95, !dbg !35
  %97 = zext nneg i32 %78 to i64, !dbg !35
  %98 = getelementptr i64, ptr addrspace(1) %0, i64 %97, !dbg !35
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %92, i1 true, i1 true) #3, !dbg !36
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %94, i1 true, i1 true) #3, !dbg !36
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %96, i1 true, i1 true) #3, !dbg !36
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %98, i1 true, i1 true) #3, !dbg !36
  %103 = lshr i64 %82, 59, !dbg !37
  %104 = and i64 %103, 16, !dbg !37
  %105 = add i64 %104, %82, !dbg !37
  %106 = lshr i64 %83, 59, !dbg !37
  %107 = and i64 %106, 16, !dbg !37
  %108 = add i64 %107, %83, !dbg !37
  %109 = lshr i64 %84, 59, !dbg !37
  %110 = and i64 %109, 16, !dbg !37
  %111 = add i64 %110, %84, !dbg !37
  %112 = lshr i64 %85, 59, !dbg !37
  %113 = and i64 %112, 16, !dbg !37
  %114 = add i64 %113, %85, !dbg !37
  %115 = lshr i64 %87, 59, !dbg !38
  %116 = and i64 %115, 16, !dbg !38
  %117 = add i64 %116, %87, !dbg !38
  %118 = lshr i64 %88, 59, !dbg !38
  %119 = and i64 %118, 16, !dbg !38
  %120 = add i64 %119, %88, !dbg !38
  %121 = lshr i64 %89, 59, !dbg !38
  %122 = and i64 %121, 16, !dbg !38
  %123 = add i64 %122, %89, !dbg !38
  %124 = lshr i64 %90, 59, !dbg !38
  %125 = and i64 %124, 16, !dbg !38
  %126 = add i64 %125, %90, !dbg !38
  %127 = lshr i64 %99, 59, !dbg !39
  %128 = and i64 %127, 16, !dbg !39
  %129 = lshr i64 %100, 59, !dbg !39
  %130 = and i64 %129, 16, !dbg !39
  %131 = lshr i64 %101, 59, !dbg !39
  %132 = and i64 %131, 16, !dbg !39
  %133 = lshr i64 %102, 59, !dbg !39
  %134 = and i64 %133, 16, !dbg !39
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !40
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %128, !dbg !40
  %.idx = shl i64 %117, 6, !dbg !40
  %137 = getelementptr i8, ptr addrspace(1) %136, i64 %.idx, !dbg !40
  %.idx7 = shl i64 %105, 10, !dbg !40
  %138 = getelementptr i8, ptr addrspace(1) %137, i64 %.idx7, !dbg !40
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %32, !dbg !40
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !40
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %130, !dbg !40
  %.idx8 = shl i64 %120, 6, !dbg !40
  %142 = getelementptr i8, ptr addrspace(1) %141, i64 %.idx8, !dbg !40
  %.idx9 = shl i64 %108, 10, !dbg !40
  %143 = getelementptr i8, ptr addrspace(1) %142, i64 %.idx9, !dbg !40
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %32, !dbg !40
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !40
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %132, !dbg !40
  %.idx10 = shl i64 %123, 6, !dbg !40
  %147 = getelementptr i8, ptr addrspace(1) %146, i64 %.idx10, !dbg !40
  %.idx11 = shl i64 %111, 10, !dbg !40
  %148 = getelementptr i8, ptr addrspace(1) %147, i64 %.idx11, !dbg !40
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %32, !dbg !40
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !40
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %134, !dbg !40
  %.idx12 = shl i64 %126, 6, !dbg !40
  %152 = getelementptr i8, ptr addrspace(1) %151, i64 %.idx12, !dbg !40
  %.idx13 = shl i64 %114, 10, !dbg !40
  %153 = getelementptr i8, ptr addrspace(1) %152, i64 %.idx13, !dbg !40
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %32, !dbg !40
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %19) #3, !dbg !41
  %156 = bitcast i32 %155 to float, !dbg !41
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %19) #3, !dbg !41
  %158 = bitcast i32 %157 to float, !dbg !41
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %19) #3, !dbg !41
  %160 = bitcast i32 %159 to float, !dbg !41
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %19) #3, !dbg !41
  %162 = bitcast i32 %161 to float, !dbg !41
  %163 = fadd float %29, %156, !dbg !42
  %164 = fadd float %29, %158, !dbg !42
  %165 = fadd float %29, %160, !dbg !42
  %166 = fadd float %29, %162, !dbg !42
  %167 = icmp eq i64 %indvars.iv, 0, !dbg !43
  br i1 %167, label %._crit_edge, label %168, !dbg !44

168:                                              ; preds = %58
  %169 = fsub float %163, %67, !dbg !48
  %170 = fsub float %164, %68, !dbg !48
  %171 = fsub float %165, %69, !dbg !48
  %172 = fsub float %166, %70, !dbg !48
  %173 = fadd float %59, 1.000000e+00, !dbg !49
  %174 = fadd float %60, 1.000000e+00, !dbg !49
  %175 = fadd float %61, 1.000000e+00, !dbg !49
  %176 = fadd float %62, 1.000000e+00, !dbg !49
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %173) #3, !dbg !50
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %174) #3, !dbg !50
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float %175) #3, !dbg !50
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %176) #3, !dbg !50
  %181 = fadd float %67, %177, !dbg !51
  %182 = fadd float %68, %178, !dbg !51
  %183 = fadd float %69, %179, !dbg !51
  %184 = fadd float %70, %180, !dbg !51
  %185 = fsub float %163, %181, !dbg !52
  %186 = fsub float %164, %182, !dbg !52
  %187 = fsub float %165, %183, !dbg !52
  %188 = fsub float %166, %184, !dbg !52
  %189 = fmul float %169, %185, !dbg !53
  %190 = fmul float %170, %186, !dbg !53
  %191 = fmul float %171, %187, !dbg !53
  %192 = fmul float %172, %188, !dbg !53
  %193 = fadd float %63, %189, !dbg !54
  %194 = fadd float %64, %190, !dbg !54
  %195 = fadd float %65, %191, !dbg !54
  %196 = fadd float %66, %192, !dbg !54
  br label %._crit_edge, !dbg !44

._crit_edge:                                      ; preds = %58, %168
  %197 = phi float [ %193, %168 ], [ 0.000000e+00, %58 ], !dbg !47
  %198 = phi float [ %194, %168 ], [ 0.000000e+00, %58 ], !dbg !47
  %199 = phi float [ %195, %168 ], [ 0.000000e+00, %58 ], !dbg !47
  %200 = phi float [ %196, %168 ], [ 0.000000e+00, %58 ], !dbg !47
  %.pn20 = phi float [ %181, %168 ], [ %163, %58 ]
  %.pn18 = phi float [ %182, %168 ], [ %164, %58 ]
  %.pn16 = phi float [ %183, %168 ], [ %165, %58 ]
  %.pn14 = phi float [ %184, %168 ], [ %166, %58 ]
  %201 = phi float [ %173, %168 ], [ 1.000000e+00, %58 ], !dbg !47
  %202 = phi float [ %174, %168 ], [ 1.000000e+00, %58 ], !dbg !47
  %203 = phi float [ %175, %168 ], [ 1.000000e+00, %58 ], !dbg !47
  %204 = phi float [ %176, %168 ], [ 1.000000e+00, %58 ], !dbg !47
  %205 = select i1 %19, float %.pn20, float %67, !dbg !55
  %206 = select i1 %19, float %.pn18, float %68, !dbg !55
  %207 = select i1 %19, float %.pn16, float %69, !dbg !55
  %208 = select i1 %19, float %.pn14, float %70, !dbg !55
  %209 = select i1 %19, float %197, float %63, !dbg !56
  %210 = select i1 %19, float %198, float %64, !dbg !56
  %211 = select i1 %19, float %199, float %65, !dbg !56
  %212 = select i1 %19, float %200, float %66, !dbg !56
  %213 = select i1 %19, float %201, float %59, !dbg !57
  %214 = select i1 %19, float %202, float %60, !dbg !57
  %215 = select i1 %19, float %203, float %61, !dbg !57
  %216 = select i1 %19, float %204, float %62, !dbg !57
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %217 = bitcast float %163 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %217, i1 true) #3, !dbg !59
  %218 = bitcast float %164 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %218, i1 true) #3, !dbg !59
  %219 = bitcast float %165 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %219, i1 true) #3, !dbg !59
  %220 = bitcast float %166 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %220, i1 true) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %.extract = load i32, ptr addrspace(3) %53, align 16, !dbg !59
  %.extract24 = load i32, ptr addrspace(3) %55, align 4, !dbg !59
  %.extract25 = load i32, ptr addrspace(3) %56, align 8, !dbg !59
  %.extract26 = load i32, ptr addrspace(3) %57, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %gep, i1 %20) #3, !dbg !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !25
  %221 = icmp samesign ult i64 %indvars.iv, 8184, !dbg !25
  br i1 %221, label %58, label %222, !dbg !25

222:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %223 = fsub float %206, %205, !dbg !62
  %224 = fadd float %213, %214, !dbg !64
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !65
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %224) #3, !dbg !66
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !67
  %228 = fmul float %223, %227, !dbg !68
  %229 = fadd float %205, %228, !dbg !69
  %230 = fadd float %209, %210, !dbg !70
  %231 = fmul float %223, %223, !dbg !71
  %232 = fmul float %231, %213, !dbg !72
  %233 = fmul float %232, %227, !dbg !73
  %234 = fadd float %230, %233, !dbg !74
  %235 = fsub float %207, %229, !dbg !62
  %236 = fadd float %215, %224, !dbg !64
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !65
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float %236) #3, !dbg !66
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !67
  %240 = fmul float %239, %235, !dbg !68
  %241 = fadd float %229, %240, !dbg !69
  %242 = fadd float %211, %234, !dbg !70
  %243 = fmul float %235, %235, !dbg !71
  %244 = fmul float %224, %243, !dbg !72
  %245 = fmul float %239, %244, !dbg !73
  %246 = fadd float %242, %245, !dbg !74
  %247 = fsub float %208, %241, !dbg !62
  %248 = fadd float %216, %236, !dbg !64
  %249 = fcmp oeq float %248, 0.000000e+00, !dbg !65
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float %248) #3, !dbg !66
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !67
  %252 = fmul float %251, %247, !dbg !68
  %253 = fadd float %241, %252, !dbg !69
  %254 = fadd float %212, %246, !dbg !70
  %255 = fmul float %247, %247, !dbg !71
  %256 = fmul float %236, %255, !dbg !72
  %257 = fmul float %251, %256, !dbg !73
  %258 = fadd float %254, %257, !dbg !74
  %259 = lshr i32 %12, 6, !dbg !60
  %260 = and i32 %259, 1, !dbg !60
  %261 = shl nuw nsw i32 %13, 1, !dbg !60
  %262 = or disjoint i32 %261, %260, !dbg !60
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !60
  %264 = bitcast float %253 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #3, !dbg !60
  %265 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %262, !dbg !60
  %266 = bitcast float %258 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #3, !dbg !60
  %267 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %262, !dbg !60
  %268 = bitcast float %248 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %269 = icmp slt i32 %12, 128, !dbg !60
  %270 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !60
  %271 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %270, i1 %269) #3, !dbg !60
  %272 = bitcast i32 %271 to float, !dbg !60
  %273 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %12, !dbg !60
  %274 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %273, i1 %269) #3, !dbg !60
  %275 = bitcast i32 %274 to float, !dbg !60
  %276 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %12, !dbg !60
  %277 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %276, i1 %269) #3, !dbg !60
  %278 = bitcast i32 %277 to float, !dbg !60
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 1, i32 31), !dbg !60
  %280 = bitcast i32 %279 to float, !dbg !60
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 1, i32 31), !dbg !60
  %282 = bitcast i32 %281 to float, !dbg !60
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 1, i32 31), !dbg !60
  %284 = bitcast i32 %283 to float, !dbg !60
  %285 = fsub float %280, %272, !dbg !62
  %286 = fadd float %278, %284, !dbg !64
  %287 = fcmp oeq float %286, 0.000000e+00, !dbg !65
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float %286) #3, !dbg !66
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !67
  %290 = fmul float %285, %289, !dbg !68
  %291 = fadd float %290, %272, !dbg !69
  %292 = fadd float %275, %282, !dbg !70
  %293 = fmul float %285, %285, !dbg !71
  %294 = fmul float %293, %278, !dbg !72
  %295 = fmul float %294, %289, !dbg !73
  %296 = fadd float %292, %295, !dbg !74
  %297 = and i32 %12, 1, !dbg !60
  %298 = icmp eq i32 %297, 0, !dbg !60
  %299 = and i1 %269, %298, !dbg !60
  %300 = bitcast float %291 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %300, i1 %299) #3, !dbg !60
  %301 = bitcast float %296 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %301, i1 %299) #3, !dbg !60
  %302 = bitcast float %286 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %302, i1 %299) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !60
  %304 = load i32, ptr addrspace(3) %303, align 8, !dbg !60
  %305 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %261, !dbg !60
  %306 = load i32, ptr addrspace(3) %305, align 8, !dbg !60
  %307 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %261, !dbg !60
  %308 = load i32, ptr addrspace(3) %307, align 8, !dbg !60
  %309 = sext i32 %17 to i64, !dbg !75
  %310 = getelementptr float, ptr addrspace(1) %4, i64 %309, !dbg !75
  %311 = icmp eq i32 %260, 0, !dbg !76
  %312 = and i1 %311, %19, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %304, ptr addrspace(1) %310, i1 %312) #3, !dbg !76
  %313 = getelementptr float, ptr addrspace(1) %5, i64 %309, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %306, ptr addrspace(1) %313, i1 %312) #3, !dbg !78
  %314 = getelementptr float, ptr addrspace(1) %6, i64 %309, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %308, ptr addrspace(1) %314, i1 %312) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmcwq5454sc4cy26h22jxv63jeve26ii2nsznlktuvwx74oxdjtk.py", directory: "inductor_cache/mc")
!4 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_34, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_convolution_native_group_norm_34", linkageName: "triton_red_fused__unsafe_index_convolution_native_group_norm_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 26, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 41, column: 41, scope: !7)
!22 = !DILocation(line: 54, column: 69, scope: !7)
!23 = !DILocation(line: 54, column: 64, scope: !7)
!24 = !DILocation(line: 63, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 23, scope: !7)
!27 = !DILocation(line: 38, column: 25, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 39, column: 23, scope: !7)
!30 = !DILocation(line: 41, column: 39, scope: !7)
!31 = !DILocation(line: 41, column: 34, scope: !7)
!32 = !DILocation(line: 41, column: 46, scope: !7)
!33 = !DILocation(line: 42, column: 34, scope: !7)
!34 = !DILocation(line: 42, column: 39, scope: !7)
!35 = !DILocation(line: 43, column: 34, scope: !7)
!36 = !DILocation(line: 43, column: 39, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 50, column: 36, scope: !7)
!39 = !DILocation(line: 53, column: 39, scope: !7)
!40 = !DILocation(line: 54, column: 35, scope: !7)
!41 = !DILocation(line: 54, column: 74, scope: !7)
!42 = !DILocation(line: 55, column: 24, scope: !7)
!43 = !DILocation(line: 58, column: 66, scope: !7)
!44 = !DILocation(line: 178, column: 7, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 58, column: 55, scope: !7)
!48 = !DILocation(line: 183, column: 24, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 184, column: 30, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 185, column: 34, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 185, column: 26, scope: !45, inlinedAt: !47)
!52 = !DILocation(line: 186, column: 39, scope: !45, inlinedAt: !47)
!53 = !DILocation(line: 186, column: 31, scope: !45, inlinedAt: !47)
!54 = !DILocation(line: 186, column: 22, scope: !45, inlinedAt: !47)
!55 = !DILocation(line: 60, column: 62, scope: !7)
!56 = !DILocation(line: 61, column: 58, scope: !7)
!57 = !DILocation(line: 62, column: 66, scope: !7)
!58 = !DILocation(line: 63, column: 29, scope: !7)
!59 = !DILocation(line: 63, column: 51, scope: !7)
!60 = !DILocation(line: 204, column: 46, scope: !45, inlinedAt: !61)
!61 = !DILocation(line: 65, column: 44, scope: !7)
!62 = !DILocation(line: 192, column: 21, scope: !63, inlinedAt: !61)
!63 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!64 = !DILocation(line: 193, column: 28, scope: !63, inlinedAt: !61)
!65 = !DILocation(line: 194, column: 39, scope: !63, inlinedAt: !61)
!66 = !DILocation(line: 194, column: 60, scope: !63, inlinedAt: !61)
!67 = !DILocation(line: 194, column: 49, scope: !63, inlinedAt: !61)
!68 = !DILocation(line: 196, column: 25, scope: !63, inlinedAt: !61)
!69 = !DILocation(line: 196, column: 17, scope: !63, inlinedAt: !61)
!70 = !DILocation(line: 197, column: 15, scope: !63, inlinedAt: !61)
!71 = !DILocation(line: 197, column: 30, scope: !63, inlinedAt: !61)
!72 = !DILocation(line: 197, column: 38, scope: !63, inlinedAt: !61)
!73 = !DILocation(line: 197, column: 49, scope: !63, inlinedAt: !61)
!74 = !DILocation(line: 197, column: 22, scope: !63, inlinedAt: !61)
!75 = !DILocation(line: 70, column: 25, scope: !7)
!76 = !DILocation(line: 70, column: 37, scope: !7)
!77 = !DILocation(line: 71, column: 25, scope: !7)
!78 = !DILocation(line: 71, column: 37, scope: !7)
!79 = !DILocation(line: 72, column: 25, scope: !7)
!80 = !DILocation(line: 72, column: 37, scope: !7)
!81 = !DILocation(line: 72, column: 4, scope: !7)
