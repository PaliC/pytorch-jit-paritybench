; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_threshold_backward_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, i32 %27, i32 %28) local_unnamed_addr !dbg !7 {
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %31 = shl i32 %30, 4, !dbg !11
  %32 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %33 = shl i32 %32, 2, !dbg !12
  %34 = and i32 %33, 12, !dbg !12
  %35 = or disjoint i32 %31, %34, !dbg !13
  %36 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %37 = shl i32 %36, 5, !dbg !15
  %38 = lshr i32 %32, 2, !dbg !16
  %39 = and i32 %38, 31, !dbg !16
  %40 = or disjoint i32 %37, %39, !dbg !17
  %41 = icmp slt i32 %40, 25, !dbg !18
  %.frozen = freeze i32 %35, !dbg !19
  %42 = sdiv i32 %.frozen, 512, !dbg !19
  %43 = mul i32 %42, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %43, !dbg !20
  %44 = shl i32 %40, 9, !dbg !21
  %45 = add i32 %44, %.decomposed, !dbg !22
  %46 = mul i32 %42, 12800, !dbg !23
  %47 = add i32 %45, %46, !dbg !24
  %48 = sext i32 %47 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %21, i64 %48, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %41) #4, !dbg !26
  %51 = sext i32 %.decomposed to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %22, i64 %51, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %23, i64 %51, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #4, !dbg !30
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !30
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !30
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !30
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !30
  %60 = bitcast i32 %56 to float, !dbg !30
  %61 = bitcast i32 %57 to float, !dbg !30
  %62 = bitcast i32 %58 to float, !dbg !30
  %63 = bitcast i32 %59 to float, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %24, i64 %51, !dbg !31
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !32
  %66 = getelementptr float, ptr addrspace(1) %25, i64 %51, !dbg !33
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !34
  %68 = icmp slt i32 %.decomposed, 128, !dbg !35
  %69 = shl i32 %40, 7, !dbg !36
  %70 = mul i32 %42, 3200, !dbg !37
  %71 = add i32 %70, %.decomposed, !dbg !38
  %72 = add i32 %71, %69, !dbg !39
  %73 = sext i32 %72 to i64, !dbg !40
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !40
  %75 = and i1 %68, %41, !dbg !41
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !42
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !43
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %77, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !44
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !45
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !46
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !46
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !46
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !46
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !46
  %85 = bitcast i32 %81 to float, !dbg !46
  %86 = bitcast i32 %82 to float, !dbg !46
  %87 = bitcast i32 %83 to float, !dbg !46
  %88 = bitcast i32 %84 to float, !dbg !46
  %89 = fadd float %85, 0x3EE4F8B580000000, !dbg !47
  %90 = fadd float %86, 0x3EE4F8B580000000, !dbg !47
  %91 = fadd float %87, 0x3EE4F8B580000000, !dbg !47
  %92 = fadd float %88, 0x3EE4F8B580000000, !dbg !47
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i = icmp eq i32 %93, 0, !dbg !48
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !48
  %.not1.i = icmp eq i32 %94, 0, !dbg !48
  br i1 %.not.i, label %100, label %95, !dbg !48

95:                                               ; preds = %29
  br i1 %.not1.i, label %98, label %96, !dbg !48

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #4, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #4, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

100:                                              ; preds = %29
  br i1 %.not1.i, label %103, label %101, !dbg !48

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #4, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #4, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

__nv_sqrtf.exit:                                  ; preds = %96, %98, %101, %103
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !48
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i4 = icmp eq i32 %105, 0, !dbg !48
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !48
  %.not1.i7 = icmp eq i32 %106, 0, !dbg !48
  br i1 %.not.i4, label %112, label %107, !dbg !48

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %110, label %108, !dbg !48

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #4, !dbg !48
  br label %__nv_sqrtf.exit8, !dbg !48

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #4, !dbg !48
  br label %__nv_sqrtf.exit8, !dbg !48

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %115, label %113, !dbg !48

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #4, !dbg !48
  br label %__nv_sqrtf.exit8, !dbg !48

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #4, !dbg !48
  br label %__nv_sqrtf.exit8, !dbg !48

__nv_sqrtf.exit8:                                 ; preds = %108, %110, %113, %115
  %.0.i6 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !48
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i9 = icmp eq i32 %117, 0, !dbg !48
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !48
  %.not1.i12 = icmp eq i32 %118, 0, !dbg !48
  br i1 %.not.i9, label %124, label %119, !dbg !48

119:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %122, label %120, !dbg !48

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #4, !dbg !48
  br label %__nv_sqrtf.exit13, !dbg !48

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #4, !dbg !48
  br label %__nv_sqrtf.exit13, !dbg !48

124:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %127, label %125, !dbg !48

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #4, !dbg !48
  br label %__nv_sqrtf.exit13, !dbg !48

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #4, !dbg !48
  br label %__nv_sqrtf.exit13, !dbg !48

__nv_sqrtf.exit13:                                ; preds = %120, %122, %125, %127
  %.0.i11 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !48
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !48
  %.not.i14 = icmp eq i32 %129, 0, !dbg !48
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !48
  %.not1.i17 = icmp eq i32 %130, 0, !dbg !48
  br i1 %.not.i14, label %136, label %131, !dbg !48

131:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %134, label %132, !dbg !48

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #4, !dbg !48
  br label %__nv_sqrtf.exit18, !dbg !48

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #4, !dbg !48
  br label %__nv_sqrtf.exit18, !dbg !48

136:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %139, label %137, !dbg !48

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #4, !dbg !48
  br label %__nv_sqrtf.exit18, !dbg !48

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #4, !dbg !48
  br label %__nv_sqrtf.exit18, !dbg !48

__nv_sqrtf.exit18:                                ; preds = %132, %134, %137, %139
  %.0.i16 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !48
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !49
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !49
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !49
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !49
  %145 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !50
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %145, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !51
  %147 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !52
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %147, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #4, !dbg !53
  %149 = add nsw i32 %.decomposed, -128, !dbg !54
  %150 = icmp ult i32 %149, 256, !dbg !54
  %151 = shl i32 %40, 8, !dbg !55
  %152 = mul i32 %42, 6400, !dbg !56
  %153 = add i32 %151, %152, !dbg !57
  %154 = add i32 %153, %149, !dbg !58
  %155 = sext i32 %154 to i64, !dbg !59
  %156 = getelementptr float, ptr addrspace(1) %6, i64 %155, !dbg !59
  %157 = and i1 %41, %150, !dbg !60
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %156, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #4, !dbg !61
  %159 = sext i32 %149 to i64, !dbg !62
  %160 = getelementptr float, ptr addrspace(1) %7, i64 %159, !dbg !62
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #4, !dbg !63
  %162 = getelementptr float, ptr addrspace(1) %8, i64 %159, !dbg !64
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %162, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #4, !dbg !65
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !65
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !65
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !65
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !65
  %168 = bitcast i32 %164 to float, !dbg !65
  %169 = bitcast i32 %165 to float, !dbg !65
  %170 = bitcast i32 %166 to float, !dbg !65
  %171 = bitcast i32 %167 to float, !dbg !65
  %172 = fadd float %168, 0x3EE4F8B580000000, !dbg !66
  %173 = fadd float %169, 0x3EE4F8B580000000, !dbg !66
  %174 = fadd float %170, 0x3EE4F8B580000000, !dbg !66
  %175 = fadd float %171, 0x3EE4F8B580000000, !dbg !66
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !67
  %.not.i19 = icmp eq i32 %176, 0, !dbg !67
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !67
  %.not1.i22 = icmp eq i32 %177, 0, !dbg !67
  br i1 %.not.i19, label %183, label %178, !dbg !67

178:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %181, label %179, !dbg !67

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #4, !dbg !67
  br label %__nv_sqrtf.exit23, !dbg !67

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #4, !dbg !67
  br label %__nv_sqrtf.exit23, !dbg !67

183:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %186, label %184, !dbg !67

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #4, !dbg !67
  br label %__nv_sqrtf.exit23, !dbg !67

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #4, !dbg !67
  br label %__nv_sqrtf.exit23, !dbg !67

__nv_sqrtf.exit23:                                ; preds = %179, %181, %184, %186
  %.0.i21 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !67
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !67
  %.not.i24 = icmp eq i32 %188, 0, !dbg !67
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !67
  %.not1.i27 = icmp eq i32 %189, 0, !dbg !67
  br i1 %.not.i24, label %195, label %190, !dbg !67

190:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %193, label %191, !dbg !67

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #4, !dbg !67
  br label %__nv_sqrtf.exit28, !dbg !67

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #4, !dbg !67
  br label %__nv_sqrtf.exit28, !dbg !67

195:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %198, label %196, !dbg !67

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #4, !dbg !67
  br label %__nv_sqrtf.exit28, !dbg !67

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #4, !dbg !67
  br label %__nv_sqrtf.exit28, !dbg !67

__nv_sqrtf.exit28:                                ; preds = %191, %193, %196, %198
  %.0.i26 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !67
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !67
  %.not.i29 = icmp eq i32 %200, 0, !dbg !67
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !67
  %.not1.i32 = icmp eq i32 %201, 0, !dbg !67
  br i1 %.not.i29, label %207, label %202, !dbg !67

202:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %205, label %203, !dbg !67

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #4, !dbg !67
  br label %__nv_sqrtf.exit33, !dbg !67

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #4, !dbg !67
  br label %__nv_sqrtf.exit33, !dbg !67

207:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %210, label %208, !dbg !67

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #4, !dbg !67
  br label %__nv_sqrtf.exit33, !dbg !67

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #4, !dbg !67
  br label %__nv_sqrtf.exit33, !dbg !67

__nv_sqrtf.exit33:                                ; preds = %203, %205, %208, %210
  %.0.i31 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !67
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !67
  %.not.i34 = icmp eq i32 %212, 0, !dbg !67
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !67
  %.not1.i37 = icmp eq i32 %213, 0, !dbg !67
  br i1 %.not.i34, label %219, label %214, !dbg !67

214:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %217, label %215, !dbg !67

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #4, !dbg !67
  br label %__nv_sqrtf.exit38, !dbg !67

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #4, !dbg !67
  br label %__nv_sqrtf.exit38, !dbg !67

219:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %222, label %220, !dbg !67

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #4, !dbg !67
  br label %__nv_sqrtf.exit38, !dbg !67

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #4, !dbg !67
  br label %__nv_sqrtf.exit38, !dbg !67

__nv_sqrtf.exit38:                                ; preds = %215, %217, %220, %222
  %.0.i36 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !67
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #4, !dbg !68
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #4, !dbg !68
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #4, !dbg !68
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #4, !dbg !68
  %228 = getelementptr float, ptr addrspace(1) %9, i64 %159, !dbg !69
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %228, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #4, !dbg !70
  %230 = getelementptr float, ptr addrspace(1) %10, i64 %159, !dbg !71
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %230, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #4, !dbg !72
  %232 = and i32 %.decomposed, -64, !dbg !73
  %233 = icmp eq i32 %232, 384, !dbg !73
  %234 = shl i32 %40, 6, !dbg !74
  %235 = mul i32 %42, 1600, !dbg !75
  %236 = add i32 %234, %235, !dbg !76
  %237 = add nsw i32 %.decomposed, -384, !dbg !77
  %238 = add i32 %236, %237, !dbg !78
  %239 = sext i32 %238 to i64, !dbg !79
  %240 = getelementptr float, ptr addrspace(1) %11, i64 %239, !dbg !79
  %241 = and i1 %41, %233, !dbg !80
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %240, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241) #4, !dbg !81
  %243 = sext i32 %237 to i64, !dbg !82
  %244 = getelementptr float, ptr addrspace(1) %12, i64 %243, !dbg !82
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %244, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241) #4, !dbg !83
  %246 = getelementptr float, ptr addrspace(1) %13, i64 %243, !dbg !84
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %246, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241) #4, !dbg !85
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !85
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !85
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !85
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !85
  %252 = bitcast i32 %248 to float, !dbg !85
  %253 = bitcast i32 %249 to float, !dbg !85
  %254 = bitcast i32 %250 to float, !dbg !85
  %255 = bitcast i32 %251 to float, !dbg !85
  %256 = fadd float %252, 0x3EE4F8B580000000, !dbg !86
  %257 = fadd float %253, 0x3EE4F8B580000000, !dbg !86
  %258 = fadd float %254, 0x3EE4F8B580000000, !dbg !86
  %259 = fadd float %255, 0x3EE4F8B580000000, !dbg !86
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not.i39 = icmp eq i32 %260, 0, !dbg !87
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !87
  %.not1.i42 = icmp eq i32 %261, 0, !dbg !87
  br i1 %.not.i39, label %267, label %262, !dbg !87

262:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %265, label %263, !dbg !87

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %256) #4, !dbg !87
  br label %__nv_sqrtf.exit43, !dbg !87

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %256) #4, !dbg !87
  br label %__nv_sqrtf.exit43, !dbg !87

267:                                              ; preds = %__nv_sqrtf.exit38
  br i1 %.not1.i42, label %270, label %268, !dbg !87

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.f(float %256) #4, !dbg !87
  br label %__nv_sqrtf.exit43, !dbg !87

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.f(float %256) #4, !dbg !87
  br label %__nv_sqrtf.exit43, !dbg !87

__nv_sqrtf.exit43:                                ; preds = %263, %265, %268, %270
  %.0.i41 = phi float [ %264, %263 ], [ %266, %265 ], [ %269, %268 ], [ %271, %270 ], !dbg !87
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not.i44 = icmp eq i32 %272, 0, !dbg !87
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !87
  %.not1.i47 = icmp eq i32 %273, 0, !dbg !87
  br i1 %.not.i44, label %279, label %274, !dbg !87

274:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %277, label %275, !dbg !87

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %257) #4, !dbg !87
  br label %__nv_sqrtf.exit48, !dbg !87

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %257) #4, !dbg !87
  br label %__nv_sqrtf.exit48, !dbg !87

279:                                              ; preds = %__nv_sqrtf.exit43
  br i1 %.not1.i47, label %282, label %280, !dbg !87

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.f(float %257) #4, !dbg !87
  br label %__nv_sqrtf.exit48, !dbg !87

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.f(float %257) #4, !dbg !87
  br label %__nv_sqrtf.exit48, !dbg !87

__nv_sqrtf.exit48:                                ; preds = %275, %277, %280, %282
  %.0.i46 = phi float [ %276, %275 ], [ %278, %277 ], [ %281, %280 ], [ %283, %282 ], !dbg !87
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not.i49 = icmp eq i32 %284, 0, !dbg !87
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !87
  %.not1.i52 = icmp eq i32 %285, 0, !dbg !87
  br i1 %.not.i49, label %291, label %286, !dbg !87

286:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %289, label %287, !dbg !87

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %258) #4, !dbg !87
  br label %__nv_sqrtf.exit53, !dbg !87

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %258) #4, !dbg !87
  br label %__nv_sqrtf.exit53, !dbg !87

291:                                              ; preds = %__nv_sqrtf.exit48
  br i1 %.not1.i52, label %294, label %292, !dbg !87

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.f(float %258) #4, !dbg !87
  br label %__nv_sqrtf.exit53, !dbg !87

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.f(float %258) #4, !dbg !87
  br label %__nv_sqrtf.exit53, !dbg !87

__nv_sqrtf.exit53:                                ; preds = %287, %289, %292, %294
  %.0.i51 = phi float [ %288, %287 ], [ %290, %289 ], [ %293, %292 ], [ %295, %294 ], !dbg !87
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not.i54 = icmp eq i32 %296, 0, !dbg !87
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !87
  %.not1.i57 = icmp eq i32 %297, 0, !dbg !87
  br i1 %.not.i54, label %303, label %298, !dbg !87

298:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %301, label %299, !dbg !87

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %259) #4, !dbg !87
  br label %__nv_sqrtf.exit58, !dbg !87

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %259) #4, !dbg !87
  br label %__nv_sqrtf.exit58, !dbg !87

303:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %306, label %304, !dbg !87

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.f(float %259) #4, !dbg !87
  br label %__nv_sqrtf.exit58, !dbg !87

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.f(float %259) #4, !dbg !87
  br label %__nv_sqrtf.exit58, !dbg !87

__nv_sqrtf.exit58:                                ; preds = %299, %301, %304, %306
  %.0.i56 = phi float [ %300, %299 ], [ %302, %301 ], [ %305, %304 ], [ %307, %306 ], !dbg !87
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #4, !dbg !88
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i46) #4, !dbg !88
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i51) #4, !dbg !88
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i56) #4, !dbg !88
  %312 = getelementptr float, ptr addrspace(1) %14, i64 %243, !dbg !89
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %312, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241) #4, !dbg !90
  %314 = getelementptr float, ptr addrspace(1) %15, i64 %243, !dbg !91
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %314, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241, i32 0, i1 %241) #4, !dbg !92
  %316 = icmp sgt i32 %.decomposed, 447, !dbg !93
  %317 = add nsw i32 %.decomposed, -448, !dbg !94
  %318 = add i32 %236, %317, !dbg !95
  %319 = sext i32 %318 to i64, !dbg !96
  %320 = getelementptr float, ptr addrspace(1) %16, i64 %319, !dbg !96
  %321 = and i1 %316, %41, !dbg !97
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %320, i1 %321, i32 0, i1 %321, i32 0, i1 %321, i32 0, i1 %321, i32 0, i1 %321) #4, !dbg !98
  %323 = sext i32 %317 to i64, !dbg !99
  %324 = getelementptr float, ptr addrspace(1) %17, i64 %323, !dbg !99
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %324, i1 %321, i32 0, i1 %321, i32 0, i1 %321, i32 0, i1 %321, i32 0, i1 %321) #4, !dbg !100
  %326 = getelementptr float, ptr addrspace(1) %18, i64 %323, !dbg !101
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %326, i1 %321, i32 0, i1 %321, i32 0, i1 %321, i32 0, i1 %321, i32 0, i1 %321) #4, !dbg !102
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !102
  %329 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !102
  %330 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !102
  %331 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !102
  %332 = bitcast i32 %328 to float, !dbg !102
  %333 = bitcast i32 %329 to float, !dbg !102
  %334 = bitcast i32 %330 to float, !dbg !102
  %335 = bitcast i32 %331 to float, !dbg !102
  %336 = fadd float %332, 0x3EE4F8B580000000, !dbg !103
  %337 = fadd float %333, 0x3EE4F8B580000000, !dbg !103
  %338 = fadd float %334, 0x3EE4F8B580000000, !dbg !103
  %339 = fadd float %335, 0x3EE4F8B580000000, !dbg !103
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !104
  %.not.i59 = icmp eq i32 %340, 0, !dbg !104
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !104
  %.not1.i62 = icmp eq i32 %341, 0, !dbg !104
  br i1 %.not.i59, label %347, label %342, !dbg !104

342:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %345, label %343, !dbg !104

343:                                              ; preds = %342
  %344 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %336) #4, !dbg !104
  br label %__nv_sqrtf.exit63, !dbg !104

345:                                              ; preds = %342
  %346 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %336) #4, !dbg !104
  br label %__nv_sqrtf.exit63, !dbg !104

347:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %350, label %348, !dbg !104

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.f(float %336) #4, !dbg !104
  br label %__nv_sqrtf.exit63, !dbg !104

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.f(float %336) #4, !dbg !104
  br label %__nv_sqrtf.exit63, !dbg !104

__nv_sqrtf.exit63:                                ; preds = %343, %345, %348, %350
  %.0.i61 = phi float [ %344, %343 ], [ %346, %345 ], [ %349, %348 ], [ %351, %350 ], !dbg !104
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !104
  %.not.i64 = icmp eq i32 %352, 0, !dbg !104
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !104
  %.not1.i67 = icmp eq i32 %353, 0, !dbg !104
  br i1 %.not.i64, label %359, label %354, !dbg !104

354:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %357, label %355, !dbg !104

355:                                              ; preds = %354
  %356 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %337) #4, !dbg !104
  br label %__nv_sqrtf.exit68, !dbg !104

357:                                              ; preds = %354
  %358 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %337) #4, !dbg !104
  br label %__nv_sqrtf.exit68, !dbg !104

359:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %362, label %360, !dbg !104

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.f(float %337) #4, !dbg !104
  br label %__nv_sqrtf.exit68, !dbg !104

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.f(float %337) #4, !dbg !104
  br label %__nv_sqrtf.exit68, !dbg !104

__nv_sqrtf.exit68:                                ; preds = %355, %357, %360, %362
  %.0.i66 = phi float [ %356, %355 ], [ %358, %357 ], [ %361, %360 ], [ %363, %362 ], !dbg !104
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !104
  %.not.i69 = icmp eq i32 %364, 0, !dbg !104
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !104
  %.not1.i72 = icmp eq i32 %365, 0, !dbg !104
  br i1 %.not.i69, label %371, label %366, !dbg !104

366:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %369, label %367, !dbg !104

367:                                              ; preds = %366
  %368 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %338) #4, !dbg !104
  br label %__nv_sqrtf.exit73, !dbg !104

369:                                              ; preds = %366
  %370 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %338) #4, !dbg !104
  br label %__nv_sqrtf.exit73, !dbg !104

371:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %374, label %372, !dbg !104

372:                                              ; preds = %371
  %373 = tail call float @llvm.nvvm.sqrt.rn.f(float %338) #4, !dbg !104
  br label %__nv_sqrtf.exit73, !dbg !104

374:                                              ; preds = %371
  %375 = tail call float @llvm.nvvm.sqrt.approx.f(float %338) #4, !dbg !104
  br label %__nv_sqrtf.exit73, !dbg !104

__nv_sqrtf.exit73:                                ; preds = %367, %369, %372, %374
  %.0.i71 = phi float [ %368, %367 ], [ %370, %369 ], [ %373, %372 ], [ %375, %374 ], !dbg !104
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !104
  %.not.i74 = icmp eq i32 %376, 0, !dbg !104
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !104
  %.not1.i77 = icmp eq i32 %377, 0, !dbg !104
  br i1 %.not.i74, label %383, label %378, !dbg !104

378:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %381, label %379, !dbg !104

379:                                              ; preds = %378
  %380 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %339) #4, !dbg !104
  br label %__nv_sqrtf.exit78, !dbg !104

381:                                              ; preds = %378
  %382 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %339) #4, !dbg !104
  br label %__nv_sqrtf.exit78, !dbg !104

383:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %386, label %384, !dbg !104

384:                                              ; preds = %383
  %385 = tail call float @llvm.nvvm.sqrt.rn.f(float %339) #4, !dbg !104
  br label %__nv_sqrtf.exit78, !dbg !104

386:                                              ; preds = %383
  %387 = tail call float @llvm.nvvm.sqrt.approx.f(float %339) #4, !dbg !104
  br label %__nv_sqrtf.exit78, !dbg !104

__nv_sqrtf.exit78:                                ; preds = %379, %381, %384, %386
  %.0.i76 = phi float [ %380, %379 ], [ %382, %381 ], [ %385, %384 ], [ %387, %386 ], !dbg !104
  %388 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i61) #4, !dbg !105
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i66) #4, !dbg !105
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i71) #4, !dbg !105
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i76) #4, !dbg !105
  %392 = getelementptr float, ptr addrspace(1) %19, i64 %323, !dbg !106
  %393 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %392, i1 %321, i32 0, i1 %321, i32 0, i1 %321, i32 0, i1 %321, i32 0, i1 %321) #4, !dbg !107
  %394 = getelementptr float, ptr addrspace(1) %20, i64 %323, !dbg !108
  %395 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %394, i1 %321, i32 0, i1 %321, i32 0, i1 %321, i32 0, i1 %321, i32 0, i1 %321) #4, !dbg !109
  %396 = fadd float %60, 0x3EE4F8B580000000, !dbg !110
  %397 = fadd float %61, 0x3EE4F8B580000000, !dbg !110
  %398 = fadd float %62, 0x3EE4F8B580000000, !dbg !110
  %399 = fadd float %63, 0x3EE4F8B580000000, !dbg !110
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !111
  %.not.i79 = icmp eq i32 %400, 0, !dbg !111
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !111
  %.not1.i82 = icmp eq i32 %401, 0, !dbg !111
  br i1 %.not.i79, label %407, label %402, !dbg !111

402:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %405, label %403, !dbg !111

403:                                              ; preds = %402
  %404 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %396) #4, !dbg !111
  br label %__nv_sqrtf.exit83, !dbg !111

405:                                              ; preds = %402
  %406 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %396) #4, !dbg !111
  br label %__nv_sqrtf.exit83, !dbg !111

407:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %410, label %408, !dbg !111

408:                                              ; preds = %407
  %409 = tail call float @llvm.nvvm.sqrt.rn.f(float %396) #4, !dbg !111
  br label %__nv_sqrtf.exit83, !dbg !111

410:                                              ; preds = %407
  %411 = tail call float @llvm.nvvm.sqrt.approx.f(float %396) #4, !dbg !111
  br label %__nv_sqrtf.exit83, !dbg !111

__nv_sqrtf.exit83:                                ; preds = %403, %405, %408, %410
  %.0.i81 = phi float [ %404, %403 ], [ %406, %405 ], [ %409, %408 ], [ %411, %410 ], !dbg !111
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !111
  %.not.i84 = icmp eq i32 %412, 0, !dbg !111
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !111
  %.not1.i87 = icmp eq i32 %413, 0, !dbg !111
  br i1 %.not.i84, label %419, label %414, !dbg !111

414:                                              ; preds = %__nv_sqrtf.exit83
  br i1 %.not1.i87, label %417, label %415, !dbg !111

415:                                              ; preds = %414
  %416 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %397) #4, !dbg !111
  br label %__nv_sqrtf.exit88, !dbg !111

417:                                              ; preds = %414
  %418 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %397) #4, !dbg !111
  br label %__nv_sqrtf.exit88, !dbg !111

419:                                              ; preds = %__nv_sqrtf.exit83
  br i1 %.not1.i87, label %422, label %420, !dbg !111

420:                                              ; preds = %419
  %421 = tail call float @llvm.nvvm.sqrt.rn.f(float %397) #4, !dbg !111
  br label %__nv_sqrtf.exit88, !dbg !111

422:                                              ; preds = %419
  %423 = tail call float @llvm.nvvm.sqrt.approx.f(float %397) #4, !dbg !111
  br label %__nv_sqrtf.exit88, !dbg !111

__nv_sqrtf.exit88:                                ; preds = %415, %417, %420, %422
  %.0.i86 = phi float [ %416, %415 ], [ %418, %417 ], [ %421, %420 ], [ %423, %422 ], !dbg !111
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !111
  %.not.i89 = icmp eq i32 %424, 0, !dbg !111
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !111
  %.not1.i92 = icmp eq i32 %425, 0, !dbg !111
  br i1 %.not.i89, label %431, label %426, !dbg !111

426:                                              ; preds = %__nv_sqrtf.exit88
  br i1 %.not1.i92, label %429, label %427, !dbg !111

427:                                              ; preds = %426
  %428 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %398) #4, !dbg !111
  br label %__nv_sqrtf.exit93, !dbg !111

429:                                              ; preds = %426
  %430 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %398) #4, !dbg !111
  br label %__nv_sqrtf.exit93, !dbg !111

431:                                              ; preds = %__nv_sqrtf.exit88
  br i1 %.not1.i92, label %434, label %432, !dbg !111

432:                                              ; preds = %431
  %433 = tail call float @llvm.nvvm.sqrt.rn.f(float %398) #4, !dbg !111
  br label %__nv_sqrtf.exit93, !dbg !111

434:                                              ; preds = %431
  %435 = tail call float @llvm.nvvm.sqrt.approx.f(float %398) #4, !dbg !111
  br label %__nv_sqrtf.exit93, !dbg !111

__nv_sqrtf.exit93:                                ; preds = %427, %429, %432, %434
  %.0.i91 = phi float [ %428, %427 ], [ %430, %429 ], [ %433, %432 ], [ %435, %434 ], !dbg !111
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !111
  %.not.i94 = icmp eq i32 %436, 0, !dbg !111
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !111
  %.not1.i97 = icmp eq i32 %437, 0, !dbg !111
  br i1 %.not.i94, label %443, label %438, !dbg !111

438:                                              ; preds = %__nv_sqrtf.exit93
  br i1 %.not1.i97, label %441, label %439, !dbg !111

439:                                              ; preds = %438
  %440 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %399) #4, !dbg !111
  br label %__nv_sqrtf.exit98, !dbg !111

441:                                              ; preds = %438
  %442 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %399) #4, !dbg !111
  br label %__nv_sqrtf.exit98, !dbg !111

443:                                              ; preds = %__nv_sqrtf.exit93
  br i1 %.not1.i97, label %446, label %444, !dbg !111

444:                                              ; preds = %443
  %445 = tail call float @llvm.nvvm.sqrt.rn.f(float %399) #4, !dbg !111
  br label %__nv_sqrtf.exit98, !dbg !111

446:                                              ; preds = %443
  %447 = tail call float @llvm.nvvm.sqrt.approx.f(float %399) #4, !dbg !111
  br label %__nv_sqrtf.exit98, !dbg !111

__nv_sqrtf.exit98:                                ; preds = %439, %441, %444, %446
  %.0.i96 = phi float [ %440, %439 ], [ %442, %441 ], [ %445, %444 ], [ %447, %446 ], !dbg !111
  %448 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %449 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %450 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %451 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %452 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %453 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %454 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %455 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %456 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !42
  %457 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !44
  %458 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !51
  %459 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !53
  %460 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !61
  %461 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !63
  %462 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !70
  %463 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !72
  %464 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !81
  %465 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !83
  %466 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !90
  %467 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !92
  %468 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !98
  %469 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !100
  %470 = extractvalue { i32, i32, i32, i32 } %393, 3, !dbg !107
  %471 = extractvalue { i32, i32, i32, i32 } %395, 3, !dbg !109
  %472 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !42
  %473 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !44
  %474 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !51
  %475 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !53
  %476 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !61
  %477 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !63
  %478 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !70
  %479 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !72
  %480 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !81
  %481 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !83
  %482 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !90
  %483 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !92
  %484 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !98
  %485 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !100
  %486 = extractvalue { i32, i32, i32, i32 } %393, 2, !dbg !107
  %487 = extractvalue { i32, i32, i32, i32 } %395, 2, !dbg !109
  %488 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !42
  %489 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !44
  %490 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !51
  %491 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !53
  %492 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !61
  %493 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !63
  %494 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !70
  %495 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !72
  %496 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !81
  %497 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !83
  %498 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !90
  %499 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !92
  %500 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !98
  %501 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !100
  %502 = extractvalue { i32, i32, i32, i32 } %393, 1, !dbg !107
  %503 = extractvalue { i32, i32, i32, i32 } %395, 1, !dbg !109
  %504 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !42
  %505 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !44
  %506 = insertelement <4 x i32> poison, i32 %504, i64 0, !dbg !42
  %507 = insertelement <4 x i32> %506, i32 %488, i64 1, !dbg !42
  %508 = insertelement <4 x i32> %507, i32 %472, i64 2, !dbg !42
  %509 = insertelement <4 x i32> %508, i32 %456, i64 3, !dbg !42
  %510 = bitcast <4 x i32> %509 to <4 x float>, !dbg !42
  %511 = insertelement <4 x i32> poison, i32 %505, i64 0, !dbg !44
  %512 = insertelement <4 x i32> %511, i32 %489, i64 1, !dbg !44
  %513 = insertelement <4 x i32> %512, i32 %473, i64 2, !dbg !44
  %514 = insertelement <4 x i32> %513, i32 %457, i64 3, !dbg !44
  %515 = bitcast <4 x i32> %514 to <4 x float>, !dbg !44
  %516 = fsub <4 x float> %510, %515, !dbg !112
  %517 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !51
  %518 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !53
  %519 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !61
  %520 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !63
  %521 = insertelement <4 x i32> poison, i32 %519, i64 0, !dbg !61
  %522 = insertelement <4 x i32> %521, i32 %492, i64 1, !dbg !61
  %523 = insertelement <4 x i32> %522, i32 %476, i64 2, !dbg !61
  %524 = insertelement <4 x i32> %523, i32 %460, i64 3, !dbg !61
  %525 = bitcast <4 x i32> %524 to <4 x float>, !dbg !61
  %526 = insertelement <4 x i32> poison, i32 %520, i64 0, !dbg !63
  %527 = insertelement <4 x i32> %526, i32 %493, i64 1, !dbg !63
  %528 = insertelement <4 x i32> %527, i32 %477, i64 2, !dbg !63
  %529 = insertelement <4 x i32> %528, i32 %461, i64 3, !dbg !63
  %530 = bitcast <4 x i32> %529 to <4 x float>, !dbg !63
  %531 = fsub <4 x float> %525, %530, !dbg !113
  %532 = insertelement <4 x float> poison, float %224, i64 0, !dbg !114
  %533 = insertelement <4 x float> %532, float %225, i64 1, !dbg !114
  %534 = insertelement <4 x float> %533, float %226, i64 2, !dbg !114
  %535 = insertelement <4 x float> %534, float %227, i64 3, !dbg !114
  %536 = fmul <4 x float> %531, %535, !dbg !114
  %537 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !70
  %538 = insertelement <4 x i32> poison, i32 %537, i64 0, !dbg !70
  %539 = insertelement <4 x i32> %538, i32 %494, i64 1, !dbg !70
  %540 = insertelement <4 x i32> %539, i32 %478, i64 2, !dbg !70
  %541 = insertelement <4 x i32> %540, i32 %462, i64 3, !dbg !70
  %542 = bitcast <4 x i32> %541 to <4 x float>, !dbg !70
  %543 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !72
  %544 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !81
  %545 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !83
  %546 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !90
  %547 = insertelement <4 x i32> poison, i32 %544, i64 0, !dbg !81
  %548 = insertelement <4 x i32> %547, i32 %496, i64 1, !dbg !81
  %549 = insertelement <4 x i32> %548, i32 %480, i64 2, !dbg !81
  %550 = insertelement <4 x i32> %549, i32 %464, i64 3, !dbg !81
  %551 = bitcast <4 x i32> %550 to <4 x float>, !dbg !81
  %552 = insertelement <4 x i32> poison, i32 %545, i64 0, !dbg !83
  %553 = insertelement <4 x i32> %552, i32 %497, i64 1, !dbg !83
  %554 = insertelement <4 x i32> %553, i32 %481, i64 2, !dbg !83
  %555 = insertelement <4 x i32> %554, i32 %465, i64 3, !dbg !83
  %556 = bitcast <4 x i32> %555 to <4 x float>, !dbg !83
  %557 = fsub <4 x float> %551, %556, !dbg !115
  %558 = insertelement <4 x float> poison, float %308, i64 0, !dbg !116
  %559 = insertelement <4 x float> %558, float %309, i64 1, !dbg !116
  %560 = insertelement <4 x float> %559, float %310, i64 2, !dbg !116
  %561 = insertelement <4 x float> %560, float %311, i64 3, !dbg !116
  %562 = fmul <4 x float> %557, %561, !dbg !116
  %563 = insertelement <4 x i32> poison, i32 %546, i64 0, !dbg !90
  %564 = insertelement <4 x i32> %563, i32 %498, i64 1, !dbg !90
  %565 = insertelement <4 x i32> %564, i32 %482, i64 2, !dbg !90
  %566 = insertelement <4 x i32> %565, i32 %466, i64 3, !dbg !90
  %567 = bitcast <4 x i32> %566 to <4 x float>, !dbg !90
  %568 = fmul <4 x float> %562, %567, !dbg !117
  %569 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !92
  %570 = insertelement <4 x i32> poison, i32 %569, i64 0, !dbg !92
  %571 = insertelement <4 x i32> %570, i32 %499, i64 1, !dbg !92
  %572 = insertelement <4 x i32> %571, i32 %483, i64 2, !dbg !92
  %573 = insertelement <4 x i32> %572, i32 %467, i64 3, !dbg !92
  %574 = bitcast <4 x i32> %573 to <4 x float>, !dbg !92
  %575 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !98
  %576 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !100
  %577 = extractvalue { i32, i32, i32, i32 } %393, 0, !dbg !107
  %578 = insertelement <4 x i32> poison, i32 %575, i64 0, !dbg !98
  %579 = insertelement <4 x i32> %578, i32 %500, i64 1, !dbg !98
  %580 = insertelement <4 x i32> %579, i32 %484, i64 2, !dbg !98
  %581 = insertelement <4 x i32> %580, i32 %468, i64 3, !dbg !98
  %582 = bitcast <4 x i32> %581 to <4 x float>, !dbg !98
  %583 = insertelement <4 x i32> poison, i32 %576, i64 0, !dbg !100
  %584 = insertelement <4 x i32> %583, i32 %501, i64 1, !dbg !100
  %585 = insertelement <4 x i32> %584, i32 %485, i64 2, !dbg !100
  %586 = insertelement <4 x i32> %585, i32 %469, i64 3, !dbg !100
  %587 = bitcast <4 x i32> %586 to <4 x float>, !dbg !100
  %588 = fsub <4 x float> %582, %587, !dbg !118
  %589 = insertelement <4 x float> poison, float %388, i64 0, !dbg !119
  %590 = insertelement <4 x float> %589, float %389, i64 1, !dbg !119
  %591 = insertelement <4 x float> %590, float %390, i64 2, !dbg !119
  %592 = insertelement <4 x float> %591, float %391, i64 3, !dbg !119
  %593 = fmul <4 x float> %588, %592, !dbg !119
  %594 = insertelement <4 x i32> poison, i32 %577, i64 0, !dbg !107
  %595 = insertelement <4 x i32> %594, i32 %502, i64 1, !dbg !107
  %596 = insertelement <4 x i32> %595, i32 %486, i64 2, !dbg !107
  %597 = insertelement <4 x i32> %596, i32 %470, i64 3, !dbg !107
  %598 = bitcast <4 x i32> %597 to <4 x float>, !dbg !107
  %599 = fmul <4 x float> %593, %598, !dbg !120
  %600 = extractvalue { i32, i32, i32, i32 } %395, 0, !dbg !109
  %601 = insertelement <4 x i32> poison, i32 %600, i64 0, !dbg !109
  %602 = insertelement <4 x i32> %601, i32 %503, i64 1, !dbg !109
  %603 = insertelement <4 x i32> %602, i32 %487, i64 2, !dbg !109
  %604 = insertelement <4 x i32> %603, i32 %471, i64 3, !dbg !109
  %605 = bitcast <4 x i32> %604 to <4 x float>, !dbg !109
  %606 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !34
  %607 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !34
  %608 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !34
  %609 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !34
  %610 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !32
  %611 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !32
  %612 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !32
  %613 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !32
  %614 = and i32 %32, 31, !dbg !16
  %615 = or disjoint i32 %37, %614, !dbg !17
  %616 = icmp slt i32 %615, 25, !dbg !18
  %.lobit1 = lshr i32 %32, 5, !dbg !12
  %617 = and i32 %.lobit1, 3, !dbg !12
  %618 = or disjoint i32 %617, 12, !dbg !12
  %619 = or disjoint i32 %31, %618, !dbg !13
  %620 = or disjoint i32 %617, 8, !dbg !12
  %621 = or disjoint i32 %31, %620, !dbg !13
  %622 = or disjoint i32 %617, 4, !dbg !12
  %623 = or disjoint i32 %31, %622, !dbg !13
  %624 = or disjoint i32 %31, %617, !dbg !13
  %625 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i81) #4, !dbg !121
  %626 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i86) #4, !dbg !121
  %627 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i91) #4, !dbg !121
  %628 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i96) #4, !dbg !121
  tail call void @llvm.nvvm.barrier0(), !dbg !122
  %629 = mul i32 %624, 25, !dbg !123
  %630 = mul i32 %623, 25, !dbg !123
  %631 = mul i32 %621, 25, !dbg !123
  %632 = mul i32 %619, 25, !dbg !123
  %633 = add i32 %615, %629, !dbg !124
  %634 = add i32 %615, %630, !dbg !124
  %635 = add i32 %615, %631, !dbg !124
  %636 = add i32 %615, %632, !dbg !124
  %637 = sext i32 %633 to i64, !dbg !125
  %638 = getelementptr float, ptr addrspace(1) %0, i64 %637, !dbg !125
  %639 = sext i32 %634 to i64, !dbg !125
  %640 = getelementptr float, ptr addrspace(1) %0, i64 %639, !dbg !125
  %641 = sext i32 %635 to i64, !dbg !125
  %642 = getelementptr float, ptr addrspace(1) %0, i64 %641, !dbg !125
  %643 = sext i32 %636 to i64, !dbg !125
  %644 = getelementptr float, ptr addrspace(1) %0, i64 %643, !dbg !125
  %645 = shl i32 %32, 7, !dbg !126
  %646 = and i32 %645, 384, !dbg !126
  %647 = or disjoint i32 %646, %39, !dbg !126
  %648 = and i32 %32, 127, !dbg !126
  %649 = lshr exact i32 %646, 3, !dbg !126
  %650 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %649, !dbg !126
  %651 = getelementptr float, ptr addrspace(3) %650, i32 %647, !dbg !126
  %652 = or disjoint i32 %647, 32, !dbg !126
  %653 = lshr i32 %652, 5, !dbg !126
  %654 = getelementptr float, ptr addrspace(3) @global_smem, i32 %653, !dbg !126
  %655 = getelementptr float, ptr addrspace(3) %654, i32 %652, !dbg !126
  %656 = or disjoint i32 %647, 64, !dbg !126
  %657 = lshr i32 %656, 5, !dbg !126
  %658 = getelementptr float, ptr addrspace(3) @global_smem, i32 %657, !dbg !126
  %659 = getelementptr float, ptr addrspace(3) %658, i32 %656, !dbg !126
  %660 = or disjoint i32 %647, 96, !dbg !126
  %661 = lshr i32 %660, 5, !dbg !126
  %662 = getelementptr float, ptr addrspace(3) @global_smem, i32 %661, !dbg !126
  %663 = getelementptr float, ptr addrspace(3) %662, i32 %660, !dbg !126
  %664 = lshr i32 %648, 5, !dbg !126
  %665 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %664, !dbg !126
  %666 = getelementptr inbounds float, ptr addrspace(3) %665, i32 %648, !dbg !126
  %667 = or disjoint i32 %648, 128, !dbg !126
  %668 = lshr i32 %667, 5, !dbg !126
  %669 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %668, !dbg !126
  %670 = getelementptr inbounds float, ptr addrspace(3) %669, i32 %667, !dbg !126
  %671 = or disjoint i32 %648, 256, !dbg !126
  %672 = lshr i32 %671, 5, !dbg !126
  %673 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %672, !dbg !126
  %674 = getelementptr inbounds float, ptr addrspace(3) %673, i32 %671, !dbg !126
  %675 = or disjoint i32 %648, 384, !dbg !126
  %676 = lshr i32 %675, 5, !dbg !126
  %677 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %676, !dbg !126
  %678 = getelementptr inbounds float, ptr addrspace(3) %677, i32 %675, !dbg !126
  %679 = getelementptr i1, ptr addrspace(1) %26, i64 %48, !dbg !127
  %680 = insertelement <4 x i32> poison, i32 %454, i64 0, !dbg !26
  %681 = insertelement <4 x i32> %680, i32 %452, i64 1, !dbg !26
  %682 = insertelement <4 x i32> %681, i32 %450, i64 2, !dbg !26
  %683 = insertelement <4 x i32> %682, i32 %448, i64 3, !dbg !26
  %684 = bitcast <4 x i32> %683 to <4 x float>, !dbg !26
  %685 = insertelement <4 x i32> poison, i32 %455, i64 0, !dbg !28
  %686 = insertelement <4 x i32> %685, i32 %453, i64 1, !dbg !28
  %687 = insertelement <4 x i32> %686, i32 %451, i64 2, !dbg !28
  %688 = insertelement <4 x i32> %687, i32 %449, i64 3, !dbg !28
  %689 = bitcast <4 x i32> %688 to <4 x float>, !dbg !28
  %690 = fsub <4 x float> %684, %689, !dbg !128
  %691 = insertelement <4 x float> poison, float %141, i64 0, !dbg !129
  %692 = insertelement <4 x float> %691, float %142, i64 1, !dbg !129
  %693 = insertelement <4 x float> %692, float %143, i64 2, !dbg !129
  %694 = insertelement <4 x float> %693, float %144, i64 3, !dbg !129
  %695 = fmul <4 x float> %516, %694, !dbg !129
  %696 = insertelement <4 x i32> poison, i32 %517, i64 0, !dbg !51
  %697 = insertelement <4 x i32> %696, i32 %490, i64 1, !dbg !51
  %698 = insertelement <4 x i32> %697, i32 %474, i64 2, !dbg !51
  %699 = insertelement <4 x i32> %698, i32 %458, i64 3, !dbg !51
  %700 = bitcast <4 x i32> %699 to <4 x float>, !dbg !51
  %701 = fmul <4 x float> %695, %700, !dbg !130
  %702 = insertelement <4 x i32> poison, i32 %518, i64 0, !dbg !53
  %703 = insertelement <4 x i32> %702, i32 %491, i64 1, !dbg !53
  %704 = insertelement <4 x i32> %703, i32 %475, i64 2, !dbg !53
  %705 = insertelement <4 x i32> %704, i32 %459, i64 3, !dbg !53
  %706 = bitcast <4 x i32> %705 to <4 x float>, !dbg !53
  %707 = fadd <4 x float> %701, %706, !dbg !131
  %708 = fcmp olt <4 x float> %707, zeroinitializer, !dbg !132
  %709 = select <4 x i1> %708, <4 x float> zeroinitializer, <4 x float> %707, !dbg !136
  %710 = fmul <4 x float> %536, %542, !dbg !137
  %711 = insertelement <4 x i32> poison, i32 %543, i64 0, !dbg !72
  %712 = insertelement <4 x i32> %711, i32 %495, i64 1, !dbg !72
  %713 = insertelement <4 x i32> %712, i32 %479, i64 2, !dbg !72
  %714 = insertelement <4 x i32> %713, i32 %463, i64 3, !dbg !72
  %715 = bitcast <4 x i32> %714 to <4 x float>, !dbg !72
  %716 = fadd <4 x float> %710, %715, !dbg !138
  %717 = fcmp olt <4 x float> %716, zeroinitializer, !dbg !139
  %718 = select <4 x i1> %717, <4 x float> zeroinitializer, <4 x float> %716, !dbg !141
  %719 = fadd <4 x float> %568, %574, !dbg !142
  %720 = fcmp olt <4 x float> %719, zeroinitializer, !dbg !143
  %721 = select <4 x i1> %720, <4 x float> zeroinitializer, <4 x float> %719, !dbg !145
  %722 = fadd <4 x float> %599, %605, !dbg !146
  %723 = fcmp olt <4 x float> %722, zeroinitializer, !dbg !147
  %724 = select <4 x i1> %723, <4 x float> zeroinitializer, <4 x float> %722, !dbg !149
  %725 = insertelement <4 x i1> poison, i1 %316, i64 0, !dbg !150
  %726 = shufflevector <4 x i1> %725, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !150
  %727 = select <4 x i1> %726, <4 x float> %724, <4 x float> zeroinitializer, !dbg !150
  %728 = insertelement <4 x i1> poison, i1 %233, i64 0, !dbg !151
  %729 = shufflevector <4 x i1> %728, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !151
  %730 = select <4 x i1> %729, <4 x float> %721, <4 x float> %727, !dbg !151
  %731 = insertelement <4 x i1> poison, i1 %150, i64 0, !dbg !151
  %732 = shufflevector <4 x i1> %731, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !151
  %733 = select <4 x i1> %732, <4 x float> %718, <4 x float> %730, !dbg !151
  %734 = insertelement <4 x i1> poison, i1 %68, i64 0, !dbg !151
  %735 = shufflevector <4 x i1> %734, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !151
  %736 = select <4 x i1> %735, <4 x float> %709, <4 x float> %733, !dbg !151
  %737 = insertelement <4 x i32> poison, i32 %609, i64 0, !dbg !34
  %738 = insertelement <4 x i32> %737, i32 %608, i64 1, !dbg !34
  %739 = insertelement <4 x i32> %738, i32 %607, i64 2, !dbg !34
  %740 = insertelement <4 x i32> %739, i32 %606, i64 3, !dbg !34
  %741 = bitcast <4 x i32> %740 to <4 x float>, !dbg !34
  %742 = insertelement <4 x i32> poison, i32 %613, i64 0, !dbg !32
  %743 = insertelement <4 x i32> %742, i32 %612, i64 1, !dbg !32
  %744 = insertelement <4 x i32> %743, i32 %611, i64 2, !dbg !32
  %745 = insertelement <4 x i32> %744, i32 %610, i64 3, !dbg !32
  %746 = bitcast <4 x i32> %745 to <4 x float>, !dbg !32
  %747 = insertelement <4 x float> poison, float %625, i64 0, !dbg !152
  %748 = insertelement <4 x float> %747, float %626, i64 1, !dbg !152
  %749 = insertelement <4 x float> %748, float %627, i64 2, !dbg !152
  %750 = insertelement <4 x float> %749, float %628, i64 3, !dbg !152
  %751 = fmul <4 x float> %690, %750, !dbg !152
  %752 = fmul <4 x float> %751, %746, !dbg !153
  %753 = fadd <4 x float> %752, %741, !dbg !154
  %754 = fadd <4 x float> %736, %753, !dbg !155
  %755 = fcmp olt <4 x float> %754, zeroinitializer, !dbg !156
  %756 = select <4 x i1> %755, <4 x float> zeroinitializer, <4 x float> %754, !dbg !158
  %757 = fcmp ole <4 x float> %756, zeroinitializer, !dbg !159
  %758 = extractelement <4 x float> %756, i64 0, !dbg !126
  %759 = bitcast float %758 to <1 x i32>, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %651, <1 x i32> %759, i1 true) #4, !dbg !126
  %760 = extractelement <4 x float> %756, i64 1, !dbg !126
  %761 = bitcast float %760 to <1 x i32>, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %655, <1 x i32> %761, i1 true) #4, !dbg !126
  %762 = extractelement <4 x float> %756, i64 2, !dbg !126
  %763 = bitcast float %762 to <1 x i32>, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %659, <1 x i32> %763, i1 true) #4, !dbg !126
  %764 = extractelement <4 x float> %756, i64 3, !dbg !126
  %765 = bitcast float %764 to <1 x i32>, !dbg !126
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %663, <1 x i32> %765, i1 true) #4, !dbg !126
  tail call void @llvm.nvvm.barrier0(), !dbg !126
  %766 = load i32, ptr addrspace(3) %666, align 4, !dbg !126
  %767 = load i32, ptr addrspace(3) %670, align 4, !dbg !126
  %768 = load i32, ptr addrspace(3) %674, align 4, !dbg !126
  %769 = load i32, ptr addrspace(3) %678, align 4, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %766, ptr addrspace(1) %638, i1 %616) #4, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %767, ptr addrspace(1) %640, i1 %616) #4, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %768, ptr addrspace(1) %642, i1 %616) #4, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %769, ptr addrspace(1) %644, i1 %616) #4, !dbg !126
  %770 = zext <4 x i1> %757 to <4 x i8>, !dbg !160
  %771 = bitcast <4 x i8> %770 to i32, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %771, ptr addrspace(1) %679, i1 %41) #4, !dbg !160
  ret void, !dbg !161
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cififutfjqhsllf6wp4f3p7i5oy2dnu4fxxn3v7bsdsshnjlsrda.py", directory: "inductor_cache/if")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_threshold_backward_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_threshold_backward_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_threshold_backward_27", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_threshold_backward_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 41, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 46, scope: !7)
!25 = !DILocation(line: 32, column: 32, scope: !7)
!26 = !DILocation(line: 32, column: 57, scope: !7)
!27 = !DILocation(line: 33, column: 33, scope: !7)
!28 = !DILocation(line: 33, column: 38, scope: !7)
!29 = !DILocation(line: 34, column: 33, scope: !7)
!30 = !DILocation(line: 34, column: 38, scope: !7)
!31 = !DILocation(line: 35, column: 33, scope: !7)
!32 = !DILocation(line: 35, column: 38, scope: !7)
!33 = !DILocation(line: 36, column: 33, scope: !7)
!34 = !DILocation(line: 36, column: 38, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 34, scope: !7)
!37 = !DILocation(line: 42, column: 44, scope: !7)
!38 = !DILocation(line: 42, column: 39, scope: !7)
!39 = !DILocation(line: 42, column: 50, scope: !7)
!40 = !DILocation(line: 42, column: 30, scope: !7)
!41 = !DILocation(line: 42, column: 63, scope: !7)
!42 = !DILocation(line: 42, column: 56, scope: !7)
!43 = !DILocation(line: 43, column: 30, scope: !7)
!44 = !DILocation(line: 43, column: 70, scope: !7)
!45 = !DILocation(line: 45, column: 30, scope: !7)
!46 = !DILocation(line: 45, column: 70, scope: !7)
!47 = !DILocation(line: 47, column: 19, scope: !7)
!48 = !DILocation(line: 48, column: 27, scope: !7)
!49 = !DILocation(line: 50, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 31, scope: !7)
!51 = !DILocation(line: 54, column: 71, scope: !7)
!52 = !DILocation(line: 56, column: 31, scope: !7)
!53 = !DILocation(line: 56, column: 71, scope: !7)
!54 = !DILocation(line: 65, column: 20, scope: !7)
!55 = !DILocation(line: 66, column: 35, scope: !7)
!56 = !DILocation(line: 66, column: 45, scope: !7)
!57 = !DILocation(line: 66, column: 40, scope: !7)
!58 = !DILocation(line: 66, column: 51, scope: !7)
!59 = !DILocation(line: 66, column: 31, scope: !7)
!60 = !DILocation(line: 66, column: 74, scope: !7)
!61 = !DILocation(line: 66, column: 66, scope: !7)
!62 = !DILocation(line: 67, column: 31, scope: !7)
!63 = !DILocation(line: 67, column: 80, scope: !7)
!64 = !DILocation(line: 69, column: 31, scope: !7)
!65 = !DILocation(line: 69, column: 80, scope: !7)
!66 = !DILocation(line: 71, column: 20, scope: !7)
!67 = !DILocation(line: 72, column: 27, scope: !7)
!68 = !DILocation(line: 74, column: 20, scope: !7)
!69 = !DILocation(line: 78, column: 31, scope: !7)
!70 = !DILocation(line: 78, column: 80, scope: !7)
!71 = !DILocation(line: 80, column: 31, scope: !7)
!72 = !DILocation(line: 80, column: 80, scope: !7)
!73 = !DILocation(line: 89, column: 20, scope: !7)
!74 = !DILocation(line: 90, column: 35, scope: !7)
!75 = !DILocation(line: 90, column: 45, scope: !7)
!76 = !DILocation(line: 90, column: 40, scope: !7)
!77 = !DILocation(line: 90, column: 60, scope: !7)
!78 = !DILocation(line: 90, column: 51, scope: !7)
!79 = !DILocation(line: 90, column: 32, scope: !7)
!80 = !DILocation(line: 90, column: 74, scope: !7)
!81 = !DILocation(line: 90, column: 66, scope: !7)
!82 = !DILocation(line: 91, column: 32, scope: !7)
!83 = !DILocation(line: 91, column: 81, scope: !7)
!84 = !DILocation(line: 93, column: 32, scope: !7)
!85 = !DILocation(line: 93, column: 81, scope: !7)
!86 = !DILocation(line: 95, column: 20, scope: !7)
!87 = !DILocation(line: 96, column: 27, scope: !7)
!88 = !DILocation(line: 98, column: 20, scope: !7)
!89 = !DILocation(line: 102, column: 32, scope: !7)
!90 = !DILocation(line: 102, column: 81, scope: !7)
!91 = !DILocation(line: 104, column: 32, scope: !7)
!92 = !DILocation(line: 104, column: 81, scope: !7)
!93 = !DILocation(line: 110, column: 20, scope: !7)
!94 = !DILocation(line: 113, column: 60, scope: !7)
!95 = !DILocation(line: 113, column: 51, scope: !7)
!96 = !DILocation(line: 113, column: 32, scope: !7)
!97 = !DILocation(line: 113, column: 74, scope: !7)
!98 = !DILocation(line: 113, column: 66, scope: !7)
!99 = !DILocation(line: 114, column: 32, scope: !7)
!100 = !DILocation(line: 114, column: 81, scope: !7)
!101 = !DILocation(line: 116, column: 32, scope: !7)
!102 = !DILocation(line: 116, column: 81, scope: !7)
!103 = !DILocation(line: 118, column: 20, scope: !7)
!104 = !DILocation(line: 119, column: 27, scope: !7)
!105 = !DILocation(line: 121, column: 20, scope: !7)
!106 = !DILocation(line: 125, column: 32, scope: !7)
!107 = !DILocation(line: 125, column: 81, scope: !7)
!108 = !DILocation(line: 127, column: 32, scope: !7)
!109 = !DILocation(line: 127, column: 81, scope: !7)
!110 = !DILocation(line: 138, column: 22, scope: !7)
!111 = !DILocation(line: 139, column: 28, scope: !7)
!112 = !DILocation(line: 44, column: 18, scope: !7)
!113 = !DILocation(line: 68, column: 20, scope: !7)
!114 = !DILocation(line: 77, column: 20, scope: !7)
!115 = !DILocation(line: 92, column: 20, scope: !7)
!116 = !DILocation(line: 101, column: 20, scope: !7)
!117 = !DILocation(line: 103, column: 20, scope: !7)
!118 = !DILocation(line: 115, column: 20, scope: !7)
!119 = !DILocation(line: 124, column: 20, scope: !7)
!120 = !DILocation(line: 126, column: 20, scope: !7)
!121 = !DILocation(line: 141, column: 22, scope: !7)
!122 = !DILocation(line: 152, column: 4, scope: !7)
!123 = !DILocation(line: 153, column: 36, scope: !7)
!124 = !DILocation(line: 153, column: 33, scope: !7)
!125 = !DILocation(line: 153, column: 28, scope: !7)
!126 = !DILocation(line: 153, column: 49, scope: !7)
!127 = !DILocation(line: 154, column: 25, scope: !7)
!128 = !DILocation(line: 136, column: 21, scope: !7)
!129 = !DILocation(line: 53, column: 19, scope: !7)
!130 = !DILocation(line: 55, column: 20, scope: !7)
!131 = !DILocation(line: 57, column: 20, scope: !7)
!132 = !DILocation(line: 118, column: 15, scope: !133, inlinedAt: !135)
!133 = distinct !DILexicalBlockFile(scope: !7, file: !134, discriminator: 0)
!134 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!135 = !DILocation(line: 59, column: 42, scope: !7)
!136 = !DILocation(line: 121, column: 29, scope: !133, inlinedAt: !135)
!137 = !DILocation(line: 79, column: 20, scope: !7)
!138 = !DILocation(line: 81, column: 20, scope: !7)
!139 = !DILocation(line: 118, column: 15, scope: !133, inlinedAt: !140)
!140 = !DILocation(line: 83, column: 42, scope: !7)
!141 = !DILocation(line: 121, column: 29, scope: !133, inlinedAt: !140)
!142 = !DILocation(line: 105, column: 20, scope: !7)
!143 = !DILocation(line: 118, column: 15, scope: !133, inlinedAt: !144)
!144 = !DILocation(line: 107, column: 42, scope: !7)
!145 = !DILocation(line: 121, column: 29, scope: !133, inlinedAt: !144)
!146 = !DILocation(line: 128, column: 20, scope: !7)
!147 = !DILocation(line: 118, column: 15, scope: !133, inlinedAt: !148)
!148 = !DILocation(line: 130, column: 42, scope: !7)
!149 = !DILocation(line: 121, column: 29, scope: !133, inlinedAt: !148)
!150 = !DILocation(line: 132, column: 35, scope: !7)
!151 = !DILocation(line: 0, scope: !7)
!152 = !DILocation(line: 144, column: 22, scope: !7)
!153 = !DILocation(line: 145, column: 22, scope: !7)
!154 = !DILocation(line: 146, column: 22, scope: !7)
!155 = !DILocation(line: 147, column: 21, scope: !7)
!156 = !DILocation(line: 118, column: 15, scope: !133, inlinedAt: !157)
!157 = !DILocation(line: 149, column: 44, scope: !7)
!158 = !DILocation(line: 121, column: 29, scope: !133, inlinedAt: !157)
!159 = !DILocation(line: 151, column: 23, scope: !7)
!160 = !DILocation(line: 154, column: 58, scope: !7)
!161 = !DILocation(line: 154, column: 4, scope: !7)
