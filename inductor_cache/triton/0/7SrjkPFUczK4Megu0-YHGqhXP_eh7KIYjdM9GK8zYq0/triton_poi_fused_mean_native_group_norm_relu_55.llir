; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mean_native_group_norm_relu_55(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 8192, !dbg !14
  %15 = mul i32 %14, 8192, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = shl i32 %14, 15, !dbg !16
  %17 = add i32 %16, %.decomposed, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !19
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %23 = sdiv i32 %13, 256, !dbg !20
  %24 = sext i32 %23 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !24
  %31 = sext i32 %.decomposed to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !25
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !26
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !26
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !27
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !28
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !28
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !28
  %40 = add i32 %17, 8192, !dbg !29
  %41 = sext i32 %40 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !30
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !31
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !31
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !31
  %46 = add i32 %17, 16384, !dbg !32
  %47 = sext i32 %46 to i64, !dbg !33
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !33
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !34
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !34
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !34
  %52 = add i32 %17, 24576, !dbg !35
  %53 = sext i32 %52 to i64, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !36
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !37
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !37
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !37
  %58 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !22
  %59 = insertelement <2 x i32> %58, i32 %26, i64 1, !dbg !22
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !22
  %61 = shufflevector <2 x float> %60, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !22
  %62 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !24
  %63 = insertelement <2 x i32> %62, i32 %29, i64 1, !dbg !24
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !24
  %65 = shufflevector <2 x float> %64, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !24
  %66 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !26
  %67 = insertelement <2 x i32> %66, i32 %34, i64 1, !dbg !26
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !26
  %69 = shufflevector <2 x float> %68, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !26
  %70 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !28
  %71 = insertelement <2 x i32> %70, i32 %38, i64 1, !dbg !28
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !28
  %73 = shufflevector <2 x float> %72, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !28
  %74 = insertelement <8 x i32> poison, i32 %57, i64 0, !dbg !37
  %75 = insertelement <8 x i32> %74, i32 %56, i64 1, !dbg !37
  %76 = insertelement <8 x i32> %75, i32 %51, i64 2, !dbg !37
  %77 = insertelement <8 x i32> %76, i32 %50, i64 3, !dbg !37
  %78 = insertelement <8 x i32> %77, i32 %45, i64 4, !dbg !37
  %79 = insertelement <8 x i32> %78, i32 %44, i64 5, !dbg !37
  %80 = insertelement <8 x i32> %79, i32 %22, i64 6, !dbg !37
  %81 = insertelement <8 x i32> %80, i32 %21, i64 7, !dbg !37
  %82 = bitcast <8 x i32> %81 to <8 x float>, !dbg !37
  %83 = fsub <8 x float> %82, %61, !dbg !38
  %84 = fmul <8 x float> %83, %65, !dbg !39
  %85 = fmul <8 x float> %84, %69, !dbg !40
  %86 = fadd <8 x float> %85, %73, !dbg !41
  %87 = fcmp olt <8 x float> %86, zeroinitializer, !dbg !42
  %88 = extractelement <8 x i1> %87, i64 7, !dbg !46
  %89 = extractelement <8 x float> %86, i64 7, !dbg !46
  %90 = select i1 %88, float 0.000000e+00, float %89, !dbg !46
  %91 = extractelement <8 x i1> %87, i64 6, !dbg !46
  %92 = extractelement <8 x float> %86, i64 6, !dbg !46
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !46
  %94 = extractelement <8 x i1> %87, i64 5, !dbg !48
  %95 = extractelement <8 x float> %86, i64 5, !dbg !48
  %96 = select i1 %94, float 0.000000e+00, float %95, !dbg !48
  %97 = extractelement <8 x i1> %87, i64 4, !dbg !48
  %98 = extractelement <8 x float> %86, i64 4, !dbg !48
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !48
  %100 = fadd float %90, %96, !dbg !50
  %101 = fadd float %93, %99, !dbg !50
  %102 = extractelement <8 x i1> %87, i64 3, !dbg !51
  %103 = extractelement <8 x float> %86, i64 3, !dbg !51
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !51
  %105 = extractelement <8 x i1> %87, i64 2, !dbg !51
  %106 = extractelement <8 x float> %86, i64 2, !dbg !51
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !51
  %108 = fadd float %100, %104, !dbg !53
  %109 = fadd float %101, %107, !dbg !53
  %110 = extractelement <8 x i1> %87, i64 1, !dbg !54
  %111 = extractelement <8 x float> %86, i64 1, !dbg !54
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !54
  %113 = extractelement <8 x i1> %87, i64 0, !dbg !54
  %114 = extractelement <8 x float> %86, i64 0, !dbg !54
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !54
  %116 = fadd float %108, %112, !dbg !55
  %117 = fadd float %109, %115, !dbg !55
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float 4.000000e+00) #1, !dbg !56
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float 4.000000e+00) #1, !dbg !56
  %120 = sext i32 %13 to i64, !dbg !57
  %121 = getelementptr float, ptr addrspace(1) %5, i64 %120, !dbg !57
  %122 = bitcast float %118 to i32, !dbg !58
  %123 = bitcast float %119 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %122, i32 %123, ptr addrspace(1) %121, i1 true) #1, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cigx3leyevmb7a2fgbhqepbbrheyggmwnlalajrftdnydlzfx5iw.py", directory: "inductor_cache/ig")
!4 = !{ptr @triton_poi_fused_mean_native_group_norm_relu_55, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mean_native_group_norm_relu_55, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mean_native_group_norm_relu_55", linkageName: "triton_poi_fused_mean_native_group_norm_relu_55", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 41, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 42, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 42, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 43, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 54, scope: !7)
!32 = !DILocation(line: 33, column: 44, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 55, scope: !7)
!35 = !DILocation(line: 34, column: 44, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 55, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 57, column: 41, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 40, column: 41, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !49)
!49 = !DILocation(line: 45, column: 41, scope: !7)
!50 = !DILocation(line: 46, column: 20, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !52)
!52 = !DILocation(line: 51, column: 41, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 25, scope: !7)
!58 = !DILocation(line: 61, column: 37, scope: !7)
!59 = !DILocation(line: 61, column: 4, scope: !7)
