; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %22 = srem i32 %20, 24, !dbg !14
  %23 = srem i32 %21, 24, !dbg !14
  %24 = sext i32 %20 to i64, !dbg !15
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !15
  %26 = sext i32 %21 to i64, !dbg !15
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !16
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !16
  %30 = sext i32 %22 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !17
  %32 = sext i32 %23 to i64, !dbg !17
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !17
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !18
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !21
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !23
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !29
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !30
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !30
  %76 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !31
  %77 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !31
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !32
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !32
  %80 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !33
  %81 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !33
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !34
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !34
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !34
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !34
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !34
  %87 = bitcast i32 %83 to float, !dbg !34
  %88 = bitcast i32 %84 to float, !dbg !34
  %89 = bitcast i32 %85 to float, !dbg !34
  %90 = bitcast i32 %86 to float, !dbg !34
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !34
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !34
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !34
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !34
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !34
  %96 = bitcast i32 %92 to float, !dbg !34
  %97 = bitcast i32 %93 to float, !dbg !34
  %98 = bitcast i32 %94 to float, !dbg !34
  %99 = bitcast i32 %95 to float, !dbg !34
  %100 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !35
  %101 = getelementptr float, ptr addrspace(1) %10, i64 %32, !dbg !35
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !36
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !36
  %104 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !37
  %105 = getelementptr float, ptr addrspace(1) %11, i64 %32, !dbg !37
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 true) #3, !dbg !38
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !38
  %108 = fadd float %55, 0x3EE4F8B580000000, !dbg !39
  %109 = fadd float %56, 0x3EE4F8B580000000, !dbg !39
  %110 = fadd float %57, 0x3EE4F8B580000000, !dbg !39
  %111 = fadd float %58, 0x3EE4F8B580000000, !dbg !39
  %112 = fadd float %64, 0x3EE4F8B580000000, !dbg !39
  %113 = fadd float %65, 0x3EE4F8B580000000, !dbg !39
  %114 = fadd float %66, 0x3EE4F8B580000000, !dbg !39
  %115 = fadd float %67, 0x3EE4F8B580000000, !dbg !39
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %116, 0, !dbg !40
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %117, 0, !dbg !40
  br i1 %.not.i, label %123, label %118, !dbg !40

118:                                              ; preds = %14
  br i1 %.not1.i, label %121, label %119, !dbg !40

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

123:                                              ; preds = %14
  br i1 %.not1.i, label %126, label %124, !dbg !40

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %119, %121, %124, %126
  %.0.i = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !40
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %128, 0, !dbg !40
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %129, 0, !dbg !40
  br i1 %.not.i1, label %135, label %130, !dbg !40

130:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %133, label %131, !dbg !40

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

135:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %138, label %136, !dbg !40

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %131, %133, %136, %138
  %.0.i3 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !40
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i6 = icmp eq i32 %140, 0, !dbg !40
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i9 = icmp eq i32 %141, 0, !dbg !40
  br i1 %.not.i6, label %147, label %142, !dbg !40

142:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %145, label %143, !dbg !40

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

147:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %150, label %148, !dbg !40

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

__nv_sqrtf.exit10:                                ; preds = %143, %145, %148, %150
  %.0.i8 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !40
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i11 = icmp eq i32 %152, 0, !dbg !40
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i14 = icmp eq i32 %153, 0, !dbg !40
  br i1 %.not.i11, label %159, label %154, !dbg !40

154:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %157, label %155, !dbg !40

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

159:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %162, label %160, !dbg !40

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

__nv_sqrtf.exit15:                                ; preds = %155, %157, %160, %162
  %.0.i13 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !40
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i16 = icmp eq i32 %164, 0, !dbg !40
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i19 = icmp eq i32 %165, 0, !dbg !40
  br i1 %.not.i16, label %171, label %166, !dbg !40

166:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %169, label %167, !dbg !40

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

171:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %174, label %172, !dbg !40

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

__nv_sqrtf.exit20:                                ; preds = %167, %169, %172, %174
  %.0.i18 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !40
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i21 = icmp eq i32 %176, 0, !dbg !40
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i24 = icmp eq i32 %177, 0, !dbg !40
  br i1 %.not.i21, label %183, label %178, !dbg !40

178:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %181, label %179, !dbg !40

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

183:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %186, label %184, !dbg !40

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

__nv_sqrtf.exit25:                                ; preds = %179, %181, %184, %186
  %.0.i23 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !40
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i26 = icmp eq i32 %188, 0, !dbg !40
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i29 = icmp eq i32 %189, 0, !dbg !40
  br i1 %.not.i26, label %195, label %190, !dbg !40

190:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %193, label %191, !dbg !40

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

195:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %198, label %196, !dbg !40

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

__nv_sqrtf.exit30:                                ; preds = %191, %193, %196, %198
  %.0.i28 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !40
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i31 = icmp eq i32 %200, 0, !dbg !40
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i34 = icmp eq i32 %201, 0, !dbg !40
  br i1 %.not.i31, label %207, label %202, !dbg !40

202:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %205, label %203, !dbg !40

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

207:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %210, label %208, !dbg !40

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

__nv_sqrtf.exit35:                                ; preds = %203, %205, %208, %210
  %.0.i33 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !40
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !41
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !41
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !41
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !41
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !41
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !41
  %220 = fadd float %87, 0x3EE4F8B580000000, !dbg !42
  %221 = fadd float %88, 0x3EE4F8B580000000, !dbg !42
  %222 = fadd float %89, 0x3EE4F8B580000000, !dbg !42
  %223 = fadd float %90, 0x3EE4F8B580000000, !dbg !42
  %224 = fadd float %96, 0x3EE4F8B580000000, !dbg !42
  %225 = fadd float %97, 0x3EE4F8B580000000, !dbg !42
  %226 = fadd float %98, 0x3EE4F8B580000000, !dbg !42
  %227 = fadd float %99, 0x3EE4F8B580000000, !dbg !42
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i36 = icmp eq i32 %228, 0, !dbg !43
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i39 = icmp eq i32 %229, 0, !dbg !43
  br i1 %.not.i36, label %235, label %230, !dbg !43

230:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %233, label %231, !dbg !43

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

235:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %238, label %236, !dbg !43

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

__nv_sqrtf.exit40:                                ; preds = %231, %233, %236, %238
  %.0.i38 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !43
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i41 = icmp eq i32 %240, 0, !dbg !43
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i44 = icmp eq i32 %241, 0, !dbg !43
  br i1 %.not.i41, label %247, label %242, !dbg !43

242:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %245, label %243, !dbg !43

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

247:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %250, label %248, !dbg !43

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

__nv_sqrtf.exit45:                                ; preds = %243, %245, %248, %250
  %.0.i43 = phi float [ %244, %243 ], [ %246, %245 ], [ %249, %248 ], [ %251, %250 ], !dbg !43
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i46 = icmp eq i32 %252, 0, !dbg !43
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i49 = icmp eq i32 %253, 0, !dbg !43
  br i1 %.not.i46, label %259, label %254, !dbg !43

254:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %257, label %255, !dbg !43

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

259:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %262, label %260, !dbg !43

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

__nv_sqrtf.exit50:                                ; preds = %255, %257, %260, %262
  %.0.i48 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !43
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i51 = icmp eq i32 %264, 0, !dbg !43
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i54 = icmp eq i32 %265, 0, !dbg !43
  br i1 %.not.i51, label %271, label %266, !dbg !43

266:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %269, label %267, !dbg !43

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

271:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %274, label %272, !dbg !43

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

__nv_sqrtf.exit55:                                ; preds = %267, %269, %272, %274
  %.0.i53 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !43
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i56 = icmp eq i32 %276, 0, !dbg !43
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i59 = icmp eq i32 %277, 0, !dbg !43
  br i1 %.not.i56, label %283, label %278, !dbg !43

278:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %281, label %279, !dbg !43

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

283:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %286, label %284, !dbg !43

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

__nv_sqrtf.exit60:                                ; preds = %279, %281, %284, %286
  %.0.i58 = phi float [ %280, %279 ], [ %282, %281 ], [ %285, %284 ], [ %287, %286 ], !dbg !43
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i61 = icmp eq i32 %288, 0, !dbg !43
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i64 = icmp eq i32 %289, 0, !dbg !43
  br i1 %.not.i61, label %295, label %290, !dbg !43

290:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %293, label %291, !dbg !43

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

295:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %298, label %296, !dbg !43

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

__nv_sqrtf.exit65:                                ; preds = %291, %293, %296, %298
  %.0.i63 = phi float [ %292, %291 ], [ %294, %293 ], [ %297, %296 ], [ %299, %298 ], !dbg !43
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i66 = icmp eq i32 %300, 0, !dbg !43
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i69 = icmp eq i32 %301, 0, !dbg !43
  br i1 %.not.i66, label %307, label %302, !dbg !43

302:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %305, label %303, !dbg !43

303:                                              ; preds = %302
  %304 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

305:                                              ; preds = %302
  %306 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

307:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %310, label %308, !dbg !43

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

__nv_sqrtf.exit70:                                ; preds = %303, %305, %308, %310
  %.0.i68 = phi float [ %304, %303 ], [ %306, %305 ], [ %309, %308 ], [ %311, %310 ], !dbg !43
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i71 = icmp eq i32 %312, 0, !dbg !43
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i74 = icmp eq i32 %313, 0, !dbg !43
  br i1 %.not.i71, label %319, label %314, !dbg !43

314:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %317, label %315, !dbg !43

315:                                              ; preds = %314
  %316 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

317:                                              ; preds = %314
  %318 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

319:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %322, label %320, !dbg !43

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

__nv_sqrtf.exit75:                                ; preds = %315, %317, %320, %322
  %.0.i73 = phi float [ %316, %315 ], [ %318, %317 ], [ %321, %320 ], [ %323, %322 ], !dbg !43
  %324 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !20
  %325 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %326 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !32
  %327 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !20
  %328 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %329 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !32
  %330 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !20
  %331 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %332 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !32
  %333 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !20
  %334 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %335 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !32
  %336 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !20
  %337 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %338 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !32
  %339 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !20
  %340 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %341 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !32
  %342 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !20
  %343 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %344 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !32
  %345 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !20
  %346 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %347 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !32
  %348 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !16
  %349 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !18
  %350 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !24
  %351 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %352 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !30
  %353 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !16
  %354 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !18
  %355 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !24
  %356 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %357 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !30
  %358 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !16
  %359 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !18
  %360 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !24
  %361 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %362 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !30
  %363 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !16
  %364 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !18
  %365 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !24
  %366 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %367 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !30
  %368 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %369 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %370 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %371 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %372 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !30
  %373 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %374 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %375 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %376 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %377 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !30
  %378 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %379 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %380 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %381 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %382 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !30
  %383 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %384 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %385 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %386 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %387 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !30
  %388 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !38
  %389 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !38
  %390 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !38
  %391 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !38
  %392 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !38
  %393 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !38
  %394 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !38
  %395 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !38
  %396 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !36
  %397 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !36
  %398 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !36
  %399 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !36
  %400 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !36
  %401 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !36
  %402 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !36
  %403 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !36
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !44
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !44
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !44
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !44
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !44
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !44
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !44
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !44
  %412 = insertelement <2 x i32> poison, i32 %383, i64 0, !dbg !16
  %413 = insertelement <2 x i32> %412, i32 %345, i64 1, !dbg !16
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !16
  %415 = insertelement <2 x i32> poison, i32 %384, i64 0, !dbg !18
  %416 = insertelement <2 x i32> %415, i32 %346, i64 1, !dbg !18
  %417 = bitcast <2 x i32> %416 to <2 x float>, !dbg !18
  %418 = fadd <2 x float> %414, %417, !dbg !45
  %419 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !24
  %420 = insertelement <2 x i32> %419, i32 %347, i64 1, !dbg !24
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !24
  %422 = fsub <2 x float> %418, %421, !dbg !46
  %423 = insertelement <2 x i32> poison, i32 %387, i64 0, !dbg !30
  %424 = insertelement <2 x i32> %423, i32 %395, i64 1, !dbg !30
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !30
  %426 = insertelement <2 x i32> poison, i32 %386, i64 0, !dbg !28
  %427 = insertelement <2 x i32> %426, i32 %403, i64 1, !dbg !28
  %428 = bitcast <2 x i32> %427 to <2 x float>, !dbg !28
  %429 = insertelement <2 x float> poison, float %212, i64 0, !dbg !47
  %430 = insertelement <2 x float> %429, float %404, i64 1, !dbg !47
  %431 = fmul <2 x float> %422, %430, !dbg !47
  %432 = fmul <2 x float> %431, %428, !dbg !48
  %433 = fadd <2 x float> %432, %425, !dbg !49
  %434 = insertelement <2 x i32> poison, i32 %378, i64 0, !dbg !16
  %435 = insertelement <2 x i32> %434, i32 %342, i64 1, !dbg !16
  %436 = bitcast <2 x i32> %435 to <2 x float>, !dbg !16
  %437 = insertelement <2 x i32> poison, i32 %379, i64 0, !dbg !18
  %438 = insertelement <2 x i32> %437, i32 %343, i64 1, !dbg !18
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !18
  %440 = fadd <2 x float> %436, %439, !dbg !45
  %441 = insertelement <2 x i32> poison, i32 %380, i64 0, !dbg !24
  %442 = insertelement <2 x i32> %441, i32 %344, i64 1, !dbg !24
  %443 = bitcast <2 x i32> %442 to <2 x float>, !dbg !24
  %444 = fsub <2 x float> %440, %443, !dbg !46
  %445 = insertelement <2 x i32> poison, i32 %382, i64 0, !dbg !30
  %446 = insertelement <2 x i32> %445, i32 %394, i64 1, !dbg !30
  %447 = bitcast <2 x i32> %446 to <2 x float>, !dbg !30
  %448 = insertelement <2 x i32> poison, i32 %381, i64 0, !dbg !28
  %449 = insertelement <2 x i32> %448, i32 %402, i64 1, !dbg !28
  %450 = bitcast <2 x i32> %449 to <2 x float>, !dbg !28
  %451 = insertelement <2 x float> poison, float %213, i64 0, !dbg !47
  %452 = insertelement <2 x float> %451, float %405, i64 1, !dbg !47
  %453 = fmul <2 x float> %444, %452, !dbg !47
  %454 = fmul <2 x float> %453, %450, !dbg !48
  %455 = fadd <2 x float> %454, %447, !dbg !49
  %456 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !16
  %457 = insertelement <2 x i32> %456, i32 %339, i64 1, !dbg !16
  %458 = bitcast <2 x i32> %457 to <2 x float>, !dbg !16
  %459 = insertelement <2 x i32> poison, i32 %374, i64 0, !dbg !18
  %460 = insertelement <2 x i32> %459, i32 %340, i64 1, !dbg !18
  %461 = bitcast <2 x i32> %460 to <2 x float>, !dbg !18
  %462 = fadd <2 x float> %458, %461, !dbg !45
  %463 = insertelement <2 x i32> poison, i32 %375, i64 0, !dbg !24
  %464 = insertelement <2 x i32> %463, i32 %341, i64 1, !dbg !24
  %465 = bitcast <2 x i32> %464 to <2 x float>, !dbg !24
  %466 = fsub <2 x float> %462, %465, !dbg !46
  %467 = insertelement <2 x i32> poison, i32 %377, i64 0, !dbg !30
  %468 = insertelement <2 x i32> %467, i32 %393, i64 1, !dbg !30
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !30
  %470 = insertelement <2 x i32> poison, i32 %376, i64 0, !dbg !28
  %471 = insertelement <2 x i32> %470, i32 %401, i64 1, !dbg !28
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !28
  %473 = insertelement <2 x float> poison, float %214, i64 0, !dbg !47
  %474 = insertelement <2 x float> %473, float %406, i64 1, !dbg !47
  %475 = fmul <2 x float> %466, %474, !dbg !47
  %476 = fmul <2 x float> %475, %472, !dbg !48
  %477 = fadd <2 x float> %476, %469, !dbg !49
  %478 = insertelement <2 x i32> poison, i32 %368, i64 0, !dbg !16
  %479 = insertelement <2 x i32> %478, i32 %336, i64 1, !dbg !16
  %480 = bitcast <2 x i32> %479 to <2 x float>, !dbg !16
  %481 = insertelement <2 x i32> poison, i32 %369, i64 0, !dbg !18
  %482 = insertelement <2 x i32> %481, i32 %337, i64 1, !dbg !18
  %483 = bitcast <2 x i32> %482 to <2 x float>, !dbg !18
  %484 = fadd <2 x float> %480, %483, !dbg !45
  %485 = insertelement <2 x i32> poison, i32 %370, i64 0, !dbg !24
  %486 = insertelement <2 x i32> %485, i32 %338, i64 1, !dbg !24
  %487 = bitcast <2 x i32> %486 to <2 x float>, !dbg !24
  %488 = fsub <2 x float> %484, %487, !dbg !46
  %489 = insertelement <2 x i32> poison, i32 %372, i64 0, !dbg !30
  %490 = insertelement <2 x i32> %489, i32 %392, i64 1, !dbg !30
  %491 = bitcast <2 x i32> %490 to <2 x float>, !dbg !30
  %492 = insertelement <2 x i32> poison, i32 %371, i64 0, !dbg !28
  %493 = insertelement <2 x i32> %492, i32 %400, i64 1, !dbg !28
  %494 = bitcast <2 x i32> %493 to <2 x float>, !dbg !28
  %495 = insertelement <2 x float> poison, float %215, i64 0, !dbg !47
  %496 = insertelement <2 x float> %495, float %407, i64 1, !dbg !47
  %497 = fmul <2 x float> %488, %496, !dbg !47
  %498 = fmul <2 x float> %497, %494, !dbg !48
  %499 = fadd <2 x float> %498, %491, !dbg !49
  %500 = insertelement <2 x i32> poison, i32 %363, i64 0, !dbg !16
  %501 = insertelement <2 x i32> %500, i32 %333, i64 1, !dbg !16
  %502 = bitcast <2 x i32> %501 to <2 x float>, !dbg !16
  %503 = insertelement <2 x i32> poison, i32 %364, i64 0, !dbg !18
  %504 = insertelement <2 x i32> %503, i32 %334, i64 1, !dbg !18
  %505 = bitcast <2 x i32> %504 to <2 x float>, !dbg !18
  %506 = fadd <2 x float> %502, %505, !dbg !45
  %507 = insertelement <2 x i32> poison, i32 %365, i64 0, !dbg !24
  %508 = insertelement <2 x i32> %507, i32 %335, i64 1, !dbg !24
  %509 = bitcast <2 x i32> %508 to <2 x float>, !dbg !24
  %510 = fsub <2 x float> %506, %509, !dbg !46
  %511 = insertelement <2 x i32> poison, i32 %367, i64 0, !dbg !30
  %512 = insertelement <2 x i32> %511, i32 %391, i64 1, !dbg !30
  %513 = bitcast <2 x i32> %512 to <2 x float>, !dbg !30
  %514 = insertelement <2 x i32> poison, i32 %366, i64 0, !dbg !28
  %515 = insertelement <2 x i32> %514, i32 %399, i64 1, !dbg !28
  %516 = bitcast <2 x i32> %515 to <2 x float>, !dbg !28
  %517 = insertelement <2 x float> poison, float %216, i64 0, !dbg !47
  %518 = insertelement <2 x float> %517, float %408, i64 1, !dbg !47
  %519 = fmul <2 x float> %510, %518, !dbg !47
  %520 = fmul <2 x float> %519, %516, !dbg !48
  %521 = fadd <2 x float> %520, %513, !dbg !49
  %522 = insertelement <2 x i32> poison, i32 %358, i64 0, !dbg !16
  %523 = insertelement <2 x i32> %522, i32 %330, i64 1, !dbg !16
  %524 = bitcast <2 x i32> %523 to <2 x float>, !dbg !16
  %525 = insertelement <2 x i32> poison, i32 %359, i64 0, !dbg !18
  %526 = insertelement <2 x i32> %525, i32 %331, i64 1, !dbg !18
  %527 = bitcast <2 x i32> %526 to <2 x float>, !dbg !18
  %528 = fadd <2 x float> %524, %527, !dbg !45
  %529 = insertelement <2 x i32> poison, i32 %360, i64 0, !dbg !24
  %530 = insertelement <2 x i32> %529, i32 %332, i64 1, !dbg !24
  %531 = bitcast <2 x i32> %530 to <2 x float>, !dbg !24
  %532 = fsub <2 x float> %528, %531, !dbg !46
  %533 = insertelement <2 x i32> poison, i32 %362, i64 0, !dbg !30
  %534 = insertelement <2 x i32> %533, i32 %390, i64 1, !dbg !30
  %535 = bitcast <2 x i32> %534 to <2 x float>, !dbg !30
  %536 = insertelement <2 x i32> poison, i32 %361, i64 0, !dbg !28
  %537 = insertelement <2 x i32> %536, i32 %398, i64 1, !dbg !28
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !28
  %539 = insertelement <2 x float> poison, float %217, i64 0, !dbg !47
  %540 = insertelement <2 x float> %539, float %409, i64 1, !dbg !47
  %541 = fmul <2 x float> %532, %540, !dbg !47
  %542 = fmul <2 x float> %541, %538, !dbg !48
  %543 = fadd <2 x float> %542, %535, !dbg !49
  %544 = insertelement <2 x i32> poison, i32 %353, i64 0, !dbg !16
  %545 = insertelement <2 x i32> %544, i32 %327, i64 1, !dbg !16
  %546 = bitcast <2 x i32> %545 to <2 x float>, !dbg !16
  %547 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !18
  %548 = insertelement <2 x i32> %547, i32 %328, i64 1, !dbg !18
  %549 = bitcast <2 x i32> %548 to <2 x float>, !dbg !18
  %550 = fadd <2 x float> %546, %549, !dbg !45
  %551 = insertelement <2 x i32> poison, i32 %355, i64 0, !dbg !24
  %552 = insertelement <2 x i32> %551, i32 %329, i64 1, !dbg !24
  %553 = bitcast <2 x i32> %552 to <2 x float>, !dbg !24
  %554 = fsub <2 x float> %550, %553, !dbg !46
  %555 = insertelement <2 x i32> poison, i32 %357, i64 0, !dbg !30
  %556 = insertelement <2 x i32> %555, i32 %389, i64 1, !dbg !30
  %557 = bitcast <2 x i32> %556 to <2 x float>, !dbg !30
  %558 = insertelement <2 x i32> poison, i32 %356, i64 0, !dbg !28
  %559 = insertelement <2 x i32> %558, i32 %397, i64 1, !dbg !28
  %560 = bitcast <2 x i32> %559 to <2 x float>, !dbg !28
  %561 = insertelement <2 x float> poison, float %218, i64 0, !dbg !47
  %562 = insertelement <2 x float> %561, float %410, i64 1, !dbg !47
  %563 = fmul <2 x float> %554, %562, !dbg !47
  %564 = fmul <2 x float> %563, %560, !dbg !48
  %565 = fadd <2 x float> %564, %557, !dbg !49
  %566 = insertelement <2 x i32> poison, i32 %348, i64 0, !dbg !16
  %567 = insertelement <2 x i32> %566, i32 %324, i64 1, !dbg !16
  %568 = bitcast <2 x i32> %567 to <2 x float>, !dbg !16
  %569 = insertelement <2 x i32> poison, i32 %349, i64 0, !dbg !18
  %570 = insertelement <2 x i32> %569, i32 %325, i64 1, !dbg !18
  %571 = bitcast <2 x i32> %570 to <2 x float>, !dbg !18
  %572 = fadd <2 x float> %568, %571, !dbg !45
  %573 = insertelement <2 x i32> poison, i32 %350, i64 0, !dbg !24
  %574 = insertelement <2 x i32> %573, i32 %326, i64 1, !dbg !24
  %575 = bitcast <2 x i32> %574 to <2 x float>, !dbg !24
  %576 = fsub <2 x float> %572, %575, !dbg !46
  %577 = insertelement <2 x i32> poison, i32 %352, i64 0, !dbg !30
  %578 = insertelement <2 x i32> %577, i32 %388, i64 1, !dbg !30
  %579 = bitcast <2 x i32> %578 to <2 x float>, !dbg !30
  %580 = insertelement <2 x i32> poison, i32 %351, i64 0, !dbg !28
  %581 = insertelement <2 x i32> %580, i32 %396, i64 1, !dbg !28
  %582 = bitcast <2 x i32> %581 to <2 x float>, !dbg !28
  %583 = insertelement <2 x float> poison, float %219, i64 0, !dbg !47
  %584 = insertelement <2 x float> %583, float %411, i64 1, !dbg !47
  %585 = fmul <2 x float> %576, %584, !dbg !47
  %586 = fmul <2 x float> %585, %582, !dbg !48
  %587 = fadd <2 x float> %586, %579, !dbg !49
  %shift = shufflevector <2 x float> %433, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %588 = fadd <2 x float> %433, %shift, !dbg !50
  %shift76 = shufflevector <2 x float> %455, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %589 = fadd <2 x float> %455, %shift76, !dbg !50
  %shift77 = shufflevector <2 x float> %477, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %590 = fadd <2 x float> %477, %shift77, !dbg !50
  %shift78 = shufflevector <2 x float> %499, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %591 = fadd <2 x float> %499, %shift78, !dbg !50
  %shift79 = shufflevector <2 x float> %521, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %592 = fadd <2 x float> %521, %shift79, !dbg !50
  %shift80 = shufflevector <2 x float> %543, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %593 = fadd <2 x float> %543, %shift80, !dbg !50
  %shift81 = shufflevector <2 x float> %565, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %594 = fadd <2 x float> %565, %shift81, !dbg !50
  %shift82 = shufflevector <2 x float> %587, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %595 = fadd <2 x float> %587, %shift82, !dbg !50
  %bc = bitcast <2 x float> %418 to <2 x i32>, !dbg !51
  %596 = extractelement <2 x i32> %bc, i64 0, !dbg !51
  %bc83 = bitcast <2 x float> %440 to <2 x i32>, !dbg !51
  %597 = extractelement <2 x i32> %bc83, i64 0, !dbg !51
  %bc84 = bitcast <2 x float> %462 to <2 x i32>, !dbg !51
  %598 = extractelement <2 x i32> %bc84, i64 0, !dbg !51
  %bc85 = bitcast <2 x float> %484 to <2 x i32>, !dbg !51
  %599 = extractelement <2 x i32> %bc85, i64 0, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %596, i32 %597, i32 %598, i32 %599, ptr addrspace(1) %25, i1 true) #3, !dbg !51
  %bc86 = bitcast <2 x float> %506 to <2 x i32>, !dbg !51
  %600 = extractelement <2 x i32> %bc86, i64 0, !dbg !51
  %bc87 = bitcast <2 x float> %528 to <2 x i32>, !dbg !51
  %601 = extractelement <2 x i32> %bc87, i64 0, !dbg !51
  %bc88 = bitcast <2 x float> %550 to <2 x i32>, !dbg !51
  %602 = extractelement <2 x i32> %bc88, i64 0, !dbg !51
  %bc89 = bitcast <2 x float> %572 to <2 x i32>, !dbg !51
  %603 = extractelement <2 x i32> %bc89, i64 0, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %600, i32 %601, i32 %602, i32 %603, ptr addrspace(1) %27, i1 true) #3, !dbg !51
  %bc90 = bitcast <2 x float> %418 to <2 x i32>, !dbg !52
  %604 = extractelement <2 x i32> %bc90, i64 1, !dbg !52
  %bc91 = bitcast <2 x float> %440 to <2 x i32>, !dbg !52
  %605 = extractelement <2 x i32> %bc91, i64 1, !dbg !52
  %bc92 = bitcast <2 x float> %462 to <2 x i32>, !dbg !52
  %606 = extractelement <2 x i32> %bc92, i64 1, !dbg !52
  %bc93 = bitcast <2 x float> %484 to <2 x i32>, !dbg !52
  %607 = extractelement <2 x i32> %bc93, i64 1, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %604, i32 %605, i32 %606, i32 %607, ptr addrspace(1) %36, i1 true) #3, !dbg !52
  %bc94 = bitcast <2 x float> %506 to <2 x i32>, !dbg !52
  %608 = extractelement <2 x i32> %bc94, i64 1, !dbg !52
  %bc95 = bitcast <2 x float> %528 to <2 x i32>, !dbg !52
  %609 = extractelement <2 x i32> %bc95, i64 1, !dbg !52
  %bc96 = bitcast <2 x float> %550 to <2 x i32>, !dbg !52
  %610 = extractelement <2 x i32> %bc96, i64 1, !dbg !52
  %bc97 = bitcast <2 x float> %572 to <2 x i32>, !dbg !52
  %611 = extractelement <2 x i32> %bc97, i64 1, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %608, i32 %609, i32 %610, i32 %611, ptr addrspace(1) %37, i1 true) #3, !dbg !52
  %612 = getelementptr float, ptr addrspace(1) %12, i64 %24, !dbg !53
  %613 = getelementptr float, ptr addrspace(1) %12, i64 %26, !dbg !53
  %bc98 = bitcast <2 x float> %588 to <2 x i32>, !dbg !54
  %614 = extractelement <2 x i32> %bc98, i64 0, !dbg !54
  %bc99 = bitcast <2 x float> %589 to <2 x i32>, !dbg !54
  %615 = extractelement <2 x i32> %bc99, i64 0, !dbg !54
  %bc100 = bitcast <2 x float> %590 to <2 x i32>, !dbg !54
  %616 = extractelement <2 x i32> %bc100, i64 0, !dbg !54
  %bc101 = bitcast <2 x float> %591 to <2 x i32>, !dbg !54
  %617 = extractelement <2 x i32> %bc101, i64 0, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %614, i32 %615, i32 %616, i32 %617, ptr addrspace(1) %612, i1 true) #3, !dbg !54
  %bc102 = bitcast <2 x float> %592 to <2 x i32>, !dbg !54
  %618 = extractelement <2 x i32> %bc102, i64 0, !dbg !54
  %bc103 = bitcast <2 x float> %593 to <2 x i32>, !dbg !54
  %619 = extractelement <2 x i32> %bc103, i64 0, !dbg !54
  %bc104 = bitcast <2 x float> %594 to <2 x i32>, !dbg !54
  %620 = extractelement <2 x i32> %bc104, i64 0, !dbg !54
  %bc105 = bitcast <2 x float> %595 to <2 x i32>, !dbg !54
  %621 = extractelement <2 x i32> %bc105, i64 0, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %618, i32 %619, i32 %620, i32 %621, ptr addrspace(1) %613, i1 true) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxv27cxakc7r3u3l74murtujnhm3452ovq3i4ibe3tl7xdn3hvty.py", directory: "inductor_cache/xv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 31, scope: !7)
!38 = !DILocation(line: 37, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 27, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 27, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 40, column: 18, scope: !7)
!47 = !DILocation(line: 48, column: 19, scope: !7)
!48 = !DILocation(line: 49, column: 20, scope: !7)
!49 = !DILocation(line: 50, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 39, scope: !7)
!52 = !DILocation(line: 61, column: 39, scope: !7)
!53 = !DILocation(line: 62, column: 25, scope: !7)
!54 = !DILocation(line: 62, column: 37, scope: !7)
!55 = !DILocation(line: 62, column: 4, scope: !7)
