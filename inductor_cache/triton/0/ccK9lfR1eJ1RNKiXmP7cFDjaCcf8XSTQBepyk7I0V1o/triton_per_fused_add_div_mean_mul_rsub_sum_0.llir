; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_div_mean_mul_rsub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %13 to float, !dbg !12
  %18 = bitcast i32 %14 to float, !dbg !12
  %19 = bitcast i32 %15 to float, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !14
  %27 = fsub float 0.000000e+00, %17, !dbg !15
  %28 = fsub float 0.000000e+00, %18, !dbg !15
  %29 = fsub float 0.000000e+00, %19, !dbg !15
  %30 = fsub float 0.000000e+00, %20, !dbg !15
  %31 = fmul float %27, 0x3FF7154760000000, !dbg !19
  %32 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %31) #3, !dbg !19
  %33 = fmul float %28, 0x3FF7154760000000, !dbg !19
  %34 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %33) #3, !dbg !19
  %35 = fmul float %29, 0x3FF7154760000000, !dbg !19
  %36 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %35) #3, !dbg !19
  %37 = fmul float %30, 0x3FF7154760000000, !dbg !19
  %38 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %37) #3, !dbg !19
  %39 = fadd float %32, 1.000000e+00, !dbg !20
  %40 = fadd float %34, 1.000000e+00, !dbg !20
  %41 = fadd float %36, 1.000000e+00, !dbg !20
  %42 = fadd float %38, 1.000000e+00, !dbg !20
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %39) #3, !dbg !21
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %40) #3, !dbg !21
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %41) #3, !dbg !21
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %42) #3, !dbg !21
  %47 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !14
  %48 = insertelement <2 x i32> %47, i32 %24, i64 1, !dbg !14
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !14
  %50 = insertelement <2 x float> poison, float %43, i64 0, !dbg !22
  %51 = insertelement <2 x float> %50, float %44, i64 1, !dbg !22
  %52 = fcmp ogt <2 x float> %51, splat (float 0x3EB0C6F7A0000000), !dbg !22
  %53 = fcmp uno <2 x float> %51, zeroinitializer, !dbg !26
  %54 = or <2 x i1> %52, %53, !dbg !27
  %55 = select <2 x i1> %54, <2 x float> %51, <2 x float> splat (float 0x3EB0C6F7A0000000), !dbg !28
  %56 = fcmp olt <2 x float> %55, splat (float 0x3FEFFFFDE0000000), !dbg !29
  %57 = fcmp uno <2 x float> %55, zeroinitializer, !dbg !31
  %58 = or <2 x i1> %56, %57, !dbg !32
  %59 = select <2 x i1> %58, <2 x float> %55, <2 x float> splat (float 0x3FEFFFFDE0000000), !dbg !33
  %60 = fmul <2 x float> %59, %49, !dbg !34
  %61 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !14
  %62 = insertelement <2 x i32> %61, i32 %26, i64 1, !dbg !14
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !14
  %64 = insertelement <2 x float> poison, float %45, i64 0, !dbg !22
  %65 = insertelement <2 x float> %64, float %46, i64 1, !dbg !22
  %66 = fcmp ogt <2 x float> %65, splat (float 0x3EB0C6F7A0000000), !dbg !22
  %67 = fcmp uno <2 x float> %65, zeroinitializer, !dbg !26
  %68 = or <2 x i1> %66, %67, !dbg !27
  %69 = select <2 x i1> %68, <2 x float> %65, <2 x float> splat (float 0x3EB0C6F7A0000000), !dbg !28
  %70 = fcmp olt <2 x float> %69, splat (float 0x3FEFFFFDE0000000), !dbg !29
  %71 = fcmp uno <2 x float> %69, zeroinitializer, !dbg !31
  %72 = or <2 x i1> %70, %71, !dbg !32
  %73 = select <2 x i1> %72, <2 x float> %69, <2 x float> splat (float 0x3FEFFFFDE0000000), !dbg !33
  %74 = fmul <2 x float> %73, %63, !dbg !34
  %shift = shufflevector <2 x float> %60, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %75 = fadd <2 x float> %60, %shift, !dbg !35
  %76 = fadd <2 x float> %75, %74, !dbg !35
  %shift1 = shufflevector <2 x float> %74, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %77 = fadd <2 x float> %76, %shift1, !dbg !35
  %78 = extractelement <2 x float> %77, i64 0, !dbg !35
  %79 = bitcast float %78 to i32, !dbg !38
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 16, i32 31), !dbg !38
  %81 = bitcast i32 %80 to float, !dbg !38
  %82 = fadd float %78, %81, !dbg !35
  %83 = bitcast float %82 to i32, !dbg !38
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 8, i32 31), !dbg !38
  %85 = bitcast i32 %84 to float, !dbg !38
  %86 = fadd float %82, %85, !dbg !35
  %87 = bitcast float %86 to i32, !dbg !38
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 4, i32 31), !dbg !38
  %89 = bitcast i32 %88 to float, !dbg !38
  %90 = fadd float %86, %89, !dbg !35
  %91 = bitcast float %90 to i32, !dbg !38
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !38
  %93 = bitcast i32 %92 to float, !dbg !38
  %94 = fadd float %90, %93, !dbg !35
  %95 = bitcast float %94 to i32, !dbg !38
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 1, i32 31), !dbg !38
  %97 = bitcast i32 %96 to float, !dbg !38
  %98 = fadd float %94, %97, !dbg !35
  %99 = icmp eq i32 %6, 0, !dbg !38
  %100 = and i32 %7, 1, !dbg !38
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !38
  %102 = bitcast float %98 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 %99) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %103 = icmp slt i32 %5, 2, !dbg !38
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !38
  %105 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %104, i1 %103) #3, !dbg !38
  %106 = bitcast i32 %105 to float, !dbg !38
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !38
  %108 = bitcast i32 %107 to float, !dbg !38
  %109 = fadd float %106, %108, !dbg !35
  %110 = and i32 %5, 1, !dbg !38
  %111 = icmp eq i32 %110, 0, !dbg !38
  %112 = and i1 %103, %111, !dbg !38
  %113 = bitcast float %109 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %113, i1 %112) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %114 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %115 = fadd float %114, 0.000000e+00, !dbg !39
  %116 = extractelement <2 x float> %59, i64 0, !dbg !41
  %117 = fsub float 1.000000e+00, %116, !dbg !42
  %118 = extractelement <2 x float> %59, i64 1, !dbg !41
  %119 = fsub float 1.000000e+00, %118, !dbg !42
  %120 = extractelement <2 x float> %73, i64 0, !dbg !41
  %121 = fsub float 1.000000e+00, %120, !dbg !42
  %122 = extractelement <2 x float> %73, i64 1, !dbg !41
  %123 = fsub float 1.000000e+00, %122, !dbg !42
  %124 = bitcast i32 %23 to float, !dbg !43
  %125 = fmul float %117, %124, !dbg !43
  %126 = bitcast i32 %24 to float, !dbg !43
  %127 = fmul float %119, %126, !dbg !43
  %128 = bitcast i32 %25 to float, !dbg !43
  %129 = fmul float %121, %128, !dbg !43
  %130 = bitcast i32 %26 to float, !dbg !43
  %131 = fmul float %123, %130, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %132 = fadd float %125, %127, !dbg !46
  %133 = fadd float %132, %129, !dbg !46
  %134 = fadd float %133, %131, !dbg !46
  %135 = bitcast float %134 to i32, !dbg !44
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !44
  %137 = bitcast i32 %136 to float, !dbg !44
  %138 = fadd float %134, %137, !dbg !46
  %139 = bitcast float %138 to i32, !dbg !44
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !44
  %141 = bitcast i32 %140 to float, !dbg !44
  %142 = fadd float %138, %141, !dbg !46
  %143 = bitcast float %142 to i32, !dbg !44
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !44
  %145 = bitcast i32 %144 to float, !dbg !44
  %146 = fadd float %142, %145, !dbg !46
  %147 = bitcast float %146 to i32, !dbg !44
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !44
  %149 = bitcast i32 %148 to float, !dbg !44
  %150 = fadd float %146, %149, !dbg !46
  %151 = bitcast float %150 to i32, !dbg !44
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !44
  %153 = bitcast i32 %152 to float, !dbg !44
  %154 = fadd float %150, %153, !dbg !46
  %155 = bitcast float %154 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %155, i1 %99) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %156 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %104, i1 %103) #3, !dbg !44
  %157 = bitcast i32 %156 to float, !dbg !44
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !44
  %159 = bitcast i32 %158 to float, !dbg !44
  %160 = fadd float %157, %159, !dbg !46
  %161 = bitcast float %160 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %161, i1 %112) #3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %162 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %163 = fadd float %162, 0.000000e+00, !dbg !47
  %164 = fsub float 1.000000e+00, %124, !dbg !49
  %165 = fsub float 1.000000e+00, %126, !dbg !49
  %166 = fsub float 1.000000e+00, %128, !dbg !49
  %167 = fsub float 1.000000e+00, %130, !dbg !49
  %168 = fmul float %164, %116, !dbg !41
  %169 = fmul float %165, %118, !dbg !41
  %170 = fmul float %166, %120, !dbg !41
  %171 = fmul float %167, %122, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %172 = fadd float %168, %169, !dbg !52
  %173 = fadd float %172, %170, !dbg !52
  %174 = fadd float %173, %171, !dbg !52
  %175 = bitcast float %174 to i32, !dbg !50
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 16, i32 31), !dbg !50
  %177 = bitcast i32 %176 to float, !dbg !50
  %178 = fadd float %174, %177, !dbg !52
  %179 = bitcast float %178 to i32, !dbg !50
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 8, i32 31), !dbg !50
  %181 = bitcast i32 %180 to float, !dbg !50
  %182 = fadd float %178, %181, !dbg !52
  %183 = bitcast float %182 to i32, !dbg !50
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 4, i32 31), !dbg !50
  %185 = bitcast i32 %184 to float, !dbg !50
  %186 = fadd float %182, %185, !dbg !52
  %187 = bitcast float %186 to i32, !dbg !50
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !50
  %189 = bitcast i32 %188 to float, !dbg !50
  %190 = fadd float %186, %189, !dbg !52
  %191 = bitcast float %190 to i32, !dbg !50
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !50
  %193 = bitcast i32 %192 to float, !dbg !50
  %194 = fadd float %190, %193, !dbg !52
  %195 = bitcast float %194 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %195, i1 %99) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %196 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %104, i1 %103) #3, !dbg !50
  %197 = bitcast i32 %196 to float, !dbg !50
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 1, i32 31), !dbg !50
  %199 = bitcast i32 %198 to float, !dbg !50
  %200 = fadd float %197, %199, !dbg !52
  %201 = bitcast float %200 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %201, i1 %112) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %202 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !50
  %203 = fadd float %202, 0.000000e+00, !dbg !53
  %204 = fmul float %115, 2.000000e+00, !dbg !55
  %205 = fadd float %204, %163, !dbg !56
  %206 = fadd float %205, %203, !dbg !57
  %207 = fadd float %206, 0x3EB0C6F7A0000000, !dbg !58
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float %207) #3, !dbg !59
  %209 = fsub float 1.000000e+00, %208, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %urem = and i32 %5, 63, !dbg !62
  %210 = icmp eq i32 %urem, 0, !dbg !62
  %211 = bitcast float %209 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %0, i1 %210) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5blac2kjteyfc7taet3l2w5hy4ruqyldp3qxcpps6jare4msa5y.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_per_fused_add_div_mean_mul_rsub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mean_mul_rsub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mean_mul_rsub_sum_0", linkageName: "triton_per_fused_add_div_mean_mul_rsub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 47, column: 30, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !7, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 47, column: 29, scope: !16, inlinedAt: !18)
!20 = !DILocation(line: 47, column: 20, scope: !16, inlinedAt: !18)
!21 = !DILocation(line: 47, column: 16, scope: !16, inlinedAt: !18)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 35, column: 40, scope: !7)
!26 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 110, column: 15, scope: !23, inlinedAt: !30)
!30 = !DILocation(line: 37, column: 40, scope: !7)
!31 = !DILocation(line: 112, column: 21, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 112, column: 16, scope: !23, inlinedAt: !30)
!33 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !30)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !37)
!36 = distinct !DILexicalBlockFile(scope: !16, file: !17, discriminator: 0)
!37 = !DILocation(line: 40, column: 58, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !16, inlinedAt: !37)
!39 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !40)
!40 = !DILocation(line: 40, column: 45, scope: !7)
!41 = !DILocation(line: 47, column: 19, scope: !7)
!42 = !DILocation(line: 42, column: 20, scope: !7)
!43 = !DILocation(line: 43, column: 20, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !16, inlinedAt: !45)
!45 = !DILocation(line: 45, column: 59, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !45)
!47 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !48)
!48 = !DILocation(line: 45, column: 45, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 267, column: 36, scope: !16, inlinedAt: !51)
!51 = !DILocation(line: 49, column: 59, scope: !7)
!52 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !51)
!53 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !54)
!54 = !DILocation(line: 49, column: 45, scope: !7)
!55 = !DILocation(line: 51, column: 20, scope: !7)
!56 = !DILocation(line: 52, column: 20, scope: !7)
!57 = !DILocation(line: 53, column: 20, scope: !7)
!58 = !DILocation(line: 54, column: 20, scope: !7)
!59 = !DILocation(line: 55, column: 20, scope: !7)
!60 = !DILocation(line: 56, column: 20, scope: !7)
!61 = !DILocation(line: 58, column: 4, scope: !7)
!62 = !DILocation(line: 59, column: 63, scope: !7)
!63 = !DILocation(line: 59, column: 4, scope: !7)
