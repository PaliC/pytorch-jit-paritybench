; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_leaky_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = and i32 %11, 60, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 32, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 4, !dbg !16
  %22 = lshr i32 %8, 4, !dbg !17
  %23 = and i32 %22, 7, !dbg !17
  %24 = or disjoint i32 %21, %12, !dbg !18
  %25 = or disjoint i32 %21, %23, !dbg !18
  %26 = or disjoint i32 %25, 8, !dbg !18
  %27 = icmp slt i32 %24, 16, !dbg !19
  %28 = icmp slt i32 %25, 16, !dbg !19
  %29 = icmp slt i32 %26, 16, !dbg !19
  %30 = sdiv i32 %14, 4, !dbg !20
  %31 = sdiv i32 %15, 4, !dbg !20
  %32 = shl i32 %14, 4, !dbg !21
  %33 = shl i32 %15, 4, !dbg !21
  %34 = add i32 %24, %32, !dbg !22
  %35 = add i32 %24, %33, !dbg !22
  %36 = sext i32 %34 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !23
  %38 = sext i32 %35 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = and i1 %17, %27, !dbg !24
  %41 = and i1 %18, %27, !dbg !24
  %42 = and i1 %19, %28, !dbg !24
  %43 = and i1 %29, %19, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !25
  %54 = sext i32 %30 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %56 = sext i32 %31 to i64, !dbg !26
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #2, !dbg !27
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #2, !dbg !27
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #2, !dbg !27
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #2, !dbg !27
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #2, !dbg !27
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #2, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #2, !dbg !27
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %18) #2, !dbg !27
  %66 = insertelement <8 x i32> poison, i32 %53, i64 0, !dbg !25
  %67 = insertelement <8 x i32> %66, i32 %52, i64 1, !dbg !25
  %68 = insertelement <8 x i32> %67, i32 %51, i64 2, !dbg !25
  %69 = insertelement <8 x i32> %68, i32 %50, i64 3, !dbg !25
  %70 = insertelement <8 x i32> %69, i32 %48, i64 4, !dbg !25
  %71 = insertelement <8 x i32> %70, i32 %47, i64 5, !dbg !25
  %72 = insertelement <8 x i32> %71, i32 %46, i64 6, !dbg !25
  %73 = insertelement <8 x i32> %72, i32 %45, i64 7, !dbg !25
  %74 = bitcast <8 x i32> %73 to <8 x float>, !dbg !25
  %75 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !27
  %76 = insertelement <2 x i32> %75, i32 %61, i64 1, !dbg !27
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !27
  %78 = shufflevector <2 x float> %77, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !27
  %79 = fadd <8 x float> %78, %74, !dbg !28
  %80 = fcmp ogt <8 x float> %79, zeroinitializer, !dbg !29
  %81 = extractelement <8 x float> %79, i64 7, !dbg !30
  %82 = fmul float %81, 0x3FC99999A0000000, !dbg !31
  %83 = extractelement <8 x float> %79, i64 6, !dbg !30
  %84 = fmul float %83, 0x3FC99999A0000000, !dbg !31
  %85 = extractelement <8 x float> %79, i64 5, !dbg !30
  %86 = fmul float %85, 0x3FC99999A0000000, !dbg !31
  %87 = extractelement <8 x float> %79, i64 4, !dbg !30
  %88 = fmul float %87, 0x3FC99999A0000000, !dbg !31
  %89 = extractelement <8 x float> %79, i64 3, !dbg !30
  %90 = fmul float %89, 0x3FC99999A0000000, !dbg !31
  %91 = extractelement <8 x float> %79, i64 2, !dbg !30
  %92 = fmul float %91, 0x3FC99999A0000000, !dbg !31
  %93 = extractelement <8 x float> %79, i64 1, !dbg !30
  %94 = fmul float %93, 0x3FC99999A0000000, !dbg !31
  %95 = extractelement <8 x float> %79, i64 0, !dbg !30
  %96 = fmul float %95, 0x3FC99999A0000000, !dbg !31
  %97 = extractelement <8 x i1> %80, i64 7, !dbg !32
  %98 = select i1 %97, float %81, float %82, !dbg !30
  %99 = extractelement <8 x i1> %80, i64 6, !dbg !32
  %100 = select i1 %99, float %83, float %84, !dbg !30
  %101 = extractelement <8 x i1> %80, i64 5, !dbg !32
  %102 = select i1 %101, float %85, float %86, !dbg !30
  %103 = extractelement <8 x i1> %80, i64 4, !dbg !32
  %104 = select i1 %103, float %87, float %88, !dbg !30
  %105 = extractelement <8 x i1> %80, i64 3, !dbg !32
  %106 = select i1 %105, float %89, float %90, !dbg !30
  %107 = extractelement <8 x i1> %80, i64 2, !dbg !32
  %108 = select i1 %107, float %91, float %92, !dbg !30
  %109 = extractelement <8 x i1> %80, i64 1, !dbg !32
  %110 = select i1 %109, float %93, float %94, !dbg !30
  %111 = extractelement <8 x i1> %80, i64 0, !dbg !32
  %112 = select i1 %111, float %95, float %96, !dbg !30
  %113 = shl i32 %25, 2, !dbg !33
  %114 = shl i32 %26, 2, !dbg !33
  %115 = shl i32 %16, 4, !dbg !34
  %116 = add i32 %113, %115, !dbg !35
  %117 = add i32 %115, %114, !dbg !35
  %118 = sext i32 %116 to i64, !dbg !36
  %119 = getelementptr i1, ptr addrspace(1) %2, i64 %118, !dbg !36
  %120 = sext i32 %117 to i64, !dbg !36
  %121 = getelementptr i1, ptr addrspace(1) %2, i64 %120, !dbg !36
  %122 = zext i1 %97 to i8, !dbg !32
  %123 = zext i1 %99 to i8, !dbg !32
  %124 = zext i1 %101 to i8, !dbg !32
  %125 = zext i1 %103 to i8, !dbg !32
  %126 = zext i1 %105 to i8, !dbg !32
  %127 = zext i1 %107 to i8, !dbg !32
  %128 = zext i1 %109 to i8, !dbg !32
  %129 = zext i1 %111 to i8, !dbg !32
  %130 = shl i32 %8, 8, !dbg !32
  %131 = and i32 %130, 768, !dbg !32
  %132 = or disjoint i32 %131, %10, !dbg !32
  %133 = and i32 %11, 508, !dbg !32
  %134 = lshr exact i32 %131, 4, !dbg !32
  %135 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %134, !dbg !32
  %136 = getelementptr i8, ptr addrspace(3) %135, i32 %132, !dbg !32
  %137 = insertelement <1 x i8> poison, i8 %122, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %136, <1 x i8> %137, i1 true) #2, !dbg !32
  %138 = or disjoint i32 %132, 64, !dbg !32
  %139 = lshr i32 %138, 4, !dbg !32
  %140 = and i32 %139, 52, !dbg !32
  %141 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %140, !dbg !32
  %142 = getelementptr i8, ptr addrspace(3) %141, i32 %138, !dbg !32
  %143 = insertelement <1 x i8> poison, i8 %123, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %142, <1 x i8> %143, i1 true) #2, !dbg !32
  %144 = or disjoint i32 %132, 128, !dbg !32
  %145 = lshr i32 %144, 4, !dbg !32
  %146 = and i32 %145, 56, !dbg !32
  %147 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %146, !dbg !32
  %148 = getelementptr i8, ptr addrspace(3) %147, i32 %144, !dbg !32
  %149 = insertelement <1 x i8> poison, i8 %124, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %148, <1 x i8> %149, i1 true) #2, !dbg !32
  %150 = or disjoint i32 %132, 192, !dbg !32
  %151 = lshr i32 %150, 4, !dbg !32
  %152 = and i32 %151, 60, !dbg !32
  %153 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %152, !dbg !32
  %154 = getelementptr i8, ptr addrspace(3) %153, i32 %150, !dbg !32
  %155 = insertelement <1 x i8> poison, i8 %125, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %154, <1 x i8> %155, i1 true) #2, !dbg !32
  %156 = or disjoint i32 %132, 32, !dbg !32
  %157 = getelementptr i8, ptr addrspace(3) %135, i32 %156, !dbg !32
  %158 = insertelement <1 x i8> poison, i8 %126, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %157, <1 x i8> %158, i1 true) #2, !dbg !32
  %159 = or disjoint i32 %132, 96, !dbg !32
  %160 = lshr i32 %159, 4, !dbg !32
  %161 = and i32 %160, 52, !dbg !32
  %162 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %161, !dbg !32
  %163 = getelementptr i8, ptr addrspace(3) %162, i32 %159, !dbg !32
  %164 = insertelement <1 x i8> poison, i8 %127, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %163, <1 x i8> %164, i1 true) #2, !dbg !32
  %165 = or disjoint i32 %132, 160, !dbg !32
  %166 = lshr i32 %165, 4, !dbg !32
  %167 = and i32 %166, 56, !dbg !32
  %168 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %167, !dbg !32
  %169 = getelementptr i8, ptr addrspace(3) %168, i32 %165, !dbg !32
  %170 = insertelement <1 x i8> poison, i8 %128, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %169, <1 x i8> %170, i1 true) #2, !dbg !32
  %171 = or disjoint i32 %132, 224, !dbg !32
  %172 = lshr i32 %171, 4, !dbg !32
  %173 = and i32 %172, 60, !dbg !32
  %174 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %173, !dbg !32
  %175 = getelementptr i8, ptr addrspace(3) %174, i32 %171, !dbg !32
  %176 = insertelement <1 x i8> poison, i8 %129, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %175, <1 x i8> %176, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %177 = lshr i32 %11, 4, !dbg !32
  %178 = and i32 %177, 28, !dbg !32
  %179 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %178, !dbg !32
  %180 = getelementptr inbounds i8, ptr addrspace(3) %179, i32 %133, !dbg !32
  %181 = load <32 x i1>, ptr addrspace(3) %180, align 4, !dbg !32
  %182 = or disjoint i32 %133, 512, !dbg !32
  %183 = lshr i32 %182, 4, !dbg !32
  %184 = and i32 %183, 60, !dbg !32
  %185 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %184, !dbg !32
  %186 = getelementptr inbounds i8, ptr addrspace(3) %185, i32 %182, !dbg !32
  %187 = load <32 x i1>, ptr addrspace(3) %186, align 4, !dbg !32
  %188 = shufflevector <32 x i1> %181, <32 x i1> poison, <4 x i32> <i32 0, i32 8, i32 16, i32 24>, !dbg !32
  %189 = shufflevector <32 x i1> %187, <32 x i1> poison, <4 x i32> <i32 0, i32 8, i32 16, i32 24>, !dbg !32
  %190 = zext <4 x i1> %188 to <4 x i8>, !dbg !32
  %191 = bitcast <4 x i8> %190 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %191, ptr addrspace(1) %119, i1 %42) #2, !dbg !32
  %192 = zext <4 x i1> %189 to <4 x i8>, !dbg !32
  %193 = bitcast <4 x i8> %192 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %121, i1 %43) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %194 = bitcast float %98 to i32, !dbg !38
  %195 = bitcast float %100 to i32, !dbg !38
  %196 = bitcast float %102 to i32, !dbg !38
  %197 = bitcast float %104 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %194, i32 %195, i32 %196, i32 %197, ptr addrspace(1) %37, i1 %40) #2, !dbg !38
  %198 = bitcast float %106 to i32, !dbg !38
  %199 = bitcast float %108 to i32, !dbg !38
  %200 = bitcast float %110 to i32, !dbg !38
  %201 = bitcast float %112 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %199, i32 %200, i32 %201, ptr addrspace(1) %39, i1 %41) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7cqfwnowe5murzy4swx4xim5ahkvyyw23p7xfqmxg4jxhm7ckbs.py", directory: "inductor_cache/7c")
!4 = !{ptr @triton_poi_fused_leaky_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_3", linkageName: "triton_poi_fused_leaky_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 34, scope: !7)
!24 = !DILocation(line: 32, column: 55, scope: !7)
!25 = !DILocation(line: 32, column: 47, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 32, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 51, scope: !7)
!33 = !DILocation(line: 40, column: 32, scope: !7)
!34 = !DILocation(line: 40, column: 40, scope: !7)
!35 = !DILocation(line: 40, column: 37, scope: !7)
!36 = !DILocation(line: 40, column: 25, scope: !7)
!37 = !DILocation(line: 41, column: 4, scope: !7)
!38 = !DILocation(line: 42, column: 47, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
