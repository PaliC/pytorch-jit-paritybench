; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/ir/cir2ogqxdnfch7jghg3mhfqn4tzwovovbt25pdbdcl5htua4vjjl.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp5 < 343\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused__softmax_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 7, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = lshr i32 %8, 3, !dbg !14
  %10 = and i32 %9, 15, !dbg !14
  %11 = and i32 %8, 128, !dbg !14
  %12 = lshr exact i32 %11, 3, !dbg !14
  %13 = shl i32 %8, 2, !dbg !15
  %14 = and i32 %13, 28, !dbg !15
  %15 = or disjoint i32 %14, 2, !dbg !15
  %16 = shl i32 %8, 9, !dbg !16
  %17 = and i32 %16, 3584, !dbg !16
  %18 = and i32 %9, 15, !dbg !16
  %19 = or disjoint i32 %18, %17, !dbg !16
  %20 = or disjoint i32 %19, %12, !dbg !16
  %21 = and i32 %8, 255, !dbg !16
  %22 = lshr exact i32 %17, 7, !dbg !16
  %23 = add nuw nsw i32 %20, %22, !dbg !16
  %24 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !16
  %25 = or disjoint i32 %20, 128, !dbg !16
  %26 = lshr i32 %25, 7, !dbg !16
  %27 = add nuw nsw i32 %26, %25, !dbg !16
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27, !dbg !16
  %29 = or disjoint i32 %20, 256, !dbg !16
  %30 = lshr i32 %29, 7, !dbg !16
  %31 = add nuw nsw i32 %30, %29, !dbg !16
  %32 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %31, !dbg !16
  %33 = or disjoint i32 %20, 384, !dbg !16
  %34 = lshr i32 %33, 7, !dbg !16
  %35 = add nuw nsw i32 %34, %33, !dbg !16
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %35, !dbg !16
  %37 = or disjoint i32 %20, 32, !dbg !16
  %38 = add nuw nsw i32 %37, %22, !dbg !16
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %38, !dbg !16
  %40 = or disjoint i32 %20, 160, !dbg !16
  %41 = lshr i32 %40, 7, !dbg !16
  %42 = add nuw nsw i32 %41, %40, !dbg !16
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %42, !dbg !16
  %44 = or disjoint i32 %20, 288, !dbg !16
  %45 = lshr i32 %44, 7, !dbg !16
  %46 = add nuw nsw i32 %45, %44, !dbg !16
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %46, !dbg !16
  %48 = or disjoint i32 %20, 416, !dbg !16
  %49 = lshr i32 %48, 7, !dbg !16
  %50 = add nuw nsw i32 %49, %48, !dbg !16
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !16
  %52 = or disjoint i32 %20, 64, !dbg !16
  %53 = add nuw nsw i32 %52, %22, !dbg !16
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %53, !dbg !16
  %55 = or disjoint i32 %20, 192, !dbg !16
  %56 = lshr i32 %55, 7, !dbg !16
  %57 = add nuw nsw i32 %56, %55, !dbg !16
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %57, !dbg !16
  %59 = or disjoint i32 %20, 320, !dbg !16
  %60 = lshr i32 %59, 7, !dbg !16
  %61 = add nuw nsw i32 %60, %59, !dbg !16
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %61, !dbg !16
  %63 = or disjoint i32 %20, 448, !dbg !16
  %64 = lshr i32 %63, 7, !dbg !16
  %65 = add nuw nsw i32 %64, %63, !dbg !16
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %65, !dbg !16
  %67 = or disjoint i32 %20, 96, !dbg !16
  %68 = add nuw nsw i32 %67, %22, !dbg !16
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %68, !dbg !16
  %70 = or disjoint i32 %20, 224, !dbg !16
  %71 = lshr i32 %70, 7, !dbg !16
  %72 = add nuw nsw i32 %71, %70, !dbg !16
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !16
  %74 = or disjoint i32 %20, 352, !dbg !16
  %75 = lshr i32 %74, 7, !dbg !16
  %76 = add nuw nsw i32 %75, %74, !dbg !16
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !16
  %78 = or disjoint i32 %20, 480, !dbg !16
  %79 = lshr i32 %78, 7, !dbg !16
  %80 = add nuw nsw i32 %79, %78, !dbg !16
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80, !dbg !16
  %82 = lshr i32 %21, 7, !dbg !16
  %83 = add nuw nsw i32 %82, %21, !dbg !16
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %83, !dbg !16
  %85 = or disjoint i32 %21, 256, !dbg !16
  %86 = lshr i32 %85, 7, !dbg !16
  %87 = add nuw nsw i32 %86, %85, !dbg !16
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87, !dbg !16
  %89 = or disjoint i32 %21, 512, !dbg !16
  %90 = lshr i32 %89, 7, !dbg !16
  %91 = add nuw nsw i32 %90, %89, !dbg !16
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !16
  %93 = or disjoint i32 %21, 768, !dbg !16
  %94 = lshr i32 %93, 7, !dbg !16
  %95 = add nuw nsw i32 %94, %93, !dbg !16
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !16
  %97 = or disjoint i32 %21, 1024, !dbg !16
  %98 = lshr i32 %97, 7, !dbg !16
  %99 = add nuw nsw i32 %98, %97, !dbg !16
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %99, !dbg !16
  %101 = or disjoint i32 %21, 1280, !dbg !16
  %102 = lshr i32 %101, 7, !dbg !16
  %103 = add nuw nsw i32 %102, %101, !dbg !16
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !16
  %105 = or disjoint i32 %21, 1536, !dbg !16
  %106 = lshr i32 %105, 7, !dbg !16
  %107 = add nuw nsw i32 %106, %105, !dbg !16
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !16
  %109 = or disjoint i32 %21, 1792, !dbg !16
  %110 = lshr i32 %109, 7, !dbg !16
  %111 = add nuw nsw i32 %110, %109, !dbg !16
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !16
  %113 = or disjoint i32 %21, 2048, !dbg !16
  %114 = lshr i32 %113, 7, !dbg !16
  %115 = add nuw nsw i32 %114, %113, !dbg !16
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !16
  %117 = or disjoint i32 %21, 2304, !dbg !16
  %118 = lshr i32 %117, 7, !dbg !16
  %119 = add nuw nsw i32 %118, %117, !dbg !16
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !16
  %121 = or disjoint i32 %21, 2560, !dbg !16
  %122 = lshr i32 %121, 7, !dbg !16
  %123 = add nuw nsw i32 %122, %121, !dbg !16
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %123, !dbg !16
  %125 = or disjoint i32 %21, 2816, !dbg !16
  %126 = lshr i32 %125, 7, !dbg !16
  %127 = add nuw nsw i32 %126, %125, !dbg !16
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !16
  %129 = or disjoint i32 %21, 3072, !dbg !16
  %130 = lshr i32 %129, 7, !dbg !16
  %131 = add nuw nsw i32 %130, %129, !dbg !16
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !16
  %133 = or disjoint i32 %21, 3328, !dbg !16
  %134 = lshr i32 %133, 7, !dbg !16
  %135 = add nuw nsw i32 %134, %133, !dbg !16
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %135, !dbg !16
  %137 = or disjoint i32 %21, 3584, !dbg !16
  %138 = lshr i32 %137, 7, !dbg !16
  %139 = add nuw nsw i32 %138, %137, !dbg !16
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %139, !dbg !16
  %141 = or disjoint i32 %21, 3840, !dbg !16
  %142 = lshr i32 %141, 7, !dbg !16
  %143 = add nuw nsw i32 %142, %141, !dbg !16
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %143, !dbg !16
  %145 = or disjoint i32 %10, %12, !dbg !14
  %146 = or disjoint i32 %145, 32, !dbg !14
  %147 = or disjoint i32 %145, 64, !dbg !14
  %148 = or disjoint i32 %145, 96, !dbg !14
  %149 = insertelement <4 x i32> poison, i32 %7, i64 0, !dbg !17
  %150 = shufflevector <4 x i32> %149, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !17
  %151 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !17
  %152 = insertelement <4 x i32> %151, i32 %146, i64 1, !dbg !17
  %153 = insertelement <4 x i32> %152, i32 %147, i64 2, !dbg !17
  %154 = insertelement <4 x i32> %153, i32 %148, i64 3, !dbg !17
  %155 = or disjoint <4 x i32> %150, %154, !dbg !17
  %156 = icmp slt <4 x i32> %155, splat (i32 512), !dbg !18
  %157 = extractelement <4 x i32> %155, i64 0, !dbg !19
  %.frozen = freeze i32 %157, !dbg !20
  %158 = sdiv i32 %.frozen, 32, !dbg !20
  %159 = mul i32 %158, 32, !dbg !21
  %.decomposed = sub i32 %.frozen, %159, !dbg !21
  %160 = extractelement <4 x i32> %155, i64 1, !dbg !21
  %.frozen86 = freeze i32 %160, !dbg !20
  %161 = sdiv i32 %.frozen86, 32, !dbg !20
  %162 = mul i32 %161, 32, !dbg !21
  %.decomposed87 = sub i32 %.frozen86, %162, !dbg !21
  %163 = extractelement <4 x i32> %155, i64 2, !dbg !21
  %.frozen88 = freeze i32 %163, !dbg !20
  %164 = sdiv i32 %.frozen88, 32, !dbg !20
  %165 = mul i32 %164, 32, !dbg !21
  %.decomposed89 = sub i32 %.frozen88, %165, !dbg !21
  %166 = extractelement <4 x i32> %155, i64 3, !dbg !21
  %.frozen90 = freeze i32 %166, !dbg !20
  %167 = sdiv i32 %.frozen90, 32, !dbg !20
  %168 = mul i32 %167, 32, !dbg !21
  %.decomposed91 = sub i32 %.frozen90, %168, !dbg !21
  %169 = shl i32 %157, 5, !dbg !19
  %170 = shl i32 %160, 5, !dbg !19
  %171 = shl i32 %163, 5, !dbg !19
  %172 = shl i32 %166, 5, !dbg !19
  %173 = or disjoint i32 %169, %14, !dbg !22
  %174 = or disjoint i32 %170, %14, !dbg !22
  %175 = or disjoint i32 %171, %14, !dbg !22
  %176 = or disjoint i32 %172, %14, !dbg !22
  %177 = sext i32 %173 to i64, !dbg !23
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !23
  %179 = sext i32 %174 to i64, !dbg !23
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !23
  %181 = sext i32 %175 to i64, !dbg !23
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !23
  %183 = sext i32 %176 to i64, !dbg !23
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !23
  %185 = extractelement <4 x i1> %156, i64 0, !dbg !24
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185, i32 0, i1 %185) #4, !dbg !16
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !16
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !16
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !16
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !16
  %191 = extractelement <4 x i1> %156, i64 1, !dbg !24
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %180, i1 %191, i32 0, i1 %191, i32 0, i1 %191, i32 0, i1 %191, i32 0, i1 %191) #4, !dbg !16
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !16
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !16
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !16
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !16
  %197 = extractelement <4 x i1> %156, i64 2, !dbg !24
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197, i32 0, i1 %197) #4, !dbg !16
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !16
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !16
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !16
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !16
  %203 = extractelement <4 x i1> %156, i64 3, !dbg !24
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %184, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203, i32 0, i1 %203) #4, !dbg !16
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !16
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !16
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !16
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !16
  %209 = insertelement <1 x i32> poison, i32 %187, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> %209, i1 true) #4, !dbg !16
  %210 = insertelement <1 x i32> poison, i32 %188, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %210, i1 true) #4, !dbg !16
  %211 = insertelement <1 x i32> poison, i32 %189, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %32, <1 x i32> %211, i1 true) #4, !dbg !16
  %212 = insertelement <1 x i32> poison, i32 %190, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %212, i1 true) #4, !dbg !16
  %213 = insertelement <1 x i32> poison, i32 %193, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %213, i1 true) #4, !dbg !16
  %214 = insertelement <1 x i32> poison, i32 %194, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %214, i1 true) #4, !dbg !16
  %215 = insertelement <1 x i32> poison, i32 %195, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %215, i1 true) #4, !dbg !16
  %216 = insertelement <1 x i32> poison, i32 %196, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %216, i1 true) #4, !dbg !16
  %217 = insertelement <1 x i32> poison, i32 %199, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %217, i1 true) #4, !dbg !16
  %218 = insertelement <1 x i32> poison, i32 %200, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %218, i1 true) #4, !dbg !16
  %219 = insertelement <1 x i32> poison, i32 %201, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %219, i1 true) #4, !dbg !16
  %220 = insertelement <1 x i32> poison, i32 %202, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %220, i1 true) #4, !dbg !16
  %221 = insertelement <1 x i32> poison, i32 %205, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %221, i1 true) #4, !dbg !16
  %222 = insertelement <1 x i32> poison, i32 %206, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %222, i1 true) #4, !dbg !16
  %223 = insertelement <1 x i32> poison, i32 %207, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %223, i1 true) #4, !dbg !16
  %224 = insertelement <1 x i32> poison, i32 %208, i64 0, !dbg !16
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %224, i1 true) #4, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !16
  %225 = load float, ptr addrspace(3) %84, align 4, !dbg !16
  %226 = load float, ptr addrspace(3) %88, align 4, !dbg !16
  %227 = load float, ptr addrspace(3) %92, align 4, !dbg !16
  %228 = load float, ptr addrspace(3) %96, align 4, !dbg !16
  %229 = load float, ptr addrspace(3) %100, align 4, !dbg !16
  %230 = load float, ptr addrspace(3) %104, align 4, !dbg !16
  %231 = load float, ptr addrspace(3) %108, align 4, !dbg !16
  %232 = load float, ptr addrspace(3) %112, align 4, !dbg !16
  %233 = load float, ptr addrspace(3) %116, align 4, !dbg !16
  %234 = load float, ptr addrspace(3) %120, align 4, !dbg !16
  %235 = load float, ptr addrspace(3) %124, align 4, !dbg !16
  %236 = load float, ptr addrspace(3) %128, align 4, !dbg !16
  %237 = load float, ptr addrspace(3) %132, align 4, !dbg !16
  %238 = load float, ptr addrspace(3) %136, align 4, !dbg !16
  %239 = load float, ptr addrspace(3) %140, align 4, !dbg !16
  %240 = load float, ptr addrspace(3) %144, align 4, !dbg !16
  %241 = shl nsw i32 %.decomposed, 5, !dbg !25
  %242 = shl nsw i32 %.decomposed87, 5, !dbg !25
  %243 = shl nsw i32 %.decomposed89, 5, !dbg !25
  %244 = shl nsw i32 %.decomposed91, 5, !dbg !25
  %245 = or disjoint i32 %241, %14, !dbg !26
  %246 = or disjoint i32 %241, %15, !dbg !26
  %247 = or disjoint i32 %242, %14, !dbg !26
  %248 = or disjoint i32 %242, %15, !dbg !26
  %249 = or disjoint i32 %243, %14, !dbg !26
  %250 = or disjoint i32 %243, %15, !dbg !26
  %251 = or disjoint i32 %244, %14, !dbg !26
  %252 = or disjoint i32 %244, %15, !dbg !26
  %253 = sext i32 %245 to i64, !dbg !27
  %254 = getelementptr i64, ptr addrspace(1) %1, i64 %253, !dbg !27
  %255 = sext i32 %246 to i64, !dbg !27
  %256 = getelementptr i64, ptr addrspace(1) %1, i64 %255, !dbg !27
  %257 = sext i32 %247 to i64, !dbg !27
  %258 = getelementptr i64, ptr addrspace(1) %1, i64 %257, !dbg !27
  %259 = sext i32 %248 to i64, !dbg !27
  %260 = getelementptr i64, ptr addrspace(1) %1, i64 %259, !dbg !27
  %261 = sext i32 %249 to i64, !dbg !27
  %262 = getelementptr i64, ptr addrspace(1) %1, i64 %261, !dbg !27
  %263 = sext i32 %250 to i64, !dbg !27
  %264 = getelementptr i64, ptr addrspace(1) %1, i64 %263, !dbg !27
  %265 = sext i32 %251 to i64, !dbg !27
  %266 = getelementptr i64, ptr addrspace(1) %1, i64 %265, !dbg !27
  %267 = sext i32 %252 to i64, !dbg !27
  %268 = getelementptr i64, ptr addrspace(1) %1, i64 %267, !dbg !27
  %269 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %254, i1 %185, i1 %185, i1 %185) #4, !dbg !24
  %270 = extractvalue { i64, i64 } %269, 0, !dbg !24
  %271 = extractvalue { i64, i64 } %269, 1, !dbg !24
  %272 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %256, i1 %185, i1 %185, i1 %185) #4, !dbg !24
  %273 = extractvalue { i64, i64 } %272, 0, !dbg !24
  %274 = extractvalue { i64, i64 } %272, 1, !dbg !24
  %275 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %258, i1 %191, i1 %191, i1 %191) #4, !dbg !24
  %276 = extractvalue { i64, i64 } %275, 0, !dbg !24
  %277 = extractvalue { i64, i64 } %275, 1, !dbg !24
  %278 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %260, i1 %191, i1 %191, i1 %191) #4, !dbg !24
  %279 = extractvalue { i64, i64 } %278, 0, !dbg !24
  %280 = extractvalue { i64, i64 } %278, 1, !dbg !24
  %281 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %262, i1 %197, i1 %197, i1 %197) #4, !dbg !24
  %282 = extractvalue { i64, i64 } %281, 0, !dbg !24
  %283 = extractvalue { i64, i64 } %281, 1, !dbg !24
  %284 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %264, i1 %197, i1 %197, i1 %197) #4, !dbg !24
  %285 = extractvalue { i64, i64 } %284, 0, !dbg !24
  %286 = extractvalue { i64, i64 } %284, 1, !dbg !24
  %287 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %266, i1 %203, i1 %203, i1 %203) #4, !dbg !24
  %288 = extractvalue { i64, i64 } %287, 0, !dbg !24
  %289 = extractvalue { i64, i64 } %287, 1, !dbg !24
  %290 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %268, i1 %203, i1 %203, i1 %203) #4, !dbg !24
  %291 = extractvalue { i64, i64 } %290, 0, !dbg !24
  %292 = extractvalue { i64, i64 } %290, 1, !dbg !24
  %293 = insertelement <4 x i64> poison, i64 %270, i64 0, !dbg !28
  %294 = insertelement <4 x i64> %293, i64 %276, i64 1, !dbg !28
  %295 = insertelement <4 x i64> %294, i64 %282, i64 2, !dbg !28
  %296 = insertelement <4 x i64> %295, i64 %288, i64 3, !dbg !28
  %297 = add <4 x i64> %296, splat (i64 343), !dbg !28
  %298 = insertelement <4 x i64> poison, i64 %271, i64 0, !dbg !28
  %299 = insertelement <4 x i64> %298, i64 %277, i64 1, !dbg !28
  %300 = insertelement <4 x i64> %299, i64 %283, i64 2, !dbg !28
  %301 = insertelement <4 x i64> %300, i64 %289, i64 3, !dbg !28
  %302 = add <4 x i64> %301, splat (i64 343), !dbg !28
  %303 = insertelement <4 x i64> poison, i64 %273, i64 0, !dbg !28
  %304 = insertelement <4 x i64> %303, i64 %279, i64 1, !dbg !28
  %305 = insertelement <4 x i64> %304, i64 %285, i64 2, !dbg !28
  %306 = insertelement <4 x i64> %305, i64 %291, i64 3, !dbg !28
  %307 = add <4 x i64> %306, splat (i64 343), !dbg !28
  %308 = insertelement <4 x i64> poison, i64 %274, i64 0, !dbg !28
  %309 = insertelement <4 x i64> %308, i64 %280, i64 1, !dbg !28
  %310 = insertelement <4 x i64> %309, i64 %286, i64 2, !dbg !28
  %311 = insertelement <4 x i64> %310, i64 %292, i64 3, !dbg !28
  %312 = add <4 x i64> %311, splat (i64 343), !dbg !28
  %313 = icmp slt <4 x i64> %296, zeroinitializer, !dbg !29
  %314 = icmp slt <4 x i64> %301, zeroinitializer, !dbg !29
  %315 = icmp slt <4 x i64> %306, zeroinitializer, !dbg !29
  %316 = icmp slt <4 x i64> %311, zeroinitializer, !dbg !29
  %317 = select <4 x i1> %313, <4 x i64> %297, <4 x i64> %296, !dbg !30
  %318 = select <4 x i1> %314, <4 x i64> %302, <4 x i64> %301, !dbg !30
  %319 = select <4 x i1> %315, <4 x i64> %307, <4 x i64> %306, !dbg !30
  %320 = select <4 x i1> %316, <4 x i64> %312, <4 x i64> %311, !dbg !30
  %321 = icmp ugt <4 x i64> %317, splat (i64 342), !dbg !31
  %322 = icmp ugt <4 x i64> %318, splat (i64 342), !dbg !31
  %323 = icmp ugt <4 x i64> %319, splat (i64 342), !dbg !31
  %324 = icmp ugt <4 x i64> %320, splat (i64 342), !dbg !31
  %325 = or <4 x i1> %321, %322, !dbg !32
  %326 = or <4 x i1> %325, %323, !dbg !32
  %327 = or <4 x i1> %324, %326, !dbg !32
  %328 = and <4 x i1> %156, %327, !dbg !32
  %329 = bitcast <4 x i1> %328 to i4, !dbg !32
  %.not = icmp eq i4 %329, 0, !dbg !32
  br i1 %.not, label %331, label %330, !dbg !32

330:                                              ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !32
  unreachable, !dbg !32

331:                                              ; preds = %5
  %332 = and i32 %8, 127, !dbg !14
  %333 = or disjoint i32 %7, %332, !dbg !17
  %334 = icmp slt i32 %333, 512, !dbg !18
  %335 = srem i32 %167, 4, !dbg !33
  %336 = srem i32 %164, 4, !dbg !33
  %337 = srem i32 %161, 4, !dbg !33
  %338 = srem i32 %158, 4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %339 = sext i32 %338 to i64, !dbg !34
  %340 = sext i32 %337 to i64, !dbg !34
  %341 = sext i32 %336 to i64, !dbg !34
  %342 = sext i32 %335 to i64, !dbg !34
  %343 = extractelement <4 x i64> %317, i64 0, !dbg !35
  %.idx = shl i64 %343, 4, !dbg !35
  %344 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !35
  %345 = getelementptr float, ptr addrspace(1) %344, i64 %339, !dbg !35
  %346 = extractelement <4 x i64> %318, i64 0, !dbg !35
  %.idx39 = shl i64 %346, 4, !dbg !35
  %347 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx39, !dbg !35
  %348 = getelementptr float, ptr addrspace(1) %347, i64 %339, !dbg !35
  %349 = extractelement <4 x i64> %319, i64 0, !dbg !35
  %.idx40 = shl i64 %349, 4, !dbg !35
  %350 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx40, !dbg !35
  %351 = getelementptr float, ptr addrspace(1) %350, i64 %339, !dbg !35
  %352 = extractelement <4 x i64> %320, i64 0, !dbg !35
  %.idx41 = shl i64 %352, 4, !dbg !35
  %353 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx41, !dbg !35
  %354 = getelementptr float, ptr addrspace(1) %353, i64 %339, !dbg !35
  %355 = extractelement <4 x i64> %317, i64 1, !dbg !35
  %.idx42 = shl i64 %355, 4, !dbg !35
  %356 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx42, !dbg !35
  %357 = getelementptr float, ptr addrspace(1) %356, i64 %340, !dbg !35
  %358 = extractelement <4 x i64> %318, i64 1, !dbg !35
  %.idx43 = shl i64 %358, 4, !dbg !35
  %359 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx43, !dbg !35
  %360 = getelementptr float, ptr addrspace(1) %359, i64 %340, !dbg !35
  %361 = extractelement <4 x i64> %319, i64 1, !dbg !35
  %.idx44 = shl i64 %361, 4, !dbg !35
  %362 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx44, !dbg !35
  %363 = getelementptr float, ptr addrspace(1) %362, i64 %340, !dbg !35
  %364 = extractelement <4 x i64> %320, i64 1, !dbg !35
  %.idx45 = shl i64 %364, 4, !dbg !35
  %365 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx45, !dbg !35
  %366 = getelementptr float, ptr addrspace(1) %365, i64 %340, !dbg !35
  %367 = extractelement <4 x i64> %317, i64 2, !dbg !35
  %.idx46 = shl i64 %367, 4, !dbg !35
  %368 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx46, !dbg !35
  %369 = getelementptr float, ptr addrspace(1) %368, i64 %341, !dbg !35
  %370 = extractelement <4 x i64> %318, i64 2, !dbg !35
  %.idx47 = shl i64 %370, 4, !dbg !35
  %371 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx47, !dbg !35
  %372 = getelementptr float, ptr addrspace(1) %371, i64 %341, !dbg !35
  %373 = extractelement <4 x i64> %319, i64 2, !dbg !35
  %.idx48 = shl i64 %373, 4, !dbg !35
  %374 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx48, !dbg !35
  %375 = getelementptr float, ptr addrspace(1) %374, i64 %341, !dbg !35
  %376 = extractelement <4 x i64> %320, i64 2, !dbg !35
  %.idx49 = shl i64 %376, 4, !dbg !35
  %377 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx49, !dbg !35
  %378 = getelementptr float, ptr addrspace(1) %377, i64 %341, !dbg !35
  %379 = extractelement <4 x i64> %317, i64 3, !dbg !35
  %.idx50 = shl i64 %379, 4, !dbg !35
  %380 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx50, !dbg !35
  %381 = getelementptr float, ptr addrspace(1) %380, i64 %342, !dbg !35
  %382 = extractelement <4 x i64> %318, i64 3, !dbg !35
  %.idx51 = shl i64 %382, 4, !dbg !35
  %383 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx51, !dbg !35
  %384 = getelementptr float, ptr addrspace(1) %383, i64 %342, !dbg !35
  %385 = extractelement <4 x i64> %319, i64 3, !dbg !35
  %.idx52 = shl i64 %385, 4, !dbg !35
  %386 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx52, !dbg !35
  %387 = getelementptr float, ptr addrspace(1) %386, i64 %342, !dbg !35
  %388 = extractelement <4 x i64> %320, i64 3, !dbg !35
  %.idx53 = shl i64 %388, 4, !dbg !35
  %389 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx53, !dbg !35
  %390 = getelementptr float, ptr addrspace(1) %389, i64 %342, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %391 = ptrtoint ptr addrspace(1) %345 to i64, !dbg !36
  %392 = ptrtoint ptr addrspace(1) %348 to i64, !dbg !36
  %393 = ptrtoint ptr addrspace(1) %351 to i64, !dbg !36
  %394 = ptrtoint ptr addrspace(1) %354 to i64, !dbg !36
  %395 = ptrtoint ptr addrspace(1) %357 to i64, !dbg !36
  %396 = ptrtoint ptr addrspace(1) %360 to i64, !dbg !36
  %397 = ptrtoint ptr addrspace(1) %363 to i64, !dbg !36
  %398 = ptrtoint ptr addrspace(1) %366 to i64, !dbg !36
  %399 = ptrtoint ptr addrspace(1) %369 to i64, !dbg !36
  %400 = ptrtoint ptr addrspace(1) %372 to i64, !dbg !36
  %401 = ptrtoint ptr addrspace(1) %375 to i64, !dbg !36
  %402 = ptrtoint ptr addrspace(1) %378 to i64, !dbg !36
  %403 = ptrtoint ptr addrspace(1) %381 to i64, !dbg !36
  %404 = ptrtoint ptr addrspace(1) %384 to i64, !dbg !36
  %405 = ptrtoint ptr addrspace(1) %387 to i64, !dbg !36
  %406 = ptrtoint ptr addrspace(1) %390 to i64, !dbg !36
  %407 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %23, !dbg !36
  %408 = insertelement <1 x i64> poison, i64 %391, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %407, <1 x i64> %408, i1 true) #4, !dbg !36
  %409 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %27, !dbg !36
  %410 = insertelement <1 x i64> poison, i64 %392, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %409, <1 x i64> %410, i1 true) #4, !dbg !36
  %411 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %31, !dbg !36
  %412 = insertelement <1 x i64> poison, i64 %393, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %411, <1 x i64> %412, i1 true) #4, !dbg !36
  %413 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %35, !dbg !36
  %414 = insertelement <1 x i64> poison, i64 %394, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %413, <1 x i64> %414, i1 true) #4, !dbg !36
  %415 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %38, !dbg !36
  %416 = insertelement <1 x i64> poison, i64 %395, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %415, <1 x i64> %416, i1 true) #4, !dbg !36
  %417 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %42, !dbg !36
  %418 = insertelement <1 x i64> poison, i64 %396, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %417, <1 x i64> %418, i1 true) #4, !dbg !36
  %419 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %46, !dbg !36
  %420 = insertelement <1 x i64> poison, i64 %397, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %419, <1 x i64> %420, i1 true) #4, !dbg !36
  %421 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %50, !dbg !36
  %422 = insertelement <1 x i64> poison, i64 %398, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %421, <1 x i64> %422, i1 true) #4, !dbg !36
  %423 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %53, !dbg !36
  %424 = insertelement <1 x i64> poison, i64 %399, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %423, <1 x i64> %424, i1 true) #4, !dbg !36
  %425 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %57, !dbg !36
  %426 = insertelement <1 x i64> poison, i64 %400, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %425, <1 x i64> %426, i1 true) #4, !dbg !36
  %427 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %61, !dbg !36
  %428 = insertelement <1 x i64> poison, i64 %401, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %427, <1 x i64> %428, i1 true) #4, !dbg !36
  %429 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %65, !dbg !36
  %430 = insertelement <1 x i64> poison, i64 %402, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %429, <1 x i64> %430, i1 true) #4, !dbg !36
  %431 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %68, !dbg !36
  %432 = insertelement <1 x i64> poison, i64 %403, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %431, <1 x i64> %432, i1 true) #4, !dbg !36
  %433 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %72, !dbg !36
  %434 = insertelement <1 x i64> poison, i64 %404, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %433, <1 x i64> %434, i1 true) #4, !dbg !36
  %435 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %76, !dbg !36
  %436 = insertelement <1 x i64> poison, i64 %405, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %435, <1 x i64> %436, i1 true) #4, !dbg !36
  %437 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %80, !dbg !36
  %438 = insertelement <1 x i64> poison, i64 %406, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %437, <1 x i64> %438, i1 true) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %439 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %83, !dbg !36
  %440 = load i64, ptr addrspace(3) %439, align 8, !dbg !36
  %441 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %87, !dbg !36
  %442 = load i64, ptr addrspace(3) %441, align 8, !dbg !36
  %443 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %91, !dbg !36
  %444 = load i64, ptr addrspace(3) %443, align 8, !dbg !36
  %445 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %95, !dbg !36
  %446 = load i64, ptr addrspace(3) %445, align 8, !dbg !36
  %447 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %99, !dbg !36
  %448 = load i64, ptr addrspace(3) %447, align 8, !dbg !36
  %449 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %103, !dbg !36
  %450 = load i64, ptr addrspace(3) %449, align 8, !dbg !36
  %451 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %107, !dbg !36
  %452 = load i64, ptr addrspace(3) %451, align 8, !dbg !36
  %453 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %111, !dbg !36
  %454 = load i64, ptr addrspace(3) %453, align 8, !dbg !36
  %455 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %115, !dbg !36
  %456 = load i64, ptr addrspace(3) %455, align 8, !dbg !36
  %457 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %119, !dbg !36
  %458 = load i64, ptr addrspace(3) %457, align 8, !dbg !36
  %459 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %123, !dbg !36
  %460 = load i64, ptr addrspace(3) %459, align 8, !dbg !36
  %461 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %127, !dbg !36
  %462 = load i64, ptr addrspace(3) %461, align 8, !dbg !36
  %463 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %131, !dbg !36
  %464 = load i64, ptr addrspace(3) %463, align 8, !dbg !36
  %465 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %135, !dbg !36
  %466 = load i64, ptr addrspace(3) %465, align 8, !dbg !36
  %467 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %139, !dbg !36
  %468 = load i64, ptr addrspace(3) %467, align 8, !dbg !36
  %469 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %143, !dbg !36
  %470 = load i64, ptr addrspace(3) %469, align 8, !dbg !36
  %471 = inttoptr i64 %440 to ptr addrspace(1), !dbg !36
  %472 = inttoptr i64 %442 to ptr addrspace(1), !dbg !36
  %473 = inttoptr i64 %444 to ptr addrspace(1), !dbg !36
  %474 = inttoptr i64 %446 to ptr addrspace(1), !dbg !36
  %475 = inttoptr i64 %448 to ptr addrspace(1), !dbg !36
  %476 = inttoptr i64 %450 to ptr addrspace(1), !dbg !36
  %477 = inttoptr i64 %452 to ptr addrspace(1), !dbg !36
  %478 = inttoptr i64 %454 to ptr addrspace(1), !dbg !36
  %479 = inttoptr i64 %456 to ptr addrspace(1), !dbg !36
  %480 = inttoptr i64 %458 to ptr addrspace(1), !dbg !36
  %481 = inttoptr i64 %460 to ptr addrspace(1), !dbg !36
  %482 = inttoptr i64 %462 to ptr addrspace(1), !dbg !36
  %483 = inttoptr i64 %464 to ptr addrspace(1), !dbg !36
  %484 = inttoptr i64 %466 to ptr addrspace(1), !dbg !36
  %485 = inttoptr i64 %468 to ptr addrspace(1), !dbg !36
  %486 = inttoptr i64 %470 to ptr addrspace(1), !dbg !36
  %487 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %471, i1 %334) #4, !dbg !36
  %488 = bitcast i32 %487 to float, !dbg !36
  %489 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %472, i1 %334) #4, !dbg !36
  %490 = bitcast i32 %489 to float, !dbg !36
  %491 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %473, i1 %334) #4, !dbg !36
  %492 = bitcast i32 %491 to float, !dbg !36
  %493 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %474, i1 %334) #4, !dbg !36
  %494 = bitcast i32 %493 to float, !dbg !36
  %495 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %475, i1 %334) #4, !dbg !36
  %496 = bitcast i32 %495 to float, !dbg !36
  %497 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %476, i1 %334) #4, !dbg !36
  %498 = bitcast i32 %497 to float, !dbg !36
  %499 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %477, i1 %334) #4, !dbg !36
  %500 = bitcast i32 %499 to float, !dbg !36
  %501 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %478, i1 %334) #4, !dbg !36
  %502 = bitcast i32 %501 to float, !dbg !36
  %503 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %479, i1 %334) #4, !dbg !36
  %504 = bitcast i32 %503 to float, !dbg !36
  %505 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %480, i1 %334) #4, !dbg !36
  %506 = bitcast i32 %505 to float, !dbg !36
  %507 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %481, i1 %334) #4, !dbg !36
  %508 = bitcast i32 %507 to float, !dbg !36
  %509 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %482, i1 %334) #4, !dbg !36
  %510 = bitcast i32 %509 to float, !dbg !36
  %511 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %483, i1 %334) #4, !dbg !36
  %512 = bitcast i32 %511 to float, !dbg !36
  %513 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %484, i1 %334) #4, !dbg !36
  %514 = bitcast i32 %513 to float, !dbg !36
  %515 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %485, i1 %334) #4, !dbg !36
  %516 = bitcast i32 %515 to float, !dbg !36
  %517 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %486, i1 %334) #4, !dbg !36
  %518 = bitcast i32 %517 to float, !dbg !36
  %519 = fadd float %225, %488, !dbg !37
  %520 = fadd float %226, %490, !dbg !37
  %521 = fadd float %227, %492, !dbg !37
  %522 = fadd float %228, %494, !dbg !37
  %523 = fadd float %229, %496, !dbg !37
  %524 = fadd float %230, %498, !dbg !37
  %525 = fadd float %231, %500, !dbg !37
  %526 = fadd float %232, %502, !dbg !37
  %527 = fadd float %233, %504, !dbg !37
  %528 = fadd float %234, %506, !dbg !37
  %529 = fadd float %235, %508, !dbg !37
  %530 = fadd float %236, %510, !dbg !37
  %531 = fadd float %237, %512, !dbg !37
  %532 = fadd float %238, %514, !dbg !37
  %533 = fadd float %239, %516, !dbg !37
  %534 = fadd float %240, %518, !dbg !37
  %535 = select i1 %334, float %519, float 0xFFF0000000000000, !dbg !38
  %536 = select i1 %334, float %520, float 0xFFF0000000000000, !dbg !38
  %537 = select i1 %334, float %521, float 0xFFF0000000000000, !dbg !38
  %538 = select i1 %334, float %522, float 0xFFF0000000000000, !dbg !38
  %539 = select i1 %334, float %523, float 0xFFF0000000000000, !dbg !38
  %540 = select i1 %334, float %524, float 0xFFF0000000000000, !dbg !38
  %541 = select i1 %334, float %525, float 0xFFF0000000000000, !dbg !38
  %542 = select i1 %334, float %526, float 0xFFF0000000000000, !dbg !38
  %543 = select i1 %334, float %527, float 0xFFF0000000000000, !dbg !38
  %544 = select i1 %334, float %528, float 0xFFF0000000000000, !dbg !38
  %545 = select i1 %334, float %529, float 0xFFF0000000000000, !dbg !38
  %546 = select i1 %334, float %530, float 0xFFF0000000000000, !dbg !38
  %547 = select i1 %334, float %531, float 0xFFF0000000000000, !dbg !38
  %548 = select i1 %334, float %532, float 0xFFF0000000000000, !dbg !38
  %549 = select i1 %334, float %533, float 0xFFF0000000000000, !dbg !38
  %550 = select i1 %334, float %534, float 0xFFF0000000000000, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %551 = fcmp ogt float %535, %536, !dbg !43
  %552 = fcmp uno float %535, 0.000000e+00, !dbg !45
  %553 = or i1 %552, %551, !dbg !46
  %554 = select i1 %553, float %535, float %536, !dbg !47
  %555 = fcmp ogt float %554, %537, !dbg !43
  %556 = fcmp uno float %554, 0.000000e+00, !dbg !45
  %557 = or i1 %555, %556, !dbg !46
  %558 = select i1 %557, float %554, float %537, !dbg !47
  %559 = fcmp ogt float %558, %538, !dbg !43
  %560 = fcmp uno float %558, 0.000000e+00, !dbg !45
  %561 = or i1 %559, %560, !dbg !46
  %562 = select i1 %561, float %558, float %538, !dbg !47
  %563 = fcmp ogt float %562, %539, !dbg !43
  %564 = fcmp uno float %562, 0.000000e+00, !dbg !45
  %565 = or i1 %563, %564, !dbg !46
  %566 = select i1 %565, float %562, float %539, !dbg !47
  %567 = fcmp ogt float %566, %540, !dbg !43
  %568 = fcmp uno float %566, 0.000000e+00, !dbg !45
  %569 = or i1 %567, %568, !dbg !46
  %570 = select i1 %569, float %566, float %540, !dbg !47
  %571 = fcmp ogt float %570, %541, !dbg !43
  %572 = fcmp uno float %570, 0.000000e+00, !dbg !45
  %573 = or i1 %571, %572, !dbg !46
  %574 = select i1 %573, float %570, float %541, !dbg !47
  %575 = fcmp ogt float %574, %542, !dbg !43
  %576 = fcmp uno float %574, 0.000000e+00, !dbg !45
  %577 = or i1 %575, %576, !dbg !46
  %578 = select i1 %577, float %574, float %542, !dbg !47
  %579 = fcmp ogt float %578, %543, !dbg !43
  %580 = fcmp uno float %578, 0.000000e+00, !dbg !45
  %581 = or i1 %579, %580, !dbg !46
  %582 = select i1 %581, float %578, float %543, !dbg !47
  %583 = fcmp ogt float %582, %544, !dbg !43
  %584 = fcmp uno float %582, 0.000000e+00, !dbg !45
  %585 = or i1 %583, %584, !dbg !46
  %586 = select i1 %585, float %582, float %544, !dbg !47
  %587 = fcmp ogt float %586, %545, !dbg !43
  %588 = fcmp uno float %586, 0.000000e+00, !dbg !45
  %589 = or i1 %587, %588, !dbg !46
  %590 = select i1 %589, float %586, float %545, !dbg !47
  %591 = fcmp ogt float %590, %546, !dbg !43
  %592 = fcmp uno float %590, 0.000000e+00, !dbg !45
  %593 = or i1 %591, %592, !dbg !46
  %594 = select i1 %593, float %590, float %546, !dbg !47
  %595 = fcmp ogt float %594, %547, !dbg !43
  %596 = fcmp uno float %594, 0.000000e+00, !dbg !45
  %597 = or i1 %595, %596, !dbg !46
  %598 = select i1 %597, float %594, float %547, !dbg !47
  %599 = fcmp ogt float %598, %548, !dbg !43
  %600 = fcmp uno float %598, 0.000000e+00, !dbg !45
  %601 = or i1 %599, %600, !dbg !46
  %602 = select i1 %601, float %598, float %548, !dbg !47
  %603 = fcmp ogt float %602, %549, !dbg !43
  %604 = fcmp uno float %602, 0.000000e+00, !dbg !45
  %605 = or i1 %603, %604, !dbg !46
  %606 = select i1 %605, float %602, float %549, !dbg !47
  %607 = fcmp ogt float %606, %550, !dbg !43
  %608 = fcmp uno float %606, 0.000000e+00, !dbg !45
  %609 = or i1 %607, %608, !dbg !46
  %610 = select i1 %609, float %606, float %550, !dbg !47
  %611 = lshr i32 %8, 7, !dbg !39
  %612 = and i32 %611, 1, !dbg !39
  %613 = shl nuw nsw i32 %332, 1, !dbg !39
  %614 = or disjoint i32 %613, %612, !dbg !39
  %615 = getelementptr float, ptr addrspace(3) @global_smem, i32 %614, !dbg !39
  %616 = bitcast float %610 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %615, <1 x i32> %616, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %617 = icmp slt i32 %8, 256, !dbg !39
  %618 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !39
  %619 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %618, i1 %617) #4, !dbg !39
  %620 = bitcast i32 %619 to float, !dbg !39
  %621 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %619, i32 1, i32 31), !dbg !39
  %622 = bitcast i32 %621 to float, !dbg !39
  %623 = fcmp ogt float %620, %622, !dbg !43
  %624 = fcmp uno float %620, 0.000000e+00, !dbg !45
  %625 = or i1 %624, %623, !dbg !46
  %626 = and i32 %8, 1, !dbg !39
  %627 = icmp eq i32 %626, 0, !dbg !39
  %628 = and i1 %617, %627, !dbg !39
  %629 = select i1 %625, i32 %619, i32 %621, !dbg !47
  %630 = insertelement <1 x i32> poison, i32 %629, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %618, <1 x i32> %630, i1 %628) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %631 = getelementptr float, ptr addrspace(3) @global_smem, i32 %613, !dbg !39
  %632 = load float, ptr addrspace(3) %631, align 8, !dbg !39
  %633 = fsub float %519, %632, !dbg !48
  %634 = fsub float %520, %632, !dbg !48
  %635 = fsub float %521, %632, !dbg !48
  %636 = fsub float %522, %632, !dbg !48
  %637 = fsub float %523, %632, !dbg !48
  %638 = fsub float %524, %632, !dbg !48
  %639 = fsub float %525, %632, !dbg !48
  %640 = fsub float %526, %632, !dbg !48
  %641 = fsub float %527, %632, !dbg !48
  %642 = fsub float %528, %632, !dbg !48
  %643 = fsub float %529, %632, !dbg !48
  %644 = fsub float %530, %632, !dbg !48
  %645 = fsub float %531, %632, !dbg !48
  %646 = fsub float %532, %632, !dbg !48
  %647 = fsub float %533, %632, !dbg !48
  %648 = fsub float %534, %632, !dbg !48
  %649 = fmul float %633, 0x3FF7154760000000, !dbg !49
  %650 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %649) #4, !dbg !49
  %651 = fmul float %634, 0x3FF7154760000000, !dbg !49
  %652 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %651) #4, !dbg !49
  %653 = fmul float %635, 0x3FF7154760000000, !dbg !49
  %654 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %653) #4, !dbg !49
  %655 = fmul float %636, 0x3FF7154760000000, !dbg !49
  %656 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %655) #4, !dbg !49
  %657 = fmul float %637, 0x3FF7154760000000, !dbg !49
  %658 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %657) #4, !dbg !49
  %659 = fmul float %638, 0x3FF7154760000000, !dbg !49
  %660 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %659) #4, !dbg !49
  %661 = fmul float %639, 0x3FF7154760000000, !dbg !49
  %662 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %661) #4, !dbg !49
  %663 = fmul float %640, 0x3FF7154760000000, !dbg !49
  %664 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %663) #4, !dbg !49
  %665 = fmul float %641, 0x3FF7154760000000, !dbg !49
  %666 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %665) #4, !dbg !49
  %667 = fmul float %642, 0x3FF7154760000000, !dbg !49
  %668 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %667) #4, !dbg !49
  %669 = fmul float %643, 0x3FF7154760000000, !dbg !49
  %670 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %669) #4, !dbg !49
  %671 = fmul float %644, 0x3FF7154760000000, !dbg !49
  %672 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %671) #4, !dbg !49
  %673 = fmul float %645, 0x3FF7154760000000, !dbg !49
  %674 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %673) #4, !dbg !49
  %675 = fmul float %646, 0x3FF7154760000000, !dbg !49
  %676 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %675) #4, !dbg !49
  %677 = fmul float %647, 0x3FF7154760000000, !dbg !49
  %678 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %677) #4, !dbg !49
  %679 = fmul float %648, 0x3FF7154760000000, !dbg !49
  %680 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %679) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %681 = fadd float %650, %652, !dbg !54
  %682 = fadd float %681, %654, !dbg !54
  %683 = fadd float %682, %656, !dbg !54
  %684 = fadd float %683, %658, !dbg !54
  %685 = fadd float %684, %660, !dbg !54
  %686 = fadd float %685, %662, !dbg !54
  %687 = fadd float %686, %664, !dbg !54
  %688 = fadd float %687, %666, !dbg !54
  %689 = fadd float %688, %668, !dbg !54
  %690 = fadd float %689, %670, !dbg !54
  %691 = fadd float %690, %672, !dbg !54
  %692 = fadd float %691, %674, !dbg !54
  %693 = fadd float %692, %676, !dbg !54
  %694 = fadd float %693, %678, !dbg !54
  %695 = fadd float %694, %680, !dbg !54
  %696 = bitcast float %695 to i32, !dbg !50
  %697 = select i1 %334, i32 %696, i32 0, !dbg !54
  %698 = insertelement <1 x i32> poison, i32 %697, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %615, <1 x i32> %698, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %699 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %618, i1 %617) #4, !dbg !50
  %700 = bitcast i32 %699 to float, !dbg !50
  %701 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %699, i32 1, i32 31), !dbg !50
  %702 = bitcast i32 %701 to float, !dbg !50
  %703 = fadd float %700, %702, !dbg !54
  %704 = bitcast float %703 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %618, <1 x i32> %704, i1 %628) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %705 = load float, ptr addrspace(3) %631, align 8, !dbg !50
  %706 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %650, float %705) #4, !dbg !56
  %707 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %652, float %705) #4, !dbg !56
  %708 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %654, float %705) #4, !dbg !56
  %709 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %656, float %705) #4, !dbg !56
  %710 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %658, float %705) #4, !dbg !56
  %711 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %660, float %705) #4, !dbg !56
  %712 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %662, float %705) #4, !dbg !56
  %713 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %664, float %705) #4, !dbg !56
  %714 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %666, float %705) #4, !dbg !56
  %715 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %668, float %705) #4, !dbg !56
  %716 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %670, float %705) #4, !dbg !56
  %717 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %672, float %705) #4, !dbg !56
  %718 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %674, float %705) #4, !dbg !56
  %719 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %676, float %705) #4, !dbg !56
  %720 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %678, float %705) #4, !dbg !56
  %721 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %680, float %705) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %722 = shl i32 %8, 5, !dbg !57
  %723 = and i32 %722, 4064, !dbg !57
  %.lobit54 = lshr exact i32 %11, 7, !dbg !57
  %724 = or disjoint i32 %723, %.lobit54, !dbg !57
  %725 = and i32 %13, 1020, !dbg !57
  %726 = lshr exact i32 %723, 1, !dbg !57
  %727 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %726, !dbg !57
  %728 = getelementptr float, ptr addrspace(3) %727, i32 %724, !dbg !57
  %729 = bitcast float %706 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %728, <1 x i32> %729, i1 true) #4, !dbg !57
  %730 = or disjoint i32 %724, 2, !dbg !57
  %731 = getelementptr float, ptr addrspace(3) %727, i32 %730, !dbg !57
  %732 = bitcast float %707 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %731, <1 x i32> %732, i1 true) #4, !dbg !57
  %733 = or disjoint i32 %724, 4, !dbg !57
  %734 = getelementptr float, ptr addrspace(3) %727, i32 %733, !dbg !57
  %735 = bitcast float %708 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %734, <1 x i32> %735, i1 true) #4, !dbg !57
  %736 = or disjoint i32 %724, 6, !dbg !57
  %737 = getelementptr float, ptr addrspace(3) %727, i32 %736, !dbg !57
  %738 = bitcast float %709 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %737, <1 x i32> %738, i1 true) #4, !dbg !57
  %739 = or disjoint i32 %724, 8, !dbg !57
  %740 = getelementptr float, ptr addrspace(3) %727, i32 %739, !dbg !57
  %741 = bitcast float %710 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %740, <1 x i32> %741, i1 true) #4, !dbg !57
  %742 = or disjoint i32 %724, 10, !dbg !57
  %743 = getelementptr float, ptr addrspace(3) %727, i32 %742, !dbg !57
  %744 = bitcast float %711 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %743, <1 x i32> %744, i1 true) #4, !dbg !57
  %745 = or disjoint i32 %724, 12, !dbg !57
  %746 = getelementptr float, ptr addrspace(3) %727, i32 %745, !dbg !57
  %747 = bitcast float %712 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %746, <1 x i32> %747, i1 true) #4, !dbg !57
  %748 = or disjoint i32 %724, 14, !dbg !57
  %749 = getelementptr float, ptr addrspace(3) %727, i32 %748, !dbg !57
  %750 = bitcast float %713 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %749, <1 x i32> %750, i1 true) #4, !dbg !57
  %751 = or disjoint i32 %724, 16, !dbg !57
  %752 = getelementptr float, ptr addrspace(3) %727, i32 %751, !dbg !57
  %753 = bitcast float %714 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %752, <1 x i32> %753, i1 true) #4, !dbg !57
  %754 = or disjoint i32 %724, 18, !dbg !57
  %755 = getelementptr float, ptr addrspace(3) %727, i32 %754, !dbg !57
  %756 = bitcast float %715 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %755, <1 x i32> %756, i1 true) #4, !dbg !57
  %757 = or disjoint i32 %724, 20, !dbg !57
  %758 = getelementptr float, ptr addrspace(3) %727, i32 %757, !dbg !57
  %759 = bitcast float %716 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %758, <1 x i32> %759, i1 true) #4, !dbg !57
  %760 = or disjoint i32 %724, 22, !dbg !57
  %761 = getelementptr float, ptr addrspace(3) %727, i32 %760, !dbg !57
  %762 = bitcast float %717 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %761, <1 x i32> %762, i1 true) #4, !dbg !57
  %763 = or disjoint i32 %724, 24, !dbg !57
  %764 = getelementptr float, ptr addrspace(3) %727, i32 %763, !dbg !57
  %765 = bitcast float %718 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %764, <1 x i32> %765, i1 true) #4, !dbg !57
  %766 = or disjoint i32 %724, 26, !dbg !57
  %767 = getelementptr float, ptr addrspace(3) %727, i32 %766, !dbg !57
  %768 = bitcast float %719 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %767, <1 x i32> %768, i1 true) #4, !dbg !57
  %769 = or disjoint i32 %724, 28, !dbg !57
  %770 = getelementptr float, ptr addrspace(3) %727, i32 %769, !dbg !57
  %771 = bitcast float %720 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %770, <1 x i32> %771, i1 true) #4, !dbg !57
  %772 = or disjoint i32 %724, 30, !dbg !57
  %773 = getelementptr float, ptr addrspace(3) %727, i32 %772, !dbg !57
  %774 = bitcast float %721 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %773, <1 x i32> %774, i1 true) #4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %775 = lshr i32 %13, 3, !dbg !57
  %776 = and i32 %775, 124, !dbg !57
  %777 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %776, !dbg !57
  %778 = getelementptr inbounds float, ptr addrspace(3) %777, i32 %725, !dbg !57
  %779 = or disjoint i32 %725, 1024, !dbg !57
  %780 = lshr i32 %779, 3, !dbg !57
  %781 = and i32 %780, 252, !dbg !57
  %782 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %781, !dbg !57
  %783 = getelementptr inbounds float, ptr addrspace(3) %782, i32 %779, !dbg !57
  %784 = load <4 x i32>, ptr addrspace(3) %783, align 16, !dbg !57
  %785 = or disjoint i32 %725, 2048, !dbg !57
  %786 = lshr i32 %785, 3, !dbg !57
  %787 = and i32 %786, 380, !dbg !57
  %788 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %787, !dbg !57
  %789 = getelementptr inbounds float, ptr addrspace(3) %788, i32 %785, !dbg !57
  %790 = load <4 x i32>, ptr addrspace(3) %789, align 16, !dbg !57
  %791 = or disjoint i32 %725, 3072, !dbg !57
  %792 = lshr i32 %791, 3, !dbg !57
  %793 = and i32 %792, 508, !dbg !57
  %794 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %793, !dbg !57
  %795 = getelementptr inbounds float, ptr addrspace(3) %794, i32 %791, !dbg !57
  %796 = load <4 x i32>, ptr addrspace(3) %795, align 16, !dbg !57
  %.extract = load i32, ptr addrspace(3) %778, align 16, !dbg !57
  %797 = getelementptr inbounds i8, ptr addrspace(3) %778, i32 4, !dbg !57
  %.extract71 = load i32, ptr addrspace(3) %797, align 4, !dbg !57
  %798 = getelementptr inbounds i8, ptr addrspace(3) %778, i32 8, !dbg !57
  %.extract72 = load i32, ptr addrspace(3) %798, align 8, !dbg !57
  %799 = getelementptr inbounds i8, ptr addrspace(3) %778, i32 12, !dbg !57
  %.extract73 = load i32, ptr addrspace(3) %799, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract71, i32 %.extract72, i32 %.extract73, ptr addrspace(1) %178, i1 %185) #4, !dbg !57
  %.extract74 = extractelement <4 x i32> %784, i64 0, !dbg !57
  %.extract75 = extractelement <4 x i32> %784, i64 1, !dbg !57
  %.extract76 = extractelement <4 x i32> %784, i64 2, !dbg !57
  %.extract77 = extractelement <4 x i32> %784, i64 3, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract74, i32 %.extract75, i32 %.extract76, i32 %.extract77, ptr addrspace(1) %180, i1 %191) #4, !dbg !57
  %.extract78 = extractelement <4 x i32> %790, i64 0, !dbg !57
  %.extract79 = extractelement <4 x i32> %790, i64 1, !dbg !57
  %.extract80 = extractelement <4 x i32> %790, i64 2, !dbg !57
  %.extract81 = extractelement <4 x i32> %790, i64 3, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract78, i32 %.extract79, i32 %.extract80, i32 %.extract81, ptr addrspace(1) %182, i1 %197) #4, !dbg !57
  %.extract82 = extractelement <4 x i32> %796, i64 0, !dbg !57
  %.extract83 = extractelement <4 x i32> %796, i64 1, !dbg !57
  %.extract84 = extractelement <4 x i32> %796, i64 2, !dbg !57
  %.extract85 = extractelement <4 x i32> %796, i64 3, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract82, i32 %.extract83, i32 %.extract84, i32 %.extract85, ptr addrspace(1) %184, i1 %203) #4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cir2ogqxdnfch7jghg3mhfqn4tzwovovbt25pdbdcl5htua4vjjl.py", directory: "inductor_cache/ir")
!4 = !{ptr @triton_per_fused__softmax_add_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_add_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_3", linkageName: "triton_per_fused__softmax_add_3", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 23, column: 33, scope: !11)
!14 = !DILocation(line: 24, column: 44, scope: !11)
!15 = !DILocation(line: 26, column: 34, scope: !11)
!16 = !DILocation(line: 33, column: 47, scope: !11)
!17 = !DILocation(line: 24, column: 23, scope: !11)
!18 = !DILocation(line: 25, column: 21, scope: !11)
!19 = !DILocation(line: 33, column: 42, scope: !11)
!20 = !DILocation(line: 32, column: 21, scope: !11)
!21 = !DILocation(line: 31, column: 19, scope: !11)
!22 = !DILocation(line: 33, column: 39, scope: !11)
!23 = !DILocation(line: 33, column: 34, scope: !11)
!24 = !DILocation(line: 34, column: 43, scope: !11)
!25 = !DILocation(line: 34, column: 38, scope: !11)
!26 = !DILocation(line: 34, column: 35, scope: !11)
!27 = !DILocation(line: 34, column: 30, scope: !11)
!28 = !DILocation(line: 36, column: 18, scope: !11)
!29 = !DILocation(line: 37, column: 18, scope: !11)
!30 = !DILocation(line: 38, column: 32, scope: !11)
!31 = !DILocation(line: 39, column: 37, scope: !11)
!32 = !DILocation(line: 39, column: 62, scope: !11)
!33 = !DILocation(line: 32, column: 27, scope: !11)
!34 = !DILocation(line: 40, column: 35, scope: !11)
!35 = !DILocation(line: 40, column: 30, scope: !11)
!36 = !DILocation(line: 40, column: 44, scope: !11)
!37 = !DILocation(line: 41, column: 18, scope: !11)
!38 = !DILocation(line: 43, column: 34, scope: !11)
!39 = !DILocation(line: 131, column: 29, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !11, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 39, scope: !11)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !42)
!46 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !42)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !42)
!48 = !DILocation(line: 45, column: 19, scope: !11)
!49 = !DILocation(line: 46, column: 24, scope: !11)
!50 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !11, file: !52, discriminator: 0)
!52 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!53 = !DILocation(line: 49, column: 26, scope: !11)
!54 = !DILocation(line: 256, column: 15, scope: !55, inlinedAt: !53)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !52, discriminator: 0)
!56 = !DILocation(line: 50, column: 20, scope: !11)
!57 = !DILocation(line: 51, column: 48, scope: !11)
!58 = !DILocation(line: 51, column: 4, scope: !11)
