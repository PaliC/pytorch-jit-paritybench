; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_gt_mul_sub_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = shl i32 %10, 2, !dbg !15
  %13 = or disjoint i32 %12, 4, !dbg !15
  %14 = sext i32 %12 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %11) #2, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #2, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %11) #2, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %11) #2, !dbg !19
  %26 = or disjoint i32 %12, 1, !dbg !20
  %27 = or disjoint i32 %12, 5, !dbg !20
  %28 = sext i32 %26 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = sext i32 %27 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %11) #2, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %11) #2, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %11) #2, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #2, !dbg !24
  %40 = or disjoint i32 %12, 2, !dbg !25
  %41 = or disjoint i32 %12, 6, !dbg !25
  %42 = sext i32 %40 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = sext i32 %41 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %11) #2, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %11) #2, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %11) #2, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %11) #2, !dbg !29
  %52 = or disjoint i32 %12, 3, !dbg !30
  %53 = or disjoint i32 %12, 7, !dbg !30
  %54 = sext i32 %52 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !31
  %56 = sext i32 %53 to i64, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %11) #2, !dbg !32
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %11) #2, !dbg !32
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !33
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !33
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %11) #2, !dbg !34
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %11) #2, !dbg !34
  %64 = fmul float %33, 2.000000e+00, !dbg !35
  %65 = fmul float %35, 2.000000e+00, !dbg !35
  %66 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !27
  %67 = insertelement <2 x i32> %66, i32 %58, i64 1, !dbg !27
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !27
  %69 = fmul <2 x float> %68, <float 3.000000e+00, float 4.000000e+00>, !dbg !36
  %70 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !27
  %71 = insertelement <2 x i32> %70, i32 %59, i64 1, !dbg !27
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !27
  %73 = fmul <2 x float> %72, <float 3.000000e+00, float 4.000000e+00>, !dbg !36
  %74 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !24
  %75 = insertelement <4 x i32> %74, i32 %24, i64 1, !dbg !24
  %76 = insertelement <4 x i32> %75, i32 %50, i64 2, !dbg !24
  %77 = insertelement <4 x i32> %76, i32 %62, i64 3, !dbg !24
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !24
  %79 = fadd <4 x float> %78, splat (float -1.000000e+00), !dbg !37
  %80 = insertelement <4 x float> poison, float %64, i64 0, !dbg !38
  %81 = insertelement <4 x float> %80, float %19, i64 1, !dbg !38
  %82 = shufflevector <2 x float> %69, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !38
  %83 = shufflevector <4 x float> %81, <4 x float> %82, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !38
  %84 = fcmp ogt <4 x float> %83, %79, !dbg !38
  %85 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !24
  %86 = insertelement <4 x i32> %85, i32 %25, i64 1, !dbg !24
  %87 = insertelement <4 x i32> %86, i32 %51, i64 2, !dbg !24
  %88 = insertelement <4 x i32> %87, i32 %63, i64 3, !dbg !24
  %89 = bitcast <4 x i32> %88 to <4 x float>, !dbg !24
  %90 = fadd <4 x float> %89, splat (float -1.000000e+00), !dbg !37
  %91 = insertelement <4 x float> poison, float %65, i64 0, !dbg !38
  %92 = insertelement <4 x float> %91, float %21, i64 1, !dbg !38
  %93 = shufflevector <2 x float> %73, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !38
  %94 = shufflevector <4 x float> %92, <4 x float> %93, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !38
  %95 = fcmp ogt <4 x float> %94, %90, !dbg !38
  %96 = bitcast <4 x i1> %84 to i4, !dbg !39
  %97 = tail call range(i4 0, 5) i4 @llvm.ctpop.i4(i4 %96), !dbg !39
  %98 = zext nneg i4 %97 to i64, !dbg !39
  %99 = bitcast <4 x i1> %95 to i4, !dbg !39
  %100 = tail call range(i4 0, 5) i4 @llvm.ctpop.i4(i4 %99), !dbg !39
  %101 = zext nneg i4 %100 to i64, !dbg !39
  %102 = sext i32 %10 to i64, !dbg !40
  %103 = getelementptr i64, ptr addrspace(1) %2, i64 %102, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %98, i64 %101, ptr addrspace(1) %103, i1 %11) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i4 @llvm.ctpop.i4(i4) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c32er55l4awta6p4zb6eti24yislbwqvv5hklo76gecpimmtb3dd.py", directory: "inductor_cache/32")
!4 = !{ptr @triton_poi_fused_gt_mul_sub_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_gt_mul_sub_sum_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_gt_mul_sub_sum_1", linkageName: "triton_poi_fused_gt_mul_sub_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 31, scope: !7)
!24 = !DILocation(line: 28, column: 42, scope: !7)
!25 = !DILocation(line: 29, column: 35, scope: !7)
!26 = !DILocation(line: 29, column: 31, scope: !7)
!27 = !DILocation(line: 29, column: 42, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 40, column: 20, scope: !7)
!38 = !DILocation(line: 41, column: 19, scope: !7)
!39 = !DILocation(line: 55, column: 20, scope: !7)
!40 = !DILocation(line: 56, column: 25, scope: !7)
!41 = !DILocation(line: 56, column: 37, scope: !7)
!42 = !DILocation(line: 56, column: 4, scope: !7)
