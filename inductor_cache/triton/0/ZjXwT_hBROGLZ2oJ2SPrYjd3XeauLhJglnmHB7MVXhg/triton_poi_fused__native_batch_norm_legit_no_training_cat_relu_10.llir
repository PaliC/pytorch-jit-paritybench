; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !14
  %18 = insertelement <2 x i32> %17, i32 %15, i64 1, !dbg !14
  %19 = sdiv <2 x i32> %18, splat (i32 64), !dbg !14
  %20 = srem <2 x i32> %19, splat (i32 608), !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %21 = sdiv i32 %.frozen, 38912, !dbg !16
  %.frozen63 = freeze i32 %16, !dbg !16
  %22 = sdiv i32 %.frozen63, 38912, !dbg !16
  %23 = extractelement <2 x i32> %20, i64 1, !dbg !17
  %24 = sext i32 %23 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !18
  %26 = extractelement <2 x i32> %20, i64 0, !dbg !17
  %27 = sext i32 %26 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !21
  %40 = bitcast i32 %39 to float, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !21
  %44 = bitcast i32 %43 to float, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !21
  %46 = bitcast i32 %45 to float, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %48 = bitcast i32 %47 to float, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %50 = bitcast i32 %49 to float, !dbg !21
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %52 = bitcast i32 %51 to float, !dbg !21
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %54 = bitcast i32 %53 to float, !dbg !21
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !22
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !23
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %65 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !24
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %75 = icmp slt <2 x i32> %20, splat (i32 512), !dbg !26
  %76 = mul i32 %21, 38912, !dbg !27
  %srem.decomposed = sub i32 %.frozen, %76, !dbg !27
  %77 = mul i32 %22, 38912, !dbg !27
  %srem1.decomposed = sub i32 %.frozen63, %77, !dbg !27
  %78 = mul nsw i32 %21, 36864, !dbg !28
  %79 = mul nsw i32 %22, 36864, !dbg !28
  %80 = add nsw i32 %78, %srem.decomposed, !dbg !29
  %81 = add nsw i32 %79, %srem1.decomposed, !dbg !29
  %82 = sext i32 %80 to i64, !dbg !30
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !30
  %84 = sext i32 %81 to i64, !dbg !30
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !30
  %86 = extractelement <2 x i1> %75, i64 1, !dbg !31
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #3, !dbg !31
  %88 = extractelement <2 x i1> %75, i64 0, !dbg !31
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #3, !dbg !31
  %90 = mul nsw i32 %21, 34816, !dbg !32
  %91 = mul nsw i32 %22, 34816, !dbg !32
  %92 = add nsw i32 %90, %srem.decomposed, !dbg !33
  %93 = add nsw i32 %91, %srem1.decomposed, !dbg !33
  %94 = sext i32 %92 to i64, !dbg !34
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !34
  %96 = sext i32 %93 to i64, !dbg !34
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !34
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #3, !dbg !35
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #3, !dbg !35
  %100 = and i32 %23, -64, !dbg !36
  %101 = icmp eq i32 %100, 512, !dbg !36
  %102 = and i32 %26, -64, !dbg !36
  %103 = icmp eq i32 %102, 512, !dbg !36
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !37
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !37
  %106 = icmp sgt i32 %23, 575, !dbg !17
  %107 = icmp sgt i32 %26, 575, !dbg !17
  %108 = sext i32 %92 to i64, !dbg !38
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !38
  %110 = getelementptr i8, ptr addrspace(1) %109, i64 -16384, !dbg !38
  %111 = sext i32 %93 to i64, !dbg !38
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !38
  %113 = getelementptr i8, ptr addrspace(1) %112, i64 -16384, !dbg !38
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !39
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #3, !dbg !39
  %116 = fadd float %40, 0x3F50624DE0000000, !dbg !40
  %117 = fadd float %42, 0x3F50624DE0000000, !dbg !40
  %118 = fadd float %44, 0x3F50624DE0000000, !dbg !40
  %119 = fadd float %46, 0x3F50624DE0000000, !dbg !40
  %120 = fadd float %48, 0x3F50624DE0000000, !dbg !40
  %121 = fadd float %50, 0x3F50624DE0000000, !dbg !40
  %122 = fadd float %52, 0x3F50624DE0000000, !dbg !40
  %123 = fadd float %54, 0x3F50624DE0000000, !dbg !40
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %124, 0, !dbg !41
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %125, 0, !dbg !41
  br i1 %.not.i, label %131, label %126, !dbg !41

126:                                              ; preds = %9
  br i1 %.not1.i, label %129, label %127, !dbg !41

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

131:                                              ; preds = %9
  br i1 %.not1.i, label %134, label %132, !dbg !41

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %127, %129, %132, %134
  %.0.i = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !41
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i13 = icmp eq i32 %136, 0, !dbg !41
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i16 = icmp eq i32 %137, 0, !dbg !41
  br i1 %.not.i13, label %143, label %138, !dbg !41

138:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %141, label %139, !dbg !41

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #3, !dbg !41
  br label %__nv_sqrtf.exit17, !dbg !41

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #3, !dbg !41
  br label %__nv_sqrtf.exit17, !dbg !41

143:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %146, label %144, !dbg !41

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #3, !dbg !41
  br label %__nv_sqrtf.exit17, !dbg !41

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #3, !dbg !41
  br label %__nv_sqrtf.exit17, !dbg !41

__nv_sqrtf.exit17:                                ; preds = %139, %141, %144, %146
  %.0.i15 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !41
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i18 = icmp eq i32 %148, 0, !dbg !41
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i21 = icmp eq i32 %149, 0, !dbg !41
  br i1 %.not.i18, label %155, label %150, !dbg !41

150:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %153, label %151, !dbg !41

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !41
  br label %__nv_sqrtf.exit22, !dbg !41

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !41
  br label %__nv_sqrtf.exit22, !dbg !41

155:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %158, label %156, !dbg !41

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !41
  br label %__nv_sqrtf.exit22, !dbg !41

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !41
  br label %__nv_sqrtf.exit22, !dbg !41

__nv_sqrtf.exit22:                                ; preds = %151, %153, %156, %158
  %.0.i20 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !41
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i23 = icmp eq i32 %160, 0, !dbg !41
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i26 = icmp eq i32 %161, 0, !dbg !41
  br i1 %.not.i23, label %167, label %162, !dbg !41

162:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %165, label %163, !dbg !41

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #3, !dbg !41
  br label %__nv_sqrtf.exit27, !dbg !41

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #3, !dbg !41
  br label %__nv_sqrtf.exit27, !dbg !41

167:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %170, label %168, !dbg !41

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #3, !dbg !41
  br label %__nv_sqrtf.exit27, !dbg !41

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #3, !dbg !41
  br label %__nv_sqrtf.exit27, !dbg !41

__nv_sqrtf.exit27:                                ; preds = %163, %165, %168, %170
  %.0.i25 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !41
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i28 = icmp eq i32 %172, 0, !dbg !41
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i31 = icmp eq i32 %173, 0, !dbg !41
  br i1 %.not.i28, label %179, label %174, !dbg !41

174:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %177, label %175, !dbg !41

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !41
  br label %__nv_sqrtf.exit32, !dbg !41

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !41
  br label %__nv_sqrtf.exit32, !dbg !41

179:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %182, label %180, !dbg !41

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !41
  br label %__nv_sqrtf.exit32, !dbg !41

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !41
  br label %__nv_sqrtf.exit32, !dbg !41

__nv_sqrtf.exit32:                                ; preds = %175, %177, %180, %182
  %.0.i30 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !41
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i33 = icmp eq i32 %184, 0, !dbg !41
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i36 = icmp eq i32 %185, 0, !dbg !41
  br i1 %.not.i33, label %191, label %186, !dbg !41

186:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %189, label %187, !dbg !41

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !41
  br label %__nv_sqrtf.exit37, !dbg !41

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !41
  br label %__nv_sqrtf.exit37, !dbg !41

191:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %194, label %192, !dbg !41

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !41
  br label %__nv_sqrtf.exit37, !dbg !41

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !41
  br label %__nv_sqrtf.exit37, !dbg !41

__nv_sqrtf.exit37:                                ; preds = %187, %189, %192, %194
  %.0.i35 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !41
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i38 = icmp eq i32 %196, 0, !dbg !41
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i41 = icmp eq i32 %197, 0, !dbg !41
  br i1 %.not.i38, label %203, label %198, !dbg !41

198:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %201, label %199, !dbg !41

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !41
  br label %__nv_sqrtf.exit42, !dbg !41

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !41
  br label %__nv_sqrtf.exit42, !dbg !41

203:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %206, label %204, !dbg !41

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !41
  br label %__nv_sqrtf.exit42, !dbg !41

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !41
  br label %__nv_sqrtf.exit42, !dbg !41

__nv_sqrtf.exit42:                                ; preds = %199, %201, %204, %206
  %.0.i40 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !41
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i43 = icmp eq i32 %208, 0, !dbg !41
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i46 = icmp eq i32 %209, 0, !dbg !41
  br i1 %.not.i43, label %215, label %210, !dbg !41

210:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %213, label %211, !dbg !41

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !41
  br label %__nv_sqrtf.exit47, !dbg !41

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !41
  br label %__nv_sqrtf.exit47, !dbg !41

215:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %218, label %216, !dbg !41

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !41
  br label %__nv_sqrtf.exit47, !dbg !41

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !41
  br label %__nv_sqrtf.exit47, !dbg !41

__nv_sqrtf.exit47:                                ; preds = %211, %213, %216, %218
  %.0.i45 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !41
  %220 = shufflevector <2 x i1> %75, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !26
  %221 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !31
  %222 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !35
  %223 = icmp slt <2 x i32> %20, splat (i32 576), !dbg !42
  %224 = shufflevector <2 x i1> %223, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !42
  %225 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !37
  %226 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !39
  %227 = insertelement <8 x i32> poison, i32 %36, i64 0, !dbg !19
  %228 = insertelement <8 x i32> %227, i32 %35, i64 1, !dbg !19
  %229 = insertelement <8 x i32> %228, i32 %34, i64 2, !dbg !19
  %230 = insertelement <8 x i32> %229, i32 %33, i64 3, !dbg !19
  %231 = insertelement <8 x i32> %230, i32 %32, i64 4, !dbg !19
  %232 = insertelement <8 x i32> %231, i32 %31, i64 5, !dbg !19
  %233 = insertelement <8 x i32> %232, i32 %30, i64 6, !dbg !19
  %234 = insertelement <8 x i32> %233, i32 %29, i64 7, !dbg !19
  %235 = bitcast <8 x i32> %234 to <8 x float>, !dbg !19
  %236 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !31
  %237 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !35
  %238 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !37
  %239 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !39
  %240 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !31
  %241 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !35
  %242 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !37
  %243 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !39
  %244 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !31
  %245 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !35
  %246 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !37
  %247 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !39
  %248 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !31
  %249 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !35
  %250 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !37
  %251 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !39
  %252 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !31
  %253 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !35
  %254 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !37
  %255 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !39
  %256 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !31
  %257 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !35
  %258 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !37
  %259 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !39
  %260 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !31
  %261 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !35
  %262 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !37
  %263 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !39
  %264 = insertelement <8 x i32> poison, i32 %74, i64 0, !dbg !25
  %265 = insertelement <8 x i32> %264, i32 %73, i64 1, !dbg !25
  %266 = insertelement <8 x i32> %265, i32 %72, i64 2, !dbg !25
  %267 = insertelement <8 x i32> %266, i32 %71, i64 3, !dbg !25
  %268 = insertelement <8 x i32> %267, i32 %70, i64 4, !dbg !25
  %269 = insertelement <8 x i32> %268, i32 %69, i64 5, !dbg !25
  %270 = insertelement <8 x i32> %269, i32 %68, i64 6, !dbg !25
  %271 = insertelement <8 x i32> %270, i32 %67, i64 7, !dbg !25
  %272 = bitcast <8 x i32> %271 to <8 x float>, !dbg !25
  %273 = insertelement <8 x i32> poison, i32 %64, i64 0, !dbg !23
  %274 = insertelement <8 x i32> %273, i32 %63, i64 1, !dbg !23
  %275 = insertelement <8 x i32> %274, i32 %62, i64 2, !dbg !23
  %276 = insertelement <8 x i32> %275, i32 %61, i64 3, !dbg !23
  %277 = insertelement <8 x i32> %276, i32 %60, i64 4, !dbg !23
  %278 = insertelement <8 x i32> %277, i32 %59, i64 5, !dbg !23
  %279 = insertelement <8 x i32> %278, i32 %58, i64 6, !dbg !23
  %280 = insertelement <8 x i32> %279, i32 %57, i64 7, !dbg !23
  %281 = bitcast <8 x i32> %280 to <8 x float>, !dbg !23
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !43
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !43
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !43
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !43
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !43
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !43
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !43
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #3, !dbg !43
  %290 = insertelement <8 x i32> poison, i32 %221, i64 0, !dbg !31
  %291 = insertelement <8 x i32> %290, i32 %236, i64 1, !dbg !31
  %292 = insertelement <8 x i32> %291, i32 %240, i64 2, !dbg !31
  %293 = insertelement <8 x i32> %292, i32 %244, i64 3, !dbg !31
  %294 = insertelement <8 x i32> %293, i32 %248, i64 4, !dbg !31
  %295 = insertelement <8 x i32> %294, i32 %252, i64 5, !dbg !31
  %296 = insertelement <8 x i32> %295, i32 %256, i64 6, !dbg !31
  %297 = insertelement <8 x i32> %296, i32 %260, i64 7, !dbg !31
  %298 = bitcast <8 x i32> %297 to <8 x float>, !dbg !31
  %299 = insertelement <8 x i32> poison, i32 %222, i64 0, !dbg !35
  %300 = insertelement <8 x i32> %299, i32 %237, i64 1, !dbg !35
  %301 = insertelement <8 x i32> %300, i32 %241, i64 2, !dbg !35
  %302 = insertelement <8 x i32> %301, i32 %245, i64 3, !dbg !35
  %303 = insertelement <8 x i32> %302, i32 %249, i64 4, !dbg !35
  %304 = insertelement <8 x i32> %303, i32 %253, i64 5, !dbg !35
  %305 = insertelement <8 x i32> %304, i32 %257, i64 6, !dbg !35
  %306 = insertelement <8 x i32> %305, i32 %261, i64 7, !dbg !35
  %307 = bitcast <8 x i32> %306 to <8 x float>, !dbg !35
  %308 = fadd <8 x float> %298, %307, !dbg !44
  %309 = insertelement <8 x i32> poison, i32 %225, i64 0, !dbg !45
  %310 = insertelement <8 x i32> %309, i32 %238, i64 1, !dbg !45
  %311 = insertelement <8 x i32> %310, i32 %242, i64 2, !dbg !45
  %312 = insertelement <8 x i32> %311, i32 %246, i64 3, !dbg !45
  %313 = insertelement <8 x i32> %312, i32 %250, i64 4, !dbg !45
  %314 = insertelement <8 x i32> %313, i32 %254, i64 5, !dbg !45
  %315 = insertelement <8 x i32> %314, i32 %258, i64 6, !dbg !45
  %316 = insertelement <8 x i32> %315, i32 %262, i64 7, !dbg !45
  %317 = insertelement <8 x i32> poison, i32 %226, i64 0, !dbg !45
  %318 = insertelement <8 x i32> %317, i32 %239, i64 1, !dbg !45
  %319 = insertelement <8 x i32> %318, i32 %243, i64 2, !dbg !45
  %320 = insertelement <8 x i32> %319, i32 %247, i64 3, !dbg !45
  %321 = insertelement <8 x i32> %320, i32 %251, i64 4, !dbg !45
  %322 = insertelement <8 x i32> %321, i32 %255, i64 5, !dbg !45
  %323 = insertelement <8 x i32> %322, i32 %259, i64 6, !dbg !45
  %324 = insertelement <8 x i32> %323, i32 %263, i64 7, !dbg !45
  %325 = select <8 x i1> %224, <8 x i32> %316, <8 x i32> %324, !dbg !45
  %326 = bitcast <8 x i32> %325 to <8 x float>, !dbg !45
  %327 = select <8 x i1> %220, <8 x float> %308, <8 x float> %326, !dbg !46
  %328 = fsub <8 x float> %327, %235, !dbg !47
  %329 = insertelement <8 x float> poison, float %289, i64 0, !dbg !48
  %330 = insertelement <8 x float> %329, float %288, i64 1, !dbg !48
  %331 = insertelement <8 x float> %330, float %287, i64 2, !dbg !48
  %332 = insertelement <8 x float> %331, float %286, i64 3, !dbg !48
  %333 = insertelement <8 x float> %332, float %285, i64 4, !dbg !48
  %334 = insertelement <8 x float> %333, float %284, i64 5, !dbg !48
  %335 = insertelement <8 x float> %334, float %283, i64 6, !dbg !48
  %336 = insertelement <8 x float> %335, float %282, i64 7, !dbg !48
  %337 = fmul <8 x float> %328, %336, !dbg !48
  %338 = fmul <8 x float> %337, %281, !dbg !49
  %339 = fadd <8 x float> %338, %272, !dbg !50
  %340 = fcmp olt <8 x float> %339, zeroinitializer, !dbg !51
  %341 = extractelement <8 x i1> %340, i64 7, !dbg !55
  %342 = extractelement <8 x i1> %340, i64 6, !dbg !55
  %343 = extractelement <8 x i1> %340, i64 5, !dbg !55
  %344 = extractelement <8 x i1> %340, i64 4, !dbg !55
  %345 = extractelement <8 x i1> %340, i64 3, !dbg !55
  %346 = extractelement <8 x i1> %340, i64 2, !dbg !55
  %347 = extractelement <8 x i1> %340, i64 1, !dbg !55
  %348 = extractelement <8 x i1> %340, i64 0, !dbg !55
  %349 = sext i32 %15 to i64, !dbg !56
  %350 = getelementptr float, ptr addrspace(1) %6, i64 %349, !dbg !56
  %351 = sext i32 %16 to i64, !dbg !56
  %352 = getelementptr float, ptr addrspace(1) %6, i64 %351, !dbg !56
  %bc = bitcast <8 x float> %327 to <8 x i32>, !dbg !57
  %353 = extractelement <8 x i32> %bc, i64 7, !dbg !57
  %bc48 = bitcast <8 x float> %327 to <8 x i32>, !dbg !57
  %354 = extractelement <8 x i32> %bc48, i64 6, !dbg !57
  %bc49 = bitcast <8 x float> %327 to <8 x i32>, !dbg !57
  %355 = extractelement <8 x i32> %bc49, i64 5, !dbg !57
  %bc50 = bitcast <8 x float> %327 to <8 x i32>, !dbg !57
  %356 = extractelement <8 x i32> %bc50, i64 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %353, i32 %354, i32 %355, i32 %356, ptr addrspace(1) %350, i1 true) #3, !dbg !57
  %bc51 = bitcast <8 x float> %327 to <8 x i32>, !dbg !57
  %357 = extractelement <8 x i32> %bc51, i64 3, !dbg !57
  %bc52 = bitcast <8 x float> %327 to <8 x i32>, !dbg !57
  %358 = extractelement <8 x i32> %bc52, i64 2, !dbg !57
  %bc53 = bitcast <8 x float> %327 to <8 x i32>, !dbg !57
  %359 = extractelement <8 x i32> %bc53, i64 1, !dbg !57
  %bc54 = bitcast <8 x float> %327 to <8 x i32>, !dbg !57
  %360 = extractelement <8 x i32> %bc54, i64 0, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %357, i32 %358, i32 %359, i32 %360, ptr addrspace(1) %352, i1 true) #3, !dbg !57
  %361 = getelementptr float, ptr addrspace(1) %7, i64 %349, !dbg !58
  %362 = getelementptr float, ptr addrspace(1) %7, i64 %351, !dbg !58
  %bc55 = bitcast <8 x float> %339 to <8 x i32>, !dbg !59
  %363 = extractelement <8 x i32> %bc55, i64 7, !dbg !59
  %364 = select i1 %341, i32 0, i32 %363, !dbg !55
  %bc56 = bitcast <8 x float> %339 to <8 x i32>, !dbg !59
  %365 = extractelement <8 x i32> %bc56, i64 6, !dbg !59
  %366 = select i1 %342, i32 0, i32 %365, !dbg !55
  %bc57 = bitcast <8 x float> %339 to <8 x i32>, !dbg !59
  %367 = extractelement <8 x i32> %bc57, i64 5, !dbg !59
  %368 = select i1 %343, i32 0, i32 %367, !dbg !55
  %bc58 = bitcast <8 x float> %339 to <8 x i32>, !dbg !59
  %369 = extractelement <8 x i32> %bc58, i64 4, !dbg !59
  %370 = select i1 %344, i32 0, i32 %369, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %364, i32 %366, i32 %368, i32 %370, ptr addrspace(1) %361, i1 true) #3, !dbg !59
  %bc59 = bitcast <8 x float> %339 to <8 x i32>, !dbg !59
  %371 = extractelement <8 x i32> %bc59, i64 3, !dbg !59
  %372 = select i1 %345, i32 0, i32 %371, !dbg !55
  %bc60 = bitcast <8 x float> %339 to <8 x i32>, !dbg !59
  %373 = extractelement <8 x i32> %bc60, i64 2, !dbg !59
  %374 = select i1 %346, i32 0, i32 %373, !dbg !55
  %bc61 = bitcast <8 x float> %339 to <8 x i32>, !dbg !59
  %375 = extractelement <8 x i32> %bc61, i64 1, !dbg !59
  %376 = select i1 %347, i32 0, i32 %375, !dbg !55
  %bc62 = bitcast <8 x float> %339 to <8 x i32>, !dbg !59
  %377 = extractelement <8 x i32> %bc62, i64 0, !dbg !59
  %378 = select i1 %348, i32 0, i32 %377, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %372, i32 %374, i32 %376, i32 %378, ptr addrspace(1) %362, i1 true) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyiakctxgxx6jyuw3xudfi2i4vnijqfy3vayf7igxfubjeosv7rz.py", directory: "inductor_cache/yi")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 52, column: 21, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 51, scope: !7)
!29 = !DILocation(line: 37, column: 45, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 56, scope: !7)
!32 = !DILocation(line: 38, column: 51, scope: !7)
!33 = !DILocation(line: 38, column: 45, scope: !7)
!34 = !DILocation(line: 38, column: 30, scope: !7)
!35 = !DILocation(line: 38, column: 56, scope: !7)
!36 = !DILocation(line: 50, column: 20, scope: !7)
!37 = !DILocation(line: 51, column: 74, scope: !7)
!38 = !DILocation(line: 56, column: 31, scope: !7)
!39 = !DILocation(line: 56, column: 84, scope: !7)
!40 = !DILocation(line: 63, column: 20, scope: !7)
!41 = !DILocation(line: 64, column: 27, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 66, column: 20, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 57, column: 35, scope: !7)
!46 = !DILocation(line: 0, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 69, column: 20, scope: !7)
!49 = !DILocation(line: 70, column: 20, scope: !7)
!50 = !DILocation(line: 71, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 73, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 74, column: 25, scope: !7)
!57 = !DILocation(line: 74, column: 37, scope: !7)
!58 = !DILocation(line: 75, column: 25, scope: !7)
!59 = !DILocation(line: 75, column: 37, scope: !7)
!60 = !DILocation(line: 75, column: 4, scope: !7)
