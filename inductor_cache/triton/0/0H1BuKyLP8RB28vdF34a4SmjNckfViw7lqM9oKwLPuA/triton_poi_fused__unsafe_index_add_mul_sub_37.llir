; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 510, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %16 = sdiv i32 %.frozen, 32, !dbg !14
  %17 = srem i32 %16, 32, !dbg !15
  %18 = mul i32 %16, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = sdiv i32 %15, 1024, !dbg !17
  %.frozen1 = freeze i32 %15, !dbg !18
  %20 = sdiv i32 %.frozen1, 131072, !dbg !18
  %21 = mul i32 %20, 131072, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %21, !dbg !19
  %22 = sext i32 %17 to i64, !dbg !20
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %26 = sext i32 %.decomposed to i64, !dbg !22
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !22
  %28 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !23
  %29 = extractvalue { i64, i64 } %28, 0, !dbg !23
  %30 = extractvalue { i64, i64 } %28, 1, !dbg !23
  %31 = getelementptr i64, ptr addrspace(1) %3, i64 %26, !dbg !24
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !25
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !25
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !26
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !27
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !27
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !27
  %39 = getelementptr i64, ptr addrspace(1) %5, i64 %22, !dbg !28
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !29
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !30
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !31
  %44 = bitcast i32 %43 to float, !dbg !31
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !31
  %46 = bitcast i32 %45 to float, !dbg !31
  %47 = lshr i64 %24, 59, !dbg !32
  %48 = and i64 %47, 16, !dbg !32
  %49 = add i64 %48, %24, !dbg !32
  %50 = lshr i64 %29, 59, !dbg !33
  %51 = and i64 %50, 16, !dbg !33
  %52 = lshr i64 %30, 59, !dbg !33
  %53 = and i64 %52, 16, !dbg !33
  %54 = shl i64 %49, 4, !dbg !34
  %55 = shl nsw i32 %19, 8, !dbg !35
  %56 = sext i32 %55 to i64, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !37
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %51, !dbg !37
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %54, !dbg !37
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %56, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %53, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %54, !dbg !37
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %56, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !38
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !38
  %67 = lshr i64 %33, 59, !dbg !39
  %68 = and i64 %67, 16, !dbg !39
  %69 = lshr i64 %34, 59, !dbg !39
  %70 = and i64 %69, 16, !dbg !39
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !40
  %72 = getelementptr float, ptr addrspace(1) %71, i64 %68, !dbg !40
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %54, !dbg !40
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %56, !dbg !40
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !40
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %70, !dbg !40
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %54, !dbg !40
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %56, !dbg !40
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !41
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !41
  %81 = lshr i64 %40, 59, !dbg !42
  %82 = and i64 %81, 16, !dbg !42
  %83 = add i64 %82, %40, !dbg !42
  %84 = shl i64 %83, 4, !dbg !43
  %85 = getelementptr float, ptr addrspace(1) %58, i64 %84, !dbg !44
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %56, !dbg !44
  %87 = getelementptr float, ptr addrspace(1) %62, i64 %84, !dbg !44
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %56, !dbg !44
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !45
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !45
  %91 = getelementptr float, ptr addrspace(1) %72, i64 %84, !dbg !46
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %56, !dbg !46
  %93 = getelementptr float, ptr addrspace(1) %76, i64 %84, !dbg !46
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %56, !dbg !46
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !47
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !47
  %97 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !45
  %98 = insertelement <2 x i32> %97, i32 %65, i64 1, !dbg !45
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !45
  %100 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !47
  %101 = insertelement <2 x i32> %100, i32 %79, i64 1, !dbg !47
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !47
  %103 = fsub <2 x float> %102, %99, !dbg !48
  %104 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !49
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !49
  %106 = shufflevector <2 x float> %105, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %107 = fmul <2 x float> %103, %106, !dbg !49
  %108 = fadd <2 x float> %107, %99, !dbg !50
  %109 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !45
  %110 = insertelement <2 x i32> %109, i32 %66, i64 1, !dbg !45
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !45
  %112 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !47
  %113 = insertelement <2 x i32> %112, i32 %80, i64 1, !dbg !47
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !47
  %115 = fsub <2 x float> %114, %111, !dbg !48
  %116 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !49
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !49
  %118 = shufflevector <2 x float> %117, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %119 = fmul <2 x float> %115, %118, !dbg !49
  %120 = fadd <2 x float> %119, %111, !dbg !50
  %121 = extractelement <2 x float> %108, i64 0, !dbg !51
  %122 = extractelement <2 x float> %108, i64 1, !dbg !52
  %123 = fsub float %121, %122, !dbg !51
  %124 = extractelement <2 x float> %120, i64 0, !dbg !51
  %125 = extractelement <2 x float> %120, i64 1, !dbg !52
  %126 = fsub float %124, %125, !dbg !51
  %127 = fmul float %123, %44, !dbg !53
  %128 = fmul float %126, %46, !dbg !53
  %129 = fadd float %122, %127, !dbg !52
  %130 = fadd float %125, %128, !dbg !52
  %131 = mul i32 %20, 327680, !dbg !54
  %132 = add i32 %131, %.decomposed2, !dbg !55
  %133 = sext i32 %132 to i64, !dbg !56
  %134 = getelementptr float, ptr addrspace(1) %7, i64 %133, !dbg !56
  %135 = bitcast float %129 to i32, !dbg !57
  %136 = bitcast float %130 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %135, i32 %136, ptr addrspace(1) %134, i1 true) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnwdrlo46b3i5v6n6z6yjcmvlm6dbo5qwdjes6p2j3rzgkz6yeds.py", directory: "inductor_cache/nw")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_37, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_37", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 31, scope: !7)
!29 = !DILocation(line: 34, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 42, column: 32, scope: !7)
!34 = !DILocation(line: 43, column: 40, scope: !7)
!35 = !DILocation(line: 43, column: 51, scope: !7)
!36 = !DILocation(line: 43, column: 47, scope: !7)
!37 = !DILocation(line: 43, column: 30, scope: !7)
!38 = !DILocation(line: 43, column: 56, scope: !7)
!39 = !DILocation(line: 46, column: 35, scope: !7)
!40 = !DILocation(line: 47, column: 31, scope: !7)
!41 = !DILocation(line: 47, column: 58, scope: !7)
!42 = !DILocation(line: 53, column: 35, scope: !7)
!43 = !DILocation(line: 54, column: 41, scope: !7)
!44 = !DILocation(line: 54, column: 31, scope: !7)
!45 = !DILocation(line: 54, column: 58, scope: !7)
!46 = !DILocation(line: 55, column: 31, scope: !7)
!47 = !DILocation(line: 55, column: 59, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 37, scope: !7)
!55 = !DILocation(line: 62, column: 30, scope: !7)
!56 = !DILocation(line: 62, column: 25, scope: !7)
!57 = !DILocation(line: 62, column: 49, scope: !7)
!58 = !DILocation(line: 62, column: 4, scope: !7)
