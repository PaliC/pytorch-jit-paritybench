#loc = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":19:0)
#loc1 = loc(unknown)
#loc24 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":38:25)
#loc31 = loc(callsite(#loc1 at #loc24))
module {
  tt.func public @triton_red_fused_mean_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":19:0)) attributes {noinline = false} {
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<65536> : tensor<64x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<512> : tensor<1x8xi32> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<1x8xi32> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x8xf32> loc(#loc1)
    %cst_3 = arith.constant dense<512> : tensor<64x1xi32> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32> -> tensor<64x1xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<64x1xi32> loc(#loc6)
    %6 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc7)
    %7 = tt.expand_dims %6 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc8)
    %8 = arith.remsi %5, %cst_3 : tensor<64x1xi32> loc(#loc9)
    %9 = arith.divsi %5, %cst_3 : tensor<64x1xi32> loc(#loc10)
    %10 = tt.broadcast %8 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc11)
    %11 = arith.muli %9, %cst : tensor<64x1xi32> loc(#loc12)
    %12 = tt.broadcast %11 : tensor<64x1xi32> -> tensor<64x8xi32> loc(#loc13)
    %13 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>> loc(#loc14)
    %14 = scf.for %arg4 = %c0_i32 to %c128_i32 step %c8_i32 iter_args(%arg5 = %cst_2) -> (tensor<64x8xf32>)  : i32 {
      %19 = tt.splat %arg4 : i32 -> tensor<1x8xi32> loc(#loc16)
      %20 = arith.addi %19, %7 : tensor<1x8xi32> loc(#loc16)
      %21 = arith.cmpi slt, %20, %cst_1 : tensor<1x8xi32> loc(#loc17)
      %22 = arith.muli %20, %cst_0 : tensor<1x8xi32> loc(#loc18)
      %23 = tt.broadcast %22 : tensor<1x8xi32> -> tensor<64x8xi32> loc(#loc11)
      %24 = arith.addi %10, %23 : tensor<64x8xi32> loc(#loc11)
      %25 = arith.addi %24, %12 : tensor<64x8xi32> loc(#loc13)
      %26 = tt.addptr %13, %25 : tensor<64x8x!tt.ptr<f32>>, tensor<64x8xi32> loc(#loc14)
      %27 = tt.broadcast %21 : tensor<1x8xi1> -> tensor<64x8xi1> loc(#loc19)
      %28 = tt.load %26, %27, %cst_2 evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>> loc(#loc19)
      %29 = arith.addf %arg5, %28 : tensor<64x8xf32> loc(#loc20)
      %30 = arith.select %27, %29, %arg5 : tensor<64x8xi1>, tensor<64x8xf32> loc(#loc21)
      scf.yield %30 : tensor<64x8xf32> loc(#loc22)
    } loc(#loc15)
    %15 = "tt.reduce"(%14) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc24)), %arg5: f32 loc(callsite(#loc1 at #loc24))):
      %19 = arith.addf %arg4, %arg5 : f32 loc(#loc33)
      tt.reduce.return %19 : f32 loc(#loc30)
    }) : (tensor<64x8xf32>) -> tensor<64xf32> loc(#loc30)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<64xf32> -> tensor<64x1xf32> loc(#loc26)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>> loc(#loc27)
    %18 = tt.addptr %17, %5 : tensor<64x1x!tt.ptr<f32>>, tensor<64x1xi32> loc(#loc27)
    tt.store %18, %16 : tensor<64x1x!tt.ptr<f32>> loc(#loc28)
    tt.return loc(#loc29)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":22:28)
#loc3 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":22:33)
#loc4 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":23:36)
#loc5 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":23:44)
#loc6 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":23:23)
#loc7 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":25:25)
#loc8 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":25:33)
#loc9 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":26:19)
#loc10 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":27:19)
#loc11 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":34:39)
#loc12 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":34:54)
#loc13 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":34:48)
#loc14 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":34:34)
#loc15 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":30:36)
#loc16 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":31:27)
#loc17 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":32:25)
#loc18 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":34:43)
#loc19 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":34:59)
#loc20 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":36:23)
#loc21 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":37:38)
#loc22 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":37:8)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc26 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":38:28)
#loc27 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":39:25)
#loc28 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":39:36)
#loc29 = loc("inductor_cache/na/cnaehdawondqadha7vo3fxpnm5g5sfu4sgsmo54zcnxn63lsfhk6.py":39:4)
#loc30 = loc(callsite(#loc23 at #loc24))
#loc32 = loc(callsite(#loc25 at #loc23))
#loc33 = loc(callsite(#loc32 at #loc24))
