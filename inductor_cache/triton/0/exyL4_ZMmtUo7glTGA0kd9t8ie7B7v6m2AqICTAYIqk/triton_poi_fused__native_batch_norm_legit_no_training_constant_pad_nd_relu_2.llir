; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 13824, !dbg !14
  %16 = srem i32 %13, 6, !dbg !15
  %17 = srem i32 %14, 6, !dbg !15
  %18 = sdiv i32 %13, 216, !dbg !16
  %19 = srem i32 %18, 16, !dbg !17
  %20 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !18
  %21 = shufflevector <2 x i32> %20, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %22 = sdiv <2 x i32> %21, <i32 36, i32 6>, !dbg !18
  %23 = srem <2 x i32> %22, splat (i32 6), !dbg !19
  %24 = add nsw <2 x i32> %23, splat (i32 -1), !dbg !20
  %shift = shufflevector <2 x i32> %24, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %25 = or <2 x i32> %24, %shift, !dbg !21
  %26 = extractelement <2 x i32> %25, i64 0, !dbg !21
  %27 = add nsw i32 %16, -1, !dbg !22
  %28 = or i32 %26, %27, !dbg !22
  %29 = icmp ult i32 %28, 4, !dbg !22
  %30 = add nsw i32 %17, -1, !dbg !22
  %31 = or i32 %26, %30, !dbg !22
  %32 = icmp ult i32 %31, 4, !dbg !22
  %33 = extractelement <2 x i32> %23, i64 1, !dbg !23
  %34 = shl nsw i32 %33, 2, !dbg !23
  %35 = extractelement <2 x i32> %23, i64 0, !dbg !24
  %36 = shl nsw i32 %35, 4, !dbg !24
  %37 = shl nsw i32 %18, 6, !dbg !25
  %38 = add nsw i32 %37, -21, !dbg !26
  %39 = add nsw i32 %38, %16, !dbg !27
  %40 = add nsw i32 %39, %34, !dbg !28
  %41 = add nsw i32 %40, %36, !dbg !29
  %42 = add nsw i32 %38, %17, !dbg !27
  %43 = add nsw i32 %42, %34, !dbg !28
  %44 = add nsw i32 %43, %36, !dbg !29
  %45 = sext i32 %41 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !30
  %47 = sext i32 %44 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !30
  %49 = and i1 %15, %29, !dbg !31
  %50 = and i1 %15, %32, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %49, i32 0, i1 %49) #3, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %50, i32 0, i1 %50) #3, !dbg !32
  %53 = sext i32 %19 to i64, !dbg !33
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %49, i32 0, i1 %49) #3, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %50, i32 0, i1 %50) #3, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %49, i32 0, i1 %49) #3, !dbg !36
  %59 = bitcast i32 %58 to float, !dbg !36
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %50, i32 0, i1 %50) #3, !dbg !36
  %61 = bitcast i32 %60 to float, !dbg !36
  %62 = fadd float %59, 0x3EE4F8B580000000, !dbg !37
  %63 = fadd float %61, 0x3EE4F8B580000000, !dbg !37
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %64, 0, !dbg !38
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %65, 0, !dbg !38
  br i1 %.not.i, label %71, label %66, !dbg !38

66:                                               ; preds = %7
  br i1 %.not1.i, label %69, label %67, !dbg !38

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

71:                                               ; preds = %7
  br i1 %.not1.i, label %74, label %72, !dbg !38

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !38
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %76, 0, !dbg !38
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %77, 0, !dbg !38
  br i1 %.not.i1, label %83, label %78, !dbg !38

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !38

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !38

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %79, %81, %84, %86
  %.0.i3 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !38
  %88 = bitcast i32 %52 to float, !dbg !32
  %89 = bitcast i32 %56 to float, !dbg !34
  %90 = fsub float %88, %89, !dbg !39
  %91 = bitcast i32 %51 to float, !dbg !32
  %92 = bitcast i32 %55 to float, !dbg !34
  %93 = fsub float %91, %92, !dbg !39
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %96 = fmul float %93, %94, !dbg !41
  %97 = fmul float %90, %95, !dbg !41
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !42
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %49, i32 0, i1 %49) #3, !dbg !43
  %100 = bitcast i32 %99 to float, !dbg !43
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %50, i32 0, i1 %50) #3, !dbg !43
  %102 = bitcast i32 %101 to float, !dbg !43
  %103 = fmul float %96, %100, !dbg !44
  %104 = fmul float %97, %102, !dbg !44
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !45
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %49, i32 0, i1 %49) #3, !dbg !46
  %107 = bitcast i32 %106 to float, !dbg !46
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %50, i32 0, i1 %50) #3, !dbg !46
  %109 = bitcast i32 %108 to float, !dbg !46
  %110 = fadd float %103, %107, !dbg !47
  %111 = fadd float %104, %109, !dbg !47
  %112 = fcmp olt float %110, 0.000000e+00, !dbg !48
  %113 = fcmp olt float %111, 0.000000e+00, !dbg !48
  %114 = select i1 %112, float 0.000000e+00, float %110, !dbg !52
  %115 = select i1 %113, float 0.000000e+00, float %111, !dbg !52
  %116 = sext i32 %13 to i64, !dbg !53
  %117 = getelementptr float, ptr addrspace(1) %5, i64 %116, !dbg !53
  %118 = bitcast float %114 to i32, !dbg !54
  %119 = select i1 %29, i32 %118, i32 0, !dbg !55
  %120 = bitcast float %115 to i32, !dbg !54
  %121 = select i1 %32, i32 %120, i32 0, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %119, i32 %121, ptr addrspace(1) %117, i1 %15) #3, !dbg !54
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfcqrf5iosrty7hvcjvksqqqq2i47fvjialbgnfv3slsnuudmshb.py", directory: "inductor_cache/fc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 28, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 24, column: 27, scope: !7)
!20 = !DILocation(line: 41, column: 19, scope: !7)
!21 = !DILocation(line: 43, column: 20, scope: !7)
!22 = !DILocation(line: 45, column: 20, scope: !7)
!23 = !DILocation(line: 46, column: 46, scope: !7)
!24 = !DILocation(line: 46, column: 54, scope: !7)
!25 = !DILocation(line: 46, column: 62, scope: !7)
!26 = !DILocation(line: 46, column: 39, scope: !7)
!27 = !DILocation(line: 46, column: 44, scope: !7)
!28 = !DILocation(line: 46, column: 51, scope: !7)
!29 = !DILocation(line: 46, column: 59, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 75, scope: !7)
!32 = !DILocation(line: 46, column: 67, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 49, column: 31, scope: !7)
!36 = !DILocation(line: 49, column: 36, scope: !7)
!37 = !DILocation(line: 51, column: 20, scope: !7)
!38 = !DILocation(line: 52, column: 27, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 20, scope: !7)
!41 = !DILocation(line: 57, column: 20, scope: !7)
!42 = !DILocation(line: 58, column: 31, scope: !7)
!43 = !DILocation(line: 58, column: 36, scope: !7)
!44 = !DILocation(line: 59, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 31, scope: !7)
!46 = !DILocation(line: 60, column: 36, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 63, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 66, column: 25, scope: !7)
!54 = !DILocation(line: 66, column: 37, scope: !7)
!55 = !DILocation(line: 65, column: 35, scope: !7)
!56 = !DILocation(line: 66, column: 4, scope: !7)
