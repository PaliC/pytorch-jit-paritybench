; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_mul_sum_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = srem i32 %10, 256, !dbg !14
  %13 = sdiv i32 %10, 65536, !dbg !15
  %14 = sdiv i32 %11, 65536, !dbg !15
  %15 = sext i32 %10 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %11 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !17
  %24 = bitcast i32 %20 to float, !dbg !17
  %25 = bitcast i32 %21 to float, !dbg !17
  %26 = bitcast i32 %22 to float, !dbg !17
  %27 = bitcast i32 %23 to float, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %33 = bitcast i32 %29 to float, !dbg !17
  %34 = bitcast i32 %30 to float, !dbg !17
  %35 = bitcast i32 %31 to float, !dbg !17
  %36 = bitcast i32 %32 to float, !dbg !17
  %37 = shl nsw i32 %13, 8, !dbg !18
  %38 = shl nsw i32 %14, 8, !dbg !18
  %39 = add nsw i32 %37, %12, !dbg !19
  %40 = add nsw i32 %38, %12, !dbg !19
  %41 = sext i32 %39 to i64, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !20
  %43 = sext i32 %40 to i64, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !20
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %50 = bitcast i32 %46 to float, !dbg !21
  %51 = bitcast i32 %47 to float, !dbg !21
  %52 = bitcast i32 %48 to float, !dbg !21
  %53 = bitcast i32 %49 to float, !dbg !21
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !21
  %59 = bitcast i32 %55 to float, !dbg !21
  %60 = bitcast i32 %56 to float, !dbg !21
  %61 = bitcast i32 %57 to float, !dbg !21
  %62 = bitcast i32 %58 to float, !dbg !21
  %63 = getelementptr i8, ptr addrspace(1) %42, i64 4096, !dbg !22
  %64 = getelementptr i8, ptr addrspace(1) %44, i64 4096, !dbg !22
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !23
  %70 = bitcast i32 %66 to float, !dbg !23
  %71 = bitcast i32 %67 to float, !dbg !23
  %72 = bitcast i32 %68 to float, !dbg !23
  %73 = bitcast i32 %69 to float, !dbg !23
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !23
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !23
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !23
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !23
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !23
  %79 = bitcast i32 %75 to float, !dbg !23
  %80 = bitcast i32 %76 to float, !dbg !23
  %81 = bitcast i32 %77 to float, !dbg !23
  %82 = bitcast i32 %78 to float, !dbg !23
  %83 = add i32 %10, 262144, !dbg !24
  %84 = add i32 %10, 262656, !dbg !24
  %85 = sext i32 %83 to i64, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !25
  %87 = sext i32 %84 to i64, !dbg !25
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !25
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = bitcast i32 %91 to float, !dbg !26
  %96 = bitcast i32 %92 to float, !dbg !26
  %97 = bitcast i32 %93 to float, !dbg !26
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = bitcast i32 %100 to float, !dbg !26
  %105 = bitcast i32 %101 to float, !dbg !26
  %106 = bitcast i32 %102 to float, !dbg !26
  %107 = fcmp ogt float %50, %70, !dbg !27
  %108 = fcmp ogt float %51, %71, !dbg !27
  %109 = fcmp ogt float %52, %72, !dbg !27
  %110 = fcmp ogt float %53, %73, !dbg !27
  %111 = fcmp ogt float %59, %79, !dbg !27
  %112 = fcmp ogt float %60, %80, !dbg !27
  %113 = fcmp ogt float %61, %81, !dbg !27
  %114 = fcmp ogt float %62, %82, !dbg !27
  %115 = fcmp uno float %50, 0.000000e+00, !dbg !31
  %116 = fcmp uno float %51, 0.000000e+00, !dbg !31
  %117 = fcmp uno float %52, 0.000000e+00, !dbg !31
  %118 = fcmp uno float %53, 0.000000e+00, !dbg !31
  %119 = fcmp uno float %59, 0.000000e+00, !dbg !31
  %120 = fcmp uno float %60, 0.000000e+00, !dbg !31
  %121 = fcmp uno float %61, 0.000000e+00, !dbg !31
  %122 = fcmp uno float %62, 0.000000e+00, !dbg !31
  %123 = or i1 %115, %107, !dbg !32
  %124 = or i1 %116, %108, !dbg !32
  %125 = or i1 %117, %109, !dbg !32
  %126 = or i1 %118, %110, !dbg !32
  %127 = or i1 %119, %111, !dbg !32
  %128 = or i1 %120, %112, !dbg !32
  %129 = or i1 %121, %113, !dbg !32
  %130 = or i1 %122, %114, !dbg !32
  %131 = select i1 %123, float %50, float %70, !dbg !33
  %132 = select i1 %124, float %51, float %71, !dbg !33
  %133 = select i1 %125, float %52, float %72, !dbg !33
  %134 = select i1 %126, float %53, float %73, !dbg !33
  %135 = select i1 %127, float %59, float %79, !dbg !33
  %136 = select i1 %128, float %60, float %80, !dbg !33
  %137 = select i1 %129, float %61, float %81, !dbg !33
  %138 = select i1 %130, float %62, float %82, !dbg !33
  %139 = fsub float %50, %131, !dbg !34
  %140 = fsub float %51, %132, !dbg !34
  %141 = fsub float %52, %133, !dbg !34
  %142 = fsub float %53, %134, !dbg !34
  %143 = fsub float %59, %135, !dbg !34
  %144 = fsub float %60, %136, !dbg !34
  %145 = fsub float %61, %137, !dbg !34
  %146 = fsub float %62, %138, !dbg !34
  %147 = fmul float %139, 0x3FF7154760000000, !dbg !35
  %148 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %147) #1, !dbg !35
  %149 = fmul float %140, 0x3FF7154760000000, !dbg !35
  %150 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %149) #1, !dbg !35
  %151 = fmul float %141, 0x3FF7154760000000, !dbg !35
  %152 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %151) #1, !dbg !35
  %153 = fmul float %142, 0x3FF7154760000000, !dbg !35
  %154 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %153) #1, !dbg !35
  %155 = fmul float %143, 0x3FF7154760000000, !dbg !35
  %156 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %155) #1, !dbg !35
  %157 = fmul float %144, 0x3FF7154760000000, !dbg !35
  %158 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %157) #1, !dbg !35
  %159 = fmul float %145, 0x3FF7154760000000, !dbg !35
  %160 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %159) #1, !dbg !35
  %161 = fmul float %146, 0x3FF7154760000000, !dbg !35
  %162 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %161) #1, !dbg !35
  %163 = fsub float %70, %131, !dbg !36
  %164 = fsub float %71, %132, !dbg !36
  %165 = fsub float %72, %133, !dbg !36
  %166 = fsub float %73, %134, !dbg !36
  %167 = fsub float %79, %135, !dbg !36
  %168 = fsub float %80, %136, !dbg !36
  %169 = fsub float %81, %137, !dbg !36
  %170 = fsub float %82, %138, !dbg !36
  %171 = fmul float %163, 0x3FF7154760000000, !dbg !37
  %172 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %171) #1, !dbg !37
  %173 = fmul float %164, 0x3FF7154760000000, !dbg !37
  %174 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %173) #1, !dbg !37
  %175 = fmul float %165, 0x3FF7154760000000, !dbg !37
  %176 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %175) #1, !dbg !37
  %177 = fmul float %166, 0x3FF7154760000000, !dbg !37
  %178 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %177) #1, !dbg !37
  %179 = fmul float %167, 0x3FF7154760000000, !dbg !37
  %180 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %179) #1, !dbg !37
  %181 = fmul float %168, 0x3FF7154760000000, !dbg !37
  %182 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %181) #1, !dbg !37
  %183 = fmul float %169, 0x3FF7154760000000, !dbg !37
  %184 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %183) #1, !dbg !37
  %185 = fmul float %170, 0x3FF7154760000000, !dbg !37
  %186 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %185) #1, !dbg !37
  %187 = fadd float %148, %172, !dbg !38
  %188 = fadd float %150, %174, !dbg !38
  %189 = fadd float %152, %176, !dbg !38
  %190 = fadd float %154, %178, !dbg !38
  %191 = fadd float %156, %180, !dbg !38
  %192 = fadd float %158, %182, !dbg !38
  %193 = fadd float %160, %184, !dbg !38
  %194 = fadd float %162, %186, !dbg !38
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %187) #1, !dbg !39
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %188) #1, !dbg !39
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %189) #1, !dbg !39
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %190) #1, !dbg !39
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float %191) #1, !dbg !39
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float %192) #1, !dbg !39
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %193) #1, !dbg !39
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %194) #1, !dbg !39
  %203 = fmul float %195, %24, !dbg !40
  %204 = fmul float %196, %25, !dbg !40
  %205 = fmul float %197, %26, !dbg !40
  %206 = fmul float %198, %27, !dbg !40
  %207 = fmul float %199, %33, !dbg !40
  %208 = fmul float %200, %34, !dbg !40
  %209 = fmul float %201, %35, !dbg !40
  %210 = fmul float %202, %36, !dbg !40
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %187) #1, !dbg !41
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %188) #1, !dbg !41
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %189) #1, !dbg !41
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %190) #1, !dbg !41
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %191) #1, !dbg !41
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %192) #1, !dbg !41
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %193) #1, !dbg !41
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %194) #1, !dbg !41
  %219 = fmul float %211, %94, !dbg !42
  %220 = fmul float %212, %95, !dbg !42
  %221 = fmul float %213, %96, !dbg !42
  %222 = fmul float %214, %97, !dbg !42
  %223 = fmul float %215, %103, !dbg !42
  %224 = fmul float %216, %104, !dbg !42
  %225 = fmul float %217, %105, !dbg !42
  %226 = fmul float %218, %106, !dbg !42
  %227 = fadd float %203, %219, !dbg !43
  %228 = fadd float %204, %220, !dbg !43
  %229 = fadd float %205, %221, !dbg !43
  %230 = fadd float %206, %222, !dbg !43
  %231 = fadd float %207, %223, !dbg !43
  %232 = fadd float %208, %224, !dbg !43
  %233 = fadd float %209, %225, !dbg !43
  %234 = fadd float %210, %226, !dbg !43
  %235 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !44
  %236 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !44
  %237 = bitcast float %227 to i32, !dbg !45
  %238 = bitcast float %228 to i32, !dbg !45
  %239 = bitcast float %229 to i32, !dbg !45
  %240 = bitcast float %230 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %237, i32 %238, i32 %239, i32 %240, ptr addrspace(1) %235, i1 true) #1, !dbg !45
  %241 = bitcast float %231 to i32, !dbg !45
  %242 = bitcast float %232 to i32, !dbg !45
  %243 = bitcast float %233 to i32, !dbg !45
  %244 = bitcast float %234 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %241, i32 %242, i32 %243, i32 %244, ptr addrspace(1) %236, i1 true) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2g4ywt4laignyt3dyih64h4g5lkl4ntp4yi4rqynuj5cwcyp77d.py", directory: "inductor_cache/2g")
!4 = !{ptr @triton_poi_fused__softmax_mul_sum_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_sum_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_sum_19", linkageName: "triton_poi_fused__softmax_mul_sum_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 51, scope: !7)
!24 = !DILocation(line: 30, column: 40, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 45, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 31, column: 40, scope: !7)
!31 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 32, column: 18, scope: !7)
!35 = !DILocation(line: 33, column: 23, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 23, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 19, scope: !7)
!42 = !DILocation(line: 40, column: 20, scope: !7)
!43 = !DILocation(line: 41, column: 20, scope: !7)
!44 = !DILocation(line: 42, column: 25, scope: !7)
!45 = !DILocation(line: 42, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 4, scope: !7)
