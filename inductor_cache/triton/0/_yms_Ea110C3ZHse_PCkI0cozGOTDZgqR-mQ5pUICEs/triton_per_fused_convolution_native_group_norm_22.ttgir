#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":19:0)
#loc1 = loc(unknown)
#loc18 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":40:24)
#loc25 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":48:26)
#loc38 = loc(callsite(#loc1 at #loc18))
#loc41 = loc(callsite(#loc1 at #loc25))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_convolution_native_group_norm_22(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x128xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.280000e+02> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999997E-7> : tensor<1x1xf32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x128xf32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<1x128xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc4)
    %6 = arith.divsi %5, %cst_3 : tensor<1x128xi32, #blocked> loc(#loc5)
    %7 = arith.remsi %0, %c32_i32 : i32 loc(#loc6)
    %8 = arith.muli %0, %c128_i32 : i32 loc(#loc7)
    %9 = tt.splat %8 : i32 -> tensor<1x128xi32, #blocked1> loc(#loc8)
    %10 = arith.addi %4, %9 : tensor<1x128xi32, #blocked1> loc(#loc8)
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %12 = tt.addptr %11, %10 : tensor<1x128x!tt.ptr<f32>, #blocked1>, tensor<1x128xi32, #blocked1> loc(#loc9)
    %13 = tt.splat %1 : i1 -> tensor<1x128xi1, #blocked> loc(#loc10)
    %14 = tt.splat %1 : i1 -> tensor<1x128xi1, #blocked1> loc(#loc10)
    %15 = tt.load %12, %14, %cst_2 : tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %16 = triton_gpu.convert_layout %15 : tensor<1x128xf32, #blocked1> -> tensor<1x128xf32, #blocked> loc(#loc10)
    %17 = arith.muli %7, %c8_i32 : i32 loc(#loc11)
    %18 = tt.splat %17 : i32 -> tensor<1x128xi32, #blocked> loc(#loc12)
    %19 = arith.addi %6, %18 : tensor<1x128xi32, #blocked> loc(#loc12)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc13)
    %21 = tt.addptr %20, %19 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc13)
    %22 = tt.load %21, %13, %cst evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc14)
    %23 = arith.addf %16, %22 : tensor<1x128xf32, #blocked> loc(#loc15)
    %24 = arith.select %13, %23, %cst : tensor<1x128xi1, #blocked>, tensor<1x128xf32, #blocked> loc(#loc16)
    %25 = "tt.reduce"(%24) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc18)), %arg7: f32 loc(callsite(#loc1 at #loc18))):
      %43 = arith.addf %arg6, %arg7 : f32 loc(#loc42)
      tt.reduce.return %43 : f32 loc(#loc37)
    }) : (tensor<1x128xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc37)
    %26 = tt.expand_dims %25 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc20)
    %27 = arith.divf %26, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc21)
    %28 = tt.broadcast %27 : tensor<1x1xf32, #blocked> -> tensor<1x128xf32, #blocked> loc(#loc22)
    %29 = arith.subf %23, %28 : tensor<1x128xf32, #blocked> loc(#loc22)
    %30 = arith.mulf %29, %29 : tensor<1x128xf32, #blocked> loc(#loc23)
    %31 = arith.select %13, %30, %cst : tensor<1x128xi1, #blocked>, tensor<1x128xf32, #blocked> loc(#loc24)
    %32 = "tt.reduce"(%31) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc25)), %arg7: f32 loc(callsite(#loc1 at #loc25))):
      %43 = arith.addf %arg6, %arg7 : f32 loc(#loc43)
      tt.reduce.return %43 : f32 loc(#loc40)
    }) : (tensor<1x128xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc40)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc26)
    %34 = arith.divf %33, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc27)
    %35 = arith.addf %34, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc28)
    %36 = tt.extern_elementwise %35 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc29)
    %37 = triton_gpu.convert_layout %23 : tensor<1x128xf32, #blocked> -> tensor<1x128xf32, #blocked1> loc(#loc30)
    tt.store %12, %37, %14 : tensor<1x128x!tt.ptr<f32>, #blocked1> loc(#loc30)
    gpu.barrier loc(#loc31)
    %38 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc32)
    %39 = tt.splat %38 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc33)
    %40 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc33)
    tt.store %39, %36, %40 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc33)
    %41 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc34)
    %42 = tt.splat %41 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc35)
    tt.store %42, %27, %40 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":23:28)
#loc3 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":25:21)
#loc4 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":26:34)
#loc5 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":31:19)
#loc6 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":32:19)
#loc7 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":33:43)
#loc8 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":33:39)
#loc9 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":33:34)
#loc10 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":33:48)
#loc11 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":34:37)
#loc12 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":34:35)
#loc13 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":34:30)
#loc14 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":34:42)
#loc15 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":35:18)
#loc16 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":39:33)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc20 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":40:27)
#loc21 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":43:19)
#loc22 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":44:19)
#loc23 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":45:20)
#loc24 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":47:35)
#loc26 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":48:29)
#loc27 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":50:20)
#loc28 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":52:20)
#loc29 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":53:28)
#loc30 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":54:48)
#loc31 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":55:4)
#loc32 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":56:28)
#loc33 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":56:40)
#loc34 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":57:25)
#loc35 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":57:37)
#loc36 = loc("inductor_cache/4t/c4tbwq3qtcmjyww4cr76t5rswtw6ghopcqvy54uwjtdhajf3a5ip.py":57:4)
#loc37 = loc(callsite(#loc17 at #loc18))
#loc39 = loc(callsite(#loc19 at #loc17))
#loc40 = loc(callsite(#loc17 at #loc25))
#loc42 = loc(callsite(#loc39 at #loc18))
#loc43 = loc(callsite(#loc39 at #loc25))
