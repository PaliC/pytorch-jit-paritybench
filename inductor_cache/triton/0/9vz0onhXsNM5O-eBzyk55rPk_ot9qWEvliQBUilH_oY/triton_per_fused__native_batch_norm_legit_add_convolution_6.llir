; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 3, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 3, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = and i32 %13, 7, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = icmp slt i32 %17, 16, !dbg !14
  %19 = shl i32 %13, 1, !dbg !15
  %20 = and i32 %19, 14, !dbg !15
  %21 = srem i32 %17, 4, !dbg !16
  %22 = shl i32 %17, 4, !dbg !17
  %23 = or disjoint i32 %22, %20, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !20
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !20
  %29 = bitcast i32 %27 to float, !dbg !20
  %30 = bitcast i32 %28 to float, !dbg !20
  %31 = sext i32 %21 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %18) #5, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %18) #5, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !23
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %38 = sext i32 %17 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #5, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #5, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %18) #5, !dbg !28
  %44 = bitcast i32 %43 to float, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %18) #5, !dbg !28
  %46 = bitcast i32 %45 to float, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !29
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %47, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !30
  %49 = fadd float %29, %35, !dbg !31
  %50 = fadd float %30, %35, !dbg !31
  %51 = fadd float %49, %50, !dbg !32
  %52 = select i1 %18, float %51, float 0.000000e+00, !dbg !32
  %53 = bitcast float %52 to i32, !dbg !37
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 4, i32 31), !dbg !37
  %55 = bitcast i32 %54 to float, !dbg !37
  %56 = fadd float %52, %55, !dbg !32
  %57 = bitcast float %56 to i32, !dbg !37
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 2, i32 31), !dbg !37
  %59 = bitcast i32 %58 to float, !dbg !37
  %60 = fadd float %56, %59, !dbg !32
  %61 = bitcast float %60 to i32, !dbg !37
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 1, i32 31), !dbg !37
  %63 = bitcast i32 %62 to float, !dbg !37
  %64 = fadd float %60, %63, !dbg !32
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !38
  %66 = bitcast float %64 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !38
  %68 = load float, ptr addrspace(3) %67, align 4, !dbg !38
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 1.600000e+01) #5, !dbg !38
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 1.600000e+01) #5, !dbg !38
  %71 = fsub float %49, %70, !dbg !39
  %72 = fsub float %50, %70, !dbg !39
  %73 = fmul float %71, %71, !dbg !40
  %74 = fmul float %72, %72, !dbg !40
  %75 = fadd float %73, %74, !dbg !41
  %76 = select i1 %18, float %75, float 0.000000e+00, !dbg !41
  %77 = bitcast float %76 to i32, !dbg !43
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !43
  %79 = bitcast i32 %78 to float, !dbg !43
  %80 = fadd float %76, %79, !dbg !41
  %81 = bitcast float %80 to i32, !dbg !43
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !43
  %83 = bitcast i32 %82 to float, !dbg !43
  %84 = fadd float %80, %83, !dbg !41
  %85 = bitcast float %84 to i32, !dbg !43
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !43
  %87 = bitcast i32 %86 to float, !dbg !43
  %88 = fadd float %84, %87, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %89 = bitcast float %88 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %89, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %90 = load float, ptr addrspace(3) %67, align 4, !dbg !44
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 1.600000e+01) #5, !dbg !45
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 1.600000e+01) #5, !dbg !45
  %93 = fadd float %91, 0x3EE4F8B580000000, !dbg !46
  %94 = fadd float %92, 0x3EE4F8B580000000, !dbg !46
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %95, 0, !dbg !44
  br i1 %.not.i, label %98, label %96, !dbg !44

96:                                               ; preds = %10
  %97 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %93), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

98:                                               ; preds = %10
  %99 = tail call float @llvm.nvvm.rsqrt.approx.f(float %93), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %96, %98
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], !dbg !44
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i4 = icmp eq i32 %101, 0, !dbg !44
  br i1 %.not.i4, label %104, label %102, !dbg !44

102:                                              ; preds = %__nv_rsqrtf.exit
  %103 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %94), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

104:                                              ; preds = %__nv_rsqrtf.exit
  %105 = tail call float @llvm.nvvm.rsqrt.approx.f(float %94), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

__nv_rsqrtf.exit6:                                ; preds = %102, %104
  %.0.i5 = phi float [ %103, %102 ], [ %105, %104 ], !dbg !44
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float 1.600000e+01) #5, !dbg !47
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 1.600000e+01) #5, !dbg !47
  %108 = fadd float %107, 0x3EE4F8B580000000, !dbg !48
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i10 = icmp eq i32 %110, 0, !dbg !49
  br i1 %.not.i10, label %113, label %111, !dbg !49

111:                                              ; preds = %__nv_rsqrtf.exit6
  %112 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %108), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

113:                                              ; preds = %__nv_rsqrtf.exit6
  %114 = tail call float @llvm.nvvm.rsqrt.approx.f(float %108), !dbg !49
  br label %__nv_rsqrtf.exit12, !dbg !49

__nv_rsqrtf.exit12:                               ; preds = %111, %113
  %.0.i11 = phi float [ %112, %111 ], [ %114, %113 ], !dbg !49
  %115 = extractvalue { i32, i32 } %37, 1, !dbg !24
  %116 = bitcast i32 %115 to float, !dbg !24
  %117 = bitcast i32 %41 to float, !dbg !26
  %118 = fsub float %116, %117, !dbg !50
  %119 = extractvalue { i32, i32 } %37, 0, !dbg !24
  %120 = bitcast i32 %119 to float, !dbg !24
  %121 = fsub float %120, %117, !dbg !50
  %122 = fmul float %72, %.0.i5, !dbg !51
  %123 = fmul float %71, %.0.i5, !dbg !51
  %124 = extractvalue { i32, i32 } %48, 1, !dbg !30
  %125 = bitcast i32 %124 to float, !dbg !30
  %126 = extractvalue { i32, i32 } %48, 0, !dbg !30
  %127 = bitcast i32 %126 to float, !dbg !30
  %128 = or disjoint i32 %12, %16, !dbg !13
  %129 = icmp slt i32 %128, 16, !dbg !14
  %130 = fmul float %121, %.0.i11, !dbg !52
  %131 = fmul float %118, %.0.i11, !dbg !52
  %132 = fadd float %130, %127, !dbg !53
  %133 = fadd float %131, %125, !dbg !53
  %134 = fadd float %123, %132, !dbg !54
  %135 = fadd float %122, %133, !dbg !54
  %136 = bitcast float %49 to i32, !dbg !55
  %137 = bitcast float %50 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %136, i32 %137, ptr addrspace(1) %25, i1 %18) #5, !dbg !55
  %138 = bitcast float %134 to i32, !dbg !56
  %139 = bitcast float %135 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %138, i32 %139, ptr addrspace(1) %47, i1 %18) #5, !dbg !56
  %140 = sext i32 %128 to i64, !dbg !57
  %141 = getelementptr float, ptr addrspace(1) %7, i64 %140, !dbg !57
  %142 = and i32 %13, 56, !dbg !58
  %143 = icmp eq i32 %142, 0, !dbg !58
  %144 = bitcast float %.0.i to i32, !dbg !58
  %145 = and i1 %143, %129, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %141, i1 %145) #5, !dbg !58
  %146 = getelementptr float, ptr addrspace(1) %6, i64 %140, !dbg !59
  %147 = bitcast float %69 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %146, i1 %145) #5, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfwfp2xfuff4g6bbhrggqvtinnykef3uct3yw7yi3ovwgi5hsv2u.py", directory: "inductor_cache/fw")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_6", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 44, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 35, scope: !7)
!30 = !DILocation(line: 37, column: 48, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 43, column: 24, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 19, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !42)
!42 = !DILocation(line: 51, column: 26, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !42)
!44 = !DILocation(line: 57, column: 28, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 28, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 20, scope: !7)
!53 = !DILocation(line: 64, column: 20, scope: !7)
!54 = !DILocation(line: 65, column: 20, scope: !7)
!55 = !DILocation(line: 66, column: 47, scope: !7)
!56 = !DILocation(line: 67, column: 48, scope: !7)
!57 = !DILocation(line: 68, column: 25, scope: !7)
!58 = !DILocation(line: 68, column: 37, scope: !7)
!59 = !DILocation(line: 69, column: 25, scope: !7)
!60 = !DILocation(line: 69, column: 37, scope: !7)
!61 = !DILocation(line: 69, column: 4, scope: !7)
