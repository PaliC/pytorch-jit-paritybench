; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_22(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 24, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = lshr i32 %7, 5, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %15 = sdiv i32 %.frozen, 2048, !dbg !15
  %16 = mul i32 %15, 2048, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = shl i32 %7, 8, !dbg !17
  %18 = and i32 %17, 63488, !dbg !17
  %19 = shl i32 %15, 17, !dbg !18
  %20 = add i32 %19, %.decomposed, !dbg !19
  %21 = add i32 %20, %18, !dbg !20
  %22 = add i32 %20, 65536, !dbg !19
  %23 = add nuw i32 %22, %18, !dbg !20
  %24 = sext i32 %21 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !21
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !22
  %33 = bitcast i32 %29 to float, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = bitcast i32 %31 to float, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = fadd float %33, %42, !dbg !23
  %47 = fadd float %34, %43, !dbg !23
  %48 = fadd float %35, %44, !dbg !23
  %49 = fadd float %36, %45, !dbg !23
  %50 = bitcast float %46 to i32, !dbg !28
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 16, i32 31), !dbg !28
  %52 = bitcast i32 %51 to float, !dbg !28
  %53 = fadd float %46, %52, !dbg !23
  %54 = bitcast float %53 to i32, !dbg !28
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !28
  %56 = bitcast i32 %55 to float, !dbg !28
  %57 = fadd float %53, %56, !dbg !23
  %58 = bitcast float %47 to i32, !dbg !28
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 16, i32 31), !dbg !28
  %60 = bitcast i32 %59 to float, !dbg !28
  %61 = fadd float %47, %60, !dbg !23
  %62 = bitcast float %61 to i32, !dbg !28
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !28
  %64 = bitcast i32 %63 to float, !dbg !28
  %65 = fadd float %61, %64, !dbg !23
  %66 = bitcast float %48 to i32, !dbg !28
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 16, i32 31), !dbg !28
  %68 = bitcast i32 %67 to float, !dbg !28
  %69 = fadd float %48, %68, !dbg !23
  %70 = bitcast float %69 to i32, !dbg !28
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 8, i32 31), !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = fadd float %69, %72, !dbg !23
  %74 = bitcast float %49 to i32, !dbg !28
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 16, i32 31), !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = fadd float %49, %76, !dbg !23
  %78 = bitcast float %77 to i32, !dbg !28
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 8, i32 31), !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = fadd float %77, %80, !dbg !23
  %82 = icmp eq i32 %8, 0, !dbg !28
  %83 = and i32 %14, 7, !dbg !28
  %84 = shl nuw nsw i32 %10, 3, !dbg !28
  %85 = or disjoint i32 %84, %83, !dbg !28
  %86 = zext nneg i32 %85 to i64, !dbg !28
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i64 %86, !dbg !28
  %88 = bitcast float %57 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 %82) #3, !dbg !28
  %89 = or disjoint i32 %84, 8, !dbg !28
  %90 = or disjoint i32 %89, %83, !dbg !28
  %91 = zext nneg i32 %90 to i64, !dbg !28
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i64 %91, !dbg !28
  %93 = bitcast float %65 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 %82) #3, !dbg !28
  %94 = or disjoint i32 %84, 16, !dbg !28
  %95 = or disjoint i32 %94, %83, !dbg !28
  %96 = zext nneg i32 %95 to i64, !dbg !28
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i64 %96, !dbg !28
  %98 = bitcast float %73 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 %82) #3, !dbg !28
  %99 = or disjoint i32 %84, 24, !dbg !28
  %100 = or disjoint i32 %99, %83, !dbg !28
  %101 = zext nneg i32 %100 to i64, !dbg !28
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i64 %101, !dbg !28
  %103 = bitcast float %81 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 %82) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %104 = icmp slt i32 %7, 256, !dbg !28
  %105 = sext i32 %7 to i64, !dbg !28
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i64 %105, !dbg !28
  %107 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %106, i1 %104) #3, !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = fadd float %108, %110, !dbg !23
  %112 = bitcast float %111 to i32, !dbg !28
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = fadd float %111, %114, !dbg !23
  %116 = bitcast float %115 to i32, !dbg !28
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = fadd float %115, %118, !dbg !23
  %120 = and i32 %7, 7, !dbg !28
  %121 = icmp eq i32 %120, 0, !dbg !28
  %122 = and i1 %104, %121, !dbg !28
  %123 = bitcast float %119 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %123, i1 %122) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %124 = zext nneg i32 %84 to i64, !dbg !28
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i64 %124, !dbg !28
  %126 = load i32, ptr addrspace(3) %125, align 16, !dbg !28
  %127 = zext nneg i32 %89 to i64, !dbg !28
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i64 %127, !dbg !28
  %129 = load i32, ptr addrspace(3) %128, align 16, !dbg !28
  %130 = zext nneg i32 %94 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i64 %130, !dbg !28
  %132 = load i32, ptr addrspace(3) %131, align 16, !dbg !28
  %133 = zext nneg i32 %99 to i64, !dbg !28
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !28
  %135 = load i32, ptr addrspace(3) %134, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %136 = zext nneg i32 %10 to i64, !dbg !29
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %136, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %137, i32 %126, i32 %129, i32 %132, i32 %135, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %138 = zext nneg i32 %11 to i64, !dbg !29
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %138, !dbg !29
  %140 = load float, ptr addrspace(3) %139, align 4, !dbg !29
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 6.400000e+01) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %142 = sext i32 %13 to i64, !dbg !31
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !31
  %144 = icmp eq i32 %83, 0, !dbg !32
  %145 = bitcast float %141 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %143, i1 %144) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccnn2z2zj2vohsls4o2kknnfn463gozi5ibccznyjnp6vnrige2t.py", directory: "inductor_cache/cn")
!4 = !{ptr @triton_per_fused_mean_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_22", linkageName: "triton_per_fused_mean_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 40, scope: !7)
!18 = !DILocation(line: 33, column: 52, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 57, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 35, column: 24, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 4, scope: !7)
!31 = !DILocation(line: 39, column: 28, scope: !7)
!32 = !DILocation(line: 39, column: 39, scope: !7)
!33 = !DILocation(line: 39, column: 4, scope: !7)
