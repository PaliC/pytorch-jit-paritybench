//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_red_fused_add_div_linalg_vector_norm_17 // -- Begin function triton_red_fused_add_div_linalg_vector_norm_17
.extern .shared .align 16 .b8 global_smem[];
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
.global .align 1 .b8 _$_str_$_2[17] = {95, 95, 67, 85, 68, 65, 95, 80, 82, 69, 67, 95, 83, 81, 82, 84};
                                        // @triton_red_fused_add_div_linalg_vector_norm_17
.visible .entry triton_red_fused_add_div_linalg_vector_norm_17(
	.param .u64 .ptr .global .align 1 triton_red_fused_add_div_linalg_vector_norm_17_param_0,
	.param .u32 triton_red_fused_add_div_linalg_vector_norm_17_param_1
)
.reqntid 512, 1, 1
{
	.reg .pred 	%p<16>;
	.reg .b32 	%r<64>;
	.reg .f32 	%f<31>;
	.reg .b64 	%rd<6>;
	.loc	1 19 0                          // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:19:0

// %bb.0:                               // %__nv_sqrtf.exit
	ld.param.u64 	%rd4, [triton_red_fused_add_div_linalg_vector_norm_17_param_0];
$L__tmp0:
	.loc	1 25 33                         // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:25:33
	mov.u32 	%r39, %tid.x;
	and.b32  	%r40, %r39, 31;
	shl.b32 	%r41, %r39, 2;
	and.b32  	%r42, %r41, 2044;
	.loc	1 31 38                         // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:31:38
	mul.wide.u32 	%rd5, %r42, 4;
	add.s64 	%rd1, %rd4, %rd5;
	mov.b32 	%r5, 0;
	mov.pred 	%p1, -1;
	.loc	1 31 43                         // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:31:43
	// begin inline asm
	mov.u32 %r1, 0x0;
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	@%p1 ld.global.L1::evict_last.v4.b32 { %r1, %r2, %r3, %r4 }, [ %rd1 + 0 ];
	@!%p1 mov.u32 %r1, %r5;
	@!%p1 mov.u32 %r2, %r5;
	@!%p1 mov.u32 %r3, %r5;
	@!%p1 mov.u32 %r4, %r5;
	// end inline asm
	mov.b32 	%f1, %r1;
	mov.b32 	%f2, %r2;
	mov.b32 	%f3, %r3;
	mov.b32 	%f4, %r4;
	.loc	1 32 22                         // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:32:22
	mul.f32 	%f5, %f2, %f2;
$L__tmp1:
	.loc	2 256 15                        // standard.py:256:15
	fma.rn.f32 	%f6, %f1, %f1, %f5;
	fma.rn.f32 	%f7, %f3, %f3, %f6;
	fma.rn.f32 	%f8, %f4, %f4, %f7;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r43, %f8;
	shfl.sync.bfly.b32	%r44, %r43, 16, 31, -1;
	mov.b32 	%f9, %r44;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f10, %f8, %f9;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r45, %f10;
	shfl.sync.bfly.b32	%r46, %r45, 8, 31, -1;
	mov.b32 	%f11, %r46;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f12, %f10, %f11;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r47, %f12;
	shfl.sync.bfly.b32	%r48, %r47, 4, 31, -1;
	mov.b32 	%f13, %r48;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f14, %f12, %f13;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r49, %f14;
	shfl.sync.bfly.b32	%r50, %r49, 2, 31, -1;
	mov.b32 	%f15, %r50;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f16, %f14, %f15;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r51, %f16;
	shfl.sync.bfly.b32	%r52, %r51, 1, 31, -1;
	mov.b32 	%f17, %r52;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f18, %f16, %f17;
	.loc	2 267 36                        // standard.py:267:36
	setp.eq.s32 	%p6, %r40, 0;
	shr.u32 	%r53, %r39, 3;
	and.b32  	%r54, %r53, 60;
	mov.u32 	%r55, global_smem;
	add.s32 	%r9, %r55, %r54;
	mov.b32 	%r10, %f18;
	// begin inline asm
	@%p6 st.shared.b32 [ %r9 + 0 ], %r10;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p7, %r39, 16;
	add.s32 	%r12, %r55, %r41;
	// begin inline asm
	@%p7 ld.shared.b32 %r11, [ %r12 + 0 ];
	// end inline asm
	mov.b32 	%f19, %r11;
	shfl.sync.bfly.b32	%r56, %r11, 8, 31, -1;
	mov.b32 	%f20, %r56;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f21, %f19, %f20;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r57, %f21;
	shfl.sync.bfly.b32	%r58, %r57, 4, 31, -1;
	mov.b32 	%f22, %r58;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f23, %f21, %f22;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r59, %f23;
	shfl.sync.bfly.b32	%r60, %r59, 2, 31, -1;
	mov.b32 	%f24, %r60;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f25, %f23, %f24;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r61, %f25;
	shfl.sync.bfly.b32	%r62, %r61, 1, 31, -1;
	mov.b32 	%f26, %r62;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f27, %f25, %f26;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r63, %r39, 15;
	setp.eq.s32 	%p15, %r63, 0;
	and.pred  	%p8, %p7, %p15;
	mov.b32 	%r14, %f27;
	// begin inline asm
	@%p8 st.shared.b32 [ %r12 + 0 ], %r14;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f28, [global_smem];
$L__tmp2:
	.loc	1 41 43                         // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:41:43
	// begin inline asm
	mov.u32 %r24, 0x0;
	mov.u32 %r27, 0x0;
	mov.u32 %r30, 0x0;
	mov.u32 %r33, 0x0;
	@%p1 ld.global.L1::evict_first.v4.b32 { %r24, %r27, %r30, %r33 }, [ %rd1 + 0 ];
	@!%p1 mov.u32 %r24, %r5;
	@!%p1 mov.u32 %r27, %r5;
	@!%p1 mov.u32 %r30, %r5;
	@!%p1 mov.u32 %r33, %r5;
	// end inline asm
	.loc	1 42 30                         // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:42:30
	sqrt.approx.ftz.f32 	%f29, %f28;
	.loc	1 44 22                         // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:44:22
	add.f32 	%f30, %f29, 0f2B8CBCCC;
	.loc	1 45 22                         // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:45:22
	mov.b32 	%r25, %f30;
	// begin inline asm
	div.full.f32 %r35, %r24, %r25;
	// end inline asm
	// begin inline asm
	div.full.f32 %r36, %r27, %r25;
	// end inline asm
	// begin inline asm
	div.full.f32 %r37, %r30, %r25;
	// end inline asm
	// begin inline asm
	div.full.f32 %r38, %r33, %r25;
	// end inline asm
	.loc	1 46 78                         // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:46:78
	// begin inline asm
	@%p1 st.global.v4.b32 [ %rd1 + 0 ], { %r35, %r36, %r37, %r38 };
	// end inline asm
	.loc	1 37 4                          // cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py:37:4
	ret;
$L__tmp3:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/un/cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 191                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xb8 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 117
.b8 110
.b8 115
.b8 107
.b8 106
.b8 109
.b8 54
.b8 112
.b8 98
.b8 116
.b8 115
.b8 97
.b8 51
.b8 120
.b8 53
.b8 110
.b8 112
.b8 121
.b8 120
.b8 116
.b8 53
.b8 110
.b8 121
.b8 100
.b8 113
.b8 108
.b8 97
.b8 120
.b8 51
.b8 102
.b8 52
.b8 99
.b8 122
.b8 111
.b8 107
.b8 122
.b8 100
.b8 118
.b8 101
.b8 108
.b8 120
.b8 117
.b8 51
.b8 112
.b8 122
.b8 117
.b8 53
.b8 100
.b8 108
.b8 100
.b8 55
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 117
.b8 110
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x31 DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 114
.b8 101
.b8 100
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 97
.b8 100
.b8 100
.b8 95
.b8 100
.b8 105
.b8 118
.b8 95
.b8 108
.b8 105
.b8 110
.b8 97
.b8 108
.b8 103
.b8 95
.b8 118
.b8 101
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 110
.b8 111
.b8 114
.b8 109
.b8 95
.b8 49
.b8 55
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x94:0x2e DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xa9:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 36                                  // DW_AT_call_line
.b8 25                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
