; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_linalg_vector_norm_17(ptr addrspace(1) %0, i32 %1) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %3 = and i32 %2, 31, !dbg !10
  %4 = lshr i32 %2, 5, !dbg !10
  %5 = shl i32 %2, 2, !dbg !10
  %6 = and i32 %5, 2044, !dbg !10
  %7 = zext nneg i32 %6 to i64, !dbg !11
  %8 = getelementptr float, ptr addrspace(1) %0, i64 %7, !dbg !11
  %9 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %8, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !12
  %10 = extractvalue { i32, i32, i32, i32 } %9, 0, !dbg !12
  %11 = extractvalue { i32, i32, i32, i32 } %9, 1, !dbg !12
  %12 = extractvalue { i32, i32, i32, i32 } %9, 2, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %9, 3, !dbg !12
  %14 = bitcast i32 %10 to float, !dbg !12
  %15 = bitcast i32 %11 to float, !dbg !12
  %16 = bitcast i32 %12 to float, !dbg !12
  %17 = bitcast i32 %13 to float, !dbg !12
  %18 = fmul float %14, %14, !dbg !13
  %19 = fmul float %15, %15, !dbg !13
  %20 = fmul float %16, %16, !dbg !13
  %21 = fmul float %17, %17, !dbg !13
  %22 = fadd float %18, %19, !dbg !14
  %23 = fadd float %20, %22, !dbg !14
  %24 = fadd float %21, %23, !dbg !14
  %25 = bitcast float %24 to i32, !dbg !19
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 16, i32 31), !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = fadd float %24, %27, !dbg !14
  %29 = bitcast float %28 to i32, !dbg !19
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 8, i32 31), !dbg !19
  %31 = bitcast i32 %30 to float, !dbg !19
  %32 = fadd float %28, %31, !dbg !14
  %33 = bitcast float %32 to i32, !dbg !19
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 4, i32 31), !dbg !19
  %35 = bitcast i32 %34 to float, !dbg !19
  %36 = fadd float %32, %35, !dbg !14
  %37 = bitcast float %36 to i32, !dbg !19
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 2, i32 31), !dbg !19
  %39 = bitcast i32 %38 to float, !dbg !19
  %40 = fadd float %36, %39, !dbg !14
  %41 = bitcast float %40 to i32, !dbg !19
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 1, i32 31), !dbg !19
  %43 = bitcast i32 %42 to float, !dbg !19
  %44 = fadd float %40, %43, !dbg !14
  %45 = icmp eq i32 %3, 0, !dbg !19
  %46 = and i32 %4, 15, !dbg !19
  %47 = zext nneg i32 %46 to i64, !dbg !19
  %48 = getelementptr float, ptr addrspace(3) @global_smem, i64 %47, !dbg !19
  %49 = bitcast float %44 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 %45) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %50 = icmp slt i32 %2, 16, !dbg !19
  %51 = sext i32 %2 to i64, !dbg !19
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i64 %51, !dbg !19
  %53 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %52, i1 %50) #5, !dbg !19
  %54 = bitcast i32 %53 to float, !dbg !19
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !19
  %56 = bitcast i32 %55 to float, !dbg !19
  %57 = fadd float %54, %56, !dbg !14
  %58 = bitcast float %57 to i32, !dbg !19
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 4, i32 31), !dbg !19
  %60 = bitcast i32 %59 to float, !dbg !19
  %61 = fadd float %57, %60, !dbg !14
  %62 = bitcast float %61 to i32, !dbg !19
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !19
  %64 = bitcast i32 %63 to float, !dbg !19
  %65 = fadd float %61, %64, !dbg !14
  %66 = bitcast float %65 to i32, !dbg !19
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !19
  %68 = bitcast i32 %67 to float, !dbg !19
  %69 = fadd float %65, %68, !dbg !14
  %70 = and i32 %2, 15, !dbg !19
  %71 = icmp eq i32 %70, 0, !dbg !19
  %72 = and i1 %50, %71, !dbg !19
  %73 = bitcast float %69 to <1 x i32>, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %73, i1 %72) #5, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %74 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !19
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %8, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !20
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !21
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !21
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !21
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !21
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !21
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !21
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !21
  %.not.i11 = icmp eq i32 %82, 0, !dbg !21
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !21
  %.not1.i14 = icmp eq i32 %83, 0, !dbg !21
  br i1 %.not.i11, label %89, label %84, !dbg !21

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %87, label %85, !dbg !21

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #5, !dbg !21
  br label %__nv_sqrtf.exit15, !dbg !21

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #5, !dbg !21
  br label %__nv_sqrtf.exit15, !dbg !21

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %92, label %90, !dbg !21

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #5, !dbg !21
  br label %__nv_sqrtf.exit15, !dbg !21

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #5, !dbg !21
  br label %__nv_sqrtf.exit15, !dbg !21

__nv_sqrtf.exit15:                                ; preds = %85, %87, %90, %92
  %.0.i13 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !21
  %94 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !20
  %95 = bitcast i32 %94 to float, !dbg !20
  %96 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !20
  %97 = bitcast i32 %96 to float, !dbg !20
  %98 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !20
  %99 = bitcast i32 %98 to float, !dbg !20
  %100 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !20
  %101 = bitcast i32 %100 to float, !dbg !20
  %102 = fadd float %.0.i13, 0x3D71979980000000, !dbg !22
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %102) #5, !dbg !23
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %102) #5, !dbg !23
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %102) #5, !dbg !23
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %102) #5, !dbg !23
  %107 = bitcast float %103 to i32, !dbg !24
  %108 = bitcast float %104 to i32, !dbg !24
  %109 = bitcast float %105 to i32, !dbg !24
  %110 = bitcast float %106 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %107, i32 %108, i32 %109, i32 %110, ptr addrspace(1) %8, i1 true) #5, !dbg !24
  ret void, !dbg !25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cunskjm6pbtsa3x5npyxt5nydqlax3f4czokzdvelxu3pzu5dld7.py", directory: "inductor_cache/un")
!4 = !{ptr @triton_red_fused_add_div_linalg_vector_norm_17, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_linalg_vector_norm_17, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_linalg_vector_norm_17", linkageName: "triton_red_fused_add_div_linalg_vector_norm_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 31, column: 38, scope: !7)
!12 = !DILocation(line: 31, column: 43, scope: !7)
!13 = !DILocation(line: 32, column: 22, scope: !7)
!14 = !DILocation(line: 256, column: 15, scope: !15, inlinedAt: !18)
!15 = distinct !DILexicalBlockFile(scope: !17, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!17 = distinct !DILexicalBlockFile(scope: !7, file: !16, discriminator: 0)
!18 = !DILocation(line: 36, column: 25, scope: !7)
!19 = !DILocation(line: 267, column: 36, scope: !17, inlinedAt: !18)
!20 = !DILocation(line: 41, column: 43, scope: !7)
!21 = !DILocation(line: 42, column: 30, scope: !7)
!22 = !DILocation(line: 44, column: 22, scope: !7)
!23 = !DILocation(line: 45, column: 22, scope: !7)
!24 = !DILocation(line: 46, column: 78, scope: !7)
!25 = !DILocation(line: 37, column: 4, scope: !7)
