; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = srem i32 %14, 64, !dbg !14
  %17 = sext i32 %14 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = sext i32 %15 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %23 = sext i32 %16 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = bitcast i32 %34 to float, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = bitcast i32 %43 to float, !dbg !22
  %48 = bitcast i32 %44 to float, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !26
  %55 = fadd float %36, 0x3EE4F8B580000000, !dbg !27
  %56 = fadd float %37, 0x3EE4F8B580000000, !dbg !27
  %57 = fadd float %38, 0x3EE4F8B580000000, !dbg !27
  %58 = fadd float %39, 0x3EE4F8B580000000, !dbg !27
  %59 = fadd float %45, 0x3EE4F8B580000000, !dbg !27
  %60 = fadd float %46, 0x3EE4F8B580000000, !dbg !27
  %61 = fadd float %47, 0x3EE4F8B580000000, !dbg !27
  %62 = fadd float %48, 0x3EE4F8B580000000, !dbg !27
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %63, 0, !dbg !28
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %64, 0, !dbg !28
  br i1 %.not.i, label %70, label %65, !dbg !28

65:                                               ; preds = %8
  br i1 %.not1.i, label %68, label %66, !dbg !28

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

70:                                               ; preds = %8
  br i1 %.not1.i, label %73, label %71, !dbg !28

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !28
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %75, 0, !dbg !28
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %76, 0, !dbg !28
  br i1 %.not.i1, label %82, label %77, !dbg !28

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !28

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !28

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %78, %80, %83, %85
  %.0.i3 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !28
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %87, 0, !dbg !28
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %88, 0, !dbg !28
  br i1 %.not.i6, label %94, label %89, !dbg !28

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !28

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !28

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %90, %92, %95, %97
  %.0.i8 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !28
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %99, 0, !dbg !28
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %100, 0, !dbg !28
  br i1 %.not.i11, label %106, label %101, !dbg !28

101:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %104, label %102, !dbg !28

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !28

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %102, %104, %107, %109
  %.0.i13 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !28
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %111, 0, !dbg !28
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %112, 0, !dbg !28
  br i1 %.not.i16, label %118, label %113, !dbg !28

113:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %116, label %114, !dbg !28

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

118:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %121, label %119, !dbg !28

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %114, %116, %119, %121
  %.0.i18 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !28
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %123, 0, !dbg !28
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %124, 0, !dbg !28
  br i1 %.not.i21, label %130, label %125, !dbg !28

125:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %128, label %126, !dbg !28

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

130:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %133, label %131, !dbg !28

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %126, %128, %131, %133
  %.0.i23 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !28
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %135, 0, !dbg !28
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %136, 0, !dbg !28
  br i1 %.not.i26, label %142, label %137, !dbg !28

137:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %140, label %138, !dbg !28

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

142:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %145, label %143, !dbg !28

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %138, %140, %143, %145
  %.0.i28 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !28
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %147, 0, !dbg !28
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %148, 0, !dbg !28
  br i1 %.not.i31, label %154, label %149, !dbg !28

149:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %152, label %150, !dbg !28

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

154:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %157, label %155, !dbg !28

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %150, %152, %155, %157
  %.0.i33 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !28
  %159 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %160 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %161 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %162 = bitcast i32 %161 to float, !dbg !20
  %163 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %164 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %165 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %166 = bitcast i32 %165 to float, !dbg !20
  %167 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %168 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %169 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %170 = bitcast i32 %169 to float, !dbg !20
  %171 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %172 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %173 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %174 = bitcast i32 %173 to float, !dbg !20
  %175 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %176 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %177 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %178 = bitcast i32 %177 to float, !dbg !20
  %179 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %180 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %181 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %182 = bitcast i32 %181 to float, !dbg !20
  %183 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %184 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %185 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %186 = bitcast i32 %185 to float, !dbg !20
  %187 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %188 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %189 = insertelement <8 x i32> poison, i32 %187, i64 0, !dbg !16
  %190 = insertelement <8 x i32> %189, i32 %183, i64 1, !dbg !16
  %191 = insertelement <8 x i32> %190, i32 %179, i64 2, !dbg !16
  %192 = insertelement <8 x i32> %191, i32 %175, i64 3, !dbg !16
  %193 = insertelement <8 x i32> %192, i32 %171, i64 4, !dbg !16
  %194 = insertelement <8 x i32> %193, i32 %167, i64 5, !dbg !16
  %195 = insertelement <8 x i32> %194, i32 %163, i64 6, !dbg !16
  %196 = insertelement <8 x i32> %195, i32 %159, i64 7, !dbg !16
  %197 = bitcast <8 x i32> %196 to <8 x float>, !dbg !16
  %198 = insertelement <8 x i32> poison, i32 %188, i64 0, !dbg !18
  %199 = insertelement <8 x i32> %198, i32 %184, i64 1, !dbg !18
  %200 = insertelement <8 x i32> %199, i32 %180, i64 2, !dbg !18
  %201 = insertelement <8 x i32> %200, i32 %176, i64 3, !dbg !18
  %202 = insertelement <8 x i32> %201, i32 %172, i64 4, !dbg !18
  %203 = insertelement <8 x i32> %202, i32 %168, i64 5, !dbg !18
  %204 = insertelement <8 x i32> %203, i32 %164, i64 6, !dbg !18
  %205 = insertelement <8 x i32> %204, i32 %160, i64 7, !dbg !18
  %206 = bitcast <8 x i32> %205 to <8 x float>, !dbg !18
  %207 = fadd <8 x float> %197, %206, !dbg !29
  %208 = fcmp olt <8 x float> %207, zeroinitializer, !dbg !30
  %209 = extractelement <8 x i1> %208, i64 7, !dbg !34
  %210 = extractelement <8 x float> %207, i64 7, !dbg !35
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !34
  %212 = fsub float %211, %162, !dbg !36
  %213 = extractelement <8 x i1> %208, i64 6, !dbg !34
  %214 = extractelement <8 x float> %207, i64 6, !dbg !35
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !34
  %216 = fsub float %215, %166, !dbg !36
  %217 = extractelement <8 x i1> %208, i64 5, !dbg !34
  %218 = extractelement <8 x float> %207, i64 5, !dbg !35
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !34
  %220 = fsub float %219, %170, !dbg !36
  %221 = extractelement <8 x i1> %208, i64 4, !dbg !34
  %222 = extractelement <8 x float> %207, i64 4, !dbg !35
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !34
  %224 = fsub float %223, %174, !dbg !36
  %225 = extractelement <8 x i1> %208, i64 3, !dbg !34
  %226 = extractelement <8 x float> %207, i64 3, !dbg !35
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !34
  %228 = fsub float %227, %178, !dbg !36
  %229 = extractelement <8 x i1> %208, i64 2, !dbg !34
  %230 = extractelement <8 x float> %207, i64 2, !dbg !35
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !34
  %232 = fsub float %231, %182, !dbg !36
  %233 = extractelement <8 x i1> %208, i64 1, !dbg !34
  %234 = extractelement <8 x float> %207, i64 1, !dbg !35
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !34
  %236 = fsub float %235, %186, !dbg !36
  %237 = extractelement <8 x i1> %208, i64 0, !dbg !34
  %238 = extractelement <8 x float> %207, i64 0, !dbg !35
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !34
  %240 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %241 = bitcast i32 %240 to float, !dbg !20
  %242 = fsub float %239, %241, !dbg !36
  %243 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %244 = bitcast i32 %243 to float, !dbg !26
  %245 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %246 = bitcast i32 %245 to float, !dbg !26
  %247 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %248 = bitcast i32 %247 to float, !dbg !26
  %249 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %250 = bitcast i32 %249 to float, !dbg !26
  %251 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !26
  %252 = bitcast i32 %251 to float, !dbg !26
  %253 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !26
  %254 = bitcast i32 %253 to float, !dbg !26
  %255 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !26
  %256 = bitcast i32 %255 to float, !dbg !26
  %257 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !26
  %258 = bitcast i32 %257 to float, !dbg !26
  %259 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %260 = bitcast i32 %259 to float, !dbg !24
  %261 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %262 = bitcast i32 %261 to float, !dbg !24
  %263 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %264 = bitcast i32 %263 to float, !dbg !24
  %265 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %266 = bitcast i32 %265 to float, !dbg !24
  %267 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %268 = bitcast i32 %267 to float, !dbg !24
  %269 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %270 = bitcast i32 %269 to float, !dbg !24
  %271 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %272 = bitcast i32 %271 to float, !dbg !24
  %273 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %274 = bitcast i32 %273 to float, !dbg !24
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !37
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !37
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !37
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !37
  %283 = fmul float %242, %275, !dbg !38
  %284 = fmul float %236, %276, !dbg !38
  %285 = fmul float %232, %277, !dbg !38
  %286 = fmul float %228, %278, !dbg !38
  %287 = fmul float %224, %279, !dbg !38
  %288 = fmul float %220, %280, !dbg !38
  %289 = fmul float %216, %281, !dbg !38
  %290 = fmul float %212, %282, !dbg !38
  %291 = fmul float %283, %274, !dbg !39
  %292 = fmul float %284, %272, !dbg !39
  %293 = fmul float %285, %270, !dbg !39
  %294 = fmul float %286, %268, !dbg !39
  %295 = fmul float %287, %266, !dbg !39
  %296 = fmul float %288, %264, !dbg !39
  %297 = fmul float %289, %262, !dbg !39
  %298 = fmul float %290, %260, !dbg !39
  %299 = fadd float %291, %258, !dbg !40
  %300 = fadd float %292, %256, !dbg !40
  %301 = fadd float %293, %254, !dbg !40
  %302 = fadd float %294, %252, !dbg !40
  %303 = fadd float %295, %250, !dbg !40
  %304 = fadd float %296, %248, !dbg !40
  %305 = fadd float %297, %246, !dbg !40
  %306 = fadd float %298, %244, !dbg !40
  %307 = bitcast float %238 to i32, !dbg !35
  %308 = bitcast float %234 to i32, !dbg !35
  %309 = bitcast float %230 to i32, !dbg !35
  %310 = bitcast float %226 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %308, i32 %309, i32 %310, ptr addrspace(1) %18, i1 true) #3, !dbg !35
  %311 = bitcast float %222 to i32, !dbg !35
  %312 = bitcast float %218 to i32, !dbg !35
  %313 = bitcast float %214 to i32, !dbg !35
  %314 = bitcast float %210 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %311, i32 %312, i32 %313, i32 %314, ptr addrspace(1) %20, i1 true) #3, !dbg !35
  %315 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !41
  %316 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !41
  %317 = bitcast float %299 to i32, !dbg !42
  %318 = bitcast float %300 to i32, !dbg !42
  %319 = bitcast float %301 to i32, !dbg !42
  %320 = bitcast float %302 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %317, i32 %318, i32 %319, i32 %320, ptr addrspace(1) %315, i1 true) #3, !dbg !42
  %321 = bitcast float %303 to i32, !dbg !42
  %322 = bitcast float %304 to i32, !dbg !42
  %323 = bitcast float %305 to i32, !dbg !42
  %324 = bitcast float %306 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %321, i32 %322, i32 %323, i32 %324, ptr addrspace(1) %316, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyk7dao7uqd25qynp62mi3zmynzawcwmjkltxotkay2ubfbfqezr.py", directory: "inductor_cache/yk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 27, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 34, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 46, column: 39, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 20, scope: !7)
!38 = !DILocation(line: 43, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 25, scope: !7)
!42 = !DILocation(line: 47, column: 37, scope: !7)
!43 = !DILocation(line: 47, column: 4, scope: !7)
