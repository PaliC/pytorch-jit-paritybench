; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = srem i32 %10, 384, !dbg !14
  %13 = srem i32 %11, 384, !dbg !14
  %14 = sext i32 %10 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = sext i32 %11 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !16
  %20 = sext i32 %12 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !17
  %22 = sext i32 %13 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !20
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = bitcast i32 %31 to float, !dbg !20
  %36 = bitcast i32 %32 to float, !dbg !20
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = fadd float %33, 0x3EE4F8B580000000, !dbg !21
  %47 = fadd float %34, 0x3EE4F8B580000000, !dbg !21
  %48 = fadd float %35, 0x3EE4F8B580000000, !dbg !21
  %49 = fadd float %36, 0x3EE4F8B580000000, !dbg !21
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !21
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !21
  %52 = fadd float %44, 0x3EE4F8B580000000, !dbg !21
  %53 = fadd float %45, 0x3EE4F8B580000000, !dbg !21
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i = icmp eq i32 %54, 0, !dbg !22
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i = icmp eq i32 %55, 0, !dbg !22
  br i1 %.not.i, label %61, label %56, !dbg !22

56:                                               ; preds = %4
  br i1 %.not1.i, label %59, label %57, !dbg !22

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

61:                                               ; preds = %4
  br i1 %.not1.i, label %64, label %62, !dbg !22

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !22
  br label %__nv_sqrtf.exit, !dbg !22

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !22
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i1 = icmp eq i32 %66, 0, !dbg !22
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i4 = icmp eq i32 %67, 0, !dbg !22
  br i1 %.not.i1, label %73, label %68, !dbg !22

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !22

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !22
  br label %__nv_sqrtf.exit5, !dbg !22

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !22
  br label %__nv_sqrtf.exit5, !dbg !22

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !22

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !22
  br label %__nv_sqrtf.exit5, !dbg !22

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !22
  br label %__nv_sqrtf.exit5, !dbg !22

__nv_sqrtf.exit5:                                 ; preds = %69, %71, %74, %76
  %.0.i3 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !22
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i6 = icmp eq i32 %78, 0, !dbg !22
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i9 = icmp eq i32 %79, 0, !dbg !22
  br i1 %.not.i6, label %85, label %80, !dbg !22

80:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %83, label %81, !dbg !22

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !22
  br label %__nv_sqrtf.exit10, !dbg !22

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !22
  br label %__nv_sqrtf.exit10, !dbg !22

85:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %88, label %86, !dbg !22

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !22
  br label %__nv_sqrtf.exit10, !dbg !22

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !22
  br label %__nv_sqrtf.exit10, !dbg !22

__nv_sqrtf.exit10:                                ; preds = %81, %83, %86, %88
  %.0.i8 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !22
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i11 = icmp eq i32 %90, 0, !dbg !22
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i14 = icmp eq i32 %91, 0, !dbg !22
  br i1 %.not.i11, label %97, label %92, !dbg !22

92:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %95, label %93, !dbg !22

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

97:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %100, label %98, !dbg !22

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

__nv_sqrtf.exit15:                                ; preds = %93, %95, %98, %100
  %.0.i13 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !22
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i16 = icmp eq i32 %102, 0, !dbg !22
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i19 = icmp eq i32 %103, 0, !dbg !22
  br i1 %.not.i16, label %109, label %104, !dbg !22

104:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %107, label %105, !dbg !22

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

109:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %112, label %110, !dbg !22

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !22
  br label %__nv_sqrtf.exit20, !dbg !22

__nv_sqrtf.exit20:                                ; preds = %105, %107, %110, %112
  %.0.i18 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !22
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i21 = icmp eq i32 %114, 0, !dbg !22
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i24 = icmp eq i32 %115, 0, !dbg !22
  br i1 %.not.i21, label %121, label %116, !dbg !22

116:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %119, label %117, !dbg !22

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

121:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %124, label %122, !dbg !22

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !22
  br label %__nv_sqrtf.exit25, !dbg !22

__nv_sqrtf.exit25:                                ; preds = %117, %119, %122, %124
  %.0.i23 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !22
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i26 = icmp eq i32 %126, 0, !dbg !22
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i29 = icmp eq i32 %127, 0, !dbg !22
  br i1 %.not.i26, label %133, label %128, !dbg !22

128:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %131, label %129, !dbg !22

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !22
  br label %__nv_sqrtf.exit30, !dbg !22

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !22
  br label %__nv_sqrtf.exit30, !dbg !22

133:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %136, label %134, !dbg !22

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !22
  br label %__nv_sqrtf.exit30, !dbg !22

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !22
  br label %__nv_sqrtf.exit30, !dbg !22

__nv_sqrtf.exit30:                                ; preds = %129, %131, %134, %136
  %.0.i28 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !22
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !22
  %.not.i31 = icmp eq i32 %138, 0, !dbg !22
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !22
  %.not1.i34 = icmp eq i32 %139, 0, !dbg !22
  br i1 %.not.i31, label %145, label %140, !dbg !22

140:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %143, label %141, !dbg !22

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !22
  br label %__nv_sqrtf.exit35, !dbg !22

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !22
  br label %__nv_sqrtf.exit35, !dbg !22

145:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %148, label %146, !dbg !22

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !22
  br label %__nv_sqrtf.exit35, !dbg !22

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !22
  br label %__nv_sqrtf.exit35, !dbg !22

__nv_sqrtf.exit35:                                ; preds = %141, %143, %146, %148
  %.0.i33 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !22
  %150 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %151 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %152 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %153 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %154 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %155 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %156 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %157 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %158 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %159 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !18
  %160 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %161 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !18
  %162 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %163 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !18
  %164 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %165 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !18
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !23
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !23
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !23
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !23
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !23
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !23
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !23
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !23
  %174 = insertelement <8 x i32> poison, i32 %150, i64 0, !dbg !16
  %175 = insertelement <8 x i32> %174, i32 %152, i64 1, !dbg !16
  %176 = insertelement <8 x i32> %175, i32 %154, i64 2, !dbg !16
  %177 = insertelement <8 x i32> %176, i32 %156, i64 3, !dbg !16
  %178 = insertelement <8 x i32> %177, i32 %158, i64 4, !dbg !16
  %179 = insertelement <8 x i32> %178, i32 %160, i64 5, !dbg !16
  %180 = insertelement <8 x i32> %179, i32 %162, i64 6, !dbg !16
  %181 = insertelement <8 x i32> %180, i32 %164, i64 7, !dbg !16
  %182 = bitcast <8 x i32> %181 to <8 x float>, !dbg !16
  %183 = insertelement <8 x i32> poison, i32 %151, i64 0, !dbg !18
  %184 = insertelement <8 x i32> %183, i32 %153, i64 1, !dbg !18
  %185 = insertelement <8 x i32> %184, i32 %155, i64 2, !dbg !18
  %186 = insertelement <8 x i32> %185, i32 %157, i64 3, !dbg !18
  %187 = insertelement <8 x i32> %186, i32 %159, i64 4, !dbg !18
  %188 = insertelement <8 x i32> %187, i32 %161, i64 5, !dbg !18
  %189 = insertelement <8 x i32> %188, i32 %163, i64 6, !dbg !18
  %190 = insertelement <8 x i32> %189, i32 %165, i64 7, !dbg !18
  %191 = bitcast <8 x i32> %190 to <8 x float>, !dbg !18
  %192 = fsub <8 x float> %182, %191, !dbg !24
  %193 = insertelement <8 x float> poison, float %173, i64 0, !dbg !25
  %194 = insertelement <8 x float> %193, float %172, i64 1, !dbg !25
  %195 = insertelement <8 x float> %194, float %171, i64 2, !dbg !25
  %196 = insertelement <8 x float> %195, float %170, i64 3, !dbg !25
  %197 = insertelement <8 x float> %196, float %169, i64 4, !dbg !25
  %198 = insertelement <8 x float> %197, float %168, i64 5, !dbg !25
  %199 = insertelement <8 x float> %198, float %167, i64 6, !dbg !25
  %200 = insertelement <8 x float> %199, float %166, i64 7, !dbg !25
  %201 = fmul <8 x float> %192, %200, !dbg !25
  %202 = fcmp olt <8 x float> %201, zeroinitializer, !dbg !26
  %203 = extractelement <8 x i1> %202, i64 7, !dbg !30
  %204 = extractelement <8 x i1> %202, i64 6, !dbg !30
  %205 = extractelement <8 x i1> %202, i64 5, !dbg !30
  %206 = extractelement <8 x i1> %202, i64 4, !dbg !30
  %207 = extractelement <8 x i1> %202, i64 3, !dbg !30
  %208 = extractelement <8 x i1> %202, i64 2, !dbg !30
  %209 = extractelement <8 x i1> %202, i64 1, !dbg !30
  %210 = extractelement <8 x i1> %202, i64 0, !dbg !30
  %bc = bitcast <8 x float> %201 to <8 x i32>, !dbg !31
  %211 = extractelement <8 x i32> %bc, i64 7, !dbg !31
  %212 = select i1 %203, i32 0, i32 %211, !dbg !30
  %bc36 = bitcast <8 x float> %201 to <8 x i32>, !dbg !31
  %213 = extractelement <8 x i32> %bc36, i64 6, !dbg !31
  %214 = select i1 %204, i32 0, i32 %213, !dbg !30
  %bc37 = bitcast <8 x float> %201 to <8 x i32>, !dbg !31
  %215 = extractelement <8 x i32> %bc37, i64 5, !dbg !31
  %216 = select i1 %205, i32 0, i32 %215, !dbg !30
  %bc38 = bitcast <8 x float> %201 to <8 x i32>, !dbg !31
  %217 = extractelement <8 x i32> %bc38, i64 4, !dbg !31
  %218 = select i1 %206, i32 0, i32 %217, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %212, i32 %214, i32 %216, i32 %218, ptr addrspace(1) %15, i1 true) #3, !dbg !31
  %bc39 = bitcast <8 x float> %201 to <8 x i32>, !dbg !31
  %219 = extractelement <8 x i32> %bc39, i64 3, !dbg !31
  %220 = select i1 %207, i32 0, i32 %219, !dbg !30
  %bc40 = bitcast <8 x float> %201 to <8 x i32>, !dbg !31
  %221 = extractelement <8 x i32> %bc40, i64 2, !dbg !31
  %222 = select i1 %208, i32 0, i32 %221, !dbg !30
  %bc41 = bitcast <8 x float> %201 to <8 x i32>, !dbg !31
  %223 = extractelement <8 x i32> %bc41, i64 1, !dbg !31
  %224 = select i1 %209, i32 0, i32 %223, !dbg !30
  %bc42 = bitcast <8 x float> %201 to <8 x i32>, !dbg !31
  %225 = extractelement <8 x i32> %bc42, i64 0, !dbg !31
  %226 = select i1 %210, i32 0, i32 %225, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %220, i32 %222, i32 %224, i32 %226, ptr addrspace(1) %17, i1 true) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy4tpc3jkdcm25as3mqvjcielgqda5iiinuhoeev3cfbh2v4mhnb.py", directory: "inductor_cache/y4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 31, column: 18, scope: !7)
!22 = !DILocation(line: 32, column: 26, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 29, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 39, column: 42, scope: !7)
!30 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 40, column: 40, scope: !7)
!32 = !DILocation(line: 40, column: 4, scope: !7)
