; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 18432, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 12, !dbg !15
  %16 = srem i32 %15, 12, !dbg !16
  %17 = mul i32 %15, 12, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = sdiv i32 %13, 144, !dbg !18
  %19 = srem i32 %18, 32, !dbg !19
  %20 = and i32 %16, -4, !dbg !20
  %21 = icmp eq i32 %20, 4, !dbg !20
  %22 = and i32 %.decomposed, -4, !dbg !21
  %23 = icmp eq i32 %22, 4, !dbg !21
  %24 = and i1 %23, %21, !dbg !21
  %25 = add nsw i32 %.decomposed, -20, !dbg !22
  %26 = shl nsw i32 %16, 2, !dbg !23
  %27 = shl nsw i32 %18, 4, !dbg !24
  %28 = add nsw i32 %25, %27, !dbg !25
  %29 = add nsw i32 %28, %26, !dbg !26
  %30 = sext i32 %29 to i64, !dbg !27
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !27
  %32 = and i1 %14, %24, !dbg !28
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #3, !dbg !29
  %34 = sext i32 %19 to i64, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !30
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %32, i32 0, i1 %32) #3, !dbg !31
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %32, i32 0, i1 %32) #3, !dbg !31
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !32
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %32, i32 0, i1 %32) #3, !dbg !33
  %40 = bitcast i32 %39 to float, !dbg !33
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %32, i32 0, i1 %32) #3, !dbg !33
  %42 = bitcast i32 %41 to float, !dbg !33
  %43 = fadd float %40, 0x3EE4F8B580000000, !dbg !34
  %44 = fadd float %42, 0x3EE4F8B580000000, !dbg !34
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %45, 0, !dbg !35
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %46, 0, !dbg !35
  br i1 %.not.i, label %52, label %47, !dbg !35

47:                                               ; preds = %7
  br i1 %.not1.i, label %50, label %48, !dbg !35

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

52:                                               ; preds = %7
  br i1 %.not1.i, label %55, label %53, !dbg !35

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %48, %50, %53, %55
  %.0.i = phi float [ %49, %48 ], [ %51, %50 ], [ %54, %53 ], [ %56, %55 ], !dbg !35
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %57, 0, !dbg !35
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %58, 0, !dbg !35
  br i1 %.not.i1, label %64, label %59, !dbg !35

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !35

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %67, label %65, !dbg !35

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %60, %62, %65, %67
  %.0.i3 = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !35
  %69 = extractvalue { i32, i32 } %33, 1, !dbg !29
  %70 = bitcast i32 %69 to float, !dbg !29
  %71 = bitcast i32 %37 to float, !dbg !31
  %72 = fsub float %70, %71, !dbg !36
  %73 = extractvalue { i32, i32 } %33, 0, !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = bitcast i32 %36 to float, !dbg !31
  %76 = fsub float %74, %75, !dbg !36
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %79 = fmul float %76, %77, !dbg !38
  %80 = fmul float %72, %78, !dbg !38
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !39
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %32, i32 0, i1 %32) #3, !dbg !40
  %83 = bitcast i32 %82 to float, !dbg !40
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %32, i32 0, i1 %32) #3, !dbg !40
  %85 = bitcast i32 %84 to float, !dbg !40
  %86 = fmul float %79, %83, !dbg !41
  %87 = fmul float %80, %85, !dbg !41
  %88 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !42
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %32, i32 0, i1 %32) #3, !dbg !43
  %90 = bitcast i32 %89 to float, !dbg !43
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %32, i32 0, i1 %32) #3, !dbg !43
  %92 = bitcast i32 %91 to float, !dbg !43
  %93 = fadd float %86, %90, !dbg !44
  %94 = fadd float %87, %92, !dbg !44
  %95 = fcmp olt float %93, 0.000000e+00, !dbg !45
  %96 = fcmp olt float %94, 0.000000e+00, !dbg !45
  %97 = select i1 %95, float 0.000000e+00, float %93, !dbg !49
  %98 = select i1 %96, float 0.000000e+00, float %94, !dbg !49
  %99 = sext i32 %13 to i64, !dbg !50
  %100 = getelementptr float, ptr addrspace(1) %5, i64 %99, !dbg !50
  %101 = bitcast float %97 to i32, !dbg !51
  %102 = select i1 %24, i32 %101, i32 0, !dbg !52
  %103 = bitcast float %98 to i32, !dbg !51
  %104 = select i1 %24, i32 %103, i32 0, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %104, ptr addrspace(1) %100, i1 %14) #3, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6k7i4tmbk3hfl5uz5hpe36zfyfblgnon4peublydcybvfia7rmu.py", directory: "inductor_cache/6k")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_9", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 28, scope: !7)
!20 = !DILocation(line: 37, column: 18, scope: !7)
!21 = !DILocation(line: 39, column: 19, scope: !7)
!22 = !DILocation(line: 40, column: 39, scope: !7)
!23 = !DILocation(line: 40, column: 46, scope: !7)
!24 = !DILocation(line: 40, column: 54, scope: !7)
!25 = !DILocation(line: 40, column: 44, scope: !7)
!26 = !DILocation(line: 40, column: 51, scope: !7)
!27 = !DILocation(line: 40, column: 31, scope: !7)
!28 = !DILocation(line: 40, column: 67, scope: !7)
!29 = !DILocation(line: 40, column: 59, scope: !7)
!30 = !DILocation(line: 41, column: 31, scope: !7)
!31 = !DILocation(line: 41, column: 36, scope: !7)
!32 = !DILocation(line: 43, column: 31, scope: !7)
!33 = !DILocation(line: 43, column: 36, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 27, scope: !7)
!36 = !DILocation(line: 42, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 31, scope: !7)
!40 = !DILocation(line: 52, column: 36, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 31, scope: !7)
!43 = !DILocation(line: 54, column: 36, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 57, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 60, column: 25, scope: !7)
!51 = !DILocation(line: 60, column: 37, scope: !7)
!52 = !DILocation(line: 59, column: 35, scope: !7)
!53 = !DILocation(line: 60, column: 4, scope: !7)
