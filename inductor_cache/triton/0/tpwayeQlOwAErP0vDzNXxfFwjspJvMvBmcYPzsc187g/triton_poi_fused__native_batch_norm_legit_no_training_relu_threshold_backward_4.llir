; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 504, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %17, 4, !dbg !13
  %19 = or disjoint i32 %11, %16, !dbg !13
  %20 = icmp slt i32 %17, 384, !dbg !14
  %21 = icmp slt i32 %19, 384, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 1, !dbg !16
  %24 = lshr i32 %12, 6, !dbg !17
  %.lobit = and i32 %24, 1, !dbg !17
  %25 = or disjoint i32 %23, %.lobit, !dbg !18
  %26 = icmp slt i32 %25, 256, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %27 = sdiv i32 %.frozen, 96, !dbg !20
  %28 = mul i32 %27, 96, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %29 = srem i32 %18, 96, !dbg !21
  %30 = srem i32 %19, 96, !dbg !21
  %31 = mul i32 %25, 96, !dbg !22
  %32 = mul i32 %27, 24576, !dbg !23
  %33 = add i32 %32, %31, !dbg !24
  %34 = add i32 %33, %.decomposed, !dbg !25
  %35 = add i32 %33, %29, !dbg !25
  %36 = sext i32 %34 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = sext i32 %35 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = and i1 %20, %26, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #4, !dbg !28
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %40) #4, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !28
  %51 = and i32 %13, 1016, !dbg !28
  %52 = lshr i32 %13, 6, !dbg !28
  %53 = and i32 %52, 8, !dbg !28
  %54 = add nuw nsw i32 %53, %51, !dbg !28
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %55, i32 %42, i32 %43, i32 %44, i32 %45, i1 true) #4, !dbg !28
  %56 = getelementptr inbounds i8, ptr addrspace(3) %55, i32 16, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %56, i32 %47, i32 %48, i32 %49, i32 %50, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !28
  %58 = load <4 x float>, ptr addrspace(3) %57, align 16, !dbg !28
  %59 = add nuw nsw i32 %16, 520, !dbg !28
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %59, !dbg !28
  %61 = load <4 x float>, ptr addrspace(3) %60, align 16, !dbg !28
  %62 = sext i32 %30 to i64, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %21) #4, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !31
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %21) #4, !dbg !32
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !32
  %71 = bitcast i32 %67 to float, !dbg !32
  %72 = bitcast i32 %68 to float, !dbg !32
  %73 = bitcast i32 %69 to float, !dbg !32
  %74 = bitcast i32 %70 to float, !dbg !32
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !33
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %21) #4, !dbg !34
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !35
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %21) #4, !dbg !36
  %79 = fadd float %71, 0x3F1A36E2E0000000, !dbg !37
  %80 = fadd float %72, 0x3F1A36E2E0000000, !dbg !37
  %81 = fadd float %73, 0x3F1A36E2E0000000, !dbg !37
  %82 = fadd float %74, 0x3F1A36E2E0000000, !dbg !37
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %83, 0, !dbg !38
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %84, 0, !dbg !38
  br i1 %.not.i, label %90, label %85, !dbg !38

85:                                               ; preds = %9
  br i1 %.not1.i, label %88, label %86, !dbg !38

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

90:                                               ; preds = %9
  br i1 %.not1.i, label %93, label %91, !dbg !38

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %86, %88, %91, %93
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !38
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i13 = icmp eq i32 %95, 0, !dbg !38
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i16 = icmp eq i32 %96, 0, !dbg !38
  br i1 %.not.i13, label %102, label %97, !dbg !38

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %100, label %98, !dbg !38

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %105, label %103, !dbg !38

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

__nv_sqrtf.exit17:                                ; preds = %98, %100, %103, %105
  %.0.i15 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !38
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i18 = icmp eq i32 %107, 0, !dbg !38
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i21 = icmp eq i32 %108, 0, !dbg !38
  br i1 %.not.i18, label %114, label %109, !dbg !38

109:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %112, label %110, !dbg !38

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

114:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %117, label %115, !dbg !38

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

__nv_sqrtf.exit22:                                ; preds = %110, %112, %115, %117
  %.0.i20 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !38
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i23 = icmp eq i32 %119, 0, !dbg !38
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i26 = icmp eq i32 %120, 0, !dbg !38
  br i1 %.not.i23, label %126, label %121, !dbg !38

121:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %124, label %122, !dbg !38

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

126:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %129, label %127, !dbg !38

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

__nv_sqrtf.exit27:                                ; preds = %122, %124, %127, %129
  %.0.i25 = phi float [ %123, %122 ], [ %125, %124 ], [ %128, %127 ], [ %130, %129 ], !dbg !38
  %131 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !36
  %136 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !36
  %137 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !36
  %138 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !36
  %139 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !34
  %142 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !34
  %143 = icmp slt i32 %23, 256, !dbg !19
  %144 = and i32 %12, 127, !dbg !12
  %145 = or disjoint i32 %144, %11, !dbg !13
  %146 = icmp slt i32 %11, 0, !dbg !14
  %147 = and i1 %143, %146, !dbg !27
  %148 = or disjoint i32 %145, 256, !dbg !13
  %149 = icmp slt i32 %148, 384, !dbg !14
  %150 = and i1 %143, %149, !dbg !27
  %151 = or disjoint i32 %145, 128, !dbg !13
  %152 = icmp slt i32 %151, 384, !dbg !14
  %153 = and i1 %143, %152, !dbg !27
  %154 = icmp slt i32 %145, 384, !dbg !14
  %155 = and i1 %143, %154, !dbg !27
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !39
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !39
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !39
  %160 = insertelement <4 x i32> poison, i32 %131, i64 0, !dbg !30
  %161 = insertelement <4 x i32> %160, i32 %132, i64 1, !dbg !30
  %162 = insertelement <4 x i32> %161, i32 %133, i64 2, !dbg !30
  %163 = insertelement <4 x i32> %162, i32 %134, i64 3, !dbg !30
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !30
  %165 = shufflevector <4 x float> %164, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %166 = shufflevector <4 x float> %61, <4 x float> %58, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !40
  %167 = fsub <8 x float> %166, %165, !dbg !40
  %168 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !36
  %169 = insertelement <4 x i32> %168, i32 %136, i64 1, !dbg !36
  %170 = insertelement <4 x i32> %169, i32 %137, i64 2, !dbg !36
  %171 = insertelement <4 x i32> %170, i32 %138, i64 3, !dbg !36
  %172 = bitcast <4 x i32> %171 to <4 x float>, !dbg !36
  %173 = shufflevector <4 x float> %172, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %174 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !34
  %175 = insertelement <4 x i32> %174, i32 %140, i64 1, !dbg !34
  %176 = insertelement <4 x i32> %175, i32 %141, i64 2, !dbg !34
  %177 = insertelement <4 x i32> %176, i32 %142, i64 3, !dbg !34
  %178 = bitcast <4 x i32> %177 to <4 x float>, !dbg !34
  %179 = shufflevector <4 x float> %178, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %180 = insertelement <8 x float> poison, float %159, i64 0, !dbg !41
  %181 = insertelement <8 x float> %180, float %158, i64 1, !dbg !41
  %182 = insertelement <8 x float> %181, float %157, i64 2, !dbg !41
  %183 = insertelement <8 x float> %182, float %156, i64 3, !dbg !41
  %184 = shufflevector <8 x float> %183, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %185 = fmul <8 x float> %167, %184, !dbg !41
  %186 = fmul <8 x float> %185, %179, !dbg !42
  %187 = fadd <8 x float> %186, %173, !dbg !43
  %188 = fcmp olt <8 x float> %187, zeroinitializer, !dbg !44
  %189 = select <8 x i1> %188, <8 x float> zeroinitializer, <8 x float> %187, !dbg !48
  %190 = fcmp ole <8 x float> %189, zeroinitializer, !dbg !49
  %191 = shl i32 %145, 8, !dbg !50
  %192 = shl i32 %151, 8, !dbg !50
  %193 = shl i32 %148, 8, !dbg !50
  %194 = or disjoint i32 %191, 98304, !dbg !50
  %195 = add i32 %191, %23, !dbg !51
  %196 = add i32 %192, %23, !dbg !51
  %197 = add i32 %193, %23, !dbg !51
  %198 = add i32 %194, %23, !dbg !51
  %199 = sext i32 %195 to i64, !dbg !52
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %199, !dbg !52
  %201 = sext i32 %196 to i64, !dbg !52
  %202 = getelementptr float, ptr addrspace(1) %5, i64 %201, !dbg !52
  %203 = sext i32 %197 to i64, !dbg !52
  %204 = getelementptr float, ptr addrspace(1) %5, i64 %203, !dbg !52
  %205 = sext i32 %198 to i64, !dbg !52
  %206 = getelementptr float, ptr addrspace(1) %5, i64 %205, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %207 = shl i32 %12, 1, !dbg !53
  %208 = and i32 %207, 254, !dbg !53
  %209 = lshr exact i32 %51, 1, !dbg !53
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %209, !dbg !53
  %211 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %51, !dbg !53
  %212 = extractelement <8 x float> %189, i64 7, !dbg !53
  %213 = bitcast float %212 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %213, i1 true) #4, !dbg !53
  %214 = or disjoint i32 %51, 2, !dbg !53
  %215 = lshr exact i32 %214, 1, !dbg !53
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %215, !dbg !53
  %217 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %214, !dbg !53
  %218 = extractelement <8 x float> %189, i64 6, !dbg !53
  %219 = bitcast float %218 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %219, i1 true) #4, !dbg !53
  %220 = or disjoint i32 %51, 4, !dbg !53
  %221 = lshr exact i32 %220, 1, !dbg !53
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !53
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !53
  %224 = extractelement <8 x float> %189, i64 5, !dbg !53
  %225 = bitcast float %224 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %225, i1 true) #4, !dbg !53
  %226 = or disjoint i32 %51, 6, !dbg !53
  %227 = lshr exact i32 %226, 1, !dbg !53
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %227, !dbg !53
  %229 = getelementptr inbounds float, ptr addrspace(3) %228, i32 %226, !dbg !53
  %230 = extractelement <8 x float> %189, i64 4, !dbg !53
  %231 = bitcast float %230 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %231, i1 true) #4, !dbg !53
  %232 = or disjoint i32 %51, 1, !dbg !53
  %233 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %232, !dbg !53
  %234 = extractelement <8 x float> %189, i64 3, !dbg !53
  %235 = bitcast float %234 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %235, i1 true) #4, !dbg !53
  %236 = or disjoint i32 %51, 3, !dbg !53
  %237 = lshr i32 %236, 1, !dbg !53
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %237, !dbg !53
  %239 = getelementptr inbounds float, ptr addrspace(3) %238, i32 %236, !dbg !53
  %240 = extractelement <8 x float> %189, i64 2, !dbg !53
  %241 = bitcast float %240 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %241, i1 true) #4, !dbg !53
  %242 = or disjoint i32 %51, 5, !dbg !53
  %243 = lshr i32 %242, 1, !dbg !53
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !53
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %242, !dbg !53
  %246 = extractelement <8 x float> %189, i64 1, !dbg !53
  %247 = bitcast float %246 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %247, i1 true) #4, !dbg !53
  %248 = or disjoint i32 %51, 7, !dbg !53
  %249 = lshr i32 %248, 1, !dbg !53
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !53
  %251 = getelementptr inbounds float, ptr addrspace(3) %250, i32 %248, !dbg !53
  %252 = extractelement <8 x float> %189, i64 0, !dbg !53
  %253 = bitcast float %252 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %253, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %254 = lshr exact i32 %208, 1, !dbg !53
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !53
  %256 = getelementptr float, ptr addrspace(3) %255, i32 %208, !dbg !53
  %257 = load i32, ptr addrspace(3) %256, align 4, !dbg !53
  %258 = or disjoint i32 %208, 1, !dbg !53
  %259 = getelementptr float, ptr addrspace(3) %255, i32 %258, !dbg !53
  %260 = load i32, ptr addrspace(3) %259, align 4, !dbg !53
  %261 = or disjoint i32 %208, 256, !dbg !53
  %262 = lshr exact i32 %261, 1, !dbg !53
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !53
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %261, !dbg !53
  %265 = load i32, ptr addrspace(3) %264, align 4, !dbg !53
  %266 = or disjoint i32 %208, 257, !dbg !53
  %267 = lshr i32 %266, 1, !dbg !53
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !53
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %266, !dbg !53
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !53
  %271 = or disjoint i32 %208, 512, !dbg !53
  %272 = lshr exact i32 %271, 1, !dbg !53
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !53
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %271, !dbg !53
  %275 = load i32, ptr addrspace(3) %274, align 4, !dbg !53
  %276 = or disjoint i32 %208, 513, !dbg !53
  %277 = lshr i32 %276, 1, !dbg !53
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %277, !dbg !53
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %276, !dbg !53
  %280 = load i32, ptr addrspace(3) %279, align 4, !dbg !53
  %281 = or disjoint i32 %208, 768, !dbg !53
  %282 = lshr exact i32 %281, 1, !dbg !53
  %283 = getelementptr float, ptr addrspace(3) @global_smem, i32 %282, !dbg !53
  %284 = getelementptr float, ptr addrspace(3) %283, i32 %281, !dbg !53
  %285 = load i32, ptr addrspace(3) %284, align 4, !dbg !53
  %286 = or disjoint i32 %208, 769, !dbg !53
  %287 = lshr i32 %286, 1, !dbg !53
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %287, !dbg !53
  %289 = getelementptr float, ptr addrspace(3) %288, i32 %286, !dbg !53
  %290 = load i32, ptr addrspace(3) %289, align 4, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %257, i32 %260, ptr addrspace(1) %200, i1 %155) #4, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %265, i32 %270, ptr addrspace(1) %202, i1 %153) #4, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %275, i32 %280, ptr addrspace(1) %204, i1 %150) #4, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %285, i32 %290, ptr addrspace(1) %206, i1 %147) #4, !dbg !53
  %291 = getelementptr i1, ptr addrspace(1) %6, i64 %36, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %292 = extractelement <8 x i1> %190, i64 7, !dbg !55
  %293 = zext i1 %292 to i8, !dbg !55
  %294 = extractelement <8 x i1> %190, i64 6, !dbg !55
  %295 = zext i1 %294 to i8, !dbg !55
  %296 = extractelement <8 x i1> %190, i64 5, !dbg !55
  %297 = zext i1 %296 to i8, !dbg !55
  %298 = extractelement <8 x i1> %190, i64 4, !dbg !55
  %299 = zext i1 %298 to i8, !dbg !55
  %300 = extractelement <8 x i1> %190, i64 3, !dbg !55
  %301 = zext i1 %300 to i8, !dbg !55
  %302 = extractelement <8 x i1> %190, i64 2, !dbg !55
  %303 = zext i1 %302 to i8, !dbg !55
  %304 = extractelement <8 x i1> %190, i64 1, !dbg !55
  %305 = zext i1 %304 to i8, !dbg !55
  %306 = extractelement <8 x i1> %190, i64 0, !dbg !55
  %307 = zext i1 %306 to i8, !dbg !55
  %308 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %16, !dbg !55
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %308, i8 %293, i8 %295, i8 %297, i8 %299, i1 true) #4, !dbg !55
  %309 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %59, !dbg !55
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %309, i8 %301, i8 %303, i8 %305, i8 %307, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %310 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %54, !dbg !55
  %311 = load <2 x i32>, ptr addrspace(3) %310, align 8, !dbg !55
  %312 = bitcast <2 x i32> %311 to <64 x i1>, !dbg !55
  %313 = extractelement <64 x i1> %312, i64 24, !dbg !55
  %314 = extractelement <64 x i1> %312, i64 56, !dbg !55
  %315 = bitcast <2 x i32> %311 to <8 x i8>, !dbg !55
  %316 = extractelement <8 x i8> %315, i64 0, !dbg !55
  %317 = and i8 %316, 1, !dbg !55
  %318 = shufflevector <8 x i8> %315, <8 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !55
  %319 = and <2 x i8> %318, splat (i8 1), !dbg !55
  %320 = zext i1 %313 to i8, !dbg !55
  %321 = extractelement <8 x i8> %315, i64 4, !dbg !55
  %322 = and i8 %321, 1, !dbg !55
  %323 = shufflevector <8 x i8> %315, <8 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !55
  %324 = and <2 x i8> %323, splat (i8 1), !dbg !55
  %325 = zext i1 %314 to i8, !dbg !55
  %326 = insertelement <4 x i8> poison, i8 %317, i64 0, !dbg !55
  %327 = shufflevector <2 x i8> %319, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %328 = shufflevector <4 x i8> %326, <4 x i8> %327, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !55
  %329 = insertelement <4 x i8> %328, i8 %320, i64 3, !dbg !55
  %330 = bitcast <4 x i8> %329 to i32, !dbg !55
  %331 = insertelement <4 x i8> poison, i8 %322, i64 0, !dbg !55
  %332 = shufflevector <2 x i8> %324, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !55
  %333 = shufflevector <4 x i8> %331, <4 x i8> %332, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !55
  %334 = insertelement <4 x i8> %333, i8 %325, i64 3, !dbg !55
  %335 = bitcast <4 x i8> %334 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %330, i32 %335, ptr addrspace(1) %291, i1 %40) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "canc3khdxica2cyhxizwvs4x24ln5ki75rzvtxi3dc4uiweaviul.py", directory: "inductor_cache/an")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 51, column: 21, scope: !7)
!50 = !DILocation(line: 52, column: 34, scope: !7)
!51 = !DILocation(line: 52, column: 30, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 52, column: 46, scope: !7)
!54 = !DILocation(line: 53, column: 25, scope: !7)
!55 = !DILocation(line: 53, column: 56, scope: !7)
!56 = !DILocation(line: 53, column: 4, scope: !7)
