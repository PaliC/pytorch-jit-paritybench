; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = icmp slt i32 %17, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = lshr i32 %11, 6, !dbg !17
  %.lobit = and i32 %22, 1, !dbg !17
  %23 = or disjoint i32 %.lobit, 2, !dbg !17
  %24 = or disjoint i32 %21, %.lobit, !dbg !18
  %25 = or disjoint i32 %21, %23, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %26 = sdiv i32 %.frozen, 64, !dbg !19
  %27 = mul i32 %26, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = srem i32 %17, 64, !dbg !20
  %29 = shl i32 %24, 6, !dbg !21
  %30 = shl i32 %25, 6, !dbg !21
  %31 = shl i32 %26, 18, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = add i32 %32, %29, !dbg !24
  %34 = add i32 %32, %30, !dbg !24
  %35 = sext i32 %33 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = sext i32 %34 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %18) #4, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %18) #4, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %49 = and i32 %12, 508, !dbg !26
  %50 = lshr i32 %12, 6, !dbg !26
  %51 = and i32 %50, 4, !dbg !26
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51, !dbg !26
  %53 = getelementptr inbounds float, ptr addrspace(3) %52, i32 %49, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %53, i32 %40, i32 %41, i32 %42, i32 %43, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !26
  %55 = load <2 x float>, ptr addrspace(3) %54, align 8, !dbg !26
  %56 = getelementptr inbounds i8, ptr addrspace(3) %54, i32 1040, !dbg !26
  %57 = load <2 x float>, ptr addrspace(3) %56, align 8, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %53, i32 %45, i32 %46, i32 %47, i32 %48, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %58 = load <2 x float>, ptr addrspace(3) %54, align 8, !dbg !26
  %59 = load <2 x float>, ptr addrspace(3) %56, align 8, !dbg !26
  %60 = sext i32 %28 to i64, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !27
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %19) #4, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !29
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %19) #4, !dbg !30
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !30
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !30
  %67 = bitcast i32 %65 to float, !dbg !30
  %68 = bitcast i32 %66 to float, !dbg !30
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !31
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %19) #4, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !33
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %71, i1 %19) #4, !dbg !34
  %73 = fadd float %67, 0x3EE4F8B580000000, !dbg !35
  %74 = fadd float %68, 0x3EE4F8B580000000, !dbg !35
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %75, 0, !dbg !36
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %76, 0, !dbg !36
  br i1 %.not.i, label %82, label %77, !dbg !36

77:                                               ; preds = %8
  br i1 %.not1.i, label %80, label %78, !dbg !36

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

82:                                               ; preds = %8
  br i1 %.not1.i, label %85, label %83, !dbg !36

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !36
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i9 = icmp eq i32 %87, 0, !dbg !36
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i12 = icmp eq i32 %88, 0, !dbg !36
  br i1 %.not.i9, label %94, label %89, !dbg !36

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %92, label %90, !dbg !36

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %97, label %95, !dbg !36

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

__nv_sqrtf.exit13:                                ; preds = %90, %92, %95, %97
  %.0.i11 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !36
  %99 = extractvalue { i32, i32 } %62, 1, !dbg !28
  %100 = extractvalue { i32, i32 } %62, 0, !dbg !28
  %101 = extractelement <2 x float> %57, i64 1, !dbg !26
  %102 = extractelement <2 x float> %57, i64 0, !dbg !26
  %103 = extractelement <2 x float> %55, i64 1, !dbg !26
  %104 = extractelement <2 x float> %55, i64 0, !dbg !26
  %105 = extractvalue { i32, i32 } %72, 1, !dbg !34
  %106 = extractvalue { i32, i32 } %72, 0, !dbg !34
  %107 = extractvalue { i32, i32 } %70, 1, !dbg !32
  %108 = extractvalue { i32, i32 } %70, 0, !dbg !32
  %109 = and i32 %11, 127, !dbg !12
  %110 = or disjoint i32 %109, %10, !dbg !13
  %111 = or disjoint i32 %110, 128, !dbg !13
  %112 = icmp slt i32 %111, 256, !dbg !14
  %113 = icmp slt i32 %110, 256, !dbg !14
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !37
  %116 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !28
  %117 = insertelement <2 x i32> %116, i32 %100, i64 1, !dbg !28
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !28
  %119 = shufflevector <2 x float> %118, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !28
  %120 = shufflevector <2 x float> %59, <2 x float> %58, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %121 = insertelement <8 x float> %120, float %101, i64 4, !dbg !38
  %122 = insertelement <8 x float> %121, float %102, i64 5, !dbg !38
  %123 = insertelement <8 x float> %122, float %103, i64 6, !dbg !38
  %124 = insertelement <8 x float> %123, float %104, i64 7, !dbg !38
  %125 = fsub <8 x float> %124, %119, !dbg !38
  %126 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !34
  %127 = insertelement <2 x i32> %126, i32 %106, i64 1, !dbg !34
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !34
  %129 = shufflevector <2 x float> %128, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %130 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !32
  %131 = insertelement <2 x i32> %130, i32 %108, i64 1, !dbg !32
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !32
  %133 = shufflevector <2 x float> %132, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %134 = insertelement <8 x float> poison, float %115, i64 0, !dbg !39
  %135 = insertelement <8 x float> %134, float %114, i64 1, !dbg !39
  %136 = shufflevector <8 x float> %135, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !39
  %137 = fmul <8 x float> %125, %136, !dbg !39
  %138 = fmul <8 x float> %137, %133, !dbg !40
  %139 = fadd <8 x float> %138, %129, !dbg !41
  %140 = fcmp olt <8 x float> %139, zeroinitializer, !dbg !42
  %141 = extractelement <8 x i1> %140, i64 7, !dbg !46
  %142 = extractelement <8 x float> %139, i64 7, !dbg !46
  %143 = select i1 %141, float 0.000000e+00, float %142, !dbg !46
  %144 = extractelement <8 x i1> %140, i64 6, !dbg !46
  %145 = extractelement <8 x float> %139, i64 6, !dbg !46
  %146 = select i1 %144, float 0.000000e+00, float %145, !dbg !46
  %147 = extractelement <8 x i1> %140, i64 5, !dbg !46
  %148 = extractelement <8 x float> %139, i64 5, !dbg !46
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !46
  %150 = extractelement <8 x i1> %140, i64 4, !dbg !46
  %151 = extractelement <8 x float> %139, i64 4, !dbg !46
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !46
  %153 = extractelement <8 x i1> %140, i64 3, !dbg !46
  %154 = extractelement <8 x float> %139, i64 3, !dbg !46
  %155 = select i1 %153, float 0.000000e+00, float %154, !dbg !46
  %156 = extractelement <8 x i1> %140, i64 2, !dbg !46
  %157 = extractelement <8 x float> %139, i64 2, !dbg !46
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !46
  %159 = extractelement <8 x i1> %140, i64 1, !dbg !46
  %160 = extractelement <8 x float> %139, i64 1, !dbg !46
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !46
  %162 = extractelement <8 x i1> %140, i64 0, !dbg !46
  %163 = extractelement <8 x float> %139, i64 0, !dbg !46
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !46
  %165 = shl i32 %110, 12, !dbg !47
  %166 = shl i32 %111, 12, !dbg !47
  %167 = add i32 %165, %21, !dbg !48
  %168 = add i32 %166, %21, !dbg !48
  %169 = sext i32 %167 to i64, !dbg !49
  %170 = getelementptr float, ptr addrspace(1) %5, i64 %169, !dbg !49
  %171 = sext i32 %168 to i64, !dbg !49
  %172 = getelementptr float, ptr addrspace(1) %5, i64 %171, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %173 = shl i32 %11, 3, !dbg !50
  %174 = and i32 %173, 1016, !dbg !50
  %175 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %174, !dbg !50
  %176 = getelementptr float, ptr addrspace(3) %175, i32 %174, !dbg !50
  %177 = bitcast float %143 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #4, !dbg !50
  %178 = or disjoint i32 %174, 4, !dbg !50
  %179 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %178, !dbg !50
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %178, !dbg !50
  %181 = bitcast float %146 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #4, !dbg !50
  %182 = or disjoint i32 %174, 1, !dbg !50
  %183 = getelementptr float, ptr addrspace(3) %175, i32 %182, !dbg !50
  %184 = bitcast float %149 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #4, !dbg !50
  %185 = or disjoint i32 %174, 5, !dbg !50
  %186 = lshr i32 %185, 2, !dbg !50
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %186, !dbg !50
  %188 = getelementptr float, ptr addrspace(3) %187, i32 %185, !dbg !50
  %189 = bitcast float %152 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #4, !dbg !50
  %190 = or disjoint i32 %174, 2, !dbg !50
  %191 = getelementptr float, ptr addrspace(3) %175, i32 %190, !dbg !50
  %192 = bitcast float %155 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #4, !dbg !50
  %193 = or disjoint i32 %174, 6, !dbg !50
  %194 = lshr i32 %193, 2, !dbg !50
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !50
  %196 = getelementptr float, ptr addrspace(3) %195, i32 %193, !dbg !50
  %197 = bitcast float %158 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #4, !dbg !50
  %198 = or disjoint i32 %174, 3, !dbg !50
  %199 = getelementptr float, ptr addrspace(3) %175, i32 %198, !dbg !50
  %200 = bitcast float %161 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #4, !dbg !50
  %201 = or disjoint i32 %174, 7, !dbg !50
  %202 = lshr i32 %201, 2, !dbg !50
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %202, !dbg !50
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %201, !dbg !50
  %205 = bitcast float %164 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %206 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %49, !dbg !50
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %49, !dbg !50
  %208 = load i32, ptr addrspace(3) %207, align 4, !dbg !50
  %209 = or disjoint i32 %49, 1, !dbg !50
  %210 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %209, !dbg !50
  %211 = load i32, ptr addrspace(3) %210, align 4, !dbg !50
  %212 = or disjoint i32 %49, 2, !dbg !50
  %213 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %212, !dbg !50
  %214 = load i32, ptr addrspace(3) %213, align 4, !dbg !50
  %215 = or disjoint i32 %49, 3, !dbg !50
  %216 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %215, !dbg !50
  %217 = load i32, ptr addrspace(3) %216, align 4, !dbg !50
  %218 = or disjoint i32 %49, 512, !dbg !50
  %219 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %218, !dbg !50
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %218, !dbg !50
  %221 = load i32, ptr addrspace(3) %220, align 4, !dbg !50
  %222 = or disjoint i32 %49, 513, !dbg !50
  %223 = lshr i32 %222, 2, !dbg !50
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %223, !dbg !50
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %222, !dbg !50
  %226 = load i32, ptr addrspace(3) %225, align 4, !dbg !50
  %227 = or disjoint i32 %49, 514, !dbg !50
  %228 = lshr i32 %227, 2, !dbg !50
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !50
  %230 = getelementptr inbounds float, ptr addrspace(3) %229, i32 %227, !dbg !50
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !50
  %232 = or disjoint i32 %49, 515, !dbg !50
  %233 = lshr i32 %232, 2, !dbg !50
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %233, !dbg !50
  %235 = getelementptr inbounds float, ptr addrspace(3) %234, i32 %232, !dbg !50
  %236 = load i32, ptr addrspace(3) %235, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %208, i32 %211, i32 %214, i32 %217, ptr addrspace(1) %170, i1 %113) #4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %221, i32 %226, i32 %231, i32 %236, ptr addrspace(1) %172, i1 %112) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cydia7uuomg45xuhlgkz6mr3iipe2oipzbgnkwhrndbwi2l5zrc3.py", directory: "inductor_cache/yd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 50, column: 35, scope: !7)
!48 = !DILocation(line: 50, column: 30, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 47, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
