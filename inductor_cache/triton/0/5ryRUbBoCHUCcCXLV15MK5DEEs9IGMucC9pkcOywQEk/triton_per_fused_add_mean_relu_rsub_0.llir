; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_relu_rsub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %15 to float, !dbg !12
  %18 = bitcast i32 %16 to float, !dbg !12
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !14
  %25 = bitcast i32 %23 to float, !dbg !14
  %26 = bitcast i32 %24 to float, !dbg !14
  %27 = fsub float 1.000000e+00, %17, !dbg !15
  %28 = fsub float 1.000000e+00, %18, !dbg !15
  %29 = fcmp olt float %27, 0.000000e+00, !dbg !16
  %30 = fcmp olt float %28, 0.000000e+00, !dbg !16
  %31 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %32 = insertelement <2 x i32> %31, i32 %14, i64 1, !dbg !12
  %33 = bitcast <2 x i32> %32 to <2 x float>, !dbg !12
  %34 = fsub <2 x float> splat (float 1.000000e+00), %33, !dbg !15
  %35 = fcmp olt <2 x float> %34, zeroinitializer, !dbg !16
  %36 = select <2 x i1> %35, <2 x float> zeroinitializer, <2 x float> %34, !dbg !20
  %37 = select i1 %29, float 0.000000e+00, float %27, !dbg !20
  %38 = select i1 %30, float 0.000000e+00, float %28, !dbg !20
  %shift = shufflevector <2 x float> %36, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %39 = fadd <2 x float> %36, %shift, !dbg !21
  %40 = extractelement <2 x float> %39, i64 0, !dbg !21
  %41 = fadd float %37, %40, !dbg !21
  %42 = fadd float %38, %41, !dbg !21
  %43 = bitcast float %42 to i32, !dbg !26
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = fadd float %42, %45, !dbg !21
  %47 = bitcast float %46 to i32, !dbg !26
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !26
  %49 = bitcast i32 %48 to float, !dbg !26
  %50 = fadd float %46, %49, !dbg !21
  %51 = bitcast float %50 to i32, !dbg !26
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !26
  %53 = bitcast i32 %52 to float, !dbg !26
  %54 = fadd float %50, %53, !dbg !21
  %55 = bitcast float %54 to i32, !dbg !26
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !26
  %57 = bitcast i32 %56 to float, !dbg !26
  %58 = fadd float %54, %57, !dbg !21
  %59 = bitcast float %58 to i32, !dbg !26
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = fadd float %58, %61, !dbg !21
  %63 = icmp eq i32 %6, 0, !dbg !26
  %64 = and i32 %7, 1, !dbg !26
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !26
  %66 = bitcast float %62 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 %63) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %67 = icmp slt i32 %5, 2, !dbg !26
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !26
  %69 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %67) #3, !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = fadd float %70, %72, !dbg !21
  %74 = and i32 %5, 1, !dbg !26
  %75 = icmp eq i32 %74, 0, !dbg !26
  %76 = and i1 %67, %75, !dbg !26
  %77 = bitcast float %73 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %77, i1 %76) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %78 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %79 = fadd float %78, 0.000000e+00, !dbg !27
  %80 = fadd float %25, 1.000000e+00, !dbg !29
  %81 = fadd float %26, 1.000000e+00, !dbg !29
  %82 = fcmp olt float %80, 0.000000e+00, !dbg !30
  %83 = fcmp olt float %81, 0.000000e+00, !dbg !30
  %84 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !14
  %85 = insertelement <2 x i32> %84, i32 %22, i64 1, !dbg !14
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !14
  %87 = fadd <2 x float> %86, splat (float 1.000000e+00), !dbg !29
  %88 = fcmp olt <2 x float> %87, zeroinitializer, !dbg !30
  %89 = select <2 x i1> %88, <2 x float> zeroinitializer, <2 x float> %87, !dbg !32
  %90 = select i1 %82, float 0.000000e+00, float %80, !dbg !32
  %91 = select i1 %83, float 0.000000e+00, float %81, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %shift1 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %92 = fadd <2 x float> %89, %shift1, !dbg !35
  %93 = extractelement <2 x float> %92, i64 0, !dbg !35
  %94 = fadd float %90, %93, !dbg !35
  %95 = fadd float %91, %94, !dbg !35
  %96 = bitcast float %95 to i32, !dbg !33
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 16, i32 31), !dbg !33
  %98 = bitcast i32 %97 to float, !dbg !33
  %99 = fadd float %95, %98, !dbg !35
  %100 = bitcast float %99 to i32, !dbg !33
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !33
  %102 = bitcast i32 %101 to float, !dbg !33
  %103 = fadd float %99, %102, !dbg !35
  %104 = bitcast float %103 to i32, !dbg !33
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 4, i32 31), !dbg !33
  %106 = bitcast i32 %105 to float, !dbg !33
  %107 = fadd float %103, %106, !dbg !35
  %108 = bitcast float %107 to i32, !dbg !33
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !33
  %110 = bitcast i32 %109 to float, !dbg !33
  %111 = fadd float %107, %110, !dbg !35
  %112 = bitcast float %111 to i32, !dbg !33
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !33
  %114 = bitcast i32 %113 to float, !dbg !33
  %115 = fadd float %111, %114, !dbg !35
  %116 = bitcast float %115 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %116, i1 %63) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %117 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %68, i1 %67) #3, !dbg !33
  %118 = bitcast i32 %117 to float, !dbg !33
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !33
  %120 = bitcast i32 %119 to float, !dbg !33
  %121 = fadd float %118, %120, !dbg !35
  %122 = bitcast float %121 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %122, i1 %76) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %123 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %124 = fadd float %123, 0.000000e+00, !dbg !36
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float 2.560000e+02) #3, !dbg !38
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float 2.560000e+02) #3, !dbg !39
  %127 = fadd float %125, %126, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %urem = and i32 %5, 63, !dbg !42
  %128 = icmp eq i32 %urem, 0, !dbg !42
  %129 = bitcast float %127 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %0, i1 %128) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyfdks5avi3uviw6seaztk2diq2ojj5i7zdxddax3lxjbebcwse6.py", directory: "inductor_cache/yf")
!4 = !{ptr @triton_per_fused_add_mean_relu_rsub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_relu_rsub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_relu_rsub_0", linkageName: "triton_per_fused_add_mean_relu_rsub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 34, column: 18, scope: !7)
!16 = !DILocation(line: 118, column: 15, scope: !17, inlinedAt: !19)
!17 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!18 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!19 = !DILocation(line: 36, column: 40, scope: !7)
!20 = !DILocation(line: 121, column: 29, scope: !17, inlinedAt: !19)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 38, column: 57, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 73, column: 15, scope: !17, inlinedAt: !28)
!28 = !DILocation(line: 38, column: 44, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !17, inlinedAt: !31)
!31 = !DILocation(line: 40, column: 41, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !17, inlinedAt: !31)
!33 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !34)
!34 = !DILocation(line: 42, column: 59, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !34)
!36 = !DILocation(line: 73, column: 15, scope: !17, inlinedAt: !37)
!37 = !DILocation(line: 42, column: 45, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 4, scope: !7)
!42 = !DILocation(line: 48, column: 63, scope: !7)
!43 = !DILocation(line: 48, column: 4, scope: !7)
