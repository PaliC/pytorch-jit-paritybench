#loc = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":19:0)
#loc1 = loc(unknown)
#loc39 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":59:39)
#loc48 = loc(callsite(#loc1 at #loc39))
module {
  tt.func public @triton_per_fused_add_pow_prod_sqrt_std_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<3.000000e+00> : tensor<1x64xf32> loc(#loc1)
    %cst_0 = arith.constant dense<4.000000e+00> : tensor<1x64xf32> loc(#loc1)
    %cst_1 = arith.constant dense<192> : tensor<1x64xi32> loc(#loc1)
    %cst_2 = arith.constant dense<128> : tensor<1x64xi32> loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<1x64xi32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc3)
    %2 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc4)
    %3 = tt.addptr %2, %1 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc4)
    %4 = tt.load %3 : tensor<1x64x!tt.ptr<f32>> loc(#loc5)
    %5 = arith.addi %1, %cst_3 : tensor<1x64xi32> loc(#loc6)
    %6 = tt.addptr %2, %5 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc7)
    %7 = tt.load %6 : tensor<1x64x!tt.ptr<f32>> loc(#loc8)
    %8 = arith.addi %1, %cst_2 : tensor<1x64xi32> loc(#loc9)
    %9 = tt.addptr %2, %8 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc10)
    %10 = tt.load %9 : tensor<1x64x!tt.ptr<f32>> loc(#loc11)
    %11 = arith.addi %1, %cst_1 : tensor<1x64xi32> loc(#loc12)
    %12 = tt.addptr %2, %11 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc13)
    %13 = tt.load %12 : tensor<1x64x!tt.ptr<f32>> loc(#loc14)
    %14 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc15)
    %15 = tt.load %14 : !tt.ptr<f32> loc(#loc16)
    %16 = tt.splat %15 : f32 -> tensor<1x64xf32> loc(#loc17)
    %17 = arith.addf %4, %7 : tensor<1x64xf32> loc(#loc18)
    %18 = arith.addf %17, %10 : tensor<1x64xf32> loc(#loc19)
    %19 = arith.addf %18, %13 : tensor<1x64xf32> loc(#loc20)
    %20 = arith.divf %19, %cst_0 : tensor<1x64xf32> loc(#loc21)
    %21 = arith.subf %4, %20 : tensor<1x64xf32> loc(#loc22)
    %22 = arith.mulf %21, %21 : tensor<1x64xf32> loc(#loc23)
    %23 = arith.subf %7, %20 : tensor<1x64xf32> loc(#loc24)
    %24 = arith.mulf %23, %23 : tensor<1x64xf32> loc(#loc25)
    %25 = arith.addf %22, %24 : tensor<1x64xf32> loc(#loc26)
    %26 = arith.subf %10, %20 : tensor<1x64xf32> loc(#loc27)
    %27 = arith.mulf %26, %26 : tensor<1x64xf32> loc(#loc28)
    %28 = arith.addf %25, %27 : tensor<1x64xf32> loc(#loc29)
    %29 = arith.subf %13, %20 : tensor<1x64xf32> loc(#loc30)
    %30 = arith.mulf %29, %29 : tensor<1x64xf32> loc(#loc31)
    %31 = arith.addf %28, %30 : tensor<1x64xf32> loc(#loc32)
    %32 = arith.divf %31, %cst : tensor<1x64xf32> loc(#loc33)
    %33 = tt.extern_elementwise %32 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x64xf32>) -> tensor<1x64xf32> loc(#loc34)
    %34 = arith.mulf %33, %33 : tensor<1x64xf32> loc(#loc35)
    %35 = arith.addf %34, %16 : tensor<1x64xf32> loc(#loc36)
    %36 = tt.extern_elementwise %35 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x64xf32>) -> tensor<1x64xf32> loc(#loc37)
    %37 = "tt.reduce"(%36) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc39)), %arg6: f32 loc(callsite(#loc1 at #loc39))):
      %43 = arith.mulf %arg5, %arg6 : f32 loc(#loc50)
      tt.reduce.return %43 : f32 loc(#loc47)
    }) : (tensor<1x64xf32>) -> tensor<1xf32> loc(#loc47)
    %38 = tt.expand_dims %37 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc41)
    %39 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc42)
    %40 = tt.addptr %39, %1 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc42)
    tt.store %40, %36 : tensor<1x64x!tt.ptr<f32>> loc(#loc43)
    %41 = tt.addptr %arg3, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc44)
    %42 = tt.splat %41 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc44)
    tt.store %42, %38 : tensor<1x1x!tt.ptr<f32>> loc(#loc45)
    tt.return loc(#loc46)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":26:26)
#loc3 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":26:34)
#loc4 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":30:30)
#loc5 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":30:35)
#loc6 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":31:35)
#loc7 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":31:30)
#loc8 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":31:40)
#loc9 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":32:36)
#loc10 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":32:30)
#loc11 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":32:41)
#loc12 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":33:36)
#loc13 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":33:30)
#loc14 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":33:41)
#loc15 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":34:31)
#loc16 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":34:20)
#loc17 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":35:35)
#loc18 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":36:18)
#loc19 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":37:18)
#loc20 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":38:18)
#loc21 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":40:18)
#loc22 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":41:18)
#loc23 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":42:19)
#loc24 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":43:19)
#loc25 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":44:20)
#loc26 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":45:20)
#loc27 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":46:19)
#loc28 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":47:20)
#loc29 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":48:20)
#loc30 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":49:19)
#loc31 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":50:20)
#loc32 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":51:20)
#loc33 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":53:20)
#loc34 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":54:27)
#loc35 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":55:20)
#loc36 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":56:20)
#loc37 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":57:27)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":105:34)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":100:15)
#loc41 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":59:42)
#loc42 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":60:25)
#loc43 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":60:72)
#loc44 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":61:25)
#loc45 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":61:68)
#loc46 = loc("inductor_cache/gp/cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py":61:4)
#loc47 = loc(callsite(#loc38 at #loc39))
#loc49 = loc(callsite(#loc40 at #loc38))
#loc50 = loc(callsite(#loc49 at #loc39))
