; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_pow_prod_sqrt_std_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 63, !dbg !10
  %8 = zext nneg i32 %7 to i64, !dbg !11
  %9 = getelementptr float, ptr addrspace(1) %0, i64 %8, !dbg !11
  %10 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #5, !dbg !12
  %11 = bitcast i32 %10 to float, !dbg !12
  %12 = or disjoint i32 %7, 64, !dbg !13
  %13 = zext nneg i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #5, !dbg !15
  %16 = bitcast i32 %15 to float, !dbg !15
  %17 = or disjoint i32 %7, 128, !dbg !16
  %18 = zext nneg i32 %17 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !18
  %21 = bitcast i32 %20 to float, !dbg !18
  %22 = or disjoint i32 %7, 192, !dbg !19
  %23 = zext nneg i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !21
  %26 = bitcast i32 %25 to float, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #5, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = fadd float %11, %16, !dbg !23
  %30 = fadd float %29, %21, !dbg !24
  %31 = fadd float %30, %26, !dbg !25
  %32 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float 4.000000e+00) #5, !dbg !26
  %33 = fsub float %11, %32, !dbg !27
  %34 = fmul float %33, %33, !dbg !28
  %35 = fsub float %16, %32, !dbg !29
  %36 = fmul float %35, %35, !dbg !30
  %37 = fadd float %34, %36, !dbg !31
  %38 = fsub float %21, %32, !dbg !32
  %39 = fmul float %38, %38, !dbg !33
  %40 = fadd float %39, %37, !dbg !34
  %41 = fsub float %26, %32, !dbg !35
  %42 = fmul float %41, %41, !dbg !36
  %43 = fadd float %42, %40, !dbg !37
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float 3.000000e+00) #5, !dbg !38
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %45, 0, !dbg !39
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %.not1.i = icmp eq i32 %46, 0, !dbg !39
  br i1 %.not.i, label %52, label %47, !dbg !39

47:                                               ; preds = %5
  br i1 %.not1.i, label %50, label %48, !dbg !39

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

52:                                               ; preds = %5
  br i1 %.not1.i, label %55, label %53, !dbg !39

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %48, %50, %53, %55
  %.0.i = phi float [ %49, %48 ], [ %51, %50 ], [ %54, %53 ], [ %56, %55 ], !dbg !39
  %57 = fmul float %.0.i, %.0.i, !dbg !40
  %58 = fadd float %57, %28, !dbg !41
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i1 = icmp eq i32 %59, 0, !dbg !42
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i4 = icmp eq i32 %60, 0, !dbg !42
  br i1 %.not.i1, label %66, label %61, !dbg !42

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %64, label %62, !dbg !42

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !42

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %62, %64, %67, %69
  %.0.i3 = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !42
  %71 = lshr i32 %6, 5, !dbg !10
  %72 = and i32 %6, 31, !dbg !10
  %73 = bitcast float %.0.i3 to i32, !dbg !43
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !43
  %75 = bitcast i32 %74 to float, !dbg !43
  %76 = fmul float %.0.i3, %75, !dbg !47
  %77 = bitcast float %76 to i32, !dbg !43
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !43
  %79 = bitcast i32 %78 to float, !dbg !43
  %80 = fmul float %76, %79, !dbg !47
  %81 = bitcast float %80 to i32, !dbg !43
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !43
  %83 = bitcast i32 %82 to float, !dbg !43
  %84 = fmul float %80, %83, !dbg !47
  %85 = bitcast float %84 to i32, !dbg !43
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !43
  %87 = bitcast i32 %86 to float, !dbg !43
  %88 = fmul float %84, %87, !dbg !47
  %89 = bitcast float %88 to i32, !dbg !43
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !43
  %91 = bitcast i32 %90 to float, !dbg !43
  %92 = fmul float %88, %91, !dbg !47
  %93 = icmp eq i32 %72, 0, !dbg !43
  %94 = and i32 %71, 1, !dbg !43
  %95 = zext nneg i32 %94 to i64, !dbg !43
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i64 %95, !dbg !43
  %97 = bitcast float %92 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 %93) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %98 = icmp slt i32 %6, 2, !dbg !43
  %99 = sext i32 %6 to i64, !dbg !43
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i64 %99, !dbg !43
  %101 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %100, i1 %98) #5, !dbg !43
  %102 = bitcast i32 %101 to float, !dbg !43
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !43
  %104 = bitcast i32 %103 to float, !dbg !43
  %105 = fmul float %102, %104, !dbg !47
  %106 = and i32 %6, 1, !dbg !43
  %107 = icmp eq i32 %106, 0, !dbg !43
  %108 = and i1 %98, %107, !dbg !43
  %109 = bitcast float %105 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %109, i1 %108) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %110 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %8, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %73, ptr addrspace(1) %111, i1 true) #5, !dbg !50
  %112 = icmp eq i32 %7, 0, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %3, i1 %112) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgpkfvr7okervq3scks75fwivzcrqhv4bt3irhzgigxsmy3xag3t.py", directory: "inductor_cache/gp")
!4 = !{ptr @triton_per_fused_add_pow_prod_sqrt_std_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_pow_prod_sqrt_std_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_pow_prod_sqrt_std_0", linkageName: "triton_per_fused_add_pow_prod_sqrt_std_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 31, column: 35, scope: !7)
!14 = !DILocation(line: 31, column: 30, scope: !7)
!15 = !DILocation(line: 31, column: 40, scope: !7)
!16 = !DILocation(line: 32, column: 36, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 41, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 41, scope: !7)
!22 = !DILocation(line: 34, column: 20, scope: !7)
!23 = !DILocation(line: 36, column: 18, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 18, scope: !7)
!26 = !DILocation(line: 40, column: 18, scope: !7)
!27 = !DILocation(line: 41, column: 18, scope: !7)
!28 = !DILocation(line: 42, column: 19, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 20, scope: !7)
!32 = !DILocation(line: 46, column: 19, scope: !7)
!33 = !DILocation(line: 47, column: 20, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 49, column: 19, scope: !7)
!36 = !DILocation(line: 50, column: 20, scope: !7)
!37 = !DILocation(line: 51, column: 20, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 27, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 57, column: 27, scope: !7)
!43 = !DILocation(line: 105, column: 34, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 59, column: 39, scope: !7)
!47 = !DILocation(line: 100, column: 15, scope: !48, inlinedAt: !46)
!48 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!49 = !DILocation(line: 60, column: 25, scope: !7)
!50 = !DILocation(line: 60, column: 72, scope: !7)
!51 = !DILocation(line: 61, column: 68, scope: !7)
!52 = !DILocation(line: 61, column: 4, scope: !7)
