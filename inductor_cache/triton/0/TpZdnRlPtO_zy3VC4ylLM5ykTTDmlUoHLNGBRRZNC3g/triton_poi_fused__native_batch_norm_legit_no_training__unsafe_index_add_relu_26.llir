; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, i32 %18) local_unnamed_addr !dbg !7 {
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %21 = shl i32 %20, 8, !dbg !11
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %23 = shl i32 %22, 1, !dbg !12
  %24 = and i32 %23, 254, !dbg !12
  %25 = or disjoint i32 %21, %24, !dbg !13
  %26 = sdiv i32 %25, 16, !dbg !14
  %27 = srem i32 %26, 128, !dbg !15
  %.frozen = freeze i32 %25, !dbg !16
  %28 = sdiv i32 %.frozen, 4, !dbg !16
  %29 = srem i32 %28, 4, !dbg !17
  %30 = mul i32 %28, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %30, !dbg !18
  %31 = sext i32 %25 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !19
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %34 = sext i32 %27 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !29
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !34
  %56 = bitcast i32 %55 to float, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %9, i64 %34, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !36
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %10, i64 %34, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !38
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !38
  %65 = getelementptr float, ptr addrspace(1) %11, i64 %31, !dbg !39
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !40
  %67 = sext i32 %29 to i64, !dbg !41
  %68 = getelementptr i64, ptr addrspace(1) %12, i64 %67, !dbg !41
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !42
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !42
  %71 = sext i32 %.decomposed to i64, !dbg !43
  %72 = getelementptr i64, ptr addrspace(1) %12, i64 %71, !dbg !43
  %73 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !44
  %74 = extractvalue { i64, i64 } %73, 0, !dbg !44
  %75 = extractvalue { i64, i64 } %73, 1, !dbg !44
  %76 = getelementptr float, ptr addrspace(1) %14, i64 %34, !dbg !45
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !46
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !46
  %79 = getelementptr float, ptr addrspace(1) %15, i64 %34, !dbg !47
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !48
  %81 = bitcast i32 %80 to float, !dbg !48
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !48
  %83 = bitcast i32 %82 to float, !dbg !48
  %84 = getelementptr float, ptr addrspace(1) %16, i64 %34, !dbg !49
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !50
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !50
  %87 = getelementptr float, ptr addrspace(1) %17, i64 %34, !dbg !51
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !52
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !52
  %90 = fadd float %40, 0x3EE4F8B580000000, !dbg !53
  %91 = fadd float %42, 0x3EE4F8B580000000, !dbg !53
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %92, 0, !dbg !54
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %93, 0, !dbg !54
  br i1 %.not.i, label %99, label %94, !dbg !54

94:                                               ; preds = %19
  br i1 %.not1.i, label %97, label %95, !dbg !54

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

99:                                               ; preds = %19
  br i1 %.not1.i, label %102, label %100, !dbg !54

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %95, %97, %100, %102
  %.0.i = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !54
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i1 = icmp eq i32 %104, 0, !dbg !54
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i4 = icmp eq i32 %105, 0, !dbg !54
  br i1 %.not.i1, label %111, label %106, !dbg !54

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %109, label %107, !dbg !54

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

111:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %114, label %112, !dbg !54

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

__nv_sqrtf.exit5:                                 ; preds = %107, %109, %112, %114
  %.0.i3 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !54
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !55
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !55
  %118 = fadd float %56, 0x3EE4F8B580000000, !dbg !56
  %119 = fadd float %58, 0x3EE4F8B580000000, !dbg !56
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i6 = icmp eq i32 %120, 0, !dbg !57
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i9 = icmp eq i32 %121, 0, !dbg !57
  br i1 %.not.i6, label %127, label %122, !dbg !57

122:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %125, label %123, !dbg !57

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

127:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %130, label %128, !dbg !57

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

__nv_sqrtf.exit10:                                ; preds = %123, %125, %128, %130
  %.0.i8 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !57
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i11 = icmp eq i32 %132, 0, !dbg !57
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i14 = icmp eq i32 %133, 0, !dbg !57
  br i1 %.not.i11, label %139, label %134, !dbg !57

134:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %137, label %135, !dbg !57

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

139:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %142, label %140, !dbg !57

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

__nv_sqrtf.exit15:                                ; preds = %135, %137, %140, %142
  %.0.i13 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !57
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !58
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !58
  %146 = lshr i64 %69, 62, !dbg !59
  %147 = and i64 %146, 2, !dbg !59
  %148 = add i64 %147, %69, !dbg !59
  %149 = lshr i64 %74, 62, !dbg !60
  %150 = and i64 %149, 2, !dbg !60
  %151 = lshr i64 %75, 62, !dbg !60
  %152 = and i64 %151, 2, !dbg !60
  %153 = shl i64 %148, 1, !dbg !61
  %154 = shl nsw i32 %26, 2, !dbg !62
  %155 = sext i32 %154 to i64, !dbg !63
  %156 = getelementptr float, ptr addrspace(1) %13, i64 %74, !dbg !64
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %150, !dbg !64
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %153, !dbg !64
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %155, !dbg !64
  %160 = getelementptr float, ptr addrspace(1) %13, i64 %75, !dbg !64
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %152, !dbg !64
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %153, !dbg !64
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %155, !dbg !64
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #3, !dbg !65
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 true) #3, !dbg !65
  %166 = fadd float %81, 0x3EE4F8B580000000, !dbg !66
  %167 = fadd float %83, 0x3EE4F8B580000000, !dbg !66
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i16 = icmp eq i32 %168, 0, !dbg !67
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i19 = icmp eq i32 %169, 0, !dbg !67
  br i1 %.not.i16, label %175, label %170, !dbg !67

170:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %173, label %171, !dbg !67

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #3, !dbg !67
  br label %__nv_sqrtf.exit20, !dbg !67

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #3, !dbg !67
  br label %__nv_sqrtf.exit20, !dbg !67

175:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %178, label %176, !dbg !67

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #3, !dbg !67
  br label %__nv_sqrtf.exit20, !dbg !67

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #3, !dbg !67
  br label %__nv_sqrtf.exit20, !dbg !67

__nv_sqrtf.exit20:                                ; preds = %171, %173, %176, %178
  %.0.i18 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !67
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i21 = icmp eq i32 %180, 0, !dbg !67
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i24 = icmp eq i32 %181, 0, !dbg !67
  br i1 %.not.i21, label %187, label %182, !dbg !67

182:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %185, label %183, !dbg !67

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #3, !dbg !67
  br label %__nv_sqrtf.exit25, !dbg !67

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #3, !dbg !67
  br label %__nv_sqrtf.exit25, !dbg !67

187:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %190, label %188, !dbg !67

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #3, !dbg !67
  br label %__nv_sqrtf.exit25, !dbg !67

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #3, !dbg !67
  br label %__nv_sqrtf.exit25, !dbg !67

__nv_sqrtf.exit25:                                ; preds = %183, %185, %188, %190
  %.0.i23 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !67
  %192 = bitcast i32 %165 to float, !dbg !65
  %193 = bitcast i32 %78 to float, !dbg !46
  %194 = fsub float %192, %193, !dbg !68
  %195 = bitcast i32 %164 to float, !dbg !65
  %196 = bitcast i32 %77 to float, !dbg !46
  %197 = fsub float %195, %196, !dbg !68
  %198 = extractvalue { i32, i32 } %33, 1, !dbg !20
  %199 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !22
  %200 = insertelement <2 x i32> %199, i32 %53, i64 1, !dbg !22
  %201 = bitcast <2 x i32> %200 to <2 x float>, !dbg !22
  %202 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !26
  %203 = insertelement <2 x i32> %202, i32 %61, i64 1, !dbg !26
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !26
  %205 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !28
  %206 = insertelement <2 x i32> %205, i32 %64, i64 1, !dbg !28
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !28
  %208 = extractvalue { i32, i32 } %50, 1, !dbg !30
  %209 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !20
  %210 = insertelement <2 x i32> %209, i32 %208, i64 1, !dbg !20
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !20
  %212 = fsub <2 x float> %211, %201, !dbg !69
  %213 = insertelement <2 x float> poison, float %117, i64 0, !dbg !70
  %214 = insertelement <2 x float> %213, float %145, i64 1, !dbg !70
  %215 = fmul <2 x float> %212, %214, !dbg !70
  %216 = fmul <2 x float> %215, %204, !dbg !71
  %217 = fadd <2 x float> %216, %207, !dbg !72
  %218 = extractelement <2 x float> %217, i64 0, !dbg !73
  %219 = fadd float %218, 0.000000e+00, !dbg !73
  %220 = extractelement <2 x float> %217, i64 1, !dbg !74
  %221 = fadd float %219, %220, !dbg !74
  %222 = extractvalue { i32, i32 } %66, 1, !dbg !40
  %223 = bitcast i32 %222 to float, !dbg !40
  %224 = fadd float %221, %223, !dbg !75
  %225 = extractvalue { i32, i32 } %33, 0, !dbg !20
  %226 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !22
  %227 = insertelement <2 x i32> %226, i32 %52, i64 1, !dbg !22
  %228 = bitcast <2 x i32> %227 to <2 x float>, !dbg !22
  %229 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !26
  %230 = insertelement <2 x i32> %229, i32 %60, i64 1, !dbg !26
  %231 = bitcast <2 x i32> %230 to <2 x float>, !dbg !26
  %232 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !28
  %233 = insertelement <2 x i32> %232, i32 %63, i64 1, !dbg !28
  %234 = bitcast <2 x i32> %233 to <2 x float>, !dbg !28
  %235 = extractvalue { i32, i32 } %50, 0, !dbg !30
  %236 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !20
  %237 = insertelement <2 x i32> %236, i32 %235, i64 1, !dbg !20
  %238 = bitcast <2 x i32> %237 to <2 x float>, !dbg !20
  %239 = fsub <2 x float> %238, %228, !dbg !69
  %240 = insertelement <2 x float> poison, float %116, i64 0, !dbg !70
  %241 = insertelement <2 x float> %240, float %144, i64 1, !dbg !70
  %242 = fmul <2 x float> %239, %241, !dbg !70
  %243 = fmul <2 x float> %242, %231, !dbg !71
  %244 = fadd <2 x float> %243, %234, !dbg !72
  %245 = extractelement <2 x float> %244, i64 0, !dbg !73
  %246 = fadd float %245, 0.000000e+00, !dbg !73
  %247 = extractelement <2 x float> %244, i64 1, !dbg !74
  %248 = fadd float %246, %247, !dbg !74
  %249 = extractvalue { i32, i32 } %66, 0, !dbg !40
  %250 = bitcast i32 %249 to float, !dbg !40
  %251 = fadd float %248, %250, !dbg !75
  %252 = bitcast i32 %89 to float, !dbg !52
  %253 = bitcast i32 %88 to float, !dbg !52
  %254 = bitcast i32 %86 to float, !dbg !50
  %255 = bitcast i32 %85 to float, !dbg !50
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !76
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !76
  %258 = fmul float %197, %256, !dbg !77
  %259 = fmul float %194, %257, !dbg !77
  %260 = fmul float %258, %255, !dbg !78
  %261 = fmul float %259, %254, !dbg !78
  %262 = fadd float %260, %253, !dbg !79
  %263 = fadd float %261, %252, !dbg !79
  %264 = fadd float %251, %262, !dbg !80
  %265 = fadd float %224, %263, !dbg !80
  %266 = fcmp olt float %264, 0.000000e+00, !dbg !81
  %267 = fcmp olt float %265, 0.000000e+00, !dbg !81
  %268 = select i1 %266, float 0.000000e+00, float %264, !dbg !85
  %269 = select i1 %267, float 0.000000e+00, float %265, !dbg !85
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !86
  %271 = bitcast float %268 to i32, !dbg !87
  %272 = bitcast float %269 to i32, !dbg !87
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %271, i32 %272, ptr addrspace(1) %270, i1 true) #3, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cujfgqxydiffjxesrqnot74gebql4xx5uf7v3zpn75gcevwu443p.py", directory: "inductor_cache/uj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 26, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 48, column: 18, scope: !7)
!54 = !DILocation(line: 49, column: 26, scope: !7)
!55 = !DILocation(line: 51, column: 18, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 27, scope: !7)
!58 = !DILocation(line: 62, column: 19, scope: !7)
!59 = !DILocation(line: 72, column: 35, scope: !7)
!60 = !DILocation(line: 75, column: 35, scope: !7)
!61 = !DILocation(line: 76, column: 42, scope: !7)
!62 = !DILocation(line: 76, column: 52, scope: !7)
!63 = !DILocation(line: 76, column: 50, scope: !7)
!64 = !DILocation(line: 76, column: 32, scope: !7)
!65 = !DILocation(line: 76, column: 57, scope: !7)
!66 = !DILocation(line: 78, column: 20, scope: !7)
!67 = !DILocation(line: 79, column: 27, scope: !7)
!68 = !DILocation(line: 77, column: 20, scope: !7)
!69 = !DILocation(line: 46, column: 18, scope: !7)
!70 = !DILocation(line: 54, column: 19, scope: !7)
!71 = !DILocation(line: 55, column: 20, scope: !7)
!72 = !DILocation(line: 56, column: 20, scope: !7)
!73 = !DILocation(line: 58, column: 20, scope: !7)
!74 = !DILocation(line: 67, column: 20, scope: !7)
!75 = !DILocation(line: 68, column: 20, scope: !7)
!76 = !DILocation(line: 80, column: 19, scope: !7)
!77 = !DILocation(line: 82, column: 20, scope: !7)
!78 = !DILocation(line: 83, column: 20, scope: !7)
!79 = !DILocation(line: 84, column: 20, scope: !7)
!80 = !DILocation(line: 85, column: 20, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!84 = !DILocation(line: 87, column: 42, scope: !7)
!85 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 88, column: 28, scope: !7)
!87 = !DILocation(line: 88, column: 40, scope: !7)
!88 = !DILocation(line: 88, column: 4, scope: !7)
