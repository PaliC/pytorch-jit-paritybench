; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 60, !dbg !12
  %15 = or disjoint i32 %14, 1, !dbg !12
  %16 = or disjoint i32 %14, 2, !dbg !12
  %17 = or disjoint i32 %14, 3, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = or disjoint i32 %11, %16, !dbg !13
  %21 = or disjoint i32 %11, %17, !dbg !13
  %22 = icmp slt i32 %18, 1024, !dbg !14
  %23 = lshr i32 %12, 4, !dbg !15
  %24 = and i32 %23, 7, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %25 = sdiv i32 %.frozen, 256, !dbg !16
  %26 = mul i32 %25, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %26, !dbg !17
  %.frozen97 = freeze i32 %18, !dbg !18
  %27 = sdiv i32 %.frozen97, 16, !dbg !18
  %28 = mul i32 %27, 16, !dbg !19
  %.decomposed98 = sub i32 %.frozen97, %28, !dbg !19
  %29 = srem i32 %19, 16, !dbg !19
  %30 = srem i32 %20, 16, !dbg !19
  %31 = srem i32 %21, 16, !dbg !19
  %32 = srem i32 %27, 16, !dbg !20
  %33 = mul i32 %25, 24576, !dbg !21
  %.lhs.trunc = trunc nsw i32 %32 to i8, !dbg !22
  %34 = srem i8 %.lhs.trunc, 8, !dbg !22
  %.sext = sext i8 %34 to i32, !dbg !22
  %35 = shl nsw i32 %.sext, 3, !dbg !23
  %.lhs.trunc8 = trunc nsw i32 %.decomposed98 to i8, !dbg !24
  %36 = srem i8 %.lhs.trunc8, 8, !dbg !24
  %.lhs.trunc10 = trunc nsw i32 %29 to i8, !dbg !24
  %37 = srem i8 %.lhs.trunc10, 8, !dbg !24
  %.lhs.trunc12 = trunc nsw i32 %30 to i8, !dbg !24
  %38 = srem i8 %.lhs.trunc12, 8, !dbg !24
  %.lhs.trunc14 = trunc nsw i32 %31 to i8, !dbg !24
  %39 = srem i8 %.lhs.trunc14, 8, !dbg !24
  %invariant.op = add i32 %.decomposed, %33, !dbg !25
  %40 = zext nneg i32 %24 to i64, !dbg !25
  %41 = sext i32 %.decomposed to i64, !dbg !25
  %42 = sext i32 %35 to i64, !dbg !25
  %43 = sext i8 %36 to i64, !dbg !25
  %44 = sext i8 %37 to i64, !dbg !25
  %45 = sext i8 %38 to i64, !dbg !25
  %46 = sext i8 %39 to i64, !dbg !25
  %invariant.gep = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !25
  %invariant.gep62 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !25
  %invariant.gep64 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !25
  %invariant.gep66 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !25
  %invariant.gep68 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !25
  %47 = insertelement <4 x i1> poison, i1 %22, i64 0, !dbg !26
  %48 = shufflevector <4 x i1> %47, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !26
  br label %49, !dbg !25

49:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %9 ], [ %161, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %9 ], [ %162, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %9 ], [ %163, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %9 ], [ %164, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %9 ], [ %157, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %9 ], [ %158, %._crit_edge ]
  %56 = phi float [ 0.000000e+00, %9 ], [ %159, %._crit_edge ]
  %57 = phi float [ 0.000000e+00, %9 ], [ %160, %._crit_edge ]
  %58 = phi <4 x float> [ zeroinitializer, %9 ], [ %156, %._crit_edge ]
  %59 = or disjoint i64 %indvars.iv, %40, !dbg !27
  %60 = shl nuw nsw i64 %59, 8, !dbg !28
  %61 = trunc nuw nsw i64 %60 to i32
  %.reass = add i32 %invariant.op, %61
  %62 = sext i32 %.reass to i64, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !30
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true) #5, !dbg !32
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true) #5, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true) #5, !dbg !32
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 true, i32 0, i1 true) #5, !dbg !32
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %60, !dbg !33
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !34
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !34
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !34
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !34
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !34
  %79 = shl nuw nsw i64 %59, 6, !dbg !35
  %80 = add nsw i64 %79, %42, !dbg !36
  %gep63 = getelementptr float, ptr addrspace(1) %invariant.gep62, i64 %80, !dbg !37
  %gep65 = getelementptr float, ptr addrspace(1) %invariant.gep64, i64 %80, !dbg !37
  %gep67 = getelementptr float, ptr addrspace(1) %invariant.gep66, i64 %80, !dbg !37
  %gep69 = getelementptr float, ptr addrspace(1) %invariant.gep68, i64 %80, !dbg !37
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep63, i1 %22, i32 0, i1 %22) #5, !dbg !38
  %82 = bitcast i32 %81 to float, !dbg !38
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep65, i1 %22, i32 0, i1 %22) #5, !dbg !38
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep67, i1 %22, i32 0, i1 %22) #5, !dbg !38
  %85 = bitcast i32 %84 to float, !dbg !38
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %gep69, i1 %22, i32 0, i1 %22) #5, !dbg !38
  %87 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !34
  %88 = insertelement <4 x i32> %87, i32 %66, i64 1, !dbg !34
  %89 = insertelement <4 x i32> %88, i32 %77, i64 2, !dbg !34
  %90 = insertelement <4 x i32> %89, i32 %68, i64 3, !dbg !34
  %91 = bitcast <4 x i32> %90 to <4 x float>, !dbg !34
  %92 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !30
  %93 = insertelement <4 x i32> %92, i32 %76, i64 1, !dbg !30
  %94 = insertelement <4 x i32> %93, i32 %67, i64 2, !dbg !30
  %95 = insertelement <4 x i32> %94, i32 %78, i64 3, !dbg !30
  %96 = bitcast <4 x i32> %95 to <4 x float>, !dbg !30
  %97 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !32
  %98 = insertelement <4 x i32> %97, i32 %83, i64 1, !dbg !32
  %99 = insertelement <4 x i32> %98, i32 %86, i64 3, !dbg !32
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !32
  %101 = shufflevector <4 x float> %100, <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 3>, !dbg !32
  %102 = shufflevector <4 x float> %100, <4 x float> poison, <4 x i32> <i32 poison, i32 0, i32 poison, i32 0>, !dbg !39
  %103 = insertelement <4 x float> %102, float %82, i64 0, !dbg !39
  %104 = insertelement <4 x float> %103, float %85, i64 2, !dbg !39
  %105 = fadd <4 x float> %104, %91, !dbg !39
  %106 = fadd <4 x float> %101, %96, !dbg !40
  %107 = fadd <4 x float> %105, %106, !dbg !41
  %108 = icmp eq i64 %indvars.iv, 0, !dbg !42
  br i1 %108, label %._crit_edge, label %109, !dbg !43

109:                                              ; preds = %49
  %110 = fsub <4 x float> %107, %58, !dbg !47
  %111 = extractelement <4 x float> %110, i64 0, !dbg !47
  %112 = fsub <4 x float> %107, %58, !dbg !47
  %113 = extractelement <4 x float> %112, i64 1, !dbg !47
  %114 = fsub <4 x float> %107, %58, !dbg !47
  %115 = extractelement <4 x float> %114, i64 2, !dbg !47
  %116 = fsub <4 x float> %107, %58, !dbg !47
  %117 = extractelement <4 x float> %116, i64 3, !dbg !47
  %118 = fadd float %50, 1.000000e+00, !dbg !48
  %119 = fadd float %51, 1.000000e+00, !dbg !48
  %120 = fadd float %52, 1.000000e+00, !dbg !48
  %121 = fadd float %53, 1.000000e+00, !dbg !48
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %118) #5, !dbg !49
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %119) #5, !dbg !49
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %120) #5, !dbg !49
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %121) #5, !dbg !49
  %126 = insertelement <4 x float> poison, float %122, i64 0, !dbg !50
  %127 = insertelement <4 x float> %126, float %123, i64 1, !dbg !50
  %128 = insertelement <4 x float> %127, float %124, i64 2, !dbg !50
  %129 = insertelement <4 x float> %128, float %125, i64 3, !dbg !50
  %130 = fadd <4 x float> %58, %129, !dbg !50
  %131 = fsub <4 x float> %107, %130, !dbg !51
  %132 = fsub <4 x float> %107, %130, !dbg !51
  %133 = fsub <4 x float> %107, %130, !dbg !51
  %134 = fsub <4 x float> %107, %130, !dbg !51
  %135 = fmul <4 x float> %110, %131, !dbg !52
  %136 = extractelement <4 x float> %135, i64 0, !dbg !52
  %137 = fmul <4 x float> %112, %132, !dbg !52
  %138 = extractelement <4 x float> %137, i64 1, !dbg !52
  %139 = fmul <4 x float> %114, %133, !dbg !52
  %140 = extractelement <4 x float> %139, i64 2, !dbg !52
  %141 = fmul <4 x float> %116, %134, !dbg !52
  %142 = extractelement <4 x float> %141, i64 3, !dbg !52
  %143 = fadd float %54, %136, !dbg !53
  %144 = fadd float %55, %138, !dbg !53
  %145 = fadd float %56, %140, !dbg !53
  %146 = fadd float %57, %142, !dbg !53
  br label %._crit_edge, !dbg !43

._crit_edge:                                      ; preds = %49, %109
  %147 = phi float [ %143, %109 ], [ 0.000000e+00, %49 ], !dbg !46
  %148 = phi float [ %144, %109 ], [ 0.000000e+00, %49 ], !dbg !46
  %149 = phi float [ %145, %109 ], [ 0.000000e+00, %49 ], !dbg !46
  %150 = phi float [ %146, %109 ], [ 0.000000e+00, %49 ], !dbg !46
  %151 = phi float [ %118, %109 ], [ 1.000000e+00, %49 ], !dbg !46
  %152 = phi float [ %119, %109 ], [ 1.000000e+00, %49 ], !dbg !46
  %153 = phi float [ %120, %109 ], [ 1.000000e+00, %49 ], !dbg !46
  %154 = phi float [ %121, %109 ], [ 1.000000e+00, %49 ], !dbg !46
  %155 = phi <4 x float> [ %130, %109 ], [ %107, %49 ]
  %156 = select <4 x i1> %48, <4 x float> %155, <4 x float> %58, !dbg !26
  %157 = select i1 %22, float %147, float %54, !dbg !54
  %158 = select i1 %22, float %148, float %55, !dbg !54
  %159 = select i1 %22, float %149, float %56, !dbg !54
  %160 = select i1 %22, float %150, float %57, !dbg !54
  %161 = select i1 %22, float %151, float %50, !dbg !55
  %162 = select i1 %22, float %152, float %51, !dbg !55
  %163 = select i1 %22, float %153, float %52, !dbg !55
  %164 = select i1 %22, float %154, float %53, !dbg !55
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !25
  %165 = icmp samesign ult i64 %indvars.iv, 88, !dbg !25
  br i1 %165, label %49, label %166, !dbg !25

166:                                              ; preds = %._crit_edge
  %167 = lshr i32 %12, 5, !dbg !12
  %168 = and i32 %12, 63, !dbg !12
  %169 = or disjoint i32 %11, %168, !dbg !13
  %170 = icmp slt i32 %169, 1024, !dbg !14
  %171 = and i32 %12, 16, !dbg !12
  %172 = extractelement <4 x float> %156, i64 0, !dbg !56
  %173 = bitcast float %172 to i32, !dbg !56
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 16, i32 31), !dbg !56
  %175 = bitcast i32 %174 to float, !dbg !56
  %176 = bitcast float %157 to i32, !dbg !56
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 16, i32 31), !dbg !56
  %178 = bitcast i32 %177 to float, !dbg !56
  %179 = bitcast float %161 to i32, !dbg !56
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 16, i32 31), !dbg !56
  %181 = bitcast i32 %180 to float, !dbg !56
  %182 = fsub float %175, %172, !dbg !58
  %183 = fadd float %161, %181, !dbg !60
  %184 = fcmp oeq float %183, 0.000000e+00, !dbg !61
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %183) #5, !dbg !62
  %186 = select i1 %184, float 0.000000e+00, float %185, !dbg !63
  %187 = fmul float %182, %186, !dbg !64
  %188 = fadd float %172, %187, !dbg !65
  %189 = fadd float %157, %178, !dbg !66
  %190 = fmul float %182, %182, !dbg !67
  %191 = fmul float %161, %190, !dbg !68
  %192 = fmul float %191, %186, !dbg !69
  %193 = fadd float %189, %192, !dbg !70
  %194 = extractelement <4 x float> %156, i64 1, !dbg !56
  %195 = bitcast float %194 to i32, !dbg !56
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 16, i32 31), !dbg !56
  %197 = bitcast i32 %196 to float, !dbg !56
  %198 = bitcast float %158 to i32, !dbg !56
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 16, i32 31), !dbg !56
  %200 = bitcast i32 %199 to float, !dbg !56
  %201 = bitcast float %162 to i32, !dbg !56
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 16, i32 31), !dbg !56
  %203 = bitcast i32 %202 to float, !dbg !56
  %204 = fsub float %197, %194, !dbg !58
  %205 = fadd float %162, %203, !dbg !60
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !61
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float %205) #5, !dbg !62
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !63
  %209 = fmul float %204, %208, !dbg !64
  %210 = fadd float %194, %209, !dbg !65
  %211 = fadd float %158, %200, !dbg !66
  %212 = fmul float %204, %204, !dbg !67
  %213 = fmul float %162, %212, !dbg !68
  %214 = fmul float %213, %208, !dbg !69
  %215 = fadd float %211, %214, !dbg !70
  %216 = extractelement <4 x float> %156, i64 2, !dbg !56
  %217 = bitcast float %216 to i32, !dbg !56
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 16, i32 31), !dbg !56
  %219 = bitcast i32 %218 to float, !dbg !56
  %220 = bitcast float %159 to i32, !dbg !56
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 16, i32 31), !dbg !56
  %222 = bitcast i32 %221 to float, !dbg !56
  %223 = bitcast float %163 to i32, !dbg !56
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 16, i32 31), !dbg !56
  %225 = bitcast i32 %224 to float, !dbg !56
  %226 = fsub float %219, %216, !dbg !58
  %227 = fadd float %163, %225, !dbg !60
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !61
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %227) #5, !dbg !62
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !63
  %231 = fmul float %226, %230, !dbg !64
  %232 = fadd float %216, %231, !dbg !65
  %233 = fadd float %159, %222, !dbg !66
  %234 = fmul float %226, %226, !dbg !67
  %235 = fmul float %163, %234, !dbg !68
  %236 = fmul float %235, %230, !dbg !69
  %237 = fadd float %233, %236, !dbg !70
  %238 = extractelement <4 x float> %156, i64 3, !dbg !56
  %239 = bitcast float %238 to i32, !dbg !56
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 16, i32 31), !dbg !56
  %241 = bitcast i32 %240 to float, !dbg !56
  %242 = bitcast float %160 to i32, !dbg !56
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 16, i32 31), !dbg !56
  %244 = bitcast i32 %243 to float, !dbg !56
  %245 = bitcast float %164 to i32, !dbg !56
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 16, i32 31), !dbg !56
  %247 = bitcast i32 %246 to float, !dbg !56
  %248 = fsub float %241, %238, !dbg !58
  %249 = fadd float %164, %247, !dbg !60
  %250 = fcmp oeq float %249, 0.000000e+00, !dbg !61
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %249) #5, !dbg !62
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !63
  %253 = fmul float %248, %252, !dbg !64
  %254 = fadd float %238, %253, !dbg !65
  %255 = fadd float %160, %244, !dbg !66
  %256 = fmul float %248, %248, !dbg !67
  %257 = fmul float %164, %256, !dbg !68
  %258 = fmul float %257, %252, !dbg !69
  %259 = fadd float %255, %258, !dbg !70
  %260 = icmp eq i32 %171, 0, !dbg !56
  %261 = and i32 %167, 3, !dbg !56
  %262 = shl nuw nsw i32 %14, 2, !dbg !56
  %263 = or disjoint i32 %262, %261, !dbg !56
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !56
  %265 = bitcast float %188 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 %260) #5, !dbg !56
  %266 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %263, !dbg !56
  %267 = bitcast float %193 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 %260) #5, !dbg !56
  %268 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %263, !dbg !56
  %269 = bitcast float %183 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 %260) #5, !dbg !56
  %270 = shl nuw nsw i32 %15, 2, !dbg !56
  %271 = or disjoint i32 %270, %261, !dbg !56
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !56
  %273 = bitcast float %210 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 %260) #5, !dbg !56
  %274 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %271, !dbg !56
  %275 = bitcast float %215 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 %260) #5, !dbg !56
  %276 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %271, !dbg !56
  %277 = bitcast float %205 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 %260) #5, !dbg !56
  %278 = shl nuw nsw i32 %16, 2, !dbg !56
  %279 = or disjoint i32 %278, %261, !dbg !56
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %279, !dbg !56
  %281 = bitcast float %232 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 %260) #5, !dbg !56
  %282 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %279, !dbg !56
  %283 = bitcast float %237 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 %260) #5, !dbg !56
  %284 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %279, !dbg !56
  %285 = bitcast float %227 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 %260) #5, !dbg !56
  %286 = shl nuw nsw i32 %17, 2, !dbg !56
  %287 = or disjoint i32 %286, %261, !dbg !56
  %288 = getelementptr float, ptr addrspace(3) @global_smem, i32 %287, !dbg !56
  %289 = bitcast float %254 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 %260) #5, !dbg !56
  %290 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %287, !dbg !56
  %291 = bitcast float %259 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 %260) #5, !dbg !56
  %292 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %287, !dbg !56
  %293 = bitcast float %249 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 %260) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %294 = icmp slt i32 %12, 256, !dbg !56
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !56
  %296 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %295, i1 %294) #5, !dbg !56
  %297 = bitcast i32 %296 to float, !dbg !56
  %298 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %12, !dbg !56
  %299 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %298, i1 %294) #5, !dbg !56
  %300 = bitcast i32 %299 to float, !dbg !56
  %301 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %12, !dbg !56
  %302 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %301, i1 %294) #5, !dbg !56
  %303 = bitcast i32 %302 to float, !dbg !56
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 2, i32 31), !dbg !56
  %305 = bitcast i32 %304 to float, !dbg !56
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 2, i32 31), !dbg !56
  %307 = bitcast i32 %306 to float, !dbg !56
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 2, i32 31), !dbg !56
  %309 = bitcast i32 %308 to float, !dbg !56
  %310 = fsub float %305, %297, !dbg !58
  %311 = fadd float %303, %309, !dbg !60
  %312 = fcmp oeq float %311, 0.000000e+00, !dbg !61
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float %311) #5, !dbg !62
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !63
  %315 = fmul float %310, %314, !dbg !64
  %316 = fadd float %315, %297, !dbg !65
  %317 = fadd float %300, %307, !dbg !66
  %318 = fmul float %310, %310, !dbg !67
  %319 = fmul float %318, %303, !dbg !68
  %320 = fmul float %319, %314, !dbg !69
  %321 = fadd float %317, %320, !dbg !70
  %322 = bitcast float %316 to i32, !dbg !56
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !56
  %324 = bitcast i32 %323 to float, !dbg !56
  %325 = bitcast float %321 to i32, !dbg !56
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 1, i32 31), !dbg !56
  %327 = bitcast i32 %326 to float, !dbg !56
  %328 = bitcast float %311 to i32, !dbg !56
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 1, i32 31), !dbg !56
  %330 = bitcast i32 %329 to float, !dbg !56
  %331 = fsub float %324, %316, !dbg !58
  %332 = fadd float %311, %330, !dbg !60
  %333 = fcmp oeq float %332, 0.000000e+00, !dbg !61
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %332) #5, !dbg !62
  %335 = select i1 %333, float 0.000000e+00, float %334, !dbg !63
  %336 = fmul float %331, %335, !dbg !64
  %337 = fadd float %316, %336, !dbg !65
  %338 = fadd float %321, %327, !dbg !66
  %339 = fmul float %331, %331, !dbg !67
  %340 = fmul float %311, %339, !dbg !68
  %341 = fmul float %335, %340, !dbg !69
  %342 = fadd float %338, %341, !dbg !70
  %343 = and i32 %12, 3, !dbg !56
  %344 = icmp eq i32 %343, 0, !dbg !56
  %345 = and i1 %294, %344, !dbg !56
  %346 = bitcast float %337 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %346, i1 %345) #5, !dbg !56
  %347 = bitcast float %342 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %347, i1 %345) #5, !dbg !56
  %348 = bitcast float %332 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %348, i1 %345) #5, !dbg !56
  %349 = add i32 %12, 128, !dbg !56
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i32 %349, !dbg !56
  %351 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %350, i1 %294) #5, !dbg !56
  %352 = bitcast i32 %351 to float, !dbg !56
  %353 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %349, !dbg !56
  %354 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %353, i1 %294) #5, !dbg !56
  %355 = bitcast i32 %354 to float, !dbg !56
  %356 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %349, !dbg !56
  %357 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %356, i1 %294) #5, !dbg !56
  %358 = bitcast i32 %357 to float, !dbg !56
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 2, i32 31), !dbg !56
  %360 = bitcast i32 %359 to float, !dbg !56
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 2, i32 31), !dbg !56
  %362 = bitcast i32 %361 to float, !dbg !56
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 2, i32 31), !dbg !56
  %364 = bitcast i32 %363 to float, !dbg !56
  %365 = fsub float %360, %352, !dbg !58
  %366 = fadd float %358, %364, !dbg !60
  %367 = fcmp oeq float %366, 0.000000e+00, !dbg !61
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %364, float %366) #5, !dbg !62
  %369 = select i1 %367, float 0.000000e+00, float %368, !dbg !63
  %370 = fmul float %365, %369, !dbg !64
  %371 = fadd float %370, %352, !dbg !65
  %372 = fadd float %355, %362, !dbg !66
  %373 = fmul float %365, %365, !dbg !67
  %374 = fmul float %373, %358, !dbg !68
  %375 = fmul float %374, %369, !dbg !69
  %376 = fadd float %372, %375, !dbg !70
  %377 = bitcast float %371 to i32, !dbg !56
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 1, i32 31), !dbg !56
  %379 = bitcast i32 %378 to float, !dbg !56
  %380 = bitcast float %376 to i32, !dbg !56
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 1, i32 31), !dbg !56
  %382 = bitcast i32 %381 to float, !dbg !56
  %383 = bitcast float %366 to i32, !dbg !56
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 1, i32 31), !dbg !56
  %385 = bitcast i32 %384 to float, !dbg !56
  %386 = fsub float %379, %371, !dbg !58
  %387 = fadd float %366, %385, !dbg !60
  %388 = fcmp oeq float %387, 0.000000e+00, !dbg !61
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %385, float %387) #5, !dbg !62
  %390 = select i1 %388, float 0.000000e+00, float %389, !dbg !63
  %391 = fmul float %386, %390, !dbg !64
  %392 = fadd float %371, %391, !dbg !65
  %393 = fadd float %376, %382, !dbg !66
  %394 = fmul float %386, %386, !dbg !67
  %395 = fmul float %366, %394, !dbg !68
  %396 = fmul float %390, %395, !dbg !69
  %397 = fadd float %393, %396, !dbg !70
  %398 = bitcast float %392 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %398, i1 %345) #5, !dbg !56
  %399 = bitcast float %397 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %399, i1 %345) #5, !dbg !56
  %400 = bitcast float %387 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %400, i1 %345) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %401 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !56
  %402 = load i32, ptr addrspace(3) %401, align 16, !dbg !56
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i32 %270, !dbg !56
  %404 = load i32, ptr addrspace(3) %403, align 16, !dbg !56
  %405 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !56
  %406 = load i32, ptr addrspace(3) %405, align 16, !dbg !56
  %407 = getelementptr float, ptr addrspace(3) @global_smem, i32 %286, !dbg !56
  %408 = load i32, ptr addrspace(3) %407, align 16, !dbg !56
  %409 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %262, !dbg !56
  %410 = load i32, ptr addrspace(3) %409, align 16, !dbg !56
  %411 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %270, !dbg !56
  %412 = load i32, ptr addrspace(3) %411, align 16, !dbg !56
  %413 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %278, !dbg !56
  %414 = load i32, ptr addrspace(3) %413, align 16, !dbg !56
  %415 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %286, !dbg !56
  %416 = load i32, ptr addrspace(3) %415, align 16, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %417 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !71
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %417, i32 %402, i32 %404, i32 %406, i32 %408, i1 true) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %418 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %168, !dbg !71
  %419 = load i32, ptr addrspace(3) %418, align 4, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %417, i32 %410, i32 %412, i32 %414, i32 %416, i1 true) #5, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %420 = load i32, ptr addrspace(3) %418, align 4, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %417, i32 %410, i32 %412, i32 %414, i32 %416, i1 true) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %421 = load float, ptr addrspace(3) %418, align 4, !dbg !73
  %422 = sext i32 %169 to i64, !dbg !74
  %423 = getelementptr float, ptr addrspace(1) %4, i64 %422, !dbg !74
  %424 = and i32 %12, 64, !dbg !75
  %425 = icmp eq i32 %424, 0, !dbg !75
  %426 = and i1 %425, %170, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %419, ptr addrspace(1) %423, i1 %426) #5, !dbg !75
  %427 = getelementptr float, ptr addrspace(1) %5, i64 %422, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %420, ptr addrspace(1) %427, i1 %426) #5, !dbg !77
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %421, float 9.600000e+01) #5, !dbg !78
  %429 = fadd float %428, 0x3EB0C6F7A0000000, !dbg !79
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !80
  %.not.i = icmp eq i32 %430, 0, !dbg !80
  br i1 %.not.i, label %433, label %431, !dbg !80

431:                                              ; preds = %166
  %432 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %429), !dbg !80
  br label %__nv_rsqrtf.exit, !dbg !80

433:                                              ; preds = %166
  %434 = tail call float @llvm.nvvm.rsqrt.approx.f(float %429), !dbg !80
  br label %__nv_rsqrtf.exit, !dbg !80

__nv_rsqrtf.exit:                                 ; preds = %431, %433
  %.0.i = phi float [ %432, %431 ], [ %434, %433 ], !dbg !80
  %435 = fmul float %.0.i, 0x3F85555560000000, !dbg !73
  %436 = getelementptr float, ptr addrspace(1) %6, i64 %422, !dbg !81
  %437 = bitcast float %435 to i32, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %437, ptr addrspace(1) %436, i1 %426) #5, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccauazzyyzi2wjjvhhm3msbrwnbtdkvbx22n4hkcws4leyd6krca.py", directory: "inductor_cache/ca")
!4 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_5", linkageName: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 27, scope: !7)
!21 = !DILocation(line: 38, column: 54, scope: !7)
!22 = !DILocation(line: 41, column: 43, scope: !7)
!23 = !DILocation(line: 41, column: 38, scope: !7)
!24 = !DILocation(line: 41, column: 64, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 49, column: 60, scope: !7)
!27 = !DILocation(line: 35, column: 27, scope: !7)
!28 = !DILocation(line: 38, column: 43, scope: !7)
!29 = !DILocation(line: 38, column: 34, scope: !7)
!30 = !DILocation(line: 38, column: 59, scope: !7)
!31 = !DILocation(line: 39, column: 34, scope: !7)
!32 = !DILocation(line: 39, column: 39, scope: !7)
!33 = !DILocation(line: 40, column: 34, scope: !7)
!34 = !DILocation(line: 40, column: 48, scope: !7)
!35 = !DILocation(line: 41, column: 52, scope: !7)
!36 = !DILocation(line: 41, column: 49, scope: !7)
!37 = !DILocation(line: 41, column: 34, scope: !7)
!38 = !DILocation(line: 41, column: 70, scope: !7)
!39 = !DILocation(line: 43, column: 22, scope: !7)
!40 = !DILocation(line: 42, column: 22, scope: !7)
!41 = !DILocation(line: 44, column: 22, scope: !7)
!42 = !DILocation(line: 47, column: 62, scope: !7)
!43 = !DILocation(line: 178, column: 7, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 47, column: 51, scope: !7)
!47 = !DILocation(line: 183, column: 24, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 184, column: 30, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 185, column: 34, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 185, column: 26, scope: !44, inlinedAt: !46)
!51 = !DILocation(line: 186, column: 39, scope: !44, inlinedAt: !46)
!52 = !DILocation(line: 186, column: 31, scope: !44, inlinedAt: !46)
!53 = !DILocation(line: 186, column: 22, scope: !44, inlinedAt: !46)
!54 = !DILocation(line: 50, column: 56, scope: !7)
!55 = !DILocation(line: 51, column: 64, scope: !7)
!56 = !DILocation(line: 204, column: 46, scope: !44, inlinedAt: !57)
!57 = !DILocation(line: 53, column: 41, scope: !7)
!58 = !DILocation(line: 192, column: 21, scope: !59, inlinedAt: !57)
!59 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!60 = !DILocation(line: 193, column: 28, scope: !59, inlinedAt: !57)
!61 = !DILocation(line: 194, column: 39, scope: !59, inlinedAt: !57)
!62 = !DILocation(line: 194, column: 60, scope: !59, inlinedAt: !57)
!63 = !DILocation(line: 194, column: 49, scope: !59, inlinedAt: !57)
!64 = !DILocation(line: 196, column: 25, scope: !59, inlinedAt: !57)
!65 = !DILocation(line: 196, column: 17, scope: !59, inlinedAt: !57)
!66 = !DILocation(line: 197, column: 15, scope: !59, inlinedAt: !57)
!67 = !DILocation(line: 197, column: 30, scope: !59, inlinedAt: !57)
!68 = !DILocation(line: 197, column: 38, scope: !59, inlinedAt: !57)
!69 = !DILocation(line: 197, column: 49, scope: !59, inlinedAt: !57)
!70 = !DILocation(line: 197, column: 22, scope: !59, inlinedAt: !57)
!71 = !DILocation(line: 55, column: 20, scope: !7)
!72 = !DILocation(line: 56, column: 20, scope: !7)
!73 = !DILocation(line: 66, column: 20, scope: !7)
!74 = !DILocation(line: 58, column: 25, scope: !7)
!75 = !DILocation(line: 58, column: 36, scope: !7)
!76 = !DILocation(line: 59, column: 25, scope: !7)
!77 = !DILocation(line: 59, column: 36, scope: !7)
!78 = !DILocation(line: 61, column: 19, scope: !7)
!79 = !DILocation(line: 63, column: 20, scope: !7)
!80 = !DILocation(line: 64, column: 28, scope: !7)
!81 = !DILocation(line: 67, column: 25, scope: !7)
!82 = !DILocation(line: 67, column: 37, scope: !7)
!83 = !DILocation(line: 67, column: 4, scope: !7)
