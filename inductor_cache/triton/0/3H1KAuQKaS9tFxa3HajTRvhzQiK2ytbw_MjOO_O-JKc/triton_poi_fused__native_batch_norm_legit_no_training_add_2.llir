; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !11
  %12 = shl i32 %11, 10, !dbg !12
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %14 = shl i32 %13, 2, !dbg !13
  %15 = and i32 %14, 508, !dbg !13
  %16 = or disjoint i32 %12, %15, !dbg !14
  %17 = or disjoint i32 %16, 512, !dbg !14
  %18 = icmp slt i32 %16, 728, !dbg !15
  %19 = icmp slt i32 %17, 728, !dbg !15
  %20 = mul i32 %10, 728, !dbg !16
  %21 = add i32 %16, %20, !dbg !17
  %22 = add i32 %20, %17, !dbg !17
  %23 = sext i32 %21 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = sext i32 %22 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %18) #4, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %19) #4, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !20
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %18) #4, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %19) #4, !dbg !21
  %33 = sext i32 %16 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !22
  %35 = sext i32 %17 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %18) #4, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %19) #4, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %18) #4, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %46 = bitcast i32 %42 to float, !dbg !25
  %47 = bitcast i32 %43 to float, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %19) #4, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !25
  %55 = bitcast i32 %51 to float, !dbg !25
  %56 = bitcast i32 %52 to float, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !26
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %18) #4, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %19) #4, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %18) #4, !dbg !29
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %19) #4, !dbg !29
  %67 = fadd float %46, 0x3EE4F8B580000000, !dbg !30
  %68 = fadd float %47, 0x3EE4F8B580000000, !dbg !30
  %69 = fadd float %48, 0x3EE4F8B580000000, !dbg !30
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !30
  %71 = fadd float %55, 0x3EE4F8B580000000, !dbg !30
  %72 = fadd float %56, 0x3EE4F8B580000000, !dbg !30
  %73 = fadd float %57, 0x3EE4F8B580000000, !dbg !30
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !30
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %75, 0, !dbg !31
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %76, 0, !dbg !31
  br i1 %.not.i, label %82, label %77, !dbg !31

77:                                               ; preds = %9
  br i1 %.not1.i, label %80, label %78, !dbg !31

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

82:                                               ; preds = %9
  br i1 %.not1.i, label %85, label %83, !dbg !31

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !31
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i1 = icmp eq i32 %87, 0, !dbg !31
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i4 = icmp eq i32 %88, 0, !dbg !31
  br i1 %.not.i1, label %94, label %89, !dbg !31

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !31

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !31

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %90, %92, %95, %97
  %.0.i3 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !31
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i6 = icmp eq i32 %99, 0, !dbg !31
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i9 = icmp eq i32 %100, 0, !dbg !31
  br i1 %.not.i6, label %106, label %101, !dbg !31

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !31

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

106:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %109, label %107, !dbg !31

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %102, %104, %107, %109
  %.0.i8 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !31
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i11 = icmp eq i32 %111, 0, !dbg !31
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i14 = icmp eq i32 %112, 0, !dbg !31
  br i1 %.not.i11, label %118, label %113, !dbg !31

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !31

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

118:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %121, label %119, !dbg !31

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %114, %116, %119, %121
  %.0.i13 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !31
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i16 = icmp eq i32 %123, 0, !dbg !31
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i19 = icmp eq i32 %124, 0, !dbg !31
  br i1 %.not.i16, label %130, label %125, !dbg !31

125:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %128, label %126, !dbg !31

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

130:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %133, label %131, !dbg !31

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %126, %128, %131, %133
  %.0.i18 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !31
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i21 = icmp eq i32 %135, 0, !dbg !31
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i24 = icmp eq i32 %136, 0, !dbg !31
  br i1 %.not.i21, label %142, label %137, !dbg !31

137:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %140, label %138, !dbg !31

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

142:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %145, label %143, !dbg !31

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

__nv_sqrtf.exit25:                                ; preds = %138, %140, %143, %145
  %.0.i23 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !31
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i26 = icmp eq i32 %147, 0, !dbg !31
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i29 = icmp eq i32 %148, 0, !dbg !31
  br i1 %.not.i26, label %154, label %149, !dbg !31

149:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %152, label %150, !dbg !31

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

154:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %157, label %155, !dbg !31

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

__nv_sqrtf.exit30:                                ; preds = %150, %152, %155, %157
  %.0.i28 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !31
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i31 = icmp eq i32 %159, 0, !dbg !31
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i34 = icmp eq i32 %160, 0, !dbg !31
  br i1 %.not.i31, label %166, label %161, !dbg !31

161:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %164, label %162, !dbg !31

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

166:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %169, label %167, !dbg !31

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

__nv_sqrtf.exit35:                                ; preds = %162, %164, %167, %169
  %.0.i33 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !31
  %171 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !21
  %172 = bitcast i32 %171 to float, !dbg !21
  %173 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %174 = bitcast i32 %173 to float, !dbg !23
  %175 = fsub float %172, %174, !dbg !32
  %176 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !21
  %177 = bitcast i32 %176 to float, !dbg !21
  %178 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %179 = bitcast i32 %178 to float, !dbg !23
  %180 = fsub float %177, %179, !dbg !32
  %181 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !21
  %182 = bitcast i32 %181 to float, !dbg !21
  %183 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %184 = bitcast i32 %183 to float, !dbg !23
  %185 = fsub float %182, %184, !dbg !32
  %186 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !21
  %187 = bitcast i32 %186 to float, !dbg !21
  %188 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %189 = bitcast i32 %188 to float, !dbg !23
  %190 = fsub float %187, %189, !dbg !32
  %191 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !21
  %192 = bitcast i32 %191 to float, !dbg !21
  %193 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %194 = bitcast i32 %193 to float, !dbg !23
  %195 = fsub float %192, %194, !dbg !32
  %196 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !21
  %197 = bitcast i32 %196 to float, !dbg !21
  %198 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %199 = bitcast i32 %198 to float, !dbg !23
  %200 = fsub float %197, %199, !dbg !32
  %201 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !21
  %202 = bitcast i32 %201 to float, !dbg !21
  %203 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %204 = bitcast i32 %203 to float, !dbg !23
  %205 = fsub float %202, %204, !dbg !32
  %206 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !21
  %207 = bitcast i32 %206 to float, !dbg !21
  %208 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %209 = bitcast i32 %208 to float, !dbg !23
  %210 = fsub float %207, %209, !dbg !32
  %211 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !29
  %212 = bitcast i32 %211 to float, !dbg !29
  %213 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !29
  %214 = bitcast i32 %213 to float, !dbg !29
  %215 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !29
  %216 = bitcast i32 %215 to float, !dbg !29
  %217 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !29
  %218 = bitcast i32 %217 to float, !dbg !29
  %219 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !29
  %220 = bitcast i32 %219 to float, !dbg !29
  %221 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !29
  %222 = bitcast i32 %221 to float, !dbg !29
  %223 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !29
  %224 = bitcast i32 %223 to float, !dbg !29
  %225 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !29
  %226 = bitcast i32 %225 to float, !dbg !29
  %227 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !27
  %228 = bitcast i32 %227 to float, !dbg !27
  %229 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !27
  %230 = bitcast i32 %229 to float, !dbg !27
  %231 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !27
  %232 = bitcast i32 %231 to float, !dbg !27
  %233 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !27
  %234 = bitcast i32 %233 to float, !dbg !27
  %235 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !27
  %236 = bitcast i32 %235 to float, !dbg !27
  %237 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !27
  %238 = bitcast i32 %237 to float, !dbg !27
  %239 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !27
  %240 = bitcast i32 %239 to float, !dbg !27
  %241 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !27
  %242 = bitcast i32 %241 to float, !dbg !27
  %243 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !19
  %244 = bitcast i32 %243 to float, !dbg !19
  %245 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !19
  %246 = bitcast i32 %245 to float, !dbg !19
  %247 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !19
  %248 = bitcast i32 %247 to float, !dbg !19
  %249 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !19
  %250 = bitcast i32 %249 to float, !dbg !19
  %251 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %252 = bitcast i32 %251 to float, !dbg !19
  %253 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %254 = bitcast i32 %253 to float, !dbg !19
  %255 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %256 = bitcast i32 %255 to float, !dbg !19
  %257 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %258 = bitcast i32 %257 to float, !dbg !19
  %.frozen = freeze i32 %10, !dbg !33
  %259 = sdiv i32 %.frozen, 4096, !dbg !33
  %260 = mul i32 %259, 4096, !dbg !34
  %.decomposed = sub i32 %.frozen, %260, !dbg !34
  %261 = and i32 %13, 127, !dbg !13
  %262 = or disjoint i32 %261, %12, !dbg !14
  %263 = icmp slt i32 %12, 0, !dbg !15
  %264 = or disjoint i32 %262, 640, !dbg !14
  %265 = icmp slt i32 %264, 728, !dbg !15
  %266 = or disjoint i32 %262, 512, !dbg !14
  %267 = icmp slt i32 %266, 728, !dbg !15
  %268 = or disjoint i32 %261, 384, !dbg !13
  %269 = or disjoint i32 %12, %268, !dbg !14
  %270 = icmp slt i32 %269, 728, !dbg !15
  %271 = or disjoint i32 %261, 256, !dbg !13
  %272 = or disjoint i32 %12, %271, !dbg !14
  %273 = icmp slt i32 %272, 728, !dbg !15
  %274 = or disjoint i32 %261, 128, !dbg !13
  %275 = or disjoint i32 %12, %274, !dbg !14
  %276 = icmp slt i32 %275, 728, !dbg !15
  %277 = icmp slt i32 %262, 728, !dbg !15
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !35
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !35
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !35
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !35
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !35
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #4, !dbg !35
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !35
  %286 = fmul float %210, %278, !dbg !36
  %287 = fmul float %205, %279, !dbg !36
  %288 = fmul float %200, %280, !dbg !36
  %289 = fmul float %195, %281, !dbg !36
  %290 = fmul float %190, %282, !dbg !36
  %291 = fmul float %185, %283, !dbg !36
  %292 = fmul float %180, %284, !dbg !36
  %293 = fmul float %175, %285, !dbg !36
  %294 = fmul float %286, %242, !dbg !37
  %295 = fmul float %287, %240, !dbg !37
  %296 = fmul float %288, %238, !dbg !37
  %297 = fmul float %289, %236, !dbg !37
  %298 = fmul float %290, %234, !dbg !37
  %299 = fmul float %291, %232, !dbg !37
  %300 = fmul float %292, %230, !dbg !37
  %301 = fmul float %293, %228, !dbg !37
  %302 = fadd float %294, %226, !dbg !38
  %303 = fadd float %295, %224, !dbg !38
  %304 = fadd float %296, %222, !dbg !38
  %305 = fadd float %297, %220, !dbg !38
  %306 = fadd float %298, %218, !dbg !38
  %307 = fadd float %299, %216, !dbg !38
  %308 = fadd float %300, %214, !dbg !38
  %309 = fadd float %301, %212, !dbg !38
  %310 = fadd float %302, %258, !dbg !39
  %311 = fadd float %303, %256, !dbg !39
  %312 = fadd float %304, %254, !dbg !39
  %313 = fadd float %305, %252, !dbg !39
  %314 = fadd float %306, %250, !dbg !39
  %315 = fadd float %307, %248, !dbg !39
  %316 = fadd float %308, %246, !dbg !39
  %317 = fadd float %309, %244, !dbg !39
  %318 = shl i32 %262, 12, !dbg !40
  %319 = shl i32 %275, 12, !dbg !40
  %320 = shl i32 %272, 12, !dbg !40
  %321 = shl i32 %269, 12, !dbg !40
  %322 = shl i32 %266, 12, !dbg !40
  %323 = shl i32 %264, 12, !dbg !40
  %324 = or disjoint i32 %318, 3145728, !dbg !40
  %325 = or disjoint i32 %318, 3670016, !dbg !40
  %326 = mul i32 %259, 2981888, !dbg !41
  %327 = add i32 %326, %.decomposed, !dbg !42
  %328 = add i32 %327, %318, !dbg !43
  %329 = add i32 %327, %319, !dbg !43
  %330 = add i32 %327, %320, !dbg !43
  %331 = add i32 %327, %321, !dbg !43
  %332 = add i32 %327, %322, !dbg !43
  %333 = add i32 %327, %323, !dbg !43
  %334 = add i32 %327, %324, !dbg !43
  %335 = add i32 %327, %325, !dbg !43
  %336 = sext i32 %328 to i64, !dbg !44
  %337 = getelementptr float, ptr addrspace(1) %6, i64 %336, !dbg !44
  %338 = sext i32 %329 to i64, !dbg !44
  %339 = getelementptr float, ptr addrspace(1) %6, i64 %338, !dbg !44
  %340 = sext i32 %330 to i64, !dbg !44
  %341 = getelementptr float, ptr addrspace(1) %6, i64 %340, !dbg !44
  %342 = sext i32 %331 to i64, !dbg !44
  %343 = getelementptr float, ptr addrspace(1) %6, i64 %342, !dbg !44
  %344 = sext i32 %332 to i64, !dbg !44
  %345 = getelementptr float, ptr addrspace(1) %6, i64 %344, !dbg !44
  %346 = sext i32 %333 to i64, !dbg !44
  %347 = getelementptr float, ptr addrspace(1) %6, i64 %346, !dbg !44
  %348 = sext i32 %334 to i64, !dbg !44
  %349 = getelementptr float, ptr addrspace(1) %6, i64 %348, !dbg !44
  %350 = sext i32 %335 to i64, !dbg !44
  %351 = getelementptr float, ptr addrspace(1) %6, i64 %350, !dbg !44
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !45
  %353 = bitcast float %310 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #4, !dbg !45
  %354 = or disjoint i32 %15, 1, !dbg !45
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %354, !dbg !45
  %356 = bitcast float %311 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %356, i1 true) #4, !dbg !45
  %357 = or disjoint i32 %15, 2, !dbg !45
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %357, !dbg !45
  %359 = bitcast float %312 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 true) #4, !dbg !45
  %360 = or disjoint i32 %15, 3, !dbg !45
  %361 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %360, !dbg !45
  %362 = bitcast float %313 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %363 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !45
  %364 = load i32, ptr addrspace(3) %363, align 4, !dbg !45
  %365 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !45
  %366 = load i32, ptr addrspace(3) %365, align 4, !dbg !45
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !45
  %368 = load i32, ptr addrspace(3) %367, align 4, !dbg !45
  %369 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !45
  %370 = load i32, ptr addrspace(3) %369, align 4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %371 = bitcast float %314 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %371, i1 true) #4, !dbg !45
  %372 = bitcast float %315 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %372, i1 true) #4, !dbg !45
  %373 = bitcast float %316 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %373, i1 true) #4, !dbg !45
  %374 = bitcast float %317 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %374, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %375 = load i32, ptr addrspace(3) %363, align 4, !dbg !45
  %376 = load i32, ptr addrspace(3) %365, align 4, !dbg !45
  %377 = load i32, ptr addrspace(3) %367, align 4, !dbg !45
  %378 = load i32, ptr addrspace(3) %369, align 4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %337, i1 %277) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %366, ptr addrspace(1) %339, i1 %276) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %368, ptr addrspace(1) %341, i1 %273) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %370, ptr addrspace(1) %343, i1 %270) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %375, ptr addrspace(1) %345, i1 %267) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %376, ptr addrspace(1) %347, i1 %265) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %377, ptr addrspace(1) %349, i1 %263) #4, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %378, ptr addrspace(1) %351, i1 %263) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvmth3ygrudsybzjvovx35umxdxag2qkqxc65wc4xawnxrgtzpmk.py", directory: "inductor_cache/vm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 32, column: 39, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 44, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 18, scope: !7)
!36 = !DILocation(line: 46, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 19, scope: !7)
!40 = !DILocation(line: 50, column: 35, scope: !7)
!41 = !DILocation(line: 50, column: 48, scope: !7)
!42 = !DILocation(line: 50, column: 30, scope: !7)
!43 = !DILocation(line: 50, column: 40, scope: !7)
!44 = !DILocation(line: 50, column: 25, scope: !7)
!45 = !DILocation(line: 50, column: 60, scope: !7)
!46 = !DILocation(line: 50, column: 4, scope: !7)
