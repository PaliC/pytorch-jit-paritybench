; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 9, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 510, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = srem i32 %23, 64, !dbg !14
  %25 = sext i32 %23 to i64, !dbg !15
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !15
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !16
  %28 = sext i32 %24 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !17
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !19
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !21
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !22
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !22
  %37 = bitcast i32 %35 to float, !dbg !22
  %38 = bitcast i32 %36 to float, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !23
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !25
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !27
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !29
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !30
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !30
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !30
  %49 = bitcast i32 %47 to float, !dbg !30
  %50 = bitcast i32 %48 to float, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !31
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !33
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !35
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %11, i64 %28, !dbg !37
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !38
  %59 = extractvalue { i32, i32 } %58, 0, !dbg !38
  %60 = extractvalue { i32, i32 } %58, 1, !dbg !38
  %61 = bitcast i32 %59 to float, !dbg !38
  %62 = bitcast i32 %60 to float, !dbg !38
  %63 = getelementptr float, ptr addrspace(1) %12, i64 %28, !dbg !39
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !40
  %65 = getelementptr float, ptr addrspace(1) %13, i64 %28, !dbg !41
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !42
  %67 = fadd float %37, 0x3EE4F8B580000000, !dbg !43
  %68 = fadd float %38, 0x3EE4F8B580000000, !dbg !43
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %69, 0, !dbg !44
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %70, 0, !dbg !44
  br i1 %.not.i, label %76, label %71, !dbg !44

71:                                               ; preds = %17
  br i1 %.not1.i, label %74, label %72, !dbg !44

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

76:                                               ; preds = %17
  br i1 %.not1.i, label %79, label %77, !dbg !44

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %72, %74, %77, %79
  %.0.i = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !44
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %81, 0, !dbg !44
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %82, 0, !dbg !44
  br i1 %.not.i1, label %88, label %83, !dbg !44

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !44

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !44

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %84, %86, %89, %91
  %.0.i3 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !44
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !45
  %95 = fadd float %49, 0x3EE4F8B580000000, !dbg !46
  %96 = fadd float %50, 0x3EE4F8B580000000, !dbg !46
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i6 = icmp eq i32 %97, 0, !dbg !47
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i9 = icmp eq i32 %98, 0, !dbg !47
  br i1 %.not.i6, label %104, label %99, !dbg !47

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !47

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

104:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %107, label %105, !dbg !47

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

__nv_sqrtf.exit10:                                ; preds = %100, %102, %105, %107
  %.0.i8 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !47
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i11 = icmp eq i32 %109, 0, !dbg !47
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i14 = icmp eq i32 %110, 0, !dbg !47
  br i1 %.not.i11, label %116, label %111, !dbg !47

111:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %114, label %112, !dbg !47

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

116:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %119, label %117, !dbg !47

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

__nv_sqrtf.exit15:                                ; preds = %112, %114, %117, %119
  %.0.i13 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !47
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !48
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !48
  %123 = fadd float %61, 0x3EE4F8B580000000, !dbg !49
  %124 = fadd float %62, 0x3EE4F8B580000000, !dbg !49
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i16 = icmp eq i32 %125, 0, !dbg !50
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i19 = icmp eq i32 %126, 0, !dbg !50
  br i1 %.not.i16, label %132, label %127, !dbg !50

127:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %130, label %128, !dbg !50

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

132:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %135, label %133, !dbg !50

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

__nv_sqrtf.exit20:                                ; preds = %128, %130, %133, %135
  %.0.i18 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !50
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i21 = icmp eq i32 %137, 0, !dbg !50
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i24 = icmp eq i32 %138, 0, !dbg !50
  br i1 %.not.i21, label %144, label %139, !dbg !50

139:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %142, label %140, !dbg !50

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

144:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %147, label %145, !dbg !50

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

__nv_sqrtf.exit25:                                ; preds = %140, %142, %145, %147
  %.0.i23 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !50
  %149 = extractvalue { i32, i32 } %27, 1, !dbg !16
  %150 = extractvalue { i32, i32 } %30, 1, !dbg !18
  %151 = extractvalue { i32, i32 } %32, 1, !dbg !20
  %152 = extractvalue { i32, i32 } %40, 1, !dbg !24
  %153 = extractvalue { i32, i32 } %42, 1, !dbg !26
  %154 = extractvalue { i32, i32 } %56, 1, !dbg !36
  %155 = extractvalue { i32, i32 } %27, 0, !dbg !16
  %156 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !16
  %157 = insertelement <2 x i32> %156, i32 %155, i64 1, !dbg !16
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !16
  %159 = extractvalue { i32, i32 } %30, 0, !dbg !18
  %160 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !18
  %161 = insertelement <2 x i32> %160, i32 %159, i64 1, !dbg !18
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !18
  %163 = extractvalue { i32, i32 } %32, 0, !dbg !20
  %164 = extractvalue { i32, i32 } %40, 0, !dbg !24
  %165 = extractvalue { i32, i32 } %42, 0, !dbg !26
  %166 = extractvalue { i32, i32 } %56, 0, !dbg !36
  %167 = extractvalue { i32, i32 } %44, 1, !dbg !28
  %168 = extractvalue { i32, i32 } %52, 1, !dbg !32
  %169 = extractvalue { i32, i32 } %54, 1, !dbg !34
  %170 = extractvalue { i32, i32 } %44, 0, !dbg !28
  %171 = extractvalue { i32, i32 } %52, 0, !dbg !32
  %172 = extractvalue { i32, i32 } %54, 0, !dbg !34
  %173 = extractvalue { i32, i32 } %66, 1, !dbg !42
  %174 = extractvalue { i32, i32 } %66, 0, !dbg !42
  %175 = extractvalue { i32, i32 } %64, 1, !dbg !40
  %176 = extractvalue { i32, i32 } %64, 0, !dbg !40
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !51
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !51
  %179 = fadd <2 x float> %158, %162, !dbg !52
  %180 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !20
  %181 = insertelement <2 x i32> %180, i32 %163, i64 1, !dbg !20
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !20
  %183 = fsub <2 x float> %179, %182, !dbg !53
  %184 = insertelement <2 x float> poison, float %94, i64 0, !dbg !54
  %185 = insertelement <2 x float> %184, float %93, i64 1, !dbg !54
  %186 = fmul <2 x float> %183, %185, !dbg !54
  %187 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !24
  %188 = insertelement <2 x i32> %187, i32 %164, i64 1, !dbg !24
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !24
  %190 = fmul <2 x float> %186, %189, !dbg !55
  %191 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !26
  %192 = insertelement <2 x i32> %191, i32 %165, i64 1, !dbg !26
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !26
  %194 = fadd <2 x float> %190, %193, !dbg !56
  %195 = fcmp olt <2 x float> %194, zeroinitializer, !dbg !57
  %196 = select <2 x i1> %195, <2 x float> zeroinitializer, <2 x float> %194, !dbg !61
  %197 = shufflevector <2 x float> %196, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>, !dbg !61
  %198 = insertelement <4 x i32> poison, i32 %154, i64 0, !dbg !36
  %199 = insertelement <4 x i32> %198, i32 %166, i64 1, !dbg !36
  %200 = insertelement <4 x i32> %199, i32 %170, i64 2, !dbg !36
  %201 = insertelement <4 x i32> %200, i32 %167, i64 3, !dbg !36
  %202 = bitcast <4 x i32> %201 to <4 x float>, !dbg !36
  %203 = fsub <4 x float> %197, %202, !dbg !62
  %204 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !42
  %205 = insertelement <4 x i32> %204, i32 %174, i64 1, !dbg !42
  %206 = insertelement <4 x i32> %205, i32 %172, i64 2, !dbg !42
  %207 = insertelement <4 x i32> %206, i32 %169, i64 3, !dbg !42
  %208 = bitcast <4 x i32> %207 to <4 x float>, !dbg !42
  %209 = insertelement <4 x i32> poison, i32 %175, i64 0, !dbg !40
  %210 = insertelement <4 x i32> %209, i32 %176, i64 1, !dbg !40
  %211 = insertelement <4 x i32> %210, i32 %171, i64 2, !dbg !40
  %212 = insertelement <4 x i32> %211, i32 %168, i64 3, !dbg !40
  %213 = bitcast <4 x i32> %212 to <4 x float>, !dbg !40
  %214 = insertelement <4 x float> poison, float %178, i64 0, !dbg !63
  %215 = insertelement <4 x float> %214, float %177, i64 1, !dbg !63
  %216 = insertelement <4 x float> %215, float %121, i64 2, !dbg !63
  %217 = insertelement <4 x float> %216, float %122, i64 3, !dbg !63
  %218 = fmul <4 x float> %203, %217, !dbg !63
  %219 = fmul <4 x float> %218, %213, !dbg !64
  %220 = fadd <4 x float> %219, %208, !dbg !65
  %221 = fcmp olt <4 x float> %220, zeroinitializer, !dbg !66
  %222 = extractelement <4 x i1> %221, i64 3, !dbg !68
  %223 = extractelement <4 x i1> %221, i64 2, !dbg !68
  %224 = extractelement <4 x i1> %221, i64 1, !dbg !70
  %225 = extractelement <4 x i1> %221, i64 0, !dbg !70
  %bc = bitcast <2 x float> %179 to <2 x i32>, !dbg !71
  %226 = extractelement <2 x i32> %bc, i64 1, !dbg !71
  %bc26 = bitcast <2 x float> %179 to <2 x i32>, !dbg !71
  %227 = extractelement <2 x i32> %bc26, i64 0, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %226, i32 %227, ptr addrspace(1) %26, i1 true) #3, !dbg !71
  %228 = getelementptr float, ptr addrspace(1) %14, i64 %25, !dbg !72
  %bc27 = bitcast <4 x float> %220 to <4 x i32>, !dbg !73
  %229 = extractelement <4 x i32> %bc27, i64 2, !dbg !73
  %230 = select i1 %223, i32 0, i32 %229, !dbg !68
  %bc28 = bitcast <4 x float> %220 to <4 x i32>, !dbg !73
  %231 = extractelement <4 x i32> %bc28, i64 3, !dbg !73
  %232 = select i1 %222, i32 0, i32 %231, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %230, i32 %232, ptr addrspace(1) %228, i1 true) #3, !dbg !73
  %233 = getelementptr float, ptr addrspace(1) %15, i64 %25, !dbg !74
  %bc29 = bitcast <4 x float> %220 to <4 x i32>, !dbg !75
  %234 = extractelement <4 x i32> %bc29, i64 1, !dbg !75
  %235 = select i1 %224, i32 0, i32 %234, !dbg !70
  %bc30 = bitcast <4 x float> %220 to <4 x i32>, !dbg !75
  %236 = extractelement <4 x i32> %bc30, i64 0, !dbg !75
  %237 = select i1 %225, i32 0, i32 %236, !dbg !70
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %235, i32 %237, ptr addrspace(1) %233, i1 true) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cejovihlj2eww6vssqziiuse7ydlgp4ypzhitcpq3swolghd34av.py", directory: "inductor_cache/ej")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 38, column: 32, scope: !7)
!40 = !DILocation(line: 38, column: 37, scope: !7)
!41 = !DILocation(line: 39, column: 32, scope: !7)
!42 = !DILocation(line: 39, column: 37, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 26, scope: !7)
!45 = !DILocation(line: 46, column: 19, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 27, scope: !7)
!48 = !DILocation(line: 57, column: 19, scope: !7)
!49 = !DILocation(line: 64, column: 20, scope: !7)
!50 = !DILocation(line: 65, column: 27, scope: !7)
!51 = !DILocation(line: 66, column: 19, scope: !7)
!52 = !DILocation(line: 40, column: 18, scope: !7)
!53 = !DILocation(line: 41, column: 18, scope: !7)
!54 = !DILocation(line: 49, column: 19, scope: !7)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 53, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 68, column: 20, scope: !7)
!64 = !DILocation(line: 69, column: 20, scope: !7)
!65 = !DILocation(line: 70, column: 20, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !67)
!67 = !DILocation(line: 71, column: 42, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !69)
!69 = !DILocation(line: 62, column: 42, scope: !7)
!70 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !67)
!71 = !DILocation(line: 72, column: 39, scope: !7)
!72 = !DILocation(line: 73, column: 25, scope: !7)
!73 = !DILocation(line: 73, column: 37, scope: !7)
!74 = !DILocation(line: 74, column: 25, scope: !7)
!75 = !DILocation(line: 74, column: 37, scope: !7)
!76 = !DILocation(line: 74, column: 4, scope: !7)
