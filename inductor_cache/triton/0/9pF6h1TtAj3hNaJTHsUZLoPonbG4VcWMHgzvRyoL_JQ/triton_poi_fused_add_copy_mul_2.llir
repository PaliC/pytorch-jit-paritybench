; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_copy_mul_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 6, !dbg !12
  %.lobit = and i32 %8, 1, !dbg !12
  %9 = icmp slt i32 %6, 0, !dbg !13
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !14
  %11 = shl i32 %10, 6, !dbg !15
  %12 = and i32 %7, 63, !dbg !16
  %13 = or disjoint i32 %11, %12, !dbg !17
  %14 = icmp slt i32 %13, 89401, !dbg !18
  %15 = add i32 %13, 178802, !dbg !19
  %16 = and i1 %9, %14, !dbg !20
  %17 = or disjoint i32 %6, %.lobit, !dbg !21
  %18 = or disjoint i32 %17, 2, !dbg !21
  %19 = or disjoint i32 %17, 4, !dbg !21
  %20 = or disjoint i32 %17, 6, !dbg !21
  %21 = or disjoint i32 %17, 8, !dbg !21
  %22 = or disjoint i32 %17, 10, !dbg !21
  %23 = or disjoint i32 %17, 12, !dbg !21
  %24 = or disjoint i32 %17, 14, !dbg !21
  %25 = icmp slt i32 %17, 12, !dbg !13
  %26 = icmp slt i32 %18, 12, !dbg !13
  %27 = icmp slt i32 %19, 12, !dbg !13
  %28 = icmp slt i32 %20, 12, !dbg !13
  %29 = icmp slt i32 %21, 12, !dbg !13
  %30 = icmp slt i32 %22, 12, !dbg !13
  %31 = insertelement <8 x i32> poison, i32 %24, i64 0, !dbg !22
  %32 = insertelement <8 x i32> %31, i32 %23, i64 1, !dbg !22
  %33 = insertelement <8 x i32> %32, i32 %22, i64 2, !dbg !22
  %34 = insertelement <8 x i32> %33, i32 %21, i64 3, !dbg !22
  %35 = insertelement <8 x i32> %34, i32 %20, i64 4, !dbg !22
  %36 = insertelement <8 x i32> %35, i32 %19, i64 5, !dbg !22
  %37 = insertelement <8 x i32> %36, i32 %18, i64 6, !dbg !22
  %38 = insertelement <8 x i32> %37, i32 %17, i64 7, !dbg !22
  %39 = srem <8 x i32> %38, splat (i32 3), !dbg !22
  %40 = sdiv i32 %17, 3, !dbg !23
  %41 = sdiv i32 %18, 3, !dbg !23
  %42 = sdiv i32 %19, 3, !dbg !23
  %43 = sdiv i32 %20, 3, !dbg !23
  %44 = sdiv i32 %21, 3, !dbg !23
  %45 = sdiv i32 %22, 3, !dbg !23
  %46 = sdiv i32 %23, 3, !dbg !23
  %47 = sdiv i32 %24, 3, !dbg !23
  %48 = mul i32 %40, 268203, !dbg !24
  %49 = mul i32 %41, 268203, !dbg !24
  %50 = mul i32 %42, 268203, !dbg !24
  %51 = mul i32 %43, 268203, !dbg !24
  %52 = mul i32 %44, 268203, !dbg !24
  %53 = mul i32 %45, 268203, !dbg !24
  %54 = mul i32 %46, 268203, !dbg !24
  %55 = mul i32 %47, 268203, !dbg !24
  %56 = add i32 %15, %48, !dbg !25
  %57 = add i32 %15, %49, !dbg !25
  %58 = add i32 %15, %50, !dbg !25
  %59 = add i32 %15, %51, !dbg !25
  %60 = add i32 %15, %52, !dbg !25
  %61 = add i32 %15, %53, !dbg !25
  %62 = add i32 %15, %54, !dbg !25
  %63 = add i32 %15, %55, !dbg !25
  %64 = sext i32 %56 to i64, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !26
  %66 = sext i32 %57 to i64, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !26
  %68 = sext i32 %58 to i64, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !26
  %70 = sext i32 %59 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !26
  %72 = sext i32 %60 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = sext i32 %61 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !26
  %76 = sext i32 %62 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !26
  %78 = sext i32 %63 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !26
  %80 = and i1 %25, %14, !dbg !20
  %81 = and i1 %26, %14, !dbg !20
  %82 = and i1 %27, %14, !dbg !20
  %83 = and i1 %28, %14, !dbg !20
  %84 = and i1 %29, %14, !dbg !20
  %85 = and i1 %30, %14, !dbg !20
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %80) #1, !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %81) #1, !dbg !27
  %89 = bitcast i32 %88 to float, !dbg !27
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %82) #1, !dbg !27
  %91 = bitcast i32 %90 to float, !dbg !27
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %83) #1, !dbg !27
  %93 = bitcast i32 %92 to float, !dbg !27
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %84) #1, !dbg !27
  %95 = bitcast i32 %94 to float, !dbg !27
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %85) #1, !dbg !27
  %97 = bitcast i32 %96 to float, !dbg !27
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %16) #1, !dbg !27
  %99 = bitcast i32 %98 to float, !dbg !27
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %16) #1, !dbg !27
  %101 = bitcast i32 %100 to float, !dbg !27
  %102 = mul i32 %17, 89401, !dbg !28
  %103 = mul i32 %18, 89401, !dbg !28
  %104 = mul i32 %19, 89401, !dbg !28
  %105 = mul i32 %20, 89401, !dbg !28
  %106 = mul i32 %21, 89401, !dbg !28
  %107 = mul i32 %22, 89401, !dbg !28
  %108 = mul i32 %23, 89401, !dbg !28
  %109 = mul i32 %24, 89401, !dbg !28
  %110 = add i32 %13, %102, !dbg !29
  %111 = add i32 %13, %103, !dbg !29
  %112 = add i32 %13, %104, !dbg !29
  %113 = add i32 %13, %105, !dbg !29
  %114 = add i32 %13, %106, !dbg !29
  %115 = add i32 %13, %107, !dbg !29
  %116 = add i32 %13, %108, !dbg !29
  %117 = add i32 %13, %109, !dbg !29
  %118 = sext i32 %110 to i64, !dbg !30
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !30
  %120 = sext i32 %111 to i64, !dbg !30
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !30
  %122 = sext i32 %112 to i64, !dbg !30
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !30
  %124 = sext i32 %113 to i64, !dbg !30
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !30
  %126 = sext i32 %114 to i64, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !30
  %128 = sext i32 %115 to i64, !dbg !30
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !30
  %130 = sext i32 %116 to i64, !dbg !30
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !30
  %132 = sext i32 %117 to i64, !dbg !30
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !30
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %80) #1, !dbg !31
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %81) #1, !dbg !31
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %82) #1, !dbg !31
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %83) #1, !dbg !31
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %84) #1, !dbg !31
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %85) #1, !dbg !31
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %16) #1, !dbg !31
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %16) #1, !dbg !31
  %142 = icmp eq <8 x i32> %39, splat (i32 2), !dbg !32
  %143 = fmul float %87, 0x3FDCCCCCC0000000, !dbg !33
  %144 = fmul float %89, 0x3FDCCCCCC0000000, !dbg !33
  %145 = fmul float %91, 0x3FDCCCCCC0000000, !dbg !33
  %146 = fmul float %93, 0x3FDCCCCCC0000000, !dbg !33
  %147 = fmul float %95, 0x3FDCCCCCC0000000, !dbg !33
  %148 = fmul float %97, 0x3FDCCCCCC0000000, !dbg !33
  %149 = fmul float %99, 0x3FDCCCCCC0000000, !dbg !33
  %150 = fmul float %101, 0x3FDCCCCCC0000000, !dbg !33
  %151 = fadd float %143, 0xBFC8106240000000, !dbg !34
  %152 = fadd float %144, 0xBFC8106240000000, !dbg !34
  %153 = fadd float %145, 0xBFC8106240000000, !dbg !34
  %154 = fadd float %146, 0xBFC8106240000000, !dbg !34
  %155 = fadd float %147, 0xBFC8106240000000, !dbg !34
  %156 = fadd float %148, 0xBFC8106240000000, !dbg !34
  %157 = fadd float %149, 0xBFC8106240000000, !dbg !34
  %158 = fadd float %150, 0xBFC8106240000000, !dbg !34
  %159 = mul i32 %13, 3, !dbg !35
  %160 = extractelement <8 x i32> %39, i64 7, !dbg !36
  %161 = add i32 %159, %160, !dbg !36
  %162 = add i32 %161, %48, !dbg !37
  %163 = extractelement <8 x i32> %39, i64 6, !dbg !36
  %164 = add i32 %49, %163, !dbg !36
  %165 = add i32 %164, %159, !dbg !37
  %166 = extractelement <8 x i32> %39, i64 5, !dbg !36
  %167 = add i32 %50, %166, !dbg !36
  %168 = add i32 %167, %159, !dbg !37
  %169 = extractelement <8 x i32> %39, i64 4, !dbg !36
  %170 = add i32 %51, %169, !dbg !36
  %171 = add i32 %170, %159, !dbg !37
  %172 = extractelement <8 x i32> %39, i64 3, !dbg !36
  %173 = add i32 %52, %172, !dbg !36
  %174 = add i32 %173, %159, !dbg !37
  %175 = extractelement <8 x i32> %39, i64 2, !dbg !36
  %176 = add i32 %53, %175, !dbg !36
  %177 = add i32 %176, %159, !dbg !37
  %178 = extractelement <8 x i32> %39, i64 1, !dbg !36
  %179 = add i32 %54, %178, !dbg !36
  %180 = add i32 %179, %159, !dbg !37
  %181 = extractelement <8 x i32> %39, i64 0, !dbg !36
  %182 = add i32 %55, %181, !dbg !36
  %183 = add i32 %182, %159, !dbg !37
  %184 = sext i32 %162 to i64, !dbg !38
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !38
  %186 = sext i32 %165 to i64, !dbg !38
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !38
  %188 = sext i32 %168 to i64, !dbg !38
  %189 = getelementptr float, ptr addrspace(1) %1, i64 %188, !dbg !38
  %190 = sext i32 %171 to i64, !dbg !38
  %191 = getelementptr float, ptr addrspace(1) %1, i64 %190, !dbg !38
  %192 = sext i32 %174 to i64, !dbg !38
  %193 = getelementptr float, ptr addrspace(1) %1, i64 %192, !dbg !38
  %194 = sext i32 %177 to i64, !dbg !38
  %195 = getelementptr float, ptr addrspace(1) %1, i64 %194, !dbg !38
  %196 = sext i32 %180 to i64, !dbg !38
  %197 = getelementptr float, ptr addrspace(1) %1, i64 %196, !dbg !38
  %198 = sext i32 %183 to i64, !dbg !38
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %198, !dbg !38
  %200 = bitcast float %151 to i32, !dbg !39
  %201 = extractelement <8 x i1> %142, i64 7, !dbg !40
  %202 = select i1 %201, i32 %200, i32 %134, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %202, ptr addrspace(1) %185, i1 %80) #1, !dbg !39
  %203 = bitcast float %152 to i32, !dbg !39
  %204 = extractelement <8 x i1> %142, i64 6, !dbg !40
  %205 = select i1 %204, i32 %203, i32 %135, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %187, i1 %81) #1, !dbg !39
  %206 = bitcast float %153 to i32, !dbg !39
  %207 = extractelement <8 x i1> %142, i64 5, !dbg !40
  %208 = select i1 %207, i32 %206, i32 %136, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %208, ptr addrspace(1) %189, i1 %82) #1, !dbg !39
  %209 = bitcast float %154 to i32, !dbg !39
  %210 = extractelement <8 x i1> %142, i64 4, !dbg !40
  %211 = select i1 %210, i32 %209, i32 %137, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %191, i1 %83) #1, !dbg !39
  %212 = bitcast float %155 to i32, !dbg !39
  %213 = extractelement <8 x i1> %142, i64 3, !dbg !40
  %214 = select i1 %213, i32 %212, i32 %138, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %193, i1 %84) #1, !dbg !39
  %215 = bitcast float %156 to i32, !dbg !39
  %216 = extractelement <8 x i1> %142, i64 2, !dbg !40
  %217 = select i1 %216, i32 %215, i32 %139, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %217, ptr addrspace(1) %195, i1 %85) #1, !dbg !39
  %218 = bitcast float %157 to i32, !dbg !39
  %219 = extractelement <8 x i1> %142, i64 1, !dbg !40
  %220 = select i1 %219, i32 %218, i32 %140, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %220, ptr addrspace(1) %197, i1 %16) #1, !dbg !39
  %221 = bitcast float %158 to i32, !dbg !39
  %222 = extractelement <8 x i1> %142, i64 0, !dbg !40
  %223 = select i1 %222, i32 %221, i32 %141, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %223, ptr addrspace(1) %199, i1 %16) #1, !dbg !39
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c772l3mg7zavmmaixhfdywjbaqm6raf6coeh7gu2x533uv3jzbet.py", directory: "inductor_cache/77")
!4 = !{ptr @triton_poi_fused_add_copy_mul_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_copy_mul_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_copy_mul_2", linkageName: "triton_poi_fused_add_copy_mul_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 21, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 64, scope: !7)
!21 = !DILocation(line: 23, column: 23, scope: !7)
!22 = !DILocation(line: 28, column: 19, scope: !7)
!23 = !DILocation(line: 30, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 56, scope: !7)
!28 = !DILocation(line: 33, column: 41, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 46, scope: !7)
!32 = !DILocation(line: 36, column: 19, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 32, scope: !7)
!36 = !DILocation(line: 42, column: 30, scope: !7)
!37 = !DILocation(line: 42, column: 37, scope: !7)
!38 = !DILocation(line: 42, column: 25, scope: !7)
!39 = !DILocation(line: 42, column: 55, scope: !7)
!40 = !DILocation(line: 41, column: 32, scope: !7)
!41 = !DILocation(line: 42, column: 4, scope: !7)
