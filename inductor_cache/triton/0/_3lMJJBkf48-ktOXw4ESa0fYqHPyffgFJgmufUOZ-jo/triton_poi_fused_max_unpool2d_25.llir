; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/zq/czqahx2y26idjhgaufszs2csaonm6txy6uffyrkdrktwjd3umxda.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp6 < 65536\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_max_unpool2d_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !11 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %10 = shl i32 %9, 8, !dbg !13
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %12 = and i32 %11, 127, !dbg !14
  %13 = or disjoint i32 %10, %12, !dbg !15
  %14 = or disjoint i32 %13, 128, !dbg !15
  %15 = srem i32 %13, 256, !dbg !16
  %16 = srem i32 %14, 256, !dbg !16
  %17 = shl nsw i32 %15, 4, !dbg !17
  %18 = shl nsw i32 %16, 4, !dbg !17
  %19 = sdiv i32 %13, 4096, !dbg !18
  %20 = sdiv i32 %14, 4096, !dbg !18
  %21 = shl nsw i32 %19, 12, !dbg !19
  %22 = shl nsw i32 %20, 12, !dbg !19
  %23 = add i32 %17, %21, !dbg !20
  %24 = add i32 %18, %22, !dbg !20
  %25 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !21
  %26 = insertelement <2 x i32> %25, i32 %14, i64 1, !dbg !21
  %27 = sdiv <2 x i32> %26, splat (i32 256), !dbg !21
  %28 = extractelement <2 x i32> %27, i64 0, !dbg !22
  %29 = srem i32 %28, 16, !dbg !22
  %30 = extractelement <2 x i32> %27, i64 1, !dbg !22
  %31 = srem i32 %30, 16, !dbg !22
  %32 = add i32 %23, %29, !dbg !23
  %33 = add nsw i32 %24, %31, !dbg !23
  %34 = sext i32 %32 to i64, !dbg !24
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %33 to i64, !dbg !24
  %37 = getelementptr i64, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !25
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #5, !dbg !27
  %44 = sext i32 %29 to i64, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !28
  %46 = sext i32 %31 to i64, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #5, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #5, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #5, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #5, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #5, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #5, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #5, !dbg !35
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #5, !dbg !35
  %62 = shl <2 x i32> %27, splat (i32 10), !dbg !36
  %63 = sext <2 x i32> %62 to <2 x i64>, !dbg !37
  %64 = insertelement <2 x i64> poison, i64 %38, i64 0, !dbg !37
  %65 = insertelement <2 x i64> %64, i64 %39, i64 1, !dbg !37
  %66 = add <2 x i64> %65, %63, !dbg !37
  %67 = lshr <2 x i64> %66, splat (i64 47), !dbg !38
  %68 = and <2 x i64> %67, splat (i64 65536), !dbg !38
  %69 = add <2 x i64> %68, %66, !dbg !38
  %70 = extractelement <2 x i64> %69, i64 0, !dbg !39
  %71 = extractelement <2 x i64> %69, i64 1, !dbg !39
  %72 = or i64 %70, %71, !dbg !39
  %.not = icmp ult i64 %72, 65536, !dbg !39
  br i1 %.not, label %74, label %73, !dbg !39

73:                                               ; preds = %8
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 37, ptr nonnull @assertFunc_0, i64 1), !dbg !39
  unreachable, !dbg !39

74:                                               ; preds = %8
  %75 = bitcast i32 %53 to float, !dbg !31
  %76 = bitcast i32 %52 to float, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %77 = fadd float %76, 0x3EE4F8B580000000, !dbg !40
  %78 = fadd float %75, 0x3EE4F8B580000000, !dbg !40
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %79, 0, !dbg !41
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i = icmp eq i32 %80, 0, !dbg !41
  br i1 %.not.i, label %86, label %81, !dbg !41

81:                                               ; preds = %74
  br i1 %.not1.i, label %84, label %82, !dbg !41

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

86:                                               ; preds = %74
  br i1 %.not1.i, label %89, label %87, !dbg !41

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %82, %84, %87, %89
  %.0.i = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !41
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i1 = icmp eq i32 %91, 0, !dbg !41
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i4 = icmp eq i32 %92, 0, !dbg !41
  br i1 %.not.i1, label %98, label %93, !dbg !41

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !41

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %101, label %99, !dbg !41

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %94, %96, %99, %101
  %.0.i3 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !41
  %103 = bitcast i32 %43 to float, !dbg !27
  %104 = bitcast i32 %49 to float, !dbg !29
  %105 = fsub float %103, %104, !dbg !42
  %106 = bitcast i32 %42 to float, !dbg !27
  %107 = bitcast i32 %48 to float, !dbg !29
  %108 = fsub float %106, %107, !dbg !42
  %109 = bitcast i32 %56 to float, !dbg !33
  %110 = bitcast i32 %57 to float, !dbg !33
  %111 = bitcast i32 %60 to float, !dbg !35
  %112 = bitcast i32 %61 to float, !dbg !35
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !43
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !43
  %115 = fmul float %108, %113, !dbg !44
  %116 = fmul float %105, %114, !dbg !44
  %117 = fmul float %115, %109, !dbg !45
  %118 = fmul float %116, %110, !dbg !45
  %119 = fadd float %117, %111, !dbg !46
  %120 = fadd float %118, %112, !dbg !46
  %121 = getelementptr float, ptr addrspace(1) %6, i64 %70, !dbg !47
  %122 = getelementptr float, ptr addrspace(1) %6, i64 %71, !dbg !47
  %123 = bitcast float %119 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %121, i1 true) #5, !dbg !48
  %124 = bitcast float %120 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %122, i1 true) #5, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czqahx2y26idjhgaufszs2csaonm6txy6uffyrkdrktwjd3umxda.py", directory: "inductor_cache/zq")
!4 = !{ptr @triton_poi_fused_max_unpool2d_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_unpool2d_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_max_unpool2d_25", linkageName: "triton_poi_fused_max_unpool2d_25", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 40, scope: !11)
!17 = !DILocation(line: 25, column: 35, scope: !11)
!18 = !DILocation(line: 25, column: 60, scope: !11)
!19 = !DILocation(line: 25, column: 54, scope: !11)
!20 = !DILocation(line: 25, column: 48, scope: !11)
!21 = !DILocation(line: 25, column: 77, scope: !11)
!22 = !DILocation(line: 25, column: 84, scope: !11)
!23 = !DILocation(line: 25, column: 70, scope: !11)
!24 = !DILocation(line: 25, column: 30, scope: !11)
!25 = !DILocation(line: 25, column: 91, scope: !11)
!26 = !DILocation(line: 26, column: 30, scope: !11)
!27 = !DILocation(line: 26, column: 91, scope: !11)
!28 = !DILocation(line: 27, column: 31, scope: !11)
!29 = !DILocation(line: 27, column: 51, scope: !11)
!30 = !DILocation(line: 28, column: 32, scope: !11)
!31 = !DILocation(line: 28, column: 52, scope: !11)
!32 = !DILocation(line: 29, column: 32, scope: !11)
!33 = !DILocation(line: 29, column: 52, scope: !11)
!34 = !DILocation(line: 30, column: 32, scope: !11)
!35 = !DILocation(line: 30, column: 52, scope: !11)
!36 = !DILocation(line: 31, column: 17, scope: !11)
!37 = !DILocation(line: 32, column: 18, scope: !11)
!38 = !DILocation(line: 36, column: 32, scope: !11)
!39 = !DILocation(line: 37, column: 51, scope: !11)
!40 = !DILocation(line: 40, column: 20, scope: !11)
!41 = !DILocation(line: 41, column: 27, scope: !11)
!42 = !DILocation(line: 38, column: 19, scope: !11)
!43 = !DILocation(line: 43, column: 20, scope: !11)
!44 = !DILocation(line: 46, column: 20, scope: !11)
!45 = !DILocation(line: 47, column: 20, scope: !11)
!46 = !DILocation(line: 48, column: 20, scope: !11)
!47 = !DILocation(line: 49, column: 25, scope: !11)
!48 = !DILocation(line: 49, column: 66, scope: !11)
!49 = !DILocation(line: 49, column: 4, scope: !11)
