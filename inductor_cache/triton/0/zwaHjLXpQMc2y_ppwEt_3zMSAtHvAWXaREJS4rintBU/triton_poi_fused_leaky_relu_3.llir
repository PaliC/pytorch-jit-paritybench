; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = icmp slt i32 %7, 64, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %10 = shl i32 %9, 8, !dbg !13
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %12 = shl i32 %11, 1, !dbg !14
  %13 = and i32 %12, 254, !dbg !14
  %14 = or disjoint i32 %10, %13, !dbg !15
  %15 = icmp slt i32 %14, 256, !dbg !16
  %.frozen = freeze i32 %7, !dbg !17
  %16 = sdiv i32 %.frozen, 16, !dbg !17
  %17 = shl i32 %7, 8, !dbg !18
  %18 = add i32 %14, %17, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = and i1 %8, %15, !dbg !21
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %21) #4, !dbg !22
  %23 = shl i32 %16, 8, !dbg !23
  %24 = add i32 %14, %23, !dbg !24
  %25 = sext i32 %24 to i64, !dbg !25
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !25
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %21) #4, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !27
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %21) #4, !dbg !28
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !28
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !28
  %32 = bitcast i32 %30 to float, !dbg !28
  %33 = bitcast i32 %31 to float, !dbg !28
  %34 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float 1.600000e+01) #4, !dbg !29
  %35 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float 1.600000e+01) #4, !dbg !29
  %36 = fadd float %34, 0x3EE4F8B580000000, !dbg !30
  %37 = fadd float %35, 0x3EE4F8B580000000, !dbg !30
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %38, 0, !dbg !31
  br i1 %.not.i, label %41, label %39, !dbg !31

39:                                               ; preds = %6
  %40 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %36), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

41:                                               ; preds = %6
  %42 = tail call float @llvm.nvvm.rsqrt.approx.f(float %36), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %39, %41
  %.0.i = phi float [ %40, %39 ], [ %42, %41 ], !dbg !31
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i1 = icmp eq i32 %43, 0, !dbg !31
  br i1 %.not.i1, label %46, label %44, !dbg !31

44:                                               ; preds = %__nv_rsqrtf.exit
  %45 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %37), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

46:                                               ; preds = %__nv_rsqrtf.exit
  %47 = tail call float @llvm.nvvm.rsqrt.approx.f(float %37), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

__nv_rsqrtf.exit3:                                ; preds = %44, %46
  %.0.i2 = phi float [ %45, %44 ], [ %47, %46 ], !dbg !31
  %48 = extractvalue { i32, i32 } %22, 1, !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = extractvalue { i32, i32 } %27, 1, !dbg !26
  %51 = bitcast i32 %50 to float, !dbg !26
  %52 = fsub float %49, %51, !dbg !32
  %53 = extractvalue { i32, i32 } %22, 0, !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = extractvalue { i32, i32 } %27, 0, !dbg !26
  %56 = bitcast i32 %55 to float, !dbg !26
  %57 = fsub float %54, %56, !dbg !32
  %58 = and i32 %11, 127, !dbg !14
  %59 = or disjoint i32 %58, 128, !dbg !14
  %60 = or disjoint i32 %10, %59, !dbg !15
  %61 = icmp slt i32 %60, 256, !dbg !16
  %62 = and i1 %8, %61, !dbg !21
  %63 = or disjoint i32 %10, %58, !dbg !15
  %64 = icmp slt i32 %63, 256, !dbg !16
  %65 = and i1 %8, %64, !dbg !21
  %66 = mul i32 %16, 16, !dbg !33
  %.decomposed = sub i32 %.frozen, %66, !dbg !33
  %67 = fmul float %57, %.0.i, !dbg !34
  %68 = fmul float %52, %.0.i2, !dbg !34
  %69 = fcmp ogt float %67, 0.000000e+00, !dbg !35
  %70 = fcmp ogt float %68, 0.000000e+00, !dbg !35
  %71 = fmul float %67, 0x3FC99999A0000000, !dbg !36
  %72 = fmul float %68, 0x3FC99999A0000000, !dbg !36
  %73 = select i1 %69, float %67, float %71, !dbg !37
  %74 = select i1 %70, float %68, float %72, !dbg !37
  %75 = shl i32 %63, 4, !dbg !38
  %76 = shl i32 %60, 4, !dbg !38
  %77 = shl i32 %16, 12, !dbg !39
  %78 = add i32 %77, %.decomposed, !dbg !40
  %79 = add i32 %78, %75, !dbg !41
  %80 = add i32 %78, %76, !dbg !41
  %81 = sext i32 %79 to i64, !dbg !42
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !42
  %83 = sext i32 %80 to i64, !dbg !42
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %83, !dbg !42
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !43
  %86 = bitcast float %73 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #4, !dbg !43
  %87 = or disjoint i32 %13, 1, !dbg !43
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87, !dbg !43
  %89 = bitcast float %74 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58, !dbg !43
  %91 = load i32, ptr addrspace(3) %90, align 4, !dbg !43
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %59, !dbg !43
  %93 = load i32, ptr addrspace(3) %92, align 4, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %82, i1 %65) #4, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %84, i1 %62) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c54xuswrwyyz5svsswkblmfro4vpgg36i34ghv4rbs2zq54zylof.py", directory: "inductor_cache/54")
!4 = !{ptr @triton_poi_fused_leaky_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_3", linkageName: "triton_poi_fused_leaky_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 44, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 27, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 34, scope: !7)
!38 = !DILocation(line: 47, column: 33, scope: !7)
!39 = !DILocation(line: 47, column: 43, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !7)
!41 = !DILocation(line: 47, column: 38, scope: !7)
!42 = !DILocation(line: 47, column: 25, scope: !7)
!43 = !DILocation(line: 47, column: 55, scope: !7)
!44 = !DILocation(line: 47, column: 4, scope: !7)
