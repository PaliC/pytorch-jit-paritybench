; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_leaky_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 5, !dbg !12
  %12 = lshr i32 %10, 6, !dbg !12
  %.lobit = and i32 %12, 1, !dbg !12
  %13 = or disjoint i32 %.lobit, 2, !dbg !12
  %14 = or disjoint i32 %.lobit, 4, !dbg !12
  %15 = or disjoint i32 %.lobit, 6, !dbg !12
  %16 = and i32 %10, 31, !dbg !12
  %17 = and i32 %10, 7, !dbg !12
  %18 = or disjoint i32 %9, %.lobit, !dbg !13
  %19 = or disjoint i32 %9, %13, !dbg !13
  %20 = or disjoint i32 %9, %14, !dbg !13
  %21 = or disjoint i32 %9, %15, !dbg !13
  %22 = icmp slt i32 %18, 2048, !dbg !14
  %23 = icmp slt i32 %19, 2048, !dbg !14
  %24 = icmp slt i32 %20, 2048, !dbg !14
  %25 = icmp slt i32 %21, 2048, !dbg !14
  %26 = and i32 %10, 63, !dbg !15
  %27 = icmp samesign ult i32 %26, 49, !dbg !16
  %28 = srem i32 %18, 512, !dbg !17
  %29 = srem i32 %19, 512, !dbg !17
  %30 = srem i32 %20, 512, !dbg !17
  %31 = srem i32 %21, 512, !dbg !17
  %32 = mul i32 %18, 49, !dbg !18
  %33 = mul i32 %19, 49, !dbg !18
  %34 = mul i32 %20, 49, !dbg !18
  %35 = mul i32 %21, 49, !dbg !18
  %36 = add i32 %32, %26, !dbg !19
  %37 = add i32 %33, %26, !dbg !19
  %38 = add i32 %34, %26, !dbg !19
  %39 = add i32 %35, %26, !dbg !19
  %40 = sext i32 %36 to i64, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !20
  %42 = sext i32 %37 to i64, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !20
  %44 = sext i32 %38 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !20
  %46 = sext i32 %39 to i64, !dbg !20
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !20
  %48 = and i1 %27, %22, !dbg !21
  %49 = and i1 %27, %23, !dbg !21
  %50 = and i1 %27, %24, !dbg !21
  %51 = and i1 %27, %25, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %48, i32 0, i1 %48) #5, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %49, i32 0, i1 %49) #5, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %50, i32 0, i1 %50) #5, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %51, i32 0, i1 %51) #5, !dbg !22
  %56 = sext i32 %28 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !23
  %58 = sext i32 %29 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !23
  %60 = sext i32 %30 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !23
  %62 = sext i32 %31 to i64, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %22) #5, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %23) #5, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %24) #5, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %25) #5, !dbg !24
  %68 = icmp eq i32 %16, 0, !dbg !25
  %69 = and i32 %11, 1, !dbg !25
  %70 = shl nuw nsw i32 %.lobit, 1, !dbg !25
  %71 = or disjoint i32 %70, %69, !dbg !25
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !25
  %73 = shl nuw nsw i32 %13, 1, !dbg !25
  %74 = or disjoint i32 %73, %69, !dbg !25
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !25
  %76 = shl nuw nsw i32 %14, 1, !dbg !25
  %77 = or disjoint i32 %76, %69, !dbg !25
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !25
  %79 = shl nuw nsw i32 %15, 1, !dbg !25
  %80 = or disjoint i32 %79, %69, !dbg !25
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !25
  %82 = icmp slt i32 %10, 16, !dbg !25
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !25
  %84 = and i32 %10, 1, !dbg !25
  %85 = icmp eq i32 %84, 0, !dbg !25
  %86 = and i1 %82, %85, !dbg !25
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !25
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !25
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !25
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !25
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !29
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !29
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !29
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !29
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !29
  %96 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !22
  %97 = insertelement <4 x i32> %96, i32 %54, i64 1, !dbg !22
  %98 = insertelement <4 x i32> %97, i32 %53, i64 2, !dbg !22
  %99 = insertelement <4 x i32> %98, i32 %52, i64 3, !dbg !22
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !22
  %101 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !24
  %102 = insertelement <4 x i32> %101, i32 %66, i64 1, !dbg !24
  %103 = insertelement <4 x i32> %102, i32 %65, i64 2, !dbg !24
  %104 = insertelement <4 x i32> %103, i32 %64, i64 3, !dbg !24
  %105 = bitcast <4 x i32> %104 to <4 x float>, !dbg !24
  %106 = fadd <4 x float> %100, %105, !dbg !30
  %107 = extractelement <4 x float> %106, i64 3, !dbg !31
  %108 = select i1 %48, float %107, float 0.000000e+00, !dbg !31
  %109 = extractelement <4 x float> %106, i64 2, !dbg !31
  %110 = select i1 %49, float %109, float 0.000000e+00, !dbg !31
  %111 = extractelement <4 x float> %106, i64 1, !dbg !31
  %112 = select i1 %50, float %111, float 0.000000e+00, !dbg !31
  %113 = extractelement <4 x float> %106, i64 0, !dbg !31
  %114 = select i1 %51, float %113, float 0.000000e+00, !dbg !31
  %115 = bitcast float %108 to i32, !dbg !25
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 16, i32 31), !dbg !25
  %117 = bitcast i32 %116 to float, !dbg !25
  %118 = fadd float %108, %117, !dbg !32
  %119 = bitcast float %118 to i32, !dbg !25
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 8, i32 31), !dbg !25
  %121 = bitcast i32 %120 to float, !dbg !25
  %122 = fadd float %118, %121, !dbg !32
  %123 = bitcast float %122 to i32, !dbg !25
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !25
  %125 = bitcast i32 %124 to float, !dbg !25
  %126 = fadd float %122, %125, !dbg !32
  %127 = bitcast float %126 to i32, !dbg !25
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !25
  %129 = bitcast i32 %128 to float, !dbg !25
  %130 = fadd float %126, %129, !dbg !32
  %131 = bitcast float %130 to i32, !dbg !25
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !25
  %133 = bitcast i32 %132 to float, !dbg !25
  %134 = fadd float %130, %133, !dbg !32
  %135 = bitcast float %110 to i32, !dbg !25
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 16, i32 31), !dbg !25
  %137 = bitcast i32 %136 to float, !dbg !25
  %138 = fadd float %110, %137, !dbg !32
  %139 = bitcast float %138 to i32, !dbg !25
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 8, i32 31), !dbg !25
  %141 = bitcast i32 %140 to float, !dbg !25
  %142 = fadd float %138, %141, !dbg !32
  %143 = bitcast float %142 to i32, !dbg !25
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 4, i32 31), !dbg !25
  %145 = bitcast i32 %144 to float, !dbg !25
  %146 = fadd float %142, %145, !dbg !32
  %147 = bitcast float %146 to i32, !dbg !25
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !25
  %149 = bitcast i32 %148 to float, !dbg !25
  %150 = fadd float %146, %149, !dbg !32
  %151 = bitcast float %150 to i32, !dbg !25
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !25
  %153 = bitcast i32 %152 to float, !dbg !25
  %154 = fadd float %150, %153, !dbg !32
  %155 = bitcast float %112 to i32, !dbg !25
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 16, i32 31), !dbg !25
  %157 = bitcast i32 %156 to float, !dbg !25
  %158 = fadd float %112, %157, !dbg !32
  %159 = bitcast float %158 to i32, !dbg !25
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !25
  %161 = bitcast i32 %160 to float, !dbg !25
  %162 = fadd float %158, %161, !dbg !32
  %163 = bitcast float %162 to i32, !dbg !25
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !25
  %165 = bitcast i32 %164 to float, !dbg !25
  %166 = fadd float %162, %165, !dbg !32
  %167 = bitcast float %166 to i32, !dbg !25
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 2, i32 31), !dbg !25
  %169 = bitcast i32 %168 to float, !dbg !25
  %170 = fadd float %166, %169, !dbg !32
  %171 = bitcast float %170 to i32, !dbg !25
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 1, i32 31), !dbg !25
  %173 = bitcast i32 %172 to float, !dbg !25
  %174 = fadd float %170, %173, !dbg !32
  %175 = bitcast float %114 to i32, !dbg !25
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 16, i32 31), !dbg !25
  %177 = bitcast i32 %176 to float, !dbg !25
  %178 = fadd float %114, %177, !dbg !32
  %179 = bitcast float %178 to i32, !dbg !25
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 8, i32 31), !dbg !25
  %181 = bitcast i32 %180 to float, !dbg !25
  %182 = fadd float %178, %181, !dbg !32
  %183 = bitcast float %182 to i32, !dbg !25
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 4, i32 31), !dbg !25
  %185 = bitcast i32 %184 to float, !dbg !25
  %186 = fadd float %182, %185, !dbg !32
  %187 = bitcast float %186 to i32, !dbg !25
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !25
  %189 = bitcast i32 %188 to float, !dbg !25
  %190 = fadd float %186, %189, !dbg !32
  %191 = bitcast float %190 to i32, !dbg !25
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !25
  %193 = bitcast i32 %192 to float, !dbg !25
  %194 = fadd float %190, %193, !dbg !32
  %195 = bitcast float %134 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %195, i1 %68) #5, !dbg !25
  %196 = bitcast float %154 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %196, i1 %68) #5, !dbg !25
  %197 = bitcast float %174 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %197, i1 %68) #5, !dbg !25
  %198 = bitcast float %194 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %198, i1 %68) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %199 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %83, i1 %82) #5, !dbg !25
  %200 = bitcast i32 %199 to float, !dbg !25
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 1, i32 31), !dbg !25
  %202 = bitcast i32 %201 to float, !dbg !25
  %203 = fadd float %200, %202, !dbg !32
  %204 = bitcast float %203 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %204, i1 %86) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %205 = load float, ptr addrspace(3) %87, align 8, !dbg !25
  %206 = load float, ptr addrspace(3) %88, align 8, !dbg !25
  %207 = load float, ptr addrspace(3) %89, align 8, !dbg !25
  %208 = load float, ptr addrspace(3) %90, align 8, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %209 = bitcast float %205 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %209, i1 true) #5, !dbg !29
  %210 = bitcast float %206 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %210, i1 true) #5, !dbg !29
  %211 = bitcast float %207 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %211, i1 true) #5, !dbg !29
  %212 = bitcast float %208 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %212, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %213 = load float, ptr addrspace(3) %95, align 4, !dbg !29
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float 4.900000e+01) #5, !dbg !29
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float 4.900000e+01) #5, !dbg !29
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float 4.900000e+01) #5, !dbg !29
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float 4.900000e+01) #5, !dbg !29
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float 4.900000e+01) #5, !dbg !29
  %219 = insertelement <4 x float> poison, float %218, i64 0, !dbg !34
  %220 = insertelement <4 x float> %219, float %217, i64 1, !dbg !34
  %221 = insertelement <4 x float> %220, float %216, i64 2, !dbg !34
  %222 = insertelement <4 x float> %221, float %215, i64 3, !dbg !34
  %223 = fsub <4 x float> %106, %222, !dbg !34
  %224 = fmul <4 x float> %223, %223, !dbg !35
  %225 = extractelement <4 x float> %224, i64 3, !dbg !35
  %226 = fmul <4 x float> %223, %223, !dbg !35
  %227 = extractelement <4 x float> %226, i64 2, !dbg !35
  %228 = fmul <4 x float> %223, %223, !dbg !35
  %229 = extractelement <4 x float> %228, i64 1, !dbg !35
  %230 = fmul <4 x float> %223, %223, !dbg !35
  %231 = extractelement <4 x float> %230, i64 0, !dbg !35
  %232 = select i1 %48, float %225, float 0.000000e+00, !dbg !36
  %233 = select i1 %49, float %227, float 0.000000e+00, !dbg !36
  %234 = select i1 %50, float %229, float 0.000000e+00, !dbg !36
  %235 = select i1 %51, float %231, float 0.000000e+00, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %236 = bitcast float %232 to i32, !dbg !37
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 16, i32 31), !dbg !37
  %238 = bitcast i32 %237 to float, !dbg !37
  %239 = fadd float %232, %238, !dbg !39
  %240 = bitcast float %239 to i32, !dbg !37
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 8, i32 31), !dbg !37
  %242 = bitcast i32 %241 to float, !dbg !37
  %243 = fadd float %239, %242, !dbg !39
  %244 = bitcast float %243 to i32, !dbg !37
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !37
  %246 = bitcast i32 %245 to float, !dbg !37
  %247 = fadd float %243, %246, !dbg !39
  %248 = bitcast float %247 to i32, !dbg !37
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 2, i32 31), !dbg !37
  %250 = bitcast i32 %249 to float, !dbg !37
  %251 = fadd float %247, %250, !dbg !39
  %252 = bitcast float %251 to i32, !dbg !37
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !37
  %254 = bitcast i32 %253 to float, !dbg !37
  %255 = fadd float %251, %254, !dbg !39
  %256 = bitcast float %233 to i32, !dbg !37
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 16, i32 31), !dbg !37
  %258 = bitcast i32 %257 to float, !dbg !37
  %259 = fadd float %233, %258, !dbg !39
  %260 = bitcast float %259 to i32, !dbg !37
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 8, i32 31), !dbg !37
  %262 = bitcast i32 %261 to float, !dbg !37
  %263 = fadd float %259, %262, !dbg !39
  %264 = bitcast float %263 to i32, !dbg !37
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !37
  %266 = bitcast i32 %265 to float, !dbg !37
  %267 = fadd float %263, %266, !dbg !39
  %268 = bitcast float %267 to i32, !dbg !37
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !37
  %270 = bitcast i32 %269 to float, !dbg !37
  %271 = fadd float %267, %270, !dbg !39
  %272 = bitcast float %271 to i32, !dbg !37
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 1, i32 31), !dbg !37
  %274 = bitcast i32 %273 to float, !dbg !37
  %275 = fadd float %271, %274, !dbg !39
  %276 = bitcast float %234 to i32, !dbg !37
  %277 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %276, i32 16, i32 31), !dbg !37
  %278 = bitcast i32 %277 to float, !dbg !37
  %279 = fadd float %234, %278, !dbg !39
  %280 = bitcast float %279 to i32, !dbg !37
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 8, i32 31), !dbg !37
  %282 = bitcast i32 %281 to float, !dbg !37
  %283 = fadd float %279, %282, !dbg !39
  %284 = bitcast float %283 to i32, !dbg !37
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 4, i32 31), !dbg !37
  %286 = bitcast i32 %285 to float, !dbg !37
  %287 = fadd float %283, %286, !dbg !39
  %288 = bitcast float %287 to i32, !dbg !37
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 2, i32 31), !dbg !37
  %290 = bitcast i32 %289 to float, !dbg !37
  %291 = fadd float %287, %290, !dbg !39
  %292 = bitcast float %291 to i32, !dbg !37
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 1, i32 31), !dbg !37
  %294 = bitcast i32 %293 to float, !dbg !37
  %295 = fadd float %291, %294, !dbg !39
  %296 = bitcast float %235 to i32, !dbg !37
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 16, i32 31), !dbg !37
  %298 = bitcast i32 %297 to float, !dbg !37
  %299 = fadd float %235, %298, !dbg !39
  %300 = bitcast float %299 to i32, !dbg !37
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 8, i32 31), !dbg !37
  %302 = bitcast i32 %301 to float, !dbg !37
  %303 = fadd float %299, %302, !dbg !39
  %304 = bitcast float %303 to i32, !dbg !37
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 4, i32 31), !dbg !37
  %306 = bitcast i32 %305 to float, !dbg !37
  %307 = fadd float %303, %306, !dbg !39
  %308 = bitcast float %307 to i32, !dbg !37
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 2, i32 31), !dbg !37
  %310 = bitcast i32 %309 to float, !dbg !37
  %311 = fadd float %307, %310, !dbg !39
  %312 = bitcast float %311 to i32, !dbg !37
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 1, i32 31), !dbg !37
  %314 = bitcast i32 %313 to float, !dbg !37
  %315 = fadd float %311, %314, !dbg !39
  %316 = bitcast float %255 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %316, i1 %68) #5, !dbg !37
  %317 = bitcast float %275 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %317, i1 %68) #5, !dbg !37
  %318 = bitcast float %295 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %318, i1 %68) #5, !dbg !37
  %319 = bitcast float %315 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %319, i1 %68) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %320 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %83, i1 %82) #5, !dbg !37
  %321 = bitcast i32 %320 to float, !dbg !37
  %322 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 1, i32 31), !dbg !37
  %323 = bitcast i32 %322 to float, !dbg !37
  %324 = fadd float %321, %323, !dbg !39
  %325 = bitcast float %324 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %325, i1 %86) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %326 = load float, ptr addrspace(3) %87, align 8, !dbg !37
  %327 = load float, ptr addrspace(3) %88, align 8, !dbg !37
  %328 = load float, ptr addrspace(3) %89, align 8, !dbg !37
  %329 = load float, ptr addrspace(3) %90, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %330 = bitcast float %326 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %330, i1 true) #5, !dbg !40
  %331 = bitcast float %327 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %331, i1 true) #5, !dbg !40
  %332 = bitcast float %328 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %332, i1 true) #5, !dbg !40
  %333 = bitcast float %329 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %333, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %334 = load float, ptr addrspace(3) %95, align 4, !dbg !40
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %334, float 4.900000e+01) #5, !dbg !41
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 4.900000e+01) #5, !dbg !41
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %327, float 4.900000e+01) #5, !dbg !41
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %328, float 4.900000e+01) #5, !dbg !41
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %329, float 4.900000e+01) #5, !dbg !41
  %340 = fadd float %335, 0x3EE4F8B580000000, !dbg !42
  %341 = fadd float %336, 0x3EE4F8B580000000, !dbg !42
  %342 = fadd float %337, 0x3EE4F8B580000000, !dbg !42
  %343 = fadd float %338, 0x3EE4F8B580000000, !dbg !42
  %344 = fadd float %339, 0x3EE4F8B580000000, !dbg !42
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %345, 0, !dbg !40
  br i1 %.not.i, label %348, label %346, !dbg !40

346:                                              ; preds = %7
  %347 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %340), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

348:                                              ; preds = %7
  %349 = tail call float @llvm.nvvm.rsqrt.approx.f(float %340), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %346, %348
  %.0.i = phi float [ %347, %346 ], [ %349, %348 ], !dbg !40
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i1 = icmp eq i32 %350, 0, !dbg !40
  br i1 %.not.i1, label %353, label %351, !dbg !40

351:                                              ; preds = %__nv_rsqrtf.exit
  %352 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %341), !dbg !40
  br label %__nv_rsqrtf.exit3, !dbg !40

353:                                              ; preds = %__nv_rsqrtf.exit
  %354 = tail call float @llvm.nvvm.rsqrt.approx.f(float %341), !dbg !40
  br label %__nv_rsqrtf.exit3, !dbg !40

__nv_rsqrtf.exit3:                                ; preds = %351, %353
  %.0.i2 = phi float [ %352, %351 ], [ %354, %353 ], !dbg !40
  %355 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i4 = icmp eq i32 %355, 0, !dbg !40
  br i1 %.not.i4, label %358, label %356, !dbg !40

356:                                              ; preds = %__nv_rsqrtf.exit3
  %357 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %342), !dbg !40
  br label %__nv_rsqrtf.exit6, !dbg !40

358:                                              ; preds = %__nv_rsqrtf.exit3
  %359 = tail call float @llvm.nvvm.rsqrt.approx.f(float %342), !dbg !40
  br label %__nv_rsqrtf.exit6, !dbg !40

__nv_rsqrtf.exit6:                                ; preds = %356, %358
  %.0.i5 = phi float [ %357, %356 ], [ %359, %358 ], !dbg !40
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i7 = icmp eq i32 %360, 0, !dbg !40
  br i1 %.not.i7, label %363, label %361, !dbg !40

361:                                              ; preds = %__nv_rsqrtf.exit6
  %362 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %343), !dbg !40
  br label %__nv_rsqrtf.exit9, !dbg !40

363:                                              ; preds = %__nv_rsqrtf.exit6
  %364 = tail call float @llvm.nvvm.rsqrt.approx.f(float %343), !dbg !40
  br label %__nv_rsqrtf.exit9, !dbg !40

__nv_rsqrtf.exit9:                                ; preds = %361, %363
  %.0.i8 = phi float [ %362, %361 ], [ %364, %363 ], !dbg !40
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i10 = icmp eq i32 %365, 0, !dbg !40
  br i1 %.not.i10, label %368, label %366, !dbg !40

366:                                              ; preds = %__nv_rsqrtf.exit9
  %367 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %344), !dbg !40
  br label %__nv_rsqrtf.exit12, !dbg !40

368:                                              ; preds = %__nv_rsqrtf.exit9
  %369 = tail call float @llvm.nvvm.rsqrt.approx.f(float %344), !dbg !40
  br label %__nv_rsqrtf.exit12, !dbg !40

__nv_rsqrtf.exit12:                               ; preds = %366, %368
  %.0.i11 = phi float [ %367, %366 ], [ %369, %368 ], !dbg !40
  %370 = or disjoint i32 %9, %17, !dbg !13
  %371 = icmp slt i32 %370, 2048, !dbg !14
  %372 = insertelement <4 x float> poison, float %.0.i11, i64 0, !dbg !43
  %373 = insertelement <4 x float> %372, float %.0.i8, i64 1, !dbg !43
  %374 = insertelement <4 x float> %373, float %.0.i5, i64 2, !dbg !43
  %375 = insertelement <4 x float> %374, float %.0.i2, i64 3, !dbg !43
  %376 = fmul <4 x float> %223, %375, !dbg !43
  %377 = fcmp ogt <4 x float> %376, zeroinitializer, !dbg !44
  %378 = extractelement <4 x float> %376, i64 3, !dbg !45
  %379 = fmul float %378, 0x3FC99999A0000000, !dbg !46
  %380 = extractelement <4 x float> %376, i64 2, !dbg !45
  %381 = fmul float %380, 0x3FC99999A0000000, !dbg !46
  %382 = extractelement <4 x float> %376, i64 1, !dbg !45
  %383 = fmul float %382, 0x3FC99999A0000000, !dbg !46
  %384 = extractelement <4 x float> %376, i64 0, !dbg !45
  %385 = fmul float %384, 0x3FC99999A0000000, !dbg !46
  %386 = extractelement <4 x i1> %377, i64 3, !dbg !45
  %387 = select i1 %386, float %378, float %379, !dbg !45
  %388 = extractelement <4 x i1> %377, i64 2, !dbg !45
  %389 = select i1 %388, float %380, float %381, !dbg !45
  %390 = extractelement <4 x i1> %377, i64 1, !dbg !45
  %391 = select i1 %390, float %382, float %383, !dbg !45
  %392 = extractelement <4 x i1> %377, i64 0, !dbg !45
  %393 = select i1 %392, float %384, float %385, !dbg !45
  %394 = bitcast float %107 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %41, i1 %48) #5, !dbg !47
  %395 = bitcast float %109 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %395, ptr addrspace(1) %43, i1 %49) #5, !dbg !47
  %396 = bitcast float %111 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %396, ptr addrspace(1) %45, i1 %50) #5, !dbg !47
  %397 = bitcast float %113 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %397, ptr addrspace(1) %47, i1 %51) #5, !dbg !47
  %398 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !48
  %399 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !48
  %400 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !48
  %401 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !48
  %402 = bitcast float %387 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %402, ptr addrspace(1) %398, i1 %48) #5, !dbg !49
  %403 = bitcast float %389 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %403, ptr addrspace(1) %399, i1 %49) #5, !dbg !49
  %404 = bitcast float %391 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %404, ptr addrspace(1) %400, i1 %50) #5, !dbg !49
  %405 = bitcast float %393 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %405, ptr addrspace(1) %401, i1 %51) #5, !dbg !49
  %406 = sext i32 %370 to i64, !dbg !50
  %407 = getelementptr float, ptr addrspace(1) %4, i64 %406, !dbg !50
  %408 = lshr i32 %16, 3, !dbg !51
  %409 = shl nuw nsw i32 %11, 2, !dbg !51
  %410 = and i32 %409, 12, !dbg !51
  %411 = or disjoint i32 %410, %408, !dbg !51
  %412 = icmp eq i32 %411, 0, !dbg !51
  %413 = bitcast float %.0.i to i32, !dbg !51
  %414 = and i1 %412, %371, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %413, ptr addrspace(1) %407, i1 %414) #5, !dbg !51
  %415 = getelementptr float, ptr addrspace(1) %2, i64 %406, !dbg !52
  %416 = bitcast float %214 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %416, ptr addrspace(1) %415, i1 %414) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "con45dogmsquhfirckkmuqjrtqw572npwqpo6mhbon6fvcackmgu.py", directory: "inductor_cache/on")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_leaky_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_leaky_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_leaky_relu_3", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_leaky_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 42, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 55, scope: !7)
!22 = !DILocation(line: 32, column: 47, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 39, column: 24, scope: !7)
!29 = !DILocation(line: 42, column: 19, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 41, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !28)
!33 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 43, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !38)
!38 = !DILocation(line: 47, column: 26, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !38)
!40 = !DILocation(line: 53, column: 28, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 59, column: 35, scope: !7)
!46 = !DILocation(line: 58, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 47, scope: !7)
!48 = !DILocation(line: 61, column: 25, scope: !7)
!49 = !DILocation(line: 61, column: 45, scope: !7)
!50 = !DILocation(line: 62, column: 25, scope: !7)
!51 = !DILocation(line: 62, column: 37, scope: !7)
!52 = !DILocation(line: 63, column: 25, scope: !7)
!53 = !DILocation(line: 63, column: 37, scope: !7)
!54 = !DILocation(line: 63, column: 4, scope: !7)
