; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = mul i32 %6, 4608, !dbg !13
  %12 = zext nneg i32 %10 to i64, !dbg !14
  %13 = add i32 %10, %11, !dbg !15
  %14 = sext i32 %13 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = or disjoint i64 %12, 2048, !dbg !20
  %28 = trunc nuw nsw i64 %27 to i32, !dbg !15
  %29 = add i32 %11, %28, !dbg !15
  %30 = sext i32 %29 to i64, !dbg !16
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !16
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !17
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !17
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !17
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !18
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !19
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !19
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !19
  %43 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !17
  %44 = insertelement <2 x i32> %43, i32 %35, i64 1, !dbg !17
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !17
  %46 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !19
  %47 = insertelement <2 x i32> %46, i32 %41, i64 1, !dbg !19
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !19
  %49 = fmul <2 x float> %45, %48, !dbg !21
  %50 = extractelement <2 x float> %49, i64 0, !dbg !22
  %51 = fadd float %50, 0.000000e+00, !dbg !22
  %52 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !17
  %53 = insertelement <2 x i32> %52, i32 %36, i64 1, !dbg !17
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !17
  %55 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !19
  %56 = insertelement <2 x i32> %55, i32 %42, i64 1, !dbg !19
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !19
  %58 = fmul <2 x float> %54, %57, !dbg !21
  %59 = extractelement <2 x float> %58, i64 0, !dbg !22
  %60 = fadd float %59, 0.000000e+00, !dbg !22
  %61 = extractelement <2 x float> %49, i64 1, !dbg !22
  %62 = fadd float %51, %61, !dbg !22
  %63 = extractelement <2 x float> %58, i64 1, !dbg !22
  %64 = fadd float %60, %63, !dbg !22
  %65 = select i1 %7, float %62, float 0.000000e+00, !dbg !23
  %66 = select i1 %7, float %64, float 0.000000e+00, !dbg !23
  %67 = or disjoint i64 %12, 4096, !dbg !20
  %68 = icmp samesign ult i64 %67, 4608, !dbg !24
  %69 = trunc nuw nsw i64 %67 to i32, !dbg !15
  %70 = add i32 %11, %69, !dbg !15
  %71 = sext i32 %70 to i64, !dbg !16
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !16
  %73 = and i1 %7, %68, !dbg !25
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !17
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !17
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !17
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !17
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !17
  %79 = bitcast i32 %77 to float, !dbg !17
  %80 = bitcast i32 %78 to float, !dbg !17
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !18
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !19
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !19
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !19
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !19
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !19
  %87 = bitcast i32 %85 to float, !dbg !19
  %88 = bitcast i32 %86 to float, !dbg !19
  %89 = fmul float %79, %87, !dbg !21
  %90 = fmul float %80, %88, !dbg !21
  %91 = fadd float %65, %89, !dbg !22
  %92 = fadd float %66, %90, !dbg !22
  %93 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !17
  %94 = insertelement <2 x i32> %93, i32 %18, i64 1, !dbg !17
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !17
  %96 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %97 = insertelement <2 x i32> %96, i32 %24, i64 1, !dbg !19
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !19
  %99 = fmul <2 x float> %95, %98, !dbg !21
  %100 = fadd <2 x float> %99, zeroinitializer, !dbg !22
  %101 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !17
  %102 = insertelement <2 x i32> %101, i32 %34, i64 1, !dbg !17
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !17
  %104 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !19
  %105 = insertelement <2 x i32> %104, i32 %40, i64 1, !dbg !19
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !19
  %107 = fmul <2 x float> %103, %106, !dbg !21
  %108 = fadd <2 x float> %100, %107, !dbg !22
  %109 = insertelement <2 x i1> poison, i1 %7, i64 0, !dbg !23
  %110 = shufflevector <2 x i1> %109, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !23
  %111 = select <2 x i1> %110, <2 x float> %108, <2 x float> zeroinitializer, !dbg !23
  %112 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !17
  %113 = insertelement <2 x i32> %112, i32 %76, i64 1, !dbg !17
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !17
  %115 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !19
  %116 = insertelement <2 x i32> %115, i32 %84, i64 1, !dbg !19
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !19
  %118 = fmul <2 x float> %114, %117, !dbg !21
  %119 = fadd <2 x float> %111, %118, !dbg !22
  %120 = insertelement <2 x i1> poison, i1 %73, i64 0, !dbg !23
  %121 = shufflevector <2 x i1> %120, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !23
  %122 = select <2 x i1> %121, <2 x float> %119, <2 x float> %111, !dbg !23
  %123 = select i1 %73, float %91, float %65, !dbg !23
  %124 = select i1 %73, float %92, float %66, !dbg !23
  %125 = lshr i32 %8, 5, !dbg !12
  %126 = and i32 %8, 31, !dbg !12
  %shift = shufflevector <2 x float> %122, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !26
  %127 = fadd <2 x float> %122, %shift, !dbg !26
  %128 = extractelement <2 x float> %127, i64 0, !dbg !26
  %129 = fadd float %123, %128, !dbg !26
  %130 = fadd float %124, %129, !dbg !26
  %131 = bitcast float %130 to i32, !dbg !31
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 16, i32 31), !dbg !31
  %133 = bitcast i32 %132 to float, !dbg !31
  %134 = fadd float %130, %133, !dbg !26
  %135 = bitcast float %134 to i32, !dbg !31
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !31
  %137 = bitcast i32 %136 to float, !dbg !31
  %138 = fadd float %134, %137, !dbg !26
  %139 = bitcast float %138 to i32, !dbg !31
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !31
  %141 = bitcast i32 %140 to float, !dbg !31
  %142 = fadd float %138, %141, !dbg !26
  %143 = bitcast float %142 to i32, !dbg !31
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !31
  %145 = bitcast i32 %144 to float, !dbg !31
  %146 = fadd float %142, %145, !dbg !26
  %147 = bitcast float %146 to i32, !dbg !31
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !31
  %149 = bitcast i32 %148 to float, !dbg !31
  %150 = fadd float %146, %149, !dbg !26
  %151 = icmp eq i32 %126, 0, !dbg !31
  %152 = and i32 %125, 15, !dbg !31
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !31
  %154 = bitcast float %150 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 %151) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %155 = icmp slt i32 %8, 16, !dbg !31
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !31
  %157 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %156, i1 %155) #3, !dbg !31
  %158 = bitcast i32 %157 to float, !dbg !31
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 8, i32 31), !dbg !31
  %160 = bitcast i32 %159 to float, !dbg !31
  %161 = fadd float %158, %160, !dbg !26
  %162 = bitcast float %161 to i32, !dbg !31
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !31
  %164 = bitcast i32 %163 to float, !dbg !31
  %165 = fadd float %161, %164, !dbg !26
  %166 = bitcast float %165 to i32, !dbg !31
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 2, i32 31), !dbg !31
  %168 = bitcast i32 %167 to float, !dbg !31
  %169 = fadd float %165, %168, !dbg !26
  %170 = bitcast float %169 to i32, !dbg !31
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !31
  %172 = bitcast i32 %171 to float, !dbg !31
  %173 = fadd float %169, %172, !dbg !26
  %174 = and i32 %8, 15, !dbg !31
  %175 = icmp eq i32 %174, 0, !dbg !31
  %176 = and i1 %155, %175, !dbg !31
  %177 = bitcast float %173 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %177, i1 %176) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %178 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %179 = sext i32 %6 to i64, !dbg !32
  %180 = getelementptr float, ptr addrspace(1) %2, i64 %179, !dbg !32
  %urem = and i32 %8, 511, !dbg !33
  %181 = icmp eq i32 %urem, 0, !dbg !33
  %182 = and i1 %181, %7, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %178, ptr addrspace(1) %180, i1 %182) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwrzyzr4minem63g7ucqpwchk6pxqh5axdgj6dvn674kq6rcgbd4.py", directory: "inductor_cache/wr")
!4 = !{ptr @triton_red_fused_mv_17, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_17, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_17", linkageName: "triton_red_fused_mv_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 49, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 27, scope: !7)
!21 = !DILocation(line: 34, column: 22, scope: !7)
!22 = !DILocation(line: 36, column: 23, scope: !7)
!23 = !DILocation(line: 37, column: 46, scope: !7)
!24 = !DILocation(line: 30, column: 25, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 39, column: 25, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 4, scope: !7)
