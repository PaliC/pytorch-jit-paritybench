; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = shl i32 %15, 8, !dbg !15
  %17 = lshr i32 %11, 2, !dbg !16
  %18 = and i32 %17, 63, !dbg !16
  %19 = or disjoint i32 %16, %18, !dbg !17
  %20 = or disjoint i32 %19, 64, !dbg !17
  %21 = or disjoint i32 %19, 128, !dbg !17
  %22 = or disjoint i32 %19, 192, !dbg !17
  %23 = icmp slt i32 %19, 961, !dbg !18
  %24 = icmp slt i32 %20, 961, !dbg !18
  %25 = icmp slt i32 %21, 961, !dbg !18
  %26 = icmp slt i32 %22, 961, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %27 = sdiv i32 %.frozen, 256, !dbg !19
  %28 = mul i32 %27, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = shl i32 %19, 8, !dbg !21
  %30 = shl i32 %20, 8, !dbg !21
  %31 = shl i32 %21, 8, !dbg !21
  %32 = shl i32 %22, 8, !dbg !21
  %33 = mul i32 %27, 246016, !dbg !22
  %34 = add i32 %33, %.decomposed, !dbg !23
  %35 = add i32 %34, %29, !dbg !24
  %36 = add i32 %34, %30, !dbg !24
  %37 = add i32 %34, %31, !dbg !24
  %38 = add i32 %34, %32, !dbg !24
  %39 = sext i32 %35 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = sext i32 %36 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %37 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %38 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %23) #4, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %25) #4, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %26) #4, !dbg !26
  %51 = sext i32 %.decomposed to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #4, !dbg !30
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !30
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !30
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !30
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !30
  %60 = bitcast i32 %56 to float, !dbg !30
  %61 = bitcast i32 %57 to float, !dbg !30
  %62 = bitcast i32 %58 to float, !dbg !30
  %63 = bitcast i32 %59 to float, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !31
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !32
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !33
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !34
  %68 = fadd float %60, 0x3F50624DE0000000, !dbg !35
  %69 = fadd float %61, 0x3F50624DE0000000, !dbg !35
  %70 = fadd float %62, 0x3F50624DE0000000, !dbg !35
  %71 = fadd float %63, 0x3F50624DE0000000, !dbg !35
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %72, 0, !dbg !36
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %73, 0, !dbg !36
  br i1 %.not.i, label %79, label %74, !dbg !36

74:                                               ; preds = %8
  br i1 %.not1.i, label %77, label %75, !dbg !36

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

79:                                               ; preds = %8
  br i1 %.not1.i, label %82, label %80, !dbg !36

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !36
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i2 = icmp eq i32 %84, 0, !dbg !36
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i5 = icmp eq i32 %85, 0, !dbg !36
  br i1 %.not.i2, label %91, label %86, !dbg !36

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %89, label %87, !dbg !36

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %94, label %92, !dbg !36

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !36
  br label %__nv_sqrtf.exit6, !dbg !36

__nv_sqrtf.exit6:                                 ; preds = %87, %89, %92, %94
  %.0.i4 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !36
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i7 = icmp eq i32 %96, 0, !dbg !36
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i10 = icmp eq i32 %97, 0, !dbg !36
  br i1 %.not.i7, label %103, label %98, !dbg !36

98:                                               ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %101, label %99, !dbg !36

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

103:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %106, label %104, !dbg !36

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !36
  br label %__nv_sqrtf.exit11, !dbg !36

__nv_sqrtf.exit11:                                ; preds = %99, %101, %104, %106
  %.0.i9 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !36
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i12 = icmp eq i32 %108, 0, !dbg !36
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i15 = icmp eq i32 %109, 0, !dbg !36
  br i1 %.not.i12, label %115, label %110, !dbg !36

110:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %113, label %111, !dbg !36

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

115:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %118, label %116, !dbg !36

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit16, !dbg !36

__nv_sqrtf.exit16:                                ; preds = %111, %113, %116, %118
  %.0.i14 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !36
  %120 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %121 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %122 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %124 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %125 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %127 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %128 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %133 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %135 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %136 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !26
  %137 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !26
  %139 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !26
  %140 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !34
  %142 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !34
  %143 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !34
  %144 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !32
  %146 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !32
  %147 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !32
  %148 = or disjoint i32 %10, 15, !dbg !13
  %.frozen17 = freeze i32 %148, !dbg !19
  %149 = sdiv i32 %.frozen17, 256, !dbg !19
  %150 = or disjoint i32 %10, 14, !dbg !13
  %.frozen19 = freeze i32 %150, !dbg !19
  %151 = sdiv i32 %.frozen19, 256, !dbg !19
  %152 = or disjoint i32 %10, 13, !dbg !13
  %.frozen21 = freeze i32 %152, !dbg !19
  %153 = sdiv i32 %.frozen21, 256, !dbg !19
  %154 = or disjoint i32 %10, 12, !dbg !13
  %.frozen23 = freeze i32 %154, !dbg !19
  %155 = sdiv i32 %.frozen23, 256, !dbg !19
  %156 = or disjoint i32 %10, 11, !dbg !13
  %.frozen25 = freeze i32 %156, !dbg !19
  %157 = sdiv i32 %.frozen25, 256, !dbg !19
  %158 = or disjoint i32 %10, 10, !dbg !13
  %.frozen27 = freeze i32 %158, !dbg !19
  %159 = sdiv i32 %.frozen27, 256, !dbg !19
  %160 = or disjoint i32 %10, 9, !dbg !13
  %.frozen29 = freeze i32 %160, !dbg !19
  %161 = sdiv i32 %.frozen29, 256, !dbg !19
  %162 = or disjoint i32 %10, 8, !dbg !13
  %.frozen31 = freeze i32 %162, !dbg !19
  %163 = sdiv i32 %.frozen31, 256, !dbg !19
  %164 = or disjoint i32 %10, 7, !dbg !13
  %.frozen33 = freeze i32 %164, !dbg !19
  %165 = sdiv i32 %.frozen33, 256, !dbg !19
  %166 = or disjoint i32 %10, 6, !dbg !13
  %.frozen35 = freeze i32 %166, !dbg !19
  %167 = sdiv i32 %.frozen35, 256, !dbg !19
  %168 = or disjoint i32 %10, 5, !dbg !13
  %.frozen37 = freeze i32 %168, !dbg !19
  %169 = sdiv i32 %.frozen37, 256, !dbg !19
  %170 = or disjoint i32 %10, 4, !dbg !13
  %.frozen39 = freeze i32 %170, !dbg !19
  %171 = sdiv i32 %.frozen39, 256, !dbg !19
  %172 = or disjoint i32 %10, 3, !dbg !13
  %.frozen41 = freeze i32 %172, !dbg !19
  %173 = sdiv i32 %.frozen41, 256, !dbg !19
  %174 = or disjoint i32 %10, 2, !dbg !13
  %.frozen43 = freeze i32 %174, !dbg !19
  %175 = sdiv i32 %.frozen43, 256, !dbg !19
  %176 = or disjoint i32 %10, 1, !dbg !13
  %.frozen45 = freeze i32 %176, !dbg !19
  %177 = sdiv i32 %.frozen45, 256, !dbg !19
  %.frozen47 = freeze i32 %10, !dbg !19
  %178 = sdiv i32 %.frozen47, 256, !dbg !19
  %179 = mul i32 %149, 256, !dbg !20
  %.decomposed18 = sub i32 %.frozen17, %179, !dbg !20
  %180 = mul i32 %151, 256, !dbg !20
  %.decomposed20 = sub i32 %.frozen19, %180, !dbg !20
  %181 = mul i32 %153, 256, !dbg !20
  %.decomposed22 = sub i32 %.frozen21, %181, !dbg !20
  %182 = mul i32 %155, 256, !dbg !20
  %.decomposed24 = sub i32 %.frozen23, %182, !dbg !20
  %183 = mul i32 %157, 256, !dbg !20
  %.decomposed26 = sub i32 %.frozen25, %183, !dbg !20
  %184 = mul i32 %159, 256, !dbg !20
  %.decomposed28 = sub i32 %.frozen27, %184, !dbg !20
  %185 = mul i32 %161, 256, !dbg !20
  %.decomposed30 = sub i32 %.frozen29, %185, !dbg !20
  %186 = mul i32 %163, 256, !dbg !20
  %.decomposed32 = sub i32 %.frozen31, %186, !dbg !20
  %187 = mul i32 %165, 256, !dbg !20
  %.decomposed34 = sub i32 %.frozen33, %187, !dbg !20
  %188 = mul i32 %167, 256, !dbg !20
  %.decomposed36 = sub i32 %.frozen35, %188, !dbg !20
  %189 = mul i32 %169, 256, !dbg !20
  %.decomposed38 = sub i32 %.frozen37, %189, !dbg !20
  %190 = mul i32 %171, 256, !dbg !20
  %.decomposed40 = sub i32 %.frozen39, %190, !dbg !20
  %191 = mul i32 %173, 256, !dbg !20
  %.decomposed42 = sub i32 %.frozen41, %191, !dbg !20
  %192 = mul i32 %175, 256, !dbg !20
  %.decomposed44 = sub i32 %.frozen43, %192, !dbg !20
  %193 = mul i32 %177, 256, !dbg !20
  %.decomposed46 = sub i32 %.frozen45, %193, !dbg !20
  %194 = mul i32 %178, 256, !dbg !20
  %.decomposed48 = sub i32 %.frozen47, %194, !dbg !20
  %195 = and i32 %11, 255, !dbg !16
  %196 = or disjoint i32 %16, %195, !dbg !17
  %197 = icmp slt i32 %196, 961, !dbg !18
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #4, !dbg !37
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #4, !dbg !37
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #4, !dbg !37
  %202 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !28
  %203 = insertelement <4 x i32> %202, i32 %123, i64 1, !dbg !28
  %204 = insertelement <4 x i32> %203, i32 %125, i64 2, !dbg !28
  %205 = insertelement <4 x i32> %204, i32 %127, i64 3, !dbg !28
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !28
  %207 = shufflevector <4 x float> %206, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %208 = insertelement <16 x i32> poison, i32 %120, i64 0, !dbg !26
  %209 = insertelement <16 x i32> %208, i32 %122, i64 1, !dbg !26
  %210 = insertelement <16 x i32> %209, i32 %124, i64 2, !dbg !26
  %211 = insertelement <16 x i32> %210, i32 %126, i64 3, !dbg !26
  %212 = insertelement <16 x i32> %211, i32 %128, i64 4, !dbg !26
  %213 = insertelement <16 x i32> %212, i32 %129, i64 5, !dbg !26
  %214 = insertelement <16 x i32> %213, i32 %130, i64 6, !dbg !26
  %215 = insertelement <16 x i32> %214, i32 %131, i64 7, !dbg !26
  %216 = insertelement <16 x i32> %215, i32 %132, i64 8, !dbg !26
  %217 = insertelement <16 x i32> %216, i32 %133, i64 9, !dbg !26
  %218 = insertelement <16 x i32> %217, i32 %134, i64 10, !dbg !26
  %219 = insertelement <16 x i32> %218, i32 %135, i64 11, !dbg !26
  %220 = insertelement <16 x i32> %219, i32 %136, i64 12, !dbg !26
  %221 = insertelement <16 x i32> %220, i32 %137, i64 13, !dbg !26
  %222 = insertelement <16 x i32> %221, i32 %138, i64 14, !dbg !26
  %223 = insertelement <16 x i32> %222, i32 %139, i64 15, !dbg !26
  %224 = bitcast <16 x i32> %223 to <16 x float>, !dbg !26
  %225 = fsub <16 x float> %224, %207, !dbg !38
  %226 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !34
  %227 = insertelement <4 x i32> %226, i32 %141, i64 1, !dbg !34
  %228 = insertelement <4 x i32> %227, i32 %142, i64 2, !dbg !34
  %229 = insertelement <4 x i32> %228, i32 %143, i64 3, !dbg !34
  %230 = bitcast <4 x i32> %229 to <4 x float>, !dbg !34
  %231 = shufflevector <4 x float> %230, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %232 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !32
  %233 = insertelement <4 x i32> %232, i32 %145, i64 1, !dbg !32
  %234 = insertelement <4 x i32> %233, i32 %146, i64 2, !dbg !32
  %235 = insertelement <4 x i32> %234, i32 %147, i64 3, !dbg !32
  %236 = bitcast <4 x i32> %235 to <4 x float>, !dbg !32
  %237 = shufflevector <4 x float> %236, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %238 = insertelement <16 x float> poison, float %201, i64 0, !dbg !39
  %239 = insertelement <16 x float> %238, float %200, i64 1, !dbg !39
  %240 = insertelement <16 x float> %239, float %199, i64 2, !dbg !39
  %241 = insertelement <16 x float> %240, float %198, i64 3, !dbg !39
  %242 = shufflevector <16 x float> %241, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %243 = fmul <16 x float> %225, %242, !dbg !39
  %244 = fmul <16 x float> %243, %237, !dbg !40
  %245 = fadd <16 x float> %244, %231, !dbg !41
  %246 = fcmp olt <16 x float> %245, zeroinitializer, !dbg !42
  %247 = extractelement <16 x i1> %246, i64 15, !dbg !46
  %248 = extractelement <16 x float> %245, i64 15, !dbg !46
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !46
  %250 = extractelement <16 x i1> %246, i64 14, !dbg !46
  %251 = extractelement <16 x float> %245, i64 14, !dbg !46
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !46
  %253 = extractelement <16 x i1> %246, i64 13, !dbg !46
  %254 = extractelement <16 x float> %245, i64 13, !dbg !46
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !46
  %256 = extractelement <16 x i1> %246, i64 12, !dbg !46
  %257 = extractelement <16 x float> %245, i64 12, !dbg !46
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !46
  %259 = extractelement <16 x i1> %246, i64 11, !dbg !46
  %260 = extractelement <16 x float> %245, i64 11, !dbg !46
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !46
  %262 = extractelement <16 x i1> %246, i64 10, !dbg !46
  %263 = extractelement <16 x float> %245, i64 10, !dbg !46
  %264 = select i1 %262, float 0.000000e+00, float %263, !dbg !46
  %265 = extractelement <16 x i1> %246, i64 9, !dbg !46
  %266 = extractelement <16 x float> %245, i64 9, !dbg !46
  %267 = select i1 %265, float 0.000000e+00, float %266, !dbg !46
  %268 = extractelement <16 x i1> %246, i64 8, !dbg !46
  %269 = extractelement <16 x float> %245, i64 8, !dbg !46
  %270 = select i1 %268, float 0.000000e+00, float %269, !dbg !46
  %271 = extractelement <16 x i1> %246, i64 7, !dbg !46
  %272 = extractelement <16 x float> %245, i64 7, !dbg !46
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !46
  %274 = extractelement <16 x i1> %246, i64 6, !dbg !46
  %275 = extractelement <16 x float> %245, i64 6, !dbg !46
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !46
  %277 = extractelement <16 x i1> %246, i64 5, !dbg !46
  %278 = extractelement <16 x float> %245, i64 5, !dbg !46
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !46
  %280 = extractelement <16 x i1> %246, i64 4, !dbg !46
  %281 = extractelement <16 x float> %245, i64 4, !dbg !46
  %282 = select i1 %280, float 0.000000e+00, float %281, !dbg !46
  %283 = extractelement <16 x i1> %246, i64 3, !dbg !46
  %284 = extractelement <16 x float> %245, i64 3, !dbg !46
  %285 = select i1 %283, float 0.000000e+00, float %284, !dbg !46
  %286 = extractelement <16 x i1> %246, i64 2, !dbg !46
  %287 = extractelement <16 x float> %245, i64 2, !dbg !46
  %288 = select i1 %286, float 0.000000e+00, float %287, !dbg !46
  %289 = extractelement <16 x i1> %246, i64 1, !dbg !46
  %290 = extractelement <16 x float> %245, i64 1, !dbg !46
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !46
  %292 = extractelement <16 x i1> %246, i64 0, !dbg !46
  %293 = extractelement <16 x float> %245, i64 0, !dbg !46
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !46
  %295 = mul nsw i32 %.decomposed48, 961, !dbg !47
  %296 = mul nsw i32 %.decomposed46, 961, !dbg !47
  %297 = mul nsw i32 %.decomposed44, 961, !dbg !47
  %298 = mul nsw i32 %.decomposed42, 961, !dbg !47
  %299 = mul nsw i32 %.decomposed40, 961, !dbg !47
  %300 = mul nsw i32 %.decomposed38, 961, !dbg !47
  %301 = mul nsw i32 %.decomposed36, 961, !dbg !47
  %302 = mul nsw i32 %.decomposed34, 961, !dbg !47
  %303 = mul nsw i32 %.decomposed32, 961, !dbg !47
  %304 = mul nsw i32 %.decomposed30, 961, !dbg !47
  %305 = mul nsw i32 %.decomposed28, 961, !dbg !47
  %306 = mul nsw i32 %.decomposed26, 961, !dbg !47
  %307 = mul nsw i32 %.decomposed24, 961, !dbg !47
  %308 = mul nsw i32 %.decomposed22, 961, !dbg !47
  %309 = mul nsw i32 %.decomposed20, 961, !dbg !47
  %310 = mul nsw i32 %.decomposed18, 961, !dbg !47
  %311 = add i32 %196, %295, !dbg !48
  %312 = add i32 %296, %196, !dbg !48
  %313 = add i32 %297, %196, !dbg !48
  %314 = add i32 %298, %196, !dbg !48
  %315 = add i32 %299, %196, !dbg !48
  %316 = add i32 %300, %196, !dbg !48
  %317 = add i32 %301, %196, !dbg !48
  %318 = add i32 %302, %196, !dbg !48
  %319 = add i32 %303, %196, !dbg !48
  %320 = add i32 %304, %196, !dbg !48
  %321 = add i32 %305, %196, !dbg !48
  %322 = add i32 %306, %196, !dbg !48
  %323 = add i32 %307, %196, !dbg !48
  %324 = add i32 %308, %196, !dbg !48
  %325 = add i32 %309, %196, !dbg !48
  %326 = add i32 %310, %196, !dbg !48
  %327 = mul i32 %178, 984064, !dbg !49
  %328 = mul i32 %177, 984064, !dbg !49
  %329 = mul i32 %175, 984064, !dbg !49
  %330 = mul i32 %173, 984064, !dbg !49
  %331 = mul i32 %171, 984064, !dbg !49
  %332 = mul i32 %169, 984064, !dbg !49
  %333 = mul i32 %167, 984064, !dbg !49
  %334 = mul i32 %165, 984064, !dbg !49
  %335 = mul i32 %163, 984064, !dbg !49
  %336 = mul i32 %161, 984064, !dbg !49
  %337 = mul i32 %159, 984064, !dbg !49
  %338 = mul i32 %157, 984064, !dbg !49
  %339 = mul i32 %155, 984064, !dbg !49
  %340 = mul i32 %153, 984064, !dbg !49
  %341 = mul i32 %151, 984064, !dbg !49
  %342 = mul i32 %149, 984064, !dbg !49
  %343 = add i32 %311, %327, !dbg !50
  %344 = add i32 %312, %328, !dbg !50
  %345 = add i32 %313, %329, !dbg !50
  %346 = add i32 %314, %330, !dbg !50
  %347 = add i32 %315, %331, !dbg !50
  %348 = add i32 %316, %332, !dbg !50
  %349 = add i32 %317, %333, !dbg !50
  %350 = add i32 %318, %334, !dbg !50
  %351 = add i32 %319, %335, !dbg !50
  %352 = add i32 %320, %336, !dbg !50
  %353 = add i32 %321, %337, !dbg !50
  %354 = add i32 %322, %338, !dbg !50
  %355 = add i32 %323, %339, !dbg !50
  %356 = add i32 %324, %340, !dbg !50
  %357 = add i32 %325, %341, !dbg !50
  %358 = add i32 %326, %342, !dbg !50
  %359 = sext i32 %343 to i64, !dbg !51
  %360 = getelementptr float, ptr addrspace(1) %5, i64 %359, !dbg !51
  %361 = sext i32 %344 to i64, !dbg !51
  %362 = getelementptr float, ptr addrspace(1) %5, i64 %361, !dbg !51
  %363 = sext i32 %345 to i64, !dbg !51
  %364 = getelementptr float, ptr addrspace(1) %5, i64 %363, !dbg !51
  %365 = sext i32 %346 to i64, !dbg !51
  %366 = getelementptr float, ptr addrspace(1) %5, i64 %365, !dbg !51
  %367 = sext i32 %347 to i64, !dbg !51
  %368 = getelementptr float, ptr addrspace(1) %5, i64 %367, !dbg !51
  %369 = sext i32 %348 to i64, !dbg !51
  %370 = getelementptr float, ptr addrspace(1) %5, i64 %369, !dbg !51
  %371 = sext i32 %349 to i64, !dbg !51
  %372 = getelementptr float, ptr addrspace(1) %5, i64 %371, !dbg !51
  %373 = sext i32 %350 to i64, !dbg !51
  %374 = getelementptr float, ptr addrspace(1) %5, i64 %373, !dbg !51
  %375 = sext i32 %351 to i64, !dbg !51
  %376 = getelementptr float, ptr addrspace(1) %5, i64 %375, !dbg !51
  %377 = sext i32 %352 to i64, !dbg !51
  %378 = getelementptr float, ptr addrspace(1) %5, i64 %377, !dbg !51
  %379 = sext i32 %353 to i64, !dbg !51
  %380 = getelementptr float, ptr addrspace(1) %5, i64 %379, !dbg !51
  %381 = sext i32 %354 to i64, !dbg !51
  %382 = getelementptr float, ptr addrspace(1) %5, i64 %381, !dbg !51
  %383 = sext i32 %355 to i64, !dbg !51
  %384 = getelementptr float, ptr addrspace(1) %5, i64 %383, !dbg !51
  %385 = sext i32 %356 to i64, !dbg !51
  %386 = getelementptr float, ptr addrspace(1) %5, i64 %385, !dbg !51
  %387 = sext i32 %357 to i64, !dbg !51
  %388 = getelementptr float, ptr addrspace(1) %5, i64 %387, !dbg !51
  %389 = sext i32 %358 to i64, !dbg !51
  %390 = getelementptr float, ptr addrspace(1) %5, i64 %389, !dbg !51
  %391 = shl i32 %11, 10, !dbg !52
  %392 = and i32 %391, 3072, !dbg !52
  %393 = or disjoint i32 %392, %18, !dbg !52
  %394 = lshr exact i32 %392, 6, !dbg !52
  %395 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %394, !dbg !52
  %396 = getelementptr float, ptr addrspace(3) %395, i32 %393, !dbg !52
  %397 = bitcast float %249 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %397, i1 true) #4, !dbg !52
  %398 = or disjoint i32 %393, 256, !dbg !52
  %399 = lshr i32 %398, 8, !dbg !52
  %400 = getelementptr float, ptr addrspace(3) @global_smem, i32 %399, !dbg !52
  %401 = getelementptr float, ptr addrspace(3) %400, i32 %398, !dbg !52
  %402 = bitcast float %252 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %401, <1 x i32> %402, i1 true) #4, !dbg !52
  %403 = or disjoint i32 %393, 512, !dbg !52
  %404 = lshr i32 %403, 8, !dbg !52
  %405 = getelementptr float, ptr addrspace(3) @global_smem, i32 %404, !dbg !52
  %406 = getelementptr float, ptr addrspace(3) %405, i32 %403, !dbg !52
  %407 = bitcast float %255 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %407, i1 true) #4, !dbg !52
  %408 = or disjoint i32 %393, 768, !dbg !52
  %409 = lshr i32 %408, 8, !dbg !52
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !52
  %411 = getelementptr float, ptr addrspace(3) %410, i32 %408, !dbg !52
  %412 = bitcast float %258 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 true) #4, !dbg !52
  %413 = or disjoint i32 %393, 64, !dbg !52
  %414 = getelementptr float, ptr addrspace(3) %395, i32 %413, !dbg !52
  %415 = bitcast float %261 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %415, i1 true) #4, !dbg !52
  %416 = or disjoint i32 %393, 320, !dbg !52
  %417 = lshr i32 %416, 8, !dbg !52
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i32 %417, !dbg !52
  %419 = getelementptr float, ptr addrspace(3) %418, i32 %416, !dbg !52
  %420 = bitcast float %264 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %420, i1 true) #4, !dbg !52
  %421 = or disjoint i32 %393, 576, !dbg !52
  %422 = lshr i32 %421, 8, !dbg !52
  %423 = getelementptr float, ptr addrspace(3) @global_smem, i32 %422, !dbg !52
  %424 = getelementptr float, ptr addrspace(3) %423, i32 %421, !dbg !52
  %425 = bitcast float %267 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %425, i1 true) #4, !dbg !52
  %426 = or disjoint i32 %393, 832, !dbg !52
  %427 = lshr i32 %426, 8, !dbg !52
  %428 = getelementptr float, ptr addrspace(3) @global_smem, i32 %427, !dbg !52
  %429 = getelementptr float, ptr addrspace(3) %428, i32 %426, !dbg !52
  %430 = bitcast float %270 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %430, i1 true) #4, !dbg !52
  %431 = or disjoint i32 %393, 128, !dbg !52
  %432 = getelementptr float, ptr addrspace(3) %395, i32 %431, !dbg !52
  %433 = bitcast float %273 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %433, i1 true) #4, !dbg !52
  %434 = or disjoint i32 %393, 384, !dbg !52
  %435 = lshr i32 %434, 8, !dbg !52
  %436 = getelementptr float, ptr addrspace(3) @global_smem, i32 %435, !dbg !52
  %437 = getelementptr float, ptr addrspace(3) %436, i32 %434, !dbg !52
  %438 = bitcast float %276 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 true) #4, !dbg !52
  %439 = or disjoint i32 %393, 640, !dbg !52
  %440 = lshr i32 %439, 8, !dbg !52
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %440, !dbg !52
  %442 = getelementptr float, ptr addrspace(3) %441, i32 %439, !dbg !52
  %443 = bitcast float %279 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %443, i1 true) #4, !dbg !52
  %444 = or disjoint i32 %393, 896, !dbg !52
  %445 = lshr i32 %444, 8, !dbg !52
  %446 = getelementptr float, ptr addrspace(3) @global_smem, i32 %445, !dbg !52
  %447 = getelementptr float, ptr addrspace(3) %446, i32 %444, !dbg !52
  %448 = bitcast float %282 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %448, i1 true) #4, !dbg !52
  %449 = or disjoint i32 %393, 192, !dbg !52
  %450 = getelementptr float, ptr addrspace(3) %395, i32 %449, !dbg !52
  %451 = bitcast float %285 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %451, i1 true) #4, !dbg !52
  %452 = or disjoint i32 %393, 448, !dbg !52
  %453 = lshr i32 %452, 8, !dbg !52
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i32 %453, !dbg !52
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %452, !dbg !52
  %456 = bitcast float %288 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %456, i1 true) #4, !dbg !52
  %457 = or disjoint i32 %393, 704, !dbg !52
  %458 = lshr i32 %457, 8, !dbg !52
  %459 = getelementptr float, ptr addrspace(3) @global_smem, i32 %458, !dbg !52
  %460 = getelementptr float, ptr addrspace(3) %459, i32 %457, !dbg !52
  %461 = bitcast float %291 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %461, i1 true) #4, !dbg !52
  %462 = or disjoint i32 %393, 960, !dbg !52
  %463 = lshr i32 %462, 8, !dbg !52
  %464 = getelementptr float, ptr addrspace(3) @global_smem, i32 %463, !dbg !52
  %465 = getelementptr float, ptr addrspace(3) %464, i32 %462, !dbg !52
  %466 = bitcast float %294 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %466, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %467 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %195, !dbg !52
  %468 = load i32, ptr addrspace(3) %467, align 4, !dbg !52
  %469 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 1028, !dbg !52
  %470 = load i32, ptr addrspace(3) %469, align 4, !dbg !52
  %471 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 2056, !dbg !52
  %472 = load i32, ptr addrspace(3) %471, align 4, !dbg !52
  %473 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 3084, !dbg !52
  %474 = load i32, ptr addrspace(3) %473, align 4, !dbg !52
  %475 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 4112, !dbg !52
  %476 = load i32, ptr addrspace(3) %475, align 4, !dbg !52
  %477 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 5140, !dbg !52
  %478 = load i32, ptr addrspace(3) %477, align 4, !dbg !52
  %479 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 6168, !dbg !52
  %480 = load i32, ptr addrspace(3) %479, align 4, !dbg !52
  %481 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 7196, !dbg !52
  %482 = load i32, ptr addrspace(3) %481, align 4, !dbg !52
  %483 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 8224, !dbg !52
  %484 = load i32, ptr addrspace(3) %483, align 4, !dbg !52
  %485 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 9252, !dbg !52
  %486 = load i32, ptr addrspace(3) %485, align 4, !dbg !52
  %487 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 10280, !dbg !52
  %488 = load i32, ptr addrspace(3) %487, align 4, !dbg !52
  %489 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 11308, !dbg !52
  %490 = load i32, ptr addrspace(3) %489, align 4, !dbg !52
  %491 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 12336, !dbg !52
  %492 = load i32, ptr addrspace(3) %491, align 4, !dbg !52
  %493 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 13364, !dbg !52
  %494 = load i32, ptr addrspace(3) %493, align 4, !dbg !52
  %495 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 14392, !dbg !52
  %496 = load i32, ptr addrspace(3) %495, align 4, !dbg !52
  %497 = getelementptr inbounds i8, ptr addrspace(3) %467, i32 15420, !dbg !52
  %498 = load i32, ptr addrspace(3) %497, align 4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %468, ptr addrspace(1) %360, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %470, ptr addrspace(1) %362, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %472, ptr addrspace(1) %364, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %474, ptr addrspace(1) %366, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %476, ptr addrspace(1) %368, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %478, ptr addrspace(1) %370, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %480, ptr addrspace(1) %372, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %482, ptr addrspace(1) %374, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %484, ptr addrspace(1) %376, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %486, ptr addrspace(1) %378, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %488, ptr addrspace(1) %380, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %490, ptr addrspace(1) %382, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %492, ptr addrspace(1) %384, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %494, ptr addrspace(1) %386, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %496, ptr addrspace(1) %388, i1 %197) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %498, ptr addrspace(1) %390, i1 %197) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5jdomezwnv64qgogcgoahotpdhvihepeecbwn4xc4uhjngst4z7.py", directory: "inductor_cache/5j")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 51, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 56, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 48, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 49, column: 34, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 46, scope: !7)
!50 = !DILocation(line: 49, column: 39, scope: !7)
!51 = !DILocation(line: 49, column: 25, scope: !7)
!52 = !DILocation(line: 49, column: 58, scope: !7)
!53 = !DILocation(line: 49, column: 4, scope: !7)
