; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 256, !dbg !14
  %19 = srem i32 %18, 320, !dbg !15
  %20 = mul i32 %18, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = srem i32 %17, 256, !dbg !16
  %22 = sdiv i32 %16, 81920, !dbg !17
  %23 = icmp slt i32 %19, 64, !dbg !18
  %24 = shl nsw i32 %.decomposed, 6, !dbg !19
  %25 = shl nsw i32 %21, 6, !dbg !19
  %26 = shl nsw i32 %22, 14, !dbg !20
  %27 = add nsw i32 %19, %26, !dbg !21
  %28 = add nsw i32 %27, %24, !dbg !22
  %29 = add nsw i32 %27, %25, !dbg !22
  %30 = sext i32 %28 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %23, i32 0, i1 %23) #3, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %23, i32 0, i1 %23) #3, !dbg !24
  %36 = add nsw i32 %19, -64, !dbg !25
  %37 = icmp ult i32 %36, 128, !dbg !25
  %38 = shl nsw i32 %.decomposed, 7, !dbg !26
  %39 = shl nsw i32 %21, 7, !dbg !26
  %40 = shl nsw i32 %22, 15, !dbg !27
  %41 = add nsw i32 %38, %40, !dbg !28
  %42 = add nsw i32 %40, %39, !dbg !28
  %43 = add nsw i32 %41, %36, !dbg !29
  %44 = add nsw i32 %42, %36, !dbg !29
  %45 = sext i32 %43 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !30
  %47 = sext i32 %44 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %37, i32 0, i1 %37) #3, !dbg !31
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %37, i32 0, i1 %37) #3, !dbg !31
  %51 = icmp sgt i32 %19, 191, !dbg !32
  %52 = add nsw i32 %19, -192, !dbg !33
  %53 = add nsw i32 %41, %52, !dbg !34
  %54 = add nsw i32 %42, %52, !dbg !34
  %55 = sext i32 %53 to i64, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !35
  %57 = sext i32 %54 to i64, !dbg !35
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %51, i32 0, i1 %51) #3, !dbg !36
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %51, i32 0, i1 %51) #3, !dbg !36
  %61 = sext i32 %52 to i64, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %51, i32 0, i1 %51) #3, !dbg !38
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %51, i32 0, i1 %51) #3, !dbg !38
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !39
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %51, i32 0, i1 %51) #3, !dbg !40
  %67 = bitcast i32 %66 to float, !dbg !40
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %51, i32 0, i1 %51) #3, !dbg !40
  %69 = bitcast i32 %68 to float, !dbg !40
  %70 = fadd float %67, 0x3EE4F8B580000000, !dbg !41
  %71 = fadd float %69, 0x3EE4F8B580000000, !dbg !41
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %72, 0, !dbg !42
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %73, 0, !dbg !42
  br i1 %.not.i, label %79, label %74, !dbg !42

74:                                               ; preds = %10
  br i1 %.not1.i, label %77, label %75, !dbg !42

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

79:                                               ; preds = %10
  br i1 %.not1.i, label %82, label %80, !dbg !42

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !42
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %84, 0, !dbg !42
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i4 = icmp eq i32 %85, 0, !dbg !42
  br i1 %.not.i1, label %91, label %86, !dbg !42

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !42

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %94, label %92, !dbg !42

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %87, %89, %92, %94
  %.0.i3 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !42
  %96 = bitcast i32 %60 to float, !dbg !36
  %97 = bitcast i32 %64 to float, !dbg !38
  %98 = fsub float %96, %97, !dbg !43
  %99 = bitcast i32 %59 to float, !dbg !36
  %100 = bitcast i32 %63 to float, !dbg !38
  %101 = fsub float %99, %100, !dbg !43
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !44
  %104 = fmul float %101, %102, !dbg !45
  %105 = fmul float %98, %103, !dbg !45
  %106 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !46
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %51, i32 0, i1 %51) #3, !dbg !47
  %108 = bitcast i32 %107 to float, !dbg !47
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %51, i32 0, i1 %51) #3, !dbg !47
  %110 = bitcast i32 %109 to float, !dbg !47
  %111 = fmul float %104, %108, !dbg !48
  %112 = fmul float %105, %110, !dbg !48
  %113 = getelementptr float, ptr addrspace(1) %6, i64 %61, !dbg !49
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %51, i32 0, i1 %51) #3, !dbg !50
  %115 = bitcast i32 %114 to float, !dbg !50
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %51, i32 0, i1 %51) #3, !dbg !50
  %117 = bitcast i32 %116 to float, !dbg !50
  %118 = fadd float %111, %115, !dbg !51
  %119 = fadd float %112, %117, !dbg !51
  %120 = getelementptr float, ptr addrspace(1) %7, i64 %55, !dbg !52
  %121 = getelementptr float, ptr addrspace(1) %7, i64 %57, !dbg !52
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %51, i32 0, i1 %51) #3, !dbg !53
  %123 = bitcast i32 %122 to float, !dbg !53
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %51, i32 0, i1 %51) #3, !dbg !53
  %125 = bitcast i32 %124 to float, !dbg !53
  %126 = fadd float %118, %123, !dbg !54
  %127 = fadd float %119, %125, !dbg !54
  %128 = sext i32 %16 to i64, !dbg !55
  %129 = getelementptr float, ptr addrspace(1) %8, i64 %128, !dbg !55
  %130 = bitcast float %126 to i32, !dbg !56
  %131 = select i1 %51, i32 %130, i32 0, !dbg !57
  %132 = select i1 %37, i32 %49, i32 %131, !dbg !58
  %133 = select i1 %23, i32 %34, i32 %132, !dbg !59
  %134 = bitcast float %127 to i32, !dbg !56
  %135 = select i1 %51, i32 %134, i32 0, !dbg !57
  %136 = select i1 %37, i32 %50, i32 %135, !dbg !58
  %137 = select i1 %23, i32 %35, i32 %136, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %137, ptr addrspace(1) %129, i1 true) #3, !dbg !56
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxqfddqnja7ltsw4gem4qynpptfgmahbnhmyaosu3bo5moy2udxh.py", directory: "inductor_cache/xq")
!4 = !{ptr @triton_poi_fused_cat_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_15", linkageName: "triton_poi_fused_cat_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 33, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 50, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 56, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 35, scope: !7)
!27 = !DILocation(line: 38, column: 46, scope: !7)
!28 = !DILocation(line: 38, column: 40, scope: !7)
!29 = !DILocation(line: 38, column: 52, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 66, scope: !7)
!32 = !DILocation(line: 39, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 61, scope: !7)
!34 = !DILocation(line: 42, column: 52, scope: !7)
!35 = !DILocation(line: 42, column: 31, scope: !7)
!36 = !DILocation(line: 42, column: 67, scope: !7)
!37 = !DILocation(line: 43, column: 31, scope: !7)
!38 = !DILocation(line: 43, column: 45, scope: !7)
!39 = !DILocation(line: 45, column: 31, scope: !7)
!40 = !DILocation(line: 45, column: 45, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 27, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 31, scope: !7)
!47 = !DILocation(line: 54, column: 45, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 31, scope: !7)
!50 = !DILocation(line: 56, column: 45, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 31, scope: !7)
!53 = !DILocation(line: 58, column: 67, scope: !7)
!54 = !DILocation(line: 59, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 25, scope: !7)
!56 = !DILocation(line: 64, column: 37, scope: !7)
!57 = !DILocation(line: 61, column: 35, scope: !7)
!58 = !DILocation(line: 62, column: 34, scope: !7)
!59 = !DILocation(line: 63, column: 33, scope: !7)
!60 = !DILocation(line: 64, column: 4, scope: !7)
