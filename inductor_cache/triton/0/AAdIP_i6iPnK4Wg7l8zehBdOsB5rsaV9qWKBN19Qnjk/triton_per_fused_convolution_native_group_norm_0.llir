; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 64, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = shl i32 %10, 1, !dbg !12
  %14 = and i32 %13, 126, !dbg !12
  %15 = and i32 %10, 63, !dbg !12
  %16 = or disjoint i32 %15, 64, !dbg !12
  %17 = srem i32 %8, 16, !dbg !13
  %18 = shl i32 %8, 7, !dbg !14
  %19 = or disjoint i32 %18, %14, !dbg !15
  %20 = sext i32 %19 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !17
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !17
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !17
  %.idx = shl nuw nsw i32 %14, 3, !dbg !17
  %25 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !17
  %26 = insertelement <1 x i32> poison, i32 %23, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %25, <1 x i32> %26, i1 true) #5, !dbg !17
  %27 = shl nuw nsw i32 %14, 1, !dbg !17
  %28 = or disjoint i32 %27, 2, !dbg !17
  %29 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %28, !dbg !17
  %30 = insertelement <1 x i32> poison, i32 %24, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %30, i1 true) #5, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !17
  %.idx1 = shl nuw nsw i32 %15, 3, !dbg !17
  %31 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !17
  %32 = load float, ptr addrspace(3) %31, align 8, !dbg !17
  %.idx2 = shl nuw nsw i32 %16, 3, !dbg !17
  %33 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !17
  %34 = load float, ptr addrspace(3) %33, align 8, !dbg !17
  %35 = shl nsw i32 %17, 1, !dbg !18
  %36 = or disjoint i32 %35, 1, !dbg !19
  %37 = sext i32 %35 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !20
  %39 = sext i32 %36 to i64, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %44 = bitcast i32 %43 to float, !dbg !21
  %45 = fadd float %32, %42, !dbg !22
  %46 = fadd float %34, %44, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %47 = fadd float %45, %46, !dbg !27
  %48 = select i1 %9, float %47, float 0.000000e+00, !dbg !27
  %49 = bitcast float %48 to i32, !dbg !23
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 16, i32 31), !dbg !23
  %51 = bitcast i32 %50 to float, !dbg !23
  %52 = fadd float %48, %51, !dbg !27
  %53 = bitcast float %52 to i32, !dbg !23
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = fadd float %52, %55, !dbg !27
  %57 = bitcast float %56 to i32, !dbg !23
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !23
  %59 = bitcast i32 %58 to float, !dbg !23
  %60 = fadd float %56, %59, !dbg !27
  %61 = bitcast float %60 to i32, !dbg !23
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 2, i32 31), !dbg !23
  %63 = bitcast i32 %62 to float, !dbg !23
  %64 = fadd float %60, %63, !dbg !27
  %65 = bitcast float %64 to i32, !dbg !23
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !23
  %67 = bitcast i32 %66 to float, !dbg !23
  %68 = fadd float %64, %67, !dbg !27
  %69 = icmp eq i32 %11, 0, !dbg !23
  %70 = and i32 %12, 1, !dbg !23
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !23
  %72 = bitcast float %68 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 %69) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %73 = icmp slt i32 %10, 2, !dbg !23
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !23
  %75 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %74, i1 %73) #5, !dbg !23
  %76 = bitcast i32 %75 to float, !dbg !23
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !23
  %78 = bitcast i32 %77 to float, !dbg !23
  %79 = fadd float %76, %78, !dbg !27
  %80 = and i32 %10, 1, !dbg !23
  %81 = icmp eq i32 %80, 0, !dbg !23
  %82 = and i1 %73, %81, !dbg !23
  %83 = bitcast float %79 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %83, i1 %82) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %84 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 1.280000e+02) #5, !dbg !29
  %86 = fsub float %45, %85, !dbg !30
  %87 = fsub float %46, %85, !dbg !30
  %88 = fmul float %86, %86, !dbg !31
  %89 = fmul float %87, %87, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %90 = fadd float %88, %89, !dbg !34
  %91 = select i1 %9, float %90, float 0.000000e+00, !dbg !34
  %92 = bitcast float %91 to i32, !dbg !32
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !32
  %94 = bitcast i32 %93 to float, !dbg !32
  %95 = fadd float %91, %94, !dbg !34
  %96 = bitcast float %95 to i32, !dbg !32
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !32
  %98 = bitcast i32 %97 to float, !dbg !32
  %99 = fadd float %95, %98, !dbg !34
  %100 = bitcast float %99 to i32, !dbg !32
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !32
  %102 = bitcast i32 %101 to float, !dbg !32
  %103 = fadd float %99, %102, !dbg !34
  %104 = bitcast float %103 to i32, !dbg !32
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !32
  %106 = bitcast i32 %105 to float, !dbg !32
  %107 = fadd float %103, %106, !dbg !34
  %108 = bitcast float %107 to i32, !dbg !32
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !32
  %110 = bitcast i32 %109 to float, !dbg !32
  %111 = fadd float %107, %110, !dbg !34
  %112 = bitcast float %111 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %112, i1 %69) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %113 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %74, i1 %73) #5, !dbg !32
  %114 = bitcast i32 %113 to float, !dbg !32
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = fadd float %114, %116, !dbg !34
  %118 = bitcast float %117 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %118, i1 %82) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %119 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float 1.280000e+02) #5, !dbg !35
  %121 = fadd float %120, 0x3EE4F8B580000000, !dbg !36
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %122, 0, !dbg !37
  br i1 %.not.i, label %125, label %123, !dbg !37

123:                                              ; preds = %7
  %124 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %121), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

125:                                              ; preds = %7
  %126 = tail call float @llvm.nvvm.rsqrt.approx.f(float %121), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %123, %125
  %.0.i = phi float [ %124, %123 ], [ %126, %125 ], !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !38
  %128 = bitcast float %45 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #5, !dbg !38
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !38
  %130 = bitcast float %46 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !38
  %.extract = load i32, ptr addrspace(3) %131, align 8, !dbg !38
  %132 = getelementptr inbounds i8, ptr addrspace(3) %131, i32 4, !dbg !38
  %.extract4 = load i32, ptr addrspace(3) %132, align 4, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %21, i1 %9) #5, !dbg !38
  %133 = sext i32 %8 to i64, !dbg !39
  %134 = getelementptr float, ptr addrspace(1) %4, i64 %133, !dbg !39
  %135 = icmp eq i32 %15, 0, !dbg !40
  %136 = bitcast float %.0.i to i32, !dbg !40
  %137 = and i1 %135, %9, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %134, i1 %137) #5, !dbg !40
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !41
  %139 = bitcast float %85 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %139, ptr addrspace(1) %138, i1 %137) #5, !dbg !42
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %133, !dbg !43
  %141 = bitcast float %119 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %140, i1 %137) #5, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cemfxvutksyd2efpo5qschmjbras5lkuotdig3djlwccl4hkxxi6.py", directory: "inductor_cache/em")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_0", linkageName: "triton_per_fused_convolution_native_group_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 33, column: 43, scope: !7)
!15 = !DILocation(line: 33, column: 39, scope: !7)
!16 = !DILocation(line: 33, column: 34, scope: !7)
!17 = !DILocation(line: 33, column: 48, scope: !7)
!18 = !DILocation(line: 34, column: 37, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 42, scope: !7)
!22 = !DILocation(line: 35, column: 18, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 40, column: 24, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !26)
!28 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 19, scope: !7)
!31 = !DILocation(line: 45, column: 20, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !33)
!33 = !DILocation(line: 48, column: 26, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !33)
!35 = !DILocation(line: 50, column: 20, scope: !7)
!36 = !DILocation(line: 52, column: 20, scope: !7)
!37 = !DILocation(line: 53, column: 28, scope: !7)
!38 = !DILocation(line: 54, column: 48, scope: !7)
!39 = !DILocation(line: 55, column: 25, scope: !7)
!40 = !DILocation(line: 55, column: 37, scope: !7)
!41 = !DILocation(line: 56, column: 25, scope: !7)
!42 = !DILocation(line: 56, column: 37, scope: !7)
!43 = !DILocation(line: 57, column: 25, scope: !7)
!44 = !DILocation(line: 57, column: 37, scope: !7)
!45 = !DILocation(line: 57, column: 4, scope: !7)
