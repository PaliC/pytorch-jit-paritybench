; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr4 = freeze i32 %5, !dbg !11
  %6 = shl i32 %.fr4, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 60, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 128, !dbg !14
  %12 = sdiv i32 %10, 16, !dbg !15
  %13 = mul i32 %12, 16, !dbg !16
  %.decomposed = sub i32 %10, %13, !dbg !16
  %14 = shl i32 %12, 11, !dbg !17
  %.mask = and i32 %7, 112
  %15 = add nsw i32 %.decomposed, %.mask
  %16 = add i32 %15, %14
  br i1 %11, label %.split.us, label %.split

.split.us:                                        ; preds = %4, %.split.us
  %indvars.iv7 = phi i64 [ %indvars.iv.next8, %.split.us ], [ 0, %4 ]
  %17 = phi <4 x float> [ %35, %.split.us ], [ splat (float 0xFFF0000000000000), %4 ]
  %indvars.iv7.tr = trunc i64 %indvars.iv7 to i32, !dbg !18
  %18 = shl nuw nsw i32 %indvars.iv7.tr, 4, !dbg !18
  %19 = add i32 %16, %18, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !20
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !20
  %27 = fcmp uno <4 x float> %17, zeroinitializer, !dbg !21
  %28 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !20
  %29 = insertelement <4 x i32> %28, i32 %24, i64 1, !dbg !20
  %30 = insertelement <4 x i32> %29, i32 %25, i64 2, !dbg !20
  %31 = insertelement <4 x i32> %30, i32 %26, i64 3, !dbg !20
  %32 = bitcast <4 x i32> %31 to <4 x float>, !dbg !20
  %33 = fcmp ogt <4 x float> %17, %32, !dbg !25
  %34 = or <4 x i1> %27, %33, !dbg !26
  %35 = select <4 x i1> %34, <4 x float> %17, <4 x float> %32, !dbg !27
  %indvars.iv.next8 = add nuw nsw i64 %indvars.iv7, 8, !dbg !28
  %36 = icmp samesign ult i64 %indvars.iv7, 120, !dbg !28
  br i1 %36, label %.split.us, label %.split2.us, !dbg !28

.split:                                           ; preds = %4
  %37 = sext i32 %16 to i64, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !19
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %40 = or disjoint i32 %16, 128, !dbg !18
  %41 = sext i32 %40 to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !19
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %44 = or disjoint i32 %16, 256, !dbg !18
  %45 = sext i32 %44 to i64, !dbg !19
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !19
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %48 = or disjoint i32 %16, 384, !dbg !18
  %49 = sext i32 %48 to i64, !dbg !19
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !19
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %52 = or disjoint i32 %16, 512, !dbg !18
  %53 = sext i32 %52 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !19
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %56 = or disjoint i32 %16, 640, !dbg !18
  %57 = sext i32 %56 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !19
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %60 = or disjoint i32 %16, 768, !dbg !18
  %61 = sext i32 %60 to i64, !dbg !19
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !19
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %64 = or disjoint i32 %16, 896, !dbg !18
  %65 = sext i32 %64 to i64, !dbg !19
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !19
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %68 = or disjoint i32 %16, 1024, !dbg !18
  %69 = sext i32 %68 to i64, !dbg !19
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !19
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %72 = or disjoint i32 %16, 1152, !dbg !18
  %73 = sext i32 %72 to i64, !dbg !19
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !19
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %76 = or disjoint i32 %16, 1280, !dbg !18
  %77 = sext i32 %76 to i64, !dbg !19
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !19
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %80 = or disjoint i32 %16, 1408, !dbg !18
  %81 = sext i32 %80 to i64, !dbg !19
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !19
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %84 = or disjoint i32 %16, 1536, !dbg !18
  %85 = sext i32 %84 to i64, !dbg !19
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !19
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %88 = or disjoint i32 %16, 1664, !dbg !18
  %89 = sext i32 %88 to i64, !dbg !19
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !19
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %92 = or disjoint i32 %16, 1792, !dbg !18
  %93 = sext i32 %92 to i64, !dbg !19
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !19
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  %96 = or disjoint i32 %16, 1920, !dbg !18
  %97 = sext i32 %96 to i64, !dbg !19
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !19
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false, i32 0, i1 false) #3, !dbg !20
  br label %.split2.us, !dbg !12

.split2.us:                                       ; preds = %.split.us, %.split
  %100 = phi <4 x float> [ splat (float 0xFFF0000000000000), %.split ], [ %35, %.split.us ], !dbg !12
  %101 = lshr i32 %7, 5, !dbg !12
  %102 = and i32 %7, 63, !dbg !12
  %103 = or disjoint i32 %6, %102, !dbg !13
  %104 = icmp slt i32 %103, 128, !dbg !14
  %105 = and i32 %7, 16, !dbg !12
  %106 = extractelement <4 x float> %100, i64 0, !dbg !29
  %107 = bitcast float %106 to i32, !dbg !32
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !32
  %109 = fcmp uno float %106, 0.000000e+00, !dbg !29
  %110 = extractelement <4 x float> %100, i64 1, !dbg !29
  %111 = bitcast float %110 to i32, !dbg !32
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 16, i32 31), !dbg !32
  %113 = fcmp uno float %110, 0.000000e+00, !dbg !29
  %114 = extractelement <4 x float> %100, i64 2, !dbg !29
  %115 = bitcast float %114 to i32, !dbg !32
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 16, i32 31), !dbg !32
  %117 = fcmp uno float %114, 0.000000e+00, !dbg !29
  %118 = extractelement <4 x float> %100, i64 3, !dbg !29
  %119 = bitcast float %118 to i32, !dbg !32
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 16, i32 31), !dbg !32
  %121 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !32
  %122 = insertelement <4 x i32> %121, i32 %112, i64 1, !dbg !32
  %123 = insertelement <4 x i32> %122, i32 %116, i64 2, !dbg !32
  %124 = insertelement <4 x i32> %123, i32 %120, i64 3, !dbg !32
  %125 = bitcast <4 x i32> %124 to <4 x float>, !dbg !32
  %126 = fcmp ogt <4 x float> %100, %125, !dbg !33
  %127 = extractelement <4 x i1> %126, i64 0, !dbg !34
  %128 = or i1 %109, %127, !dbg !34
  %129 = extractelement <4 x i1> %126, i64 1, !dbg !34
  %130 = or i1 %113, %129, !dbg !34
  %131 = extractelement <4 x i1> %126, i64 2, !dbg !34
  %132 = or i1 %117, %131, !dbg !34
  %133 = fcmp uno float %118, 0.000000e+00, !dbg !29
  %134 = extractelement <4 x i1> %126, i64 3, !dbg !34
  %135 = or i1 %133, %134, !dbg !34
  %136 = icmp eq i32 %105, 0, !dbg !32
  %137 = and i32 %101, 3, !dbg !32
  %138 = shl nuw nsw i32 %9, 2, !dbg !32
  %139 = or disjoint i32 %138, %137, !dbg !32
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !32
  %141 = select i1 %128, i32 %107, i32 %108, !dbg !35
  %142 = insertelement <1 x i32> poison, i32 %141, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %142, i1 %136) #3, !dbg !32
  %143 = or disjoint i32 %138, 4, !dbg !32
  %144 = or disjoint i32 %143, %137, !dbg !32
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !32
  %146 = select i1 %130, i32 %111, i32 %112, !dbg !35
  %147 = insertelement <1 x i32> poison, i32 %146, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %147, i1 %136) #3, !dbg !32
  %148 = or disjoint i32 %138, 8, !dbg !32
  %149 = or disjoint i32 %148, %137, !dbg !32
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !32
  %151 = select i1 %132, i32 %115, i32 %116, !dbg !35
  %152 = insertelement <1 x i32> poison, i32 %151, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %152, i1 %136) #3, !dbg !32
  %153 = or disjoint i32 %138, 12, !dbg !32
  %154 = or disjoint i32 %153, %137, !dbg !32
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !32
  %156 = select i1 %135, i32 %119, i32 %120, !dbg !35
  %157 = insertelement <1 x i32> poison, i32 %156, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %157, i1 %136) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %158 = icmp slt i32 %7, 256, !dbg !32
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !32
  %160 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %159, i1 %158) #3, !dbg !32
  %161 = bitcast i32 %160 to float, !dbg !32
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !32
  %163 = bitcast i32 %162 to float, !dbg !32
  %164 = fcmp ogt float %161, %163, !dbg !33
  %165 = fcmp uno float %161, 0.000000e+00, !dbg !29
  %166 = or i1 %165, %164, !dbg !34
  %167 = select i1 %166, float %161, float %163, !dbg !35
  %168 = bitcast float %167 to i32, !dbg !32
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 1, i32 31), !dbg !32
  %170 = bitcast i32 %169 to float, !dbg !32
  %171 = fcmp ogt float %167, %170, !dbg !33
  %172 = fcmp uno float %167, 0.000000e+00, !dbg !29
  %173 = or i1 %171, %172, !dbg !34
  %174 = and i32 %7, 3, !dbg !32
  %175 = icmp eq i32 %174, 0, !dbg !32
  %176 = and i1 %158, %175, !dbg !32
  %177 = select i1 %173, i32 %168, i32 %169, !dbg !35
  %178 = insertelement <1 x i32> poison, i32 %177, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %178, i1 %176) #3, !dbg !32
  %179 = getelementptr i8, ptr addrspace(3) %159, i32 512, !dbg !32
  %180 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %179, i1 %158) #3, !dbg !32
  %181 = bitcast i32 %180 to float, !dbg !32
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !32
  %183 = bitcast i32 %182 to float, !dbg !32
  %184 = fcmp ogt float %181, %183, !dbg !33
  %185 = fcmp uno float %181, 0.000000e+00, !dbg !29
  %186 = or i1 %185, %184, !dbg !34
  %187 = select i1 %186, float %181, float %183, !dbg !35
  %188 = bitcast float %187 to i32, !dbg !32
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !32
  %190 = bitcast i32 %189 to float, !dbg !32
  %191 = fcmp ogt float %187, %190, !dbg !33
  %192 = fcmp uno float %187, 0.000000e+00, !dbg !29
  %193 = or i1 %191, %192, !dbg !34
  %194 = select i1 %193, i32 %188, i32 %189, !dbg !35
  %195 = insertelement <1 x i32> poison, i32 %194, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %195, i1 %176) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !32
  %197 = load i32, ptr addrspace(3) %196, align 16, !dbg !32
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !32
  %199 = load i32, ptr addrspace(3) %198, align 16, !dbg !32
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !32
  %201 = load i32, ptr addrspace(3) %200, align 16, !dbg !32
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !32
  %203 = load i32, ptr addrspace(3) %202, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !36
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %204, i32 %197, i32 %199, i32 %201, i32 %203, i1 true) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %102, !dbg !36
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !36
  %207 = sext i32 %103 to i64, !dbg !37
  %208 = getelementptr float, ptr addrspace(1) %1, i64 %207, !dbg !37
  %209 = and i32 %7, 64, !dbg !38
  %210 = icmp eq i32 %209, 0, !dbg !38
  %211 = and i1 %210, %104, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %206, ptr addrspace(1) %208, i1 %211) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpvv6gv73c75fw2wwem7xlke5uhkhydcxhyjf5xdd7zhwad443bq.py", directory: "inductor_cache/pv")
!4 = !{ptr @triton_red_fused_4, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_4", linkageName: "triton_red_fused_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 52, scope: !7)
!18 = !DILocation(line: 34, column: 47, scope: !7)
!19 = !DILocation(line: 34, column: 34, scope: !7)
!20 = !DILocation(line: 34, column: 57, scope: !7)
!21 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 36, column: 45, scope: !7)
!25 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 30, column: 36, scope: !7)
!29 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!31 = !DILocation(line: 38, column: 38, scope: !7)
!32 = !DILocation(line: 131, column: 29, scope: !22, inlinedAt: !31)
!33 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !31)
!34 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !31)
!35 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !31)
!36 = !DILocation(line: 38, column: 41, scope: !7)
!37 = !DILocation(line: 39, column: 25, scope: !7)
!38 = !DILocation(line: 39, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 4, scope: !7)
