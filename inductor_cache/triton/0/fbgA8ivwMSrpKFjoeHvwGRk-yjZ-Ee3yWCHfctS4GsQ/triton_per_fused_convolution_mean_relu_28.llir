; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_convolution_mean_relu_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 24, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 4000, !dbg !14
  %16 = icmp slt i32 %14, 4000, !dbg !14
  %17 = lshr i32 %8, 5, !dbg !15
  %18 = lshr i32 %8, 3, !dbg !15
  %19 = and i32 %18, 15, !dbg !15
  %20 = icmp samesign ult i32 %19, 9, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %21 = sdiv i32 %.frozen, 1000, !dbg !17
  %22 = mul i32 %21, 1000, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %23 = mul nuw nsw i32 %19, 1000, !dbg !19
  %24 = add nsw i32 %.decomposed, %23, !dbg !20
  %25 = mul i32 %21, 9000, !dbg !21
  %26 = add i32 %24, %25, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %29 = and i1 %20, %15, !dbg !24
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !25
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !25
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !25
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !25
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !25
  %35 = sext i32 %.decomposed to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !26
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %15) #3, !dbg !27
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !27
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !27
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !27
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !27
  %42 = insertelement <4 x i32> poison, i32 %34, i64 0, !dbg !25
  %43 = insertelement <4 x i32> %42, i32 %33, i64 1, !dbg !25
  %44 = insertelement <4 x i32> %43, i32 %32, i64 2, !dbg !25
  %45 = insertelement <4 x i32> %44, i32 %31, i64 3, !dbg !25
  %46 = bitcast <4 x i32> %45 to <4 x float>, !dbg !25
  %47 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !27
  %48 = insertelement <4 x i32> %47, i32 %40, i64 1, !dbg !27
  %49 = insertelement <4 x i32> %48, i32 %39, i64 2, !dbg !27
  %50 = insertelement <4 x i32> %49, i32 %38, i64 3, !dbg !27
  %51 = bitcast <4 x i32> %50 to <4 x float>, !dbg !27
  %52 = fadd <4 x float> %46, %51, !dbg !28
  %53 = fcmp olt <4 x float> %52, zeroinitializer, !dbg !29
  %54 = extractelement <4 x i1> %53, i64 3, !dbg !33
  %55 = extractelement <4 x float> %52, i64 3, !dbg !33
  %56 = select i1 %54, float 0.000000e+00, float %55, !dbg !33
  %57 = extractelement <4 x i1> %53, i64 2, !dbg !33
  %58 = extractelement <4 x float> %52, i64 2, !dbg !33
  %59 = select i1 %57, float 0.000000e+00, float %58, !dbg !33
  %60 = extractelement <4 x i1> %53, i64 1, !dbg !33
  %61 = extractelement <4 x float> %52, i64 1, !dbg !33
  %62 = select i1 %60, float 0.000000e+00, float %61, !dbg !33
  %63 = extractelement <4 x i1> %53, i64 0, !dbg !33
  %64 = extractelement <4 x float> %52, i64 0, !dbg !33
  %65 = select i1 %63, float 0.000000e+00, float %64, !dbg !33
  %66 = select i1 %29, float %56, float 0.000000e+00, !dbg !34
  %67 = select i1 %29, float %59, float 0.000000e+00, !dbg !34
  %68 = select i1 %29, float %62, float 0.000000e+00, !dbg !34
  %69 = select i1 %29, float %65, float 0.000000e+00, !dbg !34
  %70 = bitcast float %66 to i32, !dbg !35
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !35
  %72 = bitcast i32 %71 to float, !dbg !35
  %73 = fadd float %66, %72, !dbg !39
  %74 = bitcast float %73 to i32, !dbg !35
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !35
  %76 = bitcast i32 %75 to float, !dbg !35
  %77 = fadd float %73, %76, !dbg !39
  %78 = bitcast float %67 to i32, !dbg !35
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !35
  %80 = bitcast i32 %79 to float, !dbg !35
  %81 = fadd float %67, %80, !dbg !39
  %82 = bitcast float %81 to i32, !dbg !35
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !35
  %84 = bitcast i32 %83 to float, !dbg !35
  %85 = fadd float %81, %84, !dbg !39
  %86 = bitcast float %68 to i32, !dbg !35
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !35
  %88 = bitcast i32 %87 to float, !dbg !35
  %89 = fadd float %68, %88, !dbg !39
  %90 = bitcast float %89 to i32, !dbg !35
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !35
  %92 = bitcast i32 %91 to float, !dbg !35
  %93 = fadd float %89, %92, !dbg !39
  %94 = bitcast float %69 to i32, !dbg !35
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !35
  %96 = bitcast i32 %95 to float, !dbg !35
  %97 = fadd float %69, %96, !dbg !39
  %98 = bitcast float %97 to i32, !dbg !35
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !35
  %100 = bitcast i32 %99 to float, !dbg !35
  %101 = fadd float %97, %100, !dbg !39
  %102 = icmp eq i32 %9, 0, !dbg !35
  %103 = and i32 %17, 3, !dbg !35
  %104 = shl nuw nsw i32 %11, 2, !dbg !35
  %105 = or disjoint i32 %104, %103, !dbg !35
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !35
  %107 = bitcast float %77 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 %102) #3, !dbg !35
  %108 = or disjoint i32 %104, 4, !dbg !35
  %109 = or disjoint i32 %108, %103, !dbg !35
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !35
  %111 = bitcast float %85 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 %102) #3, !dbg !35
  %112 = or disjoint i32 %104, 8, !dbg !35
  %113 = or disjoint i32 %112, %103, !dbg !35
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !35
  %115 = bitcast float %93 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %102) #3, !dbg !35
  %116 = or disjoint i32 %104, 12, !dbg !35
  %117 = or disjoint i32 %116, %103, !dbg !35
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !35
  %119 = bitcast float %101 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 %102) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %120 = icmp slt i32 %8, 128, !dbg !35
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !35
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %120) #3, !dbg !35
  %123 = bitcast i32 %122 to float, !dbg !35
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !35
  %125 = bitcast i32 %124 to float, !dbg !35
  %126 = fadd float %123, %125, !dbg !39
  %127 = bitcast float %126 to i32, !dbg !35
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !35
  %129 = bitcast i32 %128 to float, !dbg !35
  %130 = fadd float %126, %129, !dbg !39
  %131 = and i32 %8, 3, !dbg !35
  %132 = icmp eq i32 %131, 0, !dbg !35
  %133 = and i1 %120, %132, !dbg !35
  %134 = bitcast float %130 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %134, i1 %133) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !35
  %136 = load i32, ptr addrspace(3) %135, align 16, !dbg !35
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !35
  %138 = load i32, ptr addrspace(3) %137, align 16, !dbg !35
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !35
  %140 = load i32, ptr addrspace(3) %139, align 16, !dbg !35
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !35
  %142 = load i32, ptr addrspace(3) %141, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !41
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %143, i32 %136, i32 %138, i32 %140, i32 %142, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !41
  %145 = load float, ptr addrspace(3) %144, align 4, !dbg !41
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float 9.000000e+00) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %147 = sext i32 %14 to i64, !dbg !43
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !43
  %149 = icmp eq i32 %103, 0, !dbg !44
  %150 = bitcast float %146 to i32, !dbg !44
  %151 = and i1 %149, %16, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %148, i1 %151) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2yjwg6uissbdxbjxldzqxdqhkjhifsxokp72aj6luwipdueow65.py", directory: "inductor_cache/2y")
!4 = !{ptr @triton_per_fused_convolution_mean_relu_28, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_mean_relu_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_mean_relu_28", linkageName: "triton_per_fused_convolution_mean_relu_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 40, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 50, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 63, scope: !7)
!25 = !DILocation(line: 33, column: 55, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 37, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 39, column: 41, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = !DILocation(line: 40, column: 24, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !36, file: !37, discriminator: 0)
!41 = !DILocation(line: 42, column: 19, scope: !7)
!42 = !DILocation(line: 43, column: 4, scope: !7)
!43 = !DILocation(line: 44, column: 28, scope: !7)
!44 = !DILocation(line: 44, column: 40, scope: !7)
!45 = !DILocation(line: 44, column: 4, scope: !7)
