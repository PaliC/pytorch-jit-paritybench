; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %10, 256, !dbg !12
  %13 = or disjoint i32 %10, 384, !dbg !12
  %14 = or disjoint i32 %8, %10, !dbg !13
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = or disjoint i32 %8, %13, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = or disjoint i32 %14, 640, !dbg !13
  %20 = or disjoint i32 %14, 768, !dbg !13
  %21 = or disjoint i32 %14, 896, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %23 = icmp slt i32 %22, 32, !dbg !15
  %24 = sdiv i32 %14, 1024, !dbg !16
  %25 = sdiv i32 %15, 1024, !dbg !16
  %26 = sdiv i32 %16, 1024, !dbg !16
  %27 = sdiv i32 %17, 1024, !dbg !16
  %28 = sdiv i32 %18, 1024, !dbg !16
  %29 = sdiv i32 %19, 1024, !dbg !16
  %30 = sdiv i32 %20, 1024, !dbg !16
  %31 = sdiv i32 %21, 1024, !dbg !16
  %32 = shl i32 %14, 5, !dbg !17
  %33 = shl i32 %15, 5, !dbg !17
  %34 = shl i32 %16, 5, !dbg !17
  %35 = shl i32 %17, 5, !dbg !17
  %36 = shl i32 %18, 5, !dbg !17
  %37 = shl i32 %19, 5, !dbg !17
  %38 = shl i32 %20, 5, !dbg !17
  %39 = shl i32 %21, 5, !dbg !17
  %40 = add i32 %32, %22, !dbg !18
  %41 = add i32 %33, %22, !dbg !18
  %42 = add i32 %34, %22, !dbg !18
  %43 = add i32 %35, %22, !dbg !18
  %44 = add i32 %22, %36, !dbg !18
  %45 = add i32 %22, %37, !dbg !18
  %46 = add i32 %22, %38, !dbg !18
  %47 = add i32 %22, %39, !dbg !18
  %48 = sext i32 %40 to i64, !dbg !19
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !19
  %50 = sext i32 %41 to i64, !dbg !19
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !19
  %52 = sext i32 %42 to i64, !dbg !19
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !19
  %54 = sext i32 %43 to i64, !dbg !19
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !19
  %56 = sext i32 %44 to i64, !dbg !19
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !19
  %58 = sext i32 %45 to i64, !dbg !19
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !19
  %60 = sext i32 %46 to i64, !dbg !19
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !19
  %62 = sext i32 %47 to i64, !dbg !19
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !19
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %23) #4, !dbg !20
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #4, !dbg !20
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %23) #4, !dbg !20
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %23) #4, !dbg !20
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %23) #4, !dbg !20
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %23) #4, !dbg !20
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %23) #4, !dbg !20
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %23) #4, !dbg !20
  %72 = shl nsw i32 %24, 5, !dbg !21
  %73 = shl nsw i32 %25, 5, !dbg !21
  %74 = shl nsw i32 %26, 5, !dbg !21
  %75 = shl nsw i32 %27, 5, !dbg !21
  %76 = shl nsw i32 %28, 5, !dbg !21
  %77 = shl nsw i32 %29, 5, !dbg !21
  %78 = shl nsw i32 %30, 5, !dbg !21
  %79 = shl nsw i32 %31, 5, !dbg !21
  %80 = add i32 %72, %22, !dbg !22
  %81 = add i32 %73, %22, !dbg !22
  %82 = add i32 %74, %22, !dbg !22
  %83 = add i32 %75, %22, !dbg !22
  %84 = add i32 %22, %76, !dbg !22
  %85 = add i32 %22, %77, !dbg !22
  %86 = add i32 %22, %78, !dbg !22
  %87 = add i32 %22, %79, !dbg !22
  %88 = sext i32 %80 to i64, !dbg !23
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !23
  %90 = sext i32 %81 to i64, !dbg !23
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !23
  %92 = sext i32 %82 to i64, !dbg !23
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !23
  %94 = sext i32 %83 to i64, !dbg !23
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !23
  %96 = sext i32 %84 to i64, !dbg !23
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !23
  %98 = sext i32 %85 to i64, !dbg !23
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !23
  %100 = sext i32 %86 to i64, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !23
  %102 = sext i32 %87 to i64, !dbg !23
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %23) #4, !dbg !24
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %23) #4, !dbg !24
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %23) #4, !dbg !24
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %23) #4, !dbg !24
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #4, !dbg !24
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %23) #4, !dbg !24
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %23) #4, !dbg !24
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %23) #4, !dbg !24
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !25
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !25
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !25
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !25
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !25
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !25
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !25
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !25
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %23) #4, !dbg !26
  %121 = bitcast i32 %120 to float, !dbg !26
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %23) #4, !dbg !26
  %123 = bitcast i32 %122 to float, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %23) #4, !dbg !26
  %125 = bitcast i32 %124 to float, !dbg !26
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %23) #4, !dbg !26
  %127 = bitcast i32 %126 to float, !dbg !26
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %23) #4, !dbg !26
  %129 = bitcast i32 %128 to float, !dbg !26
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %23) #4, !dbg !26
  %131 = bitcast i32 %130 to float, !dbg !26
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %23) #4, !dbg !26
  %133 = bitcast i32 %132 to float, !dbg !26
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %23) #4, !dbg !26
  %135 = bitcast i32 %134 to float, !dbg !26
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 1.024000e+03) #4, !dbg !27
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float 1.024000e+03) #4, !dbg !27
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float 1.024000e+03) #4, !dbg !27
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 1.024000e+03) #4, !dbg !27
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 1.024000e+03) #4, !dbg !27
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 1.024000e+03) #4, !dbg !27
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float 1.024000e+03) #4, !dbg !27
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 1.024000e+03) #4, !dbg !27
  %144 = fadd float %136, 0x3EE4F8B580000000, !dbg !28
  %145 = fadd float %137, 0x3EE4F8B580000000, !dbg !28
  %146 = fadd float %138, 0x3EE4F8B580000000, !dbg !28
  %147 = fadd float %139, 0x3EE4F8B580000000, !dbg !28
  %148 = fadd float %140, 0x3EE4F8B580000000, !dbg !28
  %149 = fadd float %141, 0x3EE4F8B580000000, !dbg !28
  %150 = fadd float %142, 0x3EE4F8B580000000, !dbg !28
  %151 = fadd float %143, 0x3EE4F8B580000000, !dbg !28
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %152, 0, !dbg !29
  br i1 %.not.i, label %155, label %153, !dbg !29

153:                                              ; preds = %6
  %154 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %144), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

155:                                              ; preds = %6
  %156 = tail call float @llvm.nvvm.rsqrt.approx.f(float %144), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %153, %155
  %.0.i = phi float [ %154, %153 ], [ %156, %155 ], !dbg !29
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i15 = icmp eq i32 %157, 0, !dbg !29
  br i1 %.not.i15, label %160, label %158, !dbg !29

158:                                              ; preds = %__nv_rsqrtf.exit
  %159 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %145), !dbg !29
  br label %__nv_rsqrtf.exit17, !dbg !29

160:                                              ; preds = %__nv_rsqrtf.exit
  %161 = tail call float @llvm.nvvm.rsqrt.approx.f(float %145), !dbg !29
  br label %__nv_rsqrtf.exit17, !dbg !29

__nv_rsqrtf.exit17:                               ; preds = %158, %160
  %.0.i16 = phi float [ %159, %158 ], [ %161, %160 ], !dbg !29
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i18 = icmp eq i32 %162, 0, !dbg !29
  br i1 %.not.i18, label %165, label %163, !dbg !29

163:                                              ; preds = %__nv_rsqrtf.exit17
  %164 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %146), !dbg !29
  br label %__nv_rsqrtf.exit20, !dbg !29

165:                                              ; preds = %__nv_rsqrtf.exit17
  %166 = tail call float @llvm.nvvm.rsqrt.approx.f(float %146), !dbg !29
  br label %__nv_rsqrtf.exit20, !dbg !29

__nv_rsqrtf.exit20:                               ; preds = %163, %165
  %.0.i19 = phi float [ %164, %163 ], [ %166, %165 ], !dbg !29
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i21 = icmp eq i32 %167, 0, !dbg !29
  br i1 %.not.i21, label %170, label %168, !dbg !29

168:                                              ; preds = %__nv_rsqrtf.exit20
  %169 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !29
  br label %__nv_rsqrtf.exit23, !dbg !29

170:                                              ; preds = %__nv_rsqrtf.exit20
  %171 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !29
  br label %__nv_rsqrtf.exit23, !dbg !29

__nv_rsqrtf.exit23:                               ; preds = %168, %170
  %.0.i22 = phi float [ %169, %168 ], [ %171, %170 ], !dbg !29
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i24 = icmp eq i32 %172, 0, !dbg !29
  br i1 %.not.i24, label %175, label %173, !dbg !29

173:                                              ; preds = %__nv_rsqrtf.exit23
  %174 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %148), !dbg !29
  br label %__nv_rsqrtf.exit26, !dbg !29

175:                                              ; preds = %__nv_rsqrtf.exit23
  %176 = tail call float @llvm.nvvm.rsqrt.approx.f(float %148), !dbg !29
  br label %__nv_rsqrtf.exit26, !dbg !29

__nv_rsqrtf.exit26:                               ; preds = %173, %175
  %.0.i25 = phi float [ %174, %173 ], [ %176, %175 ], !dbg !29
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i27 = icmp eq i32 %177, 0, !dbg !29
  br i1 %.not.i27, label %180, label %178, !dbg !29

178:                                              ; preds = %__nv_rsqrtf.exit26
  %179 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %149), !dbg !29
  br label %__nv_rsqrtf.exit29, !dbg !29

180:                                              ; preds = %__nv_rsqrtf.exit26
  %181 = tail call float @llvm.nvvm.rsqrt.approx.f(float %149), !dbg !29
  br label %__nv_rsqrtf.exit29, !dbg !29

__nv_rsqrtf.exit29:                               ; preds = %178, %180
  %.0.i28 = phi float [ %179, %178 ], [ %181, %180 ], !dbg !29
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i30 = icmp eq i32 %182, 0, !dbg !29
  br i1 %.not.i30, label %185, label %183, !dbg !29

183:                                              ; preds = %__nv_rsqrtf.exit29
  %184 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %150), !dbg !29
  br label %__nv_rsqrtf.exit32, !dbg !29

185:                                              ; preds = %__nv_rsqrtf.exit29
  %186 = tail call float @llvm.nvvm.rsqrt.approx.f(float %150), !dbg !29
  br label %__nv_rsqrtf.exit32, !dbg !29

__nv_rsqrtf.exit32:                               ; preds = %183, %185
  %.0.i31 = phi float [ %184, %183 ], [ %186, %185 ], !dbg !29
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i33 = icmp eq i32 %187, 0, !dbg !29
  br i1 %.not.i33, label %190, label %188, !dbg !29

188:                                              ; preds = %__nv_rsqrtf.exit32
  %189 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %151), !dbg !29
  br label %__nv_rsqrtf.exit35, !dbg !29

190:                                              ; preds = %__nv_rsqrtf.exit32
  %191 = tail call float @llvm.nvvm.rsqrt.approx.f(float %151), !dbg !29
  br label %__nv_rsqrtf.exit35, !dbg !29

__nv_rsqrtf.exit35:                               ; preds = %188, %190
  %.0.i34 = phi float [ %189, %188 ], [ %191, %190 ], !dbg !29
  %192 = insertelement <8 x i32> poison, i32 %71, i64 0, !dbg !20
  %193 = insertelement <8 x i32> %192, i32 %70, i64 1, !dbg !20
  %194 = insertelement <8 x i32> %193, i32 %69, i64 2, !dbg !20
  %195 = insertelement <8 x i32> %194, i32 %68, i64 3, !dbg !20
  %196 = insertelement <8 x i32> %195, i32 %67, i64 4, !dbg !20
  %197 = insertelement <8 x i32> %196, i32 %66, i64 5, !dbg !20
  %198 = insertelement <8 x i32> %197, i32 %65, i64 6, !dbg !20
  %199 = insertelement <8 x i32> %198, i32 %64, i64 7, !dbg !20
  %200 = bitcast <8 x i32> %199 to <8 x float>, !dbg !20
  %201 = insertelement <8 x i32> poison, i32 %111, i64 0, !dbg !24
  %202 = insertelement <8 x i32> %201, i32 %110, i64 1, !dbg !24
  %203 = insertelement <8 x i32> %202, i32 %109, i64 2, !dbg !24
  %204 = insertelement <8 x i32> %203, i32 %108, i64 3, !dbg !24
  %205 = insertelement <8 x i32> %204, i32 %107, i64 4, !dbg !24
  %206 = insertelement <8 x i32> %205, i32 %106, i64 5, !dbg !24
  %207 = insertelement <8 x i32> %206, i32 %105, i64 6, !dbg !24
  %208 = insertelement <8 x i32> %207, i32 %104, i64 7, !dbg !24
  %209 = bitcast <8 x i32> %208 to <8 x float>, !dbg !24
  %210 = shl i32 %9, 2, !dbg !12
  %211 = and i32 %210, 508, !dbg !12
  %212 = or disjoint i32 %211, %8, !dbg !13
  %213 = or disjoint i32 %212, 512, !dbg !13
  %.frozen = freeze i32 %213, !dbg !16
  %214 = sdiv i32 %.frozen, 1024, !dbg !16
  %215 = mul i32 %214, 1024, !dbg !30
  %.decomposed = sub i32 %.frozen, %215, !dbg !30
  %.frozen36 = freeze i32 %212, !dbg !16
  %216 = sdiv i32 %.frozen36, 1024, !dbg !16
  %217 = mul i32 %216, 1024, !dbg !30
  %.decomposed37 = sub i32 %.frozen36, %217, !dbg !30
  %218 = fsub <8 x float> %200, %209, !dbg !31
  %219 = insertelement <8 x float> poison, float %.0.i34, i64 0, !dbg !32
  %220 = insertelement <8 x float> %219, float %.0.i31, i64 1, !dbg !32
  %221 = insertelement <8 x float> %220, float %.0.i28, i64 2, !dbg !32
  %222 = insertelement <8 x float> %221, float %.0.i25, i64 3, !dbg !32
  %223 = insertelement <8 x float> %222, float %.0.i22, i64 4, !dbg !32
  %224 = insertelement <8 x float> %223, float %.0.i19, i64 5, !dbg !32
  %225 = insertelement <8 x float> %224, float %.0.i16, i64 6, !dbg !32
  %226 = insertelement <8 x float> %225, float %.0.i, i64 7, !dbg !32
  %227 = fmul <8 x float> %218, %226, !dbg !32
  %228 = fcmp ogt <8 x float> %227, zeroinitializer, !dbg !33
  %229 = extractelement <8 x float> %227, i64 7, !dbg !34
  %230 = fmul float %229, 0x3FB99999A0000000, !dbg !35
  %231 = extractelement <8 x float> %227, i64 6, !dbg !34
  %232 = fmul float %231, 0x3FB99999A0000000, !dbg !35
  %233 = extractelement <8 x float> %227, i64 5, !dbg !34
  %234 = fmul float %233, 0x3FB99999A0000000, !dbg !35
  %235 = extractelement <8 x float> %227, i64 4, !dbg !34
  %236 = fmul float %235, 0x3FB99999A0000000, !dbg !35
  %237 = extractelement <8 x float> %227, i64 3, !dbg !34
  %238 = fmul float %237, 0x3FB99999A0000000, !dbg !35
  %239 = extractelement <8 x float> %227, i64 2, !dbg !34
  %240 = fmul float %239, 0x3FB99999A0000000, !dbg !35
  %241 = extractelement <8 x float> %227, i64 1, !dbg !34
  %242 = fmul float %241, 0x3FB99999A0000000, !dbg !35
  %243 = extractelement <8 x float> %227, i64 0, !dbg !34
  %244 = fmul float %243, 0x3FB99999A0000000, !dbg !35
  %245 = extractelement <8 x i1> %228, i64 7, !dbg !34
  %246 = select i1 %245, float %229, float %230, !dbg !34
  %247 = extractelement <8 x i1> %228, i64 6, !dbg !34
  %248 = select i1 %247, float %231, float %232, !dbg !34
  %249 = extractelement <8 x i1> %228, i64 5, !dbg !34
  %250 = select i1 %249, float %233, float %234, !dbg !34
  %251 = extractelement <8 x i1> %228, i64 4, !dbg !34
  %252 = select i1 %251, float %235, float %236, !dbg !34
  %253 = extractelement <8 x i1> %228, i64 3, !dbg !34
  %254 = select i1 %253, float %237, float %238, !dbg !34
  %255 = extractelement <8 x i1> %228, i64 2, !dbg !34
  %256 = select i1 %255, float %239, float %240, !dbg !34
  %257 = extractelement <8 x i1> %228, i64 1, !dbg !34
  %258 = select i1 %257, float %241, float %242, !dbg !34
  %259 = extractelement <8 x i1> %228, i64 0, !dbg !34
  %260 = select i1 %259, float %243, float %244, !dbg !34
  %261 = shl i32 %22, 10, !dbg !36
  %262 = add i32 %.decomposed37, %261, !dbg !37
  %263 = add i32 %.decomposed, %261, !dbg !37
  %264 = shl i32 %216, 15, !dbg !38
  %265 = shl i32 %214, 15, !dbg !38
  %266 = add i32 %262, %264, !dbg !39
  %267 = add i32 %263, %265, !dbg !39
  %268 = sext i32 %266 to i64, !dbg !40
  %269 = getelementptr float, ptr addrspace(1) %3, i64 %268, !dbg !40
  %270 = sext i32 %267 to i64, !dbg !40
  %271 = getelementptr float, ptr addrspace(1) %3, i64 %270, !dbg !40
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !41
  %273 = bitcast float %246 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #4, !dbg !41
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !41
  %275 = bitcast float %248 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !41
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !41
  %277 = bitcast float %250 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !41
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !41
  %279 = bitcast float %252 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !41
  %281 = load <4 x i32>, ptr addrspace(3) %280, align 16, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %282 = bitcast float %254 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %282, i1 true) #4, !dbg !41
  %283 = bitcast float %256 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %283, i1 true) #4, !dbg !41
  %284 = bitcast float %258 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %284, i1 true) #4, !dbg !41
  %285 = bitcast float %260 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %285, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %286 = load <4 x i32>, ptr addrspace(3) %280, align 16, !dbg !41
  %.extract = extractelement <4 x i32> %281, i64 0, !dbg !41
  %.extract8 = extractelement <4 x i32> %281, i64 1, !dbg !41
  %.extract9 = extractelement <4 x i32> %281, i64 2, !dbg !41
  %.extract10 = extractelement <4 x i32> %281, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %269, i1 %23) #4, !dbg !41
  %.extract11 = extractelement <4 x i32> %286, i64 0, !dbg !41
  %.extract12 = extractelement <4 x i32> %286, i64 1, !dbg !41
  %.extract13 = extractelement <4 x i32> %286, i64 2, !dbg !41
  %.extract14 = extractelement <4 x i32> %286, i64 3, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %271, i1 %23) #4, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyzhydqbmxfehkov5zfm66zrn67m3kjhtvtg6lmm5jfh36lwjnig.py", directory: "inductor_cache/yz")
!4 = !{ptr @triton_poi_fused_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_10", linkageName: "triton_poi_fused_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 43, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 27, scope: !7)
!30 = !DILocation(line: 31, column: 19, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 34, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 47, column: 35, scope: !7)
!37 = !DILocation(line: 47, column: 30, scope: !7)
!38 = !DILocation(line: 47, column: 46, scope: !7)
!39 = !DILocation(line: 47, column: 40, scope: !7)
!40 = !DILocation(line: 47, column: 25, scope: !7)
!41 = !DILocation(line: 47, column: 58, scope: !7)
!42 = !DILocation(line: 47, column: 4, scope: !7)
