; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, ptr addrspace(1) %30, ptr addrspace(1) %31, ptr addrspace(1) %32, ptr addrspace(1) %33, ptr addrspace(1) %34, ptr addrspace(1) %35, ptr addrspace(1) %36, ptr addrspace(1) %37, ptr addrspace(1) %38, ptr addrspace(1) %39, ptr addrspace(1) %40, i32 %41) local_unnamed_addr !dbg !7 {
  %43 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %44 = shl i32 %43, 7, !dbg !11
  %45 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %46 = and i32 %45, 127, !dbg !12
  %47 = or disjoint i32 %44, %46, !dbg !13
  %.frozen = freeze i32 %47, !dbg !14
  %48 = sdiv i32 %.frozen, 512, !dbg !14
  %49 = mul i32 %48, 512, !dbg !15
  %.decomposed = sub i32 %.frozen, %49, !dbg !15
  %50 = sdiv i32 %47, 2048, !dbg !16
  %51 = srem i32 %48, 4, !dbg !17
  %52 = srem i32 %48, 2, !dbg !18
  %53 = sdiv i32 %47, 1024, !dbg !19
  %54 = srem i32 %53, 2, !dbg !20
  %55 = icmp slt i32 %.decomposed, 64, !dbg !21
  %56 = shl nsw i32 %48, 6, !dbg !22
  %57 = add nsw i32 %56, %.decomposed, !dbg !23
  %58 = sext i32 %57 to i64, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %55, i32 0, i1 %55) #3, !dbg !25
  %61 = sext i32 %.decomposed to i64, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !26
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %55, i32 0, i1 %55) #3, !dbg !27
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !28
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %55, i32 0, i1 %55) #3, !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = fadd float %66, 0x3EE4F8B580000000, !dbg !30
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %68, 0, !dbg !31
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %69, 0, !dbg !31
  br i1 %.not.i, label %75, label %70, !dbg !31

70:                                               ; preds = %42
  br i1 %.not1.i, label %73, label %71, !dbg !31

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

75:                                               ; preds = %42
  br i1 %.not1.i, label %78, label %76, !dbg !31

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !31
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !33
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %55, i32 0, i1 %55) #3, !dbg !34
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !35
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %55, i32 0, i1 %55) #3, !dbg !36
  %85 = and i32 %.decomposed, -64, !dbg !37
  %86 = icmp eq i32 %85, 64, !dbg !37
  %87 = add nsw i32 %.decomposed, -64, !dbg !38
  %88 = add nsw i32 %56, %87, !dbg !39
  %89 = sext i32 %88 to i64, !dbg !40
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %89, !dbg !40
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %86, i32 0, i1 %86) #3, !dbg !41
  %92 = sext i32 %87 to i64, !dbg !42
  %93 = getelementptr float, ptr addrspace(1) %6, i64 %92, !dbg !42
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %86, i32 0, i1 %86) #3, !dbg !43
  %95 = getelementptr float, ptr addrspace(1) %7, i64 %92, !dbg !44
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %86, i32 0, i1 %86) #3, !dbg !45
  %97 = bitcast i32 %96 to float, !dbg !45
  %98 = fadd float %97, 0x3EE4F8B580000000, !dbg !46
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i8 = icmp eq i32 %99, 0, !dbg !47
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i11 = icmp eq i32 %100, 0, !dbg !47
  br i1 %.not.i8, label %106, label %101, !dbg !47

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %104, label %102, !dbg !47

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !47
  br label %__nv_sqrtf.exit12, !dbg !47

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !47
  br label %__nv_sqrtf.exit12, !dbg !47

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %109, label %107, !dbg !47

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !47
  br label %__nv_sqrtf.exit12, !dbg !47

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !47
  br label %__nv_sqrtf.exit12, !dbg !47

__nv_sqrtf.exit12:                                ; preds = %102, %104, %107, %109
  %.0.i10 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !47
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !48
  %112 = getelementptr float, ptr addrspace(1) %8, i64 %92, !dbg !49
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %86, i32 0, i1 %86) #3, !dbg !50
  %114 = getelementptr float, ptr addrspace(1) %9, i64 %92, !dbg !51
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %86, i32 0, i1 %86) #3, !dbg !52
  %116 = icmp eq i32 %85, 128, !dbg !53
  %117 = add nsw i32 %.decomposed, -128, !dbg !54
  %118 = add nsw i32 %56, %117, !dbg !55
  %119 = sext i32 %118 to i64, !dbg !56
  %120 = getelementptr float, ptr addrspace(1) %10, i64 %119, !dbg !56
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %116, i32 0, i1 %116) #3, !dbg !57
  %122 = sext i32 %117 to i64, !dbg !58
  %123 = getelementptr float, ptr addrspace(1) %11, i64 %122, !dbg !58
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %116, i32 0, i1 %116) #3, !dbg !59
  %125 = getelementptr float, ptr addrspace(1) %12, i64 %122, !dbg !60
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %116, i32 0, i1 %116) #3, !dbg !61
  %127 = bitcast i32 %126 to float, !dbg !61
  %128 = fadd float %127, 0x3EE4F8B580000000, !dbg !62
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i13 = icmp eq i32 %129, 0, !dbg !63
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i16 = icmp eq i32 %130, 0, !dbg !63
  br i1 %.not.i13, label %136, label %131, !dbg !63

131:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %134, label %132, !dbg !63

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !63
  br label %__nv_sqrtf.exit17, !dbg !63

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !63
  br label %__nv_sqrtf.exit17, !dbg !63

136:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %139, label %137, !dbg !63

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !63
  br label %__nv_sqrtf.exit17, !dbg !63

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !63
  br label %__nv_sqrtf.exit17, !dbg !63

__nv_sqrtf.exit17:                                ; preds = %132, %134, %137, %139
  %.0.i15 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !63
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !64
  %142 = getelementptr float, ptr addrspace(1) %13, i64 %122, !dbg !65
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %116, i32 0, i1 %116) #3, !dbg !66
  %144 = getelementptr float, ptr addrspace(1) %14, i64 %122, !dbg !67
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %116, i32 0, i1 %116) #3, !dbg !68
  %146 = icmp eq i32 %85, 192, !dbg !69
  %147 = add nsw i32 %.decomposed, -192, !dbg !70
  %148 = add nsw i32 %56, %147, !dbg !71
  %149 = sext i32 %148 to i64, !dbg !72
  %150 = getelementptr float, ptr addrspace(1) %15, i64 %149, !dbg !72
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %146, i32 0, i1 %146) #3, !dbg !73
  %152 = sext i32 %147 to i64, !dbg !74
  %153 = getelementptr float, ptr addrspace(1) %16, i64 %152, !dbg !74
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %146, i32 0, i1 %146) #3, !dbg !75
  %155 = getelementptr float, ptr addrspace(1) %17, i64 %152, !dbg !76
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %146, i32 0, i1 %146) #3, !dbg !77
  %157 = bitcast i32 %156 to float, !dbg !77
  %158 = fadd float %157, 0x3EE4F8B580000000, !dbg !78
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i18 = icmp eq i32 %159, 0, !dbg !79
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i21 = icmp eq i32 %160, 0, !dbg !79
  br i1 %.not.i18, label %166, label %161, !dbg !79

161:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %164, label %162, !dbg !79

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #3, !dbg !79
  br label %__nv_sqrtf.exit22, !dbg !79

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #3, !dbg !79
  br label %__nv_sqrtf.exit22, !dbg !79

166:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %169, label %167, !dbg !79

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #3, !dbg !79
  br label %__nv_sqrtf.exit22, !dbg !79

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #3, !dbg !79
  br label %__nv_sqrtf.exit22, !dbg !79

__nv_sqrtf.exit22:                                ; preds = %162, %164, %167, %169
  %.0.i20 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !79
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !80
  %172 = getelementptr float, ptr addrspace(1) %18, i64 %152, !dbg !81
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %146, i32 0, i1 %146) #3, !dbg !82
  %174 = getelementptr float, ptr addrspace(1) %19, i64 %152, !dbg !83
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %146, i32 0, i1 %146) #3, !dbg !84
  %176 = icmp eq i32 %85, 256, !dbg !85
  %177 = shl nsw i32 %51, 6, !dbg !86
  %178 = mul nsw i32 %50, 384, !dbg !87
  %179 = add nsw i32 %.decomposed, -256, !dbg !88
  %180 = add nsw i32 %179, %178, !dbg !89
  %181 = add nsw i32 %180, %177, !dbg !90
  %182 = sext i32 %181 to i64, !dbg !91
  %183 = getelementptr float, ptr addrspace(1) %20, i64 %182, !dbg !91
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %176, i32 0, i1 %176) #3, !dbg !92
  %185 = sext i32 %179 to i64, !dbg !93
  %186 = getelementptr float, ptr addrspace(1) %21, i64 %185, !dbg !93
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %176, i32 0, i1 %176) #3, !dbg !94
  %188 = getelementptr float, ptr addrspace(1) %22, i64 %185, !dbg !95
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %176, i32 0, i1 %176) #3, !dbg !96
  %190 = bitcast i32 %189 to float, !dbg !96
  %191 = fadd float %190, 0x3EE4F8B580000000, !dbg !97
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i23 = icmp eq i32 %192, 0, !dbg !98
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i26 = icmp eq i32 %193, 0, !dbg !98
  br i1 %.not.i23, label %199, label %194, !dbg !98

194:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %197, label %195, !dbg !98

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %191) #3, !dbg !98
  br label %__nv_sqrtf.exit27, !dbg !98

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %191) #3, !dbg !98
  br label %__nv_sqrtf.exit27, !dbg !98

199:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %202, label %200, !dbg !98

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %191) #3, !dbg !98
  br label %__nv_sqrtf.exit27, !dbg !98

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %191) #3, !dbg !98
  br label %__nv_sqrtf.exit27, !dbg !98

__nv_sqrtf.exit27:                                ; preds = %195, %197, %200, %202
  %.0.i25 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !98
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !99
  %205 = getelementptr float, ptr addrspace(1) %23, i64 %185, !dbg !100
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %176, i32 0, i1 %176) #3, !dbg !101
  %207 = getelementptr float, ptr addrspace(1) %24, i64 %185, !dbg !102
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %176, i32 0, i1 %176) #3, !dbg !103
  %209 = icmp eq i32 %85, 320, !dbg !104
  %210 = shl nsw i32 %52, 6, !dbg !105
  %211 = mul nsw i32 %53, 192, !dbg !106
  %212 = add nsw i32 %.decomposed, -320, !dbg !107
  %213 = add nsw i32 %212, %211, !dbg !108
  %214 = add nsw i32 %213, %210, !dbg !109
  %215 = sext i32 %214 to i64, !dbg !110
  %216 = getelementptr float, ptr addrspace(1) %25, i64 %215, !dbg !110
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %209, i32 0, i1 %209) #3, !dbg !111
  %218 = sext i32 %212 to i64, !dbg !112
  %219 = getelementptr float, ptr addrspace(1) %26, i64 %218, !dbg !112
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %209, i32 0, i1 %209) #3, !dbg !113
  %221 = getelementptr float, ptr addrspace(1) %27, i64 %218, !dbg !114
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %209, i32 0, i1 %209) #3, !dbg !115
  %223 = bitcast i32 %222 to float, !dbg !115
  %224 = fadd float %223, 0x3EE4F8B580000000, !dbg !116
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !117
  %.not.i28 = icmp eq i32 %225, 0, !dbg !117
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !117
  %.not1.i31 = icmp eq i32 %226, 0, !dbg !117
  br i1 %.not.i28, label %232, label %227, !dbg !117

227:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %230, label %228, !dbg !117

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %224) #3, !dbg !117
  br label %__nv_sqrtf.exit32, !dbg !117

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %224) #3, !dbg !117
  br label %__nv_sqrtf.exit32, !dbg !117

232:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %235, label %233, !dbg !117

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %224) #3, !dbg !117
  br label %__nv_sqrtf.exit32, !dbg !117

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %224) #3, !dbg !117
  br label %__nv_sqrtf.exit32, !dbg !117

__nv_sqrtf.exit32:                                ; preds = %228, %230, %233, %235
  %.0.i30 = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !117
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !118
  %238 = getelementptr float, ptr addrspace(1) %28, i64 %218, !dbg !119
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %209, i32 0, i1 %209) #3, !dbg !120
  %240 = getelementptr float, ptr addrspace(1) %29, i64 %218, !dbg !121
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %209, i32 0, i1 %209) #3, !dbg !122
  %242 = icmp eq i32 %85, 384, !dbg !123
  %243 = mul nsw i32 %54, 192, !dbg !124
  %244 = mul nsw i32 %50, 576, !dbg !125
  %245 = add nsw i32 %.decomposed, -384, !dbg !126
  %246 = add nsw i32 %245, %244, !dbg !127
  %247 = add nsw i32 %246, %243, !dbg !128
  %248 = add nsw i32 %247, %210, !dbg !129
  %249 = sext i32 %248 to i64, !dbg !130
  %250 = getelementptr float, ptr addrspace(1) %30, i64 %249, !dbg !130
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %242, i32 0, i1 %242) #3, !dbg !131
  %252 = sext i32 %245 to i64, !dbg !132
  %253 = getelementptr float, ptr addrspace(1) %31, i64 %252, !dbg !132
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %253, i1 %242, i32 0, i1 %242) #3, !dbg !133
  %255 = getelementptr float, ptr addrspace(1) %32, i64 %252, !dbg !134
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %255, i1 %242, i32 0, i1 %242) #3, !dbg !135
  %257 = bitcast i32 %256 to float, !dbg !135
  %258 = fadd float %257, 0x3EE4F8B580000000, !dbg !136
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !137
  %.not.i33 = icmp eq i32 %259, 0, !dbg !137
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !137
  %.not1.i36 = icmp eq i32 %260, 0, !dbg !137
  br i1 %.not.i33, label %266, label %261, !dbg !137

261:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %264, label %262, !dbg !137

262:                                              ; preds = %261
  %263 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %258) #3, !dbg !137
  br label %__nv_sqrtf.exit37, !dbg !137

264:                                              ; preds = %261
  %265 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %258) #3, !dbg !137
  br label %__nv_sqrtf.exit37, !dbg !137

266:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %269, label %267, !dbg !137

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.f(float %258) #3, !dbg !137
  br label %__nv_sqrtf.exit37, !dbg !137

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.f(float %258) #3, !dbg !137
  br label %__nv_sqrtf.exit37, !dbg !137

__nv_sqrtf.exit37:                                ; preds = %262, %264, %267, %269
  %.0.i35 = phi float [ %263, %262 ], [ %265, %264 ], [ %268, %267 ], [ %270, %269 ], !dbg !137
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !138
  %272 = getelementptr float, ptr addrspace(1) %33, i64 %252, !dbg !139
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %242, i32 0, i1 %242) #3, !dbg !140
  %274 = getelementptr float, ptr addrspace(1) %34, i64 %252, !dbg !141
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %242, i32 0, i1 %242) #3, !dbg !142
  %276 = icmp sgt i32 %.decomposed, 447, !dbg !143
  %277 = add nsw i32 %.decomposed, -448, !dbg !144
  %278 = add nsw i32 %56, %277, !dbg !145
  %279 = sext i32 %278 to i64, !dbg !146
  %280 = getelementptr float, ptr addrspace(1) %35, i64 %279, !dbg !146
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %276, i32 0, i1 %276) #3, !dbg !147
  %282 = sext i32 %277 to i64, !dbg !148
  %283 = getelementptr float, ptr addrspace(1) %36, i64 %282, !dbg !148
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %276, i32 0, i1 %276) #3, !dbg !149
  %285 = getelementptr float, ptr addrspace(1) %37, i64 %282, !dbg !150
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %285, i1 %276, i32 0, i1 %276) #3, !dbg !151
  %287 = bitcast i32 %286 to float, !dbg !151
  %288 = fadd float %287, 0x3EE4F8B580000000, !dbg !152
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !153
  %.not.i38 = icmp eq i32 %289, 0, !dbg !153
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !153
  %.not1.i41 = icmp eq i32 %290, 0, !dbg !153
  br i1 %.not.i38, label %296, label %291, !dbg !153

291:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %294, label %292, !dbg !153

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %288) #3, !dbg !153
  br label %__nv_sqrtf.exit42, !dbg !153

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %288) #3, !dbg !153
  br label %__nv_sqrtf.exit42, !dbg !153

296:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %299, label %297, !dbg !153

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.f(float %288) #3, !dbg !153
  br label %__nv_sqrtf.exit42, !dbg !153

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.f(float %288) #3, !dbg !153
  br label %__nv_sqrtf.exit42, !dbg !153

__nv_sqrtf.exit42:                                ; preds = %292, %294, %297, %299
  %.0.i40 = phi float [ %293, %292 ], [ %295, %294 ], [ %298, %297 ], [ %300, %299 ], !dbg !153
  %301 = insertelement <8 x i32> poison, i32 %281, i64 0, !dbg !147
  %302 = insertelement <8 x i32> %301, i32 %60, i64 1, !dbg !147
  %303 = insertelement <8 x i32> %302, i32 %91, i64 2, !dbg !147
  %304 = insertelement <8 x i32> %303, i32 %121, i64 3, !dbg !147
  %305 = insertelement <8 x i32> %304, i32 %151, i64 4, !dbg !147
  %306 = insertelement <8 x i32> %305, i32 %184, i64 5, !dbg !147
  %307 = insertelement <8 x i32> %306, i32 %217, i64 6, !dbg !147
  %308 = insertelement <8 x i32> %307, i32 %251, i64 7, !dbg !147
  %309 = bitcast <8 x i32> %308 to <8 x float>, !dbg !147
  %310 = insertelement <8 x i32> poison, i32 %284, i64 0, !dbg !149
  %311 = insertelement <8 x i32> %310, i32 %63, i64 1, !dbg !149
  %312 = insertelement <8 x i32> %311, i32 %94, i64 2, !dbg !149
  %313 = insertelement <8 x i32> %312, i32 %124, i64 3, !dbg !149
  %314 = insertelement <8 x i32> %313, i32 %154, i64 4, !dbg !149
  %315 = insertelement <8 x i32> %314, i32 %187, i64 5, !dbg !149
  %316 = insertelement <8 x i32> %315, i32 %220, i64 6, !dbg !149
  %317 = insertelement <8 x i32> %316, i32 %254, i64 7, !dbg !149
  %318 = bitcast <8 x i32> %317 to <8 x float>, !dbg !149
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !154
  %320 = getelementptr float, ptr addrspace(1) %38, i64 %282, !dbg !155
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %320, i1 %276, i32 0, i1 %276) #3, !dbg !156
  %322 = getelementptr float, ptr addrspace(1) %39, i64 %282, !dbg !157
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %322, i1 %276, i32 0, i1 %276) #3, !dbg !158
  %324 = fsub <8 x float> %309, %318, !dbg !159
  %325 = insertelement <8 x float> poison, float %319, i64 0, !dbg !160
  %326 = insertelement <8 x float> %325, float %80, i64 1, !dbg !160
  %327 = insertelement <8 x float> %326, float %111, i64 2, !dbg !160
  %328 = insertelement <8 x float> %327, float %141, i64 3, !dbg !160
  %329 = insertelement <8 x float> %328, float %171, i64 4, !dbg !160
  %330 = insertelement <8 x float> %329, float %204, i64 5, !dbg !160
  %331 = insertelement <8 x float> %330, float %237, i64 6, !dbg !160
  %332 = insertelement <8 x float> %331, float %271, i64 7, !dbg !160
  %333 = fmul <8 x float> %324, %332, !dbg !160
  %334 = insertelement <8 x i32> poison, i32 %321, i64 0, !dbg !156
  %335 = insertelement <8 x i32> %334, i32 %82, i64 1, !dbg !156
  %336 = insertelement <8 x i32> %335, i32 %113, i64 2, !dbg !156
  %337 = insertelement <8 x i32> %336, i32 %143, i64 3, !dbg !156
  %338 = insertelement <8 x i32> %337, i32 %173, i64 4, !dbg !156
  %339 = insertelement <8 x i32> %338, i32 %206, i64 5, !dbg !156
  %340 = insertelement <8 x i32> %339, i32 %239, i64 6, !dbg !156
  %341 = insertelement <8 x i32> %340, i32 %273, i64 7, !dbg !156
  %342 = bitcast <8 x i32> %341 to <8 x float>, !dbg !156
  %343 = fmul <8 x float> %333, %342, !dbg !161
  %344 = insertelement <8 x i32> poison, i32 %323, i64 0, !dbg !158
  %345 = insertelement <8 x i32> %344, i32 %84, i64 1, !dbg !158
  %346 = insertelement <8 x i32> %345, i32 %115, i64 2, !dbg !158
  %347 = insertelement <8 x i32> %346, i32 %145, i64 3, !dbg !158
  %348 = insertelement <8 x i32> %347, i32 %175, i64 4, !dbg !158
  %349 = insertelement <8 x i32> %348, i32 %208, i64 5, !dbg !158
  %350 = insertelement <8 x i32> %349, i32 %241, i64 6, !dbg !158
  %351 = insertelement <8 x i32> %350, i32 %275, i64 7, !dbg !158
  %352 = bitcast <8 x i32> %351 to <8 x float>, !dbg !158
  %353 = fadd <8 x float> %343, %352, !dbg !162
  %354 = fcmp ole <8 x float> %353, zeroinitializer, !dbg !163
  %355 = select <8 x i1> %354, <8 x float> zeroinitializer, <8 x float> %353, !dbg !163
  %356 = extractelement <8 x float> %355, i64 7, !dbg !167
  %357 = fcmp uno float %356, 0.000000e+00, !dbg !167
  %358 = fcmp olt <8 x float> %355, splat (float 6.000000e+00), !dbg !169
  %359 = extractelement <8 x i1> %358, i64 7, !dbg !171
  %360 = or i1 %359, %357, !dbg !171
  %361 = select i1 %360, float %356, float 6.000000e+00, !dbg !172
  %362 = extractelement <8 x float> %355, i64 6, !dbg !173
  %363 = fcmp uno float %362, 0.000000e+00, !dbg !173
  %364 = extractelement <8 x i1> %358, i64 6, !dbg !175
  %365 = or i1 %364, %363, !dbg !175
  %366 = select i1 %365, float %362, float 6.000000e+00, !dbg !176
  %367 = extractelement <8 x float> %355, i64 5, !dbg !177
  %368 = fcmp uno float %367, 0.000000e+00, !dbg !177
  %369 = extractelement <8 x i1> %358, i64 5, !dbg !179
  %370 = or i1 %369, %368, !dbg !179
  %371 = select i1 %370, float %367, float 6.000000e+00, !dbg !180
  %372 = extractelement <8 x float> %355, i64 4, !dbg !181
  %373 = fcmp uno float %372, 0.000000e+00, !dbg !181
  %374 = extractelement <8 x i1> %358, i64 4, !dbg !183
  %375 = or i1 %374, %373, !dbg !183
  %376 = select i1 %375, float %372, float 6.000000e+00, !dbg !184
  %377 = extractelement <8 x float> %355, i64 3, !dbg !185
  %378 = fcmp uno float %377, 0.000000e+00, !dbg !185
  %379 = extractelement <8 x i1> %358, i64 3, !dbg !187
  %380 = or i1 %379, %378, !dbg !187
  %381 = select i1 %380, float %377, float 6.000000e+00, !dbg !188
  %382 = extractelement <8 x float> %355, i64 2, !dbg !189
  %383 = fcmp uno float %382, 0.000000e+00, !dbg !189
  %384 = extractelement <8 x i1> %358, i64 2, !dbg !191
  %385 = or i1 %384, %383, !dbg !191
  %386 = select i1 %385, float %382, float 6.000000e+00, !dbg !192
  %387 = extractelement <8 x float> %355, i64 1, !dbg !193
  %388 = fcmp uno float %387, 0.000000e+00, !dbg !193
  %389 = extractelement <8 x i1> %358, i64 1, !dbg !195
  %390 = or i1 %389, %388, !dbg !195
  %391 = select i1 %390, float %387, float 6.000000e+00, !dbg !196
  %392 = extractelement <8 x float> %355, i64 0, !dbg !197
  %393 = fcmp uno float %392, 0.000000e+00, !dbg !197
  %394 = extractelement <8 x i1> %358, i64 0, !dbg !198
  %395 = or i1 %394, %393, !dbg !198
  %396 = select i1 %395, float %392, float 6.000000e+00, !dbg !199
  %397 = select i1 %276, float %396, float 0.000000e+00, !dbg !200
  %398 = select i1 %242, float %361, float %397, !dbg !201
  %399 = select i1 %209, float %366, float %398, !dbg !201
  %400 = select i1 %176, float %371, float %399, !dbg !201
  %401 = select i1 %146, float %376, float %400, !dbg !201
  %402 = select i1 %116, float %381, float %401, !dbg !201
  %403 = select i1 %86, float %386, float %402, !dbg !201
  %404 = select i1 %55, float %391, float %403, !dbg !201
  %405 = sext i32 %47 to i64, !dbg !202
  %406 = getelementptr float, ptr addrspace(1) %40, i64 %405, !dbg !202
  %407 = bitcast float %404 to i32, !dbg !203
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %407, ptr addrspace(1) %406, i1 true) #3, !dbg !203
  ret void, !dbg !204
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5yq2tdoyhrq6istzafmememreyuiii4mzwsd6u2g7cz3de4oune.py", directory: "inductor_cache/5y")
!4 = !{ptr @triton_poi_fused_cat_53, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_53, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_53", linkageName: "triton_poi_fused_cat_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 28, scope: !7)
!18 = !DILocation(line: 28, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 29, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 33, scope: !7)
!23 = !DILocation(line: 37, column: 39, scope: !7)
!24 = !DILocation(line: 37, column: 30, scope: !7)
!25 = !DILocation(line: 37, column: 45, scope: !7)
!26 = !DILocation(line: 38, column: 30, scope: !7)
!27 = !DILocation(line: 38, column: 35, scope: !7)
!28 = !DILocation(line: 40, column: 30, scope: !7)
!29 = !DILocation(line: 40, column: 35, scope: !7)
!30 = !DILocation(line: 42, column: 19, scope: !7)
!31 = !DILocation(line: 43, column: 27, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 49, column: 31, scope: !7)
!34 = !DILocation(line: 49, column: 36, scope: !7)
!35 = !DILocation(line: 51, column: 31, scope: !7)
!36 = !DILocation(line: 51, column: 36, scope: !7)
!37 = !DILocation(line: 62, column: 20, scope: !7)
!38 = !DILocation(line: 63, column: 48, scope: !7)
!39 = !DILocation(line: 63, column: 40, scope: !7)
!40 = !DILocation(line: 63, column: 31, scope: !7)
!41 = !DILocation(line: 63, column: 54, scope: !7)
!42 = !DILocation(line: 64, column: 31, scope: !7)
!43 = !DILocation(line: 64, column: 44, scope: !7)
!44 = !DILocation(line: 66, column: 31, scope: !7)
!45 = !DILocation(line: 66, column: 44, scope: !7)
!46 = !DILocation(line: 68, column: 20, scope: !7)
!47 = !DILocation(line: 69, column: 27, scope: !7)
!48 = !DILocation(line: 71, column: 20, scope: !7)
!49 = !DILocation(line: 75, column: 31, scope: !7)
!50 = !DILocation(line: 75, column: 44, scope: !7)
!51 = !DILocation(line: 77, column: 31, scope: !7)
!52 = !DILocation(line: 77, column: 44, scope: !7)
!53 = !DILocation(line: 88, column: 20, scope: !7)
!54 = !DILocation(line: 89, column: 50, scope: !7)
!55 = !DILocation(line: 89, column: 41, scope: !7)
!56 = !DILocation(line: 89, column: 32, scope: !7)
!57 = !DILocation(line: 89, column: 56, scope: !7)
!58 = !DILocation(line: 90, column: 32, scope: !7)
!59 = !DILocation(line: 90, column: 46, scope: !7)
!60 = !DILocation(line: 92, column: 32, scope: !7)
!61 = !DILocation(line: 92, column: 46, scope: !7)
!62 = !DILocation(line: 94, column: 20, scope: !7)
!63 = !DILocation(line: 95, column: 27, scope: !7)
!64 = !DILocation(line: 97, column: 20, scope: !7)
!65 = !DILocation(line: 101, column: 32, scope: !7)
!66 = !DILocation(line: 101, column: 46, scope: !7)
!67 = !DILocation(line: 103, column: 32, scope: !7)
!68 = !DILocation(line: 103, column: 46, scope: !7)
!69 = !DILocation(line: 114, column: 20, scope: !7)
!70 = !DILocation(line: 115, column: 50, scope: !7)
!71 = !DILocation(line: 115, column: 41, scope: !7)
!72 = !DILocation(line: 115, column: 32, scope: !7)
!73 = !DILocation(line: 115, column: 56, scope: !7)
!74 = !DILocation(line: 116, column: 32, scope: !7)
!75 = !DILocation(line: 116, column: 46, scope: !7)
!76 = !DILocation(line: 118, column: 32, scope: !7)
!77 = !DILocation(line: 118, column: 46, scope: !7)
!78 = !DILocation(line: 120, column: 20, scope: !7)
!79 = !DILocation(line: 121, column: 27, scope: !7)
!80 = !DILocation(line: 123, column: 20, scope: !7)
!81 = !DILocation(line: 127, column: 32, scope: !7)
!82 = !DILocation(line: 127, column: 46, scope: !7)
!83 = !DILocation(line: 129, column: 32, scope: !7)
!84 = !DILocation(line: 129, column: 46, scope: !7)
!85 = !DILocation(line: 140, column: 22, scope: !7)
!86 = !DILocation(line: 141, column: 36, scope: !7)
!87 = !DILocation(line: 141, column: 45, scope: !7)
!88 = !DILocation(line: 141, column: 60, scope: !7)
!89 = !DILocation(line: 141, column: 41, scope: !7)
!90 = !DILocation(line: 141, column: 51, scope: !7)
!91 = !DILocation(line: 141, column: 33, scope: !7)
!92 = !DILocation(line: 141, column: 66, scope: !7)
!93 = !DILocation(line: 142, column: 33, scope: !7)
!94 = !DILocation(line: 142, column: 47, scope: !7)
!95 = !DILocation(line: 144, column: 33, scope: !7)
!96 = !DILocation(line: 144, column: 47, scope: !7)
!97 = !DILocation(line: 146, column: 22, scope: !7)
!98 = !DILocation(line: 147, column: 28, scope: !7)
!99 = !DILocation(line: 149, column: 22, scope: !7)
!100 = !DILocation(line: 153, column: 33, scope: !7)
!101 = !DILocation(line: 153, column: 47, scope: !7)
!102 = !DILocation(line: 155, column: 33, scope: !7)
!103 = !DILocation(line: 155, column: 47, scope: !7)
!104 = !DILocation(line: 166, column: 22, scope: !7)
!105 = !DILocation(line: 167, column: 36, scope: !7)
!106 = !DILocation(line: 167, column: 45, scope: !7)
!107 = !DILocation(line: 167, column: 60, scope: !7)
!108 = !DILocation(line: 167, column: 41, scope: !7)
!109 = !DILocation(line: 167, column: 51, scope: !7)
!110 = !DILocation(line: 167, column: 33, scope: !7)
!111 = !DILocation(line: 167, column: 66, scope: !7)
!112 = !DILocation(line: 168, column: 33, scope: !7)
!113 = !DILocation(line: 168, column: 47, scope: !7)
!114 = !DILocation(line: 170, column: 33, scope: !7)
!115 = !DILocation(line: 170, column: 47, scope: !7)
!116 = !DILocation(line: 172, column: 22, scope: !7)
!117 = !DILocation(line: 173, column: 28, scope: !7)
!118 = !DILocation(line: 175, column: 22, scope: !7)
!119 = !DILocation(line: 179, column: 33, scope: !7)
!120 = !DILocation(line: 179, column: 47, scope: !7)
!121 = !DILocation(line: 181, column: 33, scope: !7)
!122 = !DILocation(line: 181, column: 47, scope: !7)
!123 = !DILocation(line: 192, column: 22, scope: !7)
!124 = !DILocation(line: 193, column: 45, scope: !7)
!125 = !DILocation(line: 193, column: 54, scope: !7)
!126 = !DILocation(line: 193, column: 69, scope: !7)
!127 = !DILocation(line: 193, column: 41, scope: !7)
!128 = !DILocation(line: 193, column: 50, scope: !7)
!129 = !DILocation(line: 193, column: 60, scope: !7)
!130 = !DILocation(line: 193, column: 33, scope: !7)
!131 = !DILocation(line: 193, column: 75, scope: !7)
!132 = !DILocation(line: 194, column: 33, scope: !7)
!133 = !DILocation(line: 194, column: 47, scope: !7)
!134 = !DILocation(line: 196, column: 33, scope: !7)
!135 = !DILocation(line: 196, column: 47, scope: !7)
!136 = !DILocation(line: 198, column: 22, scope: !7)
!137 = !DILocation(line: 199, column: 28, scope: !7)
!138 = !DILocation(line: 201, column: 22, scope: !7)
!139 = !DILocation(line: 205, column: 33, scope: !7)
!140 = !DILocation(line: 205, column: 47, scope: !7)
!141 = !DILocation(line: 207, column: 33, scope: !7)
!142 = !DILocation(line: 207, column: 47, scope: !7)
!143 = !DILocation(line: 215, column: 21, scope: !7)
!144 = !DILocation(line: 218, column: 51, scope: !7)
!145 = !DILocation(line: 218, column: 42, scope: !7)
!146 = !DILocation(line: 218, column: 33, scope: !7)
!147 = !DILocation(line: 218, column: 57, scope: !7)
!148 = !DILocation(line: 219, column: 33, scope: !7)
!149 = !DILocation(line: 219, column: 47, scope: !7)
!150 = !DILocation(line: 221, column: 33, scope: !7)
!151 = !DILocation(line: 221, column: 47, scope: !7)
!152 = !DILocation(line: 223, column: 22, scope: !7)
!153 = !DILocation(line: 224, column: 28, scope: !7)
!154 = !DILocation(line: 226, column: 22, scope: !7)
!155 = !DILocation(line: 230, column: 33, scope: !7)
!156 = !DILocation(line: 230, column: 47, scope: !7)
!157 = !DILocation(line: 232, column: 33, scope: !7)
!158 = !DILocation(line: 232, column: 47, scope: !7)
!159 = !DILocation(line: 220, column: 22, scope: !7)
!160 = !DILocation(line: 229, column: 22, scope: !7)
!161 = !DILocation(line: 231, column: 22, scope: !7)
!162 = !DILocation(line: 233, column: 22, scope: !7)
!163 = !DILocation(line: 121, column: 29, scope: !164, inlinedAt: !166)
!164 = distinct !DILexicalBlockFile(scope: !7, file: !165, discriminator: 0)
!165 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!166 = !DILocation(line: 235, column: 44, scope: !7)
!167 = !DILocation(line: 112, column: 21, scope: !164, inlinedAt: !168)
!168 = !DILocation(line: 212, column: 44, scope: !7)
!169 = !DILocation(line: 110, column: 15, scope: !164, inlinedAt: !170)
!170 = !DILocation(line: 237, column: 44, scope: !7)
!171 = !DILocation(line: 112, column: 16, scope: !164, inlinedAt: !168)
!172 = !DILocation(line: 113, column: 29, scope: !164, inlinedAt: !168)
!173 = !DILocation(line: 112, column: 21, scope: !164, inlinedAt: !174)
!174 = !DILocation(line: 186, column: 44, scope: !7)
!175 = !DILocation(line: 112, column: 16, scope: !164, inlinedAt: !174)
!176 = !DILocation(line: 113, column: 29, scope: !164, inlinedAt: !174)
!177 = !DILocation(line: 112, column: 21, scope: !164, inlinedAt: !178)
!178 = !DILocation(line: 160, column: 44, scope: !7)
!179 = !DILocation(line: 112, column: 16, scope: !164, inlinedAt: !178)
!180 = !DILocation(line: 113, column: 29, scope: !164, inlinedAt: !178)
!181 = !DILocation(line: 112, column: 21, scope: !164, inlinedAt: !182)
!182 = !DILocation(line: 134, column: 44, scope: !7)
!183 = !DILocation(line: 112, column: 16, scope: !164, inlinedAt: !182)
!184 = !DILocation(line: 113, column: 29, scope: !164, inlinedAt: !182)
!185 = !DILocation(line: 112, column: 21, scope: !164, inlinedAt: !186)
!186 = !DILocation(line: 108, column: 42, scope: !7)
!187 = !DILocation(line: 112, column: 16, scope: !164, inlinedAt: !186)
!188 = !DILocation(line: 113, column: 29, scope: !164, inlinedAt: !186)
!189 = !DILocation(line: 112, column: 21, scope: !164, inlinedAt: !190)
!190 = !DILocation(line: 82, column: 42, scope: !7)
!191 = !DILocation(line: 112, column: 16, scope: !164, inlinedAt: !190)
!192 = !DILocation(line: 113, column: 29, scope: !164, inlinedAt: !190)
!193 = !DILocation(line: 112, column: 21, scope: !164, inlinedAt: !194)
!194 = !DILocation(line: 56, column: 42, scope: !7)
!195 = !DILocation(line: 112, column: 16, scope: !164, inlinedAt: !194)
!196 = !DILocation(line: 113, column: 29, scope: !164, inlinedAt: !194)
!197 = !DILocation(line: 112, column: 21, scope: !164, inlinedAt: !170)
!198 = !DILocation(line: 112, column: 16, scope: !164, inlinedAt: !170)
!199 = !DILocation(line: 113, column: 29, scope: !164, inlinedAt: !170)
!200 = !DILocation(line: 239, column: 38, scope: !7)
!201 = !DILocation(line: 0, scope: !7)
!202 = !DILocation(line: 247, column: 25, scope: !7)
!203 = !DILocation(line: 247, column: 38, scope: !7)
!204 = !DILocation(line: 247, column: 4, scope: !7)
