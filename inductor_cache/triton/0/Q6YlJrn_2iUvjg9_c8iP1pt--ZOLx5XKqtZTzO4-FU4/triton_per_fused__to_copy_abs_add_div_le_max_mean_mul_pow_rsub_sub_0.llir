; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__to_copy_abs_add_div_le_max_mean_mul_pow_rsub_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #4, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !14
  %23 = icmp eq i32 %6, 0, !dbg !15
  %24 = and i32 %7, 1, !dbg !15
  %25 = zext nneg i32 %24 to i64, !dbg !15
  %26 = getelementptr float, ptr addrspace(3) @global_smem, i64 %25, !dbg !15
  %27 = icmp slt i32 %5, 2, !dbg !15
  %28 = sext i32 %5 to i64, !dbg !15
  %29 = getelementptr float, ptr addrspace(3) @global_smem, i64 %28, !dbg !15
  %30 = and i32 %5, 1, !dbg !15
  %31 = icmp eq i32 %30, 0, !dbg !15
  %32 = and i1 %27, %31, !dbg !15
  %33 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !12
  %34 = insertelement <2 x i32> %33, i32 %15, i64 1, !dbg !12
  %35 = bitcast <2 x i32> %34 to <2 x float>, !dbg !12
  %36 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !14
  %37 = insertelement <2 x i32> %36, i32 %21, i64 1, !dbg !14
  %38 = bitcast <2 x i32> %37 to <2 x float>, !dbg !14
  %39 = fsub <2 x float> %35, %38, !dbg !19
  %40 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %39), !dbg !20
  %41 = extractelement <2 x float> %40, i64 1, !dbg !21
  %42 = extractelement <2 x float> %40, i64 0, !dbg !21
  %43 = fmul <2 x float> %39, %39, !dbg !23
  %44 = extractelement <2 x float> %43, i64 1, !dbg !23
  %45 = fmul <2 x float> %39, %39, !dbg !23
  %46 = extractelement <2 x float> %45, i64 0, !dbg !23
  %47 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %48 = insertelement <2 x i32> %47, i32 %14, i64 1, !dbg !12
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !12
  %50 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !14
  %51 = insertelement <2 x i32> %50, i32 %20, i64 1, !dbg !14
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !14
  %53 = fsub <2 x float> %49, %52, !dbg !19
  %54 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %53), !dbg !20
  %55 = extractelement <2 x float> %54, i64 0, !dbg !21
  %56 = extractelement <2 x float> %54, i64 1, !dbg !21
  %57 = fcmp ogt float %55, %56, !dbg !24
  %58 = extractelement <2 x float> %53, i64 0, !dbg !25
  %59 = fcmp uno float %58, 0.000000e+00, !dbg !25
  %60 = or i1 %59, %57, !dbg !26
  %61 = select i1 %60, float %55, float %56, !dbg !21
  %62 = fcmp uno float %61, 0.000000e+00, !dbg !25
  %63 = fmul float %58, %58, !dbg !23
  %64 = fmul <2 x float> %53, %53, !dbg !23
  %65 = extractelement <2 x float> %64, i64 1, !dbg !23
  %66 = fcmp ogt float %61, %41, !dbg !24
  %67 = or i1 %66, %62, !dbg !26
  %68 = select i1 %67, float %61, float %41, !dbg !21
  %69 = fcmp ogt float %68, %42, !dbg !24
  %70 = fcmp uno float %68, 0.000000e+00, !dbg !25
  %71 = or i1 %69, %70, !dbg !26
  %72 = select i1 %71, float %68, float %42, !dbg !21
  %73 = bitcast float %72 to i32, !dbg !15
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 16, i32 31), !dbg !15
  %75 = bitcast i32 %74 to float, !dbg !15
  %76 = fcmp ogt float %72, %75, !dbg !24
  %77 = fcmp uno float %72, 0.000000e+00, !dbg !25
  %78 = or i1 %76, %77, !dbg !26
  %79 = select i1 %78, float %72, float %75, !dbg !21
  %80 = bitcast float %79 to i32, !dbg !15
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !15
  %82 = bitcast i32 %81 to float, !dbg !15
  %83 = fcmp ogt float %79, %82, !dbg !24
  %84 = fcmp uno float %79, 0.000000e+00, !dbg !25
  %85 = or i1 %83, %84, !dbg !26
  %86 = select i1 %85, float %79, float %82, !dbg !21
  %87 = bitcast float %86 to i32, !dbg !15
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 4, i32 31), !dbg !15
  %89 = bitcast i32 %88 to float, !dbg !15
  %90 = fcmp ogt float %86, %89, !dbg !24
  %91 = fcmp uno float %86, 0.000000e+00, !dbg !25
  %92 = or i1 %90, %91, !dbg !26
  %93 = select i1 %92, float %86, float %89, !dbg !21
  %94 = bitcast float %93 to i32, !dbg !15
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !15
  %96 = bitcast i32 %95 to float, !dbg !15
  %97 = fcmp ogt float %93, %96, !dbg !24
  %98 = fcmp uno float %93, 0.000000e+00, !dbg !25
  %99 = or i1 %97, %98, !dbg !26
  %100 = select i1 %99, float %93, float %96, !dbg !21
  %101 = bitcast float %100 to i32, !dbg !15
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !15
  %103 = bitcast i32 %102 to float, !dbg !15
  %104 = fcmp ogt float %100, %103, !dbg !24
  %105 = fcmp uno float %100, 0.000000e+00, !dbg !25
  %106 = or i1 %104, %105, !dbg !26
  %107 = select i1 %106, i32 %101, i32 %102, !dbg !21
  %108 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !15
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %108, i1 %23) #4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %29, i1 %27) #4, !dbg !15
  %110 = bitcast i32 %109 to float, !dbg !15
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !15
  %112 = bitcast i32 %111 to float, !dbg !15
  %113 = fcmp ogt float %110, %112, !dbg !24
  %114 = fcmp uno float %110, 0.000000e+00, !dbg !25
  %115 = or i1 %114, %113, !dbg !26
  %116 = select i1 %115, i32 %109, i32 %111, !dbg !21
  %117 = insertelement <1 x i32> poison, i32 %116, i64 0, !dbg !15
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %117, i1 %32) #4, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !15
  %118 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !15
  %119 = fadd float %118, 0.000000e+00, !dbg !27
  %120 = fmul float %119, 0x3FC99999A0000000, !dbg !29
  %121 = insertelement <2 x float> poison, float %120, i64 0, !dbg !30
  %122 = shufflevector <2 x float> %121, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !30
  %123 = fcmp ole <2 x float> %54, %122, !dbg !30
  %124 = fcmp ole <2 x float> %40, %122, !dbg !30
  %125 = uitofp <2 x i1> %123 to <2 x float>, !dbg !31
  %126 = uitofp <2 x i1> %124 to <2 x float>, !dbg !31
  %127 = fmul <2 x float> %54, %125, !dbg !32
  %128 = fmul <2 x float> %40, %126, !dbg !32
  %129 = fsub <2 x float> splat (float 1.000000e+00), %125, !dbg !33
  %130 = fsub <2 x float> splat (float 1.000000e+00), %126, !dbg !33
  %131 = fmul float %120, %120, !dbg !34
  %132 = fadd float %63, %131, !dbg !35
  %133 = fadd float %65, %131, !dbg !35
  %134 = fadd float %44, %131, !dbg !35
  %135 = fadd float %46, %131, !dbg !35
  %136 = fmul float %120, 2.000000e+00, !dbg !36
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %136) #4, !dbg !37
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %136) #4, !dbg !37
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %136) #4, !dbg !37
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %136) #4, !dbg !37
  %141 = insertelement <2 x float> poison, float %137, i64 0, !dbg !38
  %142 = insertelement <2 x float> %141, float %138, i64 1, !dbg !38
  %143 = fmul <2 x float> %142, %129, !dbg !38
  %144 = insertelement <2 x float> poison, float %140, i64 0, !dbg !38
  %145 = insertelement <2 x float> %144, float %139, i64 1, !dbg !38
  %146 = fmul <2 x float> %145, %130, !dbg !38
  %147 = fadd <2 x float> %127, %143, !dbg !39
  %148 = fadd <2 x float> %128, %146, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %shift = shufflevector <2 x float> %147, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %149 = fadd <2 x float> %147, %shift, !dbg !44
  %shift1 = shufflevector <2 x float> %148, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %150 = fadd <2 x float> %shift1, %149, !dbg !44
  %151 = fadd <2 x float> %148, %150, !dbg !44
  %152 = extractelement <2 x float> %151, i64 0, !dbg !44
  %153 = bitcast float %152 to i32, !dbg !40
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 16, i32 31), !dbg !40
  %155 = bitcast i32 %154 to float, !dbg !40
  %156 = fadd float %152, %155, !dbg !44
  %157 = bitcast float %156 to i32, !dbg !40
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 8, i32 31), !dbg !40
  %159 = bitcast i32 %158 to float, !dbg !40
  %160 = fadd float %156, %159, !dbg !44
  %161 = bitcast float %160 to i32, !dbg !40
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !40
  %163 = bitcast i32 %162 to float, !dbg !40
  %164 = fadd float %160, %163, !dbg !44
  %165 = bitcast float %164 to i32, !dbg !40
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !40
  %167 = bitcast i32 %166 to float, !dbg !40
  %168 = fadd float %164, %167, !dbg !44
  %169 = bitcast float %168 to i32, !dbg !40
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !40
  %171 = bitcast i32 %170 to float, !dbg !40
  %172 = fadd float %168, %171, !dbg !44
  %173 = bitcast float %172 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %173, i1 %23) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %174 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %29, i1 %27) #4, !dbg !40
  %175 = bitcast i32 %174 to float, !dbg !40
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !40
  %177 = bitcast i32 %176 to float, !dbg !40
  %178 = fadd float %175, %177, !dbg !44
  %179 = bitcast float %178 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %179, i1 %32) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %180 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %181 = fadd float %180, 0.000000e+00, !dbg !46
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float 2.560000e+02) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %urem = and i32 %5, 63, !dbg !50
  %183 = icmp eq i32 %urem, 0, !dbg !50
  %184 = bitcast float %182 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %0, i1 %183) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvj5d4a2l3ak2qjqjuapyspgcrhlui3ajjzc2iiytbbf7h4bbrpx.py", directory: "inductor_cache/vj")
!4 = !{ptr @triton_per_fused__to_copy_abs_add_div_le_max_mean_mul_pow_rsub_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_abs_add_div_le_max_mean_mul_pow_rsub_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_abs_add_div_le_max_mean_mul_pow_rsub_sub_0", linkageName: "triton_per_fused__to_copy_abs_add_div_le_max_mean_mul_pow_rsub_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 131, column: 29, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !7, file: !17, discriminator: 0)
!17 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!18 = !DILocation(line: 36, column: 70, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 23, scope: !7)
!21 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !18)
!22 = distinct !DILexicalBlockFile(scope: !16, file: !17, discriminator: 0)
!23 = !DILocation(line: 44, column: 19, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !18)
!25 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !18)
!26 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !18)
!27 = !DILocation(line: 73, column: 15, scope: !16, inlinedAt: !28)
!28 = !DILocation(line: 36, column: 44, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 19, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 48, column: 19, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = !DILocation(line: 53, column: 59, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !43)
!45 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!46 = !DILocation(line: 73, column: 15, scope: !16, inlinedAt: !47)
!47 = !DILocation(line: 53, column: 45, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 4, scope: !7)
!50 = !DILocation(line: 57, column: 63, scope: !7)
!51 = !DILocation(line: 57, column: 4, scope: !7)
