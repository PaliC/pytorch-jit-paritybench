; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %11, 32, !dbg !12
  %14 = or disjoint i32 %11, 48, !dbg !12
  %15 = shl i32 %9, 2, !dbg !12
  %16 = and i32 %15, 60, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %12, !dbg !13
  %19 = or disjoint i32 %8, %13, !dbg !13
  %20 = or disjoint i32 %8, %14, !dbg !13
  %21 = or disjoint i32 %8, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = shl i32 %22, 6, !dbg !15
  %24 = or disjoint i32 %23, %16, !dbg !16
  %25 = or disjoint i32 %23, %11, !dbg !16
  %26 = or disjoint i32 %23, %12, !dbg !16
  %27 = or disjoint i32 %23, %13, !dbg !16
  %28 = or disjoint i32 %23, %14, !dbg !16
  %29 = icmp slt i32 %24, 64, !dbg !17
  %30 = icmp slt i32 %25, 64, !dbg !17
  %31 = icmp slt i32 %26, 64, !dbg !17
  %32 = icmp slt i32 %27, 64, !dbg !17
  %33 = icmp slt i32 %28, 64, !dbg !17
  %.frozen = freeze i32 %21, !dbg !18
  %34 = sdiv i32 %.frozen, 4096, !dbg !18
  %35 = mul i32 %34, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %35, !dbg !19
  %36 = shl i32 %17, 6, !dbg !20
  %37 = shl i32 %18, 6, !dbg !20
  %38 = shl i32 %19, 6, !dbg !20
  %39 = shl i32 %20, 6, !dbg !20
  %40 = add i32 %24, %36, !dbg !21
  %41 = add i32 %24, %37, !dbg !21
  %42 = add i32 %24, %38, !dbg !21
  %43 = add i32 %24, %39, !dbg !21
  %44 = sext i32 %40 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = sext i32 %41 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = sext i32 %42 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = sext i32 %43 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %29) #2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = bitcast i32 %54 to float, !dbg !23
  %59 = bitcast i32 %55 to float, !dbg !23
  %60 = bitcast i32 %56 to float, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %29) #2, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = bitcast i32 %65 to float, !dbg !23
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %29) #2, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !23
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !23
  %75 = bitcast i32 %71 to float, !dbg !23
  %76 = bitcast i32 %72 to float, !dbg !23
  %77 = bitcast i32 %73 to float, !dbg !23
  %78 = bitcast i32 %74 to float, !dbg !23
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %29) #2, !dbg !23
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !23
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !23
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !23
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !23
  %84 = bitcast i32 %80 to float, !dbg !23
  %85 = bitcast i32 %81 to float, !dbg !23
  %86 = bitcast i32 %82 to float, !dbg !23
  %87 = bitcast i32 %83 to float, !dbg !23
  %88 = sext i32 %24 to i64, !dbg !24
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !24
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 %29) #2, !dbg !25
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !25
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !25
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !25
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !25
  %95 = bitcast i32 %91 to float, !dbg !25
  %96 = bitcast i32 %92 to float, !dbg !25
  %97 = bitcast i32 %93 to float, !dbg !25
  %98 = bitcast i32 %94 to float, !dbg !25
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !26
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !26
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !26
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !26
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %29) #2, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !27
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !27
  %108 = bitcast i32 %104 to float, !dbg !27
  %109 = bitcast i32 %105 to float, !dbg !27
  %110 = bitcast i32 %106 to float, !dbg !27
  %111 = bitcast i32 %107 to float, !dbg !27
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %29) #2, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !27
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !27
  %117 = bitcast i32 %113 to float, !dbg !27
  %118 = bitcast i32 %114 to float, !dbg !27
  %119 = bitcast i32 %115 to float, !dbg !27
  %120 = bitcast i32 %116 to float, !dbg !27
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %29) #2, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !27
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !27
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !27
  %126 = bitcast i32 %122 to float, !dbg !27
  %127 = bitcast i32 %123 to float, !dbg !27
  %128 = bitcast i32 %124 to float, !dbg !27
  %129 = bitcast i32 %125 to float, !dbg !27
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %29) #2, !dbg !27
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !27
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !27
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !27
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !27
  %135 = bitcast i32 %131 to float, !dbg !27
  %136 = bitcast i32 %132 to float, !dbg !27
  %137 = bitcast i32 %133 to float, !dbg !27
  %138 = bitcast i32 %134 to float, !dbg !27
  %139 = fadd float %57, %95, !dbg !28
  %140 = fadd float %58, %96, !dbg !28
  %141 = fadd float %59, %97, !dbg !28
  %142 = fadd float %60, %98, !dbg !28
  %143 = fadd float %66, %95, !dbg !28
  %144 = fadd float %67, %96, !dbg !28
  %145 = fadd float %68, %97, !dbg !28
  %146 = fadd float %69, %98, !dbg !28
  %147 = fadd float %75, %95, !dbg !28
  %148 = fadd float %76, %96, !dbg !28
  %149 = fadd float %77, %97, !dbg !28
  %150 = fadd float %78, %98, !dbg !28
  %151 = fadd float %84, %95, !dbg !28
  %152 = fadd float %85, %96, !dbg !28
  %153 = fadd float %86, %97, !dbg !28
  %154 = fadd float %87, %98, !dbg !28
  %155 = fadd float %139, %108, !dbg !29
  %156 = fadd float %140, %109, !dbg !29
  %157 = fadd float %141, %110, !dbg !29
  %158 = fadd float %142, %111, !dbg !29
  %159 = fadd float %143, %117, !dbg !29
  %160 = fadd float %144, %118, !dbg !29
  %161 = fadd float %145, %119, !dbg !29
  %162 = fadd float %146, %120, !dbg !29
  %163 = fadd float %147, %126, !dbg !29
  %164 = fadd float %148, %127, !dbg !29
  %165 = fadd float %149, %128, !dbg !29
  %166 = fadd float %150, %129, !dbg !29
  %167 = fadd float %151, %135, !dbg !29
  %168 = fadd float %152, %136, !dbg !29
  %169 = fadd float %153, %137, !dbg !29
  %170 = fadd float %154, %138, !dbg !29
  %171 = shl i32 %25, 12, !dbg !30
  %172 = shl i32 %26, 12, !dbg !30
  %173 = shl i32 %27, 12, !dbg !30
  %174 = shl i32 %28, 12, !dbg !30
  %175 = shl i32 %34, 18, !dbg !31
  %176 = add i32 %175, %.decomposed, !dbg !32
  %177 = add i32 %176, %171, !dbg !33
  %178 = add i32 %176, %172, !dbg !33
  %179 = add i32 %176, %173, !dbg !33
  %180 = add i32 %176, %174, !dbg !33
  %181 = sext i32 %177 to i64, !dbg !34
  %182 = getelementptr float, ptr addrspace(1) %3, i64 %181, !dbg !34
  %183 = sext i32 %178 to i64, !dbg !34
  %184 = getelementptr float, ptr addrspace(1) %3, i64 %183, !dbg !34
  %185 = sext i32 %179 to i64, !dbg !34
  %186 = getelementptr float, ptr addrspace(1) %3, i64 %185, !dbg !34
  %187 = sext i32 %180 to i64, !dbg !34
  %188 = getelementptr float, ptr addrspace(1) %3, i64 %187, !dbg !34
  %189 = shl i32 %9, 8, !dbg !35
  %190 = and i32 %189, 3840, !dbg !35
  %191 = or disjoint i32 %190, %11, !dbg !35
  %192 = and i32 %15, 1020, !dbg !35
  %193 = lshr exact i32 %190, 2, !dbg !35
  %194 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %193, !dbg !35
  %195 = getelementptr float, ptr addrspace(3) %194, i32 %191, !dbg !35
  %196 = bitcast float %155 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !35
  %197 = or disjoint i32 %191, 64, !dbg !35
  %198 = lshr i32 %197, 4, !dbg !35
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %198, !dbg !35
  %200 = getelementptr float, ptr addrspace(3) %199, i32 %197, !dbg !35
  %201 = bitcast float %156 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #2, !dbg !35
  %202 = or disjoint i32 %191, 128, !dbg !35
  %203 = lshr i32 %202, 4, !dbg !35
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !35
  %205 = getelementptr float, ptr addrspace(3) %204, i32 %202, !dbg !35
  %206 = bitcast float %157 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !35
  %207 = or disjoint i32 %191, 192, !dbg !35
  %208 = lshr i32 %207, 4, !dbg !35
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !35
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %207, !dbg !35
  %211 = bitcast float %158 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !35
  %212 = or disjoint i32 %191, 16, !dbg !35
  %213 = getelementptr float, ptr addrspace(3) %194, i32 %212, !dbg !35
  %214 = bitcast float %159 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 true) #2, !dbg !35
  %215 = or disjoint i32 %191, 80, !dbg !35
  %216 = lshr i32 %215, 4, !dbg !35
  %217 = and i32 %216, 244, !dbg !35
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !35
  %219 = getelementptr float, ptr addrspace(3) %218, i32 %215, !dbg !35
  %220 = bitcast float %160 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #2, !dbg !35
  %221 = or disjoint i32 %191, 144, !dbg !35
  %222 = lshr i32 %221, 4, !dbg !35
  %223 = and i32 %222, 248, !dbg !35
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %223, !dbg !35
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %221, !dbg !35
  %226 = bitcast float %161 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !35
  %227 = or disjoint i32 %191, 208, !dbg !35
  %228 = lshr i32 %227, 4, !dbg !35
  %229 = and i32 %228, 252, !dbg !35
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %229, !dbg !35
  %231 = getelementptr float, ptr addrspace(3) %230, i32 %227, !dbg !35
  %232 = bitcast float %162 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #2, !dbg !35
  %233 = or disjoint i32 %191, 32, !dbg !35
  %234 = getelementptr float, ptr addrspace(3) %194, i32 %233, !dbg !35
  %235 = bitcast float %163 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #2, !dbg !35
  %236 = or disjoint i32 %191, 96, !dbg !35
  %237 = lshr i32 %236, 4, !dbg !35
  %238 = and i32 %237, 244, !dbg !35
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !35
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %236, !dbg !35
  %241 = bitcast float %164 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !35
  %242 = or disjoint i32 %191, 160, !dbg !35
  %243 = lshr i32 %242, 4, !dbg !35
  %244 = and i32 %243, 248, !dbg !35
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i32 %244, !dbg !35
  %246 = getelementptr float, ptr addrspace(3) %245, i32 %242, !dbg !35
  %247 = bitcast float %165 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #2, !dbg !35
  %248 = or disjoint i32 %191, 224, !dbg !35
  %249 = lshr i32 %248, 4, !dbg !35
  %250 = and i32 %249, 252, !dbg !35
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %250, !dbg !35
  %252 = getelementptr float, ptr addrspace(3) %251, i32 %248, !dbg !35
  %253 = bitcast float %166 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #2, !dbg !35
  %254 = or disjoint i32 %191, 48, !dbg !35
  %255 = getelementptr float, ptr addrspace(3) %194, i32 %254, !dbg !35
  %256 = bitcast float %167 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #2, !dbg !35
  %257 = or disjoint i32 %191, 112, !dbg !35
  %258 = lshr i32 %257, 4, !dbg !35
  %259 = and i32 %258, 244, !dbg !35
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i32 %259, !dbg !35
  %261 = getelementptr float, ptr addrspace(3) %260, i32 %257, !dbg !35
  %262 = bitcast float %168 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #2, !dbg !35
  %263 = or disjoint i32 %191, 176, !dbg !35
  %264 = lshr i32 %263, 4, !dbg !35
  %265 = and i32 %264, 248, !dbg !35
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i32 %265, !dbg !35
  %267 = getelementptr float, ptr addrspace(3) %266, i32 %263, !dbg !35
  %268 = bitcast float %169 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #2, !dbg !35
  %269 = or disjoint i32 %191, 240, !dbg !35
  %270 = lshr i32 %269, 4, !dbg !35
  %271 = and i32 %270, 252, !dbg !35
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !35
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %269, !dbg !35
  %274 = bitcast float %170 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %275 = lshr i32 %15, 4, !dbg !35
  %276 = and i32 %275, 60, !dbg !35
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !35
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %192, !dbg !35
  %279 = or disjoint i32 %192, 1024, !dbg !35
  %280 = lshr i32 %279, 4, !dbg !35
  %281 = and i32 %280, 124, !dbg !35
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !35
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %279, !dbg !35
  %284 = load <4 x i32>, ptr addrspace(3) %283, align 16, !dbg !35
  %285 = or disjoint i32 %192, 2048, !dbg !35
  %286 = lshr i32 %285, 4, !dbg !35
  %287 = and i32 %286, 188, !dbg !35
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %287, !dbg !35
  %289 = getelementptr inbounds float, ptr addrspace(3) %288, i32 %285, !dbg !35
  %290 = load <4 x i32>, ptr addrspace(3) %289, align 16, !dbg !35
  %291 = or disjoint i32 %192, 3072, !dbg !35
  %292 = lshr i32 %291, 4, !dbg !35
  %293 = and i32 %292, 252, !dbg !35
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !35
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %291, !dbg !35
  %296 = load <4 x i32>, ptr addrspace(3) %295, align 16, !dbg !35
  %.extract = load i32, ptr addrspace(3) %278, align 16, !dbg !35
  %297 = getelementptr inbounds i8, ptr addrspace(3) %278, i32 4, !dbg !35
  %.extract16 = load i32, ptr addrspace(3) %297, align 4, !dbg !35
  %298 = getelementptr inbounds i8, ptr addrspace(3) %278, i32 8, !dbg !35
  %.extract17 = load i32, ptr addrspace(3) %298, align 8, !dbg !35
  %299 = getelementptr inbounds i8, ptr addrspace(3) %278, i32 12, !dbg !35
  %.extract18 = load i32, ptr addrspace(3) %299, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %182, i1 %30) #2, !dbg !35
  %.extract19 = extractelement <4 x i32> %284, i64 0, !dbg !35
  %.extract20 = extractelement <4 x i32> %284, i64 1, !dbg !35
  %.extract21 = extractelement <4 x i32> %284, i64 2, !dbg !35
  %.extract22 = extractelement <4 x i32> %284, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %184, i1 %31) #2, !dbg !35
  %.extract23 = extractelement <4 x i32> %290, i64 0, !dbg !35
  %.extract24 = extractelement <4 x i32> %290, i64 1, !dbg !35
  %.extract25 = extractelement <4 x i32> %290, i64 2, !dbg !35
  %.extract26 = extractelement <4 x i32> %290, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %186, i1 %32) #2, !dbg !35
  %.extract27 = extractelement <4 x i32> %296, i64 0, !dbg !35
  %.extract28 = extractelement <4 x i32> %296, i64 1, !dbg !35
  %.extract29 = extractelement <4 x i32> %296, i64 2, !dbg !35
  %.extract30 = extractelement <4 x i32> %296, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %188, i1 %33) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2azcitplqiajftz4frpjloezo4q5y4qt7zgz5o3ag4yfttc72qr.py", directory: "inductor_cache/2a")
!4 = !{ptr @triton_poi_fused_add_convolution_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_9", linkageName: "triton_poi_fused_add_convolution_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 43, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 35, scope: !7)
!31 = !DILocation(line: 37, column: 47, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 40, scope: !7)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 58, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
