; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = srem i32 %14, 256, !dbg !14
  %16 = sext i32 %14 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !16
  %19 = sext i32 %15 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !19
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !21
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !22
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !22
  %30 = bitcast i32 %26 to float, !dbg !22
  %31 = bitcast i32 %27 to float, !dbg !22
  %32 = bitcast i32 %28 to float, !dbg !22
  %33 = bitcast i32 %29 to float, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !25
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !26
  %38 = fadd float %30, 0x3EE4F8B580000000, !dbg !27
  %39 = fadd float %31, 0x3EE4F8B580000000, !dbg !27
  %40 = fadd float %32, 0x3EE4F8B580000000, !dbg !27
  %41 = fadd float %33, 0x3EE4F8B580000000, !dbg !27
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %42, 0, !dbg !28
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %43, 0, !dbg !28
  br i1 %.not.i, label %49, label %44, !dbg !28

44:                                               ; preds = %8
  br i1 %.not1.i, label %47, label %45, !dbg !28

45:                                               ; preds = %44
  %46 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

47:                                               ; preds = %44
  %48 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

49:                                               ; preds = %8
  br i1 %.not1.i, label %52, label %50, !dbg !28

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %45, %47, %50, %52
  %.0.i = phi float [ %46, %45 ], [ %48, %47 ], [ %51, %50 ], [ %53, %52 ], !dbg !28
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %54, 0, !dbg !28
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %55, 0, !dbg !28
  br i1 %.not.i1, label %61, label %56, !dbg !28

56:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %59, label %57, !dbg !28

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %64, label %62, !dbg !28

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %57, %59, %62, %64
  %.0.i3 = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !28
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %66, 0, !dbg !28
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %67, 0, !dbg !28
  br i1 %.not.i6, label %73, label %68, !dbg !28

68:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %71, label %69, !dbg !28

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

73:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %76, label %74, !dbg !28

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %69, %71, %74, %76
  %.0.i8 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !28
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %78, 0, !dbg !28
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %79, 0, !dbg !28
  br i1 %.not.i11, label %85, label %80, !dbg !28

80:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %83, label %81, !dbg !28

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

85:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %88, label %86, !dbg !28

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %81, %83, %86, %88
  %.0.i13 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %91 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %92 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !20
  %93 = bitcast i32 %92 to float, !dbg !20
  %94 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %95 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %96 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !20
  %97 = bitcast i32 %96 to float, !dbg !20
  %98 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %99 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %100 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !20
  %101 = bitcast i32 %100 to float, !dbg !20
  %102 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %103 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %104 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !16
  %105 = insertelement <4 x i32> %104, i32 %98, i64 1, !dbg !16
  %106 = insertelement <4 x i32> %105, i32 %94, i64 2, !dbg !16
  %107 = insertelement <4 x i32> %106, i32 %90, i64 3, !dbg !16
  %108 = bitcast <4 x i32> %107 to <4 x float>, !dbg !16
  %109 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !18
  %110 = insertelement <4 x i32> %109, i32 %99, i64 1, !dbg !18
  %111 = insertelement <4 x i32> %110, i32 %95, i64 2, !dbg !18
  %112 = insertelement <4 x i32> %111, i32 %91, i64 3, !dbg !18
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !18
  %114 = fadd <4 x float> %108, %113, !dbg !29
  %115 = fcmp olt <4 x float> %114, zeroinitializer, !dbg !30
  %116 = extractelement <4 x i1> %115, i64 3, !dbg !34
  %117 = extractelement <4 x float> %114, i64 3, !dbg !35
  %118 = select i1 %116, float 0.000000e+00, float %117, !dbg !34
  %119 = fsub float %118, %93, !dbg !36
  %120 = extractelement <4 x i1> %115, i64 2, !dbg !34
  %121 = extractelement <4 x float> %114, i64 2, !dbg !35
  %122 = select i1 %120, float 0.000000e+00, float %121, !dbg !34
  %123 = fsub float %122, %97, !dbg !36
  %124 = extractelement <4 x i1> %115, i64 1, !dbg !34
  %125 = extractelement <4 x float> %114, i64 1, !dbg !35
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !34
  %127 = fsub float %126, %101, !dbg !36
  %128 = extractelement <4 x i1> %115, i64 0, !dbg !34
  %129 = extractelement <4 x float> %114, i64 0, !dbg !35
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !20
  %132 = bitcast i32 %131 to float, !dbg !20
  %133 = fsub float %130, %132, !dbg !36
  %134 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !26
  %135 = bitcast i32 %134 to float, !dbg !26
  %136 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !26
  %137 = bitcast i32 %136 to float, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !26
  %139 = bitcast i32 %138 to float, !dbg !26
  %140 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !26
  %141 = bitcast i32 %140 to float, !dbg !26
  %142 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %143 = bitcast i32 %142 to float, !dbg !24
  %144 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %145 = bitcast i32 %144 to float, !dbg !24
  %146 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %147 = bitcast i32 %146 to float, !dbg !24
  %148 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %149 = bitcast i32 %148 to float, !dbg !24
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %154 = fmul float %133, %150, !dbg !38
  %155 = fmul float %127, %151, !dbg !38
  %156 = fmul float %123, %152, !dbg !38
  %157 = fmul float %119, %153, !dbg !38
  %158 = fmul float %154, %149, !dbg !39
  %159 = fmul float %155, %147, !dbg !39
  %160 = fmul float %156, %145, !dbg !39
  %161 = fmul float %157, %143, !dbg !39
  %162 = fadd float %158, %141, !dbg !40
  %163 = fadd float %159, %139, !dbg !40
  %164 = fadd float %160, %137, !dbg !40
  %165 = fadd float %161, %135, !dbg !40
  %166 = bitcast float %129 to i32, !dbg !35
  %167 = bitcast float %125 to i32, !dbg !35
  %168 = bitcast float %121 to i32, !dbg !35
  %169 = bitcast float %117 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %166, i32 %167, i32 %168, i32 %169, ptr addrspace(1) %17, i1 true) #3, !dbg !35
  %170 = getelementptr float, ptr addrspace(1) %6, i64 %16, !dbg !41
  %171 = bitcast float %162 to i32, !dbg !42
  %172 = bitcast float %163 to i32, !dbg !42
  %173 = bitcast float %164 to i32, !dbg !42
  %174 = bitcast float %165 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %171, i32 %172, i32 %173, i32 %174, ptr addrspace(1) %170, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csxaeici373aujwnyeuuvgodpuktv7wuwvcub6r4o5o4drrhi32h.py", directory: "inductor_cache/sx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 27, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 34, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 46, column: 39, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 20, scope: !7)
!38 = !DILocation(line: 43, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 25, scope: !7)
!42 = !DILocation(line: 47, column: 37, scope: !7)
!43 = !DILocation(line: 47, column: 4, scope: !7)
