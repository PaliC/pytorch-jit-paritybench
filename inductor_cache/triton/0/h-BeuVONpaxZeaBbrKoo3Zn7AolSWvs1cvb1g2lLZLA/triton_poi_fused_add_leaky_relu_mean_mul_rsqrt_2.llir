; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_leaky_relu_mean_mul_rsqrt_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 256, !dbg !14
  %11 = srem i32 %9, 16, !dbg !15
  %12 = sdiv i32 %9, 64, !dbg !16
  %13 = sext i32 %9 to i64, !dbg !17
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !17
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 %10) #3, !dbg !18
  %16 = shl nsw i32 %12, 6, !dbg !19
  %17 = add i32 %16, %11, !dbg !20
  %18 = sext i32 %17 to i64, !dbg !21
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !21
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %10) #3, !dbg !22
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !22
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !22
  %23 = bitcast i32 %21 to float, !dbg !22
  %24 = bitcast i32 %22 to float, !dbg !22
  %25 = add i32 %17, 16, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %10) #3, !dbg !25
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %31 = bitcast i32 %29 to float, !dbg !25
  %32 = bitcast i32 %30 to float, !dbg !25
  %33 = add i32 %17, 32, !dbg !26
  %34 = sext i32 %33 to i64, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !27
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %10) #3, !dbg !28
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !28
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !28
  %39 = bitcast i32 %37 to float, !dbg !28
  %40 = bitcast i32 %38 to float, !dbg !28
  %41 = add i32 %17, 48, !dbg !29
  %42 = sext i32 %41 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !30
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %10) #3, !dbg !31
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !31
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !31
  %47 = bitcast i32 %45 to float, !dbg !31
  %48 = bitcast i32 %46 to float, !dbg !31
  %49 = fcmp ogt float %23, 0.000000e+00, !dbg !32
  %50 = fcmp ogt float %24, 0.000000e+00, !dbg !32
  %51 = fmul float %23, 0x3FC99999A0000000, !dbg !33
  %52 = fmul float %24, 0x3FC99999A0000000, !dbg !33
  %53 = select i1 %49, float %23, float %51, !dbg !34
  %54 = select i1 %50, float %24, float %52, !dbg !34
  %55 = fmul float %53, %53, !dbg !35
  %56 = fmul float %54, %54, !dbg !35
  %57 = fcmp ogt float %31, 0.000000e+00, !dbg !36
  %58 = fcmp ogt float %32, 0.000000e+00, !dbg !36
  %59 = fmul float %31, 0x3FC99999A0000000, !dbg !37
  %60 = fmul float %32, 0x3FC99999A0000000, !dbg !37
  %61 = select i1 %57, float %31, float %59, !dbg !38
  %62 = select i1 %58, float %32, float %60, !dbg !38
  %63 = fmul float %61, %61, !dbg !39
  %64 = fmul float %62, %62, !dbg !39
  %65 = fadd float %55, %63, !dbg !40
  %66 = fadd float %56, %64, !dbg !40
  %67 = fcmp ogt float %39, 0.000000e+00, !dbg !41
  %68 = fcmp ogt float %40, 0.000000e+00, !dbg !41
  %69 = fmul float %39, 0x3FC99999A0000000, !dbg !42
  %70 = fmul float %40, 0x3FC99999A0000000, !dbg !42
  %71 = select i1 %67, float %39, float %69, !dbg !43
  %72 = select i1 %68, float %40, float %70, !dbg !43
  %73 = fmul float %71, %71, !dbg !44
  %74 = fmul float %72, %72, !dbg !44
  %75 = fadd float %65, %73, !dbg !45
  %76 = fadd float %66, %74, !dbg !45
  %77 = fcmp ogt float %47, 0.000000e+00, !dbg !46
  %78 = fcmp ogt float %48, 0.000000e+00, !dbg !46
  %79 = fmul float %47, 0x3FC99999A0000000, !dbg !47
  %80 = fmul float %48, 0x3FC99999A0000000, !dbg !47
  %81 = select i1 %77, float %47, float %79, !dbg !48
  %82 = select i1 %78, float %48, float %80, !dbg !48
  %83 = fmul float %81, %81, !dbg !49
  %84 = fmul float %82, %82, !dbg !49
  %85 = fadd float %75, %83, !dbg !50
  %86 = fadd float %76, %84, !dbg !50
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 4.000000e+00) #3, !dbg !51
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 4.000000e+00) #3, !dbg !51
  %89 = fadd float %87, 0x3E45798EE0000000, !dbg !52
  %90 = fadd float %88, 0x3E45798EE0000000, !dbg !52
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %91, 0, !dbg !53
  br i1 %.not.i, label %94, label %92, !dbg !53

92:                                               ; preds = %3
  %93 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %89), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

94:                                               ; preds = %3
  %95 = tail call float @llvm.nvvm.rsqrt.approx.f(float %89), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

__nv_rsqrtf.exit:                                 ; preds = %92, %94
  %.0.i = phi float [ %93, %92 ], [ %95, %94 ], !dbg !53
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %96, 0, !dbg !53
  br i1 %.not.i1, label %99, label %97, !dbg !53

97:                                               ; preds = %__nv_rsqrtf.exit
  %98 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %90), !dbg !53
  br label %__nv_rsqrtf.exit3, !dbg !53

99:                                               ; preds = %__nv_rsqrtf.exit
  %100 = tail call float @llvm.nvvm.rsqrt.approx.f(float %90), !dbg !53
  br label %__nv_rsqrtf.exit3, !dbg !53

__nv_rsqrtf.exit3:                                ; preds = %97, %99
  %.0.i2 = phi float [ %98, %97 ], [ %100, %99 ], !dbg !53
  %101 = extractvalue { i32, i32 } %15, 1, !dbg !18
  %102 = bitcast i32 %101 to float, !dbg !18
  %103 = fcmp ogt float %102, 0.000000e+00, !dbg !54
  %104 = fmul float %102, 0x3FC99999A0000000, !dbg !55
  %105 = select i1 %103, float %102, float %104, !dbg !56
  %106 = extractvalue { i32, i32 } %15, 0, !dbg !18
  %107 = bitcast i32 %106 to float, !dbg !18
  %108 = fcmp ogt float %107, 0.000000e+00, !dbg !54
  %109 = fmul float %107, 0x3FC99999A0000000, !dbg !55
  %110 = select i1 %108, float %107, float %109, !dbg !56
  %111 = fmul float %110, %.0.i, !dbg !57
  %112 = fmul float %105, %.0.i2, !dbg !57
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !58
  %114 = bitcast float %111 to i32, !dbg !59
  %115 = bitcast float %112 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %114, i32 %115, ptr addrspace(1) %113, i1 %10) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjcwl5dirhmcku52f2mww2kq6cjhvmwmvralc67pp6icgktf6loz.py", directory: "inductor_cache/jc")
!4 = !{ptr @triton_poi_fused_add_leaky_relu_mean_mul_rsqrt_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_leaky_relu_mean_mul_rsqrt_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_leaky_relu_mean_mul_rsqrt_2", linkageName: "triton_poi_fused_add_leaky_relu_mean_mul_rsqrt_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 31, scope: !7)
!25 = !DILocation(line: 29, column: 49, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 49, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 49, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 32, scope: !7)
!35 = !DILocation(line: 40, column: 19, scope: !7)
!36 = !DILocation(line: 41, column: 20, scope: !7)
!37 = !DILocation(line: 42, column: 20, scope: !7)
!38 = !DILocation(line: 43, column: 35, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 35, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 35, scope: !7)
!49 = !DILocation(line: 54, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 28, scope: !7)
!54 = !DILocation(line: 33, column: 18, scope: !7)
!55 = !DILocation(line: 35, column: 18, scope: !7)
!56 = !DILocation(line: 36, column: 32, scope: !7)
!57 = !DILocation(line: 61, column: 19, scope: !7)
!58 = !DILocation(line: 62, column: 25, scope: !7)
!59 = !DILocation(line: 62, column: 37, scope: !7)
!60 = !DILocation(line: 62, column: 4, scope: !7)
