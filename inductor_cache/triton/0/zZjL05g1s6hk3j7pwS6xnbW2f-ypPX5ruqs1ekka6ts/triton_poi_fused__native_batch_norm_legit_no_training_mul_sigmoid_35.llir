; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = and i32 %8, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = or disjoint i32 %7, %14, !dbg !13
  %19 = icmp slt i32 %15, 384, !dbg !14
  %20 = icmp slt i32 %16, 384, !dbg !14
  %21 = icmp slt i32 %17, 384, !dbg !14
  %22 = icmp slt i32 %18, 384, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 2, !dbg !16
  %25 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %25, 1, !dbg !17
  %26 = or disjoint i32 %24, %.lobit, !dbg !18
  %27 = or disjoint i32 %26, 2, !dbg !18
  %28 = icmp slt i32 %26, 4, !dbg !19
  %29 = icmp slt i32 %27, 4, !dbg !19
  %30 = icmp slt i32 %24, 4, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %31 = sdiv i32 %.frozen, 96, !dbg !20
  %32 = mul i32 %31, 96, !dbg !21
  %.decomposed = sub i32 %.frozen, %32, !dbg !21
  %33 = mul i32 %26, 96, !dbg !22
  %34 = mul i32 %27, 96, !dbg !22
  %35 = mul i32 %31, 384, !dbg !23
  %36 = add i32 %35, %.decomposed, !dbg !24
  %37 = add i32 %36, %33, !dbg !25
  %38 = add i32 %36, %34, !dbg !25
  %39 = sext i32 %37 to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !26
  %41 = sext i32 %38 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !26
  %43 = and i1 %19, %28, !dbg !27
  %44 = and i1 %29, %19, !dbg !27
  %45 = and i1 %30, %21, !dbg !27
  %46 = and i1 %30, %22, !dbg !27
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %43) #2, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %44) #2, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %57 = shl i32 %8, 4, !dbg !28
  %58 = and i32 %57, 1008, !dbg !28
  %59 = or disjoint i32 %58, %.lobit, !dbg !28
  %60 = and i32 %9, 508, !dbg !28
  %61 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %58, !dbg !28
  %62 = getelementptr float, ptr addrspace(3) %61, i32 %59, !dbg !28
  %63 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #2, !dbg !28
  %64 = or disjoint i32 %59, 4, !dbg !28
  %65 = lshr i32 %64, 2, !dbg !28
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !28
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %64, !dbg !28
  %68 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !28
  %69 = or disjoint i32 %59, 8, !dbg !28
  %70 = lshr i32 %69, 2, !dbg !28
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !28
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %69, !dbg !28
  %73 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !28
  %74 = or disjoint i32 %59, 12, !dbg !28
  %75 = lshr i32 %74, 2, !dbg !28
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75, !dbg !28
  %77 = getelementptr float, ptr addrspace(3) %76, i32 %74, !dbg !28
  %78 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !28
  %79 = or disjoint i32 %59, 2, !dbg !28
  %80 = getelementptr float, ptr addrspace(3) %61, i32 %79, !dbg !28
  %81 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !28
  %82 = or disjoint i32 %59, 6, !dbg !28
  %83 = lshr i32 %82, 2, !dbg !28
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !28
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %82, !dbg !28
  %86 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !28
  %87 = or disjoint i32 %59, 10, !dbg !28
  %88 = lshr i32 %87, 2, !dbg !28
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !28
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !28
  %91 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !28
  %92 = or disjoint i32 %59, 14, !dbg !28
  %93 = lshr i32 %92, 2, !dbg !28
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !28
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %92, !dbg !28
  %96 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %97 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %60, !dbg !28
  %98 = getelementptr inbounds float, ptr addrspace(3) %97, i32 %60, !dbg !28
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !28
  %100 = or disjoint i32 %60, 1, !dbg !28
  %101 = getelementptr inbounds float, ptr addrspace(3) %97, i32 %100, !dbg !28
  %102 = load float, ptr addrspace(3) %101, align 4, !dbg !28
  %103 = or disjoint i32 %60, 2, !dbg !28
  %104 = getelementptr inbounds float, ptr addrspace(3) %97, i32 %103, !dbg !28
  %105 = load float, ptr addrspace(3) %104, align 4, !dbg !28
  %106 = or disjoint i32 %60, 3, !dbg !28
  %107 = getelementptr inbounds float, ptr addrspace(3) %97, i32 %106, !dbg !28
  %108 = load float, ptr addrspace(3) %107, align 4, !dbg !28
  %109 = or disjoint i32 %60, 512, !dbg !28
  %110 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %109, !dbg !28
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %109, !dbg !28
  %112 = load float, ptr addrspace(3) %111, align 4, !dbg !28
  %113 = or disjoint i32 %60, 513, !dbg !28
  %114 = lshr i32 %113, 2, !dbg !28
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !28
  %116 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %113, !dbg !28
  %117 = load float, ptr addrspace(3) %116, align 4, !dbg !28
  %118 = or disjoint i32 %60, 514, !dbg !28
  %119 = lshr i32 %118, 2, !dbg !28
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !28
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %118, !dbg !28
  %122 = load float, ptr addrspace(3) %121, align 4, !dbg !28
  %123 = or disjoint i32 %60, 515, !dbg !28
  %124 = lshr i32 %123, 2, !dbg !28
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !28
  %126 = getelementptr inbounds float, ptr addrspace(3) %125, i32 %123, !dbg !28
  %127 = load float, ptr addrspace(3) %126, align 4, !dbg !28
  %128 = sext i32 %16 to i64, !dbg !29
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !29
  %130 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %129, i1 %20) #2, !dbg !30
  %131 = extractvalue { i32, i32 } %130, 0, !dbg !30
  %132 = extractvalue { i32, i32 } %130, 1, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx = shl nuw nsw i32 %12, 3, !dbg !31
  %133 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !31
  %134 = insertelement <1 x i32> poison, i32 %131, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !31
  %135 = shl nuw nsw i32 %12, 1, !dbg !31
  %136 = or disjoint i32 %135, 2, !dbg !31
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !31
  %138 = insertelement <1 x i32> poison, i32 %132, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !31
  %139 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !31
  %140 = load float, ptr addrspace(3) %139, align 8, !dbg !31
  %.idx3 = shl nuw nsw i32 %14, 3, !dbg !31
  %141 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !31
  %142 = load float, ptr addrspace(3) %141, align 8, !dbg !31
  %143 = fmul float %99, %140, !dbg !31
  %144 = fmul float %102, %140, !dbg !31
  %145 = fmul float %105, %140, !dbg !31
  %146 = fmul float %108, %140, !dbg !31
  %147 = fmul float %112, %142, !dbg !31
  %148 = fmul float %117, %142, !dbg !31
  %149 = fmul float %122, %142, !dbg !31
  %150 = fmul float %127, %142, !dbg !31
  %151 = add i32 %17, %23, !dbg !32
  %152 = shl i32 %151, 2, !dbg !32
  %153 = add i32 %18, %23, !dbg !32
  %154 = shl i32 %153, 2, !dbg !32
  %155 = sext i32 %152 to i64, !dbg !33
  %156 = getelementptr float, ptr addrspace(1) %2, i64 %155, !dbg !33
  %157 = sext i32 %154 to i64, !dbg !33
  %158 = getelementptr float, ptr addrspace(1) %2, i64 %157, !dbg !33
  %159 = bitcast float %143 to i32, !dbg !34
  %160 = bitcast float %144 to i32, !dbg !34
  %161 = bitcast float %145 to i32, !dbg !34
  %162 = bitcast float %146 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %159, i32 %160, i32 %161, i32 %162, ptr addrspace(1) %156, i1 %45) #2, !dbg !34
  %163 = bitcast float %147 to i32, !dbg !34
  %164 = bitcast float %148 to i32, !dbg !34
  %165 = bitcast float %149 to i32, !dbg !34
  %166 = bitcast float %150 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %163, i32 %164, i32 %165, i32 %166, ptr addrspace(1) %158, i1 %46) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyk45aa63ieczmjiyde7hlk2nl6ru6whvymt3gpsemzcjnhjzinb.py", directory: "inductor_cache/yk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_35", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_sigmoid_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 25, scope: !7)
!34 = !DILocation(line: 35, column: 43, scope: !7)
!35 = !DILocation(line: 35, column: 4, scope: !7)
