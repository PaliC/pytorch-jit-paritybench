; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %18 = shl i32 %17, 8, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 1, !dbg !12
  %21 = and i32 %20, 254, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = sdiv i32 %22, 256, !dbg !14
  %24 = srem i32 %23, 48, !dbg !15
  %.frozen = freeze i32 %22, !dbg !16
  %25 = sdiv i32 %.frozen, 16, !dbg !16
  %26 = srem i32 %25, 16, !dbg !17
  %27 = mul i32 %25, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %27, !dbg !18
  %28 = sext i32 %22 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !20
  %31 = sext i32 %24 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %39 = bitcast i32 %38 to float, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !29
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !30
  %48 = sext i32 %26 to i64, !dbg !31
  %49 = getelementptr i64, ptr addrspace(1) %7, i64 %48, !dbg !31
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %52 = sext i32 %.decomposed to i64, !dbg !33
  %53 = getelementptr i64, ptr addrspace(1) %8, i64 %52, !dbg !33
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !34
  %55 = getelementptr i64, ptr addrspace(1) %10, i64 %52, !dbg !35
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %11, i64 %52, !dbg !37
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !38
  %59 = getelementptr i64, ptr addrspace(1) %12, i64 %48, !dbg !39
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !40
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !40
  %62 = getelementptr float, ptr addrspace(1) %13, i64 %48, !dbg !41
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !42
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !42
  %65 = fadd float %37, 0x3EE4F8B580000000, !dbg !43
  %66 = fadd float %39, 0x3EE4F8B580000000, !dbg !43
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %67, 0, !dbg !44
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %68, 0, !dbg !44
  br i1 %.not.i, label %74, label %69, !dbg !44

69:                                               ; preds = %16
  br i1 %.not1.i, label %72, label %70, !dbg !44

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

74:                                               ; preds = %16
  br i1 %.not1.i, label %77, label %75, !dbg !44

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %70, %72, %75, %77
  %.0.i = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !44
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %79, 0, !dbg !44
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %80, 0, !dbg !44
  br i1 %.not.i1, label %86, label %81, !dbg !44

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !44

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !44

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %82, %84, %87, %89
  %.0.i3 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !44
  %91 = extractvalue { i32, i32 } %30, 1, !dbg !20
  %92 = bitcast i32 %91 to float, !dbg !20
  %93 = bitcast i32 %34 to float, !dbg !22
  %94 = fsub float %92, %93, !dbg !45
  %95 = extractvalue { i32, i32 } %30, 0, !dbg !20
  %96 = bitcast i32 %95 to float, !dbg !20
  %97 = bitcast i32 %33 to float, !dbg !22
  %98 = fsub float %96, %97, !dbg !45
  %99 = bitcast i32 %64 to float, !dbg !42
  %100 = bitcast i32 %63 to float, !dbg !42
  %101 = extractvalue { i32, i32 } %58, 1, !dbg !38
  %102 = extractvalue { i32, i32 } %58, 0, !dbg !38
  %103 = extractvalue { i64, i64 } %56, 1, !dbg !36
  %104 = extractvalue { i64, i64 } %56, 0, !dbg !36
  %105 = extractvalue { i64, i64 } %54, 1, !dbg !34
  %106 = extractvalue { i64, i64 } %54, 0, !dbg !34
  %107 = extractvalue { i32, i32 } %47, 1, !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = extractvalue { i32, i32 } %47, 0, !dbg !30
  %110 = bitcast i32 %109 to float, !dbg !30
  %111 = bitcast i32 %45 to float, !dbg !28
  %112 = bitcast i32 %44 to float, !dbg !28
  %113 = bitcast i32 %42 to float, !dbg !26
  %114 = bitcast i32 %41 to float, !dbg !26
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !46
  %117 = fmul float %98, %115, !dbg !47
  %118 = fmul float %94, %116, !dbg !47
  %119 = fmul float %117, %114, !dbg !48
  %120 = fmul float %118, %113, !dbg !48
  %121 = fadd float %119, %112, !dbg !49
  %122 = fadd float %120, %111, !dbg !49
  %123 = fadd float %121, %110, !dbg !50
  %124 = fadd float %122, %108, !dbg !50
  %125 = fcmp olt float %123, 0.000000e+00, !dbg !51
  %126 = fcmp olt float %124, 0.000000e+00, !dbg !51
  %127 = select i1 %125, float 0.000000e+00, float %123, !dbg !55
  %128 = select i1 %126, float 0.000000e+00, float %124, !dbg !55
  %129 = lshr i64 %50, 60, !dbg !56
  %130 = and i64 %129, 8, !dbg !56
  %131 = add i64 %130, %50, !dbg !56
  %132 = lshr i64 %106, 60, !dbg !57
  %133 = and i64 %132, 8, !dbg !57
  %134 = lshr i64 %105, 60, !dbg !57
  %135 = and i64 %134, 8, !dbg !57
  %136 = shl i64 %131, 3, !dbg !58
  %137 = shl nsw i32 %23, 6, !dbg !59
  %138 = sext i32 %137 to i64, !dbg !60
  %139 = getelementptr float, ptr addrspace(1) %9, i64 %106, !dbg !61
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %133, !dbg !61
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %136, !dbg !61
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %138, !dbg !61
  %143 = getelementptr float, ptr addrspace(1) %9, i64 %105, !dbg !61
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %135, !dbg !61
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %136, !dbg !61
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %138, !dbg !61
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !62
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #3, !dbg !62
  %149 = lshr i64 %104, 60, !dbg !63
  %150 = and i64 %149, 8, !dbg !63
  %151 = lshr i64 %103, 60, !dbg !63
  %152 = and i64 %151, 8, !dbg !63
  %153 = getelementptr float, ptr addrspace(1) %9, i64 %104, !dbg !64
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %150, !dbg !64
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %136, !dbg !64
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %138, !dbg !64
  %157 = getelementptr float, ptr addrspace(1) %9, i64 %103, !dbg !64
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %152, !dbg !64
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %136, !dbg !64
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %138, !dbg !64
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !65
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #3, !dbg !65
  %163 = lshr i64 %60, 60, !dbg !66
  %164 = and i64 %163, 8, !dbg !66
  %165 = add i64 %164, %60, !dbg !66
  %166 = shl i64 %165, 3, !dbg !67
  %167 = getelementptr float, ptr addrspace(1) %140, i64 %166, !dbg !68
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %138, !dbg !68
  %169 = getelementptr float, ptr addrspace(1) %144, i64 %166, !dbg !68
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %138, !dbg !68
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #3, !dbg !69
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #3, !dbg !69
  %173 = getelementptr float, ptr addrspace(1) %154, i64 %166, !dbg !70
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %138, !dbg !70
  %175 = getelementptr float, ptr addrspace(1) %158, i64 %166, !dbg !70
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %138, !dbg !70
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #3, !dbg !71
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #3, !dbg !71
  %179 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !69
  %180 = insertelement <2 x i32> %179, i32 %147, i64 1, !dbg !69
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !69
  %182 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !71
  %183 = insertelement <2 x i32> %182, i32 %161, i64 1, !dbg !71
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !71
  %185 = fsub <2 x float> %184, %181, !dbg !72
  %186 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !73
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !73
  %188 = shufflevector <2 x float> %187, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %189 = fmul <2 x float> %185, %188, !dbg !73
  %190 = fadd <2 x float> %189, %181, !dbg !74
  %191 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !69
  %192 = insertelement <2 x i32> %191, i32 %148, i64 1, !dbg !69
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !69
  %194 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !71
  %195 = insertelement <2 x i32> %194, i32 %162, i64 1, !dbg !71
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !71
  %197 = fsub <2 x float> %196, %193, !dbg !72
  %198 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !73
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !73
  %200 = shufflevector <2 x float> %199, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %201 = fmul <2 x float> %197, %200, !dbg !73
  %202 = fadd <2 x float> %201, %193, !dbg !74
  %203 = extractelement <2 x float> %190, i64 0, !dbg !75
  %204 = extractelement <2 x float> %190, i64 1, !dbg !76
  %205 = fsub float %203, %204, !dbg !75
  %206 = extractelement <2 x float> %202, i64 0, !dbg !75
  %207 = extractelement <2 x float> %202, i64 1, !dbg !76
  %208 = fsub float %206, %207, !dbg !75
  %209 = fmul float %205, %100, !dbg !77
  %210 = fmul float %208, %99, !dbg !77
  %211 = fadd float %204, %209, !dbg !76
  %212 = fadd float %207, %210, !dbg !76
  %213 = fadd float %127, %211, !dbg !78
  %214 = fadd float %128, %212, !dbg !78
  %215 = fcmp olt float %213, 0.000000e+00, !dbg !79
  %216 = fcmp olt float %214, 0.000000e+00, !dbg !79
  %217 = select i1 %215, float 0.000000e+00, float %213, !dbg !81
  %218 = select i1 %216, float 0.000000e+00, float %214, !dbg !81
  %219 = getelementptr float, ptr addrspace(1) %14, i64 %28, !dbg !82
  %220 = bitcast float %127 to i32, !dbg !83
  %221 = bitcast float %128 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %220, i32 %221, ptr addrspace(1) %219, i1 true) #3, !dbg !83
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !84
  %223 = bitcast float %217 to i32, !dbg !85
  %224 = bitcast float %218 to i32, !dbg !85
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %223, i32 %224, ptr addrspace(1) %222, i1 true) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chmxbedukgjjjqoc4ef7izouljdg6kgohyfjc6uttdp3rl2be3yd.py", directory: "inductor_cache/hm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 26, scope: !7)
!45 = !DILocation(line: 41, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 18, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 50, column: 20, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 54, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 58, column: 35, scope: !7)
!57 = !DILocation(line: 61, column: 35, scope: !7)
!58 = !DILocation(line: 62, column: 41, scope: !7)
!59 = !DILocation(line: 62, column: 52, scope: !7)
!60 = !DILocation(line: 62, column: 49, scope: !7)
!61 = !DILocation(line: 62, column: 31, scope: !7)
!62 = !DILocation(line: 62, column: 57, scope: !7)
!63 = !DILocation(line: 65, column: 35, scope: !7)
!64 = !DILocation(line: 66, column: 31, scope: !7)
!65 = !DILocation(line: 66, column: 57, scope: !7)
!66 = !DILocation(line: 72, column: 35, scope: !7)
!67 = !DILocation(line: 73, column: 41, scope: !7)
!68 = !DILocation(line: 73, column: 31, scope: !7)
!69 = !DILocation(line: 73, column: 57, scope: !7)
!70 = !DILocation(line: 74, column: 31, scope: !7)
!71 = !DILocation(line: 74, column: 57, scope: !7)
!72 = !DILocation(line: 75, column: 20, scope: !7)
!73 = !DILocation(line: 76, column: 20, scope: !7)
!74 = !DILocation(line: 77, column: 20, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 80, column: 20, scope: !7)
!77 = !DILocation(line: 79, column: 20, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !80)
!80 = !DILocation(line: 82, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !80)
!82 = !DILocation(line: 83, column: 25, scope: !7)
!83 = !DILocation(line: 83, column: 37, scope: !7)
!84 = !DILocation(line: 84, column: 28, scope: !7)
!85 = !DILocation(line: 84, column: 40, scope: !7)
!86 = !DILocation(line: 84, column: 4, scope: !7)
