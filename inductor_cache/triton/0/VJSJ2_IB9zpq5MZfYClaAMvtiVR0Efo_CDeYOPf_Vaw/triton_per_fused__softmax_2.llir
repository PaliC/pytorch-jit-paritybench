; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 4, !dbg !13
  %13 = icmp slt i32 %11, 576, !dbg !14
  %14 = icmp slt i32 %12, 576, !dbg !14
  %15 = and i32 %8, 15, !dbg !15
  %16 = icmp samesign ult i32 %15, 9, !dbg !16
  %17 = srem i32 %11, 9, !dbg !17
  %18 = srem i32 %12, 9, !dbg !17
  %.frozen = freeze i32 %11, !dbg !18
  %19 = sdiv i32 %.frozen, 144, !dbg !18
  %.frozen1 = freeze i32 %12, !dbg !18
  %20 = sdiv i32 %.frozen1, 144, !dbg !18
  %21 = mul i32 %19, 144, !dbg !19
  %.decomposed = sub i32 %.frozen, %21, !dbg !19
  %22 = mul i32 %20, 144, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %22, !dbg !19
  %23 = mul i32 %11, 9, !dbg !20
  %24 = mul i32 %12, 9, !dbg !20
  %25 = add i32 %23, %15, !dbg !21
  %26 = add i32 %24, %15, !dbg !21
  %27 = sext i32 %25 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = and i1 %16, %13, !dbg !23
  %32 = and i1 %16, %14, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %31, i32 0, i1 %31) #2, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %32, i32 0, i1 %32) #2, !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = mul nsw i32 %17, 9, !dbg !25
  %38 = mul nsw i32 %18, 9, !dbg !25
  %39 = add nsw i32 %37, %15, !dbg !26
  %40 = add nsw i32 %38, %15, !dbg !26
  %41 = sext i32 %39 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !27
  %43 = sext i32 %40 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %31, i32 0, i1 %31) #2, !dbg !28
  %46 = bitcast i32 %45 to float, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %32, i32 0, i1 %32) #2, !dbg !28
  %48 = bitcast i32 %47 to float, !dbg !28
  %49 = fadd float %34, %46, !dbg !29
  %50 = fadd float %36, %48, !dbg !29
  %51 = select i1 %31, float %49, float 0xFFF0000000000000, !dbg !30
  %52 = select i1 %32, float %50, float 0xFFF0000000000000, !dbg !30
  %53 = bitcast float %51 to i32, !dbg !31
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !31
  %55 = bitcast i32 %54 to float, !dbg !31
  %56 = fcmp ogt float %51, %55, !dbg !35
  %57 = fcmp uno float %51, 0.000000e+00, !dbg !37
  %58 = or i1 %56, %57, !dbg !38
  %59 = select i1 %58, float %51, float %55, !dbg !39
  %60 = bitcast float %59 to i32, !dbg !31
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 4, i32 31), !dbg !31
  %62 = bitcast i32 %61 to float, !dbg !31
  %63 = fcmp ogt float %59, %62, !dbg !35
  %64 = fcmp uno float %59, 0.000000e+00, !dbg !37
  %65 = or i1 %63, %64, !dbg !38
  %66 = select i1 %65, float %59, float %62, !dbg !39
  %67 = bitcast float %66 to i32, !dbg !31
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = fcmp ogt float %66, %69, !dbg !35
  %71 = fcmp uno float %66, 0.000000e+00, !dbg !37
  %72 = or i1 %70, %71, !dbg !38
  %73 = select i1 %72, float %66, float %69, !dbg !39
  %74 = bitcast float %73 to i32, !dbg !31
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = fcmp ogt float %73, %76, !dbg !35
  %78 = fcmp uno float %73, 0.000000e+00, !dbg !37
  %79 = or i1 %77, %78, !dbg !38
  %80 = select i1 %79, float %73, float %76, !dbg !39
  %81 = bitcast float %52 to i32, !dbg !31
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !31
  %83 = bitcast i32 %82 to float, !dbg !31
  %84 = fcmp ogt float %52, %83, !dbg !35
  %85 = fcmp uno float %52, 0.000000e+00, !dbg !37
  %86 = or i1 %85, %84, !dbg !38
  %87 = select i1 %86, float %52, float %83, !dbg !39
  %88 = bitcast float %87 to i32, !dbg !31
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !31
  %90 = bitcast i32 %89 to float, !dbg !31
  %91 = fcmp ogt float %87, %90, !dbg !35
  %92 = fcmp uno float %87, 0.000000e+00, !dbg !37
  %93 = or i1 %91, %92, !dbg !38
  %94 = select i1 %93, float %87, float %90, !dbg !39
  %95 = bitcast float %94 to i32, !dbg !31
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !31
  %97 = bitcast i32 %96 to float, !dbg !31
  %98 = fcmp ogt float %94, %97, !dbg !35
  %99 = fcmp uno float %94, 0.000000e+00, !dbg !37
  %100 = or i1 %98, %99, !dbg !38
  %101 = select i1 %100, float %94, float %97, !dbg !39
  %102 = bitcast float %101 to i32, !dbg !31
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = fcmp ogt float %101, %104, !dbg !35
  %106 = fcmp uno float %101, 0.000000e+00, !dbg !37
  %107 = or i1 %105, %106, !dbg !38
  %108 = select i1 %107, float %101, float %104, !dbg !39
  %109 = fsub float %49, %80, !dbg !40
  %110 = fsub float %50, %108, !dbg !40
  %111 = fmul float %109, 5.000000e-01, !dbg !41
  %112 = fmul float %110, 5.000000e-01, !dbg !41
  %113 = fmul float %111, 0x3FF7154760000000, !dbg !42
  %114 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %113) #2, !dbg !42
  %115 = fmul float %112, 0x3FF7154760000000, !dbg !42
  %116 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %115) #2, !dbg !42
  %117 = select i1 %31, float %114, float 0.000000e+00, !dbg !43
  %118 = select i1 %32, float %116, float 0.000000e+00, !dbg !43
  %119 = bitcast float %117 to i32, !dbg !44
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 8, i32 31), !dbg !44
  %121 = bitcast i32 %120 to float, !dbg !44
  %122 = fadd float %117, %121, !dbg !48
  %123 = bitcast float %122 to i32, !dbg !44
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !44
  %125 = bitcast i32 %124 to float, !dbg !44
  %126 = fadd float %122, %125, !dbg !48
  %127 = bitcast float %126 to i32, !dbg !44
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 2, i32 31), !dbg !44
  %129 = bitcast i32 %128 to float, !dbg !44
  %130 = fadd float %126, %129, !dbg !48
  %131 = bitcast float %130 to i32, !dbg !44
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 1, i32 31), !dbg !44
  %133 = bitcast i32 %132 to float, !dbg !44
  %134 = fadd float %130, %133, !dbg !48
  %135 = bitcast float %118 to i32, !dbg !44
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !44
  %137 = bitcast i32 %136 to float, !dbg !44
  %138 = fadd float %118, %137, !dbg !48
  %139 = bitcast float %138 to i32, !dbg !44
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !44
  %141 = bitcast i32 %140 to float, !dbg !44
  %142 = fadd float %138, %141, !dbg !48
  %143 = bitcast float %142 to i32, !dbg !44
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !44
  %145 = bitcast i32 %144 to float, !dbg !44
  %146 = fadd float %142, %145, !dbg !48
  %147 = bitcast float %146 to i32, !dbg !44
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !44
  %149 = bitcast i32 %148 to float, !dbg !44
  %150 = fadd float %146, %149, !dbg !48
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %134) #2, !dbg !50
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %150) #2, !dbg !50
  %153 = mul nsw i32 %.decomposed, 9, !dbg !51
  %154 = mul nsw i32 %.decomposed2, 9, !dbg !51
  %155 = add nsw i32 %153, %15, !dbg !52
  %156 = add nsw i32 %154, %15, !dbg !52
  %157 = mul i32 %19, 1312, !dbg !53
  %158 = mul i32 %20, 1312, !dbg !53
  %159 = add i32 %155, %157, !dbg !54
  %160 = add i32 %156, %158, !dbg !54
  %161 = sext i32 %159 to i64, !dbg !55
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !55
  %163 = sext i32 %160 to i64, !dbg !55
  %164 = getelementptr float, ptr addrspace(1) %2, i64 %163, !dbg !55
  %165 = bitcast float %151 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %162, i1 %31) #2, !dbg !56
  %166 = bitcast float %152 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %164, i1 %32) #2, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py", directory: "inductor_cache/m2")
!4 = !{ptr @triton_per_fused__softmax_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_2", linkageName: "triton_per_fused__softmax_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 37, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 50, scope: !7)
!24 = !DILocation(line: 34, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 42, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 41, scope: !7)
!31 = !DILocation(line: 131, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 41, column: 37, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 24, scope: !7)
!43 = !DILocation(line: 47, column: 43, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = !DILocation(line: 48, column: 26, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !47)
!49 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 32, scope: !7)
!52 = !DILocation(line: 50, column: 30, scope: !7)
!53 = !DILocation(line: 50, column: 42, scope: !7)
!54 = !DILocation(line: 50, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 25, scope: !7)
!56 = !DILocation(line: 50, column: 54, scope: !7)
!57 = !DILocation(line: 50, column: 4, scope: !7)
