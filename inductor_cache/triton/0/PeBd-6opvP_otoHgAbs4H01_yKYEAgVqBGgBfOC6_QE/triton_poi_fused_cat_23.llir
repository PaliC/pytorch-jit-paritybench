; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 2, !dbg !13
  %14 = or disjoint i32 %12, 512, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %15 = sdiv i32 %.frozen, 1024, !dbg !14
  %.frozen17 = freeze i32 %14, !dbg !14
  %16 = sdiv i32 %.frozen17, 1024, !dbg !14
  %17 = srem i32 %15, 192, !dbg !15
  %18 = srem i32 %16, 192, !dbg !15
  %.frozen21 = freeze i32 %12, !dbg !16
  %19 = sdiv i32 %.frozen21, 196608, !dbg !16
  %.frozen22 = freeze i32 %14, !dbg !16
  %20 = sdiv i32 %.frozen22, 196608, !dbg !16
  %21 = mul i32 %15, 1024, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = mul i32 %16, 1024, !dbg !17
  %.decomposed18 = sub i32 %.frozen17, %22, !dbg !17
  %.frozen19 = freeze i32 %12, !dbg !18
  %23 = sdiv i32 %.frozen19, 32, !dbg !18
  %24 = sdiv i32 %14, 32, !dbg !18
  %25 = srem i32 %23, 32, !dbg !19
  %26 = srem i32 %24, 32, !dbg !19
  %27 = mul i32 %23, 32, !dbg !20
  %.decomposed20 = sub i32 %.frozen19, %27, !dbg !20
  %28 = srem i32 %13, 32, !dbg !20
  %29 = icmp slt i32 %17, 64, !dbg !21
  %30 = icmp slt i32 %18, 64, !dbg !21
  %31 = mul i32 %19, 196608, !dbg !22
  %srem.decomposed = sub i32 %.frozen21, %31, !dbg !22
  %32 = mul i32 %20, 196608, !dbg !22
  %srem1.decomposed = sub i32 %.frozen22, %32, !dbg !22
  %33 = shl nsw i32 %19, 16, !dbg !23
  %34 = shl nsw i32 %20, 16, !dbg !23
  %35 = add nsw i32 %33, %srem.decomposed, !dbg !24
  %36 = add nsw i32 %34, %srem1.decomposed, !dbg !24
  %37 = sext i32 %35 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #1, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #1, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %51 = and i32 %17, -64, !dbg !27
  %52 = icmp eq i32 %51, 64, !dbg !27
  %53 = and i32 %18, -64, !dbg !27
  %54 = icmp eq i32 %53, 64, !dbg !27
  %55 = shl nsw i32 %17, 10, !dbg !28
  %56 = shl nsw i32 %18, 10, !dbg !28
  %57 = add nsw i32 %.decomposed, -65536, !dbg !28
  %58 = add nsw i32 %57, %33, !dbg !29
  %59 = add nsw i32 %58, %55, !dbg !30
  %60 = add nsw i32 %.decomposed18, -65536, !dbg !28
  %61 = add nsw i32 %60, %34, !dbg !29
  %62 = add nsw i32 %61, %56, !dbg !30
  %63 = sext i32 %59 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !31
  %65 = sext i32 %62 to i64, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !31
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #1, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !32
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #1, !dbg !32
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !32
  %77 = icmp sgt i32 %17, 127, !dbg !33
  %78 = icmp sgt i32 %18, 127, !dbg !33
  %79 = sext i32 %25 to i64, !dbg !34
  %80 = getelementptr i64, ptr addrspace(1) %2, i64 %79, !dbg !34
  %81 = sext i32 %26 to i64, !dbg !34
  %82 = getelementptr i64, ptr addrspace(1) %2, i64 %81, !dbg !34
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %80, i1 %77, i1 %77) #1, !dbg !35
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %80, i1 %77, i1 %77) #1, !dbg !35
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %80, i1 %77, i1 %77) #1, !dbg !35
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %80, i1 %77, i1 %77) #1, !dbg !35
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %82, i1 %78, i1 %78) #1, !dbg !35
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %82, i1 %78, i1 %78) #1, !dbg !35
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %82, i1 %78, i1 %78) #1, !dbg !35
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %82, i1 %78, i1 %78) #1, !dbg !35
  %91 = lshr i64 %83, 59, !dbg !36
  %92 = and i64 %91, 16, !dbg !36
  %93 = add i64 %92, %83, !dbg !36
  %94 = lshr i64 %87, 59, !dbg !36
  %95 = and i64 %94, 16, !dbg !36
  %96 = add i64 %95, %87, !dbg !36
  %97 = sext i32 %.decomposed20 to i64, !dbg !37
  %98 = getelementptr i64, ptr addrspace(1) %2, i64 %97, !dbg !37
  %99 = sext i32 %28 to i64, !dbg !37
  %100 = getelementptr i64, ptr addrspace(1) %2, i64 %99, !dbg !37
  %101 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %98, i1 %77, i1 %77, i1 %77) #1, !dbg !38
  %102 = extractvalue { i64, i64 } %101, 0, !dbg !38
  %103 = extractvalue { i64, i64 } %101, 1, !dbg !38
  %104 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %100, i1 %77, i1 %77, i1 %77) #1, !dbg !38
  %105 = extractvalue { i64, i64 } %104, 0, !dbg !38
  %106 = extractvalue { i64, i64 } %104, 1, !dbg !38
  %107 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %98, i1 %78, i1 %78, i1 %78) #1, !dbg !38
  %108 = extractvalue { i64, i64 } %107, 0, !dbg !38
  %109 = extractvalue { i64, i64 } %107, 1, !dbg !38
  %110 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %100, i1 %78, i1 %78, i1 %78) #1, !dbg !38
  %111 = extractvalue { i64, i64 } %110, 0, !dbg !38
  %112 = extractvalue { i64, i64 } %110, 1, !dbg !38
  %113 = lshr i64 %102, 59, !dbg !39
  %114 = and i64 %113, 16, !dbg !39
  %115 = lshr i64 %103, 59, !dbg !39
  %116 = and i64 %115, 16, !dbg !39
  %117 = lshr i64 %105, 59, !dbg !39
  %118 = and i64 %117, 16, !dbg !39
  %119 = lshr i64 %106, 59, !dbg !39
  %120 = and i64 %119, 16, !dbg !39
  %121 = lshr i64 %108, 59, !dbg !39
  %122 = and i64 %121, 16, !dbg !39
  %123 = lshr i64 %109, 59, !dbg !39
  %124 = and i64 %123, 16, !dbg !39
  %125 = lshr i64 %111, 59, !dbg !39
  %126 = and i64 %125, 16, !dbg !39
  %127 = lshr i64 %112, 59, !dbg !39
  %128 = and i64 %127, 16, !dbg !39
  %129 = shl i64 %93, 4, !dbg !40
  %130 = shl i64 %96, 4, !dbg !40
  %131 = shl nsw i32 %17, 8, !dbg !41
  %132 = add nsw i32 %131, -32768, !dbg !41
  %133 = shl nsw i32 %18, 8, !dbg !41
  %134 = add nsw i32 %133, -32768, !dbg !41
  %135 = sext i32 %132 to i64, !dbg !42
  %136 = sext i32 %134 to i64, !dbg !42
  %137 = sext i32 %33 to i64, !dbg !43
  %138 = sext i32 %34 to i64, !dbg !43
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !44
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %114, !dbg !44
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %129, !dbg !44
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %135, !dbg !44
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %137, !dbg !44
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !44
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %116, !dbg !44
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %129, !dbg !44
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %135, !dbg !44
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %137, !dbg !44
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !44
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %118, !dbg !44
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %129, !dbg !44
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %135, !dbg !44
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %137, !dbg !44
  %154 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !44
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %120, !dbg !44
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %129, !dbg !44
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %135, !dbg !44
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %137, !dbg !44
  %159 = getelementptr float, ptr addrspace(1) %3, i64 %108, !dbg !44
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %122, !dbg !44
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %130, !dbg !44
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %136, !dbg !44
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %138, !dbg !44
  %164 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !44
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %124, !dbg !44
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %130, !dbg !44
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %136, !dbg !44
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %138, !dbg !44
  %169 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !44
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %126, !dbg !44
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %130, !dbg !44
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %136, !dbg !44
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %138, !dbg !44
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %112, !dbg !44
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %128, !dbg !44
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %130, !dbg !44
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %136, !dbg !44
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %138, !dbg !44
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %77, i32 0, i1 %77) #1, !dbg !45
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %77, i32 0, i1 %77) #1, !dbg !45
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %77, i32 0, i1 %77) #1, !dbg !45
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 %77, i32 0, i1 %77) #1, !dbg !45
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %78, i32 0, i1 %78) #1, !dbg !45
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %78, i32 0, i1 %78) #1, !dbg !45
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %78, i32 0, i1 %78) #1, !dbg !45
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %78, i32 0, i1 %78) #1, !dbg !45
  %.v = select i1 %52, i32 %68, i32 %179, !dbg !46
  %.v2 = select i1 %52, i32 %69, i32 %180, !dbg !46
  %.v3 = select i1 %52, i32 %70, i32 %181, !dbg !46
  %.v4 = select i1 %52, i32 %71, i32 %182, !dbg !46
  %.v5 = select i1 %54, i32 %73, i32 %183, !dbg !46
  %.v6 = select i1 %54, i32 %74, i32 %184, !dbg !46
  %.v7 = select i1 %54, i32 %75, i32 %185, !dbg !46
  %.v8 = select i1 %54, i32 %76, i32 %186, !dbg !46
  %.v9 = select i1 %29, i32 %42, i32 %.v, !dbg !47
  %.v10 = select i1 %29, i32 %43, i32 %.v2, !dbg !47
  %.v11 = select i1 %29, i32 %44, i32 %.v3, !dbg !47
  %.v12 = select i1 %29, i32 %45, i32 %.v4, !dbg !47
  %.v13 = select i1 %30, i32 %47, i32 %.v5, !dbg !47
  %.v14 = select i1 %30, i32 %48, i32 %.v6, !dbg !47
  %.v15 = select i1 %30, i32 %49, i32 %.v7, !dbg !47
  %.v16 = select i1 %30, i32 %50, i32 %.v8, !dbg !47
  %187 = sext i32 %12 to i64, !dbg !48
  %188 = getelementptr float, ptr addrspace(1) %4, i64 %187, !dbg !48
  %189 = sext i32 %14 to i64, !dbg !48
  %190 = getelementptr float, ptr addrspace(1) %4, i64 %189, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v9, i32 %.v10, i32 %.v11, i32 %.v12, ptr addrspace(1) %188, i1 true) #1, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v13, i32 %.v14, i32 %.v15, i32 %.v16, ptr addrspace(1) %190, i1 true) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmmniqazlkeexthml3sljitxy27qzhg4znqnk2otgl4qphxk4abe.py", directory: "inductor_cache/mm")
!4 = !{ptr @triton_poi_fused_cat_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_23", linkageName: "triton_poi_fused_cat_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 27, column: 27, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 53, scope: !7)
!24 = !DILocation(line: 35, column: 47, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 58, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 42, scope: !7)
!29 = !DILocation(line: 40, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 56, scope: !7)
!31 = !DILocation(line: 40, column: 31, scope: !7)
!32 = !DILocation(line: 40, column: 67, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 31, scope: !7)
!35 = !DILocation(line: 44, column: 36, scope: !7)
!36 = !DILocation(line: 48, column: 35, scope: !7)
!37 = !DILocation(line: 49, column: 31, scope: !7)
!38 = !DILocation(line: 49, column: 36, scope: !7)
!39 = !DILocation(line: 52, column: 35, scope: !7)
!40 = !DILocation(line: 53, column: 42, scope: !7)
!41 = !DILocation(line: 53, column: 55, scope: !7)
!42 = !DILocation(line: 53, column: 50, scope: !7)
!43 = !DILocation(line: 53, column: 70, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 81, scope: !7)
!46 = !DILocation(line: 54, column: 34, scope: !7)
!47 = !DILocation(line: 55, column: 33, scope: !7)
!48 = !DILocation(line: 56, column: 25, scope: !7)
!49 = !DILocation(line: 56, column: 37, scope: !7)
!50 = !DILocation(line: 56, column: 4, scope: !7)
