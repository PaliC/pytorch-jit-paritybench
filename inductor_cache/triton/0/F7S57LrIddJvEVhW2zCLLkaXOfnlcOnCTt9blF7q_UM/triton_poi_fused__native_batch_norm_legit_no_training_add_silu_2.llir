; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 6, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 62, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = icmp slt i32 %23, 64, !dbg !14
  %25 = sext i32 %23 to i64, !dbg !15
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !15
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %24) #3, !dbg !16
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #3, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #3, !dbg !18
  %30 = bitcast i32 %29 to float, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #3, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #3, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !21
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %24) #3, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #3, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #3, !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %10, i1 true) #3, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !27
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %24) #3, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !30
  %44 = bitcast i32 %43 to float, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !32
  %47 = fadd float %30, 0x3EE4F8B580000000, !dbg !33
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %48, 0, !dbg !34
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i = icmp eq i32 %49, 0, !dbg !34
  br i1 %.not.i, label %55, label %50, !dbg !34

50:                                               ; preds = %17
  br i1 %.not1.i, label %53, label %51, !dbg !34

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

55:                                               ; preds = %17
  br i1 %.not1.i, label %58, label %56, !dbg !34

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !34
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !35
  %61 = fadd float %37, 0x3EE4F8B580000000, !dbg !36
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %62, 0, !dbg !37
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %63, 0, !dbg !37
  br i1 %.not.i1, label %69, label %64, !dbg !37

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %67, label %65, !dbg !37

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !37

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %65, %67, %70, %72
  %.0.i3 = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !37
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %75 = fadd float %44, 0x3EE4F8B580000000, !dbg !39
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i6 = icmp eq i32 %76, 0, !dbg !40
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i9 = icmp eq i32 %77, 0, !dbg !40
  br i1 %.not.i6, label %83, label %78, !dbg !40

78:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %81, label %79, !dbg !40

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

83:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %86, label %84, !dbg !40

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

__nv_sqrtf.exit10:                                ; preds = %79, %81, %84, %86
  %.0.i8 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !40
  %88 = extractvalue { i32, i32 } %41, 1, !dbg !28
  %89 = bitcast i32 %88 to float, !dbg !28
  %90 = bitcast i32 %42 to float, !dbg !29
  %91 = fsub float %89, %90, !dbg !41
  %92 = extractvalue { i32, i32 } %41, 0, !dbg !28
  %93 = bitcast i32 %92 to float, !dbg !28
  %94 = fsub float %93, %90, !dbg !41
  %95 = extractvalue { i32, i32 } %27, 1, !dbg !16
  %96 = bitcast i32 %95 to float, !dbg !16
  %97 = bitcast i32 %28 to float, !dbg !17
  %98 = fsub float %96, %97, !dbg !42
  %99 = fmul float %98, %60, !dbg !43
  %100 = bitcast i32 %31 to float, !dbg !19
  %101 = fmul float %99, %100, !dbg !44
  %102 = bitcast i32 %32 to float, !dbg !20
  %103 = fadd float %101, %102, !dbg !45
  %104 = extractvalue { i32, i32 } %34, 1, !dbg !22
  %105 = bitcast i32 %104 to float, !dbg !22
  %106 = bitcast i32 %35 to float, !dbg !23
  %107 = fsub float %105, %106, !dbg !46
  %108 = fmul float %107, %74, !dbg !47
  %109 = bitcast i32 %38 to float, !dbg !25
  %110 = fmul float %108, %109, !dbg !48
  %111 = bitcast i32 %39 to float, !dbg !26
  %112 = fadd float %110, %111, !dbg !49
  %113 = fadd float %103, %112, !dbg !50
  %114 = extractvalue { i32, i32 } %27, 0, !dbg !16
  %115 = bitcast i32 %114 to float, !dbg !16
  %116 = fsub float %115, %97, !dbg !42
  %117 = fmul float %116, %60, !dbg !43
  %118 = fmul float %117, %100, !dbg !44
  %119 = fadd float %118, %102, !dbg !45
  %120 = extractvalue { i32, i32 } %34, 0, !dbg !22
  %121 = bitcast i32 %120 to float, !dbg !22
  %122 = fsub float %121, %106, !dbg !46
  %123 = fmul float %122, %74, !dbg !47
  %124 = fmul float %123, %109, !dbg !48
  %125 = fadd float %124, %111, !dbg !49
  %126 = fadd float %119, %125, !dbg !50
  %127 = bitcast i32 %46 to float, !dbg !32
  %128 = bitcast i32 %45 to float, !dbg !31
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !51
  %130 = fmul float %94, %129, !dbg !52
  %131 = fmul float %91, %129, !dbg !52
  %132 = fmul float %130, %128, !dbg !53
  %133 = fmul float %131, %128, !dbg !53
  %134 = fadd float %132, %127, !dbg !54
  %135 = fadd float %133, %127, !dbg !54
  %136 = fadd float %126, %134, !dbg !55
  %137 = fadd float %113, %135, !dbg !55
  %138 = fsub float 0.000000e+00, %136, !dbg !56
  %139 = fsub float 0.000000e+00, %137, !dbg !56
  %140 = fmul float %138, 0x3FF7154760000000, !dbg !60
  %141 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %140) #3, !dbg !60
  %142 = fmul float %139, 0x3FF7154760000000, !dbg !60
  %143 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %142) #3, !dbg !60
  %144 = fadd float %141, 1.000000e+00, !dbg !61
  %145 = fadd float %143, 1.000000e+00, !dbg !61
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %144) #3, !dbg !62
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %145) #3, !dbg !62
  %148 = fmul float %146, %136, !dbg !63
  %149 = fmul float %137, %147, !dbg !63
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !64
  %151 = bitcast float %148 to i32, !dbg !65
  %152 = bitcast float %149 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %151, i32 %152, ptr addrspace(1) %150, i1 %24) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqsgpy7najsyi3ce3imahfrm3kujqocqn54az4z44hs5kkejbm4g.py", directory: "inductor_cache/qs")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 20, scope: !7)
!20 = !DILocation(line: 32, column: 20, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 35, column: 20, scope: !7)
!24 = !DILocation(line: 37, column: 20, scope: !7)
!25 = !DILocation(line: 39, column: 20, scope: !7)
!26 = !DILocation(line: 41, column: 20, scope: !7)
!27 = !DILocation(line: 43, column: 32, scope: !7)
!28 = !DILocation(line: 43, column: 37, scope: !7)
!29 = !DILocation(line: 44, column: 20, scope: !7)
!30 = !DILocation(line: 46, column: 20, scope: !7)
!31 = !DILocation(line: 48, column: 20, scope: !7)
!32 = !DILocation(line: 50, column: 20, scope: !7)
!33 = !DILocation(line: 54, column: 18, scope: !7)
!34 = !DILocation(line: 55, column: 26, scope: !7)
!35 = !DILocation(line: 57, column: 19, scope: !7)
!36 = !DILocation(line: 64, column: 20, scope: !7)
!37 = !DILocation(line: 65, column: 27, scope: !7)
!38 = !DILocation(line: 66, column: 19, scope: !7)
!39 = !DILocation(line: 73, column: 20, scope: !7)
!40 = !DILocation(line: 74, column: 27, scope: !7)
!41 = !DILocation(line: 72, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 18, scope: !7)
!43 = !DILocation(line: 60, column: 19, scope: !7)
!44 = !DILocation(line: 61, column: 20, scope: !7)
!45 = !DILocation(line: 62, column: 20, scope: !7)
!46 = !DILocation(line: 63, column: 20, scope: !7)
!47 = !DILocation(line: 68, column: 20, scope: !7)
!48 = !DILocation(line: 69, column: 20, scope: !7)
!49 = !DILocation(line: 70, column: 20, scope: !7)
!50 = !DILocation(line: 71, column: 20, scope: !7)
!51 = !DILocation(line: 75, column: 19, scope: !7)
!52 = !DILocation(line: 77, column: 20, scope: !7)
!53 = !DILocation(line: 78, column: 20, scope: !7)
!54 = !DILocation(line: 79, column: 20, scope: !7)
!55 = !DILocation(line: 80, column: 20, scope: !7)
!56 = !DILocation(line: 47, column: 30, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!59 = !DILocation(line: 81, column: 23, scope: !7)
!60 = !DILocation(line: 47, column: 29, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 47, column: 20, scope: !57, inlinedAt: !59)
!62 = !DILocation(line: 47, column: 16, scope: !57, inlinedAt: !59)
!63 = !DILocation(line: 82, column: 20, scope: !7)
!64 = !DILocation(line: 83, column: 28, scope: !7)
!65 = !DILocation(line: 83, column: 40, scope: !7)
!66 = !DILocation(line: 83, column: 4, scope: !7)
