; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = lshr i32 %11, 2, !dbg !12
  %15 = and i32 %14, 16, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = lshr i32 %11, 2, !dbg !12
  %18 = and i32 %17, 32, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = or disjoint i32 %19, 64, !dbg !12
  %21 = or disjoint i32 %19, 128, !dbg !12
  %22 = or disjoint i32 %19, 192, !dbg !12
  %23 = shl i32 %11, 2, !dbg !12
  %24 = and i32 %23, 12, !dbg !12
  %25 = and i32 %23, 252, !dbg !12
  %26 = and i32 %11, 255, !dbg !12
  %27 = or disjoint i32 %10, %19, !dbg !13
  %28 = or disjoint i32 %10, %20, !dbg !13
  %29 = or disjoint i32 %10, %21, !dbg !13
  %30 = or disjoint i32 %10, %22, !dbg !13
  %31 = or disjoint i32 %10, %25, !dbg !13
  %32 = or disjoint i32 %10, %26, !dbg !13
  %33 = icmp slt i32 %27, 256, !dbg !14
  %34 = icmp slt i32 %28, 256, !dbg !14
  %35 = icmp slt i32 %29, 256, !dbg !14
  %36 = icmp slt i32 %30, 256, !dbg !14
  %37 = icmp slt i32 %31, 256, !dbg !14
  %38 = icmp slt i32 %32, 256, !dbg !14
  %39 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %40 = shl i32 %39, 4, !dbg !16
  %.lobit231 = lshr i32 %11, 6, !dbg !17
  %41 = and i32 %.lobit231, 3, !dbg !17
  %42 = or disjoint i32 %41, 4, !dbg !17
  %43 = or disjoint i32 %41, 8, !dbg !17
  %44 = or disjoint i32 %41, 12, !dbg !17
  %45 = or disjoint i32 %40, %24, !dbg !18
  %46 = or disjoint i32 %40, %41, !dbg !18
  %47 = or disjoint i32 %40, %42, !dbg !18
  %48 = or disjoint i32 %40, %43, !dbg !18
  %49 = or disjoint i32 %40, %44, !dbg !18
  %.frozen = freeze i32 %31, !dbg !19
  %50 = sdiv i32 %.frozen, 64, !dbg !19
  %51 = mul i32 %50, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %51, !dbg !20
  %52 = srem i32 %32, 64, !dbg !20
  %53 = shl i32 %27, 12, !dbg !21
  %54 = shl i32 %28, 12, !dbg !21
  %55 = shl i32 %29, 12, !dbg !21
  %56 = shl i32 %30, 12, !dbg !21
  %57 = add i32 %45, %53, !dbg !22
  %58 = add i32 %45, %54, !dbg !22
  %59 = add i32 %45, %55, !dbg !22
  %60 = add i32 %45, %56, !dbg !22
  %61 = sext i32 %57 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %58 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = sext i32 %59 to i64, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !23
  %67 = sext i32 %60 to i64, !dbg !23
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !23
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %33) #2, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !24
  %74 = bitcast i32 %70 to float, !dbg !24
  %75 = bitcast i32 %71 to float, !dbg !24
  %76 = bitcast i32 %72 to float, !dbg !24
  %77 = bitcast i32 %73 to float, !dbg !24
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %34) #2, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !24
  %83 = bitcast i32 %79 to float, !dbg !24
  %84 = bitcast i32 %80 to float, !dbg !24
  %85 = bitcast i32 %81 to float, !dbg !24
  %86 = bitcast i32 %82 to float, !dbg !24
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %35) #2, !dbg !24
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !24
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !24
  %92 = bitcast i32 %88 to float, !dbg !24
  %93 = bitcast i32 %89 to float, !dbg !24
  %94 = bitcast i32 %90 to float, !dbg !24
  %95 = bitcast i32 %91 to float, !dbg !24
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %36) #2, !dbg !24
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !24
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !24
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !24
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !24
  %101 = bitcast i32 %97 to float, !dbg !24
  %102 = bitcast i32 %98 to float, !dbg !24
  %103 = bitcast i32 %99 to float, !dbg !24
  %104 = bitcast i32 %100 to float, !dbg !24
  %105 = shl i32 %11, 10, !dbg !24
  %106 = and i32 %105, 3072, !dbg !24
  %107 = and i32 %12, 15, !dbg !24
  %108 = or disjoint i32 %107, %106, !dbg !24
  %109 = or disjoint i32 %15, %108, !dbg !24
  %110 = or disjoint i32 %109, %18, !dbg !24
  %111 = and i32 %23, 1020, !dbg !24
  %112 = lshr exact i32 %106, 4, !dbg !24
  %113 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %112, !dbg !24
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %110, !dbg !24
  %115 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !24
  %116 = or disjoint i32 %110, 256, !dbg !24
  %117 = lshr i32 %116, 6, !dbg !24
  %118 = and i32 %117, 67108860, !dbg !24
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !24
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %116, !dbg !24
  %121 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !24
  %122 = or disjoint i32 %110, 512, !dbg !24
  %123 = lshr i32 %122, 6, !dbg !24
  %124 = and i32 %123, 67108860, !dbg !24
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !24
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %122, !dbg !24
  %127 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !24
  %128 = or disjoint i32 %110, 768, !dbg !24
  %129 = lshr i32 %128, 6, !dbg !24
  %130 = and i32 %129, 67108860, !dbg !24
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !24
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %128, !dbg !24
  %133 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !24
  %134 = or disjoint i32 %110, 64, !dbg !24
  %135 = getelementptr float, ptr addrspace(3) %113, i32 %134, !dbg !24
  %136 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !24
  %137 = or disjoint i32 %110, 320, !dbg !24
  %138 = lshr i32 %137, 6, !dbg !24
  %139 = and i32 %138, 67108860, !dbg !24
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !24
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %137, !dbg !24
  %142 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !24
  %143 = or disjoint i32 %110, 576, !dbg !24
  %144 = lshr i32 %143, 6, !dbg !24
  %145 = and i32 %144, 67108860, !dbg !24
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %145, !dbg !24
  %147 = getelementptr float, ptr addrspace(3) %146, i32 %143, !dbg !24
  %148 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !24
  %149 = or disjoint i32 %110, 832, !dbg !24
  %150 = lshr i32 %149, 6, !dbg !24
  %151 = and i32 %150, 67108860, !dbg !24
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !24
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %149, !dbg !24
  %154 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !24
  %155 = or disjoint i32 %110, 128, !dbg !24
  %156 = getelementptr float, ptr addrspace(3) %113, i32 %155, !dbg !24
  %157 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !24
  %158 = or disjoint i32 %110, 384, !dbg !24
  %159 = lshr i32 %158, 6, !dbg !24
  %160 = and i32 %159, 67108860, !dbg !24
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !24
  %162 = getelementptr float, ptr addrspace(3) %161, i32 %158, !dbg !24
  %163 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !24
  %164 = or disjoint i32 %110, 640, !dbg !24
  %165 = lshr i32 %164, 6, !dbg !24
  %166 = and i32 %165, 67108860, !dbg !24
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !24
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %164, !dbg !24
  %169 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !24
  %170 = or disjoint i32 %110, 896, !dbg !24
  %171 = lshr i32 %170, 6, !dbg !24
  %172 = and i32 %171, 67108860, !dbg !24
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !24
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %170, !dbg !24
  %175 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !24
  %176 = or disjoint i32 %110, 192, !dbg !24
  %177 = getelementptr float, ptr addrspace(3) %113, i32 %176, !dbg !24
  %178 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #2, !dbg !24
  %179 = or disjoint i32 %110, 448, !dbg !24
  %180 = lshr i32 %179, 6, !dbg !24
  %181 = and i32 %180, 67108860, !dbg !24
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %181, !dbg !24
  %183 = getelementptr float, ptr addrspace(3) %182, i32 %179, !dbg !24
  %184 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #2, !dbg !24
  %185 = or disjoint i32 %110, 704, !dbg !24
  %186 = lshr i32 %185, 6, !dbg !24
  %187 = and i32 %186, 67108860, !dbg !24
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !24
  %189 = getelementptr float, ptr addrspace(3) %188, i32 %185, !dbg !24
  %190 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !24
  %191 = or disjoint i32 %110, 960, !dbg !24
  %192 = lshr i32 %191, 6, !dbg !24
  %193 = and i32 %192, 67108860, !dbg !24
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i32 %193, !dbg !24
  %195 = getelementptr float, ptr addrspace(3) %194, i32 %191, !dbg !24
  %196 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %197 = lshr i32 %23, 6, !dbg !24
  %198 = and i32 %197, 12, !dbg !24
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %198, !dbg !24
  %200 = getelementptr inbounds float, ptr addrspace(3) %199, i32 %111, !dbg !24
  %201 = load float, ptr addrspace(3) %200, align 16, !dbg !24
  %202 = getelementptr inbounds i8, ptr addrspace(3) %200, i32 4, !dbg !24
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !24
  %204 = getelementptr inbounds i8, ptr addrspace(3) %200, i32 8, !dbg !24
  %205 = load float, ptr addrspace(3) %204, align 8, !dbg !24
  %206 = getelementptr inbounds i8, ptr addrspace(3) %200, i32 12, !dbg !24
  %207 = load float, ptr addrspace(3) %206, align 4, !dbg !24
  %208 = or disjoint i32 %111, 1024, !dbg !24
  %209 = lshr i32 %208, 6, !dbg !24
  %210 = and i32 %209, 28, !dbg !24
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !24
  %212 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %208, !dbg !24
  %213 = load float, ptr addrspace(3) %212, align 16, !dbg !24
  %214 = getelementptr inbounds i8, ptr addrspace(3) %212, i32 4, !dbg !24
  %215 = load float, ptr addrspace(3) %214, align 4, !dbg !24
  %216 = getelementptr inbounds i8, ptr addrspace(3) %212, i32 8, !dbg !24
  %217 = load float, ptr addrspace(3) %216, align 8, !dbg !24
  %218 = getelementptr inbounds i8, ptr addrspace(3) %212, i32 12, !dbg !24
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !24
  %220 = or disjoint i32 %111, 2048, !dbg !24
  %221 = lshr i32 %220, 6, !dbg !24
  %222 = and i32 %221, 44, !dbg !24
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %222, !dbg !24
  %224 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %220, !dbg !24
  %225 = load float, ptr addrspace(3) %224, align 16, !dbg !24
  %226 = getelementptr inbounds i8, ptr addrspace(3) %224, i32 4, !dbg !24
  %227 = load float, ptr addrspace(3) %226, align 4, !dbg !24
  %228 = getelementptr inbounds i8, ptr addrspace(3) %224, i32 8, !dbg !24
  %229 = load float, ptr addrspace(3) %228, align 8, !dbg !24
  %230 = getelementptr inbounds i8, ptr addrspace(3) %224, i32 12, !dbg !24
  %231 = load float, ptr addrspace(3) %230, align 4, !dbg !24
  %232 = or disjoint i32 %111, 3072, !dbg !24
  %233 = lshr i32 %232, 6, !dbg !24
  %234 = and i32 %233, 60, !dbg !24
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !24
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %232, !dbg !24
  %237 = load float, ptr addrspace(3) %236, align 16, !dbg !24
  %238 = getelementptr inbounds i8, ptr addrspace(3) %236, i32 4, !dbg !24
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !24
  %240 = getelementptr inbounds i8, ptr addrspace(3) %236, i32 8, !dbg !24
  %241 = load float, ptr addrspace(3) %240, align 8, !dbg !24
  %242 = getelementptr inbounds i8, ptr addrspace(3) %236, i32 12, !dbg !24
  %243 = load float, ptr addrspace(3) %242, align 4, !dbg !24
  %244 = sext i32 %52 to i64, !dbg !25
  %245 = getelementptr float, ptr addrspace(1) %1, i64 %244, !dbg !25
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %38) #2, !dbg !26
  %247 = shl i32 %46, 6, !dbg !27
  %248 = shl i32 %47, 6, !dbg !27
  %249 = shl i32 %48, 6, !dbg !27
  %250 = shl i32 %49, 6, !dbg !27
  %251 = shl i32 %50, 18, !dbg !28
  %252 = add i32 %251, %.decomposed, !dbg !29
  %253 = add i32 %252, %247, !dbg !30
  %254 = add i32 %252, %248, !dbg !30
  %255 = add i32 %252, %249, !dbg !30
  %256 = add i32 %252, %250, !dbg !30
  %257 = sext i32 %253 to i64, !dbg !31
  %258 = getelementptr float, ptr addrspace(1) %2, i64 %257, !dbg !31
  %259 = sext i32 %254 to i64, !dbg !31
  %260 = getelementptr float, ptr addrspace(1) %2, i64 %259, !dbg !31
  %261 = sext i32 %255 to i64, !dbg !31
  %262 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !31
  %263 = sext i32 %256 to i64, !dbg !31
  %264 = getelementptr float, ptr addrspace(1) %2, i64 %263, !dbg !31
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %258, i1 %37) #2, !dbg !32
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !32
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !32
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !32
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !32
  %270 = bitcast i32 %266 to float, !dbg !32
  %271 = bitcast i32 %267 to float, !dbg !32
  %272 = bitcast i32 %268 to float, !dbg !32
  %273 = bitcast i32 %269 to float, !dbg !32
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %260, i1 %37) #2, !dbg !32
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !32
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !32
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !32
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !32
  %279 = bitcast i32 %275 to float, !dbg !32
  %280 = bitcast i32 %276 to float, !dbg !32
  %281 = bitcast i32 %277 to float, !dbg !32
  %282 = bitcast i32 %278 to float, !dbg !32
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %262, i1 %37) #2, !dbg !32
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !32
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !32
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !32
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !32
  %288 = bitcast i32 %284 to float, !dbg !32
  %289 = bitcast i32 %285 to float, !dbg !32
  %290 = bitcast i32 %286 to float, !dbg !32
  %291 = bitcast i32 %287 to float, !dbg !32
  %292 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %264, i1 %37) #2, !dbg !32
  %293 = extractvalue { i32, i32, i32, i32 } %292, 0, !dbg !32
  %294 = extractvalue { i32, i32, i32, i32 } %292, 1, !dbg !32
  %295 = extractvalue { i32, i32, i32, i32 } %292, 2, !dbg !32
  %296 = extractvalue { i32, i32, i32, i32 } %292, 3, !dbg !32
  %297 = bitcast i32 %293 to float, !dbg !32
  %298 = bitcast i32 %294 to float, !dbg !32
  %299 = bitcast i32 %295 to float, !dbg !32
  %300 = bitcast i32 %296 to float, !dbg !32
  %301 = getelementptr float, ptr addrspace(1) %3, i64 %244, !dbg !33
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 %38) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %26, !dbg !35
  %304 = insertelement <1 x i32> poison, i32 %246, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !35
  %306 = load float, ptr addrspace(3) %305, align 16, !dbg !35
  %307 = getelementptr inbounds i8, ptr addrspace(3) %305, i32 4, !dbg !35
  %308 = load float, ptr addrspace(3) %307, align 4, !dbg !35
  %309 = getelementptr inbounds i8, ptr addrspace(3) %305, i32 8, !dbg !35
  %310 = load float, ptr addrspace(3) %309, align 8, !dbg !35
  %311 = getelementptr inbounds i8, ptr addrspace(3) %305, i32 12, !dbg !35
  %312 = load float, ptr addrspace(3) %311, align 4, !dbg !35
  %313 = fmul float %306, %270, !dbg !35
  %314 = fmul float %308, %271, !dbg !35
  %315 = fmul float %310, %272, !dbg !35
  %316 = fmul float %312, %273, !dbg !35
  %317 = fmul float %306, %279, !dbg !35
  %318 = fmul float %308, %280, !dbg !35
  %319 = fmul float %310, %281, !dbg !35
  %320 = fmul float %312, %282, !dbg !35
  %321 = fmul float %306, %288, !dbg !35
  %322 = fmul float %308, %289, !dbg !35
  %323 = fmul float %310, %290, !dbg !35
  %324 = fmul float %312, %291, !dbg !35
  %325 = fmul float %306, %297, !dbg !35
  %326 = fmul float %308, %298, !dbg !35
  %327 = fmul float %310, %299, !dbg !35
  %328 = fmul float %312, %300, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %329 = shl i32 %11, 6, !dbg !35
  %330 = and i32 %329, 4032, !dbg !35
  %331 = or disjoint i32 %41, %330, !dbg !35
  %332 = lshr exact i32 %330, 2, !dbg !35
  %333 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %332, !dbg !35
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %331, !dbg !35
  %335 = bitcast float %313 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #2, !dbg !35
  %336 = or disjoint i32 %331, 16, !dbg !35
  %337 = lshr i32 %336, 4, !dbg !35
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !35
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %336, !dbg !35
  %340 = bitcast float %314 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #2, !dbg !35
  %341 = or disjoint i32 %331, 32, !dbg !35
  %342 = lshr i32 %341, 4, !dbg !35
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %342, !dbg !35
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %341, !dbg !35
  %345 = bitcast float %315 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #2, !dbg !35
  %346 = or disjoint i32 %331, 48, !dbg !35
  %347 = lshr i32 %346, 4, !dbg !35
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i32 %347, !dbg !35
  %349 = getelementptr float, ptr addrspace(3) %348, i32 %346, !dbg !35
  %350 = bitcast float %316 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %350, i1 true) #2, !dbg !35
  %351 = or disjoint i32 %331, 4, !dbg !35
  %352 = getelementptr float, ptr addrspace(3) %333, i32 %351, !dbg !35
  %353 = bitcast float %317 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #2, !dbg !35
  %354 = or disjoint i32 %331, 20, !dbg !35
  %355 = lshr i32 %354, 4, !dbg !35
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i32 %355, !dbg !35
  %357 = getelementptr float, ptr addrspace(3) %356, i32 %354, !dbg !35
  %358 = bitcast float %318 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %358, i1 true) #2, !dbg !35
  %359 = or disjoint i32 %331, 36, !dbg !35
  %360 = lshr i32 %359, 4, !dbg !35
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i32 %360, !dbg !35
  %362 = getelementptr float, ptr addrspace(3) %361, i32 %359, !dbg !35
  %363 = bitcast float %319 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %363, i1 true) #2, !dbg !35
  %364 = or disjoint i32 %331, 52, !dbg !35
  %365 = lshr i32 %364, 4, !dbg !35
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i32 %365, !dbg !35
  %367 = getelementptr float, ptr addrspace(3) %366, i32 %364, !dbg !35
  %368 = bitcast float %320 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %368, i1 true) #2, !dbg !35
  %369 = or disjoint i32 %331, 8, !dbg !35
  %370 = getelementptr float, ptr addrspace(3) %333, i32 %369, !dbg !35
  %371 = bitcast float %321 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %370, <1 x i32> %371, i1 true) #2, !dbg !35
  %372 = or disjoint i32 %331, 24, !dbg !35
  %373 = lshr i32 %372, 4, !dbg !35
  %374 = getelementptr float, ptr addrspace(3) @global_smem, i32 %373, !dbg !35
  %375 = getelementptr float, ptr addrspace(3) %374, i32 %372, !dbg !35
  %376 = bitcast float %322 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %376, i1 true) #2, !dbg !35
  %377 = or disjoint i32 %331, 40, !dbg !35
  %378 = lshr i32 %377, 4, !dbg !35
  %379 = getelementptr float, ptr addrspace(3) @global_smem, i32 %378, !dbg !35
  %380 = getelementptr float, ptr addrspace(3) %379, i32 %377, !dbg !35
  %381 = bitcast float %323 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 true) #2, !dbg !35
  %382 = or disjoint i32 %331, 56, !dbg !35
  %383 = lshr i32 %382, 4, !dbg !35
  %384 = getelementptr float, ptr addrspace(3) @global_smem, i32 %383, !dbg !35
  %385 = getelementptr float, ptr addrspace(3) %384, i32 %382, !dbg !35
  %386 = bitcast float %324 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %386, i1 true) #2, !dbg !35
  %387 = or disjoint i32 %331, 12, !dbg !35
  %388 = getelementptr float, ptr addrspace(3) %333, i32 %387, !dbg !35
  %389 = bitcast float %325 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %389, i1 true) #2, !dbg !35
  %390 = or disjoint i32 %331, 28, !dbg !35
  %391 = lshr i32 %390, 4, !dbg !35
  %392 = getelementptr float, ptr addrspace(3) @global_smem, i32 %391, !dbg !35
  %393 = getelementptr float, ptr addrspace(3) %392, i32 %390, !dbg !35
  %394 = bitcast float %326 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 true) #2, !dbg !35
  %395 = or disjoint i32 %331, 44, !dbg !35
  %396 = lshr i32 %395, 4, !dbg !35
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i32 %396, !dbg !35
  %398 = getelementptr float, ptr addrspace(3) %397, i32 %395, !dbg !35
  %399 = bitcast float %327 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #2, !dbg !35
  %400 = or disjoint i32 %331, 60, !dbg !35
  %401 = lshr i32 %400, 4, !dbg !35
  %402 = getelementptr float, ptr addrspace(3) @global_smem, i32 %401, !dbg !35
  %403 = getelementptr float, ptr addrspace(3) %402, i32 %400, !dbg !35
  %404 = bitcast float %328 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %404, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %405 = lshr i32 %111, 4, !dbg !35
  %406 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %405, !dbg !35
  %407 = getelementptr inbounds float, ptr addrspace(3) %406, i32 %111, !dbg !35
  %408 = load float, ptr addrspace(3) %407, align 4, !dbg !35
  %409 = or disjoint i32 %111, 1, !dbg !35
  %410 = getelementptr inbounds float, ptr addrspace(3) %406, i32 %409, !dbg !35
  %411 = load float, ptr addrspace(3) %410, align 4, !dbg !35
  %412 = or disjoint i32 %111, 2, !dbg !35
  %413 = getelementptr inbounds float, ptr addrspace(3) %406, i32 %412, !dbg !35
  %414 = load float, ptr addrspace(3) %413, align 4, !dbg !35
  %415 = or disjoint i32 %111, 3, !dbg !35
  %416 = getelementptr inbounds float, ptr addrspace(3) %406, i32 %415, !dbg !35
  %417 = load float, ptr addrspace(3) %416, align 4, !dbg !35
  %418 = lshr i32 %208, 4, !dbg !35
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %418, !dbg !35
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %208, !dbg !35
  %421 = load float, ptr addrspace(3) %420, align 4, !dbg !35
  %422 = or disjoint i32 %111, 1025, !dbg !35
  %423 = lshr i32 %422, 4, !dbg !35
  %424 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %423, !dbg !35
  %425 = getelementptr inbounds float, ptr addrspace(3) %424, i32 %422, !dbg !35
  %426 = load float, ptr addrspace(3) %425, align 4, !dbg !35
  %427 = or disjoint i32 %111, 1026, !dbg !35
  %428 = lshr i32 %427, 4, !dbg !35
  %429 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %428, !dbg !35
  %430 = getelementptr inbounds float, ptr addrspace(3) %429, i32 %427, !dbg !35
  %431 = load float, ptr addrspace(3) %430, align 4, !dbg !35
  %432 = or disjoint i32 %111, 1027, !dbg !35
  %433 = lshr i32 %432, 4, !dbg !35
  %434 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %433, !dbg !35
  %435 = getelementptr inbounds float, ptr addrspace(3) %434, i32 %432, !dbg !35
  %436 = load float, ptr addrspace(3) %435, align 4, !dbg !35
  %437 = lshr i32 %220, 4, !dbg !35
  %438 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %437, !dbg !35
  %439 = getelementptr inbounds float, ptr addrspace(3) %438, i32 %220, !dbg !35
  %440 = load float, ptr addrspace(3) %439, align 4, !dbg !35
  %441 = or disjoint i32 %111, 2049, !dbg !35
  %442 = lshr i32 %441, 4, !dbg !35
  %443 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %442, !dbg !35
  %444 = getelementptr inbounds float, ptr addrspace(3) %443, i32 %441, !dbg !35
  %445 = load float, ptr addrspace(3) %444, align 4, !dbg !35
  %446 = or disjoint i32 %111, 2050, !dbg !35
  %447 = lshr i32 %446, 4, !dbg !35
  %448 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %447, !dbg !35
  %449 = getelementptr inbounds float, ptr addrspace(3) %448, i32 %446, !dbg !35
  %450 = load float, ptr addrspace(3) %449, align 4, !dbg !35
  %451 = or disjoint i32 %111, 2051, !dbg !35
  %452 = lshr i32 %451, 4, !dbg !35
  %453 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %452, !dbg !35
  %454 = getelementptr inbounds float, ptr addrspace(3) %453, i32 %451, !dbg !35
  %455 = load float, ptr addrspace(3) %454, align 4, !dbg !35
  %456 = lshr i32 %232, 4, !dbg !35
  %457 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %456, !dbg !35
  %458 = getelementptr inbounds float, ptr addrspace(3) %457, i32 %232, !dbg !35
  %459 = load float, ptr addrspace(3) %458, align 4, !dbg !35
  %460 = or disjoint i32 %111, 3073, !dbg !35
  %461 = lshr i32 %460, 4, !dbg !35
  %462 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %461, !dbg !35
  %463 = getelementptr inbounds float, ptr addrspace(3) %462, i32 %460, !dbg !35
  %464 = load float, ptr addrspace(3) %463, align 4, !dbg !35
  %465 = or disjoint i32 %111, 3074, !dbg !35
  %466 = lshr i32 %465, 4, !dbg !35
  %467 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %466, !dbg !35
  %468 = getelementptr inbounds float, ptr addrspace(3) %467, i32 %465, !dbg !35
  %469 = load float, ptr addrspace(3) %468, align 4, !dbg !35
  %470 = or disjoint i32 %111, 3075, !dbg !35
  %471 = lshr i32 %470, 4, !dbg !35
  %472 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %471, !dbg !35
  %473 = getelementptr inbounds float, ptr addrspace(3) %472, i32 %470, !dbg !35
  %474 = load float, ptr addrspace(3) %473, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %.idx = shl nuw nsw i32 %26, 3, !dbg !36
  %475 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !36
  %476 = insertelement <1 x i32> poison, i32 %302, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %476, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %.idx23 = shl nuw nsw i32 %19, 3, !dbg !36
  %477 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx23, !dbg !36
  %478 = load float, ptr addrspace(3) %477, align 8, !dbg !36
  %.idx24 = shl nuw nsw i32 %20, 3, !dbg !36
  %479 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx24, !dbg !36
  %480 = load float, ptr addrspace(3) %479, align 8, !dbg !36
  %.idx25 = shl nuw nsw i32 %21, 3, !dbg !36
  %481 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx25, !dbg !36
  %482 = load float, ptr addrspace(3) %481, align 8, !dbg !36
  %.idx26 = shl nuw nsw i32 %22, 3, !dbg !36
  %483 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !36
  %484 = load float, ptr addrspace(3) %483, align 8, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %476, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %485 = load float, ptr addrspace(3) %305, align 16, !dbg !36
  %486 = load float, ptr addrspace(3) %307, align 4, !dbg !36
  %487 = load float, ptr addrspace(3) %309, align 8, !dbg !36
  %488 = load float, ptr addrspace(3) %311, align 4, !dbg !36
  %489 = fadd float %408, %478, !dbg !37
  %490 = fadd float %411, %478, !dbg !37
  %491 = fadd float %414, %478, !dbg !37
  %492 = fadd float %417, %478, !dbg !37
  %493 = fadd float %421, %480, !dbg !37
  %494 = fadd float %426, %480, !dbg !37
  %495 = fadd float %431, %480, !dbg !37
  %496 = fadd float %436, %480, !dbg !37
  %497 = fadd float %440, %482, !dbg !37
  %498 = fadd float %445, %482, !dbg !37
  %499 = fadd float %450, %482, !dbg !37
  %500 = fadd float %455, %482, !dbg !37
  %501 = fadd float %459, %484, !dbg !37
  %502 = fadd float %464, %484, !dbg !37
  %503 = fadd float %469, %484, !dbg !37
  %504 = fadd float %474, %484, !dbg !37
  %505 = fadd float %313, %485, !dbg !37
  %506 = fadd float %314, %486, !dbg !37
  %507 = fadd float %315, %487, !dbg !37
  %508 = fadd float %316, %488, !dbg !37
  %509 = fadd float %317, %485, !dbg !37
  %510 = fadd float %318, %486, !dbg !37
  %511 = fadd float %319, %487, !dbg !37
  %512 = fadd float %320, %488, !dbg !37
  %513 = fadd float %321, %485, !dbg !37
  %514 = fadd float %322, %486, !dbg !37
  %515 = fadd float %323, %487, !dbg !37
  %516 = fadd float %324, %488, !dbg !37
  %517 = fadd float %325, %485, !dbg !37
  %518 = fadd float %326, %486, !dbg !37
  %519 = fadd float %327, %487, !dbg !37
  %520 = fadd float %328, %488, !dbg !37
  %521 = fadd float %489, %74, !dbg !36
  %522 = fadd float %490, %75, !dbg !36
  %523 = fadd float %491, %76, !dbg !36
  %524 = fadd float %492, %77, !dbg !36
  %525 = fadd float %493, %83, !dbg !36
  %526 = fadd float %494, %84, !dbg !36
  %527 = fadd float %495, %85, !dbg !36
  %528 = fadd float %496, %86, !dbg !36
  %529 = fadd float %497, %92, !dbg !36
  %530 = fadd float %498, %93, !dbg !36
  %531 = fadd float %499, %94, !dbg !36
  %532 = fadd float %500, %95, !dbg !36
  %533 = fadd float %501, %101, !dbg !36
  %534 = fadd float %502, %102, !dbg !36
  %535 = fadd float %503, %103, !dbg !36
  %536 = fadd float %504, %104, !dbg !36
  %537 = fadd float %201, %505, !dbg !36
  %538 = fadd float %203, %506, !dbg !36
  %539 = fadd float %205, %507, !dbg !36
  %540 = fadd float %207, %508, !dbg !36
  %541 = fadd float %213, %509, !dbg !36
  %542 = fadd float %215, %510, !dbg !36
  %543 = fadd float %217, %511, !dbg !36
  %544 = fadd float %219, %512, !dbg !36
  %545 = fadd float %225, %513, !dbg !36
  %546 = fadd float %227, %514, !dbg !36
  %547 = fadd float %229, %515, !dbg !36
  %548 = fadd float %231, %516, !dbg !36
  %549 = fadd float %237, %517, !dbg !36
  %550 = fadd float %239, %518, !dbg !36
  %551 = fadd float %241, %519, !dbg !36
  %552 = fadd float %243, %520, !dbg !36
  %553 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !38
  %554 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !38
  %555 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !38
  %556 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !38
  %557 = bitcast float %521 to i32, !dbg !39
  %558 = bitcast float %522 to i32, !dbg !39
  %559 = bitcast float %523 to i32, !dbg !39
  %560 = bitcast float %524 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %557, i32 %558, i32 %559, i32 %560, ptr addrspace(1) %553, i1 %33) #2, !dbg !39
  %561 = bitcast float %525 to i32, !dbg !39
  %562 = bitcast float %526 to i32, !dbg !39
  %563 = bitcast float %527 to i32, !dbg !39
  %564 = bitcast float %528 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %561, i32 %562, i32 %563, i32 %564, ptr addrspace(1) %554, i1 %34) #2, !dbg !39
  %565 = bitcast float %529 to i32, !dbg !39
  %566 = bitcast float %530 to i32, !dbg !39
  %567 = bitcast float %531 to i32, !dbg !39
  %568 = bitcast float %532 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %565, i32 %566, i32 %567, i32 %568, ptr addrspace(1) %555, i1 %35) #2, !dbg !39
  %569 = bitcast float %533 to i32, !dbg !39
  %570 = bitcast float %534 to i32, !dbg !39
  %571 = bitcast float %535 to i32, !dbg !39
  %572 = bitcast float %536 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %569, i32 %570, i32 %571, i32 %572, ptr addrspace(1) %556, i1 %36) #2, !dbg !39
  %573 = getelementptr float, ptr addrspace(1) %5, i64 %257, !dbg !40
  %574 = getelementptr float, ptr addrspace(1) %5, i64 %259, !dbg !40
  %575 = getelementptr float, ptr addrspace(1) %5, i64 %261, !dbg !40
  %576 = getelementptr float, ptr addrspace(1) %5, i64 %263, !dbg !40
  %577 = bitcast float %537 to i32, !dbg !41
  %578 = bitcast float %538 to i32, !dbg !41
  %579 = bitcast float %539 to i32, !dbg !41
  %580 = bitcast float %540 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %577, i32 %578, i32 %579, i32 %580, ptr addrspace(1) %573, i1 %37) #2, !dbg !41
  %581 = bitcast float %541 to i32, !dbg !41
  %582 = bitcast float %542 to i32, !dbg !41
  %583 = bitcast float %543 to i32, !dbg !41
  %584 = bitcast float %544 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %581, i32 %582, i32 %583, i32 %584, ptr addrspace(1) %574, i1 %37) #2, !dbg !41
  %585 = bitcast float %545 to i32, !dbg !41
  %586 = bitcast float %546 to i32, !dbg !41
  %587 = bitcast float %547 to i32, !dbg !41
  %588 = bitcast float %548 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %585, i32 %586, i32 %587, i32 %588, ptr addrspace(1) %575, i1 %37) #2, !dbg !41
  %589 = bitcast float %549 to i32, !dbg !41
  %590 = bitcast float %550 to i32, !dbg !41
  %591 = bitcast float %551 to i32, !dbg !41
  %592 = bitcast float %552 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %589, i32 %590, i32 %591, i32 %592, ptr addrspace(1) %576, i1 %37) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cypkicl3pvgg3zxdqen46p3jyav2kym5ooq3nx6ylg5qfk6d4ev6.py", directory: "inductor_cache/yp")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_12", linkageName: "triton_poi_fused_add_convolution_mul_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 38, scope: !7)
!28 = !DILocation(line: 34, column: 50, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 43, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 55, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 25, scope: !7)
!39 = !DILocation(line: 39, column: 46, scope: !7)
!40 = !DILocation(line: 40, column: 25, scope: !7)
!41 = !DILocation(line: 40, column: 56, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
