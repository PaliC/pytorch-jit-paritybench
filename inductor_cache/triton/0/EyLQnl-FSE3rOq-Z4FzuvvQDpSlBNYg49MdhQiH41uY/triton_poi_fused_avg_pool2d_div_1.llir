; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_div_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 62, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %8, 1, !dbg !13
  %14 = icmp slt i32 %12, 64, !dbg !14
  %15 = ashr exact i32 %12, 1, !dbg !15
  %16 = shl i32 %12, 2, !dbg !16
  %17 = add i32 %16, -5, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 false, i32 0, i1 false) #1, !dbg !19
  %21 = bitcast i32 %20 to float, !dbg !19
  %22 = add i32 %16, -4, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = add i32 %16, -3, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = add i32 %16, -1, !dbg !24
  %29 = sext i32 %28 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = sext i32 %16 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !26
  %33 = or disjoint i32 %16, 1, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !28
  %36 = or disjoint i32 %16, 3, !dbg !29
  %37 = sext i32 %36 to i64, !dbg !30
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !30
  %39 = or disjoint i32 %16, 4, !dbg !31
  %40 = sext i32 %39 to i64, !dbg !32
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !32
  %42 = or disjoint i32 %16, 5, !dbg !33
  %43 = sext i32 %42 to i64, !dbg !34
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !34
  %45 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !35
  %46 = insertelement <2 x i32> %45, i32 %15, i64 1, !dbg !35
  %47 = srem <2 x i32> %46, splat (i32 2), !dbg !35
  %48 = extractelement <2 x i32> %47, i64 0, !dbg !35
  %49 = extractelement <2 x i32> %47, i64 1, !dbg !36
  %50 = icmp sgt i32 %49, 0, !dbg !37
  %51 = shl nsw <2 x i32> %47, splat (i32 1), !dbg !38
  %52 = shl nsw i32 %48, 1, !dbg !38
  %53 = icmp sgt i32 %48, 0, !dbg !39
  %54 = and i1 %53, %50, !dbg !40
  %55 = add i32 %52, %16, !dbg !41
  %56 = add i32 %55, -5, !dbg !17
  %57 = sext i32 %56 to i64, !dbg !18
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !18
  %59 = and i1 %14, %54, !dbg !42
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 0, i1 %59) #1, !dbg !19
  %61 = bitcast i32 %60 to float, !dbg !19
  %62 = icmp sgt i32 %48, -1, !dbg !43
  %63 = and i1 %62, %50, !dbg !44
  %64 = add i32 %55, -4, !dbg !20
  %65 = sext i32 %64 to i64, !dbg !21
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !21
  %67 = and i1 %14, %50, !dbg !45
  %68 = and i1 %14, %63, !dbg !45
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %67, i32 0, i1 %67) #1, !dbg !46
  %70 = bitcast i32 %69 to float, !dbg !46
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %68, i32 0, i1 %68) #1, !dbg !46
  %72 = bitcast i32 %71 to float, !dbg !46
  %73 = fadd float %21, %70, !dbg !47
  %74 = fadd float %61, %72, !dbg !47
  %75 = add i32 %55, -3, !dbg !22
  %76 = sext i32 %75 to i64, !dbg !23
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !23
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %67, i32 0, i1 %67) #1, !dbg !48
  %79 = bitcast i32 %78 to float, !dbg !48
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %68, i32 0, i1 %68) #1, !dbg !48
  %81 = bitcast i32 %80 to float, !dbg !48
  %82 = fadd float %73, %79, !dbg !49
  %83 = fadd float %74, %81, !dbg !49
  %84 = icmp sgt i32 %49, -1, !dbg !50
  %85 = and i1 %53, %84, !dbg !51
  %86 = add nsw i32 %55, -1, !dbg !24
  %87 = sext i32 %86 to i64, !dbg !25
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !25
  %89 = and i1 %14, %85, !dbg !52
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 false, i32 0, i1 false) #1, !dbg !53
  %91 = bitcast i32 %90 to float, !dbg !53
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %89, i32 0, i1 %89) #1, !dbg !53
  %93 = bitcast i32 %92 to float, !dbg !53
  %94 = fadd float %82, %91, !dbg !54
  %95 = fadd float %83, %93, !dbg !54
  %96 = or i32 %49, %48, !dbg !55
  %97 = icmp sgt i32 %96, -1, !dbg !55
  %98 = sext i32 %55 to i64, !dbg !26
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !26
  %100 = and i1 %14, %84, !dbg !56
  %101 = and i1 %14, %97, !dbg !56
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %100, i32 0, i1 %100) #1, !dbg !57
  %103 = bitcast i32 %102 to float, !dbg !57
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %101, i32 0, i1 %101) #1, !dbg !57
  %105 = bitcast i32 %104 to float, !dbg !57
  %106 = fadd float %94, %103, !dbg !58
  %107 = fadd float %95, %105, !dbg !58
  %108 = or disjoint i32 %55, 1, !dbg !27
  %109 = sext i32 %108 to i64, !dbg !28
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %100, i32 0, i1 %100) #1, !dbg !59
  %112 = bitcast i32 %111 to float, !dbg !59
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %101, i32 0, i1 %101) #1, !dbg !59
  %114 = bitcast i32 %113 to float, !dbg !59
  %115 = fadd float %106, %112, !dbg !60
  %116 = fadd float %107, %114, !dbg !60
  %117 = add i32 %55, 3, !dbg !29
  %118 = sext i32 %117 to i64, !dbg !30
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !30
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 false, i32 0, i1 false) #1, !dbg !61
  %121 = bitcast i32 %120 to float, !dbg !61
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %89, i32 0, i1 %89) #1, !dbg !61
  %123 = bitcast i32 %122 to float, !dbg !61
  %124 = fadd float %115, %121, !dbg !62
  %125 = fadd float %116, %123, !dbg !62
  %126 = add i32 %55, 4, !dbg !31
  %127 = sext i32 %126 to i64, !dbg !32
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !32
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %100, i32 0, i1 %100) #1, !dbg !63
  %130 = bitcast i32 %129 to float, !dbg !63
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %101, i32 0, i1 %101) #1, !dbg !63
  %132 = bitcast i32 %131 to float, !dbg !63
  %133 = fadd float %124, %130, !dbg !64
  %134 = fadd float %125, %132, !dbg !64
  %135 = add i32 %55, 5, !dbg !33
  %136 = sext i32 %135 to i64, !dbg !34
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !34
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %100, i32 0, i1 %100) #1, !dbg !65
  %139 = bitcast i32 %138 to float, !dbg !65
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %101, i32 0, i1 %101) #1, !dbg !65
  %141 = bitcast i32 %140 to float, !dbg !65
  %142 = fadd float %133, %139, !dbg !66
  %143 = fadd float %134, %141, !dbg !66
  %144 = mul nsw i32 %48, -2, !dbg !67
  %145 = mul nsw i32 %49, -2, !dbg !68
  %146 = add nsw <2 x i32> %51, splat (i32 2), !dbg !69
  %147 = extractelement <2 x i32> %146, i64 1, !dbg !70
  %148 = shl nuw nsw i32 %147, 1, !dbg !70
  %149 = extractelement <2 x i32> %146, i64 0, !dbg !36
  %150 = mul nsw i32 %145, %149, !dbg !71
  %151 = shl nsw i32 %48, 2, !dbg !72
  %152 = mul nsw i32 %151, %49, !dbg !73
  %153 = add nsw i32 %145, 3, !dbg !74
  %154 = shl nsw i32 %49, 2, !dbg !36
  %155 = sub nsw i32 %153, %154, !dbg !36
  %156 = add nsw i32 %155, %147, !dbg !75
  %157 = add nsw i32 %156, %148, !dbg !76
  %reass.add = add nsw i32 %149, %144
  %reass.mul = mul nsw i32 %reass.add, %147
  %158 = or disjoint i32 %144, 1, !dbg !77
  %159 = add nsw i32 %158, %145, !dbg !74
  %160 = add nsw i32 %159, %152, !dbg !78
  %161 = add nsw i32 %160, %149, !dbg !36
  %162 = add nsw i32 %161, %150, !dbg !79
  %163 = add i32 %162, %147, !dbg !75
  %164 = add i32 %163, %reass.mul, !dbg !76
  %165 = sitofp i32 %157 to float, !dbg !80
  %166 = sitofp i32 %164 to float, !dbg !80
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %165) #1, !dbg !80
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %166) #1, !dbg !80
  %169 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !81
  %170 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !81
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 false, i32 0, i1 false) #1, !dbg !82
  %172 = bitcast i32 %171 to float, !dbg !82
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %170, i1 %59, i32 0, i1 %59) #1, !dbg !82
  %174 = bitcast i32 %173 to float, !dbg !82
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !83
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !83
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %67, i32 0, i1 %67) #1, !dbg !84
  %178 = bitcast i32 %177 to float, !dbg !84
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %68, i32 0, i1 %68) #1, !dbg !84
  %180 = bitcast i32 %179 to float, !dbg !84
  %181 = fadd float %172, %178, !dbg !85
  %182 = fadd float %174, %180, !dbg !85
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !86
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !86
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %67, i32 0, i1 %67) #1, !dbg !87
  %186 = bitcast i32 %185 to float, !dbg !87
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %68, i32 0, i1 %68) #1, !dbg !87
  %188 = bitcast i32 %187 to float, !dbg !87
  %189 = fadd float %181, %186, !dbg !88
  %190 = fadd float %182, %188, !dbg !88
  %191 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !89
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !89
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 false, i32 0, i1 false) #1, !dbg !90
  %194 = bitcast i32 %193 to float, !dbg !90
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %89, i32 0, i1 %89) #1, !dbg !90
  %196 = bitcast i32 %195 to float, !dbg !90
  %197 = fadd float %189, %194, !dbg !91
  %198 = fadd float %190, %196, !dbg !91
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !92
  %200 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !92
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %100, i32 0, i1 %100) #1, !dbg !93
  %202 = bitcast i32 %201 to float, !dbg !93
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %200, i1 %101, i32 0, i1 %101) #1, !dbg !93
  %204 = bitcast i32 %203 to float, !dbg !93
  %205 = fadd float %197, %202, !dbg !94
  %206 = fadd float %198, %204, !dbg !94
  %207 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !95
  %208 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !95
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %100, i32 0, i1 %100) #1, !dbg !96
  %210 = bitcast i32 %209 to float, !dbg !96
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %101, i32 0, i1 %101) #1, !dbg !96
  %212 = bitcast i32 %211 to float, !dbg !96
  %213 = fadd float %205, %210, !dbg !97
  %214 = fadd float %206, %212, !dbg !97
  %215 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !98
  %216 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !98
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 false, i32 0, i1 false) #1, !dbg !99
  %218 = bitcast i32 %217 to float, !dbg !99
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %89, i32 0, i1 %89) #1, !dbg !99
  %220 = bitcast i32 %219 to float, !dbg !99
  %221 = fadd float %213, %218, !dbg !100
  %222 = fadd float %214, %220, !dbg !100
  %223 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !101
  %224 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !101
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %100, i32 0, i1 %100) #1, !dbg !102
  %226 = bitcast i32 %225 to float, !dbg !102
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %101, i32 0, i1 %101) #1, !dbg !102
  %228 = bitcast i32 %227 to float, !dbg !102
  %229 = fadd float %221, %226, !dbg !103
  %230 = fadd float %222, %228, !dbg !103
  %231 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !104
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !104
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %100, i32 0, i1 %100) #1, !dbg !105
  %234 = bitcast i32 %233 to float, !dbg !105
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %101, i32 0, i1 %101) #1, !dbg !105
  %236 = bitcast i32 %235 to float, !dbg !105
  %237 = fadd float %229, %234, !dbg !106
  %238 = fadd float %230, %236, !dbg !106
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %237, float %165) #1, !dbg !107
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float %166) #1, !dbg !107
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %239) #1, !dbg !108
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float %240) #1, !dbg !108
  %243 = sext i32 %12 to i64, !dbg !109
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %243, !dbg !109
  %245 = bitcast float %167 to i32, !dbg !110
  %246 = bitcast float %168 to i32, !dbg !110
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %245, i32 %246, ptr addrspace(1) %244, i1 %14) #1, !dbg !110
  %247 = getelementptr float, ptr addrspace(1) %3, i64 %243, !dbg !111
  %248 = bitcast float %239 to i32, !dbg !112
  %249 = bitcast float %240 to i32, !dbg !112
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %248, i32 %249, ptr addrspace(1) %247, i1 %14) #1, !dbg !112
  %250 = getelementptr float, ptr addrspace(1) %4, i64 %243, !dbg !113
  %251 = bitcast float %241 to i32, !dbg !114
  %252 = bitcast float %242 to i32, !dbg !114
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %251, i32 %252, ptr addrspace(1) %250, i1 %14) #1, !dbg !114
  ret void, !dbg !115
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chuqta4pwag2sed3mevuh7cp562a3myjskaclwmmtmn4ighmgjye.py", directory: "inductor_cache/hu")
!4 = !{ptr @triton_poi_fused_avg_pool2d_div_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_div_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_div_1", linkageName: "triton_poi_fused_avg_pool2d_div_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 39, column: 47, scope: !7)
!17 = !DILocation(line: 39, column: 45, scope: !7)
!18 = !DILocation(line: 39, column: 31, scope: !7)
!19 = !DILocation(line: 39, column: 52, scope: !7)
!20 = !DILocation(line: 45, column: 45, scope: !7)
!21 = !DILocation(line: 45, column: 31, scope: !7)
!22 = !DILocation(line: 52, column: 45, scope: !7)
!23 = !DILocation(line: 52, column: 31, scope: !7)
!24 = !DILocation(line: 59, column: 45, scope: !7)
!25 = !DILocation(line: 59, column: 31, scope: !7)
!26 = !DILocation(line: 62, column: 31, scope: !7)
!27 = !DILocation(line: 65, column: 42, scope: !7)
!28 = !DILocation(line: 65, column: 31, scope: !7)
!29 = !DILocation(line: 72, column: 42, scope: !7)
!30 = !DILocation(line: 72, column: 31, scope: !7)
!31 = !DILocation(line: 75, column: 42, scope: !7)
!32 = !DILocation(line: 75, column: 31, scope: !7)
!33 = !DILocation(line: 78, column: 42, scope: !7)
!34 = !DILocation(line: 78, column: 31, scope: !7)
!35 = !DILocation(line: 25, column: 19, scope: !7)
!36 = !DILocation(line: 80, column: 241, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 34, column: 20, scope: !7)
!39 = !DILocation(line: 35, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 38, scope: !7)
!42 = !DILocation(line: 39, column: 60, scope: !7)
!43 = !DILocation(line: 41, column: 21, scope: !7)
!44 = !DILocation(line: 44, column: 19, scope: !7)
!45 = !DILocation(line: 45, column: 60, scope: !7)
!46 = !DILocation(line: 45, column: 52, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 52, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 55, column: 21, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 60, scope: !7)
!53 = !DILocation(line: 59, column: 52, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 62, column: 53, scope: !7)
!57 = !DILocation(line: 62, column: 45, scope: !7)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 49, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 72, column: 49, scope: !7)
!62 = !DILocation(line: 73, column: 20, scope: !7)
!63 = !DILocation(line: 75, column: 49, scope: !7)
!64 = !DILocation(line: 76, column: 20, scope: !7)
!65 = !DILocation(line: 78, column: 49, scope: !7)
!66 = !DILocation(line: 79, column: 20, scope: !7)
!67 = !DILocation(line: 80, column: 22, scope: !7)
!68 = !DILocation(line: 80, column: 34, scope: !7)
!69 = !DILocation(line: 80, column: 60, scope: !7)
!70 = !DILocation(line: 80, column: 103, scope: !7)
!71 = !DILocation(line: 80, column: 250, scope: !7)
!72 = !DILocation(line: 80, column: 316, scope: !7)
!73 = !DILocation(line: 80, column: 319, scope: !7)
!74 = !DILocation(line: 80, column: 40, scope: !7)
!75 = !DILocation(line: 80, column: 325, scope: !7)
!76 = !DILocation(line: 80, column: 389, scope: !7)
!77 = !DILocation(line: 80, column: 29, scope: !7)
!78 = !DILocation(line: 80, column: 167, scope: !7)
!79 = !DILocation(line: 80, column: 314, scope: !7)
!80 = !DILocation(line: 81, column: 20, scope: !7)
!81 = !DILocation(line: 82, column: 31, scope: !7)
!82 = !DILocation(line: 82, column: 52, scope: !7)
!83 = !DILocation(line: 83, column: 31, scope: !7)
!84 = !DILocation(line: 83, column: 52, scope: !7)
!85 = !DILocation(line: 84, column: 20, scope: !7)
!86 = !DILocation(line: 85, column: 31, scope: !7)
!87 = !DILocation(line: 85, column: 52, scope: !7)
!88 = !DILocation(line: 86, column: 20, scope: !7)
!89 = !DILocation(line: 87, column: 31, scope: !7)
!90 = !DILocation(line: 87, column: 52, scope: !7)
!91 = !DILocation(line: 88, column: 20, scope: !7)
!92 = !DILocation(line: 89, column: 31, scope: !7)
!93 = !DILocation(line: 89, column: 45, scope: !7)
!94 = !DILocation(line: 90, column: 20, scope: !7)
!95 = !DILocation(line: 91, column: 31, scope: !7)
!96 = !DILocation(line: 91, column: 49, scope: !7)
!97 = !DILocation(line: 92, column: 20, scope: !7)
!98 = !DILocation(line: 93, column: 31, scope: !7)
!99 = !DILocation(line: 93, column: 49, scope: !7)
!100 = !DILocation(line: 94, column: 20, scope: !7)
!101 = !DILocation(line: 95, column: 31, scope: !7)
!102 = !DILocation(line: 95, column: 49, scope: !7)
!103 = !DILocation(line: 96, column: 20, scope: !7)
!104 = !DILocation(line: 97, column: 31, scope: !7)
!105 = !DILocation(line: 97, column: 49, scope: !7)
!106 = !DILocation(line: 98, column: 20, scope: !7)
!107 = !DILocation(line: 99, column: 20, scope: !7)
!108 = !DILocation(line: 100, column: 20, scope: !7)
!109 = !DILocation(line: 101, column: 25, scope: !7)
!110 = !DILocation(line: 101, column: 37, scope: !7)
!111 = !DILocation(line: 102, column: 25, scope: !7)
!112 = !DILocation(line: 102, column: 37, scope: !7)
!113 = !DILocation(line: 103, column: 25, scope: !7)
!114 = !DILocation(line: 103, column: 37, scope: !7)
!115 = !DILocation(line: 103, column: 4, scope: !7)
