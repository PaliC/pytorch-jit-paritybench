; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 256, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = shl i32 %7, 12, !dbg !13
  %13 = or disjoint i32 %12, %11
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !16
  %20 = bitcast i32 %19 to float, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !16
  %22 = bitcast i32 %21 to float, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !16
  %24 = bitcast i32 %23 to float, !dbg !16
  %25 = select i1 %8, float %24, float 0.000000e+00, !dbg !17
  %26 = select i1 %8, float %22, float 0.000000e+00, !dbg !17
  %27 = select i1 %8, float %20, float 0.000000e+00, !dbg !17
  %28 = select i1 %8, float %18, float 0.000000e+00, !dbg !17
  %29 = or disjoint i64 %14, 2048, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !15
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !16
  %33 = bitcast i32 %32 to float, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !16
  %35 = bitcast i32 %34 to float, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !16
  %37 = bitcast i32 %36 to float, !dbg !16
  %38 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !16
  %39 = bitcast i32 %38 to float, !dbg !16
  %40 = fsub float %39, %25, !dbg !19
  %41 = fsub float %37, %26, !dbg !19
  %42 = fsub float %35, %27, !dbg !19
  %43 = fsub float %33, %28, !dbg !19
  %44 = select i1 %8, float 2.000000e+00, float 1.000000e+00, !dbg !23
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float %44) #5, !dbg !24
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float %44) #5, !dbg !24
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %44) #5, !dbg !24
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float %44) #5, !dbg !24
  %49 = fadd float %25, %45, !dbg !25
  %50 = fsub float %39, %49, !dbg !26
  %51 = fmul float %40, %50, !dbg !27
  %52 = fadd float %51, 0.000000e+00, !dbg !28
  %53 = fadd float %26, %46, !dbg !25
  %54 = fsub float %37, %53, !dbg !26
  %55 = fmul float %41, %54, !dbg !27
  %56 = fadd float %55, 0.000000e+00, !dbg !28
  %57 = fadd float %27, %47, !dbg !25
  %58 = fsub float %35, %57, !dbg !26
  %59 = fmul float %42, %58, !dbg !27
  %60 = fadd float %59, 0.000000e+00, !dbg !28
  %61 = fadd float %28, %48, !dbg !25
  %62 = fsub float %33, %61, !dbg !26
  %63 = fmul float %43, %62, !dbg !27
  %64 = fadd float %63, 0.000000e+00, !dbg !28
  %65 = select i1 %8, float %49, float 0.000000e+00, !dbg !17
  %66 = select i1 %8, float %53, float 0.000000e+00, !dbg !17
  %67 = select i1 %8, float %57, float 0.000000e+00, !dbg !17
  %68 = select i1 %8, float %61, float 0.000000e+00, !dbg !17
  %69 = select i1 %8, float %60, float 0.000000e+00, !dbg !29
  %70 = select i1 %8, float %64, float 0.000000e+00, !dbg !29
  %71 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %72 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %73 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %74 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %75 = lshr i32 %9, 5, !dbg !12
  %76 = and i32 %9, 31, !dbg !12
  %77 = fsub float %66, %65, !dbg !30
  %78 = select i1 %8, float 4.000000e+00, float 0.000000e+00, !dbg !33
  %79 = fcmp oeq float %78, 0.000000e+00, !dbg !34
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %78) #5, !dbg !35
  %81 = select i1 %79, float 0.000000e+00, float %80, !dbg !36
  %82 = fmul float %77, %81, !dbg !37
  %83 = fadd float %65, %82, !dbg !38
  %84 = fadd float %52, %56, !dbg !39
  %85 = select i1 %8, float %84, float 0.000000e+00, !dbg !39
  %86 = fmul float %77, %77, !dbg !40
  %87 = fmul float %86, %71, !dbg !41
  %88 = fmul float %87, %81, !dbg !42
  %89 = fadd float %85, %88, !dbg !43
  %90 = fsub float %67, %83, !dbg !30
  %91 = select i1 %8, float 6.000000e+00, float 0.000000e+00, !dbg !33
  %92 = fcmp oeq float %91, 0.000000e+00, !dbg !34
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %91) #5, !dbg !35
  %94 = select i1 %92, float 0.000000e+00, float %93, !dbg !36
  %95 = fmul float %94, %90, !dbg !37
  %96 = fadd float %83, %95, !dbg !38
  %97 = fadd float %69, %89, !dbg !39
  %98 = fmul float %90, %90, !dbg !40
  %99 = fmul float %78, %98, !dbg !41
  %100 = fmul float %94, %99, !dbg !42
  %101 = fadd float %97, %100, !dbg !43
  %102 = fsub float %68, %96, !dbg !30
  %103 = select i1 %8, float 8.000000e+00, float 0.000000e+00, !dbg !33
  %104 = fcmp oeq float %103, 0.000000e+00, !dbg !34
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %103) #5, !dbg !35
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !36
  %107 = fmul float %106, %102, !dbg !37
  %108 = fadd float %96, %107, !dbg !38
  %109 = fadd float %70, %101, !dbg !39
  %110 = fmul float %102, %102, !dbg !40
  %111 = fmul float %91, %110, !dbg !41
  %112 = fmul float %106, %111, !dbg !42
  %113 = fadd float %109, %112, !dbg !43
  %114 = bitcast float %108 to i32, !dbg !44
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !44
  %116 = bitcast i32 %115 to float, !dbg !44
  %117 = bitcast float %113 to i32, !dbg !44
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !44
  %119 = bitcast i32 %118 to float, !dbg !44
  %120 = bitcast float %103 to i32, !dbg !44
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 16, i32 31), !dbg !44
  %122 = bitcast i32 %121 to float, !dbg !44
  %123 = fsub float %116, %108, !dbg !30
  %124 = fadd float %103, %122, !dbg !33
  %125 = fcmp oeq float %124, 0.000000e+00, !dbg !34
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %124) #5, !dbg !35
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !36
  %128 = fmul float %127, %123, !dbg !37
  %129 = fadd float %108, %128, !dbg !38
  %130 = fadd float %113, %119, !dbg !39
  %131 = fmul float %123, %123, !dbg !40
  %132 = fmul float %103, %131, !dbg !41
  %133 = fmul float %127, %132, !dbg !42
  %134 = fadd float %130, %133, !dbg !43
  %135 = bitcast float %129 to i32, !dbg !44
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !44
  %137 = bitcast i32 %136 to float, !dbg !44
  %138 = bitcast float %134 to i32, !dbg !44
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 8, i32 31), !dbg !44
  %140 = bitcast i32 %139 to float, !dbg !44
  %141 = bitcast float %124 to i32, !dbg !44
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 8, i32 31), !dbg !44
  %143 = bitcast i32 %142 to float, !dbg !44
  %144 = fsub float %137, %129, !dbg !30
  %145 = fadd float %124, %143, !dbg !33
  %146 = fcmp oeq float %145, 0.000000e+00, !dbg !34
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %145) #5, !dbg !35
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !36
  %149 = fmul float %144, %148, !dbg !37
  %150 = fadd float %129, %149, !dbg !38
  %151 = fadd float %134, %140, !dbg !39
  %152 = fmul float %144, %144, !dbg !40
  %153 = fmul float %124, %152, !dbg !41
  %154 = fmul float %148, %153, !dbg !42
  %155 = fadd float %151, %154, !dbg !43
  %156 = bitcast float %150 to i32, !dbg !44
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 4, i32 31), !dbg !44
  %158 = bitcast i32 %157 to float, !dbg !44
  %159 = bitcast float %155 to i32, !dbg !44
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 4, i32 31), !dbg !44
  %161 = bitcast i32 %160 to float, !dbg !44
  %162 = bitcast float %145 to i32, !dbg !44
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !44
  %164 = bitcast i32 %163 to float, !dbg !44
  %165 = fsub float %158, %150, !dbg !30
  %166 = fadd float %145, %164, !dbg !33
  %167 = fcmp oeq float %166, 0.000000e+00, !dbg !34
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %166) #5, !dbg !35
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !36
  %170 = fmul float %165, %169, !dbg !37
  %171 = fadd float %150, %170, !dbg !38
  %172 = fadd float %155, %161, !dbg !39
  %173 = fmul float %165, %165, !dbg !40
  %174 = fmul float %145, %173, !dbg !41
  %175 = fmul float %169, %174, !dbg !42
  %176 = fadd float %172, %175, !dbg !43
  %177 = bitcast float %171 to i32, !dbg !44
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !44
  %179 = bitcast i32 %178 to float, !dbg !44
  %180 = bitcast float %176 to i32, !dbg !44
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !44
  %182 = bitcast i32 %181 to float, !dbg !44
  %183 = bitcast float %166 to i32, !dbg !44
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !44
  %185 = bitcast i32 %184 to float, !dbg !44
  %186 = fsub float %179, %171, !dbg !30
  %187 = fadd float %166, %185, !dbg !33
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !34
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float %187) #5, !dbg !35
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !36
  %191 = fmul float %186, %190, !dbg !37
  %192 = fadd float %171, %191, !dbg !38
  %193 = fadd float %176, %182, !dbg !39
  %194 = fmul float %186, %186, !dbg !40
  %195 = fmul float %166, %194, !dbg !41
  %196 = fmul float %190, %195, !dbg !42
  %197 = fadd float %193, %196, !dbg !43
  %198 = bitcast float %192 to i32, !dbg !44
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 1, i32 31), !dbg !44
  %200 = bitcast i32 %199 to float, !dbg !44
  %201 = bitcast float %197 to i32, !dbg !44
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !44
  %203 = bitcast i32 %202 to float, !dbg !44
  %204 = bitcast float %187 to i32, !dbg !44
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 1, i32 31), !dbg !44
  %206 = bitcast i32 %205 to float, !dbg !44
  %207 = fsub float %200, %192, !dbg !30
  %208 = fadd float %187, %206, !dbg !33
  %209 = fcmp oeq float %208, 0.000000e+00, !dbg !34
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %208) #5, !dbg !35
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !36
  %212 = fmul float %207, %211, !dbg !37
  %213 = fadd float %192, %212, !dbg !38
  %214 = fadd float %197, %203, !dbg !39
  %215 = fmul float %207, %207, !dbg !40
  %216 = fmul float %187, %215, !dbg !41
  %217 = fmul float %211, %216, !dbg !42
  %218 = fadd float %214, %217, !dbg !43
  %219 = icmp eq i32 %76, 0, !dbg !44
  %220 = and i32 %75, 15, !dbg !44
  %221 = zext nneg i32 %220 to i64, !dbg !44
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i64 %221, !dbg !44
  %223 = bitcast float %213 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 %219) #5, !dbg !44
  %224 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %221, !dbg !44
  %225 = bitcast float %218 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 %219) #5, !dbg !44
  %226 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %221, !dbg !44
  %227 = bitcast float %208 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 %219) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %228 = icmp slt i32 %9, 16, !dbg !44
  %229 = sext i32 %9 to i64, !dbg !44
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i64 %229, !dbg !44
  %231 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %230, i1 %228) #5, !dbg !44
  %232 = bitcast i32 %231 to float, !dbg !44
  %233 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %229, !dbg !44
  %234 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %233, i1 %228) #5, !dbg !44
  %235 = bitcast i32 %234 to float, !dbg !44
  %236 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %229, !dbg !44
  %237 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %236, i1 %228) #5, !dbg !44
  %238 = bitcast i32 %237 to float, !dbg !44
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !44
  %240 = bitcast i32 %239 to float, !dbg !44
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 8, i32 31), !dbg !44
  %242 = bitcast i32 %241 to float, !dbg !44
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 8, i32 31), !dbg !44
  %244 = bitcast i32 %243 to float, !dbg !44
  %245 = fsub float %240, %232, !dbg !30
  %246 = fadd float %238, %244, !dbg !33
  %247 = fcmp oeq float %246, 0.000000e+00, !dbg !34
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %246) #5, !dbg !35
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !36
  %250 = fmul float %245, %249, !dbg !37
  %251 = fadd float %250, %232, !dbg !38
  %252 = fadd float %235, %242, !dbg !39
  %253 = fmul float %245, %245, !dbg !40
  %254 = fmul float %253, %238, !dbg !41
  %255 = fmul float %254, %249, !dbg !42
  %256 = fadd float %252, %255, !dbg !43
  %257 = bitcast float %251 to i32, !dbg !44
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 4, i32 31), !dbg !44
  %259 = bitcast i32 %258 to float, !dbg !44
  %260 = bitcast float %256 to i32, !dbg !44
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 4, i32 31), !dbg !44
  %262 = bitcast i32 %261 to float, !dbg !44
  %263 = bitcast float %246 to i32, !dbg !44
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !44
  %265 = bitcast i32 %264 to float, !dbg !44
  %266 = fsub float %259, %251, !dbg !30
  %267 = fadd float %246, %265, !dbg !33
  %268 = fcmp oeq float %267, 0.000000e+00, !dbg !34
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %265, float %267) #5, !dbg !35
  %270 = select i1 %268, float 0.000000e+00, float %269, !dbg !36
  %271 = fmul float %266, %270, !dbg !37
  %272 = fadd float %251, %271, !dbg !38
  %273 = fadd float %256, %262, !dbg !39
  %274 = fmul float %266, %266, !dbg !40
  %275 = fmul float %246, %274, !dbg !41
  %276 = fmul float %270, %275, !dbg !42
  %277 = fadd float %273, %276, !dbg !43
  %278 = bitcast float %272 to i32, !dbg !44
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 2, i32 31), !dbg !44
  %280 = bitcast i32 %279 to float, !dbg !44
  %281 = bitcast float %277 to i32, !dbg !44
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !44
  %283 = bitcast i32 %282 to float, !dbg !44
  %284 = bitcast float %267 to i32, !dbg !44
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !44
  %286 = bitcast i32 %285 to float, !dbg !44
  %287 = fsub float %280, %272, !dbg !30
  %288 = fadd float %267, %286, !dbg !33
  %289 = fcmp oeq float %288, 0.000000e+00, !dbg !34
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float %288) #5, !dbg !35
  %291 = select i1 %289, float 0.000000e+00, float %290, !dbg !36
  %292 = fmul float %287, %291, !dbg !37
  %293 = fadd float %272, %292, !dbg !38
  %294 = fadd float %277, %283, !dbg !39
  %295 = fmul float %287, %287, !dbg !40
  %296 = fmul float %267, %295, !dbg !41
  %297 = fmul float %291, %296, !dbg !42
  %298 = fadd float %294, %297, !dbg !43
  %299 = bitcast float %293 to i32, !dbg !44
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !44
  %301 = bitcast i32 %300 to float, !dbg !44
  %302 = bitcast float %298 to i32, !dbg !44
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !44
  %304 = bitcast i32 %303 to float, !dbg !44
  %305 = bitcast float %288 to i32, !dbg !44
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !44
  %307 = bitcast i32 %306 to float, !dbg !44
  %308 = fsub float %301, %293, !dbg !30
  %309 = fadd float %288, %307, !dbg !33
  %310 = fcmp oeq float %309, 0.000000e+00, !dbg !34
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float %309) #5, !dbg !35
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !36
  %313 = fmul float %308, %312, !dbg !37
  %314 = fadd float %293, %313, !dbg !38
  %315 = fadd float %298, %304, !dbg !39
  %316 = fmul float %308, %308, !dbg !40
  %317 = fmul float %288, %316, !dbg !41
  %318 = fmul float %312, %317, !dbg !42
  %319 = fadd float %315, %318, !dbg !43
  %320 = and i32 %9, 15, !dbg !44
  %321 = icmp eq i32 %320, 0, !dbg !44
  %322 = and i1 %228, %321, !dbg !44
  %323 = bitcast float %314 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %323, i1 %322) #5, !dbg !44
  %324 = bitcast float %319 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %324, i1 %322) #5, !dbg !44
  %325 = bitcast float %309 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %325, i1 %322) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %326 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %327 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !44
  %328 = sext i32 %7 to i64, !dbg !45
  %329 = getelementptr float, ptr addrspace(1) %1, i64 %328, !dbg !45
  %urem = and i32 %9, 511, !dbg !46
  %330 = icmp eq i32 %urem, 0, !dbg !46
  %331 = and i1 %330, %8, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %326, ptr addrspace(1) %329, i1 %331) #5, !dbg !46
  %332 = getelementptr float, ptr addrspace(1) %2, i64 %328, !dbg !47
  %333 = bitcast float %327 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %333, ptr addrspace(1) %332, i1 %331) #5, !dbg !48
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %327, float 4.096000e+03) #5, !dbg !49
  %335 = fadd float %334, 0x3EE4F8B580000000, !dbg !50
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i = icmp eq i32 %336, 0, !dbg !51
  br i1 %.not.i, label %339, label %337, !dbg !51

337:                                              ; preds = %6
  %338 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %335), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

339:                                              ; preds = %6
  %340 = tail call float @llvm.nvvm.rsqrt.approx.f(float %335), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %337, %339
  %.0.i = phi float [ %338, %337 ], [ %340, %339 ], !dbg !51
  %341 = getelementptr float, ptr addrspace(1) %3, i64 %328, !dbg !52
  %342 = bitcast float %.0.i to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %342, ptr addrspace(1) %341, i1 %331) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci3jguc524n2tdhekoejkjbpprqvqtiudyvszwps4eqm44e7nexu.py", directory: "inductor_cache/i3")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_6, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_6", linkageName: "triton_red_fused__native_batch_norm_legit_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 30, column: 36, scope: !7)
!15 = !DILocation(line: 34, column: 34, scope: !7)
!16 = !DILocation(line: 34, column: 49, scope: !7)
!17 = !DILocation(line: 39, column: 60, scope: !7)
!18 = !DILocation(line: 34, column: 39, scope: !7)
!19 = !DILocation(line: 183, column: 24, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 41, column: 64, scope: !7)
!24 = !DILocation(line: 185, column: 34, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 185, column: 26, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 186, column: 39, scope: !20, inlinedAt: !22)
!27 = !DILocation(line: 186, column: 31, scope: !20, inlinedAt: !22)
!28 = !DILocation(line: 186, column: 22, scope: !20, inlinedAt: !22)
!29 = !DILocation(line: 40, column: 56, scope: !7)
!30 = !DILocation(line: 192, column: 21, scope: !31, inlinedAt: !32)
!31 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!32 = !DILocation(line: 43, column: 41, scope: !7)
!33 = !DILocation(line: 193, column: 28, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 194, column: 39, scope: !31, inlinedAt: !32)
!35 = !DILocation(line: 194, column: 60, scope: !31, inlinedAt: !32)
!36 = !DILocation(line: 194, column: 49, scope: !31, inlinedAt: !32)
!37 = !DILocation(line: 196, column: 25, scope: !31, inlinedAt: !32)
!38 = !DILocation(line: 196, column: 17, scope: !31, inlinedAt: !32)
!39 = !DILocation(line: 197, column: 15, scope: !31, inlinedAt: !32)
!40 = !DILocation(line: 197, column: 30, scope: !31, inlinedAt: !32)
!41 = !DILocation(line: 197, column: 38, scope: !31, inlinedAt: !32)
!42 = !DILocation(line: 197, column: 49, scope: !31, inlinedAt: !32)
!43 = !DILocation(line: 197, column: 22, scope: !31, inlinedAt: !32)
!44 = !DILocation(line: 204, column: 46, scope: !20, inlinedAt: !32)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 36, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 36, scope: !7)
!49 = !DILocation(line: 51, column: 18, scope: !7)
!50 = !DILocation(line: 53, column: 18, scope: !7)
!51 = !DILocation(line: 54, column: 27, scope: !7)
!52 = !DILocation(line: 55, column: 25, scope: !7)
!53 = !DILocation(line: 55, column: 36, scope: !7)
!54 = !DILocation(line: 55, column: 4, scope: !7)
