; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_26(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 51200, !dbg !14
  %11 = srem i32 %9, 512, !dbg !15
  %12 = sdiv i32 %9, 12800, !dbg !16
  %13 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !17
  %14 = shufflevector <2 x i32> %13, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %15 = sdiv <2 x i32> %14, <i32 512, i32 2560>, !dbg !17
  %16 = srem <2 x i32> %15, splat (i32 5), !dbg !18
  %17 = extractelement <2 x i32> %16, i64 1, !dbg !19
  %18 = icmp sgt i32 %17, 0, !dbg !20
  %19 = extractelement <2 x i32> %16, i64 0, !dbg !19
  %20 = icmp sgt i32 %19, 0, !dbg !21
  %21 = and i1 %18, %20, !dbg !22
  %22 = mul nsw <2 x i32> %16, <i32 7168, i32 458752>, !dbg !23
  %23 = shl i32 %12, 21, !dbg !24
  %24 = add i32 %23, %11, !dbg !25
  %25 = add i32 %24, -33280, !dbg !26
  %26 = extractelement <2 x i32> %22, i64 0, !dbg !27
  %27 = add i32 %25, %26, !dbg !28
  %28 = extractelement <2 x i32> %22, i64 1, !dbg !29
  %29 = add i32 %27, %28, !dbg !30
  %30 = sext i32 %29 to i64, !dbg !31
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !31
  %32 = and i1 %10, %21, !dbg !32
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 -8388608, i1 %32, i32 -8388608, i1 %32, i32 -8388608, i1 %32, i32 -8388608, i1 %32) #1, !dbg !33
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !33
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !33
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !33
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !33
  %38 = bitcast i32 %34 to float, !dbg !33
  %39 = bitcast i32 %35 to float, !dbg !33
  %40 = bitcast i32 %36 to float, !dbg !33
  %41 = bitcast i32 %37 to float, !dbg !33
  %42 = icmp sgt i32 %19, -1, !dbg !34
  %43 = and i1 %18, %42, !dbg !35
  %44 = add i32 %24, -32768, !dbg !36
  %45 = add i32 %44, %26, !dbg !37
  %46 = add i32 %45, %28, !dbg !38
  %47 = sext i32 %46 to i64, !dbg !39
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !39
  %49 = and i1 %10, %43, !dbg !40
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49) #1, !dbg !41
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !41
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !41
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !41
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !41
  %55 = bitcast i32 %51 to float, !dbg !41
  %56 = bitcast i32 %52 to float, !dbg !41
  %57 = bitcast i32 %53 to float, !dbg !41
  %58 = bitcast i32 %54 to float, !dbg !41
  %59 = fcmp ogt float %55, %38, !dbg !42
  %60 = fcmp ogt float %56, %39, !dbg !42
  %61 = fcmp ogt float %57, %40, !dbg !42
  %62 = fcmp ogt float %58, %41, !dbg !42
  %63 = fcmp uno float %55, 0.000000e+00, !dbg !46
  %64 = fcmp uno float %56, 0.000000e+00, !dbg !46
  %65 = fcmp uno float %57, 0.000000e+00, !dbg !46
  %66 = fcmp uno float %58, 0.000000e+00, !dbg !46
  %67 = or i1 %59, %63, !dbg !47
  %68 = or i1 %60, %64, !dbg !47
  %69 = or i1 %61, %65, !dbg !47
  %70 = or i1 %62, %66, !dbg !47
  %71 = select i1 %67, float %55, float %38, !dbg !48
  %72 = select i1 %68, float %56, float %39, !dbg !48
  %73 = select i1 %69, float %57, float %40, !dbg !48
  %74 = select i1 %70, float %58, float %41, !dbg !48
  %75 = add i32 %24, -32256, !dbg !49
  %76 = add i32 %75, %26, !dbg !50
  %77 = add i32 %76, %28, !dbg !51
  %78 = sext i32 %77 to i64, !dbg !52
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !52
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49) #1, !dbg !53
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !53
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !53
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !53
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !53
  %85 = bitcast i32 %81 to float, !dbg !53
  %86 = bitcast i32 %82 to float, !dbg !53
  %87 = bitcast i32 %83 to float, !dbg !53
  %88 = bitcast i32 %84 to float, !dbg !53
  %89 = fcmp olt float %71, %85, !dbg !54
  %90 = fcmp olt float %72, %86, !dbg !54
  %91 = fcmp olt float %73, %87, !dbg !54
  %92 = fcmp olt float %74, %88, !dbg !54
  %93 = fcmp uno float %85, 0.000000e+00, !dbg !56
  %94 = fcmp uno float %86, 0.000000e+00, !dbg !56
  %95 = fcmp uno float %87, 0.000000e+00, !dbg !56
  %96 = fcmp uno float %88, 0.000000e+00, !dbg !56
  %97 = or i1 %93, %89, !dbg !57
  %98 = or i1 %94, %90, !dbg !57
  %99 = or i1 %95, %91, !dbg !57
  %100 = or i1 %96, %92, !dbg !57
  %101 = select i1 %97, float %85, float %71, !dbg !58
  %102 = select i1 %98, float %86, float %72, !dbg !58
  %103 = select i1 %99, float %87, float %73, !dbg !58
  %104 = select i1 %100, float %88, float %74, !dbg !58
  %105 = icmp sgt i32 %17, -1, !dbg !59
  %106 = and i1 %105, %20, !dbg !60
  %107 = add i32 %24, -512, !dbg !61
  %108 = add i32 %107, %26, !dbg !62
  %109 = add i32 %108, %28, !dbg !63
  %110 = sext i32 %109 to i64, !dbg !64
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !64
  %112 = and i1 %10, %106, !dbg !65
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112) #1, !dbg !66
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !66
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !66
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !66
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !66
  %118 = bitcast i32 %114 to float, !dbg !66
  %119 = bitcast i32 %115 to float, !dbg !66
  %120 = bitcast i32 %116 to float, !dbg !66
  %121 = bitcast i32 %117 to float, !dbg !66
  %122 = fcmp olt float %101, %118, !dbg !67
  %123 = fcmp olt float %102, %119, !dbg !67
  %124 = fcmp olt float %103, %120, !dbg !67
  %125 = fcmp olt float %104, %121, !dbg !67
  %126 = fcmp uno float %118, 0.000000e+00, !dbg !69
  %127 = fcmp uno float %119, 0.000000e+00, !dbg !69
  %128 = fcmp uno float %120, 0.000000e+00, !dbg !69
  %129 = fcmp uno float %121, 0.000000e+00, !dbg !69
  %130 = or i1 %126, %122, !dbg !70
  %131 = or i1 %127, %123, !dbg !70
  %132 = or i1 %128, %124, !dbg !70
  %133 = or i1 %129, %125, !dbg !70
  %134 = select i1 %130, float %118, float %101, !dbg !71
  %135 = select i1 %131, float %119, float %102, !dbg !71
  %136 = select i1 %132, float %120, float %103, !dbg !71
  %137 = select i1 %133, float %121, float %104, !dbg !71
  %138 = or i32 %17, %19, !dbg !19
  %139 = icmp sgt i32 %138, -1, !dbg !19
  %140 = add i32 %24, %26, !dbg !72
  %141 = add i32 %140, %28, !dbg !73
  %142 = sext i32 %141 to i64, !dbg !74
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !74
  %144 = and i1 %10, %139, !dbg !75
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144) #1, !dbg !76
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !76
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !76
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !76
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !76
  %150 = bitcast i32 %146 to float, !dbg !76
  %151 = bitcast i32 %147 to float, !dbg !76
  %152 = bitcast i32 %148 to float, !dbg !76
  %153 = bitcast i32 %149 to float, !dbg !76
  %154 = fcmp olt float %134, %150, !dbg !77
  %155 = fcmp olt float %135, %151, !dbg !77
  %156 = fcmp olt float %136, %152, !dbg !77
  %157 = fcmp olt float %137, %153, !dbg !77
  %158 = fcmp uno float %150, 0.000000e+00, !dbg !79
  %159 = fcmp uno float %151, 0.000000e+00, !dbg !79
  %160 = fcmp uno float %152, 0.000000e+00, !dbg !79
  %161 = fcmp uno float %153, 0.000000e+00, !dbg !79
  %162 = or i1 %158, %154, !dbg !80
  %163 = or i1 %159, %155, !dbg !80
  %164 = or i1 %160, %156, !dbg !80
  %165 = or i1 %161, %157, !dbg !80
  %166 = select i1 %162, float %150, float %134, !dbg !81
  %167 = select i1 %163, float %151, float %135, !dbg !81
  %168 = select i1 %164, float %152, float %136, !dbg !81
  %169 = select i1 %165, float %153, float %137, !dbg !81
  %170 = add i32 %24, 512, !dbg !82
  %171 = add i32 %170, %26, !dbg !83
  %172 = add i32 %171, %28, !dbg !84
  %173 = sext i32 %172 to i64, !dbg !85
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !85
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %174, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144) #1, !dbg !86
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !86
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !86
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !86
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !86
  %180 = bitcast i32 %176 to float, !dbg !86
  %181 = bitcast i32 %177 to float, !dbg !86
  %182 = bitcast i32 %178 to float, !dbg !86
  %183 = bitcast i32 %179 to float, !dbg !86
  %184 = fcmp olt float %166, %180, !dbg !87
  %185 = fcmp olt float %167, %181, !dbg !87
  %186 = fcmp olt float %168, %182, !dbg !87
  %187 = fcmp olt float %169, %183, !dbg !87
  %188 = fcmp uno float %180, 0.000000e+00, !dbg !89
  %189 = fcmp uno float %181, 0.000000e+00, !dbg !89
  %190 = fcmp uno float %182, 0.000000e+00, !dbg !89
  %191 = fcmp uno float %183, 0.000000e+00, !dbg !89
  %192 = or i1 %188, %184, !dbg !90
  %193 = or i1 %189, %185, !dbg !90
  %194 = or i1 %190, %186, !dbg !90
  %195 = or i1 %191, %187, !dbg !90
  %196 = select i1 %192, float %180, float %166, !dbg !91
  %197 = select i1 %193, float %181, float %167, !dbg !91
  %198 = select i1 %194, float %182, float %168, !dbg !91
  %199 = select i1 %195, float %183, float %169, !dbg !91
  %200 = add i32 %24, 32256, !dbg !92
  %201 = add i32 %200, %26, !dbg !93
  %202 = add i32 %201, %28, !dbg !94
  %203 = sext i32 %202 to i64, !dbg !95
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !95
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %204, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112, i32 -8388608, i1 %112) #1, !dbg !96
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !96
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !96
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !96
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !96
  %210 = bitcast i32 %206 to float, !dbg !96
  %211 = bitcast i32 %207 to float, !dbg !96
  %212 = bitcast i32 %208 to float, !dbg !96
  %213 = bitcast i32 %209 to float, !dbg !96
  %214 = fcmp olt float %196, %210, !dbg !97
  %215 = fcmp olt float %197, %211, !dbg !97
  %216 = fcmp olt float %198, %212, !dbg !97
  %217 = fcmp olt float %199, %213, !dbg !97
  %218 = fcmp uno float %210, 0.000000e+00, !dbg !99
  %219 = fcmp uno float %211, 0.000000e+00, !dbg !99
  %220 = fcmp uno float %212, 0.000000e+00, !dbg !99
  %221 = fcmp uno float %213, 0.000000e+00, !dbg !99
  %222 = or i1 %218, %214, !dbg !100
  %223 = or i1 %219, %215, !dbg !100
  %224 = or i1 %220, %216, !dbg !100
  %225 = or i1 %221, %217, !dbg !100
  %226 = select i1 %222, float %210, float %196, !dbg !101
  %227 = select i1 %223, float %211, float %197, !dbg !101
  %228 = select i1 %224, float %212, float %198, !dbg !101
  %229 = select i1 %225, float %213, float %199, !dbg !101
  %230 = add i32 %24, 32768, !dbg !102
  %231 = add i32 %230, %26, !dbg !103
  %232 = add i32 %231, %28, !dbg !104
  %233 = sext i32 %232 to i64, !dbg !105
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !105
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %234, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144) #1, !dbg !106
  %236 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !106
  %237 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !106
  %238 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !106
  %239 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !106
  %240 = bitcast i32 %236 to float, !dbg !106
  %241 = bitcast i32 %237 to float, !dbg !106
  %242 = bitcast i32 %238 to float, !dbg !106
  %243 = bitcast i32 %239 to float, !dbg !106
  %244 = fcmp olt float %226, %240, !dbg !107
  %245 = fcmp olt float %227, %241, !dbg !107
  %246 = fcmp olt float %228, %242, !dbg !107
  %247 = fcmp olt float %229, %243, !dbg !107
  %248 = fcmp uno float %240, 0.000000e+00, !dbg !109
  %249 = fcmp uno float %241, 0.000000e+00, !dbg !109
  %250 = fcmp uno float %242, 0.000000e+00, !dbg !109
  %251 = fcmp uno float %243, 0.000000e+00, !dbg !109
  %252 = or i1 %248, %244, !dbg !110
  %253 = or i1 %249, %245, !dbg !110
  %254 = or i1 %250, %246, !dbg !110
  %255 = or i1 %251, %247, !dbg !110
  %256 = select i1 %252, float %240, float %226, !dbg !111
  %257 = select i1 %253, float %241, float %227, !dbg !111
  %258 = select i1 %254, float %242, float %228, !dbg !111
  %259 = select i1 %255, float %243, float %229, !dbg !111
  %260 = add i32 %24, 33280, !dbg !112
  %261 = add i32 %260, %26, !dbg !27
  %262 = add i32 %261, %28, !dbg !29
  %263 = sext i32 %262 to i64, !dbg !113
  %264 = getelementptr float, ptr addrspace(1) %0, i64 %263, !dbg !113
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %264, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144) #1, !dbg !114
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !114
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !114
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !114
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !114
  %270 = bitcast i32 %266 to float, !dbg !114
  %271 = bitcast i32 %267 to float, !dbg !114
  %272 = bitcast i32 %268 to float, !dbg !114
  %273 = bitcast i32 %269 to float, !dbg !114
  %274 = fcmp olt float %256, %270, !dbg !115
  %275 = fcmp olt float %257, %271, !dbg !115
  %276 = fcmp olt float %258, %272, !dbg !115
  %277 = fcmp olt float %259, %273, !dbg !115
  %278 = fcmp uno float %270, 0.000000e+00, !dbg !117
  %279 = fcmp uno float %271, 0.000000e+00, !dbg !117
  %280 = fcmp uno float %272, 0.000000e+00, !dbg !117
  %281 = fcmp uno float %273, 0.000000e+00, !dbg !117
  %282 = or i1 %278, %274, !dbg !118
  %283 = or i1 %279, %275, !dbg !118
  %284 = or i1 %280, %276, !dbg !118
  %285 = or i1 %281, %277, !dbg !118
  %286 = sext i32 %9 to i64, !dbg !119
  %287 = getelementptr float, ptr addrspace(1) %1, i64 %286, !dbg !119
  %288 = bitcast float %256 to i32, !dbg !120
  %289 = select i1 %282, i32 %266, i32 %288, !dbg !121
  %290 = bitcast float %257 to i32, !dbg !120
  %291 = select i1 %283, i32 %267, i32 %290, !dbg !121
  %292 = bitcast float %258 to i32, !dbg !120
  %293 = select i1 %284, i32 %268, i32 %292, !dbg !121
  %294 = bitcast float %259 to i32, !dbg !120
  %295 = select i1 %285, i32 %269, i32 %294, !dbg !121
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %289, i32 %291, i32 %293, i32 %295, ptr addrspace(1) %287, i1 %10) #1, !dbg !120
  ret void, !dbg !122
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cobge6ytwcjjahrz6x4e5jo3endklx2ajmfg7nxhzu27huey7y4c.py", directory: "inductor_cache/ob")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_26", linkageName: "triton_poi_fused_max_pool2d_with_indices_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 28, scope: !7)
!19 = !DILocation(line: 62, column: 20, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 36, column: 19, scope: !7)
!22 = !DILocation(line: 39, column: 19, scope: !7)
!23 = !DILocation(line: 40, column: 52, scope: !7)
!24 = !DILocation(line: 40, column: 77, scope: !7)
!25 = !DILocation(line: 40, column: 42, scope: !7)
!26 = !DILocation(line: 40, column: 47, scope: !7)
!27 = !DILocation(line: 79, column: 54, scope: !7)
!28 = !DILocation(line: 40, column: 57, scope: !7)
!29 = !DILocation(line: 79, column: 66, scope: !7)
!30 = !DILocation(line: 40, column: 69, scope: !7)
!31 = !DILocation(line: 40, column: 31, scope: !7)
!32 = !DILocation(line: 40, column: 90, scope: !7)
!33 = !DILocation(line: 40, column: 82, scope: !7)
!34 = !DILocation(line: 42, column: 21, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 47, scope: !7)
!37 = !DILocation(line: 46, column: 57, scope: !7)
!38 = !DILocation(line: 46, column: 69, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 90, scope: !7)
!41 = !DILocation(line: 46, column: 82, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 47, column: 42, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 53, column: 47, scope: !7)
!50 = !DILocation(line: 53, column: 57, scope: !7)
!51 = !DILocation(line: 53, column: 69, scope: !7)
!52 = !DILocation(line: 53, column: 31, scope: !7)
!53 = !DILocation(line: 53, column: 82, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !55)
!55 = !DILocation(line: 54, column: 42, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !55)
!59 = !DILocation(line: 56, column: 21, scope: !7)
!60 = !DILocation(line: 59, column: 20, scope: !7)
!61 = !DILocation(line: 60, column: 45, scope: !7)
!62 = !DILocation(line: 60, column: 55, scope: !7)
!63 = !DILocation(line: 60, column: 67, scope: !7)
!64 = !DILocation(line: 60, column: 31, scope: !7)
!65 = !DILocation(line: 60, column: 88, scope: !7)
!66 = !DILocation(line: 60, column: 80, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !68)
!68 = !DILocation(line: 61, column: 42, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !68)
!72 = !DILocation(line: 63, column: 46, scope: !7)
!73 = !DILocation(line: 63, column: 58, scope: !7)
!74 = !DILocation(line: 63, column: 31, scope: !7)
!75 = !DILocation(line: 63, column: 79, scope: !7)
!76 = !DILocation(line: 63, column: 71, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !78)
!78 = !DILocation(line: 64, column: 42, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !78)
!82 = !DILocation(line: 66, column: 42, scope: !7)
!83 = !DILocation(line: 66, column: 52, scope: !7)
!84 = !DILocation(line: 66, column: 64, scope: !7)
!85 = !DILocation(line: 66, column: 31, scope: !7)
!86 = !DILocation(line: 66, column: 77, scope: !7)
!87 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !88)
!88 = !DILocation(line: 67, column: 42, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !88)
!92 = !DILocation(line: 73, column: 44, scope: !7)
!93 = !DILocation(line: 73, column: 54, scope: !7)
!94 = !DILocation(line: 73, column: 66, scope: !7)
!95 = !DILocation(line: 73, column: 31, scope: !7)
!96 = !DILocation(line: 73, column: 79, scope: !7)
!97 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !98)
!98 = !DILocation(line: 74, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !98)
!102 = !DILocation(line: 76, column: 44, scope: !7)
!103 = !DILocation(line: 76, column: 54, scope: !7)
!104 = !DILocation(line: 76, column: 66, scope: !7)
!105 = !DILocation(line: 76, column: 31, scope: !7)
!106 = !DILocation(line: 76, column: 79, scope: !7)
!107 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !108)
!108 = !DILocation(line: 77, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !108)
!112 = !DILocation(line: 79, column: 44, scope: !7)
!113 = !DILocation(line: 79, column: 31, scope: !7)
!114 = !DILocation(line: 79, column: 79, scope: !7)
!115 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !116)
!116 = !DILocation(line: 80, column: 42, scope: !7)
!117 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !116)
!118 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !116)
!119 = !DILocation(line: 81, column: 25, scope: !7)
!120 = !DILocation(line: 81, column: 37, scope: !7)
!121 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !116)
!122 = !DILocation(line: 81, column: 4, scope: !7)
