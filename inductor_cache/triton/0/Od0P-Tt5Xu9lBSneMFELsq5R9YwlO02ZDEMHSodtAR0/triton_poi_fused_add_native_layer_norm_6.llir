; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 2, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %14, 64, !dbg !12
  %16 = or disjoint i32 %14, 128, !dbg !12
  %17 = or disjoint i32 %14, 192, !dbg !12
  %18 = shl i32 %12, 2, !dbg !12
  %19 = and i32 %18, 12, !dbg !12
  %20 = and i32 %12, 255, !dbg !12
  %21 = or disjoint i32 %11, %14, !dbg !13
  %22 = or disjoint i32 %11, %15, !dbg !13
  %23 = or disjoint i32 %11, %16, !dbg !13
  %24 = or disjoint i32 %11, %17, !dbg !13
  %25 = or disjoint i32 %11, %20, !dbg !13
  %26 = icmp slt i32 %21, 384, !dbg !14
  %27 = icmp slt i32 %22, 384, !dbg !14
  %28 = icmp slt i32 %23, 384, !dbg !14
  %29 = icmp slt i32 %24, 384, !dbg !14
  %30 = icmp slt i32 %25, 384, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %32 = shl i32 %31, 4, !dbg !16
  %33 = or disjoint i32 %32, %19, !dbg !17
  %34 = icmp slt i32 %33, 256, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %35 = sdiv i32 %.frozen, 96, !dbg !19
  %36 = mul i32 %35, 96, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %.frozen83 = freeze i32 %22, !dbg !19
  %37 = sdiv i32 %.frozen83, 96, !dbg !19
  %38 = mul i32 %37, 96, !dbg !20
  %.decomposed84 = sub i32 %.frozen83, %38, !dbg !20
  %.frozen85 = freeze i32 %23, !dbg !19
  %39 = sdiv i32 %.frozen85, 96, !dbg !19
  %40 = mul i32 %39, 96, !dbg !20
  %.decomposed86 = sub i32 %.frozen85, %40, !dbg !20
  %.frozen87 = freeze i32 %24, !dbg !19
  %41 = sdiv i32 %.frozen87, 96, !dbg !19
  %42 = mul i32 %41, 96, !dbg !20
  %.decomposed88 = sub i32 %.frozen87, %42, !dbg !20
  %43 = srem i32 %25, 96, !dbg !20
  %.frozen89 = freeze i32 %33, !dbg !21
  %44 = sdiv i32 %.frozen89, 16, !dbg !21
  %45 = mul i32 %44, 16, !dbg !22
  %.decomposed90 = sub i32 %.frozen89, %45, !dbg !22
  %46 = shl i32 %21, 8, !dbg !23
  %47 = shl i32 %22, 8, !dbg !23
  %48 = shl i32 %23, 8, !dbg !23
  %49 = shl i32 %24, 8, !dbg !23
  %50 = add i32 %33, %46, !dbg !24
  %51 = add i32 %33, %47, !dbg !24
  %52 = add i32 %33, %48, !dbg !24
  %53 = add i32 %33, %49, !dbg !24
  %54 = sext i32 %50 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !25
  %56 = sext i32 %51 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !25
  %58 = sext i32 %52 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !25
  %60 = sext i32 %53 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !25
  %62 = and i1 %26, %34, !dbg !26
  %63 = and i1 %27, %34, !dbg !26
  %64 = and i1 %28, %34, !dbg !26
  %65 = and i1 %29, %34, !dbg !26
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %62) #4, !dbg !27
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %63) #4, !dbg !27
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %64) #4, !dbg !27
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %65) #4, !dbg !27
  %70 = sext i32 %43 to i64, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %30) #4, !dbg !29
  %73 = shl nsw i32 %.decomposed, 8, !dbg !30
  %74 = shl nsw i32 %.decomposed84, 8, !dbg !30
  %75 = shl nsw i32 %.decomposed86, 8, !dbg !30
  %76 = shl nsw i32 %.decomposed88, 8, !dbg !30
  %77 = add i32 %73, %33, !dbg !31
  %78 = add i32 %74, %33, !dbg !31
  %79 = add i32 %75, %33, !dbg !31
  %80 = add i32 %76, %33, !dbg !31
  %81 = sext i32 %77 to i64, !dbg !32
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !32
  %83 = sext i32 %78 to i64, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !32
  %85 = sext i32 %79 to i64, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !32
  %87 = sext i32 %80 to i64, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !32
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %62) #4, !dbg !33
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %63) #4, !dbg !33
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %64) #4, !dbg !33
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %65) #4, !dbg !33
  %93 = srem i32 %44, 8, !dbg !34
  %94 = shl nsw i32 %93, 3, !dbg !35
  %95 = shl nsw i32 %.decomposed, 6, !dbg !36
  %96 = shl nsw i32 %.decomposed84, 6, !dbg !36
  %97 = shl nsw i32 %.decomposed86, 6, !dbg !36
  %98 = shl nsw i32 %.decomposed88, 6, !dbg !36
  %.lhs.trunc = trunc nsw i32 %.decomposed90 to i8, !dbg !37
  %99 = srem i8 %.lhs.trunc, 8, !dbg !37
  %.sext = sext i8 %99 to i32, !dbg !37
  %100 = add nsw i32 %94, %.sext, !dbg !38
  %101 = add nsw i32 %100, %95, !dbg !39
  %102 = add nsw i32 %100, %96, !dbg !39
  %103 = add nsw i32 %100, %97, !dbg !39
  %104 = add nsw i32 %100, %98, !dbg !39
  %105 = sext i32 %101 to i64, !dbg !40
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !40
  %107 = sext i32 %102 to i64, !dbg !40
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !40
  %109 = sext i32 %103 to i64, !dbg !40
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !40
  %111 = sext i32 %104 to i64, !dbg !40
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !40
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %62) #4, !dbg !41
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %63) #4, !dbg !41
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %64) #4, !dbg !41
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %65) #4, !dbg !41
  %117 = shl i32 %35, 8, !dbg !42
  %118 = shl i32 %37, 8, !dbg !42
  %119 = shl i32 %39, 8, !dbg !42
  %120 = shl i32 %41, 8, !dbg !42
  %121 = add i32 %117, %33, !dbg !43
  %122 = add i32 %118, %33, !dbg !43
  %123 = add i32 %119, %33, !dbg !43
  %124 = add i32 %120, %33, !dbg !43
  %125 = sext i32 %121 to i64, !dbg !44
  %126 = getelementptr float, ptr addrspace(1) %4, i64 %125, !dbg !44
  %127 = sext i32 %122 to i64, !dbg !44
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %127, !dbg !44
  %129 = sext i32 %123 to i64, !dbg !44
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %129, !dbg !44
  %131 = sext i32 %124 to i64, !dbg !44
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %131, !dbg !44
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %62) #4, !dbg !45
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %63) #4, !dbg !45
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 %64) #4, !dbg !45
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 %65) #4, !dbg !45
  %137 = getelementptr float, ptr addrspace(1) %5, i64 %125, !dbg !46
  %138 = getelementptr float, ptr addrspace(1) %5, i64 %127, !dbg !46
  %139 = getelementptr float, ptr addrspace(1) %5, i64 %129, !dbg !46
  %140 = getelementptr float, ptr addrspace(1) %5, i64 %131, !dbg !46
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %62) #4, !dbg !47
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !47
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !47
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !47
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !47
  %146 = bitcast i32 %142 to float, !dbg !47
  %147 = bitcast i32 %143 to float, !dbg !47
  %148 = bitcast i32 %144 to float, !dbg !47
  %149 = bitcast i32 %145 to float, !dbg !47
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 %63) #4, !dbg !47
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !47
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !47
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !47
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !47
  %155 = bitcast i32 %151 to float, !dbg !47
  %156 = bitcast i32 %152 to float, !dbg !47
  %157 = bitcast i32 %153 to float, !dbg !47
  %158 = bitcast i32 %154 to float, !dbg !47
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %64) #4, !dbg !47
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !47
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !47
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !47
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !47
  %164 = bitcast i32 %160 to float, !dbg !47
  %165 = bitcast i32 %161 to float, !dbg !47
  %166 = bitcast i32 %162 to float, !dbg !47
  %167 = bitcast i32 %163 to float, !dbg !47
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 %65) #4, !dbg !47
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !47
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !47
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !47
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !47
  %173 = bitcast i32 %169 to float, !dbg !47
  %174 = bitcast i32 %170 to float, !dbg !47
  %175 = bitcast i32 %171 to float, !dbg !47
  %176 = bitcast i32 %172 to float, !dbg !47
  %.idx = shl nuw nsw i32 %20, 3, !dbg !48
  %177 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !48
  %178 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !48
  %179 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !48
  %180 = load float, ptr addrspace(3) %179, align 8, !dbg !48
  %.idx5 = shl nuw nsw i32 %15, 3, !dbg !48
  %181 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !48
  %182 = load float, ptr addrspace(3) %181, align 8, !dbg !48
  %.idx6 = shl nuw nsw i32 %16, 3, !dbg !48
  %183 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !48
  %184 = load float, ptr addrspace(3) %183, align 8, !dbg !48
  %.idx7 = shl nuw nsw i32 %17, 3, !dbg !48
  %185 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !48
  %186 = load float, ptr addrspace(3) %185, align 8, !dbg !48
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 9.600000e+01) #4, !dbg !49
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 9.600000e+01) #4, !dbg !49
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 9.600000e+01) #4, !dbg !49
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 9.600000e+01) #4, !dbg !49
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float 9.600000e+01) #4, !dbg !49
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float 9.600000e+01) #4, !dbg !49
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float 9.600000e+01) #4, !dbg !49
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %158, float 9.600000e+01) #4, !dbg !49
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 9.600000e+01) #4, !dbg !49
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 9.600000e+01) #4, !dbg !49
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float 9.600000e+01) #4, !dbg !49
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float 9.600000e+01) #4, !dbg !49
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float 9.600000e+01) #4, !dbg !49
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float 9.600000e+01) #4, !dbg !49
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float 9.600000e+01) #4, !dbg !49
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float 9.600000e+01) #4, !dbg !49
  %203 = fadd float %187, 0x3EB0C6F7A0000000, !dbg !50
  %204 = fadd float %188, 0x3EB0C6F7A0000000, !dbg !50
  %205 = fadd float %189, 0x3EB0C6F7A0000000, !dbg !50
  %206 = fadd float %190, 0x3EB0C6F7A0000000, !dbg !50
  %207 = fadd float %191, 0x3EB0C6F7A0000000, !dbg !50
  %208 = fadd float %192, 0x3EB0C6F7A0000000, !dbg !50
  %209 = fadd float %193, 0x3EB0C6F7A0000000, !dbg !50
  %210 = fadd float %194, 0x3EB0C6F7A0000000, !dbg !50
  %211 = fadd float %195, 0x3EB0C6F7A0000000, !dbg !50
  %212 = fadd float %196, 0x3EB0C6F7A0000000, !dbg !50
  %213 = fadd float %197, 0x3EB0C6F7A0000000, !dbg !50
  %214 = fadd float %198, 0x3EB0C6F7A0000000, !dbg !50
  %215 = fadd float %199, 0x3EB0C6F7A0000000, !dbg !50
  %216 = fadd float %200, 0x3EB0C6F7A0000000, !dbg !50
  %217 = fadd float %201, 0x3EB0C6F7A0000000, !dbg !50
  %218 = fadd float %202, 0x3EB0C6F7A0000000, !dbg !50
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i = icmp eq i32 %219, 0, !dbg !51
  br i1 %.not.i, label %222, label %220, !dbg !51

220:                                              ; preds = %9
  %221 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %203), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

222:                                              ; preds = %9
  %223 = tail call float @llvm.nvvm.rsqrt.approx.f(float %203), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %220, %222
  %.0.i = phi float [ %221, %220 ], [ %223, %222 ], !dbg !51
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i38 = icmp eq i32 %224, 0, !dbg !51
  br i1 %.not.i38, label %227, label %225, !dbg !51

225:                                              ; preds = %__nv_rsqrtf.exit
  %226 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %204), !dbg !51
  br label %__nv_rsqrtf.exit40, !dbg !51

227:                                              ; preds = %__nv_rsqrtf.exit
  %228 = tail call float @llvm.nvvm.rsqrt.approx.f(float %204), !dbg !51
  br label %__nv_rsqrtf.exit40, !dbg !51

__nv_rsqrtf.exit40:                               ; preds = %225, %227
  %.0.i39 = phi float [ %226, %225 ], [ %228, %227 ], !dbg !51
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i41 = icmp eq i32 %229, 0, !dbg !51
  br i1 %.not.i41, label %232, label %230, !dbg !51

230:                                              ; preds = %__nv_rsqrtf.exit40
  %231 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %205), !dbg !51
  br label %__nv_rsqrtf.exit43, !dbg !51

232:                                              ; preds = %__nv_rsqrtf.exit40
  %233 = tail call float @llvm.nvvm.rsqrt.approx.f(float %205), !dbg !51
  br label %__nv_rsqrtf.exit43, !dbg !51

__nv_rsqrtf.exit43:                               ; preds = %230, %232
  %.0.i42 = phi float [ %231, %230 ], [ %233, %232 ], !dbg !51
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i44 = icmp eq i32 %234, 0, !dbg !51
  br i1 %.not.i44, label %237, label %235, !dbg !51

235:                                              ; preds = %__nv_rsqrtf.exit43
  %236 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %206), !dbg !51
  br label %__nv_rsqrtf.exit46, !dbg !51

237:                                              ; preds = %__nv_rsqrtf.exit43
  %238 = tail call float @llvm.nvvm.rsqrt.approx.f(float %206), !dbg !51
  br label %__nv_rsqrtf.exit46, !dbg !51

__nv_rsqrtf.exit46:                               ; preds = %235, %237
  %.0.i45 = phi float [ %236, %235 ], [ %238, %237 ], !dbg !51
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i47 = icmp eq i32 %239, 0, !dbg !51
  br i1 %.not.i47, label %242, label %240, !dbg !51

240:                                              ; preds = %__nv_rsqrtf.exit46
  %241 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %207), !dbg !51
  br label %__nv_rsqrtf.exit49, !dbg !51

242:                                              ; preds = %__nv_rsqrtf.exit46
  %243 = tail call float @llvm.nvvm.rsqrt.approx.f(float %207), !dbg !51
  br label %__nv_rsqrtf.exit49, !dbg !51

__nv_rsqrtf.exit49:                               ; preds = %240, %242
  %.0.i48 = phi float [ %241, %240 ], [ %243, %242 ], !dbg !51
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i50 = icmp eq i32 %244, 0, !dbg !51
  br i1 %.not.i50, label %247, label %245, !dbg !51

245:                                              ; preds = %__nv_rsqrtf.exit49
  %246 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %208), !dbg !51
  br label %__nv_rsqrtf.exit52, !dbg !51

247:                                              ; preds = %__nv_rsqrtf.exit49
  %248 = tail call float @llvm.nvvm.rsqrt.approx.f(float %208), !dbg !51
  br label %__nv_rsqrtf.exit52, !dbg !51

__nv_rsqrtf.exit52:                               ; preds = %245, %247
  %.0.i51 = phi float [ %246, %245 ], [ %248, %247 ], !dbg !51
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i53 = icmp eq i32 %249, 0, !dbg !51
  br i1 %.not.i53, label %252, label %250, !dbg !51

250:                                              ; preds = %__nv_rsqrtf.exit52
  %251 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %209), !dbg !51
  br label %__nv_rsqrtf.exit55, !dbg !51

252:                                              ; preds = %__nv_rsqrtf.exit52
  %253 = tail call float @llvm.nvvm.rsqrt.approx.f(float %209), !dbg !51
  br label %__nv_rsqrtf.exit55, !dbg !51

__nv_rsqrtf.exit55:                               ; preds = %250, %252
  %.0.i54 = phi float [ %251, %250 ], [ %253, %252 ], !dbg !51
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i56 = icmp eq i32 %254, 0, !dbg !51
  br i1 %.not.i56, label %257, label %255, !dbg !51

255:                                              ; preds = %__nv_rsqrtf.exit55
  %256 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %210), !dbg !51
  br label %__nv_rsqrtf.exit58, !dbg !51

257:                                              ; preds = %__nv_rsqrtf.exit55
  %258 = tail call float @llvm.nvvm.rsqrt.approx.f(float %210), !dbg !51
  br label %__nv_rsqrtf.exit58, !dbg !51

__nv_rsqrtf.exit58:                               ; preds = %255, %257
  %.0.i57 = phi float [ %256, %255 ], [ %258, %257 ], !dbg !51
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i59 = icmp eq i32 %259, 0, !dbg !51
  br i1 %.not.i59, label %262, label %260, !dbg !51

260:                                              ; preds = %__nv_rsqrtf.exit58
  %261 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %211), !dbg !51
  br label %__nv_rsqrtf.exit61, !dbg !51

262:                                              ; preds = %__nv_rsqrtf.exit58
  %263 = tail call float @llvm.nvvm.rsqrt.approx.f(float %211), !dbg !51
  br label %__nv_rsqrtf.exit61, !dbg !51

__nv_rsqrtf.exit61:                               ; preds = %260, %262
  %.0.i60 = phi float [ %261, %260 ], [ %263, %262 ], !dbg !51
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i62 = icmp eq i32 %264, 0, !dbg !51
  br i1 %.not.i62, label %267, label %265, !dbg !51

265:                                              ; preds = %__nv_rsqrtf.exit61
  %266 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %212), !dbg !51
  br label %__nv_rsqrtf.exit64, !dbg !51

267:                                              ; preds = %__nv_rsqrtf.exit61
  %268 = tail call float @llvm.nvvm.rsqrt.approx.f(float %212), !dbg !51
  br label %__nv_rsqrtf.exit64, !dbg !51

__nv_rsqrtf.exit64:                               ; preds = %265, %267
  %.0.i63 = phi float [ %266, %265 ], [ %268, %267 ], !dbg !51
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i65 = icmp eq i32 %269, 0, !dbg !51
  br i1 %.not.i65, label %272, label %270, !dbg !51

270:                                              ; preds = %__nv_rsqrtf.exit64
  %271 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %213), !dbg !51
  br label %__nv_rsqrtf.exit67, !dbg !51

272:                                              ; preds = %__nv_rsqrtf.exit64
  %273 = tail call float @llvm.nvvm.rsqrt.approx.f(float %213), !dbg !51
  br label %__nv_rsqrtf.exit67, !dbg !51

__nv_rsqrtf.exit67:                               ; preds = %270, %272
  %.0.i66 = phi float [ %271, %270 ], [ %273, %272 ], !dbg !51
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i68 = icmp eq i32 %274, 0, !dbg !51
  br i1 %.not.i68, label %277, label %275, !dbg !51

275:                                              ; preds = %__nv_rsqrtf.exit67
  %276 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %214), !dbg !51
  br label %__nv_rsqrtf.exit70, !dbg !51

277:                                              ; preds = %__nv_rsqrtf.exit67
  %278 = tail call float @llvm.nvvm.rsqrt.approx.f(float %214), !dbg !51
  br label %__nv_rsqrtf.exit70, !dbg !51

__nv_rsqrtf.exit70:                               ; preds = %275, %277
  %.0.i69 = phi float [ %276, %275 ], [ %278, %277 ], !dbg !51
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i71 = icmp eq i32 %279, 0, !dbg !51
  br i1 %.not.i71, label %282, label %280, !dbg !51

280:                                              ; preds = %__nv_rsqrtf.exit70
  %281 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %215), !dbg !51
  br label %__nv_rsqrtf.exit73, !dbg !51

282:                                              ; preds = %__nv_rsqrtf.exit70
  %283 = tail call float @llvm.nvvm.rsqrt.approx.f(float %215), !dbg !51
  br label %__nv_rsqrtf.exit73, !dbg !51

__nv_rsqrtf.exit73:                               ; preds = %280, %282
  %.0.i72 = phi float [ %281, %280 ], [ %283, %282 ], !dbg !51
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i74 = icmp eq i32 %284, 0, !dbg !51
  br i1 %.not.i74, label %287, label %285, !dbg !51

285:                                              ; preds = %__nv_rsqrtf.exit73
  %286 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %216), !dbg !51
  br label %__nv_rsqrtf.exit76, !dbg !51

287:                                              ; preds = %__nv_rsqrtf.exit73
  %288 = tail call float @llvm.nvvm.rsqrt.approx.f(float %216), !dbg !51
  br label %__nv_rsqrtf.exit76, !dbg !51

__nv_rsqrtf.exit76:                               ; preds = %285, %287
  %.0.i75 = phi float [ %286, %285 ], [ %288, %287 ], !dbg !51
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i77 = icmp eq i32 %289, 0, !dbg !51
  br i1 %.not.i77, label %292, label %290, !dbg !51

290:                                              ; preds = %__nv_rsqrtf.exit76
  %291 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %217), !dbg !51
  br label %__nv_rsqrtf.exit79, !dbg !51

292:                                              ; preds = %__nv_rsqrtf.exit76
  %293 = tail call float @llvm.nvvm.rsqrt.approx.f(float %217), !dbg !51
  br label %__nv_rsqrtf.exit79, !dbg !51

__nv_rsqrtf.exit79:                               ; preds = %290, %292
  %.0.i78 = phi float [ %291, %290 ], [ %293, %292 ], !dbg !51
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i80 = icmp eq i32 %294, 0, !dbg !51
  br i1 %.not.i80, label %297, label %295, !dbg !51

295:                                              ; preds = %__nv_rsqrtf.exit79
  %296 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %218), !dbg !51
  br label %__nv_rsqrtf.exit82, !dbg !51

297:                                              ; preds = %__nv_rsqrtf.exit79
  %298 = tail call float @llvm.nvvm.rsqrt.approx.f(float %218), !dbg !51
  br label %__nv_rsqrtf.exit82, !dbg !51

__nv_rsqrtf.exit82:                               ; preds = %295, %297
  %.0.i81 = phi float [ %296, %295 ], [ %298, %297 ], !dbg !51
  %299 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !27
  %300 = bitcast i32 %299 to float, !dbg !27
  %301 = fadd float %186, %300, !dbg !48
  %302 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !33
  %303 = bitcast i32 %302 to float, !dbg !33
  %304 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !41
  %305 = bitcast i32 %304 to float, !dbg !41
  %306 = fadd float %303, %305, !dbg !52
  %307 = fadd float %306, %301, !dbg !53
  %308 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !45
  %309 = bitcast i32 %308 to float, !dbg !45
  %310 = fsub float %307, %309, !dbg !54
  %311 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !27
  %312 = bitcast i32 %311 to float, !dbg !27
  %313 = fadd float %186, %312, !dbg !48
  %314 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !33
  %315 = bitcast i32 %314 to float, !dbg !33
  %316 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !41
  %317 = bitcast i32 %316 to float, !dbg !41
  %318 = fadd float %315, %317, !dbg !52
  %319 = fadd float %318, %313, !dbg !53
  %320 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !45
  %321 = bitcast i32 %320 to float, !dbg !45
  %322 = fsub float %319, %321, !dbg !54
  %323 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !27
  %324 = bitcast i32 %323 to float, !dbg !27
  %325 = fadd float %186, %324, !dbg !48
  %326 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !33
  %327 = bitcast i32 %326 to float, !dbg !33
  %328 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !41
  %329 = bitcast i32 %328 to float, !dbg !41
  %330 = fadd float %327, %329, !dbg !52
  %331 = fadd float %330, %325, !dbg !53
  %332 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !45
  %333 = bitcast i32 %332 to float, !dbg !45
  %334 = fsub float %331, %333, !dbg !54
  %335 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !27
  %336 = bitcast i32 %335 to float, !dbg !27
  %337 = fadd float %186, %336, !dbg !48
  %338 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !33
  %339 = bitcast i32 %338 to float, !dbg !33
  %340 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !41
  %341 = bitcast i32 %340 to float, !dbg !41
  %342 = fadd float %339, %341, !dbg !52
  %343 = fadd float %342, %337, !dbg !53
  %344 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !45
  %345 = bitcast i32 %344 to float, !dbg !45
  %346 = fsub float %343, %345, !dbg !54
  %347 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !27
  %348 = bitcast i32 %347 to float, !dbg !27
  %349 = fadd float %184, %348, !dbg !48
  %350 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !33
  %351 = bitcast i32 %350 to float, !dbg !33
  %352 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !41
  %353 = bitcast i32 %352 to float, !dbg !41
  %354 = fadd float %351, %353, !dbg !52
  %355 = fadd float %354, %349, !dbg !53
  %356 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !45
  %357 = bitcast i32 %356 to float, !dbg !45
  %358 = fsub float %355, %357, !dbg !54
  %359 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !27
  %360 = bitcast i32 %359 to float, !dbg !27
  %361 = fadd float %184, %360, !dbg !48
  %362 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !33
  %363 = bitcast i32 %362 to float, !dbg !33
  %364 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !41
  %365 = bitcast i32 %364 to float, !dbg !41
  %366 = fadd float %363, %365, !dbg !52
  %367 = fadd float %366, %361, !dbg !53
  %368 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !45
  %369 = bitcast i32 %368 to float, !dbg !45
  %370 = fsub float %367, %369, !dbg !54
  %371 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !27
  %372 = bitcast i32 %371 to float, !dbg !27
  %373 = fadd float %184, %372, !dbg !48
  %374 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !33
  %375 = bitcast i32 %374 to float, !dbg !33
  %376 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !41
  %377 = bitcast i32 %376 to float, !dbg !41
  %378 = fadd float %375, %377, !dbg !52
  %379 = fadd float %378, %373, !dbg !53
  %380 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !45
  %381 = bitcast i32 %380 to float, !dbg !45
  %382 = fsub float %379, %381, !dbg !54
  %383 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !27
  %384 = bitcast i32 %383 to float, !dbg !27
  %385 = fadd float %184, %384, !dbg !48
  %386 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !33
  %387 = bitcast i32 %386 to float, !dbg !33
  %388 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !41
  %389 = bitcast i32 %388 to float, !dbg !41
  %390 = fadd float %387, %389, !dbg !52
  %391 = fadd float %390, %385, !dbg !53
  %392 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !45
  %393 = bitcast i32 %392 to float, !dbg !45
  %394 = fsub float %391, %393, !dbg !54
  %395 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !27
  %396 = bitcast i32 %395 to float, !dbg !27
  %397 = fadd float %182, %396, !dbg !48
  %398 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !33
  %399 = bitcast i32 %398 to float, !dbg !33
  %400 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !41
  %401 = bitcast i32 %400 to float, !dbg !41
  %402 = fadd float %399, %401, !dbg !52
  %403 = fadd float %402, %397, !dbg !53
  %404 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !45
  %405 = bitcast i32 %404 to float, !dbg !45
  %406 = fsub float %403, %405, !dbg !54
  %407 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !27
  %408 = bitcast i32 %407 to float, !dbg !27
  %409 = fadd float %182, %408, !dbg !48
  %410 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !33
  %411 = bitcast i32 %410 to float, !dbg !33
  %412 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !41
  %413 = bitcast i32 %412 to float, !dbg !41
  %414 = fadd float %411, %413, !dbg !52
  %415 = fadd float %414, %409, !dbg !53
  %416 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !45
  %417 = bitcast i32 %416 to float, !dbg !45
  %418 = fsub float %415, %417, !dbg !54
  %419 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !27
  %420 = bitcast i32 %419 to float, !dbg !27
  %421 = fadd float %182, %420, !dbg !48
  %422 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !33
  %423 = bitcast i32 %422 to float, !dbg !33
  %424 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !41
  %425 = bitcast i32 %424 to float, !dbg !41
  %426 = fadd float %423, %425, !dbg !52
  %427 = fadd float %426, %421, !dbg !53
  %428 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !45
  %429 = bitcast i32 %428 to float, !dbg !45
  %430 = fsub float %427, %429, !dbg !54
  %431 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !27
  %432 = bitcast i32 %431 to float, !dbg !27
  %433 = fadd float %182, %432, !dbg !48
  %434 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !33
  %435 = bitcast i32 %434 to float, !dbg !33
  %436 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !41
  %437 = bitcast i32 %436 to float, !dbg !41
  %438 = fadd float %435, %437, !dbg !52
  %439 = fadd float %438, %433, !dbg !53
  %440 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !45
  %441 = bitcast i32 %440 to float, !dbg !45
  %442 = fsub float %439, %441, !dbg !54
  %443 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !27
  %444 = bitcast i32 %443 to float, !dbg !27
  %445 = fadd float %180, %444, !dbg !48
  %446 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !33
  %447 = bitcast i32 %446 to float, !dbg !33
  %448 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !41
  %449 = bitcast i32 %448 to float, !dbg !41
  %450 = fadd float %447, %449, !dbg !52
  %451 = fadd float %450, %445, !dbg !53
  %452 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !45
  %453 = bitcast i32 %452 to float, !dbg !45
  %454 = fsub float %451, %453, !dbg !54
  %455 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !27
  %456 = bitcast i32 %455 to float, !dbg !27
  %457 = fadd float %180, %456, !dbg !48
  %458 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !33
  %459 = bitcast i32 %458 to float, !dbg !33
  %460 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !41
  %461 = bitcast i32 %460 to float, !dbg !41
  %462 = fadd float %459, %461, !dbg !52
  %463 = fadd float %462, %457, !dbg !53
  %464 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !45
  %465 = bitcast i32 %464 to float, !dbg !45
  %466 = fsub float %463, %465, !dbg !54
  %467 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !27
  %468 = bitcast i32 %467 to float, !dbg !27
  %469 = fadd float %180, %468, !dbg !48
  %470 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !33
  %471 = bitcast i32 %470 to float, !dbg !33
  %472 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !41
  %473 = bitcast i32 %472 to float, !dbg !41
  %474 = fadd float %471, %473, !dbg !52
  %475 = fadd float %474, %469, !dbg !53
  %476 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !45
  %477 = bitcast i32 %476 to float, !dbg !45
  %478 = fsub float %475, %477, !dbg !54
  %479 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !27
  %480 = bitcast i32 %479 to float, !dbg !27
  %481 = fadd float %180, %480, !dbg !48
  %482 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !33
  %483 = bitcast i32 %482 to float, !dbg !33
  %484 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !41
  %485 = bitcast i32 %484 to float, !dbg !41
  %486 = fadd float %483, %485, !dbg !52
  %487 = fadd float %486, %481, !dbg !53
  %488 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !45
  %489 = bitcast i32 %488 to float, !dbg !45
  %490 = fsub float %487, %489, !dbg !54
  %.lobit23 = lshr i32 %12, 6, !dbg !55
  %491 = and i32 %.lobit23, 3, !dbg !55
  %492 = or disjoint i32 %491, %32, !dbg !17
  %493 = or disjoint i32 %492, 12, !dbg !17
  %494 = icmp slt i32 %493, 256, !dbg !18
  %495 = and i32 %18, 252, !dbg !12
  %496 = or disjoint i32 %11, %495, !dbg !13
  %497 = icmp slt i32 %496, 384, !dbg !14
  %498 = and i1 %497, %494, !dbg !26
  %499 = or disjoint i32 %492, 8, !dbg !17
  %500 = icmp slt i32 %499, 256, !dbg !18
  %501 = and i1 %497, %500, !dbg !26
  %502 = or disjoint i32 %492, 4, !dbg !17
  %503 = icmp slt i32 %502, 256, !dbg !18
  %504 = and i1 %497, %503, !dbg !26
  %505 = icmp slt i32 %492, 256, !dbg !18
  %506 = and i1 %497, %505, !dbg !26
  %.frozen91 = freeze i32 %496, !dbg !19
  %507 = sdiv i32 %.frozen91, 96, !dbg !19
  %508 = mul i32 %507, 96, !dbg !20
  %.decomposed92 = sub i32 %.frozen91, %508, !dbg !20
  %509 = fmul float %490, %.0.i, !dbg !56
  %510 = fmul float %478, %.0.i39, !dbg !56
  %511 = fmul float %466, %.0.i42, !dbg !56
  %512 = fmul float %454, %.0.i45, !dbg !56
  %513 = fmul float %442, %.0.i48, !dbg !56
  %514 = fmul float %430, %.0.i51, !dbg !56
  %515 = fmul float %418, %.0.i54, !dbg !56
  %516 = fmul float %406, %.0.i57, !dbg !56
  %517 = fmul float %394, %.0.i60, !dbg !56
  %518 = fmul float %382, %.0.i63, !dbg !56
  %519 = fmul float %370, %.0.i66, !dbg !56
  %520 = fmul float %358, %.0.i69, !dbg !56
  %521 = fmul float %346, %.0.i72, !dbg !56
  %522 = fmul float %334, %.0.i75, !dbg !56
  %523 = fmul float %322, %.0.i78, !dbg !56
  %524 = fmul float %310, %.0.i81, !dbg !56
  %525 = mul i32 %492, 96, !dbg !57
  %526 = mul i32 %502, 96, !dbg !57
  %527 = mul i32 %499, 96, !dbg !57
  %528 = mul i32 %493, 96, !dbg !57
  %529 = mul i32 %507, 24576, !dbg !58
  %530 = add i32 %529, %.decomposed92, !dbg !59
  %531 = add i32 %530, %525, !dbg !60
  %532 = add i32 %530, %526, !dbg !60
  %533 = add i32 %530, %527, !dbg !60
  %534 = add i32 %530, %528, !dbg !60
  %535 = sext i32 %531 to i64, !dbg !61
  %536 = getelementptr float, ptr addrspace(1) %6, i64 %535, !dbg !61
  %537 = sext i32 %532 to i64, !dbg !61
  %538 = getelementptr float, ptr addrspace(1) %6, i64 %537, !dbg !61
  %539 = sext i32 %533 to i64, !dbg !61
  %540 = getelementptr float, ptr addrspace(1) %6, i64 %539, !dbg !61
  %541 = sext i32 %534 to i64, !dbg !61
  %542 = getelementptr float, ptr addrspace(1) %6, i64 %541, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %543 = shl i32 %12, 10, !dbg !62
  %544 = and i32 %543, 3072, !dbg !62
  %545 = or disjoint i32 %544, %14, !dbg !62
  %546 = and i32 %18, 1020, !dbg !62
  %547 = lshr exact i32 %544, 4, !dbg !62
  %548 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %547, !dbg !62
  %549 = getelementptr float, ptr addrspace(3) %548, i32 %545, !dbg !62
  %550 = bitcast float %509 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %549, <1 x i32> %550, i1 true) #4, !dbg !62
  %551 = or disjoint i32 %545, 256, !dbg !62
  %552 = lshr i32 %551, 6, !dbg !62
  %553 = getelementptr float, ptr addrspace(3) @global_smem, i32 %552, !dbg !62
  %554 = getelementptr float, ptr addrspace(3) %553, i32 %551, !dbg !62
  %555 = bitcast float %510 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %554, <1 x i32> %555, i1 true) #4, !dbg !62
  %556 = or disjoint i32 %545, 512, !dbg !62
  %557 = lshr i32 %556, 6, !dbg !62
  %558 = getelementptr float, ptr addrspace(3) @global_smem, i32 %557, !dbg !62
  %559 = getelementptr float, ptr addrspace(3) %558, i32 %556, !dbg !62
  %560 = bitcast float %511 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %559, <1 x i32> %560, i1 true) #4, !dbg !62
  %561 = or disjoint i32 %545, 768, !dbg !62
  %562 = lshr i32 %561, 6, !dbg !62
  %563 = getelementptr float, ptr addrspace(3) @global_smem, i32 %562, !dbg !62
  %564 = getelementptr float, ptr addrspace(3) %563, i32 %561, !dbg !62
  %565 = bitcast float %512 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %564, <1 x i32> %565, i1 true) #4, !dbg !62
  %566 = or disjoint i32 %545, 64, !dbg !62
  %567 = getelementptr float, ptr addrspace(3) %548, i32 %566, !dbg !62
  %568 = bitcast float %513 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %567, <1 x i32> %568, i1 true) #4, !dbg !62
  %569 = or disjoint i32 %545, 320, !dbg !62
  %570 = lshr i32 %569, 6, !dbg !62
  %571 = and i32 %570, 52, !dbg !62
  %572 = getelementptr float, ptr addrspace(3) @global_smem, i32 %571, !dbg !62
  %573 = getelementptr float, ptr addrspace(3) %572, i32 %569, !dbg !62
  %574 = bitcast float %514 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %573, <1 x i32> %574, i1 true) #4, !dbg !62
  %575 = or disjoint i32 %545, 576, !dbg !62
  %576 = lshr i32 %575, 6, !dbg !62
  %577 = and i32 %576, 56, !dbg !62
  %578 = getelementptr float, ptr addrspace(3) @global_smem, i32 %577, !dbg !62
  %579 = getelementptr float, ptr addrspace(3) %578, i32 %575, !dbg !62
  %580 = bitcast float %515 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %579, <1 x i32> %580, i1 true) #4, !dbg !62
  %581 = or disjoint i32 %545, 832, !dbg !62
  %582 = lshr i32 %581, 6, !dbg !62
  %583 = and i32 %582, 60, !dbg !62
  %584 = getelementptr float, ptr addrspace(3) @global_smem, i32 %583, !dbg !62
  %585 = getelementptr float, ptr addrspace(3) %584, i32 %581, !dbg !62
  %586 = bitcast float %516 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %585, <1 x i32> %586, i1 true) #4, !dbg !62
  %587 = or disjoint i32 %545, 128, !dbg !62
  %588 = getelementptr float, ptr addrspace(3) %548, i32 %587, !dbg !62
  %589 = bitcast float %517 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %588, <1 x i32> %589, i1 true) #4, !dbg !62
  %590 = or disjoint i32 %545, 384, !dbg !62
  %591 = lshr i32 %590, 6, !dbg !62
  %592 = and i32 %591, 52, !dbg !62
  %593 = getelementptr float, ptr addrspace(3) @global_smem, i32 %592, !dbg !62
  %594 = getelementptr float, ptr addrspace(3) %593, i32 %590, !dbg !62
  %595 = bitcast float %518 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %594, <1 x i32> %595, i1 true) #4, !dbg !62
  %596 = or disjoint i32 %545, 640, !dbg !62
  %597 = lshr i32 %596, 6, !dbg !62
  %598 = and i32 %597, 56, !dbg !62
  %599 = getelementptr float, ptr addrspace(3) @global_smem, i32 %598, !dbg !62
  %600 = getelementptr float, ptr addrspace(3) %599, i32 %596, !dbg !62
  %601 = bitcast float %519 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %600, <1 x i32> %601, i1 true) #4, !dbg !62
  %602 = or disjoint i32 %545, 896, !dbg !62
  %603 = lshr i32 %602, 6, !dbg !62
  %604 = and i32 %603, 60, !dbg !62
  %605 = getelementptr float, ptr addrspace(3) @global_smem, i32 %604, !dbg !62
  %606 = getelementptr float, ptr addrspace(3) %605, i32 %602, !dbg !62
  %607 = bitcast float %520 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %606, <1 x i32> %607, i1 true) #4, !dbg !62
  %608 = or disjoint i32 %545, 192, !dbg !62
  %609 = getelementptr float, ptr addrspace(3) %548, i32 %608, !dbg !62
  %610 = bitcast float %521 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %609, <1 x i32> %610, i1 true) #4, !dbg !62
  %611 = or disjoint i32 %545, 448, !dbg !62
  %612 = lshr i32 %611, 6, !dbg !62
  %613 = and i32 %612, 52, !dbg !62
  %614 = getelementptr float, ptr addrspace(3) @global_smem, i32 %613, !dbg !62
  %615 = getelementptr float, ptr addrspace(3) %614, i32 %611, !dbg !62
  %616 = bitcast float %522 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %615, <1 x i32> %616, i1 true) #4, !dbg !62
  %617 = or disjoint i32 %545, 704, !dbg !62
  %618 = lshr i32 %617, 6, !dbg !62
  %619 = and i32 %618, 56, !dbg !62
  %620 = getelementptr float, ptr addrspace(3) @global_smem, i32 %619, !dbg !62
  %621 = getelementptr float, ptr addrspace(3) %620, i32 %617, !dbg !62
  %622 = bitcast float %523 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %621, <1 x i32> %622, i1 true) #4, !dbg !62
  %623 = or disjoint i32 %545, 960, !dbg !62
  %624 = lshr i32 %623, 6, !dbg !62
  %625 = and i32 %624, 60, !dbg !62
  %626 = getelementptr float, ptr addrspace(3) @global_smem, i32 %625, !dbg !62
  %627 = getelementptr float, ptr addrspace(3) %626, i32 %623, !dbg !62
  %628 = bitcast float %524 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %627, <1 x i32> %628, i1 true) #4, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %629 = lshr i32 %18, 6, !dbg !62
  %630 = and i32 %629, 12, !dbg !62
  %631 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %630, !dbg !62
  %632 = getelementptr inbounds float, ptr addrspace(3) %631, i32 %546, !dbg !62
  %633 = or disjoint i32 %546, 1024, !dbg !62
  %634 = lshr i32 %633, 6, !dbg !62
  %635 = and i32 %634, 28, !dbg !62
  %636 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %635, !dbg !62
  %637 = getelementptr inbounds float, ptr addrspace(3) %636, i32 %633, !dbg !62
  %638 = load <4 x i32>, ptr addrspace(3) %637, align 16, !dbg !62
  %639 = or disjoint i32 %546, 2048, !dbg !62
  %640 = lshr i32 %639, 6, !dbg !62
  %641 = and i32 %640, 44, !dbg !62
  %642 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %641, !dbg !62
  %643 = getelementptr inbounds float, ptr addrspace(3) %642, i32 %639, !dbg !62
  %644 = load <4 x i32>, ptr addrspace(3) %643, align 16, !dbg !62
  %645 = or disjoint i32 %546, 3072, !dbg !62
  %646 = lshr i32 %645, 6, !dbg !62
  %647 = and i32 %646, 60, !dbg !62
  %648 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %647, !dbg !62
  %649 = getelementptr inbounds float, ptr addrspace(3) %648, i32 %645, !dbg !62
  %650 = load <4 x i32>, ptr addrspace(3) %649, align 16, !dbg !62
  %.extract = load i32, ptr addrspace(3) %632, align 16, !dbg !62
  %651 = getelementptr inbounds i8, ptr addrspace(3) %632, i32 4, !dbg !62
  %.extract23 = load i32, ptr addrspace(3) %651, align 4, !dbg !62
  %652 = getelementptr inbounds i8, ptr addrspace(3) %632, i32 8, !dbg !62
  %.extract24 = load i32, ptr addrspace(3) %652, align 8, !dbg !62
  %653 = getelementptr inbounds i8, ptr addrspace(3) %632, i32 12, !dbg !62
  %.extract25 = load i32, ptr addrspace(3) %653, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %536, i1 %506) #4, !dbg !62
  %.extract26 = extractelement <4 x i32> %638, i64 0, !dbg !62
  %.extract27 = extractelement <4 x i32> %638, i64 1, !dbg !62
  %.extract28 = extractelement <4 x i32> %638, i64 2, !dbg !62
  %.extract29 = extractelement <4 x i32> %638, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %538, i1 %504) #4, !dbg !62
  %.extract30 = extractelement <4 x i32> %644, i64 0, !dbg !62
  %.extract31 = extractelement <4 x i32> %644, i64 1, !dbg !62
  %.extract32 = extractelement <4 x i32> %644, i64 2, !dbg !62
  %.extract33 = extractelement <4 x i32> %644, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %540, i1 %501) #4, !dbg !62
  %.extract34 = extractelement <4 x i32> %650, i64 0, !dbg !62
  %.extract35 = extractelement <4 x i32> %650, i64 1, !dbg !62
  %.extract36 = extractelement <4 x i32> %650, i64 2, !dbg !62
  %.extract37 = extractelement <4 x i32> %650, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract34, i32 %.extract35, i32 %.extract36, i32 %.extract37, ptr addrspace(1) %542, i1 %498) #4, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqagfqrxmk4oz574kcj6lbqhuvtghy34uofns6i45r76zc37svnb.py", directory: "inductor_cache/qa")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_6", linkageName: "triton_poi_fused_add_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 52, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 39, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 44, scope: !7)
!34 = !DILocation(line: 37, column: 39, scope: !7)
!35 = !DILocation(line: 37, column: 34, scope: !7)
!36 = !DILocation(line: 37, column: 48, scope: !7)
!37 = !DILocation(line: 37, column: 60, scope: !7)
!38 = !DILocation(line: 37, column: 45, scope: !7)
!39 = !DILocation(line: 37, column: 55, scope: !7)
!40 = !DILocation(line: 37, column: 30, scope: !7)
!41 = !DILocation(line: 37, column: 66, scope: !7)
!42 = !DILocation(line: 38, column: 39, scope: !7)
!43 = !DILocation(line: 38, column: 35, scope: !7)
!44 = !DILocation(line: 38, column: 30, scope: !7)
!45 = !DILocation(line: 38, column: 44, scope: !7)
!46 = !DILocation(line: 39, column: 30, scope: !7)
!47 = !DILocation(line: 39, column: 44, scope: !7)
!48 = !DILocation(line: 40, column: 18, scope: !7)
!49 = !DILocation(line: 45, column: 19, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 48, column: 28, scope: !7)
!52 = !DILocation(line: 41, column: 18, scope: !7)
!53 = !DILocation(line: 42, column: 18, scope: !7)
!54 = !DILocation(line: 43, column: 18, scope: !7)
!55 = !DILocation(line: 26, column: 44, scope: !7)
!56 = !DILocation(line: 49, column: 19, scope: !7)
!57 = !DILocation(line: 50, column: 33, scope: !7)
!58 = !DILocation(line: 50, column: 44, scope: !7)
!59 = !DILocation(line: 50, column: 30, scope: !7)
!60 = !DILocation(line: 50, column: 38, scope: !7)
!61 = !DILocation(line: 50, column: 25, scope: !7)
!62 = !DILocation(line: 50, column: 56, scope: !7)
!63 = !DILocation(line: 50, column: 4, scope: !7)
