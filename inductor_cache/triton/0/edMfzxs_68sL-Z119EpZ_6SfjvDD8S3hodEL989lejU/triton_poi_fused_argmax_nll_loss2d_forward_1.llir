; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_argmax_nll_loss2d_forward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 15, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 16, !dbg !14
  %11 = shl i32 %9, 2, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %10) #3, !dbg !17
  %15 = or disjoint i32 %11, 1, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %10) #3, !dbg !20
  %19 = or disjoint i32 %11, 2, !dbg !21
  %20 = sext i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !22
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %10) #3, !dbg !23
  %23 = or disjoint i32 %11, 3, !dbg !24
  %24 = sext i32 %23 to i64, !dbg !25
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !25
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %10) #3, !dbg !26
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !27
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %10) #3, !dbg !28
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !29
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %10) #3, !dbg !30
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !31
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %10) #3, !dbg !32
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !33
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %10) #3, !dbg !34
  %35 = bitcast i32 %14 to float, !dbg !17
  %36 = bitcast i32 %18 to float, !dbg !20
  %37 = fcmp ogt float %35, %36, !dbg !35
  %38 = fcmp uno float %35, 0.000000e+00, !dbg !36
  %39 = fcmp uno float %36, 0.000000e+00, !dbg !37
  %40 = xor i1 %39, true, !dbg !38
  %41 = and i1 %38, %40, !dbg !38
  %42 = or i1 %37, %41, !dbg !39
  %43 = fcmp oeq float %35, %36, !dbg !40
  %44 = and i1 %38, %39, !dbg !41
  %45 = or i1 %43, %44, !dbg !42
  %46 = or i1 %42, %45, !dbg !43
  %47 = select i1 %46, float %35, float %36, !dbg !44
  %48 = bitcast i32 %22 to float, !dbg !23
  %49 = fcmp ogt float %47, %48, !dbg !45
  %50 = fcmp uno float %47, 0.000000e+00, !dbg !46
  %51 = fcmp uno float %48, 0.000000e+00, !dbg !47
  %52 = xor i1 %51, true, !dbg !48
  %53 = and i1 %50, %52, !dbg !48
  %54 = or i1 %49, %53, !dbg !49
  %55 = fcmp oeq float %47, %48, !dbg !50
  %56 = and i1 %51, %50, !dbg !51
  %57 = or i1 %55, %56, !dbg !52
  %58 = or i1 %54, %57, !dbg !53
  %59 = select i1 %58, float %47, float %48, !dbg !54
  %60 = bitcast i32 %26 to float, !dbg !26
  %61 = fcmp ogt float %59, %60, !dbg !55
  %62 = fcmp uno float %59, 0.000000e+00, !dbg !56
  %63 = fcmp uno float %60, 0.000000e+00, !dbg !57
  %64 = xor i1 %63, true, !dbg !58
  %65 = and i1 %62, %64, !dbg !58
  %66 = or i1 %61, %65, !dbg !59
  %67 = fcmp oeq float %59, %60, !dbg !60
  %68 = and i1 %63, %62, !dbg !61
  %69 = or i1 %67, %68, !dbg !62
  %70 = or i1 %66, %69, !dbg !63
  %not. = xor i1 %46, true, !dbg !64
  %71 = zext i1 %not. to i64, !dbg !64
  %72 = select i1 %58, i64 %71, i64 2, !dbg !65
  %73 = select i1 %70, i64 %72, i64 3, !dbg !66
  %74 = bitcast i32 %34 to float, !dbg !34
  %75 = bitcast i32 %32 to float, !dbg !32
  %76 = bitcast i32 %30 to float, !dbg !30
  %77 = bitcast i32 %28 to float, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %78 = or disjoint i64 %73, %12, !dbg !68
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !69
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %10) #3, !dbg !70
  %81 = fmul float %77, 0x3FF7154760000000, !dbg !71
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #3, !dbg !71
  %83 = fmul float %76, 0x3FF7154760000000, !dbg !72
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #3, !dbg !72
  %85 = fadd float %82, %84, !dbg !73
  %86 = fmul float %75, 0x3FF7154760000000, !dbg !74
  %87 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %86) #3, !dbg !74
  %88 = fadd float %85, %87, !dbg !75
  %89 = fmul float %74, 0x3FF7154760000000, !dbg !76
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #3, !dbg !76
  %91 = fadd float %88, %90, !dbg !77
  %92 = fcmp olt float %91, 0x3810000000000000, !dbg !78
  %93 = fmul float %91, 0x4160000000000000, !dbg !78
  %.02.i = select i1 %92, float %93, float %91, !dbg !78
  %i.i.0.i = select i1 %92, float -2.300000e+01, float 0.000000e+00, !dbg !78
  %94 = bitcast float %.02.i to i32, !dbg !78
  %95 = add i32 %94, -1059760811, !dbg !78
  %96 = and i32 %95, -8388608, !dbg !78
  %97 = sub i32 %94, %96, !dbg !78
  %98 = bitcast i32 %97 to float, !dbg !78
  %99 = sitofp i32 %96 to float, !dbg !78
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not.i = icmp eq i32 %100, 0, !dbg !78
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %99, float 0x3E80000000000000, float %i.i.0.i) #3, !dbg !78
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %99, float 0x3E80000000000000, float %i.i.0.i) #3, !dbg !78
  %.08.i = select i1 %.not.i, float %102, float %101, !dbg !78
  %103 = fadd float %98, -1.000000e+00, !dbg !78
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not1.i = icmp eq i32 %104, 0, !dbg !78
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %103, float 0x3FC2073EC0000000) #3, !dbg !78
  %106 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %103, float 0x3FC2073EC0000000) #3, !dbg !78
  %.010.i = select i1 %.not1.i, float %106, float %105, !dbg !78
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not2.i = icmp eq i32 %107, 0, !dbg !78
  %108 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %103, float 0xBFBF19B980000000) #3, !dbg !78
  %109 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %103, float 0xBFBF19B980000000) #3, !dbg !78
  %.011.i = select i1 %.not2.i, float %109, float %108, !dbg !78
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not3.i = icmp eq i32 %110, 0, !dbg !78
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %103, float 0x3FC1E52AA0000000) #3, !dbg !78
  %112 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %103, float 0x3FC1E52AA0000000) #3, !dbg !78
  %.012.i = select i1 %.not3.i, float %112, float %111, !dbg !78
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not4.i = icmp eq i32 %113, 0, !dbg !78
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %103, float 0xBFC55B1720000000) #3, !dbg !78
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %103, float 0xBFC55B1720000000) #3, !dbg !78
  %.09.i = select i1 %.not4.i, float %115, float %114, !dbg !78
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not5.i = icmp eq i32 %116, 0, !dbg !78
  %117 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %103, float 0x3FC99DA160000000) #3, !dbg !78
  %118 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %103, float 0x3FC99DA160000000) #3, !dbg !78
  %.05.i = select i1 %.not5.i, float %118, float %117, !dbg !78
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not6.i = icmp eq i32 %119, 0, !dbg !78
  %120 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %103, float 0xBFCFFFE440000000) #3, !dbg !78
  %121 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %103, float 0xBFCFFFE440000000) #3, !dbg !78
  %.01.i = select i1 %.not6.i, float %121, float %120, !dbg !78
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not7.i = icmp eq i32 %122, 0, !dbg !78
  %123 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %103, float 0x3FD5554F00000000) #3, !dbg !78
  %124 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %103, float 0x3FD5554F00000000) #3, !dbg !78
  %.0.i = select i1 %.not7.i, float %124, float %123, !dbg !78
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not8.i = icmp eq i32 %125, 0, !dbg !78
  %126 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %103, float -5.000000e-01) #3, !dbg !78
  %127 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %103, float -5.000000e-01) #3, !dbg !78
  %.07.i = select i1 %.not8.i, float %127, float %126, !dbg !78
  %128 = fmul float %103, %.07.i, !dbg !78
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not9.i = icmp eq i32 %129, 0, !dbg !78
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %128, float %103, float %103) #3, !dbg !78
  %131 = tail call float @llvm.nvvm.fma.rn.f(float %128, float %103, float %103) #3, !dbg !78
  %.06.i = select i1 %.not9.i, float %131, float %130, !dbg !78
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not10.i = icmp eq i32 %132, 0, !dbg !78
  %133 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #3, !dbg !78
  %134 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #3, !dbg !78
  %.04.i = select i1 %.not10.i, float %134, float %133, !dbg !78
  %135 = icmp ugt i32 %94, 2139095039, !dbg !78
  br i1 %135, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !78

__nv_fmaf_rn.exit.i.i:                            ; preds = %4
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not11.i = icmp eq i32 %136, 0, !dbg !78
  %137 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #3, !dbg !78
  %138 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #3, !dbg !78
  %.03.i = select i1 %.not11.i, float %138, float %137, !dbg !78
  br label %__nv_logf.exit, !dbg !78

__nv_logf.exit:                                   ; preds = %4, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %4 ], !dbg !78
  %139 = bitcast i32 %80 to float, !dbg !70
  %140 = and i32 %7, 16, !dbg !12
  %141 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !78
  %r.i.1.i = select i1 %141, float 0xFFF0000000000000, float %r.i.0.i, !dbg !78
  %142 = fsub float %r.i.1.i, %139, !dbg !79
  %143 = fadd float %142, 0.000000e+00, !dbg !79
  %144 = sext i32 %9 to i64, !dbg !80
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !80
  %146 = icmp eq i32 %140, 0, !dbg !81
  %147 = bitcast float %143 to i32, !dbg !81
  %148 = and i1 %146, %10, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %145, i1 %148) #3, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqj5kbtpoklzcxk365qeubysagg2ahlrjctzcnucffyeesqtzeb4.py", directory: "inductor_cache/qj")
!4 = !{ptr @triton_poi_fused_argmax_nll_loss2d_forward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_argmax_nll_loss2d_forward_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_argmax_nll_loss2d_forward_1", linkageName: "triton_poi_fused_argmax_nll_loss2d_forward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 35, scope: !7)
!22 = !DILocation(line: 27, column: 31, scope: !7)
!23 = !DILocation(line: 27, column: 42, scope: !7)
!24 = !DILocation(line: 28, column: 35, scope: !7)
!25 = !DILocation(line: 28, column: 31, scope: !7)
!26 = !DILocation(line: 28, column: 42, scope: !7)
!27 = !DILocation(line: 29, column: 31, scope: !7)
!28 = !DILocation(line: 29, column: 38, scope: !7)
!29 = !DILocation(line: 30, column: 31, scope: !7)
!30 = !DILocation(line: 30, column: 42, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 18, scope: !7)
!36 = !DILocation(line: 35, column: 19, scope: !7)
!37 = !DILocation(line: 36, column: 19, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 34, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 34, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 21, scope: !7)
!47 = !DILocation(line: 51, column: 21, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 21, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 35, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 21, scope: !7)
!57 = !DILocation(line: 65, column: 21, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 21, scope: !7)
!61 = !DILocation(line: 68, column: 20, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 73, column: 20, scope: !7)
!64 = !DILocation(line: 47, column: 35, scope: !7)
!65 = !DILocation(line: 61, column: 35, scope: !7)
!66 = !DILocation(line: 75, column: 35, scope: !7)
!67 = !DILocation(line: 83, column: 62, scope: !7)
!68 = !DILocation(line: 84, column: 39, scope: !7)
!69 = !DILocation(line: 84, column: 31, scope: !7)
!70 = !DILocation(line: 84, column: 46, scope: !7)
!71 = !DILocation(line: 85, column: 24, scope: !7)
!72 = !DILocation(line: 86, column: 24, scope: !7)
!73 = !DILocation(line: 87, column: 20, scope: !7)
!74 = !DILocation(line: 88, column: 24, scope: !7)
!75 = !DILocation(line: 89, column: 20, scope: !7)
!76 = !DILocation(line: 90, column: 24, scope: !7)
!77 = !DILocation(line: 91, column: 20, scope: !7)
!78 = !DILocation(line: 92, column: 24, scope: !7)
!79 = !DILocation(line: 94, column: 13, scope: !7)
!80 = !DILocation(line: 97, column: 25, scope: !7)
!81 = !DILocation(line: 97, column: 37, scope: !7)
!82 = !DILocation(line: 97, column: 4, scope: !7)
