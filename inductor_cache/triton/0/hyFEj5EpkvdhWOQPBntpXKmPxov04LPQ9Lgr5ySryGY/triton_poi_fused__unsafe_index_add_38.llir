; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 2, !dbg !13
  %13 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %14 = sdiv i32 %.frozen, 64, !dbg !14
  %15 = sdiv i32 %13, 64, !dbg !14
  %16 = srem i32 %14, 64, !dbg !15
  %17 = srem i32 %15, 64, !dbg !15
  %18 = mul i32 %14, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = srem i32 %12, 64, !dbg !16
  %20 = sdiv i32 %11, 4096, !dbg !17
  %21 = sdiv i32 %13, 4096, !dbg !17
  %22 = sext i32 %16 to i64, !dbg !18
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = sext i32 %17 to i64, !dbg !18
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %34 = sext i32 %.decomposed to i64, !dbg !20
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34, !dbg !20
  %36 = sext i32 %19 to i64, !dbg !20
  %37 = getelementptr i64, ptr addrspace(1) %0, i64 %36, !dbg !20
  %38 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %39 = extractvalue { i64, i64 } %38, 0, !dbg !21
  %40 = extractvalue { i64, i64 } %38, 1, !dbg !21
  %41 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %42 = extractvalue { i64, i64 } %41, 0, !dbg !21
  %43 = extractvalue { i64, i64 } %41, 1, !dbg !21
  %44 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %45 = extractvalue { i64, i64 } %44, 0, !dbg !21
  %46 = extractvalue { i64, i64 } %44, 1, !dbg !21
  %47 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %48 = extractvalue { i64, i64 } %47, 0, !dbg !21
  %49 = extractvalue { i64, i64 } %47, 1, !dbg !21
  %50 = lshr i64 %26, 58, !dbg !22
  %51 = and i64 %50, 32, !dbg !22
  %52 = add i64 %51, %26, !dbg !22
  %53 = lshr i64 %30, 58, !dbg !22
  %54 = and i64 %53, 32, !dbg !22
  %55 = add i64 %54, %30, !dbg !22
  %56 = lshr i64 %39, 58, !dbg !23
  %57 = and i64 %56, 32, !dbg !23
  %58 = lshr i64 %40, 58, !dbg !23
  %59 = and i64 %58, 32, !dbg !23
  %60 = lshr i64 %42, 58, !dbg !23
  %61 = and i64 %60, 32, !dbg !23
  %62 = lshr i64 %43, 58, !dbg !23
  %63 = and i64 %62, 32, !dbg !23
  %64 = lshr i64 %45, 58, !dbg !23
  %65 = and i64 %64, 32, !dbg !23
  %66 = lshr i64 %46, 58, !dbg !23
  %67 = and i64 %66, 32, !dbg !23
  %68 = lshr i64 %48, 58, !dbg !23
  %69 = and i64 %68, 32, !dbg !23
  %70 = lshr i64 %49, 58, !dbg !23
  %71 = and i64 %70, 32, !dbg !23
  %72 = shl i64 %52, 5, !dbg !24
  %73 = shl i64 %55, 5, !dbg !24
  %74 = shl nsw i32 %20, 10, !dbg !25
  %75 = shl nsw i32 %21, 10, !dbg !25
  %76 = sext i32 %74 to i64, !dbg !26
  %77 = sext i32 %75 to i64, !dbg !26
  %78 = add i64 %72, %76, !dbg !23
  %79 = add i64 %78, %39, !dbg !27
  %80 = add i64 %79, %57, !dbg !26
  %81 = add i64 %78, %40, !dbg !27
  %82 = add i64 %81, %59, !dbg !26
  %83 = add i64 %78, %42, !dbg !27
  %84 = add i64 %83, %61, !dbg !26
  %85 = add i64 %78, %43, !dbg !27
  %86 = add i64 %85, %63, !dbg !26
  %87 = add i64 %73, %77, !dbg !23
  %88 = add i64 %87, %45, !dbg !27
  %89 = add i64 %88, %65, !dbg !26
  %90 = add i64 %87, %46, !dbg !27
  %91 = add i64 %90, %67, !dbg !26
  %92 = add i64 %87, %48, !dbg !27
  %93 = add i64 %92, %69, !dbg !26
  %94 = add i64 %87, %49, !dbg !27
  %95 = add i64 %94, %71, !dbg !26
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !28
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !28
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !28
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !28
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !28
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !29
  %105 = bitcast i32 %104 to float, !dbg !29
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !29
  %107 = bitcast i32 %106 to float, !dbg !29
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !29
  %109 = bitcast i32 %108 to float, !dbg !29
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #1, !dbg !29
  %113 = bitcast i32 %112 to float, !dbg !29
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !29
  %117 = bitcast i32 %116 to float, !dbg !29
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !30
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !30
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !30
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !30
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !30
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !30
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !30
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #1, !dbg !31
  %129 = bitcast i32 %128 to float, !dbg !31
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #1, !dbg !31
  %131 = bitcast i32 %130 to float, !dbg !31
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !31
  %133 = bitcast i32 %132 to float, !dbg !31
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !31
  %135 = bitcast i32 %134 to float, !dbg !31
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !31
  %137 = bitcast i32 %136 to float, !dbg !31
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !31
  %139 = bitcast i32 %138 to float, !dbg !31
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !31
  %141 = bitcast i32 %140 to float, !dbg !31
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !31
  %143 = bitcast i32 %142 to float, !dbg !31
  %144 = fadd float %105, %129, !dbg !32
  %145 = fadd float %107, %131, !dbg !32
  %146 = fadd float %109, %133, !dbg !32
  %147 = fadd float %111, %135, !dbg !32
  %148 = fadd float %113, %137, !dbg !32
  %149 = fadd float %115, %139, !dbg !32
  %150 = fadd float %117, %141, !dbg !32
  %151 = fadd float %119, %143, !dbg !32
  %152 = sext i32 %11 to i64, !dbg !33
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !33
  %154 = sext i32 %13 to i64, !dbg !33
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %154, !dbg !33
  %156 = bitcast float %144 to i32, !dbg !34
  %157 = bitcast float %145 to i32, !dbg !34
  %158 = bitcast float %146 to i32, !dbg !34
  %159 = bitcast float %147 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %156, i32 %157, i32 %158, i32 %159, ptr addrspace(1) %153, i1 true) #1, !dbg !34
  %160 = bitcast float %148 to i32, !dbg !34
  %161 = bitcast float %149 to i32, !dbg !34
  %162 = bitcast float %150 to i32, !dbg !34
  %163 = bitcast float %151 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %160, i32 %161, i32 %162, i32 %163, ptr addrspace(1) %155, i1 true) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2hlvv7vehpdiwhoql7gwbhi23efwnfxks7n4xwpcaoigjthvbwk.py", directory: "inductor_cache/2h")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_38", linkageName: "triton_poi_fused__unsafe_index_add_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 32, scope: !7)
!23 = !DILocation(line: 36, column: 32, scope: !7)
!24 = !DILocation(line: 37, column: 40, scope: !7)
!25 = !DILocation(line: 37, column: 52, scope: !7)
!26 = !DILocation(line: 37, column: 47, scope: !7)
!27 = !DILocation(line: 37, column: 37, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 57, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 58, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 40, column: 37, scope: !7)
!35 = !DILocation(line: 40, column: 4, scope: !7)
