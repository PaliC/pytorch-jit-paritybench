; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 256, !dbg !14
  %16 = mul i32 %15, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = icmp slt i32 %.decomposed, 128, !dbg !16
  %18 = shl nsw i32 %15, 7, !dbg !17
  %19 = add nsw i32 %18, %.decomposed, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !20
  %23 = sext i32 %.decomposed to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !23
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !24
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !24
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !24
  %30 = bitcast i32 %28 to float, !dbg !24
  %31 = bitcast i32 %29 to float, !dbg !24
  %32 = fadd float %30, 0x3EE4F8B580000000, !dbg !25
  %33 = fadd float %31, 0x3EE4F8B580000000, !dbg !25
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %34, 0, !dbg !26
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %35, 0, !dbg !26
  br i1 %.not.i, label %41, label %36, !dbg !26

36:                                               ; preds = %8
  br i1 %.not1.i, label %39, label %37, !dbg !26

37:                                               ; preds = %36
  %38 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

39:                                               ; preds = %36
  %40 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

41:                                               ; preds = %8
  br i1 %.not1.i, label %44, label %42, !dbg !26

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.f(float %32) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %37, %39, %42, %44
  %.0.i = phi float [ %38, %37 ], [ %40, %39 ], [ %43, %42 ], [ %45, %44 ], !dbg !26
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %46, 0, !dbg !26
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %47, 0, !dbg !26
  br i1 %.not.i1, label %53, label %48, !dbg !26

48:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %51, label %49, !dbg !26

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %33) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %33) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

53:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %56, label %54, !dbg !26

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %33) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %33) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %49, %51, %54, %56
  %.0.i3 = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !26
  %58 = extractvalue { i32, i32 } %22, 1, !dbg !20
  %59 = bitcast i32 %58 to float, !dbg !20
  %60 = extractvalue { i32, i32 } %25, 1, !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = fsub float %59, %61, !dbg !27
  %63 = extractvalue { i32, i32 } %22, 0, !dbg !20
  %64 = bitcast i32 %63 to float, !dbg !20
  %65 = extractvalue { i32, i32 } %25, 0, !dbg !22
  %66 = bitcast i32 %65 to float, !dbg !22
  %67 = fsub float %64, %66, !dbg !27
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !28
  %70 = fmul float %67, %68, !dbg !29
  %71 = fmul float %62, %69, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !30
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !31
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !31
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !31
  %76 = bitcast i32 %74 to float, !dbg !31
  %77 = bitcast i32 %75 to float, !dbg !31
  %78 = fmul float %70, %76, !dbg !32
  %79 = fmul float %71, %77, !dbg !32
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !33
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %80, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !34
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !34
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !34
  %84 = bitcast i32 %82 to float, !dbg !34
  %85 = bitcast i32 %83 to float, !dbg !34
  %86 = fadd float %78, %84, !dbg !35
  %87 = fadd float %79, %85, !dbg !35
  %88 = icmp sgt i32 %.decomposed, 127, !dbg !36
  %89 = sext i32 %19 to i64, !dbg !37
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %89, !dbg !37
  %91 = getelementptr i8, ptr addrspace(1) %90, i64 -512, !dbg !37
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %91, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #3, !dbg !38
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !38
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !38
  %95 = bitcast i32 %93 to float, !dbg !38
  %96 = bitcast i32 %94 to float, !dbg !38
  %97 = select i1 %17, float %86, float %95, !dbg !39
  %98 = select i1 %17, float %87, float %96, !dbg !39
  %99 = fcmp olt float %97, 0.000000e+00, !dbg !40
  %100 = fcmp olt float %98, 0.000000e+00, !dbg !40
  %101 = select i1 %99, float 0.000000e+00, float %97, !dbg !44
  %102 = select i1 %100, float 0.000000e+00, float %98, !dbg !44
  %103 = sext i32 %14 to i64, !dbg !45
  %104 = getelementptr float, ptr addrspace(1) %6, i64 %103, !dbg !45
  %105 = bitcast float %101 to i32, !dbg !46
  %106 = bitcast float %102 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %105, i32 %106, ptr addrspace(1) %104, i1 true) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clu3vte2hyuxi3ovv7jkzrsr443f33nyefmmg32tkka5neliyvty.py", directory: "inductor_cache/lu")
!4 = !{ptr @triton_poi_fused_cat_relu_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_24, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_24", linkageName: "triton_poi_fused_cat_relu_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 27, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 20, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 31, scope: !7)
!31 = !DILocation(line: 44, column: 36, scope: !7)
!32 = !DILocation(line: 45, column: 20, scope: !7)
!33 = !DILocation(line: 46, column: 31, scope: !7)
!34 = !DILocation(line: 46, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 50, column: 20, scope: !7)
!37 = !DILocation(line: 53, column: 31, scope: !7)
!38 = !DILocation(line: 53, column: 56, scope: !7)
!39 = !DILocation(line: 0, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 56, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 57, column: 25, scope: !7)
!46 = !DILocation(line: 57, column: 37, scope: !7)
!47 = !DILocation(line: 57, column: 4, scope: !7)
