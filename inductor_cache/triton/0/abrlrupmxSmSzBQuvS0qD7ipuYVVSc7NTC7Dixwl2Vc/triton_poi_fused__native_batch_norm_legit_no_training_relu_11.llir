; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = lshr i32 %11, 4, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %15, 32, !dbg !12
  %18 = or disjoint i32 %15, 48, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = icmp slt i32 %19, 256, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 6, !dbg !16
  %23 = or disjoint i32 %22, %15, !dbg !17
  %24 = or disjoint i32 %22, %16, !dbg !17
  %25 = or disjoint i32 %22, %17, !dbg !17
  %26 = or disjoint i32 %22, %18, !dbg !17
  %.frozen = freeze i32 %19, !dbg !18
  %27 = sdiv i32 %.frozen, 64, !dbg !18
  %28 = mul i32 %27, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %28, !dbg !19
  %29 = shl i32 %23, 6, !dbg !20
  %30 = shl i32 %24, 6, !dbg !20
  %31 = shl i32 %25, 6, !dbg !20
  %32 = shl i32 %26, 6, !dbg !20
  %33 = shl i32 %27, 18, !dbg !21
  %34 = add i32 %33, %.decomposed, !dbg !22
  %35 = add i32 %34, %29, !dbg !23
  %36 = add i32 %34, %30, !dbg !23
  %37 = add i32 %34, %31, !dbg !23
  %38 = add i32 %34, %32, !dbg !23
  %39 = sext i32 %35 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = sext i32 %36 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = sext i32 %37 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %38 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #4, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %20) #4, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %20) #4, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %20) #4, !dbg !25
  %51 = sext i32 %.decomposed to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !26
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %20) #4, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %20) #4, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = bitcast i32 %57 to float, !dbg !29
  %62 = bitcast i32 %58 to float, !dbg !29
  %63 = bitcast i32 %59 to float, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !30
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %20) #4, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !32
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %20) #4, !dbg !33
  %68 = fadd float %60, 0x3EE4F8B580000000, !dbg !34
  %69 = fadd float %61, 0x3EE4F8B580000000, !dbg !34
  %70 = fadd float %62, 0x3EE4F8B580000000, !dbg !34
  %71 = fadd float %63, 0x3EE4F8B580000000, !dbg !34
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %72, 0, !dbg !35
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %73, 0, !dbg !35
  br i1 %.not.i, label %79, label %74, !dbg !35

74:                                               ; preds = %8
  br i1 %.not1.i, label %77, label %75, !dbg !35

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

79:                                               ; preds = %8
  br i1 %.not1.i, label %82, label %80, !dbg !35

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !35
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i1 = icmp eq i32 %84, 0, !dbg !35
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i4 = icmp eq i32 %85, 0, !dbg !35
  br i1 %.not.i1, label %91, label %86, !dbg !35

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !35

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %94, label %92, !dbg !35

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %87, %89, %92, %94
  %.0.i3 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !35
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i6 = icmp eq i32 %96, 0, !dbg !35
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i9 = icmp eq i32 %97, 0, !dbg !35
  br i1 %.not.i6, label %103, label %98, !dbg !35

98:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %101, label %99, !dbg !35

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

103:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %106, label %104, !dbg !35

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %99, %101, %104, %106
  %.0.i8 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !35
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i11 = icmp eq i32 %108, 0, !dbg !35
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i14 = icmp eq i32 %109, 0, !dbg !35
  br i1 %.not.i11, label %115, label %110, !dbg !35

110:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %113, label %111, !dbg !35

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

115:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %118, label %116, !dbg !35

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %111, %113, %116, %118
  %.0.i13 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !25
  %121 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !27
  %122 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !25
  %123 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !25
  %125 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !27
  %126 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !25
  %127 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !27
  %128 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !25
  %129 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !25
  %130 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !25
  %131 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !25
  %132 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !25
  %133 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !25
  %134 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !25
  %136 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %137 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %138 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %139 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %140 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !33
  %141 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !33
  %142 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !33
  %143 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !33
  %144 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !31
  %146 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !31
  %147 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !31
  %148 = or disjoint i32 %10, %18, !dbg !13
  %.frozen16 = freeze i32 %148, !dbg !18
  %149 = sdiv i32 %.frozen16, 64, !dbg !18
  %150 = or disjoint i32 %10, %17, !dbg !13
  %.frozen18 = freeze i32 %150, !dbg !18
  %151 = sdiv i32 %.frozen18, 64, !dbg !18
  %152 = or disjoint i32 %10, %16, !dbg !13
  %.frozen20 = freeze i32 %152, !dbg !18
  %153 = sdiv i32 %.frozen20, 64, !dbg !18
  %154 = or disjoint i32 %10, %15, !dbg !13
  %.frozen22 = freeze i32 %154, !dbg !18
  %155 = sdiv i32 %.frozen22, 64, !dbg !18
  %156 = mul i32 %149, 64, !dbg !19
  %.decomposed17 = sub i32 %.frozen16, %156, !dbg !19
  %157 = mul i32 %151, 64, !dbg !19
  %.decomposed19 = sub i32 %.frozen18, %157, !dbg !19
  %158 = mul i32 %153, 64, !dbg !19
  %.decomposed21 = sub i32 %.frozen20, %158, !dbg !19
  %159 = mul i32 %155, 64, !dbg !19
  %.decomposed23 = sub i32 %.frozen22, %159, !dbg !19
  %160 = or disjoint i32 %22, %13, !dbg !17
  %161 = icmp slt i32 %148, 256, !dbg !14
  %162 = icmp slt i32 %150, 256, !dbg !14
  %163 = icmp slt i32 %152, 256, !dbg !14
  %164 = icmp slt i32 %154, 256, !dbg !14
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !36
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !36
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !36
  %169 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !27
  %170 = insertelement <4 x i32> %169, i32 %123, i64 1, !dbg !27
  %171 = insertelement <4 x i32> %170, i32 %125, i64 2, !dbg !27
  %172 = insertelement <4 x i32> %171, i32 %127, i64 3, !dbg !27
  %173 = bitcast <4 x i32> %172 to <4 x float>, !dbg !27
  %174 = shufflevector <4 x float> %173, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %175 = insertelement <16 x i32> poison, i32 %120, i64 0, !dbg !25
  %176 = insertelement <16 x i32> %175, i32 %122, i64 1, !dbg !25
  %177 = insertelement <16 x i32> %176, i32 %124, i64 2, !dbg !25
  %178 = insertelement <16 x i32> %177, i32 %126, i64 3, !dbg !25
  %179 = insertelement <16 x i32> %178, i32 %128, i64 4, !dbg !25
  %180 = insertelement <16 x i32> %179, i32 %129, i64 5, !dbg !25
  %181 = insertelement <16 x i32> %180, i32 %130, i64 6, !dbg !25
  %182 = insertelement <16 x i32> %181, i32 %131, i64 7, !dbg !25
  %183 = insertelement <16 x i32> %182, i32 %132, i64 8, !dbg !25
  %184 = insertelement <16 x i32> %183, i32 %133, i64 9, !dbg !25
  %185 = insertelement <16 x i32> %184, i32 %134, i64 10, !dbg !25
  %186 = insertelement <16 x i32> %185, i32 %135, i64 11, !dbg !25
  %187 = insertelement <16 x i32> %186, i32 %136, i64 12, !dbg !25
  %188 = insertelement <16 x i32> %187, i32 %137, i64 13, !dbg !25
  %189 = insertelement <16 x i32> %188, i32 %138, i64 14, !dbg !25
  %190 = insertelement <16 x i32> %189, i32 %139, i64 15, !dbg !25
  %191 = bitcast <16 x i32> %190 to <16 x float>, !dbg !25
  %192 = fsub <16 x float> %191, %174, !dbg !37
  %193 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !33
  %194 = insertelement <4 x i32> %193, i32 %141, i64 1, !dbg !33
  %195 = insertelement <4 x i32> %194, i32 %142, i64 2, !dbg !33
  %196 = insertelement <4 x i32> %195, i32 %143, i64 3, !dbg !33
  %197 = bitcast <4 x i32> %196 to <4 x float>, !dbg !33
  %198 = shufflevector <4 x float> %197, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %199 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !31
  %200 = insertelement <4 x i32> %199, i32 %145, i64 1, !dbg !31
  %201 = insertelement <4 x i32> %200, i32 %146, i64 2, !dbg !31
  %202 = insertelement <4 x i32> %201, i32 %147, i64 3, !dbg !31
  %203 = bitcast <4 x i32> %202 to <4 x float>, !dbg !31
  %204 = shufflevector <4 x float> %203, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %205 = insertelement <16 x float> poison, float %168, i64 0, !dbg !38
  %206 = insertelement <16 x float> %205, float %167, i64 1, !dbg !38
  %207 = insertelement <16 x float> %206, float %166, i64 2, !dbg !38
  %208 = insertelement <16 x float> %207, float %165, i64 3, !dbg !38
  %209 = shufflevector <16 x float> %208, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !38
  %210 = fmul <16 x float> %192, %209, !dbg !38
  %211 = fmul <16 x float> %210, %204, !dbg !39
  %212 = fadd <16 x float> %211, %198, !dbg !40
  %213 = fcmp olt <16 x float> %212, zeroinitializer, !dbg !41
  %214 = extractelement <16 x i1> %213, i64 15, !dbg !45
  %215 = extractelement <16 x float> %212, i64 15, !dbg !45
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !45
  %217 = extractelement <16 x i1> %213, i64 14, !dbg !45
  %218 = extractelement <16 x float> %212, i64 14, !dbg !45
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !45
  %220 = extractelement <16 x i1> %213, i64 13, !dbg !45
  %221 = extractelement <16 x float> %212, i64 13, !dbg !45
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !45
  %223 = extractelement <16 x i1> %213, i64 12, !dbg !45
  %224 = extractelement <16 x float> %212, i64 12, !dbg !45
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !45
  %226 = extractelement <16 x i1> %213, i64 11, !dbg !45
  %227 = extractelement <16 x float> %212, i64 11, !dbg !45
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !45
  %229 = extractelement <16 x i1> %213, i64 10, !dbg !45
  %230 = extractelement <16 x float> %212, i64 10, !dbg !45
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !45
  %232 = extractelement <16 x i1> %213, i64 9, !dbg !45
  %233 = extractelement <16 x float> %212, i64 9, !dbg !45
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !45
  %235 = extractelement <16 x i1> %213, i64 8, !dbg !45
  %236 = extractelement <16 x float> %212, i64 8, !dbg !45
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !45
  %238 = extractelement <16 x i1> %213, i64 7, !dbg !45
  %239 = extractelement <16 x float> %212, i64 7, !dbg !45
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !45
  %241 = extractelement <16 x i1> %213, i64 6, !dbg !45
  %242 = extractelement <16 x float> %212, i64 6, !dbg !45
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !45
  %244 = extractelement <16 x i1> %213, i64 5, !dbg !45
  %245 = extractelement <16 x float> %212, i64 5, !dbg !45
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !45
  %247 = extractelement <16 x i1> %213, i64 4, !dbg !45
  %248 = extractelement <16 x float> %212, i64 4, !dbg !45
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !45
  %250 = extractelement <16 x i1> %213, i64 3, !dbg !45
  %251 = extractelement <16 x float> %212, i64 3, !dbg !45
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !45
  %253 = extractelement <16 x i1> %213, i64 2, !dbg !45
  %254 = extractelement <16 x float> %212, i64 2, !dbg !45
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !45
  %256 = extractelement <16 x i1> %213, i64 1, !dbg !45
  %257 = extractelement <16 x float> %212, i64 1, !dbg !45
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !45
  %259 = extractelement <16 x i1> %213, i64 0, !dbg !45
  %260 = extractelement <16 x float> %212, i64 0, !dbg !45
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !45
  %262 = shl nsw i32 %.decomposed23, 12, !dbg !46
  %263 = shl nsw i32 %.decomposed21, 12, !dbg !46
  %264 = shl nsw i32 %.decomposed19, 12, !dbg !46
  %265 = shl nsw i32 %.decomposed17, 12, !dbg !46
  %266 = add i32 %262, %160, !dbg !47
  %267 = add i32 %263, %160, !dbg !47
  %268 = add i32 %264, %160, !dbg !47
  %269 = add i32 %265, %160, !dbg !47
  %270 = shl i32 %155, 20, !dbg !48
  %271 = shl i32 %153, 20, !dbg !48
  %272 = shl i32 %151, 20, !dbg !48
  %273 = shl i32 %149, 20, !dbg !48
  %274 = add i32 %266, %270, !dbg !49
  %275 = add i32 %267, %271, !dbg !49
  %276 = add i32 %268, %272, !dbg !49
  %277 = add i32 %269, %273, !dbg !49
  %278 = sext i32 %274 to i64, !dbg !50
  %279 = getelementptr float, ptr addrspace(1) %5, i64 %278, !dbg !50
  %280 = sext i32 %275 to i64, !dbg !50
  %281 = getelementptr float, ptr addrspace(1) %5, i64 %280, !dbg !50
  %282 = sext i32 %276 to i64, !dbg !50
  %283 = getelementptr float, ptr addrspace(1) %5, i64 %282, !dbg !50
  %284 = sext i32 %277 to i64, !dbg !50
  %285 = getelementptr float, ptr addrspace(1) %5, i64 %284, !dbg !50
  %286 = shl i32 %11, 8, !dbg !51
  %287 = and i32 %286, 3840, !dbg !51
  %288 = or disjoint i32 %287, %15, !dbg !51
  %289 = and i32 %12, 1020, !dbg !51
  %290 = lshr exact i32 %287, 4, !dbg !51
  %291 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %290, !dbg !51
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %288, !dbg !51
  %293 = bitcast float %216 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #4, !dbg !51
  %294 = or disjoint i32 %288, 64, !dbg !51
  %295 = lshr i32 %294, 6, !dbg !51
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i32 %295, !dbg !51
  %297 = getelementptr float, ptr addrspace(3) %296, i32 %294, !dbg !51
  %298 = bitcast float %219 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !51
  %299 = or disjoint i32 %288, 128, !dbg !51
  %300 = lshr i32 %299, 6, !dbg !51
  %301 = getelementptr float, ptr addrspace(3) @global_smem, i32 %300, !dbg !51
  %302 = getelementptr float, ptr addrspace(3) %301, i32 %299, !dbg !51
  %303 = bitcast float %222 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #4, !dbg !51
  %304 = or disjoint i32 %288, 192, !dbg !51
  %305 = lshr i32 %304, 6, !dbg !51
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i32 %305, !dbg !51
  %307 = getelementptr float, ptr addrspace(3) %306, i32 %304, !dbg !51
  %308 = bitcast float %225 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %307, <1 x i32> %308, i1 true) #4, !dbg !51
  %309 = or disjoint i32 %288, 16, !dbg !51
  %310 = getelementptr float, ptr addrspace(3) %291, i32 %309, !dbg !51
  %311 = bitcast float %228 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #4, !dbg !51
  %312 = or disjoint i32 %288, 80, !dbg !51
  %313 = lshr i32 %312, 6, !dbg !51
  %314 = getelementptr float, ptr addrspace(3) @global_smem, i32 %313, !dbg !51
  %315 = getelementptr float, ptr addrspace(3) %314, i32 %312, !dbg !51
  %316 = bitcast float %231 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %316, i1 true) #4, !dbg !51
  %317 = or disjoint i32 %288, 144, !dbg !51
  %318 = lshr i32 %317, 6, !dbg !51
  %319 = getelementptr float, ptr addrspace(3) @global_smem, i32 %318, !dbg !51
  %320 = getelementptr float, ptr addrspace(3) %319, i32 %317, !dbg !51
  %321 = bitcast float %234 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 true) #4, !dbg !51
  %322 = or disjoint i32 %288, 208, !dbg !51
  %323 = lshr i32 %322, 6, !dbg !51
  %324 = getelementptr float, ptr addrspace(3) @global_smem, i32 %323, !dbg !51
  %325 = getelementptr float, ptr addrspace(3) %324, i32 %322, !dbg !51
  %326 = bitcast float %237 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 true) #4, !dbg !51
  %327 = or disjoint i32 %288, 32, !dbg !51
  %328 = getelementptr float, ptr addrspace(3) %291, i32 %327, !dbg !51
  %329 = bitcast float %240 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %329, i1 true) #4, !dbg !51
  %330 = or disjoint i32 %288, 96, !dbg !51
  %331 = lshr i32 %330, 6, !dbg !51
  %332 = getelementptr float, ptr addrspace(3) @global_smem, i32 %331, !dbg !51
  %333 = getelementptr float, ptr addrspace(3) %332, i32 %330, !dbg !51
  %334 = bitcast float %243 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #4, !dbg !51
  %335 = or disjoint i32 %288, 160, !dbg !51
  %336 = lshr i32 %335, 6, !dbg !51
  %337 = getelementptr float, ptr addrspace(3) @global_smem, i32 %336, !dbg !51
  %338 = getelementptr float, ptr addrspace(3) %337, i32 %335, !dbg !51
  %339 = bitcast float %246 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #4, !dbg !51
  %340 = or disjoint i32 %288, 224, !dbg !51
  %341 = lshr i32 %340, 6, !dbg !51
  %342 = getelementptr float, ptr addrspace(3) @global_smem, i32 %341, !dbg !51
  %343 = getelementptr float, ptr addrspace(3) %342, i32 %340, !dbg !51
  %344 = bitcast float %249 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %344, i1 true) #4, !dbg !51
  %345 = or disjoint i32 %288, 48, !dbg !51
  %346 = getelementptr float, ptr addrspace(3) %291, i32 %345, !dbg !51
  %347 = bitcast float %252 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #4, !dbg !51
  %348 = or disjoint i32 %288, 112, !dbg !51
  %349 = lshr i32 %348, 6, !dbg !51
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i32 %349, !dbg !51
  %351 = getelementptr float, ptr addrspace(3) %350, i32 %348, !dbg !51
  %352 = bitcast float %255 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %352, i1 true) #4, !dbg !51
  %353 = or disjoint i32 %288, 176, !dbg !51
  %354 = lshr i32 %353, 6, !dbg !51
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i32 %354, !dbg !51
  %356 = getelementptr float, ptr addrspace(3) %355, i32 %353, !dbg !51
  %357 = bitcast float %258 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #4, !dbg !51
  %358 = or disjoint i32 %288, 240, !dbg !51
  %359 = lshr i32 %358, 6, !dbg !51
  %360 = getelementptr float, ptr addrspace(3) @global_smem, i32 %359, !dbg !51
  %361 = getelementptr float, ptr addrspace(3) %360, i32 %358, !dbg !51
  %362 = bitcast float %261 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %363 = lshr i32 %289, 6, !dbg !51
  %364 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %363, !dbg !51
  %365 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %289, !dbg !51
  %366 = load i32, ptr addrspace(3) %365, align 4, !dbg !51
  %367 = or disjoint i32 %289, 1, !dbg !51
  %368 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %367, !dbg !51
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !51
  %370 = or disjoint i32 %289, 2, !dbg !51
  %371 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %370, !dbg !51
  %372 = load i32, ptr addrspace(3) %371, align 4, !dbg !51
  %373 = or disjoint i32 %289, 3, !dbg !51
  %374 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %373, !dbg !51
  %375 = load i32, ptr addrspace(3) %374, align 4, !dbg !51
  %376 = or disjoint i32 %289, 1024, !dbg !51
  %377 = lshr i32 %376, 6, !dbg !51
  %378 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %377, !dbg !51
  %379 = getelementptr inbounds float, ptr addrspace(3) %378, i32 %376, !dbg !51
  %380 = load i32, ptr addrspace(3) %379, align 4, !dbg !51
  %381 = or disjoint i32 %289, 1025, !dbg !51
  %382 = lshr i32 %381, 6, !dbg !51
  %383 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %382, !dbg !51
  %384 = getelementptr inbounds float, ptr addrspace(3) %383, i32 %381, !dbg !51
  %385 = load i32, ptr addrspace(3) %384, align 4, !dbg !51
  %386 = or disjoint i32 %289, 1026, !dbg !51
  %387 = lshr i32 %386, 6, !dbg !51
  %388 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %387, !dbg !51
  %389 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %386, !dbg !51
  %390 = load i32, ptr addrspace(3) %389, align 4, !dbg !51
  %391 = or disjoint i32 %289, 1027, !dbg !51
  %392 = lshr i32 %391, 6, !dbg !51
  %393 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %392, !dbg !51
  %394 = getelementptr inbounds float, ptr addrspace(3) %393, i32 %391, !dbg !51
  %395 = load i32, ptr addrspace(3) %394, align 4, !dbg !51
  %396 = or disjoint i32 %289, 2048, !dbg !51
  %397 = lshr i32 %396, 6, !dbg !51
  %398 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %397, !dbg !51
  %399 = getelementptr inbounds float, ptr addrspace(3) %398, i32 %396, !dbg !51
  %400 = load i32, ptr addrspace(3) %399, align 4, !dbg !51
  %401 = or disjoint i32 %289, 2049, !dbg !51
  %402 = lshr i32 %401, 6, !dbg !51
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %402, !dbg !51
  %404 = getelementptr inbounds float, ptr addrspace(3) %403, i32 %401, !dbg !51
  %405 = load i32, ptr addrspace(3) %404, align 4, !dbg !51
  %406 = or disjoint i32 %289, 2050, !dbg !51
  %407 = lshr i32 %406, 6, !dbg !51
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %407, !dbg !51
  %409 = getelementptr inbounds float, ptr addrspace(3) %408, i32 %406, !dbg !51
  %410 = load i32, ptr addrspace(3) %409, align 4, !dbg !51
  %411 = or disjoint i32 %289, 2051, !dbg !51
  %412 = lshr i32 %411, 6, !dbg !51
  %413 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %412, !dbg !51
  %414 = getelementptr inbounds float, ptr addrspace(3) %413, i32 %411, !dbg !51
  %415 = load i32, ptr addrspace(3) %414, align 4, !dbg !51
  %416 = or disjoint i32 %289, 3072, !dbg !51
  %417 = lshr i32 %416, 6, !dbg !51
  %418 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %417, !dbg !51
  %419 = getelementptr inbounds float, ptr addrspace(3) %418, i32 %416, !dbg !51
  %420 = load i32, ptr addrspace(3) %419, align 4, !dbg !51
  %421 = or disjoint i32 %289, 3073, !dbg !51
  %422 = lshr i32 %421, 6, !dbg !51
  %423 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %422, !dbg !51
  %424 = getelementptr inbounds float, ptr addrspace(3) %423, i32 %421, !dbg !51
  %425 = load i32, ptr addrspace(3) %424, align 4, !dbg !51
  %426 = or disjoint i32 %289, 3074, !dbg !51
  %427 = lshr i32 %426, 6, !dbg !51
  %428 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %427, !dbg !51
  %429 = getelementptr inbounds float, ptr addrspace(3) %428, i32 %426, !dbg !51
  %430 = load i32, ptr addrspace(3) %429, align 4, !dbg !51
  %431 = or disjoint i32 %289, 3075, !dbg !51
  %432 = lshr i32 %431, 6, !dbg !51
  %433 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %432, !dbg !51
  %434 = getelementptr inbounds float, ptr addrspace(3) %433, i32 %431, !dbg !51
  %435 = load i32, ptr addrspace(3) %434, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %366, i32 %369, i32 %372, i32 %375, ptr addrspace(1) %279, i1 %164) #4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %380, i32 %385, i32 %390, i32 %395, ptr addrspace(1) %281, i1 %163) #4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %400, i32 %405, i32 %410, i32 %415, ptr addrspace(1) %283, i1 %162) #4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %420, i32 %425, i32 %430, i32 %435, ptr addrspace(1) %285, i1 %161) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "covb4k6zcoizqcciwkzxzkjf3xzegn5kuprxexhkrc6guejy5iql.py", directory: "inductor_cache/ov")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 38, scope: !7)
!21 = !DILocation(line: 31, column: 50, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 43, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 55, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 26, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 48, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 49, column: 35, scope: !7)
!47 = !DILocation(line: 49, column: 30, scope: !7)
!48 = !DILocation(line: 49, column: 48, scope: !7)
!49 = !DILocation(line: 49, column: 40, scope: !7)
!50 = !DILocation(line: 49, column: 25, scope: !7)
!51 = !DILocation(line: 49, column: 60, scope: !7)
!52 = !DILocation(line: 49, column: 4, scope: !7)
