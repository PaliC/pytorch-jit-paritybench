; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_convolution_leaky_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 2, !dbg !13
  %13 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %14 = sdiv i32 %.frozen, 256, !dbg !14
  %15 = sdiv i32 %13, 256, !dbg !14
  %16 = srem i32 %14, 256, !dbg !15
  %17 = srem i32 %15, 256, !dbg !15
  %18 = mul i32 %14, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = srem i32 %12, 256, !dbg !16
  %20 = sdiv i32 %11, 65536, !dbg !17
  %21 = sdiv i32 %13, 65536, !dbg !17
  %.lhs.trunc = trunc nsw i32 %20 to i16, !dbg !18
  %22 = srem i16 %.lhs.trunc, 64, !dbg !18
  %.lhs.trunc1 = trunc nsw i32 %21 to i16, !dbg !18
  %23 = srem i16 %.lhs.trunc1, 64, !dbg !18
  %24 = sext i32 %16 to i64, !dbg !19
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = sext i32 %17 to i64, !dbg !19
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !20
  %36 = sext i32 %.decomposed to i64, !dbg !21
  %37 = getelementptr i64, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = sext i32 %19 to i64, !dbg !21
  %39 = getelementptr i64, ptr addrspace(1) %0, i64 %38, !dbg !21
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !22
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !22
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !22
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !22
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !22
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !22
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !22
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !22
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !22
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !22
  %52 = sext i16 %22 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !23
  %54 = sext i16 %23 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !24
  %64 = lshr i64 %28, 56, !dbg !25
  %65 = and i64 %64, 128, !dbg !25
  %66 = add i64 %65, %28, !dbg !25
  %67 = lshr i64 %32, 56, !dbg !25
  %68 = and i64 %67, 128, !dbg !25
  %69 = add i64 %68, %32, !dbg !25
  %70 = lshr i64 %41, 56, !dbg !26
  %71 = and i64 %70, 128, !dbg !26
  %72 = lshr i64 %42, 56, !dbg !26
  %73 = and i64 %72, 128, !dbg !26
  %74 = lshr i64 %44, 56, !dbg !26
  %75 = and i64 %74, 128, !dbg !26
  %76 = lshr i64 %45, 56, !dbg !26
  %77 = and i64 %76, 128, !dbg !26
  %78 = lshr i64 %47, 56, !dbg !26
  %79 = and i64 %78, 128, !dbg !26
  %80 = lshr i64 %48, 56, !dbg !26
  %81 = and i64 %80, 128, !dbg !26
  %82 = lshr i64 %50, 56, !dbg !26
  %83 = and i64 %82, 128, !dbg !26
  %84 = lshr i64 %51, 56, !dbg !26
  %85 = and i64 %84, 128, !dbg !26
  %86 = shl i64 %66, 7, !dbg !27
  %87 = shl i64 %69, 7, !dbg !27
  %88 = shl nsw i32 %20, 14, !dbg !28
  %89 = shl nsw i32 %21, 14, !dbg !28
  %90 = sext i32 %88 to i64, !dbg !29
  %91 = sext i32 %89 to i64, !dbg !29
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !30
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %71, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %86, !dbg !30
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %90, !dbg !30
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !30
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %73, !dbg !30
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %86, !dbg !30
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %90, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !30
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %75, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %86, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %90, !dbg !30
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !30
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %77, !dbg !30
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %86, !dbg !30
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %90, !dbg !30
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !30
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %79, !dbg !30
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %87, !dbg !30
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %91, !dbg !30
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !30
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %81, !dbg !30
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %87, !dbg !30
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %91, !dbg !30
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !30
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %83, !dbg !30
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %87, !dbg !30
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %91, !dbg !30
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !30
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %85, !dbg !30
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %87, !dbg !30
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %91, !dbg !30
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !31
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !31
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !31
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !31
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !31
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !31
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !31
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !31
  %132 = insertelement <8 x i32> poison, i32 %63, i64 0, !dbg !24
  %133 = insertelement <8 x i32> %132, i32 %62, i64 1, !dbg !24
  %134 = insertelement <8 x i32> %133, i32 %61, i64 2, !dbg !24
  %135 = insertelement <8 x i32> %134, i32 %60, i64 3, !dbg !24
  %136 = insertelement <8 x i32> %135, i32 %59, i64 4, !dbg !24
  %137 = insertelement <8 x i32> %136, i32 %58, i64 5, !dbg !24
  %138 = insertelement <8 x i32> %137, i32 %57, i64 6, !dbg !24
  %139 = insertelement <8 x i32> %138, i32 %56, i64 7, !dbg !24
  %140 = bitcast <8 x i32> %139 to <8 x float>, !dbg !24
  %141 = insertelement <8 x i32> poison, i32 %131, i64 0, !dbg !31
  %142 = insertelement <8 x i32> %141, i32 %130, i64 1, !dbg !31
  %143 = insertelement <8 x i32> %142, i32 %129, i64 2, !dbg !31
  %144 = insertelement <8 x i32> %143, i32 %128, i64 3, !dbg !31
  %145 = insertelement <8 x i32> %144, i32 %127, i64 4, !dbg !31
  %146 = insertelement <8 x i32> %145, i32 %126, i64 5, !dbg !31
  %147 = insertelement <8 x i32> %146, i32 %125, i64 6, !dbg !31
  %148 = insertelement <8 x i32> %147, i32 %124, i64 7, !dbg !31
  %149 = bitcast <8 x i32> %148 to <8 x float>, !dbg !31
  %150 = fadd <8 x float> %140, %149, !dbg !32
  %151 = fcmp ogt <8 x float> %150, zeroinitializer, !dbg !33
  %152 = extractelement <8 x float> %150, i64 7, !dbg !34
  %153 = fmul float %152, 0x3FC99999A0000000, !dbg !35
  %154 = extractelement <8 x float> %150, i64 6, !dbg !34
  %155 = fmul float %154, 0x3FC99999A0000000, !dbg !35
  %156 = extractelement <8 x float> %150, i64 5, !dbg !34
  %157 = fmul float %156, 0x3FC99999A0000000, !dbg !35
  %158 = extractelement <8 x float> %150, i64 4, !dbg !34
  %159 = fmul float %158, 0x3FC99999A0000000, !dbg !35
  %160 = extractelement <8 x float> %150, i64 3, !dbg !34
  %161 = fmul float %160, 0x3FC99999A0000000, !dbg !35
  %162 = extractelement <8 x float> %150, i64 2, !dbg !34
  %163 = fmul float %162, 0x3FC99999A0000000, !dbg !35
  %164 = extractelement <8 x float> %150, i64 1, !dbg !34
  %165 = fmul float %164, 0x3FC99999A0000000, !dbg !35
  %166 = extractelement <8 x float> %150, i64 0, !dbg !34
  %167 = fmul float %166, 0x3FC99999A0000000, !dbg !35
  %168 = extractelement <8 x i1> %151, i64 7, !dbg !34
  %169 = select i1 %168, float %152, float %153, !dbg !34
  %170 = extractelement <8 x i1> %151, i64 6, !dbg !34
  %171 = select i1 %170, float %154, float %155, !dbg !34
  %172 = extractelement <8 x i1> %151, i64 5, !dbg !34
  %173 = select i1 %172, float %156, float %157, !dbg !34
  %174 = extractelement <8 x i1> %151, i64 4, !dbg !34
  %175 = select i1 %174, float %158, float %159, !dbg !34
  %176 = extractelement <8 x i1> %151, i64 3, !dbg !34
  %177 = select i1 %176, float %160, float %161, !dbg !34
  %178 = extractelement <8 x i1> %151, i64 2, !dbg !34
  %179 = select i1 %178, float %162, float %163, !dbg !34
  %180 = extractelement <8 x i1> %151, i64 1, !dbg !34
  %181 = select i1 %180, float %164, float %165, !dbg !34
  %182 = extractelement <8 x i1> %151, i64 0, !dbg !34
  %183 = select i1 %182, float %166, float %167, !dbg !34
  %184 = sext i32 %11 to i64, !dbg !36
  %185 = getelementptr float, ptr addrspace(1) %3, i64 %184, !dbg !36
  %186 = sext i32 %13 to i64, !dbg !36
  %187 = getelementptr float, ptr addrspace(1) %3, i64 %186, !dbg !36
  %188 = bitcast float %169 to i32, !dbg !37
  %189 = bitcast float %171 to i32, !dbg !37
  %190 = bitcast float %173 to i32, !dbg !37
  %191 = bitcast float %175 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %189, i32 %190, i32 %191, ptr addrspace(1) %185, i1 true) #1, !dbg !37
  %192 = bitcast float %177 to i32, !dbg !37
  %193 = bitcast float %179 to i32, !dbg !37
  %194 = bitcast float %181 to i32, !dbg !37
  %195 = bitcast float %183 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %193, i32 %194, i32 %195, ptr addrspace(1) %187, i1 true) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwrmq3khqw65ykl5ok7las7xtgpcoflif77c3lw2fubyhuckp6dq.py", directory: "inductor_cache/wr")
!4 = !{ptr @triton_poi_fused__unsafe_index_convolution_leaky_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_convolution_leaky_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_convolution_leaky_relu_12", linkageName: "triton_poi_fused__unsafe_index_convolution_leaky_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 32, scope: !7)
!26 = !DILocation(line: 38, column: 32, scope: !7)
!27 = !DILocation(line: 39, column: 41, scope: !7)
!28 = !DILocation(line: 39, column: 54, scope: !7)
!29 = !DILocation(line: 39, column: 48, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 59, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 35, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 25, scope: !7)
!37 = !DILocation(line: 46, column: 37, scope: !7)
!38 = !DILocation(line: 46, column: 4, scope: !7)
