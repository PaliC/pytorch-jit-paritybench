#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":19:0)
#loc1 = loc(unknown)
#loc13 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":36:25)
#loc33 = loc(callsite(#loc1 at #loc13))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__weight_norm_interface_12(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c3072_i32 = arith.constant 3072 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<3072> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc2)
    %2 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc3)
    %3 = scf.for %arg5 = %c0_i32 to %c3072_i32 step %c2048_i32 iter_args(%arg6 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %18 = tt.splat %arg5 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc5)
      %19 = arith.addi %18, %1 : tensor<1x2048xi32, #blocked> loc(#loc5)
      %20 = arith.cmpi slt, %19, %cst_0 : tensor<1x2048xi32, #blocked> loc(#loc6)
      %21 = tt.addptr %2, %19 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc3)
      %22 = tt.load %21, %20, %cst evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc7)
      %23 = arith.mulf %22, %22 : tensor<1x2048xf32, #blocked> loc(#loc8)
      %24 = arith.addf %arg6, %23 : tensor<1x2048xf32, #blocked> loc(#loc9)
      %25 = arith.select %20, %24, %arg6 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc10)
      scf.yield %25 : tensor<1x2048xf32, #blocked> loc(#loc11)
    } loc(#loc4)
    %4 = "tt.reduce"(%3) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc13)), %arg6: f32 loc(callsite(#loc1 at #loc13))):
      %18 = arith.addf %arg5, %arg6 : f32 loc(#loc35)
      tt.reduce.return %18 : f32 loc(#loc32)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc32)
    %5 = triton_gpu.convert_layout %4 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc15)
    %6 = tt.expand_dims %5 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc16)
    %7 = tt.expand_dims %4 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc16)
    %8 = tt.extern_elementwise %6 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc15)
    %9 = tt.extern_elementwise %7 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc15)
    gpu.barrier loc(#loc17)
    %10 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc18)
    %11 = tt.splat %10 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc19)
    tt.store %11, %8 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc19)
    %12 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc20)
    %13 = tt.load %12 : !tt.ptr<f32> loc(#loc21)
    %14 = tt.splat %13 : f32 -> tensor<1x1xf32, #blocked> loc(#loc22)
    %15 = arith.divf %14, %9 : tensor<1x1xf32, #blocked> loc(#loc22)
    %16 = tt.broadcast %15 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc22)
    %17 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc23)
    scf.for %arg5 = %c0_i32 to %c3072_i32 step %c2048_i32  : i32 {
      %18 = tt.splat %arg5 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc25)
      %19 = arith.addi %18, %1 : tensor<1x2048xi32, #blocked> loc(#loc25)
      %20 = arith.cmpi slt, %19, %cst_0 : tensor<1x2048xi32, #blocked> loc(#loc26)
      %21 = tt.addptr %2, %19 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc27)
      %22 = tt.load %21, %20, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc28)
      %23 = arith.mulf %22, %16 : tensor<1x2048xf32, #blocked> loc(#loc29)
      %24 = tt.addptr %17, %19 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc23)
      tt.store %24, %23, %20 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc30)
    } loc(#loc24)
    tt.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":25:33)
#loc3 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":31:34)
#loc4 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":27:36)
#loc5 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":28:27)
#loc6 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":29:25)
#loc7 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":31:39)
#loc8 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":32:22)
#loc9 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":34:23)
#loc10 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":35:38)
#loc11 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":35:8)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":37:26)
#loc16 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":36:28)
#loc17 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":38:4)
#loc18 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":39:28)
#loc19 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":39:70)
#loc20 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":40:30)
#loc21 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":40:19)
#loc22 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":47:22)
#loc23 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":49:29)
#loc24 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":42:36)
#loc25 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":43:27)
#loc26 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":44:25)
#loc27 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":46:34)
#loc28 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":46:39)
#loc29 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":48:23)
#loc30 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":49:76)
#loc31 = loc("inductor_cache/iv/civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py":42:4)
#loc32 = loc(callsite(#loc12 at #loc13))
#loc34 = loc(callsite(#loc14 at #loc12))
#loc35 = loc(callsite(#loc34 at #loc13))
