; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__weight_norm_interface_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 31, !dbg !10
  %8 = shl i32 %6, 2, !dbg !10
  %9 = and i32 %8, 2044, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !12
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %11, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !13
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !13
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !13
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !13
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !13
  %17 = bitcast i32 %15 to float, !dbg !13
  %18 = bitcast i32 %16 to float, !dbg !13
  %19 = fmul float %17, %17, !dbg !14
  %20 = fmul float %18, %18, !dbg !14
  %21 = or disjoint i64 %10, 2048, !dbg !15
  %22 = icmp samesign ult i64 %21, 3072, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !12
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !13
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !13
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !13
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !13
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !13
  %29 = bitcast i32 %27 to float, !dbg !13
  %30 = bitcast i32 %28 to float, !dbg !13
  %31 = fmul float %29, %29, !dbg !14
  %32 = fmul float %30, %30, !dbg !14
  %33 = fadd float %19, %31, !dbg !17
  %34 = fadd float %20, %32, !dbg !17
  %35 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !13
  %36 = insertelement <2 x i32> %35, i32 %14, i64 1, !dbg !13
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !13
  %38 = fmul <2 x float> %37, %37, !dbg !14
  %39 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !13
  %40 = insertelement <2 x i32> %39, i32 %26, i64 1, !dbg !13
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !13
  %42 = fmul <2 x float> %41, %41, !dbg !14
  %43 = fadd <2 x float> %38, %42, !dbg !17
  %44 = insertelement <2 x i1> poison, i1 %22, i64 0, !dbg !18
  %45 = shufflevector <2 x i1> %44, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !18
  %46 = select <2 x i1> %45, <2 x float> %43, <2 x float> %38, !dbg !18
  %47 = select i1 %22, float %33, float %19, !dbg !18
  %48 = select i1 %22, float %34, float %20, !dbg !18
  %49 = lshr i32 %6, 5, !dbg !10
  %shift = shufflevector <2 x float> %46, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %50 = fadd <2 x float> %46, %shift, !dbg !19
  %51 = extractelement <2 x float> %50, i64 0, !dbg !19
  %52 = fadd float %47, %51, !dbg !19
  %53 = fadd float %48, %52, !dbg !19
  %54 = bitcast float %53 to i32, !dbg !24
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 16, i32 31), !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = fadd float %53, %56, !dbg !19
  %58 = bitcast float %57 to i32, !dbg !24
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 8, i32 31), !dbg !24
  %60 = bitcast i32 %59 to float, !dbg !24
  %61 = fadd float %57, %60, !dbg !19
  %62 = bitcast float %61 to i32, !dbg !24
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 4, i32 31), !dbg !24
  %64 = bitcast i32 %63 to float, !dbg !24
  %65 = fadd float %61, %64, !dbg !19
  %66 = bitcast float %65 to i32, !dbg !24
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !24
  %68 = bitcast i32 %67 to float, !dbg !24
  %69 = fadd float %65, %68, !dbg !19
  %70 = bitcast float %69 to i32, !dbg !24
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !24
  %72 = bitcast i32 %71 to float, !dbg !24
  %73 = fadd float %69, %72, !dbg !19
  %74 = icmp eq i32 %7, 0, !dbg !24
  %75 = and i32 %49, 15, !dbg !24
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75, !dbg !24
  %77 = bitcast float %73 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 %74) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %78 = icmp slt i32 %6, 16, !dbg !24
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !24
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %78) #5, !dbg !24
  %81 = bitcast i32 %80 to float, !dbg !24
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !24
  %83 = bitcast i32 %82 to float, !dbg !24
  %84 = fadd float %81, %83, !dbg !19
  %85 = bitcast float %84 to i32, !dbg !24
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !24
  %87 = bitcast i32 %86 to float, !dbg !24
  %88 = fadd float %84, %87, !dbg !19
  %89 = bitcast float %88 to i32, !dbg !24
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !24
  %91 = bitcast i32 %90 to float, !dbg !24
  %92 = fadd float %88, %91, !dbg !19
  %93 = bitcast float %92 to i32, !dbg !24
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !24
  %95 = bitcast i32 %94 to float, !dbg !24
  %96 = fadd float %92, %95, !dbg !19
  %97 = and i32 %6, 15, !dbg !24
  %98 = icmp eq i32 %97, 0, !dbg !24
  %99 = and i1 %78, %98, !dbg !24
  %100 = bitcast float %96 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %100, i1 %99) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %101 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %.not.i = icmp eq i32 %102, 0, !dbg !25
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %.not1.i = icmp eq i32 %103, 0, !dbg !25
  br i1 %.not.i, label %109, label %104, !dbg !25

104:                                              ; preds = %5
  br i1 %.not1.i, label %107, label %105, !dbg !25

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

109:                                              ; preds = %5
  br i1 %.not1.i, label %112, label %110, !dbg !25

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #5, !dbg !25
  br label %__nv_sqrtf.exit, !dbg !25

__nv_sqrtf.exit:                                  ; preds = %105, %107, %110, %112
  %.0.i = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !25
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !25
  %.not.i17 = icmp eq i32 %120, 0, !dbg !25
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !25
  %.not1.i20 = icmp eq i32 %121, 0, !dbg !25
  br i1 %.not.i17, label %127, label %122, !dbg !25

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %125, label %123, !dbg !25

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #5, !dbg !25
  br label %__nv_sqrtf.exit21, !dbg !25

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #5, !dbg !25
  br label %__nv_sqrtf.exit21, !dbg !25

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %130, label %128, !dbg !25

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #5, !dbg !25
  br label %__nv_sqrtf.exit21, !dbg !25

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #5, !dbg !25
  br label %__nv_sqrtf.exit21, !dbg !25

__nv_sqrtf.exit21:                                ; preds = %123, %125, %128, %130
  %.0.i19 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %urem = and i32 %6, 511, !dbg !27
  %132 = icmp eq i32 %urem, 0, !dbg !27
  %133 = bitcast float %.0.i to i32, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %0, i1 %132) #5, !dbg !27
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #5, !dbg !28
  %135 = bitcast i32 %134 to float, !dbg !28
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %.0.i19) #5, !dbg !29
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %11, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !30
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !30
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !30
  %142 = bitcast i32 %138 to float, !dbg !30
  %143 = bitcast i32 %139 to float, !dbg !30
  %144 = bitcast i32 %140 to float, !dbg !30
  %145 = bitcast i32 %141 to float, !dbg !30
  %146 = fmul float %136, %142, !dbg !31
  %147 = fmul float %136, %143, !dbg !31
  %148 = fmul float %136, %144, !dbg !31
  %149 = fmul float %136, %145, !dbg !31
  %150 = getelementptr float, ptr addrspace(1) %3, i64 %10, !dbg !32
  %151 = bitcast float %146 to i32, !dbg !33
  %152 = bitcast float %147 to i32, !dbg !33
  %153 = bitcast float %148 to i32, !dbg !33
  %154 = bitcast float %149 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %151, i32 %152, i32 %153, i32 %154, ptr addrspace(1) %150, i1 true) #5, !dbg !33
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !30
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !30
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !30
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !30
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !30
  %160 = bitcast i32 %156 to float, !dbg !30
  %161 = bitcast i32 %157 to float, !dbg !30
  %162 = bitcast i32 %158 to float, !dbg !30
  %163 = bitcast i32 %159 to float, !dbg !30
  %164 = fmul float %136, %160, !dbg !31
  %165 = fmul float %136, %161, !dbg !31
  %166 = fmul float %136, %162, !dbg !31
  %167 = fmul float %136, %163, !dbg !31
  %168 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !32
  %169 = bitcast float %164 to i32, !dbg !33
  %170 = bitcast float %165 to i32, !dbg !33
  %171 = bitcast float %166 to i32, !dbg !33
  %172 = bitcast float %167 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %169, i32 %170, i32 %171, i32 %172, ptr addrspace(1) %168, i1 %22) #5, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "civwvzk45cbyeur5erorraw5fhtim4iuuerltntsusmybsogkbxd.py", directory: "inductor_cache/iv")
!4 = !{ptr @triton_red_fused__weight_norm_interface_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__weight_norm_interface_12, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__weight_norm_interface_12", linkageName: "triton_red_fused__weight_norm_interface_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 27, column: 36, scope: !7)
!12 = !DILocation(line: 31, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 22, scope: !7)
!15 = !DILocation(line: 28, column: 27, scope: !7)
!16 = !DILocation(line: 29, column: 25, scope: !7)
!17 = !DILocation(line: 34, column: 23, scope: !7)
!18 = !DILocation(line: 35, column: 38, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 36, column: 25, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 37, column: 26, scope: !7)
!26 = !DILocation(line: 38, column: 4, scope: !7)
!27 = !DILocation(line: 39, column: 70, scope: !7)
!28 = !DILocation(line: 40, column: 19, scope: !7)
!29 = !DILocation(line: 47, column: 22, scope: !7)
!30 = !DILocation(line: 46, column: 39, scope: !7)
!31 = !DILocation(line: 48, column: 23, scope: !7)
!32 = !DILocation(line: 49, column: 29, scope: !7)
!33 = !DILocation(line: 49, column: 76, scope: !7)
!34 = !DILocation(line: 42, column: 4, scope: !7)
