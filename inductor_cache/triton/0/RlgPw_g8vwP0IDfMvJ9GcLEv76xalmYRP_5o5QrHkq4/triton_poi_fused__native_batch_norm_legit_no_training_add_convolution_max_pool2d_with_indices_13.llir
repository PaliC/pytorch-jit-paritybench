; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 1, !dbg !12
  %16 = and i32 %15, 127, !dbg !12
  %17 = and i32 %14, 1, !dbg !12
  %18 = or disjoint i32 %13, %16, !dbg !13
  %19 = or disjoint i32 %18, 128, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = shl i32 %20, 4, !dbg !15
  %22 = shl nuw nsw i32 %17, 3, !dbg !16
  %23 = or disjoint i32 %21, %22, !dbg !17
  %24 = or disjoint i32 %23, 4, !dbg !17
  %25 = icmp slt i32 %23, 728, !dbg !18
  %26 = sdiv i32 %18, 16, !dbg !19
  %27 = sdiv i32 %19, 16, !dbg !19
  %28 = srem i32 %26, 16, !dbg !20
  %29 = mul i32 %18, 728, !dbg !21
  %30 = mul i32 %19, 728, !dbg !21
  %31 = add i32 %23, %29, !dbg !22
  %32 = add i32 %29, %24, !dbg !22
  %33 = add i32 %23, %30, !dbg !22
  %34 = add i32 %30, %24, !dbg !22
  %35 = sext i32 %31 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = sext i32 %32 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = sext i32 %33 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = sext i32 %34 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %25) #4, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %25) #4, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %25) #4, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %25) #4, !dbg !24
  %47 = sext i32 %23 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !25
  %49 = sext i32 %24 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %25) #4, !dbg !26
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %25) #4, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %25) #4, !dbg !28
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %25) #4, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !29
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %25) #4, !dbg !30
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !30
  %64 = bitcast i32 %60 to float, !dbg !30
  %65 = bitcast i32 %61 to float, !dbg !30
  %66 = bitcast i32 %62 to float, !dbg !30
  %67 = bitcast i32 %63 to float, !dbg !30
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %25) #4, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !30
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !30
  %73 = bitcast i32 %69 to float, !dbg !30
  %74 = bitcast i32 %70 to float, !dbg !30
  %75 = bitcast i32 %71 to float, !dbg !30
  %76 = bitcast i32 %72 to float, !dbg !30
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !31
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %49, !dbg !31
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %25) #4, !dbg !32
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %25) #4, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %6, i64 %49, !dbg !33
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %25) #4, !dbg !34
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %25) #4, !dbg !34
  %85 = icmp sgt i32 %28, 0, !dbg !35
  %86 = add i32 %23, -12376, !dbg !36
  %87 = add i32 %23, -12372, !dbg !36
  %88 = add i32 %86, %29, !dbg !37
  %89 = add i32 %29, %87, !dbg !37
  %90 = add i32 %86, %30, !dbg !37
  %91 = add i32 %87, %30, !dbg !37
  %92 = sext i32 %88 to i64, !dbg !38
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !38
  %94 = sext i32 %89 to i64, !dbg !38
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !38
  %96 = sext i32 %90 to i64, !dbg !38
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !38
  %98 = sext i32 %91 to i64, !dbg !38
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !38
  %100 = add i32 %23, -11648, !dbg !39
  %101 = add i32 %23, -11644, !dbg !39
  %102 = add i32 %100, %29, !dbg !40
  %103 = add i32 %29, %101, !dbg !40
  %104 = add i32 %100, %30, !dbg !40
  %105 = add i32 %101, %30, !dbg !40
  %106 = sext i32 %102 to i64, !dbg !41
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !41
  %108 = sext i32 %103 to i64, !dbg !41
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !41
  %110 = sext i32 %104 to i64, !dbg !41
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !41
  %112 = sext i32 %105 to i64, !dbg !41
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !41
  %114 = add i32 %23, -10920, !dbg !42
  %115 = add i32 %23, -10916, !dbg !42
  %116 = add i32 %114, %29, !dbg !43
  %117 = add i32 %29, %115, !dbg !43
  %118 = add i32 %114, %30, !dbg !43
  %119 = add i32 %115, %30, !dbg !43
  %120 = sext i32 %116 to i64, !dbg !44
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !44
  %122 = sext i32 %117 to i64, !dbg !44
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !44
  %124 = sext i32 %118 to i64, !dbg !44
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !44
  %126 = sext i32 %119 to i64, !dbg !44
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !44
  %128 = icmp sgt i32 %28, -1, !dbg !45
  %129 = add i32 %23, -728, !dbg !46
  %130 = add i32 %23, -724, !dbg !46
  %131 = add i32 %129, %29, !dbg !47
  %132 = add i32 %29, %130, !dbg !47
  %133 = add i32 %129, %30, !dbg !47
  %134 = add i32 %130, %30, !dbg !47
  %135 = sext i32 %131 to i64, !dbg !48
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !48
  %137 = sext i32 %132 to i64, !dbg !48
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !48
  %139 = sext i32 %133 to i64, !dbg !48
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !48
  %141 = sext i32 %134 to i64, !dbg !48
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !48
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !49
  %144 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !49
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !49
  %146 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !49
  %147 = add i32 %23, 728, !dbg !50
  %148 = add i32 %23, 732, !dbg !50
  %149 = add i32 %147, %29, !dbg !51
  %150 = add i32 %29, %148, !dbg !51
  %151 = add i32 %147, %30, !dbg !51
  %152 = add i32 %148, %30, !dbg !51
  %153 = sext i32 %149 to i64, !dbg !52
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !52
  %155 = sext i32 %150 to i64, !dbg !52
  %156 = getelementptr float, ptr addrspace(1) %1, i64 %155, !dbg !52
  %157 = sext i32 %151 to i64, !dbg !52
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %157, !dbg !52
  %159 = sext i32 %152 to i64, !dbg !52
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %159, !dbg !52
  %161 = add nsw i32 %28, 1, !dbg !53
  %162 = icmp ult i32 %161, 16, !dbg !53
  %163 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !20
  %164 = insertelement <2 x i32> %163, i32 %18, i64 1, !dbg !20
  %165 = srem <2 x i32> %164, splat (i32 16), !dbg !20
  %166 = extractelement <2 x i32> %165, i64 0, !dbg !54
  %167 = icmp sgt i32 %166, 0, !dbg !35
  %168 = extractelement <2 x i32> %165, i64 1, !dbg !54
  %169 = icmp sgt i32 %168, 0, !dbg !55
  %170 = and i1 %169, %85, !dbg !56
  %171 = and i1 %169, %167, !dbg !56
  %172 = and i1 %25, %170, !dbg !57
  %173 = and i1 %171, %25, !dbg !57
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172) #4, !dbg !58
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172, i32 -8388608, i1 %172) #4, !dbg !58
  %176 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %97, i1 %173, i32 -8388608, i1 %173, i32 -8388608, i1 %173, i32 -8388608, i1 %173, i32 -8388608, i1 %173) #4, !dbg !58
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %173, i32 -8388608, i1 %173, i32 -8388608, i1 %173, i32 -8388608, i1 %173, i32 -8388608, i1 %173) #4, !dbg !58
  %178 = icmp sgt i32 %168, -1, !dbg !59
  %179 = and i1 %178, %85, !dbg !60
  %180 = and i1 %178, %167, !dbg !60
  %181 = and i1 %25, %179, !dbg !61
  %182 = and i1 %180, %25, !dbg !61
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %181, i32 -8388608, i1 %181, i32 -8388608, i1 %181, i32 -8388608, i1 %181, i32 -8388608, i1 %181) #4, !dbg !62
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %181, i32 -8388608, i1 %181, i32 -8388608, i1 %181, i32 -8388608, i1 %181, i32 -8388608, i1 %181) #4, !dbg !62
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182) #4, !dbg !62
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182) #4, !dbg !62
  %187 = add nsw <2 x i32> %165, splat (i32 1), !dbg !53
  %188 = extractelement <2 x i32> %187, i64 1, !dbg !63
  %189 = icmp ult i32 %188, 16, !dbg !64
  %190 = and i1 %85, %189, !dbg !65
  %191 = and i1 %167, %189, !dbg !65
  %192 = and i1 %25, %190, !dbg !66
  %193 = and i1 %191, %25, !dbg !66
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %121, i1 %192, i32 -8388608, i1 %192, i32 -8388608, i1 %192, i32 -8388608, i1 %192, i32 -8388608, i1 %192) #4, !dbg !67
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %123, i1 %192, i32 -8388608, i1 %192, i32 -8388608, i1 %192, i32 -8388608, i1 %192, i32 -8388608, i1 %192) #4, !dbg !67
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %193, i32 -8388608, i1 %193, i32 -8388608, i1 %193, i32 -8388608, i1 %193, i32 -8388608, i1 %193) #4, !dbg !67
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %193, i32 -8388608, i1 %193, i32 -8388608, i1 %193, i32 -8388608, i1 %193, i32 -8388608, i1 %193) #4, !dbg !67
  %198 = icmp sgt i32 %166, -1, !dbg !45
  %199 = and i1 %169, %128, !dbg !68
  %200 = and i1 %169, %198, !dbg !68
  %201 = and i1 %25, %199, !dbg !69
  %202 = and i1 %200, %25, !dbg !69
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %136, i1 %201, i32 -8388608, i1 %201, i32 -8388608, i1 %201, i32 -8388608, i1 %201, i32 -8388608, i1 %201) #4, !dbg !70
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 %201, i32 -8388608, i1 %201, i32 -8388608, i1 %201, i32 -8388608, i1 %201, i32 -8388608, i1 %201) #4, !dbg !70
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #4, !dbg !70
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %142, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202, i32 -8388608, i1 %202) #4, !dbg !70
  %207 = or i32 %28, %168, !dbg !54
  %208 = icmp sgt i32 %207, -1, !dbg !54
  %209 = or i32 %166, %168, !dbg !54
  %210 = icmp sgt i32 %209, -1, !dbg !54
  %211 = and i1 %25, %208, !dbg !71
  %212 = and i1 %210, %25, !dbg !71
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211) #4, !dbg !72
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211, i32 -8388608, i1 %211) #4, !dbg !72
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %145, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212) #4, !dbg !72
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212) #4, !dbg !72
  %217 = and i1 %128, %189, !dbg !73
  %218 = and i1 %198, %189, !dbg !73
  %219 = and i1 %25, %217, !dbg !74
  %220 = and i1 %218, %25, !dbg !74
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %154, i1 %219, i32 -8388608, i1 %219, i32 -8388608, i1 %219, i32 -8388608, i1 %219, i32 -8388608, i1 %219) #4, !dbg !75
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %156, i1 %219, i32 -8388608, i1 %219, i32 -8388608, i1 %219, i32 -8388608, i1 %219, i32 -8388608, i1 %219) #4, !dbg !75
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %220, i32 -8388608, i1 %220, i32 -8388608, i1 %220, i32 -8388608, i1 %220, i32 -8388608, i1 %220) #4, !dbg !75
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %220, i32 -8388608, i1 %220, i32 -8388608, i1 %220, i32 -8388608, i1 %220, i32 -8388608, i1 %220) #4, !dbg !75
  %225 = extractelement <2 x i32> %187, i64 0, !dbg !63
  %226 = icmp ult i32 %225, 16, !dbg !53
  %227 = and i1 %169, %162, !dbg !76
  %228 = and i1 %169, %226, !dbg !76
  %229 = add i32 %23, 10920, !dbg !77
  %230 = add i32 %23, 10924, !dbg !77
  %231 = add i32 %229, %29, !dbg !78
  %232 = add i32 %29, %230, !dbg !78
  %233 = add i32 %229, %30, !dbg !78
  %234 = add i32 %230, %30, !dbg !78
  %235 = sext i32 %231 to i64, !dbg !79
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !79
  %237 = sext i32 %232 to i64, !dbg !79
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !79
  %239 = sext i32 %233 to i64, !dbg !79
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !79
  %241 = sext i32 %234 to i64, !dbg !79
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !79
  %243 = and i1 %25, %227, !dbg !80
  %244 = and i1 %228, %25, !dbg !80
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %236, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243) #4, !dbg !81
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %238, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243) #4, !dbg !81
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %240, i1 %244, i32 -8388608, i1 %244, i32 -8388608, i1 %244, i32 -8388608, i1 %244, i32 -8388608, i1 %244) #4, !dbg !81
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %242, i1 %244, i32 -8388608, i1 %244, i32 -8388608, i1 %244, i32 -8388608, i1 %244, i32 -8388608, i1 %244) #4, !dbg !81
  %249 = and i1 %178, %162, !dbg !82
  %250 = and i1 %178, %226, !dbg !82
  %251 = add i32 %23, 11648, !dbg !83
  %252 = add i32 %23, 11652, !dbg !83
  %253 = add i32 %251, %29, !dbg !84
  %254 = add i32 %29, %252, !dbg !84
  %255 = add i32 %251, %30, !dbg !84
  %256 = add i32 %252, %30, !dbg !84
  %257 = sext i32 %253 to i64, !dbg !85
  %258 = getelementptr float, ptr addrspace(1) %1, i64 %257, !dbg !85
  %259 = sext i32 %254 to i64, !dbg !85
  %260 = getelementptr float, ptr addrspace(1) %1, i64 %259, !dbg !85
  %261 = sext i32 %255 to i64, !dbg !85
  %262 = getelementptr float, ptr addrspace(1) %1, i64 %261, !dbg !85
  %263 = sext i32 %256 to i64, !dbg !85
  %264 = getelementptr float, ptr addrspace(1) %1, i64 %263, !dbg !85
  %265 = and i1 %25, %249, !dbg !86
  %266 = and i1 %250, %25, !dbg !86
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %258, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265) #4, !dbg !87
  %268 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %260, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265) #4, !dbg !87
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %262, i1 %266, i32 -8388608, i1 %266, i32 -8388608, i1 %266, i32 -8388608, i1 %266, i32 -8388608, i1 %266) #4, !dbg !87
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %264, i1 %266, i32 -8388608, i1 %266, i32 -8388608, i1 %266, i32 -8388608, i1 %266, i32 -8388608, i1 %266) #4, !dbg !87
  %271 = or i32 %161, %188, !dbg !63
  %272 = icmp ult i32 %271, 16, !dbg !63
  %273 = or i32 %225, %188, !dbg !63
  %274 = icmp ult i32 %273, 16, !dbg !63
  %275 = add i32 %23, 12376, !dbg !88
  %276 = add i32 %23, 12380, !dbg !88
  %277 = add i32 %275, %29, !dbg !89
  %278 = add i32 %29, %276, !dbg !89
  %279 = add i32 %275, %30, !dbg !89
  %280 = add i32 %276, %30, !dbg !89
  %281 = sext i32 %277 to i64, !dbg !90
  %282 = getelementptr float, ptr addrspace(1) %1, i64 %281, !dbg !90
  %283 = sext i32 %278 to i64, !dbg !90
  %284 = getelementptr float, ptr addrspace(1) %1, i64 %283, !dbg !90
  %285 = sext i32 %279 to i64, !dbg !90
  %286 = getelementptr float, ptr addrspace(1) %1, i64 %285, !dbg !90
  %287 = sext i32 %280 to i64, !dbg !90
  %288 = getelementptr float, ptr addrspace(1) %1, i64 %287, !dbg !90
  %289 = and i1 %25, %272, !dbg !91
  %290 = and i1 %274, %25, !dbg !91
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %282, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289) #4, !dbg !92
  %292 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %284, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289) #4, !dbg !92
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %286, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290) #4, !dbg !92
  %294 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %288, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290) #4, !dbg !92
  %295 = fadd float %64, 0x3EE4F8B580000000, !dbg !93
  %296 = fadd float %65, 0x3EE4F8B580000000, !dbg !93
  %297 = fadd float %66, 0x3EE4F8B580000000, !dbg !93
  %298 = fadd float %67, 0x3EE4F8B580000000, !dbg !93
  %299 = fadd float %73, 0x3EE4F8B580000000, !dbg !93
  %300 = fadd float %74, 0x3EE4F8B580000000, !dbg !93
  %301 = fadd float %75, 0x3EE4F8B580000000, !dbg !93
  %302 = fadd float %76, 0x3EE4F8B580000000, !dbg !93
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %.not.i = icmp eq i32 %303, 0, !dbg !94
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !94
  %.not1.i = icmp eq i32 %304, 0, !dbg !94
  br i1 %.not.i, label %310, label %305, !dbg !94

305:                                              ; preds = %11
  br i1 %.not1.i, label %308, label %306, !dbg !94

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %295) #4, !dbg !94
  br label %__nv_sqrtf.exit, !dbg !94

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %295) #4, !dbg !94
  br label %__nv_sqrtf.exit, !dbg !94

310:                                              ; preds = %11
  br i1 %.not1.i, label %313, label %311, !dbg !94

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.f(float %295) #4, !dbg !94
  br label %__nv_sqrtf.exit, !dbg !94

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.f(float %295) #4, !dbg !94
  br label %__nv_sqrtf.exit, !dbg !94

__nv_sqrtf.exit:                                  ; preds = %306, %308, %311, %313
  %.0.i = phi float [ %307, %306 ], [ %309, %308 ], [ %312, %311 ], [ %314, %313 ], !dbg !94
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %.not.i38 = icmp eq i32 %315, 0, !dbg !94
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !94
  %.not1.i41 = icmp eq i32 %316, 0, !dbg !94
  br i1 %.not.i38, label %322, label %317, !dbg !94

317:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i41, label %320, label %318, !dbg !94

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %296) #4, !dbg !94
  br label %__nv_sqrtf.exit42, !dbg !94

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %296) #4, !dbg !94
  br label %__nv_sqrtf.exit42, !dbg !94

322:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i41, label %325, label %323, !dbg !94

323:                                              ; preds = %322
  %324 = tail call float @llvm.nvvm.sqrt.rn.f(float %296) #4, !dbg !94
  br label %__nv_sqrtf.exit42, !dbg !94

325:                                              ; preds = %322
  %326 = tail call float @llvm.nvvm.sqrt.approx.f(float %296) #4, !dbg !94
  br label %__nv_sqrtf.exit42, !dbg !94

__nv_sqrtf.exit42:                                ; preds = %318, %320, %323, %325
  %.0.i40 = phi float [ %319, %318 ], [ %321, %320 ], [ %324, %323 ], [ %326, %325 ], !dbg !94
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %.not.i43 = icmp eq i32 %327, 0, !dbg !94
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !94
  %.not1.i46 = icmp eq i32 %328, 0, !dbg !94
  br i1 %.not.i43, label %334, label %329, !dbg !94

329:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %332, label %330, !dbg !94

330:                                              ; preds = %329
  %331 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %297) #4, !dbg !94
  br label %__nv_sqrtf.exit47, !dbg !94

332:                                              ; preds = %329
  %333 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %297) #4, !dbg !94
  br label %__nv_sqrtf.exit47, !dbg !94

334:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %337, label %335, !dbg !94

335:                                              ; preds = %334
  %336 = tail call float @llvm.nvvm.sqrt.rn.f(float %297) #4, !dbg !94
  br label %__nv_sqrtf.exit47, !dbg !94

337:                                              ; preds = %334
  %338 = tail call float @llvm.nvvm.sqrt.approx.f(float %297) #4, !dbg !94
  br label %__nv_sqrtf.exit47, !dbg !94

__nv_sqrtf.exit47:                                ; preds = %330, %332, %335, %337
  %.0.i45 = phi float [ %331, %330 ], [ %333, %332 ], [ %336, %335 ], [ %338, %337 ], !dbg !94
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %.not.i48 = icmp eq i32 %339, 0, !dbg !94
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !94
  %.not1.i51 = icmp eq i32 %340, 0, !dbg !94
  br i1 %.not.i48, label %346, label %341, !dbg !94

341:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %344, label %342, !dbg !94

342:                                              ; preds = %341
  %343 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %298) #4, !dbg !94
  br label %__nv_sqrtf.exit52, !dbg !94

344:                                              ; preds = %341
  %345 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %298) #4, !dbg !94
  br label %__nv_sqrtf.exit52, !dbg !94

346:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %349, label %347, !dbg !94

347:                                              ; preds = %346
  %348 = tail call float @llvm.nvvm.sqrt.rn.f(float %298) #4, !dbg !94
  br label %__nv_sqrtf.exit52, !dbg !94

349:                                              ; preds = %346
  %350 = tail call float @llvm.nvvm.sqrt.approx.f(float %298) #4, !dbg !94
  br label %__nv_sqrtf.exit52, !dbg !94

__nv_sqrtf.exit52:                                ; preds = %342, %344, %347, %349
  %.0.i50 = phi float [ %343, %342 ], [ %345, %344 ], [ %348, %347 ], [ %350, %349 ], !dbg !94
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %.not.i53 = icmp eq i32 %351, 0, !dbg !94
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !94
  %.not1.i56 = icmp eq i32 %352, 0, !dbg !94
  br i1 %.not.i53, label %358, label %353, !dbg !94

353:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %356, label %354, !dbg !94

354:                                              ; preds = %353
  %355 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %299) #4, !dbg !94
  br label %__nv_sqrtf.exit57, !dbg !94

356:                                              ; preds = %353
  %357 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %299) #4, !dbg !94
  br label %__nv_sqrtf.exit57, !dbg !94

358:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %361, label %359, !dbg !94

359:                                              ; preds = %358
  %360 = tail call float @llvm.nvvm.sqrt.rn.f(float %299) #4, !dbg !94
  br label %__nv_sqrtf.exit57, !dbg !94

361:                                              ; preds = %358
  %362 = tail call float @llvm.nvvm.sqrt.approx.f(float %299) #4, !dbg !94
  br label %__nv_sqrtf.exit57, !dbg !94

__nv_sqrtf.exit57:                                ; preds = %354, %356, %359, %361
  %.0.i55 = phi float [ %355, %354 ], [ %357, %356 ], [ %360, %359 ], [ %362, %361 ], !dbg !94
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %.not.i58 = icmp eq i32 %363, 0, !dbg !94
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !94
  %.not1.i61 = icmp eq i32 %364, 0, !dbg !94
  br i1 %.not.i58, label %370, label %365, !dbg !94

365:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %368, label %366, !dbg !94

366:                                              ; preds = %365
  %367 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %300) #4, !dbg !94
  br label %__nv_sqrtf.exit62, !dbg !94

368:                                              ; preds = %365
  %369 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %300) #4, !dbg !94
  br label %__nv_sqrtf.exit62, !dbg !94

370:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %373, label %371, !dbg !94

371:                                              ; preds = %370
  %372 = tail call float @llvm.nvvm.sqrt.rn.f(float %300) #4, !dbg !94
  br label %__nv_sqrtf.exit62, !dbg !94

373:                                              ; preds = %370
  %374 = tail call float @llvm.nvvm.sqrt.approx.f(float %300) #4, !dbg !94
  br label %__nv_sqrtf.exit62, !dbg !94

__nv_sqrtf.exit62:                                ; preds = %366, %368, %371, %373
  %.0.i60 = phi float [ %367, %366 ], [ %369, %368 ], [ %372, %371 ], [ %374, %373 ], !dbg !94
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %.not.i63 = icmp eq i32 %375, 0, !dbg !94
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !94
  %.not1.i66 = icmp eq i32 %376, 0, !dbg !94
  br i1 %.not.i63, label %382, label %377, !dbg !94

377:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %380, label %378, !dbg !94

378:                                              ; preds = %377
  %379 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %301) #4, !dbg !94
  br label %__nv_sqrtf.exit67, !dbg !94

380:                                              ; preds = %377
  %381 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %301) #4, !dbg !94
  br label %__nv_sqrtf.exit67, !dbg !94

382:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %385, label %383, !dbg !94

383:                                              ; preds = %382
  %384 = tail call float @llvm.nvvm.sqrt.rn.f(float %301) #4, !dbg !94
  br label %__nv_sqrtf.exit67, !dbg !94

385:                                              ; preds = %382
  %386 = tail call float @llvm.nvvm.sqrt.approx.f(float %301) #4, !dbg !94
  br label %__nv_sqrtf.exit67, !dbg !94

__nv_sqrtf.exit67:                                ; preds = %378, %380, %383, %385
  %.0.i65 = phi float [ %379, %378 ], [ %381, %380 ], [ %384, %383 ], [ %386, %385 ], !dbg !94
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !94
  %.not.i68 = icmp eq i32 %387, 0, !dbg !94
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !94
  %.not1.i71 = icmp eq i32 %388, 0, !dbg !94
  br i1 %.not.i68, label %394, label %389, !dbg !94

389:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %392, label %390, !dbg !94

390:                                              ; preds = %389
  %391 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %302) #4, !dbg !94
  br label %__nv_sqrtf.exit72, !dbg !94

392:                                              ; preds = %389
  %393 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %302) #4, !dbg !94
  br label %__nv_sqrtf.exit72, !dbg !94

394:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %397, label %395, !dbg !94

395:                                              ; preds = %394
  %396 = tail call float @llvm.nvvm.sqrt.rn.f(float %302) #4, !dbg !94
  br label %__nv_sqrtf.exit72, !dbg !94

397:                                              ; preds = %394
  %398 = tail call float @llvm.nvvm.sqrt.approx.f(float %302) #4, !dbg !94
  br label %__nv_sqrtf.exit72, !dbg !94

__nv_sqrtf.exit72:                                ; preds = %390, %392, %395, %397
  %.0.i70 = phi float [ %391, %390 ], [ %393, %392 ], [ %396, %395 ], [ %398, %397 ], !dbg !94
  %399 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %400 = bitcast i32 %399 to float, !dbg !24
  %401 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !26
  %402 = bitcast i32 %401 to float, !dbg !26
  %403 = fadd float %400, %402, !dbg !95
  %404 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !28
  %405 = bitcast i32 %404 to float, !dbg !28
  %406 = fsub float %403, %405, !dbg !96
  %407 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %408 = bitcast i32 %407 to float, !dbg !24
  %409 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !26
  %410 = bitcast i32 %409 to float, !dbg !26
  %411 = fadd float %408, %410, !dbg !95
  %412 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !28
  %413 = bitcast i32 %412 to float, !dbg !28
  %414 = fsub float %411, %413, !dbg !96
  %415 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %416 = bitcast i32 %415 to float, !dbg !24
  %417 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !26
  %418 = bitcast i32 %417 to float, !dbg !26
  %419 = fadd float %416, %418, !dbg !95
  %420 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !28
  %421 = bitcast i32 %420 to float, !dbg !28
  %422 = fsub float %419, %421, !dbg !96
  %423 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %424 = bitcast i32 %423 to float, !dbg !24
  %425 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !26
  %426 = bitcast i32 %425 to float, !dbg !26
  %427 = fadd float %424, %426, !dbg !95
  %428 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !28
  %429 = bitcast i32 %428 to float, !dbg !28
  %430 = fsub float %427, %429, !dbg !96
  %431 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %432 = bitcast i32 %431 to float, !dbg !24
  %433 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !26
  %434 = bitcast i32 %433 to float, !dbg !26
  %435 = fadd float %432, %434, !dbg !95
  %436 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %437 = bitcast i32 %436 to float, !dbg !28
  %438 = fsub float %435, %437, !dbg !96
  %439 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %440 = bitcast i32 %439 to float, !dbg !24
  %441 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !26
  %442 = bitcast i32 %441 to float, !dbg !26
  %443 = fadd float %440, %442, !dbg !95
  %444 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %445 = bitcast i32 %444 to float, !dbg !28
  %446 = fsub float %443, %445, !dbg !96
  %447 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %448 = bitcast i32 %447 to float, !dbg !24
  %449 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !26
  %450 = bitcast i32 %449 to float, !dbg !26
  %451 = fadd float %448, %450, !dbg !95
  %452 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %453 = bitcast i32 %452 to float, !dbg !28
  %454 = fsub float %451, %453, !dbg !96
  %455 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %456 = bitcast i32 %455 to float, !dbg !24
  %457 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !26
  %458 = bitcast i32 %457 to float, !dbg !26
  %459 = fadd float %456, %458, !dbg !95
  %460 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %461 = bitcast i32 %460 to float, !dbg !28
  %462 = fsub float %459, %461, !dbg !96
  %463 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %464 = bitcast i32 %463 to float, !dbg !24
  %465 = fadd float %464, %402, !dbg !95
  %466 = fsub float %465, %405, !dbg !96
  %467 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %468 = bitcast i32 %467 to float, !dbg !24
  %469 = fadd float %468, %410, !dbg !95
  %470 = fsub float %469, %413, !dbg !96
  %471 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %472 = bitcast i32 %471 to float, !dbg !24
  %473 = fadd float %472, %418, !dbg !95
  %474 = fsub float %473, %421, !dbg !96
  %475 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %476 = bitcast i32 %475 to float, !dbg !24
  %477 = fadd float %476, %426, !dbg !95
  %478 = fsub float %477, %429, !dbg !96
  %479 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !24
  %480 = bitcast i32 %479 to float, !dbg !24
  %481 = fadd float %480, %434, !dbg !95
  %482 = fsub float %481, %437, !dbg !96
  %483 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !24
  %484 = bitcast i32 %483 to float, !dbg !24
  %485 = fadd float %484, %442, !dbg !95
  %486 = fsub float %485, %445, !dbg !96
  %487 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !24
  %488 = bitcast i32 %487 to float, !dbg !24
  %489 = fadd float %488, %450, !dbg !95
  %490 = fsub float %489, %453, !dbg !96
  %491 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !24
  %492 = bitcast i32 %491 to float, !dbg !24
  %493 = fadd float %492, %458, !dbg !95
  %494 = fsub float %493, %461, !dbg !96
  %495 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !62
  %496 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !58
  %497 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !67
  %498 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !70
  %499 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !72
  %500 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !75
  %501 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !81
  %502 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !87
  %503 = extractvalue { i32, i32, i32, i32 } %294, 3, !dbg !92
  %504 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !62
  %505 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !58
  %506 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !67
  %507 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !70
  %508 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !72
  %509 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !75
  %510 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !81
  %511 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !87
  %512 = extractvalue { i32, i32, i32, i32 } %294, 2, !dbg !92
  %513 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !62
  %514 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !58
  %515 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !67
  %516 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !70
  %517 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !72
  %518 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !75
  %519 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !81
  %520 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !87
  %521 = extractvalue { i32, i32, i32, i32 } %294, 1, !dbg !92
  %522 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !62
  %523 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !58
  %524 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !67
  %525 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !70
  %526 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !72
  %527 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !75
  %528 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !81
  %529 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !87
  %530 = extractvalue { i32, i32, i32, i32 } %294, 0, !dbg !92
  %531 = insertelement <4 x i32> poison, i32 %522, i64 0, !dbg !62
  %532 = insertelement <4 x i32> %531, i32 %513, i64 1, !dbg !62
  %533 = insertelement <4 x i32> %532, i32 %504, i64 2, !dbg !62
  %534 = insertelement <4 x i32> %533, i32 %495, i64 3, !dbg !62
  %535 = bitcast <4 x i32> %534 to <4 x float>, !dbg !62
  %536 = insertelement <4 x i32> poison, i32 %523, i64 0, !dbg !58
  %537 = insertelement <4 x i32> %536, i32 %514, i64 1, !dbg !58
  %538 = insertelement <4 x i32> %537, i32 %505, i64 2, !dbg !58
  %539 = insertelement <4 x i32> %538, i32 %496, i64 3, !dbg !58
  %540 = bitcast <4 x i32> %539 to <4 x float>, !dbg !58
  %541 = fcmp ogt <4 x float> %535, %540, !dbg !97
  %542 = insertelement <4 x i32> poison, i32 %525, i64 0, !dbg !70
  %543 = insertelement <4 x i32> %542, i32 %516, i64 1, !dbg !70
  %544 = insertelement <4 x i32> %543, i32 %507, i64 2, !dbg !70
  %545 = insertelement <4 x i32> %544, i32 %498, i64 3, !dbg !70
  %546 = bitcast <4 x i32> %545 to <4 x float>, !dbg !70
  %547 = fcmp uno <4 x float> %535, zeroinitializer, !dbg !101
  %548 = or <4 x i1> %541, %547, !dbg !102
  %.v = select <4 x i1> %548, <4 x i32> %534, <4 x i32> %539, !dbg !103
  %549 = bitcast <4 x i32> %.v to <4 x float>, !dbg !103
  %550 = insertelement <4 x i32> poison, i32 %524, i64 0, !dbg !67
  %551 = insertelement <4 x i32> %550, i32 %515, i64 1, !dbg !67
  %552 = insertelement <4 x i32> %551, i32 %506, i64 2, !dbg !67
  %553 = insertelement <4 x i32> %552, i32 %497, i64 3, !dbg !67
  %554 = bitcast <4 x i32> %553 to <4 x float>, !dbg !67
  %555 = fcmp olt <4 x float> %549, %554, !dbg !104
  %556 = fcmp uno <4 x float> %554, zeroinitializer, !dbg !106
  %557 = or <4 x i1> %555, %556, !dbg !107
  %.v73 = select <4 x i1> %557, <4 x i32> %553, <4 x i32> %.v, !dbg !108
  %558 = bitcast <4 x i32> %.v73 to <4 x float>, !dbg !108
  %559 = fcmp olt <4 x float> %558, %546, !dbg !109
  %560 = insertelement <4 x i32> poison, i32 %526, i64 0, !dbg !72
  %561 = insertelement <4 x i32> %560, i32 %517, i64 1, !dbg !72
  %562 = insertelement <4 x i32> %561, i32 %508, i64 2, !dbg !72
  %563 = insertelement <4 x i32> %562, i32 %499, i64 3, !dbg !72
  %564 = bitcast <4 x i32> %563 to <4 x float>, !dbg !72
  %565 = fcmp uno <4 x float> %546, zeroinitializer, !dbg !111
  %566 = or <4 x i1> %559, %565, !dbg !112
  %.v74 = select <4 x i1> %566, <4 x i32> %545, <4 x i32> %.v73, !dbg !113
  %567 = bitcast <4 x i32> %.v74 to <4 x float>, !dbg !113
  %568 = fcmp olt <4 x float> %567, %564, !dbg !114
  %569 = fcmp uno <4 x float> %564, zeroinitializer, !dbg !116
  %570 = or <4 x i1> %568, %569, !dbg !117
  %.v75 = select <4 x i1> %570, <4 x i32> %563, <4 x i32> %.v74, !dbg !118
  %571 = bitcast <4 x i32> %.v75 to <4 x float>, !dbg !118
  %572 = insertelement <4 x i32> poison, i32 %527, i64 0, !dbg !75
  %573 = insertelement <4 x i32> %572, i32 %518, i64 1, !dbg !75
  %574 = insertelement <4 x i32> %573, i32 %509, i64 2, !dbg !75
  %575 = insertelement <4 x i32> %574, i32 %500, i64 3, !dbg !75
  %576 = bitcast <4 x i32> %575 to <4 x float>, !dbg !75
  %577 = fcmp olt <4 x float> %571, %576, !dbg !119
  %578 = fcmp uno <4 x float> %576, zeroinitializer, !dbg !121
  %579 = or <4 x i1> %577, %578, !dbg !122
  %.v76 = select <4 x i1> %579, <4 x i32> %575, <4 x i32> %.v75, !dbg !123
  %580 = bitcast <4 x i32> %.v76 to <4 x float>, !dbg !123
  %581 = insertelement <4 x i32> poison, i32 %528, i64 0, !dbg !81
  %582 = insertelement <4 x i32> %581, i32 %519, i64 1, !dbg !81
  %583 = insertelement <4 x i32> %582, i32 %510, i64 2, !dbg !81
  %584 = insertelement <4 x i32> %583, i32 %501, i64 3, !dbg !81
  %585 = bitcast <4 x i32> %584 to <4 x float>, !dbg !81
  %586 = fcmp olt <4 x float> %580, %585, !dbg !124
  %587 = fcmp uno <4 x float> %585, zeroinitializer, !dbg !126
  %588 = or <4 x i1> %586, %587, !dbg !127
  %.v77 = select <4 x i1> %588, <4 x i32> %584, <4 x i32> %.v76, !dbg !128
  %589 = bitcast <4 x i32> %.v77 to <4 x float>, !dbg !128
  %590 = insertelement <4 x i32> poison, i32 %529, i64 0, !dbg !87
  %591 = insertelement <4 x i32> %590, i32 %520, i64 1, !dbg !87
  %592 = insertelement <4 x i32> %591, i32 %511, i64 2, !dbg !87
  %593 = insertelement <4 x i32> %592, i32 %502, i64 3, !dbg !87
  %594 = bitcast <4 x i32> %593 to <4 x float>, !dbg !87
  %595 = fcmp olt <4 x float> %589, %594, !dbg !129
  %596 = fcmp uno <4 x float> %594, zeroinitializer, !dbg !131
  %597 = or <4 x i1> %595, %596, !dbg !132
  %.v78 = select <4 x i1> %597, <4 x i32> %593, <4 x i32> %.v77, !dbg !133
  %598 = bitcast <4 x i32> %.v78 to <4 x float>, !dbg !133
  %599 = insertelement <4 x i32> poison, i32 %530, i64 0, !dbg !92
  %600 = insertelement <4 x i32> %599, i32 %521, i64 1, !dbg !92
  %601 = insertelement <4 x i32> %600, i32 %512, i64 2, !dbg !92
  %602 = insertelement <4 x i32> %601, i32 %503, i64 3, !dbg !92
  %603 = bitcast <4 x i32> %602 to <4 x float>, !dbg !92
  %604 = fcmp olt <4 x float> %598, %603, !dbg !134
  %605 = zext <4 x i1> %541 to <4 x i8>, !dbg !136
  %606 = select <4 x i1> %555, <4 x i8> splat (i8 2), <4 x i8> %605, !dbg !137
  %607 = select <4 x i1> %559, <4 x i8> splat (i8 3), <4 x i8> %606, !dbg !138
  %608 = select <4 x i1> %568, <4 x i8> splat (i8 4), <4 x i8> %607, !dbg !139
  %609 = select <4 x i1> %577, <4 x i8> splat (i8 5), <4 x i8> %608, !dbg !140
  %610 = select <4 x i1> %586, <4 x i8> splat (i8 6), <4 x i8> %609, !dbg !141
  %611 = select <4 x i1> %595, <4 x i8> splat (i8 7), <4 x i8> %610, !dbg !142
  %612 = select <4 x i1> %604, <4 x i8> splat (i8 8), <4 x i8> %611, !dbg !143
  %613 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !62
  %614 = extractvalue { i32, i32, i32, i32 } %176, 3, !dbg !58
  %615 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !67
  %616 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !70
  %617 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !72
  %618 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !75
  %619 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !81
  %620 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !87
  %621 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !92
  %622 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !62
  %623 = extractvalue { i32, i32, i32, i32 } %176, 2, !dbg !58
  %624 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !67
  %625 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !70
  %626 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !72
  %627 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !75
  %628 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !81
  %629 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !87
  %630 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !92
  %631 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !62
  %632 = extractvalue { i32, i32, i32, i32 } %176, 1, !dbg !58
  %633 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !67
  %634 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !70
  %635 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !72
  %636 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !75
  %637 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !81
  %638 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !87
  %639 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !92
  %640 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !62
  %641 = extractvalue { i32, i32, i32, i32 } %176, 0, !dbg !58
  %642 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !67
  %643 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !70
  %644 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !72
  %645 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !75
  %646 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !81
  %647 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !87
  %648 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !92
  %649 = insertelement <4 x i32> poison, i32 %640, i64 0, !dbg !62
  %650 = insertelement <4 x i32> %649, i32 %631, i64 1, !dbg !62
  %651 = insertelement <4 x i32> %650, i32 %622, i64 2, !dbg !62
  %652 = insertelement <4 x i32> %651, i32 %613, i64 3, !dbg !62
  %653 = bitcast <4 x i32> %652 to <4 x float>, !dbg !62
  %654 = insertelement <4 x i32> poison, i32 %641, i64 0, !dbg !58
  %655 = insertelement <4 x i32> %654, i32 %632, i64 1, !dbg !58
  %656 = insertelement <4 x i32> %655, i32 %623, i64 2, !dbg !58
  %657 = insertelement <4 x i32> %656, i32 %614, i64 3, !dbg !58
  %658 = bitcast <4 x i32> %657 to <4 x float>, !dbg !58
  %659 = fcmp ogt <4 x float> %653, %658, !dbg !97
  %660 = insertelement <4 x i32> poison, i32 %643, i64 0, !dbg !70
  %661 = insertelement <4 x i32> %660, i32 %634, i64 1, !dbg !70
  %662 = insertelement <4 x i32> %661, i32 %625, i64 2, !dbg !70
  %663 = insertelement <4 x i32> %662, i32 %616, i64 3, !dbg !70
  %664 = bitcast <4 x i32> %663 to <4 x float>, !dbg !70
  %665 = fcmp uno <4 x float> %653, zeroinitializer, !dbg !101
  %666 = or <4 x i1> %659, %665, !dbg !102
  %.v79 = select <4 x i1> %666, <4 x i32> %652, <4 x i32> %657, !dbg !103
  %667 = bitcast <4 x i32> %.v79 to <4 x float>, !dbg !103
  %668 = insertelement <4 x i32> poison, i32 %642, i64 0, !dbg !67
  %669 = insertelement <4 x i32> %668, i32 %633, i64 1, !dbg !67
  %670 = insertelement <4 x i32> %669, i32 %624, i64 2, !dbg !67
  %671 = insertelement <4 x i32> %670, i32 %615, i64 3, !dbg !67
  %672 = bitcast <4 x i32> %671 to <4 x float>, !dbg !67
  %673 = fcmp olt <4 x float> %667, %672, !dbg !104
  %674 = fcmp uno <4 x float> %672, zeroinitializer, !dbg !106
  %675 = or <4 x i1> %673, %674, !dbg !107
  %.v80 = select <4 x i1> %675, <4 x i32> %671, <4 x i32> %.v79, !dbg !108
  %676 = bitcast <4 x i32> %.v80 to <4 x float>, !dbg !108
  %677 = fcmp olt <4 x float> %676, %664, !dbg !109
  %678 = insertelement <4 x i32> poison, i32 %644, i64 0, !dbg !72
  %679 = insertelement <4 x i32> %678, i32 %635, i64 1, !dbg !72
  %680 = insertelement <4 x i32> %679, i32 %626, i64 2, !dbg !72
  %681 = insertelement <4 x i32> %680, i32 %617, i64 3, !dbg !72
  %682 = bitcast <4 x i32> %681 to <4 x float>, !dbg !72
  %683 = fcmp uno <4 x float> %664, zeroinitializer, !dbg !111
  %684 = or <4 x i1> %677, %683, !dbg !112
  %.v81 = select <4 x i1> %684, <4 x i32> %663, <4 x i32> %.v80, !dbg !113
  %685 = bitcast <4 x i32> %.v81 to <4 x float>, !dbg !113
  %686 = fcmp olt <4 x float> %685, %682, !dbg !114
  %687 = fcmp uno <4 x float> %682, zeroinitializer, !dbg !116
  %688 = or <4 x i1> %686, %687, !dbg !117
  %.v82 = select <4 x i1> %688, <4 x i32> %681, <4 x i32> %.v81, !dbg !118
  %689 = bitcast <4 x i32> %.v82 to <4 x float>, !dbg !118
  %690 = insertelement <4 x i32> poison, i32 %645, i64 0, !dbg !75
  %691 = insertelement <4 x i32> %690, i32 %636, i64 1, !dbg !75
  %692 = insertelement <4 x i32> %691, i32 %627, i64 2, !dbg !75
  %693 = insertelement <4 x i32> %692, i32 %618, i64 3, !dbg !75
  %694 = bitcast <4 x i32> %693 to <4 x float>, !dbg !75
  %695 = fcmp olt <4 x float> %689, %694, !dbg !119
  %696 = fcmp uno <4 x float> %694, zeroinitializer, !dbg !121
  %697 = or <4 x i1> %695, %696, !dbg !122
  %.v83 = select <4 x i1> %697, <4 x i32> %693, <4 x i32> %.v82, !dbg !123
  %698 = bitcast <4 x i32> %.v83 to <4 x float>, !dbg !123
  %699 = insertelement <4 x i32> poison, i32 %646, i64 0, !dbg !81
  %700 = insertelement <4 x i32> %699, i32 %637, i64 1, !dbg !81
  %701 = insertelement <4 x i32> %700, i32 %628, i64 2, !dbg !81
  %702 = insertelement <4 x i32> %701, i32 %619, i64 3, !dbg !81
  %703 = bitcast <4 x i32> %702 to <4 x float>, !dbg !81
  %704 = fcmp olt <4 x float> %698, %703, !dbg !124
  %705 = fcmp uno <4 x float> %703, zeroinitializer, !dbg !126
  %706 = or <4 x i1> %704, %705, !dbg !127
  %.v84 = select <4 x i1> %706, <4 x i32> %702, <4 x i32> %.v83, !dbg !128
  %707 = bitcast <4 x i32> %.v84 to <4 x float>, !dbg !128
  %708 = insertelement <4 x i32> poison, i32 %647, i64 0, !dbg !87
  %709 = insertelement <4 x i32> %708, i32 %638, i64 1, !dbg !87
  %710 = insertelement <4 x i32> %709, i32 %629, i64 2, !dbg !87
  %711 = insertelement <4 x i32> %710, i32 %620, i64 3, !dbg !87
  %712 = bitcast <4 x i32> %711 to <4 x float>, !dbg !87
  %713 = fcmp olt <4 x float> %707, %712, !dbg !129
  %714 = fcmp uno <4 x float> %712, zeroinitializer, !dbg !131
  %715 = or <4 x i1> %713, %714, !dbg !132
  %.v85 = select <4 x i1> %715, <4 x i32> %711, <4 x i32> %.v84, !dbg !133
  %716 = bitcast <4 x i32> %.v85 to <4 x float>, !dbg !133
  %717 = insertelement <4 x i32> poison, i32 %648, i64 0, !dbg !92
  %718 = insertelement <4 x i32> %717, i32 %639, i64 1, !dbg !92
  %719 = insertelement <4 x i32> %718, i32 %630, i64 2, !dbg !92
  %720 = insertelement <4 x i32> %719, i32 %621, i64 3, !dbg !92
  %721 = bitcast <4 x i32> %720 to <4 x float>, !dbg !92
  %722 = fcmp olt <4 x float> %716, %721, !dbg !134
  %723 = zext <4 x i1> %659 to <4 x i8>, !dbg !136
  %724 = select <4 x i1> %673, <4 x i8> splat (i8 2), <4 x i8> %723, !dbg !137
  %725 = select <4 x i1> %677, <4 x i8> splat (i8 3), <4 x i8> %724, !dbg !138
  %726 = select <4 x i1> %686, <4 x i8> splat (i8 4), <4 x i8> %725, !dbg !139
  %727 = select <4 x i1> %695, <4 x i8> splat (i8 5), <4 x i8> %726, !dbg !140
  %728 = select <4 x i1> %704, <4 x i8> splat (i8 6), <4 x i8> %727, !dbg !141
  %729 = select <4 x i1> %713, <4 x i8> splat (i8 7), <4 x i8> %728, !dbg !142
  %730 = select <4 x i1> %722, <4 x i8> splat (i8 8), <4 x i8> %729, !dbg !143
  %731 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !62
  %732 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !58
  %733 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !67
  %734 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !70
  %735 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !72
  %736 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !75
  %737 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !81
  %738 = extractvalue { i32, i32, i32, i32 } %268, 3, !dbg !87
  %739 = extractvalue { i32, i32, i32, i32 } %292, 3, !dbg !92
  %740 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !62
  %741 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !58
  %742 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !67
  %743 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !70
  %744 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !72
  %745 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !75
  %746 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !81
  %747 = extractvalue { i32, i32, i32, i32 } %268, 2, !dbg !87
  %748 = extractvalue { i32, i32, i32, i32 } %292, 2, !dbg !92
  %749 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !62
  %750 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !58
  %751 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !67
  %752 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !70
  %753 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !72
  %754 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !75
  %755 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !81
  %756 = extractvalue { i32, i32, i32, i32 } %268, 1, !dbg !87
  %757 = extractvalue { i32, i32, i32, i32 } %292, 1, !dbg !92
  %758 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !62
  %759 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !58
  %760 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !67
  %761 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !70
  %762 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !72
  %763 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !75
  %764 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !81
  %765 = extractvalue { i32, i32, i32, i32 } %268, 0, !dbg !87
  %766 = extractvalue { i32, i32, i32, i32 } %292, 0, !dbg !92
  %767 = insertelement <4 x i32> poison, i32 %758, i64 0, !dbg !62
  %768 = insertelement <4 x i32> %767, i32 %749, i64 1, !dbg !62
  %769 = insertelement <4 x i32> %768, i32 %740, i64 2, !dbg !62
  %770 = insertelement <4 x i32> %769, i32 %731, i64 3, !dbg !62
  %771 = bitcast <4 x i32> %770 to <4 x float>, !dbg !62
  %772 = insertelement <4 x i32> poison, i32 %759, i64 0, !dbg !58
  %773 = insertelement <4 x i32> %772, i32 %750, i64 1, !dbg !58
  %774 = insertelement <4 x i32> %773, i32 %741, i64 2, !dbg !58
  %775 = insertelement <4 x i32> %774, i32 %732, i64 3, !dbg !58
  %776 = bitcast <4 x i32> %775 to <4 x float>, !dbg !58
  %777 = fcmp ogt <4 x float> %771, %776, !dbg !97
  %778 = insertelement <4 x i32> poison, i32 %761, i64 0, !dbg !70
  %779 = insertelement <4 x i32> %778, i32 %752, i64 1, !dbg !70
  %780 = insertelement <4 x i32> %779, i32 %743, i64 2, !dbg !70
  %781 = insertelement <4 x i32> %780, i32 %734, i64 3, !dbg !70
  %782 = bitcast <4 x i32> %781 to <4 x float>, !dbg !70
  %783 = fcmp uno <4 x float> %771, zeroinitializer, !dbg !101
  %784 = or <4 x i1> %777, %783, !dbg !102
  %.v86 = select <4 x i1> %784, <4 x i32> %770, <4 x i32> %775, !dbg !103
  %785 = bitcast <4 x i32> %.v86 to <4 x float>, !dbg !103
  %786 = insertelement <4 x i32> poison, i32 %760, i64 0, !dbg !67
  %787 = insertelement <4 x i32> %786, i32 %751, i64 1, !dbg !67
  %788 = insertelement <4 x i32> %787, i32 %742, i64 2, !dbg !67
  %789 = insertelement <4 x i32> %788, i32 %733, i64 3, !dbg !67
  %790 = bitcast <4 x i32> %789 to <4 x float>, !dbg !67
  %791 = fcmp olt <4 x float> %785, %790, !dbg !104
  %792 = fcmp uno <4 x float> %790, zeroinitializer, !dbg !106
  %793 = or <4 x i1> %791, %792, !dbg !107
  %.v87 = select <4 x i1> %793, <4 x i32> %789, <4 x i32> %.v86, !dbg !108
  %794 = bitcast <4 x i32> %.v87 to <4 x float>, !dbg !108
  %795 = fcmp olt <4 x float> %794, %782, !dbg !109
  %796 = insertelement <4 x i32> poison, i32 %762, i64 0, !dbg !72
  %797 = insertelement <4 x i32> %796, i32 %753, i64 1, !dbg !72
  %798 = insertelement <4 x i32> %797, i32 %744, i64 2, !dbg !72
  %799 = insertelement <4 x i32> %798, i32 %735, i64 3, !dbg !72
  %800 = bitcast <4 x i32> %799 to <4 x float>, !dbg !72
  %801 = fcmp uno <4 x float> %782, zeroinitializer, !dbg !111
  %802 = or <4 x i1> %795, %801, !dbg !112
  %.v88 = select <4 x i1> %802, <4 x i32> %781, <4 x i32> %.v87, !dbg !113
  %803 = bitcast <4 x i32> %.v88 to <4 x float>, !dbg !113
  %804 = fcmp olt <4 x float> %803, %800, !dbg !114
  %805 = fcmp uno <4 x float> %800, zeroinitializer, !dbg !116
  %806 = or <4 x i1> %804, %805, !dbg !117
  %.v89 = select <4 x i1> %806, <4 x i32> %799, <4 x i32> %.v88, !dbg !118
  %807 = bitcast <4 x i32> %.v89 to <4 x float>, !dbg !118
  %808 = insertelement <4 x i32> poison, i32 %763, i64 0, !dbg !75
  %809 = insertelement <4 x i32> %808, i32 %754, i64 1, !dbg !75
  %810 = insertelement <4 x i32> %809, i32 %745, i64 2, !dbg !75
  %811 = insertelement <4 x i32> %810, i32 %736, i64 3, !dbg !75
  %812 = bitcast <4 x i32> %811 to <4 x float>, !dbg !75
  %813 = fcmp olt <4 x float> %807, %812, !dbg !119
  %814 = fcmp uno <4 x float> %812, zeroinitializer, !dbg !121
  %815 = or <4 x i1> %813, %814, !dbg !122
  %.v90 = select <4 x i1> %815, <4 x i32> %811, <4 x i32> %.v89, !dbg !123
  %816 = bitcast <4 x i32> %.v90 to <4 x float>, !dbg !123
  %817 = insertelement <4 x i32> poison, i32 %764, i64 0, !dbg !81
  %818 = insertelement <4 x i32> %817, i32 %755, i64 1, !dbg !81
  %819 = insertelement <4 x i32> %818, i32 %746, i64 2, !dbg !81
  %820 = insertelement <4 x i32> %819, i32 %737, i64 3, !dbg !81
  %821 = bitcast <4 x i32> %820 to <4 x float>, !dbg !81
  %822 = fcmp olt <4 x float> %816, %821, !dbg !124
  %823 = fcmp uno <4 x float> %821, zeroinitializer, !dbg !126
  %824 = or <4 x i1> %822, %823, !dbg !127
  %.v91 = select <4 x i1> %824, <4 x i32> %820, <4 x i32> %.v90, !dbg !128
  %825 = bitcast <4 x i32> %.v91 to <4 x float>, !dbg !128
  %826 = insertelement <4 x i32> poison, i32 %765, i64 0, !dbg !87
  %827 = insertelement <4 x i32> %826, i32 %756, i64 1, !dbg !87
  %828 = insertelement <4 x i32> %827, i32 %747, i64 2, !dbg !87
  %829 = insertelement <4 x i32> %828, i32 %738, i64 3, !dbg !87
  %830 = bitcast <4 x i32> %829 to <4 x float>, !dbg !87
  %831 = fcmp olt <4 x float> %825, %830, !dbg !129
  %832 = fcmp uno <4 x float> %830, zeroinitializer, !dbg !131
  %833 = or <4 x i1> %831, %832, !dbg !132
  %.v92 = select <4 x i1> %833, <4 x i32> %829, <4 x i32> %.v91, !dbg !133
  %834 = bitcast <4 x i32> %.v92 to <4 x float>, !dbg !133
  %835 = insertelement <4 x i32> poison, i32 %766, i64 0, !dbg !92
  %836 = insertelement <4 x i32> %835, i32 %757, i64 1, !dbg !92
  %837 = insertelement <4 x i32> %836, i32 %748, i64 2, !dbg !92
  %838 = insertelement <4 x i32> %837, i32 %739, i64 3, !dbg !92
  %839 = bitcast <4 x i32> %838 to <4 x float>, !dbg !92
  %840 = fcmp olt <4 x float> %834, %839, !dbg !134
  %841 = zext <4 x i1> %777 to <4 x i8>, !dbg !136
  %842 = select <4 x i1> %791, <4 x i8> splat (i8 2), <4 x i8> %841, !dbg !137
  %843 = select <4 x i1> %795, <4 x i8> splat (i8 3), <4 x i8> %842, !dbg !138
  %844 = select <4 x i1> %804, <4 x i8> splat (i8 4), <4 x i8> %843, !dbg !139
  %845 = select <4 x i1> %813, <4 x i8> splat (i8 5), <4 x i8> %844, !dbg !140
  %846 = select <4 x i1> %822, <4 x i8> splat (i8 6), <4 x i8> %845, !dbg !141
  %847 = select <4 x i1> %831, <4 x i8> splat (i8 7), <4 x i8> %846, !dbg !142
  %848 = select <4 x i1> %840, <4 x i8> splat (i8 8), <4 x i8> %847, !dbg !143
  %849 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !62
  %850 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !58
  %851 = extractvalue { i32, i32, i32, i32 } %194, 3, !dbg !67
  %852 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !70
  %853 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !72
  %854 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !75
  %855 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !81
  %856 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !87
  %857 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !92
  %858 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !62
  %859 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !58
  %860 = extractvalue { i32, i32, i32, i32 } %194, 2, !dbg !67
  %861 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !70
  %862 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !72
  %863 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !75
  %864 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !81
  %865 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !87
  %866 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !92
  %867 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !62
  %868 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !58
  %869 = extractvalue { i32, i32, i32, i32 } %194, 1, !dbg !67
  %870 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !70
  %871 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !72
  %872 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !75
  %873 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !81
  %874 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !87
  %875 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !92
  %876 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !62
  %877 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !58
  %878 = extractvalue { i32, i32, i32, i32 } %194, 0, !dbg !67
  %879 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !70
  %880 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !72
  %881 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !75
  %882 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !81
  %883 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !87
  %884 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !92
  %885 = insertelement <4 x i32> poison, i32 %876, i64 0, !dbg !62
  %886 = insertelement <4 x i32> %885, i32 %867, i64 1, !dbg !62
  %887 = insertelement <4 x i32> %886, i32 %858, i64 2, !dbg !62
  %888 = insertelement <4 x i32> %887, i32 %849, i64 3, !dbg !62
  %889 = bitcast <4 x i32> %888 to <4 x float>, !dbg !62
  %890 = insertelement <4 x i32> poison, i32 %877, i64 0, !dbg !58
  %891 = insertelement <4 x i32> %890, i32 %868, i64 1, !dbg !58
  %892 = insertelement <4 x i32> %891, i32 %859, i64 2, !dbg !58
  %893 = insertelement <4 x i32> %892, i32 %850, i64 3, !dbg !58
  %894 = bitcast <4 x i32> %893 to <4 x float>, !dbg !58
  %895 = fcmp ogt <4 x float> %889, %894, !dbg !97
  %896 = insertelement <4 x i32> poison, i32 %879, i64 0, !dbg !70
  %897 = insertelement <4 x i32> %896, i32 %870, i64 1, !dbg !70
  %898 = insertelement <4 x i32> %897, i32 %861, i64 2, !dbg !70
  %899 = insertelement <4 x i32> %898, i32 %852, i64 3, !dbg !70
  %900 = bitcast <4 x i32> %899 to <4 x float>, !dbg !70
  %901 = fcmp uno <4 x float> %889, zeroinitializer, !dbg !101
  %902 = or <4 x i1> %895, %901, !dbg !102
  %.v93 = select <4 x i1> %902, <4 x i32> %888, <4 x i32> %893, !dbg !103
  %903 = bitcast <4 x i32> %.v93 to <4 x float>, !dbg !103
  %904 = insertelement <4 x i32> poison, i32 %878, i64 0, !dbg !67
  %905 = insertelement <4 x i32> %904, i32 %869, i64 1, !dbg !67
  %906 = insertelement <4 x i32> %905, i32 %860, i64 2, !dbg !67
  %907 = insertelement <4 x i32> %906, i32 %851, i64 3, !dbg !67
  %908 = bitcast <4 x i32> %907 to <4 x float>, !dbg !67
  %909 = fcmp olt <4 x float> %903, %908, !dbg !104
  %910 = fcmp uno <4 x float> %908, zeroinitializer, !dbg !106
  %911 = or <4 x i1> %909, %910, !dbg !107
  %.v94 = select <4 x i1> %911, <4 x i32> %907, <4 x i32> %.v93, !dbg !108
  %912 = bitcast <4 x i32> %.v94 to <4 x float>, !dbg !108
  %913 = fcmp olt <4 x float> %912, %900, !dbg !109
  %914 = insertelement <4 x i32> poison, i32 %880, i64 0, !dbg !72
  %915 = insertelement <4 x i32> %914, i32 %871, i64 1, !dbg !72
  %916 = insertelement <4 x i32> %915, i32 %862, i64 2, !dbg !72
  %917 = insertelement <4 x i32> %916, i32 %853, i64 3, !dbg !72
  %918 = bitcast <4 x i32> %917 to <4 x float>, !dbg !72
  %919 = fcmp uno <4 x float> %900, zeroinitializer, !dbg !111
  %920 = or <4 x i1> %913, %919, !dbg !112
  %.v95 = select <4 x i1> %920, <4 x i32> %899, <4 x i32> %.v94, !dbg !113
  %921 = bitcast <4 x i32> %.v95 to <4 x float>, !dbg !113
  %922 = fcmp olt <4 x float> %921, %918, !dbg !114
  %923 = fcmp uno <4 x float> %918, zeroinitializer, !dbg !116
  %924 = or <4 x i1> %922, %923, !dbg !117
  %.v96 = select <4 x i1> %924, <4 x i32> %917, <4 x i32> %.v95, !dbg !118
  %925 = bitcast <4 x i32> %.v96 to <4 x float>, !dbg !118
  %926 = insertelement <4 x i32> poison, i32 %881, i64 0, !dbg !75
  %927 = insertelement <4 x i32> %926, i32 %872, i64 1, !dbg !75
  %928 = insertelement <4 x i32> %927, i32 %863, i64 2, !dbg !75
  %929 = insertelement <4 x i32> %928, i32 %854, i64 3, !dbg !75
  %930 = bitcast <4 x i32> %929 to <4 x float>, !dbg !75
  %931 = fcmp olt <4 x float> %925, %930, !dbg !119
  %932 = fcmp uno <4 x float> %930, zeroinitializer, !dbg !121
  %933 = or <4 x i1> %931, %932, !dbg !122
  %.v97 = select <4 x i1> %933, <4 x i32> %929, <4 x i32> %.v96, !dbg !123
  %934 = bitcast <4 x i32> %.v97 to <4 x float>, !dbg !123
  %935 = insertelement <4 x i32> poison, i32 %882, i64 0, !dbg !81
  %936 = insertelement <4 x i32> %935, i32 %873, i64 1, !dbg !81
  %937 = insertelement <4 x i32> %936, i32 %864, i64 2, !dbg !81
  %938 = insertelement <4 x i32> %937, i32 %855, i64 3, !dbg !81
  %939 = bitcast <4 x i32> %938 to <4 x float>, !dbg !81
  %940 = fcmp olt <4 x float> %934, %939, !dbg !124
  %941 = fcmp uno <4 x float> %939, zeroinitializer, !dbg !126
  %942 = or <4 x i1> %940, %941, !dbg !127
  %.v98 = select <4 x i1> %942, <4 x i32> %938, <4 x i32> %.v97, !dbg !128
  %943 = bitcast <4 x i32> %.v98 to <4 x float>, !dbg !128
  %944 = insertelement <4 x i32> poison, i32 %883, i64 0, !dbg !87
  %945 = insertelement <4 x i32> %944, i32 %874, i64 1, !dbg !87
  %946 = insertelement <4 x i32> %945, i32 %865, i64 2, !dbg !87
  %947 = insertelement <4 x i32> %946, i32 %856, i64 3, !dbg !87
  %948 = bitcast <4 x i32> %947 to <4 x float>, !dbg !87
  %949 = fcmp olt <4 x float> %943, %948, !dbg !129
  %950 = fcmp uno <4 x float> %948, zeroinitializer, !dbg !131
  %951 = or <4 x i1> %949, %950, !dbg !132
  %.v99 = select <4 x i1> %951, <4 x i32> %947, <4 x i32> %.v98, !dbg !133
  %952 = bitcast <4 x i32> %.v99 to <4 x float>, !dbg !133
  %953 = insertelement <4 x i32> poison, i32 %884, i64 0, !dbg !92
  %954 = insertelement <4 x i32> %953, i32 %875, i64 1, !dbg !92
  %955 = insertelement <4 x i32> %954, i32 %866, i64 2, !dbg !92
  %956 = insertelement <4 x i32> %955, i32 %857, i64 3, !dbg !92
  %957 = bitcast <4 x i32> %956 to <4 x float>, !dbg !92
  %958 = fcmp olt <4 x float> %952, %957, !dbg !134
  %959 = zext <4 x i1> %895 to <4 x i8>, !dbg !136
  %960 = select <4 x i1> %909, <4 x i8> splat (i8 2), <4 x i8> %959, !dbg !137
  %961 = select <4 x i1> %913, <4 x i8> splat (i8 3), <4 x i8> %960, !dbg !138
  %962 = select <4 x i1> %922, <4 x i8> splat (i8 4), <4 x i8> %961, !dbg !139
  %963 = select <4 x i1> %931, <4 x i8> splat (i8 5), <4 x i8> %962, !dbg !140
  %964 = select <4 x i1> %940, <4 x i8> splat (i8 6), <4 x i8> %963, !dbg !141
  %965 = select <4 x i1> %949, <4 x i8> splat (i8 7), <4 x i8> %964, !dbg !142
  %966 = select <4 x i1> %958, <4 x i8> splat (i8 8), <4 x i8> %965, !dbg !143
  %967 = bitcast i32 %503 to float, !dbg !144
  %968 = fcmp uno float %967, 0.000000e+00, !dbg !144
  %969 = extractelement <4 x i1> %604, i64 3, !dbg !145
  %970 = or i1 %969, %968, !dbg !145
  %971 = extractelement <4 x float> %598, i64 3, !dbg !146
  %972 = select i1 %970, float %967, float %971, !dbg !146
  %973 = bitcast i32 %512 to float, !dbg !144
  %974 = fcmp uno float %973, 0.000000e+00, !dbg !144
  %975 = extractelement <4 x i1> %604, i64 2, !dbg !145
  %976 = or i1 %975, %974, !dbg !145
  %977 = extractelement <4 x float> %598, i64 2, !dbg !146
  %978 = select i1 %976, float %973, float %977, !dbg !146
  %979 = bitcast i32 %521 to float, !dbg !144
  %980 = fcmp uno float %979, 0.000000e+00, !dbg !144
  %981 = extractelement <4 x i1> %604, i64 1, !dbg !145
  %982 = or i1 %981, %980, !dbg !145
  %983 = extractelement <4 x float> %598, i64 1, !dbg !146
  %984 = select i1 %982, float %979, float %983, !dbg !146
  %985 = bitcast i32 %530 to float, !dbg !144
  %986 = fcmp uno float %985, 0.000000e+00, !dbg !144
  %987 = extractelement <4 x i1> %604, i64 0, !dbg !145
  %988 = or i1 %987, %986, !dbg !145
  %989 = extractelement <4 x float> %598, i64 0, !dbg !146
  %990 = select i1 %988, float %985, float %989, !dbg !146
  %991 = bitcast i32 %621 to float, !dbg !144
  %992 = fcmp uno float %991, 0.000000e+00, !dbg !144
  %993 = extractelement <4 x i1> %722, i64 3, !dbg !145
  %994 = or i1 %993, %992, !dbg !145
  %995 = extractelement <4 x float> %716, i64 3, !dbg !146
  %996 = select i1 %994, float %991, float %995, !dbg !146
  %997 = bitcast i32 %630 to float, !dbg !144
  %998 = fcmp uno float %997, 0.000000e+00, !dbg !144
  %999 = extractelement <4 x i1> %722, i64 2, !dbg !145
  %1000 = or i1 %999, %998, !dbg !145
  %1001 = extractelement <4 x float> %716, i64 2, !dbg !146
  %1002 = select i1 %1000, float %997, float %1001, !dbg !146
  %1003 = bitcast i32 %639 to float, !dbg !144
  %1004 = fcmp uno float %1003, 0.000000e+00, !dbg !144
  %1005 = extractelement <4 x i1> %722, i64 1, !dbg !145
  %1006 = or i1 %1005, %1004, !dbg !145
  %1007 = extractelement <4 x float> %716, i64 1, !dbg !146
  %1008 = select i1 %1006, float %1003, float %1007, !dbg !146
  %1009 = bitcast i32 %648 to float, !dbg !144
  %1010 = fcmp uno float %1009, 0.000000e+00, !dbg !144
  %1011 = extractelement <4 x i1> %722, i64 0, !dbg !145
  %1012 = or i1 %1011, %1010, !dbg !145
  %1013 = extractelement <4 x float> %716, i64 0, !dbg !146
  %1014 = select i1 %1012, float %1009, float %1013, !dbg !146
  %1015 = bitcast i32 %739 to float, !dbg !144
  %1016 = fcmp uno float %1015, 0.000000e+00, !dbg !144
  %1017 = extractelement <4 x i1> %840, i64 3, !dbg !145
  %1018 = or i1 %1017, %1016, !dbg !145
  %1019 = extractelement <4 x float> %834, i64 3, !dbg !146
  %1020 = select i1 %1018, float %1015, float %1019, !dbg !146
  %1021 = bitcast i32 %748 to float, !dbg !144
  %1022 = fcmp uno float %1021, 0.000000e+00, !dbg !144
  %1023 = extractelement <4 x i1> %840, i64 2, !dbg !145
  %1024 = or i1 %1023, %1022, !dbg !145
  %1025 = extractelement <4 x float> %834, i64 2, !dbg !146
  %1026 = select i1 %1024, float %1021, float %1025, !dbg !146
  %1027 = bitcast i32 %757 to float, !dbg !144
  %1028 = fcmp uno float %1027, 0.000000e+00, !dbg !144
  %1029 = extractelement <4 x i1> %840, i64 1, !dbg !145
  %1030 = or i1 %1029, %1028, !dbg !145
  %1031 = extractelement <4 x float> %834, i64 1, !dbg !146
  %1032 = select i1 %1030, float %1027, float %1031, !dbg !146
  %1033 = bitcast i32 %766 to float, !dbg !144
  %1034 = fcmp uno float %1033, 0.000000e+00, !dbg !144
  %1035 = extractelement <4 x i1> %840, i64 0, !dbg !145
  %1036 = or i1 %1035, %1034, !dbg !145
  %1037 = extractelement <4 x float> %834, i64 0, !dbg !146
  %1038 = select i1 %1036, float %1033, float %1037, !dbg !146
  %1039 = bitcast i32 %857 to float, !dbg !144
  %1040 = fcmp uno float %1039, 0.000000e+00, !dbg !144
  %1041 = extractelement <4 x i1> %958, i64 3, !dbg !145
  %1042 = or i1 %1041, %1040, !dbg !145
  %1043 = extractelement <4 x float> %952, i64 3, !dbg !146
  %1044 = select i1 %1042, float %1039, float %1043, !dbg !146
  %1045 = bitcast i32 %866 to float, !dbg !144
  %1046 = fcmp uno float %1045, 0.000000e+00, !dbg !144
  %1047 = extractelement <4 x i1> %958, i64 2, !dbg !145
  %1048 = or i1 %1047, %1046, !dbg !145
  %1049 = extractelement <4 x float> %952, i64 2, !dbg !146
  %1050 = select i1 %1048, float %1045, float %1049, !dbg !146
  %1051 = bitcast i32 %875 to float, !dbg !144
  %1052 = fcmp uno float %1051, 0.000000e+00, !dbg !144
  %1053 = extractelement <4 x i1> %958, i64 1, !dbg !145
  %1054 = or i1 %1053, %1052, !dbg !145
  %1055 = extractelement <4 x float> %952, i64 1, !dbg !146
  %1056 = select i1 %1054, float %1051, float %1055, !dbg !146
  %1057 = bitcast i32 %884 to float, !dbg !144
  %1058 = fcmp uno float %1057, 0.000000e+00, !dbg !144
  %1059 = extractelement <4 x i1> %958, i64 0, !dbg !145
  %1060 = or i1 %1059, %1058, !dbg !145
  %1061 = extractelement <4 x float> %952, i64 0, !dbg !146
  %1062 = select i1 %1060, float %1057, float %1061, !dbg !146
  %1063 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !34
  %1064 = bitcast i32 %1063 to float, !dbg !34
  %1065 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !34
  %1066 = bitcast i32 %1065 to float, !dbg !34
  %1067 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !34
  %1068 = bitcast i32 %1067 to float, !dbg !34
  %1069 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !34
  %1070 = bitcast i32 %1069 to float, !dbg !34
  %1071 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !34
  %1072 = bitcast i32 %1071 to float, !dbg !34
  %1073 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !34
  %1074 = bitcast i32 %1073 to float, !dbg !34
  %1075 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !34
  %1076 = bitcast i32 %1075 to float, !dbg !34
  %1077 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !34
  %1078 = bitcast i32 %1077 to float, !dbg !34
  %1079 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !32
  %1080 = bitcast i32 %1079 to float, !dbg !32
  %1081 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !32
  %1082 = bitcast i32 %1081 to float, !dbg !32
  %1083 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !32
  %1084 = bitcast i32 %1083 to float, !dbg !32
  %1085 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !32
  %1086 = bitcast i32 %1085 to float, !dbg !32
  %1087 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !32
  %1088 = bitcast i32 %1087 to float, !dbg !32
  %1089 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !32
  %1090 = bitcast i32 %1089 to float, !dbg !32
  %1091 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !32
  %1092 = bitcast i32 %1091 to float, !dbg !32
  %1093 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !32
  %1094 = bitcast i32 %1093 to float, !dbg !32
  %1095 = shl i32 %14, 2, !dbg !12
  %1096 = and i32 %1095, 12, !dbg !12
  %1097 = or disjoint i32 %21, %1096, !dbg !17
  %1098 = lshr i32 %14, 2, !dbg !12
  %1099 = and i32 %1098, 63, !dbg !12
  %1100 = or disjoint i32 %1099, 192, !dbg !12
  %1101 = or disjoint i32 %13, %1100, !dbg !13
  %1102 = mul i32 %1101, 728, !dbg !21
  %1103 = add i32 %1097, %1102, !dbg !22
  %1104 = sext i32 %1103 to i64, !dbg !23
  %1105 = getelementptr float, ptr addrspace(1) %0, i64 %1104, !dbg !23
  %1106 = or disjoint i32 %1099, 128, !dbg !12
  %1107 = or disjoint i32 %13, %1106, !dbg !13
  %1108 = mul i32 %1107, 728, !dbg !21
  %1109 = add i32 %1097, %1108, !dbg !22
  %1110 = sext i32 %1109 to i64, !dbg !23
  %1111 = getelementptr float, ptr addrspace(1) %0, i64 %1110, !dbg !23
  %1112 = or disjoint i32 %1099, 64, !dbg !12
  %1113 = or disjoint i32 %13, %1112, !dbg !13
  %1114 = mul i32 %1113, 728, !dbg !21
  %1115 = add i32 %1097, %1114, !dbg !22
  %1116 = sext i32 %1115 to i64, !dbg !23
  %1117 = getelementptr float, ptr addrspace(1) %0, i64 %1116, !dbg !23
  %1118 = or disjoint i32 %13, %1099, !dbg !13
  %1119 = mul i32 %1118, 728, !dbg !21
  %1120 = add i32 %1097, %1119, !dbg !22
  %1121 = sext i32 %1120 to i64, !dbg !23
  %1122 = getelementptr float, ptr addrspace(1) %0, i64 %1121, !dbg !23
  %1123 = and i32 %1095, 252, !dbg !12
  %1124 = or disjoint i32 %13, %1123, !dbg !13
  %.frozen = freeze i32 %1124, !dbg !147
  %1125 = sdiv i32 %.frozen, 256, !dbg !147
  %1126 = mul i32 %1125, 256, !dbg !148
  %.decomposed = sub i32 %.frozen, %1126, !dbg !148
  %.lobit46 = lshr i32 %14, 6, !dbg !16
  %1127 = and i32 %.lobit46, 3, !dbg !16
  %1128 = or disjoint i32 %1127, %21, !dbg !17
  %1129 = or disjoint i32 %1128, 12, !dbg !17
  %1130 = icmp slt i32 %1129, 728, !dbg !18
  %1131 = or disjoint i32 %1128, 8, !dbg !17
  %1132 = icmp slt i32 %1131, 728, !dbg !18
  %1133 = or disjoint i32 %1128, 4, !dbg !17
  %1134 = icmp slt i32 %1133, 728, !dbg !18
  %1135 = icmp slt i32 %1128, 728, !dbg !18
  %1136 = icmp slt i32 %1097, 728, !dbg !18
  %1137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !149
  %1138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !149
  %1139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !149
  %1140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #4, !dbg !149
  %1141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #4, !dbg !149
  %1142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #4, !dbg !149
  %1143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #4, !dbg !149
  %1144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i70) #4, !dbg !149
  %1145 = fmul float %494, %1137, !dbg !150
  %1146 = fmul float %490, %1138, !dbg !150
  %1147 = fmul float %486, %1139, !dbg !150
  %1148 = fmul float %482, %1140, !dbg !150
  %1149 = fmul float %478, %1141, !dbg !150
  %1150 = fmul float %474, %1142, !dbg !150
  %1151 = fmul float %470, %1143, !dbg !150
  %1152 = fmul float %466, %1144, !dbg !150
  %1153 = fmul float %462, %1137, !dbg !150
  %1154 = fmul float %454, %1138, !dbg !150
  %1155 = fmul float %446, %1139, !dbg !150
  %1156 = fmul float %438, %1140, !dbg !150
  %1157 = fmul float %430, %1141, !dbg !150
  %1158 = fmul float %422, %1142, !dbg !150
  %1159 = fmul float %414, %1143, !dbg !150
  %1160 = fmul float %406, %1144, !dbg !150
  %1161 = fmul float %1145, %1094, !dbg !151
  %1162 = fmul float %1146, %1092, !dbg !151
  %1163 = fmul float %1147, %1090, !dbg !151
  %1164 = fmul float %1148, %1088, !dbg !151
  %1165 = fmul float %1149, %1086, !dbg !151
  %1166 = fmul float %1150, %1084, !dbg !151
  %1167 = fmul float %1151, %1082, !dbg !151
  %1168 = fmul float %1152, %1080, !dbg !151
  %1169 = fmul float %1153, %1094, !dbg !151
  %1170 = fmul float %1154, %1092, !dbg !151
  %1171 = fmul float %1155, %1090, !dbg !151
  %1172 = fmul float %1156, %1088, !dbg !151
  %1173 = fmul float %1157, %1086, !dbg !151
  %1174 = fmul float %1158, %1084, !dbg !151
  %1175 = fmul float %1159, %1082, !dbg !151
  %1176 = fmul float %1160, %1080, !dbg !151
  %1177 = fadd float %1161, %1078, !dbg !152
  %1178 = fadd float %1162, %1076, !dbg !152
  %1179 = fadd float %1163, %1074, !dbg !152
  %1180 = fadd float %1164, %1072, !dbg !152
  %1181 = fadd float %1165, %1070, !dbg !152
  %1182 = fadd float %1166, %1068, !dbg !152
  %1183 = fadd float %1167, %1066, !dbg !152
  %1184 = fadd float %1168, %1064, !dbg !152
  %1185 = fadd float %1169, %1078, !dbg !152
  %1186 = fadd float %1170, %1076, !dbg !152
  %1187 = fadd float %1171, %1074, !dbg !152
  %1188 = fadd float %1172, %1072, !dbg !152
  %1189 = fadd float %1173, %1070, !dbg !152
  %1190 = fadd float %1174, %1068, !dbg !152
  %1191 = fadd float %1175, %1066, !dbg !152
  %1192 = fadd float %1176, %1064, !dbg !152
  %1193 = fadd float %1062, %1177, !dbg !153
  %1194 = fadd float %1056, %1178, !dbg !153
  %1195 = fadd float %1050, %1179, !dbg !153
  %1196 = fadd float %1044, %1180, !dbg !153
  %1197 = fadd float %1038, %1181, !dbg !153
  %1198 = fadd float %1032, %1182, !dbg !153
  %1199 = fadd float %1026, %1183, !dbg !153
  %1200 = fadd float %1020, %1184, !dbg !153
  %1201 = fadd float %1014, %1185, !dbg !153
  %1202 = fadd float %1008, %1186, !dbg !153
  %1203 = fadd float %1002, %1187, !dbg !153
  %1204 = fadd float %996, %1188, !dbg !153
  %1205 = fadd float %990, %1189, !dbg !153
  %1206 = fadd float %984, %1190, !dbg !153
  %1207 = fadd float %978, %1191, !dbg !153
  %1208 = fadd float %972, %1192, !dbg !153
  %1209 = getelementptr i8, ptr addrspace(1) %7, i64 %35, !dbg !154
  %1210 = getelementptr i8, ptr addrspace(1) %7, i64 %39, !dbg !154
  %1211 = bitcast <4 x i8> %966 to i32, !dbg !155
  %1212 = bitcast <4 x i8> %848 to i32, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1211, i32 %1212, ptr addrspace(1) %1209, i1 %25) #4, !dbg !155
  %1213 = bitcast <4 x i8> %730 to i32, !dbg !155
  %1214 = bitcast <4 x i8> %612 to i32, !dbg !155
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1213, i32 %1214, ptr addrspace(1) %1210, i1 %25) #4, !dbg !155
  tail call void @llvm.nvvm.barrier0(), !dbg !156
  %1215 = shl i32 %14, 3, !dbg !157
  %1216 = and i32 %1215, 2040, !dbg !157
  %1217 = and i32 %1095, 1020, !dbg !157
  %1218 = lshr i32 %1216, 4, !dbg !157
  %1219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1218, !dbg !157
  %1220 = getelementptr inbounds float, ptr addrspace(3) %1219, i32 %1216, !dbg !157
  %1221 = bitcast float %493 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1220, <1 x i32> %1221, i1 true) #4, !dbg !157
  %1222 = or disjoint i32 %1216, 1, !dbg !157
  %1223 = getelementptr inbounds float, ptr addrspace(3) %1219, i32 %1222, !dbg !157
  %1224 = bitcast float %489 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1223, <1 x i32> %1224, i1 true) #4, !dbg !157
  %1225 = or disjoint i32 %1216, 2, !dbg !157
  %1226 = getelementptr inbounds float, ptr addrspace(3) %1219, i32 %1225, !dbg !157
  %1227 = bitcast float %485 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1226, <1 x i32> %1227, i1 true) #4, !dbg !157
  %1228 = or disjoint i32 %1216, 3, !dbg !157
  %1229 = getelementptr inbounds float, ptr addrspace(3) %1219, i32 %1228, !dbg !157
  %1230 = bitcast float %481 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1229, <1 x i32> %1230, i1 true) #4, !dbg !157
  %1231 = or disjoint i32 %1216, 4, !dbg !157
  %1232 = getelementptr inbounds float, ptr addrspace(3) %1219, i32 %1231, !dbg !157
  %1233 = bitcast float %477 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1232, <1 x i32> %1233, i1 true) #4, !dbg !157
  %1234 = or disjoint i32 %1216, 5, !dbg !157
  %1235 = getelementptr inbounds float, ptr addrspace(3) %1219, i32 %1234, !dbg !157
  %1236 = bitcast float %473 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1235, <1 x i32> %1236, i1 true) #4, !dbg !157
  %1237 = or disjoint i32 %1216, 6, !dbg !157
  %1238 = getelementptr inbounds float, ptr addrspace(3) %1219, i32 %1237, !dbg !157
  %1239 = bitcast float %469 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1238, <1 x i32> %1239, i1 true) #4, !dbg !157
  %1240 = or disjoint i32 %1216, 7, !dbg !157
  %1241 = getelementptr inbounds float, ptr addrspace(3) %1219, i32 %1240, !dbg !157
  %1242 = bitcast float %465 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1241, <1 x i32> %1242, i1 true) #4, !dbg !157
  tail call void @llvm.nvvm.barrier0(), !dbg !157
  %1243 = lshr i32 %1217, 4, !dbg !157
  %1244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1243, !dbg !157
  %1245 = getelementptr inbounds float, ptr addrspace(3) %1244, i32 %1217, !dbg !157
  %1246 = load i32, ptr addrspace(3) %1245, align 4, !dbg !157
  %1247 = or disjoint i32 %1217, 1, !dbg !157
  %1248 = getelementptr inbounds float, ptr addrspace(3) %1244, i32 %1247, !dbg !157
  %1249 = load i32, ptr addrspace(3) %1248, align 4, !dbg !157
  %1250 = or disjoint i32 %1217, 2, !dbg !157
  %1251 = getelementptr inbounds float, ptr addrspace(3) %1244, i32 %1250, !dbg !157
  %1252 = load i32, ptr addrspace(3) %1251, align 4, !dbg !157
  %1253 = or disjoint i32 %1217, 3, !dbg !157
  %1254 = getelementptr inbounds float, ptr addrspace(3) %1244, i32 %1253, !dbg !157
  %1255 = load i32, ptr addrspace(3) %1254, align 4, !dbg !157
  %1256 = or disjoint i32 %1217, 1024, !dbg !157
  %1257 = lshr i32 %1256, 4, !dbg !157
  %1258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1257, !dbg !157
  %1259 = getelementptr inbounds float, ptr addrspace(3) %1258, i32 %1256, !dbg !157
  %1260 = load i32, ptr addrspace(3) %1259, align 4, !dbg !157
  %1261 = or disjoint i32 %1217, 1025, !dbg !157
  %1262 = lshr i32 %1261, 4, !dbg !157
  %1263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1262, !dbg !157
  %1264 = getelementptr inbounds float, ptr addrspace(3) %1263, i32 %1261, !dbg !157
  %1265 = load i32, ptr addrspace(3) %1264, align 4, !dbg !157
  %1266 = or disjoint i32 %1217, 1026, !dbg !157
  %1267 = lshr i32 %1266, 4, !dbg !157
  %1268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1267, !dbg !157
  %1269 = getelementptr inbounds float, ptr addrspace(3) %1268, i32 %1266, !dbg !157
  %1270 = load i32, ptr addrspace(3) %1269, align 4, !dbg !157
  %1271 = or disjoint i32 %1217, 1027, !dbg !157
  %1272 = lshr i32 %1271, 4, !dbg !157
  %1273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1272, !dbg !157
  %1274 = getelementptr inbounds float, ptr addrspace(3) %1273, i32 %1271, !dbg !157
  %1275 = load i32, ptr addrspace(3) %1274, align 4, !dbg !157
  tail call void @llvm.nvvm.barrier0(), !dbg !157
  %1276 = bitcast float %459 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1220, <1 x i32> %1276, i1 true) #4, !dbg !157
  %1277 = bitcast float %451 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1223, <1 x i32> %1277, i1 true) #4, !dbg !157
  %1278 = bitcast float %443 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1226, <1 x i32> %1278, i1 true) #4, !dbg !157
  %1279 = bitcast float %435 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1229, <1 x i32> %1279, i1 true) #4, !dbg !157
  %1280 = bitcast float %427 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1232, <1 x i32> %1280, i1 true) #4, !dbg !157
  %1281 = bitcast float %419 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1235, <1 x i32> %1281, i1 true) #4, !dbg !157
  %1282 = bitcast float %411 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1238, <1 x i32> %1282, i1 true) #4, !dbg !157
  %1283 = bitcast float %403 to <1 x i32>, !dbg !157
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1241, <1 x i32> %1283, i1 true) #4, !dbg !157
  tail call void @llvm.nvvm.barrier0(), !dbg !157
  %1284 = load i32, ptr addrspace(3) %1245, align 4, !dbg !157
  %1285 = load i32, ptr addrspace(3) %1248, align 4, !dbg !157
  %1286 = load i32, ptr addrspace(3) %1251, align 4, !dbg !157
  %1287 = load i32, ptr addrspace(3) %1254, align 4, !dbg !157
  %1288 = load i32, ptr addrspace(3) %1259, align 4, !dbg !157
  %1289 = load i32, ptr addrspace(3) %1264, align 4, !dbg !157
  %1290 = load i32, ptr addrspace(3) %1269, align 4, !dbg !157
  %1291 = load i32, ptr addrspace(3) %1274, align 4, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1246, i32 %1249, i32 %1252, i32 %1255, ptr addrspace(1) %1122, i1 %1136) #4, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1260, i32 %1265, i32 %1270, i32 %1275, ptr addrspace(1) %1117, i1 %1136) #4, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1284, i32 %1285, i32 %1286, i32 %1287, ptr addrspace(1) %1111, i1 %1136) #4, !dbg !157
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1288, i32 %1289, i32 %1290, i32 %1291, ptr addrspace(1) %1105, i1 %1136) #4, !dbg !157
  %1292 = shl i32 %1128, 8, !dbg !158
  %1293 = shl i32 %1133, 8, !dbg !158
  %1294 = shl i32 %1131, 8, !dbg !158
  %1295 = shl i32 %1129, 8, !dbg !158
  %1296 = mul i32 %1125, 186368, !dbg !159
  %1297 = add i32 %1296, %.decomposed, !dbg !160
  %1298 = add i32 %1297, %1292, !dbg !161
  %1299 = add i32 %1297, %1293, !dbg !161
  %1300 = add i32 %1297, %1294, !dbg !161
  %1301 = add i32 %1297, %1295, !dbg !161
  %1302 = sext i32 %1298 to i64, !dbg !162
  %1303 = getelementptr float, ptr addrspace(1) %8, i64 %1302, !dbg !162
  %1304 = sext i32 %1299 to i64, !dbg !162
  %1305 = getelementptr float, ptr addrspace(1) %8, i64 %1304, !dbg !162
  %1306 = sext i32 %1300 to i64, !dbg !162
  %1307 = getelementptr float, ptr addrspace(1) %8, i64 %1306, !dbg !162
  %1308 = sext i32 %1301 to i64, !dbg !162
  %1309 = getelementptr float, ptr addrspace(1) %8, i64 %1308, !dbg !162
  tail call void @llvm.nvvm.barrier0(), !dbg !163
  %1310 = shl nuw nsw i32 %17, 11, !dbg !163
  %1311 = or disjoint i32 %1310, %16, !dbg !163
  %.idx = shl nuw nsw i32 %17, 7, !dbg !163
  %1312 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !163
  %1313 = getelementptr float, ptr addrspace(3) %1312, i32 %1311, !dbg !163
  %1314 = bitcast float %1193 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1313, <1 x i32> %1314, i1 true) #4, !dbg !163
  %1315 = or disjoint i32 %1311, 256, !dbg !163
  %1316 = lshr i32 %1315, 6, !dbg !163
  %1317 = and i32 %1316, 36, !dbg !163
  %1318 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1317, !dbg !163
  %1319 = getelementptr float, ptr addrspace(3) %1318, i32 %1315, !dbg !163
  %1320 = bitcast float %1194 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1319, <1 x i32> %1320, i1 true) #4, !dbg !163
  %1321 = or disjoint i32 %1311, 512, !dbg !163
  %1322 = lshr i32 %1321, 6, !dbg !163
  %1323 = and i32 %1322, 40, !dbg !163
  %1324 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1323, !dbg !163
  %1325 = getelementptr float, ptr addrspace(3) %1324, i32 %1321, !dbg !163
  %1326 = bitcast float %1195 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1325, <1 x i32> %1326, i1 true) #4, !dbg !163
  %1327 = or disjoint i32 %1311, 768, !dbg !163
  %1328 = lshr i32 %1327, 6, !dbg !163
  %1329 = and i32 %1328, 44, !dbg !163
  %1330 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1329, !dbg !163
  %1331 = getelementptr float, ptr addrspace(3) %1330, i32 %1327, !dbg !163
  %1332 = bitcast float %1196 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1331, <1 x i32> %1332, i1 true) #4, !dbg !163
  %1333 = or disjoint i32 %1311, 1024, !dbg !163
  %1334 = lshr i32 %1333, 6, !dbg !163
  %1335 = and i32 %1334, 48, !dbg !163
  %1336 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1335, !dbg !163
  %1337 = getelementptr float, ptr addrspace(3) %1336, i32 %1333, !dbg !163
  %1338 = bitcast float %1197 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1337, <1 x i32> %1338, i1 true) #4, !dbg !163
  %1339 = or disjoint i32 %1311, 1280, !dbg !163
  %1340 = lshr i32 %1339, 6, !dbg !163
  %1341 = and i32 %1340, 52, !dbg !163
  %1342 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1341, !dbg !163
  %1343 = getelementptr float, ptr addrspace(3) %1342, i32 %1339, !dbg !163
  %1344 = bitcast float %1198 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1343, <1 x i32> %1344, i1 true) #4, !dbg !163
  %1345 = or disjoint i32 %1311, 1536, !dbg !163
  %1346 = lshr i32 %1345, 6, !dbg !163
  %1347 = and i32 %1346, 56, !dbg !163
  %1348 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1347, !dbg !163
  %1349 = getelementptr float, ptr addrspace(3) %1348, i32 %1345, !dbg !163
  %1350 = bitcast float %1199 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1349, <1 x i32> %1350, i1 true) #4, !dbg !163
  %1351 = or disjoint i32 %1311, 1792, !dbg !163
  %1352 = lshr i32 %1351, 6, !dbg !163
  %1353 = and i32 %1352, 60, !dbg !163
  %1354 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1353, !dbg !163
  %1355 = getelementptr float, ptr addrspace(3) %1354, i32 %1351, !dbg !163
  %1356 = bitcast float %1200 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1355, <1 x i32> %1356, i1 true) #4, !dbg !163
  %1357 = or disjoint i32 %1311, 128, !dbg !163
  %1358 = getelementptr float, ptr addrspace(3) %1312, i32 %1357, !dbg !163
  %1359 = bitcast float %1201 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1358, <1 x i32> %1359, i1 true) #4, !dbg !163
  %1360 = or disjoint i32 %1311, 384, !dbg !163
  %1361 = lshr i32 %1360, 6, !dbg !163
  %1362 = and i32 %1361, 36, !dbg !163
  %1363 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1362, !dbg !163
  %1364 = getelementptr float, ptr addrspace(3) %1363, i32 %1360, !dbg !163
  %1365 = bitcast float %1202 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1364, <1 x i32> %1365, i1 true) #4, !dbg !163
  %1366 = or disjoint i32 %1311, 640, !dbg !163
  %1367 = lshr i32 %1366, 6, !dbg !163
  %1368 = and i32 %1367, 40, !dbg !163
  %1369 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1368, !dbg !163
  %1370 = getelementptr float, ptr addrspace(3) %1369, i32 %1366, !dbg !163
  %1371 = bitcast float %1203 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1370, <1 x i32> %1371, i1 true) #4, !dbg !163
  %1372 = or disjoint i32 %1311, 896, !dbg !163
  %1373 = lshr i32 %1372, 6, !dbg !163
  %1374 = and i32 %1373, 44, !dbg !163
  %1375 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1374, !dbg !163
  %1376 = getelementptr float, ptr addrspace(3) %1375, i32 %1372, !dbg !163
  %1377 = bitcast float %1204 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1376, <1 x i32> %1377, i1 true) #4, !dbg !163
  %1378 = or disjoint i32 %1311, 1152, !dbg !163
  %1379 = lshr i32 %1378, 6, !dbg !163
  %1380 = and i32 %1379, 48, !dbg !163
  %1381 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1380, !dbg !163
  %1382 = getelementptr float, ptr addrspace(3) %1381, i32 %1378, !dbg !163
  %1383 = bitcast float %1205 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1382, <1 x i32> %1383, i1 true) #4, !dbg !163
  %1384 = or disjoint i32 %1311, 1408, !dbg !163
  %1385 = lshr i32 %1384, 6, !dbg !163
  %1386 = and i32 %1385, 52, !dbg !163
  %1387 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1386, !dbg !163
  %1388 = getelementptr float, ptr addrspace(3) %1387, i32 %1384, !dbg !163
  %1389 = bitcast float %1206 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1388, <1 x i32> %1389, i1 true) #4, !dbg !163
  %1390 = or disjoint i32 %1311, 1664, !dbg !163
  %1391 = lshr i32 %1390, 6, !dbg !163
  %1392 = and i32 %1391, 56, !dbg !163
  %1393 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1392, !dbg !163
  %1394 = getelementptr float, ptr addrspace(3) %1393, i32 %1390, !dbg !163
  %1395 = bitcast float %1207 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1394, <1 x i32> %1395, i1 true) #4, !dbg !163
  %1396 = or disjoint i32 %1311, 1920, !dbg !163
  %1397 = lshr i32 %1396, 6, !dbg !163
  %1398 = and i32 %1397, 60, !dbg !163
  %1399 = getelementptr float, ptr addrspace(3) @global_smem, i32 %1398, !dbg !163
  %1400 = getelementptr float, ptr addrspace(3) %1399, i32 %1396, !dbg !163
  %1401 = bitcast float %1208 to <1 x i32>, !dbg !163
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1400, <1 x i32> %1401, i1 true) #4, !dbg !163
  tail call void @llvm.nvvm.barrier0(), !dbg !163
  %1402 = lshr i32 %1095, 6, !dbg !163
  %1403 = and i32 %1402, 12, !dbg !163
  %1404 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1403, !dbg !163
  %1405 = getelementptr inbounds float, ptr addrspace(3) %1404, i32 %1217, !dbg !163
  %1406 = lshr i32 %1256, 6, !dbg !163
  %1407 = and i32 %1406, 28, !dbg !163
  %1408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1407, !dbg !163
  %1409 = getelementptr inbounds float, ptr addrspace(3) %1408, i32 %1256, !dbg !163
  %1410 = load <4 x i32>, ptr addrspace(3) %1409, align 16, !dbg !163
  %1411 = or disjoint i32 %1217, 2048, !dbg !163
  %1412 = lshr i32 %1411, 6, !dbg !163
  %1413 = and i32 %1412, 44, !dbg !163
  %1414 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1413, !dbg !163
  %1415 = getelementptr inbounds float, ptr addrspace(3) %1414, i32 %1411, !dbg !163
  %1416 = load <4 x i32>, ptr addrspace(3) %1415, align 16, !dbg !163
  %1417 = or disjoint i32 %1217, 3072, !dbg !163
  %1418 = lshr i32 %1417, 6, !dbg !163
  %1419 = and i32 %1418, 60, !dbg !163
  %1420 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1419, !dbg !163
  %1421 = getelementptr inbounds float, ptr addrspace(3) %1420, i32 %1417, !dbg !163
  %1422 = load <4 x i32>, ptr addrspace(3) %1421, align 16, !dbg !163
  %.extract = load i32, ptr addrspace(3) %1405, align 16, !dbg !163
  %1423 = getelementptr inbounds i8, ptr addrspace(3) %1405, i32 4, !dbg !163
  %.extract23 = load i32, ptr addrspace(3) %1423, align 4, !dbg !163
  %1424 = getelementptr inbounds i8, ptr addrspace(3) %1405, i32 8, !dbg !163
  %.extract24 = load i32, ptr addrspace(3) %1424, align 8, !dbg !163
  %1425 = getelementptr inbounds i8, ptr addrspace(3) %1405, i32 12, !dbg !163
  %.extract25 = load i32, ptr addrspace(3) %1425, align 4, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %1303, i1 %1135) #4, !dbg !163
  %.extract26 = extractelement <4 x i32> %1410, i64 0, !dbg !163
  %.extract27 = extractelement <4 x i32> %1410, i64 1, !dbg !163
  %.extract28 = extractelement <4 x i32> %1410, i64 2, !dbg !163
  %.extract29 = extractelement <4 x i32> %1410, i64 3, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %1305, i1 %1134) #4, !dbg !163
  %.extract30 = extractelement <4 x i32> %1416, i64 0, !dbg !163
  %.extract31 = extractelement <4 x i32> %1416, i64 1, !dbg !163
  %.extract32 = extractelement <4 x i32> %1416, i64 2, !dbg !163
  %.extract33 = extractelement <4 x i32> %1416, i64 3, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %1307, i1 %1132) #4, !dbg !163
  %.extract34 = extractelement <4 x i32> %1422, i64 0, !dbg !163
  %.extract35 = extractelement <4 x i32> %1422, i64 1, !dbg !163
  %.extract36 = extractelement <4 x i32> %1422, i64 2, !dbg !163
  %.extract37 = extractelement <4 x i32> %1422, i64 3, !dbg !163
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract34, i32 %.extract35, i32 %.extract36, i32 %.extract37, ptr addrspace(1) %1309, i1 %1130) #4, !dbg !163
  ret void, !dbg !164
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2ktk7o3iszzameqeugdr3imivwcvh4sg3ao45lshs54pswdywpt.py", directory: "inductor_cache/2k")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 34, column: 44, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 49, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 51, column: 42, scope: !7)
!37 = !DILocation(line: 51, column: 47, scope: !7)
!38 = !DILocation(line: 51, column: 31, scope: !7)
!39 = !DILocation(line: 57, column: 42, scope: !7)
!40 = !DILocation(line: 57, column: 47, scope: !7)
!41 = !DILocation(line: 57, column: 31, scope: !7)
!42 = !DILocation(line: 64, column: 42, scope: !7)
!43 = !DILocation(line: 64, column: 47, scope: !7)
!44 = !DILocation(line: 64, column: 31, scope: !7)
!45 = !DILocation(line: 67, column: 21, scope: !7)
!46 = !DILocation(line: 71, column: 40, scope: !7)
!47 = !DILocation(line: 71, column: 45, scope: !7)
!48 = !DILocation(line: 71, column: 31, scope: !7)
!49 = !DILocation(line: 74, column: 31, scope: !7)
!50 = !DILocation(line: 77, column: 37, scope: !7)
!51 = !DILocation(line: 77, column: 42, scope: !7)
!52 = !DILocation(line: 77, column: 31, scope: !7)
!53 = !DILocation(line: 82, column: 20, scope: !7)
!54 = !DILocation(line: 73, column: 20, scope: !7)
!55 = !DILocation(line: 47, column: 19, scope: !7)
!56 = !DILocation(line: 50, column: 19, scope: !7)
!57 = !DILocation(line: 51, column: 64, scope: !7)
!58 = !DILocation(line: 51, column: 56, scope: !7)
!59 = !DILocation(line: 53, column: 21, scope: !7)
!60 = !DILocation(line: 56, column: 19, scope: !7)
!61 = !DILocation(line: 57, column: 64, scope: !7)
!62 = !DILocation(line: 57, column: 56, scope: !7)
!63 = !DILocation(line: 89, column: 20, scope: !7)
!64 = !DILocation(line: 62, column: 20, scope: !7)
!65 = !DILocation(line: 63, column: 19, scope: !7)
!66 = !DILocation(line: 64, column: 64, scope: !7)
!67 = !DILocation(line: 64, column: 56, scope: !7)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 62, scope: !7)
!70 = !DILocation(line: 71, column: 54, scope: !7)
!71 = !DILocation(line: 74, column: 53, scope: !7)
!72 = !DILocation(line: 74, column: 45, scope: !7)
!73 = !DILocation(line: 76, column: 20, scope: !7)
!74 = !DILocation(line: 77, column: 59, scope: !7)
!75 = !DILocation(line: 77, column: 51, scope: !7)
!76 = !DILocation(line: 83, column: 20, scope: !7)
!77 = !DILocation(line: 84, column: 39, scope: !7)
!78 = !DILocation(line: 84, column: 44, scope: !7)
!79 = !DILocation(line: 84, column: 31, scope: !7)
!80 = !DILocation(line: 84, column: 61, scope: !7)
!81 = !DILocation(line: 84, column: 53, scope: !7)
!82 = !DILocation(line: 86, column: 20, scope: !7)
!83 = !DILocation(line: 87, column: 39, scope: !7)
!84 = !DILocation(line: 87, column: 44, scope: !7)
!85 = !DILocation(line: 87, column: 31, scope: !7)
!86 = !DILocation(line: 87, column: 61, scope: !7)
!87 = !DILocation(line: 87, column: 53, scope: !7)
!88 = !DILocation(line: 90, column: 39, scope: !7)
!89 = !DILocation(line: 90, column: 44, scope: !7)
!90 = !DILocation(line: 90, column: 31, scope: !7)
!91 = !DILocation(line: 90, column: 61, scope: !7)
!92 = !DILocation(line: 90, column: 53, scope: !7)
!93 = !DILocation(line: 120, column: 20, scope: !7)
!94 = !DILocation(line: 121, column: 27, scope: !7)
!95 = !DILocation(line: 117, column: 20, scope: !7)
!96 = !DILocation(line: 118, column: 20, scope: !7)
!97 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !100)
!98 = distinct !DILexicalBlockFile(scope: !7, file: !99, discriminator: 0)
!99 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!100 = !DILocation(line: 58, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !105)
!105 = !DILocation(line: 65, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !110)
!110 = !DILocation(line: 72, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !110)
!114 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !115)
!115 = !DILocation(line: 75, column: 42, scope: !7)
!116 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !115)
!117 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !115)
!118 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !115)
!119 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !120)
!120 = !DILocation(line: 78, column: 42, scope: !7)
!121 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !120)
!122 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !120)
!123 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !120)
!124 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !125)
!125 = !DILocation(line: 85, column: 42, scope: !7)
!126 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !125)
!127 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !125)
!128 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !125)
!129 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !130)
!130 = !DILocation(line: 88, column: 42, scope: !7)
!131 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !130)
!132 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !130)
!133 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !130)
!134 = !DILocation(line: 118, column: 15, scope: !98, inlinedAt: !135)
!135 = !DILocation(line: 91, column: 42, scope: !7)
!136 = !DILocation(line: 95, column: 35, scope: !7)
!137 = !DILocation(line: 98, column: 35, scope: !7)
!138 = !DILocation(line: 101, column: 35, scope: !7)
!139 = !DILocation(line: 104, column: 35, scope: !7)
!140 = !DILocation(line: 107, column: 35, scope: !7)
!141 = !DILocation(line: 110, column: 35, scope: !7)
!142 = !DILocation(line: 113, column: 35, scope: !7)
!143 = !DILocation(line: 116, column: 35, scope: !7)
!144 = !DILocation(line: 120, column: 21, scope: !98, inlinedAt: !135)
!145 = !DILocation(line: 120, column: 16, scope: !98, inlinedAt: !135)
!146 = !DILocation(line: 121, column: 29, scope: !98, inlinedAt: !135)
!147 = !DILocation(line: 32, column: 19, scope: !7)
!148 = !DILocation(line: 33, column: 19, scope: !7)
!149 = !DILocation(line: 123, column: 20, scope: !7)
!150 = !DILocation(line: 126, column: 20, scope: !7)
!151 = !DILocation(line: 127, column: 20, scope: !7)
!152 = !DILocation(line: 128, column: 20, scope: !7)
!153 = !DILocation(line: 129, column: 20, scope: !7)
!154 = !DILocation(line: 130, column: 25, scope: !7)
!155 = !DILocation(line: 130, column: 46, scope: !7)
!156 = !DILocation(line: 131, column: 4, scope: !7)
!157 = !DILocation(line: 132, column: 49, scope: !7)
!158 = !DILocation(line: 133, column: 34, scope: !7)
!159 = !DILocation(line: 133, column: 46, scope: !7)
!160 = !DILocation(line: 133, column: 30, scope: !7)
!161 = !DILocation(line: 133, column: 39, scope: !7)
!162 = !DILocation(line: 133, column: 25, scope: !7)
!163 = !DILocation(line: 133, column: 58, scope: !7)
!164 = !DILocation(line: 133, column: 4, scope: !7)
