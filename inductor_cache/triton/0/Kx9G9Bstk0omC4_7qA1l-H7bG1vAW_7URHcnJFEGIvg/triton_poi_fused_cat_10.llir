; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = sdiv i32 %11, 256, !dbg !14
  %14 = sdiv i32 %12, 256, !dbg !14
  %15 = srem i32 %14, 512, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %16 = sdiv i32 %.frozen, 131072, !dbg !16
  %.frozen2 = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen2, 131072, !dbg !16
  %18 = icmp slt i32 %15, 256, !dbg !17
  %19 = mul i32 %16, 131072, !dbg !18
  %srem.decomposed = sub i32 %.frozen, %19, !dbg !18
  %20 = mul i32 %17, 131072, !dbg !18
  %srem1.decomposed = sub i32 %.frozen2, %20, !dbg !18
  %21 = shl nsw i32 %16, 16, !dbg !19
  %22 = shl nsw i32 %17, 16, !dbg !19
  %23 = add nsw i32 %21, %srem.decomposed, !dbg !20
  %24 = add nsw i32 %22, %srem1.decomposed, !dbg !20
  %25 = sext i32 %23 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = icmp sgt i32 %15, 255, !dbg !22
  %30 = add nsw i32 %15, -256, !dbg !23
  %31 = shl nsw i32 %30, 8, !dbg !24
  %32 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !25
  %33 = insertelement <2 x i32> %32, i32 %13, i64 1, !dbg !25
  %34 = srem <2 x i32> %33, <i32 256, i32 512>, !dbg !25
  %35 = extractelement <2 x i32> %34, i64 1, !dbg !22
  %36 = icmp slt i32 %35, 256, !dbg !17
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #1, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #1, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !26
  %47 = icmp sgt i32 %35, 255, !dbg !22
  %48 = insertelement <2 x i32> <i32 poison, i32 -256>, i32 %21, i64 0, !dbg !27
  %49 = add nsw <2 x i32> %48, %34, !dbg !27
  %50 = extractelement <2 x i32> %49, i64 1, !dbg !24
  %51 = shl nsw i32 %50, 8, !dbg !24
  %52 = extractelement <2 x i32> %49, i64 0, !dbg !28
  %53 = add nsw i32 %52, %51, !dbg !28
  %54 = extractelement <2 x i32> %34, i64 0, !dbg !27
  %55 = add nsw i32 %22, %54, !dbg !27
  %56 = add nsw i32 %55, %31, !dbg !28
  %57 = sext i32 %53 to i64, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !29
  %59 = sext i32 %56 to i64, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !29
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #1, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !30
  %66 = bitcast i32 %62 to float, !dbg !30
  %67 = bitcast i32 %63 to float, !dbg !30
  %68 = bitcast i32 %64 to float, !dbg !30
  %69 = bitcast i32 %65 to float, !dbg !30
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #1, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !30
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !30
  %75 = bitcast i32 %71 to float, !dbg !30
  %76 = bitcast i32 %72 to float, !dbg !30
  %77 = bitcast i32 %73 to float, !dbg !30
  %78 = bitcast i32 %74 to float, !dbg !30
  %79 = sext i32 %50 to i64, !dbg !31
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !31
  %81 = sext i32 %30 to i64, !dbg !31
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !31
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %47, i32 0, i1 %47) #1, !dbg !32
  %84 = bitcast i32 %83 to float, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %47, i32 0, i1 %47) #1, !dbg !32
  %86 = bitcast i32 %85 to float, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %47, i32 0, i1 %47) #1, !dbg !32
  %88 = bitcast i32 %87 to float, !dbg !32
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %47, i32 0, i1 %47) #1, !dbg !32
  %90 = bitcast i32 %89 to float, !dbg !32
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %29, i32 0, i1 %29) #1, !dbg !32
  %92 = bitcast i32 %91 to float, !dbg !32
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %29, i32 0, i1 %29) #1, !dbg !32
  %94 = bitcast i32 %93 to float, !dbg !32
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %29, i32 0, i1 %29) #1, !dbg !32
  %96 = bitcast i32 %95 to float, !dbg !32
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %29, i32 0, i1 %29) #1, !dbg !32
  %98 = bitcast i32 %97 to float, !dbg !32
  %99 = fadd float %66, %84, !dbg !33
  %100 = fadd float %67, %86, !dbg !33
  %101 = fadd float %68, %88, !dbg !33
  %102 = fadd float %69, %90, !dbg !33
  %103 = fadd float %75, %92, !dbg !33
  %104 = fadd float %76, %94, !dbg !33
  %105 = fadd float %77, %96, !dbg !33
  %106 = fadd float %78, %98, !dbg !33
  %107 = sext i32 %11 to i64, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !34
  %109 = sext i32 %12 to i64, !dbg !34
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !34
  %111 = bitcast float %99 to i32, !dbg !35
  %112 = select i1 %36, i32 %38, i32 %111, !dbg !36
  %113 = bitcast float %100 to i32, !dbg !35
  %114 = select i1 %36, i32 %39, i32 %113, !dbg !36
  %115 = bitcast float %101 to i32, !dbg !35
  %116 = select i1 %36, i32 %40, i32 %115, !dbg !36
  %117 = bitcast float %102 to i32, !dbg !35
  %118 = select i1 %36, i32 %41, i32 %117, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %112, i32 %114, i32 %116, i32 %118, ptr addrspace(1) %108, i1 true) #1, !dbg !35
  %119 = bitcast float %103 to i32, !dbg !35
  %120 = select i1 %18, i32 %43, i32 %119, !dbg !36
  %121 = bitcast float %104 to i32, !dbg !35
  %122 = select i1 %18, i32 %44, i32 %121, !dbg !36
  %123 = bitcast float %105 to i32, !dbg !35
  %124 = select i1 %18, i32 %45, i32 %123, !dbg !36
  %125 = bitcast float %106 to i32, !dbg !35
  %126 = select i1 %18, i32 %46, i32 %125, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %120, i32 %122, i32 %124, i32 %126, ptr addrspace(1) %110, i1 true) #1, !dbg !35
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccl7ayv7g5i6oir43lefvrvz7efji2otd3kmp5xdb73hlgb5wrow.py", directory: "inductor_cache/cl")
!4 = !{ptr @triton_poi_fused_cat_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_10", linkageName: "triton_poi_fused_cat_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 52, scope: !7)
!20 = !DILocation(line: 33, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 19, scope: !7)
!23 = !DILocation(line: 37, column: 49, scope: !7)
!24 = !DILocation(line: 37, column: 40, scope: !7)
!25 = !DILocation(line: 25, column: 19, scope: !7)
!26 = !DILocation(line: 33, column: 57, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 55, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 66, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 45, scope: !7)
!33 = !DILocation(line: 39, column: 19, scope: !7)
!34 = !DILocation(line: 43, column: 25, scope: !7)
!35 = !DILocation(line: 43, column: 37, scope: !7)
!36 = !DILocation(line: 42, column: 33, scope: !7)
!37 = !DILocation(line: 43, column: 4, scope: !7)
