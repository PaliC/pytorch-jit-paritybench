; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 62, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = shl i32 %15, 2, !dbg !15
  %17 = lshr i32 %11, 5, !dbg !16
  %18 = and i32 %17, 3, !dbg !16
  %19 = or disjoint i32 %16, %18, !dbg !17
  %20 = icmp slt i32 %19, 4, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %21 = sdiv i32 %.frozen, 1024, !dbg !19
  %22 = mul i32 %21, 1024, !dbg !20
  %.decomposed = sub i32 %.frozen, %22, !dbg !20
  %23 = shl i32 %19, 10, !dbg !21
  %24 = add i32 %23, %.decomposed, !dbg !22
  %25 = shl i32 %21, 12, !dbg !23
  %26 = add i32 %24, %25, !dbg !24
  %27 = sext i32 %26 to i64, !dbg !25
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !25
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %20) #4, !dbg !26
  %30 = sext i32 %.decomposed to i64, !dbg !27
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !27
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !28
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !29
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !30
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !30
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !30
  %37 = bitcast i32 %35 to float, !dbg !30
  %38 = bitcast i32 %36 to float, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !31
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !32
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !33
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !34
  %43 = fadd float %37, 0x3EE4F8B580000000, !dbg !35
  %44 = fadd float %38, 0x3EE4F8B580000000, !dbg !35
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %45, 0, !dbg !36
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %46, 0, !dbg !36
  br i1 %.not.i, label %52, label %47, !dbg !36

47:                                               ; preds = %8
  br i1 %.not1.i, label %50, label %48, !dbg !36

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

52:                                               ; preds = %8
  br i1 %.not1.i, label %55, label %53, !dbg !36

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %48, %50, %53, %55
  %.0.i = phi float [ %49, %48 ], [ %51, %50 ], [ %54, %53 ], [ %56, %55 ], !dbg !36
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i4 = icmp eq i32 %57, 0, !dbg !36
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i7 = icmp eq i32 %58, 0, !dbg !36
  br i1 %.not.i4, label %64, label %59, !dbg !36

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %62, label %60, !dbg !36

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %67, label %65, !dbg !36

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #4, !dbg !36
  br label %__nv_sqrtf.exit8, !dbg !36

__nv_sqrtf.exit8:                                 ; preds = %60, %62, %65, %67
  %.0.i6 = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !36
  %69 = extractvalue { i32, i32 } %29, 1, !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = extractvalue { i32, i32 } %32, 1, !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = fsub float %70, %72, !dbg !37
  %74 = extractvalue { i32, i32 } %29, 0, !dbg !26
  %75 = bitcast i32 %74 to float, !dbg !26
  %76 = extractvalue { i32, i32 } %32, 0, !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = fsub float %75, %77, !dbg !37
  %79 = extractvalue { i32, i32 } %42, 1, !dbg !34
  %80 = bitcast i32 %79 to float, !dbg !34
  %81 = extractvalue { i32, i32 } %42, 0, !dbg !34
  %82 = bitcast i32 %81 to float, !dbg !34
  %83 = extractvalue { i32, i32 } %40, 1, !dbg !32
  %84 = bitcast i32 %83 to float, !dbg !32
  %85 = extractvalue { i32, i32 } %40, 0, !dbg !32
  %86 = bitcast i32 %85 to float, !dbg !32
  %87 = and i32 %12, 2, !dbg !12
  %88 = or disjoint i32 %16, %87, !dbg !17
  %89 = icmp slt i32 %88, 4, !dbg !18
  %90 = lshr i32 %11, 1, !dbg !12
  %91 = and i32 %90, 63, !dbg !12
  %92 = or disjoint i32 %10, %91, !dbg !13
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !38
  %95 = fmul float %78, %93, !dbg !39
  %96 = fmul float %73, %94, !dbg !39
  %97 = fmul float %95, %86, !dbg !40
  %98 = fmul float %96, %84, !dbg !40
  %99 = fadd float %97, %82, !dbg !41
  %100 = fadd float %98, %80, !dbg !41
  %.inv = fcmp ole float %99, 0.000000e+00, !dbg !42
  %101 = select i1 %.inv, float 0.000000e+00, float %99, !dbg !42
  %.inv3 = fcmp ole float %100, 0.000000e+00, !dbg !42
  %102 = select i1 %.inv3, float 0.000000e+00, float %100, !dbg !42
  %103 = fcmp olt float %101, 6.000000e+00, !dbg !46
  %104 = fcmp olt float %102, 6.000000e+00, !dbg !46
  %105 = fcmp uno float %101, 0.000000e+00, !dbg !48
  %106 = fcmp uno float %102, 0.000000e+00, !dbg !48
  %107 = or i1 %103, %105, !dbg !49
  %108 = or i1 %104, %106, !dbg !49
  %109 = shl i32 %92, 2, !dbg !50
  %110 = add i32 %88, %109, !dbg !51
  %111 = sext i32 %110 to i64, !dbg !52
  %112 = getelementptr float, ptr addrspace(1) %5, i64 %111, !dbg !52
  %113 = shl i32 %11, 3, !dbg !53
  %114 = and i32 %113, 248, !dbg !53
  %115 = or disjoint i32 %114, %18, !dbg !53
  %116 = and i32 %12, 254, !dbg !53
  %117 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %114, !dbg !53
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %115, !dbg !53
  %119 = bitcast float %101 to i32, !dbg !53
  %120 = select i1 %107, i32 %119, i32 1086324736, !dbg !54
  %121 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %121, i1 true) #4, !dbg !53
  %122 = or disjoint i32 %115, 4, !dbg !53
  %123 = lshr i32 %122, 2, !dbg !53
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !53
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !53
  %126 = bitcast float %102 to i32, !dbg !53
  %127 = select i1 %108, i32 %126, i32 1086324736, !dbg !54
  %128 = insertelement <1 x i32> poison, i32 %127, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %128, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %129 = lshr i32 %116, 2, !dbg !53
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %129, !dbg !53
  %131 = getelementptr inbounds float, ptr addrspace(3) %130, i32 %116, !dbg !53
  %132 = load i32, ptr addrspace(3) %131, align 4, !dbg !53
  %133 = or disjoint i32 %116, 1, !dbg !53
  %134 = getelementptr inbounds float, ptr addrspace(3) %130, i32 %133, !dbg !53
  %135 = load i32, ptr addrspace(3) %134, align 4, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %132, i32 %135, ptr addrspace(1) %112, i1 %89) #4, !dbg !53
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caxjlbwh7isqbjkvz4uzybgyznzuqnywllimudyhhy4rlig2dkne.py", directory: "inductor_cache/ax")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 110, column: 15, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 112, column: 21, scope: !43, inlinedAt: !47)
!49 = !DILocation(line: 112, column: 16, scope: !43, inlinedAt: !47)
!50 = !DILocation(line: 52, column: 32, scope: !7)
!51 = !DILocation(line: 52, column: 30, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 52, column: 44, scope: !7)
!54 = !DILocation(line: 113, column: 29, scope: !43, inlinedAt: !47)
!55 = !DILocation(line: 52, column: 4, scope: !7)
