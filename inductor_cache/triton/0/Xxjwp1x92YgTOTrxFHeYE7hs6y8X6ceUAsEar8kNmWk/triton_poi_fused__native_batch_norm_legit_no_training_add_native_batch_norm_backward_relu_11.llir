; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %20 = srem i32 %18, 160, !dbg !14
  %21 = srem i32 %19, 160, !dbg !14
  %22 = sext i32 %18 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = sext i32 %19 to i64, !dbg !15
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !15
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !18
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !20
  %36 = sext i32 %20 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !21
  %38 = sext i32 %21 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = bitcast i32 %47 to float, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !27
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !28
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !28
  %70 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !29
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !30
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !30
  %74 = fadd float %49, 0x3EE4F8B580000000, !dbg !31
  %75 = fadd float %50, 0x3EE4F8B580000000, !dbg !31
  %76 = fadd float %51, 0x3EE4F8B580000000, !dbg !31
  %77 = fadd float %52, 0x3EE4F8B580000000, !dbg !31
  %78 = fadd float %58, 0x3EE4F8B580000000, !dbg !31
  %79 = fadd float %59, 0x3EE4F8B580000000, !dbg !31
  %80 = fadd float %60, 0x3EE4F8B580000000, !dbg !31
  %81 = fadd float %61, 0x3EE4F8B580000000, !dbg !31
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %82, 0, !dbg !32
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %83, 0, !dbg !32
  br i1 %.not.i, label %89, label %84, !dbg !32

84:                                               ; preds = %12
  br i1 %.not1.i, label %87, label %85, !dbg !32

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

89:                                               ; preds = %12
  br i1 %.not1.i, label %92, label %90, !dbg !32

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !32
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %94, 0, !dbg !32
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %95, 0, !dbg !32
  br i1 %.not.i1, label %101, label %96, !dbg !32

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %99, label %97, !dbg !32

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %104, label %102, !dbg !32

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %97, %99, %102, %104
  %.0.i3 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !32
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i6 = icmp eq i32 %106, 0, !dbg !32
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i9 = icmp eq i32 %107, 0, !dbg !32
  br i1 %.not.i6, label %113, label %108, !dbg !32

108:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %111, label %109, !dbg !32

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

113:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %116, label %114, !dbg !32

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %109, %111, %114, %116
  %.0.i8 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !32
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i11 = icmp eq i32 %118, 0, !dbg !32
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i14 = icmp eq i32 %119, 0, !dbg !32
  br i1 %.not.i11, label %125, label %120, !dbg !32

120:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %123, label %121, !dbg !32

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

125:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %128, label %126, !dbg !32

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %121, %123, %126, %128
  %.0.i13 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !32
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i16 = icmp eq i32 %130, 0, !dbg !32
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i19 = icmp eq i32 %131, 0, !dbg !32
  br i1 %.not.i16, label %137, label %132, !dbg !32

132:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %135, label %133, !dbg !32

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

137:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %140, label %138, !dbg !32

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

__nv_sqrtf.exit20:                                ; preds = %133, %135, %138, %140
  %.0.i18 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !32
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i21 = icmp eq i32 %142, 0, !dbg !32
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i24 = icmp eq i32 %143, 0, !dbg !32
  br i1 %.not.i21, label %149, label %144, !dbg !32

144:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %147, label %145, !dbg !32

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

149:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %152, label %150, !dbg !32

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

__nv_sqrtf.exit25:                                ; preds = %145, %147, %150, %152
  %.0.i23 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !32
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i26 = icmp eq i32 %154, 0, !dbg !32
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i29 = icmp eq i32 %155, 0, !dbg !32
  br i1 %.not.i26, label %161, label %156, !dbg !32

156:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %159, label %157, !dbg !32

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

161:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %164, label %162, !dbg !32

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

__nv_sqrtf.exit30:                                ; preds = %157, %159, %162, %164
  %.0.i28 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !32
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i31 = icmp eq i32 %166, 0, !dbg !32
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i34 = icmp eq i32 %167, 0, !dbg !32
  br i1 %.not.i31, label %173, label %168, !dbg !32

168:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %171, label %169, !dbg !32

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

173:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %176, label %174, !dbg !32

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

__nv_sqrtf.exit35:                                ; preds = %169, %171, %174, %176
  %.0.i33 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !32
  %178 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %179 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %180 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %181 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %182 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %183 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %184 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %185 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %186 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %187 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %188 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %189 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %190 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %191 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %192 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %193 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %194 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %195 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %196 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %197 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %198 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %199 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %200 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %201 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %202 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %203 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %204 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %205 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %206 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %207 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %208 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %209 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %210 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !30
  %211 = bitcast i32 %210 to float, !dbg !30
  %212 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !30
  %213 = bitcast i32 %212 to float, !dbg !30
  %214 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !30
  %215 = bitcast i32 %214 to float, !dbg !30
  %216 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !30
  %217 = bitcast i32 %216 to float, !dbg !30
  %218 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !30
  %219 = bitcast i32 %218 to float, !dbg !30
  %220 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !30
  %221 = bitcast i32 %220 to float, !dbg !30
  %222 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !30
  %223 = bitcast i32 %222 to float, !dbg !30
  %224 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !30
  %225 = bitcast i32 %224 to float, !dbg !30
  %226 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !28
  %227 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !28
  %228 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !28
  %229 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !28
  %230 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !28
  %231 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !28
  %232 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !28
  %233 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !28
  %234 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %235 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %236 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %237 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %238 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %239 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %240 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %241 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !33
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !33
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !33
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !33
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !33
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !33
  %250 = insertelement <8 x i32> poison, i32 %178, i64 0, !dbg !16
  %251 = insertelement <8 x i32> %250, i32 %182, i64 1, !dbg !16
  %252 = insertelement <8 x i32> %251, i32 %186, i64 2, !dbg !16
  %253 = insertelement <8 x i32> %252, i32 %190, i64 3, !dbg !16
  %254 = insertelement <8 x i32> %253, i32 %194, i64 4, !dbg !16
  %255 = insertelement <8 x i32> %254, i32 %198, i64 5, !dbg !16
  %256 = insertelement <8 x i32> %255, i32 %202, i64 6, !dbg !16
  %257 = insertelement <8 x i32> %256, i32 %206, i64 7, !dbg !16
  %258 = bitcast <8 x i32> %257 to <8 x float>, !dbg !16
  %259 = insertelement <8 x i32> poison, i32 %179, i64 0, !dbg !18
  %260 = insertelement <8 x i32> %259, i32 %183, i64 1, !dbg !18
  %261 = insertelement <8 x i32> %260, i32 %187, i64 2, !dbg !18
  %262 = insertelement <8 x i32> %261, i32 %191, i64 3, !dbg !18
  %263 = insertelement <8 x i32> %262, i32 %195, i64 4, !dbg !18
  %264 = insertelement <8 x i32> %263, i32 %199, i64 5, !dbg !18
  %265 = insertelement <8 x i32> %264, i32 %203, i64 6, !dbg !18
  %266 = insertelement <8 x i32> %265, i32 %207, i64 7, !dbg !18
  %267 = bitcast <8 x i32> %266 to <8 x float>, !dbg !18
  %268 = fadd <8 x float> %258, %267, !dbg !34
  %269 = insertelement <8 x i32> poison, i32 %180, i64 0, !dbg !20
  %270 = insertelement <8 x i32> %269, i32 %184, i64 1, !dbg !20
  %271 = insertelement <8 x i32> %270, i32 %188, i64 2, !dbg !20
  %272 = insertelement <8 x i32> %271, i32 %192, i64 3, !dbg !20
  %273 = insertelement <8 x i32> %272, i32 %196, i64 4, !dbg !20
  %274 = insertelement <8 x i32> %273, i32 %200, i64 5, !dbg !20
  %275 = insertelement <8 x i32> %274, i32 %204, i64 6, !dbg !20
  %276 = insertelement <8 x i32> %275, i32 %208, i64 7, !dbg !20
  %277 = bitcast <8 x i32> %276 to <8 x float>, !dbg !20
  %278 = fadd <8 x float> %268, %277, !dbg !35
  %279 = insertelement <8 x i32> poison, i32 %181, i64 0, !dbg !22
  %280 = insertelement <8 x i32> %279, i32 %185, i64 1, !dbg !22
  %281 = insertelement <8 x i32> %280, i32 %189, i64 2, !dbg !22
  %282 = insertelement <8 x i32> %281, i32 %193, i64 3, !dbg !22
  %283 = insertelement <8 x i32> %282, i32 %197, i64 4, !dbg !22
  %284 = insertelement <8 x i32> %283, i32 %201, i64 5, !dbg !22
  %285 = insertelement <8 x i32> %284, i32 %205, i64 6, !dbg !22
  %286 = insertelement <8 x i32> %285, i32 %209, i64 7, !dbg !22
  %287 = bitcast <8 x i32> %286 to <8 x float>, !dbg !22
  %288 = fsub <8 x float> %278, %287, !dbg !36
  %289 = insertelement <8 x i32> poison, i32 %226, i64 0, !dbg !28
  %290 = insertelement <8 x i32> %289, i32 %227, i64 1, !dbg !28
  %291 = insertelement <8 x i32> %290, i32 %228, i64 2, !dbg !28
  %292 = insertelement <8 x i32> %291, i32 %229, i64 3, !dbg !28
  %293 = insertelement <8 x i32> %292, i32 %230, i64 4, !dbg !28
  %294 = insertelement <8 x i32> %293, i32 %231, i64 5, !dbg !28
  %295 = insertelement <8 x i32> %294, i32 %232, i64 6, !dbg !28
  %296 = insertelement <8 x i32> %295, i32 %233, i64 7, !dbg !28
  %297 = bitcast <8 x i32> %296 to <8 x float>, !dbg !28
  %298 = insertelement <8 x i32> poison, i32 %234, i64 0, !dbg !26
  %299 = insertelement <8 x i32> %298, i32 %235, i64 1, !dbg !26
  %300 = insertelement <8 x i32> %299, i32 %236, i64 2, !dbg !26
  %301 = insertelement <8 x i32> %300, i32 %237, i64 3, !dbg !26
  %302 = insertelement <8 x i32> %301, i32 %238, i64 4, !dbg !26
  %303 = insertelement <8 x i32> %302, i32 %239, i64 5, !dbg !26
  %304 = insertelement <8 x i32> %303, i32 %240, i64 6, !dbg !26
  %305 = insertelement <8 x i32> %304, i32 %241, i64 7, !dbg !26
  %306 = bitcast <8 x i32> %305 to <8 x float>, !dbg !26
  %307 = insertelement <8 x float> poison, float %249, i64 0, !dbg !37
  %308 = insertelement <8 x float> %307, float %248, i64 1, !dbg !37
  %309 = insertelement <8 x float> %308, float %247, i64 2, !dbg !37
  %310 = insertelement <8 x float> %309, float %246, i64 3, !dbg !37
  %311 = insertelement <8 x float> %310, float %245, i64 4, !dbg !37
  %312 = insertelement <8 x float> %311, float %244, i64 5, !dbg !37
  %313 = insertelement <8 x float> %312, float %243, i64 6, !dbg !37
  %314 = insertelement <8 x float> %313, float %242, i64 7, !dbg !37
  %315 = fmul <8 x float> %288, %314, !dbg !37
  %316 = fmul <8 x float> %315, %306, !dbg !38
  %317 = fadd <8 x float> %316, %297, !dbg !39
  %318 = fcmp olt <8 x float> %317, zeroinitializer, !dbg !40
  %319 = extractelement <8 x i1> %318, i64 7, !dbg !44
  %320 = extractelement <8 x i1> %318, i64 6, !dbg !44
  %321 = extractelement <8 x i1> %318, i64 5, !dbg !44
  %322 = extractelement <8 x i1> %318, i64 4, !dbg !44
  %323 = extractelement <8 x i1> %318, i64 3, !dbg !44
  %324 = extractelement <8 x i1> %318, i64 2, !dbg !44
  %325 = extractelement <8 x i1> %318, i64 1, !dbg !44
  %326 = extractelement <8 x i1> %318, i64 0, !dbg !44
  %327 = extractelement <8 x float> %268, i64 7, !dbg !45
  %328 = fsub float %327, %225, !dbg !45
  %329 = extractelement <8 x float> %268, i64 6, !dbg !45
  %330 = fsub float %329, %223, !dbg !45
  %331 = extractelement <8 x float> %268, i64 5, !dbg !45
  %332 = fsub float %331, %221, !dbg !45
  %333 = extractelement <8 x float> %268, i64 4, !dbg !45
  %334 = fsub float %333, %219, !dbg !45
  %335 = extractelement <8 x float> %268, i64 3, !dbg !45
  %336 = fsub float %335, %217, !dbg !45
  %337 = extractelement <8 x float> %268, i64 2, !dbg !45
  %338 = fsub float %337, %215, !dbg !45
  %339 = extractelement <8 x float> %268, i64 1, !dbg !45
  %340 = fsub float %339, %213, !dbg !45
  %341 = extractelement <8 x float> %268, i64 0, !dbg !45
  %342 = fsub float %341, %211, !dbg !45
  %343 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !46
  %344 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !46
  %bc = bitcast <8 x float> %317 to <8 x i32>, !dbg !47
  %345 = extractelement <8 x i32> %bc, i64 7, !dbg !47
  %346 = select i1 %319, i32 0, i32 %345, !dbg !44
  %bc36 = bitcast <8 x float> %317 to <8 x i32>, !dbg !47
  %347 = extractelement <8 x i32> %bc36, i64 6, !dbg !47
  %348 = select i1 %320, i32 0, i32 %347, !dbg !44
  %bc37 = bitcast <8 x float> %317 to <8 x i32>, !dbg !47
  %349 = extractelement <8 x i32> %bc37, i64 5, !dbg !47
  %350 = select i1 %321, i32 0, i32 %349, !dbg !44
  %bc38 = bitcast <8 x float> %317 to <8 x i32>, !dbg !47
  %351 = extractelement <8 x i32> %bc38, i64 4, !dbg !47
  %352 = select i1 %322, i32 0, i32 %351, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %346, i32 %348, i32 %350, i32 %352, ptr addrspace(1) %343, i1 true) #3, !dbg !47
  %bc39 = bitcast <8 x float> %317 to <8 x i32>, !dbg !47
  %353 = extractelement <8 x i32> %bc39, i64 3, !dbg !47
  %354 = select i1 %323, i32 0, i32 %353, !dbg !44
  %bc40 = bitcast <8 x float> %317 to <8 x i32>, !dbg !47
  %355 = extractelement <8 x i32> %bc40, i64 2, !dbg !47
  %356 = select i1 %324, i32 0, i32 %355, !dbg !44
  %bc41 = bitcast <8 x float> %317 to <8 x i32>, !dbg !47
  %357 = extractelement <8 x i32> %bc41, i64 1, !dbg !47
  %358 = select i1 %325, i32 0, i32 %357, !dbg !44
  %bc42 = bitcast <8 x float> %317 to <8 x i32>, !dbg !47
  %359 = extractelement <8 x i32> %bc42, i64 0, !dbg !47
  %360 = select i1 %326, i32 0, i32 %359, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %354, i32 %356, i32 %358, i32 %360, ptr addrspace(1) %344, i1 true) #3, !dbg !47
  %361 = getelementptr float, ptr addrspace(1) %9, i64 %22, !dbg !48
  %362 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !48
  %bc43 = bitcast <8 x float> %288 to <8 x i32>, !dbg !49
  %363 = extractelement <8 x i32> %bc43, i64 7, !dbg !49
  %bc44 = bitcast <8 x float> %288 to <8 x i32>, !dbg !49
  %364 = extractelement <8 x i32> %bc44, i64 6, !dbg !49
  %bc45 = bitcast <8 x float> %288 to <8 x i32>, !dbg !49
  %365 = extractelement <8 x i32> %bc45, i64 5, !dbg !49
  %bc46 = bitcast <8 x float> %288 to <8 x i32>, !dbg !49
  %366 = extractelement <8 x i32> %bc46, i64 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %363, i32 %364, i32 %365, i32 %366, ptr addrspace(1) %361, i1 true) #3, !dbg !49
  %bc47 = bitcast <8 x float> %288 to <8 x i32>, !dbg !49
  %367 = extractelement <8 x i32> %bc47, i64 3, !dbg !49
  %bc48 = bitcast <8 x float> %288 to <8 x i32>, !dbg !49
  %368 = extractelement <8 x i32> %bc48, i64 2, !dbg !49
  %bc49 = bitcast <8 x float> %288 to <8 x i32>, !dbg !49
  %369 = extractelement <8 x i32> %bc49, i64 1, !dbg !49
  %bc50 = bitcast <8 x float> %288 to <8 x i32>, !dbg !49
  %370 = extractelement <8 x i32> %bc50, i64 0, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %367, i32 %368, i32 %369, i32 %370, ptr addrspace(1) %362, i1 true) #3, !dbg !49
  %371 = getelementptr float, ptr addrspace(1) %10, i64 %22, !dbg !50
  %372 = getelementptr float, ptr addrspace(1) %10, i64 %24, !dbg !50
  %373 = bitcast float %328 to i32, !dbg !51
  %374 = bitcast float %330 to i32, !dbg !51
  %375 = bitcast float %332 to i32, !dbg !51
  %376 = bitcast float %334 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %373, i32 %374, i32 %375, i32 %376, ptr addrspace(1) %371, i1 true) #3, !dbg !51
  %377 = bitcast float %336 to i32, !dbg !51
  %378 = bitcast float %338 to i32, !dbg !51
  %379 = bitcast float %340 to i32, !dbg !51
  %380 = bitcast float %342 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %377, i32 %378, i32 %379, i32 %380, ptr addrspace(1) %372, i1 true) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crxpdkf5finplavap3ronha22snexkfafwarngyv6elan26ynum7.py", directory: "inductor_cache/rx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 27, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 44, column: 19, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 48, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 49, column: 19, scope: !7)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 37, scope: !7)
!48 = !DILocation(line: 51, column: 25, scope: !7)
!49 = !DILocation(line: 51, column: 36, scope: !7)
!50 = !DILocation(line: 52, column: 25, scope: !7)
!51 = !DILocation(line: 52, column: 37, scope: !7)
!52 = !DILocation(line: 52, column: 4, scope: !7)
