#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [8, 1], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 4], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 16], threadsPerWarp = [32, 1], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_max_pool2d_with_indices_11(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":19:0), %arg2: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1> : tensor<256x16xi8, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<256x16xi8, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2> : tensor<256x16xi8, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<3> : tensor<256x16xi8, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<256> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<256> : tensor<1x16xi32, #blocked2> loc(#loc1)
    %cst_6 = arith.constant dense<1024> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<1024> : tensor<256x1xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<1024> : tensor<256x1xi32, #blocked2> loc(#loc1)
    %cst_9 = arith.constant dense<32> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<64> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<64> : tensor<1x16xi32, #blocked2> loc(#loc1)
    %cst_12 = arith.constant dense<2> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<128> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<4096> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<1> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_16 = arith.constant dense<64> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_17 = arith.constant dense<64> : tensor<256x1xi32, #blocked1> loc(#loc1)
    %cst_18 = arith.constant dense<64> : tensor<256x1xi32, #blocked2> loc(#loc1)
    %cst_19 = arith.constant dense<65> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_20 = arith.constant dense<65536> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_21 = arith.constant dense<65536> : tensor<1x16xi32, #blocked2> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %6 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %7 = tt.expand_dims %4 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x16xi32, #blocked2> loc(#loc4)
    %8 = tt.splat %1 : i32 -> tensor<1x16xi32, #blocked> loc(#loc5)
    %9 = tt.splat %1 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc5)
    %10 = tt.splat %1 : i32 -> tensor<1x16xi32, #blocked2> loc(#loc5)
    %11 = arith.addi %8, %5 : tensor<1x16xi32, #blocked> loc(#loc5)
    %12 = arith.addi %9, %6 : tensor<1x16xi32, #blocked1> loc(#loc5)
    %13 = arith.addi %10, %7 : tensor<1x16xi32, #blocked2> loc(#loc5)
    %14 = arith.cmpi slt, %11, %cst_3 : tensor<1x16xi32, #blocked> loc(#loc6)
    %15 = arith.cmpi slt, %12, %cst_4 : tensor<1x16xi32, #blocked1> loc(#loc6)
    %16 = arith.cmpi slt, %13, %cst_5 : tensor<1x16xi32, #blocked2> loc(#loc6)
    %17 = tt.get_program_id x : i32 loc(#loc7)
    %18 = arith.muli %17, %c256_i32 : i32 loc(#loc8)
    %19 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %20 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc9)
    %21 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc9)
    %22 = tt.expand_dims %19 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked> loc(#loc9)
    %23 = tt.expand_dims %20 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc9)
    %24 = tt.expand_dims %21 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<256x1xi32, #blocked2> loc(#loc9)
    %25 = tt.splat %18 : i32 -> tensor<256x1xi32, #blocked> loc(#loc10)
    %26 = tt.splat %18 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc10)
    %27 = tt.splat %18 : i32 -> tensor<256x1xi32, #blocked2> loc(#loc10)
    %28 = arith.addi %25, %22 : tensor<256x1xi32, #blocked> loc(#loc10)
    %29 = arith.addi %26, %23 : tensor<256x1xi32, #blocked1> loc(#loc10)
    %30 = arith.addi %27, %24 : tensor<256x1xi32, #blocked2> loc(#loc10)
    %31 = arith.cmpi slt, %28, %cst_6 : tensor<256x1xi32, #blocked> loc(#loc11)
    %32 = arith.cmpi slt, %29, %cst_7 : tensor<256x1xi32, #blocked1> loc(#loc11)
    %33 = arith.cmpi slt, %30, %cst_8 : tensor<256x1xi32, #blocked2> loc(#loc11)
    %34 = arith.remsi %28, %cst_9 : tensor<256x1xi32, #blocked> loc(#loc12)
    %35 = arith.divsi %28, %cst_9 : tensor<256x1xi32, #blocked> loc(#loc13)
    %36 = arith.remsi %12, %cst_10 : tensor<1x16xi32, #blocked1> loc(#loc14)
    %37 = arith.remsi %13, %cst_11 : tensor<1x16xi32, #blocked2> loc(#loc14)
    %38 = arith.divsi %12, %cst_10 : tensor<1x16xi32, #blocked1> loc(#loc15)
    %39 = arith.divsi %13, %cst_11 : tensor<1x16xi32, #blocked2> loc(#loc15)
    %40 = arith.muli %34, %cst_12 : tensor<256x1xi32, #blocked> loc(#loc16)
    %41 = arith.muli %35, %cst_13 : tensor<256x1xi32, #blocked> loc(#loc17)
    %42 = arith.addi %40, %41 : tensor<256x1xi32, #blocked> loc(#loc18)
    %43 = arith.muli %11, %cst_14 : tensor<1x16xi32, #blocked> loc(#loc19)
    %44 = tt.broadcast %42 : tensor<256x1xi32, #blocked> -> tensor<256x16xi32, #blocked> loc(#loc20)
    %45 = tt.broadcast %43 : tensor<1x16xi32, #blocked> -> tensor<256x16xi32, #blocked> loc(#loc20)
    %46 = arith.addi %44, %45 : tensor<256x16xi32, #blocked> loc(#loc20)
    %47 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x16x!tt.ptr<f32>, #blocked> loc(#loc21)
    %48 = tt.addptr %47, %46 : tensor<256x16x!tt.ptr<f32>, #blocked>, tensor<256x16xi32, #blocked> loc(#loc21)
    %49 = tt.broadcast %31 : tensor<256x1xi1, #blocked> -> tensor<256x16xi1, #blocked> loc(#loc22)
    %50 = tt.broadcast %32 : tensor<256x1xi1, #blocked1> -> tensor<256x16xi1, #blocked1> loc(#loc22)
    %51 = tt.broadcast %33 : tensor<256x1xi1, #blocked2> -> tensor<256x16xi1, #blocked2> loc(#loc22)
    %52 = tt.broadcast %14 : tensor<1x16xi1, #blocked> -> tensor<256x16xi1, #blocked> loc(#loc22)
    %53 = tt.broadcast %15 : tensor<1x16xi1, #blocked1> -> tensor<256x16xi1, #blocked1> loc(#loc22)
    %54 = tt.broadcast %16 : tensor<1x16xi1, #blocked2> -> tensor<256x16xi1, #blocked2> loc(#loc22)
    %55 = arith.andi %49, %52 : tensor<256x16xi1, #blocked> loc(#loc22)
    %56 = arith.andi %50, %53 : tensor<256x16xi1, #blocked1> loc(#loc22)
    %57 = arith.andi %51, %54 : tensor<256x16xi1, #blocked2> loc(#loc22)
    %58 = tt.load %48, %55 evictionPolicy = evict_last : tensor<256x16x!tt.ptr<f32>, #blocked> loc(#loc23)
    %59 = arith.addi %40, %cst_15 : tensor<256x1xi32, #blocked> loc(#loc24)
    %60 = arith.addi %59, %41 : tensor<256x1xi32, #blocked> loc(#loc25)
    %61 = tt.broadcast %60 : tensor<256x1xi32, #blocked> -> tensor<256x16xi32, #blocked> loc(#loc26)
    %62 = arith.addi %61, %45 : tensor<256x16xi32, #blocked> loc(#loc26)
    %63 = tt.addptr %47, %62 : tensor<256x16x!tt.ptr<f32>, #blocked>, tensor<256x16xi32, #blocked> loc(#loc27)
    %64 = tt.load %63, %55 evictionPolicy = evict_last : tensor<256x16x!tt.ptr<f32>, #blocked> loc(#loc28)
    %65 = arith.addi %40, %cst_16 : tensor<256x1xi32, #blocked> loc(#loc29)
    %66 = arith.addi %65, %41 : tensor<256x1xi32, #blocked> loc(#loc30)
    %67 = tt.broadcast %66 : tensor<256x1xi32, #blocked> -> tensor<256x16xi32, #blocked> loc(#loc31)
    %68 = arith.addi %67, %45 : tensor<256x16xi32, #blocked> loc(#loc31)
    %69 = tt.addptr %47, %68 : tensor<256x16x!tt.ptr<f32>, #blocked>, tensor<256x16xi32, #blocked> loc(#loc32)
    %70 = tt.load %69, %55 evictionPolicy = evict_last : tensor<256x16x!tt.ptr<f32>, #blocked> loc(#loc33)
    %71 = arith.addi %40, %cst_19 : tensor<256x1xi32, #blocked> loc(#loc34)
    %72 = arith.addi %71, %41 : tensor<256x1xi32, #blocked> loc(#loc35)
    %73 = tt.broadcast %72 : tensor<256x1xi32, #blocked> -> tensor<256x16xi32, #blocked> loc(#loc36)
    %74 = arith.addi %73, %45 : tensor<256x16xi32, #blocked> loc(#loc36)
    %75 = tt.addptr %47, %74 : tensor<256x16x!tt.ptr<f32>, #blocked>, tensor<256x16xi32, #blocked> loc(#loc37)
    %76 = tt.load %75, %55 evictionPolicy = evict_last : tensor<256x16x!tt.ptr<f32>, #blocked> loc(#loc38)
    %77 = arith.cmpf ogt, %64, %58 : tensor<256x16xf32, #blocked> loc(#loc58)
    %78 = arith.cmpf une, %64, %64 : tensor<256x16xf32, #blocked> loc(#loc59)
    %79 = arith.ori %77, %78 : tensor<256x16xi1, #blocked> loc(#loc60)
    %80 = arith.select %79, %64, %58 : tensor<256x16xi1, #blocked>, tensor<256x16xf32, #blocked> loc(#loc61)
    %81 = arith.cmpf ogt, %70, %80 : tensor<256x16xf32, #blocked> loc(#loc62)
    %82 = arith.cmpf une, %70, %70 : tensor<256x16xf32, #blocked> loc(#loc63)
    %83 = arith.ori %81, %82 : tensor<256x16xi1, #blocked> loc(#loc64)
    %84 = arith.select %83, %70, %80 : tensor<256x16xi1, #blocked>, tensor<256x16xf32, #blocked> loc(#loc65)
    %85 = arith.cmpf ogt, %76, %84 : tensor<256x16xf32, #blocked> loc(#loc66)
    %86 = arith.cmpf une, %76, %76 : tensor<256x16xf32, #blocked> loc(#loc67)
    %87 = arith.ori %85, %86 : tensor<256x16xi1, #blocked> loc(#loc68)
    %88 = arith.select %87, %76, %84 : tensor<256x16xi1, #blocked>, tensor<256x16xf32, #blocked> loc(#loc69)
    %89 = arith.select %77, %cst, %cst_0 : tensor<256x16xi1, #blocked>, tensor<256x16xi8, #blocked> loc(#loc46)
    %90 = arith.select %81, %cst_1, %89 : tensor<256x16xi1, #blocked>, tensor<256x16xi8, #blocked> loc(#loc47)
    %91 = arith.select %85, %cst_2, %90 : tensor<256x16xi1, #blocked>, tensor<256x16xi8, #blocked> loc(#loc48)
    %92 = arith.muli %29, %cst_17 : tensor<256x1xi32, #blocked1> loc(#loc49)
    %93 = arith.muli %30, %cst_18 : tensor<256x1xi32, #blocked2> loc(#loc49)
    %94 = tt.broadcast %36 : tensor<1x16xi32, #blocked1> -> tensor<256x16xi32, #blocked1> loc(#loc50)
    %95 = tt.broadcast %37 : tensor<1x16xi32, #blocked2> -> tensor<256x16xi32, #blocked2> loc(#loc50)
    %96 = tt.broadcast %92 : tensor<256x1xi32, #blocked1> -> tensor<256x16xi32, #blocked1> loc(#loc50)
    %97 = tt.broadcast %93 : tensor<256x1xi32, #blocked2> -> tensor<256x16xi32, #blocked2> loc(#loc50)
    %98 = arith.addi %94, %96 : tensor<256x16xi32, #blocked1> loc(#loc50)
    %99 = arith.addi %95, %97 : tensor<256x16xi32, #blocked2> loc(#loc50)
    %100 = arith.muli %38, %cst_20 : tensor<1x16xi32, #blocked1> loc(#loc51)
    %101 = arith.muli %39, %cst_21 : tensor<1x16xi32, #blocked2> loc(#loc51)
    %102 = tt.broadcast %100 : tensor<1x16xi32, #blocked1> -> tensor<256x16xi32, #blocked1> loc(#loc52)
    %103 = tt.broadcast %101 : tensor<1x16xi32, #blocked2> -> tensor<256x16xi32, #blocked2> loc(#loc52)
    %104 = arith.addi %98, %102 : tensor<256x16xi32, #blocked1> loc(#loc52)
    %105 = arith.addi %99, %103 : tensor<256x16xi32, #blocked2> loc(#loc52)
    %106 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x16x!tt.ptr<f32>, #blocked1> loc(#loc53)
    %107 = tt.addptr %106, %104 : tensor<256x16x!tt.ptr<f32>, #blocked1>, tensor<256x16xi32, #blocked1> loc(#loc53)
    %108 = triton_gpu.convert_layout %88 : tensor<256x16xf32, #blocked> -> tensor<256x16xf32, #blocked1> loc(#loc54)
    tt.store %107, %108, %56 : tensor<256x16x!tt.ptr<f32>, #blocked1> loc(#loc54)
    %109 = tt.splat %arg2 : !tt.ptr<i8> -> tensor<256x16x!tt.ptr<i8>, #blocked2> loc(#loc55)
    %110 = tt.addptr %109, %105 : tensor<256x16x!tt.ptr<i8>, #blocked2>, tensor<256x16xi32, #blocked2> loc(#loc55)
    %111 = triton_gpu.convert_layout %91 : tensor<256x16xi8, #blocked> -> tensor<256x16xi8, #blocked2> loc(#loc56)
    tt.store %110, %111, %57 : tensor<256x16x!tt.ptr<i8>, #blocked2> loc(#loc56)
    tt.return loc(#loc57)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":22:28)
#loc3 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":22:33)
#loc4 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":23:44)
#loc5 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":23:23)
#loc6 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":24:21)
#loc7 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":25:28)
#loc8 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":25:33)
#loc9 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":26:44)
#loc10 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":26:23)
#loc11 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":27:21)
#loc12 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":28:19)
#loc13 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":29:19)
#loc14 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":32:19)
#loc15 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":33:19)
#loc16 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":34:32)
#loc17 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":34:41)
#loc18 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":34:37)
#loc19 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":34:51)
#loc20 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":34:46)
#loc21 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":34:30)
#loc22 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":34:64)
#loc23 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":34:56)
#loc24 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":35:34)
#loc25 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":35:41)
#loc26 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":35:50)
#loc27 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":35:30)
#loc28 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":35:60)
#loc29 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":36:35)
#loc30 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":36:42)
#loc31 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":36:51)
#loc32 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":36:30)
#loc33 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":36:61)
#loc34 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":37:35)
#loc35 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":37:42)
#loc36 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":37:51)
#loc37 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":37:30)
#loc38 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":37:61)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc40 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":38:40)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc44 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":39:40)
#loc45 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":40:40)
#loc46 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":44:33)
#loc47 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":47:35)
#loc48 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":50:35)
#loc49 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":51:33)
#loc50 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":51:30)
#loc51 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":51:44)
#loc52 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":51:38)
#loc53 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":51:25)
#loc54 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":51:55)
#loc55 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":52:25)
#loc56 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":52:56)
#loc57 = loc("inductor_cache/ox/coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py":52:4)
#loc58 = loc(callsite(#loc39 at #loc40))
#loc59 = loc(callsite(#loc41 at #loc40))
#loc60 = loc(callsite(#loc42 at #loc40))
#loc61 = loc(callsite(#loc43 at #loc40))
#loc62 = loc(callsite(#loc39 at #loc44))
#loc63 = loc(callsite(#loc41 at #loc44))
#loc64 = loc(callsite(#loc42 at #loc44))
#loc65 = loc(callsite(#loc43 at #loc44))
#loc66 = loc(callsite(#loc39 at #loc45))
#loc67 = loc(callsite(#loc41 at #loc45))
#loc68 = loc(callsite(#loc42 at #loc45))
#loc69 = loc(callsite(#loc43 at #loc45))
