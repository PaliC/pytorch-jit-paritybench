; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = or disjoint i32 %7, 1, !dbg !13
  %12 = or disjoint i32 %7, 2, !dbg !13
  %13 = or disjoint i32 %7, 3, !dbg !13
  %14 = or disjoint i32 %7, 4, !dbg !13
  %15 = or disjoint i32 %7, 5, !dbg !13
  %16 = or disjoint i32 %7, 6, !dbg !13
  %17 = or disjoint i32 %7, 7, !dbg !13
  %18 = or disjoint i32 %7, 8, !dbg !13
  %19 = or disjoint i32 %7, 9, !dbg !13
  %20 = or disjoint i32 %7, 10, !dbg !13
  %21 = or disjoint i32 %7, 11, !dbg !13
  %22 = or disjoint i32 %7, 12, !dbg !13
  %23 = or disjoint i32 %7, 13, !dbg !13
  %24 = or disjoint i32 %7, 14, !dbg !13
  %25 = or disjoint i32 %7, 15, !dbg !13
  %26 = or disjoint i32 %7, %10, !dbg !13
  %27 = icmp slt i32 %7, 256, !dbg !14
  %28 = icmp slt i32 %11, 256, !dbg !14
  %29 = icmp slt i32 %12, 256, !dbg !14
  %30 = icmp slt i32 %13, 256, !dbg !14
  %31 = icmp slt i32 %14, 256, !dbg !14
  %32 = icmp slt i32 %15, 256, !dbg !14
  %33 = icmp slt i32 %16, 256, !dbg !14
  %34 = icmp slt i32 %17, 256, !dbg !14
  %35 = icmp slt i32 %18, 256, !dbg !14
  %36 = icmp slt i32 %19, 256, !dbg !14
  %37 = icmp slt i32 %20, 256, !dbg !14
  %38 = icmp slt i32 %21, 256, !dbg !14
  %39 = icmp slt i32 %22, 256, !dbg !14
  %40 = icmp slt i32 %23, 256, !dbg !14
  %41 = icmp slt i32 %24, 256, !dbg !14
  %42 = icmp slt i32 %25, 256, !dbg !14
  %43 = icmp slt i32 %26, 256, !dbg !14
  %44 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %45 = shl i32 %44, 8, !dbg !16
  %46 = and i32 %8, 255, !dbg !17
  %47 = lshr i32 %8, 2, !dbg !17
  %48 = and i32 %47, 63, !dbg !17
  %49 = or disjoint i32 %45, %46, !dbg !18
  %50 = or disjoint i32 %45, %48, !dbg !18
  %51 = or disjoint i32 %50, 64, !dbg !18
  %52 = or disjoint i32 %50, 128, !dbg !18
  %53 = or disjoint i32 %50, 192, !dbg !18
  %54 = icmp slt i32 %49, 1024, !dbg !19
  %55 = icmp slt i32 %50, 1024, !dbg !19
  %56 = icmp slt i32 %51, 1024, !dbg !19
  %57 = icmp slt i32 %52, 1024, !dbg !19
  %58 = icmp slt i32 %53, 1024, !dbg !19
  %.frozen = freeze i32 %49, !dbg !20
  %59 = sdiv i32 %.frozen, 32, !dbg !20
  %60 = mul i32 %59, 32, !dbg !21
  %.decomposed = sub i32 %.frozen, %60, !dbg !21
  %.frozen40 = freeze i32 %26, !dbg !22
  %61 = sdiv i32 %.frozen40, 64, !dbg !22
  %62 = mul i32 %61, 64, !dbg !23
  %.decomposed41 = sub i32 %.frozen40, %62, !dbg !23
  %.frozen42 = freeze i32 %7, !dbg !22
  %63 = sdiv i32 %.frozen42, 64, !dbg !22
  %64 = mul i32 %63, 64, !dbg !23
  %.decomposed43 = sub i32 %.frozen42, %64, !dbg !23
  %65 = shl nsw i32 %.decomposed, 1, !dbg !24
  %66 = shl i32 %59, 7, !dbg !25
  %67 = add i32 %65, %66, !dbg !26
  %68 = shl i32 %6, 16, !dbg !27
  %69 = shl i32 %11, 12, !dbg !27
  %70 = shl i32 %12, 12, !dbg !27
  %71 = shl i32 %13, 12, !dbg !27
  %72 = shl i32 %14, 12, !dbg !27
  %73 = shl i32 %15, 12, !dbg !27
  %74 = shl i32 %16, 12, !dbg !27
  %75 = shl i32 %17, 12, !dbg !27
  %76 = shl i32 %18, 12, !dbg !27
  %77 = shl i32 %19, 12, !dbg !27
  %78 = shl i32 %20, 12, !dbg !27
  %79 = shl i32 %21, 12, !dbg !27
  %80 = shl i32 %22, 12, !dbg !27
  %81 = shl i32 %23, 12, !dbg !27
  %82 = shl i32 %24, 12, !dbg !27
  %83 = shl i32 %25, 12, !dbg !27
  %84 = add i32 %67, %68, !dbg !28
  %85 = add i32 %67, %69, !dbg !28
  %86 = add i32 %67, %70, !dbg !28
  %87 = add i32 %67, %71, !dbg !28
  %88 = add i32 %67, %72, !dbg !28
  %89 = add i32 %67, %73, !dbg !28
  %90 = add i32 %67, %74, !dbg !28
  %91 = add i32 %67, %75, !dbg !28
  %92 = add i32 %67, %76, !dbg !28
  %93 = add i32 %67, %77, !dbg !28
  %94 = add i32 %67, %78, !dbg !28
  %95 = add i32 %67, %79, !dbg !28
  %96 = add i32 %67, %80, !dbg !28
  %97 = add i32 %67, %81, !dbg !28
  %98 = add i32 %67, %82, !dbg !28
  %99 = add i32 %67, %83, !dbg !28
  %100 = sext i32 %84 to i64, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !29
  %102 = sext i32 %85 to i64, !dbg !29
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !29
  %104 = sext i32 %86 to i64, !dbg !29
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !29
  %106 = sext i32 %87 to i64, !dbg !29
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !29
  %108 = sext i32 %88 to i64, !dbg !29
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !29
  %110 = sext i32 %89 to i64, !dbg !29
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !29
  %112 = sext i32 %90 to i64, !dbg !29
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !29
  %114 = sext i32 %91 to i64, !dbg !29
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !29
  %116 = sext i32 %92 to i64, !dbg !29
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !29
  %118 = sext i32 %93 to i64, !dbg !29
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !29
  %120 = sext i32 %94 to i64, !dbg !29
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !29
  %122 = sext i32 %95 to i64, !dbg !29
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !29
  %124 = sext i32 %96 to i64, !dbg !29
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !29
  %126 = sext i32 %97 to i64, !dbg !29
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !29
  %128 = sext i32 %98 to i64, !dbg !29
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !29
  %130 = sext i32 %99 to i64, !dbg !29
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !29
  %132 = and i1 %27, %54, !dbg !30
  %133 = and i1 %28, %54, !dbg !30
  %134 = and i1 %29, %54, !dbg !30
  %135 = and i1 %30, %54, !dbg !30
  %136 = and i1 %31, %54, !dbg !30
  %137 = and i1 %32, %54, !dbg !30
  %138 = and i1 %33, %54, !dbg !30
  %139 = and i1 %34, %54, !dbg !30
  %140 = and i1 %35, %54, !dbg !30
  %141 = and i1 %36, %54, !dbg !30
  %142 = and i1 %37, %54, !dbg !30
  %143 = and i1 %38, %54, !dbg !30
  %144 = and i1 %39, %54, !dbg !30
  %145 = and i1 %40, %54, !dbg !30
  %146 = and i1 %41, %54, !dbg !30
  %147 = and i1 %42, %54, !dbg !30
  %148 = and i1 %43, %55, !dbg !30
  %149 = and i1 %56, %43, !dbg !30
  %150 = and i1 %57, %43, !dbg !30
  %151 = and i1 %58, %43, !dbg !30
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %132) #2, !dbg !31
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %133) #2, !dbg !31
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %134) #2, !dbg !31
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %135) #2, !dbg !31
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %136) #2, !dbg !31
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %137) #2, !dbg !31
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %138) #2, !dbg !31
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %139) #2, !dbg !31
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %140) #2, !dbg !31
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %141) #2, !dbg !31
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %142) #2, !dbg !31
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %143) #2, !dbg !31
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %144) #2, !dbg !31
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %145) #2, !dbg !31
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %146) #2, !dbg !31
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %147) #2, !dbg !31
  %168 = or disjoint i32 %65, 1, !dbg !32
  %169 = add i32 %168, %66, !dbg !33
  %170 = add i32 %169, %68, !dbg !34
  %171 = add i32 %169, %69, !dbg !34
  %172 = add i32 %169, %70, !dbg !34
  %173 = add i32 %169, %71, !dbg !34
  %174 = add i32 %169, %72, !dbg !34
  %175 = add i32 %169, %73, !dbg !34
  %176 = add i32 %169, %74, !dbg !34
  %177 = add i32 %169, %75, !dbg !34
  %178 = add i32 %169, %76, !dbg !34
  %179 = add i32 %169, %77, !dbg !34
  %180 = add i32 %169, %78, !dbg !34
  %181 = add i32 %169, %79, !dbg !34
  %182 = add i32 %169, %80, !dbg !34
  %183 = add i32 %169, %81, !dbg !34
  %184 = add i32 %169, %82, !dbg !34
  %185 = add i32 %169, %83, !dbg !34
  %186 = sext i32 %170 to i64, !dbg !35
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !35
  %188 = sext i32 %171 to i64, !dbg !35
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !35
  %190 = sext i32 %172 to i64, !dbg !35
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !35
  %192 = sext i32 %173 to i64, !dbg !35
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !35
  %194 = sext i32 %174 to i64, !dbg !35
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !35
  %196 = sext i32 %175 to i64, !dbg !35
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !35
  %198 = sext i32 %176 to i64, !dbg !35
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !35
  %200 = sext i32 %177 to i64, !dbg !35
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !35
  %202 = sext i32 %178 to i64, !dbg !35
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !35
  %204 = sext i32 %179 to i64, !dbg !35
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !35
  %206 = sext i32 %180 to i64, !dbg !35
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !35
  %208 = sext i32 %181 to i64, !dbg !35
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !35
  %210 = sext i32 %182 to i64, !dbg !35
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !35
  %212 = sext i32 %183 to i64, !dbg !35
  %213 = getelementptr float, ptr addrspace(1) %0, i64 %212, !dbg !35
  %214 = sext i32 %184 to i64, !dbg !35
  %215 = getelementptr float, ptr addrspace(1) %0, i64 %214, !dbg !35
  %216 = sext i32 %185 to i64, !dbg !35
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !35
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %132) #2, !dbg !36
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %133) #2, !dbg !36
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %134) #2, !dbg !36
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %135) #2, !dbg !36
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %136) #2, !dbg !36
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %137) #2, !dbg !36
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %138) #2, !dbg !36
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %139) #2, !dbg !36
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %140) #2, !dbg !36
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %141) #2, !dbg !36
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %142) #2, !dbg !36
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %143) #2, !dbg !36
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %144) #2, !dbg !36
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 %145) #2, !dbg !36
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %215, i1 %146) #2, !dbg !36
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 %147) #2, !dbg !36
  %234 = add i32 %67, 64, !dbg !37
  %235 = add i32 %234, %68, !dbg !38
  %236 = add i32 %234, %69, !dbg !38
  %237 = add i32 %234, %70, !dbg !38
  %238 = add i32 %234, %71, !dbg !38
  %239 = add i32 %234, %72, !dbg !38
  %240 = add i32 %234, %73, !dbg !38
  %241 = add i32 %234, %74, !dbg !38
  %242 = add i32 %234, %75, !dbg !38
  %243 = add i32 %234, %76, !dbg !38
  %244 = add i32 %234, %77, !dbg !38
  %245 = add i32 %234, %78, !dbg !38
  %246 = add i32 %234, %79, !dbg !38
  %247 = add i32 %234, %80, !dbg !38
  %248 = add i32 %234, %81, !dbg !38
  %249 = add i32 %234, %82, !dbg !38
  %250 = add i32 %234, %83, !dbg !38
  %251 = sext i32 %235 to i64, !dbg !39
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !39
  %253 = sext i32 %236 to i64, !dbg !39
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !39
  %255 = sext i32 %237 to i64, !dbg !39
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !39
  %257 = sext i32 %238 to i64, !dbg !39
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !39
  %259 = sext i32 %239 to i64, !dbg !39
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !39
  %261 = sext i32 %240 to i64, !dbg !39
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !39
  %263 = sext i32 %241 to i64, !dbg !39
  %264 = getelementptr float, ptr addrspace(1) %0, i64 %263, !dbg !39
  %265 = sext i32 %242 to i64, !dbg !39
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !39
  %267 = sext i32 %243 to i64, !dbg !39
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !39
  %269 = sext i32 %244 to i64, !dbg !39
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %269, !dbg !39
  %271 = sext i32 %245 to i64, !dbg !39
  %272 = getelementptr float, ptr addrspace(1) %0, i64 %271, !dbg !39
  %273 = sext i32 %246 to i64, !dbg !39
  %274 = getelementptr float, ptr addrspace(1) %0, i64 %273, !dbg !39
  %275 = sext i32 %247 to i64, !dbg !39
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %275, !dbg !39
  %277 = sext i32 %248 to i64, !dbg !39
  %278 = getelementptr float, ptr addrspace(1) %0, i64 %277, !dbg !39
  %279 = sext i32 %249 to i64, !dbg !39
  %280 = getelementptr float, ptr addrspace(1) %0, i64 %279, !dbg !39
  %281 = sext i32 %250 to i64, !dbg !39
  %282 = getelementptr float, ptr addrspace(1) %0, i64 %281, !dbg !39
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 %132) #2, !dbg !40
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 %133) #2, !dbg !40
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 %134) #2, !dbg !40
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 %135) #2, !dbg !40
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 %136) #2, !dbg !40
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 %137) #2, !dbg !40
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 %138) #2, !dbg !40
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 %139) #2, !dbg !40
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 %140) #2, !dbg !40
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 %141) #2, !dbg !40
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 %142) #2, !dbg !40
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 %143) #2, !dbg !40
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 %144) #2, !dbg !40
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %145) #2, !dbg !40
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 %146) #2, !dbg !40
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 %147) #2, !dbg !40
  %299 = add i32 %67, 65, !dbg !41
  %300 = add i32 %299, %68, !dbg !42
  %301 = add i32 %299, %69, !dbg !42
  %302 = add i32 %299, %70, !dbg !42
  %303 = add i32 %299, %71, !dbg !42
  %304 = add i32 %299, %72, !dbg !42
  %305 = add i32 %299, %73, !dbg !42
  %306 = add i32 %299, %74, !dbg !42
  %307 = add i32 %299, %75, !dbg !42
  %308 = add i32 %299, %76, !dbg !42
  %309 = add i32 %299, %77, !dbg !42
  %310 = add i32 %299, %78, !dbg !42
  %311 = add i32 %299, %79, !dbg !42
  %312 = add i32 %299, %80, !dbg !42
  %313 = add i32 %299, %81, !dbg !42
  %314 = add i32 %299, %82, !dbg !42
  %315 = add i32 %299, %83, !dbg !42
  %316 = sext i32 %300 to i64, !dbg !43
  %317 = getelementptr float, ptr addrspace(1) %0, i64 %316, !dbg !43
  %318 = sext i32 %301 to i64, !dbg !43
  %319 = getelementptr float, ptr addrspace(1) %0, i64 %318, !dbg !43
  %320 = sext i32 %302 to i64, !dbg !43
  %321 = getelementptr float, ptr addrspace(1) %0, i64 %320, !dbg !43
  %322 = sext i32 %303 to i64, !dbg !43
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !43
  %324 = sext i32 %304 to i64, !dbg !43
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !43
  %326 = sext i32 %305 to i64, !dbg !43
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !43
  %328 = sext i32 %306 to i64, !dbg !43
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !43
  %330 = sext i32 %307 to i64, !dbg !43
  %331 = getelementptr float, ptr addrspace(1) %0, i64 %330, !dbg !43
  %332 = sext i32 %308 to i64, !dbg !43
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !43
  %334 = sext i32 %309 to i64, !dbg !43
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !43
  %336 = sext i32 %310 to i64, !dbg !43
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !43
  %338 = sext i32 %311 to i64, !dbg !43
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !43
  %340 = sext i32 %312 to i64, !dbg !43
  %341 = getelementptr float, ptr addrspace(1) %0, i64 %340, !dbg !43
  %342 = sext i32 %313 to i64, !dbg !43
  %343 = getelementptr float, ptr addrspace(1) %0, i64 %342, !dbg !43
  %344 = sext i32 %314 to i64, !dbg !43
  %345 = getelementptr float, ptr addrspace(1) %0, i64 %344, !dbg !43
  %346 = sext i32 %315 to i64, !dbg !43
  %347 = getelementptr float, ptr addrspace(1) %0, i64 %346, !dbg !43
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %317, i1 %132) #2, !dbg !44
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %319, i1 %133) #2, !dbg !44
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 %134) #2, !dbg !44
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %323, i1 %135) #2, !dbg !44
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %136) #2, !dbg !44
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %137) #2, !dbg !44
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %138) #2, !dbg !44
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %139) #2, !dbg !44
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %140) #2, !dbg !44
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %141) #2, !dbg !44
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 %142) #2, !dbg !44
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %143) #2, !dbg !44
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %341, i1 %144) #2, !dbg !44
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %343, i1 %145) #2, !dbg !44
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %345, i1 %146) #2, !dbg !44
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %347, i1 %147) #2, !dbg !44
  %364 = insertelement <4 x i32> poison, i32 %152, i64 0, !dbg !31
  %365 = insertelement <4 x i32> %364, i32 %153, i64 1, !dbg !31
  %366 = insertelement <4 x i32> %365, i32 %154, i64 2, !dbg !31
  %367 = insertelement <4 x i32> %366, i32 %155, i64 3, !dbg !31
  %368 = bitcast <4 x i32> %367 to <4 x float>, !dbg !31
  %369 = insertelement <4 x i32> poison, i32 %218, i64 0, !dbg !36
  %370 = insertelement <4 x i32> %369, i32 %219, i64 1, !dbg !36
  %371 = insertelement <4 x i32> %370, i32 %220, i64 2, !dbg !36
  %372 = insertelement <4 x i32> %371, i32 %221, i64 3, !dbg !36
  %373 = bitcast <4 x i32> %372 to <4 x float>, !dbg !36
  %374 = insertelement <4 x i32> poison, i32 %283, i64 0, !dbg !40
  %375 = insertelement <4 x i32> %374, i32 %284, i64 1, !dbg !40
  %376 = insertelement <4 x i32> %375, i32 %285, i64 2, !dbg !40
  %377 = insertelement <4 x i32> %376, i32 %286, i64 3, !dbg !40
  %378 = bitcast <4 x i32> %377 to <4 x float>, !dbg !40
  %379 = insertelement <4 x i32> poison, i32 %348, i64 0, !dbg !44
  %380 = insertelement <4 x i32> %379, i32 %349, i64 1, !dbg !44
  %381 = insertelement <4 x i32> %380, i32 %350, i64 2, !dbg !44
  %382 = insertelement <4 x i32> %381, i32 %351, i64 3, !dbg !44
  %383 = bitcast <4 x i32> %382 to <4 x float>, !dbg !44
  %384 = fcmp ogt <4 x float> %373, %368, !dbg !45
  %385 = fcmp uno <4 x float> %373, zeroinitializer, !dbg !49
  %386 = or <4 x i1> %384, %385, !dbg !50
  %.v = select <4 x i1> %386, <4 x i32> %372, <4 x i32> %367, !dbg !51
  %387 = bitcast <4 x i32> %.v to <4 x float>, !dbg !51
  %388 = fcmp olt <4 x float> %387, %378, !dbg !52
  %389 = fcmp uno <4 x float> %378, zeroinitializer, !dbg !54
  %390 = or <4 x i1> %388, %389, !dbg !55
  %.v33 = select <4 x i1> %390, <4 x i32> %377, <4 x i32> %.v, !dbg !56
  %391 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !56
  %392 = fcmp olt <4 x float> %391, %383, !dbg !57
  %393 = bitcast i32 %348 to float, !dbg !59
  %394 = fcmp uno float %393, 0.000000e+00, !dbg !59
  %395 = bitcast i32 %349 to float, !dbg !59
  %396 = fcmp uno float %395, 0.000000e+00, !dbg !59
  %397 = bitcast i32 %350 to float, !dbg !59
  %398 = fcmp uno float %397, 0.000000e+00, !dbg !59
  %399 = bitcast i32 %351 to float, !dbg !59
  %400 = fcmp uno float %399, 0.000000e+00, !dbg !59
  %401 = extractelement <4 x i1> %392, i64 0, !dbg !60
  %402 = or i1 %401, %394, !dbg !60
  %403 = extractelement <4 x i1> %392, i64 1, !dbg !60
  %404 = or i1 %403, %396, !dbg !60
  %405 = extractelement <4 x i1> %392, i64 2, !dbg !60
  %406 = or i1 %405, %398, !dbg !60
  %407 = extractelement <4 x i1> %392, i64 3, !dbg !60
  %408 = or i1 %407, %400, !dbg !60
  %409 = zext <4 x i1> %384 to <4 x i8>, !dbg !61
  %410 = select <4 x i1> %388, <4 x i8> splat (i8 2), <4 x i8> %409, !dbg !62
  %411 = select <4 x i1> %392, <4 x i8> splat (i8 3), <4 x i8> %410, !dbg !63
  %412 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !31
  %413 = insertelement <4 x i32> %412, i32 %157, i64 1, !dbg !31
  %414 = insertelement <4 x i32> %413, i32 %158, i64 2, !dbg !31
  %415 = insertelement <4 x i32> %414, i32 %159, i64 3, !dbg !31
  %416 = bitcast <4 x i32> %415 to <4 x float>, !dbg !31
  %417 = insertelement <4 x i32> poison, i32 %222, i64 0, !dbg !36
  %418 = insertelement <4 x i32> %417, i32 %223, i64 1, !dbg !36
  %419 = insertelement <4 x i32> %418, i32 %224, i64 2, !dbg !36
  %420 = insertelement <4 x i32> %419, i32 %225, i64 3, !dbg !36
  %421 = bitcast <4 x i32> %420 to <4 x float>, !dbg !36
  %422 = insertelement <4 x i32> poison, i32 %287, i64 0, !dbg !40
  %423 = insertelement <4 x i32> %422, i32 %288, i64 1, !dbg !40
  %424 = insertelement <4 x i32> %423, i32 %289, i64 2, !dbg !40
  %425 = insertelement <4 x i32> %424, i32 %290, i64 3, !dbg !40
  %426 = bitcast <4 x i32> %425 to <4 x float>, !dbg !40
  %427 = insertelement <4 x i32> poison, i32 %352, i64 0, !dbg !44
  %428 = insertelement <4 x i32> %427, i32 %353, i64 1, !dbg !44
  %429 = insertelement <4 x i32> %428, i32 %354, i64 2, !dbg !44
  %430 = insertelement <4 x i32> %429, i32 %355, i64 3, !dbg !44
  %431 = bitcast <4 x i32> %430 to <4 x float>, !dbg !44
  %432 = fcmp ogt <4 x float> %421, %416, !dbg !45
  %433 = fcmp uno <4 x float> %421, zeroinitializer, !dbg !49
  %434 = or <4 x i1> %432, %433, !dbg !50
  %.v34 = select <4 x i1> %434, <4 x i32> %420, <4 x i32> %415, !dbg !51
  %435 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !51
  %436 = fcmp olt <4 x float> %435, %426, !dbg !52
  %437 = fcmp uno <4 x float> %426, zeroinitializer, !dbg !54
  %438 = or <4 x i1> %436, %437, !dbg !55
  %.v35 = select <4 x i1> %438, <4 x i32> %425, <4 x i32> %.v34, !dbg !56
  %439 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !56
  %440 = fcmp olt <4 x float> %439, %431, !dbg !57
  %441 = bitcast i32 %352 to float, !dbg !59
  %442 = fcmp uno float %441, 0.000000e+00, !dbg !59
  %443 = bitcast i32 %353 to float, !dbg !59
  %444 = fcmp uno float %443, 0.000000e+00, !dbg !59
  %445 = bitcast i32 %354 to float, !dbg !59
  %446 = fcmp uno float %445, 0.000000e+00, !dbg !59
  %447 = bitcast i32 %355 to float, !dbg !59
  %448 = fcmp uno float %447, 0.000000e+00, !dbg !59
  %449 = extractelement <4 x i1> %440, i64 0, !dbg !60
  %450 = or i1 %449, %442, !dbg !60
  %451 = extractelement <4 x i1> %440, i64 1, !dbg !60
  %452 = or i1 %451, %444, !dbg !60
  %453 = extractelement <4 x i1> %440, i64 2, !dbg !60
  %454 = or i1 %453, %446, !dbg !60
  %455 = extractelement <4 x i1> %440, i64 3, !dbg !60
  %456 = or i1 %455, %448, !dbg !60
  %457 = zext <4 x i1> %432 to <4 x i8>, !dbg !61
  %458 = select <4 x i1> %436, <4 x i8> splat (i8 2), <4 x i8> %457, !dbg !62
  %459 = select <4 x i1> %440, <4 x i8> splat (i8 3), <4 x i8> %458, !dbg !63
  %460 = insertelement <4 x i32> poison, i32 %160, i64 0, !dbg !31
  %461 = insertelement <4 x i32> %460, i32 %161, i64 1, !dbg !31
  %462 = insertelement <4 x i32> %461, i32 %162, i64 2, !dbg !31
  %463 = insertelement <4 x i32> %462, i32 %163, i64 3, !dbg !31
  %464 = bitcast <4 x i32> %463 to <4 x float>, !dbg !31
  %465 = insertelement <4 x i32> poison, i32 %226, i64 0, !dbg !36
  %466 = insertelement <4 x i32> %465, i32 %227, i64 1, !dbg !36
  %467 = insertelement <4 x i32> %466, i32 %228, i64 2, !dbg !36
  %468 = insertelement <4 x i32> %467, i32 %229, i64 3, !dbg !36
  %469 = bitcast <4 x i32> %468 to <4 x float>, !dbg !36
  %470 = insertelement <4 x i32> poison, i32 %291, i64 0, !dbg !40
  %471 = insertelement <4 x i32> %470, i32 %292, i64 1, !dbg !40
  %472 = insertelement <4 x i32> %471, i32 %293, i64 2, !dbg !40
  %473 = insertelement <4 x i32> %472, i32 %294, i64 3, !dbg !40
  %474 = bitcast <4 x i32> %473 to <4 x float>, !dbg !40
  %475 = insertelement <4 x i32> poison, i32 %356, i64 0, !dbg !44
  %476 = insertelement <4 x i32> %475, i32 %357, i64 1, !dbg !44
  %477 = insertelement <4 x i32> %476, i32 %358, i64 2, !dbg !44
  %478 = insertelement <4 x i32> %477, i32 %359, i64 3, !dbg !44
  %479 = bitcast <4 x i32> %478 to <4 x float>, !dbg !44
  %480 = fcmp ogt <4 x float> %469, %464, !dbg !45
  %481 = fcmp uno <4 x float> %469, zeroinitializer, !dbg !49
  %482 = or <4 x i1> %480, %481, !dbg !50
  %.v36 = select <4 x i1> %482, <4 x i32> %468, <4 x i32> %463, !dbg !51
  %483 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !51
  %484 = fcmp olt <4 x float> %483, %474, !dbg !52
  %485 = fcmp uno <4 x float> %474, zeroinitializer, !dbg !54
  %486 = or <4 x i1> %484, %485, !dbg !55
  %.v37 = select <4 x i1> %486, <4 x i32> %473, <4 x i32> %.v36, !dbg !56
  %487 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !56
  %488 = fcmp olt <4 x float> %487, %479, !dbg !57
  %489 = bitcast i32 %356 to float, !dbg !59
  %490 = fcmp uno float %489, 0.000000e+00, !dbg !59
  %491 = bitcast i32 %357 to float, !dbg !59
  %492 = fcmp uno float %491, 0.000000e+00, !dbg !59
  %493 = bitcast i32 %358 to float, !dbg !59
  %494 = fcmp uno float %493, 0.000000e+00, !dbg !59
  %495 = bitcast i32 %359 to float, !dbg !59
  %496 = fcmp uno float %495, 0.000000e+00, !dbg !59
  %497 = extractelement <4 x i1> %488, i64 0, !dbg !60
  %498 = or i1 %497, %490, !dbg !60
  %499 = extractelement <4 x i1> %488, i64 1, !dbg !60
  %500 = or i1 %499, %492, !dbg !60
  %501 = extractelement <4 x i1> %488, i64 2, !dbg !60
  %502 = or i1 %501, %494, !dbg !60
  %503 = extractelement <4 x i1> %488, i64 3, !dbg !60
  %504 = or i1 %503, %496, !dbg !60
  %505 = zext <4 x i1> %480 to <4 x i8>, !dbg !61
  %506 = select <4 x i1> %484, <4 x i8> splat (i8 2), <4 x i8> %505, !dbg !62
  %507 = select <4 x i1> %488, <4 x i8> splat (i8 3), <4 x i8> %506, !dbg !63
  %508 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !31
  %509 = insertelement <4 x i32> %508, i32 %165, i64 1, !dbg !31
  %510 = insertelement <4 x i32> %509, i32 %166, i64 2, !dbg !31
  %511 = insertelement <4 x i32> %510, i32 %167, i64 3, !dbg !31
  %512 = bitcast <4 x i32> %511 to <4 x float>, !dbg !31
  %513 = insertelement <4 x i32> poison, i32 %230, i64 0, !dbg !36
  %514 = insertelement <4 x i32> %513, i32 %231, i64 1, !dbg !36
  %515 = insertelement <4 x i32> %514, i32 %232, i64 2, !dbg !36
  %516 = insertelement <4 x i32> %515, i32 %233, i64 3, !dbg !36
  %517 = bitcast <4 x i32> %516 to <4 x float>, !dbg !36
  %518 = insertelement <4 x i32> poison, i32 %295, i64 0, !dbg !40
  %519 = insertelement <4 x i32> %518, i32 %296, i64 1, !dbg !40
  %520 = insertelement <4 x i32> %519, i32 %297, i64 2, !dbg !40
  %521 = insertelement <4 x i32> %520, i32 %298, i64 3, !dbg !40
  %522 = bitcast <4 x i32> %521 to <4 x float>, !dbg !40
  %523 = insertelement <4 x i32> poison, i32 %360, i64 0, !dbg !44
  %524 = insertelement <4 x i32> %523, i32 %361, i64 1, !dbg !44
  %525 = insertelement <4 x i32> %524, i32 %362, i64 2, !dbg !44
  %526 = insertelement <4 x i32> %525, i32 %363, i64 3, !dbg !44
  %527 = bitcast <4 x i32> %526 to <4 x float>, !dbg !44
  %528 = fcmp ogt <4 x float> %517, %512, !dbg !45
  %529 = fcmp uno <4 x float> %517, zeroinitializer, !dbg !49
  %530 = or <4 x i1> %528, %529, !dbg !50
  %.v38 = select <4 x i1> %530, <4 x i32> %516, <4 x i32> %511, !dbg !51
  %531 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !51
  %532 = fcmp olt <4 x float> %531, %522, !dbg !52
  %533 = fcmp uno <4 x float> %522, zeroinitializer, !dbg !54
  %534 = or <4 x i1> %532, %533, !dbg !55
  %.v39 = select <4 x i1> %534, <4 x i32> %521, <4 x i32> %.v38, !dbg !56
  %535 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !56
  %536 = fcmp olt <4 x float> %535, %527, !dbg !57
  %537 = bitcast i32 %360 to float, !dbg !59
  %538 = fcmp uno float %537, 0.000000e+00, !dbg !59
  %539 = bitcast i32 %361 to float, !dbg !59
  %540 = fcmp uno float %539, 0.000000e+00, !dbg !59
  %541 = bitcast i32 %362 to float, !dbg !59
  %542 = fcmp uno float %541, 0.000000e+00, !dbg !59
  %543 = bitcast i32 %363 to float, !dbg !59
  %544 = fcmp uno float %543, 0.000000e+00, !dbg !59
  %545 = extractelement <4 x i1> %536, i64 0, !dbg !60
  %546 = or i1 %545, %538, !dbg !60
  %547 = extractelement <4 x i1> %536, i64 1, !dbg !60
  %548 = or i1 %547, %540, !dbg !60
  %549 = extractelement <4 x i1> %536, i64 2, !dbg !60
  %550 = or i1 %549, %542, !dbg !60
  %551 = extractelement <4 x i1> %536, i64 3, !dbg !60
  %552 = or i1 %551, %544, !dbg !60
  %553 = zext <4 x i1> %528 to <4 x i8>, !dbg !61
  %554 = select <4 x i1> %532, <4 x i8> splat (i8 2), <4 x i8> %553, !dbg !62
  %555 = select <4 x i1> %536, <4 x i8> splat (i8 3), <4 x i8> %554, !dbg !63
  %556 = shl i32 %50, 6, !dbg !64
  %557 = shl i32 %51, 6, !dbg !64
  %558 = shl i32 %52, 6, !dbg !64
  %559 = shl i32 %53, 6, !dbg !64
  %560 = shl i32 %49, 6, !dbg !64
  %561 = shl i32 %61, 16, !dbg !65
  %562 = shl i32 %63, 16, !dbg !65
  %563 = add i32 %561, %.decomposed41, !dbg !66
  %564 = add i32 %563, %556, !dbg !67
  %565 = add i32 %563, %557, !dbg !67
  %566 = add i32 %563, %558, !dbg !67
  %567 = add i32 %563, %559, !dbg !67
  %568 = add i32 %562, %.decomposed43, !dbg !66
  %569 = add i32 %568, %560, !dbg !67
  %570 = sext i32 %564 to i64, !dbg !68
  %571 = getelementptr float, ptr addrspace(1) %1, i64 %570, !dbg !68
  %572 = sext i32 %565 to i64, !dbg !68
  %573 = getelementptr float, ptr addrspace(1) %1, i64 %572, !dbg !68
  %574 = sext i32 %566 to i64, !dbg !68
  %575 = getelementptr float, ptr addrspace(1) %1, i64 %574, !dbg !68
  %576 = sext i32 %567 to i64, !dbg !68
  %577 = getelementptr float, ptr addrspace(1) %1, i64 %576, !dbg !68
  %578 = shl i32 %8, 4, !dbg !69
  %579 = and i32 %578, 4080, !dbg !69
  %580 = and i32 %9, 1020, !dbg !69
  %581 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %579, !dbg !69
  %582 = getelementptr float, ptr addrspace(3) %581, i32 %579, !dbg !69
  %583 = extractelement <4 x i32> %.v33, i64 0, !dbg !69
  %584 = select i1 %402, i32 %348, i32 %583, !dbg !70
  %585 = insertelement <1 x i32> poison, i32 %584, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %582, <1 x i32> %585, i1 true) #2, !dbg !69
  %586 = or disjoint i32 %579, 1, !dbg !69
  %587 = getelementptr float, ptr addrspace(3) %581, i32 %586, !dbg !69
  %588 = extractelement <4 x i32> %.v33, i64 1, !dbg !69
  %589 = select i1 %404, i32 %349, i32 %588, !dbg !70
  %590 = insertelement <1 x i32> poison, i32 %589, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %587, <1 x i32> %590, i1 true) #2, !dbg !69
  %591 = or disjoint i32 %579, 2, !dbg !69
  %592 = getelementptr float, ptr addrspace(3) %581, i32 %591, !dbg !69
  %593 = extractelement <4 x i32> %.v33, i64 2, !dbg !69
  %594 = select i1 %406, i32 %350, i32 %593, !dbg !70
  %595 = insertelement <1 x i32> poison, i32 %594, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %592, <1 x i32> %595, i1 true) #2, !dbg !69
  %596 = or disjoint i32 %579, 3, !dbg !69
  %597 = getelementptr float, ptr addrspace(3) %581, i32 %596, !dbg !69
  %598 = extractelement <4 x i32> %.v33, i64 3, !dbg !69
  %599 = select i1 %408, i32 %351, i32 %598, !dbg !70
  %600 = insertelement <1 x i32> poison, i32 %599, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %597, <1 x i32> %600, i1 true) #2, !dbg !69
  %601 = or disjoint i32 %579, 4, !dbg !69
  %602 = getelementptr float, ptr addrspace(3) %581, i32 %601, !dbg !69
  %603 = extractelement <4 x i32> %.v35, i64 0, !dbg !69
  %604 = select i1 %450, i32 %352, i32 %603, !dbg !70
  %605 = insertelement <1 x i32> poison, i32 %604, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %602, <1 x i32> %605, i1 true) #2, !dbg !69
  %606 = or disjoint i32 %579, 5, !dbg !69
  %607 = getelementptr float, ptr addrspace(3) %581, i32 %606, !dbg !69
  %608 = extractelement <4 x i32> %.v35, i64 1, !dbg !69
  %609 = select i1 %452, i32 %353, i32 %608, !dbg !70
  %610 = insertelement <1 x i32> poison, i32 %609, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %607, <1 x i32> %610, i1 true) #2, !dbg !69
  %611 = or disjoint i32 %579, 6, !dbg !69
  %612 = getelementptr float, ptr addrspace(3) %581, i32 %611, !dbg !69
  %613 = extractelement <4 x i32> %.v35, i64 2, !dbg !69
  %614 = select i1 %454, i32 %354, i32 %613, !dbg !70
  %615 = insertelement <1 x i32> poison, i32 %614, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %612, <1 x i32> %615, i1 true) #2, !dbg !69
  %616 = or disjoint i32 %579, 7, !dbg !69
  %617 = getelementptr float, ptr addrspace(3) %581, i32 %616, !dbg !69
  %618 = extractelement <4 x i32> %.v35, i64 3, !dbg !69
  %619 = select i1 %456, i32 %355, i32 %618, !dbg !70
  %620 = insertelement <1 x i32> poison, i32 %619, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %617, <1 x i32> %620, i1 true) #2, !dbg !69
  %621 = or disjoint i32 %579, 8, !dbg !69
  %622 = getelementptr float, ptr addrspace(3) %581, i32 %621, !dbg !69
  %623 = extractelement <4 x i32> %.v37, i64 0, !dbg !69
  %624 = select i1 %498, i32 %356, i32 %623, !dbg !70
  %625 = insertelement <1 x i32> poison, i32 %624, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %622, <1 x i32> %625, i1 true) #2, !dbg !69
  %626 = or disjoint i32 %579, 9, !dbg !69
  %627 = getelementptr float, ptr addrspace(3) %581, i32 %626, !dbg !69
  %628 = extractelement <4 x i32> %.v37, i64 1, !dbg !69
  %629 = select i1 %500, i32 %357, i32 %628, !dbg !70
  %630 = insertelement <1 x i32> poison, i32 %629, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %627, <1 x i32> %630, i1 true) #2, !dbg !69
  %631 = or disjoint i32 %579, 10, !dbg !69
  %632 = getelementptr float, ptr addrspace(3) %581, i32 %631, !dbg !69
  %633 = extractelement <4 x i32> %.v37, i64 2, !dbg !69
  %634 = select i1 %502, i32 %358, i32 %633, !dbg !70
  %635 = insertelement <1 x i32> poison, i32 %634, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %632, <1 x i32> %635, i1 true) #2, !dbg !69
  %636 = or disjoint i32 %579, 11, !dbg !69
  %637 = getelementptr float, ptr addrspace(3) %581, i32 %636, !dbg !69
  %638 = extractelement <4 x i32> %.v37, i64 3, !dbg !69
  %639 = select i1 %504, i32 %359, i32 %638, !dbg !70
  %640 = insertelement <1 x i32> poison, i32 %639, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %637, <1 x i32> %640, i1 true) #2, !dbg !69
  %641 = or disjoint i32 %579, 12, !dbg !69
  %642 = getelementptr float, ptr addrspace(3) %581, i32 %641, !dbg !69
  %643 = extractelement <4 x i32> %.v39, i64 0, !dbg !69
  %644 = select i1 %546, i32 %360, i32 %643, !dbg !70
  %645 = insertelement <1 x i32> poison, i32 %644, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %642, <1 x i32> %645, i1 true) #2, !dbg !69
  %646 = or disjoint i32 %579, 13, !dbg !69
  %647 = getelementptr float, ptr addrspace(3) %581, i32 %646, !dbg !69
  %648 = extractelement <4 x i32> %.v39, i64 1, !dbg !69
  %649 = select i1 %548, i32 %361, i32 %648, !dbg !70
  %650 = insertelement <1 x i32> poison, i32 %649, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %647, <1 x i32> %650, i1 true) #2, !dbg !69
  %651 = or disjoint i32 %579, 14, !dbg !69
  %652 = getelementptr float, ptr addrspace(3) %581, i32 %651, !dbg !69
  %653 = extractelement <4 x i32> %.v39, i64 2, !dbg !69
  %654 = select i1 %550, i32 %362, i32 %653, !dbg !70
  %655 = insertelement <1 x i32> poison, i32 %654, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %652, <1 x i32> %655, i1 true) #2, !dbg !69
  %656 = or disjoint i32 %579, 15, !dbg !69
  %657 = getelementptr float, ptr addrspace(3) %581, i32 %656, !dbg !69
  %658 = extractelement <4 x i32> %.v39, i64 3, !dbg !69
  %659 = select i1 %552, i32 %363, i32 %658, !dbg !70
  %660 = insertelement <1 x i32> poison, i32 %659, i64 0, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %657, <1 x i32> %660, i1 true) #2, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %661 = and i32 %8, 252, !dbg !69
  %662 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %661, !dbg !69
  %663 = getelementptr inbounds float, ptr addrspace(3) %662, i32 %580, !dbg !69
  %664 = or disjoint i32 %580, 1024, !dbg !69
  %665 = lshr exact i32 %664, 2, !dbg !69
  %666 = and i32 %665, 508, !dbg !69
  %667 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %666, !dbg !69
  %668 = getelementptr inbounds float, ptr addrspace(3) %667, i32 %664, !dbg !69
  %669 = load <4 x i32>, ptr addrspace(3) %668, align 16, !dbg !69
  %670 = or disjoint i32 %580, 2048, !dbg !69
  %671 = lshr exact i32 %670, 2, !dbg !69
  %672 = and i32 %671, 764, !dbg !69
  %673 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %672, !dbg !69
  %674 = getelementptr inbounds float, ptr addrspace(3) %673, i32 %670, !dbg !69
  %675 = load <4 x i32>, ptr addrspace(3) %674, align 16, !dbg !69
  %676 = or disjoint i32 %580, 3072, !dbg !69
  %677 = lshr exact i32 %676, 2, !dbg !69
  %678 = and i32 %677, 1020, !dbg !69
  %679 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %678, !dbg !69
  %680 = getelementptr inbounds float, ptr addrspace(3) %679, i32 %676, !dbg !69
  %681 = load <4 x i32>, ptr addrspace(3) %680, align 16, !dbg !69
  %.extract = load i32, ptr addrspace(3) %663, align 16, !dbg !69
  %682 = getelementptr inbounds i8, ptr addrspace(3) %663, i32 4, !dbg !69
  %.extract18 = load i32, ptr addrspace(3) %682, align 4, !dbg !69
  %683 = getelementptr inbounds i8, ptr addrspace(3) %663, i32 8, !dbg !69
  %.extract19 = load i32, ptr addrspace(3) %683, align 8, !dbg !69
  %684 = getelementptr inbounds i8, ptr addrspace(3) %663, i32 12, !dbg !69
  %.extract20 = load i32, ptr addrspace(3) %684, align 4, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %571, i1 %148) #2, !dbg !69
  %.extract21 = extractelement <4 x i32> %669, i64 0, !dbg !69
  %.extract22 = extractelement <4 x i32> %669, i64 1, !dbg !69
  %.extract23 = extractelement <4 x i32> %669, i64 2, !dbg !69
  %.extract24 = extractelement <4 x i32> %669, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %573, i1 %149) #2, !dbg !69
  %.extract25 = extractelement <4 x i32> %675, i64 0, !dbg !69
  %.extract26 = extractelement <4 x i32> %675, i64 1, !dbg !69
  %.extract27 = extractelement <4 x i32> %675, i64 2, !dbg !69
  %.extract28 = extractelement <4 x i32> %675, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %575, i1 %150) #2, !dbg !69
  %.extract29 = extractelement <4 x i32> %681, i64 0, !dbg !69
  %.extract30 = extractelement <4 x i32> %681, i64 1, !dbg !69
  %.extract31 = extractelement <4 x i32> %681, i64 2, !dbg !69
  %.extract32 = extractelement <4 x i32> %681, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %577, i1 %151) #2, !dbg !69
  %685 = sext i32 %569 to i64, !dbg !71
  %686 = getelementptr i8, ptr addrspace(1) %2, i64 %685, !dbg !71
  %687 = bitcast <4 x i8> %411 to i32, !dbg !72
  %688 = bitcast <4 x i8> %459 to i32, !dbg !72
  %689 = bitcast <4 x i8> %507 to i32, !dbg !72
  %690 = bitcast <4 x i8> %555 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %687, i32 %688, i32 %689, i32 %690, ptr addrspace(1) %686, i1 %132) #2, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coxkleg5dbh5whwwiefrkayhpw6pyndlx3uzeiopqt7vxhklpmyc.py", directory: "inductor_cache/ox")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 41, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 51, scope: !7)
!28 = !DILocation(line: 34, column: 46, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 64, scope: !7)
!31 = !DILocation(line: 34, column: 56, scope: !7)
!32 = !DILocation(line: 35, column: 34, scope: !7)
!33 = !DILocation(line: 35, column: 41, scope: !7)
!34 = !DILocation(line: 35, column: 50, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 60, scope: !7)
!37 = !DILocation(line: 36, column: 42, scope: !7)
!38 = !DILocation(line: 36, column: 51, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 61, scope: !7)
!41 = !DILocation(line: 37, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 51, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 61, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 38, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !53)
!53 = !DILocation(line: 39, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !53)
!57 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !58)
!58 = !DILocation(line: 40, column: 40, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !58)
!61 = !DILocation(line: 44, column: 33, scope: !7)
!62 = !DILocation(line: 47, column: 35, scope: !7)
!63 = !DILocation(line: 50, column: 35, scope: !7)
!64 = !DILocation(line: 51, column: 33, scope: !7)
!65 = !DILocation(line: 51, column: 44, scope: !7)
!66 = !DILocation(line: 51, column: 30, scope: !7)
!67 = !DILocation(line: 51, column: 38, scope: !7)
!68 = !DILocation(line: 51, column: 25, scope: !7)
!69 = !DILocation(line: 51, column: 55, scope: !7)
!70 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !58)
!71 = !DILocation(line: 52, column: 25, scope: !7)
!72 = !DILocation(line: 52, column: 56, scope: !7)
!73 = !DILocation(line: 52, column: 4, scope: !7)
