; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 64, !dbg !14
  %14 = sdiv i32 %12, 64, !dbg !14
  %15 = srem i32 %13, 768, !dbg !15
  %16 = srem i32 %14, 768, !dbg !15
  %17 = mul i32 %13, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %.frozen9 = freeze i32 %11, !dbg !17
  %18 = sdiv i32 %.frozen9, 49152, !dbg !17
  %.frozen10 = freeze i32 %12, !dbg !17
  %19 = sdiv i32 %.frozen10, 49152, !dbg !17
  %20 = icmp slt i32 %15, 256, !dbg !18
  %21 = icmp slt i32 %16, 256, !dbg !18
  %22 = mul i32 %18, 49152, !dbg !19
  %srem.decomposed = sub i32 %.frozen9, %22, !dbg !19
  %23 = mul i32 %19, 49152, !dbg !19
  %srem1.decomposed = sub i32 %.frozen10, %23, !dbg !19
  %24 = shl nsw i32 %18, 14, !dbg !20
  %25 = shl nsw i32 %19, 14, !dbg !20
  %26 = add nsw i32 %24, %srem.decomposed, !dbg !21
  %27 = add nsw i32 %25, %srem1.decomposed, !dbg !21
  %28 = sext i32 %26 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %42 = sext i32 %15 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !24
  %44 = sext i32 %16 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %20, i32 0, i1 %20) #1, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %20, i32 0, i1 %20) #1, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %20, i32 0, i1 %20) #1, !dbg !25
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %20, i32 0, i1 %20) #1, !dbg !25
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %21, i32 0, i1 %21) #1, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %21, i32 0, i1 %21) #1, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %21, i32 0, i1 %21) #1, !dbg !25
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %21, i32 0, i1 %21) #1, !dbg !25
  %54 = insertelement <8 x i32> poison, i32 %41, i64 0, !dbg !23
  %55 = insertelement <8 x i32> %54, i32 %40, i64 1, !dbg !23
  %56 = insertelement <8 x i32> %55, i32 %39, i64 2, !dbg !23
  %57 = insertelement <8 x i32> %56, i32 %38, i64 3, !dbg !23
  %58 = insertelement <8 x i32> %57, i32 %36, i64 4, !dbg !23
  %59 = insertelement <8 x i32> %58, i32 %35, i64 5, !dbg !23
  %60 = insertelement <8 x i32> %59, i32 %34, i64 6, !dbg !23
  %61 = insertelement <8 x i32> %60, i32 %33, i64 7, !dbg !23
  %62 = bitcast <8 x i32> %61 to <8 x float>, !dbg !23
  %63 = insertelement <8 x i32> poison, i32 %53, i64 0, !dbg !25
  %64 = insertelement <8 x i32> %63, i32 %52, i64 1, !dbg !25
  %65 = insertelement <8 x i32> %64, i32 %51, i64 2, !dbg !25
  %66 = insertelement <8 x i32> %65, i32 %50, i64 3, !dbg !25
  %67 = insertelement <8 x i32> %66, i32 %49, i64 4, !dbg !25
  %68 = insertelement <8 x i32> %67, i32 %48, i64 5, !dbg !25
  %69 = insertelement <8 x i32> %68, i32 %47, i64 6, !dbg !25
  %70 = insertelement <8 x i32> %69, i32 %46, i64 7, !dbg !25
  %71 = bitcast <8 x i32> %70 to <8 x float>, !dbg !25
  %72 = fadd <8 x float> %62, %71, !dbg !26
  %73 = fcmp olt <8 x float> %72, zeroinitializer, !dbg !27
  %74 = extractelement <8 x i1> %73, i64 7, !dbg !31
  %75 = extractelement <8 x i1> %73, i64 6, !dbg !31
  %76 = extractelement <8 x i1> %73, i64 5, !dbg !31
  %77 = extractelement <8 x i1> %73, i64 4, !dbg !31
  %78 = extractelement <8 x i1> %73, i64 3, !dbg !31
  %79 = extractelement <8 x i1> %73, i64 2, !dbg !31
  %80 = extractelement <8 x i1> %73, i64 1, !dbg !31
  %81 = extractelement <8 x i1> %73, i64 0, !dbg !31
  %82 = icmp sgt i32 %15, 255, !dbg !32
  %83 = icmp sgt i32 %16, 255, !dbg !32
  %84 = shl nsw i32 %15, 6, !dbg !33
  %85 = shl nsw i32 %16, 6, !dbg !33
  %86 = shl nsw i32 %18, 15, !dbg !34
  %87 = shl nsw i32 %19, 15, !dbg !34
  %88 = add nsw i32 %.decomposed, -16384, !dbg !33
  %89 = add nsw i32 %88, %86, !dbg !35
  %90 = add nsw i32 %89, %84, !dbg !36
  %91 = add nsw i32 %88, %87, !dbg !35
  %92 = add nsw i32 %91, %85, !dbg !36
  %93 = sext i32 %90 to i64, !dbg !37
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !37
  %95 = sext i32 %92 to i64, !dbg !37
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !37
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #1, !dbg !38
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !38
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !38
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !38
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !38
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #1, !dbg !38
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !38
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !38
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !38
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !38
  %107 = sext i32 %11 to i64, !dbg !39
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !39
  %109 = sext i32 %12 to i64, !dbg !39
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !39
  %bc = bitcast <8 x float> %72 to <8 x i32>, !dbg !40
  %111 = extractelement <8 x i32> %bc, i64 7, !dbg !40
  %112 = select i1 %74, i32 0, i32 %111, !dbg !31
  %113 = select i1 %20, i32 %112, i32 %98, !dbg !41
  %bc2 = bitcast <8 x float> %72 to <8 x i32>, !dbg !40
  %114 = extractelement <8 x i32> %bc2, i64 6, !dbg !40
  %115 = select i1 %75, i32 0, i32 %114, !dbg !31
  %116 = select i1 %20, i32 %115, i32 %99, !dbg !41
  %bc3 = bitcast <8 x float> %72 to <8 x i32>, !dbg !40
  %117 = extractelement <8 x i32> %bc3, i64 5, !dbg !40
  %118 = select i1 %76, i32 0, i32 %117, !dbg !31
  %119 = select i1 %20, i32 %118, i32 %100, !dbg !41
  %bc4 = bitcast <8 x float> %72 to <8 x i32>, !dbg !40
  %120 = extractelement <8 x i32> %bc4, i64 4, !dbg !40
  %121 = select i1 %77, i32 0, i32 %120, !dbg !31
  %122 = select i1 %20, i32 %121, i32 %101, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %113, i32 %116, i32 %119, i32 %122, ptr addrspace(1) %108, i1 true) #1, !dbg !40
  %bc5 = bitcast <8 x float> %72 to <8 x i32>, !dbg !40
  %123 = extractelement <8 x i32> %bc5, i64 3, !dbg !40
  %124 = select i1 %78, i32 0, i32 %123, !dbg !31
  %125 = select i1 %21, i32 %124, i32 %103, !dbg !41
  %bc6 = bitcast <8 x float> %72 to <8 x i32>, !dbg !40
  %126 = extractelement <8 x i32> %bc6, i64 2, !dbg !40
  %127 = select i1 %79, i32 0, i32 %126, !dbg !31
  %128 = select i1 %21, i32 %127, i32 %104, !dbg !41
  %bc7 = bitcast <8 x float> %72 to <8 x i32>, !dbg !40
  %129 = extractelement <8 x i32> %bc7, i64 1, !dbg !40
  %130 = select i1 %80, i32 0, i32 %129, !dbg !31
  %131 = select i1 %21, i32 %130, i32 %105, !dbg !41
  %bc8 = bitcast <8 x float> %72 to <8 x i32>, !dbg !40
  %132 = extractelement <8 x i32> %bc8, i64 0, !dbg !40
  %133 = select i1 %81, i32 0, i32 %132, !dbg !31
  %134 = select i1 %21, i32 %133, i32 %106, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %125, i32 %128, i32 %131, i32 %134, ptr addrspace(1) %110, i1 true) #1, !dbg !40
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cypf6lthjf7k2d6euikcwbv5iqdbmlkvf6wz3wfp4xv3h62sjniq.py", directory: "inductor_cache/yp")
!4 = !{ptr @triton_poi_fused_cat_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_26", linkageName: "triton_poi_fused_cat_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 37, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 43, column: 40, scope: !7)
!34 = !DILocation(line: 43, column: 61, scope: !7)
!35 = !DILocation(line: 43, column: 36, scope: !7)
!36 = !DILocation(line: 43, column: 55, scope: !7)
!37 = !DILocation(line: 43, column: 31, scope: !7)
!38 = !DILocation(line: 43, column: 66, scope: !7)
!39 = !DILocation(line: 45, column: 25, scope: !7)
!40 = !DILocation(line: 45, column: 37, scope: !7)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 45, column: 4, scope: !7)
