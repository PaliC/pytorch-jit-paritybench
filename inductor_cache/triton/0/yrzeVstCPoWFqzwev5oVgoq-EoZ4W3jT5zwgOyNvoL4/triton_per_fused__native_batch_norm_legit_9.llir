; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %9 = and i32 %8, 31, !dbg !11
  %10 = lshr i32 %8, 5, !dbg !11
  %11 = and i32 %8, 255, !dbg !11
  %12 = shl nuw nsw i32 %11, 5, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %13 = sdiv i32 %.frozen, 32, !dbg !13
  %14 = shl i32 %13, 15, !dbg !14
  %15 = or disjoint i32 %14, %12, !dbg !15
  %16 = mul i32 %13, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = add i32 %15, %.decomposed, !dbg !17
  %18 = add nsw i32 %.decomposed, 8192, !dbg !15
  %19 = add i32 %18, %15, !dbg !17
  %20 = add nsw i32 %.decomposed, 16384, !dbg !15
  %21 = add i32 %20, %15, !dbg !17
  %22 = add nsw i32 %.decomposed, 24576, !dbg !15
  %23 = add i32 %22, %15, !dbg !17
  %24 = sext i32 %17 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = sext i32 %19 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !18
  %28 = sext i32 %21 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !18
  %30 = sext i32 %23 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !19
  %33 = bitcast i32 %32 to float, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !19
  %35 = bitcast i32 %34 to float, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !19
  %37 = bitcast i32 %36 to float, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !19
  %39 = bitcast i32 %38 to float, !dbg !19
  %40 = fadd float %33, %35, !dbg !20
  %41 = fadd float %40, %37, !dbg !20
  %42 = fadd float %41, %39, !dbg !20
  %43 = bitcast float %42 to i32, !dbg !25
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !25
  %45 = bitcast i32 %44 to float, !dbg !25
  %46 = fadd float %42, %45, !dbg !20
  %47 = bitcast float %46 to i32, !dbg !25
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !25
  %49 = bitcast i32 %48 to float, !dbg !25
  %50 = fadd float %46, %49, !dbg !20
  %51 = bitcast float %50 to i32, !dbg !25
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = fadd float %50, %53, !dbg !20
  %55 = bitcast float %54 to i32, !dbg !25
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !25
  %57 = bitcast i32 %56 to float, !dbg !25
  %58 = fadd float %54, %57, !dbg !20
  %59 = bitcast float %58 to i32, !dbg !25
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !25
  %61 = bitcast i32 %60 to float, !dbg !25
  %62 = fadd float %58, %61, !dbg !20
  %63 = icmp eq i32 %9, 0, !dbg !25
  %64 = and i32 %10, 7, !dbg !25
  %65 = zext nneg i32 %64 to i64, !dbg !25
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i64 %65, !dbg !25
  %67 = bitcast float %62 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 %63) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %68 = icmp slt i32 %8, 8, !dbg !25
  %69 = sext i32 %8 to i64, !dbg !25
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i64 %69, !dbg !25
  %71 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %68) #5, !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 4, i32 31), !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = fadd float %72, %74, !dbg !20
  %76 = bitcast float %75 to i32, !dbg !25
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 2, i32 31), !dbg !25
  %78 = bitcast i32 %77 to float, !dbg !25
  %79 = fadd float %75, %78, !dbg !20
  %80 = bitcast float %79 to i32, !dbg !25
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !25
  %82 = bitcast i32 %81 to float, !dbg !25
  %83 = fadd float %79, %82, !dbg !20
  %84 = and i32 %8, 7, !dbg !25
  %85 = icmp eq i32 %84, 0, !dbg !25
  %86 = and i1 %68, %85, !dbg !25
  %87 = bitcast float %83 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %87, i1 %86) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %88 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %89 = fadd float %88, 0.000000e+00, !dbg !26
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 1.024000e+03) #5, !dbg !30
  %91 = fsub float %33, %90, !dbg !31
  %92 = fsub float %35, %90, !dbg !31
  %93 = fsub float %37, %90, !dbg !31
  %94 = fsub float %39, %90, !dbg !31
  %95 = fmul float %91, %91, !dbg !32
  %96 = fmul float %92, %92, !dbg !32
  %97 = fmul float %93, %93, !dbg !32
  %98 = fmul float %94, %94, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %99 = fadd float %95, %96, !dbg !35
  %100 = fadd float %97, %99, !dbg !35
  %101 = fadd float %98, %100, !dbg !35
  %102 = bitcast float %101 to i32, !dbg !33
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !33
  %104 = bitcast i32 %103 to float, !dbg !33
  %105 = fadd float %101, %104, !dbg !35
  %106 = bitcast float %105 to i32, !dbg !33
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !33
  %108 = bitcast i32 %107 to float, !dbg !33
  %109 = fadd float %105, %108, !dbg !35
  %110 = bitcast float %109 to i32, !dbg !33
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !33
  %112 = bitcast i32 %111 to float, !dbg !33
  %113 = fadd float %109, %112, !dbg !35
  %114 = bitcast float %113 to i32, !dbg !33
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !33
  %116 = bitcast i32 %115 to float, !dbg !33
  %117 = fadd float %113, %116, !dbg !35
  %118 = bitcast float %117 to i32, !dbg !33
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !33
  %120 = bitcast i32 %119 to float, !dbg !33
  %121 = fadd float %117, %120, !dbg !35
  %122 = bitcast float %121 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %122, i1 %63) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %123 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %68) #5, !dbg !33
  %124 = bitcast i32 %123 to float, !dbg !33
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 4, i32 31), !dbg !33
  %126 = bitcast i32 %125 to float, !dbg !33
  %127 = fadd float %124, %126, !dbg !35
  %128 = bitcast float %127 to i32, !dbg !33
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !33
  %130 = bitcast i32 %129 to float, !dbg !33
  %131 = fadd float %127, %130, !dbg !35
  %132 = bitcast float %131 to i32, !dbg !33
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !33
  %134 = bitcast i32 %133 to float, !dbg !33
  %135 = fadd float %131, %134, !dbg !35
  %136 = bitcast float %135 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %136, i1 %86) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %137 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %138 = fadd float %137, 0.000000e+00, !dbg !36
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 1.024000e+03) #5, !dbg !38
  %140 = fadd float %139, 0x3EE4F8B580000000, !dbg !39
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %141, 0, !dbg !40
  br i1 %.not.i, label %144, label %142, !dbg !40

142:                                              ; preds = %6
  %143 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %140), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

144:                                              ; preds = %6
  %145 = tail call float @llvm.nvvm.rsqrt.approx.f(float %140), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %142, %144
  %.0.i = phi float [ %143, %142 ], [ %145, %144 ], !dbg !40
  %146 = sext i32 %7 to i64, !dbg !41
  %147 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !41
  %148 = icmp eq i32 %11, 0, !dbg !42
  %149 = bitcast float %.0.i to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %147, i1 %148) #5, !dbg !42
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !43
  %151 = bitcast float %90 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %150, i1 %148) #5, !dbg !44
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !45
  %153 = bitcast float %138 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %152, i1 %148) #5, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn4ypdfrnuzbwjecjoyzuvcnz2iymgegnocizx5jilt5ng6r733x.py", directory: "inductor_cache/n4")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_9", linkageName: "triton_per_fused__native_batch_norm_legit_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 51, scope: !7)
!14 = !DILocation(line: 32, column: 45, scope: !7)
!15 = !DILocation(line: 32, column: 38, scope: !7)
!16 = !DILocation(line: 32, column: 64, scope: !7)
!17 = !DILocation(line: 32, column: 59, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 71, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 35, column: 57, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 35, column: 44, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !34)
!34 = !DILocation(line: 42, column: 59, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !34)
!36 = !DILocation(line: 73, column: 15, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 42, column: 45, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 28, scope: !7)
!41 = !DILocation(line: 48, column: 25, scope: !7)
!42 = !DILocation(line: 48, column: 37, scope: !7)
!43 = !DILocation(line: 49, column: 25, scope: !7)
!44 = !DILocation(line: 49, column: 36, scope: !7)
!45 = !DILocation(line: 50, column: 25, scope: !7)
!46 = !DILocation(line: 50, column: 37, scope: !7)
!47 = !DILocation(line: 50, column: 4, scope: !7)
