; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__softmax_mul_sum_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = or disjoint i32 %18, %13, !dbg !16
  %20 = or disjoint i32 %18, %10, !dbg !16
  %21 = or disjoint i32 %18, %11, !dbg !16
  %22 = icmp slt i32 %19, 512, !dbg !17
  %23 = icmp slt i32 %20, 512, !dbg !17
  %24 = icmp slt i32 %21, 512, !dbg !17
  %25 = sdiv i32 %14, 4096, !dbg !18
  %26 = sdiv i32 %15, 4096, !dbg !18
  %.frozen = freeze i32 %16, !dbg !18
  %27 = sdiv i32 %.frozen, 4096, !dbg !18
  %28 = mul i32 %27, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %28, !dbg !19
  %29 = shl nsw i32 %25, 9, !dbg !20
  %30 = shl nsw i32 %26, 9, !dbg !20
  %31 = add i32 %29, %19, !dbg !21
  %32 = add i32 %30, %19, !dbg !21
  %33 = sext i32 %31 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #2, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %22) #2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !23
  %47 = shl i32 %14, 9, !dbg !24
  %48 = shl i32 %15, 9, !dbg !24
  %49 = add i32 %19, %47, !dbg !25
  %50 = add i32 %19, %48, !dbg !25
  %51 = sext i32 %49 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !26
  %53 = sext i32 %50 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %22) #2, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !27
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %22) #2, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !27
  %65 = add i32 %19, 2048, !dbg !28
  %66 = add i32 %65, %29, !dbg !29
  %67 = add i32 %65, %30, !dbg !29
  %68 = sext i32 %66 to i64, !dbg !30
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !30
  %70 = sext i32 %67 to i64, !dbg !30
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !30
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %22) #2, !dbg !31
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !31
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !31
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !31
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %22) #2, !dbg !31
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !31
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !31
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !31
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !31
  %82 = add i32 %19, 8388608, !dbg !32
  %83 = add i32 %82, %47, !dbg !33
  %84 = add i32 %82, %48, !dbg !33
  %85 = sext i32 %83 to i64, !dbg !34
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !34
  %87 = sext i32 %84 to i64, !dbg !34
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !34
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %22) #2, !dbg !35
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !35
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !35
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !35
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !35
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %22) #2, !dbg !35
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !35
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !35
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !35
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !35
  %99 = add i32 %19, 4096, !dbg !36
  %100 = add i32 %99, %29, !dbg !37
  %101 = add i32 %99, %30, !dbg !37
  %102 = sext i32 %100 to i64, !dbg !38
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !38
  %104 = sext i32 %101 to i64, !dbg !38
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !38
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %22) #2, !dbg !39
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !39
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !39
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !39
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !39
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %22) #2, !dbg !39
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !39
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !39
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !39
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !39
  %116 = add i32 %19, 16777216, !dbg !40
  %117 = add i32 %116, %47, !dbg !41
  %118 = add i32 %116, %48, !dbg !41
  %119 = sext i32 %117 to i64, !dbg !42
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !42
  %121 = sext i32 %118 to i64, !dbg !42
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !42
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %120, i1 %22) #2, !dbg !43
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !43
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !43
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !43
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !43
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 %22) #2, !dbg !43
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !43
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !43
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !43
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !43
  %133 = add i32 %19, 6144, !dbg !44
  %134 = add i32 %133, %29, !dbg !45
  %135 = add i32 %133, %30, !dbg !45
  %136 = sext i32 %134 to i64, !dbg !46
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !46
  %138 = sext i32 %135 to i64, !dbg !46
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !46
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %22) #2, !dbg !47
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !47
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !47
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !47
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !47
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %139, i1 %22) #2, !dbg !47
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !47
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !47
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !47
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !47
  %150 = add i32 %19, 25165824, !dbg !48
  %151 = add i32 %150, %47, !dbg !49
  %152 = add i32 %150, %48, !dbg !49
  %153 = sext i32 %151 to i64, !dbg !50
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !50
  %155 = sext i32 %152 to i64, !dbg !50
  %156 = getelementptr float, ptr addrspace(1) %1, i64 %155, !dbg !50
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 %22) #2, !dbg !51
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !51
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !51
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !51
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !51
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %22) #2, !dbg !51
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !51
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !51
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !51
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !51
  %167 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !23
  %168 = insertelement <2 x i32> %167, i32 %73, i64 1, !dbg !23
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !23
  %170 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !27
  %171 = insertelement <2 x i32> %170, i32 %90, i64 1, !dbg !27
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !27
  %173 = fmul <2 x float> %169, %172, !dbg !52
  %174 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !23
  %175 = insertelement <2 x i32> %174, i32 %74, i64 1, !dbg !23
  %176 = bitcast <2 x i32> %175 to <2 x float>, !dbg !23
  %177 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !27
  %178 = insertelement <2 x i32> %177, i32 %91, i64 1, !dbg !27
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !27
  %180 = fmul <2 x float> %176, %179, !dbg !52
  %181 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !23
  %182 = insertelement <2 x i32> %181, i32 %75, i64 1, !dbg !23
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !23
  %184 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !27
  %185 = insertelement <2 x i32> %184, i32 %92, i64 1, !dbg !27
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !27
  %187 = fmul <2 x float> %183, %186, !dbg !52
  %188 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !23
  %189 = insertelement <2 x i32> %188, i32 %76, i64 1, !dbg !23
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !23
  %191 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !27
  %192 = insertelement <2 x i32> %191, i32 %93, i64 1, !dbg !27
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !27
  %194 = fmul <2 x float> %190, %193, !dbg !52
  %195 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !23
  %196 = insertelement <2 x i32> %195, i32 %78, i64 1, !dbg !23
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !23
  %198 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !27
  %199 = insertelement <2 x i32> %198, i32 %95, i64 1, !dbg !27
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !27
  %201 = fmul <2 x float> %197, %200, !dbg !52
  %202 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !23
  %203 = insertelement <2 x i32> %202, i32 %79, i64 1, !dbg !23
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !23
  %205 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !27
  %206 = insertelement <2 x i32> %205, i32 %96, i64 1, !dbg !27
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !27
  %208 = fmul <2 x float> %204, %207, !dbg !52
  %209 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !23
  %210 = insertelement <2 x i32> %209, i32 %80, i64 1, !dbg !23
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !23
  %212 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !27
  %213 = insertelement <2 x i32> %212, i32 %97, i64 1, !dbg !27
  %214 = bitcast <2 x i32> %213 to <2 x float>, !dbg !27
  %215 = fmul <2 x float> %211, %214, !dbg !52
  %216 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !23
  %217 = insertelement <2 x i32> %216, i32 %81, i64 1, !dbg !23
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !23
  %219 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !27
  %220 = insertelement <2 x i32> %219, i32 %98, i64 1, !dbg !27
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !27
  %222 = fmul <2 x float> %218, %221, !dbg !52
  %shift = shufflevector <2 x float> %173, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %223 = fadd <2 x float> %173, %shift, !dbg !53
  %shift15 = shufflevector <2 x float> %180, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %224 = fadd <2 x float> %180, %shift15, !dbg !53
  %shift16 = shufflevector <2 x float> %187, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %225 = fadd <2 x float> %187, %shift16, !dbg !53
  %shift17 = shufflevector <2 x float> %194, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %226 = fadd <2 x float> %194, %shift17, !dbg !53
  %shift18 = shufflevector <2 x float> %201, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %227 = fadd <2 x float> %201, %shift18, !dbg !53
  %shift19 = shufflevector <2 x float> %208, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %228 = fadd <2 x float> %208, %shift19, !dbg !53
  %shift20 = shufflevector <2 x float> %215, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %229 = fadd <2 x float> %215, %shift20, !dbg !53
  %shift21 = shufflevector <2 x float> %222, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %230 = fadd <2 x float> %222, %shift21, !dbg !53
  %231 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !39
  %232 = insertelement <2 x i32> %231, i32 %141, i64 1, !dbg !39
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !39
  %234 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !43
  %235 = insertelement <2 x i32> %234, i32 %158, i64 1, !dbg !43
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !43
  %237 = fmul <2 x float> %233, %236, !dbg !54
  %238 = fadd <2 x float> %223, %237, !dbg !55
  %239 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !39
  %240 = insertelement <2 x i32> %239, i32 %142, i64 1, !dbg !39
  %241 = bitcast <2 x i32> %240 to <2 x float>, !dbg !39
  %242 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !43
  %243 = insertelement <2 x i32> %242, i32 %159, i64 1, !dbg !43
  %244 = bitcast <2 x i32> %243 to <2 x float>, !dbg !43
  %245 = fmul <2 x float> %241, %244, !dbg !54
  %246 = fadd <2 x float> %224, %245, !dbg !55
  %247 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !39
  %248 = insertelement <2 x i32> %247, i32 %143, i64 1, !dbg !39
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !39
  %250 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !43
  %251 = insertelement <2 x i32> %250, i32 %160, i64 1, !dbg !43
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !43
  %253 = fmul <2 x float> %249, %252, !dbg !54
  %254 = fadd <2 x float> %225, %253, !dbg !55
  %255 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !39
  %256 = insertelement <2 x i32> %255, i32 %144, i64 1, !dbg !39
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !39
  %258 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !43
  %259 = insertelement <2 x i32> %258, i32 %161, i64 1, !dbg !43
  %260 = bitcast <2 x i32> %259 to <2 x float>, !dbg !43
  %261 = fmul <2 x float> %257, %260, !dbg !54
  %262 = fadd <2 x float> %226, %261, !dbg !55
  %263 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !39
  %264 = insertelement <2 x i32> %263, i32 %146, i64 1, !dbg !39
  %265 = bitcast <2 x i32> %264 to <2 x float>, !dbg !39
  %266 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !43
  %267 = insertelement <2 x i32> %266, i32 %163, i64 1, !dbg !43
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !43
  %269 = fmul <2 x float> %265, %268, !dbg !54
  %270 = fadd <2 x float> %227, %269, !dbg !55
  %271 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !39
  %272 = insertelement <2 x i32> %271, i32 %147, i64 1, !dbg !39
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !39
  %274 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !43
  %275 = insertelement <2 x i32> %274, i32 %164, i64 1, !dbg !43
  %276 = bitcast <2 x i32> %275 to <2 x float>, !dbg !43
  %277 = fmul <2 x float> %273, %276, !dbg !54
  %278 = fadd <2 x float> %228, %277, !dbg !55
  %279 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !39
  %280 = insertelement <2 x i32> %279, i32 %148, i64 1, !dbg !39
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !39
  %282 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !43
  %283 = insertelement <2 x i32> %282, i32 %165, i64 1, !dbg !43
  %284 = bitcast <2 x i32> %283 to <2 x float>, !dbg !43
  %285 = fmul <2 x float> %281, %284, !dbg !54
  %286 = fadd <2 x float> %229, %285, !dbg !55
  %287 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !39
  %288 = insertelement <2 x i32> %287, i32 %149, i64 1, !dbg !39
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !39
  %290 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !43
  %291 = insertelement <2 x i32> %290, i32 %166, i64 1, !dbg !43
  %292 = bitcast <2 x i32> %291 to <2 x float>, !dbg !43
  %293 = fmul <2 x float> %289, %292, !dbg !54
  %294 = fadd <2 x float> %230, %293, !dbg !55
  %shift22 = shufflevector <2 x float> %237, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %295 = fadd <2 x float> %238, %shift22, !dbg !56
  %296 = extractelement <2 x float> %295, i64 0, !dbg !56
  %shift23 = shufflevector <2 x float> %245, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %297 = fadd <2 x float> %246, %shift23, !dbg !56
  %298 = extractelement <2 x float> %297, i64 0, !dbg !56
  %shift24 = shufflevector <2 x float> %253, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %299 = fadd <2 x float> %254, %shift24, !dbg !56
  %300 = extractelement <2 x float> %299, i64 0, !dbg !56
  %shift25 = shufflevector <2 x float> %261, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %301 = fadd <2 x float> %262, %shift25, !dbg !56
  %302 = extractelement <2 x float> %301, i64 0, !dbg !56
  %shift26 = shufflevector <2 x float> %269, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %303 = fadd <2 x float> %270, %shift26, !dbg !56
  %304 = extractelement <2 x float> %303, i64 0, !dbg !56
  %shift27 = shufflevector <2 x float> %277, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %305 = fadd <2 x float> %278, %shift27, !dbg !56
  %306 = extractelement <2 x float> %305, i64 0, !dbg !56
  %shift28 = shufflevector <2 x float> %285, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %307 = fadd <2 x float> %286, %shift28, !dbg !56
  %308 = extractelement <2 x float> %307, i64 0, !dbg !56
  %shift29 = shufflevector <2 x float> %293, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %309 = fadd <2 x float> %294, %shift29, !dbg !56
  %310 = extractelement <2 x float> %309, i64 0, !dbg !56
  %311 = shl i32 %20, 12, !dbg !57
  %312 = shl i32 %21, 12, !dbg !57
  %313 = shl i32 %27, 21, !dbg !58
  %314 = add i32 %313, %.decomposed, !dbg !59
  %315 = add i32 %314, %311, !dbg !60
  %316 = add i32 %314, %312, !dbg !60
  %317 = sext i32 %315 to i64, !dbg !61
  %318 = getelementptr float, ptr addrspace(1) %2, i64 %317, !dbg !61
  %319 = sext i32 %316 to i64, !dbg !61
  %320 = getelementptr float, ptr addrspace(1) %2, i64 %319, !dbg !61
  %321 = shl i32 %8, 7, !dbg !62
  %322 = and i32 %321, 896, !dbg !62
  %323 = or disjoint i32 %322, %10, !dbg !62
  %324 = and i32 %12, 508, !dbg !62
  %325 = lshr exact i32 %322, 1, !dbg !62
  %326 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %325, !dbg !62
  %327 = getelementptr float, ptr addrspace(3) %326, i32 %323, !dbg !62
  %328 = bitcast float %296 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #2, !dbg !62
  %329 = or disjoint i32 %323, 32, !dbg !62
  %330 = lshr i32 %329, 3, !dbg !62
  %331 = and i32 %330, 116, !dbg !62
  %332 = getelementptr float, ptr addrspace(3) @global_smem, i32 %331, !dbg !62
  %333 = getelementptr float, ptr addrspace(3) %332, i32 %329, !dbg !62
  %334 = bitcast float %298 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #2, !dbg !62
  %335 = or disjoint i32 %323, 64, !dbg !62
  %336 = lshr i32 %335, 3, !dbg !62
  %337 = and i32 %336, 120, !dbg !62
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !62
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %335, !dbg !62
  %340 = bitcast float %300 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #2, !dbg !62
  %341 = or disjoint i32 %323, 96, !dbg !62
  %342 = lshr i32 %341, 3, !dbg !62
  %343 = and i32 %342, 124, !dbg !62
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i32 %343, !dbg !62
  %345 = getelementptr float, ptr addrspace(3) %344, i32 %341, !dbg !62
  %346 = bitcast float %302 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #2, !dbg !62
  %347 = or disjoint i32 %323, 16, !dbg !62
  %348 = getelementptr float, ptr addrspace(3) %326, i32 %347, !dbg !62
  %349 = bitcast float %304 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %349, i1 true) #2, !dbg !62
  %350 = or disjoint i32 %323, 48, !dbg !62
  %351 = lshr i32 %350, 3, !dbg !62
  %352 = and i32 %351, 116, !dbg !62
  %353 = getelementptr float, ptr addrspace(3) @global_smem, i32 %352, !dbg !62
  %354 = getelementptr float, ptr addrspace(3) %353, i32 %350, !dbg !62
  %355 = bitcast float %306 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, <1 x i32> %355, i1 true) #2, !dbg !62
  %356 = or disjoint i32 %323, 80, !dbg !62
  %357 = lshr i32 %356, 3, !dbg !62
  %358 = and i32 %357, 120, !dbg !62
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i32 %358, !dbg !62
  %360 = getelementptr float, ptr addrspace(3) %359, i32 %356, !dbg !62
  %361 = bitcast float %308 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #2, !dbg !62
  %362 = or disjoint i32 %323, 112, !dbg !62
  %363 = lshr i32 %362, 3, !dbg !62
  %364 = and i32 %363, 124, !dbg !62
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i32 %364, !dbg !62
  %366 = getelementptr float, ptr addrspace(3) %365, i32 %362, !dbg !62
  %367 = bitcast float %310 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 true) #2, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %368 = lshr i32 %12, 3, !dbg !62
  %369 = and i32 %368, 60, !dbg !62
  %370 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %369, !dbg !62
  %371 = getelementptr inbounds float, ptr addrspace(3) %370, i32 %324, !dbg !62
  %372 = or disjoint i32 %324, 512, !dbg !62
  %373 = lshr i32 %372, 3, !dbg !62
  %374 = and i32 %373, 124, !dbg !62
  %375 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %374, !dbg !62
  %376 = getelementptr inbounds float, ptr addrspace(3) %375, i32 %372, !dbg !62
  %377 = load <4 x i32>, ptr addrspace(3) %376, align 16, !dbg !62
  %.extract = load i32, ptr addrspace(3) %371, align 16, !dbg !62
  %378 = getelementptr inbounds i8, ptr addrspace(3) %371, i32 4, !dbg !62
  %.extract8 = load i32, ptr addrspace(3) %378, align 4, !dbg !62
  %379 = getelementptr inbounds i8, ptr addrspace(3) %371, i32 8, !dbg !62
  %.extract9 = load i32, ptr addrspace(3) %379, align 8, !dbg !62
  %380 = getelementptr inbounds i8, ptr addrspace(3) %371, i32 12, !dbg !62
  %.extract10 = load i32, ptr addrspace(3) %380, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %318, i1 %23) #2, !dbg !62
  %.extract11 = extractelement <4 x i32> %377, i64 0, !dbg !62
  %.extract12 = extractelement <4 x i32> %377, i64 1, !dbg !62
  %.extract13 = extractelement <4 x i32> %377, i64 2, !dbg !62
  %.extract14 = extractelement <4 x i32> %377, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %320, i1 %24) #2, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3api6onjseajvp6qxcdvzkpjeo73u5r6t76ylynvqyrjhahbfcd.py", directory: "inductor_cache/3a")
!4 = !{ptr @triton_poi_fused__softmax_mul_sum_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_sum_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_sum_12", linkageName: "triton_poi_fused__softmax_mul_sum_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 39, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 37, scope: !7)
!29 = !DILocation(line: 34, column: 42, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 51, scope: !7)
!32 = !DILocation(line: 35, column: 40, scope: !7)
!33 = !DILocation(line: 35, column: 45, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 54, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 36, column: 42, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 51, scope: !7)
!40 = !DILocation(line: 37, column: 41, scope: !7)
!41 = !DILocation(line: 37, column: 46, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 55, scope: !7)
!44 = !DILocation(line: 38, column: 38, scope: !7)
!45 = !DILocation(line: 38, column: 43, scope: !7)
!46 = !DILocation(line: 38, column: 31, scope: !7)
!47 = !DILocation(line: 38, column: 52, scope: !7)
!48 = !DILocation(line: 39, column: 42, scope: !7)
!49 = !DILocation(line: 39, column: 47, scope: !7)
!50 = !DILocation(line: 39, column: 31, scope: !7)
!51 = !DILocation(line: 39, column: 56, scope: !7)
!52 = !DILocation(line: 40, column: 18, scope: !7)
!53 = !DILocation(line: 42, column: 18, scope: !7)
!54 = !DILocation(line: 43, column: 18, scope: !7)
!55 = !DILocation(line: 44, column: 19, scope: !7)
!56 = !DILocation(line: 46, column: 20, scope: !7)
!57 = !DILocation(line: 47, column: 35, scope: !7)
!58 = !DILocation(line: 47, column: 48, scope: !7)
!59 = !DILocation(line: 47, column: 30, scope: !7)
!60 = !DILocation(line: 47, column: 40, scope: !7)
!61 = !DILocation(line: 47, column: 25, scope: !7)
!62 = !DILocation(line: 47, column: 60, scope: !7)
!63 = !DILocation(line: 47, column: 4, scope: !7)
