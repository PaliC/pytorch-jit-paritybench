; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_62(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = icmp slt i32 %19, 215040, !dbg !14
  %22 = icmp slt i32 %20, 215040, !dbg !14
  %23 = srem i32 %19, 256, !dbg !15
  %.frozen = freeze i32 %19, !dbg !16
  %24 = sdiv i32 %.frozen, 53760, !dbg !16
  %.frozen83 = freeze i32 %20, !dbg !16
  %25 = sdiv i32 %.frozen83, 53760, !dbg !16
  %26 = mul i32 %24, 53760, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %26, !dbg !17
  %27 = mul i32 %25, 53760, !dbg !17
  %srem1.decomposed = sub i32 %.frozen83, %27, !dbg !17
  %28 = mul nsw i32 %24, 38400, !dbg !18
  %29 = mul nsw i32 %25, 38400, !dbg !18
  %30 = add nsw i32 %28, %srem.decomposed, !dbg !19
  %31 = add nsw i32 %29, %srem1.decomposed, !dbg !19
  %32 = sext i32 %30 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = sext i32 %31 to i64, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !20
  %36 = mul nsw i32 %24, 3072, !dbg !21
  %37 = mul nsw i32 %25, 3072, !dbg !21
  %38 = add nsw i32 %36, %23, !dbg !22
  %39 = add nsw i32 %38, -38400, !dbg !23
  %40 = add nsw i32 %37, %23, !dbg !22
  %41 = add nsw i32 %40, -38400, !dbg !23
  %42 = add nsw i32 %38, -41472, !dbg !24
  %43 = add nsw i32 %40, -41472, !dbg !24
  %44 = add nsw i32 %38, -44544, !dbg !25
  %45 = add nsw i32 %40, -44544, !dbg !25
  %46 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !26
  %47 = insertelement <2 x i32> %46, i32 %19, i64 1, !dbg !26
  %48 = sdiv <2 x i32> %47, splat (i32 256), !dbg !26
  %49 = srem <2 x i32> %48, splat (i32 210), !dbg !27
  %50 = extractelement <2 x i32> %49, i64 1, !dbg !28
  %51 = sext i32 %50 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %6, i64 %51, !dbg !28
  %53 = extractelement <2 x i32> %49, i64 0, !dbg !28
  %54 = sext i32 %53 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %6, i64 %54, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #3, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #3, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #3, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #3, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %22) #3, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %22) #3, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %22) #3, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %22) #3, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %7, i64 %54, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %21) #3, !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %21) #3, !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %21) #3, !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %21) #3, !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !31
  %79 = bitcast i32 %78 to float, !dbg !31
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !31
  %81 = bitcast i32 %80 to float, !dbg !31
  %82 = getelementptr float, ptr addrspace(1) %8, i64 %51, !dbg !32
  %83 = getelementptr float, ptr addrspace(1) %8, i64 %54, !dbg !32
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %21) #3, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %21) #3, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %21) #3, !dbg !33
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %21) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %22) #3, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %22) #3, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %22) #3, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %22) #3, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %9, i64 %51, !dbg !34
  %93 = getelementptr float, ptr addrspace(1) %9, i64 %54, !dbg !34
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %21) #3, !dbg !35
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %21) #3, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %21) #3, !dbg !35
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %21) #3, !dbg !35
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %22) #3, !dbg !35
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %22) #3, !dbg !35
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %22) #3, !dbg !35
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %22) #3, !dbg !35
  %102 = icmp slt <2 x i32> %49, splat (i32 150), !dbg !36
  %103 = extractelement <2 x i1> %102, i64 1, !dbg !37
  %104 = and i1 %21, %103, !dbg !37
  %105 = extractelement <2 x i1> %102, i64 0, !dbg !37
  %106 = and i1 %22, %105, !dbg !37
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !38
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !38
  %109 = add nsw <2 x i32> %49, splat (i32 -150), !dbg !39
  %110 = icmp ult <2 x i32> %109, splat (i32 12), !dbg !39
  %111 = shl nsw i32 %50, 8, !dbg !22
  %112 = shl nsw i32 %53, 8, !dbg !22
  %113 = add nsw i32 %39, %111, !dbg !40
  %114 = add nsw i32 %41, %112, !dbg !40
  %115 = sext i32 %113 to i64, !dbg !41
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !41
  %117 = sext i32 %114 to i64, !dbg !41
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !41
  %119 = extractelement <2 x i1> %110, i64 1, !dbg !42
  %120 = and i1 %21, %119, !dbg !42
  %121 = extractelement <2 x i1> %110, i64 0, !dbg !42
  %122 = and i1 %22, %121, !dbg !42
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !43
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #3, !dbg !43
  %125 = add nsw <2 x i32> %49, splat (i32 -162), !dbg !44
  %126 = icmp ult <2 x i32> %125, splat (i32 12), !dbg !44
  %127 = add nsw i32 %42, %111, !dbg !45
  %128 = add nsw i32 %43, %112, !dbg !45
  %129 = sext i32 %127 to i64, !dbg !46
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !46
  %131 = sext i32 %128 to i64, !dbg !46
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !46
  %133 = extractelement <2 x i1> %126, i64 1, !dbg !47
  %134 = and i1 %21, %133, !dbg !47
  %135 = extractelement <2 x i1> %126, i64 0, !dbg !47
  %136 = and i1 %22, %135, !dbg !47
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %130, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #3, !dbg !48
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %132, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #3, !dbg !48
  %139 = add nsw <2 x i32> %49, splat (i32 -174), !dbg !49
  %140 = icmp ult <2 x i32> %139, splat (i32 12), !dbg !49
  %141 = add nsw i32 %44, %111, !dbg !50
  %142 = add nsw i32 %45, %112, !dbg !50
  %143 = sext i32 %141 to i64, !dbg !51
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %143, !dbg !51
  %145 = sext i32 %142 to i64, !dbg !51
  %146 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !51
  %147 = extractelement <2 x i1> %140, i64 1, !dbg !52
  %148 = and i1 %21, %147, !dbg !52
  %149 = extractelement <2 x i1> %140, i64 0, !dbg !52
  %150 = and i1 %22, %149, !dbg !52
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148) #3, !dbg !53
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %150, i32 0, i1 %150, i32 0, i1 %150, i32 0, i1 %150, i32 0, i1 %150) #3, !dbg !53
  %153 = add nsw <2 x i32> %49, splat (i32 -186), !dbg !54
  %154 = icmp ult <2 x i32> %153, splat (i32 12), !dbg !54
  %155 = add nsw i32 %38, -47616, !dbg !55
  %156 = add nsw i32 %155, %111, !dbg !56
  %157 = add nsw i32 %40, -47616, !dbg !55
  %158 = add nsw i32 %157, %112, !dbg !56
  %159 = sext i32 %156 to i64, !dbg !57
  %160 = getelementptr float, ptr addrspace(1) %4, i64 %159, !dbg !57
  %161 = sext i32 %158 to i64, !dbg !57
  %162 = getelementptr float, ptr addrspace(1) %4, i64 %161, !dbg !57
  %163 = extractelement <2 x i1> %154, i64 1, !dbg !58
  %164 = and i1 %21, %163, !dbg !58
  %165 = extractelement <2 x i1> %154, i64 0, !dbg !58
  %166 = and i1 %22, %165, !dbg !58
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %164, i32 0, i1 %164, i32 0, i1 %164, i32 0, i1 %164, i32 0, i1 %164) #3, !dbg !59
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %162, i1 %166, i32 0, i1 %166, i32 0, i1 %166, i32 0, i1 %166, i32 0, i1 %166) #3, !dbg !59
  %169 = icmp sgt i32 %50, 197, !dbg !60
  %170 = icmp sgt i32 %53, 197, !dbg !60
  %171 = add nsw i32 %38, -50688, !dbg !61
  %172 = add nsw i32 %171, %111, !dbg !62
  %173 = add nsw i32 %40, -50688, !dbg !61
  %174 = add nsw i32 %173, %112, !dbg !62
  %175 = sext i32 %172 to i64, !dbg !63
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %175, !dbg !63
  %177 = sext i32 %174 to i64, !dbg !63
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %177, !dbg !63
  %179 = and i1 %21, %169, !dbg !64
  %180 = and i1 %22, %170, !dbg !64
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #3, !dbg !65
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !65
  %183 = fadd float %67, 0x3EE4F8B580000000, !dbg !66
  %184 = fadd float %69, 0x3EE4F8B580000000, !dbg !66
  %185 = fadd float %71, 0x3EE4F8B580000000, !dbg !66
  %186 = fadd float %73, 0x3EE4F8B580000000, !dbg !66
  %187 = fadd float %75, 0x3EE4F8B580000000, !dbg !66
  %188 = fadd float %77, 0x3EE4F8B580000000, !dbg !66
  %189 = fadd float %79, 0x3EE4F8B580000000, !dbg !66
  %190 = fadd float %81, 0x3EE4F8B580000000, !dbg !66
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i = icmp eq i32 %191, 0, !dbg !67
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i = icmp eq i32 %192, 0, !dbg !67
  br i1 %.not.i, label %198, label %193, !dbg !67

193:                                              ; preds = %13
  br i1 %.not1.i, label %196, label %194, !dbg !67

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %183) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %183) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

198:                                              ; preds = %13
  br i1 %.not1.i, label %201, label %199, !dbg !67

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %183) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %183) #3, !dbg !67
  br label %__nv_sqrtf.exit, !dbg !67

__nv_sqrtf.exit:                                  ; preds = %194, %196, %199, %201
  %.0.i = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !67
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i41 = icmp eq i32 %203, 0, !dbg !67
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i44 = icmp eq i32 %204, 0, !dbg !67
  br i1 %.not.i41, label %210, label %205, !dbg !67

205:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i44, label %208, label %206, !dbg !67

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %184) #3, !dbg !67
  br label %__nv_sqrtf.exit45, !dbg !67

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %184) #3, !dbg !67
  br label %__nv_sqrtf.exit45, !dbg !67

210:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i44, label %213, label %211, !dbg !67

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.f(float %184) #3, !dbg !67
  br label %__nv_sqrtf.exit45, !dbg !67

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.f(float %184) #3, !dbg !67
  br label %__nv_sqrtf.exit45, !dbg !67

__nv_sqrtf.exit45:                                ; preds = %206, %208, %211, %213
  %.0.i43 = phi float [ %207, %206 ], [ %209, %208 ], [ %212, %211 ], [ %214, %213 ], !dbg !67
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i46 = icmp eq i32 %215, 0, !dbg !67
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i49 = icmp eq i32 %216, 0, !dbg !67
  br i1 %.not.i46, label %222, label %217, !dbg !67

217:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %220, label %218, !dbg !67

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %185) #3, !dbg !67
  br label %__nv_sqrtf.exit50, !dbg !67

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %185) #3, !dbg !67
  br label %__nv_sqrtf.exit50, !dbg !67

222:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %225, label %223, !dbg !67

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.f(float %185) #3, !dbg !67
  br label %__nv_sqrtf.exit50, !dbg !67

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.f(float %185) #3, !dbg !67
  br label %__nv_sqrtf.exit50, !dbg !67

__nv_sqrtf.exit50:                                ; preds = %218, %220, %223, %225
  %.0.i48 = phi float [ %219, %218 ], [ %221, %220 ], [ %224, %223 ], [ %226, %225 ], !dbg !67
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i51 = icmp eq i32 %227, 0, !dbg !67
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i54 = icmp eq i32 %228, 0, !dbg !67
  br i1 %.not.i51, label %234, label %229, !dbg !67

229:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %232, label %230, !dbg !67

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %186) #3, !dbg !67
  br label %__nv_sqrtf.exit55, !dbg !67

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %186) #3, !dbg !67
  br label %__nv_sqrtf.exit55, !dbg !67

234:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %237, label %235, !dbg !67

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.f(float %186) #3, !dbg !67
  br label %__nv_sqrtf.exit55, !dbg !67

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.f(float %186) #3, !dbg !67
  br label %__nv_sqrtf.exit55, !dbg !67

__nv_sqrtf.exit55:                                ; preds = %230, %232, %235, %237
  %.0.i53 = phi float [ %231, %230 ], [ %233, %232 ], [ %236, %235 ], [ %238, %237 ], !dbg !67
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i56 = icmp eq i32 %239, 0, !dbg !67
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i59 = icmp eq i32 %240, 0, !dbg !67
  br i1 %.not.i56, label %246, label %241, !dbg !67

241:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %244, label %242, !dbg !67

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %187) #3, !dbg !67
  br label %__nv_sqrtf.exit60, !dbg !67

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %187) #3, !dbg !67
  br label %__nv_sqrtf.exit60, !dbg !67

246:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %249, label %247, !dbg !67

247:                                              ; preds = %246
  %248 = tail call float @llvm.nvvm.sqrt.rn.f(float %187) #3, !dbg !67
  br label %__nv_sqrtf.exit60, !dbg !67

249:                                              ; preds = %246
  %250 = tail call float @llvm.nvvm.sqrt.approx.f(float %187) #3, !dbg !67
  br label %__nv_sqrtf.exit60, !dbg !67

__nv_sqrtf.exit60:                                ; preds = %242, %244, %247, %249
  %.0.i58 = phi float [ %243, %242 ], [ %245, %244 ], [ %248, %247 ], [ %250, %249 ], !dbg !67
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i61 = icmp eq i32 %251, 0, !dbg !67
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i64 = icmp eq i32 %252, 0, !dbg !67
  br i1 %.not.i61, label %258, label %253, !dbg !67

253:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %256, label %254, !dbg !67

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %188) #3, !dbg !67
  br label %__nv_sqrtf.exit65, !dbg !67

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %188) #3, !dbg !67
  br label %__nv_sqrtf.exit65, !dbg !67

258:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %261, label %259, !dbg !67

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.f(float %188) #3, !dbg !67
  br label %__nv_sqrtf.exit65, !dbg !67

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.f(float %188) #3, !dbg !67
  br label %__nv_sqrtf.exit65, !dbg !67

__nv_sqrtf.exit65:                                ; preds = %254, %256, %259, %261
  %.0.i63 = phi float [ %255, %254 ], [ %257, %256 ], [ %260, %259 ], [ %262, %261 ], !dbg !67
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i66 = icmp eq i32 %263, 0, !dbg !67
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i69 = icmp eq i32 %264, 0, !dbg !67
  br i1 %.not.i66, label %270, label %265, !dbg !67

265:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %268, label %266, !dbg !67

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %189) #3, !dbg !67
  br label %__nv_sqrtf.exit70, !dbg !67

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %189) #3, !dbg !67
  br label %__nv_sqrtf.exit70, !dbg !67

270:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %273, label %271, !dbg !67

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.f(float %189) #3, !dbg !67
  br label %__nv_sqrtf.exit70, !dbg !67

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.f(float %189) #3, !dbg !67
  br label %__nv_sqrtf.exit70, !dbg !67

__nv_sqrtf.exit70:                                ; preds = %266, %268, %271, %273
  %.0.i68 = phi float [ %267, %266 ], [ %269, %268 ], [ %272, %271 ], [ %274, %273 ], !dbg !67
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !67
  %.not.i71 = icmp eq i32 %275, 0, !dbg !67
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !67
  %.not1.i74 = icmp eq i32 %276, 0, !dbg !67
  br i1 %.not.i71, label %282, label %277, !dbg !67

277:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %280, label %278, !dbg !67

278:                                              ; preds = %277
  %279 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %190) #3, !dbg !67
  br label %__nv_sqrtf.exit75, !dbg !67

280:                                              ; preds = %277
  %281 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %190) #3, !dbg !67
  br label %__nv_sqrtf.exit75, !dbg !67

282:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %285, label %283, !dbg !67

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.f(float %190) #3, !dbg !67
  br label %__nv_sqrtf.exit75, !dbg !67

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.f(float %190) #3, !dbg !67
  br label %__nv_sqrtf.exit75, !dbg !67

__nv_sqrtf.exit75:                                ; preds = %278, %280, %283, %285
  %.0.i73 = phi float [ %279, %278 ], [ %281, %280 ], [ %284, %283 ], [ %286, %285 ], !dbg !67
  %287 = shufflevector <2 x i1> %154, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !54
  %288 = shufflevector <2 x i1> %140, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !49
  %289 = shufflevector <2 x i1> %126, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !44
  %290 = shufflevector <2 x i1> %110, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !39
  %291 = shufflevector <2 x i1> %102, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %292 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !38
  %293 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !43
  %294 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !48
  %295 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !53
  %296 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !59
  %297 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !65
  %298 = insertelement <8 x i32> poison, i32 %63, i64 0, !dbg !29
  %299 = insertelement <8 x i32> %298, i32 %62, i64 1, !dbg !29
  %300 = insertelement <8 x i32> %299, i32 %61, i64 2, !dbg !29
  %301 = insertelement <8 x i32> %300, i32 %60, i64 3, !dbg !29
  %302 = insertelement <8 x i32> %301, i32 %59, i64 4, !dbg !29
  %303 = insertelement <8 x i32> %302, i32 %58, i64 5, !dbg !29
  %304 = insertelement <8 x i32> %303, i32 %57, i64 6, !dbg !29
  %305 = insertelement <8 x i32> %304, i32 %56, i64 7, !dbg !29
  %306 = bitcast <8 x i32> %305 to <8 x float>, !dbg !29
  %307 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !38
  %308 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !43
  %309 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !48
  %310 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !53
  %311 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !59
  %312 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !65
  %313 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !38
  %314 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !43
  %315 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !48
  %316 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !53
  %317 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !59
  %318 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !65
  %319 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !38
  %320 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !43
  %321 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !48
  %322 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !53
  %323 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !59
  %324 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !65
  %325 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !38
  %326 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !43
  %327 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !48
  %328 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !53
  %329 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !59
  %330 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !65
  %331 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !38
  %332 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !43
  %333 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !48
  %334 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !53
  %335 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !59
  %336 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !65
  %337 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !38
  %338 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !43
  %339 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !48
  %340 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !53
  %341 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !59
  %342 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !65
  %343 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !38
  %344 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !43
  %345 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !48
  %346 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !53
  %347 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !59
  %348 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !65
  %349 = insertelement <8 x i32> poison, i32 %101, i64 0, !dbg !35
  %350 = insertelement <8 x i32> %349, i32 %100, i64 1, !dbg !35
  %351 = insertelement <8 x i32> %350, i32 %99, i64 2, !dbg !35
  %352 = insertelement <8 x i32> %351, i32 %98, i64 3, !dbg !35
  %353 = insertelement <8 x i32> %352, i32 %97, i64 4, !dbg !35
  %354 = insertelement <8 x i32> %353, i32 %96, i64 5, !dbg !35
  %355 = insertelement <8 x i32> %354, i32 %95, i64 6, !dbg !35
  %356 = insertelement <8 x i32> %355, i32 %94, i64 7, !dbg !35
  %357 = bitcast <8 x i32> %356 to <8 x float>, !dbg !35
  %358 = insertelement <8 x i32> poison, i32 %91, i64 0, !dbg !33
  %359 = insertelement <8 x i32> %358, i32 %90, i64 1, !dbg !33
  %360 = insertelement <8 x i32> %359, i32 %89, i64 2, !dbg !33
  %361 = insertelement <8 x i32> %360, i32 %88, i64 3, !dbg !33
  %362 = insertelement <8 x i32> %361, i32 %87, i64 4, !dbg !33
  %363 = insertelement <8 x i32> %362, i32 %86, i64 5, !dbg !33
  %364 = insertelement <8 x i32> %363, i32 %85, i64 6, !dbg !33
  %365 = insertelement <8 x i32> %364, i32 %84, i64 7, !dbg !33
  %366 = bitcast <8 x i32> %365 to <8 x float>, !dbg !33
  %367 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !68
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !68
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !68
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !68
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !68
  %372 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !68
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !68
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !68
  %375 = insertelement <8 x i32> poison, i32 %296, i64 0, !dbg !69
  %376 = insertelement <8 x i32> %375, i32 %311, i64 1, !dbg !69
  %377 = insertelement <8 x i32> %376, i32 %317, i64 2, !dbg !69
  %378 = insertelement <8 x i32> %377, i32 %323, i64 3, !dbg !69
  %379 = insertelement <8 x i32> %378, i32 %329, i64 4, !dbg !69
  %380 = insertelement <8 x i32> %379, i32 %335, i64 5, !dbg !69
  %381 = insertelement <8 x i32> %380, i32 %341, i64 6, !dbg !69
  %382 = insertelement <8 x i32> %381, i32 %347, i64 7, !dbg !69
  %383 = insertelement <8 x i32> poison, i32 %297, i64 0, !dbg !69
  %384 = insertelement <8 x i32> %383, i32 %312, i64 1, !dbg !69
  %385 = insertelement <8 x i32> %384, i32 %318, i64 2, !dbg !69
  %386 = insertelement <8 x i32> %385, i32 %324, i64 3, !dbg !69
  %387 = insertelement <8 x i32> %386, i32 %330, i64 4, !dbg !69
  %388 = insertelement <8 x i32> %387, i32 %336, i64 5, !dbg !69
  %389 = insertelement <8 x i32> %388, i32 %342, i64 6, !dbg !69
  %390 = insertelement <8 x i32> %389, i32 %348, i64 7, !dbg !69
  %391 = select <8 x i1> %287, <8 x i32> %382, <8 x i32> %390, !dbg !69
  %392 = insertelement <8 x i32> poison, i32 %295, i64 0, !dbg !70
  %393 = insertelement <8 x i32> %392, i32 %310, i64 1, !dbg !70
  %394 = insertelement <8 x i32> %393, i32 %316, i64 2, !dbg !70
  %395 = insertelement <8 x i32> %394, i32 %322, i64 3, !dbg !70
  %396 = insertelement <8 x i32> %395, i32 %328, i64 4, !dbg !70
  %397 = insertelement <8 x i32> %396, i32 %334, i64 5, !dbg !70
  %398 = insertelement <8 x i32> %397, i32 %340, i64 6, !dbg !70
  %399 = insertelement <8 x i32> %398, i32 %346, i64 7, !dbg !70
  %400 = select <8 x i1> %288, <8 x i32> %399, <8 x i32> %391, !dbg !70
  %401 = insertelement <8 x i32> poison, i32 %294, i64 0, !dbg !71
  %402 = insertelement <8 x i32> %401, i32 %309, i64 1, !dbg !71
  %403 = insertelement <8 x i32> %402, i32 %315, i64 2, !dbg !71
  %404 = insertelement <8 x i32> %403, i32 %321, i64 3, !dbg !71
  %405 = insertelement <8 x i32> %404, i32 %327, i64 4, !dbg !71
  %406 = insertelement <8 x i32> %405, i32 %333, i64 5, !dbg !71
  %407 = insertelement <8 x i32> %406, i32 %339, i64 6, !dbg !71
  %408 = insertelement <8 x i32> %407, i32 %345, i64 7, !dbg !71
  %409 = select <8 x i1> %289, <8 x i32> %408, <8 x i32> %400, !dbg !71
  %410 = insertelement <8 x i32> poison, i32 %293, i64 0, !dbg !72
  %411 = insertelement <8 x i32> %410, i32 %308, i64 1, !dbg !72
  %412 = insertelement <8 x i32> %411, i32 %314, i64 2, !dbg !72
  %413 = insertelement <8 x i32> %412, i32 %320, i64 3, !dbg !72
  %414 = insertelement <8 x i32> %413, i32 %326, i64 4, !dbg !72
  %415 = insertelement <8 x i32> %414, i32 %332, i64 5, !dbg !72
  %416 = insertelement <8 x i32> %415, i32 %338, i64 6, !dbg !72
  %417 = insertelement <8 x i32> %416, i32 %344, i64 7, !dbg !72
  %418 = select <8 x i1> %290, <8 x i32> %417, <8 x i32> %409, !dbg !72
  %419 = insertelement <8 x i32> poison, i32 %292, i64 0, !dbg !73
  %420 = insertelement <8 x i32> %419, i32 %307, i64 1, !dbg !73
  %421 = insertelement <8 x i32> %420, i32 %313, i64 2, !dbg !73
  %422 = insertelement <8 x i32> %421, i32 %319, i64 3, !dbg !73
  %423 = insertelement <8 x i32> %422, i32 %325, i64 4, !dbg !73
  %424 = insertelement <8 x i32> %423, i32 %331, i64 5, !dbg !73
  %425 = insertelement <8 x i32> %424, i32 %337, i64 6, !dbg !73
  %426 = insertelement <8 x i32> %425, i32 %343, i64 7, !dbg !73
  %427 = select <8 x i1> %291, <8 x i32> %426, <8 x i32> %418, !dbg !73
  %428 = bitcast <8 x i32> %427 to <8 x float>, !dbg !73
  %429 = fsub <8 x float> %428, %306, !dbg !74
  %430 = insertelement <8 x float> poison, float %374, i64 0, !dbg !75
  %431 = insertelement <8 x float> %430, float %373, i64 1, !dbg !75
  %432 = insertelement <8 x float> %431, float %372, i64 2, !dbg !75
  %433 = insertelement <8 x float> %432, float %371, i64 3, !dbg !75
  %434 = insertelement <8 x float> %433, float %370, i64 4, !dbg !75
  %435 = insertelement <8 x float> %434, float %369, i64 5, !dbg !75
  %436 = insertelement <8 x float> %435, float %368, i64 6, !dbg !75
  %437 = insertelement <8 x float> %436, float %367, i64 7, !dbg !75
  %438 = fmul <8 x float> %429, %437, !dbg !75
  %439 = fmul <8 x float> %438, %366, !dbg !76
  %440 = fadd <8 x float> %439, %357, !dbg !77
  %441 = fcmp olt <8 x float> %440, zeroinitializer, !dbg !78
  %442 = extractelement <8 x i1> %441, i64 7, !dbg !82
  %443 = extractelement <8 x i1> %441, i64 6, !dbg !82
  %444 = extractelement <8 x i1> %441, i64 5, !dbg !82
  %445 = extractelement <8 x i1> %441, i64 4, !dbg !82
  %446 = extractelement <8 x i1> %441, i64 3, !dbg !82
  %447 = extractelement <8 x i1> %441, i64 2, !dbg !82
  %448 = extractelement <8 x i1> %441, i64 1, !dbg !82
  %449 = extractelement <8 x i1> %441, i64 0, !dbg !82
  %450 = sext i32 %19 to i64, !dbg !83
  %451 = getelementptr float, ptr addrspace(1) %10, i64 %450, !dbg !83
  %452 = sext i32 %20 to i64, !dbg !83
  %453 = getelementptr float, ptr addrspace(1) %10, i64 %452, !dbg !83
  %454 = extractelement <8 x i32> %427, i64 4, !dbg !84
  %455 = extractelement <8 x i32> %427, i64 5, !dbg !84
  %456 = extractelement <8 x i32> %427, i64 6, !dbg !84
  %457 = extractelement <8 x i32> %427, i64 7, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %457, i32 %456, i32 %455, i32 %454, ptr addrspace(1) %451, i1 %21) #3, !dbg !84
  %458 = extractelement <8 x i32> %427, i64 0, !dbg !84
  %459 = extractelement <8 x i32> %427, i64 1, !dbg !84
  %460 = extractelement <8 x i32> %427, i64 2, !dbg !84
  %461 = extractelement <8 x i32> %427, i64 3, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %461, i32 %460, i32 %459, i32 %458, ptr addrspace(1) %453, i1 %22) #3, !dbg !84
  %462 = getelementptr float, ptr addrspace(1) %11, i64 %450, !dbg !85
  %463 = getelementptr float, ptr addrspace(1) %11, i64 %452, !dbg !85
  %bc = bitcast <8 x float> %440 to <8 x i32>, !dbg !86
  %464 = extractelement <8 x i32> %bc, i64 7, !dbg !86
  %465 = select i1 %442, i32 0, i32 %464, !dbg !82
  %bc76 = bitcast <8 x float> %440 to <8 x i32>, !dbg !86
  %466 = extractelement <8 x i32> %bc76, i64 6, !dbg !86
  %467 = select i1 %443, i32 0, i32 %466, !dbg !82
  %bc77 = bitcast <8 x float> %440 to <8 x i32>, !dbg !86
  %468 = extractelement <8 x i32> %bc77, i64 5, !dbg !86
  %469 = select i1 %444, i32 0, i32 %468, !dbg !82
  %bc78 = bitcast <8 x float> %440 to <8 x i32>, !dbg !86
  %470 = extractelement <8 x i32> %bc78, i64 4, !dbg !86
  %471 = select i1 %445, i32 0, i32 %470, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %465, i32 %467, i32 %469, i32 %471, ptr addrspace(1) %462, i1 %21) #3, !dbg !86
  %bc79 = bitcast <8 x float> %440 to <8 x i32>, !dbg !86
  %472 = extractelement <8 x i32> %bc79, i64 3, !dbg !86
  %473 = select i1 %446, i32 0, i32 %472, !dbg !82
  %bc80 = bitcast <8 x float> %440 to <8 x i32>, !dbg !86
  %474 = extractelement <8 x i32> %bc80, i64 2, !dbg !86
  %475 = select i1 %447, i32 0, i32 %474, !dbg !82
  %bc81 = bitcast <8 x float> %440 to <8 x i32>, !dbg !86
  %476 = extractelement <8 x i32> %bc81, i64 1, !dbg !86
  %477 = select i1 %448, i32 0, i32 %476, !dbg !82
  %bc82 = bitcast <8 x float> %440 to <8 x i32>, !dbg !86
  %478 = extractelement <8 x i32> %bc82, i64 0, !dbg !86
  %479 = select i1 %449, i32 0, i32 %478, !dbg !82
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %473, i32 %475, i32 %477, i32 %479, ptr addrspace(1) %463, i1 %22) #3, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckfue2fcavu4aug3h2hqqh5moetkfqhkf6abk6azfowccjaemkkb.py", directory: "inductor_cache/kf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_62, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_62, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_62", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_62", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 37, column: 35, scope: !7)
!18 = !DILocation(line: 37, column: 52, scope: !7)
!19 = !DILocation(line: 37, column: 46, scope: !7)
!20 = !DILocation(line: 37, column: 30, scope: !7)
!21 = !DILocation(line: 42, column: 61, scope: !7)
!22 = !DILocation(line: 42, column: 41, scope: !7)
!23 = !DILocation(line: 42, column: 36, scope: !7)
!24 = !DILocation(line: 47, column: 36, scope: !7)
!25 = !DILocation(line: 52, column: 36, scope: !7)
!26 = !DILocation(line: 24, column: 21, scope: !7)
!27 = !DILocation(line: 24, column: 28, scope: !7)
!28 = !DILocation(line: 28, column: 31, scope: !7)
!29 = !DILocation(line: 28, column: 36, scope: !7)
!30 = !DILocation(line: 29, column: 31, scope: !7)
!31 = !DILocation(line: 29, column: 36, scope: !7)
!32 = !DILocation(line: 30, column: 31, scope: !7)
!33 = !DILocation(line: 30, column: 36, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 64, scope: !7)
!38 = !DILocation(line: 37, column: 57, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 56, scope: !7)
!41 = !DILocation(line: 42, column: 31, scope: !7)
!42 = !DILocation(line: 42, column: 73, scope: !7)
!43 = !DILocation(line: 42, column: 66, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 56, scope: !7)
!46 = !DILocation(line: 47, column: 31, scope: !7)
!47 = !DILocation(line: 47, column: 74, scope: !7)
!48 = !DILocation(line: 47, column: 66, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 56, scope: !7)
!51 = !DILocation(line: 52, column: 31, scope: !7)
!52 = !DILocation(line: 52, column: 74, scope: !7)
!53 = !DILocation(line: 52, column: 66, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 36, scope: !7)
!56 = !DILocation(line: 57, column: 56, scope: !7)
!57 = !DILocation(line: 57, column: 31, scope: !7)
!58 = !DILocation(line: 57, column: 74, scope: !7)
!59 = !DILocation(line: 57, column: 66, scope: !7)
!60 = !DILocation(line: 58, column: 20, scope: !7)
!61 = !DILocation(line: 61, column: 36, scope: !7)
!62 = !DILocation(line: 61, column: 56, scope: !7)
!63 = !DILocation(line: 61, column: 31, scope: !7)
!64 = !DILocation(line: 61, column: 74, scope: !7)
!65 = !DILocation(line: 61, column: 66, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 27, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 62, column: 35, scope: !7)
!70 = !DILocation(line: 63, column: 35, scope: !7)
!71 = !DILocation(line: 64, column: 35, scope: !7)
!72 = !DILocation(line: 65, column: 34, scope: !7)
!73 = !DILocation(line: 66, column: 33, scope: !7)
!74 = !DILocation(line: 67, column: 20, scope: !7)
!75 = !DILocation(line: 75, column: 20, scope: !7)
!76 = !DILocation(line: 76, column: 20, scope: !7)
!77 = !DILocation(line: 77, column: 20, scope: !7)
!78 = !DILocation(line: 118, column: 15, scope: !79, inlinedAt: !81)
!79 = distinct !DILexicalBlockFile(scope: !7, file: !80, discriminator: 0)
!80 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!81 = !DILocation(line: 79, column: 42, scope: !7)
!82 = !DILocation(line: 121, column: 29, scope: !79, inlinedAt: !81)
!83 = !DILocation(line: 80, column: 25, scope: !7)
!84 = !DILocation(line: 80, column: 37, scope: !7)
!85 = !DILocation(line: 81, column: 25, scope: !7)
!86 = !DILocation(line: 81, column: 37, scope: !7)
!87 = !DILocation(line: 81, column: 4, scope: !7)
