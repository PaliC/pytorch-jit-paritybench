; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_view_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = and i32 %9, 60, !dbg !12
  %12 = lshr i32 %8, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = or disjoint i32 %13, 32, !dbg !12
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = or disjoint i32 %7, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 4, !dbg !15
  %20 = lshr i32 %8, 4, !dbg !16
  %21 = and i32 %20, 7, !dbg !16
  %22 = or disjoint i32 %19, %21, !dbg !17
  %23 = or disjoint i32 %22, 8, !dbg !17
  %24 = or disjoint i32 %19, %10, !dbg !17
  %25 = icmp slt i32 %22, 12, !dbg !18
  %26 = icmp slt i32 %23, 12, !dbg !18
  %27 = icmp slt i32 %24, 12, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %28 = sdiv i32 %.frozen, 4096, !dbg !19
  %29 = mul i32 %28, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = shl i32 %22, 12, !dbg !21
  %31 = shl i32 %23, 12, !dbg !21
  %32 = mul i32 %28, 49152, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = add i32 %33, %30, !dbg !24
  %35 = add i32 %33, %31, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !25
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %25) #2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %26) #2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = bitcast i32 %50 to float, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = sext i32 %22 to i64, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !27
  %60 = sext i32 %23 to i64, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !27
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #2, !dbg !28
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #2, !dbg !28
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #2, !dbg !28
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #2, !dbg !28
  %66 = bitcast i32 %65 to float, !dbg !28
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %26) #2, !dbg !28
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %26) #2, !dbg !28
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %26) #2, !dbg !28
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %26) #2, !dbg !28
  %71 = bitcast i32 %70 to float, !dbg !28
  %72 = fadd float %45, %66, !dbg !29
  %73 = fadd float %46, %66, !dbg !29
  %74 = fadd float %47, %66, !dbg !29
  %75 = fadd float %48, %66, !dbg !29
  %76 = fadd float %54, %71, !dbg !29
  %77 = fadd float %55, %71, !dbg !29
  %78 = fadd float %56, %71, !dbg !29
  %79 = fadd float %57, %71, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %80 = mul i32 %16, 12, !dbg !31
  %81 = mul i32 %17, 12, !dbg !31
  %82 = add i32 %24, %80, !dbg !32
  %83 = add i32 %24, %81, !dbg !32
  %84 = sext i32 %82 to i64, !dbg !33
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !33
  %86 = sext i32 %83 to i64, !dbg !33
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !33
  %88 = shl i32 %8, 6, !dbg !34
  %89 = and i32 %88, 960, !dbg !34
  %90 = or disjoint i32 %89, %21, !dbg !34
  %91 = and i32 %9, 508, !dbg !34
  %92 = lshr exact i32 %89, 4, !dbg !34
  %93 = add nuw nsw i32 %92, %90, !dbg !34
  %94 = zext nneg i32 %93 to i64, !dbg !34
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %94, !dbg !34
  %96 = bitcast float %72 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !34
  %97 = or disjoint i32 %90, 16, !dbg !34
  %98 = lshr i32 %97, 4, !dbg !34
  %99 = add nuw nsw i32 %98, %97, !dbg !34
  %100 = zext nneg i32 %99 to i64, !dbg !34
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %100, !dbg !34
  %102 = bitcast float %73 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !34
  %103 = or disjoint i32 %90, 32, !dbg !34
  %104 = lshr i32 %103, 4, !dbg !34
  %105 = add nuw nsw i32 %104, %103, !dbg !34
  %106 = zext nneg i32 %105 to i64, !dbg !34
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %106, !dbg !34
  %108 = bitcast float %74 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !34
  %109 = or disjoint i32 %90, 48, !dbg !34
  %110 = lshr i32 %109, 4, !dbg !34
  %111 = add nuw nsw i32 %110, %109, !dbg !34
  %112 = zext nneg i32 %111 to i64, !dbg !34
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %112, !dbg !34
  %114 = bitcast float %75 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !34
  %115 = or disjoint i32 %90, 8, !dbg !34
  %116 = add nuw nsw i32 %115, %92, !dbg !34
  %117 = zext nneg i32 %116 to i64, !dbg !34
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %117, !dbg !34
  %119 = bitcast float %76 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !34
  %120 = or disjoint i32 %90, 24, !dbg !34
  %121 = lshr i32 %120, 4, !dbg !34
  %122 = add nuw nsw i32 %121, %120, !dbg !34
  %123 = zext nneg i32 %122 to i64, !dbg !34
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %123, !dbg !34
  %125 = bitcast float %77 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !34
  %126 = or disjoint i32 %90, 40, !dbg !34
  %127 = lshr i32 %126, 4, !dbg !34
  %128 = add nuw nsw i32 %127, %126, !dbg !34
  %129 = zext nneg i32 %128 to i64, !dbg !34
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !34
  %131 = bitcast float %78 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !34
  %132 = or disjoint i32 %90, 56, !dbg !34
  %133 = lshr i32 %132, 4, !dbg !34
  %134 = add nuw nsw i32 %133, %132, !dbg !34
  %135 = zext nneg i32 %134 to i64, !dbg !34
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !34
  %137 = bitcast float %79 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %138 = lshr i32 %91, 4, !dbg !34
  %139 = add nuw nsw i32 %138, %91, !dbg !34
  %140 = zext nneg i32 %139 to i64, !dbg !34
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !34
  %142 = load i32, ptr addrspace(3) %141, align 4, !dbg !34
  %143 = or disjoint i32 %91, 1, !dbg !34
  %144 = add nuw nsw i32 %143, %138, !dbg !34
  %145 = zext nneg i32 %144 to i64, !dbg !34
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !34
  %147 = load i32, ptr addrspace(3) %146, align 4, !dbg !34
  %148 = or disjoint i32 %91, 2, !dbg !34
  %149 = add nuw nsw i32 %148, %138, !dbg !34
  %150 = zext nneg i32 %149 to i64, !dbg !34
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !34
  %152 = load i32, ptr addrspace(3) %151, align 4, !dbg !34
  %153 = or disjoint i32 %91, 3, !dbg !34
  %154 = add nuw nsw i32 %153, %138, !dbg !34
  %155 = zext nneg i32 %154 to i64, !dbg !34
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %155, !dbg !34
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !34
  %158 = or disjoint i32 %91, 512, !dbg !34
  %159 = lshr i32 %158, 4, !dbg !34
  %160 = add nuw nsw i32 %159, %158, !dbg !34
  %161 = zext nneg i32 %160 to i64, !dbg !34
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %161, !dbg !34
  %163 = load i32, ptr addrspace(3) %162, align 4, !dbg !34
  %164 = or disjoint i32 %91, 513, !dbg !34
  %165 = lshr i32 %164, 4, !dbg !34
  %166 = add nuw nsw i32 %165, %164, !dbg !34
  %167 = zext nneg i32 %166 to i64, !dbg !34
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %167, !dbg !34
  %169 = load i32, ptr addrspace(3) %168, align 4, !dbg !34
  %170 = or disjoint i32 %91, 514, !dbg !34
  %171 = lshr i32 %170, 4, !dbg !34
  %172 = add nuw nsw i32 %171, %170, !dbg !34
  %173 = zext nneg i32 %172 to i64, !dbg !34
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %173, !dbg !34
  %175 = load i32, ptr addrspace(3) %174, align 4, !dbg !34
  %176 = or disjoint i32 %91, 515, !dbg !34
  %177 = lshr i32 %176, 4, !dbg !34
  %178 = add nuw nsw i32 %177, %176, !dbg !34
  %179 = zext nneg i32 %178 to i64, !dbg !34
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %179, !dbg !34
  %181 = load i32, ptr addrspace(3) %180, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %142, i32 %147, i32 %152, i32 %157, ptr addrspace(1) %85, i1 %27) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %163, i32 %169, i32 %175, i32 %181, ptr addrspace(1) %87, i1 %27) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czqas2oazah46pm7zdzvx6oxnqibpi3hbnsf7k64sfimy4qnlgua.py", directory: "inductor_cache/zq")
!4 = !{ptr @triton_poi_fused_clone_view_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_view_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_view_0", linkageName: "triton_poi_fused_clone_view_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 56, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 4, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 33, scope: !7)
!33 = !DILocation(line: 36, column: 28, scope: !7)
!34 = !DILocation(line: 36, column: 47, scope: !7)
!35 = !DILocation(line: 36, column: 4, scope: !7)
