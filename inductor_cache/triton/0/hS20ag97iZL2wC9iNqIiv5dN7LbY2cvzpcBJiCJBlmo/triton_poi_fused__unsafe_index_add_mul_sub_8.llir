; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 2, !dbg !13
  %20 = or disjoint i32 %18, 512, !dbg !13
  %21 = sdiv i32 %18, 64, !dbg !14
  %22 = sdiv i32 %20, 64, !dbg !14
  %23 = srem i32 %21, 8, !dbg !15
  %24 = srem i32 %22, 8, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %25 = sdiv i32 %.frozen, 8, !dbg !16
  %26 = sdiv i32 %20, 8, !dbg !16
  %27 = srem i32 %25, 8, !dbg !17
  %28 = srem i32 %26, 8, !dbg !17
  %29 = mul i32 %25, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %29, !dbg !18
  %30 = srem i32 %19, 8, !dbg !18
  %31 = sdiv i32 %18, 512, !dbg !19
  %32 = sdiv i32 %20, 512, !dbg !19
  %33 = sext i32 %23 to i64, !dbg !20
  %34 = getelementptr i64, ptr addrspace(1) %1, i64 %33, !dbg !20
  %35 = sext i32 %24 to i64, !dbg !20
  %36 = getelementptr i64, ptr addrspace(1) %1, i64 %35, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !21
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !21
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !21
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !21
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !21
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !21
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !21
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !21
  %45 = sext i32 %27 to i64, !dbg !22
  %46 = getelementptr i64, ptr addrspace(1) %2, i64 %45, !dbg !22
  %47 = sext i32 %28 to i64, !dbg !22
  %48 = getelementptr i64, ptr addrspace(1) %2, i64 %47, !dbg !22
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !23
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !23
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !23
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !23
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !23
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !23
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !23
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !23
  %57 = sext i32 %.decomposed to i64, !dbg !24
  %58 = getelementptr i64, ptr addrspace(1) %3, i64 %57, !dbg !24
  %59 = sext i32 %30 to i64, !dbg !24
  %60 = getelementptr i64, ptr addrspace(1) %3, i64 %59, !dbg !24
  %61 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !25
  %62 = extractvalue { i64, i64 } %61, 0, !dbg !25
  %63 = extractvalue { i64, i64 } %61, 1, !dbg !25
  %64 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %65 = extractvalue { i64, i64 } %64, 0, !dbg !25
  %66 = extractvalue { i64, i64 } %64, 1, !dbg !25
  %67 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !25
  %68 = extractvalue { i64, i64 } %67, 0, !dbg !25
  %69 = extractvalue { i64, i64 } %67, 1, !dbg !25
  %70 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !25
  %71 = extractvalue { i64, i64 } %70, 0, !dbg !25
  %72 = extractvalue { i64, i64 } %70, 1, !dbg !25
  %73 = getelementptr i64, ptr addrspace(1) %5, i64 %57, !dbg !26
  %74 = getelementptr i64, ptr addrspace(1) %5, i64 %59, !dbg !26
  %75 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !27
  %76 = extractvalue { i64, i64 } %75, 0, !dbg !27
  %77 = extractvalue { i64, i64 } %75, 1, !dbg !27
  %78 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !27
  %79 = extractvalue { i64, i64 } %78, 0, !dbg !27
  %80 = extractvalue { i64, i64 } %78, 1, !dbg !27
  %81 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !27
  %82 = extractvalue { i64, i64 } %81, 0, !dbg !27
  %83 = extractvalue { i64, i64 } %81, 1, !dbg !27
  %84 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !27
  %85 = extractvalue { i64, i64 } %84, 0, !dbg !27
  %86 = extractvalue { i64, i64 } %84, 1, !dbg !27
  %87 = getelementptr float, ptr addrspace(1) %6, i64 %57, !dbg !28
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !29
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !29
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !29
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !29
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !29
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !29
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !29
  %98 = getelementptr i64, ptr addrspace(1) %7, i64 %33, !dbg !30
  %99 = getelementptr i64, ptr addrspace(1) %7, i64 %35, !dbg !30
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !31
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !31
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !31
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !31
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !31
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !31
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !31
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !31
  %108 = getelementptr i64, ptr addrspace(1) %8, i64 %45, !dbg !32
  %109 = getelementptr i64, ptr addrspace(1) %8, i64 %47, !dbg !32
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !33
  %111 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !33
  %112 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !33
  %113 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !33
  %114 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !33
  %115 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !33
  %116 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !33
  %117 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !33
  %118 = getelementptr float, ptr addrspace(1) %9, i64 %45, !dbg !34
  %119 = getelementptr float, ptr addrspace(1) %9, i64 %47, !dbg !34
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !35
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !35
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !35
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !35
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !35
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !35
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !35
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !35
  %128 = getelementptr float, ptr addrspace(1) %10, i64 %33, !dbg !36
  %129 = getelementptr float, ptr addrspace(1) %10, i64 %35, !dbg !36
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !37
  %131 = bitcast i32 %130 to float, !dbg !37
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !37
  %133 = bitcast i32 %132 to float, !dbg !37
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !37
  %135 = bitcast i32 %134 to float, !dbg !37
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !37
  %137 = bitcast i32 %136 to float, !dbg !37
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !37
  %139 = bitcast i32 %138 to float, !dbg !37
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !37
  %141 = bitcast i32 %140 to float, !dbg !37
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !37
  %143 = bitcast i32 %142 to float, !dbg !37
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !37
  %145 = bitcast i32 %144 to float, !dbg !37
  %146 = lshr i64 %37, 61, !dbg !38
  %147 = and i64 %146, 4, !dbg !38
  %148 = add i64 %147, %37, !dbg !38
  %149 = lshr i64 %41, 61, !dbg !38
  %150 = and i64 %149, 4, !dbg !38
  %151 = add i64 %150, %41, !dbg !38
  %152 = lshr i64 %49, 61, !dbg !39
  %153 = and i64 %152, 4, !dbg !39
  %154 = add i64 %153, %49, !dbg !39
  %155 = lshr i64 %53, 61, !dbg !39
  %156 = and i64 %155, 4, !dbg !39
  %157 = add i64 %156, %53, !dbg !39
  %158 = lshr i64 %62, 61, !dbg !40
  %159 = and i64 %158, 4, !dbg !40
  %160 = lshr i64 %63, 61, !dbg !40
  %161 = and i64 %160, 4, !dbg !40
  %162 = lshr i64 %65, 61, !dbg !40
  %163 = and i64 %162, 4, !dbg !40
  %164 = lshr i64 %66, 61, !dbg !40
  %165 = and i64 %164, 4, !dbg !40
  %166 = lshr i64 %68, 61, !dbg !40
  %167 = and i64 %166, 4, !dbg !40
  %168 = lshr i64 %69, 61, !dbg !40
  %169 = and i64 %168, 4, !dbg !40
  %170 = lshr i64 %71, 61, !dbg !40
  %171 = and i64 %170, 4, !dbg !40
  %172 = lshr i64 %72, 61, !dbg !40
  %173 = and i64 %172, 4, !dbg !40
  %174 = shl i64 %154, 2, !dbg !41
  %175 = shl i64 %157, 2, !dbg !41
  %176 = shl i64 %148, 4, !dbg !42
  %177 = shl i64 %151, 4, !dbg !42
  %178 = shl nsw i32 %31, 6, !dbg !43
  %179 = shl nsw i32 %32, 6, !dbg !43
  %180 = sext i32 %178 to i64, !dbg !44
  %181 = sext i32 %179 to i64, !dbg !44
  %182 = getelementptr float, ptr addrspace(1) %4, i64 %159, !dbg !45
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %62, !dbg !45
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %174, !dbg !45
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %176, !dbg !45
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %180, !dbg !45
  %187 = getelementptr float, ptr addrspace(1) %4, i64 %161, !dbg !45
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %63, !dbg !45
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %174, !dbg !45
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %176, !dbg !45
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %180, !dbg !45
  %192 = getelementptr float, ptr addrspace(1) %4, i64 %163, !dbg !45
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %65, !dbg !45
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %174, !dbg !45
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %176, !dbg !45
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %180, !dbg !45
  %197 = getelementptr float, ptr addrspace(1) %4, i64 %165, !dbg !45
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %66, !dbg !45
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %174, !dbg !45
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %176, !dbg !45
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %180, !dbg !45
  %202 = getelementptr float, ptr addrspace(1) %4, i64 %167, !dbg !45
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %68, !dbg !45
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %175, !dbg !45
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %177, !dbg !45
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %181, !dbg !45
  %207 = getelementptr float, ptr addrspace(1) %4, i64 %169, !dbg !45
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %69, !dbg !45
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %175, !dbg !45
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %177, !dbg !45
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %181, !dbg !45
  %212 = getelementptr float, ptr addrspace(1) %4, i64 %171, !dbg !45
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %71, !dbg !45
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %175, !dbg !45
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %177, !dbg !45
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %181, !dbg !45
  %217 = getelementptr float, ptr addrspace(1) %4, i64 %173, !dbg !45
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %72, !dbg !45
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %175, !dbg !45
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %177, !dbg !45
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %181, !dbg !45
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #1, !dbg !46
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 true) #1, !dbg !46
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #1, !dbg !46
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 true) #1, !dbg !46
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #1, !dbg !46
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 true) #1, !dbg !46
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 true) #1, !dbg !46
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 true) #1, !dbg !46
  %230 = lshr i64 %76, 61, !dbg !47
  %231 = and i64 %230, 4, !dbg !47
  %232 = lshr i64 %77, 61, !dbg !47
  %233 = and i64 %232, 4, !dbg !47
  %234 = lshr i64 %79, 61, !dbg !47
  %235 = and i64 %234, 4, !dbg !47
  %236 = lshr i64 %80, 61, !dbg !47
  %237 = and i64 %236, 4, !dbg !47
  %238 = lshr i64 %82, 61, !dbg !47
  %239 = and i64 %238, 4, !dbg !47
  %240 = lshr i64 %83, 61, !dbg !47
  %241 = and i64 %240, 4, !dbg !47
  %242 = lshr i64 %85, 61, !dbg !47
  %243 = and i64 %242, 4, !dbg !47
  %244 = lshr i64 %86, 61, !dbg !47
  %245 = and i64 %244, 4, !dbg !47
  %246 = getelementptr float, ptr addrspace(1) %4, i64 %231, !dbg !48
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %76, !dbg !48
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %174, !dbg !48
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %176, !dbg !48
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %180, !dbg !48
  %251 = getelementptr float, ptr addrspace(1) %4, i64 %233, !dbg !48
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %77, !dbg !48
  %253 = getelementptr float, ptr addrspace(1) %252, i64 %174, !dbg !48
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %176, !dbg !48
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %180, !dbg !48
  %256 = getelementptr float, ptr addrspace(1) %4, i64 %235, !dbg !48
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %79, !dbg !48
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %174, !dbg !48
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %176, !dbg !48
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %180, !dbg !48
  %261 = getelementptr float, ptr addrspace(1) %4, i64 %237, !dbg !48
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %80, !dbg !48
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %174, !dbg !48
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %176, !dbg !48
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %180, !dbg !48
  %266 = getelementptr float, ptr addrspace(1) %4, i64 %239, !dbg !48
  %267 = getelementptr float, ptr addrspace(1) %266, i64 %82, !dbg !48
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %175, !dbg !48
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %177, !dbg !48
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %181, !dbg !48
  %271 = getelementptr float, ptr addrspace(1) %4, i64 %241, !dbg !48
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %83, !dbg !48
  %273 = getelementptr float, ptr addrspace(1) %272, i64 %175, !dbg !48
  %274 = getelementptr float, ptr addrspace(1) %273, i64 %177, !dbg !48
  %275 = getelementptr float, ptr addrspace(1) %274, i64 %181, !dbg !48
  %276 = getelementptr float, ptr addrspace(1) %4, i64 %243, !dbg !48
  %277 = getelementptr float, ptr addrspace(1) %276, i64 %85, !dbg !48
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %175, !dbg !48
  %279 = getelementptr float, ptr addrspace(1) %278, i64 %177, !dbg !48
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %181, !dbg !48
  %281 = getelementptr float, ptr addrspace(1) %4, i64 %245, !dbg !48
  %282 = getelementptr float, ptr addrspace(1) %281, i64 %86, !dbg !48
  %283 = getelementptr float, ptr addrspace(1) %282, i64 %175, !dbg !48
  %284 = getelementptr float, ptr addrspace(1) %283, i64 %177, !dbg !48
  %285 = getelementptr float, ptr addrspace(1) %284, i64 %181, !dbg !48
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #1, !dbg !49
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 true) #1, !dbg !49
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 true) #1, !dbg !49
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 true) #1, !dbg !49
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !49
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 true) #1, !dbg !49
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 true) #1, !dbg !49
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 true) #1, !dbg !49
  %294 = lshr i64 %100, 61, !dbg !50
  %295 = and i64 %294, 4, !dbg !50
  %296 = add i64 %295, %100, !dbg !50
  %297 = lshr i64 %104, 61, !dbg !50
  %298 = and i64 %297, 4, !dbg !50
  %299 = add i64 %298, %104, !dbg !50
  %300 = shl i64 %296, 4, !dbg !51
  %301 = shl i64 %299, 4, !dbg !51
  %302 = getelementptr float, ptr addrspace(1) %184, i64 %300, !dbg !52
  %303 = getelementptr float, ptr addrspace(1) %302, i64 %180, !dbg !52
  %304 = getelementptr float, ptr addrspace(1) %189, i64 %300, !dbg !52
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %180, !dbg !52
  %306 = getelementptr float, ptr addrspace(1) %194, i64 %300, !dbg !52
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %180, !dbg !52
  %308 = getelementptr float, ptr addrspace(1) %199, i64 %300, !dbg !52
  %309 = getelementptr float, ptr addrspace(1) %308, i64 %180, !dbg !52
  %310 = getelementptr float, ptr addrspace(1) %204, i64 %301, !dbg !52
  %311 = getelementptr float, ptr addrspace(1) %310, i64 %181, !dbg !52
  %312 = getelementptr float, ptr addrspace(1) %209, i64 %301, !dbg !52
  %313 = getelementptr float, ptr addrspace(1) %312, i64 %181, !dbg !52
  %314 = getelementptr float, ptr addrspace(1) %214, i64 %301, !dbg !52
  %315 = getelementptr float, ptr addrspace(1) %314, i64 %181, !dbg !52
  %316 = getelementptr float, ptr addrspace(1) %219, i64 %301, !dbg !52
  %317 = getelementptr float, ptr addrspace(1) %316, i64 %181, !dbg !52
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 true) #1, !dbg !53
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %305, i1 true) #1, !dbg !53
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %307, i1 true) #1, !dbg !53
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 true) #1, !dbg !53
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 true) #1, !dbg !53
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 true) #1, !dbg !53
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 true) #1, !dbg !53
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %317, i1 true) #1, !dbg !53
  %326 = getelementptr float, ptr addrspace(1) %248, i64 %300, !dbg !54
  %327 = getelementptr float, ptr addrspace(1) %326, i64 %180, !dbg !54
  %328 = getelementptr float, ptr addrspace(1) %253, i64 %300, !dbg !54
  %329 = getelementptr float, ptr addrspace(1) %328, i64 %180, !dbg !54
  %330 = getelementptr float, ptr addrspace(1) %258, i64 %300, !dbg !54
  %331 = getelementptr float, ptr addrspace(1) %330, i64 %180, !dbg !54
  %332 = getelementptr float, ptr addrspace(1) %263, i64 %300, !dbg !54
  %333 = getelementptr float, ptr addrspace(1) %332, i64 %180, !dbg !54
  %334 = getelementptr float, ptr addrspace(1) %268, i64 %301, !dbg !54
  %335 = getelementptr float, ptr addrspace(1) %334, i64 %181, !dbg !54
  %336 = getelementptr float, ptr addrspace(1) %273, i64 %301, !dbg !54
  %337 = getelementptr float, ptr addrspace(1) %336, i64 %181, !dbg !54
  %338 = getelementptr float, ptr addrspace(1) %278, i64 %301, !dbg !54
  %339 = getelementptr float, ptr addrspace(1) %338, i64 %181, !dbg !54
  %340 = getelementptr float, ptr addrspace(1) %283, i64 %301, !dbg !54
  %341 = getelementptr float, ptr addrspace(1) %340, i64 %181, !dbg !54
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 true) #1, !dbg !55
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 true) #1, !dbg !55
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 true) #1, !dbg !55
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 true) #1, !dbg !55
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 true) #1, !dbg !55
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 true) #1, !dbg !55
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 true) #1, !dbg !55
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %341, i1 true) #1, !dbg !55
  %350 = lshr i64 %110, 61, !dbg !56
  %351 = and i64 %350, 4, !dbg !56
  %352 = add i64 %351, %110, !dbg !56
  %353 = lshr i64 %114, 61, !dbg !56
  %354 = and i64 %353, 4, !dbg !56
  %355 = add i64 %354, %114, !dbg !56
  %356 = shl i64 %352, 2, !dbg !57
  %357 = shl i64 %355, 2, !dbg !57
  %358 = getelementptr float, ptr addrspace(1) %183, i64 %356, !dbg !58
  %359 = getelementptr float, ptr addrspace(1) %358, i64 %300, !dbg !58
  %360 = getelementptr float, ptr addrspace(1) %359, i64 %180, !dbg !58
  %361 = getelementptr float, ptr addrspace(1) %188, i64 %356, !dbg !58
  %362 = getelementptr float, ptr addrspace(1) %361, i64 %300, !dbg !58
  %363 = getelementptr float, ptr addrspace(1) %362, i64 %180, !dbg !58
  %364 = getelementptr float, ptr addrspace(1) %193, i64 %356, !dbg !58
  %365 = getelementptr float, ptr addrspace(1) %364, i64 %300, !dbg !58
  %366 = getelementptr float, ptr addrspace(1) %365, i64 %180, !dbg !58
  %367 = getelementptr float, ptr addrspace(1) %198, i64 %356, !dbg !58
  %368 = getelementptr float, ptr addrspace(1) %367, i64 %300, !dbg !58
  %369 = getelementptr float, ptr addrspace(1) %368, i64 %180, !dbg !58
  %370 = getelementptr float, ptr addrspace(1) %203, i64 %357, !dbg !58
  %371 = getelementptr float, ptr addrspace(1) %370, i64 %301, !dbg !58
  %372 = getelementptr float, ptr addrspace(1) %371, i64 %181, !dbg !58
  %373 = getelementptr float, ptr addrspace(1) %208, i64 %357, !dbg !58
  %374 = getelementptr float, ptr addrspace(1) %373, i64 %301, !dbg !58
  %375 = getelementptr float, ptr addrspace(1) %374, i64 %181, !dbg !58
  %376 = getelementptr float, ptr addrspace(1) %213, i64 %357, !dbg !58
  %377 = getelementptr float, ptr addrspace(1) %376, i64 %301, !dbg !58
  %378 = getelementptr float, ptr addrspace(1) %377, i64 %181, !dbg !58
  %379 = getelementptr float, ptr addrspace(1) %218, i64 %357, !dbg !58
  %380 = getelementptr float, ptr addrspace(1) %379, i64 %301, !dbg !58
  %381 = getelementptr float, ptr addrspace(1) %380, i64 %181, !dbg !58
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %360, i1 true) #1, !dbg !59
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 true) #1, !dbg !59
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %366, i1 true) #1, !dbg !59
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %369, i1 true) #1, !dbg !59
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %372, i1 true) #1, !dbg !59
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 true) #1, !dbg !59
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %378, i1 true) #1, !dbg !59
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %381, i1 true) #1, !dbg !59
  %390 = getelementptr float, ptr addrspace(1) %247, i64 %356, !dbg !60
  %391 = getelementptr float, ptr addrspace(1) %390, i64 %300, !dbg !60
  %392 = getelementptr float, ptr addrspace(1) %391, i64 %180, !dbg !60
  %393 = getelementptr float, ptr addrspace(1) %252, i64 %356, !dbg !60
  %394 = getelementptr float, ptr addrspace(1) %393, i64 %300, !dbg !60
  %395 = getelementptr float, ptr addrspace(1) %394, i64 %180, !dbg !60
  %396 = getelementptr float, ptr addrspace(1) %257, i64 %356, !dbg !60
  %397 = getelementptr float, ptr addrspace(1) %396, i64 %300, !dbg !60
  %398 = getelementptr float, ptr addrspace(1) %397, i64 %180, !dbg !60
  %399 = getelementptr float, ptr addrspace(1) %262, i64 %356, !dbg !60
  %400 = getelementptr float, ptr addrspace(1) %399, i64 %300, !dbg !60
  %401 = getelementptr float, ptr addrspace(1) %400, i64 %180, !dbg !60
  %402 = getelementptr float, ptr addrspace(1) %267, i64 %357, !dbg !60
  %403 = getelementptr float, ptr addrspace(1) %402, i64 %301, !dbg !60
  %404 = getelementptr float, ptr addrspace(1) %403, i64 %181, !dbg !60
  %405 = getelementptr float, ptr addrspace(1) %272, i64 %357, !dbg !60
  %406 = getelementptr float, ptr addrspace(1) %405, i64 %301, !dbg !60
  %407 = getelementptr float, ptr addrspace(1) %406, i64 %181, !dbg !60
  %408 = getelementptr float, ptr addrspace(1) %277, i64 %357, !dbg !60
  %409 = getelementptr float, ptr addrspace(1) %408, i64 %301, !dbg !60
  %410 = getelementptr float, ptr addrspace(1) %409, i64 %181, !dbg !60
  %411 = getelementptr float, ptr addrspace(1) %282, i64 %357, !dbg !60
  %412 = getelementptr float, ptr addrspace(1) %411, i64 %301, !dbg !60
  %413 = getelementptr float, ptr addrspace(1) %412, i64 %181, !dbg !60
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %392, i1 true) #1, !dbg !61
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %395, i1 true) #1, !dbg !61
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %398, i1 true) #1, !dbg !61
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 true) #1, !dbg !61
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %404, i1 true) #1, !dbg !61
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 true) #1, !dbg !61
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %410, i1 true) #1, !dbg !61
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 true) #1, !dbg !61
  %422 = getelementptr float, ptr addrspace(1) %358, i64 %176, !dbg !62
  %423 = getelementptr float, ptr addrspace(1) %422, i64 %180, !dbg !62
  %424 = getelementptr float, ptr addrspace(1) %361, i64 %176, !dbg !62
  %425 = getelementptr float, ptr addrspace(1) %424, i64 %180, !dbg !62
  %426 = getelementptr float, ptr addrspace(1) %364, i64 %176, !dbg !62
  %427 = getelementptr float, ptr addrspace(1) %426, i64 %180, !dbg !62
  %428 = getelementptr float, ptr addrspace(1) %367, i64 %176, !dbg !62
  %429 = getelementptr float, ptr addrspace(1) %428, i64 %180, !dbg !62
  %430 = getelementptr float, ptr addrspace(1) %370, i64 %177, !dbg !62
  %431 = getelementptr float, ptr addrspace(1) %430, i64 %181, !dbg !62
  %432 = getelementptr float, ptr addrspace(1) %373, i64 %177, !dbg !62
  %433 = getelementptr float, ptr addrspace(1) %432, i64 %181, !dbg !62
  %434 = getelementptr float, ptr addrspace(1) %376, i64 %177, !dbg !62
  %435 = getelementptr float, ptr addrspace(1) %434, i64 %181, !dbg !62
  %436 = getelementptr float, ptr addrspace(1) %379, i64 %177, !dbg !62
  %437 = getelementptr float, ptr addrspace(1) %436, i64 %181, !dbg !62
  %438 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %423, i1 true) #1, !dbg !63
  %439 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %425, i1 true) #1, !dbg !63
  %440 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %427, i1 true) #1, !dbg !63
  %441 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %429, i1 true) #1, !dbg !63
  %442 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %431, i1 true) #1, !dbg !63
  %443 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %433, i1 true) #1, !dbg !63
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %435, i1 true) #1, !dbg !63
  %445 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %437, i1 true) #1, !dbg !63
  %446 = getelementptr float, ptr addrspace(1) %390, i64 %176, !dbg !64
  %447 = getelementptr float, ptr addrspace(1) %446, i64 %180, !dbg !64
  %448 = getelementptr float, ptr addrspace(1) %393, i64 %176, !dbg !64
  %449 = getelementptr float, ptr addrspace(1) %448, i64 %180, !dbg !64
  %450 = getelementptr float, ptr addrspace(1) %396, i64 %176, !dbg !64
  %451 = getelementptr float, ptr addrspace(1) %450, i64 %180, !dbg !64
  %452 = getelementptr float, ptr addrspace(1) %399, i64 %176, !dbg !64
  %453 = getelementptr float, ptr addrspace(1) %452, i64 %180, !dbg !64
  %454 = getelementptr float, ptr addrspace(1) %402, i64 %177, !dbg !64
  %455 = getelementptr float, ptr addrspace(1) %454, i64 %181, !dbg !64
  %456 = getelementptr float, ptr addrspace(1) %405, i64 %177, !dbg !64
  %457 = getelementptr float, ptr addrspace(1) %456, i64 %181, !dbg !64
  %458 = getelementptr float, ptr addrspace(1) %408, i64 %177, !dbg !64
  %459 = getelementptr float, ptr addrspace(1) %458, i64 %181, !dbg !64
  %460 = getelementptr float, ptr addrspace(1) %411, i64 %177, !dbg !64
  %461 = getelementptr float, ptr addrspace(1) %460, i64 %181, !dbg !64
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %447, i1 true) #1, !dbg !65
  %463 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %449, i1 true) #1, !dbg !65
  %464 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %451, i1 true) #1, !dbg !65
  %465 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %453, i1 true) #1, !dbg !65
  %466 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %455, i1 true) #1, !dbg !65
  %467 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %457, i1 true) #1, !dbg !65
  %468 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %459, i1 true) #1, !dbg !65
  %469 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %461, i1 true) #1, !dbg !65
  %470 = insertelement <2 x i32> poison, i32 %222, i64 0, !dbg !46
  %471 = insertelement <2 x i32> %470, i32 %318, i64 1, !dbg !46
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !46
  %473 = insertelement <2 x i32> poison, i32 %286, i64 0, !dbg !49
  %474 = insertelement <2 x i32> %473, i32 %342, i64 1, !dbg !49
  %475 = bitcast <2 x i32> %474 to <2 x float>, !dbg !49
  %476 = fsub <2 x float> %475, %472, !dbg !66
  %477 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !67
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !67
  %479 = shufflevector <2 x float> %478, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %480 = fmul <2 x float> %476, %479, !dbg !67
  %481 = fadd <2 x float> %480, %472, !dbg !68
  %482 = insertelement <2 x i32> poison, i32 %438, i64 0, !dbg !63
  %483 = insertelement <2 x i32> %482, i32 %382, i64 1, !dbg !63
  %484 = bitcast <2 x i32> %483 to <2 x float>, !dbg !63
  %485 = insertelement <2 x i32> poison, i32 %462, i64 0, !dbg !65
  %486 = insertelement <2 x i32> %485, i32 %414, i64 1, !dbg !65
  %487 = bitcast <2 x i32> %486 to <2 x float>, !dbg !65
  %488 = fsub <2 x float> %487, %484, !dbg !69
  %489 = fmul <2 x float> %488, %479, !dbg !70
  %490 = fadd <2 x float> %489, %484, !dbg !71
  %491 = fsub <2 x float> %490, %481, !dbg !72
  %492 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !73
  %493 = bitcast <2 x i32> %492 to <2 x float>, !dbg !73
  %494 = shufflevector <2 x float> %493, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %495 = fmul <2 x float> %491, %494, !dbg !73
  %496 = fadd <2 x float> %481, %495, !dbg !74
  %497 = insertelement <2 x i32> poison, i32 %223, i64 0, !dbg !46
  %498 = insertelement <2 x i32> %497, i32 %319, i64 1, !dbg !46
  %499 = bitcast <2 x i32> %498 to <2 x float>, !dbg !46
  %500 = insertelement <2 x i32> poison, i32 %287, i64 0, !dbg !49
  %501 = insertelement <2 x i32> %500, i32 %343, i64 1, !dbg !49
  %502 = bitcast <2 x i32> %501 to <2 x float>, !dbg !49
  %503 = fsub <2 x float> %502, %499, !dbg !66
  %504 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !67
  %505 = bitcast <2 x i32> %504 to <2 x float>, !dbg !67
  %506 = shufflevector <2 x float> %505, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %507 = fmul <2 x float> %503, %506, !dbg !67
  %508 = fadd <2 x float> %507, %499, !dbg !68
  %509 = insertelement <2 x i32> poison, i32 %439, i64 0, !dbg !63
  %510 = insertelement <2 x i32> %509, i32 %383, i64 1, !dbg !63
  %511 = bitcast <2 x i32> %510 to <2 x float>, !dbg !63
  %512 = insertelement <2 x i32> poison, i32 %463, i64 0, !dbg !65
  %513 = insertelement <2 x i32> %512, i32 %415, i64 1, !dbg !65
  %514 = bitcast <2 x i32> %513 to <2 x float>, !dbg !65
  %515 = fsub <2 x float> %514, %511, !dbg !69
  %516 = fmul <2 x float> %515, %506, !dbg !70
  %517 = fadd <2 x float> %516, %511, !dbg !71
  %518 = fsub <2 x float> %517, %508, !dbg !72
  %519 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !73
  %520 = bitcast <2 x i32> %519 to <2 x float>, !dbg !73
  %521 = shufflevector <2 x float> %520, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %522 = fmul <2 x float> %518, %521, !dbg !73
  %523 = fadd <2 x float> %508, %522, !dbg !74
  %524 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !46
  %525 = insertelement <2 x i32> %524, i32 %320, i64 1, !dbg !46
  %526 = bitcast <2 x i32> %525 to <2 x float>, !dbg !46
  %527 = insertelement <2 x i32> poison, i32 %288, i64 0, !dbg !49
  %528 = insertelement <2 x i32> %527, i32 %344, i64 1, !dbg !49
  %529 = bitcast <2 x i32> %528 to <2 x float>, !dbg !49
  %530 = fsub <2 x float> %529, %526, !dbg !66
  %531 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !67
  %532 = bitcast <2 x i32> %531 to <2 x float>, !dbg !67
  %533 = shufflevector <2 x float> %532, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %534 = fmul <2 x float> %530, %533, !dbg !67
  %535 = fadd <2 x float> %534, %526, !dbg !68
  %536 = insertelement <2 x i32> poison, i32 %440, i64 0, !dbg !63
  %537 = insertelement <2 x i32> %536, i32 %384, i64 1, !dbg !63
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !63
  %539 = insertelement <2 x i32> poison, i32 %464, i64 0, !dbg !65
  %540 = insertelement <2 x i32> %539, i32 %416, i64 1, !dbg !65
  %541 = bitcast <2 x i32> %540 to <2 x float>, !dbg !65
  %542 = fsub <2 x float> %541, %538, !dbg !69
  %543 = fmul <2 x float> %542, %533, !dbg !70
  %544 = fadd <2 x float> %543, %538, !dbg !71
  %545 = fsub <2 x float> %544, %535, !dbg !72
  %546 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !73
  %547 = bitcast <2 x i32> %546 to <2 x float>, !dbg !73
  %548 = shufflevector <2 x float> %547, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %549 = fmul <2 x float> %545, %548, !dbg !73
  %550 = fadd <2 x float> %535, %549, !dbg !74
  %551 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !46
  %552 = insertelement <2 x i32> %551, i32 %321, i64 1, !dbg !46
  %553 = bitcast <2 x i32> %552 to <2 x float>, !dbg !46
  %554 = insertelement <2 x i32> poison, i32 %289, i64 0, !dbg !49
  %555 = insertelement <2 x i32> %554, i32 %345, i64 1, !dbg !49
  %556 = bitcast <2 x i32> %555 to <2 x float>, !dbg !49
  %557 = fsub <2 x float> %556, %553, !dbg !66
  %558 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !67
  %559 = bitcast <2 x i32> %558 to <2 x float>, !dbg !67
  %560 = shufflevector <2 x float> %559, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %561 = fmul <2 x float> %557, %560, !dbg !67
  %562 = fadd <2 x float> %561, %553, !dbg !68
  %563 = insertelement <2 x i32> poison, i32 %441, i64 0, !dbg !63
  %564 = insertelement <2 x i32> %563, i32 %385, i64 1, !dbg !63
  %565 = bitcast <2 x i32> %564 to <2 x float>, !dbg !63
  %566 = insertelement <2 x i32> poison, i32 %465, i64 0, !dbg !65
  %567 = insertelement <2 x i32> %566, i32 %417, i64 1, !dbg !65
  %568 = bitcast <2 x i32> %567 to <2 x float>, !dbg !65
  %569 = fsub <2 x float> %568, %565, !dbg !69
  %570 = fmul <2 x float> %569, %560, !dbg !70
  %571 = fadd <2 x float> %570, %565, !dbg !71
  %572 = fsub <2 x float> %571, %562, !dbg !72
  %573 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !73
  %574 = bitcast <2 x i32> %573 to <2 x float>, !dbg !73
  %575 = shufflevector <2 x float> %574, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %576 = fmul <2 x float> %572, %575, !dbg !73
  %577 = fadd <2 x float> %562, %576, !dbg !74
  %578 = insertelement <2 x i32> poison, i32 %226, i64 0, !dbg !46
  %579 = insertelement <2 x i32> %578, i32 %322, i64 1, !dbg !46
  %580 = bitcast <2 x i32> %579 to <2 x float>, !dbg !46
  %581 = insertelement <2 x i32> poison, i32 %290, i64 0, !dbg !49
  %582 = insertelement <2 x i32> %581, i32 %346, i64 1, !dbg !49
  %583 = bitcast <2 x i32> %582 to <2 x float>, !dbg !49
  %584 = fsub <2 x float> %583, %580, !dbg !66
  %585 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !67
  %586 = bitcast <2 x i32> %585 to <2 x float>, !dbg !67
  %587 = shufflevector <2 x float> %586, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %588 = fmul <2 x float> %584, %587, !dbg !67
  %589 = fadd <2 x float> %588, %580, !dbg !68
  %590 = insertelement <2 x i32> poison, i32 %442, i64 0, !dbg !63
  %591 = insertelement <2 x i32> %590, i32 %386, i64 1, !dbg !63
  %592 = bitcast <2 x i32> %591 to <2 x float>, !dbg !63
  %593 = insertelement <2 x i32> poison, i32 %466, i64 0, !dbg !65
  %594 = insertelement <2 x i32> %593, i32 %418, i64 1, !dbg !65
  %595 = bitcast <2 x i32> %594 to <2 x float>, !dbg !65
  %596 = fsub <2 x float> %595, %592, !dbg !69
  %597 = fmul <2 x float> %596, %587, !dbg !70
  %598 = fadd <2 x float> %597, %592, !dbg !71
  %599 = fsub <2 x float> %598, %589, !dbg !72
  %600 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !73
  %601 = bitcast <2 x i32> %600 to <2 x float>, !dbg !73
  %602 = shufflevector <2 x float> %601, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %603 = fmul <2 x float> %599, %602, !dbg !73
  %604 = fadd <2 x float> %589, %603, !dbg !74
  %605 = insertelement <2 x i32> poison, i32 %227, i64 0, !dbg !46
  %606 = insertelement <2 x i32> %605, i32 %323, i64 1, !dbg !46
  %607 = bitcast <2 x i32> %606 to <2 x float>, !dbg !46
  %608 = insertelement <2 x i32> poison, i32 %291, i64 0, !dbg !49
  %609 = insertelement <2 x i32> %608, i32 %347, i64 1, !dbg !49
  %610 = bitcast <2 x i32> %609 to <2 x float>, !dbg !49
  %611 = fsub <2 x float> %610, %607, !dbg !66
  %612 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !67
  %613 = bitcast <2 x i32> %612 to <2 x float>, !dbg !67
  %614 = shufflevector <2 x float> %613, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %615 = fmul <2 x float> %611, %614, !dbg !67
  %616 = fadd <2 x float> %615, %607, !dbg !68
  %617 = insertelement <2 x i32> poison, i32 %443, i64 0, !dbg !63
  %618 = insertelement <2 x i32> %617, i32 %387, i64 1, !dbg !63
  %619 = bitcast <2 x i32> %618 to <2 x float>, !dbg !63
  %620 = insertelement <2 x i32> poison, i32 %467, i64 0, !dbg !65
  %621 = insertelement <2 x i32> %620, i32 %419, i64 1, !dbg !65
  %622 = bitcast <2 x i32> %621 to <2 x float>, !dbg !65
  %623 = fsub <2 x float> %622, %619, !dbg !69
  %624 = fmul <2 x float> %623, %614, !dbg !70
  %625 = fadd <2 x float> %624, %619, !dbg !71
  %626 = fsub <2 x float> %625, %616, !dbg !72
  %627 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !73
  %628 = bitcast <2 x i32> %627 to <2 x float>, !dbg !73
  %629 = shufflevector <2 x float> %628, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %630 = fmul <2 x float> %626, %629, !dbg !73
  %631 = fadd <2 x float> %616, %630, !dbg !74
  %632 = insertelement <2 x i32> poison, i32 %228, i64 0, !dbg !46
  %633 = insertelement <2 x i32> %632, i32 %324, i64 1, !dbg !46
  %634 = bitcast <2 x i32> %633 to <2 x float>, !dbg !46
  %635 = insertelement <2 x i32> poison, i32 %292, i64 0, !dbg !49
  %636 = insertelement <2 x i32> %635, i32 %348, i64 1, !dbg !49
  %637 = bitcast <2 x i32> %636 to <2 x float>, !dbg !49
  %638 = fsub <2 x float> %637, %634, !dbg !66
  %639 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !67
  %640 = bitcast <2 x i32> %639 to <2 x float>, !dbg !67
  %641 = shufflevector <2 x float> %640, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %642 = fmul <2 x float> %638, %641, !dbg !67
  %643 = fadd <2 x float> %642, %634, !dbg !68
  %644 = insertelement <2 x i32> poison, i32 %444, i64 0, !dbg !63
  %645 = insertelement <2 x i32> %644, i32 %388, i64 1, !dbg !63
  %646 = bitcast <2 x i32> %645 to <2 x float>, !dbg !63
  %647 = insertelement <2 x i32> poison, i32 %468, i64 0, !dbg !65
  %648 = insertelement <2 x i32> %647, i32 %420, i64 1, !dbg !65
  %649 = bitcast <2 x i32> %648 to <2 x float>, !dbg !65
  %650 = fsub <2 x float> %649, %646, !dbg !69
  %651 = fmul <2 x float> %650, %641, !dbg !70
  %652 = fadd <2 x float> %651, %646, !dbg !71
  %653 = fsub <2 x float> %652, %643, !dbg !72
  %654 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !73
  %655 = bitcast <2 x i32> %654 to <2 x float>, !dbg !73
  %656 = shufflevector <2 x float> %655, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %657 = fmul <2 x float> %653, %656, !dbg !73
  %658 = fadd <2 x float> %643, %657, !dbg !74
  %659 = insertelement <2 x i32> poison, i32 %229, i64 0, !dbg !46
  %660 = insertelement <2 x i32> %659, i32 %325, i64 1, !dbg !46
  %661 = bitcast <2 x i32> %660 to <2 x float>, !dbg !46
  %662 = insertelement <2 x i32> poison, i32 %293, i64 0, !dbg !49
  %663 = insertelement <2 x i32> %662, i32 %349, i64 1, !dbg !49
  %664 = bitcast <2 x i32> %663 to <2 x float>, !dbg !49
  %665 = fsub <2 x float> %664, %661, !dbg !66
  %666 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !67
  %667 = bitcast <2 x i32> %666 to <2 x float>, !dbg !67
  %668 = shufflevector <2 x float> %667, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %669 = fmul <2 x float> %665, %668, !dbg !67
  %670 = fadd <2 x float> %669, %661, !dbg !68
  %671 = insertelement <2 x i32> poison, i32 %445, i64 0, !dbg !63
  %672 = insertelement <2 x i32> %671, i32 %389, i64 1, !dbg !63
  %673 = bitcast <2 x i32> %672 to <2 x float>, !dbg !63
  %674 = insertelement <2 x i32> poison, i32 %469, i64 0, !dbg !65
  %675 = insertelement <2 x i32> %674, i32 %421, i64 1, !dbg !65
  %676 = bitcast <2 x i32> %675 to <2 x float>, !dbg !65
  %677 = fsub <2 x float> %676, %673, !dbg !69
  %678 = fmul <2 x float> %677, %668, !dbg !70
  %679 = fadd <2 x float> %678, %673, !dbg !71
  %680 = fsub <2 x float> %679, %670, !dbg !72
  %681 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !73
  %682 = bitcast <2 x i32> %681 to <2 x float>, !dbg !73
  %683 = shufflevector <2 x float> %682, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %684 = fmul <2 x float> %680, %683, !dbg !73
  %685 = fadd <2 x float> %670, %684, !dbg !74
  %686 = extractelement <2 x float> %496, i64 0, !dbg !75
  %687 = extractelement <2 x float> %496, i64 1, !dbg !76
  %688 = fsub float %686, %687, !dbg !75
  %689 = extractelement <2 x float> %523, i64 0, !dbg !75
  %690 = extractelement <2 x float> %523, i64 1, !dbg !76
  %691 = fsub float %689, %690, !dbg !75
  %692 = extractelement <2 x float> %550, i64 0, !dbg !75
  %693 = extractelement <2 x float> %550, i64 1, !dbg !76
  %694 = fsub float %692, %693, !dbg !75
  %695 = extractelement <2 x float> %577, i64 0, !dbg !75
  %696 = extractelement <2 x float> %577, i64 1, !dbg !76
  %697 = fsub float %695, %696, !dbg !75
  %698 = extractelement <2 x float> %604, i64 0, !dbg !75
  %699 = extractelement <2 x float> %604, i64 1, !dbg !76
  %700 = fsub float %698, %699, !dbg !75
  %701 = extractelement <2 x float> %631, i64 0, !dbg !75
  %702 = extractelement <2 x float> %631, i64 1, !dbg !76
  %703 = fsub float %701, %702, !dbg !75
  %704 = extractelement <2 x float> %658, i64 0, !dbg !75
  %705 = extractelement <2 x float> %658, i64 1, !dbg !76
  %706 = fsub float %704, %705, !dbg !75
  %707 = extractelement <2 x float> %685, i64 0, !dbg !75
  %708 = extractelement <2 x float> %685, i64 1, !dbg !76
  %709 = fsub float %707, %708, !dbg !75
  %710 = fmul float %688, %131, !dbg !77
  %711 = fmul float %691, %133, !dbg !77
  %712 = fmul float %694, %135, !dbg !77
  %713 = fmul float %697, %137, !dbg !77
  %714 = fmul float %700, %139, !dbg !77
  %715 = fmul float %703, %141, !dbg !77
  %716 = fmul float %706, %143, !dbg !77
  %717 = fmul float %709, %145, !dbg !77
  %718 = fadd float %687, %710, !dbg !76
  %719 = fadd float %690, %711, !dbg !76
  %720 = fadd float %693, %712, !dbg !76
  %721 = fadd float %696, %713, !dbg !76
  %722 = fadd float %699, %714, !dbg !76
  %723 = fadd float %702, %715, !dbg !76
  %724 = fadd float %705, %716, !dbg !76
  %725 = fadd float %708, %717, !dbg !76
  %726 = sext i32 %18 to i64, !dbg !78
  %727 = getelementptr float, ptr addrspace(1) %0, i64 %726, !dbg !78
  %728 = sext i32 %20 to i64, !dbg !78
  %729 = getelementptr float, ptr addrspace(1) %0, i64 %728, !dbg !78
  %730 = bitcast float %718 to i32, !dbg !79
  %731 = bitcast float %719 to i32, !dbg !79
  %732 = bitcast float %720 to i32, !dbg !79
  %733 = bitcast float %721 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %730, i32 %731, i32 %732, i32 %733, ptr addrspace(1) %727, i1 true) #1, !dbg !79
  %734 = bitcast float %722 to i32, !dbg !79
  %735 = bitcast float %723 to i32, !dbg !79
  %736 = bitcast float %724 to i32, !dbg !79
  %737 = bitcast float %725 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %734, i32 %735, i32 %736, i32 %737, ptr addrspace(1) %729, i1 true) #1, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct76s2ecuxtztyzafhq42fl4gmdfi2a4ojrkqqtldnaav6cv4jyj.py", directory: "inductor_cache/t7")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_8", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 41, column: 32, scope: !7)
!39 = !DILocation(line: 44, column: 32, scope: !7)
!40 = !DILocation(line: 47, column: 35, scope: !7)
!41 = !DILocation(line: 48, column: 41, scope: !7)
!42 = !DILocation(line: 48, column: 51, scope: !7)
!43 = !DILocation(line: 48, column: 61, scope: !7)
!44 = !DILocation(line: 48, column: 58, scope: !7)
!45 = !DILocation(line: 48, column: 31, scope: !7)
!46 = !DILocation(line: 48, column: 66, scope: !7)
!47 = !DILocation(line: 51, column: 35, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 66, scope: !7)
!50 = !DILocation(line: 58, column: 35, scope: !7)
!51 = !DILocation(line: 59, column: 51, scope: !7)
!52 = !DILocation(line: 59, column: 31, scope: !7)
!53 = !DILocation(line: 59, column: 67, scope: !7)
!54 = !DILocation(line: 60, column: 31, scope: !7)
!55 = !DILocation(line: 60, column: 67, scope: !7)
!56 = !DILocation(line: 66, column: 35, scope: !7)
!57 = !DILocation(line: 67, column: 41, scope: !7)
!58 = !DILocation(line: 67, column: 31, scope: !7)
!59 = !DILocation(line: 67, column: 68, scope: !7)
!60 = !DILocation(line: 68, column: 31, scope: !7)
!61 = !DILocation(line: 68, column: 68, scope: !7)
!62 = !DILocation(line: 74, column: 31, scope: !7)
!63 = !DILocation(line: 74, column: 67, scope: !7)
!64 = !DILocation(line: 75, column: 31, scope: !7)
!65 = !DILocation(line: 75, column: 67, scope: !7)
!66 = !DILocation(line: 53, column: 20, scope: !7)
!67 = !DILocation(line: 54, column: 20, scope: !7)
!68 = !DILocation(line: 55, column: 20, scope: !7)
!69 = !DILocation(line: 76, column: 20, scope: !7)
!70 = !DILocation(line: 77, column: 20, scope: !7)
!71 = !DILocation(line: 78, column: 20, scope: !7)
!72 = !DILocation(line: 79, column: 20, scope: !7)
!73 = !DILocation(line: 80, column: 20, scope: !7)
!74 = !DILocation(line: 82, column: 20, scope: !7)
!75 = !DILocation(line: 83, column: 20, scope: !7)
!76 = !DILocation(line: 85, column: 20, scope: !7)
!77 = !DILocation(line: 84, column: 20, scope: !7)
!78 = !DILocation(line: 86, column: 28, scope: !7)
!79 = !DILocation(line: 86, column: 40, scope: !7)
!80 = !DILocation(line: 86, column: 4, scope: !7)
