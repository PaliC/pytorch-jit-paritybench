; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_cat_mul_relu_sigmoid_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = sdiv i32 %14, 256, !dbg !14
  %17 = sdiv i32 %15, 256, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %18 = sdiv i32 %.frozen, 65536, !dbg !15
  %19 = mul i32 %18, 65536, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %.frozen8 = freeze i32 %15, !dbg !15
  %20 = sdiv i32 %.frozen8, 65536, !dbg !15
  %21 = mul i32 %20, 65536, !dbg !16
  %.decomposed9 = sub i32 %.frozen8, %21, !dbg !16
  %22 = sext i32 %14 to i64, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !17
  %24 = sext i32 %15 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %36 = sext i32 %16 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !19
  %38 = sext i32 %17 to i64, !dbg !19
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !20
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !20
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !20
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !20
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !20
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !21
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !22
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !24
  %61 = bitcast i32 %60 to float, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !24
  %63 = bitcast i32 %62 to float, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !24
  %65 = bitcast i32 %64 to float, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !24
  %67 = bitcast i32 %66 to float, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %69 = bitcast i32 %68 to float, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %71 = bitcast i32 %70 to float, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %73 = bitcast i32 %72 to float, !dbg !24
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !24
  %75 = bitcast i32 %74 to float, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !25
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !26
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !26
  %88 = fsub float 0.000000e+00, %61, !dbg !27
  %89 = fsub float 0.000000e+00, %63, !dbg !27
  %90 = fsub float 0.000000e+00, %65, !dbg !27
  %91 = fsub float 0.000000e+00, %67, !dbg !27
  %92 = fsub float 0.000000e+00, %69, !dbg !27
  %93 = fsub float 0.000000e+00, %71, !dbg !27
  %94 = fsub float 0.000000e+00, %73, !dbg !27
  %95 = fsub float 0.000000e+00, %75, !dbg !27
  %96 = fmul float %88, 0x3FF7154760000000, !dbg !31
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #1, !dbg !31
  %98 = fmul float %89, 0x3FF7154760000000, !dbg !31
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #1, !dbg !31
  %100 = fmul float %90, 0x3FF7154760000000, !dbg !31
  %101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %100) #1, !dbg !31
  %102 = fmul float %91, 0x3FF7154760000000, !dbg !31
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #1, !dbg !31
  %104 = fmul float %92, 0x3FF7154760000000, !dbg !31
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #1, !dbg !31
  %106 = fmul float %93, 0x3FF7154760000000, !dbg !31
  %107 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %106) #1, !dbg !31
  %108 = fmul float %94, 0x3FF7154760000000, !dbg !31
  %109 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %108) #1, !dbg !31
  %110 = fmul float %95, 0x3FF7154760000000, !dbg !31
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #1, !dbg !31
  %112 = fadd float %97, 1.000000e+00, !dbg !32
  %113 = fadd float %99, 1.000000e+00, !dbg !32
  %114 = fadd float %101, 1.000000e+00, !dbg !32
  %115 = fadd float %103, 1.000000e+00, !dbg !32
  %116 = fadd float %105, 1.000000e+00, !dbg !32
  %117 = fadd float %107, 1.000000e+00, !dbg !32
  %118 = fadd float %109, 1.000000e+00, !dbg !32
  %119 = fadd float %111, 1.000000e+00, !dbg !32
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %112) #1, !dbg !33
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %113) #1, !dbg !33
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %114) #1, !dbg !33
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %115) #1, !dbg !33
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %116) #1, !dbg !33
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %117) #1, !dbg !33
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %118) #1, !dbg !33
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %119) #1, !dbg !33
  %128 = insertelement <8 x i32> poison, i32 %35, i64 0, !dbg !18
  %129 = insertelement <8 x i32> %128, i32 %34, i64 1, !dbg !18
  %130 = insertelement <8 x i32> %129, i32 %33, i64 2, !dbg !18
  %131 = insertelement <8 x i32> %130, i32 %32, i64 3, !dbg !18
  %132 = insertelement <8 x i32> %131, i32 %30, i64 4, !dbg !18
  %133 = insertelement <8 x i32> %132, i32 %29, i64 5, !dbg !18
  %134 = insertelement <8 x i32> %133, i32 %28, i64 6, !dbg !18
  %135 = insertelement <8 x i32> %134, i32 %27, i64 7, !dbg !18
  %136 = bitcast <8 x i32> %135 to <8 x float>, !dbg !18
  %137 = insertelement <8 x i32> poison, i32 %47, i64 0, !dbg !20
  %138 = insertelement <8 x i32> %137, i32 %46, i64 1, !dbg !20
  %139 = insertelement <8 x i32> %138, i32 %45, i64 2, !dbg !20
  %140 = insertelement <8 x i32> %139, i32 %44, i64 3, !dbg !20
  %141 = insertelement <8 x i32> %140, i32 %43, i64 4, !dbg !20
  %142 = insertelement <8 x i32> %141, i32 %42, i64 5, !dbg !20
  %143 = insertelement <8 x i32> %142, i32 %41, i64 6, !dbg !20
  %144 = insertelement <8 x i32> %143, i32 %40, i64 7, !dbg !20
  %145 = bitcast <8 x i32> %144 to <8 x float>, !dbg !20
  %146 = insertelement <8 x i32> poison, i32 %57, i64 0, !dbg !22
  %147 = insertelement <8 x i32> %146, i32 %56, i64 1, !dbg !22
  %148 = insertelement <8 x i32> %147, i32 %55, i64 2, !dbg !22
  %149 = insertelement <8 x i32> %148, i32 %54, i64 3, !dbg !22
  %150 = insertelement <8 x i32> %149, i32 %53, i64 4, !dbg !22
  %151 = insertelement <8 x i32> %150, i32 %52, i64 5, !dbg !22
  %152 = insertelement <8 x i32> %151, i32 %51, i64 6, !dbg !22
  %153 = insertelement <8 x i32> %152, i32 %50, i64 7, !dbg !22
  %154 = bitcast <8 x i32> %153 to <8 x float>, !dbg !22
  %155 = insertelement <8 x i32> poison, i32 %87, i64 0, !dbg !26
  %156 = insertelement <8 x i32> %155, i32 %86, i64 1, !dbg !26
  %157 = insertelement <8 x i32> %156, i32 %85, i64 2, !dbg !26
  %158 = insertelement <8 x i32> %157, i32 %84, i64 3, !dbg !26
  %159 = insertelement <8 x i32> %158, i32 %82, i64 4, !dbg !26
  %160 = insertelement <8 x i32> %159, i32 %81, i64 5, !dbg !26
  %161 = insertelement <8 x i32> %160, i32 %80, i64 6, !dbg !26
  %162 = insertelement <8 x i32> %161, i32 %79, i64 7, !dbg !26
  %163 = bitcast <8 x i32> %162 to <8 x float>, !dbg !26
  %164 = fsub <8 x float> %136, %145, !dbg !34
  %165 = fmul <8 x float> %164, %154, !dbg !35
  %166 = insertelement <8 x float> poison, float %127, i64 0, !dbg !36
  %167 = insertelement <8 x float> %166, float %126, i64 1, !dbg !36
  %168 = insertelement <8 x float> %167, float %125, i64 2, !dbg !36
  %169 = insertelement <8 x float> %168, float %124, i64 3, !dbg !36
  %170 = insertelement <8 x float> %169, float %123, i64 4, !dbg !36
  %171 = insertelement <8 x float> %170, float %122, i64 5, !dbg !36
  %172 = insertelement <8 x float> %171, float %121, i64 6, !dbg !36
  %173 = insertelement <8 x float> %172, float %120, i64 7, !dbg !36
  %174 = fmul <8 x float> %165, %173, !dbg !36
  %175 = fadd <8 x float> %174, %163, !dbg !37
  %176 = fcmp olt <8 x float> %175, zeroinitializer, !dbg !38
  %177 = extractelement <8 x i1> %176, i64 7, !dbg !42
  %178 = extractelement <8 x i1> %176, i64 6, !dbg !42
  %179 = extractelement <8 x i1> %176, i64 5, !dbg !42
  %180 = extractelement <8 x i1> %176, i64 4, !dbg !42
  %181 = extractelement <8 x i1> %176, i64 3, !dbg !42
  %182 = extractelement <8 x i1> %176, i64 2, !dbg !42
  %183 = extractelement <8 x i1> %176, i64 1, !dbg !42
  %184 = extractelement <8 x i1> %176, i64 0, !dbg !42
  %185 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !43
  %186 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !43
  %bc = bitcast <8 x float> %175 to <8 x i32>, !dbg !44
  %187 = extractelement <8 x i32> %bc, i64 7, !dbg !44
  %188 = select i1 %177, i32 0, i32 %187, !dbg !42
  %bc1 = bitcast <8 x float> %175 to <8 x i32>, !dbg !44
  %189 = extractelement <8 x i32> %bc1, i64 6, !dbg !44
  %190 = select i1 %178, i32 0, i32 %189, !dbg !42
  %bc2 = bitcast <8 x float> %175 to <8 x i32>, !dbg !44
  %191 = extractelement <8 x i32> %bc2, i64 5, !dbg !44
  %192 = select i1 %179, i32 0, i32 %191, !dbg !42
  %bc3 = bitcast <8 x float> %175 to <8 x i32>, !dbg !44
  %193 = extractelement <8 x i32> %bc3, i64 4, !dbg !44
  %194 = select i1 %180, i32 0, i32 %193, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %190, i32 %192, i32 %194, ptr addrspace(1) %185, i1 true) #1, !dbg !44
  %bc4 = bitcast <8 x float> %175 to <8 x i32>, !dbg !44
  %195 = extractelement <8 x i32> %bc4, i64 3, !dbg !44
  %196 = select i1 %181, i32 0, i32 %195, !dbg !42
  %bc5 = bitcast <8 x float> %175 to <8 x i32>, !dbg !44
  %197 = extractelement <8 x i32> %bc5, i64 2, !dbg !44
  %198 = select i1 %182, i32 0, i32 %197, !dbg !42
  %bc6 = bitcast <8 x float> %175 to <8 x i32>, !dbg !44
  %199 = extractelement <8 x i32> %bc6, i64 1, !dbg !44
  %200 = select i1 %183, i32 0, i32 %199, !dbg !42
  %bc7 = bitcast <8 x float> %175 to <8 x i32>, !dbg !44
  %201 = extractelement <8 x i32> %bc7, i64 0, !dbg !44
  %202 = select i1 %184, i32 0, i32 %201, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %196, i32 %198, i32 %200, i32 %202, ptr addrspace(1) %186, i1 true) #1, !dbg !44
  %203 = mul i32 %18, 81920, !dbg !45
  %204 = mul i32 %20, 81920, !dbg !45
  %205 = add i32 %203, %.decomposed, !dbg !46
  %206 = add i32 %204, %.decomposed9, !dbg !46
  %207 = sext i32 %205 to i64, !dbg !47
  %208 = getelementptr float, ptr addrspace(1) %6, i64 %207, !dbg !47
  %209 = sext i32 %206 to i64, !dbg !47
  %210 = getelementptr float, ptr addrspace(1) %6, i64 %209, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %190, i32 %192, i32 %194, ptr addrspace(1) %208, i1 true) #1, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %196, i32 %198, i32 %200, i32 %202, ptr addrspace(1) %210, i1 true) #1, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnvcpljjjeoskueb25iuobn5cbzvqxehh2hh5nyrid2w3hfan6bf.py", directory: "inductor_cache/nv")
!4 = !{ptr @triton_poi_fused_add_cat_mul_relu_sigmoid_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_mul_relu_sigmoid_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_mul_relu_sigmoid_20", linkageName: "triton_poi_fused_add_cat_mul_relu_sigmoid_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 47, column: 30, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 35, column: 22, scope: !7)
!31 = !DILocation(line: 47, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 47, column: 20, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 47, column: 16, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 39, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 40, column: 25, scope: !7)
!44 = !DILocation(line: 40, column: 37, scope: !7)
!45 = !DILocation(line: 41, column: 36, scope: !7)
!46 = !DILocation(line: 41, column: 30, scope: !7)
!47 = !DILocation(line: 41, column: 25, scope: !7)
!48 = !DILocation(line: 41, column: 48, scope: !7)
!49 = !DILocation(line: 41, column: 4, scope: !7)
