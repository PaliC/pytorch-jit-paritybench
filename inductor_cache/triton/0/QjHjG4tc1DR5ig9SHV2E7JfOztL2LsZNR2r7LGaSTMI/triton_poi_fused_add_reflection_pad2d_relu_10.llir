; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_reflection_pad2d_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = icmp slt i32 %10, 41472, !dbg !14
  %15 = srem i32 %11, 18, !dbg !15
  %16 = srem i32 %13, 18, !dbg !15
  %17 = sdiv i32 %10, 18, !dbg !16
  %18 = sdiv i32 %12, 18, !dbg !16
  %19 = sdiv i32 %10, 324, !dbg !17
  %20 = add nsw i32 %15, -1, !dbg !18
  %21 = add nsw i32 %16, -1, !dbg !18
  %22 = tail call i32 @llvm.abs.i32(i32 %20, i1 true), !dbg !19
  %23 = tail call i32 @llvm.abs.i32(i32 %21, i1 true), !dbg !19
  %24 = add nsw i32 %22, -15, !dbg !20
  %25 = add nsw i32 %23, -15, !dbg !20
  %26 = tail call i32 @llvm.abs.i32(i32 %24, i1 true), !dbg !21
  %27 = tail call i32 @llvm.abs.i32(i32 %25, i1 true), !dbg !21
  %28 = shl nsw i32 %19, 8, !dbg !22
  %reass.sub = or disjoint i32 %28, 255, !dbg !23
  %29 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %30 = insertelement <2 x i32> %29, i32 %17, i64 1, !dbg !15
  %31 = srem <2 x i32> %30, splat (i32 18), !dbg !15
  %32 = add nsw <2 x i32> %31, splat (i32 -1), !dbg !18
  %33 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %32, i1 true), !dbg !19
  %34 = add nsw <2 x i32> %33, splat (i32 -15), !dbg !20
  %35 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %34, i1 true), !dbg !21
  %36 = extractelement <2 x i32> %35, i64 0, !dbg !24
  %37 = sub nuw i32 %reass.sub, %36, !dbg !24
  %38 = extractelement <2 x i32> %35, i64 1, !dbg !24
  %39 = mul nsw i32 %38, -16, !dbg !24
  %40 = add i32 %37, %39, !dbg !24
  %41 = sub nuw i32 %reass.sub, %26, !dbg !23
  %42 = add i32 %41, %39, !dbg !24
  %43 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !15
  %44 = insertelement <2 x i32> %43, i32 %18, i64 1, !dbg !15
  %45 = srem <2 x i32> %44, splat (i32 18), !dbg !15
  %46 = add nsw <2 x i32> %45, splat (i32 -1), !dbg !18
  %47 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %46, i1 true), !dbg !19
  %48 = add nsw <2 x i32> %47, splat (i32 -15), !dbg !20
  %49 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %48, i1 true), !dbg !21
  %50 = extractelement <2 x i32> %49, i64 0, !dbg !24
  %51 = sub nuw i32 %reass.sub, %50, !dbg !24
  %52 = extractelement <2 x i32> %49, i64 1, !dbg !24
  %53 = mul nsw i32 %52, -16, !dbg !24
  %54 = add i32 %51, %53, !dbg !24
  %55 = sub nuw i32 %reass.sub, %27, !dbg !23
  %56 = add i32 %55, %53, !dbg !24
  %57 = sext i32 %40 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !25
  %59 = sext i32 %42 to i64, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !25
  %61 = sext i32 %54 to i64, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !25
  %63 = sext i32 %56 to i64, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %14) #2, !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %14) #2, !dbg !26
  %68 = bitcast i32 %67 to float, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %14) #2, !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %14) #2, !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !27
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !27
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !27
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %14) #2, !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %14) #2, !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %14) #2, !dbg !28
  %82 = bitcast i32 %81 to float, !dbg !28
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %14) #2, !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = fcmp olt float %78, 0.000000e+00, !dbg !29
  %86 = fcmp olt float %80, 0.000000e+00, !dbg !29
  %87 = fcmp olt float %82, 0.000000e+00, !dbg !29
  %88 = fcmp olt float %84, 0.000000e+00, !dbg !29
  %89 = select i1 %85, float 0.000000e+00, float %78, !dbg !33
  %90 = select i1 %86, float 0.000000e+00, float %80, !dbg !33
  %91 = select i1 %87, float 0.000000e+00, float %82, !dbg !33
  %92 = select i1 %88, float 0.000000e+00, float %84, !dbg !33
  %93 = fadd float %89, %66, !dbg !34
  %94 = fadd float %90, %68, !dbg !34
  %95 = fadd float %91, %70, !dbg !34
  %96 = fadd float %92, %72, !dbg !34
  %97 = sext i32 %10 to i64, !dbg !35
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !35
  %99 = bitcast float %93 to i32, !dbg !36
  %100 = bitcast float %94 to i32, !dbg !36
  %101 = bitcast float %95 to i32, !dbg !36
  %102 = bitcast float %96 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %99, i32 %100, i32 %101, i32 %102, ptr addrspace(1) %98, i1 %14) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctr3txhgx3kgo7ozqaalmqe2wjuyz47lmoe7bwuvpxqnb5duw4co.py", directory: "inductor_cache/tr")
!4 = !{ptr @triton_poi_fused_add_reflection_pad2d_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_reflection_pad2d_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_reflection_pad2d_relu_10", linkageName: "triton_poi_fused_add_reflection_pad2d_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 81, scope: !7)
!19 = !DILocation(line: 28, column: 74, scope: !7)
!20 = !DILocation(line: 28, column: 62, scope: !7)
!21 = !DILocation(line: 28, column: 54, scope: !7)
!22 = !DILocation(line: 28, column: 147, scope: !7)
!23 = !DILocation(line: 28, column: 90, scope: !7)
!24 = !DILocation(line: 28, column: 143, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 152, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 152, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 31, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 32, column: 18, scope: !7)
!35 = !DILocation(line: 33, column: 25, scope: !7)
!36 = !DILocation(line: 33, column: 36, scope: !7)
!37 = !DILocation(line: 33, column: 4, scope: !7)
