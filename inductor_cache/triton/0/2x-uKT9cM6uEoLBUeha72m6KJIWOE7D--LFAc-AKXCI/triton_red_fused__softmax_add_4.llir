; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__softmax_add_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 2048, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = shl i32 %12, 2, !dbg !12
  %15 = and i32 %14, 1020, !dbg !12
  %16 = shl i32 %10, 12, !dbg !13
  %17 = or disjoint i32 %16, %15
  %18 = sext i32 %17 to i64, !dbg !14
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !15
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !15
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !15
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !15
  %25 = bitcast i32 %21 to float, !dbg !15
  %26 = bitcast i32 %22 to float, !dbg !15
  %27 = bitcast i32 %23 to float, !dbg !15
  %28 = bitcast i32 %24 to float, !dbg !15
  %29 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %25, float 9.000000e+00) #5, !dbg !16
  %30 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %26, float 9.000000e+00) #5, !dbg !16
  %31 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %27, float 9.000000e+00) #5, !dbg !16
  %32 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %28, float 9.000000e+00) #5, !dbg !16
  %33 = select i1 %11, float %29, float 0xFFF0000000000000, !dbg !17
  %34 = select i1 %11, float %30, float 0xFFF0000000000000, !dbg !17
  %35 = select i1 %11, float %31, float 0xFFF0000000000000, !dbg !17
  %36 = or disjoint i32 %17, 1024, !dbg !18
  %37 = sext i32 %36 to i64, !dbg !14
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !14
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !15
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !15
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !15
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !15
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !15
  %44 = bitcast i32 %40 to float, !dbg !15
  %45 = bitcast i32 %41 to float, !dbg !15
  %46 = bitcast i32 %42 to float, !dbg !15
  %47 = bitcast i32 %43 to float, !dbg !15
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float 9.000000e+00) #5, !dbg !16
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 9.000000e+00) #5, !dbg !16
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 9.000000e+00) #5, !dbg !16
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 9.000000e+00) #5, !dbg !16
  %52 = fcmp ogt float %33, %48, !dbg !19
  %53 = fcmp ogt float %34, %49, !dbg !19
  %54 = fcmp ogt float %35, %50, !dbg !19
  %55 = fcmp uno float %33, 0.000000e+00, !dbg !23
  %56 = fcmp uno float %34, 0.000000e+00, !dbg !23
  %57 = fcmp uno float %35, 0.000000e+00, !dbg !23
  %58 = or i1 %55, %52, !dbg !24
  %59 = or i1 %56, %53, !dbg !24
  %60 = or i1 %57, %54, !dbg !24
  %61 = select i1 %58, float %33, float %48, !dbg !25
  %62 = select i1 %59, float %34, float %49, !dbg !25
  %63 = select i1 %60, float %35, float %50, !dbg !25
  %64 = select i1 %11, float %62, float 0xFFF0000000000000, !dbg !17
  %65 = select i1 %11, float %63, float 0xFFF0000000000000, !dbg !17
  %66 = or disjoint i32 %17, 2048, !dbg !18
  %67 = sext i32 %66 to i64, !dbg !14
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !14
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !15
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !15
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !15
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !15
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !15
  %74 = bitcast i32 %70 to float, !dbg !15
  %75 = bitcast i32 %71 to float, !dbg !15
  %76 = bitcast i32 %72 to float, !dbg !15
  %77 = bitcast i32 %73 to float, !dbg !15
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float 9.000000e+00) #5, !dbg !16
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 9.000000e+00) #5, !dbg !16
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float 9.000000e+00) #5, !dbg !16
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 9.000000e+00) #5, !dbg !16
  %82 = fcmp ogt float %64, %79, !dbg !19
  %83 = fcmp ogt float %65, %80, !dbg !19
  %84 = fcmp uno float %64, 0.000000e+00, !dbg !23
  %85 = fcmp uno float %65, 0.000000e+00, !dbg !23
  %86 = or i1 %84, %82, !dbg !24
  %87 = or i1 %85, %83, !dbg !24
  %88 = select i1 %86, float %64, float %79, !dbg !25
  %89 = select i1 %87, float %65, float %80, !dbg !25
  %90 = select i1 %11, float %88, float 0xFFF0000000000000, !dbg !17
  %91 = select i1 %11, float %89, float 0xFFF0000000000000, !dbg !17
  %92 = or disjoint i32 %17, 3072, !dbg !18
  %93 = sext i32 %92 to i64, !dbg !14
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !14
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !15
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !15
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !15
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !15
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !15
  %100 = bitcast i32 %96 to float, !dbg !15
  %101 = bitcast i32 %97 to float, !dbg !15
  %102 = bitcast i32 %98 to float, !dbg !15
  %103 = bitcast i32 %99 to float, !dbg !15
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 9.000000e+00) #5, !dbg !16
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 9.000000e+00) #5, !dbg !16
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 9.000000e+00) #5, !dbg !16
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 9.000000e+00) #5, !dbg !16
  %108 = fcmp ogt float %90, %105, !dbg !19
  %109 = fcmp ogt float %91, %106, !dbg !19
  %110 = fcmp uno float %90, 0.000000e+00, !dbg !23
  %111 = fcmp uno float %91, 0.000000e+00, !dbg !23
  %112 = or i1 %110, %108, !dbg !24
  %113 = or i1 %111, %109, !dbg !24
  %114 = select i1 %112, float %90, float %105, !dbg !25
  %115 = select i1 %113, float %91, float %106, !dbg !25
  %116 = select i1 %11, float %114, float 0xFFF0000000000000, !dbg !17
  %117 = select i1 %11, float %115, float 0xFFF0000000000000, !dbg !17
  %118 = lshr i32 %12, 5, !dbg !12
  %119 = insertelement <2 x i1> poison, i1 %11, i64 0, !dbg !17
  %120 = shufflevector <2 x i1> %119, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !17
  %121 = insertelement <2 x float> poison, float %32, i64 0, !dbg !17
  %122 = insertelement <2 x float> %121, float %61, i64 1, !dbg !17
  %123 = select <2 x i1> %120, <2 x float> %122, <2 x float> splat (float 0xFFF0000000000000), !dbg !17
  %124 = insertelement <2 x float> poison, float %51, i64 0, !dbg !19
  %125 = insertelement <2 x float> %124, float %78, i64 1, !dbg !19
  %126 = fcmp ogt <2 x float> %123, %125, !dbg !19
  %127 = fcmp uno <2 x float> %123, zeroinitializer, !dbg !23
  %128 = or <2 x i1> %127, %126, !dbg !24
  %129 = select <2 x i1> %128, <2 x float> %123, <2 x float> %125, !dbg !25
  %130 = select <2 x i1> %120, <2 x float> %129, <2 x float> splat (float 0xFFF0000000000000), !dbg !17
  %131 = insertelement <2 x float> poison, float %81, i64 0, !dbg !19
  %132 = insertelement <2 x float> %131, float %104, i64 1, !dbg !19
  %133 = fcmp ogt <2 x float> %130, %132, !dbg !19
  %134 = fcmp uno <2 x float> %130, zeroinitializer, !dbg !23
  %135 = or <2 x i1> %134, %133, !dbg !24
  %136 = select <2 x i1> %135, <2 x float> %130, <2 x float> %132, !dbg !25
  %137 = select <2 x i1> %120, <2 x float> %136, <2 x float> splat (float 0xFFF0000000000000), !dbg !17
  %138 = insertelement <2 x float> poison, float %107, i64 0, !dbg !19
  %139 = insertelement <2 x float> %138, float %116, i64 1, !dbg !19
  %140 = fcmp ogt <2 x float> %137, %139, !dbg !19
  %141 = fcmp uno <2 x float> %137, zeroinitializer, !dbg !23
  %142 = or <2 x i1> %140, %141, !dbg !24
  %143 = select <2 x i1> %142, <2 x float> %137, <2 x float> %139, !dbg !25
  %144 = extractelement <2 x float> %143, i64 1, !dbg !26
  %145 = fcmp ogt float %144, %117, !dbg !29
  %146 = fcmp uno float %144, 0.000000e+00, !dbg !26
  %147 = or i1 %145, %146, !dbg !30
  %148 = insertelement <2 x i1> %120, i1 %147, i64 1, !dbg !17
  %149 = insertelement <2 x float> <float 0xFFF0000000000000, float poison>, float %117, i64 1, !dbg !17
  %150 = select <2 x i1> %148, <2 x float> %143, <2 x float> %149, !dbg !17
  %151 = shufflevector <2 x float> %150, <2 x float> <float poison, float 0.000000e+00>, <2 x i32> <i32 1, i32 3>, !dbg !29
  %152 = fcmp ogt <2 x float> %151, %150, !dbg !29
  %153 = fcmp uno <2 x float> %151, %150, !dbg !29
  %shift = shufflevector <2 x i1> %153, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !30
  %154 = or <2 x i1> %152, %shift, !dbg !30
  %155 = extractelement <2 x i1> %154, i64 0, !dbg !30
  %156 = extractelement <2 x float> %150, i64 0, !dbg !31
  %157 = extractelement <2 x float> %150, i64 1, !dbg !31
  %158 = select i1 %155, float %157, float %156, !dbg !31
  %159 = bitcast float %158 to i32, !dbg !32
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 16, i32 31), !dbg !32
  %161 = bitcast i32 %160 to float, !dbg !32
  %162 = fcmp ogt float %158, %161, !dbg !29
  %163 = fcmp uno float %158, 0.000000e+00, !dbg !26
  %164 = or i1 %163, %162, !dbg !30
  %165 = select i1 %164, float %158, float %161, !dbg !31
  %166 = bitcast float %165 to i32, !dbg !32
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 8, i32 31), !dbg !32
  %168 = bitcast i32 %167 to float, !dbg !32
  %169 = fcmp ogt float %165, %168, !dbg !29
  %170 = fcmp uno float %165, 0.000000e+00, !dbg !26
  %171 = or i1 %169, %170, !dbg !30
  %172 = select i1 %171, float %165, float %168, !dbg !31
  %173 = bitcast float %172 to i32, !dbg !32
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !32
  %175 = bitcast i32 %174 to float, !dbg !32
  %176 = fcmp ogt float %172, %175, !dbg !29
  %177 = fcmp uno float %172, 0.000000e+00, !dbg !26
  %178 = or i1 %176, %177, !dbg !30
  %179 = select i1 %178, float %172, float %175, !dbg !31
  %180 = bitcast float %179 to i32, !dbg !32
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !32
  %182 = bitcast i32 %181 to float, !dbg !32
  %183 = fcmp ogt float %179, %182, !dbg !29
  %184 = fcmp uno float %179, 0.000000e+00, !dbg !26
  %185 = or i1 %183, %184, !dbg !30
  %186 = select i1 %185, float %179, float %182, !dbg !31
  %187 = bitcast float %186 to i32, !dbg !32
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !32
  %189 = bitcast i32 %188 to float, !dbg !32
  %190 = fcmp ogt float %186, %189, !dbg !29
  %191 = fcmp uno float %186, 0.000000e+00, !dbg !26
  %192 = or i1 %190, %191, !dbg !30
  %193 = icmp eq i32 %13, 0, !dbg !32
  %194 = and i32 %118, 7, !dbg !32
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !32
  %196 = select i1 %192, i32 %187, i32 %188, !dbg !31
  %197 = insertelement <1 x i32> poison, i32 %196, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %197, i1 %193) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %198 = icmp slt i32 %12, 8, !dbg !32
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %200 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %199, i1 %198) #5, !dbg !32
  %201 = bitcast i32 %200 to float, !dbg !32
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 4, i32 31), !dbg !32
  %203 = bitcast i32 %202 to float, !dbg !32
  %204 = fcmp ogt float %201, %203, !dbg !29
  %205 = fcmp uno float %201, 0.000000e+00, !dbg !26
  %206 = or i1 %205, %204, !dbg !30
  %207 = select i1 %206, float %201, float %203, !dbg !31
  %208 = bitcast float %207 to i32, !dbg !32
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 2, i32 31), !dbg !32
  %210 = bitcast i32 %209 to float, !dbg !32
  %211 = fcmp ogt float %207, %210, !dbg !29
  %212 = fcmp uno float %207, 0.000000e+00, !dbg !26
  %213 = or i1 %211, %212, !dbg !30
  %214 = select i1 %213, float %207, float %210, !dbg !31
  %215 = bitcast float %214 to i32, !dbg !32
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !32
  %217 = bitcast i32 %216 to float, !dbg !32
  %218 = fcmp ogt float %214, %217, !dbg !29
  %219 = fcmp uno float %214, 0.000000e+00, !dbg !26
  %220 = or i1 %218, %219, !dbg !30
  %221 = and i32 %12, 7, !dbg !32
  %222 = icmp eq i32 %221, 0, !dbg !32
  %223 = and i1 %198, %222, !dbg !32
  %224 = select i1 %220, i32 %215, i32 %216, !dbg !31
  %225 = insertelement <1 x i32> poison, i32 %224, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %225, i1 %223) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %226 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !33
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !33
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !33
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !33
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !33
  %232 = bitcast i32 %228 to float, !dbg !33
  %233 = bitcast i32 %229 to float, !dbg !33
  %234 = bitcast i32 %230 to float, !dbg !33
  %235 = bitcast i32 %231 to float, !dbg !33
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float 9.000000e+00) #5, !dbg !34
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float 9.000000e+00) #5, !dbg !34
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float 9.000000e+00) #5, !dbg !34
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float 9.000000e+00) #5, !dbg !34
  %240 = fsub float %236, %226, !dbg !35
  %241 = fsub float %237, %226, !dbg !35
  %242 = fsub float %238, %226, !dbg !35
  %243 = fsub float %239, %226, !dbg !35
  %244 = fmul float %240, 0x3FF7154760000000, !dbg !36
  %245 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %244) #5, !dbg !36
  %246 = fmul float %241, 0x3FF7154760000000, !dbg !36
  %247 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %246) #5, !dbg !36
  %248 = fmul float %242, 0x3FF7154760000000, !dbg !36
  %249 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %248) #5, !dbg !36
  %250 = fmul float %243, 0x3FF7154760000000, !dbg !36
  %251 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %250) #5, !dbg !36
  %252 = fadd float %249, 0.000000e+00, !dbg !37
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !33
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !33
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !33
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !33
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !33
  %258 = bitcast i32 %254 to float, !dbg !33
  %259 = bitcast i32 %255 to float, !dbg !33
  %260 = bitcast i32 %256 to float, !dbg !33
  %261 = bitcast i32 %257 to float, !dbg !33
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %258, float 9.000000e+00) #5, !dbg !34
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float 9.000000e+00) #5, !dbg !34
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %260, float 9.000000e+00) #5, !dbg !34
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %261, float 9.000000e+00) #5, !dbg !34
  %266 = fsub float %262, %226, !dbg !35
  %267 = fsub float %263, %226, !dbg !35
  %268 = fsub float %264, %226, !dbg !35
  %269 = fsub float %265, %226, !dbg !35
  %270 = fmul float %266, 0x3FF7154760000000, !dbg !36
  %271 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %270) #5, !dbg !36
  %272 = fmul float %267, 0x3FF7154760000000, !dbg !36
  %273 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %272) #5, !dbg !36
  %274 = fmul float %268, 0x3FF7154760000000, !dbg !36
  %275 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %274) #5, !dbg !36
  %276 = fmul float %269, 0x3FF7154760000000, !dbg !36
  %277 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %276) #5, !dbg !36
  %278 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !33
  %279 = extractvalue { i32, i32, i32, i32 } %278, 0, !dbg !33
  %280 = extractvalue { i32, i32, i32, i32 } %278, 1, !dbg !33
  %281 = extractvalue { i32, i32, i32, i32 } %278, 2, !dbg !33
  %282 = extractvalue { i32, i32, i32, i32 } %278, 3, !dbg !33
  %283 = bitcast i32 %279 to float, !dbg !33
  %284 = bitcast i32 %280 to float, !dbg !33
  %285 = bitcast i32 %281 to float, !dbg !33
  %286 = bitcast i32 %282 to float, !dbg !33
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %283, float 9.000000e+00) #5, !dbg !34
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %284, float 9.000000e+00) #5, !dbg !34
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float 9.000000e+00) #5, !dbg !34
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float 9.000000e+00) #5, !dbg !34
  %291 = fsub float %287, %226, !dbg !35
  %292 = fsub float %288, %226, !dbg !35
  %293 = fsub float %289, %226, !dbg !35
  %294 = fsub float %290, %226, !dbg !35
  %295 = fmul float %291, 0x3FF7154760000000, !dbg !36
  %296 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %295) #5, !dbg !36
  %297 = fmul float %292, 0x3FF7154760000000, !dbg !36
  %298 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %297) #5, !dbg !36
  %299 = fmul float %293, 0x3FF7154760000000, !dbg !36
  %300 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %299) #5, !dbg !36
  %301 = fmul float %294, 0x3FF7154760000000, !dbg !36
  %302 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %301) #5, !dbg !36
  %303 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !33
  %304 = extractvalue { i32, i32, i32, i32 } %303, 0, !dbg !33
  %305 = extractvalue { i32, i32, i32, i32 } %303, 1, !dbg !33
  %306 = extractvalue { i32, i32, i32, i32 } %303, 2, !dbg !33
  %307 = extractvalue { i32, i32, i32, i32 } %303, 3, !dbg !33
  %308 = bitcast i32 %304 to float, !dbg !33
  %309 = bitcast i32 %305 to float, !dbg !33
  %310 = bitcast i32 %306 to float, !dbg !33
  %311 = bitcast i32 %307 to float, !dbg !33
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float 9.000000e+00) #5, !dbg !34
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float 9.000000e+00) #5, !dbg !34
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float 9.000000e+00) #5, !dbg !34
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float 9.000000e+00) #5, !dbg !34
  %316 = fsub float %312, %226, !dbg !35
  %317 = fsub float %313, %226, !dbg !35
  %318 = fsub float %314, %226, !dbg !35
  %319 = fsub float %315, %226, !dbg !35
  %320 = fmul float %316, 0x3FF7154760000000, !dbg !36
  %321 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %320) #5, !dbg !36
  %322 = fmul float %317, 0x3FF7154760000000, !dbg !36
  %323 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %322) #5, !dbg !36
  %324 = fmul float %318, 0x3FF7154760000000, !dbg !36
  %325 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %324) #5, !dbg !36
  %326 = fmul float %319, 0x3FF7154760000000, !dbg !36
  %327 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %326) #5, !dbg !36
  %328 = insertelement <2 x float> poison, float %245, i64 0, !dbg !37
  %329 = insertelement <2 x float> %328, float %247, i64 1, !dbg !37
  %330 = fadd <2 x float> %329, zeroinitializer, !dbg !37
  %331 = insertelement <2 x float> poison, float %271, i64 0, !dbg !37
  %332 = insertelement <2 x float> %331, float %273, i64 1, !dbg !37
  %333 = fadd <2 x float> %330, %332, !dbg !37
  %334 = insertelement <2 x float> poison, float %296, i64 0, !dbg !37
  %335 = insertelement <2 x float> %334, float %298, i64 1, !dbg !37
  %336 = fadd <2 x float> %333, %335, !dbg !37
  %337 = insertelement <2 x float> poison, float %321, i64 0, !dbg !37
  %338 = insertelement <2 x float> %337, float %323, i64 1, !dbg !37
  %339 = fadd <2 x float> %336, %338, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %shift26 = shufflevector <2 x float> %339, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !42
  %340 = fadd <2 x float> %shift26, %339, !dbg !42
  %341 = insertelement <2 x float> poison, float %251, i64 0, !dbg !37
  %342 = insertelement <2 x float> %341, float %252, i64 1, !dbg !37
  %343 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %275, i64 1, !dbg !37
  %344 = fadd <2 x float> %342, %343, !dbg !37
  %345 = insertelement <2 x float> poison, float %277, i64 0, !dbg !37
  %346 = insertelement <2 x float> %345, float %300, i64 1, !dbg !37
  %347 = fadd <2 x float> %344, %346, !dbg !37
  %348 = insertelement <2 x float> poison, float %302, i64 0, !dbg !37
  %349 = insertelement <2 x float> %348, float %325, i64 1, !dbg !37
  %350 = fadd <2 x float> %347, %349, !dbg !37
  %351 = insertelement <2 x float> %340, float %327, i64 0, !dbg !37
  %352 = fadd <2 x float> %350, %351, !dbg !37
  %shift27 = shufflevector <2 x float> %352, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !42
  %353 = fadd <2 x float> %352, %shift27, !dbg !42
  %354 = extractelement <2 x float> %353, i64 0, !dbg !42
  %355 = select i1 %11, float %354, float 0.000000e+00, !dbg !42
  %356 = bitcast float %355 to i32, !dbg !38
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 16, i32 31), !dbg !38
  %358 = bitcast i32 %357 to float, !dbg !38
  %359 = fadd float %355, %358, !dbg !42
  %360 = bitcast float %359 to i32, !dbg !38
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 8, i32 31), !dbg !38
  %362 = bitcast i32 %361 to float, !dbg !38
  %363 = fadd float %359, %362, !dbg !42
  %364 = bitcast float %363 to i32, !dbg !38
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 4, i32 31), !dbg !38
  %366 = bitcast i32 %365 to float, !dbg !38
  %367 = fadd float %363, %366, !dbg !42
  %368 = bitcast float %367 to i32, !dbg !38
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 2, i32 31), !dbg !38
  %370 = bitcast i32 %369 to float, !dbg !38
  %371 = fadd float %367, %370, !dbg !42
  %372 = bitcast float %371 to i32, !dbg !38
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 1, i32 31), !dbg !38
  %374 = bitcast i32 %373 to float, !dbg !38
  %375 = fadd float %371, %374, !dbg !42
  %376 = bitcast float %375 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %376, i1 %193) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %377 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %199, i1 %198) #5, !dbg !38
  %378 = bitcast i32 %377 to float, !dbg !38
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 4, i32 31), !dbg !38
  %380 = bitcast i32 %379 to float, !dbg !38
  %381 = fadd float %378, %380, !dbg !42
  %382 = bitcast float %381 to i32, !dbg !38
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 2, i32 31), !dbg !38
  %384 = bitcast i32 %383 to float, !dbg !38
  %385 = fadd float %381, %384, !dbg !42
  %386 = bitcast float %385 to i32, !dbg !38
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 1, i32 31), !dbg !38
  %388 = bitcast i32 %387 to float, !dbg !38
  %389 = fadd float %385, %388, !dbg !42
  %390 = bitcast float %389 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %390, i1 %223) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %391 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %.frozen = freeze i32 %10, !dbg !44
  %392 = sdiv i32 %.frozen, 512, !dbg !44
  %393 = mul i32 %392, 512, !dbg !45
  %.decomposed = sub i32 %.frozen, %393, !dbg !45
  %394 = sext i32 %.decomposed to i64, !dbg !46
  %395 = getelementptr float, ptr addrspace(1) %3, i64 %394, !dbg !46
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %395, i1 %11) #5, !dbg !47
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %395, i1 %11) #5, !dbg !47
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %395, i1 %11) #5, !dbg !47
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %395, i1 %11) #5, !dbg !47
  %400 = bitcast i32 %399 to float, !dbg !47
  %401 = getelementptr float, ptr addrspace(1) %4, i64 %394, !dbg !48
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 %11) #5, !dbg !49
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 %11) #5, !dbg !49
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 %11) #5, !dbg !49
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 %11) #5, !dbg !49
  %406 = bitcast i32 %405 to float, !dbg !49
  %407 = getelementptr float, ptr addrspace(1) %5, i64 %394, !dbg !50
  %408 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 %11) #5, !dbg !51
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 %11) #5, !dbg !51
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 %11) #5, !dbg !51
  %411 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 %11) #5, !dbg !51
  %412 = bitcast i32 %411 to float, !dbg !51
  %413 = getelementptr float, ptr addrspace(1) %6, i64 %394, !dbg !52
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 %11) #5, !dbg !53
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 %11) #5, !dbg !53
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 %11) #5, !dbg !53
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 %11) #5, !dbg !53
  %418 = bitcast i32 %417 to float, !dbg !53
  %419 = shl nsw i32 %.decomposed, 12, !dbg !54
  %420 = shl i32 %392, 22, !dbg !55
  %421 = fadd float %406, 0x3EE4F8B580000000, !dbg !56
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !57
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !57
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !57
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i13 = icmp eq i32 %428, 0, !dbg !57
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !57
  %.not1.i16 = icmp eq i32 %429, 0, !dbg !57
  br i1 %.not.i13, label %435, label %430, !dbg !57

430:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %433, label %431, !dbg !57

431:                                              ; preds = %430
  %432 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %421) #5, !dbg !57
  br label %__nv_sqrtf.exit17, !dbg !57

433:                                              ; preds = %430
  %434 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %421) #5, !dbg !57
  br label %__nv_sqrtf.exit17, !dbg !57

435:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %438, label %436, !dbg !57

436:                                              ; preds = %435
  %437 = tail call float @llvm.nvvm.sqrt.rn.f(float %421) #5, !dbg !57
  br label %__nv_sqrtf.exit17, !dbg !57

438:                                              ; preds = %435
  %439 = tail call float @llvm.nvvm.sqrt.approx.f(float %421) #5, !dbg !57
  br label %__nv_sqrtf.exit17, !dbg !57

__nv_sqrtf.exit17:                                ; preds = %431, %433, %436, %438
  %.0.i15 = phi float [ %432, %431 ], [ %434, %433 ], [ %437, %436 ], [ %439, %438 ], !dbg !57
  %440 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #5, !dbg !58
  %441 = add i32 %420, %419
  br label %442, !dbg !59

442:                                              ; preds = %__nv_sqrtf.exit17, %442
  %indvars.iv = phi i64 [ 0, %__nv_sqrtf.exit17 ], [ %indvars.iv.next, %442 ]
  %443 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass = or i32 %17, %443
  %444 = sext i32 %.reass to i64, !dbg !60
  %445 = getelementptr float, ptr addrspace(1) %0, i64 %444, !dbg !60
  %446 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %445, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !61
  %447 = extractvalue { i32, i32, i32, i32 } %446, 0, !dbg !61
  %448 = extractvalue { i32, i32, i32, i32 } %446, 1, !dbg !61
  %449 = extractvalue { i32, i32, i32, i32 } %446, 2, !dbg !61
  %450 = extractvalue { i32, i32, i32, i32 } %446, 3, !dbg !61
  %451 = bitcast i32 %447 to float, !dbg !61
  %452 = bitcast i32 %448 to float, !dbg !61
  %453 = bitcast i32 %449 to float, !dbg !61
  %454 = bitcast i32 %450 to float, !dbg !61
  %455 = trunc i64 %indvars.iv to i32, !dbg !62
  %456 = or disjoint i32 %15, %455, !dbg !62
  %457 = add i32 %441, %456, !dbg !62
  %458 = sext i32 %457 to i64, !dbg !63
  %459 = getelementptr float, ptr addrspace(1) %1, i64 %458, !dbg !63
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %459, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !64
  %461 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !64
  %462 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !64
  %463 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !64
  %464 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !64
  %465 = bitcast i32 %461 to float, !dbg !64
  %466 = bitcast i32 %462 to float, !dbg !64
  %467 = bitcast i32 %463 to float, !dbg !64
  %468 = bitcast i32 %464 to float, !dbg !64
  %469 = getelementptr float, ptr addrspace(1) %2, i64 %444, !dbg !65
  %470 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %469, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !66
  %471 = extractvalue { i32, i32, i32, i32 } %470, 0, !dbg !66
  %472 = extractvalue { i32, i32, i32, i32 } %470, 1, !dbg !66
  %473 = extractvalue { i32, i32, i32, i32 } %470, 2, !dbg !66
  %474 = extractvalue { i32, i32, i32, i32 } %470, 3, !dbg !66
  %475 = bitcast i32 %471 to float, !dbg !66
  %476 = bitcast i32 %472 to float, !dbg !66
  %477 = bitcast i32 %473 to float, !dbg !66
  %478 = bitcast i32 %474 to float, !dbg !66
  %479 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %451, float 9.000000e+00) #5, !dbg !67
  %480 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %452, float 9.000000e+00) #5, !dbg !67
  %481 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %453, float 9.000000e+00) #5, !dbg !67
  %482 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %454, float 9.000000e+00) #5, !dbg !67
  %483 = fsub float %479, %226, !dbg !68
  %484 = fsub float %480, %226, !dbg !68
  %485 = fsub float %481, %226, !dbg !68
  %486 = fsub float %482, %226, !dbg !68
  %487 = fmul float %483, 0x3FF7154760000000, !dbg !69
  %488 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %487) #5, !dbg !69
  %489 = fmul float %484, 0x3FF7154760000000, !dbg !69
  %490 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %489) #5, !dbg !69
  %491 = fmul float %485, 0x3FF7154760000000, !dbg !69
  %492 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %491) #5, !dbg !69
  %493 = fmul float %486, 0x3FF7154760000000, !dbg !69
  %494 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %493) #5, !dbg !69
  %495 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float %391) #5, !dbg !70
  %496 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %490, float %391) #5, !dbg !70
  %497 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %492, float %391) #5, !dbg !70
  %498 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %494, float %391) #5, !dbg !70
  %499 = fsub float %475, %400, !dbg !71
  %500 = fsub float %476, %400, !dbg !71
  %501 = fsub float %477, %400, !dbg !71
  %502 = fsub float %478, %400, !dbg !71
  %503 = fmul float %440, %499, !dbg !72
  %504 = fmul float %440, %500, !dbg !72
  %505 = fmul float %440, %501, !dbg !72
  %506 = fmul float %440, %502, !dbg !72
  %507 = fmul float %503, %412, !dbg !73
  %508 = fmul float %504, %412, !dbg !73
  %509 = fmul float %505, %412, !dbg !73
  %510 = fmul float %506, %412, !dbg !73
  %511 = fadd float %507, %418, !dbg !74
  %512 = fadd float %508, %418, !dbg !74
  %513 = fadd float %509, %418, !dbg !74
  %514 = fadd float %510, %418, !dbg !74
  %515 = fmul float %511, %495, !dbg !75
  %516 = fmul float %512, %496, !dbg !75
  %517 = fmul float %513, %497, !dbg !75
  %518 = fmul float %514, %498, !dbg !75
  %519 = fadd float %515, %465, !dbg !76
  %520 = fadd float %516, %466, !dbg !76
  %521 = fadd float %517, %467, !dbg !76
  %522 = fadd float %518, %468, !dbg !76
  %523 = bitcast float %495 to i32, !dbg !77
  %524 = bitcast float %496 to i32, !dbg !77
  %525 = bitcast float %497 to i32, !dbg !77
  %526 = bitcast float %498 to i32, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %523, i32 %524, i32 %525, i32 %526, ptr addrspace(1) %445, i1 %11) #5, !dbg !77
  %527 = getelementptr float, ptr addrspace(1) %7, i64 %444, !dbg !78
  %528 = bitcast float %519 to i32, !dbg !79
  %529 = bitcast float %520 to i32, !dbg !79
  %530 = bitcast float %521 to i32, !dbg !79
  %531 = bitcast float %522 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %528, i32 %529, i32 %530, i32 %531, ptr addrspace(1) %527, i1 %11) #5, !dbg !79
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1024, !dbg !59
  %532 = icmp samesign ult i64 %indvars.iv, 3072, !dbg !59
  br i1 %532, label %442, label %533, !dbg !59

533:                                              ; preds = %442
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cszriwhcgvxrnzqvsfzsuf33ncjee7uvrsvnvxtsiubleesc2ur6.py", directory: "inductor_cache/sz")
!4 = !{ptr @triton_red_fused__softmax_add_4, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__softmax_add_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__softmax_add_4", linkageName: "triton_red_fused__softmax_add_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 48, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 53, scope: !7)
!16 = !DILocation(line: 34, column: 22, scope: !7)
!17 = !DILocation(line: 37, column: 46, scope: !7)
!18 = !DILocation(line: 32, column: 43, scope: !7)
!19 = !DILocation(line: 118, column: 15, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 36, column: 45, scope: !7)
!23 = !DILocation(line: 120, column: 21, scope: !20, inlinedAt: !22)
!24 = !DILocation(line: 120, column: 16, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 121, column: 29, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 120, column: 21, scope: !27, inlinedAt: !28)
!27 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!28 = !DILocation(line: 38, column: 38, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 120, column: 16, scope: !27, inlinedAt: !28)
!31 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !28)
!32 = !DILocation(line: 131, column: 29, scope: !20, inlinedAt: !28)
!33 = !DILocation(line: 44, column: 53, scope: !7)
!34 = !DILocation(line: 46, column: 22, scope: !7)
!35 = !DILocation(line: 47, column: 22, scope: !7)
!36 = !DILocation(line: 48, column: 28, scope: !7)
!37 = !DILocation(line: 50, column: 25, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = !DILocation(line: 52, column: 27, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!44 = !DILocation(line: 54, column: 19, scope: !7)
!45 = !DILocation(line: 53, column: 19, scope: !7)
!46 = !DILocation(line: 55, column: 31, scope: !7)
!47 = !DILocation(line: 55, column: 36, scope: !7)
!48 = !DILocation(line: 56, column: 31, scope: !7)
!49 = !DILocation(line: 56, column: 36, scope: !7)
!50 = !DILocation(line: 57, column: 31, scope: !7)
!51 = !DILocation(line: 57, column: 36, scope: !7)
!52 = !DILocation(line: 58, column: 31, scope: !7)
!53 = !DILocation(line: 58, column: 36, scope: !7)
!54 = !DILocation(line: 64, column: 45, scope: !7)
!55 = !DILocation(line: 64, column: 58, scope: !7)
!56 = !DILocation(line: 73, column: 24, scope: !7)
!57 = !DILocation(line: 74, column: 31, scope: !7)
!58 = !DILocation(line: 76, column: 24, scope: !7)
!59 = !DILocation(line: 59, column: 36, scope: !7)
!60 = !DILocation(line: 63, column: 39, scope: !7)
!61 = !DILocation(line: 63, column: 54, scope: !7)
!62 = !DILocation(line: 64, column: 50, scope: !7)
!63 = !DILocation(line: 64, column: 35, scope: !7)
!64 = !DILocation(line: 64, column: 63, scope: !7)
!65 = !DILocation(line: 65, column: 35, scope: !7)
!66 = !DILocation(line: 65, column: 50, scope: !7)
!67 = !DILocation(line: 67, column: 24, scope: !7)
!68 = !DILocation(line: 68, column: 24, scope: !7)
!69 = !DILocation(line: 69, column: 28, scope: !7)
!70 = !DILocation(line: 70, column: 24, scope: !7)
!71 = !DILocation(line: 71, column: 24, scope: !7)
!72 = !DILocation(line: 79, column: 24, scope: !7)
!73 = !DILocation(line: 80, column: 24, scope: !7)
!74 = !DILocation(line: 81, column: 24, scope: !7)
!75 = !DILocation(line: 82, column: 24, scope: !7)
!76 = !DILocation(line: 83, column: 24, scope: !7)
!77 = !DILocation(line: 84, column: 54, scope: !7)
!78 = !DILocation(line: 85, column: 29, scope: !7)
!79 = !DILocation(line: 85, column: 51, scope: !7)
!80 = !DILocation(line: 59, column: 4, scope: !7)
