; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %19 = shl i32 %18, 6, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = lshr i32 %20, 4, !dbg !12
  %22 = and i32 %21, 15, !dbg !12
  %23 = or disjoint i32 %22, 16, !dbg !12
  %24 = or disjoint i32 %22, 32, !dbg !12
  %25 = or disjoint i32 %22, 48, !dbg !12
  %26 = shl i32 %20, 2, !dbg !12
  %27 = and i32 %26, 60, !dbg !12
  %28 = or disjoint i32 %19, %22, !dbg !13
  %29 = or disjoint i32 %19, %23, !dbg !13
  %30 = or disjoint i32 %19, %24, !dbg !13
  %31 = or disjoint i32 %19, %25, !dbg !13
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %33 = shl i32 %32, 6, !dbg !15
  %34 = or disjoint i32 %33, %27, !dbg !16
  %35 = icmp slt i32 %34, 512, !dbg !17
  %36 = sdiv i32 %28, 4096, !dbg !18
  %37 = sdiv i32 %29, 4096, !dbg !18
  %38 = sdiv i32 %30, 4096, !dbg !18
  %39 = sdiv i32 %31, 4096, !dbg !18
  %40 = shl i32 %28, 9, !dbg !19
  %41 = shl i32 %29, 9, !dbg !19
  %42 = shl i32 %30, 9, !dbg !19
  %43 = shl i32 %31, 9, !dbg !19
  %44 = add i32 %34, %40, !dbg !20
  %45 = add i32 %34, %41, !dbg !20
  %46 = add i32 %34, %42, !dbg !20
  %47 = add i32 %34, %43, !dbg !20
  %48 = sext i32 %44 to i64, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !21
  %50 = sext i32 %45 to i64, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !21
  %52 = sext i32 %46 to i64, !dbg !21
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !21
  %54 = sext i32 %47 to i64, !dbg !21
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !21
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %35) #4, !dbg !22
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %35) #4, !dbg !22
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %35) #4, !dbg !22
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %35) #4, !dbg !22
  %60 = sext i32 %34 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !23
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %35) #4, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !25
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %35) #4, !dbg !26
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %35) #4, !dbg !26
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %35) #4, !dbg !26
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %35) #4, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !27
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %35) #4, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !29
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %35) #4, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %5, i64 %60, !dbg !31
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %35) #4, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !32
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !32
  %81 = bitcast i32 %77 to float, !dbg !32
  %82 = bitcast i32 %78 to float, !dbg !32
  %83 = bitcast i32 %79 to float, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = getelementptr float, ptr addrspace(1) %6, i64 %60, !dbg !33
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %35) #4, !dbg !34
  %87 = getelementptr float, ptr addrspace(1) %7, i64 %60, !dbg !35
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 %35) #4, !dbg !36
  %89 = getelementptr float, ptr addrspace(1) %8, i64 %60, !dbg !37
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 %35) #4, !dbg !38
  %91 = getelementptr float, ptr addrspace(1) %9, i64 %60, !dbg !39
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 %35) #4, !dbg !40
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !40
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !40
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !40
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !40
  %97 = bitcast i32 %93 to float, !dbg !40
  %98 = bitcast i32 %94 to float, !dbg !40
  %99 = bitcast i32 %95 to float, !dbg !40
  %100 = bitcast i32 %96 to float, !dbg !40
  %101 = getelementptr float, ptr addrspace(1) %10, i64 %60, !dbg !41
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %35) #4, !dbg !42
  %103 = getelementptr float, ptr addrspace(1) %11, i64 %60, !dbg !43
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %35) #4, !dbg !44
  %105 = shl nsw i32 %36, 9, !dbg !45
  %106 = shl nsw i32 %37, 9, !dbg !45
  %107 = shl nsw i32 %38, 9, !dbg !45
  %108 = shl nsw i32 %39, 9, !dbg !45
  %109 = add i32 %105, %34, !dbg !46
  %110 = add i32 %106, %34, !dbg !46
  %111 = add i32 %107, %34, !dbg !46
  %112 = add i32 %108, %34, !dbg !46
  %113 = sext i32 %109 to i64, !dbg !47
  %114 = getelementptr float, ptr addrspace(1) %12, i64 %113, !dbg !47
  %115 = sext i32 %110 to i64, !dbg !47
  %116 = getelementptr float, ptr addrspace(1) %12, i64 %115, !dbg !47
  %117 = sext i32 %111 to i64, !dbg !47
  %118 = getelementptr float, ptr addrspace(1) %12, i64 %117, !dbg !47
  %119 = sext i32 %112 to i64, !dbg !47
  %120 = getelementptr float, ptr addrspace(1) %12, i64 %119, !dbg !47
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %35) #4, !dbg !48
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %35) #4, !dbg !48
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %35) #4, !dbg !48
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %120, i1 %35) #4, !dbg !48
  %125 = getelementptr float, ptr addrspace(1) %13, i64 %48, !dbg !49
  %126 = getelementptr float, ptr addrspace(1) %13, i64 %50, !dbg !49
  %127 = getelementptr float, ptr addrspace(1) %13, i64 %52, !dbg !49
  %128 = getelementptr float, ptr addrspace(1) %13, i64 %54, !dbg !49
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %35) #4, !dbg !50
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %35) #4, !dbg !50
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %35) #4, !dbg !50
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 %35) #4, !dbg !50
  %133 = fadd float %81, 0x3EE4F8B580000000, !dbg !51
  %134 = fadd float %82, 0x3EE4F8B580000000, !dbg !51
  %135 = fadd float %83, 0x3EE4F8B580000000, !dbg !51
  %136 = fadd float %84, 0x3EE4F8B580000000, !dbg !51
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i = icmp eq i32 %137, 0, !dbg !52
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i = icmp eq i32 %138, 0, !dbg !52
  br i1 %.not.i, label %144, label %139, !dbg !52

139:                                              ; preds = %17
  br i1 %.not1.i, label %142, label %140, !dbg !52

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

144:                                              ; preds = %17
  br i1 %.not1.i, label %147, label %145, !dbg !52

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #4, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

__nv_sqrtf.exit:                                  ; preds = %140, %142, %145, %147
  %.0.i = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !52
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i31 = icmp eq i32 %149, 0, !dbg !52
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i34 = icmp eq i32 %150, 0, !dbg !52
  br i1 %.not.i31, label %156, label %151, !dbg !52

151:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %154, label %152, !dbg !52

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #4, !dbg !52
  br label %__nv_sqrtf.exit35, !dbg !52

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #4, !dbg !52
  br label %__nv_sqrtf.exit35, !dbg !52

156:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %159, label %157, !dbg !52

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #4, !dbg !52
  br label %__nv_sqrtf.exit35, !dbg !52

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #4, !dbg !52
  br label %__nv_sqrtf.exit35, !dbg !52

__nv_sqrtf.exit35:                                ; preds = %152, %154, %157, %159
  %.0.i33 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !52
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i36 = icmp eq i32 %161, 0, !dbg !52
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i39 = icmp eq i32 %162, 0, !dbg !52
  br i1 %.not.i36, label %168, label %163, !dbg !52

163:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %166, label %164, !dbg !52

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #4, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #4, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

168:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %171, label %169, !dbg !52

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #4, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #4, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

__nv_sqrtf.exit40:                                ; preds = %164, %166, %169, %171
  %.0.i38 = phi float [ %165, %164 ], [ %167, %166 ], [ %170, %169 ], [ %172, %171 ], !dbg !52
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !52
  %.not.i41 = icmp eq i32 %173, 0, !dbg !52
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !52
  %.not1.i44 = icmp eq i32 %174, 0, !dbg !52
  br i1 %.not.i41, label %180, label %175, !dbg !52

175:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %178, label %176, !dbg !52

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #4, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #4, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

180:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %183, label %181, !dbg !52

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #4, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #4, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

__nv_sqrtf.exit45:                                ; preds = %176, %178, %181, %183
  %.0.i43 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !52
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !53
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !53
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !53
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !53
  %189 = fadd float %97, 0x3EE4F8B580000000, !dbg !54
  %190 = fadd float %98, 0x3EE4F8B580000000, !dbg !54
  %191 = fadd float %99, 0x3EE4F8B580000000, !dbg !54
  %192 = fadd float %100, 0x3EE4F8B580000000, !dbg !54
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i46 = icmp eq i32 %193, 0, !dbg !55
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i49 = icmp eq i32 %194, 0, !dbg !55
  br i1 %.not.i46, label %200, label %195, !dbg !55

195:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %198, label %196, !dbg !55

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %189) #4, !dbg !55
  br label %__nv_sqrtf.exit50, !dbg !55

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %189) #4, !dbg !55
  br label %__nv_sqrtf.exit50, !dbg !55

200:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %203, label %201, !dbg !55

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %189) #4, !dbg !55
  br label %__nv_sqrtf.exit50, !dbg !55

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %189) #4, !dbg !55
  br label %__nv_sqrtf.exit50, !dbg !55

__nv_sqrtf.exit50:                                ; preds = %196, %198, %201, %203
  %.0.i48 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !55
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i51 = icmp eq i32 %205, 0, !dbg !55
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i54 = icmp eq i32 %206, 0, !dbg !55
  br i1 %.not.i51, label %212, label %207, !dbg !55

207:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %210, label %208, !dbg !55

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %190) #4, !dbg !55
  br label %__nv_sqrtf.exit55, !dbg !55

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %190) #4, !dbg !55
  br label %__nv_sqrtf.exit55, !dbg !55

212:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %215, label %213, !dbg !55

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %190) #4, !dbg !55
  br label %__nv_sqrtf.exit55, !dbg !55

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %190) #4, !dbg !55
  br label %__nv_sqrtf.exit55, !dbg !55

__nv_sqrtf.exit55:                                ; preds = %208, %210, %213, %215
  %.0.i53 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !55
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i56 = icmp eq i32 %217, 0, !dbg !55
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i59 = icmp eq i32 %218, 0, !dbg !55
  br i1 %.not.i56, label %224, label %219, !dbg !55

219:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %222, label %220, !dbg !55

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %191) #4, !dbg !55
  br label %__nv_sqrtf.exit60, !dbg !55

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %191) #4, !dbg !55
  br label %__nv_sqrtf.exit60, !dbg !55

224:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %227, label %225, !dbg !55

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %191) #4, !dbg !55
  br label %__nv_sqrtf.exit60, !dbg !55

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %191) #4, !dbg !55
  br label %__nv_sqrtf.exit60, !dbg !55

__nv_sqrtf.exit60:                                ; preds = %220, %222, %225, %227
  %.0.i58 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !55
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !55
  %.not.i61 = icmp eq i32 %229, 0, !dbg !55
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !55
  %.not1.i64 = icmp eq i32 %230, 0, !dbg !55
  br i1 %.not.i61, label %236, label %231, !dbg !55

231:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %234, label %232, !dbg !55

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %192) #4, !dbg !55
  br label %__nv_sqrtf.exit65, !dbg !55

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %192) #4, !dbg !55
  br label %__nv_sqrtf.exit65, !dbg !55

236:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %239, label %237, !dbg !55

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %192) #4, !dbg !55
  br label %__nv_sqrtf.exit65, !dbg !55

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %192) #4, !dbg !55
  br label %__nv_sqrtf.exit65, !dbg !55

__nv_sqrtf.exit65:                                ; preds = %232, %234, %237, %239
  %.0.i63 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !55
  %241 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !26
  %242 = bitcast i32 %241 to float, !dbg !26
  %243 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !28
  %244 = bitcast i32 %243 to float, !dbg !28
  %245 = fadd float %242, %244, !dbg !56
  %246 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !38
  %247 = bitcast i32 %246 to float, !dbg !38
  %248 = fsub float %245, %247, !dbg !57
  %249 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !26
  %250 = bitcast i32 %249 to float, !dbg !26
  %251 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !28
  %252 = bitcast i32 %251 to float, !dbg !28
  %253 = fadd float %250, %252, !dbg !56
  %254 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !38
  %255 = bitcast i32 %254 to float, !dbg !38
  %256 = fsub float %253, %255, !dbg !57
  %257 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !26
  %258 = bitcast i32 %257 to float, !dbg !26
  %259 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !28
  %260 = bitcast i32 %259 to float, !dbg !28
  %261 = fadd float %258, %260, !dbg !56
  %262 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !38
  %263 = bitcast i32 %262 to float, !dbg !38
  %264 = fsub float %261, %263, !dbg !57
  %265 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !26
  %266 = bitcast i32 %265 to float, !dbg !26
  %267 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !28
  %268 = bitcast i32 %267 to float, !dbg !28
  %269 = fadd float %266, %268, !dbg !56
  %270 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !38
  %271 = bitcast i32 %270 to float, !dbg !38
  %272 = fsub float %269, %271, !dbg !57
  %273 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !26
  %274 = bitcast i32 %273 to float, !dbg !26
  %275 = fadd float %274, %244, !dbg !56
  %276 = fsub float %275, %247, !dbg !57
  %277 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !26
  %278 = bitcast i32 %277 to float, !dbg !26
  %279 = fadd float %278, %252, !dbg !56
  %280 = fsub float %279, %255, !dbg !57
  %281 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !26
  %282 = bitcast i32 %281 to float, !dbg !26
  %283 = fadd float %282, %260, !dbg !56
  %284 = fsub float %283, %263, !dbg !57
  %285 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !26
  %286 = bitcast i32 %285 to float, !dbg !26
  %287 = fadd float %286, %268, !dbg !56
  %288 = fsub float %287, %271, !dbg !57
  %289 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !26
  %290 = bitcast i32 %289 to float, !dbg !26
  %291 = fadd float %290, %244, !dbg !56
  %292 = fsub float %291, %247, !dbg !57
  %293 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !26
  %294 = bitcast i32 %293 to float, !dbg !26
  %295 = fadd float %294, %252, !dbg !56
  %296 = fsub float %295, %255, !dbg !57
  %297 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !26
  %298 = bitcast i32 %297 to float, !dbg !26
  %299 = fadd float %298, %260, !dbg !56
  %300 = fsub float %299, %263, !dbg !57
  %301 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !26
  %302 = bitcast i32 %301 to float, !dbg !26
  %303 = fadd float %302, %268, !dbg !56
  %304 = fsub float %303, %271, !dbg !57
  %305 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %306 = bitcast i32 %305 to float, !dbg !26
  %307 = fadd float %306, %244, !dbg !56
  %308 = fsub float %307, %247, !dbg !57
  %309 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %310 = bitcast i32 %309 to float, !dbg !26
  %311 = fadd float %310, %252, !dbg !56
  %312 = fsub float %311, %255, !dbg !57
  %313 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %314 = bitcast i32 %313 to float, !dbg !26
  %315 = fadd float %314, %260, !dbg !56
  %316 = fsub float %315, %263, !dbg !57
  %317 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %318 = bitcast i32 %317 to float, !dbg !26
  %319 = fadd float %318, %268, !dbg !56
  %320 = fsub float %319, %271, !dbg !57
  %321 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !22
  %322 = bitcast i32 %321 to float, !dbg !22
  %323 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !24
  %324 = bitcast i32 %323 to float, !dbg !24
  %325 = fadd float %322, %324, !dbg !58
  %326 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !30
  %327 = bitcast i32 %326 to float, !dbg !30
  %328 = fsub float %325, %327, !dbg !59
  %329 = fmul float %328, %188, !dbg !60
  %330 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !34
  %331 = bitcast i32 %330 to float, !dbg !34
  %332 = fmul float %329, %331, !dbg !61
  %333 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !36
  %334 = bitcast i32 %333 to float, !dbg !36
  %335 = fadd float %332, %334, !dbg !62
  %336 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !22
  %337 = bitcast i32 %336 to float, !dbg !22
  %338 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !24
  %339 = bitcast i32 %338 to float, !dbg !24
  %340 = fadd float %337, %339, !dbg !58
  %341 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !30
  %342 = bitcast i32 %341 to float, !dbg !30
  %343 = fsub float %340, %342, !dbg !59
  %344 = fmul float %343, %187, !dbg !60
  %345 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !34
  %346 = bitcast i32 %345 to float, !dbg !34
  %347 = fmul float %344, %346, !dbg !61
  %348 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !36
  %349 = bitcast i32 %348 to float, !dbg !36
  %350 = fadd float %347, %349, !dbg !62
  %351 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !22
  %352 = bitcast i32 %351 to float, !dbg !22
  %353 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !24
  %354 = bitcast i32 %353 to float, !dbg !24
  %355 = fadd float %352, %354, !dbg !58
  %356 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !30
  %357 = bitcast i32 %356 to float, !dbg !30
  %358 = fsub float %355, %357, !dbg !59
  %359 = fmul float %358, %186, !dbg !60
  %360 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !34
  %361 = bitcast i32 %360 to float, !dbg !34
  %362 = fmul float %359, %361, !dbg !61
  %363 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !36
  %364 = bitcast i32 %363 to float, !dbg !36
  %365 = fadd float %362, %364, !dbg !62
  %366 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !22
  %367 = bitcast i32 %366 to float, !dbg !22
  %368 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !24
  %369 = bitcast i32 %368 to float, !dbg !24
  %370 = fadd float %367, %369, !dbg !58
  %371 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !30
  %372 = bitcast i32 %371 to float, !dbg !30
  %373 = fsub float %370, %372, !dbg !59
  %374 = fmul float %373, %185, !dbg !60
  %375 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !34
  %376 = bitcast i32 %375 to float, !dbg !34
  %377 = fmul float %374, %376, !dbg !61
  %378 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !36
  %379 = bitcast i32 %378 to float, !dbg !36
  %380 = fadd float %377, %379, !dbg !62
  %381 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !22
  %382 = bitcast i32 %381 to float, !dbg !22
  %383 = fadd float %382, %324, !dbg !58
  %384 = fsub float %383, %327, !dbg !59
  %385 = fmul float %384, %188, !dbg !60
  %386 = fmul float %385, %331, !dbg !61
  %387 = fadd float %386, %334, !dbg !62
  %388 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !22
  %389 = bitcast i32 %388 to float, !dbg !22
  %390 = fadd float %389, %339, !dbg !58
  %391 = fsub float %390, %342, !dbg !59
  %392 = fmul float %391, %187, !dbg !60
  %393 = fmul float %392, %346, !dbg !61
  %394 = fadd float %393, %349, !dbg !62
  %395 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !22
  %396 = bitcast i32 %395 to float, !dbg !22
  %397 = fadd float %396, %354, !dbg !58
  %398 = fsub float %397, %357, !dbg !59
  %399 = fmul float %398, %186, !dbg !60
  %400 = fmul float %399, %361, !dbg !61
  %401 = fadd float %400, %364, !dbg !62
  %402 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !22
  %403 = bitcast i32 %402 to float, !dbg !22
  %404 = fadd float %403, %369, !dbg !58
  %405 = fsub float %404, %372, !dbg !59
  %406 = fmul float %405, %185, !dbg !60
  %407 = fmul float %406, %376, !dbg !61
  %408 = fadd float %407, %379, !dbg !62
  %409 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !22
  %410 = bitcast i32 %409 to float, !dbg !22
  %411 = fadd float %410, %324, !dbg !58
  %412 = fsub float %411, %327, !dbg !59
  %413 = fmul float %412, %188, !dbg !60
  %414 = fmul float %413, %331, !dbg !61
  %415 = fadd float %414, %334, !dbg !62
  %416 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !22
  %417 = bitcast i32 %416 to float, !dbg !22
  %418 = fadd float %417, %339, !dbg !58
  %419 = fsub float %418, %342, !dbg !59
  %420 = fmul float %419, %187, !dbg !60
  %421 = fmul float %420, %346, !dbg !61
  %422 = fadd float %421, %349, !dbg !62
  %423 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !22
  %424 = bitcast i32 %423 to float, !dbg !22
  %425 = fadd float %424, %354, !dbg !58
  %426 = fsub float %425, %357, !dbg !59
  %427 = fmul float %426, %186, !dbg !60
  %428 = fmul float %427, %361, !dbg !61
  %429 = fadd float %428, %364, !dbg !62
  %430 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !22
  %431 = bitcast i32 %430 to float, !dbg !22
  %432 = fadd float %431, %369, !dbg !58
  %433 = fsub float %432, %372, !dbg !59
  %434 = fmul float %433, %185, !dbg !60
  %435 = fmul float %434, %376, !dbg !61
  %436 = fadd float %435, %379, !dbg !62
  %437 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !22
  %438 = bitcast i32 %437 to float, !dbg !22
  %439 = fadd float %438, %324, !dbg !58
  %440 = fsub float %439, %327, !dbg !59
  %441 = fmul float %440, %188, !dbg !60
  %442 = fmul float %441, %331, !dbg !61
  %443 = fadd float %442, %334, !dbg !62
  %444 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !22
  %445 = bitcast i32 %444 to float, !dbg !22
  %446 = fadd float %445, %339, !dbg !58
  %447 = fsub float %446, %342, !dbg !59
  %448 = fmul float %447, %187, !dbg !60
  %449 = fmul float %448, %346, !dbg !61
  %450 = fadd float %449, %349, !dbg !62
  %451 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !22
  %452 = bitcast i32 %451 to float, !dbg !22
  %453 = fadd float %452, %354, !dbg !58
  %454 = fsub float %453, %357, !dbg !59
  %455 = fmul float %454, %186, !dbg !60
  %456 = fmul float %455, %361, !dbg !61
  %457 = fadd float %456, %364, !dbg !62
  %458 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !22
  %459 = bitcast i32 %458 to float, !dbg !22
  %460 = fadd float %459, %369, !dbg !58
  %461 = fsub float %460, %372, !dbg !59
  %462 = fmul float %461, %185, !dbg !60
  %463 = fmul float %462, %376, !dbg !61
  %464 = fadd float %463, %379, !dbg !62
  %465 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !50
  %466 = bitcast i32 %465 to float, !dbg !50
  %467 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !50
  %468 = bitcast i32 %467 to float, !dbg !50
  %469 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !50
  %470 = bitcast i32 %469 to float, !dbg !50
  %471 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !50
  %472 = bitcast i32 %471 to float, !dbg !50
  %473 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !50
  %474 = bitcast i32 %473 to float, !dbg !50
  %475 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !50
  %476 = bitcast i32 %475 to float, !dbg !50
  %477 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !50
  %478 = bitcast i32 %477 to float, !dbg !50
  %479 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !50
  %480 = bitcast i32 %479 to float, !dbg !50
  %481 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !50
  %482 = bitcast i32 %481 to float, !dbg !50
  %483 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !50
  %484 = bitcast i32 %483 to float, !dbg !50
  %485 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !50
  %486 = bitcast i32 %485 to float, !dbg !50
  %487 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !50
  %488 = bitcast i32 %487 to float, !dbg !50
  %489 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !50
  %490 = bitcast i32 %489 to float, !dbg !50
  %491 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !50
  %492 = bitcast i32 %491 to float, !dbg !50
  %493 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !50
  %494 = bitcast i32 %493 to float, !dbg !50
  %495 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !50
  %496 = bitcast i32 %495 to float, !dbg !50
  %497 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !48
  %498 = bitcast i32 %497 to float, !dbg !48
  %499 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !48
  %500 = bitcast i32 %499 to float, !dbg !48
  %501 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !48
  %502 = bitcast i32 %501 to float, !dbg !48
  %503 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !48
  %504 = bitcast i32 %503 to float, !dbg !48
  %505 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !48
  %506 = bitcast i32 %505 to float, !dbg !48
  %507 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !48
  %508 = bitcast i32 %507 to float, !dbg !48
  %509 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !48
  %510 = bitcast i32 %509 to float, !dbg !48
  %511 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !48
  %512 = bitcast i32 %511 to float, !dbg !48
  %513 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !48
  %514 = bitcast i32 %513 to float, !dbg !48
  %515 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !48
  %516 = bitcast i32 %515 to float, !dbg !48
  %517 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !48
  %518 = bitcast i32 %517 to float, !dbg !48
  %519 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !48
  %520 = bitcast i32 %519 to float, !dbg !48
  %521 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !48
  %522 = bitcast i32 %521 to float, !dbg !48
  %523 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !48
  %524 = bitcast i32 %523 to float, !dbg !48
  %525 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !48
  %526 = bitcast i32 %525 to float, !dbg !48
  %527 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !48
  %528 = bitcast i32 %527 to float, !dbg !48
  %529 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !44
  %530 = bitcast i32 %529 to float, !dbg !44
  %531 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !44
  %532 = bitcast i32 %531 to float, !dbg !44
  %533 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !44
  %534 = bitcast i32 %533 to float, !dbg !44
  %535 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !44
  %536 = bitcast i32 %535 to float, !dbg !44
  %537 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !42
  %538 = bitcast i32 %537 to float, !dbg !42
  %539 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !42
  %540 = bitcast i32 %539 to float, !dbg !42
  %541 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !42
  %542 = bitcast i32 %541 to float, !dbg !42
  %543 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !42
  %544 = bitcast i32 %543 to float, !dbg !42
  %545 = or disjoint i32 %19, %27, !dbg !13
  %.frozen = freeze i32 %545, !dbg !18
  %546 = sdiv i32 %.frozen, 4096, !dbg !18
  %547 = mul i32 %546, 4096, !dbg !63
  %.decomposed = sub i32 %.frozen, %547, !dbg !63
  %548 = or disjoint i32 %33, %25, !dbg !16
  %549 = icmp slt i32 %548, 512, !dbg !17
  %550 = or disjoint i32 %33, %24, !dbg !16
  %551 = icmp slt i32 %550, 512, !dbg !17
  %552 = or disjoint i32 %33, %23, !dbg !16
  %553 = icmp slt i32 %552, 512, !dbg !17
  %554 = or disjoint i32 %33, %22, !dbg !16
  %555 = icmp slt i32 %554, 512, !dbg !17
  %556 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #4, !dbg !64
  %557 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #4, !dbg !64
  %558 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #4, !dbg !64
  %559 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #4, !dbg !64
  %560 = fmul float %320, %556, !dbg !65
  %561 = fmul float %316, %557, !dbg !65
  %562 = fmul float %312, %558, !dbg !65
  %563 = fmul float %308, %559, !dbg !65
  %564 = fmul float %304, %556, !dbg !65
  %565 = fmul float %300, %557, !dbg !65
  %566 = fmul float %296, %558, !dbg !65
  %567 = fmul float %292, %559, !dbg !65
  %568 = fmul float %288, %556, !dbg !65
  %569 = fmul float %284, %557, !dbg !65
  %570 = fmul float %280, %558, !dbg !65
  %571 = fmul float %276, %559, !dbg !65
  %572 = fmul float %272, %556, !dbg !65
  %573 = fmul float %264, %557, !dbg !65
  %574 = fmul float %256, %558, !dbg !65
  %575 = fmul float %248, %559, !dbg !65
  %576 = fmul float %560, %544, !dbg !66
  %577 = fmul float %561, %542, !dbg !66
  %578 = fmul float %562, %540, !dbg !66
  %579 = fmul float %563, %538, !dbg !66
  %580 = fmul float %564, %544, !dbg !66
  %581 = fmul float %565, %542, !dbg !66
  %582 = fmul float %566, %540, !dbg !66
  %583 = fmul float %567, %538, !dbg !66
  %584 = fmul float %568, %544, !dbg !66
  %585 = fmul float %569, %542, !dbg !66
  %586 = fmul float %570, %540, !dbg !66
  %587 = fmul float %571, %538, !dbg !66
  %588 = fmul float %572, %544, !dbg !66
  %589 = fmul float %573, %542, !dbg !66
  %590 = fmul float %574, %540, !dbg !66
  %591 = fmul float %575, %538, !dbg !66
  %592 = fadd float %576, %536, !dbg !67
  %593 = fadd float %577, %534, !dbg !67
  %594 = fadd float %578, %532, !dbg !67
  %595 = fadd float %579, %530, !dbg !67
  %596 = fadd float %580, %536, !dbg !67
  %597 = fadd float %581, %534, !dbg !67
  %598 = fadd float %582, %532, !dbg !67
  %599 = fadd float %583, %530, !dbg !67
  %600 = fadd float %584, %536, !dbg !67
  %601 = fadd float %585, %534, !dbg !67
  %602 = fadd float %586, %532, !dbg !67
  %603 = fadd float %587, %530, !dbg !67
  %604 = fadd float %588, %536, !dbg !67
  %605 = fadd float %589, %534, !dbg !67
  %606 = fadd float %590, %532, !dbg !67
  %607 = fadd float %591, %530, !dbg !67
  %608 = fadd float %464, %592, !dbg !68
  %609 = fadd float %457, %593, !dbg !68
  %610 = fadd float %450, %594, !dbg !68
  %611 = fadd float %443, %595, !dbg !68
  %612 = fadd float %436, %596, !dbg !68
  %613 = fadd float %429, %597, !dbg !68
  %614 = fadd float %422, %598, !dbg !68
  %615 = fadd float %415, %599, !dbg !68
  %616 = fadd float %408, %600, !dbg !68
  %617 = fadd float %401, %601, !dbg !68
  %618 = fadd float %394, %602, !dbg !68
  %619 = fadd float %387, %603, !dbg !68
  %620 = fadd float %380, %604, !dbg !68
  %621 = fadd float %365, %605, !dbg !68
  %622 = fadd float %350, %606, !dbg !68
  %623 = fadd float %335, %607, !dbg !68
  %624 = fsub float 0.000000e+00, %528, !dbg !69
  %625 = fsub float 0.000000e+00, %526, !dbg !69
  %626 = fsub float 0.000000e+00, %524, !dbg !69
  %627 = fsub float 0.000000e+00, %522, !dbg !69
  %628 = fsub float 0.000000e+00, %520, !dbg !69
  %629 = fsub float 0.000000e+00, %518, !dbg !69
  %630 = fsub float 0.000000e+00, %516, !dbg !69
  %631 = fsub float 0.000000e+00, %514, !dbg !69
  %632 = fsub float 0.000000e+00, %512, !dbg !69
  %633 = fsub float 0.000000e+00, %510, !dbg !69
  %634 = fsub float 0.000000e+00, %508, !dbg !69
  %635 = fsub float 0.000000e+00, %506, !dbg !69
  %636 = fsub float 0.000000e+00, %504, !dbg !69
  %637 = fsub float 0.000000e+00, %502, !dbg !69
  %638 = fsub float 0.000000e+00, %500, !dbg !69
  %639 = fsub float 0.000000e+00, %498, !dbg !69
  %640 = fmul float %624, 0x3FF7154760000000, !dbg !73
  %641 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %640) #4, !dbg !73
  %642 = fmul float %625, 0x3FF7154760000000, !dbg !73
  %643 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %642) #4, !dbg !73
  %644 = fmul float %626, 0x3FF7154760000000, !dbg !73
  %645 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %644) #4, !dbg !73
  %646 = fmul float %627, 0x3FF7154760000000, !dbg !73
  %647 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %646) #4, !dbg !73
  %648 = fmul float %628, 0x3FF7154760000000, !dbg !73
  %649 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %648) #4, !dbg !73
  %650 = fmul float %629, 0x3FF7154760000000, !dbg !73
  %651 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %650) #4, !dbg !73
  %652 = fmul float %630, 0x3FF7154760000000, !dbg !73
  %653 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %652) #4, !dbg !73
  %654 = fmul float %631, 0x3FF7154760000000, !dbg !73
  %655 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %654) #4, !dbg !73
  %656 = fmul float %632, 0x3FF7154760000000, !dbg !73
  %657 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %656) #4, !dbg !73
  %658 = fmul float %633, 0x3FF7154760000000, !dbg !73
  %659 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %658) #4, !dbg !73
  %660 = fmul float %634, 0x3FF7154760000000, !dbg !73
  %661 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %660) #4, !dbg !73
  %662 = fmul float %635, 0x3FF7154760000000, !dbg !73
  %663 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %662) #4, !dbg !73
  %664 = fmul float %636, 0x3FF7154760000000, !dbg !73
  %665 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %664) #4, !dbg !73
  %666 = fmul float %637, 0x3FF7154760000000, !dbg !73
  %667 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %666) #4, !dbg !73
  %668 = fmul float %638, 0x3FF7154760000000, !dbg !73
  %669 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %668) #4, !dbg !73
  %670 = fmul float %639, 0x3FF7154760000000, !dbg !73
  %671 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %670) #4, !dbg !73
  %672 = fadd float %641, 1.000000e+00, !dbg !74
  %673 = fadd float %643, 1.000000e+00, !dbg !74
  %674 = fadd float %645, 1.000000e+00, !dbg !74
  %675 = fadd float %647, 1.000000e+00, !dbg !74
  %676 = fadd float %649, 1.000000e+00, !dbg !74
  %677 = fadd float %651, 1.000000e+00, !dbg !74
  %678 = fadd float %653, 1.000000e+00, !dbg !74
  %679 = fadd float %655, 1.000000e+00, !dbg !74
  %680 = fadd float %657, 1.000000e+00, !dbg !74
  %681 = fadd float %659, 1.000000e+00, !dbg !74
  %682 = fadd float %661, 1.000000e+00, !dbg !74
  %683 = fadd float %663, 1.000000e+00, !dbg !74
  %684 = fadd float %665, 1.000000e+00, !dbg !74
  %685 = fadd float %667, 1.000000e+00, !dbg !74
  %686 = fadd float %669, 1.000000e+00, !dbg !74
  %687 = fadd float %671, 1.000000e+00, !dbg !74
  %688 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %672) #4, !dbg !75
  %689 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %673) #4, !dbg !75
  %690 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %674) #4, !dbg !75
  %691 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %675) #4, !dbg !75
  %692 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %676) #4, !dbg !75
  %693 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %677) #4, !dbg !75
  %694 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %678) #4, !dbg !75
  %695 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %679) #4, !dbg !75
  %696 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %680) #4, !dbg !75
  %697 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %681) #4, !dbg !75
  %698 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %682) #4, !dbg !75
  %699 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %683) #4, !dbg !75
  %700 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %684) #4, !dbg !75
  %701 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %685) #4, !dbg !75
  %702 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %686) #4, !dbg !75
  %703 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %687) #4, !dbg !75
  %704 = fmul float %688, %496, !dbg !76
  %705 = fmul float %689, %494, !dbg !76
  %706 = fmul float %690, %492, !dbg !76
  %707 = fmul float %691, %490, !dbg !76
  %708 = fmul float %692, %488, !dbg !76
  %709 = fmul float %693, %486, !dbg !76
  %710 = fmul float %694, %484, !dbg !76
  %711 = fmul float %695, %482, !dbg !76
  %712 = fmul float %696, %480, !dbg !76
  %713 = fmul float %697, %478, !dbg !76
  %714 = fmul float %698, %476, !dbg !76
  %715 = fmul float %699, %474, !dbg !76
  %716 = fmul float %700, %472, !dbg !76
  %717 = fmul float %701, %470, !dbg !76
  %718 = fmul float %702, %468, !dbg !76
  %719 = fmul float %703, %466, !dbg !76
  %720 = fadd float %608, %704, !dbg !77
  %721 = fadd float %609, %705, !dbg !77
  %722 = fadd float %610, %706, !dbg !77
  %723 = fadd float %611, %707, !dbg !77
  %724 = fadd float %612, %708, !dbg !77
  %725 = fadd float %613, %709, !dbg !77
  %726 = fadd float %614, %710, !dbg !77
  %727 = fadd float %615, %711, !dbg !77
  %728 = fadd float %616, %712, !dbg !77
  %729 = fadd float %617, %713, !dbg !77
  %730 = fadd float %618, %714, !dbg !77
  %731 = fadd float %619, %715, !dbg !77
  %732 = fadd float %620, %716, !dbg !77
  %733 = fadd float %621, %717, !dbg !77
  %734 = fadd float %622, %718, !dbg !77
  %735 = fadd float %623, %719, !dbg !77
  %736 = fsub float 0.000000e+00, %720, !dbg !78
  %737 = fsub float 0.000000e+00, %721, !dbg !78
  %738 = fsub float 0.000000e+00, %722, !dbg !78
  %739 = fsub float 0.000000e+00, %723, !dbg !78
  %740 = fsub float 0.000000e+00, %724, !dbg !78
  %741 = fsub float 0.000000e+00, %725, !dbg !78
  %742 = fsub float 0.000000e+00, %726, !dbg !78
  %743 = fsub float 0.000000e+00, %727, !dbg !78
  %744 = fsub float 0.000000e+00, %728, !dbg !78
  %745 = fsub float 0.000000e+00, %729, !dbg !78
  %746 = fsub float 0.000000e+00, %730, !dbg !78
  %747 = fsub float 0.000000e+00, %731, !dbg !78
  %748 = fsub float 0.000000e+00, %732, !dbg !78
  %749 = fsub float 0.000000e+00, %733, !dbg !78
  %750 = fsub float 0.000000e+00, %734, !dbg !78
  %751 = fsub float 0.000000e+00, %735, !dbg !78
  %752 = fmul float %736, 0x3FF7154760000000, !dbg !80
  %753 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %752) #4, !dbg !80
  %754 = fmul float %737, 0x3FF7154760000000, !dbg !80
  %755 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %754) #4, !dbg !80
  %756 = fmul float %738, 0x3FF7154760000000, !dbg !80
  %757 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %756) #4, !dbg !80
  %758 = fmul float %739, 0x3FF7154760000000, !dbg !80
  %759 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %758) #4, !dbg !80
  %760 = fmul float %740, 0x3FF7154760000000, !dbg !80
  %761 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %760) #4, !dbg !80
  %762 = fmul float %741, 0x3FF7154760000000, !dbg !80
  %763 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %762) #4, !dbg !80
  %764 = fmul float %742, 0x3FF7154760000000, !dbg !80
  %765 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %764) #4, !dbg !80
  %766 = fmul float %743, 0x3FF7154760000000, !dbg !80
  %767 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %766) #4, !dbg !80
  %768 = fmul float %744, 0x3FF7154760000000, !dbg !80
  %769 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %768) #4, !dbg !80
  %770 = fmul float %745, 0x3FF7154760000000, !dbg !80
  %771 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %770) #4, !dbg !80
  %772 = fmul float %746, 0x3FF7154760000000, !dbg !80
  %773 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %772) #4, !dbg !80
  %774 = fmul float %747, 0x3FF7154760000000, !dbg !80
  %775 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %774) #4, !dbg !80
  %776 = fmul float %748, 0x3FF7154760000000, !dbg !80
  %777 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %776) #4, !dbg !80
  %778 = fmul float %749, 0x3FF7154760000000, !dbg !80
  %779 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %778) #4, !dbg !80
  %780 = fmul float %750, 0x3FF7154760000000, !dbg !80
  %781 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %780) #4, !dbg !80
  %782 = fmul float %751, 0x3FF7154760000000, !dbg !80
  %783 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %782) #4, !dbg !80
  %784 = fadd float %753, 1.000000e+00, !dbg !81
  %785 = fadd float %755, 1.000000e+00, !dbg !81
  %786 = fadd float %757, 1.000000e+00, !dbg !81
  %787 = fadd float %759, 1.000000e+00, !dbg !81
  %788 = fadd float %761, 1.000000e+00, !dbg !81
  %789 = fadd float %763, 1.000000e+00, !dbg !81
  %790 = fadd float %765, 1.000000e+00, !dbg !81
  %791 = fadd float %767, 1.000000e+00, !dbg !81
  %792 = fadd float %769, 1.000000e+00, !dbg !81
  %793 = fadd float %771, 1.000000e+00, !dbg !81
  %794 = fadd float %773, 1.000000e+00, !dbg !81
  %795 = fadd float %775, 1.000000e+00, !dbg !81
  %796 = fadd float %777, 1.000000e+00, !dbg !81
  %797 = fadd float %779, 1.000000e+00, !dbg !81
  %798 = fadd float %781, 1.000000e+00, !dbg !81
  %799 = fadd float %783, 1.000000e+00, !dbg !81
  %800 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %784) #4, !dbg !82
  %801 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %785) #4, !dbg !82
  %802 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %786) #4, !dbg !82
  %803 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %787) #4, !dbg !82
  %804 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %788) #4, !dbg !82
  %805 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %789) #4, !dbg !82
  %806 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %790) #4, !dbg !82
  %807 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %791) #4, !dbg !82
  %808 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %792) #4, !dbg !82
  %809 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %793) #4, !dbg !82
  %810 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %794) #4, !dbg !82
  %811 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %795) #4, !dbg !82
  %812 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %796) #4, !dbg !82
  %813 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %797) #4, !dbg !82
  %814 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %798) #4, !dbg !82
  %815 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %799) #4, !dbg !82
  %816 = fmul float %720, %800, !dbg !83
  %817 = fmul float %721, %801, !dbg !83
  %818 = fmul float %722, %802, !dbg !83
  %819 = fmul float %723, %803, !dbg !83
  %820 = fmul float %724, %804, !dbg !83
  %821 = fmul float %725, %805, !dbg !83
  %822 = fmul float %726, %806, !dbg !83
  %823 = fmul float %727, %807, !dbg !83
  %824 = fmul float %728, %808, !dbg !83
  %825 = fmul float %729, %809, !dbg !83
  %826 = fmul float %730, %810, !dbg !83
  %827 = fmul float %731, %811, !dbg !83
  %828 = fmul float %732, %812, !dbg !83
  %829 = fmul float %733, %813, !dbg !83
  %830 = fmul float %734, %814, !dbg !83
  %831 = fmul float %735, %815, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %832 = bitcast float %460 to i32, !dbg !85
  %833 = bitcast float %453 to i32, !dbg !85
  %834 = bitcast float %446 to i32, !dbg !85
  %835 = bitcast float %439 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %832, i32 %833, i32 %834, i32 %835, ptr addrspace(1) %49, i1 %35) #4, !dbg !85
  %836 = bitcast float %432 to i32, !dbg !85
  %837 = bitcast float %425 to i32, !dbg !85
  %838 = bitcast float %418 to i32, !dbg !85
  %839 = bitcast float %411 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %836, i32 %837, i32 %838, i32 %839, ptr addrspace(1) %51, i1 %35) #4, !dbg !85
  %840 = bitcast float %404 to i32, !dbg !85
  %841 = bitcast float %397 to i32, !dbg !85
  %842 = bitcast float %390 to i32, !dbg !85
  %843 = bitcast float %383 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %840, i32 %841, i32 %842, i32 %843, ptr addrspace(1) %53, i1 %35) #4, !dbg !85
  %844 = bitcast float %370 to i32, !dbg !85
  %845 = bitcast float %355 to i32, !dbg !85
  %846 = bitcast float %340 to i32, !dbg !85
  %847 = bitcast float %325 to i32, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %844, i32 %845, i32 %846, i32 %847, ptr addrspace(1) %55, i1 %35) #4, !dbg !85
  tail call void @llvm.nvvm.barrier0(), !dbg !86
  %848 = bitcast float %319 to i32, !dbg !87
  %849 = bitcast float %315 to i32, !dbg !87
  %850 = bitcast float %311 to i32, !dbg !87
  %851 = bitcast float %307 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %848, i32 %849, i32 %850, i32 %851, ptr addrspace(1) %63, i1 %35) #4, !dbg !87
  %852 = bitcast float %303 to i32, !dbg !87
  %853 = bitcast float %299 to i32, !dbg !87
  %854 = bitcast float %295 to i32, !dbg !87
  %855 = bitcast float %291 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %852, i32 %853, i32 %854, i32 %855, ptr addrspace(1) %64, i1 %35) #4, !dbg !87
  %856 = bitcast float %287 to i32, !dbg !87
  %857 = bitcast float %283 to i32, !dbg !87
  %858 = bitcast float %279 to i32, !dbg !87
  %859 = bitcast float %275 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %856, i32 %857, i32 %858, i32 %859, ptr addrspace(1) %65, i1 %35) #4, !dbg !87
  %860 = bitcast float %269 to i32, !dbg !87
  %861 = bitcast float %261 to i32, !dbg !87
  %862 = bitcast float %253 to i32, !dbg !87
  %863 = bitcast float %245 to i32, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %860, i32 %861, i32 %862, i32 %863, ptr addrspace(1) %66, i1 %35) #4, !dbg !87
  %864 = shl i32 %554, 12, !dbg !88
  %865 = shl i32 %552, 12, !dbg !88
  %866 = shl i32 %550, 12, !dbg !88
  %867 = shl i32 %548, 12, !dbg !88
  %868 = shl i32 %546, 21, !dbg !89
  %869 = add i32 %868, %.decomposed, !dbg !90
  %870 = add i32 %869, %864, !dbg !91
  %871 = add i32 %869, %865, !dbg !91
  %872 = add i32 %869, %866, !dbg !91
  %873 = add i32 %869, %867, !dbg !91
  %874 = sext i32 %870 to i64, !dbg !92
  %875 = getelementptr float, ptr addrspace(1) %14, i64 %874, !dbg !92
  %876 = sext i32 %871 to i64, !dbg !92
  %877 = getelementptr float, ptr addrspace(1) %14, i64 %876, !dbg !92
  %878 = sext i32 %872 to i64, !dbg !92
  %879 = getelementptr float, ptr addrspace(1) %14, i64 %878, !dbg !92
  %880 = sext i32 %873 to i64, !dbg !92
  %881 = getelementptr float, ptr addrspace(1) %14, i64 %880, !dbg !92
  %882 = shl i32 %20, 8, !dbg !93
  %883 = and i32 %882, 3840, !dbg !93
  %884 = or disjoint i32 %883, %22, !dbg !93
  %885 = and i32 %26, 1020, !dbg !93
  %886 = lshr exact i32 %883, 2, !dbg !93
  %887 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %886, !dbg !93
  %888 = getelementptr float, ptr addrspace(3) %887, i32 %884, !dbg !93
  %889 = bitcast float %816 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %888, <1 x i32> %889, i1 true) #4, !dbg !93
  %890 = or disjoint i32 %884, 64, !dbg !93
  %891 = lshr i32 %890, 4, !dbg !93
  %892 = getelementptr float, ptr addrspace(3) @global_smem, i32 %891, !dbg !93
  %893 = getelementptr float, ptr addrspace(3) %892, i32 %890, !dbg !93
  %894 = bitcast float %817 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %893, <1 x i32> %894, i1 true) #4, !dbg !93
  %895 = or disjoint i32 %884, 128, !dbg !93
  %896 = lshr i32 %895, 4, !dbg !93
  %897 = getelementptr float, ptr addrspace(3) @global_smem, i32 %896, !dbg !93
  %898 = getelementptr float, ptr addrspace(3) %897, i32 %895, !dbg !93
  %899 = bitcast float %818 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %898, <1 x i32> %899, i1 true) #4, !dbg !93
  %900 = or disjoint i32 %884, 192, !dbg !93
  %901 = lshr i32 %900, 4, !dbg !93
  %902 = getelementptr float, ptr addrspace(3) @global_smem, i32 %901, !dbg !93
  %903 = getelementptr float, ptr addrspace(3) %902, i32 %900, !dbg !93
  %904 = bitcast float %819 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %903, <1 x i32> %904, i1 true) #4, !dbg !93
  %905 = or disjoint i32 %884, 16, !dbg !93
  %906 = getelementptr float, ptr addrspace(3) %887, i32 %905, !dbg !93
  %907 = bitcast float %820 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %906, <1 x i32> %907, i1 true) #4, !dbg !93
  %908 = or disjoint i32 %884, 80, !dbg !93
  %909 = lshr i32 %908, 4, !dbg !93
  %910 = and i32 %909, 244, !dbg !93
  %911 = getelementptr float, ptr addrspace(3) @global_smem, i32 %910, !dbg !93
  %912 = getelementptr float, ptr addrspace(3) %911, i32 %908, !dbg !93
  %913 = bitcast float %821 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %912, <1 x i32> %913, i1 true) #4, !dbg !93
  %914 = or disjoint i32 %884, 144, !dbg !93
  %915 = lshr i32 %914, 4, !dbg !93
  %916 = and i32 %915, 248, !dbg !93
  %917 = getelementptr float, ptr addrspace(3) @global_smem, i32 %916, !dbg !93
  %918 = getelementptr float, ptr addrspace(3) %917, i32 %914, !dbg !93
  %919 = bitcast float %822 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %918, <1 x i32> %919, i1 true) #4, !dbg !93
  %920 = or disjoint i32 %884, 208, !dbg !93
  %921 = lshr i32 %920, 4, !dbg !93
  %922 = and i32 %921, 252, !dbg !93
  %923 = getelementptr float, ptr addrspace(3) @global_smem, i32 %922, !dbg !93
  %924 = getelementptr float, ptr addrspace(3) %923, i32 %920, !dbg !93
  %925 = bitcast float %823 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %924, <1 x i32> %925, i1 true) #4, !dbg !93
  %926 = or disjoint i32 %884, 32, !dbg !93
  %927 = getelementptr float, ptr addrspace(3) %887, i32 %926, !dbg !93
  %928 = bitcast float %824 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %927, <1 x i32> %928, i1 true) #4, !dbg !93
  %929 = or disjoint i32 %884, 96, !dbg !93
  %930 = lshr i32 %929, 4, !dbg !93
  %931 = and i32 %930, 244, !dbg !93
  %932 = getelementptr float, ptr addrspace(3) @global_smem, i32 %931, !dbg !93
  %933 = getelementptr float, ptr addrspace(3) %932, i32 %929, !dbg !93
  %934 = bitcast float %825 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %933, <1 x i32> %934, i1 true) #4, !dbg !93
  %935 = or disjoint i32 %884, 160, !dbg !93
  %936 = lshr i32 %935, 4, !dbg !93
  %937 = and i32 %936, 248, !dbg !93
  %938 = getelementptr float, ptr addrspace(3) @global_smem, i32 %937, !dbg !93
  %939 = getelementptr float, ptr addrspace(3) %938, i32 %935, !dbg !93
  %940 = bitcast float %826 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %939, <1 x i32> %940, i1 true) #4, !dbg !93
  %941 = or disjoint i32 %884, 224, !dbg !93
  %942 = lshr i32 %941, 4, !dbg !93
  %943 = and i32 %942, 252, !dbg !93
  %944 = getelementptr float, ptr addrspace(3) @global_smem, i32 %943, !dbg !93
  %945 = getelementptr float, ptr addrspace(3) %944, i32 %941, !dbg !93
  %946 = bitcast float %827 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %945, <1 x i32> %946, i1 true) #4, !dbg !93
  %947 = or disjoint i32 %884, 48, !dbg !93
  %948 = getelementptr float, ptr addrspace(3) %887, i32 %947, !dbg !93
  %949 = bitcast float %828 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %948, <1 x i32> %949, i1 true) #4, !dbg !93
  %950 = or disjoint i32 %884, 112, !dbg !93
  %951 = lshr i32 %950, 4, !dbg !93
  %952 = and i32 %951, 244, !dbg !93
  %953 = getelementptr float, ptr addrspace(3) @global_smem, i32 %952, !dbg !93
  %954 = getelementptr float, ptr addrspace(3) %953, i32 %950, !dbg !93
  %955 = bitcast float %829 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %954, <1 x i32> %955, i1 true) #4, !dbg !93
  %956 = or disjoint i32 %884, 176, !dbg !93
  %957 = lshr i32 %956, 4, !dbg !93
  %958 = and i32 %957, 248, !dbg !93
  %959 = getelementptr float, ptr addrspace(3) @global_smem, i32 %958, !dbg !93
  %960 = getelementptr float, ptr addrspace(3) %959, i32 %956, !dbg !93
  %961 = bitcast float %830 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %960, <1 x i32> %961, i1 true) #4, !dbg !93
  %962 = or disjoint i32 %884, 240, !dbg !93
  %963 = lshr i32 %962, 4, !dbg !93
  %964 = and i32 %963, 252, !dbg !93
  %965 = getelementptr float, ptr addrspace(3) @global_smem, i32 %964, !dbg !93
  %966 = getelementptr float, ptr addrspace(3) %965, i32 %962, !dbg !93
  %967 = bitcast float %831 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %966, <1 x i32> %967, i1 true) #4, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %968 = lshr i32 %26, 4, !dbg !93
  %969 = and i32 %968, 60, !dbg !93
  %970 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %969, !dbg !93
  %971 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %885, !dbg !93
  %972 = or disjoint i32 %885, 1024, !dbg !93
  %973 = lshr i32 %972, 4, !dbg !93
  %974 = and i32 %973, 124, !dbg !93
  %975 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %974, !dbg !93
  %976 = getelementptr inbounds float, ptr addrspace(3) %975, i32 %972, !dbg !93
  %977 = load <4 x i32>, ptr addrspace(3) %976, align 16, !dbg !93
  %978 = or disjoint i32 %885, 2048, !dbg !93
  %979 = lshr i32 %978, 4, !dbg !93
  %980 = and i32 %979, 188, !dbg !93
  %981 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %980, !dbg !93
  %982 = getelementptr inbounds float, ptr addrspace(3) %981, i32 %978, !dbg !93
  %983 = load <4 x i32>, ptr addrspace(3) %982, align 16, !dbg !93
  %984 = or disjoint i32 %885, 3072, !dbg !93
  %985 = lshr i32 %984, 4, !dbg !93
  %986 = and i32 %985, 252, !dbg !93
  %987 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %986, !dbg !93
  %988 = getelementptr inbounds float, ptr addrspace(3) %987, i32 %984, !dbg !93
  %989 = load <4 x i32>, ptr addrspace(3) %988, align 16, !dbg !93
  %.extract = load i32, ptr addrspace(3) %971, align 16, !dbg !93
  %990 = getelementptr inbounds i8, ptr addrspace(3) %971, i32 4, !dbg !93
  %.extract16 = load i32, ptr addrspace(3) %990, align 4, !dbg !93
  %991 = getelementptr inbounds i8, ptr addrspace(3) %971, i32 8, !dbg !93
  %.extract17 = load i32, ptr addrspace(3) %991, align 8, !dbg !93
  %992 = getelementptr inbounds i8, ptr addrspace(3) %971, i32 12, !dbg !93
  %.extract18 = load i32, ptr addrspace(3) %992, align 4, !dbg !93
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %875, i1 %555) #4, !dbg !93
  %.extract19 = extractelement <4 x i32> %977, i64 0, !dbg !93
  %.extract20 = extractelement <4 x i32> %977, i64 1, !dbg !93
  %.extract21 = extractelement <4 x i32> %977, i64 2, !dbg !93
  %.extract22 = extractelement <4 x i32> %977, i64 3, !dbg !93
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %877, i1 %553) #4, !dbg !93
  %.extract23 = extractelement <4 x i32> %983, i64 0, !dbg !93
  %.extract24 = extractelement <4 x i32> %983, i64 1, !dbg !93
  %.extract25 = extractelement <4 x i32> %983, i64 2, !dbg !93
  %.extract26 = extractelement <4 x i32> %983, i64 3, !dbg !93
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %879, i1 %551) #4, !dbg !93
  %.extract27 = extractelement <4 x i32> %989, i64 0, !dbg !93
  %.extract28 = extractelement <4 x i32> %989, i64 1, !dbg !93
  %.extract29 = extractelement <4 x i32> %989, i64 2, !dbg !93
  %.extract30 = extractelement <4 x i32> %989, i64 3, !dbg !93
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %881, i1 %549) #4, !dbg !93
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6hb5osixqfolktdv6zhzfoegxdcrbaouwjwi44j2o4uo4y7wgui.py", directory: "inductor_cache/6h")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_mul_sigmoid_silu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 34, scope: !7)
!26 = !DILocation(line: 34, column: 48, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 35, scope: !7)
!33 = !DILocation(line: 38, column: 31, scope: !7)
!34 = !DILocation(line: 38, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 36, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 36, scope: !7)
!39 = !DILocation(line: 41, column: 31, scope: !7)
!40 = !DILocation(line: 41, column: 36, scope: !7)
!41 = !DILocation(line: 42, column: 31, scope: !7)
!42 = !DILocation(line: 42, column: 36, scope: !7)
!43 = !DILocation(line: 43, column: 31, scope: !7)
!44 = !DILocation(line: 43, column: 36, scope: !7)
!45 = !DILocation(line: 44, column: 41, scope: !7)
!46 = !DILocation(line: 44, column: 37, scope: !7)
!47 = !DILocation(line: 44, column: 32, scope: !7)
!48 = !DILocation(line: 44, column: 46, scope: !7)
!49 = !DILocation(line: 45, column: 32, scope: !7)
!50 = !DILocation(line: 45, column: 46, scope: !7)
!51 = !DILocation(line: 50, column: 19, scope: !7)
!52 = !DILocation(line: 51, column: 27, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 27, scope: !7)
!56 = !DILocation(line: 47, column: 18, scope: !7)
!57 = !DILocation(line: 59, column: 19, scope: !7)
!58 = !DILocation(line: 46, column: 18, scope: !7)
!59 = !DILocation(line: 48, column: 18, scope: !7)
!60 = !DILocation(line: 56, column: 19, scope: !7)
!61 = !DILocation(line: 57, column: 20, scope: !7)
!62 = !DILocation(line: 58, column: 20, scope: !7)
!63 = !DILocation(line: 31, column: 19, scope: !7)
!64 = !DILocation(line: 62, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 20, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 47, column: 30, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!72 = !DILocation(line: 68, column: 23, scope: !7)
!73 = !DILocation(line: 47, column: 29, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 47, column: 20, scope: !70, inlinedAt: !72)
!75 = !DILocation(line: 47, column: 16, scope: !70, inlinedAt: !72)
!76 = !DILocation(line: 69, column: 20, scope: !7)
!77 = !DILocation(line: 70, column: 20, scope: !7)
!78 = !DILocation(line: 47, column: 30, scope: !70, inlinedAt: !79)
!79 = !DILocation(line: 71, column: 23, scope: !7)
!80 = !DILocation(line: 47, column: 29, scope: !70, inlinedAt: !79)
!81 = !DILocation(line: 47, column: 20, scope: !70, inlinedAt: !79)
!82 = !DILocation(line: 47, column: 16, scope: !70, inlinedAt: !79)
!83 = !DILocation(line: 72, column: 20, scope: !7)
!84 = !DILocation(line: 73, column: 4, scope: !7)
!85 = !DILocation(line: 74, column: 48, scope: !7)
!86 = !DILocation(line: 75, column: 4, scope: !7)
!87 = !DILocation(line: 76, column: 48, scope: !7)
!88 = !DILocation(line: 77, column: 35, scope: !7)
!89 = !DILocation(line: 77, column: 48, scope: !7)
!90 = !DILocation(line: 77, column: 30, scope: !7)
!91 = !DILocation(line: 77, column: 40, scope: !7)
!92 = !DILocation(line: 77, column: 25, scope: !7)
!93 = !DILocation(line: 77, column: 60, scope: !7)
!94 = !DILocation(line: 77, column: 4, scope: !7)
