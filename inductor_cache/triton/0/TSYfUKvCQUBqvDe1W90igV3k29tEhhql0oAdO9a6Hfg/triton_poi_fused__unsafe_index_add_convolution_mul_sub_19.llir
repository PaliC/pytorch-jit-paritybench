; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 2, !dbg !13
  %18 = or disjoint i32 %16, 512, !dbg !13
  %19 = or disjoint i32 %16, 514, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %20 = sdiv i32 %.frozen, 1024, !dbg !14
  %.frozen1 = freeze i32 %18, !dbg !14
  %21 = sdiv i32 %.frozen1, 1024, !dbg !14
  %22 = srem i32 %20, 1024, !dbg !15
  %23 = srem i32 %21, 1024, !dbg !15
  %24 = mul i32 %20, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %17, 1024, !dbg !16
  %26 = mul i32 %21, 1024, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %26, !dbg !16
  %27 = srem i32 %19, 1024, !dbg !16
  %28 = sdiv i32 %16, 1048576, !dbg !17
  %29 = sdiv i32 %18, 1048576, !dbg !17
  %30 = sext i32 %22 to i64, !dbg !18
  %31 = getelementptr i64, ptr addrspace(1) %1, i64 %30, !dbg !18
  %32 = sext i32 %23 to i64, !dbg !18
  %33 = getelementptr i64, ptr addrspace(1) %1, i64 %32, !dbg !18
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !19
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !19
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !19
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !19
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !19
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !19
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !19
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !19
  %42 = sext i32 %.decomposed to i64, !dbg !20
  %43 = getelementptr i64, ptr addrspace(1) %2, i64 %42, !dbg !20
  %44 = sext i32 %25 to i64, !dbg !20
  %45 = getelementptr i64, ptr addrspace(1) %2, i64 %44, !dbg !20
  %46 = sext i32 %.decomposed2 to i64, !dbg !20
  %47 = getelementptr i64, ptr addrspace(1) %2, i64 %46, !dbg !20
  %48 = sext i32 %27 to i64, !dbg !20
  %49 = getelementptr i64, ptr addrspace(1) %2, i64 %48, !dbg !20
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !21
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !21
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !21
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !21
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !21
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !21
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !21
  %57 = extractvalue { i64, i64 } %56, 0, !dbg !21
  %58 = extractvalue { i64, i64 } %56, 1, !dbg !21
  %59 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !21
  %60 = extractvalue { i64, i64 } %59, 0, !dbg !21
  %61 = extractvalue { i64, i64 } %59, 1, !dbg !21
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #1, !dbg !22
  %63 = getelementptr i64, ptr addrspace(1) %5, i64 %42, !dbg !23
  %64 = getelementptr i64, ptr addrspace(1) %5, i64 %44, !dbg !23
  %65 = getelementptr i64, ptr addrspace(1) %5, i64 %46, !dbg !23
  %66 = getelementptr i64, ptr addrspace(1) %5, i64 %48, !dbg !23
  %67 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !24
  %68 = extractvalue { i64, i64 } %67, 0, !dbg !24
  %69 = extractvalue { i64, i64 } %67, 1, !dbg !24
  %70 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !24
  %71 = extractvalue { i64, i64 } %70, 0, !dbg !24
  %72 = extractvalue { i64, i64 } %70, 1, !dbg !24
  %73 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !24
  %74 = extractvalue { i64, i64 } %73, 0, !dbg !24
  %75 = extractvalue { i64, i64 } %73, 1, !dbg !24
  %76 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !24
  %77 = extractvalue { i64, i64 } %76, 0, !dbg !24
  %78 = extractvalue { i64, i64 } %76, 1, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !25
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #1, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !26
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !26
  %91 = getelementptr i64, ptr addrspace(1) %7, i64 %30, !dbg !27
  %92 = getelementptr i64, ptr addrspace(1) %7, i64 %32, !dbg !27
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !28
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !28
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !28
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !28
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !28
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !28
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !28
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !28
  %101 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !29
  %102 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !29
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !30
  %104 = bitcast i32 %103 to float, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !30
  %106 = bitcast i32 %105 to float, !dbg !30
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !30
  %108 = bitcast i32 %107 to float, !dbg !30
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !30
  %110 = bitcast i32 %109 to float, !dbg !30
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !30
  %112 = bitcast i32 %111 to float, !dbg !30
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !30
  %114 = bitcast i32 %113 to float, !dbg !30
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !30
  %116 = bitcast i32 %115 to float, !dbg !30
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !30
  %118 = bitcast i32 %117 to float, !dbg !30
  %119 = lshr i64 %34, 55, !dbg !31
  %120 = and i64 %119, 256, !dbg !31
  %121 = add i64 %120, %34, !dbg !31
  %122 = lshr i64 %38, 55, !dbg !31
  %123 = and i64 %122, 256, !dbg !31
  %124 = add i64 %123, %38, !dbg !31
  %125 = lshr i64 %51, 55, !dbg !32
  %126 = and i64 %125, 256, !dbg !32
  %127 = lshr i64 %52, 55, !dbg !32
  %128 = and i64 %127, 256, !dbg !32
  %129 = lshr i64 %54, 55, !dbg !32
  %130 = and i64 %129, 256, !dbg !32
  %131 = lshr i64 %55, 55, !dbg !32
  %132 = and i64 %131, 256, !dbg !32
  %133 = lshr i64 %57, 55, !dbg !32
  %134 = and i64 %133, 256, !dbg !32
  %135 = lshr i64 %58, 55, !dbg !32
  %136 = and i64 %135, 256, !dbg !32
  %137 = lshr i64 %60, 55, !dbg !32
  %138 = and i64 %137, 256, !dbg !32
  %139 = lshr i64 %61, 55, !dbg !32
  %140 = and i64 %139, 256, !dbg !32
  %141 = shl i64 %121, 8, !dbg !33
  %142 = shl i64 %124, 8, !dbg !33
  %143 = shl nsw i32 %28, 16, !dbg !34
  %144 = shl nsw i32 %29, 16, !dbg !34
  %145 = sext i32 %143 to i64, !dbg !35
  %146 = sext i32 %144 to i64, !dbg !35
  %147 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !36
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %126, !dbg !36
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %141, !dbg !36
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %145, !dbg !36
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !36
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %128, !dbg !36
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %141, !dbg !36
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %145, !dbg !36
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !36
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %130, !dbg !36
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %141, !dbg !36
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %145, !dbg !36
  %159 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !36
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %132, !dbg !36
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %141, !dbg !36
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %145, !dbg !36
  %163 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !36
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %134, !dbg !36
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %142, !dbg !36
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %146, !dbg !36
  %167 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !36
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %136, !dbg !36
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %142, !dbg !36
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %146, !dbg !36
  %171 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !36
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %138, !dbg !36
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %142, !dbg !36
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %146, !dbg !36
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !36
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %140, !dbg !36
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %142, !dbg !36
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %146, !dbg !36
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !37
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !37
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !37
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #1, !dbg !37
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !37
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #1, !dbg !37
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #1, !dbg !37
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #1, !dbg !37
  %187 = lshr i64 %68, 55, !dbg !38
  %188 = and i64 %187, 256, !dbg !38
  %189 = lshr i64 %69, 55, !dbg !38
  %190 = and i64 %189, 256, !dbg !38
  %191 = lshr i64 %71, 55, !dbg !38
  %192 = and i64 %191, 256, !dbg !38
  %193 = lshr i64 %72, 55, !dbg !38
  %194 = and i64 %193, 256, !dbg !38
  %195 = lshr i64 %74, 55, !dbg !38
  %196 = and i64 %195, 256, !dbg !38
  %197 = lshr i64 %75, 55, !dbg !38
  %198 = and i64 %197, 256, !dbg !38
  %199 = lshr i64 %77, 55, !dbg !38
  %200 = and i64 %199, 256, !dbg !38
  %201 = lshr i64 %78, 55, !dbg !38
  %202 = and i64 %201, 256, !dbg !38
  %203 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !39
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %188, !dbg !39
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %141, !dbg !39
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %145, !dbg !39
  %207 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !39
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %190, !dbg !39
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %141, !dbg !39
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %145, !dbg !39
  %211 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !39
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %192, !dbg !39
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %141, !dbg !39
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %145, !dbg !39
  %215 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !39
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %194, !dbg !39
  %217 = getelementptr float, ptr addrspace(1) %216, i64 %141, !dbg !39
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %145, !dbg !39
  %219 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !39
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %196, !dbg !39
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %142, !dbg !39
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %146, !dbg !39
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !39
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %198, !dbg !39
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %142, !dbg !39
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %146, !dbg !39
  %227 = getelementptr float, ptr addrspace(1) %3, i64 %77, !dbg !39
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %200, !dbg !39
  %229 = getelementptr float, ptr addrspace(1) %228, i64 %142, !dbg !39
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %146, !dbg !39
  %231 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !39
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %202, !dbg !39
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %142, !dbg !39
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %146, !dbg !39
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #1, !dbg !40
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 true) #1, !dbg !40
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #1, !dbg !40
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !40
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !40
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !40
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #1, !dbg !40
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #1, !dbg !40
  %243 = lshr i64 %93, 55, !dbg !41
  %244 = and i64 %243, 256, !dbg !41
  %245 = add i64 %244, %93, !dbg !41
  %246 = lshr i64 %97, 55, !dbg !41
  %247 = and i64 %246, 256, !dbg !41
  %248 = add i64 %247, %97, !dbg !41
  %249 = shl i64 %245, 8, !dbg !42
  %250 = shl i64 %248, 8, !dbg !42
  %251 = getelementptr float, ptr addrspace(1) %148, i64 %249, !dbg !43
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %145, !dbg !43
  %253 = getelementptr float, ptr addrspace(1) %152, i64 %249, !dbg !43
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %145, !dbg !43
  %255 = getelementptr float, ptr addrspace(1) %156, i64 %249, !dbg !43
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %145, !dbg !43
  %257 = getelementptr float, ptr addrspace(1) %160, i64 %249, !dbg !43
  %258 = getelementptr float, ptr addrspace(1) %257, i64 %145, !dbg !43
  %259 = getelementptr float, ptr addrspace(1) %164, i64 %250, !dbg !43
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %146, !dbg !43
  %261 = getelementptr float, ptr addrspace(1) %168, i64 %250, !dbg !43
  %262 = getelementptr float, ptr addrspace(1) %261, i64 %146, !dbg !43
  %263 = getelementptr float, ptr addrspace(1) %172, i64 %250, !dbg !43
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %146, !dbg !43
  %265 = getelementptr float, ptr addrspace(1) %176, i64 %250, !dbg !43
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %146, !dbg !43
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #1, !dbg !44
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #1, !dbg !44
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #1, !dbg !44
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #1, !dbg !44
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 true) #1, !dbg !44
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 true) #1, !dbg !44
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %264, i1 true) #1, !dbg !44
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 true) #1, !dbg !44
  %275 = getelementptr float, ptr addrspace(1) %204, i64 %249, !dbg !45
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %145, !dbg !45
  %277 = getelementptr float, ptr addrspace(1) %208, i64 %249, !dbg !45
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %145, !dbg !45
  %279 = getelementptr float, ptr addrspace(1) %212, i64 %249, !dbg !45
  %280 = getelementptr float, ptr addrspace(1) %279, i64 %145, !dbg !45
  %281 = getelementptr float, ptr addrspace(1) %216, i64 %249, !dbg !45
  %282 = getelementptr float, ptr addrspace(1) %281, i64 %145, !dbg !45
  %283 = getelementptr float, ptr addrspace(1) %220, i64 %250, !dbg !45
  %284 = getelementptr float, ptr addrspace(1) %283, i64 %146, !dbg !45
  %285 = getelementptr float, ptr addrspace(1) %224, i64 %250, !dbg !45
  %286 = getelementptr float, ptr addrspace(1) %285, i64 %146, !dbg !45
  %287 = getelementptr float, ptr addrspace(1) %228, i64 %250, !dbg !45
  %288 = getelementptr float, ptr addrspace(1) %287, i64 %146, !dbg !45
  %289 = getelementptr float, ptr addrspace(1) %232, i64 %250, !dbg !45
  %290 = getelementptr float, ptr addrspace(1) %289, i64 %146, !dbg !45
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 true) #1, !dbg !46
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 true) #1, !dbg !46
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 true) #1, !dbg !46
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 true) #1, !dbg !46
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 true) #1, !dbg !46
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 true) #1, !dbg !46
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #1, !dbg !46
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #1, !dbg !46
  %299 = insertelement <2 x i32> poison, i32 %267, i64 0, !dbg !44
  %300 = insertelement <2 x i32> %299, i32 %179, i64 1, !dbg !44
  %301 = bitcast <2 x i32> %300 to <2 x float>, !dbg !44
  %302 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !47
  %303 = bitcast <2 x i32> %302 to <2 x float>, !dbg !47
  %304 = shufflevector <2 x float> %303, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %305 = fadd <2 x float> %304, %301, !dbg !47
  %306 = insertelement <2 x i32> poison, i32 %291, i64 0, !dbg !46
  %307 = insertelement <2 x i32> %306, i32 %235, i64 1, !dbg !46
  %308 = bitcast <2 x i32> %307 to <2 x float>, !dbg !46
  %309 = fadd <2 x float> %304, %308, !dbg !48
  %310 = fsub <2 x float> %309, %305, !dbg !49
  %311 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !50
  %312 = bitcast <2 x i32> %311 to <2 x float>, !dbg !50
  %313 = shufflevector <2 x float> %312, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %314 = fmul <2 x float> %310, %313, !dbg !50
  %315 = fadd <2 x float> %305, %314, !dbg !51
  %316 = insertelement <2 x i32> poison, i32 %268, i64 0, !dbg !44
  %317 = insertelement <2 x i32> %316, i32 %180, i64 1, !dbg !44
  %318 = bitcast <2 x i32> %317 to <2 x float>, !dbg !44
  %319 = fadd <2 x float> %304, %318, !dbg !47
  %320 = insertelement <2 x i32> poison, i32 %292, i64 0, !dbg !46
  %321 = insertelement <2 x i32> %320, i32 %236, i64 1, !dbg !46
  %322 = bitcast <2 x i32> %321 to <2 x float>, !dbg !46
  %323 = fadd <2 x float> %304, %322, !dbg !48
  %324 = fsub <2 x float> %323, %319, !dbg !49
  %325 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !50
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !50
  %327 = shufflevector <2 x float> %326, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %328 = fmul <2 x float> %324, %327, !dbg !50
  %329 = fadd <2 x float> %319, %328, !dbg !51
  %330 = insertelement <2 x i32> poison, i32 %269, i64 0, !dbg !44
  %331 = insertelement <2 x i32> %330, i32 %181, i64 1, !dbg !44
  %332 = bitcast <2 x i32> %331 to <2 x float>, !dbg !44
  %333 = fadd <2 x float> %304, %332, !dbg !47
  %334 = insertelement <2 x i32> poison, i32 %293, i64 0, !dbg !46
  %335 = insertelement <2 x i32> %334, i32 %237, i64 1, !dbg !46
  %336 = bitcast <2 x i32> %335 to <2 x float>, !dbg !46
  %337 = fadd <2 x float> %304, %336, !dbg !48
  %338 = fsub <2 x float> %337, %333, !dbg !49
  %339 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !50
  %340 = bitcast <2 x i32> %339 to <2 x float>, !dbg !50
  %341 = shufflevector <2 x float> %340, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %342 = fmul <2 x float> %338, %341, !dbg !50
  %343 = fadd <2 x float> %333, %342, !dbg !51
  %344 = insertelement <2 x i32> poison, i32 %270, i64 0, !dbg !44
  %345 = insertelement <2 x i32> %344, i32 %182, i64 1, !dbg !44
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !44
  %347 = fadd <2 x float> %304, %346, !dbg !47
  %348 = insertelement <2 x i32> poison, i32 %294, i64 0, !dbg !46
  %349 = insertelement <2 x i32> %348, i32 %238, i64 1, !dbg !46
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !46
  %351 = fadd <2 x float> %304, %350, !dbg !48
  %352 = fsub <2 x float> %351, %347, !dbg !49
  %353 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !50
  %354 = bitcast <2 x i32> %353 to <2 x float>, !dbg !50
  %355 = shufflevector <2 x float> %354, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %356 = fmul <2 x float> %352, %355, !dbg !50
  %357 = fadd <2 x float> %347, %356, !dbg !51
  %358 = insertelement <2 x i32> poison, i32 %271, i64 0, !dbg !44
  %359 = insertelement <2 x i32> %358, i32 %183, i64 1, !dbg !44
  %360 = bitcast <2 x i32> %359 to <2 x float>, !dbg !44
  %361 = fadd <2 x float> %304, %360, !dbg !47
  %362 = insertelement <2 x i32> poison, i32 %295, i64 0, !dbg !46
  %363 = insertelement <2 x i32> %362, i32 %239, i64 1, !dbg !46
  %364 = bitcast <2 x i32> %363 to <2 x float>, !dbg !46
  %365 = fadd <2 x float> %304, %364, !dbg !48
  %366 = fsub <2 x float> %365, %361, !dbg !49
  %367 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !50
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !50
  %369 = shufflevector <2 x float> %368, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %370 = fmul <2 x float> %366, %369, !dbg !50
  %371 = fadd <2 x float> %361, %370, !dbg !51
  %372 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !44
  %373 = insertelement <2 x i32> %372, i32 %184, i64 1, !dbg !44
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !44
  %375 = fadd <2 x float> %304, %374, !dbg !47
  %376 = insertelement <2 x i32> poison, i32 %296, i64 0, !dbg !46
  %377 = insertelement <2 x i32> %376, i32 %240, i64 1, !dbg !46
  %378 = bitcast <2 x i32> %377 to <2 x float>, !dbg !46
  %379 = fadd <2 x float> %304, %378, !dbg !48
  %380 = fsub <2 x float> %379, %375, !dbg !49
  %381 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !50
  %382 = bitcast <2 x i32> %381 to <2 x float>, !dbg !50
  %383 = shufflevector <2 x float> %382, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %384 = fmul <2 x float> %380, %383, !dbg !50
  %385 = fadd <2 x float> %375, %384, !dbg !51
  %386 = insertelement <2 x i32> poison, i32 %273, i64 0, !dbg !44
  %387 = insertelement <2 x i32> %386, i32 %185, i64 1, !dbg !44
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !44
  %389 = fadd <2 x float> %304, %388, !dbg !47
  %390 = insertelement <2 x i32> poison, i32 %297, i64 0, !dbg !46
  %391 = insertelement <2 x i32> %390, i32 %241, i64 1, !dbg !46
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !46
  %393 = fadd <2 x float> %304, %392, !dbg !48
  %394 = fsub <2 x float> %393, %389, !dbg !49
  %395 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !50
  %396 = bitcast <2 x i32> %395 to <2 x float>, !dbg !50
  %397 = shufflevector <2 x float> %396, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %398 = fmul <2 x float> %394, %397, !dbg !50
  %399 = fadd <2 x float> %389, %398, !dbg !51
  %400 = insertelement <2 x i32> poison, i32 %274, i64 0, !dbg !44
  %401 = insertelement <2 x i32> %400, i32 %186, i64 1, !dbg !44
  %402 = bitcast <2 x i32> %401 to <2 x float>, !dbg !44
  %403 = fadd <2 x float> %304, %402, !dbg !47
  %404 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !46
  %405 = insertelement <2 x i32> %404, i32 %242, i64 1, !dbg !46
  %406 = bitcast <2 x i32> %405 to <2 x float>, !dbg !46
  %407 = fadd <2 x float> %304, %406, !dbg !48
  %408 = fsub <2 x float> %407, %403, !dbg !49
  %409 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !50
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !50
  %411 = shufflevector <2 x float> %410, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %412 = fmul <2 x float> %408, %411, !dbg !50
  %413 = fadd <2 x float> %403, %412, !dbg !51
  %414 = extractelement <2 x float> %315, i64 0, !dbg !52
  %415 = extractelement <2 x float> %315, i64 1, !dbg !53
  %416 = fsub float %414, %415, !dbg !52
  %417 = extractelement <2 x float> %329, i64 0, !dbg !52
  %418 = extractelement <2 x float> %329, i64 1, !dbg !53
  %419 = fsub float %417, %418, !dbg !52
  %420 = extractelement <2 x float> %343, i64 0, !dbg !52
  %421 = extractelement <2 x float> %343, i64 1, !dbg !53
  %422 = fsub float %420, %421, !dbg !52
  %423 = extractelement <2 x float> %357, i64 0, !dbg !52
  %424 = extractelement <2 x float> %357, i64 1, !dbg !53
  %425 = fsub float %423, %424, !dbg !52
  %426 = extractelement <2 x float> %371, i64 0, !dbg !52
  %427 = extractelement <2 x float> %371, i64 1, !dbg !53
  %428 = fsub float %426, %427, !dbg !52
  %429 = extractelement <2 x float> %385, i64 0, !dbg !52
  %430 = extractelement <2 x float> %385, i64 1, !dbg !53
  %431 = fsub float %429, %430, !dbg !52
  %432 = extractelement <2 x float> %399, i64 0, !dbg !52
  %433 = extractelement <2 x float> %399, i64 1, !dbg !53
  %434 = fsub float %432, %433, !dbg !52
  %435 = extractelement <2 x float> %413, i64 0, !dbg !52
  %436 = extractelement <2 x float> %413, i64 1, !dbg !53
  %437 = fsub float %435, %436, !dbg !52
  %438 = fmul float %416, %104, !dbg !54
  %439 = fmul float %419, %106, !dbg !54
  %440 = fmul float %422, %108, !dbg !54
  %441 = fmul float %425, %110, !dbg !54
  %442 = fmul float %428, %112, !dbg !54
  %443 = fmul float %431, %114, !dbg !54
  %444 = fmul float %434, %116, !dbg !54
  %445 = fmul float %437, %118, !dbg !54
  %446 = fadd float %415, %438, !dbg !53
  %447 = fadd float %418, %439, !dbg !53
  %448 = fadd float %421, %440, !dbg !53
  %449 = fadd float %424, %441, !dbg !53
  %450 = fadd float %427, %442, !dbg !53
  %451 = fadd float %430, %443, !dbg !53
  %452 = fadd float %433, %444, !dbg !53
  %453 = fadd float %436, %445, !dbg !53
  %454 = sext i32 %16 to i64, !dbg !55
  %455 = getelementptr float, ptr addrspace(1) %0, i64 %454, !dbg !55
  %456 = sext i32 %18 to i64, !dbg !55
  %457 = getelementptr float, ptr addrspace(1) %0, i64 %456, !dbg !55
  %458 = bitcast float %446 to i32, !dbg !56
  %459 = bitcast float %447 to i32, !dbg !56
  %460 = bitcast float %448 to i32, !dbg !56
  %461 = bitcast float %449 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %458, i32 %459, i32 %460, i32 %461, ptr addrspace(1) %455, i1 true) #1, !dbg !56
  %462 = bitcast float %450 to i32, !dbg !56
  %463 = bitcast float %451 to i32, !dbg !56
  %464 = bitcast float %452 to i32, !dbg !56
  %465 = bitcast float %453 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %462, i32 %463, i32 %464, i32 %465, ptr addrspace(1) %457, i1 true) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbkt7koo6mkbndhew53vwydvf2yl2vrffpkedsev2aayu4dfinyz.py", directory: "inductor_cache/bk")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_19", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 32, scope: !7)
!32 = !DILocation(line: 42, column: 32, scope: !7)
!33 = !DILocation(line: 43, column: 41, scope: !7)
!34 = !DILocation(line: 43, column: 54, scope: !7)
!35 = !DILocation(line: 43, column: 48, scope: !7)
!36 = !DILocation(line: 43, column: 30, scope: !7)
!37 = !DILocation(line: 43, column: 59, scope: !7)
!38 = !DILocation(line: 47, column: 35, scope: !7)
!39 = !DILocation(line: 48, column: 31, scope: !7)
!40 = !DILocation(line: 48, column: 61, scope: !7)
!41 = !DILocation(line: 55, column: 35, scope: !7)
!42 = !DILocation(line: 56, column: 42, scope: !7)
!43 = !DILocation(line: 56, column: 31, scope: !7)
!44 = !DILocation(line: 56, column: 61, scope: !7)
!45 = !DILocation(line: 58, column: 31, scope: !7)
!46 = !DILocation(line: 58, column: 62, scope: !7)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 59, column: 20, scope: !7)
!49 = !DILocation(line: 60, column: 20, scope: !7)
!50 = !DILocation(line: 61, column: 20, scope: !7)
!51 = !DILocation(line: 62, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 20, scope: !7)
!53 = !DILocation(line: 65, column: 20, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 66, column: 28, scope: !7)
!56 = !DILocation(line: 66, column: 40, scope: !7)
!57 = !DILocation(line: 66, column: 4, scope: !7)
