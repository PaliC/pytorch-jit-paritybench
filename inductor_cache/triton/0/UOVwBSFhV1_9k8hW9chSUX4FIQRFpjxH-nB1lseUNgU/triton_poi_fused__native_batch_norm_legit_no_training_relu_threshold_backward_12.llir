; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 4, !dbg !12
  %14 = and i32 %13, 48, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 8, !dbg !13
  %18 = or disjoint i32 %15, 12, !dbg !13
  %19 = icmp slt i32 %15, 512, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 6, !dbg !16
  %22 = lshr i32 %12, 2, !dbg !17
  %23 = and i32 %22, 63, !dbg !17
  %24 = or disjoint i32 %21, %23, !dbg !18
  %25 = icmp slt i32 %24, 64, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %26 = sdiv i32 %.frozen, 128, !dbg !20
  %27 = mul i32 %26, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %28 = srem i32 %16, 128, !dbg !21
  %29 = srem i32 %17, 128, !dbg !21
  %30 = srem i32 %18, 128, !dbg !21
  %31 = shl i32 %24, 7, !dbg !22
  %32 = shl i32 %26, 13, !dbg !23
  %33 = add i32 %32, %31, !dbg !24
  %34 = add i32 %33, %.decomposed, !dbg !25
  %35 = add i32 %33, %28, !dbg !25
  %36 = add i32 %33, %29, !dbg !25
  %37 = add i32 %33, %30, !dbg !25
  %38 = sext i32 %34 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = sext i32 %35 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = sext i32 %36 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = sext i32 %37 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = and i1 %19, %25, !dbg !27
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %46) #4, !dbg !28
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %46) #4, !dbg !28
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %46) #4, !dbg !28
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %46) #4, !dbg !28
  %51 = sext i32 %.decomposed to i64, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !29
  %53 = sext i32 %28 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !29
  %55 = sext i32 %29 to i64, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !29
  %57 = sext i32 %30 to i64, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !29
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %19) #4, !dbg !30
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %19) #4, !dbg !30
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %19) #4, !dbg !30
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %19) #4, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !31
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %19) #4, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !32
  %72 = bitcast i32 %68 to float, !dbg !32
  %73 = bitcast i32 %69 to float, !dbg !32
  %74 = bitcast i32 %70 to float, !dbg !32
  %75 = bitcast i32 %71 to float, !dbg !32
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %19) #4, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !32
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !32
  %81 = bitcast i32 %77 to float, !dbg !32
  %82 = bitcast i32 %78 to float, !dbg !32
  %83 = bitcast i32 %79 to float, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %19) #4, !dbg !32
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !32
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !32
  %90 = bitcast i32 %86 to float, !dbg !32
  %91 = bitcast i32 %87 to float, !dbg !32
  %92 = bitcast i32 %88 to float, !dbg !32
  %93 = bitcast i32 %89 to float, !dbg !32
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %19) #4, !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !32
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !32
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !32
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !32
  %99 = bitcast i32 %95 to float, !dbg !32
  %100 = bitcast i32 %96 to float, !dbg !32
  %101 = bitcast i32 %97 to float, !dbg !32
  %102 = bitcast i32 %98 to float, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !33
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !33
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !33
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %19) #4, !dbg !34
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %19) #4, !dbg !34
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %19) #4, !dbg !34
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %19) #4, !dbg !34
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !35
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !35
  %113 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !35
  %114 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !35
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %19) #4, !dbg !36
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %19) #4, !dbg !36
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %19) #4, !dbg !36
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %19) #4, !dbg !36
  %119 = fadd float %72, 0x3EE4F8B580000000, !dbg !37
  %120 = fadd float %73, 0x3EE4F8B580000000, !dbg !37
  %121 = fadd float %74, 0x3EE4F8B580000000, !dbg !37
  %122 = fadd float %75, 0x3EE4F8B580000000, !dbg !37
  %123 = fadd float %81, 0x3EE4F8B580000000, !dbg !37
  %124 = fadd float %82, 0x3EE4F8B580000000, !dbg !37
  %125 = fadd float %83, 0x3EE4F8B580000000, !dbg !37
  %126 = fadd float %84, 0x3EE4F8B580000000, !dbg !37
  %127 = fadd float %90, 0x3EE4F8B580000000, !dbg !37
  %128 = fadd float %91, 0x3EE4F8B580000000, !dbg !37
  %129 = fadd float %92, 0x3EE4F8B580000000, !dbg !37
  %130 = fadd float %93, 0x3EE4F8B580000000, !dbg !37
  %131 = fadd float %99, 0x3EE4F8B580000000, !dbg !37
  %132 = fadd float %100, 0x3EE4F8B580000000, !dbg !37
  %133 = fadd float %101, 0x3EE4F8B580000000, !dbg !37
  %134 = fadd float %102, 0x3EE4F8B580000000, !dbg !37
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %135, 0, !dbg !38
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %136, 0, !dbg !38
  br i1 %.not.i, label %142, label %137, !dbg !38

137:                                              ; preds = %9
  br i1 %.not1.i, label %140, label %138, !dbg !38

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

142:                                              ; preds = %9
  br i1 %.not1.i, label %145, label %143, !dbg !38

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %138, %140, %143, %145
  %.0.i = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !38
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i3 = icmp eq i32 %147, 0, !dbg !38
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i6 = icmp eq i32 %148, 0, !dbg !38
  br i1 %.not.i3, label %154, label %149, !dbg !38

149:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %152, label %150, !dbg !38

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

154:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %157, label %155, !dbg !38

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

__nv_sqrtf.exit7:                                 ; preds = %150, %152, %155, %157
  %.0.i5 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !38
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i8 = icmp eq i32 %159, 0, !dbg !38
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i11 = icmp eq i32 %160, 0, !dbg !38
  br i1 %.not.i8, label %166, label %161, !dbg !38

161:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %164, label %162, !dbg !38

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

166:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %169, label %167, !dbg !38

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

__nv_sqrtf.exit12:                                ; preds = %162, %164, %167, %169
  %.0.i10 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !38
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i13 = icmp eq i32 %171, 0, !dbg !38
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i16 = icmp eq i32 %172, 0, !dbg !38
  br i1 %.not.i13, label %178, label %173, !dbg !38

173:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %176, label %174, !dbg !38

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

178:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %181, label %179, !dbg !38

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

__nv_sqrtf.exit17:                                ; preds = %174, %176, %179, %181
  %.0.i15 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !38
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i18 = icmp eq i32 %183, 0, !dbg !38
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i21 = icmp eq i32 %184, 0, !dbg !38
  br i1 %.not.i18, label %190, label %185, !dbg !38

185:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %188, label %186, !dbg !38

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

190:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %193, label %191, !dbg !38

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !38
  br label %__nv_sqrtf.exit22, !dbg !38

__nv_sqrtf.exit22:                                ; preds = %186, %188, %191, %193
  %.0.i20 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !38
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i23 = icmp eq i32 %195, 0, !dbg !38
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i26 = icmp eq i32 %196, 0, !dbg !38
  br i1 %.not.i23, label %202, label %197, !dbg !38

197:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %200, label %198, !dbg !38

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

202:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %205, label %203, !dbg !38

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #4, !dbg !38
  br label %__nv_sqrtf.exit27, !dbg !38

__nv_sqrtf.exit27:                                ; preds = %198, %200, %203, %205
  %.0.i25 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !38
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i28 = icmp eq i32 %207, 0, !dbg !38
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i31 = icmp eq i32 %208, 0, !dbg !38
  br i1 %.not.i28, label %214, label %209, !dbg !38

209:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %212, label %210, !dbg !38

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

214:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %217, label %215, !dbg !38

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #4, !dbg !38
  br label %__nv_sqrtf.exit32, !dbg !38

__nv_sqrtf.exit32:                                ; preds = %210, %212, %215, %217
  %.0.i30 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !38
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i33 = icmp eq i32 %219, 0, !dbg !38
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i36 = icmp eq i32 %220, 0, !dbg !38
  br i1 %.not.i33, label %226, label %221, !dbg !38

221:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %224, label %222, !dbg !38

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

226:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %229, label %227, !dbg !38

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #4, !dbg !38
  br label %__nv_sqrtf.exit37, !dbg !38

__nv_sqrtf.exit37:                                ; preds = %222, %224, %227, %229
  %.0.i35 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !38
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i38 = icmp eq i32 %231, 0, !dbg !38
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i41 = icmp eq i32 %232, 0, !dbg !38
  br i1 %.not.i38, label %238, label %233, !dbg !38

233:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %236, label %234, !dbg !38

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #4, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #4, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

238:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %241, label %239, !dbg !38

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #4, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #4, !dbg !38
  br label %__nv_sqrtf.exit42, !dbg !38

__nv_sqrtf.exit42:                                ; preds = %234, %236, %239, %241
  %.0.i40 = phi float [ %235, %234 ], [ %237, %236 ], [ %240, %239 ], [ %242, %241 ], !dbg !38
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i43 = icmp eq i32 %243, 0, !dbg !38
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i46 = icmp eq i32 %244, 0, !dbg !38
  br i1 %.not.i43, label %250, label %245, !dbg !38

245:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %248, label %246, !dbg !38

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #4, !dbg !38
  br label %__nv_sqrtf.exit47, !dbg !38

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #4, !dbg !38
  br label %__nv_sqrtf.exit47, !dbg !38

250:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %253, label %251, !dbg !38

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #4, !dbg !38
  br label %__nv_sqrtf.exit47, !dbg !38

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #4, !dbg !38
  br label %__nv_sqrtf.exit47, !dbg !38

__nv_sqrtf.exit47:                                ; preds = %246, %248, %251, %253
  %.0.i45 = phi float [ %247, %246 ], [ %249, %248 ], [ %252, %251 ], [ %254, %253 ], !dbg !38
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i48 = icmp eq i32 %255, 0, !dbg !38
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i51 = icmp eq i32 %256, 0, !dbg !38
  br i1 %.not.i48, label %262, label %257, !dbg !38

257:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %260, label %258, !dbg !38

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #4, !dbg !38
  br label %__nv_sqrtf.exit52, !dbg !38

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #4, !dbg !38
  br label %__nv_sqrtf.exit52, !dbg !38

262:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %265, label %263, !dbg !38

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #4, !dbg !38
  br label %__nv_sqrtf.exit52, !dbg !38

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #4, !dbg !38
  br label %__nv_sqrtf.exit52, !dbg !38

__nv_sqrtf.exit52:                                ; preds = %258, %260, %263, %265
  %.0.i50 = phi float [ %259, %258 ], [ %261, %260 ], [ %264, %263 ], [ %266, %265 ], !dbg !38
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i53 = icmp eq i32 %267, 0, !dbg !38
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i56 = icmp eq i32 %268, 0, !dbg !38
  br i1 %.not.i53, label %274, label %269, !dbg !38

269:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %272, label %270, !dbg !38

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #4, !dbg !38
  br label %__nv_sqrtf.exit57, !dbg !38

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #4, !dbg !38
  br label %__nv_sqrtf.exit57, !dbg !38

274:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %277, label %275, !dbg !38

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #4, !dbg !38
  br label %__nv_sqrtf.exit57, !dbg !38

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #4, !dbg !38
  br label %__nv_sqrtf.exit57, !dbg !38

__nv_sqrtf.exit57:                                ; preds = %270, %272, %275, %277
  %.0.i55 = phi float [ %271, %270 ], [ %273, %272 ], [ %276, %275 ], [ %278, %277 ], !dbg !38
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i58 = icmp eq i32 %279, 0, !dbg !38
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i61 = icmp eq i32 %280, 0, !dbg !38
  br i1 %.not.i58, label %286, label %281, !dbg !38

281:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %284, label %282, !dbg !38

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #4, !dbg !38
  br label %__nv_sqrtf.exit62, !dbg !38

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #4, !dbg !38
  br label %__nv_sqrtf.exit62, !dbg !38

286:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %289, label %287, !dbg !38

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #4, !dbg !38
  br label %__nv_sqrtf.exit62, !dbg !38

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #4, !dbg !38
  br label %__nv_sqrtf.exit62, !dbg !38

__nv_sqrtf.exit62:                                ; preds = %282, %284, %287, %289
  %.0.i60 = phi float [ %283, %282 ], [ %285, %284 ], [ %288, %287 ], [ %290, %289 ], !dbg !38
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i63 = icmp eq i32 %291, 0, !dbg !38
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i66 = icmp eq i32 %292, 0, !dbg !38
  br i1 %.not.i63, label %298, label %293, !dbg !38

293:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %296, label %294, !dbg !38

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #4, !dbg !38
  br label %__nv_sqrtf.exit67, !dbg !38

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #4, !dbg !38
  br label %__nv_sqrtf.exit67, !dbg !38

298:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %301, label %299, !dbg !38

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #4, !dbg !38
  br label %__nv_sqrtf.exit67, !dbg !38

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #4, !dbg !38
  br label %__nv_sqrtf.exit67, !dbg !38

__nv_sqrtf.exit67:                                ; preds = %294, %296, %299, %301
  %.0.i65 = phi float [ %295, %294 ], [ %297, %296 ], [ %300, %299 ], [ %302, %301 ], !dbg !38
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i68 = icmp eq i32 %303, 0, !dbg !38
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i71 = icmp eq i32 %304, 0, !dbg !38
  br i1 %.not.i68, label %310, label %305, !dbg !38

305:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %308, label %306, !dbg !38

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #4, !dbg !38
  br label %__nv_sqrtf.exit72, !dbg !38

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #4, !dbg !38
  br label %__nv_sqrtf.exit72, !dbg !38

310:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %313, label %311, !dbg !38

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #4, !dbg !38
  br label %__nv_sqrtf.exit72, !dbg !38

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #4, !dbg !38
  br label %__nv_sqrtf.exit72, !dbg !38

__nv_sqrtf.exit72:                                ; preds = %306, %308, %311, %313
  %.0.i70 = phi float [ %307, %306 ], [ %309, %308 ], [ %312, %311 ], [ %314, %313 ], !dbg !38
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i73 = icmp eq i32 %315, 0, !dbg !38
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i76 = icmp eq i32 %316, 0, !dbg !38
  br i1 %.not.i73, label %322, label %317, !dbg !38

317:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %320, label %318, !dbg !38

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #4, !dbg !38
  br label %__nv_sqrtf.exit77, !dbg !38

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #4, !dbg !38
  br label %__nv_sqrtf.exit77, !dbg !38

322:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %325, label %323, !dbg !38

323:                                              ; preds = %322
  %324 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #4, !dbg !38
  br label %__nv_sqrtf.exit77, !dbg !38

325:                                              ; preds = %322
  %326 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #4, !dbg !38
  br label %__nv_sqrtf.exit77, !dbg !38

__nv_sqrtf.exit77:                                ; preds = %318, %320, %323, %325
  %.0.i75 = phi float [ %319, %318 ], [ %321, %320 ], [ %324, %323 ], [ %326, %325 ], !dbg !38
  %327 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !28
  %328 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !30
  %329 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !28
  %330 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !30
  %331 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !28
  %332 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !30
  %333 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !28
  %334 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !30
  %335 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !28
  %336 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !30
  %337 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !28
  %338 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !30
  %339 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !28
  %340 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !30
  %341 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !28
  %342 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !30
  %343 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !28
  %344 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !30
  %345 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !28
  %346 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !30
  %347 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !28
  %348 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !30
  %349 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !28
  %350 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !30
  %351 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !28
  %352 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !30
  %353 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !28
  %354 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !30
  %355 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !28
  %356 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !30
  %357 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !28
  %358 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !30
  %359 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !36
  %360 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !36
  %361 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !36
  %362 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !36
  %363 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !36
  %364 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !36
  %365 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !36
  %366 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !36
  %367 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !36
  %368 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !36
  %369 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !36
  %370 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !36
  %371 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !36
  %372 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !36
  %373 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !36
  %374 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !36
  %375 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !34
  %376 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !34
  %377 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !34
  %378 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !34
  %379 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !34
  %380 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !34
  %381 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !34
  %382 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !34
  %383 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !34
  %384 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !34
  %385 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !34
  %386 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !34
  %387 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !34
  %388 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !34
  %389 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !34
  %390 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !34
  %391 = shl i32 %12, 2, !dbg !17
  %392 = and i32 %391, 60, !dbg !17
  %393 = or disjoint i32 %21, %392, !dbg !18
  %394 = icmp slt i32 %393, 64, !dbg !19
  %395 = lshr i32 %12, 4, !dbg !12
  %396 = and i32 %395, 15, !dbg !12
  %397 = or disjoint i32 %396, %11, !dbg !13
  %398 = or disjoint i32 %397, 48, !dbg !13
  %399 = icmp slt i32 %398, 512, !dbg !14
  %400 = and i1 %399, %394, !dbg !27
  %401 = or disjoint i32 %397, 32, !dbg !13
  %402 = icmp slt i32 %401, 512, !dbg !14
  %403 = and i1 %402, %394, !dbg !27
  %404 = or disjoint i32 %397, 16, !dbg !13
  %405 = icmp slt i32 %404, 512, !dbg !14
  %406 = and i1 %405, %394, !dbg !27
  %407 = icmp slt i32 %397, 512, !dbg !14
  %408 = and i1 %407, %394, !dbg !27
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !39
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !39
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !39
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !39
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !39
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !39
  %416 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !39
  %417 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !39
  %418 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !39
  %419 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #4, !dbg !39
  %420 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #4, !dbg !39
  %421 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #4, !dbg !39
  %422 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #4, !dbg !39
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i70) #4, !dbg !39
  %424 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i75) #4, !dbg !39
  %425 = shl i32 %397, 6, !dbg !40
  %426 = shl i32 %404, 6, !dbg !40
  %427 = shl i32 %401, 6, !dbg !40
  %428 = shl i32 %398, 6, !dbg !40
  %429 = add i32 %393, %425, !dbg !41
  %430 = add i32 %393, %426, !dbg !41
  %431 = add i32 %393, %427, !dbg !41
  %432 = add i32 %393, %428, !dbg !41
  %433 = sext i32 %429 to i64, !dbg !42
  %434 = getelementptr float, ptr addrspace(1) %5, i64 %433, !dbg !42
  %435 = sext i32 %430 to i64, !dbg !42
  %436 = getelementptr float, ptr addrspace(1) %5, i64 %435, !dbg !42
  %437 = sext i32 %431 to i64, !dbg !42
  %438 = getelementptr float, ptr addrspace(1) %5, i64 %437, !dbg !42
  %439 = sext i32 %432 to i64, !dbg !42
  %440 = getelementptr float, ptr addrspace(1) %5, i64 %439, !dbg !42
  %441 = shl i32 %12, 10, !dbg !43
  %442 = and i32 %441, 3072, !dbg !43
  %443 = or disjoint i32 %442, %23, !dbg !43
  %444 = and i32 %391, 1020, !dbg !43
  %445 = lshr exact i32 %442, 4, !dbg !43
  %446 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %445, !dbg !43
  %447 = getelementptr float, ptr addrspace(3) %446, i32 %443, !dbg !43
  %448 = or disjoint i32 %443, 64, !dbg !43
  %449 = lshr i32 %448, 6, !dbg !43
  %450 = getelementptr float, ptr addrspace(3) @global_smem, i32 %449, !dbg !43
  %451 = getelementptr float, ptr addrspace(3) %450, i32 %448, !dbg !43
  %452 = or disjoint i32 %443, 128, !dbg !43
  %453 = lshr i32 %452, 6, !dbg !43
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i32 %453, !dbg !43
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %452, !dbg !43
  %456 = or disjoint i32 %443, 192, !dbg !43
  %457 = lshr i32 %456, 6, !dbg !43
  %458 = getelementptr float, ptr addrspace(3) @global_smem, i32 %457, !dbg !43
  %459 = getelementptr float, ptr addrspace(3) %458, i32 %456, !dbg !43
  %460 = or disjoint i32 %443, 256, !dbg !43
  %461 = lshr i32 %460, 6, !dbg !43
  %462 = getelementptr float, ptr addrspace(3) @global_smem, i32 %461, !dbg !43
  %463 = getelementptr float, ptr addrspace(3) %462, i32 %460, !dbg !43
  %464 = or disjoint i32 %443, 320, !dbg !43
  %465 = lshr i32 %464, 6, !dbg !43
  %466 = getelementptr float, ptr addrspace(3) @global_smem, i32 %465, !dbg !43
  %467 = getelementptr float, ptr addrspace(3) %466, i32 %464, !dbg !43
  %468 = or disjoint i32 %443, 384, !dbg !43
  %469 = lshr i32 %468, 6, !dbg !43
  %470 = getelementptr float, ptr addrspace(3) @global_smem, i32 %469, !dbg !43
  %471 = getelementptr float, ptr addrspace(3) %470, i32 %468, !dbg !43
  %472 = or disjoint i32 %443, 448, !dbg !43
  %473 = lshr i32 %472, 6, !dbg !43
  %474 = getelementptr float, ptr addrspace(3) @global_smem, i32 %473, !dbg !43
  %475 = getelementptr float, ptr addrspace(3) %474, i32 %472, !dbg !43
  %476 = or disjoint i32 %443, 512, !dbg !43
  %477 = lshr i32 %476, 6, !dbg !43
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %477, !dbg !43
  %479 = getelementptr float, ptr addrspace(3) %478, i32 %476, !dbg !43
  %480 = or disjoint i32 %443, 576, !dbg !43
  %481 = lshr i32 %480, 6, !dbg !43
  %482 = getelementptr float, ptr addrspace(3) @global_smem, i32 %481, !dbg !43
  %483 = getelementptr float, ptr addrspace(3) %482, i32 %480, !dbg !43
  %484 = or disjoint i32 %443, 640, !dbg !43
  %485 = lshr i32 %484, 6, !dbg !43
  %486 = getelementptr float, ptr addrspace(3) @global_smem, i32 %485, !dbg !43
  %487 = getelementptr float, ptr addrspace(3) %486, i32 %484, !dbg !43
  %488 = or disjoint i32 %443, 704, !dbg !43
  %489 = lshr i32 %488, 6, !dbg !43
  %490 = getelementptr float, ptr addrspace(3) @global_smem, i32 %489, !dbg !43
  %491 = getelementptr float, ptr addrspace(3) %490, i32 %488, !dbg !43
  %492 = or disjoint i32 %443, 768, !dbg !43
  %493 = lshr i32 %492, 6, !dbg !43
  %494 = getelementptr float, ptr addrspace(3) @global_smem, i32 %493, !dbg !43
  %495 = getelementptr float, ptr addrspace(3) %494, i32 %492, !dbg !43
  %496 = or disjoint i32 %443, 832, !dbg !43
  %497 = lshr i32 %496, 6, !dbg !43
  %498 = getelementptr float, ptr addrspace(3) @global_smem, i32 %497, !dbg !43
  %499 = getelementptr float, ptr addrspace(3) %498, i32 %496, !dbg !43
  %500 = or disjoint i32 %443, 896, !dbg !43
  %501 = lshr i32 %500, 6, !dbg !43
  %502 = getelementptr float, ptr addrspace(3) @global_smem, i32 %501, !dbg !43
  %503 = getelementptr float, ptr addrspace(3) %502, i32 %500, !dbg !43
  %504 = or disjoint i32 %443, 960, !dbg !43
  %505 = lshr i32 %504, 6, !dbg !43
  %506 = getelementptr float, ptr addrspace(3) @global_smem, i32 %505, !dbg !43
  %507 = getelementptr float, ptr addrspace(3) %506, i32 %504, !dbg !43
  %508 = lshr i32 %444, 6, !dbg !43
  %509 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %508, !dbg !43
  %510 = getelementptr inbounds float, ptr addrspace(3) %509, i32 %444, !dbg !43
  %511 = or disjoint i32 %444, 1, !dbg !43
  %512 = getelementptr inbounds float, ptr addrspace(3) %509, i32 %511, !dbg !43
  %513 = or disjoint i32 %444, 2, !dbg !43
  %514 = getelementptr inbounds float, ptr addrspace(3) %509, i32 %513, !dbg !43
  %515 = or disjoint i32 %444, 3, !dbg !43
  %516 = getelementptr inbounds float, ptr addrspace(3) %509, i32 %515, !dbg !43
  %517 = or disjoint i32 %444, 1024, !dbg !43
  %518 = lshr i32 %517, 6, !dbg !43
  %519 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %518, !dbg !43
  %520 = getelementptr inbounds float, ptr addrspace(3) %519, i32 %517, !dbg !43
  %521 = or disjoint i32 %444, 1025, !dbg !43
  %522 = lshr i32 %521, 6, !dbg !43
  %523 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %522, !dbg !43
  %524 = getelementptr inbounds float, ptr addrspace(3) %523, i32 %521, !dbg !43
  %525 = or disjoint i32 %444, 1026, !dbg !43
  %526 = lshr i32 %525, 6, !dbg !43
  %527 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %526, !dbg !43
  %528 = getelementptr inbounds float, ptr addrspace(3) %527, i32 %525, !dbg !43
  %529 = or disjoint i32 %444, 1027, !dbg !43
  %530 = lshr i32 %529, 6, !dbg !43
  %531 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %530, !dbg !43
  %532 = getelementptr inbounds float, ptr addrspace(3) %531, i32 %529, !dbg !43
  %533 = or disjoint i32 %444, 2048, !dbg !43
  %534 = lshr i32 %533, 6, !dbg !43
  %535 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %534, !dbg !43
  %536 = getelementptr inbounds float, ptr addrspace(3) %535, i32 %533, !dbg !43
  %537 = or disjoint i32 %444, 2049, !dbg !43
  %538 = lshr i32 %537, 6, !dbg !43
  %539 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %538, !dbg !43
  %540 = getelementptr inbounds float, ptr addrspace(3) %539, i32 %537, !dbg !43
  %541 = or disjoint i32 %444, 2050, !dbg !43
  %542 = lshr i32 %541, 6, !dbg !43
  %543 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %542, !dbg !43
  %544 = getelementptr inbounds float, ptr addrspace(3) %543, i32 %541, !dbg !43
  %545 = or disjoint i32 %444, 2051, !dbg !43
  %546 = lshr i32 %545, 6, !dbg !43
  %547 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %546, !dbg !43
  %548 = getelementptr inbounds float, ptr addrspace(3) %547, i32 %545, !dbg !43
  %549 = or disjoint i32 %444, 3072, !dbg !43
  %550 = lshr i32 %549, 6, !dbg !43
  %551 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %550, !dbg !43
  %552 = getelementptr inbounds float, ptr addrspace(3) %551, i32 %549, !dbg !43
  %553 = or disjoint i32 %444, 3073, !dbg !43
  %554 = lshr i32 %553, 6, !dbg !43
  %555 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %554, !dbg !43
  %556 = getelementptr inbounds float, ptr addrspace(3) %555, i32 %553, !dbg !43
  %557 = or disjoint i32 %444, 3074, !dbg !43
  %558 = lshr i32 %557, 6, !dbg !43
  %559 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %558, !dbg !43
  %560 = getelementptr inbounds float, ptr addrspace(3) %559, i32 %557, !dbg !43
  %561 = or disjoint i32 %444, 3075, !dbg !43
  %562 = lshr i32 %561, 6, !dbg !43
  %563 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %562, !dbg !43
  %564 = getelementptr inbounds float, ptr addrspace(3) %563, i32 %561, !dbg !43
  %565 = getelementptr i1, ptr addrspace(1) %6, i64 %38, !dbg !44
  %566 = insertelement <4 x i32> poison, i32 %357, i64 0, !dbg !28
  %567 = insertelement <4 x i32> %566, i32 %355, i64 1, !dbg !28
  %568 = insertelement <4 x i32> %567, i32 %353, i64 2, !dbg !28
  %569 = insertelement <4 x i32> %568, i32 %351, i64 3, !dbg !28
  %570 = bitcast <4 x i32> %569 to <4 x float>, !dbg !28
  %571 = insertelement <4 x i32> poison, i32 %358, i64 0, !dbg !30
  %572 = insertelement <4 x i32> %571, i32 %356, i64 1, !dbg !30
  %573 = insertelement <4 x i32> %572, i32 %354, i64 2, !dbg !30
  %574 = insertelement <4 x i32> %573, i32 %352, i64 3, !dbg !30
  %575 = bitcast <4 x i32> %574 to <4 x float>, !dbg !30
  %576 = fsub <4 x float> %570, %575, !dbg !45
  %577 = insertelement <4 x i32> poison, i32 %374, i64 0, !dbg !36
  %578 = insertelement <4 x i32> %577, i32 %373, i64 1, !dbg !36
  %579 = insertelement <4 x i32> %578, i32 %372, i64 2, !dbg !36
  %580 = insertelement <4 x i32> %579, i32 %371, i64 3, !dbg !36
  %581 = bitcast <4 x i32> %580 to <4 x float>, !dbg !36
  %582 = insertelement <4 x i32> poison, i32 %390, i64 0, !dbg !34
  %583 = insertelement <4 x i32> %582, i32 %389, i64 1, !dbg !34
  %584 = insertelement <4 x i32> %583, i32 %388, i64 2, !dbg !34
  %585 = insertelement <4 x i32> %584, i32 %387, i64 3, !dbg !34
  %586 = bitcast <4 x i32> %585 to <4 x float>, !dbg !34
  %587 = insertelement <4 x float> poison, float %409, i64 0, !dbg !46
  %588 = insertelement <4 x float> %587, float %410, i64 1, !dbg !46
  %589 = insertelement <4 x float> %588, float %411, i64 2, !dbg !46
  %590 = insertelement <4 x float> %589, float %412, i64 3, !dbg !46
  %591 = fmul <4 x float> %576, %590, !dbg !46
  %592 = fmul <4 x float> %591, %586, !dbg !47
  %593 = fadd <4 x float> %592, %581, !dbg !48
  %594 = fcmp olt <4 x float> %593, zeroinitializer, !dbg !49
  %595 = select <4 x i1> %594, <4 x float> zeroinitializer, <4 x float> %593, !dbg !53
  %596 = fcmp ole <4 x float> %595, zeroinitializer, !dbg !54
  %597 = extractelement <4 x float> %595, i64 0, !dbg !43
  %598 = bitcast float %597 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %598, i1 true) #4, !dbg !43
  %599 = extractelement <4 x float> %595, i64 1, !dbg !43
  %600 = bitcast float %599 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %451, <1 x i32> %600, i1 true) #4, !dbg !43
  %601 = extractelement <4 x float> %595, i64 2, !dbg !43
  %602 = bitcast float %601 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %602, i1 true) #4, !dbg !43
  %603 = extractelement <4 x float> %595, i64 3, !dbg !43
  %604 = bitcast float %603 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %459, <1 x i32> %604, i1 true) #4, !dbg !43
  %605 = insertelement <4 x i32> poison, i32 %349, i64 0, !dbg !28
  %606 = insertelement <4 x i32> %605, i32 %347, i64 1, !dbg !28
  %607 = insertelement <4 x i32> %606, i32 %345, i64 2, !dbg !28
  %608 = insertelement <4 x i32> %607, i32 %343, i64 3, !dbg !28
  %609 = bitcast <4 x i32> %608 to <4 x float>, !dbg !28
  %610 = insertelement <4 x i32> poison, i32 %350, i64 0, !dbg !30
  %611 = insertelement <4 x i32> %610, i32 %348, i64 1, !dbg !30
  %612 = insertelement <4 x i32> %611, i32 %346, i64 2, !dbg !30
  %613 = insertelement <4 x i32> %612, i32 %344, i64 3, !dbg !30
  %614 = bitcast <4 x i32> %613 to <4 x float>, !dbg !30
  %615 = fsub <4 x float> %609, %614, !dbg !45
  %616 = insertelement <4 x i32> poison, i32 %370, i64 0, !dbg !36
  %617 = insertelement <4 x i32> %616, i32 %369, i64 1, !dbg !36
  %618 = insertelement <4 x i32> %617, i32 %368, i64 2, !dbg !36
  %619 = insertelement <4 x i32> %618, i32 %367, i64 3, !dbg !36
  %620 = bitcast <4 x i32> %619 to <4 x float>, !dbg !36
  %621 = insertelement <4 x i32> poison, i32 %386, i64 0, !dbg !34
  %622 = insertelement <4 x i32> %621, i32 %385, i64 1, !dbg !34
  %623 = insertelement <4 x i32> %622, i32 %384, i64 2, !dbg !34
  %624 = insertelement <4 x i32> %623, i32 %383, i64 3, !dbg !34
  %625 = bitcast <4 x i32> %624 to <4 x float>, !dbg !34
  %626 = insertelement <4 x float> poison, float %413, i64 0, !dbg !46
  %627 = insertelement <4 x float> %626, float %414, i64 1, !dbg !46
  %628 = insertelement <4 x float> %627, float %415, i64 2, !dbg !46
  %629 = insertelement <4 x float> %628, float %416, i64 3, !dbg !46
  %630 = fmul <4 x float> %615, %629, !dbg !46
  %631 = fmul <4 x float> %630, %625, !dbg !47
  %632 = fadd <4 x float> %631, %620, !dbg !48
  %633 = fcmp olt <4 x float> %632, zeroinitializer, !dbg !49
  %634 = select <4 x i1> %633, <4 x float> zeroinitializer, <4 x float> %632, !dbg !53
  %635 = fcmp ole <4 x float> %634, zeroinitializer, !dbg !54
  %636 = extractelement <4 x float> %634, i64 0, !dbg !43
  %637 = bitcast float %636 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %637, i1 true) #4, !dbg !43
  %638 = extractelement <4 x float> %634, i64 1, !dbg !43
  %639 = bitcast float %638 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, <1 x i32> %639, i1 true) #4, !dbg !43
  %640 = extractelement <4 x float> %634, i64 2, !dbg !43
  %641 = bitcast float %640 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %641, i1 true) #4, !dbg !43
  %642 = extractelement <4 x float> %634, i64 3, !dbg !43
  %643 = bitcast float %642 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %643, i1 true) #4, !dbg !43
  %644 = insertelement <4 x i32> poison, i32 %341, i64 0, !dbg !28
  %645 = insertelement <4 x i32> %644, i32 %339, i64 1, !dbg !28
  %646 = insertelement <4 x i32> %645, i32 %337, i64 2, !dbg !28
  %647 = insertelement <4 x i32> %646, i32 %335, i64 3, !dbg !28
  %648 = bitcast <4 x i32> %647 to <4 x float>, !dbg !28
  %649 = insertelement <4 x i32> poison, i32 %342, i64 0, !dbg !30
  %650 = insertelement <4 x i32> %649, i32 %340, i64 1, !dbg !30
  %651 = insertelement <4 x i32> %650, i32 %338, i64 2, !dbg !30
  %652 = insertelement <4 x i32> %651, i32 %336, i64 3, !dbg !30
  %653 = bitcast <4 x i32> %652 to <4 x float>, !dbg !30
  %654 = fsub <4 x float> %648, %653, !dbg !45
  %655 = insertelement <4 x i32> poison, i32 %366, i64 0, !dbg !36
  %656 = insertelement <4 x i32> %655, i32 %365, i64 1, !dbg !36
  %657 = insertelement <4 x i32> %656, i32 %364, i64 2, !dbg !36
  %658 = insertelement <4 x i32> %657, i32 %363, i64 3, !dbg !36
  %659 = bitcast <4 x i32> %658 to <4 x float>, !dbg !36
  %660 = insertelement <4 x i32> poison, i32 %382, i64 0, !dbg !34
  %661 = insertelement <4 x i32> %660, i32 %381, i64 1, !dbg !34
  %662 = insertelement <4 x i32> %661, i32 %380, i64 2, !dbg !34
  %663 = insertelement <4 x i32> %662, i32 %379, i64 3, !dbg !34
  %664 = bitcast <4 x i32> %663 to <4 x float>, !dbg !34
  %665 = insertelement <4 x float> poison, float %417, i64 0, !dbg !46
  %666 = insertelement <4 x float> %665, float %418, i64 1, !dbg !46
  %667 = insertelement <4 x float> %666, float %419, i64 2, !dbg !46
  %668 = insertelement <4 x float> %667, float %420, i64 3, !dbg !46
  %669 = fmul <4 x float> %654, %668, !dbg !46
  %670 = fmul <4 x float> %669, %664, !dbg !47
  %671 = fadd <4 x float> %670, %659, !dbg !48
  %672 = fcmp olt <4 x float> %671, zeroinitializer, !dbg !49
  %673 = select <4 x i1> %672, <4 x float> zeroinitializer, <4 x float> %671, !dbg !53
  %674 = fcmp ole <4 x float> %673, zeroinitializer, !dbg !54
  %675 = extractelement <4 x float> %673, i64 0, !dbg !43
  %676 = bitcast float %675 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %479, <1 x i32> %676, i1 true) #4, !dbg !43
  %677 = extractelement <4 x float> %673, i64 1, !dbg !43
  %678 = bitcast float %677 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %678, i1 true) #4, !dbg !43
  %679 = extractelement <4 x float> %673, i64 2, !dbg !43
  %680 = bitcast float %679 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, <1 x i32> %680, i1 true) #4, !dbg !43
  %681 = extractelement <4 x float> %673, i64 3, !dbg !43
  %682 = bitcast float %681 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %682, i1 true) #4, !dbg !43
  %683 = insertelement <4 x i32> poison, i32 %333, i64 0, !dbg !28
  %684 = insertelement <4 x i32> %683, i32 %331, i64 1, !dbg !28
  %685 = insertelement <4 x i32> %684, i32 %329, i64 2, !dbg !28
  %686 = insertelement <4 x i32> %685, i32 %327, i64 3, !dbg !28
  %687 = bitcast <4 x i32> %686 to <4 x float>, !dbg !28
  %688 = insertelement <4 x i32> poison, i32 %334, i64 0, !dbg !30
  %689 = insertelement <4 x i32> %688, i32 %332, i64 1, !dbg !30
  %690 = insertelement <4 x i32> %689, i32 %330, i64 2, !dbg !30
  %691 = insertelement <4 x i32> %690, i32 %328, i64 3, !dbg !30
  %692 = bitcast <4 x i32> %691 to <4 x float>, !dbg !30
  %693 = fsub <4 x float> %687, %692, !dbg !45
  %694 = insertelement <4 x i32> poison, i32 %362, i64 0, !dbg !36
  %695 = insertelement <4 x i32> %694, i32 %361, i64 1, !dbg !36
  %696 = insertelement <4 x i32> %695, i32 %360, i64 2, !dbg !36
  %697 = insertelement <4 x i32> %696, i32 %359, i64 3, !dbg !36
  %698 = bitcast <4 x i32> %697 to <4 x float>, !dbg !36
  %699 = insertelement <4 x i32> poison, i32 %378, i64 0, !dbg !34
  %700 = insertelement <4 x i32> %699, i32 %377, i64 1, !dbg !34
  %701 = insertelement <4 x i32> %700, i32 %376, i64 2, !dbg !34
  %702 = insertelement <4 x i32> %701, i32 %375, i64 3, !dbg !34
  %703 = bitcast <4 x i32> %702 to <4 x float>, !dbg !34
  %704 = insertelement <4 x float> poison, float %421, i64 0, !dbg !46
  %705 = insertelement <4 x float> %704, float %422, i64 1, !dbg !46
  %706 = insertelement <4 x float> %705, float %423, i64 2, !dbg !46
  %707 = insertelement <4 x float> %706, float %424, i64 3, !dbg !46
  %708 = fmul <4 x float> %693, %707, !dbg !46
  %709 = fmul <4 x float> %708, %703, !dbg !47
  %710 = fadd <4 x float> %709, %698, !dbg !48
  %711 = fcmp olt <4 x float> %710, zeroinitializer, !dbg !49
  %712 = select <4 x i1> %711, <4 x float> zeroinitializer, <4 x float> %710, !dbg !53
  %713 = fcmp ole <4 x float> %712, zeroinitializer, !dbg !54
  %714 = extractelement <4 x float> %712, i64 0, !dbg !43
  %715 = bitcast float %714 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %715, i1 true) #4, !dbg !43
  %716 = extractelement <4 x float> %712, i64 1, !dbg !43
  %717 = bitcast float %716 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %717, i1 true) #4, !dbg !43
  %718 = extractelement <4 x float> %712, i64 2, !dbg !43
  %719 = bitcast float %718 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %719, i1 true) #4, !dbg !43
  %720 = extractelement <4 x float> %712, i64 3, !dbg !43
  %721 = bitcast float %720 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %507, <1 x i32> %721, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %722 = load i32, ptr addrspace(3) %510, align 4, !dbg !43
  %723 = load i32, ptr addrspace(3) %512, align 4, !dbg !43
  %724 = load i32, ptr addrspace(3) %514, align 4, !dbg !43
  %725 = load i32, ptr addrspace(3) %516, align 4, !dbg !43
  %726 = load i32, ptr addrspace(3) %520, align 4, !dbg !43
  %727 = load i32, ptr addrspace(3) %524, align 4, !dbg !43
  %728 = load i32, ptr addrspace(3) %528, align 4, !dbg !43
  %729 = load i32, ptr addrspace(3) %532, align 4, !dbg !43
  %730 = load i32, ptr addrspace(3) %536, align 4, !dbg !43
  %731 = load i32, ptr addrspace(3) %540, align 4, !dbg !43
  %732 = load i32, ptr addrspace(3) %544, align 4, !dbg !43
  %733 = load i32, ptr addrspace(3) %548, align 4, !dbg !43
  %734 = load i32, ptr addrspace(3) %552, align 4, !dbg !43
  %735 = load i32, ptr addrspace(3) %556, align 4, !dbg !43
  %736 = load i32, ptr addrspace(3) %560, align 4, !dbg !43
  %737 = load i32, ptr addrspace(3) %564, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %722, i32 %723, i32 %724, i32 %725, ptr addrspace(1) %434, i1 %408) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %726, i32 %727, i32 %728, i32 %729, ptr addrspace(1) %436, i1 %406) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %730, i32 %731, i32 %732, i32 %733, ptr addrspace(1) %438, i1 %403) #4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %734, i32 %735, i32 %736, i32 %737, ptr addrspace(1) %440, i1 %400) #4, !dbg !43
  %738 = zext <4 x i1> %596 to <4 x i8>, !dbg !55
  %739 = bitcast <4 x i8> %738 to i32, !dbg !55
  %740 = zext <4 x i1> %635 to <4 x i8>, !dbg !55
  %741 = bitcast <4 x i8> %740 to i32, !dbg !55
  %742 = zext <4 x i1> %674 to <4 x i8>, !dbg !55
  %743 = bitcast <4 x i8> %742 to i32, !dbg !55
  %744 = zext <4 x i1> %713 to <4 x i8>, !dbg !55
  %745 = bitcast <4 x i8> %744 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %739, i32 %741, i32 %743, i32 %745, ptr addrspace(1) %565, i1 %46) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm5iormxdcs5jszhs2aydlbrwv7kausmedxsoh2yuumioowga4ce.py", directory: "inductor_cache/m5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 52, column: 33, scope: !7)
!41 = !DILocation(line: 52, column: 30, scope: !7)
!42 = !DILocation(line: 52, column: 25, scope: !7)
!43 = !DILocation(line: 52, column: 45, scope: !7)
!44 = !DILocation(line: 53, column: 25, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 45, column: 19, scope: !7)
!47 = !DILocation(line: 46, column: 20, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 49, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 51, column: 21, scope: !7)
!55 = !DILocation(line: 53, column: 56, scope: !7)
!56 = !DILocation(line: 53, column: 4, scope: !7)
